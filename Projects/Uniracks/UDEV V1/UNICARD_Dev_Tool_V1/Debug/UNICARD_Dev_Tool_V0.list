
UNICARD_Dev_Tool_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020014  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  080201f4  080201f4  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080209a0  080209a0  00040290  2**0
                  CONTENTS
  4 .ARM          00000008  080209a0  080209a0  000309a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080209a8  080209a8  00040290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080209a8  080209a8  000309a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080209ac  080209ac  000309ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  080209b0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013dd4  20000290  08020c40  00040290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014064  08020c40  00044064  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00040290  2**0
                  CONTENTS, READONLY
 12 .comment      0000351b  00000000  00000000  000402c4  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  000437df  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  00043b1c  2**2
                  CONTENTS, READONLY
 15 .iar.debug_frame 000003bf  00000000  00000000  00043b40  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003edee  00000000  00000000  00043eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000895c  00000000  00000000  00082ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003228  00000000  00000000  0008b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002659  00000000  00000000  0008e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000dffd  00000000  00000000  00090ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003dda3  00000000  00000000  0009eece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00147cfb  00000000  00000000  000dcc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000f754  00000000  00000000  0022496c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000080  00000000  00000000  002340c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000290 	.word	0x20000290
 80001fc:	00000000 	.word	0x00000000
 8000200:	080201dc 	.word	0x080201dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000294 	.word	0x20000294
 800021c:	080201dc 	.word	0x080201dc

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f01e fd73 	bl	801ed28 <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f01e fef6 	bl	801f03c <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4947      	ldr	r1, [pc, #284]	; (8000378 <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f015 f8a9 	bl	80153bc <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a40      	ldr	r2, [pc, #256]	; (8000378 <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295
 800028c:	2600      	movs	r6, #0
 800028e:	4c3a      	ldr	r4, [pc, #232]	; (8000378 <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d069      	beq.n	800036c <USBPD_CAD_Process+0xee>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d166      	bne.n	800036c <USBPD_CAD_Process+0xee>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f015 fa16 	bl	80156d4 <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e03e      	b.n	800033e <USBPD_CAD_Process+0xc0>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e02f      	b.n	8000344 <USBPD_CAD_Process+0xc6>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6802      	ldr	r2, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	2901      	cmp	r1, #1
 80002f0:	bf0c      	ite	eq
 80002f2:	2102      	moveq	r1, #2
 80002f4:	2101      	movne	r1, #1
 80002f6:	f361 334e 	bfi	r3, r1, #13, #2
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	6800      	ldr	r0, [r0, #0]
 80002fe:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8000302:	9a01      	ldr	r2, [sp, #4]
 8000304:	6803      	ldr	r3, [r0, #0]
 8000306:	f362 1387 	bfi	r3, r2, #6, #2
 800030a:	680a      	ldr	r2, [r1, #0]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	6808      	ldr	r0, [r1, #0]
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000316:	6003      	str	r3, [r0, #0]
 8000318:	6808      	ldr	r0, [r1, #0]
 800031a:	6801      	ldr	r1, [r0, #0]
 800031c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000320:	2800      	cmp	r0, #0
 8000322:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000326:	6800      	ldr	r0, [r0, #0]
 8000328:	6801      	ldr	r1, [r0, #0]
 800032a:	bf0c      	ite	eq
 800032c:	f021 0108 	biceq.w	r1, r1, #8
 8000330:	f041 0108 	orrne.w	r1, r1, #8
 8000334:	6001      	str	r1, [r0, #0]
 8000336:	b2f0      	uxtb	r0, r6
 8000338:	2168      	movs	r1, #104	; 0x68
 800033a:	f000 f90c 	bl	8000556 <USBPD_PE_Notification>
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	b198      	cbz	r0, 800036c <USBPD_CAD_Process+0xee>
 8000344:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8000348:	685f      	ldr	r7, [r3, #4]
 800034a:	9a01      	ldr	r2, [sp, #4]
 800034c:	f89d 1000 	ldrb.w	r1, [sp]
 8000350:	f8d7 c000 	ldr.w	ip, [r7]
 8000354:	b2f0      	uxtb	r0, r6
 8000356:	47e0      	blx	ip
 8000358:	f89d 0000 	ldrb.w	r0, [sp]
 800035c:	2801      	cmp	r0, #1
 800035e:	bf18      	it	ne
 8000360:	2803      	cmpne	r0, #3
 8000362:	d103      	bne.n	800036c <USBPD_CAD_Process+0xee>
 8000364:	2169      	movs	r1, #105	; 0x69
 8000366:	b2f0      	uxtb	r0, r6
 8000368:	f000 f8f5 	bl	8000556 <USBPD_PE_Notification>
 800036c:	1c76      	adds	r6, r6, #1
 800036e:	2e02      	cmp	r6, #2
 8000370:	d98e      	bls.n	8000290 <USBPD_CAD_Process+0x12>
 8000372:	4628      	mov	r0, r5
 8000374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000378 <.text_6>:
 8000378:	200002ac 	.word	0x200002ac

0800037c <USBPD_CAD_AssertRd>:
 800037c:	b510      	push	{r4, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	f016 fd34 	bl	8016dec <USBPDM1_DeAssertRp>
 8000384:	4620      	mov	r0, r4
 8000386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800038a:	f016 bd3b 	b.w	8016e04 <USBPDM1_AssertRd>

0800038e <USBPD_CAD_AssertRp>:
 800038e:	b510      	push	{r4, lr}
 8000390:	4604      	mov	r4, r0
 8000392:	f016 fdbd 	bl	8016f10 <USBPDM1_DeAssertRd>
 8000396:	4620      	mov	r0, r4
 8000398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800039c:	f016 bc90 	b.w	8016cc0 <USBPDM1_AssertRp>

080003a0 <USBPD_CAD_EnterErrorRecovery>:
 80003a0:	f015 b8ee 	b.w	8015580 <CAD_Enter_ErrorRecovery>

080003a4 <USBPD_CAD_SRC_SetRpResistor>:
 80003a4:	b510      	push	{r4, lr}
 80003a6:	f015 f947 	bl	8015638 <CAD_Set_ResistorRp>
 80003aa:	2404      	movs	r4, #4
 80003ac:	b900      	cbnz	r0, 80003b0 <USBPD_CAD_SRC_SetRpResistor+0xc>
 80003ae:	2400      	movs	r4, #0
 80003b0:	4620      	mov	r0, r4
 80003b2:	bd10      	pop	{r4, pc}

080003b4 <USBPD_CAD_SetRpResistor>:
 80003b4:	e7f6      	b.n	80003a4 <USBPD_CAD_SRC_SetRpResistor>

080003b6 <USBPD_CAD_GetMemoryConsumption>:
 80003b6:	2024      	movs	r0, #36	; 0x24
 80003b8:	4770      	bx	lr
	...

080003bc <USBPD_PE_Init>:
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c0:	460e      	mov	r6, r1
 80003c2:	4680      	mov	r8, r0
 80003c4:	6870      	ldr	r0, [r6, #4]
 80003c6:	4617      	mov	r7, r2
 80003c8:	461d      	mov	r5, r3
 80003ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80003ce:	b108      	cbz	r0, 80003d4 <USBPD_PE_Init+0x18>
 80003d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80003d2:	b108      	cbz	r0, 80003d8 <USBPD_PE_Init+0x1c>
 80003d4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80003d6:	b908      	cbnz	r0, 80003dc <USBPD_PE_Init+0x20>
 80003d8:	271b      	movs	r7, #27
 80003da:	e042      	b.n	8000462 <USBPD_PE_Init+0xa6>
 80003dc:	f1b8 0f03 	cmp.w	r8, #3
 80003e0:	bf28      	it	cs
 80003e2:	2717      	movcs	r7, #23
 80003e4:	d23d      	bcs.n	8000462 <USBPD_PE_Init+0xa6>
 80003e6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80003ea:	f01e fc9d 	bl	801ed28 <malloc>
 80003ee:	0004      	movs	r4, r0
 80003f0:	bf08      	it	eq
 80003f2:	2716      	moveq	r7, #22
 80003f4:	d035      	beq.n	8000462 <USBPD_PE_Init+0xa6>
 80003f6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80003fa:	f01e fe1f 	bl	801f03c <__aeabi_memclr>
 80003fe:	f8df 09ac 	ldr.w	r0, [pc, #2476]	; 8000dac <.text_47>
 8000402:	4641      	mov	r1, r8
 8000404:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8000408:	6026      	str	r6, [r4, #0]
 800040a:	6067      	str	r7, [r4, #4]
 800040c:	f884 8010 	strb.w	r8, [r4, #16]
 8000410:	60a5      	str	r5, [r4, #8]
 8000412:	f204 438e 	addw	r3, r4, #1166	; 0x48e
 8000416:	f204 2281 	addw	r2, r4, #641	; 0x281
 800041a:	4631      	mov	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f004 fd92 	bl	8004f46 <USBPD_PRL_Init>
 8000422:	0007      	movs	r7, r0
 8000424:	d11d      	bne.n	8000462 <USBPD_PE_Init+0xa6>
 8000426:	6820      	ldr	r0, [r4, #0]
 8000428:	6841      	ldr	r1, [r0, #4]
 800042a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800042e:	2800      	cmp	r0, #0
 8000430:	6860      	ldr	r0, [r4, #4]
 8000432:	6801      	ldr	r1, [r0, #0]
 8000434:	d004      	beq.n	8000440 <USBPD_PE_Init+0x84>
 8000436:	f041 0108 	orr.w	r1, r1, #8
 800043a:	6001      	str	r1, [r0, #0]
 800043c:	2201      	movs	r2, #1
 800043e:	e003      	b.n	8000448 <USBPD_PE_Init+0x8c>
 8000440:	f021 0108 	bic.w	r1, r1, #8
 8000444:	6001      	str	r1, [r0, #0]
 8000446:	2200      	movs	r2, #0
 8000448:	7933      	ldrb	r3, [r6, #4]
 800044a:	f003 0303 	and.w	r3, r3, #3
 800044e:	4611      	mov	r1, r2
 8000450:	4640      	mov	r0, r8
 8000452:	f004 fda6 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000456:	7931      	ldrb	r1, [r6, #4]
 8000458:	f001 0103 	and.w	r1, r1, #3
 800045c:	4640      	mov	r0, r8
 800045e:	f004 fdd1 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000462:	4638      	mov	r0, r7
 8000464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000468 <USBPD_PE_TimerCounter>:
 8000468:	f8df 1940 	ldr.w	r1, [pc, #2368]	; 8000dac <.text_47>
 800046c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000470:	8bc1      	ldrh	r1, [r0, #30]
 8000472:	044a      	lsls	r2, r1, #17
 8000474:	d002      	beq.n	800047c <USBPD_PE_TimerCounter+0x14>
 8000476:	8bc1      	ldrh	r1, [r0, #30]
 8000478:	1e4a      	subs	r2, r1, #1
 800047a:	83c2      	strh	r2, [r0, #30]
 800047c:	8c01      	ldrh	r1, [r0, #32]
 800047e:	044a      	lsls	r2, r1, #17
 8000480:	d002      	beq.n	8000488 <USBPD_PE_TimerCounter+0x20>
 8000482:	8c01      	ldrh	r1, [r0, #32]
 8000484:	1e4a      	subs	r2, r1, #1
 8000486:	8402      	strh	r2, [r0, #32]
 8000488:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 800048a:	044a      	lsls	r2, r1, #17
 800048c:	d002      	beq.n	8000494 <USBPD_PE_TimerCounter+0x2c>
 800048e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 8000490:	1e4a      	subs	r2, r1, #1
 8000492:	84c2      	strh	r2, [r0, #38]	; 0x26
 8000494:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 8000496:	044a      	lsls	r2, r1, #17
 8000498:	d002      	beq.n	80004a0 <USBPD_PE_TimerCounter+0x38>
 800049a:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 800049c:	1e4a      	subs	r2, r1, #1
 800049e:	8442      	strh	r2, [r0, #34]	; 0x22
 80004a0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80004a2:	044a      	lsls	r2, r1, #17
 80004a4:	d002      	beq.n	80004ac <USBPD_PE_TimerCounter+0x44>
 80004a6:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80004a8:	1e4a      	subs	r2, r1, #1
 80004aa:	8482      	strh	r2, [r0, #36]	; 0x24
 80004ac:	4770      	bx	lr

080004ae <USBPD_PE_TimerCounteUpdate>:
 80004ae:	b538      	push	{r3, r4, r5, lr}
 80004b0:	460c      	mov	r4, r1
 80004b2:	f8df 18f8 	ldr.w	r1, [pc, #2296]	; 8000dac <.text_47>
 80004b6:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 80004ba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80004be:	da22      	bge.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004c0:	8be8      	ldrh	r0, [r5, #30]
 80004c2:	0441      	lsls	r1, r0, #17
 80004c4:	d003      	beq.n	80004ce <USBPD_PE_TimerCounteUpdate+0x20>
 80004c6:	8be8      	ldrh	r0, [r5, #30]
 80004c8:	f000 f81e 	bl	8000508 <.text_8>
 80004cc:	83e8      	strh	r0, [r5, #30]
 80004ce:	8c28      	ldrh	r0, [r5, #32]
 80004d0:	0441      	lsls	r1, r0, #17
 80004d2:	d003      	beq.n	80004dc <USBPD_PE_TimerCounteUpdate+0x2e>
 80004d4:	8c28      	ldrh	r0, [r5, #32]
 80004d6:	f000 f817 	bl	8000508 <.text_8>
 80004da:	8428      	strh	r0, [r5, #32]
 80004dc:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80004de:	0441      	lsls	r1, r0, #17
 80004e0:	d003      	beq.n	80004ea <USBPD_PE_TimerCounteUpdate+0x3c>
 80004e2:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80004e4:	f000 f810 	bl	8000508 <.text_8>
 80004e8:	84e8      	strh	r0, [r5, #38]	; 0x26
 80004ea:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80004ec:	0441      	lsls	r1, r0, #17
 80004ee:	d003      	beq.n	80004f8 <USBPD_PE_TimerCounteUpdate+0x4a>
 80004f0:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80004f2:	f000 f809 	bl	8000508 <.text_8>
 80004f6:	8468      	strh	r0, [r5, #34]	; 0x22
 80004f8:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 80004fa:	0441      	lsls	r1, r0, #17
 80004fc:	d003      	beq.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004fe:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8000500:	f000 f802 	bl	8000508 <.text_8>
 8000504:	84a8      	strh	r0, [r5, #36]	; 0x24
 8000506:	bd31      	pop	{r0, r4, r5, pc}

08000508 <.text_8>:
 8000508:	4621      	mov	r1, r4
 800050a:	f000 bef9 	b.w	8001300 <PE_UpdateTimer>

0800050e <USBPD_PE_IsCableConnected>:
 800050e:	f8df 289c 	ldr.w	r2, [pc, #2204]	; 8000dac <.text_47>
 8000512:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000516:	6842      	ldr	r2, [r0, #4]
 8000518:	6813      	ldr	r3, [r2, #0]
 800051a:	f361 330c 	bfi	r3, r1, #12, #1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	2248      	movs	r2, #72	; 0x48
 8000522:	7442      	strb	r2, [r0, #17]
 8000524:	4770      	bx	lr

08000526 <USBPD_PE_StateMachine_Reset>:
 8000526:	f8df 2884 	ldr.w	r2, [pc, #2180]	; 8000dac <.text_47>
 800052a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800052e:	2148      	movs	r1, #72	; 0x48
 8000530:	7441      	strb	r1, [r0, #17]
 8000532:	4770      	bx	lr

08000534 <USBPD_PE_StateMachine_Stop>:
 8000534:	f005 b81f 	b.w	8005576 <USBPD_PRL_Stop>

08000538 <USBPD_PE_StateMachine_DRP>:
 8000538:	f8df 1870 	ldr.w	r1, [pc, #2160]	; 8000dac <.text_47>
 800053c:	4602      	mov	r2, r0
 800053e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	680a      	ldr	r2, [r1, #0]
 8000546:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800054a:	2900      	cmp	r1, #0
 800054c:	bf18      	it	ne
 800054e:	f002 b9ed 	bne.w	800292c <USBPD_PE_StateMachine_SRC>
 8000552:	f001 bbcd 	b.w	8001cf0 <USBPD_PE_StateMachine_SNK>

08000556 <USBPD_PE_Notification>:
 8000556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000558:	2803      	cmp	r0, #3
 800055a:	4604      	mov	r4, r0
 800055c:	460d      	mov	r5, r1
 800055e:	d214      	bcs.n	800058a <__iar_annotation$$tailcall+0x2>
 8000560:	2600      	movs	r6, #0
 8000562:	9600      	str	r6, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	f8df 7848 	ldr.w	r7, [pc, #2120]	; 8000db0 <.text_48>
 800056a:	683e      	ldr	r6, [r7, #0]
 800056c:	462a      	mov	r2, r5
 800056e:	4621      	mov	r1, r4
 8000570:	2009      	movs	r0, #9
 8000572:	47b0      	blx	r6
 8000574:	f8df 2834 	ldr.w	r2, [pc, #2100]	; 8000dac <.text_47>
 8000578:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800057c:	689a      	ldr	r2, [r3, #8]
 800057e:	68d3      	ldr	r3, [r2, #12]
 8000580:	4629      	mov	r1, r5
 8000582:	4620      	mov	r0, r4
 8000584:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

08000588 <__iar_annotation$$tailcall>:
 8000588:	4718      	bx	r3
 800058a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800058c <USBPD_PE_InitVDM_Callback>:
 800058c:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 8000dac <.text_47>
 8000590:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000594:	60c1      	str	r1, [r0, #12]
 8000596:	4770      	bx	lr

08000598 <USBPD_PE_Request_HardReset>:
 8000598:	b580      	push	{r7, lr}
 800059a:	f8df 1810 	ldr.w	r1, [pc, #2064]	; 8000dac <.text_47>
 800059e:	4602      	mov	r2, r0
 80005a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80005a4:	230f      	movs	r3, #15
 80005a6:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
 80005aa:	6889      	ldr	r1, [r1, #8]
 80005ac:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80005ae:	4790      	blx	r2
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd02      	pop	{r1, pc}

080005b4 <USBPD_PE_Request_CableReset>:
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	f000 fbe8 	bl	8000d8a <.text_45>
 80005ba:	6853      	ldr	r3, [r2, #4]
 80005bc:	681c      	ldr	r4, [r3, #0]
 80005be:	f248 7108 	movw	r1, #34568	; 0x8708
 80005c2:	400c      	ands	r4, r1
 80005c4:	f248 3508 	movw	r5, #33544	; 0x8308
 80005c8:	42ac      	cmp	r4, r5
 80005ca:	d105      	bne.n	80005d8 <USBPD_PE_Request_CableReset+0x24>
 80005cc:	6891      	ldr	r1, [r2, #8]
 80005ce:	2399      	movs	r3, #153	; 0x99
 80005d0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 80005d4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80005d6:	4790      	blx	r2
 80005d8:	2010      	movs	r0, #16
 80005da:	bd32      	pop	{r1, r4, r5, pc}

080005dc <USBPD_PE_Request_CtrlMessage>:
 80005dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e0:	4680      	mov	r8, r0
 80005e2:	460c      	mov	r4, r1
 80005e4:	f8df 07c4 	ldr.w	r0, [pc, #1988]	; 8000dac <.text_47>
 80005e8:	b093      	sub	sp, #76	; 0x4c
 80005ea:	4641      	mov	r1, r8
 80005ec:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80005f0:	f8df 17c0 	ldr.w	r1, [pc, #1984]	; 8000db4 <.text_49>
 80005f4:	4617      	mov	r7, r2
 80005f6:	4668      	mov	r0, sp
 80005f8:	224c      	movs	r2, #76	; 0x4c
 80005fa:	f01e fd1d 	bl	801f038 <__aeabi_memcpy>
 80005fe:	f105 0132 	add.w	r1, r5, #50	; 0x32
 8000602:	2600      	movs	r6, #0
 8000604:	7808      	ldrb	r0, [r1, #0]
 8000606:	b920      	cbnz	r0, 8000612 <USBPD_PE_Request_CtrlMessage+0x36>
 8000608:	6868      	ldr	r0, [r5, #4]
 800060a:	6802      	ldr	r2, [r0, #0]
 800060c:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8000610:	b908      	cbnz	r0, 8000616 <USBPD_PE_Request_CtrlMessage+0x3a>
 8000612:	2603      	movs	r6, #3
 8000614:	e07f      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 8000616:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800061a:	6828      	ldr	r0, [r5, #0]
 800061c:	f8dc e000 	ldr.w	lr, [ip]
 8000620:	6842      	ldr	r2, [r0, #4]
 8000622:	6868      	ldr	r0, [r5, #4]
 8000624:	6803      	ldr	r3, [r0, #0]
 8000626:	f3c3 0080 	ubfx	r0, r3, #2, #1
 800062a:	f3ce 2c02 	ubfx	ip, lr, #8, #3
 800062e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8000632:	f89e 9000 	ldrb.w	r9, [lr]
 8000636:	f009 0903 	and.w	r9, r9, #3
 800063a:	08d2      	lsrs	r2, r2, #3
 800063c:	2800      	cmp	r0, #0
 800063e:	bf07      	ittee	eq
 8000640:	2002      	moveq	r0, #2
 8000642:	2300      	moveq	r3, #0
 8000644:	2000      	movne	r0, #0
 8000646:	2304      	movne	r3, #4
 8000648:	f1bc 0f03 	cmp.w	ip, #3
 800064c:	bf0c      	ite	eq
 800064e:	f04f 0c08 	moveq.w	ip, #8
 8000652:	46b4      	movne	ip, r6
 8000654:	f1b9 0f02 	cmp.w	r9, #2
 8000658:	f002 0201 	and.w	r2, r2, #1
 800065c:	bf0c      	ite	eq
 800065e:	f04f 0e40 	moveq.w	lr, #64	; 0x40
 8000662:	46b6      	movne	lr, r6
 8000664:	4302      	orrs	r2, r0
 8000666:	431a      	orrs	r2, r3
 8000668:	ea4c 0202 	orr.w	r2, ip, r2
 800066c:	ea4e 0202 	orr.w	r2, lr, r2
 8000670:	f012 0f03 	tst.w	r2, #3
 8000674:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000678:	bf18      	it	ne
 800067a:	f042 0210 	orrne.w	r2, r2, #16
 800067e:	f012 0f05 	tst.w	r2, #5
 8000682:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8000686:	bf18      	it	ne
 8000688:	f042 0220 	orrne.w	r2, r2, #32
 800068c:	4002      	ands	r2, r0
 800068e:	4282      	cmp	r2, r0
 8000690:	d118      	bne.n	80006c4 <USBPD_PE_Request_CtrlMessage+0xe8>
 8000692:	2c05      	cmp	r4, #5
 8000694:	704e      	strb	r6, [r1, #1]
 8000696:	f205 225e 	addw	r2, r5, #606	; 0x25e
 800069a:	d02e      	beq.n	80006fa <USBPD_PE_Request_CtrlMessage+0x11e>
 800069c:	2c0b      	cmp	r4, #11
 800069e:	d00e      	beq.n	80006be <USBPD_PE_Request_CtrlMessage+0xe2>
 80006a0:	2c0d      	cmp	r4, #13
 80006a2:	d028      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006a4:	2c11      	cmp	r4, #17
 80006a6:	d00f      	beq.n	80006c8 <USBPD_PE_Request_CtrlMessage+0xec>
 80006a8:	2c12      	cmp	r4, #18
 80006aa:	d012      	beq.n	80006d2 <USBPD_PE_Request_CtrlMessage+0xf6>
 80006ac:	2c14      	cmp	r4, #20
 80006ae:	d012      	beq.n	80006d6 <USBPD_PE_Request_CtrlMessage+0xfa>
 80006b0:	2c15      	cmp	r4, #21
 80006b2:	d017      	beq.n	80006e4 <USBPD_PE_Request_CtrlMessage+0x108>
 80006b4:	2c16      	cmp	r4, #22
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_CtrlMessage+0xf0>
 80006b8:	2c18      	cmp	r4, #24
 80006ba:	d01c      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006bc:	e01f      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006be:	68af      	ldr	r7, [r5, #8]
 80006c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006c2:	b9e0      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006c4:	2602      	movs	r6, #2
 80006c6:	e026      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006c8:	2011      	movs	r0, #17
 80006ca:	e017      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006cc:	2716      	movs	r7, #22
 80006ce:	7017      	strb	r7, [r2, #0]
 80006d0:	e015      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006d2:	2012      	movs	r0, #18
 80006d4:	e012      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006d6:	6828      	ldr	r0, [r5, #0]
 80006d8:	8907      	ldrh	r7, [r0, #8]
 80006da:	f3c7 0080 	ubfx	r0, r7, #2, #1
 80006de:	b970      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006e0:	2610      	movs	r6, #16
 80006e2:	e018      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006e4:	6828      	ldr	r0, [r5, #0]
 80006e6:	8907      	ldrh	r7, [r0, #8]
 80006e8:	f3c7 10c0 	ubfx	r0, r7, #7, #1
 80006ec:	b908      	cbnz	r0, 80006f2 <USBPD_PE_Request_CtrlMessage+0x116>
 80006ee:	2010      	movs	r0, #16
 80006f0:	e012      	b.n	8000718 <USBPD_PE_Request_CtrlMessage+0x13c>
 80006f2:	2015      	movs	r0, #21
 80006f4:	e002      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006f6:	704f      	strb	r7, [r1, #1]
 80006f8:	e001      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006fa:	2005      	movs	r0, #5
 80006fc:	7010      	strb	r0, [r2, #0]
 80006fe:	eb0d 0703 	add.w	r7, sp, r3
 8000702:	7878      	ldrb	r0, [r7, #1]
 8000704:	7050      	strb	r0, [r2, #1]
 8000706:	eb0d 0203 	add.w	r2, sp, r3
 800070a:	7890      	ldrb	r0, [r2, #2]
 800070c:	7008      	strb	r0, [r1, #0]
 800070e:	4640      	mov	r0, r8
 8000710:	68a9      	ldr	r1, [r5, #8]
 8000712:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000714:	4790      	blx	r2
 8000716:	4630      	mov	r0, r6
 8000718:	b013      	add	sp, #76	; 0x4c
 800071a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800071e <USBPD_PE_Request_DataMessage>:
 800071e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000720:	f000 f85f 	bl	80007e2 <.text_20>
 8000724:	b923      	cbnz	r3, 8000730 <USBPD_PE_Request_DataMessage+0x12>
 8000726:	686b      	ldr	r3, [r5, #4]
 8000728:	681f      	ldr	r7, [r3, #0]
 800072a:	f3c7 3300 	ubfx	r3, r7, #12, #1
 800072e:	b90b      	cbnz	r3, 8000734 <USBPD_PE_Request_DataMessage+0x16>
 8000730:	2403      	movs	r4, #3
 8000732:	e01a      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000734:	2300      	movs	r3, #0
 8000736:	7073      	strb	r3, [r6, #1]
 8000738:	2901      	cmp	r1, #1
 800073a:	f240 3302 	movw	r3, #770	; 0x302
 800073e:	f240 7703 	movw	r7, #1795	; 0x703
 8000742:	d004      	beq.n	800074e <USBPD_PE_Request_DataMessage+0x30>
 8000744:	2906      	cmp	r1, #6
 8000746:	d012      	beq.n	800076e <USBPD_PE_Request_DataMessage+0x50>
 8000748:	2907      	cmp	r1, #7
 800074a:	d01a      	beq.n	8000782 <USBPD_PE_Request_DataMessage+0x64>
 800074c:	e025      	b.n	800079a <USBPD_PE_Request_DataMessage+0x7c>
 800074e:	6869      	ldr	r1, [r5, #4]
 8000750:	680a      	ldr	r2, [r1, #0]
 8000752:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8000756:	b141      	cbz	r1, 800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000758:	2101      	movs	r1, #1
 800075a:	f885 125f 	strb.w	r1, [r5, #607]	; 0x25f
 800075e:	2207      	movs	r2, #7
 8000760:	7032      	strb	r2, [r6, #0]
 8000762:	68a9      	ldr	r1, [r5, #8]
 8000764:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000766:	4790      	blx	r2
 8000768:	2400      	movs	r4, #0
 800076a:	4620      	mov	r0, r4
 800076c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800076e:	6869      	ldr	r1, [r5, #4]
 8000770:	6809      	ldr	r1, [r1, #0]
 8000772:	400f      	ands	r7, r1
 8000774:	429f      	cmp	r7, r3
 8000776:	d1f8      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	62aa      	str	r2, [r5, #40]	; 0x28
 800077c:	212b      	movs	r1, #43	; 0x2b
 800077e:	7031      	strb	r1, [r6, #0]
 8000780:	e7ef      	b.n	8000762 <USBPD_PE_Request_DataMessage+0x44>
 8000782:	6869      	ldr	r1, [r5, #4]
 8000784:	6809      	ldr	r1, [r1, #0]
 8000786:	400f      	ands	r7, r1
 8000788:	429f      	cmp	r7, r3
 800078a:	d1ee      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 800078c:	6812      	ldr	r2, [r2, #0]
 800078e:	62aa      	str	r2, [r5, #40]	; 0x28
 8000790:	215d      	movs	r1, #93	; 0x5d
 8000792:	f885 125f 	strb.w	r1, [r5, #607]	; 0x25f
 8000796:	2262      	movs	r2, #98	; 0x62
 8000798:	e7e2      	b.n	8000760 <USBPD_PE_Request_DataMessage+0x42>
 800079a:	2410      	movs	r4, #16
 800079c:	e7e5      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>

0800079e <USBPD_PE_Send_Request>:
 800079e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a0:	f000 f81f 	bl	80007e2 <.text_20>
 80007a4:	b923      	cbnz	r3, 80007b0 <USBPD_PE_Send_Request+0x12>
 80007a6:	686b      	ldr	r3, [r5, #4]
 80007a8:	681f      	ldr	r7, [r3, #0]
 80007aa:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80007ae:	b90b      	cbnz	r3, 80007b4 <USBPD_PE_Send_Request+0x16>
 80007b0:	2403      	movs	r4, #3
 80007b2:	e014      	b.n	80007de <USBPD_PE_Send_Request+0x40>
 80007b4:	686f      	ldr	r7, [r5, #4]
 80007b6:	683f      	ldr	r7, [r7, #0]
 80007b8:	f240 7304 	movw	r3, #1796	; 0x704
 80007bc:	403b      	ands	r3, r7
 80007be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80007c2:	d10c      	bne.n	80007de <USBPD_PE_Send_Request+0x40>
 80007c4:	2445      	movs	r4, #69	; 0x45
 80007c6:	7034      	strb	r4, [r6, #0]
 80007c8:	61a9      	str	r1, [r5, #24]
 80007ca:	2400      	movs	r4, #0
 80007cc:	6969      	ldr	r1, [r5, #20]
 80007ce:	f362 01c4 	bfi	r1, r2, #3, #2
 80007d2:	6169      	str	r1, [r5, #20]
 80007d4:	2200      	movs	r2, #0
 80007d6:	7072      	strb	r2, [r6, #1]
 80007d8:	68a9      	ldr	r1, [r5, #8]
 80007da:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80007dc:	4790      	blx	r2
 80007de:	4620      	mov	r0, r4
 80007e0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080007e2 <.text_20>:
 80007e2:	f8df 3be4 	ldr.w	r3, [pc, #3044]	; 80013c8 <.text_70>
 80007e6:	4604      	mov	r4, r0
 80007e8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80007ec:	f105 0632 	add.w	r6, r5, #50	; 0x32
 80007f0:	2402      	movs	r4, #2
 80007f2:	7833      	ldrb	r3, [r6, #0]
 80007f4:	4770      	bx	lr

080007f6 <USBPD_PE_SendExtendedMessage>:
 80007f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007fa:	4681      	mov	r9, r0
 80007fc:	468a      	mov	sl, r1
 80007fe:	f8df 0bc8 	ldr.w	r0, [pc, #3016]	; 80013c8 <.text_70>
 8000802:	4649      	mov	r1, r9
 8000804:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8000808:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800080c:	469b      	mov	fp, r3
 800080e:	2500      	movs	r5, #0
 8000810:	b920      	cbnz	r0, 800081c <USBPD_PE_SendExtendedMessage+0x26>
 8000812:	6860      	ldr	r0, [r4, #4]
 8000814:	6801      	ldr	r1, [r0, #0]
 8000816:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800081a:	b908      	cbnz	r0, 8000820 <USBPD_PE_SendExtendedMessage+0x2a>
 800081c:	2503      	movs	r5, #3
 800081e:	e066      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000820:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8000824:	2803      	cmp	r0, #3
 8000826:	d10d      	bne.n	8000844 <USBPD_PE_SendExtendedMessage+0x4e>
 8000828:	6860      	ldr	r0, [r4, #4]
 800082a:	7801      	ldrb	r1, [r0, #0]
 800082c:	f001 0103 	and.w	r1, r1, #3
 8000830:	2901      	cmp	r1, #1
 8000832:	bf98      	it	ls
 8000834:	2501      	movls	r5, #1
 8000836:	d95a      	bls.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000838:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800083c:	f240 1105 	movw	r1, #261	; 0x105
 8000840:	4588      	cmp	r8, r1
 8000842:	d301      	bcc.n	8000848 <USBPD_PE_SendExtendedMessage+0x52>
 8000844:	2502      	movs	r5, #2
 8000846:	e052      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000848:	f88d 2000 	strb.w	r2, [sp]
 800084c:	f204 265d 	addw	r6, r4, #605	; 0x25d
 8000850:	6960      	ldr	r0, [r4, #20]
 8000852:	f020 0020 	bic.w	r0, r0, #32
 8000856:	6160      	str	r0, [r4, #20]
 8000858:	f89d 0000 	ldrb.w	r0, [sp]
 800085c:	2803      	cmp	r0, #3
 800085e:	d008      	beq.n	8000872 <USBPD_PE_SendExtendedMessage+0x7c>
 8000860:	2804      	cmp	r0, #4
 8000862:	d018      	beq.n	8000896 <USBPD_PE_SendExtendedMessage+0xa0>
 8000864:	2806      	cmp	r0, #6
 8000866:	d01d      	beq.n	80008a4 <USBPD_PE_SendExtendedMessage+0xae>
 8000868:	2808      	cmp	r0, #8
 800086a:	d01d      	beq.n	80008a8 <USBPD_PE_SendExtendedMessage+0xb2>
 800086c:	280a      	cmp	r0, #10
 800086e:	d01e      	beq.n	80008ae <USBPD_PE_SendExtendedMessage+0xb8>
 8000870:	e020      	b.n	80008b4 <USBPD_PE_SendExtendedMessage+0xbe>
 8000872:	210c      	movs	r1, #12
 8000874:	70b1      	strb	r1, [r6, #2]
 8000876:	6960      	ldr	r0, [r4, #20]
 8000878:	f040 0020 	orr.w	r0, r0, #32
 800087c:	6160      	str	r0, [r4, #20]
 800087e:	ea5f 0008 	movs.w	r0, r8
 8000882:	d025      	beq.n	80008d0 <USBPD_PE_SendExtendedMessage+0xda>
 8000884:	4648      	mov	r0, r9
 8000886:	f000 fa86 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800088a:	2700      	movs	r7, #0
 800088c:	2801      	cmp	r0, #1
 800088e:	bf08      	it	eq
 8000890:	2704      	moveq	r7, #4
 8000892:	2000      	movs	r0, #0
 8000894:	e017      	b.n	80008c6 <USBPD_PE_SendExtendedMessage+0xd0>
 8000896:	200d      	movs	r0, #13
 8000898:	70b0      	strb	r0, [r6, #2]
 800089a:	6961      	ldr	r1, [r4, #20]
 800089c:	f041 0120 	orr.w	r1, r1, #32
 80008a0:	6161      	str	r1, [r4, #20]
 80008a2:	e7ec      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008a4:	200e      	movs	r0, #14
 80008a6:	e7f7      	b.n	8000898 <USBPD_PE_SendExtendedMessage+0xa2>
 80008a8:	205b      	movs	r0, #91	; 0x5b
 80008aa:	70b0      	strb	r0, [r6, #2]
 80008ac:	e7e7      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008ae:	215c      	movs	r1, #92	; 0x5c
 80008b0:	70b1      	strb	r1, [r6, #2]
 80008b2:	e7e4      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008b4:	2510      	movs	r5, #16
 80008b6:	e01a      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 80008b8:	183a      	adds	r2, r7, r0
 80008ba:	f81b 1000 	ldrb.w	r1, [fp, r0]
 80008be:	4422      	add	r2, r4
 80008c0:	1c40      	adds	r0, r0, #1
 80008c2:	f882 1385 	strb.w	r1, [r2, #901]	; 0x385
 80008c6:	4540      	cmp	r0, r8
 80008c8:	d3f6      	bcc.n	80008b8 <USBPD_PE_SendExtendedMessage+0xc2>
 80008ca:	f8a4 8490 	strh.w	r8, [r4, #1168]	; 0x490
 80008ce:	e001      	b.n	80008d4 <USBPD_PE_SendExtendedMessage+0xde>
 80008d0:	f8a4 5490 	strh.w	r5, [r4, #1168]	; 0x490
 80008d4:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80008d8:	2231      	movs	r2, #49	; 0x31
 80008da:	f880 a001 	strb.w	sl, [r0, #1]
 80008de:	f89d 1000 	ldrb.w	r1, [sp]
 80008e2:	7031      	strb	r1, [r6, #0]
 80008e4:	7002      	strb	r2, [r0, #0]
 80008e6:	4648      	mov	r0, r9
 80008e8:	68a3      	ldr	r3, [r4, #8]
 80008ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80008ec:	4788      	blx	r1
 80008ee:	4628      	mov	r0, r5
 80008f0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008f4 <PE_Send_RESET>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	460d      	mov	r5, r1
 80008fa:	2d05      	cmp	r5, #5
 80008fc:	7c20      	ldrb	r0, [r4, #16]
 80008fe:	bf0c      	ite	eq
 8000900:	211f      	moveq	r1, #31
 8000902:	215e      	movne	r1, #94	; 0x5e
 8000904:	f7ff fe27 	bl	8000556 <USBPD_PE_Notification>
 8000908:	7c20      	ldrb	r0, [r4, #16]
 800090a:	4629      	mov	r1, r5
 800090c:	f004 fdd9 	bl	80054c2 <USBPD_PRL_ResetRequestProcess>
 8000910:	f3ef 8010 	mrs	r0, PRIMASK
 8000914:	b672      	cpsid	i
 8000916:	2100      	movs	r1, #0
 8000918:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 800091c:	f380 8810 	msr	PRIMASK, r0
 8000920:	bd31      	pop	{r0, r4, r5, pc}

08000922 <PE_Get_SpecRevision>:
 8000922:	f8df 1aa4 	ldr.w	r1, [pc, #2724]	; 80013c8 <.text_70>
 8000926:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800092a:	6841      	ldr	r1, [r0, #4]
 800092c:	7808      	ldrb	r0, [r1, #0]
 800092e:	f000 0003 	and.w	r0, r0, #3
 8000932:	4770      	bx	lr

08000934 <PE_ChangePowerRole>:
 8000934:	6842      	ldr	r2, [r0, #4]
 8000936:	6813      	ldr	r3, [r2, #0]
 8000938:	f361 0382 	bfi	r3, r1, #2, #1
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	7c00      	ldrb	r0, [r0, #16]
 8000940:	f004 bb45 	b.w	8004fce <USBPD_PRL_SetHeaderPowerRole>

08000944 <PE_Get_RxEvent>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	2114      	movs	r1, #20
 8000948:	f3ef 8410 	mrs	r4, PRIMASK
 800094c:	b672      	cpsid	i
 800094e:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8000952:	7b2a      	ldrb	r2, [r5, #12]
 8000954:	b332      	cbz	r2, 80009a4 <PE_Get_RxEvent+0x60>
 8000956:	f500 7613 	add.w	r6, r0, #588	; 0x24c
 800095a:	5cb3      	ldrb	r3, [r6, r2]
 800095c:	065f      	lsls	r7, r3, #25
 800095e:	bf58      	it	pl
 8000960:	2103      	movpl	r1, #3
 8000962:	d51f      	bpl.n	80009a4 <PE_Get_RxEvent+0x60>
 8000964:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000968:	435a      	muls	r2, r3
 800096a:	4410      	add	r0, r2
 800096c:	38cb      	subs	r0, #203	; 0xcb
 800096e:	60a8      	str	r0, [r5, #8]
 8000970:	7802      	ldrb	r2, [r0, #0]
 8000972:	7840      	ldrb	r0, [r0, #1]
 8000974:	eb02 2300 	add.w	r3, r2, r0, lsl #8
 8000978:	7b28      	ldrb	r0, [r5, #12]
 800097a:	80ab      	strh	r3, [r5, #4]
 800097c:	5c32      	ldrb	r2, [r6, r0]
 800097e:	f002 021f 	and.w	r2, r2, #31
 8000982:	2a01      	cmp	r2, #1
 8000984:	d004      	beq.n	8000990 <PE_Get_RxEvent+0x4c>
 8000986:	2a02      	cmp	r2, #2
 8000988:	d005      	beq.n	8000996 <PE_Get_RxEvent+0x52>
 800098a:	2a04      	cmp	r2, #4
 800098c:	d007      	beq.n	800099e <PE_Get_RxEvent+0x5a>
 800098e:	e009      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 8000990:	2111      	movs	r1, #17
 8000992:	2000      	movs	r0, #0
 8000994:	e005      	b.n	80009a2 <PE_Get_RxEvent+0x5e>
 8000996:	2201      	movs	r2, #1
 8000998:	2112      	movs	r1, #18
 800099a:	702a      	strb	r2, [r5, #0]
 800099c:	e002      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 800099e:	2113      	movs	r1, #19
 80009a0:	2002      	movs	r0, #2
 80009a2:	7028      	strb	r0, [r5, #0]
 80009a4:	f384 8810 	msr	PRIMASK, r4
 80009a8:	4608      	mov	r0, r1
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009ac <PE_Clear_RxEvent>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	4601      	mov	r1, r0
 80009b0:	f3ef 8210 	mrs	r2, PRIMASK
 80009b4:	b672      	cpsid	i
 80009b6:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
 80009ba:	b1c8      	cbz	r0, 80009f0 <__iar_annotation$$tailcall+0x8>
 80009bc:	1e40      	subs	r0, r0, #1
 80009be:	b2c0      	uxtb	r0, r0
 80009c0:	f201 234d 	addw	r3, r1, #589	; 0x24d
 80009c4:	2400      	movs	r4, #0
 80009c6:	541c      	strb	r4, [r3, r0]
 80009c8:	1e40      	subs	r0, r0, #1
 80009ca:	4180      	sbcs	r0, r0
 80009cc:	0fc0      	lsrs	r0, r0, #31
 80009ce:	5c1b      	ldrb	r3, [r3, r0]
 80009d0:	065c      	lsls	r4, r3, #25
 80009d2:	d50a      	bpl.n	80009ea <__iar_annotation$$tailcall+0x2>
 80009d4:	1c40      	adds	r0, r0, #1
 80009d6:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80009da:	f382 8810 	msr	PRIMASK, r2
 80009de:	7c08      	ldrb	r0, [r1, #16]
 80009e0:	6889      	ldr	r1, [r1, #8]
 80009e2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80009e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

080009e8 <__iar_annotation$$tailcall>:
 80009e8:	4710      	bx	r2
 80009ea:	2000      	movs	r0, #0
 80009ec:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80009f0:	f382 8810 	msr	PRIMASK, r2
 80009f4:	bd10      	pop	{r4, pc}

080009f6 <PE_PRL_Control_RxEvent>:
 80009f6:	f8df 19d0 	ldr.w	r1, [pc, #2512]	; 80013c8 <.text_70>
 80009fa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80009fe:	2000      	movs	r0, #0
 8000a00:	f3ef 8210 	mrs	r2, PRIMASK
 8000a04:	b672      	cpsid	i
 8000a06:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 8000a0a:	b101      	cbz	r1, 8000a0e <PE_PRL_Control_RxEvent+0x18>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f382 8810 	msr	PRIMASK, r2
 8000a12:	4770      	bx	lr

08000a14 <PE_Convert_SOPRxEvent>:
 8000a14:	b118      	cbz	r0, 8000a1e <PE_Convert_SOPRxEvent+0xa>
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d005      	beq.n	8000a26 <PE_Convert_SOPRxEvent+0x12>
 8000a1a:	d302      	bcc.n	8000a22 <PE_Convert_SOPRxEvent+0xe>
 8000a1c:	e005      	b.n	8000a2a <PE_Convert_SOPRxEvent+0x16>
 8000a1e:	2011      	movs	r0, #17
 8000a20:	4770      	bx	lr
 8000a22:	2012      	movs	r0, #18
 8000a24:	4770      	bx	lr
 8000a26:	2013      	movs	r0, #19
 8000a28:	4770      	bx	lr
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	4770      	bx	lr

08000a2e <PE_Check_AMSConflict>:
 8000a2e:	b538      	push	{r3, r4, r5, lr}
 8000a30:	4605      	mov	r5, r0
 8000a32:	f24f 001f 	movw	r0, #61471	; 0xf01f
 8000a36:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8000a38:	2400      	movs	r4, #0
 8000a3a:	4001      	ands	r1, r0
 8000a3c:	290d      	cmp	r1, #13
 8000a3e:	d102      	bne.n	8000a46 <PE_Check_AMSConflict+0x18>
 8000a40:	2110      	movs	r1, #16
 8000a42:	7469      	strb	r1, [r5, #17]
 8000a44:	e02c      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a46:	7f28      	ldrb	r0, [r5, #28]
 8000a48:	b188      	cbz	r0, 8000a6e <PE_Check_AMSConflict+0x40>
 8000a4a:	1e40      	subs	r0, r0, #1
 8000a4c:	2801      	cmp	r0, #1
 8000a4e:	d914      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a50:	1e80      	subs	r0, r0, #2
 8000a52:	d014      	beq.n	8000a7e <PE_Check_AMSConflict+0x50>
 8000a54:	1e40      	subs	r0, r0, #1
 8000a56:	d023      	beq.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a58:	1e40      	subs	r0, r0, #1
 8000a5a:	2809      	cmp	r0, #9
 8000a5c:	bf84      	itt	hi
 8000a5e:	380b      	subhi	r0, #11
 8000a60:	2801      	cmphi	r0, #1
 8000a62:	d90a      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a64:	1e80      	subs	r0, r0, #2
 8000a66:	d005      	beq.n	8000a74 <PE_Check_AMSConflict+0x46>
 8000a68:	384d      	subs	r0, #77	; 0x4d
 8000a6a:	d006      	beq.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a6c:	e00a      	b.n	8000a84 <PE_Check_AMSConflict+0x56>
 8000a6e:	2203      	movs	r2, #3
 8000a70:	746a      	strb	r2, [r5, #17]
 8000a72:	e016      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a74:	200f      	movs	r0, #15
 8000a76:	7468      	strb	r0, [r5, #17]
 8000a78:	e013      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a7a:	2011      	movs	r0, #17
 8000a7c:	e000      	b.n	8000a80 <PE_Check_AMSConflict+0x52>
 8000a7e:	200f      	movs	r0, #15
 8000a80:	7468      	strb	r0, [r5, #17]
 8000a82:	e00d      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a84:	7c28      	ldrb	r0, [r5, #16]
 8000a86:	215c      	movs	r1, #92	; 0x5c
 8000a88:	f7ff fd65 	bl	8000556 <USBPD_PE_Notification>
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	686a      	ldr	r2, [r5, #4]
 8000a90:	7469      	strb	r1, [r5, #17]
 8000a92:	f240 7004 	movw	r0, #1796	; 0x704
 8000a96:	6811      	ldr	r1, [r2, #0]
 8000a98:	4001      	ands	r1, r0
 8000a9a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000a9e:	d000      	beq.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000aa0:	2415      	movs	r4, #21
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	bd32      	pop	{r1, r4, r5, pc}

08000aa6 <PE_PRL_ResetReceived>:
 8000aa6:	b538      	push	{r3, r4, r5, lr}
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	f8df 091c 	ldr.w	r0, [pc, #2332]	; 80013c8 <.text_70>
 8000aae:	4622      	mov	r2, r4
 8000ab0:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000ab4:	2905      	cmp	r1, #5
 8000ab6:	d114      	bne.n	8000ae2 <PE_PRL_ResetReceived+0x3c>
 8000ab8:	6868      	ldr	r0, [r5, #4]
 8000aba:	6801      	ldr	r1, [r0, #0]
 8000abc:	f021 0110 	bic.w	r1, r1, #16
 8000ac0:	6001      	str	r1, [r0, #0]
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	6969      	ldr	r1, [r5, #20]
 8000ac6:	f360 214a 	bfi	r1, r0, #9, #2
 8000aca:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8000ace:	6169      	str	r1, [r5, #20]
 8000ad0:	2214      	movs	r2, #20
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	7002      	strb	r2, [r0, #0]
 8000ad6:	7283      	strb	r3, [r0, #10]
 8000ad8:	211e      	movs	r1, #30
 8000ada:	7c28      	ldrb	r0, [r5, #16]
 8000adc:	f7ff fd3b 	bl	8000556 <USBPD_PE_Notification>
 8000ae0:	e003      	b.n	8000aea <PE_PRL_ResetReceived+0x44>
 8000ae2:	6968      	ldr	r0, [r5, #20]
 8000ae4:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8000ae8:	6168      	str	r0, [r5, #20]
 8000aea:	4620      	mov	r0, r4
 8000aec:	68a9      	ldr	r1, [r5, #8]
 8000aee:	e148      	b.n	8000d82 <.text_44>

08000af0 <PE_PRL_BistCompleted>:
 8000af0:	4770      	bx	lr

08000af2 <PE_Reset_HardReset>:
 8000af2:	b510      	push	{r4, lr}
 8000af4:	4604      	mov	r4, r0
 8000af6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8000afa:	b118      	cbz	r0, 8000b04 <PE_Reset_HardReset+0x12>
 8000afc:	7c20      	ldrb	r0, [r4, #16]
 8000afe:	215b      	movs	r1, #91	; 0x5b
 8000b00:	f7ff fd29 	bl	8000556 <USBPD_PE_Notification>
 8000b04:	4620      	mov	r0, r4
 8000b06:	f000 f82a 	bl	8000b5e <PE_Reset_ZI>
 8000b0a:	f000 f88e 	bl	8000c2a <.text_37>
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	7903      	ldrb	r3, [r0, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	d009      	beq.n	8000b2c <PE_Reset_HardReset+0x3a>
 8000b18:	7c20      	ldrb	r0, [r4, #16]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	f004 fa40 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b22:	6860      	ldr	r0, [r4, #4]
 8000b24:	6801      	ldr	r1, [r0, #0]
 8000b26:	f041 0108 	orr.w	r1, r1, #8
 8000b2a:	e008      	b.n	8000b3e <PE_Reset_HardReset+0x4c>
 8000b2c:	7c20      	ldrb	r0, [r4, #16]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	f004 fa36 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b36:	6860      	ldr	r0, [r4, #4]
 8000b38:	6801      	ldr	r1, [r0, #0]
 8000b3a:	f021 0108 	bic.w	r1, r1, #8
 8000b3e:	6001      	str	r1, [r0, #0]
 8000b40:	f000 f840 	bl	8000bc4 <.text_34>
 8000b44:	0892      	lsrs	r2, r2, #2
 8000b46:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 8000b4a:	6008      	str	r0, [r1, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	7c20      	ldrb	r0, [r4, #16]
 8000b50:	f004 fa7e 	bl	8005050 <USBPD_PRL_SOPCapability>
 8000b54:	7c20      	ldrb	r0, [r4, #16]
 8000b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b5a:	f004 bcee 	b.w	800553a <USBPD_PRL_Reset>

08000b5e <PE_Reset_ZI>:
 8000b5e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	2000      	movs	r0, #0
 8000b64:	9001      	str	r0, [sp, #4]
 8000b66:	2100      	movs	r1, #0
 8000b68:	6860      	ldr	r0, [r4, #4]
 8000b6a:	6802      	ldr	r2, [r0, #0]
 8000b6c:	f022 0210 	bic.w	r2, r2, #16
 8000b70:	6002      	str	r2, [r0, #0]
 8000b72:	4620      	mov	r0, r4
 8000b74:	f000 fbd6 	bl	8001324 <PE_SetPowerNegotiation>
 8000b78:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8000b7c:	f104 0014 	add.w	r0, r4, #20
 8000b80:	f01e fa5c 	bl	801f03c <__aeabi_memclr>
 8000b84:	68a5      	ldr	r5, [r4, #8]
 8000b86:	7c20      	ldrb	r0, [r4, #16]
 8000b88:	69ae      	ldr	r6, [r5, #24]
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	aa01      	add	r2, sp, #4
 8000b8e:	2102      	movs	r1, #2
 8000b90:	47b0      	blx	r6
 8000b92:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000b96:	9000      	str	r0, [sp, #0]
 8000b98:	2304      	movs	r3, #4
 8000b9a:	68a5      	ldr	r5, [r4, #8]
 8000b9c:	7c20      	ldrb	r0, [r4, #16]
 8000b9e:	69ae      	ldr	r6, [r5, #24]
 8000ba0:	466a      	mov	r2, sp
 8000ba2:	2106      	movs	r1, #6
 8000ba4:	47b0      	blx	r6
 8000ba6:	6820      	ldr	r0, [r4, #0]
 8000ba8:	7901      	ldrb	r1, [r0, #4]
 8000baa:	7c20      	ldrb	r0, [r4, #16]
 8000bac:	f001 0103 	and.w	r1, r1, #3
 8000bb0:	f004 fa28 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000bb4:	f000 f806 	bl	8000bc4 <.text_34>
 8000bb8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8000bbc:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000bc0:	600a      	str	r2, [r1, #0]
 8000bc2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000bc4 <.text_34>:
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	6861      	ldr	r1, [r4, #4]
 8000bc8:	7900      	ldrb	r0, [r0, #4]
 8000bca:	680a      	ldr	r2, [r1, #0]
 8000bcc:	f000 0003 	and.w	r0, r0, #3
 8000bd0:	4770      	bx	lr

08000bd2 <PE_Reset_Counter>:
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8000bd8:	f01e ba30 	b.w	801f03c <__aeabi_memclr>

08000bdc <PE_Reset_StateMachine>:
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4604      	mov	r4, r0
 8000be0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8000be4:	b118      	cbz	r0, 8000bee <PE_Reset_StateMachine+0x12>
 8000be6:	7c20      	ldrb	r0, [r4, #16]
 8000be8:	215b      	movs	r1, #91	; 0x5b
 8000bea:	f7ff fcb4 	bl	8000556 <USBPD_PE_Notification>
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff ffb5 	bl	8000b5e <PE_Reset_ZI>
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f000 fb94 	bl	8001324 <PE_SetPowerNegotiation>
 8000bfc:	7c20      	ldrb	r0, [r4, #16]
 8000bfe:	f004 fc9c 	bl	800553a <USBPD_PRL_Reset>
 8000c02:	f000 f812 	bl	8000c2a <.text_37>
 8000c06:	f001 0303 	and.w	r3, r1, #3
 8000c0a:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8000c0e:	d005      	beq.n	8000c1c <PE_Reset_StateMachine+0x40>
 8000c10:	7c20      	ldrb	r0, [r4, #16]
 8000c12:	2101      	movs	r1, #1
 8000c14:	f004 f9c5 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c18:	2002      	movs	r0, #2
 8000c1a:	e004      	b.n	8000c26 <PE_Reset_StateMachine+0x4a>
 8000c1c:	7c20      	ldrb	r0, [r4, #16]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f004 f9bf 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c24:	203e      	movs	r0, #62	; 0x3e
 8000c26:	7460      	strb	r0, [r4, #17]
 8000c28:	bd10      	pop	{r4, pc}

08000c2a <.text_37>:
 8000c2a:	6860      	ldr	r0, [r4, #4]
 8000c2c:	6801      	ldr	r1, [r0, #0]
 8000c2e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000c32:	2800      	cmp	r0, #0
 8000c34:	4770      	bx	lr

08000c36 <PE_ExtRevisionInteroperability>:
 8000c36:	b538      	push	{r3, r4, r5, lr}
 8000c38:	f8df 378c 	ldr.w	r3, [pc, #1932]	; 80013c8 <.text_70>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000c42:	6865      	ldr	r5, [r4, #4]
 8000c44:	682c      	ldr	r4, [r5, #0]
 8000c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c4a:	f004 0503 	and.w	r5, r4, #3
 8000c4e:	42a9      	cmp	r1, r5
 8000c50:	bfa8      	it	ge
 8000c52:	4629      	movge	r1, r5
 8000c54:	f361 0401 	bfi	r4, r1, #0, #2
 8000c58:	6851      	ldr	r1, [r2, #4]
 8000c5a:	600c      	str	r4, [r1, #0]
 8000c5c:	6851      	ldr	r1, [r2, #4]
 8000c5e:	680b      	ldr	r3, [r1, #0]
 8000c60:	f003 0403 	and.w	r4, r3, #3
 8000c64:	2c01      	cmp	r4, #1
 8000c66:	bf0c      	ite	eq
 8000c68:	2400      	moveq	r4, #0
 8000c6a:	2420      	movne	r4, #32
 8000c6c:	f023 0320 	bic.w	r3, r3, #32
 8000c70:	4323      	orrs	r3, r4
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	6852      	ldr	r2, [r2, #4]
 8000c76:	7811      	ldrb	r1, [r2, #0]
 8000c78:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 8000c7c:	f001 0103 	and.w	r1, r1, #3
 8000c80:	f004 b9b9 	b.w	8004ff6 <USBPD_PRL_SetHeaderSpecification>

08000c84 <PE_PRL_FastRoleSwapReception>:
 8000c84:	f8df 1740 	ldr.w	r1, [pc, #1856]	; 80013c8 <.text_70>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000c8e:	7f0a      	ldrb	r2, [r1, #28]
 8000c90:	2a09      	cmp	r2, #9
 8000c92:	d005      	beq.n	8000ca0 <PE_PRL_FastRoleSwapReception+0x1c>
 8000c94:	684a      	ldr	r2, [r1, #4]
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e354      	b.n	800134a <.text_66>
 8000ca0:	4770      	bx	lr

08000ca2 <PE_PRL_PostReceiveEvent>:
 8000ca2:	b570      	push	{r4, r5, r6, lr}
 8000ca4:	f8df 2720 	ldr.w	r2, [pc, #1824]	; 80013c8 <.text_70>
 8000ca8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8000cac:	2000      	movs	r0, #0
 8000cae:	2400      	movs	r4, #0
 8000cb0:	191a      	adds	r2, r3, r4
 8000cb2:	f892 224d 	ldrb.w	r2, [r2, #589]	; 0x24d
 8000cb6:	b122      	cbz	r2, 8000cc2 <PE_PRL_PostReceiveEvent+0x20>
 8000cb8:	1c64      	adds	r4, r4, #1
 8000cba:	b2e4      	uxtb	r4, r4
 8000cbc:	2c01      	cmp	r4, #1
 8000cbe:	d9f7      	bls.n	8000cb0 <PE_PRL_PostReceiveEvent+0xe>
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
 8000cc2:	191a      	adds	r2, r3, r4
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	191d      	adds	r5, r3, r4
 8000cc8:	f882 024d 	strb.w	r0, [r2, #589]	; 0x24d
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f895 624d 	ldrb.w	r6, [r5, #589]	; 0x24d
 8000cd2:	fa00 f101 	lsl.w	r1, r0, r1
 8000cd6:	1918      	adds	r0, r3, r4
 8000cd8:	4331      	orrs	r1, r6
 8000cda:	f880 124d 	strb.w	r1, [r0, #589]	; 0x24d
 8000cde:	2001      	movs	r0, #1
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}

08000ce2 <PE_PRL_PostReceiveEventError>:
 8000ce2:	f8df 16e4 	ldr.w	r1, [pc, #1764]	; 80013c8 <.text_70>
 8000ce6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000cea:	2100      	movs	r1, #0
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	4402      	add	r2, r0
 8000cf0:	f892 324d 	ldrb.w	r3, [r2, #589]	; 0x24d
 8000cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d004      	beq.n	8000d06 <PE_PRL_PostReceiveEventError+0x24>
 8000cfc:	1c49      	adds	r1, r1, #1
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	2a02      	cmp	r2, #2
 8000d02:	d3f3      	bcc.n	8000cec <PE_PRL_PostReceiveEventError+0xa>
 8000d04:	4770      	bx	lr
 8000d06:	2000      	movs	r0, #0
 8000d08:	f882 024d 	strb.w	r0, [r2, #589]	; 0x24d
 8000d0c:	4770      	bx	lr

08000d0e <PE_PRL_PostReceiveEventCopy>:
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	f8df 26b4 	ldr.w	r2, [pc, #1716]	; 80013c8 <.text_70>
 8000d14:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	b2d3      	uxtb	r3, r2
 8000d1c:	18c4      	adds	r4, r0, r3
 8000d1e:	f894 424d 	ldrb.w	r4, [r4, #589]	; 0x24d
 8000d22:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8000d26:	2c20      	cmp	r4, #32
 8000d28:	d004      	beq.n	8000d34 <PE_PRL_PostReceiveEventCopy+0x26>
 8000d2a:	1c52      	adds	r2, r2, #1
 8000d2c:	b2d3      	uxtb	r3, r2
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d3f3      	bcc.n	8000d1a <PE_PRL_PostReceiveEventCopy+0xc>
 8000d32:	bd10      	pop	{r4, pc}
 8000d34:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d38:	4353      	muls	r3, r2
 8000d3a:	18c4      	adds	r4, r0, r3
 8000d3c:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8000d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d44:	f01e b978 	b.w	801f038 <__aeabi_memcpy>

08000d48 <PE_PRL_PostReceiveEventComplete>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	f000 f81e 	bl	8000d8a <.text_45>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	1854      	adds	r4, r2, r1
 8000d52:	1c4b      	adds	r3, r1, #1
 8000d54:	f894 524d 	ldrb.w	r5, [r4, #589]	; 0x24d
 8000d58:	f005 0560 	and.w	r5, r5, #96	; 0x60
 8000d5c:	2d20      	cmp	r5, #32
 8000d5e:	d003      	beq.n	8000d68 <PE_PRL_PostReceiveEventComplete+0x20>
 8000d60:	b2d9      	uxtb	r1, r3
 8000d62:	2902      	cmp	r1, #2
 8000d64:	d3f4      	bcc.n	8000d50 <PE_PRL_PostReceiveEventComplete+0x8>
 8000d66:	bd31      	pop	{r0, r4, r5, pc}
 8000d68:	f894 424d 	ldrb.w	r4, [r4, #589]	; 0x24d
 8000d6c:	1855      	adds	r5, r2, r1
 8000d6e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8000d72:	f885 424d 	strb.w	r4, [r5, #589]	; 0x24d
 8000d76:	f892 103c 	ldrb.w	r1, [r2, #60]	; 0x3c
 8000d7a:	b909      	cbnz	r1, 8000d80 <PE_PRL_PostReceiveEventComplete+0x38>
 8000d7c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 8000d80:	6891      	ldr	r1, [r2, #8]

08000d82 <.text_44>:
 8000d82:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000d84:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

08000d88 <__iar_annotation$$tailcall>:
 8000d88:	4710      	bx	r2

08000d8a <.text_45>:
 8000d8a:	f8df 163c 	ldr.w	r1, [pc, #1596]	; 80013c8 <.text_70>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d94:	4770      	bx	lr

08000d96 <PE_Get_UnchunkedSupport>:
 8000d96:	f8df 1630 	ldr.w	r1, [pc, #1584]	; 80013c8 <.text_70>
 8000d9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000d9e:	6841      	ldr	r1, [r0, #4]
 8000da0:	6808      	ldr	r0, [r1, #0]
 8000da2:	0e40      	lsrs	r0, r0, #25
 8000da4:	f000 0001 	and.w	r0, r0, #1
 8000da8:	4770      	bx	lr
	...

08000dac <.text_47>:
 8000dac:	200002b8 	.word	0x200002b8

08000db0 <.text_48>:
 8000db0:	20000000 	.word	0x20000000

08000db4 <.text_49>:
 8000db4:	08020330 	.word	0x08020330

08000db8 <PE_SubStateMachine_Generic>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	b08c      	sub	sp, #48	; 0x30
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	9003      	str	r0, [sp, #12]
 8000dc4:	460e      	mov	r6, r1
 8000dc6:	7c63      	ldrb	r3, [r4, #17]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	f04f 0a02 	mov.w	sl, #2
 8000dce:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8000dd2:	f204 2963 	addw	r9, r4, #611	; 0x263
 8000dd6:	f204 2565 	addw	r5, r4, #613	; 0x265
 8000dda:	f204 2267 	addw	r2, r4, #615	; 0x267
 8000dde:	f248 081b 	movw	r8, #32795	; 0x801b
 8000de2:	f000 8163 	beq.w	80010ac <PE_SubStateMachine_Generic+0x2f4>
 8000de6:	2b18      	cmp	r3, #24
 8000de8:	d03f      	beq.n	8000e6a <PE_SubStateMachine_Generic+0xb2>
 8000dea:	2b19      	cmp	r3, #25
 8000dec:	d04e      	beq.n	8000e8c <PE_SubStateMachine_Generic+0xd4>
 8000dee:	2b1d      	cmp	r3, #29
 8000df0:	f000 808e 	beq.w	8000f10 <PE_SubStateMachine_Generic+0x158>
 8000df4:	2b27      	cmp	r3, #39	; 0x27
 8000df6:	f000 80aa 	beq.w	8000f4e <PE_SubStateMachine_Generic+0x196>
 8000dfa:	2b28      	cmp	r3, #40	; 0x28
 8000dfc:	f000 80b5 	beq.w	8000f6a <PE_SubStateMachine_Generic+0x1b2>
 8000e00:	2b29      	cmp	r3, #41	; 0x29
 8000e02:	f000 80bc 	beq.w	8000f7e <PE_SubStateMachine_Generic+0x1c6>
 8000e06:	2b2c      	cmp	r3, #44	; 0x2c
 8000e08:	f000 8205 	beq.w	8001216 <PE_SubStateMachine_Generic+0x45e>
 8000e0c:	2b30      	cmp	r3, #48	; 0x30
 8000e0e:	f000 8179 	beq.w	8001104 <PE_SubStateMachine_Generic+0x34c>
 8000e12:	2b3a      	cmp	r3, #58	; 0x3a
 8000e14:	f000 81ee 	beq.w	80011f4 <PE_SubStateMachine_Generic+0x43c>
 8000e18:	2b3b      	cmp	r3, #59	; 0x3b
 8000e1a:	f000 81d1 	beq.w	80011c0 <PE_SubStateMachine_Generic+0x408>
 8000e1e:	2b3c      	cmp	r3, #60	; 0x3c
 8000e20:	f000 81be 	beq.w	80011a0 <PE_SubStateMachine_Generic+0x3e8>
 8000e24:	2b4b      	cmp	r3, #75	; 0x4b
 8000e26:	f000 80f8 	beq.w	800101a <PE_SubStateMachine_Generic+0x262>
 8000e2a:	2b63      	cmp	r3, #99	; 0x63
 8000e2c:	f000 8144 	beq.w	80010b8 <PE_SubStateMachine_Generic+0x300>
 8000e30:	2b64      	cmp	r3, #100	; 0x64
 8000e32:	f000 8154 	beq.w	80010de <PE_SubStateMachine_Generic+0x326>
 8000e36:	2b67      	cmp	r3, #103	; 0x67
 8000e38:	f000 8102 	beq.w	8001040 <PE_SubStateMachine_Generic+0x288>
 8000e3c:	2b68      	cmp	r3, #104	; 0x68
 8000e3e:	f000 8111 	beq.w	8001064 <PE_SubStateMachine_Generic+0x2ac>
 8000e42:	2b74      	cmp	r3, #116	; 0x74
 8000e44:	f000 8174 	beq.w	8001130 <PE_SubStateMachine_Generic+0x378>
 8000e48:	2b93      	cmp	r3, #147	; 0x93
 8000e4a:	f000 809e 	beq.w	8000f8a <PE_SubStateMachine_Generic+0x1d2>
 8000e4e:	2b94      	cmp	r3, #148	; 0x94
 8000e50:	f000 809f 	beq.w	8000f92 <PE_SubStateMachine_Generic+0x1da>
 8000e54:	2b95      	cmp	r3, #149	; 0x95
 8000e56:	f000 80b0 	beq.w	8000fba <PE_SubStateMachine_Generic+0x202>
 8000e5a:	2b99      	cmp	r3, #153	; 0x99
 8000e5c:	f040 81e0 	bne.w	8001220 <PE_SubStateMachine_Generic+0x468>
 8000e60:	2106      	movs	r1, #6
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fd46 	bl	80008f4 <PE_Send_RESET>
 8000e68:	e195      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000e6a:	f7ff fede 	bl	8000c2a <.text_37>
 8000e6e:	bf1d      	ittte	ne
 8000e70:	6960      	ldrne	r0, [r4, #20]
 8000e72:	0880      	lsrne	r0, r0, #2
 8000e74:	f000 0001 	andne.w	r0, r0, #1
 8000e78:	2002      	moveq	r0, #2
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	2319      	movs	r3, #25
 8000e7e:	2208      	movs	r2, #8
 8000e80:	f000 fa3a 	bl	80012f8 <.text_61>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d16f      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000e88:	2007      	movs	r0, #7
 8000e8a:	e0e8      	b.n	800105e <PE_SubStateMachine_Generic+0x2a6>
 8000e8c:	7830      	ldrb	r0, [r6, #0]
 8000e8e:	2811      	cmp	r0, #17
 8000e90:	d13d      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000e92:	88b9      	ldrh	r1, [r7, #4]
 8000e94:	0bc8      	lsrs	r0, r1, #15
 8000e96:	d121      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000e98:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000e9c:	b1f0      	cbz	r0, 8000edc <PE_SubStateMachine_Generic+0x124>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	f000 011f 	and.w	r1, r0, #31
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d119      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000ea8:	68a5      	ldr	r5, [r4, #8]
 8000eaa:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000eae:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000eb2:	68b8      	ldr	r0, [r7, #8]
 8000eb4:	1c82      	adds	r2, r0, #2
 8000eb6:	7c20      	ldrb	r0, [r4, #16]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	2105      	movs	r1, #5
 8000ebc:	47e0      	blx	ip
 8000ebe:	7830      	ldrb	r0, [r6, #0]
 8000ec0:	2814      	cmp	r0, #20
 8000ec2:	d003      	beq.n	8000ecc <PE_SubStateMachine_Generic+0x114>
 8000ec4:	2114      	movs	r1, #20
 8000ec6:	7031      	strb	r1, [r6, #0]
 8000ec8:	f000 f9d1 	bl	800126e <.text_57+0x4>
 8000ecc:	2003      	movs	r0, #3
 8000ece:	7460      	strb	r0, [r4, #17]
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	7c20      	ldrb	r0, [r4, #16]
 8000ed4:	f7ff fb3f 	bl	8000556 <USBPD_PE_Notification>
 8000ed8:	f04f 0a00 	mov.w	sl, #0
 8000edc:	88b8      	ldrh	r0, [r7, #4]
 8000ede:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8000ee2:	d114      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ee4:	f000 001f 	and.w	r0, r0, #31
 8000ee8:	2804      	cmp	r0, #4
 8000eea:	bf18      	it	ne
 8000eec:	2810      	cmpne	r0, #16
 8000eee:	d10e      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ef0:	7830      	ldrb	r0, [r6, #0]
 8000ef2:	2814      	cmp	r0, #20
 8000ef4:	d003      	beq.n	8000efe <PE_SubStateMachine_Generic+0x146>
 8000ef6:	2114      	movs	r1, #20
 8000ef8:	7031      	strb	r1, [r6, #0]
 8000efa:	f000 f9b8 	bl	800126e <.text_57+0x4>
 8000efe:	2003      	movs	r0, #3
 8000f00:	7460      	strb	r0, [r4, #17]
 8000f02:	2108      	movs	r1, #8
 8000f04:	7c20      	ldrb	r0, [r4, #16]
 8000f06:	f7ff fb26 	bl	8000556 <USBPD_PE_Notification>
 8000f0a:	f04f 0a00 	mov.w	sl, #0
 8000f0e:	e080      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000f10:	9004      	str	r0, [sp, #16]
 8000f12:	ab04      	add	r3, sp, #16
 8000f14:	68a6      	ldr	r6, [r4, #8]
 8000f16:	7c20      	ldrb	r0, [r4, #16]
 8000f18:	6977      	ldr	r7, [r6, #20]
 8000f1a:	aa05      	add	r2, sp, #20
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	47b8      	blx	r7
 8000f20:	9804      	ldr	r0, [sp, #16]
 8000f22:	2104      	movs	r1, #4
 8000f24:	f000 fa40 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8000f28:	b108      	cbz	r0, 8000f2e <PE_SubStateMachine_Generic+0x176>
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	e179      	b.n	8001222 <PE_SubStateMachine_Generic+0x46a>
 8000f2e:	9a04      	ldr	r2, [sp, #16]
 8000f30:	2003      	movs	r0, #3
 8000f32:	0892      	lsrs	r2, r2, #2
 8000f34:	2100      	movs	r1, #0
 8000f36:	9001      	str	r0, [sp, #4]
 8000f38:	9200      	str	r2, [sp, #0]
 8000f3a:	9102      	str	r1, [sp, #8]
 8000f3c:	ab05      	add	r3, sp, #20
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4620      	mov	r0, r4
 8000f42:	f000 fabe 	bl	80014c2 <PE_Send_DataMessage>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d10e      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	e0ec      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000f4e:	2012      	movs	r0, #18
 8000f50:	7720      	strb	r0, [r4, #28]
 8000f52:	2105      	movs	r1, #5
 8000f54:	7c20      	ldrb	r0, [r4, #16]
 8000f56:	f004 fae3 	bl	8005520 <USBDPD_PRL_BistCarrierEyeMode>
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	7460      	strb	r0, [r4, #17]
 8000f5e:	f248 012d 	movw	r1, #32813	; 0x802d
 8000f62:	83e1      	strh	r1, [r4, #30]
 8000f64:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8000f68:	e15c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f6a:	f000 f95f 	bl	800122c <.text_51>
 8000f6e:	d1fb      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f70:	7c20      	ldrb	r0, [r4, #16]
 8000f72:	2105      	movs	r1, #5
 8000f74:	f004 fada 	bl	800552c <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	83e0      	strh	r0, [r4, #30]
 8000f7c:	e10b      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000f7e:	7831      	ldrb	r1, [r6, #0]
 8000f80:	2914      	cmp	r1, #20
 8000f82:	d001      	beq.n	8000f88 <PE_SubStateMachine_Generic+0x1d0>
 8000f84:	f000 f971 	bl	800126a <.text_57>
 8000f88:	e14c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 f990 	bl	80012b0 <PE_SubStateMachine_ReceiveDRS>
 8000f90:	e148      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f92:	f7ff fe4a 	bl	8000c2a <.text_37>
 8000f96:	bf1d      	ittte	ne
 8000f98:	6960      	ldrne	r0, [r4, #20]
 8000f9a:	0880      	lsrne	r0, r0, #2
 8000f9c:	f000 0001 	andne.w	r0, r0, #1
 8000fa0:	2002      	moveq	r0, #2
 8000fa2:	9000      	str	r0, [sp, #0]
 8000fa4:	2395      	movs	r3, #149	; 0x95
 8000fa6:	2209      	movs	r2, #9
 8000fa8:	f000 f9a6 	bl	80012f8 <.text_61>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d1ef      	bne.n	8000f90 <PE_SubStateMachine_Generic+0x1d8>
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f000 f93f 	bl	8001234 <.text_52>
 8000fb6:	2122      	movs	r1, #34	; 0x22
 8000fb8:	e0b6      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000fba:	7830      	ldrb	r0, [r6, #0]
 8000fbc:	2814      	cmp	r0, #20
 8000fbe:	d028      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc0:	88b8      	ldrh	r0, [r7, #4]
 8000fc2:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8000fc6:	d124      	bne.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc8:	f000 011f 	and.w	r1, r0, #31
 8000fcc:	2903      	cmp	r1, #3
 8000fce:	d006      	beq.n	8000fde <PE_SubStateMachine_Generic+0x226>
 8000fd0:	2904      	cmp	r1, #4
 8000fd2:	bf18      	it	ne
 8000fd4:	290c      	cmpne	r1, #12
 8000fd6:	d006      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x22e>
 8000fd8:	2910      	cmp	r1, #16
 8000fda:	d011      	beq.n	8001000 <PE_SubStateMachine_Generic+0x248>
 8000fdc:	e019      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f000 f9f6 	bl	80013d0 <PE_SwitchDataRole>
 8000fe4:	e008      	b.n	8000ff8 <PE_SubStateMachine_Generic+0x240>
 8000fe6:	f000 001f 	and.w	r0, r0, #31
 8000fea:	280c      	cmp	r0, #12
 8000fec:	7c20      	ldrb	r0, [r4, #16]
 8000fee:	bf0c      	ite	eq
 8000ff0:	2126      	moveq	r1, #38	; 0x26
 8000ff2:	2127      	movne	r1, #39	; 0x27
 8000ff4:	f7ff faaf 	bl	8000556 <USBPD_PE_Notification>
 8000ff8:	f000 f922 	bl	8001240 <.text_53>
 8000ffc:	d107      	bne.n	800100e <PE_SubStateMachine_Generic+0x256>
 8000ffe:	e008      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8001000:	7c20      	ldrb	r0, [r4, #16]
 8001002:	2128      	movs	r1, #40	; 0x28
 8001004:	f7ff faa7 	bl	8000556 <USBPD_PE_Notification>
 8001008:	f000 f91a 	bl	8001240 <.text_53>
 800100c:	d001      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 800100e:	f000 f92c 	bl	800126a <.text_57>
 8001012:	f000 f90b 	bl	800122c <.text_51>
 8001016:	d124      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 8001018:	e0bd      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 800101a:	f000 f918 	bl	800124e <.text_54>
 800101e:	aa04      	add	r2, sp, #16
 8001020:	2114      	movs	r1, #20
 8001022:	47b8      	blx	r7
 8001024:	9803      	ldr	r0, [sp, #12]
 8001026:	2800      	cmp	r0, #0
 8001028:	f000 80fa 	beq.w	8001220 <PE_SubStateMachine_Generic+0x468>
 800102c:	9a03      	ldr	r2, [sp, #12]
 800102e:	0892      	lsrs	r2, r2, #2
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	2100      	movs	r1, #0
 8001034:	2003      	movs	r0, #3
 8001036:	9102      	str	r1, [sp, #8]
 8001038:	9001      	str	r0, [sp, #4]
 800103a:	ab04      	add	r3, sp, #16
 800103c:	220c      	movs	r2, #12
 800103e:	e0d5      	b.n	80011ec <PE_SubStateMachine_Generic+0x434>
 8001040:	6860      	ldr	r0, [r4, #4]
 8001042:	6801      	ldr	r1, [r0, #0]
 8001044:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001048:	b900      	cbnz	r0, 800104c <PE_SubStateMachine_Generic+0x294>
 800104a:	2002      	movs	r0, #2
 800104c:	9000      	str	r0, [sp, #0]
 800104e:	2368      	movs	r3, #104	; 0x68
 8001050:	7879      	ldrb	r1, [r7, #1]
 8001052:	2218      	movs	r2, #24
 8001054:	f000 f951 	bl	80012fa <.text_61+0x2>
 8001058:	2800      	cmp	r0, #0
 800105a:	d102      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 800105c:	200f      	movs	r0, #15
 800105e:	f000 f8e9 	bl	8001234 <.text_52>
 8001062:	e0df      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001064:	7830      	ldrb	r0, [r6, #0]
 8001066:	2814      	cmp	r0, #20
 8001068:	d01b      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800106a:	7839      	ldrb	r1, [r7, #0]
 800106c:	7878      	ldrb	r0, [r7, #1]
 800106e:	4281      	cmp	r1, r0
 8001070:	d117      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001072:	88b9      	ldrh	r1, [r7, #4]
 8001074:	0bc8      	lsrs	r0, r1, #15
 8001076:	d114      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001078:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800107c:	b188      	cbz	r0, 80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800107e:	7938      	ldrb	r0, [r7, #4]
 8001080:	f000 001f 	and.w	r0, r0, #31
 8001084:	280c      	cmp	r0, #12
 8001086:	d10c      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	68a5      	ldr	r5, [r4, #8]
 800108c:	69af      	ldr	r7, [r5, #24]
 800108e:	1c82      	adds	r2, r0, #2
 8001090:	7c20      	ldrb	r0, [r4, #16]
 8001092:	2304      	movs	r3, #4
 8001094:	2114      	movs	r1, #20
 8001096:	47b8      	blx	r7
 8001098:	f000 f8d2 	bl	8001240 <.text_53>
 800109c:	d001      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800109e:	f000 f8e4 	bl	800126a <.text_57>
 80010a2:	f000 f8c3 	bl	800122c <.text_51>
 80010a6:	d106      	bne.n	80010b6 <PE_SubStateMachine_Generic+0x2fe>
 80010a8:	2111      	movs	r1, #17
 80010aa:	e075      	b.n	8001198 <PE_SubStateMachine_Generic+0x3e0>
 80010ac:	9000      	str	r0, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	2210      	movs	r2, #16
 80010b2:	f000 f921 	bl	80012f8 <.text_61>
 80010b6:	e0b5      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80010b8:	f000 f8c9 	bl	800124e <.text_54>
 80010bc:	2108      	movs	r1, #8
 80010be:	47b8      	blx	r7
 80010c0:	9803      	ldr	r0, [sp, #12]
 80010c2:	2119      	movs	r1, #25
 80010c4:	f000 f970 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d172      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010cc:	f000 f8c4 	bl	8001258 <.text_55>
 80010d0:	f000 f8df 	bl	8001292 <.text_59>
 80010d4:	2201      	movs	r2, #1
 80010d6:	f000 f8c4 	bl	8001262 <.text_56>
 80010da:	2148      	movs	r1, #72	; 0x48
 80010dc:	e024      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 80010de:	f000 f8b6 	bl	800124e <.text_54>
 80010e2:	2113      	movs	r1, #19
 80010e4:	47b8      	blx	r7
 80010e6:	9803      	ldr	r0, [sp, #12]
 80010e8:	2118      	movs	r1, #24
 80010ea:	f000 f95d 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d15f      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010f2:	f000 f8b1 	bl	8001258 <.text_55>
 80010f6:	f000 f8cc 	bl	8001292 <.text_59>
 80010fa:	220f      	movs	r2, #15
 80010fc:	f000 f8b1 	bl	8001262 <.text_56>
 8001100:	2161      	movs	r1, #97	; 0x61
 8001102:	e011      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8001104:	f000 f8a3 	bl	800124e <.text_54>
 8001108:	2109      	movs	r1, #9
 800110a:	47b8      	blx	r7
 800110c:	9803      	ldr	r0, [sp, #12]
 800110e:	2107      	movs	r1, #7
 8001110:	f000 f94a 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001114:	2800      	cmp	r0, #0
 8001116:	d14c      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 8001118:	f000 f89e 	bl	8001258 <.text_55>
 800111c:	f000 f8b9 	bl	8001292 <.text_59>
 8001120:	2202      	movs	r2, #2
 8001122:	f000 f89e 	bl	8001262 <.text_56>
 8001126:	214f      	movs	r1, #79	; 0x4f
 8001128:	7c20      	ldrb	r0, [r4, #16]
 800112a:	f7ff fa14 	bl	8000556 <USBPD_PE_Notification>
 800112e:	e079      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001130:	7831      	ldrb	r1, [r6, #0]
 8001132:	2914      	cmp	r1, #20
 8001134:	d02c      	beq.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001136:	88b9      	ldrh	r1, [r7, #4]
 8001138:	0bc8      	lsrs	r0, r1, #15
 800113a:	d115      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800113c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001140:	b190      	cbz	r0, 8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001142:	7938      	ldrb	r0, [r7, #4]
 8001144:	f000 001f 	and.w	r0, r0, #31
 8001148:	2805      	cmp	r0, #5
 800114a:	d10d      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	68a5      	ldr	r5, [r4, #8]
 8001150:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8001154:	1d02      	adds	r2, r0, #4
 8001156:	7c20      	ldrb	r0, [r4, #16]
 8001158:	2304      	movs	r3, #4
 800115a:	210f      	movs	r1, #15
 800115c:	47e0      	blx	ip
 800115e:	f000 f86f 	bl	8001240 <.text_53>
 8001162:	d001      	beq.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001164:	f000 f881 	bl	800126a <.text_57>
 8001168:	7938      	ldrb	r0, [r7, #4]
 800116a:	f000 001f 	and.w	r0, r0, #31
 800116e:	2810      	cmp	r0, #16
 8001170:	d10e      	bne.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001172:	7c20      	ldrb	r0, [r4, #16]
 8001174:	2159      	movs	r1, #89	; 0x59
 8001176:	f7ff f9ee 	bl	8000556 <USBPD_PE_Notification>
 800117a:	2000      	movs	r0, #0
 800117c:	83e0      	strh	r0, [r4, #30]
 800117e:	7831      	ldrb	r1, [r6, #0]
 8001180:	2914      	cmp	r1, #20
 8001182:	d001      	beq.n	8001188 <PE_SubStateMachine_Generic+0x3d0>
 8001184:	f000 f871 	bl	800126a <.text_57>
 8001188:	2103      	movs	r1, #3
 800118a:	7461      	strb	r1, [r4, #17]
 800118c:	f04f 0a00 	mov.w	sl, #0
 8001190:	f000 f84c 	bl	800122c <.text_51>
 8001194:	d146      	bne.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001196:	2103      	movs	r1, #3
 8001198:	7461      	strb	r1, [r4, #17]
 800119a:	f04f 0a00 	mov.w	sl, #0
 800119e:	e041      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011a0:	f000 f855 	bl	800124e <.text_54>
 80011a4:	210d      	movs	r1, #13
 80011a6:	47b8      	blx	r7
 80011a8:	9803      	ldr	r0, [sp, #12]
 80011aa:	2104      	movs	r1, #4
 80011ac:	f000 f8fc 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d135      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011b4:	f000 f850 	bl	8001258 <.text_55>
 80011b8:	f000 f85c 	bl	8001274 <.text_58>
 80011bc:	2207      	movs	r2, #7
 80011be:	e027      	b.n	8001210 <PE_SubStateMachine_Generic+0x458>
 80011c0:	9004      	str	r0, [sp, #16]
 80011c2:	ab03      	add	r3, sp, #12
 80011c4:	68a6      	ldr	r6, [r4, #8]
 80011c6:	7c20      	ldrb	r0, [r4, #16]
 80011c8:	6977      	ldr	r7, [r6, #20]
 80011ca:	aa04      	add	r2, sp, #16
 80011cc:	210f      	movs	r1, #15
 80011ce:	47b8      	blx	r7
 80011d0:	9803      	ldr	r0, [sp, #12]
 80011d2:	2104      	movs	r1, #4
 80011d4:	f000 f8e8 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d121      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011dc:	2103      	movs	r1, #3
 80011de:	2201      	movs	r2, #1
 80011e0:	9101      	str	r1, [sp, #4]
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	9002      	str	r0, [sp, #8]
 80011e6:	ab04      	add	r3, sp, #16
 80011e8:	2205      	movs	r2, #5
 80011ea:	2100      	movs	r1, #0
 80011ec:	4620      	mov	r0, r4
 80011ee:	f000 f968 	bl	80014c2 <PE_Send_DataMessage>
 80011f2:	e017      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011f4:	f000 f82b 	bl	800124e <.text_54>
 80011f8:	2111      	movs	r1, #17
 80011fa:	47b8      	blx	r7
 80011fc:	9803      	ldr	r0, [sp, #12]
 80011fe:	2109      	movs	r1, #9
 8001200:	f000 f8d2 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001204:	b960      	cbnz	r0, 8001220 <PE_SubStateMachine_Generic+0x468>
 8001206:	f000 f827 	bl	8001258 <.text_55>
 800120a:	f000 f833 	bl	8001274 <.text_58>
 800120e:	2205      	movs	r2, #5
 8001210:	f000 f827 	bl	8001262 <.text_56>
 8001214:	e006      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001216:	7c20      	ldrb	r0, [r4, #16]
 8001218:	2150      	movs	r1, #80	; 0x50
 800121a:	f7ff f99c 	bl	8000556 <USBPD_PE_Notification>
 800121e:	e7ba      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8001220:	2001      	movs	r0, #1
 8001222:	7460      	strb	r0, [r4, #17]
 8001224:	4650      	mov	r0, sl
 8001226:	b00c      	add	sp, #48	; 0x30
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800122c <.text_51>:
 800122c:	8be0      	ldrh	r0, [r4, #30]
 800122e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001232:	4770      	bx	lr

08001234 <.text_52>:
 8001234:	7720      	strb	r0, [r4, #28]
 8001236:	f8a4 801e 	strh.w	r8, [r4, #30]
 800123a:	f04f 0a1b 	mov.w	sl, #27
 800123e:	4770      	bx	lr

08001240 <.text_53>:
 8001240:	2003      	movs	r0, #3
 8001242:	7460      	strb	r0, [r4, #17]
 8001244:	f04f 0a00 	mov.w	sl, #0
 8001248:	7831      	ldrb	r1, [r6, #0]
 800124a:	2914      	cmp	r1, #20
 800124c:	4770      	bx	lr

0800124e <.text_54>:
 800124e:	68a6      	ldr	r6, [r4, #8]
 8001250:	7c20      	ldrb	r0, [r4, #16]
 8001252:	6977      	ldr	r7, [r6, #20]
 8001254:	ab03      	add	r3, sp, #12
 8001256:	4770      	bx	lr

08001258 <.text_55>:
 8001258:	7028      	strb	r0, [r5, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	7069      	strb	r1, [r5, #1]
 800125e:	7c20      	ldrb	r0, [r4, #16]
 8001260:	e599      	b.n	8000d96 <PE_Get_UnchunkedSupport>

08001262 <.text_56>:
 8001262:	2100      	movs	r1, #0
 8001264:	4620      	mov	r0, r4
 8001266:	f000 ba4b 	b.w	8001700 <PE_Send_ExtendedMessage>

0800126a <.text_57>:
 800126a:	2014      	movs	r0, #20
 800126c:	7030      	strb	r0, [r6, #0]
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff bb9c 	b.w	80009ac <PE_Clear_RxEvent>

08001274 <.text_58>:
 8001274:	b918      	cbnz	r0, 800127e <.text_58+0xa>
 8001276:	7868      	ldrb	r0, [r5, #1]
 8001278:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800127c:	7068      	strb	r0, [r5, #1]
 800127e:	2000      	movs	r0, #0
 8001280:	9a03      	ldr	r2, [sp, #12]
 8001282:	9002      	str	r0, [sp, #8]
 8001284:	1d12      	adds	r2, r2, #4
 8001286:	b292      	uxth	r2, r2
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	2103      	movs	r1, #3
 800128c:	9101      	str	r1, [sp, #4]
 800128e:	464b      	mov	r3, r9
 8001290:	4770      	bx	lr

08001292 <.text_59>:
 8001292:	b918      	cbnz	r0, 800129c <.text_59+0xa>
 8001294:	7868      	ldrb	r0, [r5, #1]
 8001296:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800129a:	7068      	strb	r0, [r5, #1]
 800129c:	2000      	movs	r0, #0
 800129e:	9a03      	ldr	r2, [sp, #12]
 80012a0:	9002      	str	r0, [sp, #8]
 80012a2:	1d12      	adds	r2, r2, #4
 80012a4:	2103      	movs	r1, #3
 80012a6:	b292      	uxth	r2, r2
 80012a8:	9101      	str	r1, [sp, #4]
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	464b      	mov	r3, r9
 80012ae:	4770      	bx	lr

080012b0 <PE_SubStateMachine_ReceiveDRS>:
 80012b0:	b51c      	push	{r2, r3, r4, lr}
 80012b2:	4604      	mov	r4, r0
 80012b4:	68a1      	ldr	r1, [r4, #8]
 80012b6:	7c20      	ldrb	r0, [r4, #16]
 80012b8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80012ba:	4790      	blx	r2
 80012bc:	280a      	cmp	r0, #10
 80012be:	d002      	beq.n	80012c6 <PE_SubStateMachine_ReceiveDRS+0x16>
 80012c0:	280c      	cmp	r0, #12
 80012c2:	d00b      	beq.n	80012dc <PE_SubStateMachine_ReceiveDRS+0x2c>
 80012c4:	e00c      	b.n	80012e0 <PE_SubStateMachine_ReceiveDRS+0x30>
 80012c6:	2000      	movs	r0, #0
 80012c8:	9000      	str	r0, [sp, #0]
 80012ca:	2303      	movs	r3, #3
 80012cc:	2203      	movs	r2, #3
 80012ce:	f000 f813 	bl	80012f8 <.text_61>
 80012d2:	b980      	cbnz	r0, 80012f6 <PE_SubStateMachine_ReceiveDRS+0x46>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e8bd 4016 	ldmia.w	sp!, {r1, r2, r4, lr}
 80012da:	e079      	b.n	80013d0 <PE_SwitchDataRole>
 80012dc:	202a      	movs	r0, #42	; 0x2a
 80012de:	e006      	b.n	80012ee <PE_SubStateMachine_ReceiveDRS+0x3e>
 80012e0:	6860      	ldr	r0, [r4, #4]
 80012e2:	7801      	ldrb	r1, [r0, #0]
 80012e4:	f001 0103 	and.w	r1, r1, #3
 80012e8:	2902      	cmp	r1, #2
 80012ea:	d102      	bne.n	80012f2 <PE_SubStateMachine_ReceiveDRS+0x42>
 80012ec:	2001      	movs	r0, #1
 80012ee:	7460      	strb	r0, [r4, #17]
 80012f0:	bd13      	pop	{r0, r1, r4, pc}
 80012f2:	212a      	movs	r1, #42	; 0x2a
 80012f4:	7461      	strb	r1, [r4, #17]
 80012f6:	bd13      	pop	{r0, r1, r4, pc}

080012f8 <.text_61>:
 80012f8:	2100      	movs	r1, #0
 80012fa:	4620      	mov	r0, r4
 80012fc:	f000 b8b4 	b.w	8001468 <PE_Send_CtrlMessage>

08001300 <PE_UpdateTimer>:
 8001300:	b510      	push	{r4, lr}
 8001302:	4602      	mov	r2, r0
 8001304:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8001308:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800130c:	42a1      	cmp	r1, r4
 800130e:	bfb8      	it	lt
 8001310:	1a50      	sublt	r0, r2, r1
 8001312:	b280      	uxth	r0, r0
 8001314:	bd10      	pop	{r4, pc}

08001316 <PE_CallHardResetCallback>:
 8001316:	6883      	ldr	r3, [r0, #8]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf1c      	itt	ne
 800131e:	7c00      	ldrbne	r0, [r0, #16]

08001320 <__iar_annotation$$tailcall>:
 8001320:	4718      	bxne	r3
 8001322:	4770      	bx	lr

08001324 <PE_SetPowerNegotiation>:
 8001324:	6842      	ldr	r2, [r0, #4]
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f3c3 2202 	ubfx	r2, r3, #8, #3
 800132c:	4291      	cmp	r1, r2
 800132e:	d007      	beq.n	8001340 <PE_SetPowerNegotiation+0x1c>
 8001330:	6842      	ldr	r2, [r0, #4]
 8001332:	f361 230a 	bfi	r3, r1, #8, #3
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	215a      	movs	r1, #90	; 0x5a
 800133a:	7c00      	ldrb	r0, [r0, #16]
 800133c:	f7ff b90b 	b.w	8000556 <USBPD_PE_Notification>
 8001340:	4770      	bx	lr

08001342 <USBPD_PE_ExecFastRoleSwapSignalling>:
 8001342:	4921      	ldr	r1, [pc, #132]	; (80013c8 <.text_70>)
 8001344:	4602      	mov	r2, r0
 8001346:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]

0800134a <.text_66>:
 800134a:	694a      	ldr	r2, [r1, #20]
 800134c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001350:	614a      	str	r2, [r1, #20]
 8001352:	6889      	ldr	r1, [r1, #8]
 8001354:	6a8a      	ldr	r2, [r1, #40]	; 0x28

08001356 <__iar_annotation$$tailcall>:
 8001356:	4710      	bx	r2

08001358 <PE_CalculateMinTiming>:
 8001358:	4601      	mov	r1, r0
 800135a:	f04f 30ff 	mov.w	r0, #4294967295
 800135e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
 8001360:	0453      	lsls	r3, r2, #17
 8001362:	bf1c      	itt	ne
 8001364:	8c88      	ldrhne	r0, [r1, #36]	; 0x24
 8001366:	f3c0 000e 	ubfxne	r0, r0, #0, #15
 800136a:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 800136c:	0453      	lsls	r3, r2, #17
 800136e:	d007      	beq.n	8001380 <PE_CalculateMinTiming+0x28>
 8001370:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8001372:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001376:	4290      	cmp	r0, r2
 8001378:	bf24      	itt	cs
 800137a:	8c48      	ldrhcs	r0, [r1, #34]	; 0x22
 800137c:	f3c0 000e 	ubfxcs	r0, r0, #0, #15
 8001380:	4770      	bx	lr

08001382 <PE_SetPowerNegociation>:
 8001382:	b538      	push	{r3, r4, r5, lr}
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	6860      	ldr	r0, [r4, #4]
 800138a:	6802      	ldr	r2, [r0, #0]
 800138c:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8001390:	4285      	cmp	r5, r0
 8001392:	d003      	beq.n	800139c <PE_SetPowerNegociation+0x1a>
 8001394:	7c20      	ldrb	r0, [r4, #16]
 8001396:	215a      	movs	r1, #90	; 0x5a
 8001398:	f7ff f8dd 	bl	8000556 <USBPD_PE_Notification>
 800139c:	6860      	ldr	r0, [r4, #4]
 800139e:	6801      	ldr	r1, [r0, #0]
 80013a0:	f365 210a 	bfi	r1, r5, #8, #3
 80013a4:	6001      	str	r1, [r0, #0]
 80013a6:	bd31      	pop	{r0, r4, r5, pc}

080013a8 <PE_CheckDataSizeFromGetDataInfo>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	2200      	movs	r2, #0
 80013ac:	4288      	cmp	r0, r1
 80013ae:	d208      	bcs.n	80013c2 <PE_CheckDataSizeFromGetDataInfo+0x1a>
 80013b0:	2018      	movs	r0, #24
 80013b2:	4c06      	ldr	r4, [pc, #24]	; (80013cc <.text_71>)
 80013b4:	a316      	add	r3, pc, #88	; (adr r3, 8001410 <.text_73>)
 80013b6:	6825      	ldr	r5, [r4, #0]
 80013b8:	9000      	str	r0, [sp, #0]
 80013ba:	2100      	movs	r1, #0
 80013bc:	2006      	movs	r0, #6
 80013be:	47a8      	blx	r5
 80013c0:	2202      	movs	r2, #2
 80013c2:	4610      	mov	r0, r2
 80013c4:	bd32      	pop	{r1, r4, r5, pc}
	...

080013c8 <.text_70>:
 80013c8:	200002b8 	.word	0x200002b8

080013cc <.text_71>:
 80013cc:	20000000 	.word	0x20000000

080013d0 <PE_SwitchDataRole>:
 80013d0:	b510      	push	{r4, lr}
 80013d2:	4604      	mov	r4, r0
 80013d4:	6860      	ldr	r0, [r4, #4]
 80013d6:	6801      	ldr	r1, [r0, #0]
 80013d8:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80013dc:	2800      	cmp	r0, #0
 80013de:	6860      	ldr	r0, [r4, #4]
 80013e0:	d109      	bne.n	80013f6 <PE_SwitchDataRole+0x26>
 80013e2:	f041 0108 	orr.w	r1, r1, #8
 80013e6:	6001      	str	r1, [r0, #0]
 80013e8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80013ec:	7c20      	ldrb	r0, [r4, #16]
 80013ee:	f003 fdf5 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 80013f2:	2125      	movs	r1, #37	; 0x25
 80013f4:	e007      	b.n	8001406 <PE_SwitchDataRole+0x36>
 80013f6:	f021 0108 	bic.w	r1, r1, #8
 80013fa:	6001      	str	r1, [r0, #0]
 80013fc:	2100      	movs	r1, #0
 80013fe:	7c20      	ldrb	r0, [r4, #16]
 8001400:	f003 fdec 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 8001404:	2124      	movs	r1, #36	; 0x24
 8001406:	7c20      	ldrb	r0, [r4, #16]
 8001408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140c:	f7ff b8a3 	b.w	8000556 <USBPD_PE_Notification>

08001410 <.text_73>:
 8001410:	61746144 	.word	0x61746144
 8001414:	7a695320 	.word	0x7a695320
 8001418:	73692065 	.word	0x73692065
 800141c:	746f6e20 	.word	0x746f6e20
 8001420:	726f6320 	.word	0x726f6320
 8001424:	74636572 	.word	0x74636572
 8001428:	00          	.byte	0x00
 8001429:	00          	.byte	0x00
	...

0800142c <USBPD_PE_SetTrace>:
 800142c:	0001      	movs	r1, r0
 800142e:	4906      	ldr	r1, [pc, #24]	; (8001448 <.text_5>)
 8001430:	bf08      	it	eq
 8001432:	f20f 0031 	addweq	r0, pc, #49	; 0x31
 8001436:	6008      	str	r0, [r1, #0]
 8001438:	4770      	bx	lr

0800143a <USBPD_PE_CheckLIB>:
 800143a:	4601      	mov	r1, r0
 800143c:	2000      	movs	r0, #0
 800143e:	4a03      	ldr	r2, [pc, #12]	; (800144c <.text_6>)
 8001440:	4291      	cmp	r1, r2
 8001442:	bf08      	it	eq
 8001444:	2001      	moveq	r0, #1
 8001446:	4770      	bx	lr

08001448 <.text_5>:
 8001448:	20000000 	.word	0x20000000

0800144c <.text_6>:
 800144c:	30410000 	.word	0x30410000

08001450 <USBPD_PE_GetMemoryConsumption>:
 8001450:	b510      	push	{r4, lr}
 8001452:	f003 fda3 	bl	8004f9c <USBPD_PRL_GetMemoryConsumption>
 8001456:	4604      	mov	r4, r0
 8001458:	f7fe ffad 	bl	80003b6 <USBPD_CAD_GetMemoryConsumption>
 800145c:	1904      	adds	r4, r0, r4
 800145e:	f504 6061 	add.w	r0, r4, #3600	; 0xe10
 8001462:	bd10      	pop	{r4, pc}

08001464 <PE_Trace_Empty>:
 8001464:	4770      	bx	lr
	...

08001468 <PE_Send_CtrlMessage>:
 8001468:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800146c:	9c08      	ldr	r4, [sp, #32]
 800146e:	4606      	mov	r6, r0
 8001470:	4688      	mov	r8, r1
 8001472:	4617      	mov	r7, r2
 8001474:	461d      	mov	r5, r3
 8001476:	f000 f81f 	bl	80014b8 <.text_3>
 800147a:	b190      	cbz	r0, 80014a2 <PE_Send_CtrlMessage+0x3a>
 800147c:	9401      	str	r4, [sp, #4]
 800147e:	2002      	movs	r0, #2
 8001480:	9000      	str	r0, [sp, #0]
 8001482:	f206 2363 	addw	r3, r6, #611	; 0x263
 8001486:	7c30      	ldrb	r0, [r6, #16]
 8001488:	463a      	mov	r2, r7
 800148a:	4641      	mov	r1, r8
 800148c:	f003 fde2 	bl	8005054 <USBPD_PRL_SendMessage>
 8001490:	2803      	cmp	r0, #3
 8001492:	d0f0      	beq.n	8001476 <PE_Send_CtrlMessage+0xe>
 8001494:	2810      	cmp	r0, #16
 8001496:	d00d      	beq.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 8001498:	2f0d      	cmp	r7, #13
 800149a:	bf0c      	ite	eq
 800149c:	2201      	moveq	r2, #1
 800149e:	2200      	movne	r2, #0
 80014a0:	e002      	b.n	80014a8 <PE_Send_CtrlMessage+0x40>
 80014a2:	7470      	strb	r0, [r6, #17]
 80014a4:	2010      	movs	r0, #16
 80014a6:	e005      	b.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 80014a8:	4603      	mov	r3, r0
 80014aa:	9500      	str	r5, [sp, #0]
 80014ac:	4641      	mov	r1, r8
 80014ae:	4630      	mov	r0, r6
 80014b0:	f000 fbe8 	bl	8001c84 <PE_CheckSendMessageStatus>
 80014b4:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080014b8 <.text_3>:
 80014b8:	6870      	ldr	r0, [r6, #4]
 80014ba:	6801      	ldr	r1, [r0, #0]
 80014bc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80014c0:	4770      	bx	lr

080014c2 <PE_Send_DataMessage>:
 80014c2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80014c4:	4604      	mov	r4, r0
 80014c6:	9f08      	ldr	r7, [sp, #32]
 80014c8:	460d      	mov	r5, r1
 80014ca:	4616      	mov	r6, r2
 80014cc:	2000      	movs	r0, #0
 80014ce:	e010      	b.n	80014f2 <PE_Send_DataMessage+0x30>
 80014d0:	2100      	movs	r1, #0
 80014d2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80014d6:	f8d3 c000 	ldr.w	ip, [r3]
 80014da:	440a      	add	r2, r1
 80014dc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80014e0:	1c49      	adds	r1, r1, #1
 80014e2:	fa2c fc0e 	lsr.w	ip, ip, lr
 80014e6:	2904      	cmp	r1, #4
 80014e8:	f882 c265 	strb.w	ip, [r2, #613]	; 0x265
 80014ec:	d3f1      	bcc.n	80014d2 <PE_Send_DataMessage+0x10>
 80014ee:	1d1b      	adds	r3, r3, #4
 80014f0:	1c40      	adds	r0, r0, #1
 80014f2:	42b8      	cmp	r0, r7
 80014f4:	d3ec      	bcc.n	80014d0 <PE_Send_DataMessage+0xe>
 80014f6:	6860      	ldr	r0, [r4, #4]
 80014f8:	f7ff ffdf 	bl	80014ba <.text_3+0x2>
 80014fc:	b1d8      	cbz	r0, 8001536 <PE_Send_DataMessage+0x74>
 80014fe:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8001502:	9001      	str	r0, [sp, #4]
 8001504:	f204 2363 	addw	r3, r4, #611	; 0x263
 8001508:	00b8      	lsls	r0, r7, #2
 800150a:	1c80      	adds	r0, r0, #2
 800150c:	b280      	uxth	r0, r0
 800150e:	9000      	str	r0, [sp, #0]
 8001510:	4632      	mov	r2, r6
 8001512:	7c20      	ldrb	r0, [r4, #16]
 8001514:	4629      	mov	r1, r5
 8001516:	f003 fd9d 	bl	8005054 <USBPD_PRL_SendMessage>
 800151a:	2803      	cmp	r0, #3
 800151c:	d0eb      	beq.n	80014f6 <PE_Send_DataMessage+0x34>
 800151e:	2810      	cmp	r0, #16
 8001520:	d008      	beq.n	8001534 <PE_Send_DataMessage+0x72>
 8001522:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8001526:	9100      	str	r1, [sp, #0]
 8001528:	4603      	mov	r3, r0
 800152a:	2200      	movs	r2, #0
 800152c:	4629      	mov	r1, r5
 800152e:	4620      	mov	r0, r4
 8001530:	f000 fba8 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001534:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001536:	2010      	movs	r0, #16
 8001538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0800153c <PE_Check_ExtendedMessage>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	f204 265a 	addw	r6, r4, #602	; 0x25a
 8001544:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001546:	7881      	ldrb	r1, [r0, #2]
 8001548:	78c0      	ldrb	r0, [r0, #3]
 800154a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800154e:	8031      	strh	r1, [r6, #0]
 8001550:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001554:	f000 001f 	and.w	r0, r0, #31
 8001558:	70b0      	strb	r0, [r6, #2]
 800155a:	f3c1 20c3 	ubfx	r0, r1, #11, #4
 800155e:	2800      	cmp	r0, #0
 8001560:	bf1e      	ittt	ne
 8001562:	f3c1 2080 	ubfxne	r0, r1, #10, #1
 8001566:	2800      	cmpne	r0, #0
 8001568:	2034      	movne	r0, #52	; 0x34
 800156a:	d126      	bne.n	80015ba <PE_Check_ExtendedMessage+0x7e>
 800156c:	0408      	lsls	r0, r1, #16
 800156e:	0fc0      	lsrs	r0, r0, #31
 8001570:	f204 2281 	addw	r2, r4, #641	; 0x281
 8001574:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8001578:	d10b      	bne.n	8001592 <PE_Check_ExtendedMessage+0x56>
 800157a:	f8a4 348e 	strh.w	r3, [r4, #1166]	; 0x48e
 800157e:	f8b4 148e 	ldrh.w	r1, [r4, #1166]	; 0x48e
 8001582:	4288      	cmp	r0, r1
 8001584:	d21a      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 8001586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001588:	1d19      	adds	r1, r3, #4
 800158a:	5c0d      	ldrb	r5, [r1, r0]
 800158c:	5415      	strb	r5, [r2, r0]
 800158e:	1c40      	adds	r0, r0, #1
 8001590:	e7f5      	b.n	800157e <PE_Check_ExtendedMessage+0x42>
 8001592:	f411 4ff8 	tst.w	r1, #31744	; 0x7c00
 8001596:	d106      	bne.n	80015a6 <PE_Check_ExtendedMessage+0x6a>
 8001598:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800159a:	f3c0 3002 	ubfx	r0, r0, #12, #3
 800159e:	2807      	cmp	r0, #7
 80015a0:	d30c      	bcc.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a2:	2b1a      	cmp	r3, #26
 80015a4:	d90a      	bls.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a6:	f3c1 2080 	ubfx	r0, r1, #10, #1
 80015aa:	b938      	cbnz	r0, 80015bc <PE_Check_ExtendedMessage+0x80>
 80015ac:	f8b4 048e 	ldrh.w	r0, [r4, #1166]	; 0x48e
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d203      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015b4:	2100      	movs	r1, #0
 80015b6:	83e1      	strh	r1, [r4, #30]
 80015b8:	2037      	movs	r0, #55	; 0x37
 80015ba:	e089      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 80015bc:	7f20      	ldrb	r0, [r4, #28]
 80015be:	78b1      	ldrb	r1, [r6, #2]
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d034      	beq.n	800162e <PE_Check_ExtendedMessage+0xf2>
 80015c4:	2901      	cmp	r1, #1
 80015c6:	d008      	beq.n	80015da <PE_Check_ExtendedMessage+0x9e>
 80015c8:	2902      	cmp	r1, #2
 80015ca:	d018      	beq.n	80015fe <PE_Check_ExtendedMessage+0xc2>
 80015cc:	2905      	cmp	r1, #5
 80015ce:	d028      	beq.n	8001622 <PE_Check_ExtendedMessage+0xe6>
 80015d0:	2907      	cmp	r1, #7
 80015d2:	d021      	beq.n	8001618 <PE_Check_ExtendedMessage+0xdc>
 80015d4:	290f      	cmp	r1, #15
 80015d6:	d009      	beq.n	80015ec <PE_Check_ExtendedMessage+0xb0>
 80015d8:	e07c      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80015da:	f000 f884 	bl	80016e6 <.text_7>
 80015de:	2319      	movs	r3, #25
 80015e0:	2108      	movs	r1, #8
 80015e2:	47b8      	blx	r7
 80015e4:	2003      	movs	r0, #3
 80015e6:	7460      	strb	r0, [r4, #17]
 80015e8:	2147      	movs	r1, #71	; 0x47
 80015ea:	e010      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015ec:	f000 f87b 	bl	80016e6 <.text_7>
 80015f0:	2318      	movs	r3, #24
 80015f2:	2113      	movs	r1, #19
 80015f4:	47b8      	blx	r7
 80015f6:	2003      	movs	r0, #3
 80015f8:	7460      	strb	r0, [r4, #17]
 80015fa:	2162      	movs	r1, #98	; 0x62
 80015fc:	e007      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015fe:	f000 f872 	bl	80016e6 <.text_7>
 8001602:	2307      	movs	r3, #7
 8001604:	2109      	movs	r1, #9
 8001606:	47b8      	blx	r7
 8001608:	2003      	movs	r0, #3
 800160a:	7460      	strb	r0, [r4, #17]
 800160c:	214e      	movs	r1, #78	; 0x4e
 800160e:	7c20      	ldrb	r0, [r4, #16]
 8001610:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}
 8001614:	f7fe bf9f 	b.w	8000556 <USBPD_PE_Notification>
 8001618:	f000 f865 	bl	80016e6 <.text_7>
 800161c:	231a      	movs	r3, #26
 800161e:	210d      	movs	r1, #13
 8001620:	e003      	b.n	800162a <PE_Check_ExtendedMessage+0xee>
 8001622:	f000 f860 	bl	80016e6 <.text_7>
 8001626:	2309      	movs	r3, #9
 8001628:	2111      	movs	r1, #17
 800162a:	47b8      	blx	r7
 800162c:	e04f      	b.n	80016ce <PE_Check_ExtendedMessage+0x192>
 800162e:	1ecb      	subs	r3, r1, #3
 8001630:	2b08      	cmp	r3, #8
 8001632:	d84f      	bhi.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001634:	e8df f003 	tbb	[pc, r3]
 8001638:	174e0e05 	.word	0x174e0e05
 800163c:	243a314e 	.word	0x243a314e
 8001640:	0029      	.short	0x0029
 8001642:	f000 f84a 	bl	80016da <.text_6>
 8001646:	d045      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001648:	f000 f853 	bl	80016f2 <.text_8>
 800164c:	2110      	movs	r1, #16
 800164e:	47b8      	blx	r7
 8001650:	203a      	movs	r0, #58	; 0x3a
 8001652:	e03d      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001654:	f000 f841 	bl	80016da <.text_6>
 8001658:	d03c      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 800165a:	f000 f84a 	bl	80016f2 <.text_8>
 800165e:	210e      	movs	r1, #14
 8001660:	47b8      	blx	r7
 8001662:	203b      	movs	r0, #59	; 0x3b
 8001664:	e034      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	8901      	ldrh	r1, [r0, #8]
 800166a:	f3c1 1080 	ubfx	r0, r1, #6, #1
 800166e:	2800      	cmp	r0, #0
 8001670:	d030      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001672:	f000 f838 	bl	80016e6 <.text_7>
 8001676:	2302      	movs	r3, #2
 8001678:	210c      	movs	r1, #12
 800167a:	47b8      	blx	r7
 800167c:	203c      	movs	r0, #60	; 0x3c
 800167e:	e027      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001680:	6820      	ldr	r0, [r4, #0]
 8001682:	8901      	ldrh	r1, [r0, #8]
 8001684:	f3c1 2080 	ubfx	r0, r1, #10, #1
 8001688:	e00b      	b.n	80016a2 <PE_Check_ExtendedMessage+0x166>
 800168a:	68a0      	ldr	r0, [r4, #8]
 800168c:	6905      	ldr	r5, [r0, #16]
 800168e:	b31d      	cbz	r5, 80016d8 <PE_Check_ExtendedMessage+0x19c>
 8001690:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	; 0x48e
 8001694:	7c20      	ldrb	r0, [r4, #16]
 8001696:	47a8      	blx	r5
 8001698:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800169a:	6820      	ldr	r0, [r4, #0]
 800169c:	8901      	ldrh	r1, [r0, #8]
 800169e:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016a2:	b1b8      	cbz	r0, 80016d4 <PE_Check_ExtendedMessage+0x198>
 80016a4:	68a1      	ldr	r1, [r4, #8]
 80016a6:	6908      	ldr	r0, [r1, #16]
 80016a8:	b950      	cbnz	r0, 80016c0 <PE_Check_ExtendedMessage+0x184>
 80016aa:	e013      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80016ac:	6820      	ldr	r0, [r4, #0]
 80016ae:	8901      	ldrh	r1, [r0, #8]
 80016b0:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016b4:	2800      	cmp	r0, #0
 80016b6:	bf1e      	ittt	ne
 80016b8:	68a1      	ldrne	r1, [r4, #8]
 80016ba:	6908      	ldrne	r0, [r1, #16]
 80016bc:	2800      	cmpne	r0, #0
 80016be:	d00b      	beq.n	80016d8 <PE_Check_ExtendedMessage+0x19c>
 80016c0:	68a5      	ldr	r5, [r4, #8]
 80016c2:	78b1      	ldrb	r1, [r6, #2]
 80016c4:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	; 0x48e
 80016c8:	7c20      	ldrb	r0, [r4, #16]
 80016ca:	692e      	ldr	r6, [r5, #16]
 80016cc:	47b0      	blx	r6
 80016ce:	2003      	movs	r0, #3
 80016d0:	7460      	strb	r0, [r4, #17]
 80016d2:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80016d4:	2101      	movs	r1, #1
 80016d6:	7461      	strb	r1, [r4, #17]
 80016d8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080016da <.text_6>:
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	8901      	ldrh	r1, [r0, #8]
 80016de:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80016e2:	2800      	cmp	r0, #0
 80016e4:	4770      	bx	lr

080016e6 <.text_7>:
 80016e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016e8:	68a5      	ldr	r5, [r4, #8]
 80016ea:	69af      	ldr	r7, [r5, #24]
 80016ec:	1d02      	adds	r2, r0, #4
 80016ee:	7c20      	ldrb	r0, [r4, #16]
 80016f0:	4770      	bx	lr

080016f2 <.text_8>:
 80016f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016f4:	68a5      	ldr	r5, [r4, #8]
 80016f6:	69af      	ldr	r7, [r5, #24]
 80016f8:	1d02      	adds	r2, r0, #4
 80016fa:	7c20      	ldrb	r0, [r4, #16]
 80016fc:	2301      	movs	r3, #1
 80016fe:	4770      	bx	lr

08001700 <PE_Send_ExtendedMessage>:
 8001700:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8001704:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001708:	4606      	mov	r6, r0
 800170a:	460f      	mov	r7, r1
 800170c:	4690      	mov	r8, r2
 800170e:	4699      	mov	r9, r3
 8001710:	f7ff fed2 	bl	80014b8 <.text_3>
 8001714:	b1b8      	cbz	r0, 8001746 <PE_Send_ExtendedMessage+0x46>
 8001716:	9501      	str	r5, [sp, #4]
 8001718:	9400      	str	r4, [sp, #0]
 800171a:	464b      	mov	r3, r9
 800171c:	7c30      	ldrb	r0, [r6, #16]
 800171e:	f048 0280 	orr.w	r2, r8, #128	; 0x80
 8001722:	4639      	mov	r1, r7
 8001724:	f003 fc96 	bl	8005054 <USBPD_PRL_SendMessage>
 8001728:	2803      	cmp	r0, #3
 800172a:	d0f1      	beq.n	8001710 <PE_Send_ExtendedMessage+0x10>
 800172c:	2810      	cmp	r0, #16
 800172e:	d008      	beq.n	8001742 <PE_Send_ExtendedMessage+0x42>
 8001730:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8001734:	9100      	str	r1, [sp, #0]
 8001736:	4603      	mov	r3, r0
 8001738:	2200      	movs	r2, #0
 800173a:	4639      	mov	r1, r7
 800173c:	4630      	mov	r0, r6
 800173e:	f000 faa1 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001742:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8001746:	2011      	movs	r0, #17
 8001748:	7470      	strb	r0, [r6, #17]
 800174a:	2010      	movs	r0, #16
 800174c:	e7f9      	b.n	8001742 <PE_Send_ExtendedMessage+0x42>

0800174e <PE_SubStateMachine_ExtendedMessages>:
 800174e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	4604      	mov	r4, r0
 8001756:	f04f 0802 	mov.w	r8, #2
 800175a:	7c61      	ldrb	r1, [r4, #17]
 800175c:	2931      	cmp	r1, #49	; 0x31
 800175e:	f204 2a67 	addw	sl, r4, #615	; 0x267
 8001762:	f204 3b85 	addw	fp, r4, #901	; 0x385
 8001766:	f204 265a 	addw	r6, r4, #602	; 0x25a
 800176a:	f104 0930 	add.w	r9, r4, #48	; 0x30
 800176e:	f204 2563 	addw	r5, r4, #611	; 0x263
 8001772:	f204 478e 	addw	r7, r4, #1166	; 0x48e
 8001776:	f248 001b 	movw	r0, #32795	; 0x801b
 800177a:	d015      	beq.n	80017a8 <PE_SubStateMachine_ExtendedMessages+0x5a>
 800177c:	2933      	cmp	r1, #51	; 0x33
 800177e:	d058      	beq.n	8001832 <PE_SubStateMachine_ExtendedMessages+0xe4>
 8001780:	2934      	cmp	r1, #52	; 0x34
 8001782:	d05f      	beq.n	8001844 <PE_SubStateMachine_ExtendedMessages+0xf6>
 8001784:	2935      	cmp	r1, #53	; 0x35
 8001786:	f000 808a 	beq.w	800189e <PE_SubStateMachine_ExtendedMessages+0x150>
 800178a:	2936      	cmp	r1, #54	; 0x36
 800178c:	f000 809d 	beq.w	80018ca <PE_SubStateMachine_ExtendedMessages+0x17c>
 8001790:	2937      	cmp	r1, #55	; 0x37
 8001792:	f000 809f 	beq.w	80018d4 <PE_SubStateMachine_ExtendedMessages+0x186>
 8001796:	2938      	cmp	r1, #56	; 0x38
 8001798:	bf01      	itttt	eq
 800179a:	2003      	moveq	r0, #3
 800179c:	7460      	strbeq	r0, [r4, #17]
 800179e:	f04f 0800 	moveq.w	r8, #0
 80017a2:	f8a7 8000 	strheq.w	r8, [r7]
 80017a6:	e0c3      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80017a8:	9503      	str	r5, [sp, #12]
 80017aa:	2500      	movs	r5, #0
 80017ac:	803d      	strh	r5, [r7, #0]
 80017ae:	7c20      	ldrb	r0, [r4, #16]
 80017b0:	f7ff faf1 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017b4:	2801      	cmp	r0, #1
 80017b6:	d106      	bne.n	80017c6 <PE_SubStateMachine_ExtendedMessages+0x78>
 80017b8:	f204 3087 	addw	r0, r4, #903	; 0x387
 80017bc:	7005      	strb	r5, [r0, #0]
 80017be:	7045      	strb	r5, [r0, #1]
 80017c0:	f8cd b00c 	str.w	fp, [sp, #12]
 80017c4:	e017      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017c6:	72f5      	strb	r5, [r6, #11]
 80017c8:	7335      	strb	r5, [r6, #12]
 80017ca:	7c20      	ldrb	r0, [r4, #16]
 80017cc:	f7ff fae3 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017d0:	b918      	cbnz	r0, 80017da <PE_SubStateMachine_ExtendedMessages+0x8c>
 80017d2:	7b30      	ldrb	r0, [r6, #12]
 80017d4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80017d8:	7330      	strb	r0, [r6, #12]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	281b      	cmp	r0, #27
 80017de:	4628      	mov	r0, r5
 80017e0:	d306      	bcc.n	80017f0 <PE_SubStateMachine_ExtendedMessages+0xa2>
 80017e2:	f000 f8a9 	bl	8001938 <.text_11>
 80017e6:	281a      	cmp	r0, #26
 80017e8:	d3fb      	bcc.n	80017e2 <PE_SubStateMachine_ExtendedMessages+0x94>
 80017ea:	e004      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017ec:	f000 f8a4 	bl	8001938 <.text_11>
 80017f0:	8879      	ldrh	r1, [r7, #2]
 80017f2:	4288      	cmp	r0, r1
 80017f4:	d3fa      	bcc.n	80017ec <PE_SubStateMachine_ExtendedMessages+0x9e>
 80017f6:	6960      	ldr	r0, [r4, #20]
 80017f8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80017fc:	b130      	cbz	r0, 800180c <PE_SubStateMachine_ExtendedMessages+0xbe>
 80017fe:	f000 f98f 	bl	8001b20 <.text_16>
 8001802:	bf14      	ite	ne
 8001804:	2501      	movne	r5, #1
 8001806:	2502      	moveq	r5, #2
 8001808:	2033      	movs	r0, #51	; 0x33
 800180a:	e000      	b.n	800180e <PE_SubStateMachine_ExtendedMessages+0xc0>
 800180c:	2003      	movs	r0, #3
 800180e:	9502      	str	r5, [sp, #8]
 8001810:	9001      	str	r0, [sp, #4]
 8001812:	8878      	ldrh	r0, [r7, #2]
 8001814:	9b03      	ldr	r3, [sp, #12]
 8001816:	1d00      	adds	r0, r0, #4
 8001818:	b280      	uxth	r0, r0
 800181a:	9000      	str	r0, [sp, #0]
 800181c:	78f2      	ldrb	r2, [r6, #3]
 800181e:	f899 1003 	ldrb.w	r1, [r9, #3]
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff ff6c 	bl	8001700 <PE_Send_ExtendedMessage>
 8001828:	2800      	cmp	r0, #0
 800182a:	d101      	bne.n	8001830 <PE_SubStateMachine_ExtendedMessages+0xe2>
 800182c:	7970      	ldrb	r0, [r6, #5]
 800182e:	7720      	strb	r0, [r4, #28]
 8001830:	e07e      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001832:	83e0      	strh	r0, [r4, #30]
 8001834:	f04f 081b 	mov.w	r8, #27
 8001838:	78f0      	ldrb	r0, [r6, #3]
 800183a:	2804      	cmp	r0, #4
 800183c:	d148      	bne.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0x182>
 800183e:	2174      	movs	r1, #116	; 0x74
 8001840:	7461      	strb	r1, [r4, #17]
 8001842:	e075      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001844:	8831      	ldrh	r1, [r6, #0]
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	f3c1 21c3 	ubfx	r1, r1, #11, #4
 800184c:	201a      	movs	r0, #26
 800184e:	4341      	muls	r1, r0
 8001850:	4291      	cmp	r1, r2
 8001852:	da04      	bge.n	800185e <PE_SubStateMachine_ExtendedMessages+0x110>
 8001854:	8830      	ldrh	r0, [r6, #0]
 8001856:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800185a:	280a      	cmp	r0, #10
 800185c:	d301      	bcc.n	8001862 <PE_SubStateMachine_ExtendedMessages+0x114>
 800185e:	2003      	movs	r0, #3
 8001860:	e019      	b.n	8001896 <PE_SubStateMachine_ExtendedMessages+0x148>
 8001862:	1a50      	subs	r0, r2, r1
 8001864:	281a      	cmp	r0, #26
 8001866:	bf3a      	itte	cc
 8001868:	1a52      	subcc	r2, r2, r1
 800186a:	b2d2      	uxtbcc	r2, r2
 800186c:	221a      	movcs	r2, #26
 800186e:	2000      	movs	r0, #0
 8001870:	e005      	b.n	800187e <PE_SubStateMachine_ExtendedMessages+0x130>
 8001872:	1843      	adds	r3, r0, r1
 8001874:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8001878:	f80a 3000 	strb.w	r3, [sl, r0]
 800187c:	1c40      	adds	r0, r0, #1
 800187e:	4290      	cmp	r0, r2
 8001880:	d3f7      	bcc.n	8001872 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001882:	8831      	ldrh	r1, [r6, #0]
 8001884:	887a      	ldrh	r2, [r7, #2]
 8001886:	7c20      	ldrb	r0, [r4, #16]
 8001888:	0ac9      	lsrs	r1, r1, #11
 800188a:	462b      	mov	r3, r5
 800188c:	f001 010f 	and.w	r1, r1, #15
 8001890:	f004 f86d 	bl	800596e <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001894:	2035      	movs	r0, #53	; 0x35
 8001896:	7460      	strb	r0, [r4, #17]
 8001898:	f04f 0800 	mov.w	r8, #0
 800189c:	e048      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 800189e:	6960      	ldr	r0, [r4, #20]
 80018a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80018a4:	2800      	cmp	r0, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2036      	movne	r0, #54	; 0x36
 80018aa:	2003      	moveq	r0, #3
 80018ac:	2100      	movs	r1, #0
 80018ae:	9001      	str	r0, [sp, #4]
 80018b0:	9102      	str	r1, [sp, #8]
 80018b2:	462b      	mov	r3, r5
 80018b4:	8878      	ldrh	r0, [r7, #2]
 80018b6:	9000      	str	r0, [sp, #0]
 80018b8:	78f2      	ldrb	r2, [r6, #3]
 80018ba:	f899 1000 	ldrb.w	r1, [r9]
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff ff1e 	bl	8001700 <PE_Send_ExtendedMessage>
 80018c4:	2000      	movs	r0, #0
 80018c6:	8038      	strh	r0, [r7, #0]
 80018c8:	e032      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018ca:	83e0      	strh	r0, [r4, #30]
 80018cc:	f04f 081b 	mov.w	r8, #27
 80018d0:	2039      	movs	r0, #57	; 0x39
 80018d2:	e004      	b.n	80018de <PE_SubStateMachine_ExtendedMessages+0x190>
 80018d4:	8be1      	ldrh	r1, [r4, #30]
 80018d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018da:	d102      	bne.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0x194>
 80018dc:	200f      	movs	r0, #15
 80018de:	7460      	strb	r0, [r4, #17]
 80018e0:	e026      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018e2:	83e0      	strh	r0, [r4, #30]
 80018e4:	4629      	mov	r1, r5
 80018e6:	7c20      	ldrb	r0, [r4, #16]
 80018e8:	f004 f86a 	bl	80059c0 <USBPD_PRL_PrepareChunkRequest>
 80018ec:	f04f 081b 	mov.w	r8, #27
 80018f0:	6860      	ldr	r0, [r4, #4]
 80018f2:	f7ff fde2 	bl	80014ba <.text_3+0x2>
 80018f6:	b180      	cbz	r0, 800191a <PE_SubStateMachine_ExtendedMessages+0x1cc>
 80018f8:	2000      	movs	r0, #0
 80018fa:	2106      	movs	r1, #6
 80018fc:	9001      	str	r0, [sp, #4]
 80018fe:	9100      	str	r1, [sp, #0]
 8001900:	462b      	mov	r3, r5
 8001902:	78b2      	ldrb	r2, [r6, #2]
 8001904:	f899 1000 	ldrb.w	r1, [r9]
 8001908:	7c20      	ldrb	r0, [r4, #16]
 800190a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800190e:	f003 fba1 	bl	8005054 <USBPD_PRL_SendMessage>
 8001912:	2803      	cmp	r0, #3
 8001914:	4603      	mov	r3, r0
 8001916:	d0eb      	beq.n	80018f0 <PE_SubStateMachine_ExtendedMessages+0x1a2>
 8001918:	e002      	b.n	8001920 <PE_SubStateMachine_ExtendedMessages+0x1d2>
 800191a:	2011      	movs	r0, #17
 800191c:	7460      	strb	r0, [r4, #17]
 800191e:	2310      	movs	r3, #16
 8001920:	2039      	movs	r0, #57	; 0x39
 8001922:	9000      	str	r0, [sp, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	f899 1000 	ldrb.w	r1, [r9]
 800192a:	4620      	mov	r0, r4
 800192c:	f000 f9aa 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001930:	4640      	mov	r0, r8
 8001932:	b005      	add	sp, #20
 8001934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001938 <.text_11>:
 8001938:	f81b 1000 	ldrb.w	r1, [fp, r0]
 800193c:	f80a 1000 	strb.w	r1, [sl, r0]
 8001940:	1c40      	adds	r0, r0, #1
 8001942:	4770      	bx	lr

08001944 <PE_ManageRXEvent>:
 8001944:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001948:	780a      	ldrb	r2, [r1, #0]
 800194a:	704a      	strb	r2, [r1, #1]
 800194c:	888a      	ldrh	r2, [r1, #4]
 800194e:	0bd1      	lsrs	r1, r2, #15
 8001950:	bf18      	it	ne
 8001952:	f7ff bdf3 	bne.w	800153c <PE_Check_ExtendedMessage>
 8001956:	f412 4f70 	tst.w	r2, #61440	; 0xf000
 800195a:	bf08      	it	eq
 800195c:	f000 b802 	beq.w	8001964 <PE_Check_ControlMessage>
 8001960:	e0e4      	b.n	8001b2c <PE_Check_DataMessage>
	...

08001964 <PE_Check_ControlMessage>:
 8001964:	b510      	push	{r4, lr}
 8001966:	f000 f987 	bl	8001c78 <.text_18>
 800196a:	1e40      	subs	r0, r0, #1
 800196c:	2817      	cmp	r0, #23
 800196e:	d85b      	bhi.n	8001a28 <PE_Check_ControlMessage+0xc4>
 8001970:	e8df f000 	tbb	[pc, r0]
 8001974:	bfbf0ccc 	.word	0xbfbf0ccc
 8001978:	5520bf1e 	.word	0x5520bf1e
 800197c:	bf3b3143 	.word	0xbf3b3143
 8001980:	b9c1c117 	.word	0xb9c1c117
 8001984:	96b18a67 	.word	0x96b18a67
 8001988:	b5c17caa 	.word	0xb5c17caa
 800198c:	f000 f8c8 	bl	8001b20 <.text_16>
 8001990:	f040 80bc 	bne.w	8001b0c <PE_Check_ControlMessage+0x1a8>
 8001994:	2002      	movs	r0, #2
 8001996:	7720      	strb	r0, [r4, #28]
 8001998:	212b      	movs	r1, #43	; 0x2b
 800199a:	f000 f8be 	bl	8001b1a <.text_15>
 800199e:	2198      	movs	r1, #152	; 0x98
 80019a0:	e0b3      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 80019a2:	2003      	movs	r0, #3
 80019a4:	7720      	strb	r0, [r4, #28]
 80019a6:	2132      	movs	r1, #50	; 0x32
 80019a8:	f000 f8b7 	bl	8001b1a <.text_15>
 80019ac:	2010      	movs	r0, #16
 80019ae:	e0a9      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019b0:	2133      	movs	r1, #51	; 0x33
 80019b2:	e099      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 80019b4:	2006      	movs	r0, #6
 80019b6:	7720      	strb	r0, [r4, #28]
 80019b8:	f000 f8b2 	bl	8001b20 <.text_16>
 80019bc:	bf01      	itttt	eq
 80019be:	6820      	ldreq	r0, [r4, #0]
 80019c0:	6841      	ldreq	r1, [r0, #4]
 80019c2:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 80019c6:	2800      	cmpeq	r0, #0
 80019c8:	d024      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019ca:	7c20      	ldrb	r0, [r4, #16]
 80019cc:	210c      	movs	r1, #12
 80019ce:	f7fe fdc2 	bl	8000556 <USBPD_PE_Notification>
 80019d2:	204c      	movs	r0, #76	; 0x4c
 80019d4:	e096      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019d6:	f000 f89a 	bl	8001b0e <.text_14>
 80019da:	d01b      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019dc:	2008      	movs	r0, #8
 80019de:	7720      	strb	r0, [r4, #28]
 80019e0:	213c      	movs	r1, #60	; 0x3c
 80019e2:	f000 f89a 	bl	8001b1a <.text_15>
 80019e6:	2022      	movs	r0, #34	; 0x22
 80019e8:	e08c      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019ea:	68a1      	ldr	r1, [r4, #8]
 80019ec:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d010      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019f2:	2111      	movs	r1, #17
 80019f4:	7721      	strb	r1, [r4, #28]
 80019f6:	209d      	movs	r0, #157	; 0x9d
 80019f8:	e084      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019fa:	7c20      	ldrb	r0, [r4, #16]
 80019fc:	2123      	movs	r1, #35	; 0x23
 80019fe:	f7fe fdaa 	bl	8000556 <USBPD_PE_Notification>
 8001a02:	6960      	ldr	r0, [r4, #20]
 8001a04:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001a08:	b108      	cbz	r0, 8001a0e <PE_Check_ControlMessage+0xaa>
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	e07a      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001a0e:	68a1      	ldr	r1, [r4, #8]
 8001a10:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d06f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a16:	2010      	movs	r0, #16
 8001a18:	7720      	strb	r0, [r4, #28]
 8001a1a:	2193      	movs	r1, #147	; 0x93
 8001a1c:	e075      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001a1e:	6860      	ldr	r0, [r4, #4]
 8001a20:	6801      	ldr	r1, [r0, #0]
 8001a22:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d165      	bne.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a2a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a2e:	b110      	cbz	r0, 8001a36 <PE_Check_ControlMessage+0xd2>
 8001a30:	f000 f86d 	bl	8001b0e <.text_14>
 8001a34:	d05f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a36:	211d      	movs	r1, #29
 8001a38:	7461      	strb	r1, [r4, #17]
 8001a3a:	2007      	movs	r0, #7
 8001a3c:	7720      	strb	r0, [r4, #28]
 8001a3e:	2106      	movs	r1, #6
 8001a40:	e052      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a42:	6820      	ldr	r0, [r4, #0]
 8001a44:	8901      	ldrh	r1, [r0, #8]
 8001a46:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d059      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a4e:	f000 f867 	bl	8001b20 <.text_16>
 8001a52:	bf01      	itttt	eq
 8001a54:	6820      	ldreq	r0, [r4, #0]
 8001a56:	6841      	ldreq	r1, [r0, #4]
 8001a58:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 8001a5c:	2800      	cmpeq	r0, #0
 8001a5e:	d050      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a60:	2163      	movs	r1, #99	; 0x63
 8001a62:	7461      	strb	r1, [r4, #17]
 8001a64:	200a      	movs	r0, #10
 8001a66:	7720      	strb	r0, [r4, #28]
 8001a68:	2146      	movs	r1, #70	; 0x46
 8001a6a:	e03d      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a6c:	6860      	ldr	r0, [r4, #4]
 8001a6e:	6801      	ldr	r1, [r0, #0]
 8001a70:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a74:	b110      	cbz	r0, 8001a7c <PE_Check_ControlMessage+0x118>
 8001a76:	f000 f84a 	bl	8001b0e <.text_14>
 8001a7a:	d042      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a7c:	2164      	movs	r1, #100	; 0x64
 8001a7e:	7461      	strb	r1, [r4, #17]
 8001a80:	205f      	movs	r0, #95	; 0x5f
 8001a82:	7720      	strb	r0, [r4, #28]
 8001a84:	2160      	movs	r1, #96	; 0x60
 8001a86:	e02f      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	8901      	ldrh	r1, [r0, #8]
 8001a8c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001a90:	b318      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001a92:	200b      	movs	r0, #11
 8001a94:	7720      	strb	r0, [r4, #28]
 8001a96:	214d      	movs	r1, #77	; 0x4d
 8001a98:	f000 f83f 	bl	8001b1a <.text_15>
 8001a9c:	2030      	movs	r0, #48	; 0x30
 8001a9e:	e031      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001aa0:	6820      	ldr	r0, [r4, #0]
 8001aa2:	8901      	ldrh	r1, [r0, #8]
 8001aa4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d02a      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001aac:	200b      	movs	r0, #11
 8001aae:	7720      	strb	r0, [r4, #28]
 8001ab0:	2149      	movs	r1, #73	; 0x49
 8001ab2:	f000 f832 	bl	8001b1a <.text_15>
 8001ab6:	6860      	ldr	r0, [r4, #4]
 8001ab8:	6801      	ldr	r1, [r0, #0]
 8001aba:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001abe:	b108      	cbz	r0, 8001ac4 <PE_Check_ControlMessage+0x160>
 8001ac0:	202d      	movs	r0, #45	; 0x2d
 8001ac2:	e01f      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ac4:	2111      	movs	r1, #17
 8001ac6:	e020      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	8901      	ldrh	r1, [r0, #8]
 8001acc:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8001ad0:	b118      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001ad2:	202f      	movs	r0, #47	; 0x2f
 8001ad4:	e016      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ad6:	2009      	movs	r0, #9
 8001ad8:	7720      	strb	r0, [r4, #28]
 8001ada:	2101      	movs	r1, #1
 8001adc:	e015      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ade:	200f      	movs	r0, #15
 8001ae0:	7720      	strb	r0, [r4, #28]
 8001ae2:	214b      	movs	r1, #75	; 0x4b
 8001ae4:	e011      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ae6:	2159      	movs	r1, #89	; 0x59
 8001ae8:	7c20      	ldrb	r0, [r4, #16]
 8001aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aee:	f7fe bd32 	b.w	8000556 <USBPD_PE_Notification>
 8001af2:	2011      	movs	r0, #17
 8001af4:	e006      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001af6:	6860      	ldr	r0, [r4, #4]
 8001af8:	7801      	ldrb	r1, [r0, #0]
 8001afa:	f001 0103 	and.w	r1, r1, #3
 8001afe:	2902      	cmp	r1, #2
 8001b00:	d102      	bne.n	8001b08 <PE_Check_ControlMessage+0x1a4>
 8001b02:	2001      	movs	r0, #1
 8001b04:	7460      	strb	r0, [r4, #17]
 8001b06:	bd10      	pop	{r4, pc}
 8001b08:	212a      	movs	r1, #42	; 0x2a
 8001b0a:	7461      	strb	r1, [r4, #17]
 8001b0c:	bd10      	pop	{r4, pc}

08001b0e <.text_14>:
 8001b0e:	6820      	ldr	r0, [r4, #0]
 8001b10:	6841      	ldr	r1, [r0, #4]
 8001b12:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001b16:	2800      	cmp	r0, #0
 8001b18:	4770      	bx	lr

08001b1a <.text_15>:
 8001b1a:	7c20      	ldrb	r0, [r4, #16]
 8001b1c:	f7fe bd1b 	b.w	8000556 <USBPD_PE_Notification>

08001b20 <.text_16>:
 8001b20:	6860      	ldr	r0, [r4, #4]
 8001b22:	6801      	ldr	r1, [r0, #0]
 8001b24:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	4770      	bx	lr

08001b2c <PE_Check_DataMessage>:
 8001b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001b2e:	f000 f8a3 	bl	8001c78 <.text_18>
 8001b32:	2801      	cmp	r0, #1
 8001b34:	d02a      	beq.n	8001b8c <PE_Check_DataMessage+0x60>
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d00c      	beq.n	8001b54 <PE_Check_DataMessage+0x28>
 8001b3a:	2803      	cmp	r0, #3
 8001b3c:	d03c      	beq.n	8001bb8 <PE_Check_DataMessage+0x8c>
 8001b3e:	2806      	cmp	r0, #6
 8001b40:	d07c      	beq.n	8001c3c <PE_Check_DataMessage+0x110>
 8001b42:	2807      	cmp	r0, #7
 8001b44:	f000 8089 	beq.w	8001c5a <PE_Check_DataMessage+0x12e>
 8001b48:	280a      	cmp	r0, #10
 8001b4a:	f000 808f 	beq.w	8001c6c <PE_Check_DataMessage+0x140>
 8001b4e:	280f      	cmp	r0, #15
 8001b50:	d070      	beq.n	8001c34 <PE_Check_DataMessage+0x108>
 8001b52:	e08e      	b.n	8001c72 <PE_Check_DataMessage+0x146>
 8001b54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b56:	7881      	ldrb	r1, [r0, #2]
 8001b58:	78c2      	ldrb	r2, [r0, #3]
 8001b5a:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8001b5e:	7901      	ldrb	r1, [r0, #4]
 8001b60:	7940      	ldrb	r0, [r0, #5]
 8001b62:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001b66:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f7ff ffd8 	bl	8001b20 <.text_16>
 8001b70:	d063      	beq.n	8001c3a <PE_Check_DataMessage+0x10e>
 8001b72:	68a5      	ldr	r5, [r4, #8]
 8001b74:	7c20      	ldrb	r0, [r4, #16]
 8001b76:	69ae      	ldr	r6, [r5, #24]
 8001b78:	2304      	movs	r3, #4
 8001b7a:	466a      	mov	r2, sp
 8001b7c:	2106      	movs	r1, #6
 8001b7e:	47b0      	blx	r6
 8001b80:	2001      	movs	r0, #1
 8001b82:	7720      	strb	r0, [r4, #28]
 8001b84:	2100      	movs	r1, #0
 8001b86:	84a1      	strh	r1, [r4, #36]	; 0x24
 8001b88:	2009      	movs	r0, #9
 8001b8a:	e070      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001b8c:	f7ff ffc8 	bl	8001b20 <.text_16>
 8001b90:	d171      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001b92:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001b94:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8001b98:	7c20      	ldrb	r0, [r4, #16]
 8001b9a:	f7ff f84c 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8001b9e:	68a5      	ldr	r5, [r4, #8]
 8001ba0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001ba2:	69ae      	ldr	r6, [r5, #24]
 8001ba4:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001ba8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001baa:	1c82      	adds	r2, r0, #2
 8001bac:	7c20      	ldrb	r0, [r4, #16]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	47b0      	blx	r6
 8001bb4:	2044      	movs	r0, #68	; 0x44
 8001bb6:	e05a      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001bb8:	2100      	movs	r1, #0
 8001bba:	9101      	str	r1, [sp, #4]
 8001bbc:	9100      	str	r1, [sp, #0]
 8001bbe:	466b      	mov	r3, sp
 8001bc0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bc2:	7881      	ldrb	r1, [r0, #2]
 8001bc4:	78c2      	ldrb	r2, [r0, #3]
 8001bc6:	68a6      	ldr	r6, [r4, #8]
 8001bc8:	6977      	ldr	r7, [r6, #20]
 8001bca:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 8001bce:	7901      	ldrb	r1, [r0, #4]
 8001bd0:	7940      	ldrb	r0, [r0, #5]
 8001bd2:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001bd6:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8001bda:	7c20      	ldrb	r0, [r4, #16]
 8001bdc:	aa01      	add	r2, sp, #4
 8001bde:	2103      	movs	r1, #3
 8001be0:	47b8      	blx	r7
 8001be2:	9800      	ldr	r0, [sp, #0]
 8001be4:	2104      	movs	r1, #4
 8001be6:	f7ff fbdf 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	bf01      	itttt	eq
 8001bee:	6860      	ldreq	r0, [r4, #4]
 8001bf0:	6801      	ldreq	r1, [r0, #0]
 8001bf2:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001bf6:	2803      	cmpeq	r0, #3
 8001bf8:	d11a      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001bfa:	9801      	ldr	r0, [sp, #4]
 8001bfc:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c00:	4288      	cmp	r0, r1
 8001c02:	d115      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001c04:	0f2d      	lsrs	r5, r5, #28
 8001c06:	2d05      	cmp	r5, #5
 8001c08:	d010      	beq.n	8001c2c <PE_Check_DataMessage+0x100>
 8001c0a:	2d08      	cmp	r5, #8
 8001c0c:	d00c      	beq.n	8001c28 <PE_Check_DataMessage+0xfc>
 8001c0e:	2d09      	cmp	r5, #9
 8001c10:	d004      	beq.n	8001c1c <PE_Check_DataMessage+0xf0>
 8001c12:	2d0a      	cmp	r5, #10
 8001c14:	d12f      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001c16:	7c20      	ldrb	r0, [r4, #16]
 8001c18:	2166      	movs	r1, #102	; 0x66
 8001c1a:	e001      	b.n	8001c20 <PE_Check_DataMessage+0xf4>
 8001c1c:	7c20      	ldrb	r0, [r4, #16]
 8001c1e:	2165      	movs	r1, #101	; 0x65
 8001c20:	f7fe fc99 	bl	8000556 <USBPD_PE_Notification>
 8001c24:	2003      	movs	r0, #3
 8001c26:	e022      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c28:	2129      	movs	r1, #41	; 0x29
 8001c2a:	e023      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c2c:	2027      	movs	r0, #39	; 0x27
 8001c2e:	e01e      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c30:	2103      	movs	r1, #3
 8001c32:	e01f      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c34:	4620      	mov	r0, r4
 8001c36:	f003 f816 	bl	8004c66 <PE_Check_DataMessageVDM>
 8001c3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	8901      	ldrh	r1, [r0, #8]
 8001c40:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8001c44:	b180      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c48:	68a5      	ldr	r5, [r4, #8]
 8001c4a:	69ae      	ldr	r6, [r5, #24]
 8001c4c:	1c82      	adds	r2, r0, #2
 8001c4e:	7c20      	ldrb	r0, [r4, #16]
 8001c50:	2304      	movs	r3, #4
 8001c52:	210b      	movs	r1, #11
 8001c54:	47b0      	blx	r6
 8001c56:	202c      	movs	r0, #44	; 0x2c
 8001c58:	e009      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c5a:	6820      	ldr	r0, [r4, #0]
 8001c5c:	8901      	ldrh	r1, [r0, #8]
 8001c5e:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8001c62:	b108      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c64:	203d      	movs	r0, #61	; 0x3d
 8001c66:	e002      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c68:	2101      	movs	r1, #1
 8001c6a:	e003      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	7460      	strb	r0, [r4, #17]
 8001c70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c72:	2111      	movs	r1, #17
 8001c74:	7461      	strb	r1, [r4, #17]
 8001c76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001c78 <.text_18>:
 8001c78:	4604      	mov	r4, r0
 8001c7a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001c7e:	f000 001f 	and.w	r0, r0, #31
 8001c82:	4770      	bx	lr

08001c84 <PE_CheckSendMessageStatus>:
 8001c84:	b510      	push	{r4, lr}
 8001c86:	2410      	movs	r4, #16
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d007      	beq.n	8001c9c <PE_CheckSendMessageStatus+0x18>
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d00c      	beq.n	8001caa <PE_CheckSendMessageStatus+0x26>
 8001c90:	2b07      	cmp	r3, #7
 8001c92:	d00f      	beq.n	8001cb4 <PE_CheckSendMessageStatus+0x30>
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	bf08      	it	eq
 8001c98:	2409      	moveq	r4, #9
 8001c9a:	e027      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001c9c:	9902      	ldr	r1, [sp, #8]
 8001c9e:	7441      	strb	r1, [r0, #17]
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	6941      	ldr	r1, [r0, #20]
 8001ca4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001ca8:	e002      	b.n	8001cb0 <PE_CheckSendMessageStatus+0x2c>
 8001caa:	6941      	ldr	r1, [r0, #20]
 8001cac:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001cb0:	6141      	str	r1, [r0, #20]
 8001cb2:	e01b      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cb4:	b129      	cbz	r1, 8001cc2 <PE_CheckSendMessageStatus+0x3e>
 8001cb6:	2a01      	cmp	r2, #1
 8001cb8:	bf08      	it	eq
 8001cba:	2199      	moveq	r1, #153	; 0x99
 8001cbc:	d015      	beq.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cbe:	2407      	movs	r4, #7
 8001cc0:	e014      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cc2:	6841      	ldr	r1, [r0, #4]
 8001cc4:	680b      	ldr	r3, [r1, #0]
 8001cc6:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8001cca:	2904      	cmp	r1, #4
 8001ccc:	d003      	beq.n	8001cd6 <PE_CheckSendMessageStatus+0x52>
 8001cce:	2a01      	cmp	r2, #1
 8001cd0:	d10a      	bne.n	8001ce8 <PE_CheckSendMessageStatus+0x64>
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	e009      	b.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	d1fb      	bne.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001cda:	6882      	ldr	r2, [r0, #8]
 8001cdc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001cde:	2900      	cmp	r1, #0
 8001ce0:	d0f7      	beq.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001ce2:	2292      	movs	r2, #146	; 0x92
 8001ce4:	7442      	strb	r2, [r0, #17]
 8001ce6:	e001      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001ce8:	2111      	movs	r1, #17
 8001cea:	7441      	strb	r1, [r0, #17]
 8001cec:	4620      	mov	r0, r4
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <USBPD_PE_StateMachine_SNK>:
 8001cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	f8df 0c2c 	ldr.w	r0, [pc, #3116]	; 8002924 <.text_22>
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001d02:	7c68      	ldrb	r0, [r5, #17]
 8001d04:	2848      	cmp	r0, #72	; 0x48
 8001d06:	d12c      	bne.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f7fe ff28 	bl	8000b5e <PE_Reset_ZI>
 8001d0e:	4628      	mov	r0, r5
 8001d10:	f7fe ff5f 	bl	8000bd2 <PE_Reset_Counter>
 8001d14:	6828      	ldr	r0, [r5, #0]
 8001d16:	7903      	ldrb	r3, [r0, #4]
 8001d18:	7c28      	ldrb	r0, [r5, #16]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	f003 f93e 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8001d26:	6868      	ldr	r0, [r5, #4]
 8001d28:	6801      	ldr	r1, [r0, #0]
 8001d2a:	f021 0108 	bic.w	r1, r1, #8
 8001d2e:	6001      	str	r1, [r0, #0]
 8001d30:	6828      	ldr	r0, [r5, #0]
 8001d32:	6841      	ldr	r1, [r0, #4]
 8001d34:	6868      	ldr	r0, [r5, #4]
 8001d36:	6802      	ldr	r2, [r0, #0]
 8001d38:	f361 0201 	bfi	r2, r1, #0, #2
 8001d3c:	6002      	str	r2, [r0, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	7c28      	ldrb	r0, [r5, #16]
 8001d42:	f003 f985 	bl	8005050 <USBPD_PRL_SOPCapability>
 8001d46:	7c28      	ldrb	r0, [r5, #16]
 8001d48:	f003 fbf7 	bl	800553a <USBPD_PRL_Reset>
 8001d4c:	7ca9      	ldrb	r1, [r5, #18]
 8001d4e:	203e      	movs	r0, #62	; 0x3e
 8001d50:	293e      	cmp	r1, #62	; 0x3e
 8001d52:	7468      	strb	r0, [r5, #17]
 8001d54:	d005      	beq.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d56:	74a8      	strb	r0, [r5, #18]
 8001d58:	f000 fd25 	bl	80027a6 <.text_12>
 8001d5c:	223e      	movs	r2, #62	; 0x3e
 8001d5e:	2004      	movs	r0, #4
 8001d60:	47b8      	blx	r7
 8001d62:	6968      	ldr	r0, [r5, #20]
 8001d64:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001d68:	b130      	cbz	r0, 8001d78 <USBPD_PE_StateMachine_SNK+0x88>
 8001d6a:	6968      	ldr	r0, [r5, #20]
 8001d6c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001d70:	6168      	str	r0, [r5, #20]
 8001d72:	2164      	movs	r1, #100	; 0x64
 8001d74:	f000 fd3b 	bl	80027ee <.text_18>
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f7fe fde3 	bl	8000944 <PE_Get_RxEvent>
 8001d7e:	2803      	cmp	r0, #3
 8001d80:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d84:	d103      	bne.n	8001d8e <USBPD_PE_StateMachine_SNK+0x9e>
 8001d86:	2001      	movs	r0, #1
 8001d88:	b00d      	add	sp, #52	; 0x34
 8001d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d8e:	f88d 400d 	strb.w	r4, [sp, #13]
 8001d92:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 8001d96:	f248 19f4 	movw	r9, #33268	; 0x81f4
 8001d9a:	f248 0b1b 	movw	fp, #32795	; 0x801b
 8001d9e:	6868      	ldr	r0, [r5, #4]
 8001da0:	6801      	ldr	r1, [r0, #0]
 8001da2:	2402      	movs	r4, #2
 8001da4:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f000 8110 	beq.w	8001fce <USBPD_PE_StateMachine_SNK+0x2de>
 8001dae:	6968      	ldr	r0, [r5, #20]
 8001db0:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8001db4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001db8:	b180      	cbz	r0, 8001ddc <USBPD_PE_StateMachine_SNK+0xec>
 8001dba:	20a7      	movs	r0, #167	; 0xa7
 8001dbc:	6969      	ldr	r1, [r5, #20]
 8001dbe:	7468      	strb	r0, [r5, #17]
 8001dc0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8001dc4:	6169      	str	r1, [r5, #20]
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	70b0      	strb	r0, [r6, #2]
 8001dca:	7ca9      	ldrb	r1, [r5, #18]
 8001dcc:	29a7      	cmp	r1, #167	; 0xa7
 8001dce:	d020      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dd0:	20a7      	movs	r0, #167	; 0xa7
 8001dd2:	f000 fcef 	bl	80027b4 <.text_13>
 8001dd6:	22a7      	movs	r2, #167	; 0xa7
 8001dd8:	2004      	movs	r0, #4
 8001dda:	47e0      	blx	ip
 8001ddc:	78b0      	ldrb	r0, [r6, #2]
 8001dde:	280f      	cmp	r0, #15
 8001de0:	bf18      	it	ne
 8001de2:	2814      	cmpne	r0, #20
 8001de4:	d115      	bne.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001de6:	f000 fcce 	bl	8002786 <.text_9+0x2>
 8001dea:	d001      	beq.n	8001df0 <USBPD_PE_StateMachine_SNK+0x100>
 8001dec:	f000 fd06 	bl	80027fc <.text_20>
 8001df0:	78b2      	ldrb	r2, [r6, #2]
 8001df2:	746a      	strb	r2, [r5, #17]
 8001df4:	2000      	movs	r0, #0
 8001df6:	70b0      	strb	r0, [r6, #2]
 8001df8:	7ca9      	ldrb	r1, [r5, #18]
 8001dfa:	4291      	cmp	r1, r2
 8001dfc:	d009      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dfe:	74aa      	strb	r2, [r5, #18]
 8001e00:	9000      	str	r0, [sp, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8df 7b20 	ldr.w	r7, [pc, #2848]	; 8002928 <.text_23>
 8001e08:	7c29      	ldrb	r1, [r5, #16]
 8001e0a:	f8d7 c000 	ldr.w	ip, [r7]
 8001e0e:	2004      	movs	r0, #4
 8001e10:	47e0      	blx	ip
 8001e12:	f000 fcb3 	bl	800277c <.text_8>
 8001e16:	d117      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e18:	6868      	ldr	r0, [r5, #4]
 8001e1a:	6801      	ldr	r1, [r0, #0]
 8001e1c:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001e20:	88b1      	ldrh	r1, [r6, #4]
 8001e22:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001e26:	4288      	cmp	r0, r1
 8001e28:	d10e      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e2a:	f000 fca3 	bl	8002774 <.text_7>
 8001e2e:	f000 fce8 	bl	8002802 <.text_20+0x6>
 8001e32:	7ca9      	ldrb	r1, [r5, #18]
 8001e34:	2092      	movs	r0, #146	; 0x92
 8001e36:	2992      	cmp	r1, #146	; 0x92
 8001e38:	7468      	strb	r0, [r5, #17]
 8001e3a:	f000 80d4 	beq.w	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001e3e:	f000 fcb9 	bl	80027b4 <.text_13>
 8001e42:	2292      	movs	r2, #146	; 0x92
 8001e44:	2004      	movs	r0, #4
 8001e46:	47e0      	blx	ip
 8001e48:	7c68      	ldrb	r0, [r5, #17]
 8001e4a:	0001      	movs	r1, r0
 8001e4c:	f205 275e 	addw	r7, r5, #606	; 0x25e
 8001e50:	f24f 0a1f 	movw	sl, #61471	; 0xf01f
 8001e54:	f000 80bf 	beq.w	8001fd6 <USBPD_PE_StateMachine_SNK+0x2e6>
 8001e58:	1e41      	subs	r1, r0, #1
 8001e5a:	d070      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e5c:	1e89      	subs	r1, r1, #2
 8001e5e:	2901      	cmp	r1, #1
 8001e60:	f240 82aa 	bls.w	80023b8 <USBPD_PE_StateMachine_SNK+0x6c8>
 8001e64:	1e89      	subs	r1, r1, #2
 8001e66:	f000 81bb 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001e6a:	390a      	subs	r1, #10
 8001e6c:	f000 81bd 	beq.w	80021ea <USBPD_PE_StateMachine_SNK+0x4fa>
 8001e70:	1e49      	subs	r1, r1, #1
 8001e72:	f000 8242 	beq.w	80022fa <USBPD_PE_StateMachine_SNK+0x60a>
 8001e76:	1e49      	subs	r1, r1, #1
 8001e78:	f000 8248 	beq.w	800230c <USBPD_PE_StateMachine_SNK+0x61c>
 8001e7c:	1ec9      	subs	r1, r1, #3
 8001e7e:	f000 81e0 	beq.w	8002242 <USBPD_PE_StateMachine_SNK+0x552>
 8001e82:	1f09      	subs	r1, r1, #4
 8001e84:	2901      	cmp	r1, #1
 8001e86:	d95a      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e88:	1e89      	subs	r1, r1, #2
 8001e8a:	f000 826e 	beq.w	800236a <USBPD_PE_StateMachine_SNK+0x67a>
 8001e8e:	1ec9      	subs	r1, r1, #3
 8001e90:	d055      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e92:	1e49      	subs	r1, r1, #1
 8001e94:	f000 8333 	beq.w	80024fe <USBPD_PE_StateMachine_SNK+0x80e>
 8001e98:	1f09      	subs	r1, r1, #4
 8001e9a:	f000 829b 	beq.w	80023d4 <USBPD_PE_StateMachine_SNK+0x6e4>
 8001e9e:	1f49      	subs	r1, r1, #5
 8001ea0:	2902      	cmp	r1, #2
 8001ea2:	d94c      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ea4:	1ec9      	subs	r1, r1, #3
 8001ea6:	f000 8280 	beq.w	80023aa <USBPD_PE_StateMachine_SNK+0x6ba>
 8001eaa:	1e49      	subs	r1, r1, #1
 8001eac:	f000 838f 	beq.w	80025ce <USBPD_PE_StateMachine_SNK+0x8de>
 8001eb0:	1e49      	subs	r1, r1, #1
 8001eb2:	d044      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001eb4:	1e89      	subs	r1, r1, #2
 8001eb6:	f000 83cd 	beq.w	8002654 <USBPD_PE_StateMachine_SNK+0x964>
 8001eba:	1e49      	subs	r1, r1, #1
 8001ebc:	2901      	cmp	r1, #1
 8001ebe:	d93e      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ec0:	1e89      	subs	r1, r1, #2
 8001ec2:	d001      	beq.n	8001ec8 <USBPD_PE_StateMachine_SNK+0x1d8>
 8001ec4:	1e89      	subs	r1, r1, #2
 8001ec6:	2905      	cmp	r1, #5
 8001ec8:	f240 83f3 	bls.w	80026b2 <USBPD_PE_StateMachine_SNK+0x9c2>
 8001ecc:	1f89      	subs	r1, r1, #6
 8001ece:	f000 83ce 	beq.w	800266e <USBPD_PE_StateMachine_SNK+0x97e>
 8001ed2:	1e49      	subs	r1, r1, #1
 8001ed4:	2903      	cmp	r1, #3
 8001ed6:	d932      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ed8:	1f09      	subs	r1, r1, #4
 8001eda:	f000 808d 	beq.w	8001ff8 <USBPD_PE_StateMachine_SNK+0x308>
 8001ede:	1e89      	subs	r1, r1, #2
 8001ee0:	f000 81da 	beq.w	8002298 <USBPD_PE_StateMachine_SNK+0x5a8>
 8001ee4:	1ec9      	subs	r1, r1, #3
 8001ee6:	f000 80a0 	beq.w	800202a <USBPD_PE_StateMachine_SNK+0x33a>
 8001eea:	1e49      	subs	r1, r1, #1
 8001eec:	f000 80d7 	beq.w	800209e <USBPD_PE_StateMachine_SNK+0x3ae>
 8001ef0:	1e49      	subs	r1, r1, #1
 8001ef2:	f000 80e3 	beq.w	80020bc <USBPD_PE_StateMachine_SNK+0x3cc>
 8001ef6:	1e49      	subs	r1, r1, #1
 8001ef8:	f000 80fb 	beq.w	80020f2 <USBPD_PE_StateMachine_SNK+0x402>
 8001efc:	1e49      	subs	r1, r1, #1
 8001efe:	f000 8146 	beq.w	800218e <USBPD_PE_StateMachine_SNK+0x49e>
 8001f02:	1e89      	subs	r1, r1, #2
 8001f04:	d0ac      	beq.n	8001e60 <USBPD_PE_StateMachine_SNK+0x170>
 8001f06:	1e89      	subs	r1, r1, #2
 8001f08:	d019      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f0a:	1e49      	subs	r1, r1, #1
 8001f0c:	f000 8343 	beq.w	8002596 <USBPD_PE_StateMachine_SNK+0x8a6>
 8001f10:	1f09      	subs	r1, r1, #4
 8001f12:	f000 8212 	beq.w	800233a <USBPD_PE_StateMachine_SNK+0x64a>
 8001f16:	1ec9      	subs	r1, r1, #3
 8001f18:	f000 82b2 	beq.w	8002480 <USBPD_PE_StateMachine_SNK+0x790>
 8001f1c:	1f49      	subs	r1, r1, #5
 8001f1e:	f000 82fb 	beq.w	8002518 <USBPD_PE_StateMachine_SNK+0x828>
 8001f22:	1e49      	subs	r1, r1, #1
 8001f24:	f000 8283 	beq.w	800242e <USBPD_PE_StateMachine_SNK+0x73e>
 8001f28:	3909      	subs	r1, #9
 8001f2a:	2902      	cmp	r1, #2
 8001f2c:	d907      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f2e:	1ec9      	subs	r1, r1, #3
 8001f30:	f000 835e 	beq.w	80025f0 <USBPD_PE_StateMachine_SNK+0x900>
 8001f34:	1e49      	subs	r1, r1, #1
 8001f36:	f000 836b 	beq.w	8002610 <USBPD_PE_StateMachine_SNK+0x920>
 8001f3a:	1e49      	subs	r1, r1, #1
 8001f3c:	2901      	cmp	r1, #1
 8001f3e:	f240 83bc 	bls.w	80026ba <USBPD_PE_StateMachine_SNK+0x9ca>
 8001f42:	390d      	subs	r1, #13
 8001f44:	d0fb      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f46:	3912      	subs	r1, #18
 8001f48:	f000 83cc 	beq.w	80026e4 <USBPD_PE_StateMachine_SNK+0x9f4>
 8001f4c:	390c      	subs	r1, #12
 8001f4e:	d04a      	beq.n	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001f50:	1e49      	subs	r1, r1, #1
 8001f52:	2902      	cmp	r1, #2
 8001f54:	d9f3      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f56:	1f49      	subs	r1, r1, #5
 8001f58:	f000 8213 	beq.w	8002382 <USBPD_PE_StateMachine_SNK+0x692>
 8001f5c:	1e49      	subs	r1, r1, #1
 8001f5e:	d0ee      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f60:	1e49      	subs	r1, r1, #1
 8001f62:	f000 813d 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001f66:	1e49      	subs	r1, r1, #1
 8001f68:	f000 817d 	beq.w	8002266 <USBPD_PE_StateMachine_SNK+0x576>
 8001f6c:	1e49      	subs	r1, r1, #1
 8001f6e:	2908      	cmp	r1, #8
 8001f70:	f240 83a8 	bls.w	80026c4 <USBPD_PE_StateMachine_SNK+0x9d4>
 8001f74:	390b      	subs	r1, #11
 8001f76:	f000 83bb 	beq.w	80026f0 <USBPD_PE_StateMachine_SNK+0xa00>
 8001f7a:	a903      	add	r1, sp, #12
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f002 f859 	bl	8004034 <PE_StateMachine_VDM>
 8001f82:	4604      	mov	r4, r0
 8001f84:	7c6a      	ldrb	r2, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	4290      	cmp	r0, r2
 8001f8a:	d004      	beq.n	8001f96 <USBPD_PE_StateMachine_SNK+0x2a6>
 8001f8c:	74aa      	strb	r2, [r5, #18]
 8001f8e:	f000 fc0a 	bl	80027a6 <.text_12>
 8001f92:	2004      	movs	r0, #4
 8001f94:	47b8      	blx	r7
 8001f96:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001f9a:	f8df 698c 	ldr.w	r6, [pc, #2444]	; 8002928 <.text_23>
 8001f9e:	2814      	cmp	r0, #20
 8001fa0:	f000 83b1 	beq.w	8002706 <USBPD_PE_StateMachine_SNK+0xa16>
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f7fe fd42 	bl	8000a2e <PE_Check_AMSConflict>
 8001faa:	2815      	cmp	r0, #21
 8001fac:	d104      	bne.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fae:	f000 fbea 	bl	8002786 <.text_9+0x2>
 8001fb2:	d001      	beq.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fb4:	f000 fc22 	bl	80027fc <.text_20>
 8001fb8:	7c6a      	ldrb	r2, [r5, #17]
 8001fba:	7ca8      	ldrb	r0, [r5, #18]
 8001fbc:	4290      	cmp	r0, r2
 8001fbe:	d004      	beq.n	8001fca <USBPD_PE_StateMachine_SNK+0x2da>
 8001fc0:	74aa      	strb	r2, [r5, #18]
 8001fc2:	f000 fbea 	bl	800279a <.text_11>
 8001fc6:	2004      	movs	r0, #4
 8001fc8:	47a0      	blx	r4
 8001fca:	2400      	movs	r4, #0
 8001fcc:	e3b7      	b.n	800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 8001fce:	f04f 34ff 	mov.w	r4, #4294967295
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	e6d8      	b.n	8001d88 <USBPD_PE_StateMachine_SNK+0x98>
 8001fd6:	f000 fbfc 	bl	80027d2 <.text_15>
 8001fda:	215f      	movs	r1, #95	; 0x5f
 8001fdc:	f000 fc07 	bl	80027ee <.text_18>
 8001fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8001fe4:	e7ce      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8001fe6:	f000 fbf4 	bl	80027d2 <.text_15>
 8001fea:	68a8      	ldr	r0, [r5, #8]
 8001fec:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001fee:	2900      	cmp	r1, #0
 8001ff0:	d0f6      	beq.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff2:	7c28      	ldrb	r0, [r5, #16]
 8001ff4:	4788      	blx	r1
 8001ff6:	e7f3      	b.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff8:	6868      	ldr	r0, [r5, #4]
 8001ffa:	6801      	ldr	r1, [r0, #0]
 8001ffc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002000:	2800      	cmp	r0, #0
 8002002:	d0bf      	beq.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002004:	f001 0203 	and.w	r2, r1, #3
 8002008:	6868      	ldr	r0, [r5, #4]
 800200a:	2a01      	cmp	r2, #1
 800200c:	bf0c      	ite	eq
 800200e:	2200      	moveq	r2, #0
 8002010:	2220      	movne	r2, #32
 8002012:	f021 0120 	bic.w	r1, r1, #32
 8002016:	4311      	orrs	r1, r2
 8002018:	6001      	str	r1, [r0, #0]
 800201a:	2001      	movs	r0, #1
 800201c:	7728      	strb	r0, [r5, #28]
 800201e:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002022:	4644      	mov	r4, r8
 8002024:	2143      	movs	r1, #67	; 0x43
 8002026:	7469      	strb	r1, [r5, #17]
 8002028:	e7ac      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800202a:	f000 fba7 	bl	800277c <.text_8>
 800202e:	d12f      	bne.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002030:	88b1      	ldrh	r1, [r6, #4]
 8002032:	0bc8      	lsrs	r0, r1, #15
 8002034:	d128      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002036:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800203a:	b328      	cbz	r0, 8002088 <USBPD_PE_StateMachine_SNK+0x398>
 800203c:	4608      	mov	r0, r1
 800203e:	f000 011f 	and.w	r1, r0, #31
 8002042:	2901      	cmp	r1, #1
 8002044:	d120      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002046:	2200      	movs	r2, #0
 8002048:	70ba      	strb	r2, [r7, #2]
 800204a:	6969      	ldr	r1, [r5, #20]
 800204c:	f041 0104 	orr.w	r1, r1, #4
 8002050:	6169      	str	r1, [r5, #20]
 8002052:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002056:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800205a:	f7fe fdec 	bl	8000c36 <PE_ExtRevisionInteroperability>
 800205e:	88b0      	ldrh	r0, [r6, #4]
 8002060:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8002064:	68b0      	ldr	r0, [r6, #8]
 8002066:	68ae      	ldr	r6, [r5, #8]
 8002068:	69b7      	ldr	r7, [r6, #24]
 800206a:	1c82      	adds	r2, r0, #2
 800206c:	7c28      	ldrb	r0, [r5, #16]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	2104      	movs	r1, #4
 8002072:	47b8      	blx	r7
 8002074:	2001      	movs	r0, #1
 8002076:	7728      	strb	r0, [r5, #28]
 8002078:	f000 fbab 	bl	80027d2 <.text_15>
 800207c:	2044      	movs	r0, #68	; 0x44
 800207e:	7468      	strb	r0, [r5, #17]
 8002080:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002084:	2914      	cmp	r1, #20
 8002086:	d003      	beq.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002088:	f000 fb74 	bl	8002774 <.text_7>
 800208c:	f000 fbb9 	bl	8002802 <.text_20+0x6>
 8002090:	f000 fb6c 	bl	800276c <.text_6>
 8002094:	d102      	bne.n	800209c <USBPD_PE_StateMachine_SNK+0x3ac>
 8002096:	210f      	movs	r1, #15
 8002098:	7469      	strb	r1, [r5, #17]
 800209a:	2400      	movs	r4, #0
 800209c:	e772      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800209e:	68ab      	ldr	r3, [r5, #8]
 80020a0:	7c28      	ldrb	r0, [r5, #16]
 80020a2:	6a1c      	ldr	r4, [r3, #32]
 80020a4:	466a      	mov	r2, sp
 80020a6:	f105 0118 	add.w	r1, r5, #24
 80020aa:	47a0      	blx	r4
 80020ac:	9800      	ldr	r0, [sp, #0]
 80020ae:	6969      	ldr	r1, [r5, #20]
 80020b0:	f360 01c4 	bfi	r1, r0, #3, #2
 80020b4:	2045      	movs	r0, #69	; 0x45
 80020b6:	6169      	str	r1, [r5, #20]
 80020b8:	7468      	strb	r0, [r5, #17]
 80020ba:	e7ee      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80020bc:	6968      	ldr	r0, [r5, #20]
 80020be:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80020c2:	b100      	cbz	r0, 80020c6 <USBPD_PE_StateMachine_SNK+0x3d6>
 80020c4:	2002      	movs	r0, #2
 80020c6:	9002      	str	r0, [sp, #8]
 80020c8:	2101      	movs	r1, #1
 80020ca:	2046      	movs	r0, #70	; 0x46
 80020cc:	9001      	str	r0, [sp, #4]
 80020ce:	9100      	str	r1, [sp, #0]
 80020d0:	f105 0318 	add.w	r3, r5, #24
 80020d4:	2202      	movs	r2, #2
 80020d6:	2100      	movs	r1, #0
 80020d8:	4628      	mov	r0, r5
 80020da:	f7ff f9f2 	bl	80014c2 <PE_Send_DataMessage>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d106      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 80020e2:	6968      	ldr	r0, [r5, #20]
 80020e4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80020e8:	6168      	str	r0, [r5, #20]
 80020ea:	f8a5 b01e 	strh.w	fp, [r5, #30]
 80020ee:	241b      	movs	r4, #27
 80020f0:	e748      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80020f2:	f000 fb43 	bl	800277c <.text_8>
 80020f6:	bf04      	itt	eq
 80020f8:	88b0      	ldrheq	r0, [r6, #4]
 80020fa:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 80020fe:	d142      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002100:	f000 001f 	and.w	r0, r0, #31
 8002104:	2802      	cmp	r0, #2
 8002106:	bf18      	it	ne
 8002108:	2803      	cmpne	r0, #3
 800210a:	d019      	beq.n	8002140 <USBPD_PE_StateMachine_SNK+0x450>
 800210c:	2804      	cmp	r0, #4
 800210e:	bf18      	it	ne
 8002110:	280c      	cmpne	r0, #12
 8002112:	d124      	bne.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002114:	6868      	ldr	r0, [r5, #4]
 8002116:	6801      	ldr	r1, [r0, #0]
 8002118:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800211c:	2803      	cmp	r0, #3
 800211e:	d005      	beq.n	800212c <USBPD_PE_StateMachine_SNK+0x43c>
 8002120:	2043      	movs	r0, #67	; 0x43
 8002122:	7468      	strb	r0, [r5, #17]
 8002124:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002128:	4644      	mov	r4, r8
 800212a:	e014      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 800212c:	7930      	ldrb	r0, [r6, #4]
 800212e:	f000 001f 	and.w	r0, r0, #31
 8002132:	280c      	cmp	r0, #12
 8002134:	bf0c      	ite	eq
 8002136:	2049      	moveq	r0, #73	; 0x49
 8002138:	2003      	movne	r0, #3
 800213a:	7468      	strb	r0, [r5, #17]
 800213c:	2400      	movs	r4, #0
 800213e:	e00a      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 8002140:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002144:	f000 fb4f 	bl	80027e6 <.text_17>
 8002148:	2047      	movs	r0, #71	; 0x47
 800214a:	7468      	strb	r0, [r5, #17]
 800214c:	4644      	mov	r4, r8
 800214e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002152:	2914      	cmp	r1, #20
 8002154:	d003      	beq.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002156:	f000 fb0d 	bl	8002774 <.text_7>
 800215a:	f000 fb52 	bl	8002802 <.text_20+0x6>
 800215e:	7930      	ldrb	r0, [r6, #4]
 8002160:	f000 001f 	and.w	r0, r0, #31
 8002164:	2802      	cmp	r0, #2
 8002166:	d009      	beq.n	800217c <USBPD_PE_StateMachine_SNK+0x48c>
 8002168:	2803      	cmp	r0, #3
 800216a:	d009      	beq.n	8002180 <USBPD_PE_StateMachine_SNK+0x490>
 800216c:	2804      	cmp	r0, #4
 800216e:	d003      	beq.n	8002178 <USBPD_PE_StateMachine_SNK+0x488>
 8002170:	280c      	cmp	r0, #12
 8002172:	d108      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002174:	2103      	movs	r1, #3
 8002176:	e004      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002178:	2102      	movs	r1, #2
 800217a:	e002      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 800217c:	2104      	movs	r1, #4
 800217e:	e000      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002180:	2101      	movs	r1, #1
 8002182:	f000 fb34 	bl	80027ee <.text_18>
 8002186:	f000 faf1 	bl	800276c <.text_6>
 800218a:	d1b1      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 800218c:	e783      	b.n	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800218e:	f000 faf5 	bl	800277c <.text_8>
 8002192:	bf02      	ittt	eq
 8002194:	88b0      	ldrheq	r0, [r6, #4]
 8002196:	ea0a 0000 	andeq.w	r0, sl, r0
 800219a:	2806      	cmpeq	r0, #6
 800219c:	d1f3      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800219e:	f000 fb2d 	bl	80027fc <.text_20>
 80021a2:	2103      	movs	r1, #3
 80021a4:	f000 fb20 	bl	80027e8 <.text_17+0x2>
 80021a8:	7c28      	ldrb	r0, [r5, #16]
 80021aa:	2110      	movs	r1, #16
 80021ac:	f7fe f9d3 	bl	8000556 <USBPD_PE_Notification>
 80021b0:	f000 fb09 	bl	80027c6 <.text_14>
 80021b4:	bf1a      	itte	ne
 80021b6:	6828      	ldrne	r0, [r5, #0]
 80021b8:	6801      	ldrne	r1, [r0, #0]
 80021ba:	2101      	moveq	r1, #1
 80021bc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80021c0:	f002 ff46 	bl	8005050 <USBPD_PRL_SOPCapability>
 80021c4:	2000      	movs	r0, #0
 80021c6:	84a8      	strh	r0, [r5, #36]	; 0x24
 80021c8:	6968      	ldr	r0, [r5, #20]
 80021ca:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80021ce:	2803      	cmp	r0, #3
 80021d0:	bf04      	itt	eq
 80021d2:	f24a 3028 	movweq	r0, #41768	; 0xa328
 80021d6:	84a8      	strheq	r0, [r5, #36]	; 0x24
 80021d8:	2103      	movs	r1, #3
 80021da:	7469      	strb	r1, [r5, #17]
 80021dc:	2400      	movs	r4, #0
 80021de:	e7d2      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 80021e0:	a903      	add	r1, sp, #12
 80021e2:	4628      	mov	r0, r5
 80021e4:	f001 fadc 	bl	80037a0 <PE_StateMachine_VDMCable>
 80021e8:	e6cb      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80021ea:	f000 faec 	bl	80027c6 <.text_14>
 80021ee:	bf1e      	ittt	ne
 80021f0:	68a8      	ldrne	r0, [r5, #8]
 80021f2:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 80021f4:	2a00      	cmpne	r2, #0
 80021f6:	d002      	beq.n	80021fe <USBPD_PE_StateMachine_SNK+0x50e>
 80021f8:	7c28      	ldrb	r0, [r5, #16]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4790      	blx	r2
 80021fe:	f000 fae8 	bl	80027d2 <.text_15>
 8002202:	4628      	mov	r0, r5
 8002204:	2101      	movs	r1, #1
 8002206:	f7ff f88d 	bl	8001324 <PE_SetPowerNegotiation>
 800220a:	78b8      	ldrb	r0, [r7, #2]
 800220c:	2803      	cmp	r0, #3
 800220e:	d30a      	bcc.n	8002226 <USBPD_PE_StateMachine_SNK+0x536>
 8002210:	6968      	ldr	r0, [r5, #20]
 8002212:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002216:	2800      	cmp	r0, #0
 8002218:	bf1e      	ittt	ne
 800221a:	68a9      	ldrne	r1, [r5, #8]
 800221c:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 800221e:	2800      	cmpne	r0, #0
 8002220:	d166      	bne.n	80022f0 <USBPD_PE_StateMachine_SNK+0x600>
 8002222:	2100      	movs	r1, #0
 8002224:	e6ff      	b.n	8002026 <USBPD_PE_StateMachine_SNK+0x336>
 8002226:	1c40      	adds	r0, r0, #1
 8002228:	70b8      	strb	r0, [r7, #2]
 800222a:	2105      	movs	r1, #5
 800222c:	4628      	mov	r0, r5
 800222e:	f7fe fb61 	bl	80008f4 <PE_Send_RESET>
 8002232:	f248 30e8 	movw	r0, #33768	; 0x83e8
 8002236:	83e8      	strh	r0, [r5, #30]
 8002238:	2201      	movs	r2, #1
 800223a:	f000 fad0 	bl	80027de <.text_16>
 800223e:	209b      	movs	r0, #155	; 0x9b
 8002240:	e73a      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 8002242:	f000 fac0 	bl	80027c6 <.text_14>
 8002246:	bf1e      	ittt	ne
 8002248:	68a8      	ldrne	r0, [r5, #8]
 800224a:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 800224c:	2a00      	cmpne	r2, #0
 800224e:	d002      	beq.n	8002256 <USBPD_PE_StateMachine_SNK+0x566>
 8002250:	7c28      	ldrb	r0, [r5, #16]
 8002252:	2100      	movs	r1, #0
 8002254:	4790      	blx	r2
 8002256:	2200      	movs	r2, #0
 8002258:	f000 fac1 	bl	80027de <.text_16>
 800225c:	f248 30e8 	movw	r0, #33768	; 0x83e8
 8002260:	83e8      	strh	r0, [r5, #30]
 8002262:	219b      	movs	r1, #155	; 0x9b
 8002264:	e718      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002266:	68aa      	ldr	r2, [r5, #8]
 8002268:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800226c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800226e:	4798      	blx	r3
 8002270:	2801      	cmp	r0, #1
 8002272:	d10d      	bne.n	8002290 <USBPD_PE_StateMachine_SNK+0x5a0>
 8002274:	f648 00e3 	movw	r0, #35043	; 0x88e3
 8002278:	83e8      	strh	r0, [r5, #30]
 800227a:	2169      	movs	r1, #105	; 0x69
 800227c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002280:	f7fe f969 	bl	8000556 <USBPD_PE_Notification>
 8002284:	2040      	movs	r0, #64	; 0x40
 8002286:	7468      	strb	r0, [r5, #17]
 8002288:	2113      	movs	r1, #19
 800228a:	f000 fab0 	bl	80027ee <.text_18>
 800228e:	2400      	movs	r4, #0
 8002290:	f000 fa6c 	bl	800276c <.text_6>
 8002294:	d150      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 8002296:	e01b      	b.n	80022d0 <USBPD_PE_StateMachine_SNK+0x5e0>
 8002298:	68aa      	ldr	r2, [r5, #8]
 800229a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800229e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80022a0:	2101      	movs	r1, #1
 80022a2:	4798      	blx	r3
 80022a4:	2801      	cmp	r0, #1
 80022a6:	d110      	bne.n	80022ca <USBPD_PE_StateMachine_SNK+0x5da>
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7fe fc22 	bl	8000af2 <PE_Reset_HardReset>
 80022ae:	2205      	movs	r2, #5
 80022b0:	2100      	movs	r1, #0
 80022b2:	f000 fa95 	bl	80027e0 <.text_16+0x2>
 80022b6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80022ba:	2168      	movs	r1, #104	; 0x68
 80022bc:	f7fe f94b 	bl	8000556 <USBPD_PE_Notification>
 80022c0:	f8a5 901e 	strh.w	r9, [r5, #30]
 80022c4:	2043      	movs	r0, #67	; 0x43
 80022c6:	4644      	mov	r4, r8
 80022c8:	7468      	strb	r0, [r5, #17]
 80022ca:	f000 fa4f 	bl	800276c <.text_6>
 80022ce:	d133      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 80022d0:	2206      	movs	r2, #6
 80022d2:	2100      	movs	r1, #0
 80022d4:	f000 fa84 	bl	80027e0 <.text_16+0x2>
 80022d8:	78b8      	ldrb	r0, [r7, #2]
 80022da:	2803      	cmp	r0, #3
 80022dc:	f4ff aedb 	bcc.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 80022e0:	6968      	ldr	r0, [r5, #20]
 80022e2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80022e6:	2800      	cmp	r0, #0
 80022e8:	bf1e      	ittt	ne
 80022ea:	68a9      	ldrne	r1, [r5, #8]
 80022ec:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 80022ee:	2800      	cmpne	r0, #0
 80022f0:	f040 80c4 	bne.w	800247c <USBPD_PE_StateMachine_SNK+0x78c>
 80022f4:	2100      	movs	r1, #0
 80022f6:	7469      	strb	r1, [r5, #17]
 80022f8:	e6cf      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80022fa:	2000      	movs	r0, #0
 80022fc:	9000      	str	r0, [sp, #0]
 80022fe:	2303      	movs	r3, #3
 8002300:	2203      	movs	r2, #3
 8002302:	f000 fa78 	bl	80027f6 <.text_19+0x2>
 8002306:	2800      	cmp	r0, #0
 8002308:	d116      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800230a:	e686      	b.n	800201a <USBPD_PE_StateMachine_SNK+0x32a>
 800230c:	6868      	ldr	r0, [r5, #4]
 800230e:	6801      	ldr	r1, [r0, #0]
 8002310:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002314:	2804      	cmp	r0, #4
 8002316:	f43f aebe 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800231a:	2000      	movs	r0, #0
 800231c:	9000      	str	r0, [sp, #0]
 800231e:	2350      	movs	r3, #80	; 0x50
 8002320:	7871      	ldrb	r1, [r6, #1]
 8002322:	220d      	movs	r2, #13
 8002324:	f000 fa67 	bl	80027f6 <.text_19+0x2>
 8002328:	2800      	cmp	r0, #0
 800232a:	d105      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fa18 	bl	8002762 <.text_5>
 8002332:	2130      	movs	r1, #48	; 0x30
 8002334:	f000 fa5b 	bl	80027ee <.text_18>
 8002338:	e624      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800233a:	f000 fa24 	bl	8002786 <.text_9+0x2>
 800233e:	d013      	beq.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002340:	7831      	ldrb	r1, [r6, #0]
 8002342:	7870      	ldrb	r0, [r6, #1]
 8002344:	4281      	cmp	r1, r0
 8002346:	bf02      	ittt	eq
 8002348:	88b1      	ldrheq	r1, [r6, #4]
 800234a:	ea0a 0001 	andeq.w	r0, sl, r1
 800234e:	2803      	cmpeq	r0, #3
 8002350:	d10a      	bne.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002352:	2001      	movs	r0, #1
 8002354:	7728      	strb	r0, [r5, #28]
 8002356:	f8a5 901e 	strh.w	r9, [r5, #30]
 800235a:	2143      	movs	r1, #67	; 0x43
 800235c:	7469      	strb	r1, [r5, #17]
 800235e:	f000 fa09 	bl	8002774 <.text_7>
 8002362:	4644      	mov	r4, r8
 8002364:	f000 fa4d 	bl	8002802 <.text_20+0x6>
 8002368:	e70d      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800236a:	9400      	str	r4, [sp, #0]
 800236c:	2343      	movs	r3, #67	; 0x43
 800236e:	2207      	movs	r2, #7
 8002370:	f000 fa40 	bl	80027f4 <.text_19>
 8002374:	2800      	cmp	r0, #0
 8002376:	d117      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002378:	2006      	movs	r0, #6
 800237a:	f000 f9f2 	bl	8002762 <.text_5>
 800237e:	210b      	movs	r1, #11
 8002380:	e7d8      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 8002382:	f000 f9fb 	bl	800277c <.text_8>
 8002386:	bf02      	ittt	eq
 8002388:	88b0      	ldrheq	r0, [r6, #4]
 800238a:	ea0a 0000 	andeq.w	r0, sl, r0
 800238e:	2806      	cmpeq	r0, #6
 8002390:	d10a      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002392:	7c28      	ldrb	r0, [r5, #16]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	f7fe f8de 	bl	8000556 <USBPD_PE_Notification>
 800239a:	2003      	movs	r0, #3
 800239c:	7468      	strb	r0, [r5, #17]
 800239e:	f000 f9f1 	bl	8002784 <.text_9>
 80023a2:	d001      	beq.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 80023a4:	f000 fa2a 	bl	80027fc <.text_20>
 80023a8:	e5ec      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023aa:	2000      	movs	r0, #0
 80023ac:	9000      	str	r0, [sp, #0]
 80023ae:	2303      	movs	r3, #3
 80023b0:	2204      	movs	r2, #4
 80023b2:	f000 fa20 	bl	80027f6 <.text_19+0x2>
 80023b6:	e5e5      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023b8:	2804      	cmp	r0, #4
 80023ba:	d006      	beq.n	80023ca <USBPD_PE_StateMachine_SNK+0x6da>
 80023bc:	2000      	movs	r0, #0
 80023be:	7728      	strb	r0, [r5, #28]
 80023c0:	2104      	movs	r1, #4
 80023c2:	7469      	strb	r1, [r5, #17]
 80023c4:	2120      	movs	r1, #32
 80023c6:	f000 fa12 	bl	80027ee <.text_18>
 80023ca:	a903      	add	r1, sp, #12
 80023cc:	4628      	mov	r0, r5
 80023ce:	f000 fa1b 	bl	8002808 <PE_StateMachine_SNK_ReadyWait>
 80023d2:	e5d6      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80023d4:	68a8      	ldr	r0, [r5, #8]
 80023d6:	6881      	ldr	r1, [r0, #8]
 80023d8:	b339      	cbz	r1, 800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80023de:	4788      	blx	r1
 80023e0:	280a      	cmp	r0, #10
 80023e2:	d002      	beq.n	80023ea <USBPD_PE_StateMachine_SNK+0x6fa>
 80023e4:	280d      	cmp	r0, #13
 80023e6:	d01a      	beq.n	800241e <USBPD_PE_StateMachine_SNK+0x72e>
 80023e8:	e01f      	b.n	800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023ea:	f000 f9b6 	bl	800275a <.text_4>
 80023ee:	2201      	movs	r2, #1
 80023f0:	2100      	movs	r1, #0
 80023f2:	47b0      	blx	r6
 80023f4:	2000      	movs	r0, #0
 80023f6:	9000      	str	r0, [sp, #0]
 80023f8:	2359      	movs	r3, #89	; 0x59
 80023fa:	2203      	movs	r2, #3
 80023fc:	f000 f9fa 	bl	80027f4 <.text_19>
 8002400:	2800      	cmp	r0, #0
 8002402:	d10b      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002404:	2008      	movs	r0, #8
 8002406:	7728      	strb	r0, [r5, #28]
 8002408:	2206      	movs	r2, #6
 800240a:	f000 f9c0 	bl	800278e <.text_10>
 800240e:	2100      	movs	r1, #0
 8002410:	68ab      	ldr	r3, [r5, #8]
 8002412:	7c28      	ldrb	r0, [r5, #16]
 8002414:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002416:	47a0      	blx	r4
 8002418:	f000 f999 	bl	800274e <.text_3>
 800241c:	e5b2      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800241e:	2000      	movs	r0, #0
 8002420:	9000      	str	r0, [sp, #0]
 8002422:	2303      	movs	r3, #3
 8002424:	220c      	movs	r2, #12
 8002426:	2100      	movs	r1, #0
 8002428:	e7c3      	b.n	80023b2 <USBPD_PE_StateMachine_SNK+0x6c2>
 800242a:	202a      	movs	r0, #42	; 0x2a
 800242c:	e644      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 800242e:	f000 f9a5 	bl	800277c <.text_8>
 8002432:	bf02      	ittt	eq
 8002434:	88b0      	ldrheq	r0, [r6, #4]
 8002436:	ea0a 0000 	andeq.w	r0, sl, r0
 800243a:	2806      	cmpeq	r0, #6
 800243c:	d110      	bne.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 800243e:	7f28      	ldrb	r0, [r5, #28]
 8002440:	2809      	cmp	r0, #9
 8002442:	d003      	beq.n	800244c <USBPD_PE_StateMachine_SNK+0x75c>
 8002444:	f000 f989 	bl	800275a <.text_4>
 8002448:	2209      	movs	r2, #9
 800244a:	47b0      	blx	r6
 800244c:	2053      	movs	r0, #83	; 0x53
 800244e:	7468      	strb	r0, [r5, #17]
 8002450:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002454:	2914      	cmp	r1, #20
 8002456:	d003      	beq.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 8002458:	f000 f98c 	bl	8002774 <.text_7>
 800245c:	f000 f9d1 	bl	8002802 <.text_20+0x6>
 8002460:	f000 f984 	bl	800276c <.text_6>
 8002464:	d1da      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002466:	68ab      	ldr	r3, [r5, #8]
 8002468:	7c28      	ldrb	r0, [r5, #16]
 800246a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800246c:	220f      	movs	r2, #15
 800246e:	2100      	movs	r1, #0
 8002470:	47a0      	blx	r4
 8002472:	68a9      	ldr	r1, [r5, #8]
 8002474:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002476:	2800      	cmp	r0, #0
 8002478:	f43f ae0d 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800247c:	2192      	movs	r1, #146	; 0x92
 800247e:	e60b      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002480:	f000 f9b1 	bl	80027e6 <.text_17>
 8002484:	f000 f969 	bl	800275a <.text_4>
 8002488:	220a      	movs	r2, #10
 800248a:	2100      	movs	r1, #0
 800248c:	47b0      	blx	r6
 800248e:	6868      	ldr	r0, [r5, #4]
 8002490:	7801      	ldrb	r1, [r0, #0]
 8002492:	f001 0103 	and.w	r1, r1, #3
 8002496:	2902      	cmp	r1, #2
 8002498:	bf04      	itt	eq
 800249a:	7c28      	ldrbeq	r0, [r5, #16]
 800249c:	f002 fdc5 	bleq	800502a <USBPD_PRL_SRCSetSinkNG>
 80024a0:	2101      	movs	r1, #1
 80024a2:	4628      	mov	r0, r5
 80024a4:	f7fe fa46 	bl	8000934 <PE_ChangePowerRole>
 80024a8:	7f28      	ldrb	r0, [r5, #28]
 80024aa:	2809      	cmp	r0, #9
 80024ac:	d004      	beq.n	80024b8 <USBPD_PE_StateMachine_SNK+0x7c8>
 80024ae:	f000 f954 	bl	800275a <.text_4>
 80024b2:	220b      	movs	r2, #11
 80024b4:	2101      	movs	r1, #1
 80024b6:	47b0      	blx	r6
 80024b8:	2000      	movs	r0, #0
 80024ba:	9000      	str	r0, [sp, #0]
 80024bc:	235b      	movs	r3, #91	; 0x5b
 80024be:	2206      	movs	r2, #6
 80024c0:	f000 f998 	bl	80027f4 <.text_19>
 80024c4:	b948      	cbnz	r0, 80024da <USBPD_PE_StateMachine_SNK+0x7ea>
 80024c6:	68ab      	ldr	r3, [r5, #8]
 80024c8:	7c28      	ldrb	r0, [r5, #16]
 80024ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80024cc:	220c      	movs	r2, #12
 80024ce:	2100      	movs	r1, #0
 80024d0:	47a0      	blx	r4
 80024d2:	f248 0014 	movw	r0, #32788	; 0x8014
 80024d6:	83e8      	strh	r0, [r5, #30]
 80024d8:	2414      	movs	r4, #20
 80024da:	7c68      	ldrb	r0, [r5, #17]
 80024dc:	285b      	cmp	r0, #91	; 0x5b
 80024de:	d00d      	beq.n	80024fc <USBPD_PE_StateMachine_SNK+0x80c>
 80024e0:	2100      	movs	r1, #0
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7fe fa26 	bl	8000934 <PE_ChangePowerRole>
 80024e8:	f000 f937 	bl	800275a <.text_4>
 80024ec:	2206      	movs	r2, #6
 80024ee:	2101      	movs	r1, #1
 80024f0:	47b0      	blx	r6
 80024f2:	2207      	movs	r2, #7
 80024f4:	f000 f931 	bl	800275a <.text_4>
 80024f8:	2100      	movs	r1, #0
 80024fa:	47b0      	blx	r6
 80024fc:	e542      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80024fe:	9400      	str	r4, [sp, #0]
 8002500:	2358      	movs	r3, #88	; 0x58
 8002502:	220a      	movs	r2, #10
 8002504:	f000 f977 	bl	80027f6 <.text_19+0x2>
 8002508:	b920      	cbnz	r0, 8002514 <USBPD_PE_StateMachine_SNK+0x824>
 800250a:	2008      	movs	r0, #8
 800250c:	f000 f929 	bl	8002762 <.text_5>
 8002510:	2202      	movs	r2, #2
 8002512:	e7ef      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002514:	220f      	movs	r2, #15
 8002516:	e7ed      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002518:	f000 f930 	bl	800277c <.text_8>
 800251c:	bf04      	itt	eq
 800251e:	88b0      	ldrheq	r0, [r6, #4]
 8002520:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8002524:	d109      	bne.n	800253a <USBPD_PE_StateMachine_SNK+0x84a>
 8002526:	f000 001f 	and.w	r0, r0, #31
 800252a:	2803      	cmp	r0, #3
 800252c:	d006      	beq.n	800253c <USBPD_PE_StateMachine_SNK+0x84c>
 800252e:	2804      	cmp	r0, #4
 8002530:	d020      	beq.n	8002574 <USBPD_PE_StateMachine_SNK+0x884>
 8002532:	280c      	cmp	r0, #12
 8002534:	d01c      	beq.n	8002570 <USBPD_PE_StateMachine_SNK+0x880>
 8002536:	2810      	cmp	r0, #16
 8002538:	d023      	beq.n	8002582 <USBPD_PE_StateMachine_SNK+0x892>
 800253a:	e087      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800253c:	f000 f927 	bl	800278e <.text_10>
 8002540:	f000 f905 	bl	800274e <.text_3>
 8002544:	7f28      	ldrb	r0, [r5, #28]
 8002546:	2809      	cmp	r0, #9
 8002548:	d004      	beq.n	8002554 <USBPD_PE_StateMachine_SNK+0x864>
 800254a:	f000 f906 	bl	800275a <.text_4>
 800254e:	2206      	movs	r2, #6
 8002550:	2100      	movs	r1, #0
 8002552:	47b0      	blx	r6
 8002554:	f000 f947 	bl	80027e6 <.text_17>
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	213a      	movs	r1, #58	; 0x3a
 800255c:	f7fd fffb 	bl	8000556 <USBPD_PE_Notification>
 8002560:	f000 f911 	bl	8002786 <.text_9+0x2>
 8002564:	d001      	beq.n	800256a <USBPD_PE_StateMachine_SNK+0x87a>
 8002566:	f000 f949 	bl	80027fc <.text_20>
 800256a:	2059      	movs	r0, #89	; 0x59
 800256c:	7468      	strb	r0, [r5, #17]
 800256e:	e06d      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002570:	213b      	movs	r1, #59	; 0x3b
 8002572:	e000      	b.n	8002576 <USBPD_PE_StateMachine_SNK+0x886>
 8002574:	2116      	movs	r1, #22
 8002576:	f000 f93a 	bl	80027ee <.text_18>
 800257a:	f000 f904 	bl	8002786 <.text_9+0x2>
 800257e:	d107      	bne.n	8002590 <USBPD_PE_StateMachine_SNK+0x8a0>
 8002580:	e061      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002582:	7c28      	ldrb	r0, [r5, #16]
 8002584:	2117      	movs	r1, #23
 8002586:	f7fd ffe6 	bl	8000556 <USBPD_PE_Notification>
 800258a:	f000 f8fc 	bl	8002786 <.text_9+0x2>
 800258e:	d05a      	beq.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002590:	f000 f934 	bl	80027fc <.text_20>
 8002594:	e057      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002596:	9104      	str	r1, [sp, #16]
 8002598:	ab04      	add	r3, sp, #16
 800259a:	68ae      	ldr	r6, [r5, #8]
 800259c:	7c28      	ldrb	r0, [r5, #16]
 800259e:	6977      	ldr	r7, [r6, #20]
 80025a0:	aa05      	add	r2, sp, #20
 80025a2:	47b8      	blx	r7
 80025a4:	9804      	ldr	r0, [sp, #16]
 80025a6:	2104      	movs	r1, #4
 80025a8:	f7fe fefe 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80025ac:	b110      	cbz	r0, 80025b4 <USBPD_PE_StateMachine_SNK+0x8c4>
 80025ae:	2003      	movs	r0, #3
 80025b0:	7468      	strb	r0, [r5, #17]
 80025b2:	e4e7      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025b4:	9a04      	ldr	r2, [sp, #16]
 80025b6:	2003      	movs	r0, #3
 80025b8:	0892      	lsrs	r2, r2, #2
 80025ba:	2100      	movs	r1, #0
 80025bc:	9001      	str	r0, [sp, #4]
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	9102      	str	r1, [sp, #8]
 80025c2:	ab05      	add	r3, sp, #20
 80025c4:	2201      	movs	r2, #1
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7fe ff7b 	bl	80014c2 <PE_Send_DataMessage>
 80025cc:	e4da      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025ce:	2000      	movs	r0, #0
 80025d0:	2103      	movs	r1, #3
 80025d2:	2201      	movs	r2, #1
 80025d4:	9002      	str	r0, [sp, #8]
 80025d6:	9101      	str	r1, [sp, #4]
 80025d8:	9200      	str	r2, [sp, #0]
 80025da:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 80025de:	2206      	movs	r2, #6
 80025e0:	2100      	movs	r1, #0
 80025e2:	4628      	mov	r0, r5
 80025e4:	f7fe ff6d 	bl	80014c2 <PE_Send_DataMessage>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d1ef      	bne.n	80025cc <USBPD_PE_StateMachine_SNK+0x8dc>
 80025ec:	215d      	movs	r1, #93	; 0x5d
 80025ee:	e6a1      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 80025f0:	9400      	str	r4, [sp, #0]
 80025f2:	2366      	movs	r3, #102	; 0x66
 80025f4:	2214      	movs	r2, #20
 80025f6:	f000 f8fe 	bl	80027f6 <.text_19+0x2>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d107      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 80025fe:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002602:	214a      	movs	r1, #74	; 0x4a
 8002604:	f000 f8f3 	bl	80027ee <.text_18>
 8002608:	200b      	movs	r0, #11
 800260a:	241b      	movs	r4, #27
 800260c:	7728      	strb	r0, [r5, #28]
 800260e:	e4b9      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002610:	f000 f8b4 	bl	800277c <.text_8>
 8002614:	d11a      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002616:	88b1      	ldrh	r1, [r6, #4]
 8002618:	0bc8      	lsrs	r0, r1, #15
 800261a:	d017      	beq.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800261c:	f001 011f 	and.w	r1, r1, #31
 8002620:	290c      	cmp	r1, #12
 8002622:	d113      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002624:	68b0      	ldr	r0, [r6, #8]
 8002626:	68ac      	ldr	r4, [r5, #8]
 8002628:	69a6      	ldr	r6, [r4, #24]
 800262a:	1d02      	adds	r2, r0, #4
 800262c:	7c28      	ldrb	r0, [r5, #16]
 800262e:	2304      	movs	r3, #4
 8002630:	210a      	movs	r1, #10
 8002632:	47b0      	blx	r6
 8002634:	f000 f8a7 	bl	8002786 <.text_9+0x2>
 8002638:	d001      	beq.n	800263e <USBPD_PE_StateMachine_SNK+0x94e>
 800263a:	f000 f8df 	bl	80027fc <.text_20>
 800263e:	7c28      	ldrb	r0, [r5, #16]
 8002640:	214b      	movs	r1, #75	; 0x4b
 8002642:	f7fd ff88 	bl	8000556 <USBPD_PE_Notification>
 8002646:	2003      	movs	r0, #3
 8002648:	7468      	strb	r0, [r5, #17]
 800264a:	2400      	movs	r4, #0
 800264c:	f000 f88e 	bl	800276c <.text_6>
 8002650:	d1dd      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002652:	e02c      	b.n	80026ae <USBPD_PE_StateMachine_SNK+0x9be>
 8002654:	9400      	str	r4, [sp, #0]
 8002656:	2339      	movs	r3, #57	; 0x39
 8002658:	783a      	ldrb	r2, [r7, #0]
 800265a:	f000 f8cb 	bl	80027f4 <.text_19>
 800265e:	2800      	cmp	r0, #0
 8002660:	d1d5      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002662:	7878      	ldrb	r0, [r7, #1]
 8002664:	7728      	strb	r0, [r5, #28]
 8002666:	2144      	movs	r1, #68	; 0x44
 8002668:	f000 f8c1 	bl	80027ee <.text_18>
 800266c:	e53d      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 800266e:	f000 f88a 	bl	8002786 <.text_9+0x2>
 8002672:	d019      	beq.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002674:	88b0      	ldrh	r0, [r6, #4]
 8002676:	0bc0      	lsrs	r0, r0, #15
 8002678:	d009      	beq.n	800268e <USBPD_PE_StateMachine_SNK+0x99e>
 800267a:	4628      	mov	r0, r5
 800267c:	f7fe ff5e 	bl	800153c <PE_Check_ExtendedMessage>
 8002680:	f000 f881 	bl	8002786 <.text_9+0x2>
 8002684:	d001      	beq.n	800268a <USBPD_PE_StateMachine_SNK+0x99a>
 8002686:	f000 f8b9 	bl	80027fc <.text_20>
 800268a:	2000      	movs	r0, #0
 800268c:	83e8      	strh	r0, [r5, #30]
 800268e:	88b0      	ldrh	r0, [r6, #4]
 8002690:	ea0a 0000 	and.w	r0, sl, r0
 8002694:	2810      	cmp	r0, #16
 8002696:	d107      	bne.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002698:	2103      	movs	r1, #3
 800269a:	7469      	strb	r1, [r5, #17]
 800269c:	f000 f872 	bl	8002784 <.text_9>
 80026a0:	d001      	beq.n	80026a6 <USBPD_PE_StateMachine_SNK+0x9b6>
 80026a2:	f000 f8ab 	bl	80027fc <.text_20>
 80026a6:	83ec      	strh	r4, [r5, #30]
 80026a8:	f000 f860 	bl	800276c <.text_6>
 80026ac:	d119      	bne.n	80026e2 <USBPD_PE_StateMachine_SNK+0x9f2>
 80026ae:	2103      	movs	r1, #3
 80026b0:	e4f2      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7ff f84b 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80026b8:	e463      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026ba:	a903      	add	r1, sp, #12
 80026bc:	4628      	mov	r0, r5
 80026be:	f7fe fb7b 	bl	8000db8 <PE_SubStateMachine_Generic>
 80026c2:	e45e      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026c4:	a903      	add	r1, sp, #12
 80026c6:	4628      	mov	r0, r5
 80026c8:	f001 f98b 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80026cc:	4604      	mov	r4, r0
 80026ce:	f000 f87a 	bl	80027c6 <.text_14>
 80026d2:	bf0e      	itee	eq
 80026d4:	2101      	moveq	r1, #1
 80026d6:	6828      	ldrne	r0, [r5, #0]
 80026d8:	6801      	ldrne	r1, [r0, #0]
 80026da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80026de:	f002 fcb7 	bl	8005050 <USBPD_PRL_SOPCapability>
 80026e2:	e44f      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026e4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80026e8:	4628      	mov	r0, r5
 80026ea:	f002 fa6e 	bl	8004bca <PE_StateMachine_UVDM>
 80026ee:	e449      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026f0:	2000      	movs	r0, #0
 80026f2:	9000      	str	r0, [sp, #0]
 80026f4:	2358      	movs	r3, #88	; 0x58
 80026f6:	2213      	movs	r2, #19
 80026f8:	f000 f87d 	bl	80027f6 <.text_19+0x2>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d1f6      	bne.n	80026ee <USBPD_PE_StateMachine_SNK+0x9fe>
 8002700:	2009      	movs	r0, #9
 8002702:	7728      	strb	r0, [r5, #28]
 8002704:	e4f1      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 8002706:	6968      	ldr	r0, [r5, #20]
 8002708:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800270c:	b1b8      	cbz	r0, 800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 800270e:	6968      	ldr	r0, [r5, #20]
 8002710:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002714:	b138      	cbz	r0, 8002726 <USBPD_PE_StateMachine_SNK+0xa36>
 8002716:	7c28      	ldrb	r0, [r5, #16]
 8002718:	215b      	movs	r1, #91	; 0x5b
 800271a:	f7fd ff1c 	bl	8000556 <USBPD_PE_Notification>
 800271e:	6968      	ldr	r0, [r5, #20]
 8002720:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8002724:	6168      	str	r0, [r5, #20]
 8002726:	2003      	movs	r0, #3
 8002728:	7ca9      	ldrb	r1, [r5, #18]
 800272a:	7468      	strb	r0, [r5, #17]
 800272c:	2903      	cmp	r1, #3
 800272e:	d005      	beq.n	800273c <USBPD_PE_StateMachine_SNK+0xa4c>
 8002730:	74a8      	strb	r0, [r5, #18]
 8002732:	f000 f832 	bl	800279a <.text_11>
 8002736:	2203      	movs	r2, #3
 8002738:	2004      	movs	r0, #4
 800273a:	47a0      	blx	r4
 800273c:	2401      	movs	r4, #1
 800273e:	6968      	ldr	r0, [r5, #20]
 8002740:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8002744:	2c00      	cmp	r4, #0
 8002746:	6168      	str	r0, [r5, #20]
 8002748:	f43f ab29 	beq.w	8001d9e <USBPD_PE_StateMachine_SNK+0xae>
 800274c:	e441      	b.n	8001fd2 <USBPD_PE_StateMachine_SNK+0x2e2>

0800274e <.text_3>:
 800274e:	f248 3084 	movw	r0, #33668	; 0x8384
 8002752:	83e8      	strh	r0, [r5, #30]
 8002754:	f44f 7461 	mov.w	r4, #900	; 0x384
 8002758:	4770      	bx	lr

0800275a <.text_4>:
 800275a:	68ab      	ldr	r3, [r5, #8]
 800275c:	7c28      	ldrb	r0, [r5, #16]
 800275e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8002760:	4770      	bx	lr

08002762 <.text_5>:
 8002762:	7728      	strb	r0, [r5, #28]
 8002764:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002768:	241b      	movs	r4, #27
 800276a:	4770      	bx	lr

0800276c <.text_6>:
 800276c:	8be8      	ldrh	r0, [r5, #30]
 800276e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002772:	4770      	bx	lr

08002774 <.text_7>:
 8002774:	2014      	movs	r0, #20
 8002776:	f88d 000c 	strb.w	r0, [sp, #12]
 800277a:	4770      	bx	lr

0800277c <.text_8>:
 800277c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002780:	2811      	cmp	r0, #17
 8002782:	4770      	bx	lr

08002784 <.text_9>:
 8002784:	2400      	movs	r4, #0
 8002786:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800278a:	2814      	cmp	r0, #20
 800278c:	4770      	bx	lr

0800278e <.text_10>:
 800278e:	6868      	ldr	r0, [r5, #4]
 8002790:	6801      	ldr	r1, [r0, #0]
 8002792:	f041 0110 	orr.w	r1, r1, #16
 8002796:	6001      	str	r1, [r0, #0]
 8002798:	4770      	bx	lr

0800279a <.text_11>:
 800279a:	2100      	movs	r1, #0
 800279c:	9100      	str	r1, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	7c29      	ldrb	r1, [r5, #16]
 80027a2:	6834      	ldr	r4, [r6, #0]
 80027a4:	4770      	bx	lr

080027a6 <.text_12>:
 80027a6:	2100      	movs	r1, #0
 80027a8:	9100      	str	r1, [sp, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	4e5e      	ldr	r6, [pc, #376]	; (8002928 <.text_23>)
 80027ae:	7c29      	ldrb	r1, [r5, #16]
 80027b0:	6837      	ldr	r7, [r6, #0]
 80027b2:	4770      	bx	lr

080027b4 <.text_13>:
 80027b4:	74a8      	strb	r0, [r5, #18]
 80027b6:	2100      	movs	r1, #0
 80027b8:	9100      	str	r1, [sp, #0]
 80027ba:	2300      	movs	r3, #0
 80027bc:	4f5a      	ldr	r7, [pc, #360]	; (8002928 <.text_23>)
 80027be:	7c29      	ldrb	r1, [r5, #16]
 80027c0:	f8d7 c000 	ldr.w	ip, [r7]
 80027c4:	4770      	bx	lr

080027c6 <.text_14>:
 80027c6:	6868      	ldr	r0, [r5, #4]
 80027c8:	6801      	ldr	r1, [r0, #0]
 80027ca:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80027ce:	2800      	cmp	r0, #0
 80027d0:	4770      	bx	lr

080027d2 <.text_15>:
 80027d2:	6868      	ldr	r0, [r5, #4]
 80027d4:	6801      	ldr	r1, [r0, #0]
 80027d6:	f021 0110 	bic.w	r1, r1, #16
 80027da:	6001      	str	r1, [r0, #0]
 80027dc:	4770      	bx	lr

080027de <.text_16>:
 80027de:	2101      	movs	r1, #1
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7fe bd98 	b.w	8001316 <PE_CallHardResetCallback>

080027e6 <.text_17>:
 80027e6:	2104      	movs	r1, #4
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe bd9b 	b.w	8001324 <PE_SetPowerNegotiation>

080027ee <.text_18>:
 80027ee:	7c28      	ldrb	r0, [r5, #16]
 80027f0:	f7fd beb1 	b.w	8000556 <USBPD_PE_Notification>

080027f4 <.text_19>:
 80027f4:	2100      	movs	r1, #0
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7fe be36 	b.w	8001468 <PE_Send_CtrlMessage>

080027fc <.text_20>:
 80027fc:	2114      	movs	r1, #20
 80027fe:	f88d 100c 	strb.w	r1, [sp, #12]
 8002802:	4628      	mov	r0, r5
 8002804:	f7fe b8d2 	b.w	80009ac <PE_Clear_RxEvent>

08002808 <PE_StateMachine_SNK_ReadyWait>:
 8002808:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800280a:	460e      	mov	r6, r1
 800280c:	4604      	mov	r4, r0
 800280e:	7830      	ldrb	r0, [r6, #0]
 8002810:	2502      	movs	r5, #2
 8002812:	2814      	cmp	r0, #20
 8002814:	d00b      	beq.n	800282e <PE_StateMachine_SNK_ReadyWait+0x26>
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff f894 	bl	8001944 <PE_ManageRXEvent>
 800281c:	7830      	ldrb	r0, [r6, #0]
 800281e:	2814      	cmp	r0, #20
 8002820:	d07d      	beq.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002822:	2114      	movs	r1, #20
 8002824:	7031      	strb	r1, [r6, #0]
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe f8c0 	bl	80009ac <PE_Clear_RxEvent>
 800282c:	e077      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800282e:	6961      	ldr	r1, [r4, #20]
 8002830:	0cc8      	lsrs	r0, r1, #19
 8002832:	f504 7518 	add.w	r5, r4, #608	; 0x260
 8002836:	d027      	beq.n	8002888 <PE_StateMachine_SNK_ReadyWait+0x80>
 8002838:	8c20      	ldrh	r0, [r4, #32]
 800283a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800283e:	d10e      	bne.n	800285e <PE_StateMachine_SNK_ReadyWait+0x56>
 8002840:	210f      	movs	r1, #15
 8002842:	7461      	strb	r1, [r4, #17]
 8002844:	2000      	movs	r0, #0
 8002846:	9000      	str	r0, [sp, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	7c21      	ldrb	r1, [r4, #16]
 800284c:	4c36      	ldr	r4, [pc, #216]	; (8002928 <.text_23>)
 800284e:	6826      	ldr	r6, [r4, #0]
 8002850:	2270      	movs	r2, #112	; 0x70
 8002852:	2009      	movs	r0, #9
 8002854:	47b0      	blx	r6
 8002856:	7828      	ldrb	r0, [r5, #0]
 8002858:	1c40      	adds	r0, r0, #1
 800285a:	7028      	strb	r0, [r5, #0]
 800285c:	e054      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 800285e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002860:	6962      	ldr	r2, [r4, #20]
 8002862:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8002866:	2033      	movs	r0, #51	; 0x33
 8002868:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 800286c:	fb11 f100 	smulbb	r1, r1, r0
 8002870:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002874:	8421      	strh	r1, [r4, #32]
 8002876:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002878:	6962      	ldr	r2, [r4, #20]
 800287a:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800287e:	eb01 45d2 	add.w	r5, r1, r2, lsr #19
 8002882:	4345      	muls	r5, r0
 8002884:	b2ad      	uxth	r5, r5
 8002886:	e04a      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002888:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800288a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800288e:	d106      	bne.n	800289e <PE_StateMachine_SNK_ReadyWait+0x96>
 8002890:	2245      	movs	r2, #69	; 0x45
 8002892:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002896:	7462      	strb	r2, [r4, #17]
 8002898:	2500      	movs	r5, #0
 800289a:	6161      	str	r1, [r4, #20]
 800289c:	e03f      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800289e:	7c20      	ldrb	r0, [r4, #16]
 80028a0:	f7fe f8a9 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80028a4:	f104 0631 	add.w	r6, r4, #49	; 0x31
 80028a8:	bb18      	cbnz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028aa:	7870      	ldrb	r0, [r6, #1]
 80028ac:	b308      	cbz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028ae:	6860      	ldr	r0, [r4, #4]
 80028b0:	6800      	ldr	r0, [r0, #0]
 80028b2:	f000 0103 	and.w	r1, r0, #3
 80028b6:	2901      	cmp	r1, #1
 80028b8:	d008      	beq.n	80028cc <PE_StateMachine_SNK_ReadyWait+0xc4>
 80028ba:	f000 0003 	and.w	r0, r0, #3
 80028be:	2802      	cmp	r0, #2
 80028c0:	d117      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028c2:	7c20      	ldrb	r0, [r4, #16]
 80028c4:	f002 fbbe 	bl	8005044 <USBPD_PRL_IsResistor_SinkTxOK>
 80028c8:	2801      	cmp	r0, #1
 80028ca:	d112      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028cc:	78b0      	ldrb	r0, [r6, #2]
 80028ce:	7030      	strb	r0, [r6, #0]
 80028d0:	7870      	ldrb	r0, [r6, #1]
 80028d2:	7460      	strb	r0, [r4, #17]
 80028d4:	2845      	cmp	r0, #69	; 0x45
 80028d6:	d103      	bne.n	80028e0 <PE_StateMachine_SNK_ReadyWait+0xd8>
 80028d8:	6960      	ldr	r0, [r4, #20]
 80028da:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80028de:	6160      	str	r0, [r4, #20]
 80028e0:	2000      	movs	r0, #0
 80028e2:	7070      	strb	r0, [r6, #1]
 80028e4:	6960      	ldr	r0, [r4, #20]
 80028e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028e8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80028ea:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 80028ee:	6160      	str	r0, [r4, #20]
 80028f0:	e00a      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 80028f2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80028f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80028f8:	d108      	bne.n	800290c <PE_StateMachine_SNK_ReadyWait+0x104>
 80028fa:	2100      	movs	r1, #0
 80028fc:	8461      	strh	r1, [r4, #34]	; 0x22
 80028fe:	2105      	movs	r1, #5
 8002900:	78a8      	ldrb	r0, [r5, #2]
 8002902:	1c40      	adds	r0, r0, #1
 8002904:	70a8      	strb	r0, [r5, #2]
 8002906:	7461      	strb	r1, [r4, #17]
 8002908:	2500      	movs	r5, #0
 800290a:	e008      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800290c:	4620      	mov	r0, r4
 800290e:	f7fe fd23 	bl	8001358 <PE_CalculateMinTiming>
 8002912:	4605      	mov	r5, r0
 8002914:	7870      	ldrb	r0, [r6, #1]
 8002916:	b110      	cbz	r0, 800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002918:	2d02      	cmp	r5, #2
 800291a:	bf28      	it	cs
 800291c:	2502      	movcs	r5, #2
 800291e:	4628      	mov	r0, r5
 8002920:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08002924 <.text_22>:
 8002924:	200002b8 	.word	0x200002b8

08002928 <.text_23>:
 8002928:	20000000 	.word	0x20000000

0800292c <USBPD_PE_StateMachine_SRC>:
 800292c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002930:	4680      	mov	r8, r0
 8002932:	481a      	ldr	r0, [pc, #104]	; (800299c <USBPD_PE_StateMachine_SRC+0x70>)
 8002934:	b086      	sub	sp, #24
 8002936:	4641      	mov	r1, r8
 8002938:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
 800293c:	7c70      	ldrb	r0, [r6, #17]
 800293e:	2848      	cmp	r0, #72	; 0x48
 8002940:	d136      	bne.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002942:	4630      	mov	r0, r6
 8002944:	f7fe f90b 	bl	8000b5e <PE_Reset_ZI>
 8002948:	4630      	mov	r0, r6
 800294a:	f7fe f942 	bl	8000bd2 <PE_Reset_Counter>
 800294e:	6830      	ldr	r0, [r6, #0]
 8002950:	7903      	ldrb	r3, [r0, #4]
 8002952:	7c30      	ldrb	r0, [r6, #16]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2201      	movs	r2, #1
 800295a:	2101      	movs	r1, #1
 800295c:	f002 fb21 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8002960:	6870      	ldr	r0, [r6, #4]
 8002962:	6801      	ldr	r1, [r0, #0]
 8002964:	f041 0108 	orr.w	r1, r1, #8
 8002968:	6001      	str	r1, [r0, #0]
 800296a:	6830      	ldr	r0, [r6, #0]
 800296c:	6841      	ldr	r1, [r0, #4]
 800296e:	6870      	ldr	r0, [r6, #4]
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	f361 0201 	bfi	r2, r1, #0, #2
 8002976:	6002      	str	r2, [r0, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	7c30      	ldrb	r0, [r6, #16]
 800297c:	f002 fb68 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002980:	7c30      	ldrb	r0, [r6, #16]
 8002982:	f002 fdda 	bl	800553a <USBPD_PRL_Reset>
 8002986:	7cb1      	ldrb	r1, [r6, #18]
 8002988:	2002      	movs	r0, #2
 800298a:	2902      	cmp	r1, #2
 800298c:	7470      	strb	r0, [r6, #17]
 800298e:	d00f      	beq.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002990:	74b0      	strb	r0, [r6, #18]
 8002992:	2100      	movs	r1, #0
 8002994:	9100      	str	r1, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	4c01      	ldr	r4, [pc, #4]	; (80029a0 <USBPD_PE_StateMachine_SRC+0x74>)
 800299a:	e003      	b.n	80029a4 <USBPD_PE_StateMachine_SRC+0x78>
 800299c:	200002b8 	.word	0x200002b8
 80029a0:	20000000 	.word	0x20000000
 80029a4:	7c31      	ldrb	r1, [r6, #16]
 80029a6:	f8d4 9000 	ldr.w	r9, [r4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	2004      	movs	r0, #4
 80029ae:	47c8      	blx	r9
 80029b0:	6970      	ldr	r0, [r6, #20]
 80029b2:	f3c0 4080 	ubfx	r0, r0, #18, #1
 80029b6:	b130      	cbz	r0, 80029c6 <USBPD_PE_StateMachine_SRC+0x9a>
 80029b8:	6970      	ldr	r0, [r6, #20]
 80029ba:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80029be:	6170      	str	r0, [r6, #20]
 80029c0:	2164      	movs	r1, #100	; 0x64
 80029c2:	f000 feab 	bl	800371c <.text_17>
 80029c6:	4630      	mov	r0, r6
 80029c8:	f7fd ffbc 	bl	8000944 <PE_Get_RxEvent>
 80029cc:	2803      	cmp	r0, #3
 80029ce:	f88d 000c 	strb.w	r0, [sp, #12]
 80029d2:	f206 255e 	addw	r5, r6, #606	; 0x25e
 80029d6:	f8df 9ca8 	ldr.w	r9, [pc, #3240]	; 8003680 <.text_3>
 80029da:	f248 0a1b 	movw	sl, #32795	; 0x801b
 80029de:	f248 0b1e 	movw	fp, #32798	; 0x801e
 80029e2:	d103      	bne.n	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 80029e4:	2001      	movs	r0, #1
 80029e6:	b007      	add	sp, #28
 80029e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ec:	6870      	ldr	r0, [r6, #4]
 80029ee:	6801      	ldr	r1, [r0, #0]
 80029f0:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80029f4:	2800      	cmp	r0, #0
 80029f6:	f000 8117 	beq.w	8002c28 <USBPD_PE_StateMachine_SRC+0x2fc>
 80029fa:	6970      	ldr	r0, [r6, #20]
 80029fc:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f106 0730 	add.w	r7, r6, #48	; 0x30
 8002a06:	f000 8119 	beq.w	8002c3c <USBPD_PE_StateMachine_SRC+0x310>
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f002 fb1c 	bl	8005048 <USBPD_PRL_FastRoleSwapSignalling>
 8002a10:	20a6      	movs	r0, #166	; 0xa6
 8002a12:	7470      	strb	r0, [r6, #17]
 8002a14:	2109      	movs	r1, #9
 8002a16:	7731      	strb	r1, [r6, #28]
 8002a18:	2000      	movs	r0, #0
 8002a1a:	70b8      	strb	r0, [r7, #2]
 8002a1c:	f248 0011 	movw	r0, #32785	; 0x8011
 8002a20:	6971      	ldr	r1, [r6, #20]
 8002a22:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8002a26:	6171      	str	r1, [r6, #20]
 8002a28:	84f0      	strh	r0, [r6, #38]	; 0x26
 8002a2a:	7cb1      	ldrb	r1, [r6, #18]
 8002a2c:	29a6      	cmp	r1, #166	; 0xa6
 8002a2e:	f040 80ff 	bne.w	8002c30 <USBPD_PE_StateMachine_SRC+0x304>
 8002a32:	2402      	movs	r4, #2
 8002a34:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a38:	2811      	cmp	r0, #17
 8002a3a:	d11c      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a3c:	6870      	ldr	r0, [r6, #4]
 8002a3e:	6801      	ldr	r1, [r0, #0]
 8002a40:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8002a44:	88b9      	ldrh	r1, [r7, #4]
 8002a46:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8002a4a:	4288      	cmp	r0, r1
 8002a4c:	d113      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a4e:	f000 fe26 	bl	800369e <.text_7>
 8002a52:	f000 fe72 	bl	800373a <.text_20+0x6>
 8002a56:	7cb1      	ldrb	r1, [r6, #18]
 8002a58:	2092      	movs	r0, #146	; 0x92
 8002a5a:	2992      	cmp	r1, #146	; 0x92
 8002a5c:	7470      	strb	r0, [r6, #17]
 8002a5e:	f000 810e 	beq.w	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002a62:	74b0      	strb	r0, [r6, #18]
 8002a64:	2100      	movs	r1, #0
 8002a66:	9100      	str	r1, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	7c31      	ldrb	r1, [r6, #16]
 8002a6c:	f8d9 c000 	ldr.w	ip, [r9]
 8002a70:	2292      	movs	r2, #146	; 0x92
 8002a72:	2004      	movs	r0, #4
 8002a74:	47e0      	blx	ip
 8002a76:	7c71      	ldrb	r1, [r6, #17]
 8002a78:	000a      	movs	r2, r1
 8002a7a:	f24f 001f 	movw	r0, #61471	; 0xf01f
 8002a7e:	f000 80f6 	beq.w	8002c6e <USBPD_PE_StateMachine_SRC+0x342>
 8002a82:	1e4a      	subs	r2, r1, #1
 8002a84:	d06f      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002a86:	1e52      	subs	r2, r2, #1
 8002a88:	f000 8105 	beq.w	8002c96 <USBPD_PE_StateMachine_SRC+0x36a>
 8002a8c:	1e52      	subs	r2, r2, #1
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	f240 84b2 	bls.w	80033f8 <USBPD_PE_StateMachine_SRC+0xacc>
 8002a94:	1e92      	subs	r2, r2, #2
 8002a96:	f000 8143 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002a9a:	1e52      	subs	r2, r2, #1
 8002a9c:	f000 8145 	beq.w	8002d2a <USBPD_PE_StateMachine_SRC+0x3fe>
 8002aa0:	1e52      	subs	r2, r2, #1
 8002aa2:	f000 814a 	beq.w	8002d3a <USBPD_PE_StateMachine_SRC+0x40e>
 8002aa6:	1e52      	subs	r2, r2, #1
 8002aa8:	f000 819d 	beq.w	8002de6 <USBPD_PE_StateMachine_SRC+0x4ba>
 8002aac:	1e52      	subs	r2, r2, #1
 8002aae:	f000 81e3 	beq.w	8002e78 <USBPD_PE_StateMachine_SRC+0x54c>
 8002ab2:	1ed2      	subs	r2, r2, #3
 8002ab4:	f000 8226 	beq.w	8002f04 <USBPD_PE_StateMachine_SRC+0x5d8>
 8002ab8:	1e52      	subs	r2, r2, #1
 8002aba:	f000 8234 	beq.w	8002f26 <USBPD_PE_StateMachine_SRC+0x5fa>
 8002abe:	1e52      	subs	r2, r2, #1
 8002ac0:	f000 80da 	beq.w	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002ac4:	1e52      	subs	r2, r2, #1
 8002ac6:	f000 82a3 	beq.w	8003010 <USBPD_PE_StateMachine_SRC+0x6e4>
 8002aca:	1e52      	subs	r2, r2, #1
 8002acc:	f000 826a 	beq.w	8002fa4 <USBPD_PE_StateMachine_SRC+0x678>
 8002ad0:	1e52      	subs	r2, r2, #1
 8002ad2:	f000 826c 	beq.w	8002fae <USBPD_PE_StateMachine_SRC+0x682>
 8002ad6:	1e52      	subs	r2, r2, #1
 8002ad8:	f000 8277 	beq.w	8002fca <USBPD_PE_StateMachine_SRC+0x69e>
 8002adc:	1e52      	subs	r2, r2, #1
 8002ade:	f000 8303 	beq.w	80030e8 <USBPD_PE_StateMachine_SRC+0x7bc>
 8002ae2:	1e52      	subs	r2, r2, #1
 8002ae4:	f000 82bb 	beq.w	800305e <USBPD_PE_StateMachine_SRC+0x732>
 8002ae8:	1e52      	subs	r2, r2, #1
 8002aea:	f000 82c2 	beq.w	8003072 <USBPD_PE_StateMachine_SRC+0x746>
 8002aee:	1e52      	subs	r2, r2, #1
 8002af0:	f000 8192 	beq.w	8002e18 <USBPD_PE_StateMachine_SRC+0x4ec>
 8002af4:	1e52      	subs	r2, r2, #1
 8002af6:	f000 82d9 	beq.w	80030ac <USBPD_PE_StateMachine_SRC+0x780>
 8002afa:	1e52      	subs	r2, r2, #1
 8002afc:	2a01      	cmp	r2, #1
 8002afe:	d932      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b00:	1e92      	subs	r2, r2, #2
 8002b02:	f000 8314 	beq.w	800312e <USBPD_PE_StateMachine_SRC+0x802>
 8002b06:	1e52      	subs	r2, r2, #1
 8002b08:	f000 831f 	beq.w	800314a <USBPD_PE_StateMachine_SRC+0x81e>
 8002b0c:	1e92      	subs	r2, r2, #2
 8002b0e:	d02a      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b10:	1e52      	subs	r2, r2, #1
 8002b12:	f000 83ce 	beq.w	80032b2 <USBPD_PE_StateMachine_SRC+0x986>
 8002b16:	1e52      	subs	r2, r2, #1
 8002b18:	f000 83dc 	beq.w	80032d4 <USBPD_PE_StateMachine_SRC+0x9a8>
 8002b1c:	1e52      	subs	r2, r2, #1
 8002b1e:	f000 841a 	beq.w	8003356 <USBPD_PE_StateMachine_SRC+0xa2a>
 8002b22:	1e52      	subs	r2, r2, #1
 8002b24:	f000 843a 	beq.w	800339c <USBPD_PE_StateMachine_SRC+0xa70>
 8002b28:	1e52      	subs	r2, r2, #1
 8002b2a:	f000 834a 	beq.w	80031c2 <USBPD_PE_StateMachine_SRC+0x896>
 8002b2e:	1e92      	subs	r2, r2, #2
 8002b30:	f000 8369 	beq.w	8003206 <USBPD_PE_StateMachine_SRC+0x8da>
 8002b34:	1e52      	subs	r2, r2, #1
 8002b36:	f000 8380 	beq.w	800323a <USBPD_PE_StateMachine_SRC+0x90e>
 8002b3a:	1e52      	subs	r2, r2, #1
 8002b3c:	f000 839a 	beq.w	8003274 <USBPD_PE_StateMachine_SRC+0x948>
 8002b40:	1e52      	subs	r2, r2, #1
 8002b42:	2a02      	cmp	r2, #2
 8002b44:	d90f      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b46:	1ed2      	subs	r2, r2, #3
 8002b48:	f000 8359 	beq.w	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 8002b4c:	1e52      	subs	r2, r2, #1
 8002b4e:	f000 84c5 	beq.w	80034dc <USBPD_PE_StateMachine_SRC+0xbb0>
 8002b52:	1e52      	subs	r2, r2, #1
 8002b54:	d007      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b56:	1e52      	subs	r2, r2, #1
 8002b58:	f000 84d1 	beq.w	80034fe <USBPD_PE_StateMachine_SRC+0xbd2>
 8002b5c:	1e52      	subs	r2, r2, #1
 8002b5e:	f000 8500 	beq.w	8003562 <USBPD_PE_StateMachine_SRC+0xc36>
 8002b62:	1e52      	subs	r2, r2, #1
 8002b64:	2a01      	cmp	r2, #1
 8002b66:	f240 8535 	bls.w	80035d4 <USBPD_PE_StateMachine_SRC+0xca8>
 8002b6a:	1e92      	subs	r2, r2, #2
 8002b6c:	d001      	beq.n	8002b72 <USBPD_PE_StateMachine_SRC+0x246>
 8002b6e:	1e92      	subs	r2, r2, #2
 8002b70:	2a05      	cmp	r2, #5
 8002b72:	f240 852b 	bls.w	80035cc <USBPD_PE_StateMachine_SRC+0xca0>
 8002b76:	1f92      	subs	r2, r2, #6
 8002b78:	f000 8503 	beq.w	8003582 <USBPD_PE_StateMachine_SRC+0xc56>
 8002b7c:	1e52      	subs	r2, r2, #1
 8002b7e:	2a03      	cmp	r2, #3
 8002b80:	d9f1      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b82:	3a11      	subs	r2, #17
 8002b84:	d0ef      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b86:	1e52      	subs	r2, r2, #1
 8002b88:	f000 811b 	beq.w	8002dc2 <USBPD_PE_StateMachine_SRC+0x496>
 8002b8c:	3a0f      	subs	r2, #15
 8002b8e:	f000 841c 	beq.w	80033ca <USBPD_PE_StateMachine_SRC+0xa9e>
 8002b92:	1fd2      	subs	r2, r2, #7
 8002b94:	2a01      	cmp	r2, #1
 8002b96:	bf84      	itt	hi
 8002b98:	1f52      	subhi	r2, r2, #5
 8002b9a:	2a01      	cmphi	r2, #1
 8002b9c:	d9e3      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b9e:	3a0d      	subs	r2, #13
 8002ba0:	d0e1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002ba2:	3a12      	subs	r2, #18
 8002ba4:	f000 8542 	beq.w	800362c <USBPD_PE_StateMachine_SRC+0xd00>
 8002ba8:	3a0c      	subs	r2, #12
 8002baa:	d068      	beq.n	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002bac:	1e52      	subs	r2, r2, #1
 8002bae:	2a02      	cmp	r2, #2
 8002bb0:	d9d9      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bb2:	1ed2      	subs	r2, r2, #3
 8002bb4:	f000 81d1 	beq.w	8002f5a <USBPD_PE_StateMachine_SRC+0x62e>
 8002bb8:	1e52      	subs	r2, r2, #1
 8002bba:	f000 81e1 	beq.w	8002f80 <USBPD_PE_StateMachine_SRC+0x654>
 8002bbe:	1e92      	subs	r2, r2, #2
 8002bc0:	d0d1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bc2:	1e52      	subs	r2, r2, #1
 8002bc4:	f000 80ac 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002bc8:	1e92      	subs	r2, r2, #2
 8002bca:	2a08      	cmp	r2, #8
 8002bcc:	f240 8508 	bls.w	80035e0 <USBPD_PE_StateMachine_SRC+0xcb4>
 8002bd0:	3a0a      	subs	r2, #10
 8002bd2:	f000 8514 	beq.w	80035fe <USBPD_PE_StateMachine_SRC+0xcd2>
 8002bd6:	a903      	add	r1, sp, #12
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f001 fa2b 	bl	8004034 <PE_StateMachine_VDM>
 8002bde:	4604      	mov	r4, r0
 8002be0:	7c72      	ldrb	r2, [r6, #17]
 8002be2:	7cb0      	ldrb	r0, [r6, #18]
 8002be4:	4290      	cmp	r0, r2
 8002be6:	d003      	beq.n	8002bf0 <USBPD_PE_StateMachine_SRC+0x2c4>
 8002be8:	74b2      	strb	r2, [r6, #18]
 8002bea:	2100      	movs	r1, #0
 8002bec:	f000 fd62 	bl	80036b4 <.text_9>
 8002bf0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002bf4:	2814      	cmp	r0, #20
 8002bf6:	f000 851f 	beq.w	8003638 <USBPD_PE_StateMachine_SRC+0xd0c>
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f7fd ff17 	bl	8000a2e <PE_Check_AMSConflict>
 8002c00:	2815      	cmp	r0, #21
 8002c02:	d105      	bne.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c04:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c08:	2814      	cmp	r0, #20
 8002c0a:	d001      	beq.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c0c:	f000 fd92 	bl	8003734 <.text_20>
 8002c10:	7c72      	ldrb	r2, [r6, #17]
 8002c12:	7cb0      	ldrb	r0, [r6, #18]
 8002c14:	4290      	cmp	r0, r2
 8002c16:	d004      	beq.n	8002c22 <USBPD_PE_StateMachine_SRC+0x2f6>
 8002c18:	74b2      	strb	r2, [r6, #18]
 8002c1a:	f000 fd53 	bl	80036c4 <.text_10+0x2>
 8002c1e:	2004      	movs	r0, #4
 8002c20:	47a0      	blx	r4
 8002c22:	2400      	movs	r4, #0
 8002c24:	f000 bd23 	b.w	800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8002c28:	f04f 34ff 	mov.w	r4, #4294967295
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	e6da      	b.n	80029e6 <USBPD_PE_StateMachine_SRC+0xba>
 8002c30:	20a6      	movs	r0, #166	; 0xa6
 8002c32:	f000 fd46 	bl	80036c2 <.text_10>
 8002c36:	22a6      	movs	r2, #166	; 0xa6
 8002c38:	2004      	movs	r0, #4
 8002c3a:	47a0      	blx	r4
 8002c3c:	78b8      	ldrb	r0, [r7, #2]
 8002c3e:	2402      	movs	r4, #2
 8002c40:	280f      	cmp	r0, #15
 8002c42:	bf18      	it	ne
 8002c44:	2814      	cmpne	r0, #20
 8002c46:	d111      	bne.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c48:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c4c:	2814      	cmp	r0, #20
 8002c4e:	d001      	beq.n	8002c54 <USBPD_PE_StateMachine_SRC+0x328>
 8002c50:	f000 fd70 	bl	8003734 <.text_20>
 8002c54:	78ba      	ldrb	r2, [r7, #2]
 8002c56:	7472      	strb	r2, [r6, #17]
 8002c58:	2000      	movs	r0, #0
 8002c5a:	70b8      	strb	r0, [r7, #2]
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	7cb0      	ldrb	r0, [r6, #18]
 8002c60:	62f1      	str	r1, [r6, #44]	; 0x2c
 8002c62:	4290      	cmp	r0, r2
 8002c64:	d002      	beq.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c66:	74b2      	strb	r2, [r6, #18]
 8002c68:	f000 fd24 	bl	80036b4 <.text_9>
 8002c6c:	e6e2      	b.n	8002a34 <USBPD_PE_StateMachine_SRC+0x108>
 8002c6e:	f000 fd3c 	bl	80036ea <.text_13>
 8002c72:	215f      	movs	r1, #95	; 0x5f
 8002c74:	f000 fd52 	bl	800371c <.text_17>
 8002c78:	f04f 34ff 	mov.w	r4, #4294967295
 8002c7c:	e7b0      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002c7e:	6870      	ldr	r0, [r6, #4]
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	f021 0110 	bic.w	r1, r1, #16
 8002c86:	6001      	str	r1, [r0, #0]
 8002c88:	68b0      	ldr	r0, [r6, #8]
 8002c8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d0f3      	beq.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c90:	7c30      	ldrb	r0, [r6, #16]
 8002c92:	4788      	blx	r1
 8002c94:	e7f0      	b.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c96:	f000 fd22 	bl	80036de <.text_12>
 8002c9a:	bf1a      	itte	ne
 8002c9c:	6830      	ldrne	r0, [r6, #0]
 8002c9e:	6801      	ldrne	r1, [r0, #0]
 8002ca0:	2101      	moveq	r1, #1
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	f002 f9d4 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002ca8:	6870      	ldr	r0, [r6, #4]
 8002caa:	6801      	ldr	r1, [r0, #0]
 8002cac:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002cb0:	b388      	cbz	r0, 8002d16 <USBPD_PE_StateMachine_SRC+0x3ea>
 8002cb2:	f001 0203 	and.w	r2, r1, #3
 8002cb6:	6870      	ldr	r0, [r6, #4]
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	bf0c      	ite	eq
 8002cbc:	2200      	moveq	r2, #0
 8002cbe:	2220      	movne	r2, #32
 8002cc0:	f021 0120 	bic.w	r1, r1, #32
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	6001      	str	r1, [r0, #0]
 8002cc8:	2000      	movs	r0, #0
 8002cca:	70e8      	strb	r0, [r5, #3]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	f000 fd29 	bl	8003724 <.text_18+0x2>
 8002cd2:	6870      	ldr	r0, [r6, #4]
 8002cd4:	6801      	ldr	r1, [r0, #0]
 8002cd6:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8002cda:	b130      	cbz	r0, 8002cea <USBPD_PE_StateMachine_SRC+0x3be>
 8002cdc:	f248 0014 	movw	r0, #32788	; 0x8014
 8002ce0:	83f0      	strh	r0, [r6, #30]
 8002ce2:	2414      	movs	r4, #20
 8002ce4:	2106      	movs	r1, #6
 8002ce6:	7471      	strb	r1, [r6, #17]
 8002ce8:	e77a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002cea:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d00a      	beq.n	8002d08 <USBPD_PE_StateMachine_SRC+0x3dc>
 8002cf2:	6830      	ldr	r0, [r6, #0]
 8002cf4:	7801      	ldrb	r1, [r0, #0]
 8002cf6:	078a      	lsls	r2, r1, #30
 8002cf8:	f140 808c 	bpl.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002cfc:	7929      	ldrb	r1, [r5, #4]
 8002cfe:	2914      	cmp	r1, #20
 8002d00:	f080 8088 	bcs.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d04:	68f0      	ldr	r0, [r6, #12]
 8002d06:	2800      	cmp	r0, #0
 8002d08:	f000 8084 	beq.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d0c:	1c49      	adds	r1, r1, #1
 8002d0e:	7129      	strb	r1, [r5, #4]
 8002d10:	2005      	movs	r0, #5
 8002d12:	7470      	strb	r0, [r6, #17]
 8002d14:	e764      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d16:	7c30      	ldrb	r0, [r6, #16]
 8002d18:	2121      	movs	r1, #33	; 0x21
 8002d1a:	f7fd fc1c 	bl	8000556 <USBPD_PE_Notification>
 8002d1e:	e1e1      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 8002d20:	a903      	add	r1, sp, #12
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 fd3c 	bl	80037a0 <PE_StateMachine_VDMCable>
 8002d28:	e759      	b.n	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 8002d2a:	8bf0      	ldrh	r0, [r6, #30]
 8002d2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d30:	d102      	bne.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d32:	2107      	movs	r1, #7
 8002d34:	7471      	strb	r1, [r6, #17]
 8002d36:	2400      	movs	r4, #0
 8002d38:	e752      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d3a:	6971      	ldr	r1, [r6, #20]
 8002d3c:	0889      	lsrs	r1, r1, #2
 8002d3e:	f001 0101 	and.w	r1, r1, #1
 8002d42:	4630      	mov	r0, r6
 8002d44:	f000 fd01 	bl	800374a <PE_Send_SRCCapabilities>
 8002d48:	2805      	cmp	r0, #5
 8002d4a:	d002      	beq.n	8002d52 <USBPD_PE_StateMachine_SRC+0x426>
 8002d4c:	2809      	cmp	r0, #9
 8002d4e:	d0f3      	beq.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d50:	e011      	b.n	8002d76 <USBPD_PE_StateMachine_SRC+0x44a>
 8002d52:	2001      	movs	r0, #1
 8002d54:	6971      	ldr	r1, [r6, #20]
 8002d56:	7730      	strb	r0, [r6, #28]
 8002d58:	f041 0104 	orr.w	r1, r1, #4
 8002d5c:	6171      	str	r1, [r6, #20]
 8002d5e:	2000      	movs	r0, #0
 8002d60:	70e8      	strb	r0, [r5, #3]
 8002d62:	70a8      	strb	r0, [r5, #2]
 8002d64:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002d68:	2016      	movs	r0, #22
 8002d6a:	241b      	movs	r4, #27
 8002d6c:	7470      	strb	r0, [r6, #17]
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f000 fcd4 	bl	800371c <.text_17>
 8002d74:	e734      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d76:	6970      	ldr	r0, [r6, #20]
 8002d78:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002d7c:	b978      	cbnz	r0, 8002d9e <USBPD_PE_StateMachine_SRC+0x472>
 8002d7e:	78e8      	ldrb	r0, [r5, #3]
 8002d80:	2833      	cmp	r0, #51	; 0x33
 8002d82:	d218      	bcs.n	8002db6 <USBPD_PE_StateMachine_SRC+0x48a>
 8002d84:	f248 0196 	movw	r1, #32918	; 0x8096
 8002d88:	83f1      	strh	r1, [r6, #30]
 8002d8a:	2008      	movs	r0, #8
 8002d8c:	7470      	strb	r0, [r6, #17]
 8002d8e:	2496      	movs	r4, #150	; 0x96
 8002d90:	8c71      	ldrh	r1, [r6, #34]	; 0x22
 8002d92:	0448      	lsls	r0, r1, #17
 8002d94:	d002      	beq.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002d96:	8c74      	ldrh	r4, [r6, #34]	; 0x22
 8002d98:	f3c4 040e 	ubfx	r4, r4, #0, #15
 8002d9c:	e720      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d9e:	6870      	ldr	r0, [r6, #4]
 8002da0:	7801      	ldrb	r1, [r0, #0]
 8002da2:	f001 0103 	and.w	r1, r1, #3
 8002da6:	2902      	cmp	r1, #2
 8002da8:	bf04      	itt	eq
 8002daa:	7c30      	ldrbeq	r0, [r6, #16]
 8002dac:	f002 f93f 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8002db0:	2011      	movs	r0, #17
 8002db2:	7470      	strb	r0, [r6, #17]
 8002db4:	e7bf      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8002db6:	7c30      	ldrb	r0, [r6, #16]
 8002db8:	2121      	movs	r1, #33	; 0x21
 8002dba:	f7fd fbcc 	bl	8000556 <USBPD_PE_Notification>
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	e7a7      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f000 fcc0 	bl	800374a <PE_Send_SRCCapabilities>
 8002dca:	2805      	cmp	r0, #5
 8002dcc:	d107      	bne.n	8002dde <USBPD_PE_StateMachine_SRC+0x4b2>
 8002dce:	f000 fca8 	bl	8003722 <.text_18>
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 fc5f 	bl	8003696 <.text_6>
 8002dd8:	2116      	movs	r1, #22
 8002dda:	7471      	strb	r1, [r6, #17]
 8002ddc:	e7c7      	b.n	8002d6e <USBPD_PE_StateMachine_SRC+0x442>
 8002dde:	2000      	movs	r0, #0
 8002de0:	7730      	strb	r0, [r6, #28]
 8002de2:	2111      	movs	r1, #17
 8002de4:	e77f      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 8002de6:	8c70      	ldrh	r0, [r6, #34]	; 0x22
 8002de8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002dec:	d106      	bne.n	8002dfc <USBPD_PE_StateMachine_SRC+0x4d0>
 8002dee:	2100      	movs	r1, #0
 8002df0:	8471      	strh	r1, [r6, #34]	; 0x22
 8002df2:	2105      	movs	r1, #5
 8002df4:	7928      	ldrb	r0, [r5, #4]
 8002df6:	1c40      	adds	r0, r0, #1
 8002df8:	7128      	strb	r0, [r5, #4]
 8002dfa:	7471      	strb	r1, [r6, #17]
 8002dfc:	8bf0      	ldrh	r0, [r6, #30]
 8002dfe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e02:	d1cb      	bne.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002e04:	6830      	ldr	r0, [r6, #0]
 8002e06:	6841      	ldr	r1, [r0, #4]
 8002e08:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8002e0c:	b110      	cbz	r0, 8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002e0e:	78e8      	ldrb	r0, [r5, #3]
 8002e10:	1c40      	adds	r0, r0, #1
 8002e12:	70e8      	strb	r0, [r5, #3]
 8002e14:	2007      	movs	r0, #7
 8002e16:	e77c      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002e18:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002e1c:	2811      	cmp	r0, #17
 8002e1e:	d10b      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e20:	88b9      	ldrh	r1, [r7, #4]
 8002e22:	0bc8      	lsrs	r0, r1, #15
 8002e24:	d108      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e26:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	f000 80eb 	beq.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e30:	7938      	ldrb	r0, [r7, #4]
 8002e32:	f000 001f 	and.w	r0, r0, #31
 8002e36:	2802      	cmp	r0, #2
 8002e38:	f040 80e5 	bne.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	7881      	ldrb	r1, [r0, #2]
 8002e40:	78c2      	ldrb	r2, [r0, #3]
 8002e42:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8002e46:	7901      	ldrb	r1, [r0, #4]
 8002e48:	7940      	ldrb	r0, [r0, #5]
 8002e4a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8002e4e:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	88b8      	ldrh	r0, [r7, #4]
 8002e56:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002e5a:	7c30      	ldrb	r0, [r6, #16]
 8002e5c:	f7fd feeb 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8002e60:	68b4      	ldr	r4, [r6, #8]
 8002e62:	7c30      	ldrb	r0, [r6, #16]
 8002e64:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002e68:	2304      	movs	r3, #4
 8002e6a:	466a      	mov	r2, sp
 8002e6c:	2106      	movs	r1, #6
 8002e6e:	47e0      	blx	ip
 8002e70:	2009      	movs	r0, #9
 8002e72:	7470      	strb	r0, [r6, #17]
 8002e74:	2400      	movs	r4, #0
 8002e76:	e0c0      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002e78:	68b2      	ldr	r2, [r6, #8]
 8002e7a:	7c30      	ldrb	r0, [r6, #16]
 8002e7c:	69d3      	ldr	r3, [r2, #28]
 8002e7e:	a901      	add	r1, sp, #4
 8002e80:	4798      	blx	r3
 8002e82:	280a      	cmp	r0, #10
 8002e84:	d011      	beq.n	8002eaa <USBPD_PE_StateMachine_SRC+0x57e>
 8002e86:	280b      	cmp	r0, #11
 8002e88:	d02f      	beq.n	8002eea <USBPD_PE_StateMachine_SRC+0x5be>
 8002e8a:	280d      	cmp	r0, #13
 8002e8c:	6870      	ldr	r0, [r6, #4]
 8002e8e:	6801      	ldr	r1, [r0, #0]
 8002e90:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002e94:	d12e      	bne.n	8002ef4 <USBPD_PE_StateMachine_SRC+0x5c8>
 8002e96:	2803      	cmp	r0, #3
 8002e98:	bf0c      	ite	eq
 8002e9a:	2303      	moveq	r3, #3
 8002e9c:	230e      	movne	r3, #14
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	9000      	str	r0, [sp, #0]
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	f000 fc4d 	bl	8003742 <.text_21+0x2>
 8002ea8:	e69a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eaa:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8002eae:	241e      	movs	r4, #30
 8002eb0:	6870      	ldr	r0, [r6, #4]
 8002eb2:	6801      	ldr	r1, [r0, #0]
 8002eb4:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002eb8:	2801      	cmp	r0, #1
 8002eba:	d00b      	beq.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ebc:	9801      	ldr	r0, [sp, #4]
 8002ebe:	2803      	cmp	r0, #3
 8002ec0:	bf02      	ittt	eq
 8002ec2:	6970      	ldreq	r0, [r6, #20]
 8002ec4:	f3c0 00c1 	ubfxeq	r0, r0, #3, #2
 8002ec8:	2803      	cmpeq	r0, #3
 8002eca:	d103      	bne.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ecc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ed0:	83f0      	strh	r0, [r6, #30]
 8002ed2:	2400      	movs	r4, #0
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	9000      	str	r0, [sp, #0]
 8002ed8:	230c      	movs	r3, #12
 8002eda:	f000 fc31 	bl	8003740 <.text_21>
 8002ede:	9801      	ldr	r0, [sp, #4]
 8002ee0:	6971      	ldr	r1, [r6, #20]
 8002ee2:	f360 01c4 	bfi	r1, r0, #3, #2
 8002ee6:	6171      	str	r1, [r6, #20]
 8002ee8:	e67a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eea:	2000      	movs	r0, #0
 8002eec:	9000      	str	r0, [sp, #0]
 8002eee:	230c      	movs	r3, #12
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	e7d7      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002ef4:	2803      	cmp	r0, #3
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2303      	moveq	r3, #3
 8002efa:	230e      	movne	r3, #14
 8002efc:	2000      	movs	r0, #0
 8002efe:	9000      	str	r0, [sp, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	e7cf      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002f04:	8bf0      	ldrh	r0, [r6, #30]
 8002f06:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f0a:	d1ed      	bne.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f0c:	f000 fc09 	bl	8003722 <.text_18>
 8002f10:	68b0      	ldr	r0, [r6, #8]
 8002f12:	6801      	ldr	r1, [r0, #0]
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d0e7      	beq.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f18:	7c30      	ldrb	r0, [r6, #16]
 8002f1a:	4788      	blx	r1
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f040 8252 	bne.w	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8002f22:	200d      	movs	r0, #13
 8002f24:	e6f5      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002f26:	2100      	movs	r1, #0
 8002f28:	9100      	str	r1, [sp, #0]
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	f000 fc09 	bl	8003744 <.text_21+0x4>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d110      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f36:	2103      	movs	r1, #3
 8002f38:	f000 fbf4 	bl	8003724 <.text_18+0x2>
 8002f3c:	7c30      	ldrb	r0, [r6, #16]
 8002f3e:	2110      	movs	r1, #16
 8002f40:	f7fd fb09 	bl	8000556 <USBPD_PE_Notification>
 8002f44:	2000      	movs	r0, #0
 8002f46:	84b0      	strh	r0, [r6, #36]	; 0x24
 8002f48:	6970      	ldr	r0, [r6, #20]
 8002f4a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002f4e:	2803      	cmp	r0, #3
 8002f50:	d102      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f52:	f24b 60b0 	movw	r0, #46768	; 0xb6b0
 8002f56:	84b0      	strh	r0, [r6, #36]	; 0x24
 8002f58:	e642      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	9100      	str	r1, [sp, #0]
 8002f5e:	2397      	movs	r3, #151	; 0x97
 8002f60:	2202      	movs	r2, #2
 8002f62:	f000 fbee 	bl	8003742 <.text_21+0x2>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d1f6      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f6a:	7c30      	ldrb	r0, [r6, #16]
 8002f6c:	7734      	strb	r4, [r6, #28]
 8002f6e:	2129      	movs	r1, #41	; 0x29
 8002f70:	f7fd faf1 	bl	8000556 <USBPD_PE_Notification>
 8002f74:	f248 2026 	movw	r0, #33318	; 0x8226
 8002f78:	83f0      	strh	r0, [r6, #30]
 8002f7a:	f240 2426 	movw	r4, #550	; 0x226
 8002f7e:	e62f      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f80:	8bf0      	ldrh	r0, [r6, #30]
 8002f82:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f86:	d1fa      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002f88:	7c30      	ldrb	r0, [r6, #16]
 8002f8a:	212a      	movs	r1, #42	; 0x2a
 8002f8c:	f7fd fae3 	bl	8000556 <USBPD_PE_Notification>
 8002f90:	2000      	movs	r0, #0
 8002f92:	9000      	str	r0, [sp, #0]
 8002f94:	2303      	movs	r3, #3
 8002f96:	2206      	movs	r2, #6
 8002f98:	f000 fbd3 	bl	8003742 <.text_21+0x2>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d1ee      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fa0:	212e      	movs	r1, #46	; 0x2e
 8002fa2:	e6e5      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	9000      	str	r0, [sp, #0]
 8002fa8:	2307      	movs	r3, #7
 8002faa:	2203      	movs	r2, #3
 8002fac:	e77a      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	9000      	str	r0, [sp, #0]
 8002fb2:	2312      	movs	r3, #18
 8002fb4:	7879      	ldrb	r1, [r7, #1]
 8002fb6:	220d      	movs	r2, #13
 8002fb8:	f000 fbc4 	bl	8003744 <.text_21+0x4>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1de      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fc0:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002fc4:	241b      	movs	r4, #27
 8002fc6:	2130      	movs	r1, #48	; 0x30
 8002fc8:	e6d2      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002fce:	2914      	cmp	r1, #20
 8002fd0:	d019      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fd2:	783a      	ldrb	r2, [r7, #0]
 8002fd4:	7879      	ldrb	r1, [r7, #1]
 8002fd6:	428a      	cmp	r2, r1
 8002fd8:	bf02      	ittt	eq
 8002fda:	88ba      	ldrheq	r2, [r7, #4]
 8002fdc:	4010      	andeq	r0, r2
 8002fde:	2803      	cmpeq	r0, #3
 8002fe0:	d111      	bne.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fe2:	7c30      	ldrb	r0, [r6, #16]
 8002fe4:	2131      	movs	r1, #49	; 0x31
 8002fe6:	f7fd fab6 	bl	8000556 <USBPD_PE_Notification>
 8002fea:	7838      	ldrb	r0, [r7, #0]
 8002fec:	b910      	cbnz	r0, 8002ff4 <USBPD_PE_StateMachine_SRC+0x6c8>
 8002fee:	2107      	movs	r1, #7
 8002ff0:	7471      	strb	r1, [r6, #17]
 8002ff2:	e002      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	7470      	strb	r0, [r6, #17]
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002ffe:	2814      	cmp	r0, #20
 8003000:	d001      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8003002:	f000 fb97 	bl	8003734 <.text_20>
 8003006:	8bf0      	ldrh	r0, [r6, #30]
 8003008:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800300c:	d1b7      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 800300e:	e1da      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003010:	6870      	ldr	r0, [r6, #4]
 8003012:	7801      	ldrb	r1, [r0, #0]
 8003014:	f001 0103 	and.w	r1, r1, #3
 8003018:	2902      	cmp	r1, #2
 800301a:	bf04      	itt	eq
 800301c:	7c30      	ldrbeq	r0, [r6, #16]
 800301e:	f002 f806 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003022:	2105      	movs	r1, #5
 8003024:	4630      	mov	r0, r6
 8003026:	f7fd fc65 	bl	80008f4 <PE_Send_RESET>
 800302a:	f000 fb5e 	bl	80036ea <.text_13>
 800302e:	2100      	movs	r1, #0
 8003030:	78a8      	ldrb	r0, [r5, #2]
 8003032:	1c40      	adds	r0, r0, #1
 8003034:	70a8      	strb	r0, [r5, #2]
 8003036:	2202      	movs	r2, #2
 8003038:	6970      	ldr	r0, [r6, #20]
 800303a:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
 800303e:	6170      	str	r0, [r6, #20]
 8003040:	70b9      	strb	r1, [r7, #2]
 8003042:	f420 70e0 	bic.w	r0, r0, #448	; 0x1c0
 8003046:	6170      	str	r0, [r6, #20]
 8003048:	f000 fb70 	bl	800372c <.text_19+0x2>
 800304c:	2169      	movs	r1, #105	; 0x69
 800304e:	4640      	mov	r0, r8
 8003050:	f7fd fa81 	bl	8000556 <USBPD_PE_Notification>
 8003054:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8003058:	241b      	movs	r4, #27
 800305a:	2015      	movs	r0, #21
 800305c:	e659      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 800305e:	6870      	ldr	r0, [r6, #4]
 8003060:	7801      	ldrb	r1, [r0, #0]
 8003062:	f001 0103 	and.w	r1, r1, #3
 8003066:	2902      	cmp	r1, #2
 8003068:	bf04      	itt	eq
 800306a:	7c30      	ldrbeq	r0, [r6, #16]
 800306c:	f001 ffdf 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003070:	e7ec      	b.n	800304c <USBPD_PE_StateMachine_SRC+0x720>
 8003072:	8bf0      	ldrh	r0, [r6, #30]
 8003074:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003078:	d117      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800307a:	78a9      	ldrb	r1, [r5, #2]
 800307c:	6970      	ldr	r0, [r6, #20]
 800307e:	2903      	cmp	r1, #3
 8003080:	d303      	bcc.n	800308a <USBPD_PE_StateMachine_SRC+0x75e>
 8003082:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003086:	bb48      	cbnz	r0, 80030dc <USBPD_PE_StateMachine_SRC+0x7b0>
 8003088:	e02c      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 800308a:	f248 218a 	movw	r1, #33418	; 0x828a
 800308e:	83f1      	strh	r1, [r6, #30]
 8003090:	2217      	movs	r2, #23
 8003092:	7472      	strb	r2, [r6, #17]
 8003094:	2400      	movs	r4, #0
 8003096:	f3c0 2041 	ubfx	r0, r0, #9, #2
 800309a:	1e42      	subs	r2, r0, #1
 800309c:	4192      	sbcs	r2, r2
 800309e:	0fd2      	lsrs	r2, r2, #31
 80030a0:	f000 fb44 	bl	800372c <.text_19+0x2>
 80030a4:	2203      	movs	r2, #3
 80030a6:	f000 fb41 	bl	800372c <.text_19+0x2>
 80030aa:	e599      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80030ac:	68b2      	ldr	r2, [r6, #8]
 80030ae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80030b0:	2100      	movs	r1, #0
 80030b2:	4640      	mov	r0, r8
 80030b4:	4798      	blx	r3
 80030b6:	2801      	cmp	r0, #1
 80030b8:	d106      	bne.n	80030c8 <USBPD_PE_StateMachine_SRC+0x79c>
 80030ba:	f248 3020 	movw	r0, #33568	; 0x8320
 80030be:	83f0      	strh	r0, [r6, #30]
 80030c0:	2113      	movs	r1, #19
 80030c2:	f44f 7448 	mov.w	r4, #800	; 0x320
 80030c6:	7471      	strb	r1, [r6, #17]
 80030c8:	8bf0      	ldrh	r0, [r6, #30]
 80030ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80030ce:	d1ec      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030d0:	f000 fb2b 	bl	800372a <.text_19>
 80030d4:	6970      	ldr	r0, [r6, #20]
 80030d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030da:	b118      	cbz	r0, 80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 80030dc:	68b1      	ldr	r1, [r6, #8]
 80030de:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d11f      	bne.n	8003124 <USBPD_PE_StateMachine_SRC+0x7f8>
 80030e4:	2100      	movs	r1, #0
 80030e6:	e5fe      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 80030e8:	8bf0      	ldrh	r0, [r6, #30]
 80030ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80030ee:	d1dc      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030f0:	2204      	movs	r2, #4
 80030f2:	f000 fb1b 	bl	800372c <.text_19+0x2>
 80030f6:	68b2      	ldr	r2, [r6, #8]
 80030f8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80030fa:	2101      	movs	r1, #1
 80030fc:	4640      	mov	r0, r8
 80030fe:	4798      	blx	r3
 8003100:	2801      	cmp	r0, #1
 8003102:	d10a      	bne.n	800311a <USBPD_PE_StateMachine_SRC+0x7ee>
 8003104:	4630      	mov	r0, r6
 8003106:	f7fd fcf4 	bl	8000af2 <PE_Reset_HardReset>
 800310a:	2168      	movs	r1, #104	; 0x68
 800310c:	4640      	mov	r0, r8
 800310e:	f7fd fa22 	bl	8000556 <USBPD_PE_Notification>
 8003112:	2205      	movs	r2, #5
 8003114:	f000 fb0a 	bl	800372c <.text_19+0x2>
 8003118:	e67c      	b.n	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 800311a:	f000 fb06 	bl	800372a <.text_19>
 800311e:	68b1      	ldr	r1, [r6, #8]
 8003120:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003122:	2800      	cmp	r0, #0
 8003124:	f040 8280 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003128:	2100      	movs	r1, #0
 800312a:	7471      	strb	r1, [r6, #17]
 800312c:	e603      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 800312e:	2001      	movs	r0, #1
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	231b      	movs	r3, #27
 8003134:	2207      	movs	r2, #7
 8003136:	f000 fb04 	bl	8003742 <.text_21+0x2>
 800313a:	2800      	cmp	r0, #0
 800313c:	d1b5      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800313e:	2006      	movs	r0, #6
 8003140:	f000 faa9 	bl	8003696 <.text_6>
 8003144:	241b      	movs	r4, #27
 8003146:	210b      	movs	r1, #11
 8003148:	e612      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 800314a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800314e:	2811      	cmp	r0, #17
 8003150:	d131      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003152:	88b9      	ldrh	r1, [r7, #4]
 8003154:	0bc8      	lsrs	r0, r1, #15
 8003156:	d11b      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003158:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800315c:	b1c0      	cbz	r0, 8003190 <USBPD_PE_StateMachine_SRC+0x864>
 800315e:	4608      	mov	r0, r1
 8003160:	f000 011f 	and.w	r1, r0, #31
 8003164:	2901      	cmp	r1, #1
 8003166:	d113      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003168:	68b4      	ldr	r4, [r6, #8]
 800316a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800316e:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	1c82      	adds	r2, r0, #2
 8003176:	7c30      	ldrb	r0, [r6, #16]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	2104      	movs	r1, #4
 800317c:	47e0      	blx	ip
 800317e:	f000 fa92 	bl	80036a6 <.text_8>
 8003182:	d001      	beq.n	8003188 <USBPD_PE_StateMachine_SRC+0x85c>
 8003184:	f000 fad6 	bl	8003734 <.text_20>
 8003188:	7c30      	ldrb	r0, [r6, #16]
 800318a:	210d      	movs	r1, #13
 800318c:	f7fd f9e3 	bl	8000556 <USBPD_PE_Notification>
 8003190:	88b8      	ldrh	r0, [r7, #4]
 8003192:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8003196:	d10e      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003198:	f000 001f 	and.w	r0, r0, #31
 800319c:	2804      	cmp	r0, #4
 800319e:	bf18      	it	ne
 80031a0:	2810      	cmpne	r0, #16
 80031a2:	d108      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 80031a4:	f000 fa7f 	bl	80036a6 <.text_8>
 80031a8:	d001      	beq.n	80031ae <USBPD_PE_StateMachine_SRC+0x882>
 80031aa:	f000 fac3 	bl	8003734 <.text_20>
 80031ae:	7c30      	ldrb	r0, [r6, #16]
 80031b0:	210e      	movs	r1, #14
 80031b2:	f7fd f9d0 	bl	8000556 <USBPD_PE_Notification>
 80031b6:	8bf0      	ldrh	r0, [r6, #30]
 80031b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80031bc:	d11a      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031be:	2103      	movs	r1, #3
 80031c0:	e5b8      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80031c2:	68b0      	ldr	r0, [r6, #8]
 80031c4:	6881      	ldr	r1, [r0, #8]
 80031c6:	b1d1      	cbz	r1, 80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031c8:	7c30      	ldrb	r0, [r6, #16]
 80031ca:	4788      	blx	r1
 80031cc:	280a      	cmp	r0, #10
 80031ce:	d002      	beq.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8aa>
 80031d0:	280d      	cmp	r0, #13
 80031d2:	d010      	beq.n	80031f6 <USBPD_PE_StateMachine_SRC+0x8ca>
 80031d4:	e013      	b.n	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031d6:	f8a6 b01e 	strh.w	fp, [r6, #30]
 80031da:	2000      	movs	r0, #0
 80031dc:	9000      	str	r0, [sp, #0]
 80031de:	2324      	movs	r3, #36	; 0x24
 80031e0:	f000 faae 	bl	8003740 <.text_21>
 80031e4:	241e      	movs	r4, #30
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d104      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031ea:	f000 fa4f 	bl	800368c <.text_5>
 80031ee:	2201      	movs	r2, #1
 80031f0:	2101      	movs	r1, #1
 80031f2:	47e0      	blx	ip
 80031f4:	e4f4      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80031f6:	2000      	movs	r0, #0
 80031f8:	9000      	str	r0, [sp, #0]
 80031fa:	2303      	movs	r3, #3
 80031fc:	e651      	b.n	8002ea2 <USBPD_PE_StateMachine_SRC+0x576>
 80031fe:	2000      	movs	r0, #0
 8003200:	9000      	str	r0, [sp, #0]
 8003202:	2303      	movs	r3, #3
 8003204:	e67c      	b.n	8002f00 <USBPD_PE_StateMachine_SRC+0x5d4>
 8003206:	8bf0      	ldrh	r0, [r6, #30]
 8003208:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800320c:	d1f2      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800320e:	f000 fa88 	bl	8003722 <.text_18>
 8003212:	f000 fa5e 	bl	80036d2 <.text_11>
 8003216:	2206      	movs	r2, #6
 8003218:	f000 fa73 	bl	8003702 <.text_15>
 800321c:	f000 fa77 	bl	800370e <.text_16>
 8003220:	7c30      	ldrb	r0, [r6, #16]
 8003222:	2100      	movs	r1, #0
 8003224:	f001 fed3 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003228:	2000      	movs	r0, #0
 800322a:	9000      	str	r0, [sp, #0]
 800322c:	2325      	movs	r3, #37	; 0x25
 800322e:	2206      	movs	r2, #6
 8003230:	f000 fa87 	bl	8003742 <.text_21+0x2>
 8003234:	2800      	cmp	r0, #0
 8003236:	d1dd      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 8003238:	e0a5      	b.n	8003386 <USBPD_PE_StateMachine_SRC+0xa5a>
 800323a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800323e:	2911      	cmp	r1, #17
 8003240:	bf02      	ittt	eq
 8003242:	88b9      	ldrheq	r1, [r7, #4]
 8003244:	4008      	andeq	r0, r1
 8003246:	2806      	cmpeq	r0, #6
 8003248:	d105      	bne.n	8003256 <USBPD_PE_StateMachine_SRC+0x92a>
 800324a:	f000 fa28 	bl	800369e <.text_7>
 800324e:	f000 fa74 	bl	800373a <.text_20+0x6>
 8003252:	2026      	movs	r0, #38	; 0x26
 8003254:	7470      	strb	r0, [r6, #17]
 8003256:	8bf0      	ldrh	r0, [r6, #30]
 8003258:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800325c:	d1ca      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800325e:	68b3      	ldr	r3, [r6, #8]
 8003260:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003262:	2800      	cmp	r0, #0
 8003264:	f040 81e0 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003268:	7c30      	ldrb	r0, [r6, #16]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	220a      	movs	r2, #10
 800326e:	2101      	movs	r1, #1
 8003270:	4798      	blx	r3
 8003272:	e0a8      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003274:	2100      	movs	r1, #0
 8003276:	4630      	mov	r0, r6
 8003278:	f7fd fb5c 	bl	8000934 <PE_ChangePowerRole>
 800327c:	f000 fa02 	bl	8003684 <.text_4>
 8003280:	220d      	movs	r2, #13
 8003282:	2100      	movs	r1, #0
 8003284:	47a0      	blx	r4
 8003286:	7c30      	ldrb	r0, [r6, #16]
 8003288:	2114      	movs	r1, #20
 800328a:	f7fd f964 	bl	8000556 <USBPD_PE_Notification>
 800328e:	f000 f9f9 	bl	8003684 <.text_4>
 8003292:	220e      	movs	r2, #14
 8003294:	2100      	movs	r1, #0
 8003296:	47a0      	blx	r4
 8003298:	6870      	ldr	r0, [r6, #4]
 800329a:	7801      	ldrb	r1, [r0, #0]
 800329c:	f001 0103 	and.w	r1, r1, #3
 80032a0:	2901      	cmp	r1, #1
 80032a2:	bf04      	itt	eq
 80032a4:	4640      	moveq	r0, r8
 80032a6:	f001 fed3 	bleq	8005050 <USBPD_PRL_SOPCapability>
 80032aa:	4630      	mov	r0, r6
 80032ac:	f7fd fc96 	bl	8000bdc <PE_Reset_StateMachine>
 80032b0:	e541      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80032b2:	2001      	movs	r0, #1
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	231f      	movs	r3, #31
 80032b8:	220a      	movs	r2, #10
 80032ba:	f000 fa42 	bl	8003742 <.text_21+0x2>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d198      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80032c2:	2008      	movs	r0, #8
 80032c4:	f000 f9e7 	bl	8003696 <.text_6>
 80032c8:	2202      	movs	r2, #2
 80032ca:	f000 fa1a 	bl	8003702 <.text_15>
 80032ce:	241b      	movs	r4, #27
 80032d0:	2139      	movs	r1, #57	; 0x39
 80032d2:	e54d      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80032d4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80032d8:	2811      	cmp	r0, #17
 80032da:	bf04      	itt	eq
 80032dc:	88b8      	ldrheq	r0, [r7, #4]
 80032de:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 80032e2:	d133      	bne.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032e4:	f000 001f 	and.w	r0, r0, #31
 80032e8:	2803      	cmp	r0, #3
 80032ea:	d006      	beq.n	80032fa <USBPD_PE_StateMachine_SRC+0x9ce>
 80032ec:	2804      	cmp	r0, #4
 80032ee:	d011      	beq.n	8003314 <USBPD_PE_StateMachine_SRC+0x9e8>
 80032f0:	280c      	cmp	r0, #12
 80032f2:	d008      	beq.n	8003306 <USBPD_PE_StateMachine_SRC+0x9da>
 80032f4:	2810      	cmp	r0, #16
 80032f6:	d01a      	beq.n	800332e <USBPD_PE_StateMachine_SRC+0xa02>
 80032f8:	e028      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032fa:	7c30      	ldrb	r0, [r6, #16]
 80032fc:	213a      	movs	r1, #58	; 0x3a
 80032fe:	f7fd f92a 	bl	8000556 <USBPD_PE_Notification>
 8003302:	2020      	movs	r0, #32
 8003304:	e00c      	b.n	8003320 <USBPD_PE_StateMachine_SRC+0x9f4>
 8003306:	f000 f9bd 	bl	8003684 <.text_4>
 800330a:	2205      	movs	r2, #5
 800330c:	2101      	movs	r1, #1
 800330e:	47a0      	blx	r4
 8003310:	213b      	movs	r1, #59	; 0x3b
 8003312:	e002      	b.n	800331a <USBPD_PE_StateMachine_SRC+0x9ee>
 8003314:	f000 f9ef 	bl	80036f6 <.text_14>
 8003318:	2116      	movs	r1, #22
 800331a:	f000 f9ff 	bl	800371c <.text_17>
 800331e:	2003      	movs	r0, #3
 8003320:	7470      	strb	r0, [r6, #17]
 8003322:	2400      	movs	r4, #0
 8003324:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003328:	2814      	cmp	r0, #20
 800332a:	d10d      	bne.n	8003348 <USBPD_PE_StateMachine_SRC+0xa1c>
 800332c:	e00e      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 800332e:	f000 f9e2 	bl	80036f6 <.text_14>
 8003332:	7c30      	ldrb	r0, [r6, #16]
 8003334:	2117      	movs	r1, #23
 8003336:	f7fd f90e 	bl	8000556 <USBPD_PE_Notification>
 800333a:	2003      	movs	r0, #3
 800333c:	7470      	strb	r0, [r6, #17]
 800333e:	2400      	movs	r4, #0
 8003340:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003344:	2814      	cmp	r0, #20
 8003346:	d001      	beq.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 8003348:	f000 f9f4 	bl	8003734 <.text_20>
 800334c:	8bf0      	ldrh	r0, [r6, #30]
 800334e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003352:	d122      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003354:	e733      	b.n	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003356:	f000 f9bc 	bl	80036d2 <.text_11>
 800335a:	7f30      	ldrb	r0, [r6, #28]
 800335c:	2809      	cmp	r0, #9
 800335e:	d004      	beq.n	800336a <USBPD_PE_StateMachine_SRC+0xa3e>
 8003360:	f000 f994 	bl	800368c <.text_5>
 8003364:	2206      	movs	r2, #6
 8003366:	2101      	movs	r1, #1
 8003368:	47e0      	blx	ip
 800336a:	f000 f9d0 	bl	800370e <.text_16>
 800336e:	7c30      	ldrb	r0, [r6, #16]
 8003370:	2100      	movs	r1, #0
 8003372:	f001 fe2c 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003376:	2000      	movs	r0, #0
 8003378:	9000      	str	r0, [sp, #0]
 800337a:	2321      	movs	r3, #33	; 0x21
 800337c:	2206      	movs	r2, #6
 800337e:	f000 f9e0 	bl	8003742 <.text_21+0x2>
 8003382:	2800      	cmp	r0, #0
 8003384:	d109      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003386:	f000 f97d 	bl	8003684 <.text_4>
 800338a:	2208      	movs	r2, #8
 800338c:	2101      	movs	r1, #1
 800338e:	47a0      	blx	r4
 8003390:	f248 10d6 	movw	r0, #33238	; 0x81d6
 8003394:	83f0      	strh	r0, [r6, #30]
 8003396:	f44f 74eb 	mov.w	r4, #470	; 0x1d6
 800339a:	e421      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800339c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80033a0:	2911      	cmp	r1, #17
 80033a2:	bf02      	ittt	eq
 80033a4:	88b9      	ldrheq	r1, [r7, #4]
 80033a6:	4008      	andeq	r0, r1
 80033a8:	2806      	cmpeq	r0, #6
 80033aa:	d103      	bne.n	80033b4 <USBPD_PE_StateMachine_SRC+0xa88>
 80033ac:	2026      	movs	r0, #38	; 0x26
 80033ae:	7470      	strb	r0, [r6, #17]
 80033b0:	f000 f9c0 	bl	8003734 <.text_20>
 80033b4:	8bf0      	ldrh	r0, [r6, #30]
 80033b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80033ba:	d1ee      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033bc:	68b1      	ldr	r1, [r6, #8]
 80033be:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f040 8131 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 80033c6:	210f      	movs	r1, #15
 80033c8:	e4b4      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80033ca:	8bf0      	ldrh	r0, [r6, #30]
 80033cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80033d0:	d1e3      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033d2:	f000 f95b 	bl	800368c <.text_5>
 80033d6:	220e      	movs	r2, #14
 80033d8:	2101      	movs	r1, #1
 80033da:	47e0      	blx	ip
 80033dc:	6870      	ldr	r0, [r6, #4]
 80033de:	7801      	ldrb	r1, [r0, #0]
 80033e0:	f001 0103 	and.w	r1, r1, #3
 80033e4:	2902      	cmp	r1, #2
 80033e6:	bf04      	itt	eq
 80033e8:	7c30      	ldrbeq	r0, [r6, #16]
 80033ea:	f001 fe20 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 80033ee:	4630      	mov	r0, r6
 80033f0:	f7fd fbf4 	bl	8000bdc <PE_Reset_StateMachine>
 80033f4:	2115      	movs	r1, #21
 80033f6:	e4bb      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80033f8:	2903      	cmp	r1, #3
 80033fa:	d10f      	bne.n	800341c <USBPD_PE_StateMachine_SRC+0xaf0>
 80033fc:	2000      	movs	r0, #0
 80033fe:	6871      	ldr	r1, [r6, #4]
 8003400:	7730      	strb	r0, [r6, #28]
 8003402:	7808      	ldrb	r0, [r1, #0]
 8003404:	f000 0003 	and.w	r0, r0, #3
 8003408:	2802      	cmp	r0, #2
 800340a:	bf04      	itt	eq
 800340c:	7c30      	ldrbeq	r0, [r6, #16]
 800340e:	f001 fe0e 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003412:	2004      	movs	r0, #4
 8003414:	7470      	strb	r0, [r6, #17]
 8003416:	2167      	movs	r1, #103	; 0x67
 8003418:	f000 f980 	bl	800371c <.text_17>
 800341c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003420:	2814      	cmp	r0, #20
 8003422:	d009      	beq.n	8003438 <USBPD_PE_StateMachine_SRC+0xb0c>
 8003424:	4630      	mov	r0, r6
 8003426:	f7fe fa8d 	bl	8001944 <PE_ManageRXEvent>
 800342a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800342e:	2814      	cmp	r0, #20
 8003430:	d0b3      	beq.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003432:	f000 f97f 	bl	8003734 <.text_20>
 8003436:	e7b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003438:	6970      	ldr	r0, [r6, #20]
 800343a:	0cc0      	lsrs	r0, r0, #19
 800343c:	d027      	beq.n	800348e <USBPD_PE_StateMachine_SRC+0xb62>
 800343e:	8c30      	ldrh	r0, [r6, #32]
 8003440:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003444:	d10e      	bne.n	8003464 <USBPD_PE_StateMachine_SRC+0xb38>
 8003446:	210f      	movs	r1, #15
 8003448:	7471      	strb	r1, [r6, #17]
 800344a:	2000      	movs	r0, #0
 800344c:	9000      	str	r0, [sp, #0]
 800344e:	7c31      	ldrb	r1, [r6, #16]
 8003450:	f8d9 4000 	ldr.w	r4, [r9]
 8003454:	2300      	movs	r3, #0
 8003456:	2270      	movs	r2, #112	; 0x70
 8003458:	2009      	movs	r0, #9
 800345a:	47a0      	blx	r4
 800345c:	78a8      	ldrb	r0, [r5, #2]
 800345e:	1c40      	adds	r0, r0, #1
 8003460:	70a8      	strb	r0, [r5, #2]
 8003462:	e468      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8003464:	88b9      	ldrh	r1, [r7, #4]
 8003466:	6972      	ldr	r2, [r6, #20]
 8003468:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800346c:	2033      	movs	r0, #51	; 0x33
 800346e:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8003472:	fb11 f100 	smulbb	r1, r1, r0
 8003476:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800347a:	8431      	strh	r1, [r6, #32]
 800347c:	88b9      	ldrh	r1, [r7, #4]
 800347e:	6972      	ldr	r2, [r6, #20]
 8003480:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8003484:	eb01 44d2 	add.w	r4, r1, r2, lsr #19
 8003488:	4344      	muls	r4, r0
 800348a:	b2a4      	uxth	r4, r4
 800348c:	e785      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 800348e:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
 8003490:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003494:	bf08      	it	eq
 8003496:	210f      	moveq	r1, #15
 8003498:	d01b      	beq.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800349a:	7c30      	ldrb	r0, [r6, #16]
 800349c:	f7fd faab 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80034a0:	b968      	cbnz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a2:	78b8      	ldrb	r0, [r7, #2]
 80034a4:	b158      	cbz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a6:	78f9      	ldrb	r1, [r7, #3]
 80034a8:	7079      	strb	r1, [r7, #1]
 80034aa:	7470      	strb	r0, [r6, #17]
 80034ac:	2000      	movs	r0, #0
 80034ae:	70b8      	strb	r0, [r7, #2]
 80034b0:	6970      	ldr	r0, [r6, #20]
 80034b2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80034b4:	62f1      	str	r1, [r6, #44]	; 0x2c
 80034b6:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 80034ba:	6170      	str	r0, [r6, #20]
 80034bc:	e43b      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80034be:	8c70      	ldrh	r0, [r6, #34]	; 0x22
 80034c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80034c4:	d106      	bne.n	80034d4 <USBPD_PE_StateMachine_SRC+0xba8>
 80034c6:	2100      	movs	r1, #0
 80034c8:	8471      	strh	r1, [r6, #34]	; 0x22
 80034ca:	2105      	movs	r1, #5
 80034cc:	7928      	ldrb	r0, [r5, #4]
 80034ce:	1c40      	adds	r0, r0, #1
 80034d0:	7128      	strb	r0, [r5, #4]
 80034d2:	e42f      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7fd ff3f 	bl	8001358 <PE_CalculateMinTiming>
 80034da:	e425      	b.n	8002d28 <USBPD_PE_StateMachine_SRC+0x3fc>
 80034dc:	2000      	movs	r0, #0
 80034de:	2103      	movs	r1, #3
 80034e0:	2201      	movs	r2, #1
 80034e2:	9002      	str	r0, [sp, #8]
 80034e4:	9101      	str	r1, [sp, #4]
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 80034ec:	2206      	movs	r2, #6
 80034ee:	2100      	movs	r1, #0
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7fd ffe6 	bl	80014c2 <PE_Send_DataMessage>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d13b      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 80034fa:	215d      	movs	r1, #93	; 0x5d
 80034fc:	e438      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80034fe:	2000      	movs	r0, #0
 8003500:	9004      	str	r0, [sp, #16]
 8003502:	ab04      	add	r3, sp, #16
 8003504:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8003508:	f8dc 7014 	ldr.w	r7, [ip, #20]
 800350c:	aa05      	add	r2, sp, #20
 800350e:	210a      	movs	r1, #10
 8003510:	4640      	mov	r0, r8
 8003512:	47b8      	blx	r7
 8003514:	9804      	ldr	r0, [sp, #16]
 8003516:	2104      	movs	r1, #4
 8003518:	f7fd ff46 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 800351c:	b9f8      	cbnz	r0, 800355e <USBPD_PE_StateMachine_SRC+0xc32>
 800351e:	71e8      	strb	r0, [r5, #7]
 8003520:	2100      	movs	r1, #0
 8003522:	7229      	strb	r1, [r5, #8]
 8003524:	7c30      	ldrb	r0, [r6, #16]
 8003526:	f7fd fc36 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800352a:	b918      	cbnz	r0, 8003534 <USBPD_PE_StateMachine_SRC+0xc08>
 800352c:	7a28      	ldrb	r0, [r5, #8]
 800352e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003532:	7228      	strb	r0, [r5, #8]
 8003534:	a905      	add	r1, sp, #20
 8003536:	9a04      	ldr	r2, [sp, #16]
 8003538:	f206 2067 	addw	r0, r6, #615	; 0x267
 800353c:	f01b fd7c 	bl	801f038 <__aeabi_memcpy>
 8003540:	2000      	movs	r0, #0
 8003542:	2103      	movs	r1, #3
 8003544:	2208      	movs	r2, #8
 8003546:	9002      	str	r0, [sp, #8]
 8003548:	9101      	str	r1, [sp, #4]
 800354a:	9200      	str	r2, [sp, #0]
 800354c:	f206 2363 	addw	r3, r6, #611	; 0x263
 8003550:	220c      	movs	r2, #12
 8003552:	2100      	movs	r1, #0
 8003554:	4630      	mov	r0, r6
 8003556:	f7fe f8d3 	bl	8001700 <PE_Send_ExtendedMessage>
 800355a:	214c      	movs	r1, #76	; 0x4c
 800355c:	e7ce      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 800355e:	2001      	movs	r0, #1
 8003560:	e57c      	b.n	800305c <USBPD_PE_StateMachine_SRC+0x730>
 8003562:	2101      	movs	r1, #1
 8003564:	9100      	str	r1, [sp, #0]
 8003566:	2339      	movs	r3, #57	; 0x39
 8003568:	782a      	ldrb	r2, [r5, #0]
 800356a:	78f9      	ldrb	r1, [r7, #3]
 800356c:	f000 f8ea 	bl	8003744 <.text_21+0x4>
 8003570:	2800      	cmp	r0, #0
 8003572:	f47f ab35 	bne.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8003576:	7868      	ldrb	r0, [r5, #1]
 8003578:	f000 f88d 	bl	8003696 <.text_6>
 800357c:	241b      	movs	r4, #27
 800357e:	2144      	movs	r1, #68	; 0x44
 8003580:	e7bc      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 8003582:	8bf0      	ldrh	r0, [r6, #30]
 8003584:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003588:	bf04      	itt	eq
 800358a:	f89d 000c 	ldrbeq.w	r0, [sp, #12]
 800358e:	2814      	cmpeq	r0, #20
 8003590:	f43f ae15 	beq.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003594:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003598:	2814      	cmp	r0, #20
 800359a:	f43f ab21 	beq.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800359e:	88b9      	ldrh	r1, [r7, #4]
 80035a0:	0bc8      	lsrs	r0, r1, #15
 80035a2:	d003      	beq.n	80035ac <USBPD_PE_StateMachine_SRC+0xc80>
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7fd ffc9 	bl	800153c <PE_Check_ExtendedMessage>
 80035aa:	e73e      	b.n	800342a <USBPD_PE_StateMachine_SRC+0xafe>
 80035ac:	f001 011f 	and.w	r1, r1, #31
 80035b0:	2910      	cmp	r1, #16
 80035b2:	f47f ae04 	bne.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 80035b6:	f000 f872 	bl	800369e <.text_7>
 80035ba:	2400      	movs	r4, #0
 80035bc:	f000 f8bd 	bl	800373a <.text_20+0x6>
 80035c0:	2000      	movs	r0, #0
 80035c2:	83f0      	strh	r0, [r6, #30]
 80035c4:	2103      	movs	r1, #3
 80035c6:	7471      	strb	r1, [r6, #17]
 80035c8:	2159      	movs	r1, #89	; 0x59
 80035ca:	e797      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 80035cc:	4630      	mov	r0, r6
 80035ce:	f7fe f8be 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80035d2:	e003      	b.n	80035dc <USBPD_PE_StateMachine_SRC+0xcb0>
 80035d4:	a903      	add	r1, sp, #12
 80035d6:	4630      	mov	r0, r6
 80035d8:	f7fd fbee 	bl	8000db8 <PE_SubStateMachine_Generic>
 80035dc:	f7ff baff 	b.w	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 80035e0:	a903      	add	r1, sp, #12
 80035e2:	4630      	mov	r0, r6
 80035e4:	f000 f9fd 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80035e8:	4604      	mov	r4, r0
 80035ea:	f000 f878 	bl	80036de <.text_12>
 80035ee:	bf0e      	itee	eq
 80035f0:	2101      	moveq	r1, #1
 80035f2:	6830      	ldrne	r0, [r6, #0]
 80035f4:	6801      	ldrne	r1, [r0, #0]
 80035f6:	4640      	mov	r0, r8
 80035f8:	f001 fd2a 	bl	8005050 <USBPD_PRL_SOPCapability>
 80035fc:	e6cd      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80035fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003602:	2911      	cmp	r1, #17
 8003604:	bf02      	ittt	eq
 8003606:	88b9      	ldrheq	r1, [r7, #4]
 8003608:	4008      	andeq	r0, r1
 800360a:	2813      	cmpeq	r0, #19
 800360c:	d108      	bne.n	8003620 <USBPD_PE_StateMachine_SRC+0xcf4>
 800360e:	f000 f846 	bl	800369e <.text_7>
 8003612:	f000 f892 	bl	800373a <.text_20+0x6>
 8003616:	2000      	movs	r0, #0
 8003618:	9000      	str	r0, [sp, #0]
 800361a:	2320      	movs	r3, #32
 800361c:	f000 f890 	bl	8003740 <.text_21>
 8003620:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
 8003622:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003626:	d1a4      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 8003628:	2192      	movs	r1, #146	; 0x92
 800362a:	e752      	b.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800362c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003630:	4630      	mov	r0, r6
 8003632:	f001 faca 	bl	8004bca <PE_StateMachine_UVDM>
 8003636:	e6b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003638:	6970      	ldr	r0, [r6, #20]
 800363a:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800363e:	b1b0      	cbz	r0, 800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8003640:	6970      	ldr	r0, [r6, #20]
 8003642:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8003646:	b138      	cbz	r0, 8003658 <USBPD_PE_StateMachine_SRC+0xd2c>
 8003648:	7c30      	ldrb	r0, [r6, #16]
 800364a:	215b      	movs	r1, #91	; 0x5b
 800364c:	f7fc ff83 	bl	8000556 <USBPD_PE_Notification>
 8003650:	6970      	ldr	r0, [r6, #20]
 8003652:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8003656:	6170      	str	r0, [r6, #20]
 8003658:	2003      	movs	r0, #3
 800365a:	7cb1      	ldrb	r1, [r6, #18]
 800365c:	7470      	strb	r0, [r6, #17]
 800365e:	2903      	cmp	r1, #3
 8003660:	d004      	beq.n	800366c <USBPD_PE_StateMachine_SRC+0xd40>
 8003662:	f000 f82e 	bl	80036c2 <.text_10>
 8003666:	2203      	movs	r2, #3
 8003668:	2004      	movs	r0, #4
 800366a:	47a0      	blx	r4
 800366c:	2401      	movs	r4, #1
 800366e:	6970      	ldr	r0, [r6, #20]
 8003670:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8003674:	2c00      	cmp	r4, #0
 8003676:	6170      	str	r0, [r6, #20]
 8003678:	f43f a9b8 	beq.w	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 800367c:	f7ff bad6 	b.w	8002c2c <USBPD_PE_StateMachine_SRC+0x300>

08003680 <.text_3>:
 8003680:	20000000 	.word	0x20000000

08003684 <.text_4>:
 8003684:	68b3      	ldr	r3, [r6, #8]
 8003686:	7c30      	ldrb	r0, [r6, #16]
 8003688:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800368a:	4770      	bx	lr

0800368c <.text_5>:
 800368c:	68b3      	ldr	r3, [r6, #8]
 800368e:	7c30      	ldrb	r0, [r6, #16]
 8003690:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8003694:	4770      	bx	lr

08003696 <.text_6>:
 8003696:	7730      	strb	r0, [r6, #28]
 8003698:	f8a6 a01e 	strh.w	sl, [r6, #30]
 800369c:	4770      	bx	lr

0800369e <.text_7>:
 800369e:	2014      	movs	r0, #20
 80036a0:	f88d 000c 	strb.w	r0, [sp, #12]
 80036a4:	4770      	bx	lr

080036a6 <.text_8>:
 80036a6:	2003      	movs	r0, #3
 80036a8:	7470      	strb	r0, [r6, #17]
 80036aa:	2400      	movs	r4, #0
 80036ac:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80036b0:	2814      	cmp	r0, #20
 80036b2:	4770      	bx	lr

080036b4 <.text_9>:
 80036b4:	9100      	str	r1, [sp, #0]
 80036b6:	2300      	movs	r3, #0
 80036b8:	7c31      	ldrb	r1, [r6, #16]
 80036ba:	f8d9 c000 	ldr.w	ip, [r9]
 80036be:	2004      	movs	r0, #4

080036c0 <__iar_annotation$$tailcall>:
 80036c0:	4760      	bx	ip

080036c2 <.text_10>:
 80036c2:	74b0      	strb	r0, [r6, #18]
 80036c4:	2100      	movs	r1, #0
 80036c6:	9100      	str	r1, [sp, #0]
 80036c8:	2300      	movs	r3, #0
 80036ca:	7c31      	ldrb	r1, [r6, #16]
 80036cc:	f8d9 4000 	ldr.w	r4, [r9]
 80036d0:	4770      	bx	lr

080036d2 <.text_11>:
 80036d2:	6870      	ldr	r0, [r6, #4]
 80036d4:	6801      	ldr	r1, [r0, #0]
 80036d6:	f041 0110 	orr.w	r1, r1, #16
 80036da:	6001      	str	r1, [r0, #0]
 80036dc:	4770      	bx	lr

080036de <.text_12>:
 80036de:	6870      	ldr	r0, [r6, #4]
 80036e0:	6801      	ldr	r1, [r0, #0]
 80036e2:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80036e6:	2800      	cmp	r0, #0
 80036e8:	4770      	bx	lr

080036ea <.text_13>:
 80036ea:	6870      	ldr	r0, [r6, #4]
 80036ec:	6801      	ldr	r1, [r0, #0]
 80036ee:	f021 0110 	bic.w	r1, r1, #16
 80036f2:	6001      	str	r1, [r0, #0]
 80036f4:	4770      	bx	lr

080036f6 <.text_14>:
 80036f6:	68b3      	ldr	r3, [r6, #8]
 80036f8:	7c30      	ldrb	r0, [r6, #16]
 80036fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80036fc:	2204      	movs	r2, #4
 80036fe:	2101      	movs	r1, #1

08003700 <__iar_annotation$$tailcall>:
 8003700:	4720      	bx	r4

08003702 <.text_15>:
 8003702:	68b3      	ldr	r3, [r6, #8]
 8003704:	7c30      	ldrb	r0, [r6, #16]
 8003706:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 800370a:	2101      	movs	r1, #1

0800370c <__iar_annotation$$tailcall>:
 800370c:	4760      	bx	ip

0800370e <.text_16>:
 800370e:	68b3      	ldr	r3, [r6, #8]
 8003710:	7c30      	ldrb	r0, [r6, #16]
 8003712:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8003716:	2207      	movs	r2, #7
 8003718:	2101      	movs	r1, #1

0800371a <__iar_annotation$$tailcall>:
 800371a:	4760      	bx	ip

0800371c <.text_17>:
 800371c:	7c30      	ldrb	r0, [r6, #16]
 800371e:	f7fc bf1a 	b.w	8000556 <USBPD_PE_Notification>

08003722 <.text_18>:
 8003722:	2104      	movs	r1, #4
 8003724:	4630      	mov	r0, r6
 8003726:	f7fd bdfd 	b.w	8001324 <PE_SetPowerNegotiation>

0800372a <.text_19>:
 800372a:	2206      	movs	r2, #6
 800372c:	2101      	movs	r1, #1
 800372e:	4630      	mov	r0, r6
 8003730:	f7fd bdf1 	b.w	8001316 <PE_CallHardResetCallback>

08003734 <.text_20>:
 8003734:	2114      	movs	r1, #20
 8003736:	f88d 100c 	strb.w	r1, [sp, #12]
 800373a:	4630      	mov	r0, r6
 800373c:	f7fd b936 	b.w	80009ac <PE_Clear_RxEvent>

08003740 <.text_21>:
 8003740:	2203      	movs	r2, #3
 8003742:	2100      	movs	r1, #0
 8003744:	4630      	mov	r0, r6
 8003746:	f7fd be8f 	b.w	8001468 <PE_Send_CtrlMessage>

0800374a <PE_Send_SRCCapabilities>:
 800374a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800374c:	4604      	mov	r4, r0
 800374e:	2000      	movs	r0, #0
 8003750:	9002      	str	r0, [sp, #8]
 8003752:	460d      	mov	r5, r1
 8003754:	68a6      	ldr	r6, [r4, #8]
 8003756:	7c20      	ldrb	r0, [r4, #16]
 8003758:	6977      	ldr	r7, [r6, #20]
 800375a:	ab02      	add	r3, sp, #8
 800375c:	f204 2265 	addw	r2, r4, #613	; 0x265
 8003760:	2100      	movs	r1, #0
 8003762:	47b8      	blx	r7
 8003764:	9802      	ldr	r0, [sp, #8]
 8003766:	1c80      	adds	r0, r0, #2
 8003768:	9002      	str	r0, [sp, #8]
 800376a:	9802      	ldr	r0, [sp, #8]
 800376c:	2104      	movs	r1, #4
 800376e:	f7fd fe1b 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8003772:	b998      	cbnz	r0, 800379c <PE_Send_SRCCapabilities+0x52>
 8003774:	6860      	ldr	r0, [r4, #4]
 8003776:	6801      	ldr	r1, [r0, #0]
 8003778:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800377c:	2800      	cmp	r0, #0
 800377e:	d00d      	beq.n	800379c <PE_Send_SRCCapabilities+0x52>
 8003780:	9802      	ldr	r0, [sp, #8]
 8003782:	9501      	str	r5, [sp, #4]
 8003784:	b280      	uxth	r0, r0
 8003786:	9000      	str	r0, [sp, #0]
 8003788:	f204 2363 	addw	r3, r4, #611	; 0x263
 800378c:	7c20      	ldrb	r0, [r4, #16]
 800378e:	2201      	movs	r2, #1
 8003790:	2100      	movs	r1, #0
 8003792:	f001 fc5f 	bl	8005054 <USBPD_PRL_SendMessage>
 8003796:	2803      	cmp	r0, #3
 8003798:	d0e7      	beq.n	800376a <PE_Send_SRCCapabilities+0x20>
 800379a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800379c:	2010      	movs	r0, #16
 800379e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080037a0 <PE_StateMachine_VDMCable>:
 80037a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a4:	b08c      	sub	sp, #48	; 0x30
 80037a6:	2602      	movs	r6, #2
 80037a8:	4605      	mov	r5, r0
 80037aa:	4688      	mov	r8, r1
 80037ac:	7c68      	ldrb	r0, [r5, #17]
 80037ae:	2805      	cmp	r0, #5
 80037b0:	f505 7414 	add.w	r4, r5, #592	; 0x250
 80037b4:	f248 072d 	movw	r7, #32813	; 0x802d
 80037b8:	d002      	beq.n	80037c0 <PE_StateMachine_VDMCable+0x20>
 80037ba:	289a      	cmp	r0, #154	; 0x9a
 80037bc:	d061      	beq.n	8003882 <PE_StateMachine_VDMCable+0xe2>
 80037be:	e0f1      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 80037c0:	686a      	ldr	r2, [r5, #4]
 80037c2:	7811      	ldrb	r1, [r2, #0]
 80037c4:	f001 0103 	and.w	r1, r1, #3
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 fa36 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	0952      	lsrs	r2, r2, #5
 80037d2:	0152      	lsls	r2, r2, #5
 80037d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	6022      	str	r2, [r4, #0]
 80037de:	4623      	mov	r3, r4
 80037e0:	6868      	ldr	r0, [r5, #4]
 80037e2:	6801      	ldr	r1, [r0, #0]
 80037e4:	f649 003f 	movw	r0, #38975	; 0x983f
 80037e8:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80037ec:	4002      	ands	r2, r0
 80037ee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80037f2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80037f6:	6022      	str	r2, [r4, #0]
 80037f8:	6868      	ldr	r0, [r5, #4]
 80037fa:	6801      	ldr	r1, [r0, #0]
 80037fc:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8003800:	2800      	cmp	r0, #0
 8003802:	bf1d      	ittte	ne
 8003804:	6968      	ldrne	r0, [r5, #20]
 8003806:	0880      	lsrne	r0, r0, #2
 8003808:	f000 0001 	andne.w	r0, r0, #1
 800380c:	2002      	moveq	r0, #2
 800380e:	9002      	str	r0, [sp, #8]
 8003810:	2101      	movs	r1, #1
 8003812:	209a      	movs	r0, #154	; 0x9a
 8003814:	9001      	str	r0, [sp, #4]
 8003816:	9100      	str	r1, [sp, #0]
 8003818:	220f      	movs	r2, #15
 800381a:	4628      	mov	r0, r5
 800381c:	f7fd fe51 	bl	80014c2 <PE_Send_DataMessage>
 8003820:	b950      	cbnz	r0, 8003838 <PE_StateMachine_VDMCable+0x98>
 8003822:	6968      	ldr	r0, [r5, #20]
 8003824:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003828:	6168      	str	r0, [r5, #20]
 800382a:	2151      	movs	r1, #81	; 0x51
 800382c:	7729      	strb	r1, [r5, #28]
 800382e:	f248 001e 	movw	r0, #32798	; 0x801e
 8003832:	8468      	strh	r0, [r5, #34]	; 0x22
 8003834:	261e      	movs	r6, #30
 8003836:	e0b5      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003838:	2809      	cmp	r0, #9
 800383a:	d0fc      	beq.n	8003836 <PE_StateMachine_VDMCable+0x96>
 800383c:	7ca0      	ldrb	r0, [r4, #18]
 800383e:	2815      	cmp	r0, #21
 8003840:	bf38      	it	cc
 8003842:	846f      	strhcc	r7, [r5, #34]	; 0x22
 8003844:	d307      	bcc.n	8003856 <PE_StateMachine_VDMCable+0xb6>
 8003846:	68e8      	ldr	r0, [r5, #12]
 8003848:	6944      	ldr	r4, [r0, #20]
 800384a:	b124      	cbz	r4, 8003856 <PE_StateMachine_VDMCable+0xb6>
 800384c:	7c28      	ldrb	r0, [r5, #16]
 800384e:	2300      	movs	r3, #0
 8003850:	2205      	movs	r2, #5
 8003852:	2101      	movs	r1, #1
 8003854:	47a0      	blx	r4
 8003856:	f000 f8ae 	bl	80039b6 <.text_4>
 800385a:	f000 8080 	beq.w	800395e <PE_StateMachine_VDMCable+0x1be>
 800385e:	8be8      	ldrh	r0, [r5, #30]
 8003860:	0441      	lsls	r1, r0, #17
 8003862:	d00b      	beq.n	800387c <PE_StateMachine_VDMCable+0xdc>
 8003864:	2008      	movs	r0, #8
 8003866:	7468      	strb	r0, [r5, #17]
 8003868:	8be9      	ldrh	r1, [r5, #30]
 800386a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800386e:	292d      	cmp	r1, #45	; 0x2d
 8003870:	bf2e      	itee	cs
 8003872:	262d      	movcs	r6, #45	; 0x2d
 8003874:	8bee      	ldrhcc	r6, [r5, #30]
 8003876:	f3c6 060e 	ubfxcc	r6, r6, #0, #15
 800387a:	e093      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800387c:	2007      	movs	r0, #7
 800387e:	7468      	strb	r0, [r5, #17]
 8003880:	e090      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003882:	2001      	movs	r0, #1
 8003884:	f7fd f8c6 	bl	8000a14 <PE_Convert_SOPRxEvent>
 8003888:	f898 2000 	ldrb.w	r2, [r8]
 800388c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800388e:	4282      	cmp	r2, r0
 8003890:	d142      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003892:	0bc8      	lsrs	r0, r1, #15
 8003894:	d140      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003896:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800389a:	2800      	cmp	r0, #0
 800389c:	d03c      	beq.n	8003918 <PE_StateMachine_VDMCable+0x178>
 800389e:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80038a2:	f000 001f 	and.w	r0, r0, #31
 80038a6:	280f      	cmp	r0, #15
 80038a8:	d136      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 80038aa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80038ac:	7887      	ldrb	r7, [r0, #2]
 80038ae:	f007 011f 	and.w	r1, r7, #31
 80038b2:	2901      	cmp	r1, #1
 80038b4:	d12b      	bne.n	800390e <PE_StateMachine_VDMCable+0x16e>
 80038b6:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038ba:	b340      	cbz	r0, 800390e <PE_StateMachine_VDMCable+0x16e>
 80038bc:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80038be:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 f9b9 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80038c8:	68e9      	ldr	r1, [r5, #12]
 80038ca:	6948      	ldr	r0, [r1, #20]
 80038cc:	b1e8      	cbz	r0, 800390a <PE_StateMachine_VDMCable+0x16a>
 80038ce:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038d2:	2801      	cmp	r0, #1
 80038d4:	d119      	bne.n	800390a <PE_StateMachine_VDMCable+0x16a>
 80038d6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80038d8:	1d81      	adds	r1, r0, #6
 80038da:	7c28      	ldrb	r0, [r5, #16]
 80038dc:	aa03      	add	r2, sp, #12
 80038de:	f001 fa25 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80038e2:	b970      	cbnz	r0, 8003902 <PE_StateMachine_VDMCable+0x162>
 80038e4:	68ee      	ldr	r6, [r5, #12]
 80038e6:	7c28      	ldrb	r0, [r5, #16]
 80038e8:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80038ec:	6977      	ldr	r7, [r6, #20]
 80038ee:	ab03      	add	r3, sp, #12
 80038f0:	2101      	movs	r1, #1
 80038f2:	47b8      	blx	r7
 80038f4:	7c28      	ldrb	r0, [r5, #16]
 80038f6:	2152      	movs	r1, #82	; 0x52
 80038f8:	f7fc fe2d 	bl	8000556 <USBPD_PE_Notification>
 80038fc:	2014      	movs	r0, #20
 80038fe:	74a0      	strb	r0, [r4, #18]
 8003900:	e003      	b.n	800390a <PE_StateMachine_VDMCable+0x16a>
 8003902:	7c28      	ldrb	r0, [r5, #16]
 8003904:	211b      	movs	r1, #27
 8003906:	f7fc fe26 	bl	8000556 <USBPD_PE_Notification>
 800390a:	f000 f85a 	bl	80039c2 <.text_5>
 800390e:	f898 0000 	ldrb.w	r0, [r8]
 8003912:	2814      	cmp	r0, #20
 8003914:	d10e      	bne.n	8003934 <PE_StateMachine_VDMCable+0x194>
 8003916:	e045      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003918:	f001 011f 	and.w	r1, r1, #31
 800391c:	2910      	cmp	r1, #16
 800391e:	d110      	bne.n	8003942 <PE_StateMachine_VDMCable+0x1a2>
 8003920:	f000 f84f 	bl	80039c2 <.text_5>
 8003924:	2159      	movs	r1, #89	; 0x59
 8003926:	7c28      	ldrb	r0, [r5, #16]
 8003928:	f7fc fe15 	bl	8000556 <USBPD_PE_Notification>
 800392c:	f898 0000 	ldrb.w	r0, [r8]
 8003930:	2814      	cmp	r0, #20
 8003932:	d037      	beq.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003934:	2114      	movs	r1, #20
 8003936:	f888 1000 	strb.w	r1, [r8]
 800393a:	4628      	mov	r0, r5
 800393c:	f7fd f836 	bl	80009ac <PE_Clear_RxEvent>
 8003940:	e030      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003942:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8003944:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003948:	d12c      	bne.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800394a:	2100      	movs	r1, #0
 800394c:	8469      	strh	r1, [r5, #34]	; 0x22
 800394e:	f000 f832 	bl	80039b6 <.text_4>
 8003952:	d108      	bne.n	8003966 <PE_StateMachine_VDMCable+0x1c6>
 8003954:	68e8      	ldr	r0, [r5, #12]
 8003956:	6944      	ldr	r4, [r0, #20]
 8003958:	b10c      	cbz	r4, 800395e <PE_StateMachine_VDMCable+0x1be>
 800395a:	f000 f827 	bl	80039ac <.text_3>
 800395e:	2003      	movs	r0, #3
 8003960:	7468      	strb	r0, [r5, #17]
 8003962:	2600      	movs	r6, #0
 8003964:	e01e      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003966:	6868      	ldr	r0, [r5, #4]
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f3c1 6081 	ubfx	r0, r1, #26, #2
 800396e:	2802      	cmp	r0, #2
 8003970:	d10e      	bne.n	8003990 <PE_StateMachine_VDMCable+0x1f0>
 8003972:	6869      	ldr	r1, [r5, #4]
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	2001      	movs	r0, #1
 8003978:	f360 629b 	bfi	r2, r0, #26, #2
 800397c:	600a      	str	r2, [r1, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	7c28      	ldrb	r0, [r5, #16]
 8003982:	f001 fb3f 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003986:	846f      	strh	r7, [r5, #34]	; 0x22
 8003988:	2008      	movs	r0, #8
 800398a:	262d      	movs	r6, #45	; 0x2d
 800398c:	7468      	strb	r0, [r5, #17]
 800398e:	e007      	b.n	80039a0 <PE_StateMachine_VDMCable+0x200>
 8003990:	68e8      	ldr	r0, [r5, #12]
 8003992:	6944      	ldr	r4, [r0, #20]
 8003994:	b10c      	cbz	r4, 800399a <PE_StateMachine_VDMCable+0x1fa>
 8003996:	f000 f809 	bl	80039ac <.text_3>
 800399a:	2007      	movs	r0, #7
 800399c:	7468      	strb	r0, [r5, #17]
 800399e:	2600      	movs	r6, #0
 80039a0:	2000      	movs	r0, #0
 80039a2:	7728      	strb	r0, [r5, #28]
 80039a4:	4630      	mov	r0, r6
 80039a6:	b00c      	add	sp, #48	; 0x30
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039ac <.text_3>:
 80039ac:	7c28      	ldrb	r0, [r5, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	2204      	movs	r2, #4
 80039b2:	2101      	movs	r1, #1

080039b4 <__iar_annotation$$tailcall>:
 80039b4:	4720      	bx	r4

080039b6 <.text_4>:
 80039b6:	6868      	ldr	r0, [r5, #4]
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039be:	2803      	cmp	r0, #3
 80039c0:	4770      	bx	lr

080039c2 <.text_5>:
 80039c2:	2000      	movs	r0, #0
 80039c4:	8468      	strh	r0, [r5, #34]	; 0x22
 80039c6:	6868      	ldr	r0, [r5, #4]
 80039c8:	6801      	ldr	r1, [r0, #0]
 80039ca:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039ce:	2803      	cmp	r0, #3
 80039d0:	d102      	bne.n	80039d8 <.text_5+0x16>
 80039d2:	7468      	strb	r0, [r5, #17]
 80039d4:	2600      	movs	r6, #0
 80039d6:	4770      	bx	lr
 80039d8:	2007      	movs	r0, #7
 80039da:	2600      	movs	r6, #0
 80039dc:	7468      	strb	r0, [r5, #17]
 80039de:	772e      	strb	r6, [r5, #28]
 80039e0:	4770      	bx	lr

080039e2 <PE_SubStateMachine_VconnSwap>:
 80039e2:	b538      	push	{r3, r4, r5, lr}
 80039e4:	4604      	mov	r4, r0
 80039e6:	2502      	movs	r5, #2
 80039e8:	7c60      	ldrb	r0, [r4, #17]
 80039ea:	289d      	cmp	r0, #157	; 0x9d
 80039ec:	d010      	beq.n	8003a10 <PE_SubStateMachine_VconnSwap+0x2e>
 80039ee:	d30e      	bcc.n	8003a0e <PE_SubStateMachine_VconnSwap+0x2c>
 80039f0:	289f      	cmp	r0, #159	; 0x9f
 80039f2:	d054      	beq.n	8003a9e <PE_SubStateMachine_VconnSwap+0xbc>
 80039f4:	d33b      	bcc.n	8003a6e <PE_SubStateMachine_VconnSwap+0x8c>
 80039f6:	28a1      	cmp	r0, #161	; 0xa1
 80039f8:	f000 807e 	beq.w	8003af8 <PE_SubStateMachine_VconnSwap+0x116>
 80039fc:	d370      	bcc.n	8003ae0 <PE_SubStateMachine_VconnSwap+0xfe>
 80039fe:	28a3      	cmp	r0, #163	; 0xa3
 8003a00:	f000 809a 	beq.w	8003b38 <PE_SubStateMachine_VconnSwap+0x156>
 8003a04:	f0c0 8086 	bcc.w	8003b14 <PE_SubStateMachine_VconnSwap+0x132>
 8003a08:	28a4      	cmp	r0, #164	; 0xa4
 8003a0a:	f000 80ee 	beq.w	8003bea <PE_SubStateMachine_VconnSwap+0x208>
 8003a0e:	e0f8      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a10:	6861      	ldr	r1, [r4, #4]
 8003a12:	6808      	ldr	r0, [r1, #0]
 8003a14:	f400 50b8 	and.w	r0, r0, #5888	; 0x1700
 8003a18:	f5b0 5f98 	cmp.w	r0, #4864	; 0x1300
 8003a1c:	d11f      	bne.n	8003a5e <PE_SubStateMachine_VconnSwap+0x7c>
 8003a1e:	68a1      	ldr	r1, [r4, #8]
 8003a20:	7c20      	ldrb	r0, [r4, #16]
 8003a22:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003a24:	4790      	blx	r2
 8003a26:	280a      	cmp	r0, #10
 8003a28:	d002      	beq.n	8003a30 <PE_SubStateMachine_VconnSwap+0x4e>
 8003a2a:	280d      	cmp	r0, #13
 8003a2c:	d007      	beq.n	8003a3e <PE_SubStateMachine_VconnSwap+0x5c>
 8003a2e:	e00d      	b.n	8003a4c <PE_SubStateMachine_VconnSwap+0x6a>
 8003a30:	6961      	ldr	r1, [r4, #20]
 8003a32:	209e      	movs	r0, #158	; 0x9e
 8003a34:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003a38:	7460      	strb	r0, [r4, #17]
 8003a3a:	6161      	str	r1, [r4, #20]
 8003a3c:	e0e1      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	9000      	str	r0, [sp, #0]
 8003a42:	2303      	movs	r3, #3
 8003a44:	220c      	movs	r2, #12
 8003a46:	f000 f8f4 	bl	8003c32 <.text_10>
 8003a4a:	e0da      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	9000      	str	r0, [sp, #0]
 8003a50:	2303      	movs	r3, #3
 8003a52:	2204      	movs	r2, #4
 8003a54:	f000 f8ed 	bl	8003c32 <.text_10>
 8003a58:	2003      	movs	r0, #3
 8003a5a:	7460      	strb	r0, [r4, #17]
 8003a5c:	e005      	b.n	8003a6a <PE_SubStateMachine_VconnSwap+0x88>
 8003a5e:	6960      	ldr	r0, [r4, #20]
 8003a60:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003a64:	2103      	movs	r1, #3
 8003a66:	6160      	str	r0, [r4, #20]
 8003a68:	7461      	strb	r1, [r4, #17]
 8003a6a:	2500      	movs	r5, #0
 8003a6c:	e0c9      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	239e      	movs	r3, #158	; 0x9e
 8003a74:	2203      	movs	r2, #3
 8003a76:	f000 f8dc 	bl	8003c32 <.text_10>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d1f6      	bne.n	8003a6c <PE_SubStateMachine_VconnSwap+0x8a>
 8003a7e:	6860      	ldr	r0, [r4, #4]
 8003a80:	6801      	ldr	r1, [r0, #0]
 8003a82:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003a86:	b130      	cbz	r0, 8003a96 <PE_SubStateMachine_VconnSwap+0xb4>
 8003a88:	209f      	movs	r0, #159	; 0x9f
 8003a8a:	7460      	strb	r0, [r4, #17]
 8003a8c:	f248 0196 	movw	r1, #32918	; 0x8096
 8003a90:	83e1      	strh	r1, [r4, #30]
 8003a92:	2596      	movs	r5, #150	; 0x96
 8003a94:	e001      	b.n	8003a9a <PE_SubStateMachine_VconnSwap+0xb8>
 8003a96:	20a0      	movs	r0, #160	; 0xa0
 8003a98:	7460      	strb	r0, [r4, #17]
 8003a9a:	213f      	movs	r1, #63	; 0x3f
 8003a9c:	e0a1      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003a9e:	8be0      	ldrh	r0, [r4, #30]
 8003aa0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003aa4:	f000 8095 	beq.w	8003bd2 <PE_SubStateMachine_VconnSwap+0x1f0>
 8003aa8:	780a      	ldrb	r2, [r1, #0]
 8003aaa:	2a11      	cmp	r2, #17
 8003aac:	bf01      	itttt	eq
 8003aae:	8ea2      	ldrheq	r2, [r4, #52]	; 0x34
 8003ab0:	f24f 001f 	movweq	r0, #61471	; 0xf01f
 8003ab4:	4002      	andeq	r2, r0
 8003ab6:	2a06      	cmpeq	r2, #6
 8003ab8:	d111      	bne.n	8003ade <PE_SubStateMachine_VconnSwap+0xfc>
 8003aba:	f000 f8ab 	bl	8003c14 <.text_8>
 8003abe:	68a0      	ldr	r0, [r4, #8]
 8003ac0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ac2:	b112      	cbz	r2, 8003aca <PE_SubStateMachine_VconnSwap+0xe8>
 8003ac4:	7c20      	ldrb	r0, [r4, #16]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4790      	blx	r2
 8003aca:	f000 f89c 	bl	8003c06 <.text_7>
 8003ace:	2142      	movs	r1, #66	; 0x42
 8003ad0:	7c20      	ldrb	r0, [r4, #16]
 8003ad2:	f7fc fd40 	bl	8000556 <USBPD_PE_Notification>
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	8465      	strh	r5, [r4, #34]	; 0x22
 8003ada:	f884 5262 	strb.w	r5, [r4, #610]	; 0x262
 8003ade:	e090      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003ae0:	68a0      	ldr	r0, [r4, #8]
 8003ae2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ae4:	b112      	cbz	r2, 8003aec <PE_SubStateMachine_VconnSwap+0x10a>
 8003ae6:	7c20      	ldrb	r0, [r4, #16]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4790      	blx	r2
 8003aec:	20a1      	movs	r0, #161	; 0xa1
 8003aee:	2100      	movs	r1, #0
 8003af0:	7460      	strb	r0, [r4, #17]
 8003af2:	f884 1262 	strb.w	r1, [r4, #610]	; 0x262
 8003af6:	e084      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003af8:	2000      	movs	r0, #0
 8003afa:	9000      	str	r0, [sp, #0]
 8003afc:	2303      	movs	r3, #3
 8003afe:	2206      	movs	r2, #6
 8003b00:	f000 f897 	bl	8003c32 <.text_10>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d17c      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b08:	6960      	ldr	r0, [r4, #20]
 8003b0a:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003b0e:	6160      	str	r0, [r4, #20]
 8003b10:	2142      	movs	r1, #66	; 0x42
 8003b12:	e066      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b14:	2000      	movs	r0, #0
 8003b16:	9000      	str	r0, [sp, #0]
 8003b18:	23a3      	movs	r3, #163	; 0xa3
 8003b1a:	220b      	movs	r2, #11
 8003b1c:	f000 f889 	bl	8003c32 <.text_10>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d16e      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b24:	6960      	ldr	r0, [r4, #20]
 8003b26:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8003b2a:	6160      	str	r0, [r4, #20]
 8003b2c:	f248 011b 	movw	r1, #32795	; 0x801b
 8003b30:	83e1      	strh	r1, [r4, #30]
 8003b32:	251b      	movs	r5, #27
 8003b34:	213e      	movs	r1, #62	; 0x3e
 8003b36:	e054      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b38:	7808      	ldrb	r0, [r1, #0]
 8003b3a:	2811      	cmp	r0, #17
 8003b3c:	bf04      	itt	eq
 8003b3e:	8ea0      	ldrheq	r0, [r4, #52]	; 0x34
 8003b40:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8003b44:	d141      	bne.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b46:	f000 001f 	and.w	r0, r0, #31
 8003b4a:	2803      	cmp	r0, #3
 8003b4c:	d006      	beq.n	8003b5c <PE_SubStateMachine_VconnSwap+0x17a>
 8003b4e:	2804      	cmp	r0, #4
 8003b50:	d01c      	beq.n	8003b8c <PE_SubStateMachine_VconnSwap+0x1aa>
 8003b52:	280c      	cmp	r0, #12
 8003b54:	d013      	beq.n	8003b7e <PE_SubStateMachine_VconnSwap+0x19c>
 8003b56:	2810      	cmp	r0, #16
 8003b58:	d01f      	beq.n	8003b9a <PE_SubStateMachine_VconnSwap+0x1b8>
 8003b5a:	e036      	b.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b5c:	6860      	ldr	r0, [r4, #4]
 8003b5e:	6802      	ldr	r2, [r0, #0]
 8003b60:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003b64:	2800      	cmp	r0, #0
 8003b66:	bf19      	ittee	ne
 8003b68:	209f      	movne	r0, #159	; 0x9f
 8003b6a:	7460      	strbne	r0, [r4, #17]
 8003b6c:	22a0      	moveq	r2, #160	; 0xa0
 8003b6e:	7462      	strbeq	r2, [r4, #17]
 8003b70:	7808      	ldrb	r0, [r1, #0]
 8003b72:	2814      	cmp	r0, #20
 8003b74:	d001      	beq.n	8003b7a <PE_SubStateMachine_VconnSwap+0x198>
 8003b76:	f000 f84d 	bl	8003c14 <.text_8>
 8003b7a:	213f      	movs	r1, #63	; 0x3f
 8003b7c:	e022      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b7e:	f000 f84e 	bl	8003c1e <.text_9>
 8003b82:	d001      	beq.n	8003b88 <PE_SubStateMachine_VconnSwap+0x1a6>
 8003b84:	f000 f846 	bl	8003c14 <.text_8>
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	e01b      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b8c:	f000 f847 	bl	8003c1e <.text_9>
 8003b90:	d001      	beq.n	8003b96 <PE_SubStateMachine_VconnSwap+0x1b4>
 8003b92:	f000 f83f 	bl	8003c14 <.text_8>
 8003b96:	2141      	movs	r1, #65	; 0x41
 8003b98:	e014      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b9a:	6860      	ldr	r0, [r4, #4]
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003ba2:	b910      	cbnz	r0, 8003baa <PE_SubStateMachine_VconnSwap+0x1c8>
 8003ba4:	20a4      	movs	r0, #164	; 0xa4
 8003ba6:	7460      	strb	r0, [r4, #17]
 8003ba8:	e006      	b.n	8003bb8 <PE_SubStateMachine_VconnSwap+0x1d6>
 8003baa:	6960      	ldr	r0, [r4, #20]
 8003bac:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	6160      	str	r0, [r4, #20]
 8003bb4:	7462      	strb	r2, [r4, #17]
 8003bb6:	2500      	movs	r5, #0
 8003bb8:	7808      	ldrb	r0, [r1, #0]
 8003bba:	2814      	cmp	r0, #20
 8003bbc:	d001      	beq.n	8003bc2 <PE_SubStateMachine_VconnSwap+0x1e0>
 8003bbe:	f000 f829 	bl	8003c14 <.text_8>
 8003bc2:	2143      	movs	r1, #67	; 0x43
 8003bc4:	7c20      	ldrb	r0, [r4, #16]
 8003bc6:	f7fc fcc6 	bl	8000556 <USBPD_PE_Notification>
 8003bca:	8be0      	ldrh	r0, [r4, #30]
 8003bcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003bd0:	d117      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bd2:	6960      	ldr	r0, [r4, #20]
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	7461      	strb	r1, [r4, #17]
 8003bd8:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003bdc:	6160      	str	r0, [r4, #20]
 8003bde:	2500      	movs	r5, #0
 8003be0:	211c      	movs	r1, #28
 8003be2:	7c20      	ldrb	r0, [r4, #16]
 8003be4:	f7fc fcb7 	bl	8000556 <USBPD_PE_Notification>
 8003be8:	e00b      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bea:	68a0      	ldr	r0, [r4, #8]
 8003bec:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003bee:	b112      	cbz	r2, 8003bf6 <PE_SubStateMachine_VconnSwap+0x214>
 8003bf0:	7c20      	ldrb	r0, [r4, #16]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4790      	blx	r2
 8003bf6:	f000 f806 	bl	8003c06 <.text_7>
 8003bfa:	f248 002d 	movw	r0, #32813	; 0x802d
 8003bfe:	2500      	movs	r5, #0
 8003c00:	8460      	strh	r0, [r4, #34]	; 0x22
 8003c02:	4628      	mov	r0, r5
 8003c04:	bd32      	pop	{r1, r4, r5, pc}

08003c06 <.text_7>:
 8003c06:	6960      	ldr	r0, [r4, #20]
 8003c08:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003c0c:	6160      	str	r0, [r4, #20]
 8003c0e:	2103      	movs	r1, #3
 8003c10:	7461      	strb	r1, [r4, #17]
 8003c12:	4770      	bx	lr

08003c14 <.text_8>:
 8003c14:	2214      	movs	r2, #20
 8003c16:	700a      	strb	r2, [r1, #0]
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7fc bec7 	b.w	80009ac <PE_Clear_RxEvent>

08003c1e <.text_9>:
 8003c1e:	6960      	ldr	r0, [r4, #20]
 8003c20:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003c24:	6160      	str	r0, [r4, #20]
 8003c26:	2203      	movs	r2, #3
 8003c28:	7462      	strb	r2, [r4, #17]
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	7808      	ldrb	r0, [r1, #0]
 8003c2e:	2814      	cmp	r0, #20
 8003c30:	4770      	bx	lr

08003c32 <.text_10>:
 8003c32:	2100      	movs	r1, #0
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7fd bc17 	b.w	8001468 <PE_Send_CtrlMessage>

08003c3a <PE_ExtRevisionInteroperability_Cable>:
 8003c3a:	6842      	ldr	r2, [r0, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	f002 0303 	and.w	r3, r2, #3
 8003c42:	4299      	cmp	r1, r3
 8003c44:	bf28      	it	cs
 8003c46:	4619      	movcs	r1, r3
 8003c48:	f361 629b 	bfi	r2, r1, #26, #2
 8003c4c:	6841      	ldr	r1, [r0, #4]
 8003c4e:	600a      	str	r2, [r1, #0]
 8003c50:	f3c2 6181 	ubfx	r1, r2, #26, #2
 8003c54:	7c00      	ldrb	r0, [r0, #16]
 8003c56:	f001 b9d5 	b.w	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
	...

08003c5c <USBPD_PE_SVDM_RequestIdentity>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4ab4      	ldr	r2, [pc, #720]	; (8003f30 <.text_16>)
 8003c60:	4603      	mov	r3, r0
 8003c62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	685d      	ldr	r5, [r3, #4]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	f3c5 2340 	ubfx	r3, r5, #9, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf1e      	ittt	ne
 8003c74:	68e3      	ldrne	r3, [r4, #12]
 8003c76:	2b00      	cmpne	r3, #0
 8003c78:	2902      	cmpne	r1, #2
 8003c7a:	d101      	bne.n	8003c80 <USBPD_PE_SVDM_RequestIdentity+0x24>
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	e027      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c80:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003c84:	782b      	ldrb	r3, [r5, #0]
 8003c86:	b913      	cbnz	r3, 8003c8e <USBPD_PE_SVDM_RequestIdentity+0x32>
 8003c88:	f000 f849 	bl	8003d1e <.text_4>
 8003c8c:	b90b      	cbnz	r3, 8003c92 <USBPD_PE_SVDM_RequestIdentity+0x36>
 8003c8e:	2203      	movs	r2, #3
 8003c90:	e01e      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c92:	7069      	strb	r1, [r5, #1]
 8003c94:	b111      	cbz	r1, 8003c9c <USBPD_PE_SVDM_RequestIdentity+0x40>
 8003c96:	2901      	cmp	r1, #1
 8003c98:	d008      	beq.n	8003cac <USBPD_PE_SVDM_RequestIdentity+0x50>
 8003c9a:	e019      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c9c:	6861      	ldr	r1, [r4, #4]
 8003c9e:	680b      	ldr	r3, [r1, #0]
 8003ca0:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8003ca4:	2903      	cmp	r1, #3
 8003ca6:	d113      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003ca8:	217d      	movs	r1, #125	; 0x7d
 8003caa:	e00c      	b.n	8003cc6 <USBPD_PE_SVDM_RequestIdentity+0x6a>
 8003cac:	6861      	ldr	r1, [r4, #4]
 8003cae:	6809      	ldr	r1, [r1, #0]
 8003cb0:	f240 7304 	movw	r3, #1796	; 0x704
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cba:	bf1c      	itt	ne
 8003cbc:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 8003cc0:	2903      	cmpne	r1, #3
 8003cc2:	d105      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003cc4:	2105      	movs	r1, #5
 8003cc6:	7029      	strb	r1, [r5, #0]
 8003cc8:	68a2      	ldr	r2, [r4, #8]
 8003cca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ccc:	4788      	blx	r1
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}

08003cd4 <USBPD_PE_SVDM_RequestSVID>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	f000 f923 	bl	8003f20 <.text_15>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2902      	cmpne	r1, #2
 8003ce0:	2202      	moveq	r2, #2
 8003ce2:	d01a      	beq.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003ce4:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003ce8:	782b      	ldrb	r3, [r5, #0]
 8003cea:	b913      	cbnz	r3, 8003cf2 <USBPD_PE_SVDM_RequestSVID+0x1e>
 8003cec:	f000 f817 	bl	8003d1e <.text_4>
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <USBPD_PE_SVDM_RequestSVID+0x22>
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	e011      	b.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cf6:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d10d      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cfe:	237f      	movs	r3, #127	; 0x7f
 8003d00:	7069      	strb	r1, [r5, #1]
 8003d02:	702b      	strb	r3, [r5, #0]
 8003d04:	b129      	cbz	r1, 8003d12 <USBPD_PE_SVDM_RequestSVID+0x3e>
 8003d06:	2901      	cmp	r1, #1
 8003d08:	d107      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d0a:	6961      	ldr	r1, [r4, #20]
 8003d0c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d10:	b119      	cbz	r1, 8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d12:	68a1      	ldr	r1, [r4, #8]
 8003d14:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d16:	4790      	blx	r2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}

08003d1e <.text_4>:
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	681e      	ldr	r6, [r3, #0]
 8003d22:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8003d26:	4770      	bx	lr

08003d28 <USBPD_PE_SVDM_RequestMode>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	f000 f8d3 	bl	8003ed4 <.text_13>
 8003d2e:	68ec      	ldr	r4, [r5, #12]
 8003d30:	2310      	movs	r3, #16
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2902      	cmpne	r1, #2
 8003d38:	2302      	moveq	r3, #2
 8003d3a:	d01e      	beq.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d3c:	f105 0632 	add.w	r6, r5, #50	; 0x32
 8003d40:	7834      	ldrb	r4, [r6, #0]
 8003d42:	b924      	cbnz	r4, 8003d4e <USBPD_PE_SVDM_RequestMode+0x26>
 8003d44:	686c      	ldr	r4, [r5, #4]
 8003d46:	6827      	ldr	r7, [r4, #0]
 8003d48:	f3c7 3400 	ubfx	r4, r7, #12, #1
 8003d4c:	b90c      	cbnz	r4, 8003d52 <USBPD_PE_SVDM_RequestMode+0x2a>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e013      	b.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d52:	f3c7 2402 	ubfx	r4, r7, #8, #3
 8003d56:	2c03      	cmp	r4, #3
 8003d58:	d10f      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d5a:	2481      	movs	r4, #129	; 0x81
 8003d5c:	7071      	strb	r1, [r6, #1]
 8003d5e:	7034      	strb	r4, [r6, #0]
 8003d60:	f8a5 2258 	strh.w	r2, [r5, #600]	; 0x258
 8003d64:	b129      	cbz	r1, 8003d72 <USBPD_PE_SVDM_RequestMode+0x4a>
 8003d66:	2901      	cmp	r1, #1
 8003d68:	d107      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d6a:	6969      	ldr	r1, [r5, #20]
 8003d6c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d70:	b119      	cbz	r1, 8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d72:	68a9      	ldr	r1, [r5, #8]
 8003d74:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d76:	4790      	blx	r2
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003d7e <USBPD_PE_SVDM_RequestModeEnter>:
 8003d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d80:	f000 f854 	bl	8003e2c <.text_10>
 8003d84:	b90d      	cbnz	r5, 8003d8a <USBPD_PE_SVDM_RequestModeEnter+0xc>
 8003d86:	2402      	movs	r4, #2
 8003d88:	e01b      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d8a:	f106 0732 	add.w	r7, r6, #50	; 0x32
 8003d8e:	783d      	ldrb	r5, [r7, #0]
 8003d90:	b915      	cbnz	r5, 8003d98 <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8003d92:	f000 f845 	bl	8003e20 <.text_9>
 8003d96:	b90d      	cbnz	r5, 8003d9c <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 8003d98:	2403      	movs	r4, #3
 8003d9a:	e012      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d9c:	f40c 65e1 	and.w	r5, ip, #1800	; 0x708
 8003da0:	f5b5 7f42 	cmp.w	r5, #776	; 0x308
 8003da4:	d10d      	bne.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003da6:	2582      	movs	r5, #130	; 0x82
 8003da8:	f000 f831 	bl	8003e0e <.text_8>
 8003dac:	b129      	cbz	r1, 8003dba <USBPD_PE_SVDM_RequestModeEnter+0x3c>
 8003dae:	2902      	cmp	r1, #2
 8003db0:	d000      	beq.n	8003db4 <USBPD_PE_SVDM_RequestModeEnter+0x36>
 8003db2:	d206      	bcs.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003db4:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003db8:	b119      	cbz	r1, 8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003dba:	68b1      	ldr	r1, [r6, #8]
 8003dbc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003dbe:	4790      	blx	r2
 8003dc0:	2400      	movs	r4, #0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003dc6 <USBPD_PE_SVDM_RequestModeExit>:
 8003dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc8:	f000 f830 	bl	8003e2c <.text_10>
 8003dcc:	b90d      	cbnz	r5, 8003dd2 <USBPD_PE_SVDM_RequestModeExit+0xc>
 8003dce:	2402      	movs	r4, #2
 8003dd0:	e01b      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dd2:	f106 0732 	add.w	r7, r6, #50	; 0x32
 8003dd6:	783d      	ldrb	r5, [r7, #0]
 8003dd8:	b915      	cbnz	r5, 8003de0 <USBPD_PE_SVDM_RequestModeExit+0x1a>
 8003dda:	f000 f821 	bl	8003e20 <.text_9>
 8003dde:	b90d      	cbnz	r5, 8003de4 <USBPD_PE_SVDM_RequestModeExit+0x1e>
 8003de0:	2403      	movs	r4, #3
 8003de2:	e012      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003de4:	f40c 65e1 	and.w	r5, ip, #1800	; 0x708
 8003de8:	f5b5 7f42 	cmp.w	r5, #776	; 0x308
 8003dec:	d10d      	bne.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dee:	2583      	movs	r5, #131	; 0x83
 8003df0:	f000 f80d 	bl	8003e0e <.text_8>
 8003df4:	b129      	cbz	r1, 8003e02 <USBPD_PE_SVDM_RequestModeExit+0x3c>
 8003df6:	2902      	cmp	r1, #2
 8003df8:	d000      	beq.n	8003dfc <USBPD_PE_SVDM_RequestModeExit+0x36>
 8003dfa:	d206      	bcs.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dfc:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003e00:	b119      	cbz	r1, 8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003e02:	68b1      	ldr	r1, [r6, #8]
 8003e04:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e06:	4790      	blx	r2
 8003e08:	2400      	movs	r4, #0
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e0e <.text_8>:
 8003e0e:	7079      	strb	r1, [r7, #1]
 8003e10:	703d      	strb	r5, [r7, #0]
 8003e12:	f8a6 2258 	strh.w	r2, [r6, #600]	; 0x258
 8003e16:	6972      	ldr	r2, [r6, #20]
 8003e18:	f363 1288 	bfi	r2, r3, #6, #3
 8003e1c:	6172      	str	r2, [r6, #20]
 8003e1e:	4770      	bx	lr

08003e20 <.text_9>:
 8003e20:	6875      	ldr	r5, [r6, #4]
 8003e22:	f8d5 c000 	ldr.w	ip, [r5]
 8003e26:	f3cc 3500 	ubfx	r5, ip, #12, #1
 8003e2a:	4770      	bx	lr

08003e2c <.text_10>:
 8003e2c:	4c40      	ldr	r4, [pc, #256]	; (8003f30 <.text_16>)
 8003e2e:	4605      	mov	r5, r0
 8003e30:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8003e34:	68f5      	ldr	r5, [r6, #12]
 8003e36:	2410      	movs	r4, #16
 8003e38:	4770      	bx	lr

08003e3a <USBPD_PE_SVDM_RequestSpecific>:
 8003e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3c:	f7ff fff6 	bl	8003e2c <.text_10>
 8003e40:	b90d      	cbnz	r5, 8003e46 <USBPD_PE_SVDM_RequestSpecific+0xc>
 8003e42:	2402      	movs	r4, #2
 8003e44:	e01d      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e46:	f106 0732 	add.w	r7, r6, #50	; 0x32
 8003e4a:	783d      	ldrb	r5, [r7, #0]
 8003e4c:	b915      	cbnz	r5, 8003e54 <USBPD_PE_SVDM_RequestSpecific+0x1a>
 8003e4e:	f7ff ffe7 	bl	8003e20 <.text_9>
 8003e52:	b90d      	cbnz	r5, 8003e58 <USBPD_PE_SVDM_RequestSpecific+0x1e>
 8003e54:	2403      	movs	r4, #3
 8003e56:	e014      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e58:	6975      	ldr	r5, [r6, #20]
 8003e5a:	f3c5 4500 	ubfx	r5, r5, #16, #1
 8003e5e:	b90d      	cbnz	r5, 8003e64 <USBPD_PE_SVDM_RequestSpecific+0x2a>
 8003e60:	000d      	movs	r5, r1
 8003e62:	d10e      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e64:	f3cc 2502 	ubfx	r5, ip, #8, #3
 8003e68:	2d03      	cmp	r5, #3
 8003e6a:	d10a      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e6c:	7079      	strb	r1, [r7, #1]
 8003e6e:	2400      	movs	r4, #0
 8003e70:	2185      	movs	r1, #133	; 0x85
 8003e72:	7039      	strb	r1, [r7, #0]
 8003e74:	f506 7115 	add.w	r1, r6, #596	; 0x254
 8003e78:	600a      	str	r2, [r1, #0]
 8003e7a:	808b      	strh	r3, [r1, #4]
 8003e7c:	68b1      	ldr	r1, [r6, #8]
 8003e7e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e80:	4790      	blx	r2
 8003e82:	4620      	mov	r0, r4
 8003e84:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e86 <USBPD_PE_SVDM_RequestAttention>:
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	f000 f824 	bl	8003ed4 <.text_13>
 8003e8c:	68eb      	ldr	r3, [r5, #12]
 8003e8e:	2410      	movs	r4, #16
 8003e90:	b103      	cbz	r3, 8003e94 <USBPD_PE_SVDM_RequestAttention+0xe>
 8003e92:	b109      	cbz	r1, 8003e98 <USBPD_PE_SVDM_RequestAttention+0x12>
 8003e94:	2402      	movs	r4, #2
 8003e96:	e01b      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003e98:	f105 0332 	add.w	r3, r5, #50	; 0x32
 8003e9c:	7819      	ldrb	r1, [r3, #0]
 8003e9e:	b921      	cbnz	r1, 8003eaa <USBPD_PE_SVDM_RequestAttention+0x24>
 8003ea0:	6869      	ldr	r1, [r5, #4]
 8003ea2:	680e      	ldr	r6, [r1, #0]
 8003ea4:	f3c6 3100 	ubfx	r1, r6, #12, #1
 8003ea8:	b909      	cbnz	r1, 8003eae <USBPD_PE_SVDM_RequestAttention+0x28>
 8003eaa:	2403      	movs	r4, #3
 8003eac:	e010      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eae:	f3c6 2102 	ubfx	r1, r6, #8, #3
 8003eb2:	2903      	cmp	r1, #3
 8003eb4:	d10c      	bne.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	7059      	strb	r1, [r3, #1]
 8003eba:	2484      	movs	r4, #132	; 0x84
 8003ebc:	701c      	strb	r4, [r3, #0]
 8003ebe:	f505 7115 	add.w	r1, r5, #596	; 0x254
 8003ec2:	2306      	movs	r3, #6
 8003ec4:	600b      	str	r3, [r1, #0]
 8003ec6:	808a      	strh	r2, [r1, #4]
 8003ec8:	2400      	movs	r4, #0
 8003eca:	68a9      	ldr	r1, [r5, #8]
 8003ecc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003ece:	4790      	blx	r2
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}

08003ed4 <.text_13>:
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <.text_16>)
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003edc:	4770      	bx	lr

08003ede <USBPD_PE_UVDM_RequestMessage>:
 8003ede:	b570      	push	{r4, r5, r6, lr}
 8003ee0:	f000 f81e 	bl	8003f20 <.text_15>
 8003ee4:	b90b      	cbnz	r3, 8003eea <USBPD_PE_UVDM_RequestMessage+0xc>
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	e018      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003eea:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003eee:	782b      	ldrb	r3, [r5, #0]
 8003ef0:	b913      	cbnz	r3, 8003ef8 <USBPD_PE_UVDM_RequestMessage+0x1a>
 8003ef2:	f7ff ff14 	bl	8003d1e <.text_4>
 8003ef6:	b90b      	cbnz	r3, 8003efc <USBPD_PE_UVDM_RequestMessage+0x1e>
 8003ef8:	2203      	movs	r2, #3
 8003efa:	e00f      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003efc:	f3c6 33c0 	ubfx	r3, r6, #15, #1
 8003f00:	b90b      	cbnz	r3, 8003f06 <USBPD_PE_UVDM_RequestMessage+0x28>
 8003f02:	000b      	movs	r3, r1
 8003f04:	d10a      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f06:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d106      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f0e:	7069      	strb	r1, [r5, #1]
 8003f10:	2186      	movs	r1, #134	; 0x86
 8003f12:	7029      	strb	r1, [r5, #0]
 8003f14:	68a2      	ldr	r2, [r4, #8]
 8003f16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f18:	4788      	blx	r1
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}

08003f20 <.text_15>:
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <.text_16>)
 8003f22:	4603      	mov	r3, r0
 8003f24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003f28:	68e3      	ldr	r3, [r4, #12]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	4770      	bx	lr
	...

08003f30 <.text_16>:
 8003f30:	200002b8 	.word	0x200002b8

08003f34 <PE_Receive_SVDM>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8003f3c:	f204 4294 	addw	r2, r4, #1172	; 0x494
 8003f40:	8808      	ldrh	r0, [r1, #0]
 8003f42:	0b00      	lsrs	r0, r0, #12
 8003f44:	f000 0007 	and.w	r0, r0, #7
 8003f48:	1e43      	subs	r3, r0, #1
 8003f4a:	7613      	strb	r3, [r2, #24]
 8003f4c:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d16e      	bne.n	8004032 <PE_Receive_SVDM+0xfe>
 8003f54:	e010      	b.n	8003f78 <PE_Receive_SVDM+0x44>
 8003f56:	684b      	ldr	r3, [r1, #4]
 8003f58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003f5c:	799d      	ldrb	r5, [r3, #6]
 8003f5e:	79de      	ldrb	r6, [r3, #7]
 8003f60:	eb05 2706 	add.w	r7, r5, r6, lsl #8
 8003f64:	7a1d      	ldrb	r5, [r3, #8]
 8003f66:	7a5b      	ldrb	r3, [r3, #9]
 8003f68:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8003f6c:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 8003f70:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 8003f74:	1c40      	adds	r0, r0, #1
 8003f76:	b2c0      	uxtb	r0, r0
 8003f78:	7e15      	ldrb	r5, [r2, #24]
 8003f7a:	42a8      	cmp	r0, r5
 8003f7c:	dbeb      	blt.n	8003f56 <PE_Receive_SVDM+0x22>
 8003f7e:	f894 3250 	ldrb.w	r3, [r4, #592]	; 0x250
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	1e5b      	subs	r3, r3, #1
 8003f88:	f248 0119 	movw	r1, #32793	; 0x8019
 8003f8c:	f248 000f 	movw	r0, #32783	; 0x800f
 8003f90:	d00d      	beq.n	8003fae <PE_Receive_SVDM+0x7a>
 8003f92:	1e5b      	subs	r3, r3, #1
 8003f94:	d028      	beq.n	8003fe8 <PE_Receive_SVDM+0xb4>
 8003f96:	1e5b      	subs	r3, r3, #1
 8003f98:	d02b      	beq.n	8003ff2 <PE_Receive_SVDM+0xbe>
 8003f9a:	1e5b      	subs	r3, r3, #1
 8003f9c:	d02e      	beq.n	8003ffc <PE_Receive_SVDM+0xc8>
 8003f9e:	1e5b      	subs	r3, r3, #1
 8003fa0:	d031      	beq.n	8004006 <PE_Receive_SVDM+0xd2>
 8003fa2:	1e5b      	subs	r3, r3, #1
 8003fa4:	d034      	beq.n	8004010 <PE_Receive_SVDM+0xdc>
 8003fa6:	3b0a      	subs	r3, #10
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d93d      	bls.n	8004028 <PE_Receive_SVDM+0xf4>
 8003fac:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8003fae:	2150      	movs	r1, #80	; 0x50
 8003fb0:	6862      	ldr	r2, [r4, #4]
 8003fb2:	7721      	strb	r1, [r4, #28]
 8003fb4:	6813      	ldr	r3, [r2, #0]
 8003fb6:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
 8003fba:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fbe:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8003fc2:	4291      	cmp	r1, r2
 8003fc4:	da04      	bge.n	8003fd0 <PE_Receive_SVDM+0x9c>
 8003fc6:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
 8003fca:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fce:	e003      	b.n	8003fd8 <PE_Receive_SVDM+0xa4>
 8003fd0:	6861      	ldr	r1, [r4, #4]
 8003fd2:	680a      	ldr	r2, [r1, #0]
 8003fd4:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8003fd8:	6862      	ldr	r2, [r4, #4]
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	f361 1345 	bfi	r3, r1, #5, #1
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	83e0      	strh	r0, [r4, #30]
 8003fe4:	2075      	movs	r0, #117	; 0x75
 8003fe6:	e023      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003fe8:	2152      	movs	r1, #82	; 0x52
 8003fea:	7721      	strb	r1, [r4, #28]
 8003fec:	83e0      	strh	r0, [r4, #30]
 8003fee:	2076      	movs	r0, #118	; 0x76
 8003ff0:	e01e      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ff2:	2153      	movs	r1, #83	; 0x53
 8003ff4:	7721      	strb	r1, [r4, #28]
 8003ff6:	83e0      	strh	r0, [r4, #30]
 8003ff8:	2078      	movs	r0, #120	; 0x78
 8003ffa:	e019      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ffc:	2254      	movs	r2, #84	; 0x54
 8003ffe:	7722      	strb	r2, [r4, #28]
 8004000:	83e1      	strh	r1, [r4, #30]
 8004002:	2079      	movs	r0, #121	; 0x79
 8004004:	e014      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004006:	2255      	movs	r2, #85	; 0x55
 8004008:	7722      	strb	r2, [r4, #28]
 800400a:	83e1      	strh	r1, [r4, #30]
 800400c:	207a      	movs	r0, #122	; 0x7a
 800400e:	e00f      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004010:	68e0      	ldr	r0, [r4, #12]
 8004012:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004014:	b12b      	cbz	r3, 8004022 <PE_Receive_SVDM+0xee>
 8004016:	0029      	movs	r1, r5
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	7c20      	ldrb	r0, [r4, #16]
 800401c:	bf18      	it	ne
 800401e:	2101      	movne	r1, #1
 8004020:	4798      	blx	r3
 8004022:	2103      	movs	r1, #3
 8004024:	7461      	strb	r1, [r4, #17]
 8004026:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8004028:	225a      	movs	r2, #90	; 0x5a
 800402a:	7722      	strb	r2, [r4, #28]
 800402c:	83e0      	strh	r0, [r4, #30]
 800402e:	207b      	movs	r0, #123	; 0x7b
 8004030:	7460      	strb	r0, [r4, #17]
 8004032:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004034 <PE_StateMachine_VDM>:
 8004034:	e92d 47fb 	stmdb	sp!, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4604      	mov	r4, r0
 800403a:	b099      	sub	sp, #100	; 0x64
 800403c:	f894 c011 	ldrb.w	ip, [r4, #17]
 8004040:	f1ac 0075 	sub.w	r0, ip, #117	; 0x75
 8004044:	2807      	cmp	r0, #7
 8004046:	f04f 0802 	mov.w	r8, #2
 800404a:	d203      	bcs.n	8004054 <PE_StateMachine_VDM+0x20>
 800404c:	7809      	ldrb	r1, [r1, #0]
 800404e:	2914      	cmp	r1, #20
 8004050:	f040 84ea 	bne.w	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004054:	2305      	movs	r3, #5
 8004056:	2003      	movs	r0, #3
 8004058:	2204      	movs	r2, #4
 800405a:	f1bc 0f75 	cmp.w	ip, #117	; 0x75
 800405e:	f104 0534 	add.w	r5, r4, #52	; 0x34
 8004062:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8004066:	f504 7614 	add.w	r6, r4, #592	; 0x250
 800406a:	f04f 0a01 	mov.w	sl, #1
 800406e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8004072:	f248 091e 	movw	r9, #32798	; 0x801e
 8004076:	d04c      	beq.n	8004112 <PE_StateMachine_VDM+0xde>
 8004078:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 800407c:	f000 80a4 	beq.w	80041c8 <PE_StateMachine_VDM+0x194>
 8004080:	f1bc 0f77 	cmp.w	ip, #119	; 0x77
 8004084:	f000 811c 	beq.w	80042c0 <PE_StateMachine_VDM+0x28c>
 8004088:	f1bc 0f78 	cmp.w	ip, #120	; 0x78
 800408c:	f000 8172 	beq.w	8004374 <PE_StateMachine_VDM+0x340>
 8004090:	f1bc 0f79 	cmp.w	ip, #121	; 0x79
 8004094:	f000 81b3 	beq.w	80043fe <PE_StateMachine_VDM+0x3ca>
 8004098:	f1bc 0f7a 	cmp.w	ip, #122	; 0x7a
 800409c:	f000 81cf 	beq.w	800443e <PE_StateMachine_VDM+0x40a>
 80040a0:	f1bc 0f7b 	cmp.w	ip, #123	; 0x7b
 80040a4:	f000 81f9 	beq.w	800449a <PE_StateMachine_VDM+0x466>
 80040a8:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80040ac:	f000 8231 	beq.w	8004512 <PE_StateMachine_VDM+0x4de>
 80040b0:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
 80040b4:	f000 8293 	beq.w	80045de <PE_StateMachine_VDM+0x5aa>
 80040b8:	f1bc 0f81 	cmp.w	ip, #129	; 0x81
 80040bc:	f000 82da 	beq.w	8004674 <PE_StateMachine_VDM+0x640>
 80040c0:	f1bc 0f82 	cmp.w	ip, #130	; 0x82
 80040c4:	f000 8331 	beq.w	800472a <PE_StateMachine_VDM+0x6f6>
 80040c8:	f1bc 0f83 	cmp.w	ip, #131	; 0x83
 80040cc:	f000 8393 	beq.w	80047f6 <PE_StateMachine_VDM+0x7c2>
 80040d0:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
 80040d4:	f000 848c 	beq.w	80049f0 <PE_StateMachine_VDM+0x9bc>
 80040d8:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
 80040dc:	f000 83f9 	beq.w	80048d2 <PE_StateMachine_VDM+0x89e>
 80040e0:	f1bc 0f87 	cmp.w	ip, #135	; 0x87
 80040e4:	f000 8241 	beq.w	800456a <PE_StateMachine_VDM+0x536>
 80040e8:	f1bc 0f89 	cmp.w	ip, #137	; 0x89
 80040ec:	f000 828f 	beq.w	800460e <PE_StateMachine_VDM+0x5da>
 80040f0:	f1bc 0f8b 	cmp.w	ip, #139	; 0x8b
 80040f4:	f000 82de 	beq.w	80046b4 <PE_StateMachine_VDM+0x680>
 80040f8:	f1bc 0f8c 	cmp.w	ip, #140	; 0x8c
 80040fc:	f000 832d 	beq.w	800475a <PE_StateMachine_VDM+0x726>
 8004100:	f1bc 0f8d 	cmp.w	ip, #141	; 0x8d
 8004104:	f000 839a 	beq.w	800483c <PE_StateMachine_VDM+0x808>
 8004108:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 800410c:	f000 8403 	beq.w	8004916 <PE_StateMachine_VDM+0x8e2>
 8004110:	e125      	b.n	800435e <PE_StateMachine_VDM+0x32a>
 8004112:	f000 fd12 	bl	8004b3a <.text_34>
 8004116:	f000 8466 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 800411a:	6830      	ldr	r0, [r6, #0]
 800411c:	f36a 0004 	bfi	r0, sl, #0, #5
 8004120:	f000 fcca 	bl	8004ab8 <.text_28+0x4>
 8004124:	f000 fc9e 	bl	8004a64 <.text_25>
 8004128:	bf1f      	itttt	ne
 800412a:	68e0      	ldrne	r0, [r4, #12]
 800412c:	2800      	cmpne	r0, #0
 800412e:	6802      	ldrne	r2, [r0, #0]
 8004130:	2a00      	cmpne	r2, #0
 8004132:	d03d      	beq.n	80041b0 <PE_StateMachine_VDM+0x17c>
 8004134:	0c09      	lsrs	r1, r1, #16
 8004136:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 800413a:	d139      	bne.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800413c:	7c20      	ldrb	r0, [r4, #16]
 800413e:	a908      	add	r1, sp, #32
 8004140:	4790      	blx	r2
 8004142:	2803      	cmp	r0, #3
 8004144:	d002      	beq.n	800414c <PE_StateMachine_VDM+0x118>
 8004146:	280f      	cmp	r0, #15
 8004148:	d003      	beq.n	8004152 <PE_StateMachine_VDM+0x11e>
 800414a:	e031      	b.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800414c:	f000 fce9 	bl	8004b22 <.text_31>
 8004150:	e030      	b.n	80041b4 <PE_StateMachine_VDM+0x180>
 8004152:	f000 fcf7 	bl	8004b44 <.text_35>
 8004156:	a811      	add	r0, sp, #68	; 0x44
 8004158:	9908      	ldr	r1, [sp, #32]
 800415a:	6041      	str	r1, [r0, #4]
 800415c:	2504      	movs	r5, #4
 800415e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004160:	6081      	str	r1, [r0, #8]
 8004162:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004164:	60c1      	str	r1, [r0, #12]
 8004166:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800416a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800416e:	b111      	cbz	r1, 8004176 <PE_StateMachine_VDM+0x142>
 8004170:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004172:	6101      	str	r1, [r0, #16]
 8004174:	2505      	movs	r5, #5
 8004176:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800417a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800417e:	b121      	cbz	r1, 800418a <PE_StateMachine_VDM+0x156>
 8004180:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004182:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8004186:	1c6d      	adds	r5, r5, #1
 8004188:	b2ed      	uxtb	r5, r5
 800418a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800418e:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8004192:	b181      	cbz	r1, 80041b6 <PE_StateMachine_VDM+0x182>
 8004194:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8004198:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800419c:	b119      	cbz	r1, 80041a6 <PE_StateMachine_VDM+0x172>
 800419e:	2100      	movs	r1, #0
 80041a0:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041a4:	1c6d      	adds	r5, r5, #1
 80041a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80041a8:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041ac:	1c6d      	adds	r5, r5, #1
 80041ae:	e002      	b.n	80041b6 <PE_StateMachine_VDM+0x182>
 80041b0:	f000 fcbb 	bl	8004b2a <.text_32>
 80041b4:	6030      	str	r0, [r6, #0]
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	2000      	movs	r0, #0
 80041ba:	2203      	movs	r2, #3
 80041bc:	9111      	str	r1, [sp, #68]	; 0x44
 80041be:	9002      	str	r0, [sp, #8]
 80041c0:	9201      	str	r2, [sp, #4]
 80041c2:	9500      	str	r5, [sp, #0]
 80041c4:	ab11      	add	r3, sp, #68	; 0x44
 80041c6:	e19f      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80041c8:	f000 fcb7 	bl	8004b3a <.text_34>
 80041cc:	d07a      	beq.n	80042c4 <PE_StateMachine_VDM+0x290>
 80041ce:	6830      	ldr	r0, [r6, #0]
 80041d0:	f368 0004 	bfi	r0, r8, #0, #5
 80041d4:	6030      	str	r0, [r6, #0]
 80041d6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80041da:	6030      	str	r0, [r6, #0]
 80041dc:	6860      	ldr	r0, [r4, #4]
 80041de:	6801      	ldr	r1, [r0, #0]
 80041e0:	6830      	ldr	r0, [r6, #0]
 80041e2:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80041e6:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 80041ea:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 80041ee:	6030      	str	r0, [r6, #0]
 80041f0:	6861      	ldr	r1, [r4, #4]
 80041f2:	780a      	ldrb	r2, [r1, #0]
 80041f4:	f002 020b 	and.w	r2, r2, #11
 80041f8:	2a09      	cmp	r2, #9
 80041fa:	bf1e      	ittt	ne
 80041fc:	68e1      	ldrne	r1, [r4, #12]
 80041fe:	684b      	ldrne	r3, [r1, #4]
 8004200:	2b00      	cmpne	r3, #0
 8004202:	d051      	beq.n	80042a8 <PE_StateMachine_VDM+0x274>
 8004204:	0c00      	lsrs	r0, r0, #16
 8004206:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 800420a:	d14d      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800420c:	7c20      	ldrb	r0, [r4, #16]
 800420e:	f204 42ad 	addw	r2, r4, #1197	; 0x4ad
 8004212:	a903      	add	r1, sp, #12
 8004214:	4798      	blx	r3
 8004216:	2803      	cmp	r0, #3
 8004218:	d043      	beq.n	80042a2 <PE_StateMachine_VDM+0x26e>
 800421a:	280f      	cmp	r0, #15
 800421c:	d144      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800421e:	f000 fc91 	bl	8004b44 <.text_35>
 8004222:	211c      	movs	r1, #28
 8004224:	a804      	add	r0, sp, #16
 8004226:	f01a ff09 	bl	801f03c <__aeabi_memclr>
 800422a:	2500      	movs	r5, #0
 800422c:	2300      	movs	r3, #0
 800422e:	f204 42ac 	addw	r2, r4, #1196	; 0x4ac
 8004232:	e01b      	b.n	800426c <PE_StateMachine_VDM+0x238>
 8004234:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8004238:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800423c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004240:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8004244:	f841 c020 	str.w	ip, [r1, r0, lsl #2]
 8004248:	e00f      	b.n	800426a <PE_StateMachine_VDM+0x236>
 800424a:	1c6d      	adds	r5, r5, #1
 800424c:	0858      	lsrs	r0, r3, #1
 800424e:	ea5f 7cc3 	movs.w	ip, r3, lsl #31
 8004252:	a905      	add	r1, sp, #20
 8004254:	d5ee      	bpl.n	8004234 <PE_StateMachine_VDM+0x200>
 8004256:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800425a:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800425e:	f83c 9013 	ldrh.w	r9, [ip, r3, lsl #1]
 8004262:	ea49 0e0e 	orr.w	lr, r9, lr
 8004266:	f841 e020 	str.w	lr, [r1, r0, lsl #2]
 800426a:	1c5b      	adds	r3, r3, #1
 800426c:	7850      	ldrb	r0, [r2, #1]
 800426e:	4283      	cmp	r3, r0
 8004270:	bf38      	it	cc
 8004272:	2b0c      	cmpcc	r3, #12
 8004274:	d3e9      	bcc.n	800424a <PE_StateMachine_VDM+0x216>
 8004276:	f204 41ac 	addw	r1, r4, #1196	; 0x4ac
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	7048      	strb	r0, [r1, #1]
 800427e:	b2e8      	uxtb	r0, r5
 8004280:	280c      	cmp	r0, #12
 8004282:	d109      	bne.n	8004298 <PE_StateMachine_VDM+0x264>
 8004284:	6831      	ldr	r1, [r6, #0]
 8004286:	9104      	str	r1, [sp, #16]
 8004288:	2000      	movs	r0, #0
 800428a:	2277      	movs	r2, #119	; 0x77
 800428c:	2107      	movs	r1, #7
 800428e:	9002      	str	r0, [sp, #8]
 8004290:	9201      	str	r2, [sp, #4]
 8004292:	9100      	str	r1, [sp, #0]
 8004294:	ab04      	add	r3, sp, #16
 8004296:	e05b      	b.n	8004350 <PE_StateMachine_VDM+0x31c>
 8004298:	062d      	lsls	r5, r5, #24
 800429a:	0e6d      	lsrs	r5, r5, #25
 800429c:	6830      	ldr	r0, [r6, #0]
 800429e:	1cad      	adds	r5, r5, #2
 80042a0:	e005      	b.n	80042ae <PE_StateMachine_VDM+0x27a>
 80042a2:	f000 fc3e 	bl	8004b22 <.text_31>
 80042a6:	e001      	b.n	80042ac <PE_StateMachine_VDM+0x278>
 80042a8:	f000 fc3f 	bl	8004b2a <.text_32>
 80042ac:	6030      	str	r0, [r6, #0]
 80042ae:	9004      	str	r0, [sp, #16]
 80042b0:	2103      	movs	r1, #3
 80042b2:	2000      	movs	r0, #0
 80042b4:	b2ed      	uxtb	r5, r5
 80042b6:	9002      	str	r0, [sp, #8]
 80042b8:	9101      	str	r1, [sp, #4]
 80042ba:	9500      	str	r5, [sp, #0]
 80042bc:	ab04      	add	r3, sp, #16
 80042be:	e123      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80042c0:	f000 fc37 	bl	8004b32 <.text_33>
 80042c4:	f000 838f 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 80042c8:	6830      	ldr	r0, [r6, #0]
 80042ca:	f368 0004 	bfi	r0, r8, #0, #5
 80042ce:	6030      	str	r0, [r6, #0]
 80042d0:	aa03      	add	r2, sp, #12
 80042d2:	f000 fbef 	bl	8004ab4 <.text_28>
 80042d6:	f36a 1187 	bfi	r1, sl, #6, #2
 80042da:	6031      	str	r1, [r6, #0]
 80042dc:	a904      	add	r1, sp, #16
 80042de:	68e3      	ldr	r3, [r4, #12]
 80042e0:	7c20      	ldrb	r0, [r4, #16]
 80042e2:	685d      	ldr	r5, [r3, #4]
 80042e4:	47a8      	blx	r5
 80042e6:	211c      	movs	r1, #28
 80042e8:	a805      	add	r0, sp, #20
 80042ea:	f01a fea7 	bl	801f03c <__aeabi_memclr>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2500      	movs	r5, #0
 80042f2:	f204 42ac 	addw	r2, r4, #1196	; 0x4ac
 80042f6:	e018      	b.n	800432a <PE_StateMachine_VDM+0x2f6>
 80042f8:	f8dd e010 	ldr.w	lr, [sp, #16]
 80042fc:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8004300:	f83e 6015 	ldrh.w	r6, [lr, r5, lsl #1]
 8004304:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 8004308:	e00c      	b.n	8004324 <PE_StateMachine_VDM+0x2f0>
 800430a:	1c5b      	adds	r3, r3, #1
 800430c:	0868      	lsrs	r0, r5, #1
 800430e:	07ee      	lsls	r6, r5, #31
 8004310:	a906      	add	r1, sp, #24
 8004312:	d5f1      	bpl.n	80042f8 <PE_StateMachine_VDM+0x2c4>
 8004314:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004318:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800431c:	f83c 6015 	ldrh.w	r6, [ip, r5, lsl #1]
 8004320:	ea46 060e 	orr.w	r6, r6, lr
 8004324:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
 8004328:	1c6d      	adds	r5, r5, #1
 800432a:	7850      	ldrb	r0, [r2, #1]
 800432c:	4285      	cmp	r5, r0
 800432e:	bf38      	it	cc
 8004330:	2d0c      	cmpcc	r5, #12
 8004332:	d3ea      	bcc.n	800430a <PE_StateMachine_VDM+0x2d6>
 8004334:	f204 41ac 	addw	r1, r4, #1196	; 0x4ac
 8004338:	1ac0      	subs	r0, r0, r3
 800433a:	7048      	strb	r0, [r1, #1]
 800433c:	b2d8      	uxtb	r0, r3
 800433e:	280c      	cmp	r0, #12
 8004340:	d10e      	bne.n	8004360 <PE_StateMachine_VDM+0x32c>
 8004342:	2100      	movs	r1, #0
 8004344:	2077      	movs	r0, #119	; 0x77
 8004346:	2207      	movs	r2, #7
 8004348:	9102      	str	r1, [sp, #8]
 800434a:	9001      	str	r0, [sp, #4]
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	ab05      	add	r3, sp, #20
 8004350:	7839      	ldrb	r1, [r7, #0]
 8004352:	220f      	movs	r2, #15
 8004354:	f000 fc84 	bl	8004c60 <.text_44>
 8004358:	f248 000f 	movw	r0, #32783	; 0x800f
 800435c:	83e0      	strh	r0, [r4, #30]
 800435e:	e363      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	0e5b      	lsrs	r3, r3, #25
 8004364:	1c9b      	adds	r3, r3, #2
 8004366:	b2db      	uxtb	r3, r3
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	2003      	movs	r0, #3
 800436e:	9102      	str	r1, [sp, #8]
 8004370:	9001      	str	r0, [sp, #4]
 8004372:	e042      	b.n	80043fa <PE_StateMachine_VDM+0x3c6>
 8004374:	8be1      	ldrh	r1, [r4, #30]
 8004376:	2501      	movs	r5, #1
 8004378:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800437c:	d061      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	f360 0104 	bfi	r1, r0, #0, #5
 8004384:	f000 fb74 	bl	8004a70 <.text_26>
 8004388:	f000 fb6c 	bl	8004a64 <.text_25>
 800438c:	bf1e      	ittt	ne
 800438e:	68e0      	ldrne	r0, [r4, #12]
 8004390:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8004394:	f1bc 0f00 	cmpne.w	ip, #0
 8004398:	d025      	beq.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 800439a:	7c20      	ldrb	r0, [r4, #16]
 800439c:	ab03      	add	r3, sp, #12
 800439e:	aa04      	add	r2, sp, #16
 80043a0:	0c09      	lsrs	r1, r1, #16
 80043a2:	47e0      	blx	ip
 80043a4:	2803      	cmp	r0, #3
 80043a6:	d002      	beq.n	80043ae <PE_StateMachine_VDM+0x37a>
 80043a8:	280f      	cmp	r0, #15
 80043aa:	d005      	beq.n	80043b8 <PE_StateMachine_VDM+0x384>
 80043ac:	e01b      	b.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043ae:	6832      	ldr	r2, [r6, #0]
 80043b0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80043b4:	6032      	str	r2, [r6, #0]
 80043b6:	e019      	b.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80043bc:	b198      	cbz	r0, 80043e6 <PE_StateMachine_VDM+0x3b2>
 80043be:	2807      	cmp	r0, #7
 80043c0:	d211      	bcs.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043c2:	f000 fbbf 	bl	8004b44 <.text_35>
 80043c6:	ab06      	add	r3, sp, #24
 80043c8:	2000      	movs	r0, #0
 80043ca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80043ce:	4288      	cmp	r0, r1
 80043d0:	d20c      	bcs.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043d2:	9a04      	ldr	r2, [sp, #16]
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80043da:	1c6d      	adds	r5, r5, #1
 80043dc:	9904      	ldr	r1, [sp, #16]
 80043de:	1d0a      	adds	r2, r1, #4
 80043e0:	9204      	str	r2, [sp, #16]
 80043e2:	1c40      	adds	r0, r0, #1
 80043e4:	e7f1      	b.n	80043ca <PE_StateMachine_VDM+0x396>
 80043e6:	f000 fba0 	bl	8004b2a <.text_32>
 80043ea:	6030      	str	r0, [r6, #0]
 80043ec:	2000      	movs	r0, #0
 80043ee:	6831      	ldr	r1, [r6, #0]
 80043f0:	9105      	str	r1, [sp, #20]
 80043f2:	2203      	movs	r2, #3
 80043f4:	9002      	str	r0, [sp, #8]
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	9500      	str	r5, [sp, #0]
 80043fa:	ab05      	add	r3, sp, #20
 80043fc:	e084      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80043fe:	f000 fb98 	bl	8004b32 <.text_33>
 8004402:	d01e      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 8004404:	6830      	ldr	r0, [r6, #0]
 8004406:	f362 0004 	bfi	r0, r2, #0, #5
 800440a:	f000 fb40 	bl	8004a8e <.text_27>
 800440e:	2800      	cmp	r0, #0
 8004410:	d134      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004412:	68e1      	ldr	r1, [r4, #12]
 8004414:	68c8      	ldr	r0, [r1, #12]
 8004416:	2800      	cmp	r0, #0
 8004418:	d030      	beq.n	800447c <PE_StateMachine_VDM+0x448>
 800441a:	f000 fbcf 	bl	8004bbc <.text_40>
 800441e:	68dd      	ldr	r5, [r3, #12]
 8004420:	47a8      	blx	r5
 8004422:	2803      	cmp	r0, #3
 8004424:	d027      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004426:	280f      	cmp	r0, #15
 8004428:	d128      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 800442a:	f000 fb8b 	bl	8004b44 <.text_35>
 800442e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004432:	6961      	ldr	r1, [r4, #20]
 8004434:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8004438:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
 800443c:	e019      	b.n	8004472 <PE_StateMachine_VDM+0x43e>
 800443e:	f000 fb78 	bl	8004b32 <.text_33>
 8004442:	f000 82d0 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 8004446:	6830      	ldr	r0, [r6, #0]
 8004448:	f363 0004 	bfi	r0, r3, #0, #5
 800444c:	f000 fb1f 	bl	8004a8e <.text_27>
 8004450:	b9a0      	cbnz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004452:	68e1      	ldr	r1, [r4, #12]
 8004454:	6908      	ldr	r0, [r1, #16]
 8004456:	b188      	cbz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004458:	f000 fbb0 	bl	8004bbc <.text_40>
 800445c:	691d      	ldr	r5, [r3, #16]
 800445e:	47a8      	blx	r5
 8004460:	2803      	cmp	r0, #3
 8004462:	d008      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004464:	280f      	cmp	r0, #15
 8004466:	d109      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004468:	f000 fb6c 	bl	8004b44 <.text_35>
 800446c:	6961      	ldr	r1, [r4, #20]
 800446e:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8004472:	6161      	str	r1, [r4, #20]
 8004474:	e005      	b.n	8004482 <PE_StateMachine_VDM+0x44e>
 8004476:	f000 fb54 	bl	8004b22 <.text_31>
 800447a:	e001      	b.n	8004480 <PE_StateMachine_VDM+0x44c>
 800447c:	f000 fb55 	bl	8004b2a <.text_32>
 8004480:	6030      	str	r0, [r6, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	9102      	str	r1, [sp, #8]
 8004486:	2203      	movs	r2, #3
 8004488:	9201      	str	r2, [sp, #4]
 800448a:	f8cd a000 	str.w	sl, [sp]
 800448e:	4633      	mov	r3, r6
 8004490:	7839      	ldrb	r1, [r7, #0]
 8004492:	220f      	movs	r2, #15
 8004494:	f000 fb89 	bl	8004baa <.text_38+0x6>
 8004498:	e2c6      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800449a:	f000 fb4e 	bl	8004b3a <.text_34>
 800449e:	d0d0      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
 80044a6:	f1bc 0f00 	cmp.w	ip, #0
 80044aa:	d021      	beq.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044ac:	7831      	ldrb	r1, [r6, #0]
 80044ae:	7c20      	ldrb	r0, [r4, #16]
 80044b0:	f204 49ac 	addw	r9, r4, #1196	; 0x4ac
 80044b4:	f204 4394 	addw	r3, r4, #1172	; 0x494
 80044b8:	464a      	mov	r2, r9
 80044ba:	f001 011f 	and.w	r1, r1, #31
 80044be:	47e0      	blx	ip
 80044c0:	2803      	cmp	r0, #3
 80044c2:	d012      	beq.n	80044ea <PE_StateMachine_VDM+0x4b6>
 80044c4:	280f      	cmp	r0, #15
 80044c6:	d113      	bne.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044c8:	f000 fb3c 	bl	8004b44 <.text_35>
 80044cc:	2000      	movs	r0, #0
 80044ce:	f899 1000 	ldrb.w	r1, [r9]
 80044d2:	4288      	cmp	r0, r1
 80044d4:	d20f      	bcs.n	80044f6 <PE_StateMachine_VDM+0x4c2>
 80044d6:	f204 4294 	addw	r2, r4, #1172	; 0x494
 80044da:	1c6d      	adds	r5, r5, #1
 80044dc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80044e0:	aa04      	add	r2, sp, #16
 80044e2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 80044e6:	1c40      	adds	r0, r0, #1
 80044e8:	e7f1      	b.n	80044ce <PE_StateMachine_VDM+0x49a>
 80044ea:	f000 fb1a 	bl	8004b22 <.text_31>
 80044ee:	e001      	b.n	80044f4 <PE_StateMachine_VDM+0x4c0>
 80044f0:	f000 fb1b 	bl	8004b2a <.text_32>
 80044f4:	6030      	str	r0, [r6, #0]
 80044f6:	6831      	ldr	r1, [r6, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	2203      	movs	r2, #3
 80044fc:	b2ed      	uxtb	r5, r5
 80044fe:	9103      	str	r1, [sp, #12]
 8004500:	9002      	str	r0, [sp, #8]
 8004502:	9201      	str	r2, [sp, #4]
 8004504:	9500      	str	r5, [sp, #0]
 8004506:	ab03      	add	r3, sp, #12
 8004508:	7839      	ldrb	r1, [r7, #0]
 800450a:	220f      	movs	r2, #15
 800450c:	f000 fba8 	bl	8004c60 <.text_44>
 8004510:	e28a      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004512:	6830      	ldr	r0, [r6, #0]
 8004514:	f36a 0004 	bfi	r0, sl, #0, #5
 8004518:	6030      	str	r0, [r6, #0]
 800451a:	4633      	mov	r3, r6
 800451c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004520:	6030      	str	r0, [r6, #0]
 8004522:	6860      	ldr	r0, [r4, #4]
 8004524:	6802      	ldr	r2, [r0, #0]
 8004526:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800452a:	6832      	ldr	r2, [r6, #0]
 800452c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004530:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004534:	6032      	str	r2, [r6, #0]
 8004536:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004540:	6032      	str	r2, [r6, #0]
 8004542:	f361 421f 	bfi	r2, r1, #16, #16
 8004546:	6032      	str	r2, [r6, #0]
 8004548:	f000 fb7e 	bl	8004c48 <.text_42+0x6>
 800454c:	bf1d      	ittte	ne
 800454e:	6960      	ldrne	r0, [r4, #20]
 8004550:	0880      	lsrne	r0, r0, #2
 8004552:	f000 0001 	andne.w	r0, r0, #1
 8004556:	2002      	moveq	r0, #2
 8004558:	f000 fa80 	bl	8004a5c <.text_24>
 800455c:	2087      	movs	r0, #135	; 0x87
 800455e:	f000 fb21 	bl	8004ba4 <.text_38>
 8004562:	2800      	cmp	r0, #0
 8004564:	d1d4      	bne.n	8004510 <PE_StateMachine_VDM+0x4dc>
 8004566:	2050      	movs	r0, #80	; 0x50
 8004568:	e0a1      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800456a:	f000 fa6f 	bl	8004a4c <.text_22>
 800456e:	f000 fa69 	bl	8004a44 <.text_21>
 8004572:	d163      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004574:	8829      	ldrh	r1, [r5, #0]
 8004576:	0bc8      	lsrs	r0, r1, #15
 8004578:	d160      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800457a:	f000 fa5f 	bl	8004a3c <.text_20>
 800457e:	d062      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004580:	f000 fa67 	bl	8004a52 <.text_23>
 8004584:	d15a      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004586:	2a14      	cmp	r2, #20
 8004588:	d001      	beq.n	800458e <PE_StateMachine_VDM+0x55a>
 800458a:	f000 fb11 	bl	8004bb0 <.text_39>
 800458e:	6868      	ldr	r0, [r5, #4]
 8004590:	7887      	ldrb	r7, [r0, #2]
 8004592:	f007 011f 	and.w	r1, r7, #31
 8004596:	2901      	cmp	r1, #1
 8004598:	d150      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800459a:	f3c7 1081 	ubfx	r0, r7, #6, #2
 800459e:	2800      	cmp	r0, #0
 80045a0:	d051      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80045a2:	68e1      	ldr	r1, [r4, #12]
 80045a4:	6948      	ldr	r0, [r1, #20]
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f000 8202 	beq.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045ac:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80045b0:	2801      	cmp	r0, #1
 80045b2:	f040 81fd 	bne.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045b6:	6868      	ldr	r0, [r5, #4]
 80045b8:	1d81      	adds	r1, r0, #6
 80045ba:	7c20      	ldrb	r0, [r4, #16]
 80045bc:	aa08      	add	r2, sp, #32
 80045be:	f000 fbb5 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80045c2:	b950      	cbnz	r0, 80045da <PE_StateMachine_VDM+0x5a6>
 80045c4:	68e5      	ldr	r5, [r4, #12]
 80045c6:	7c20      	ldrb	r0, [r4, #16]
 80045c8:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80045cc:	ab08      	add	r3, sp, #32
 80045ce:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80045d2:	2100      	movs	r1, #0
 80045d4:	47c0      	blx	r8
 80045d6:	2151      	movs	r1, #81	; 0x51
 80045d8:	e0a3      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045da:	211b      	movs	r1, #27
 80045dc:	e0a1      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045de:	f000 fa9a 	bl	8004b16 <.text_30>
 80045e2:	f368 0004 	bfi	r0, r8, #0, #5
 80045e6:	6030      	str	r0, [r6, #0]
 80045e8:	f000 fa64 	bl	8004ab4 <.text_28>
 80045ec:	f000 fb29 	bl	8004c42 <.text_42>
 80045f0:	bf1d      	ittte	ne
 80045f2:	6960      	ldrne	r0, [r4, #20]
 80045f4:	0880      	lsrne	r0, r0, #2
 80045f6:	f000 0001 	andne.w	r0, r0, #1
 80045fa:	2002      	moveq	r0, #2
 80045fc:	f000 fa2e 	bl	8004a5c <.text_24>
 8004600:	2089      	movs	r0, #137	; 0x89
 8004602:	f000 facf 	bl	8004ba4 <.text_38>
 8004606:	2800      	cmp	r0, #0
 8004608:	d153      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 800460a:	2052      	movs	r0, #82	; 0x52
 800460c:	e04f      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800460e:	f000 fa1d 	bl	8004a4c <.text_22>
 8004612:	f000 fa17 	bl	8004a44 <.text_21>
 8004616:	d111      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004618:	8829      	ldrh	r1, [r5, #0]
 800461a:	0bc8      	lsrs	r0, r1, #15
 800461c:	d10e      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800461e:	f000 fa0d 	bl	8004a3c <.text_20>
 8004622:	d010      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004624:	f000 fa15 	bl	8004a52 <.text_23>
 8004628:	d108      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800462a:	2a14      	cmp	r2, #20
 800462c:	d001      	beq.n	8004632 <PE_StateMachine_VDM+0x5fe>
 800462e:	f000 fabf 	bl	8004bb0 <.text_39>
 8004632:	6868      	ldr	r0, [r5, #4]
 8004634:	7886      	ldrb	r6, [r0, #2]
 8004636:	f006 011f 	and.w	r1, r6, #31
 800463a:	2902      	cmp	r1, #2
 800463c:	f040 8140 	bne.w	80048c0 <PE_StateMachine_VDM+0x88c>
 8004640:	f3c6 1081 	ubfx	r0, r6, #6, #2
 8004644:	2800      	cmp	r0, #0
 8004646:	f000 813b 	beq.w	80048c0 <PE_StateMachine_VDM+0x88c>
 800464a:	68e1      	ldr	r1, [r4, #12]
 800464c:	6988      	ldr	r0, [r1, #24]
 800464e:	2800      	cmp	r0, #0
 8004650:	d06a      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004652:	6868      	ldr	r0, [r5, #4]
 8004654:	1d81      	adds	r1, r0, #6
 8004656:	7c20      	ldrb	r0, [r4, #16]
 8004658:	aa08      	add	r2, sp, #32
 800465a:	f000 fc05 	bl	8004e68 <PE_SVDM_CheckSVIDs>
 800465e:	68e5      	ldr	r5, [r4, #12]
 8004660:	7839      	ldrb	r1, [r7, #0]
 8004662:	7c20      	ldrb	r0, [r4, #16]
 8004664:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8004668:	ab08      	add	r3, sp, #32
 800466a:	f3c6 1281 	ubfx	r2, r6, #6, #2
 800466e:	47c0      	blx	r8
 8004670:	2153      	movs	r1, #83	; 0x53
 8004672:	e056      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 8004674:	6831      	ldr	r1, [r6, #0]
 8004676:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800467a:	6031      	str	r1, [r6, #0]
 800467c:	4633      	mov	r3, r6
 800467e:	f360 0104 	bfi	r1, r0, #0, #5
 8004682:	6031      	str	r1, [r6, #0]
 8004684:	8930      	ldrh	r0, [r6, #8]
 8004686:	f360 411f 	bfi	r1, r0, #16, #16
 800468a:	f000 f9f1 	bl	8004a70 <.text_26>
 800468e:	f000 fad8 	bl	8004c42 <.text_42>
 8004692:	bf1d      	ittte	ne
 8004694:	6960      	ldrne	r0, [r4, #20]
 8004696:	0880      	lsrne	r0, r0, #2
 8004698:	f000 0001 	andne.w	r0, r0, #1
 800469c:	2002      	moveq	r0, #2
 800469e:	f000 f9dd 	bl	8004a5c <.text_24>
 80046a2:	208b      	movs	r0, #139	; 0x8b
 80046a4:	f000 fa7e 	bl	8004ba4 <.text_38>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d102      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 80046ac:	2053      	movs	r0, #83	; 0x53
 80046ae:	f000 f9bf 	bl	8004a30 <.text_19>
 80046b2:	e1b9      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80046b4:	f000 f9ca 	bl	8004a4c <.text_22>
 80046b8:	f000 f9c4 	bl	8004a44 <.text_21>
 80046bc:	d1be      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046be:	8829      	ldrh	r1, [r5, #0]
 80046c0:	0bc8      	lsrs	r0, r1, #15
 80046c2:	d1bb      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046c4:	f000 f9ba 	bl	8004a3c <.text_20>
 80046c8:	d0bd      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ca:	f000 f9c2 	bl	8004a52 <.text_23>
 80046ce:	d1b5      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046d0:	2a14      	cmp	r2, #20
 80046d2:	d001      	beq.n	80046d8 <PE_StateMachine_VDM+0x6a4>
 80046d4:	f000 fa6c 	bl	8004bb0 <.text_39>
 80046d8:	6868      	ldr	r0, [r5, #4]
 80046da:	f890 9002 	ldrb.w	r9, [r0, #2]
 80046de:	f009 011f 	and.w	r1, r9, #31
 80046e2:	2903      	cmp	r1, #3
 80046e4:	d1aa      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046e6:	f3c9 1081 	ubfx	r0, r9, #6, #2
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d0ab      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ee:	68e1      	ldr	r1, [r4, #12]
 80046f0:	69c8      	ldr	r0, [r1, #28]
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d018      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 80046f6:	6868      	ldr	r0, [r5, #4]
 80046f8:	6831      	ldr	r1, [r6, #0]
 80046fa:	1d82      	adds	r2, r0, #6
 80046fc:	7c20      	ldrb	r0, [r4, #16]
 80046fe:	ab08      	add	r3, sp, #32
 8004700:	0c09      	lsrs	r1, r1, #16
 8004702:	f000 fbe5 	bl	8004ed0 <PE_SVDM_CheckModes>
 8004706:	68e5      	ldr	r5, [r4, #12]
 8004708:	7839      	ldrb	r1, [r7, #0]
 800470a:	7c20      	ldrb	r0, [r4, #16]
 800470c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8004710:	ab08      	add	r3, sp, #32
 8004712:	f3c9 1281 	ubfx	r2, r9, #6, #2
 8004716:	47c0      	blx	r8
 8004718:	f3c9 1081 	ubfx	r0, r9, #6, #2
 800471c:	2801      	cmp	r0, #1
 800471e:	d103      	bne.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004720:	2154      	movs	r1, #84	; 0x54
 8004722:	7c20      	ldrb	r0, [r4, #16]
 8004724:	f7fb ff17 	bl	8000556 <USBPD_PE_Notification>
 8004728:	e142      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 800472a:	f000 f9f4 	bl	8004b16 <.text_30>
 800472e:	f362 0004 	bfi	r0, r2, #0, #5
 8004732:	6030      	str	r0, [r6, #0]
 8004734:	f000 f9cf 	bl	8004ad6 <.text_29>
 8004738:	bf1d      	ittte	ne
 800473a:	6960      	ldrne	r0, [r4, #20]
 800473c:	0880      	lsrne	r0, r0, #2
 800473e:	f000 0001 	andne.w	r0, r0, #1
 8004742:	2002      	moveq	r0, #2
 8004744:	f000 f98a 	bl	8004a5c <.text_24>
 8004748:	208c      	movs	r0, #140	; 0x8c
 800474a:	f000 fa2b 	bl	8004ba4 <.text_38>
 800474e:	2800      	cmp	r0, #0
 8004750:	d1af      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 8004752:	2054      	movs	r0, #84	; 0x54
 8004754:	7720      	strb	r0, [r4, #28]
 8004756:	2134      	movs	r1, #52	; 0x34
 8004758:	e067      	b.n	800482a <PE_StateMachine_VDM+0x7f6>
 800475a:	f000 f977 	bl	8004a4c <.text_22>
 800475e:	f000 f971 	bl	8004a44 <.text_21>
 8004762:	f04f 0934 	mov.w	r9, #52	; 0x34
 8004766:	d16d      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004768:	8829      	ldrh	r1, [r5, #0]
 800476a:	0bc8      	lsrs	r0, r1, #15
 800476c:	d16a      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800476e:	f000 f965 	bl	8004a3c <.text_20>
 8004772:	d06d      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 8004774:	f000 f96d 	bl	8004a52 <.text_23>
 8004778:	d164      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800477a:	2a14      	cmp	r2, #20
 800477c:	d001      	beq.n	8004782 <PE_StateMachine_VDM+0x74e>
 800477e:	f000 fa17 	bl	8004bb0 <.text_39>
 8004782:	2000      	movs	r0, #0
 8004784:	7720      	strb	r0, [r4, #28]
 8004786:	6869      	ldr	r1, [r5, #4]
 8004788:	f891 a002 	ldrb.w	sl, [r1, #2]
 800478c:	f00a 001f 	and.w	r0, sl, #31
 8004790:	2804      	cmp	r0, #4
 8004792:	d157      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004794:	f3ca 1081 	ubfx	r0, sl, #6, #2
 8004798:	2800      	cmp	r0, #0
 800479a:	d059      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 800479c:	2801      	cmp	r0, #1
 800479e:	d00a      	beq.n	80047b6 <PE_StateMachine_VDM+0x782>
 80047a0:	d312      	bcc.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047a2:	2803      	cmp	r0, #3
 80047a4:	d00a      	beq.n	80047bc <PE_StateMachine_VDM+0x788>
 80047a6:	bf3f      	itttt	cc
 80047a8:	6960      	ldrcc	r0, [r4, #20]
 80047aa:	f420 70e0 	biccc.w	r0, r0, #448	; 0x1c0
 80047ae:	6160      	strcc	r0, [r4, #20]
 80047b0:	f04f 0936 	movcc.w	r9, #54	; 0x36
 80047b4:	e008      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047b6:	f04f 0935 	mov.w	r9, #53	; 0x35
 80047ba:	e005      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047bc:	6960      	ldr	r0, [r4, #20]
 80047be:	f420 70e0 	bic.w	r0, r0, #448	; 0x1c0
 80047c2:	6160      	str	r0, [r4, #20]
 80047c4:	f04f 0937 	mov.w	r9, #55	; 0x37
 80047c8:	7c20      	ldrb	r0, [r4, #16]
 80047ca:	4649      	mov	r1, r9
 80047cc:	f7fb fec3 	bl	8000556 <USBPD_PE_Notification>
 80047d0:	68e1      	ldr	r1, [r4, #12]
 80047d2:	6a08      	ldr	r0, [r1, #32]
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d00d      	beq.n	80047f4 <PE_StateMachine_VDM+0x7c0>
 80047d8:	6830      	ldr	r0, [r6, #0]
 80047da:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80047de:	9000      	str	r0, [sp, #0]
 80047e0:	f3ca 1281 	ubfx	r2, sl, #6, #2
 80047e4:	68e5      	ldr	r5, [r4, #12]
 80047e6:	6833      	ldr	r3, [r6, #0]
 80047e8:	7839      	ldrb	r1, [r7, #0]
 80047ea:	7c20      	ldrb	r0, [r4, #16]
 80047ec:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	47c0      	blx	r8
 80047f4:	e0dc      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80047f6:	6830      	ldr	r0, [r6, #0]
 80047f8:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80047fc:	6030      	str	r0, [r6, #0]
 80047fe:	f363 0004 	bfi	r0, r3, #0, #5
 8004802:	6030      	str	r0, [r6, #0]
 8004804:	4633      	mov	r3, r6
 8004806:	f000 f966 	bl	8004ad6 <.text_29>
 800480a:	bf1d      	ittte	ne
 800480c:	6960      	ldrne	r0, [r4, #20]
 800480e:	0880      	lsrne	r0, r0, #2
 8004810:	f000 0001 	andne.w	r0, r0, #1
 8004814:	2002      	moveq	r0, #2
 8004816:	f000 f921 	bl	8004a5c <.text_24>
 800481a:	208d      	movs	r0, #141	; 0x8d
 800481c:	f000 f9c2 	bl	8004ba4 <.text_38>
 8004820:	2800      	cmp	r0, #0
 8004822:	d10a      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 8004824:	2055      	movs	r0, #85	; 0x55
 8004826:	7720      	strb	r0, [r4, #28]
 8004828:	2155      	movs	r1, #85	; 0x55
 800482a:	7c20      	ldrb	r0, [r4, #16]
 800482c:	f7fb fe93 	bl	8000556 <USBPD_PE_Notification>
 8004830:	f248 0032 	movw	r0, #32818	; 0x8032
 8004834:	83e0      	strh	r0, [r4, #30]
 8004836:	f04f 0832 	mov.w	r8, #50	; 0x32
 800483a:	e0f5      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800483c:	f000 f906 	bl	8004a4c <.text_22>
 8004840:	f000 f900 	bl	8004a44 <.text_21>
 8004844:	d13c      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004846:	8829      	ldrh	r1, [r5, #0]
 8004848:	0bc8      	lsrs	r0, r1, #15
 800484a:	d139      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 800484c:	f000 f8f6 	bl	8004a3c <.text_20>
 8004850:	d036      	beq.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004852:	f000 f8fe 	bl	8004a52 <.text_23>
 8004856:	d133      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004858:	2a14      	cmp	r2, #20
 800485a:	d001      	beq.n	8004860 <PE_StateMachine_VDM+0x82c>
 800485c:	f000 f9a8 	bl	8004bb0 <.text_39>
 8004860:	2000      	movs	r0, #0
 8004862:	7720      	strb	r0, [r4, #28]
 8004864:	6869      	ldr	r1, [r5, #4]
 8004866:	f891 9002 	ldrb.w	r9, [r1, #2]
 800486a:	f009 001f 	and.w	r0, r9, #31
 800486e:	2805      	cmp	r0, #5
 8004870:	d126      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004872:	f3c9 1081 	ubfx	r0, r9, #6, #2
 8004876:	b318      	cbz	r0, 80048c0 <PE_StateMachine_VDM+0x88c>
 8004878:	2801      	cmp	r0, #1
 800487a:	d004      	beq.n	8004886 <PE_StateMachine_VDM+0x852>
 800487c:	d309      	bcc.n	8004892 <PE_StateMachine_VDM+0x85e>
 800487e:	2803      	cmp	r0, #3
 8004880:	d005      	beq.n	800488e <PE_StateMachine_VDM+0x85a>
 8004882:	d302      	bcc.n	800488a <PE_StateMachine_VDM+0x856>
 8004884:	e005      	b.n	8004892 <PE_StateMachine_VDM+0x85e>
 8004886:	2156      	movs	r1, #86	; 0x56
 8004888:	e004      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488a:	2157      	movs	r1, #87	; 0x57
 800488c:	e002      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488e:	2158      	movs	r1, #88	; 0x58
 8004890:	e000      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 8004892:	2155      	movs	r1, #85	; 0x55
 8004894:	7c20      	ldrb	r0, [r4, #16]
 8004896:	f7fb fe5e 	bl	8000556 <USBPD_PE_Notification>
 800489a:	68e1      	ldr	r1, [r4, #12]
 800489c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800489e:	2800      	cmp	r0, #0
 80048a0:	d00d      	beq.n	80048be <PE_StateMachine_VDM+0x88a>
 80048a2:	6830      	ldr	r0, [r6, #0]
 80048a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80048a8:	9000      	str	r0, [sp, #0]
 80048aa:	f3c9 1281 	ubfx	r2, r9, #6, #2
 80048ae:	68e5      	ldr	r5, [r4, #12]
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	7839      	ldrb	r1, [r7, #0]
 80048b4:	7c20      	ldrb	r0, [r4, #16]
 80048b6:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	47c0      	blx	r8
 80048be:	e077      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80048c0:	7828      	ldrb	r0, [r5, #0]
 80048c2:	f000 001f 	and.w	r0, r0, #31
 80048c6:	2810      	cmp	r0, #16
 80048c8:	d07a      	beq.n	80049c0 <PE_StateMachine_VDM+0x98c>
 80048ca:	f000 f932 	bl	8004b32 <.text_33>
 80048ce:	d1b4      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 80048d0:	e089      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80048d2:	2100      	movs	r1, #0
 80048d4:	f88d 100c 	strb.w	r1, [sp, #12]
 80048d8:	f000 f939 	bl	8004b4e <.text_36>
 80048dc:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80048de:	b145      	cbz	r5, 80048f2 <PE_StateMachine_VDM+0x8be>
 80048e0:	a805      	add	r0, sp, #20
 80048e2:	9000      	str	r0, [sp, #0]
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	7832      	ldrb	r2, [r6, #0]
 80048e8:	7839      	ldrb	r1, [r7, #0]
 80048ea:	7c20      	ldrb	r0, [r4, #16]
 80048ec:	f002 021f 	and.w	r2, r2, #31
 80048f0:	47a8      	blx	r5
 80048f2:	f000 f94b 	bl	8004b8c <.text_37>
 80048f6:	bf1d      	ittte	ne
 80048f8:	6960      	ldrne	r0, [r4, #20]
 80048fa:	0880      	lsrne	r0, r0, #2
 80048fc:	f000 0001 	andne.w	r0, r0, #1
 8004900:	2002      	moveq	r0, #2
 8004902:	9002      	str	r0, [sp, #8]
 8004904:	208f      	movs	r0, #143	; 0x8f
 8004906:	f000 f9a5 	bl	8004c54 <.text_43>
 800490a:	2800      	cmp	r0, #0
 800490c:	d102      	bne.n	8004914 <PE_StateMachine_VDM+0x8e0>
 800490e:	205a      	movs	r0, #90	; 0x5a
 8004910:	f000 f88e 	bl	8004a30 <.text_19>
 8004914:	e086      	b.n	8004a24 <PE_StateMachine_VDM+0x9f0>
 8004916:	8828      	ldrh	r0, [r5, #0]
 8004918:	0b00      	lsrs	r0, r0, #12
 800491a:	f000 0007 	and.w	r0, r0, #7
 800491e:	1e41      	subs	r1, r0, #1
 8004920:	f88d 1004 	strb.w	r1, [sp, #4]
 8004924:	f000 f892 	bl	8004a4c <.text_22>
 8004928:	f000 f88c 	bl	8004a44 <.text_21>
 800492c:	d143      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 800492e:	8829      	ldrh	r1, [r5, #0]
 8004930:	0bc8      	lsrs	r0, r1, #15
 8004932:	d140      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004934:	f000 f882 	bl	8004a3c <.text_20>
 8004938:	d03d      	beq.n	80049b6 <PE_StateMachine_VDM+0x982>
 800493a:	f000 f88a 	bl	8004a52 <.text_23>
 800493e:	d13a      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004940:	2a14      	cmp	r2, #20
 8004942:	d001      	beq.n	8004948 <PE_StateMachine_VDM+0x914>
 8004944:	f000 f934 	bl	8004bb0 <.text_39>
 8004948:	6868      	ldr	r0, [r5, #4]
 800494a:	7882      	ldrb	r2, [r0, #2]
 800494c:	6870      	ldr	r0, [r6, #4]
 800494e:	f002 011f 	and.w	r1, r2, #31
 8004952:	4281      	cmp	r1, r0
 8004954:	d12f      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004956:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800495a:	b360      	cbz	r0, 80049b6 <PE_StateMachine_VDM+0x982>
 800495c:	68e1      	ldr	r1, [r4, #12]
 800495e:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8004960:	b330      	cbz	r0, 80049b0 <PE_StateMachine_VDM+0x97c>
 8004962:	2000      	movs	r0, #0
 8004964:	e015      	b.n	8004992 <PE_StateMachine_VDM+0x95e>
 8004966:	6869      	ldr	r1, [r5, #4]
 8004968:	0083      	lsls	r3, r0, #2
 800496a:	eb01 0803 	add.w	r8, r1, r3
 800496e:	3108      	adds	r1, #8
 8004970:	f898 c006 	ldrb.w	ip, [r8, #6]
 8004974:	f898 e007 	ldrb.w	lr, [r8, #7]
 8004978:	5ccb      	ldrb	r3, [r1, r3]
 800497a:	f898 1009 	ldrb.w	r1, [r8, #9]
 800497e:	eb0c 260e 	add.w	r6, ip, lr, lsl #8
 8004982:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8004986:	ab02      	add	r3, sp, #8
 8004988:	eb06 6601 	add.w	r6, r6, r1, lsl #24
 800498c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8004990:	1c40      	adds	r0, r0, #1
 8004992:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004996:	4288      	cmp	r0, r1
 8004998:	d3e5      	bcc.n	8004966 <PE_StateMachine_VDM+0x932>
 800499a:	a802      	add	r0, sp, #8
 800499c:	9000      	str	r0, [sp, #0]
 800499e:	ab01      	add	r3, sp, #4
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	7839      	ldrb	r1, [r7, #0]
 80049a4:	7c20      	ldrb	r0, [r4, #16]
 80049a6:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 80049aa:	f002 021f 	and.w	r2, r2, #31
 80049ae:	47c0      	blx	r8
 80049b0:	2000      	movs	r0, #0
 80049b2:	83e0      	strh	r0, [r4, #30]
 80049b4:	e017      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80049b6:	7829      	ldrb	r1, [r5, #0]
 80049b8:	f001 011f 	and.w	r1, r1, #31
 80049bc:	2910      	cmp	r1, #16
 80049be:	d10f      	bne.n	80049e0 <PE_StateMachine_VDM+0x9ac>
 80049c0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80049c2:	7801      	ldrb	r1, [r0, #0]
 80049c4:	2914      	cmp	r1, #20
 80049c6:	d001      	beq.n	80049cc <PE_StateMachine_VDM+0x998>
 80049c8:	f000 f8f2 	bl	8004bb0 <.text_39>
 80049cc:	2000      	movs	r0, #0
 80049ce:	83e0      	strh	r0, [r4, #30]
 80049d0:	2103      	movs	r1, #3
 80049d2:	7461      	strb	r1, [r4, #17]
 80049d4:	4680      	mov	r8, r0
 80049d6:	7c20      	ldrb	r0, [r4, #16]
 80049d8:	2159      	movs	r1, #89	; 0x59
 80049da:	f7fb fdbc 	bl	8000556 <USBPD_PE_Notification>
 80049de:	e023      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e0:	f000 f8a7 	bl	8004b32 <.text_33>
 80049e4:	d120      	bne.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e6:	2103      	movs	r1, #3
 80049e8:	7461      	strb	r1, [r4, #17]
 80049ea:	f04f 0800 	mov.w	r8, #0
 80049ee:	e01b      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049f0:	2000      	movs	r0, #0
 80049f2:	f88d 000c 	strb.w	r0, [sp, #12]
 80049f6:	f000 f8aa 	bl	8004b4e <.text_36>
 80049fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80049fc:	b11b      	cbz	r3, 8004a06 <PE_StateMachine_VDM+0x9d2>
 80049fe:	7c20      	ldrb	r0, [r4, #16]
 8004a00:	aa05      	add	r2, sp, #20
 8004a02:	a903      	add	r1, sp, #12
 8004a04:	4798      	blx	r3
 8004a06:	f000 f8c1 	bl	8004b8c <.text_37>
 8004a0a:	bf1d      	ittte	ne
 8004a0c:	6960      	ldrne	r0, [r4, #20]
 8004a0e:	0880      	lsrne	r0, r0, #2
 8004a10:	f000 0001 	andne.w	r0, r0, #1
 8004a14:	2002      	moveq	r0, #2
 8004a16:	9002      	str	r0, [sp, #8]
 8004a18:	2003      	movs	r0, #3
 8004a1a:	f000 f91b 	bl	8004c54 <.text_43>
 8004a1e:	b908      	cbnz	r0, 8004a24 <PE_StateMachine_VDM+0x9f0>
 8004a20:	205a      	movs	r0, #90	; 0x5a
 8004a22:	7720      	strb	r0, [r4, #28]
 8004a24:	2100      	movs	r1, #0
 8004a26:	7079      	strb	r1, [r7, #1]
 8004a28:	4640      	mov	r0, r8
 8004a2a:	b01c      	add	sp, #112	; 0x70
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a30 <.text_19>:
 8004a30:	7720      	strb	r0, [r4, #28]
 8004a32:	f8a4 901e 	strh.w	r9, [r4, #30]
 8004a36:	f04f 081e 	mov.w	r8, #30
 8004a3a:	4770      	bx	lr

08004a3c <.text_20>:
 8004a3c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8004a40:	2800      	cmp	r0, #0
 8004a42:	4770      	bx	lr

08004a44 <.text_21>:
 8004a44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a46:	780a      	ldrb	r2, [r1, #0]
 8004a48:	4282      	cmp	r2, r0
 8004a4a:	4770      	bx	lr

08004a4c <.text_22>:
 8004a4c:	7838      	ldrb	r0, [r7, #0]
 8004a4e:	f7fb bfe1 	b.w	8000a14 <PE_Convert_SOPRxEvent>

08004a52 <.text_23>:
 8004a52:	7828      	ldrb	r0, [r5, #0]
 8004a54:	f000 001f 	and.w	r0, r0, #31
 8004a58:	280f      	cmp	r0, #15
 8004a5a:	4770      	bx	lr

08004a5c <.text_24>:
 8004a5c:	9002      	str	r0, [sp, #8]
 8004a5e:	f8cd a000 	str.w	sl, [sp]
 8004a62:	4770      	bx	lr

08004a64 <.text_25>:
 8004a64:	6860      	ldr	r0, [r4, #4]
 8004a66:	7802      	ldrb	r2, [r0, #0]
 8004a68:	f002 020b 	and.w	r2, r2, #11
 8004a6c:	2a09      	cmp	r2, #9
 8004a6e:	4770      	bx	lr

08004a70 <.text_26>:
 8004a70:	6031      	str	r1, [r6, #0]
 8004a72:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	6860      	ldr	r0, [r4, #4]
 8004a7a:	6801      	ldr	r1, [r0, #0]
 8004a7c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004a80:	6831      	ldr	r1, [r6, #0]
 8004a82:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004a86:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004a8a:	6031      	str	r1, [r6, #0]
 8004a8c:	4770      	bx	lr

08004a8e <.text_27>:
 8004a8e:	6030      	str	r0, [r6, #0]
 8004a90:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004a94:	6030      	str	r0, [r6, #0]
 8004a96:	6860      	ldr	r0, [r4, #4]
 8004a98:	6832      	ldr	r2, [r6, #0]
 8004a9a:	6801      	ldr	r1, [r0, #0]
 8004a9c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aa0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004aa4:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004aa8:	6032      	str	r2, [r6, #0]
 8004aaa:	6860      	ldr	r0, [r4, #4]
 8004aac:	6801      	ldr	r1, [r0, #0]
 8004aae:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8004ab2:	4770      	bx	lr

08004ab4 <.text_28>:
 8004ab4:	f361 401f 	bfi	r0, r1, #16, #16
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004abe:	6030      	str	r0, [r6, #0]
 8004ac0:	6860      	ldr	r0, [r4, #4]
 8004ac2:	6801      	ldr	r1, [r0, #0]
 8004ac4:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004ac8:	6831      	ldr	r1, [r6, #0]
 8004aca:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004ace:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004ad2:	6031      	str	r1, [r6, #0]
 8004ad4:	4770      	bx	lr

08004ad6 <.text_29>:
 8004ad6:	8931      	ldrh	r1, [r6, #8]
 8004ad8:	f361 401f 	bfi	r0, r1, #16, #16
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004ae2:	6030      	str	r0, [r6, #0]
 8004ae4:	6860      	ldr	r0, [r4, #4]
 8004ae6:	6832      	ldr	r2, [r6, #0]
 8004ae8:	6801      	ldr	r1, [r0, #0]
 8004aea:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aee:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004af2:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004af6:	6032      	str	r2, [r6, #0]
 8004af8:	6960      	ldr	r0, [r4, #20]
 8004afa:	6831      	ldr	r1, [r6, #0]
 8004afc:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8004b00:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004b04:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8004b08:	6031      	str	r1, [r6, #0]
 8004b0a:	6860      	ldr	r0, [r4, #4]
 8004b0c:	6801      	ldr	r1, [r0, #0]
 8004b0e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004b12:	2800      	cmp	r0, #0
 8004b14:	4770      	bx	lr

08004b16 <.text_30>:
 8004b16:	6830      	ldr	r0, [r6, #0]
 8004b18:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004b1c:	6030      	str	r0, [r6, #0]
 8004b1e:	4633      	mov	r3, r6
 8004b20:	4770      	bx	lr

08004b22 <.text_31>:
 8004b22:	6830      	ldr	r0, [r6, #0]
 8004b24:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8004b28:	4770      	bx	lr

08004b2a <.text_32>:
 8004b2a:	6830      	ldr	r0, [r6, #0]
 8004b2c:	f368 1087 	bfi	r0, r8, #6, #2
 8004b30:	4770      	bx	lr

08004b32 <.text_33>:
 8004b32:	8be0      	ldrh	r0, [r4, #30]
 8004b34:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b38:	4770      	bx	lr

08004b3a <.text_34>:
 8004b3a:	8be0      	ldrh	r0, [r4, #30]
 8004b3c:	2501      	movs	r5, #1
 8004b3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b42:	4770      	bx	lr

08004b44 <.text_35>:
 8004b44:	6830      	ldr	r0, [r6, #0]
 8004b46:	f36a 1087 	bfi	r0, sl, #6, #2
 8004b4a:	6030      	str	r0, [r6, #0]
 8004b4c:	4770      	bx	lr

08004b4e <.text_36>:
 8004b4e:	6830      	ldr	r0, [r6, #0]
 8004b50:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004b54:	6030      	str	r0, [r6, #0]
 8004b56:	6871      	ldr	r1, [r6, #4]
 8004b58:	f361 0004 	bfi	r0, r1, #0, #5
 8004b5c:	6030      	str	r0, [r6, #0]
 8004b5e:	8931      	ldrh	r1, [r6, #8]
 8004b60:	f361 401f 	bfi	r0, r1, #16, #16
 8004b64:	6030      	str	r0, [r6, #0]
 8004b66:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004b6a:	6030      	str	r0, [r6, #0]
 8004b6c:	6860      	ldr	r0, [r4, #4]
 8004b6e:	6801      	ldr	r1, [r0, #0]
 8004b70:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004b74:	6831      	ldr	r1, [r6, #0]
 8004b76:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004b7a:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004b7e:	6031      	str	r1, [r6, #0]
 8004b80:	f36a 210a 	bfi	r1, sl, #8, #3
 8004b84:	6031      	str	r1, [r6, #0]
 8004b86:	9104      	str	r1, [sp, #16]
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	4770      	bx	lr

08004b8c <.text_37>:
 8004b8c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004b90:	1c40      	adds	r0, r0, #1
 8004b92:	f88d 000c 	strb.w	r0, [sp, #12]
 8004b96:	ab04      	add	r3, sp, #16
 8004b98:	6860      	ldr	r0, [r4, #4]
 8004b9a:	6801      	ldr	r1, [r0, #0]
 8004b9c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	4770      	bx	lr

08004ba4 <.text_38>:
 8004ba4:	9001      	str	r0, [sp, #4]
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	7839      	ldrb	r1, [r7, #0]
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7fc bc89 	b.w	80014c2 <PE_Send_DataMessage>

08004bb0 <.text_39>:
 8004bb0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bb2:	2014      	movs	r0, #20
 8004bb4:	7008      	strb	r0, [r1, #0]
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fb bef8 	b.w	80009ac <PE_Clear_RxEvent>

08004bbc <.text_40>:
 8004bbc:	6830      	ldr	r0, [r6, #0]
 8004bbe:	68e3      	ldr	r3, [r4, #12]
 8004bc0:	f3c0 2202 	ubfx	r2, r0, #8, #3
 8004bc4:	0c01      	lsrs	r1, r0, #16
 8004bc6:	7c20      	ldrb	r0, [r4, #16]
 8004bc8:	4770      	bx	lr

08004bca <PE_StateMachine_UVDM>:
 8004bca:	b570      	push	{r4, r5, r6, lr}
 8004bcc:	2914      	cmp	r1, #20
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	d134      	bne.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004bd4:	68e0      	ldr	r0, [r4, #12]
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	bf1c      	itt	ne
 8004bda:	6bc0      	ldrne	r0, [r0, #60]	; 0x3c
 8004bdc:	2800      	cmpne	r0, #0
 8004bde:	d02e      	beq.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004be0:	2100      	movs	r1, #0
 8004be2:	f88d 100c 	strb.w	r1, [sp, #12]
 8004be6:	ab06      	add	r3, sp, #24
 8004be8:	68e5      	ldr	r5, [r4, #12]
 8004bea:	7c20      	ldrb	r0, [r4, #16]
 8004bec:	6bee      	ldr	r6, [r5, #60]	; 0x3c
 8004bee:	aa03      	add	r2, sp, #12
 8004bf0:	a904      	add	r1, sp, #16
 8004bf2:	47b0      	blx	r6
 8004bf4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004bf8:	9804      	ldr	r0, [sp, #16]
 8004bfa:	1c49      	adds	r1, r1, #1
 8004bfc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004c00:	f88d 100c 	strb.w	r1, [sp, #12]
 8004c04:	9004      	str	r0, [sp, #16]
 8004c06:	f104 0531 	add.w	r5, r4, #49	; 0x31
 8004c0a:	9904      	ldr	r1, [sp, #16]
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	ab05      	add	r3, sp, #20
 8004c10:	f000 f81a 	bl	8004c48 <.text_42+0x6>
 8004c14:	bf1d      	ittte	ne
 8004c16:	6960      	ldrne	r0, [r4, #20]
 8004c18:	0880      	lsrne	r0, r0, #2
 8004c1a:	f000 0001 	andne.w	r0, r0, #1
 8004c1e:	2002      	moveq	r0, #2
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	2003      	movs	r0, #3
 8004c24:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c28:	9100      	str	r1, [sp, #0]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	7829      	ldrb	r1, [r5, #0]
 8004c30:	f000 f816 	bl	8004c60 <.text_44>
 8004c34:	b908      	cbnz	r0, 8004c3a <PE_StateMachine_UVDM+0x70>
 8004c36:	2059      	movs	r0, #89	; 0x59
 8004c38:	7720      	strb	r0, [r4, #28]
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	7069      	strb	r1, [r5, #1]
 8004c3e:	b00c      	add	sp, #48	; 0x30
 8004c40:	bd70      	pop	{r4, r5, r6, pc}

08004c42 <.text_42>:
 8004c42:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004c46:	6031      	str	r1, [r6, #0]
 8004c48:	6860      	ldr	r0, [r4, #4]
 8004c4a:	6801      	ldr	r1, [r0, #0]
 8004c4c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004c50:	2800      	cmp	r0, #0
 8004c52:	4770      	bx	lr

08004c54 <.text_43>:
 8004c54:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c58:	9100      	str	r1, [sp, #0]
 8004c5a:	9001      	str	r0, [sp, #4]
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	7839      	ldrb	r1, [r7, #0]

08004c60 <.text_44>:
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7fc bc2e 	b.w	80014c2 <PE_Send_DataMessage>

08004c66 <PE_Check_DataMessageVDM>:
 8004c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c68:	4605      	mov	r5, r0
 8004c6a:	6828      	ldr	r0, [r5, #0]
 8004c6c:	6841      	ldr	r1, [r0, #4]
 8004c6e:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004c72:	2800      	cmp	r0, #0
 8004c74:	bf1c      	itt	ne
 8004c76:	68e8      	ldrne	r0, [r5, #12]
 8004c78:	2800      	cmpne	r0, #0
 8004c7a:	d04e      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004c7c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004c7e:	7888      	ldrb	r0, [r1, #2]
 8004c80:	78ca      	ldrb	r2, [r1, #3]
 8004c82:	790b      	ldrb	r3, [r1, #4]
 8004c84:	7949      	ldrb	r1, [r1, #5]
 8004c86:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8004c8a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 8004c8e:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8004c92:	4601      	mov	r1, r0
 8004c94:	0bca      	lsrs	r2, r1, #15
 8004c96:	f012 0201 	ands.w	r2, r2, #1
 8004c9a:	d012      	beq.n	8004cc2 <PE_Check_DataMessageVDM+0x5c>
 8004c9c:	2a01      	cmp	r2, #1
 8004c9e:	bf02      	ittt	eq
 8004ca0:	f8c5 1250 	streq.w	r1, [r5, #592]	; 0x250
 8004ca4:	f3c0 1081 	ubfxeq	r0, r0, #6, #2
 8004ca8:	2800      	cmpeq	r0, #0
 8004caa:	d136      	bne.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cac:	6828      	ldr	r0, [r5, #0]
 8004cae:	6841      	ldr	r1, [r0, #4]
 8004cb0:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d030      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	e8bd 40f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, lr}
 8004cbe:	f7ff b939 	b.w	8003f34 <PE_Receive_SVDM>
 8004cc2:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004cc4:	0b00      	lsrs	r0, r0, #12
 8004cc6:	f000 0007 	and.w	r0, r0, #7
 8004cca:	1e42      	subs	r2, r0, #1
 8004ccc:	f885 24ac 	strb.w	r2, [r5, #1196]	; 0x4ac
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f205 4394 	addw	r3, r5, #1172	; 0x494
 8004cd6:	e00f      	b.n	8004cf8 <PE_Check_DataMessageVDM+0x92>
 8004cd8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004cda:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004cde:	7994      	ldrb	r4, [r2, #6]
 8004ce0:	79d6      	ldrb	r6, [r2, #7]
 8004ce2:	eb04 2706 	add.w	r7, r4, r6, lsl #8
 8004ce6:	7a14      	ldrb	r4, [r2, #8]
 8004ce8:	7a52      	ldrb	r2, [r2, #9]
 8004cea:	eb07 4704 	add.w	r7, r7, r4, lsl #16
 8004cee:	eb07 6702 	add.w	r7, r7, r2, lsl #24
 8004cf2:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8004cf6:	1c40      	adds	r0, r0, #1
 8004cf8:	f895 24ac 	ldrb.w	r2, [r5, #1196]	; 0x4ac
 8004cfc:	4290      	cmp	r0, r2
 8004cfe:	d3eb      	bcc.n	8004cd8 <PE_Check_DataMessageVDM+0x72>
 8004d00:	68e8      	ldr	r0, [r5, #12]
 8004d02:	2800      	cmp	r0, #0
 8004d04:	bf1c      	itt	ne
 8004d06:	6c04      	ldrne	r4, [r0, #64]	; 0x40
 8004d08:	2c00      	cmpne	r4, #0
 8004d0a:	d006      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d0c:	7c28      	ldrb	r0, [r5, #16]
 8004d0e:	f205 42ac 	addw	r2, r5, #1196	; 0x4ac
 8004d12:	47a0      	blx	r4
 8004d14:	b908      	cbnz	r0, 8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d16:	2003      	movs	r0, #3
 8004d18:	e006      	b.n	8004d28 <PE_Check_DataMessageVDM+0xc2>
 8004d1a:	6868      	ldr	r0, [r5, #4]
 8004d1c:	7801      	ldrb	r1, [r0, #0]
 8004d1e:	f001 0103 	and.w	r1, r1, #3
 8004d22:	2902      	cmp	r1, #2
 8004d24:	d101      	bne.n	8004d2a <PE_Check_DataMessageVDM+0xc4>
 8004d26:	2001      	movs	r0, #1
 8004d28:	7468      	strb	r0, [r5, #17]
 8004d2a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004d2c <PE_SVDM_CheckIdentity>:
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	f000 f8f3 	bl	8004f18 <.text_51>
 8004d32:	0b24      	lsrs	r4, r4, #12
 8004d34:	f004 0407 	and.w	r4, r4, #7
 8004d38:	1e65      	subs	r5, r4, #1
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	b2ee      	uxtb	r6, r5
 8004d3e:	2e03      	cmp	r6, #3
 8004d40:	f0c0 8081 	bcc.w	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004d44:	780c      	ldrb	r4, [r1, #0]
 8004d46:	784e      	ldrb	r6, [r1, #1]
 8004d48:	788f      	ldrb	r7, [r1, #2]
 8004d4a:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8004d4e:	78ce      	ldrb	r6, [r1, #3]
 8004d50:	eb04 4407 	add.w	r4, r4, r7, lsl #16
 8004d54:	eb04 6406 	add.w	r4, r4, r6, lsl #24
 8004d58:	6014      	str	r4, [r2, #0]
 8004d5a:	790f      	ldrb	r7, [r1, #4]
 8004d5c:	794e      	ldrb	r6, [r1, #5]
 8004d5e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004d62:	798f      	ldrb	r7, [r1, #6]
 8004d64:	eb06 4707 	add.w	r7, r6, r7, lsl #16
 8004d68:	79ce      	ldrb	r6, [r1, #7]
 8004d6a:	eb07 6606 	add.w	r6, r7, r6, lsl #24
 8004d6e:	6056      	str	r6, [r2, #4]
 8004d70:	7a0f      	ldrb	r7, [r1, #8]
 8004d72:	f891 c009 	ldrb.w	ip, [r1, #9]
 8004d76:	eb07 2e0c 	add.w	lr, r7, ip, lsl #8
 8004d7a:	7a8f      	ldrb	r7, [r1, #10]
 8004d7c:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8004d80:	eb0e 4707 	add.w	r7, lr, r7, lsl #16
 8004d84:	eb07 670c 	add.w	r7, r7, ip, lsl #24
 8004d88:	6097      	str	r7, [r2, #8]
 8004d8a:	2608      	movs	r6, #8
 8004d8c:	1eef      	subs	r7, r5, #3
 8004d8e:	f892 5020 	ldrb.w	r5, [r2, #32]
 8004d92:	f005 0ee0 	and.w	lr, r5, #224	; 0xe0
 8004d96:	b2fd      	uxtb	r5, r7
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	f882 e020 	strb.w	lr, [r2, #32]
 8004d9e:	d053      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004da0:	0ee4      	lsrs	r4, r4, #27
 8004da2:	1e7d      	subs	r5, r7, #1
 8004da4:	f004 0407 	and.w	r4, r4, #7
 8004da8:	2c05      	cmp	r4, #5
 8004daa:	d84c      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004dac:	e8df f004 	tbb	[pc, r4]
 8004db0:	2303030c 	.word	0x2303030c
 8004db4:	2f29      	.short	0x2f29
 8004db6:	f04e 0408 	orr.w	r4, lr, #8
 8004dba:	f000 f847 	bl	8004e4c <.text_47>
 8004dbe:	6194      	str	r4, [r2, #24]
 8004dc0:	462f      	mov	r7, r5
 8004dc2:	b2fc      	uxtb	r4, r7
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	d03f      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dc8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8004dca:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	d33a      	bcc.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dd2:	6810      	ldr	r0, [r2, #0]
 8004dd4:	0dc0      	lsrs	r0, r0, #23
 8004dd6:	f010 0007 	ands.w	r0, r0, #7
 8004dda:	d035      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004ddc:	1e40      	subs	r0, r0, #1
 8004dde:	2802      	cmp	r0, #2
 8004de0:	d831      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004de2:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004de6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004dea:	2800      	cmp	r0, #0
 8004dec:	bf1a      	itte	ne
 8004dee:	3608      	addne	r6, #8
 8004df0:	1e7f      	subne	r7, r7, #1
 8004df2:	1d36      	addeq	r6, r6, #4
 8004df4:	e011      	b.n	8004e1a <PE_SVDM_CheckIdentity+0xee>
 8004df6:	f04e 0401 	orr.w	r4, lr, #1
 8004dfa:	f000 f827 	bl	8004e4c <.text_47>
 8004dfe:	60d4      	str	r4, [r2, #12]
 8004e00:	e7de      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e02:	f04e 0404 	orr.w	r4, lr, #4
 8004e06:	f000 f821 	bl	8004e4c <.text_47>
 8004e0a:	6154      	str	r4, [r2, #20]
 8004e0c:	e7d8      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e0e:	f04e 0402 	orr.w	r4, lr, #2
 8004e12:	f000 f81b 	bl	8004e4c <.text_47>
 8004e16:	6114      	str	r4, [r2, #16]
 8004e18:	e7d2      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e1a:	b2ff      	uxtb	r7, r7
 8004e1c:	2f01      	cmp	r7, #1
 8004e1e:	d112      	bne.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004e20:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004e24:	f040 0010 	orr.w	r0, r0, #16
 8004e28:	f882 0020 	strb.w	r0, [r2, #32]
 8004e2c:	1988      	adds	r0, r1, r6
 8004e2e:	7801      	ldrb	r1, [r0, #0]
 8004e30:	7844      	ldrb	r4, [r0, #1]
 8004e32:	eb01 2504 	add.w	r5, r1, r4, lsl #8
 8004e36:	7881      	ldrb	r1, [r0, #2]
 8004e38:	78c0      	ldrb	r0, [r0, #3]
 8004e3a:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8004e3e:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8004e42:	61d5      	str	r5, [r2, #28]
 8004e44:	e000      	b.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004e46:	2302      	movs	r3, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e4c <.text_47>:
 8004e4c:	f882 4020 	strb.w	r4, [r2, #32]
 8004e50:	260c      	movs	r6, #12
 8004e52:	7b0c      	ldrb	r4, [r1, #12]
 8004e54:	7b4f      	ldrb	r7, [r1, #13]
 8004e56:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 8004e5a:	7b8c      	ldrb	r4, [r1, #14]
 8004e5c:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 8004e60:	7bcf      	ldrb	r7, [r1, #15]
 8004e62:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8004e66:	4770      	bx	lr

08004e68 <PE_SVDM_CheckSVIDs>:
 8004e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <.text_52>)
 8004e6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004e70:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8004e72:	0b1b      	lsrs	r3, r3, #12
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	1e5b      	subs	r3, r3, #1
 8004e7a:	2400      	movs	r4, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2500      	movs	r5, #0
 8004e80:	7614      	strb	r4, [r2, #24]
 8004e82:	7654      	strb	r4, [r2, #25]
 8004e84:	f000 f816 	bl	8004eb4 <.text_49>
 8004e88:	bf19      	ittee	ne
 8004e8a:	1c76      	addne	r6, r6, #1
 8004e8c:	7616      	strbne	r6, [r2, #24]
 8004e8e:	2501      	moveq	r5, #1
 8004e90:	7655      	strbeq	r5, [r2, #25]
 8004e92:	1ca4      	adds	r4, r4, #2
 8004e94:	b2e4      	uxtb	r4, r4
 8004e96:	f000 f80d 	bl	8004eb4 <.text_49>
 8004e9a:	bf19      	ittee	ne
 8004e9c:	1c76      	addne	r6, r6, #1
 8004e9e:	7616      	strbne	r6, [r2, #24]
 8004ea0:	2501      	moveq	r5, #1
 8004ea2:	7655      	strbeq	r5, [r2, #25]
 8004ea4:	1ca4      	adds	r4, r4, #2
 8004ea6:	b2e4      	uxtb	r4, r4
 8004ea8:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004eac:	d201      	bcs.n	8004eb2 <PE_SVDM_CheckSVIDs+0x4a>
 8004eae:	0028      	movs	r0, r5
 8004eb0:	d0e8      	beq.n	8004e84 <PE_SVDM_CheckSVIDs+0x1c>
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eb4 <.text_49>:
 8004eb4:	1c4e      	adds	r6, r1, #1
 8004eb6:	5d08      	ldrb	r0, [r1, r4]
 8004eb8:	5d37      	ldrb	r7, [r6, r4]
 8004eba:	eb00 2607 	add.w	r6, r0, r7, lsl #8
 8004ebe:	7e10      	ldrb	r0, [r2, #24]
 8004ec0:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
 8004ec4:	7e16      	ldrb	r6, [r2, #24]
 8004ec6:	4637      	mov	r7, r6
 8004ec8:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <PE_SVDM_CheckModes>:
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	f000 f821 	bl	8004f18 <.text_51>
 8004ed6:	8399      	strh	r1, [r3, #28]
 8004ed8:	0b24      	lsrs	r4, r4, #12
 8004eda:	f004 0407 	and.w	r4, r4, #7
 8004ede:	1e60      	subs	r0, r4, #1
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	b2c0      	uxtb	r0, r0
 8004ee4:	601c      	str	r4, [r3, #0]
 8004ee6:	1916      	adds	r6, r2, r4
 8004ee8:	5d15      	ldrb	r5, [r2, r4]
 8004eea:	7871      	ldrb	r1, [r6, #1]
 8004eec:	eb05 2701 	add.w	r7, r5, r1, lsl #8
 8004ef0:	1911      	adds	r1, r2, r4
 8004ef2:	1d24      	adds	r4, r4, #4
 8004ef4:	788d      	ldrb	r5, [r1, #2]
 8004ef6:	78ce      	ldrb	r6, [r1, #3]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8004efe:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8004f02:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 8004f06:	606f      	str	r7, [r5, #4]
 8004f08:	b2e4      	uxtb	r4, r4
 8004f0a:	681e      	ldr	r6, [r3, #0]
 8004f0c:	1c76      	adds	r6, r6, #1
 8004f0e:	ebb4 0f80 	cmp.w	r4, r0, lsl #2
 8004f12:	601e      	str	r6, [r3, #0]
 8004f14:	d3e7      	bcc.n	8004ee6 <PE_SVDM_CheckModes+0x16>
 8004f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f18 <.text_51>:
 8004f18:	4c02      	ldr	r4, [pc, #8]	; (8004f24 <.text_52>)
 8004f1a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004f1e:	8e84      	ldrh	r4, [r0, #52]	; 0x34
 8004f20:	4770      	bx	lr
	...

08004f24 <.text_52>:
 8004f24:	200002b8 	.word	0x200002b8

08004f28 <USBPD_PRL_TimerCounter>:
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	f000 f879 	bl	8005020 <.text_12>
 8004f2e:	7919      	ldrb	r1, [r3, #4]
 8004f30:	b111      	cbz	r1, 8004f38 <USBPD_PRL_TimerCounter+0x10>
 8004f32:	7919      	ldrb	r1, [r3, #4]
 8004f34:	1e4c      	subs	r4, r1, #1
 8004f36:	711c      	strb	r4, [r3, #4]
 8004f38:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8004f3c:	7848      	ldrb	r0, [r1, #1]
 8004f3e:	b108      	cbz	r0, 8004f44 <USBPD_PRL_TimerCounter+0x1c>
 8004f40:	1e40      	subs	r0, r0, #1
 8004f42:	7048      	strb	r0, [r1, #1]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <USBPD_PRL_Init>:
 8004f46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	4617      	mov	r7, r2
 8004f50:	461d      	mov	r5, r3
 8004f52:	f44f 709c 	mov.w	r0, #312	; 0x138
 8004f56:	f019 fee7 	bl	801ed28 <malloc>
 8004f5a:	0004      	movs	r4, r0
 8004f5c:	f04f 0916 	mov.w	r9, #22
 8004f60:	d019      	beq.n	8004f96 <USBPD_PRL_Init+0x50>
 8004f62:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004f66:	f01a f869 	bl	801f03c <__aeabi_memclr>
 8004f6a:	f000 fca8 	bl	80058be <.text_34>
 8004f6e:	f8df 0a48 	ldr.w	r0, [pc, #2632]	; 80059b8 <.text_40>
 8004f72:	4641      	mov	r1, r8
 8004f74:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8004f78:	62a7      	str	r7, [r4, #40]	; 0x28
 8004f7a:	62e5      	str	r5, [r4, #44]	; 0x2c
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	9000      	str	r0, [sp, #0]
 8004f80:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8004f84:	6870      	ldr	r0, [r6, #4]
 8004f86:	f60f 21a4 	addw	r1, pc, #2724	; 0xaa4
 8004f8a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f011 f970 	bl	8016274 <USBPD_PHY_Init>
 8004f94:	4681      	mov	r9, r0
 8004f96:	4648      	mov	r0, r9
 8004f98:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08004f9c <USBPD_PRL_GetMemoryConsumption>:
 8004f9c:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 8004fa0:	4770      	bx	lr

08004fa2 <USBPD_PRL_SetHeader>:
 8004fa2:	b530      	push	{r4, r5, lr}
 8004fa4:	f8df 4a10 	ldr.w	r4, [pc, #2576]	; 80059b8 <.text_40>
 8004fa8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8004fac:	8a6d      	ldrh	r5, [r5, #18]
 8004fae:	f361 2508 	bfi	r5, r1, #8, #1
 8004fb2:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fb6:	824d      	strh	r5, [r1, #18]
 8004fb8:	f362 1545 	bfi	r5, r2, #5, #1
 8004fbc:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fc0:	824d      	strh	r5, [r1, #18]
 8004fc2:	f363 1587 	bfi	r5, r3, #6, #2
 8004fc6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004fca:	8245      	strh	r5, [r0, #18]
 8004fcc:	bd30      	pop	{r4, r5, pc}

08004fce <USBPD_PRL_SetHeaderPowerRole>:
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	f000 f80b 	bl	8004fea <.text_9>
 8004fd4:	f361 2408 	bfi	r4, r1, #8, #1
 8004fd8:	825c      	strh	r4, [r3, #18]
 8004fda:	bd10      	pop	{r4, pc}

08004fdc <USBPD_PRL_SetHeaderDataRole>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	f000 f804 	bl	8004fea <.text_9>
 8004fe2:	f361 1445 	bfi	r4, r1, #5, #1
 8004fe6:	825c      	strh	r4, [r3, #18]
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <.text_9>:
 8004fea:	f8df 29cc 	ldr.w	r2, [pc, #2508]	; 80059b8 <.text_40>
 8004fee:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8004ff2:	8a5c      	ldrh	r4, [r3, #18]
 8004ff4:	4770      	bx	lr

08004ff6 <USBPD_PRL_SetHeaderSpecification>:
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	f7ff fff7 	bl	8004fea <.text_9>
 8004ffc:	f361 1487 	bfi	r4, r1, #6, #2
 8005000:	825c      	strh	r4, [r3, #18]
 8005002:	bd10      	pop	{r4, pc}

08005004 <USBPD_PRL_CBL_SetHeaderSpecification>:
 8005004:	b540      	push	{r6, lr}
 8005006:	f000 f80b 	bl	8005020 <.text_12>
 800500a:	8a9e      	ldrh	r6, [r3, #20]
 800500c:	f361 1687 	bfi	r6, r1, #6, #2
 8005010:	829e      	strh	r6, [r3, #20]
 8005012:	8adb      	ldrh	r3, [r3, #22]
 8005014:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005018:	f361 1387 	bfi	r3, r1, #6, #2
 800501c:	82c3      	strh	r3, [r0, #22]
 800501e:	bd40      	pop	{r6, pc}

08005020 <.text_12>:
 8005020:	f8df 2994 	ldr.w	r2, [pc, #2452]	; 80059b8 <.text_40>
 8005024:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8005028:	4770      	bx	lr

0800502a <USBPD_PRL_SRCSetSinkNG>:
 800502a:	f011 b9fe 	b.w	801642a <USBPD_PHY_SetResistor_SinkTxNG>

0800502e <USBPD_PRL_SRCReleaseSinkNG>:
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
 8005032:	f011 fa07 	bl	8016444 <USBPD_PHY_SetResistor_SinkTxOK>
 8005036:	f8df 1980 	ldr.w	r1, [pc, #2432]	; 80059b8 <.text_40>
 800503a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 800503e:	2000      	movs	r0, #0
 8005040:	7150      	strb	r0, [r2, #5]
 8005042:	bd10      	pop	{r4, pc}

08005044 <USBPD_PRL_IsResistor_SinkTxOK>:
 8005044:	f011 ba20 	b.w	8016488 <USBPD_PHY_IsResistor_SinkTxOk>

08005048 <USBPD_PRL_FastRoleSwapSignalling>:
 8005048:	f011 ba2c 	b.w	80164a4 <USBPD_PHY_FastRoleSwapSignalling>

0800504c <PRL_FastRoleSwapReception>:
 800504c:	f7fb be1a 	b.w	8000c84 <PE_PRL_FastRoleSwapReception>

08005050 <USBPD_PRL_SOPCapability>:
 8005050:	f011 ba06 	b.w	8016460 <USBPD_PHY_SOPSupported>

08005054 <USBPD_PRL_SendMessage>:
 8005054:	e92d 4dfd 	stmdb	sp!, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
 8005058:	f8df a95c 	ldr.w	sl, [pc, #2396]	; 80059b8 <.text_40>
 800505c:	b083      	sub	sp, #12
 800505e:	4680      	mov	r8, r0
 8005060:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005064:	4694      	mov	ip, r2
 8005066:	f10c 0701 	add.w	r7, ip, #1
 800506a:	2403      	movs	r4, #3
 800506c:	7938      	ldrb	r0, [r7, #4]
 800506e:	b118      	cbz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005070:	7a38      	ldrb	r0, [r7, #8]
 8005072:	b908      	cbnz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005074:	200f      	movs	r0, #15
 8005076:	7150      	strb	r0, [r2, #5]
 8005078:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005080:	f88d 0005 	strb.w	r0, [sp, #5]
 8005084:	f88d 1004 	strb.w	r1, [sp, #4]
 8005088:	9302      	str	r3, [sp, #8]
 800508a:	eb0c 0e01 	add.w	lr, ip, r1
 800508e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005090:	f897 b004 	ldrb.w	fp, [r7, #4]
 8005094:	f1bb 0f10 	cmp.w	fp, #16
 8005098:	f10c 050e 	add.w	r5, ip, #14
 800509c:	f200 81fb 	bhi.w	8005496 <USBPD_PRL_SendMessage+0x442>
 80050a0:	e8df f01b 	tbh	[pc, fp, lsl #1]
 80050a4:	00250011 	.word	0x00250011
 80050a8:	01f90030 	.word	0x01f90030
 80050ac:	00550037 	.word	0x00550037
 80050b0:	00b60045 	.word	0x00b60045
 80050b4:	01f901f9 	.word	0x01f901f9
 80050b8:	0182016d 	.word	0x0182016d
 80050bc:	01b1019b 	.word	0x01b1019b
 80050c0:	01f501f9 	.word	0x01f501f9
 80050c4:	01e0      	.short	0x01e0
 80050c6:	f3ef 8510 	mrs	r5, PRIMASK
 80050ca:	b672      	cpsid	i
 80050cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050d0:	f7fb fc91 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	bf04      	itt	eq
 80050d8:	7a78      	ldrbeq	r0, [r7, #9]
 80050da:	2800      	cmpeq	r0, #0
 80050dc:	bf07      	ittee	eq
 80050de:	21ff      	moveq	r1, #255	; 0xff
 80050e0:	7239      	strbeq	r1, [r7, #8]
 80050e2:	2000      	movne	r0, #0
 80050e4:	7238      	strbne	r0, [r7, #8]
 80050e6:	f385 8810 	msr	PRIMASK, r5
 80050ea:	2106      	movs	r1, #6
 80050ec:	e1a9      	b.n	8005442 <USBPD_PRL_SendMessage+0x3ee>
 80050ee:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050f2:	f011 f99a 	bl	801642a <USBPD_PHY_SetResistor_SinkTxNG>
 80050f6:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80050fa:	2002      	movs	r0, #2
 80050fc:	7148      	strb	r0, [r1, #5]
 80050fe:	2013      	movs	r0, #19
 8005100:	7038      	strb	r0, [r7, #0]
 8005102:	e1cb      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005104:	2801      	cmp	r0, #1
 8005106:	d110      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005108:	7838      	ldrb	r0, [r7, #0]
 800510a:	b960      	cbnz	r0, 8005126 <USBPD_PRL_SendMessage+0xd2>
 800510c:	2105      	movs	r1, #5
 800510e:	7151      	strb	r1, [r2, #5]
 8005110:	e1c4      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005112:	2802      	cmp	r0, #2
 8005114:	d109      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005116:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800511a:	f011 f9b5 	bl	8016488 <USBPD_PHY_IsResistor_SinkTxOk>
 800511e:	2801      	cmp	r0, #1
 8005120:	bf08      	it	eq
 8005122:	2005      	moveq	r0, #5
 8005124:	d070      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005126:	2409      	movs	r4, #9
 8005128:	e1b8      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800512a:	2006      	movs	r0, #6
 800512c:	e153      	b.n	80053d6 <USBPD_PRL_SendMessage+0x382>
 800512e:	f10c 0212 	add.w	r2, ip, #18
 8005132:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8005136:	f3c1 1181 	ubfx	r1, r1, #6, #2
 800513a:	2902      	cmp	r1, #2
 800513c:	d105      	bne.n	800514a <USBPD_PRL_SendMessage+0xf6>
 800513e:	2801      	cmp	r0, #1
 8005140:	d062      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005142:	2802      	cmp	r0, #2
 8005144:	bf08      	it	eq
 8005146:	2004      	moveq	r0, #4
 8005148:	d05e      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514a:	2005      	movs	r0, #5
 800514c:	e05c      	b.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514e:	f10c 0012 	add.w	r0, ip, #18
 8005152:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005156:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800515a:	f10c 0312 	add.w	r3, ip, #18
 800515e:	f362 0004 	bfi	r0, r2, #0, #5
 8005162:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005166:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 800516a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800516e:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8005172:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005176:	2000      	movs	r0, #0
 8005178:	7078      	strb	r0, [r7, #1]
 800517a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800517e:	0bd8      	lsrs	r0, r3, #15
 8005180:	d025      	beq.n	80051ce <USBPD_PRL_SendMessage+0x17a>
 8005182:	9802      	ldr	r0, [sp, #8]
 8005184:	7883      	ldrb	r3, [r0, #2]
 8005186:	78c7      	ldrb	r7, [r0, #3]
 8005188:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800518c:	81eb      	strh	r3, [r5, #14]
 800518e:	89e8      	ldrh	r0, [r5, #14]
 8005190:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005194:	b968      	cbnz	r0, 80051b2 <USBPD_PRL_SendMessage+0x15e>
 8005196:	89e8      	ldrh	r0, [r5, #14]
 8005198:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800519c:	bb08      	cbnz	r0, 80051e2 <USBPD_PRL_SendMessage+0x18e>
 800519e:	1f30      	subs	r0, r6, #4
 80051a0:	82a8      	strh	r0, [r5, #20]
 80051a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80051a6:	89eb      	ldrh	r3, [r5, #14]
 80051a8:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80051ac:	4318      	orrs	r0, r3
 80051ae:	81e8      	strh	r0, [r5, #14]
 80051b0:	e017      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051b2:	2000      	movs	r0, #0
 80051b4:	f10c 0312 	add.w	r3, ip, #18
 80051b8:	82a8      	strh	r0, [r5, #20]
 80051ba:	2001      	movs	r0, #1
 80051bc:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 80051c0:	f360 370e 	bfi	r7, r0, #12, #3
 80051c4:	f10c 0012 	add.w	r0, ip, #18
 80051c8:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 80051cc:	e009      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051ce:	1eb0      	subs	r0, r6, #2
 80051d0:	0880      	lsrs	r0, r0, #2
 80051d2:	f360 330e 	bfi	r3, r0, #12, #3
 80051d6:	f10c 0012 	add.w	r0, ip, #18
 80051da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80051de:	2300      	movs	r3, #0
 80051e0:	82ab      	strh	r3, [r5, #20]
 80051e2:	2a0d      	cmp	r2, #13
 80051e4:	bf02      	ittt	eq
 80051e6:	f10c 0012 	addeq.w	r0, ip, #18
 80051ea:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 80051ee:	f411 4f70 	tsteq.w	r1, #61440	; 0xf000
 80051f2:	d108      	bne.n	8005206 <USBPD_PRL_SendMessage+0x1b2>
 80051f4:	2000      	movs	r0, #0
 80051f6:	f88e 000b 	strb.w	r0, [lr, #11]
 80051fa:	220f      	movs	r2, #15
 80051fc:	2103      	movs	r1, #3
 80051fe:	f10c 0006 	add.w	r0, ip, #6
 8005202:	f000 fc20 	bl	8005a46 <__aeabi_memset>
 8005206:	2007      	movs	r0, #7
 8005208:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800520c:	7148      	strb	r0, [r1, #5]
 800520e:	e145      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005210:	f102 0312 	add.w	r3, r2, #18
 8005214:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005218:	0bc0      	lsrs	r0, r0, #15
 800521a:	d07c      	beq.n	8005316 <USBPD_PRL_SendMessage+0x2c2>
 800521c:	8b90      	ldrh	r0, [r2, #28]
 800521e:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005222:	2800      	cmp	r0, #0
 8005224:	d16c      	bne.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005226:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800522a:	8c57      	ldrh	r7, [r2, #34]	; 0x22
 800522c:	8b93      	ldrh	r3, [r2, #28]
 800522e:	2f1b      	cmp	r7, #27
 8005230:	d30f      	bcc.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005232:	0bd8      	lsrs	r0, r3, #15
 8005234:	d00d      	beq.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005236:	f102 0312 	add.w	r3, r2, #18
 800523a:	261e      	movs	r6, #30
 800523c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005240:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
 8005244:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005248:	8c50      	ldrh	r0, [r2, #34]	; 0x22
 800524a:	f1a0 031a 	sub.w	r3, r0, #26
 800524e:	8453      	strh	r3, [r2, #34]	; 0x22
 8005250:	e056      	b.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005252:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8005256:	b918      	cbnz	r0, 8005260 <USBPD_PRL_SendMessage+0x20c>
 8005258:	4618      	mov	r0, r3
 800525a:	f367 0008 	bfi	r0, r7, #0, #9
 800525e:	8390      	strh	r0, [r2, #28]
 8005260:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8005264:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005268:	f102 0312 	add.w	r3, r2, #18
 800526c:	f102 0712 	add.w	r7, r2, #18
 8005270:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005274:	4003      	ands	r3, r0
 8005276:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 800527a:	8b90      	ldrh	r0, [r2, #28]
 800527c:	0bc0      	lsrs	r0, r0, #15
 800527e:	d03b      	beq.n	80052f8 <USBPD_PRL_SendMessage+0x2a4>
 8005280:	8c50      	ldrh	r0, [r2, #34]	; 0x22
 8005282:	1c80      	adds	r0, r0, #2
 8005284:	0880      	lsrs	r0, r0, #2
 8005286:	0307      	lsls	r7, r0, #12
 8005288:	f407 47e0 	and.w	r7, r7, #28672	; 0x7000
 800528c:	f102 0012 	add.w	r0, r2, #18
 8005290:	433b      	orrs	r3, r7
 8005292:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005296:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8005298:	1c92      	adds	r2, r2, #2
 800529a:	f012 0203 	ands.w	r2, r2, #3
 800529e:	d021      	beq.n	80052e4 <USBPD_PRL_SendMessage+0x290>
 80052a0:	9802      	ldr	r0, [sp, #8]
 80052a2:	2300      	movs	r3, #0
 80052a4:	e005      	b.n	80052b2 <USBPD_PRL_SendMessage+0x25e>
 80052a6:	8c7f      	ldrh	r7, [r7, #34]	; 0x22
 80052a8:	442f      	add	r7, r5
 80052aa:	4407      	add	r7, r0
 80052ac:	2500      	movs	r5, #0
 80052ae:	713d      	strb	r5, [r7, #4]
 80052b0:	1c5b      	adds	r3, r3, #1
 80052b2:	b2dd      	uxtb	r5, r3
 80052b4:	f1c2 0e04 	rsb	lr, r2, #4
 80052b8:	f85a 7028 	ldr.w	r7, [sl, r8, lsl #2]
 80052bc:	4575      	cmp	r5, lr
 80052be:	d3f2      	bcc.n	80052a6 <USBPD_PRL_SendMessage+0x252>
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	f648 72ff 	movw	r2, #36863	; 0x8fff
 80052c6:	f107 0012 	add.w	r0, r7, #18
 80052ca:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80052ce:	4002      	ands	r2, r0
 80052d0:	0b00      	lsrs	r0, r0, #12
 80052d2:	1c40      	adds	r0, r0, #1
 80052d4:	0300      	lsls	r0, r0, #12
 80052d6:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
 80052da:	4310      	orrs	r0, r2
 80052dc:	f107 0212 	add.w	r2, r7, #18
 80052e0:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 80052e4:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 80052e8:	f100 0212 	add.w	r2, r0, #18
 80052ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80052f0:	f3c3 3602 	ubfx	r6, r3, #12, #3
 80052f4:	00b6      	lsls	r6, r6, #2
 80052f6:	1cb6      	adds	r6, r6, #2
 80052f8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 80052fc:	2000      	movs	r0, #0
 80052fe:	8450      	strh	r0, [r2, #34]	; 0x22
 8005300:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005304:	8b82      	ldrh	r2, [r0, #28]
 8005306:	9802      	ldr	r0, [sp, #8]
 8005308:	7082      	strb	r2, [r0, #2]
 800530a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800530e:	8b90      	ldrh	r0, [r2, #28]
 8005310:	9a02      	ldr	r2, [sp, #8]
 8005312:	0a00      	lsrs	r0, r0, #8
 8005314:	70d0      	strb	r0, [r2, #3]
 8005316:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800531a:	f8df 56a0 	ldr.w	r5, [pc, #1696]	; 80059bc <.text_41>
 800531e:	f100 020b 	add.w	r2, r0, #11
 8005322:	3012      	adds	r0, #18
 8005324:	5c53      	ldrb	r3, [r2, r1]
 8005326:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800532a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800532e:	f363 204b 	bfi	r0, r3, #9, #3
 8005332:	f102 0312 	add.w	r3, r2, #18
 8005336:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 800533a:	9a02      	ldr	r2, [sp, #8]
 800533c:	7010      	strb	r0, [r2, #0]
 800533e:	2202      	movs	r2, #2
 8005340:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005344:	f100 0312 	add.w	r3, r0, #18
 8005348:	9802      	ldr	r0, [sp, #8]
 800534a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800534e:	0a09      	lsrs	r1, r1, #8
 8005350:	7041      	strb	r1, [r0, #1]
 8005352:	210a      	movs	r1, #10
 8005354:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005358:	81c6      	strh	r6, [r0, #14]
 800535a:	7141      	strb	r1, [r0, #5]
 800535c:	7402      	strb	r2, [r0, #16]
 800535e:	b2b0      	uxth	r0, r6
 8005360:	9000      	str	r0, [sp, #0]
 8005362:	f000 f8a5 	bl	80054b0 <.text_21>
 8005366:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800536a:	f242 7110 	movw	r1, #10000	; 0x2710
 800536e:	f012 fb45 	bl	80179fc <USBPD_TIM_Start>
 8005372:	f000 f897 	bl	80054a4 <.text_20>
 8005376:	b2b3      	uxth	r3, r6
 8005378:	f011 f81f 	bl	80163ba <USBPD_PHY_SendMessage>
 800537c:	e08e      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800537e:	f3ef 8710 	mrs	r7, PRIMASK
 8005382:	b672      	cpsid	i
 8005384:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005388:	7941      	ldrb	r1, [r0, #5]
 800538a:	290a      	cmp	r1, #10
 800538c:	d109      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800538e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005392:	f012 fba5 	bl	8017ae0 <USBPD_TIM_IsExpired>
 8005396:	2801      	cmp	r0, #1
 8005398:	d103      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800539a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800539e:	200d      	movs	r0, #13
 80053a0:	7148      	strb	r0, [r1, #5]
 80053a2:	f387 8810 	msr	PRIMASK, r7
 80053a6:	e079      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053a8:	89a8      	ldrh	r0, [r5, #12]
 80053aa:	f89e 100b 	ldrb.w	r1, [lr, #11]
 80053ae:	0a43      	lsrs	r3, r0, #9
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4299      	cmp	r1, r3
 80053b6:	bf04      	itt	eq
 80053b8:	f000 001f 	andeq.w	r0, r0, #31
 80053bc:	2801      	cmpeq	r0, #1
 80053be:	d109      	bne.n	80053d4 <USBPD_PRL_SendMessage+0x380>
 80053c0:	1c49      	adds	r1, r1, #1
 80053c2:	f001 0107 	and.w	r1, r1, #7
 80053c6:	f88e 100b 	strb.w	r1, [lr, #11]
 80053ca:	2000      	movs	r0, #0
 80053cc:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053d0:	7148      	strb	r0, [r1, #5]
 80053d2:	e016      	b.n	8005402 <USBPD_PRL_SendMessage+0x3ae>
 80053d4:	200d      	movs	r0, #13
 80053d6:	7150      	strb	r0, [r2, #5]
 80053d8:	e060      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053da:	f89e 000b 	ldrb.w	r0, [lr, #11]
 80053de:	1c40      	adds	r0, r0, #1
 80053e0:	f000 0007 	and.w	r0, r0, #7
 80053e4:	f88e 000b 	strb.w	r0, [lr, #11]
 80053e8:	2000      	movs	r0, #0
 80053ea:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053ee:	7148      	strb	r0, [r1, #5]
 80053f0:	f248 71ff 	movw	r1, #34815	; 0x87ff
 80053f4:	89ea      	ldrh	r2, [r5, #14]
 80053f6:	400a      	ands	r2, r1
 80053f8:	81ea      	strh	r2, [r5, #14]
 80053fa:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 80053fe:	4002      	ands	r2, r0
 8005400:	81ea      	strh	r2, [r5, #14]
 8005402:	2405      	movs	r4, #5
 8005404:	e04a      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005406:	7878      	ldrb	r0, [r7, #1]
 8005408:	1c40      	adds	r0, r0, #1
 800540a:	7078      	strb	r0, [r7, #1]
 800540c:	f10c 0312 	add.w	r3, ip, #18
 8005410:	f10c 0012 	add.w	r0, ip, #18
 8005414:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8005418:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800541c:	2801      	cmp	r0, #1
 800541e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005422:	bf0c      	ite	eq
 8005424:	2203      	moveq	r2, #3
 8005426:	2202      	movne	r2, #2
 8005428:	0bc0      	lsrs	r0, r0, #15
 800542a:	d006      	beq.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 800542c:	89e9      	ldrh	r1, [r5, #14]
 800542e:	0bc8      	lsrs	r0, r1, #15
 8005430:	d103      	bne.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 8005432:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005436:	291b      	cmp	r1, #27
 8005438:	d207      	bcs.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 800543a:	7878      	ldrb	r0, [r7, #1]
 800543c:	4282      	cmp	r2, r0
 800543e:	d304      	bcc.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 8005440:	2110      	movs	r1, #16
 8005442:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005446:	7141      	strb	r1, [r0, #5]
 8005448:	e028      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800544a:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800544e:	2100      	movs	r1, #0
 8005450:	7141      	strb	r1, [r0, #5]
 8005452:	2407      	movs	r4, #7
 8005454:	f89e 100b 	ldrb.w	r1, [lr, #11]
 8005458:	1c49      	adds	r1, r1, #1
 800545a:	f001 0107 	and.w	r1, r1, #7
 800545e:	f88e 100b 	strb.w	r1, [lr, #11]
 8005462:	e01b      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005464:	200a      	movs	r0, #10
 8005466:	7150      	strb	r0, [r2, #5]
 8005468:	2102      	movs	r1, #2
 800546a:	70a9      	strb	r1, [r5, #2]
 800546c:	f242 7110 	movw	r1, #10000	; 0x2710
 8005470:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005474:	f012 fac2 	bl	80179fc <USBPD_TIM_Start>
 8005478:	882b      	ldrh	r3, [r5, #0]
 800547a:	f000 f813 	bl	80054a4 <.text_20>
 800547e:	f8df 553c 	ldr.w	r5, [pc, #1340]	; 80059bc <.text_41>
 8005482:	f010 ff9a 	bl	80163ba <USBPD_PHY_SendMessage>
 8005486:	9600      	str	r6, [sp, #0]
 8005488:	f000 f812 	bl	80054b0 <.text_21>
 800548c:	e006      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800548e:	2000      	movs	r0, #0
 8005490:	7150      	strb	r0, [r2, #5]
 8005492:	2406      	movs	r4, #6
 8005494:	e002      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005496:	2000      	movs	r0, #0
 8005498:	7150      	strb	r0, [r2, #5]
 800549a:	2410      	movs	r4, #16
 800549c:	4620      	mov	r0, r4
 800549e:	b006      	add	sp, #24
 80054a0:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

080054a4 <.text_20>:
 80054a4:	9a02      	ldr	r2, [sp, #8]
 80054a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80054aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80054ae:	4770      	bx	lr

080054b0 <.text_21>:
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80054b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80054ba:	f8d5 a000 	ldr.w	sl, [r5]
 80054be:	2002      	movs	r0, #2

080054c0 <__iar_annotation$$tailcall>:
 80054c0:	4750      	bx	sl

080054c2 <USBPD_PRL_ResetRequestProcess>:
 80054c2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	f8df 84ec 	ldr.w	r8, [pc, #1260]	; 80059b8 <.text_40>
 80054cc:	462f      	mov	r7, r5
 80054ce:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 80054d2:	2000      	movs	r0, #0
 80054d4:	70e0      	strb	r0, [r4, #3]
 80054d6:	72e0      	strb	r0, [r4, #11]
 80054d8:	7320      	strb	r0, [r4, #12]
 80054da:	7360      	strb	r0, [r4, #13]
 80054dc:	460e      	mov	r6, r1
 80054de:	f000 f9ee 	bl	80058be <.text_34>
 80054e2:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 80054e6:	f8df 74d4 	ldr.w	r7, [pc, #1236]	; 80059bc <.text_41>
 80054ea:	2200      	movs	r2, #0
 80054ec:	7142      	strb	r2, [r0, #5]
 80054ee:	9200      	str	r2, [sp, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8d7 c000 	ldr.w	ip, [r7]
 80054f6:	4632      	mov	r2, r6
 80054f8:	4629      	mov	r1, r5
 80054fa:	2002      	movs	r0, #2
 80054fc:	47e0      	blx	ip
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f83c 	bl	800557c <PRL_DisableRX>
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	f010 ff44 	bl	8016394 <USBPD_PHY_ResetRequest>
 800550c:	2005      	movs	r0, #5
 800550e:	7120      	strb	r0, [r4, #4]
 8005510:	78e0      	ldrb	r0, [r4, #3]
 8005512:	2801      	cmp	r0, #1
 8005514:	bf1c      	itt	ne
 8005516:	7920      	ldrbne	r0, [r4, #4]
 8005518:	2800      	cmpne	r0, #0
 800551a:	d1f9      	bne.n	8005510 <USBPD_PRL_ResetRequestProcess+0x4e>
 800551c:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08005520 <USBDPD_PRL_BistCarrierEyeMode>:
 8005520:	2905      	cmp	r1, #5
 8005522:	bf08      	it	eq
 8005524:	f010 bf5f 	beq.w	80163e6 <USBPD_PHY_Send_BIST_Pattern>
 8005528:	2010      	movs	r0, #16
 800552a:	4770      	bx	lr

0800552c <USBDPD_PRL_BistCarrierEyeModeExit>:
 800552c:	2905      	cmp	r1, #5
 800552e:	bf04      	itt	eq
 8005530:	2107      	moveq	r1, #7
 8005532:	f010 bf66 	beq.w	8016402 <USBPD_PHY_ExitTransmit>
 8005536:	2010      	movs	r0, #16
 8005538:	4770      	bx	lr

0800553a <USBPD_PRL_Reset>:
 800553a:	b538      	push	{r3, r4, r5, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 80059b8 <.text_40>
 8005542:	4621      	mov	r1, r4
 8005544:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8005548:	2200      	movs	r2, #0
 800554a:	716a      	strb	r2, [r5, #5]
 800554c:	702a      	strb	r2, [r5, #0]
 800554e:	712a      	strb	r2, [r5, #4]
 8005550:	72ea      	strb	r2, [r5, #11]
 8005552:	732a      	strb	r2, [r5, #12]
 8005554:	736a      	strb	r2, [r5, #13]
 8005556:	2103      	movs	r1, #3
 8005558:	220f      	movs	r2, #15
 800555a:	1da8      	adds	r0, r5, #6
 800555c:	f000 fa73 	bl	8005a46 <__aeabi_memset>
 8005560:	2200      	movs	r2, #0
 8005562:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 8005566:	4620      	mov	r0, r4
 8005568:	f010 ff09 	bl	801637e <USBPD_PHY_Reset>
 800556c:	4620      	mov	r0, r4
 800556e:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8005572:	f010 bfa4 	b.w	80164be <USBPD_PHY_EnableRX>

08005576 <USBPD_PRL_Stop>:
 8005576:	f010 bfaf 	b.w	80164d8 <USBPD_PHY_DisableRX>

0800557a <USBPD_PRL_DeInit>:
 800557a:	4770      	bx	lr

0800557c <PRL_DisableRX>:
 800557c:	f010 bfac 	b.w	80164d8 <USBPD_PHY_DisableRX>

08005580 <PRL_Received>:
 8005580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	4682      	mov	sl, r0
 8005586:	f8df 9430 	ldr.w	r9, [pc, #1072]	; 80059b8 <.text_40>
 800558a:	b084      	sub	sp, #16
 800558c:	4655      	mov	r5, sl
 800558e:	f859 4025 	ldr.w	r4, [r9, r5, lsl #2]
 8005592:	f8df b428 	ldr.w	fp, [pc, #1064]	; 80059bc <.text_41>
 8005596:	4688      	mov	r8, r1
 8005598:	f010 fee5 	bl	8016366 <USBPD_PHY_GetMinGOODCRCTimerValue>
 800559c:	4601      	mov	r1, r0
 800559e:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80055a2:	b2c0      	uxtb	r0, r0
 80055a4:	f012 fa2a 	bl	80179fc <USBPD_TIM_Start>
 80055a8:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80055ac:	7a30      	ldrb	r0, [r6, #8]
 80055ae:	7a71      	ldrb	r1, [r6, #9]
 80055b0:	eb00 2701 	add.w	r7, r0, r1, lsl #8
 80055b4:	f24f 001f 	movw	r0, #61471	; 0xf01f
 80055b8:	4038      	ands	r0, r7
 80055ba:	2801      	cmp	r0, #1
 80055bc:	d113      	bne.n	80055e6 <PRL_Received+0x66>
 80055be:	0069      	lsls	r1, r5, #1
 80055c0:	1c49      	adds	r1, r1, #1
 80055c2:	b2c8      	uxtb	r0, r1
 80055c4:	f012 fa8c 	bl	8017ae0 <USBPD_TIM_IsExpired>
 80055c8:	2801      	cmp	r0, #1
 80055ca:	d040      	beq.n	800564e <PRL_Received+0xce>
 80055cc:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 80055d0:	200b      	movs	r0, #11
 80055d2:	7148      	strb	r0, [r1, #5]
 80055d4:	8367      	strh	r7, [r4, #26]
 80055d6:	f000 f96c 	bl	80058b2 <.text_33>
 80055da:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80055de:	4642      	mov	r2, r8
 80055e0:	4651      	mov	r1, sl
 80055e2:	2001      	movs	r0, #1
 80055e4:	e14d      	b.n	8005882 <PRL_Received+0x302>
 80055e6:	f20f 405c 	addw	r0, pc, #1116	; 0x45c
 80055ea:	8805      	ldrh	r5, [r0, #0]
 80055ec:	f24f 001f 	movw	r0, #61471	; 0xf01f
 80055f0:	2101      	movs	r1, #1
 80055f2:	4038      	ands	r0, r7
 80055f4:	72a1      	strb	r1, [r4, #10]
 80055f6:	eb04 0208 	add.w	r2, r4, r8
 80055fa:	280d      	cmp	r0, #13
 80055fc:	9202      	str	r2, [sp, #8]
 80055fe:	d103      	bne.n	8005608 <PRL_Received+0x88>
 8005600:	2100      	movs	r1, #0
 8005602:	72d1      	strb	r1, [r2, #11]
 8005604:	f000 f95b 	bl	80058be <.text_34>
 8005608:	ea5f 0008 	movs.w	r0, r8
 800560c:	d10c      	bne.n	8005628 <PRL_Received+0xa8>
 800560e:	8a60      	ldrh	r0, [r4, #18]
 8005610:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8005614:	f3c0 2200 	ubfx	r2, r0, #8, #1
 8005618:	f64f 60df 	movw	r0, #65247	; 0xfedf
 800561c:	4005      	ands	r5, r0
 800561e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 8005622:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8005626:	e002      	b.n	800562e <PRL_Received+0xae>
 8005628:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800562c:	4015      	ands	r5, r2
 800562e:	f24f 113f 	movw	r1, #61759	; 0xf13f
 8005632:	400d      	ands	r5, r1
 8005634:	f407 6060 	and.w	r0, r7, #3584	; 0xe00
 8005638:	4305      	orrs	r5, r0
 800563a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800563e:	7625      	strb	r5, [r4, #24]
 8005640:	4641      	mov	r1, r8
 8005642:	0a2d      	lsrs	r5, r5, #8
 8005644:	7665      	strb	r5, [r4, #25]
 8005646:	4650      	mov	r0, sl
 8005648:	f7fb fb2b 	bl	8000ca2 <PE_PRL_PostReceiveEvent>
 800564c:	2800      	cmp	r0, #0
 800564e:	f000 811b 	beq.w	8005888 <PRL_Received+0x308>
 8005652:	2001      	movs	r0, #1
 8005654:	7420      	strb	r0, [r4, #16]
 8005656:	ea4f 004a 	mov.w	r0, sl, lsl #1
 800565a:	b2c0      	uxtb	r0, r0
 800565c:	f012 fa40 	bl	8017ae0 <USBPD_TIM_IsExpired>
 8005660:	2800      	cmp	r0, #0
 8005662:	d0f8      	beq.n	8005656 <PRL_Received+0xd6>
 8005664:	2302      	movs	r3, #2
 8005666:	f104 0218 	add.w	r2, r4, #24
 800566a:	4641      	mov	r1, r8
 800566c:	4650      	mov	r0, sl
 800566e:	f010 fea4 	bl	80163ba <USBPD_PHY_SendMessage>
 8005672:	9003      	str	r0, [sp, #12]
 8005674:	f884 8009 	strb.w	r8, [r4, #9]
 8005678:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800567c:	4650      	mov	r0, sl
 800567e:	f7fb fb46 	bl	8000d0e <PE_PRL_PostReceiveEventCopy>
 8005682:	7ab0      	ldrb	r0, [r6, #10]
 8005684:	7af1      	ldrb	r1, [r6, #11]
 8005686:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 800568a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800568e:	0438      	lsls	r0, r7, #16
 8005690:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005694:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8005698:	0bc9      	lsrs	r1, r1, #15
 800569a:	0fc0      	lsrs	r0, r0, #31
 800569c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80056a0:	f8ad 1006 	strh.w	r1, [sp, #6]
 80056a4:	d004      	beq.n	80056b0 <PRL_Received+0x130>
 80056a6:	0008      	movs	r0, r1
 80056a8:	d102      	bne.n	80056b0 <PRL_Received+0x130>
 80056aa:	1d29      	adds	r1, r5, #4
 80056ac:	9100      	str	r1, [sp, #0]
 80056ae:	e019      	b.n	80056e4 <PRL_Received+0x164>
 80056b0:	7821      	ldrb	r1, [r4, #0]
 80056b2:	b9a9      	cbnz	r1, 80056e0 <PRL_Received+0x160>
 80056b4:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80056b8:	b190      	cbz	r0, 80056e0 <PRL_Received+0x160>
 80056ba:	f007 001f 	and.w	r0, r7, #31
 80056be:	2803      	cmp	r0, #3
 80056c0:	d10e      	bne.n	80056e0 <PRL_Received+0x160>
 80056c2:	7ab0      	ldrb	r0, [r6, #10]
 80056c4:	7af1      	ldrb	r1, [r6, #11]
 80056c6:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80056ca:	7b30      	ldrb	r0, [r6, #12]
 80056cc:	7b71      	ldrb	r1, [r6, #13]
 80056ce:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 80056d2:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 80056d6:	0f12      	lsrs	r2, r2, #28
 80056d8:	2a08      	cmp	r2, #8
 80056da:	bf04      	itt	eq
 80056dc:	2001      	moveq	r0, #1
 80056de:	7020      	strbeq	r0, [r4, #0]
 80056e0:	f000 f8e7 	bl	80058b2 <.text_33>
 80056e4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80056e8:	f8db c000 	ldr.w	ip, [fp]
 80056ec:	4642      	mov	r2, r8
 80056ee:	4651      	mov	r1, sl
 80056f0:	2001      	movs	r0, #1
 80056f2:	47e0      	blx	ip
 80056f4:	9803      	ldr	r0, [sp, #12]
 80056f6:	b948      	cbnz	r0, 800570c <PRL_Received+0x18c>
 80056f8:	2102      	movs	r1, #2
 80056fa:	9100      	str	r1, [sp, #0]
 80056fc:	f104 0318 	add.w	r3, r4, #24
 8005700:	f8db c000 	ldr.w	ip, [fp]
 8005704:	4642      	mov	r2, r8
 8005706:	4651      	mov	r1, sl
 8005708:	2002      	movs	r0, #2
 800570a:	47e0      	blx	ip
 800570c:	9802      	ldr	r0, [sp, #8]
 800570e:	7981      	ldrb	r1, [r0, #6]
 8005710:	f3c7 2042 	ubfx	r0, r7, #9, #3
 8005714:	4281      	cmp	r1, r0
 8005716:	bf04      	itt	eq
 8005718:	9803      	ldreq	r0, [sp, #12]
 800571a:	2800      	cmpeq	r0, #0
 800571c:	f000 80a2 	beq.w	8005864 <PRL_Received+0x2e4>
 8005720:	0439      	lsls	r1, r7, #16
 8005722:	9a02      	ldr	r2, [sp, #8]
 8005724:	0e49      	lsrs	r1, r1, #25
 8005726:	f001 0107 	and.w	r1, r1, #7
 800572a:	7191      	strb	r1, [r2, #6]
 800572c:	0438      	lsls	r0, r7, #16
 800572e:	8427      	strh	r7, [r4, #32]
 8005730:	0fc0      	lsrs	r0, r0, #31
 8005732:	bf1c      	itt	ne
 8005734:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 8005738:	2800      	cmpne	r0, #0
 800573a:	d06e      	beq.n	800581a <PRL_Received+0x29a>
 800573c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005740:	83e0      	strh	r0, [r4, #30]
 8005742:	201a      	movs	r0, #26
 8005744:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005748:	f411 4ff8 	tst.w	r1, #31744	; 0x7c00
 800574c:	d13c      	bne.n	80057c8 <PRL_Received+0x248>
 800574e:	f3c7 3102 	ubfx	r1, r7, #12, #3
 8005752:	2907      	cmp	r1, #7
 8005754:	d301      	bcc.n	800575a <PRL_Received+0x1da>
 8005756:	2d1a      	cmp	r5, #26
 8005758:	d820      	bhi.n	800579c <PRL_Received+0x21c>
 800575a:	2100      	movs	r1, #0
 800575c:	3434      	adds	r4, #52	; 0x34
 800575e:	e00c      	b.n	800577a <PRL_Received+0x1fa>
 8005760:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005764:	6832      	ldr	r2, [r6, #0]
 8005766:	f814 e001 	ldrb.w	lr, [r4, r1]
 800576a:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 800576e:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005772:	1c49      	adds	r1, r1, #1
 8005774:	f802 e003 	strb.w	lr, [r2, r3]
 8005778:	b289      	uxth	r1, r1
 800577a:	f000 f894 	bl	80058a6 <.text_32>
 800577e:	d3ef      	bcc.n	8005760 <PRL_Received+0x1e0>
 8005780:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005784:	0080      	lsls	r0, r0, #2
 8005786:	1e80      	subs	r0, r0, #2
 8005788:	42a8      	cmp	r0, r5
 800578a:	d204      	bcs.n	8005796 <PRL_Received+0x216>
 800578c:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005790:	0080      	lsls	r0, r0, #2
 8005792:	1e80      	subs	r0, r0, #2
 8005794:	e00f      	b.n	80057b6 <PRL_Received+0x236>
 8005796:	6870      	ldr	r0, [r6, #4]
 8005798:	8005      	strh	r5, [r0, #0]
 800579a:	e00e      	b.n	80057ba <PRL_Received+0x23a>
 800579c:	2101      	movs	r1, #1
 800579e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 80057a2:	2000      	movs	r0, #0
 80057a4:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80057a8:	6833      	ldr	r3, [r6, #0]
 80057aa:	5c0a      	ldrb	r2, [r1, r0]
 80057ac:	541a      	strb	r2, [r3, r0]
 80057ae:	1c40      	adds	r0, r0, #1
 80057b0:	281a      	cmp	r0, #26
 80057b2:	d3f9      	bcc.n	80057a8 <PRL_Received+0x228>
 80057b4:	201a      	movs	r0, #26
 80057b6:	6871      	ldr	r1, [r6, #4]
 80057b8:	8008      	strh	r0, [r1, #0]
 80057ba:	4641      	mov	r1, r8
 80057bc:	4650      	mov	r0, sl
 80057be:	b005      	add	sp, #20
 80057c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	f7fb ba6d 	b.w	8000ca2 <PE_PRL_PostReceiveEvent>
 80057c8:	6871      	ldr	r1, [r6, #4]
 80057ca:	8809      	ldrh	r1, [r1, #0]
 80057cc:	f240 1205 	movw	r2, #261	; 0x105
 80057d0:	f101 031a 	add.w	r3, r1, #26
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bf3f      	itttt	cc
 80057d8:	f3c7 3302 	ubfxcc	r3, r7, #12, #3
 80057dc:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 80057e0:	1e89      	subcc	r1, r1, #2
 80057e2:	42a9      	cmpcc	r1, r5
 80057e4:	d21a      	bcs.n	800581c <PRL_Received+0x29c>
 80057e6:	2101      	movs	r1, #1
 80057e8:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 80057ec:	3434      	adds	r4, #52	; 0x34
 80057ee:	2100      	movs	r1, #0
 80057f0:	e007      	b.n	8005802 <PRL_Received+0x282>
 80057f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80057f6:	6832      	ldr	r2, [r6, #0]
 80057f8:	5c65      	ldrb	r5, [r4, r1]
 80057fa:	f000 f848 	bl	800588e <.text_30>
 80057fe:	54d5      	strb	r5, [r2, r3]
 8005800:	b289      	uxth	r1, r1
 8005802:	f000 f850 	bl	80058a6 <.text_32>
 8005806:	d3f4      	bcc.n	80057f2 <PRL_Received+0x272>
 8005808:	6871      	ldr	r1, [r6, #4]
 800580a:	880a      	ldrh	r2, [r1, #0]
 800580c:	043f      	lsls	r7, r7, #16
 800580e:	0ebf      	lsrs	r7, r7, #26
 8005810:	f007 071c 	and.w	r7, r7, #28
 8005814:	1eb8      	subs	r0, r7, #2
 8005816:	1882      	adds	r2, r0, r2
 8005818:	800a      	strh	r2, [r1, #0]
 800581a:	e035      	b.n	8005888 <PRL_Received+0x308>
 800581c:	6871      	ldr	r1, [r6, #4]
 800581e:	880b      	ldrh	r3, [r1, #0]
 8005820:	f000 f83b 	bl	800589a <.text_31>
 8005824:	4291      	cmp	r1, r2
 8005826:	d219      	bcs.n	800585c <PRL_Received+0x2dc>
 8005828:	f000 f837 	bl	800589a <.text_31>
 800582c:	42a9      	cmp	r1, r5
 800582e:	d315      	bcc.n	800585c <PRL_Received+0x2dc>
 8005830:	2201      	movs	r2, #1
 8005832:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8005836:	2100      	movs	r1, #0
 8005838:	3434      	adds	r4, #52	; 0x34
 800583a:	e009      	b.n	8005850 <PRL_Received+0x2d0>
 800583c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005840:	6832      	ldr	r2, [r6, #0]
 8005842:	f814 a001 	ldrb.w	sl, [r4, r1]
 8005846:	f000 f822 	bl	800588e <.text_30>
 800584a:	f802 a003 	strb.w	sl, [r2, r3]
 800584e:	b289      	uxth	r1, r1
 8005850:	f000 f829 	bl	80058a6 <.text_32>
 8005854:	d3f2      	bcc.n	800583c <PRL_Received+0x2bc>
 8005856:	6870      	ldr	r0, [r6, #4]
 8005858:	8005      	strh	r5, [r0, #0]
 800585a:	e015      	b.n	8005888 <PRL_Received+0x308>
 800585c:	2100      	movs	r1, #0
 800585e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 8005862:	e011      	b.n	8005888 <PRL_Received+0x308>
 8005864:	20ff      	movs	r0, #255	; 0xff
 8005866:	7260      	strb	r0, [r4, #9]
 8005868:	2100      	movs	r1, #0
 800586a:	7421      	strb	r1, [r4, #16]
 800586c:	4650      	mov	r0, sl
 800586e:	f7fb fa38 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005872:	2000      	movs	r0, #0
 8005874:	72a0      	strb	r0, [r4, #10]
 8005876:	2117      	movs	r1, #23
 8005878:	9100      	str	r1, [sp, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	a365      	add	r3, pc, #404	; (adr r3, 8005a14 <.text_43>)
 800587e:	4651      	mov	r1, sl
 8005880:	2006      	movs	r0, #6
 8005882:	f8db 4000 	ldr.w	r4, [fp]
 8005886:	47a0      	blx	r4
 8005888:	b005      	add	sp, #20
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800588e <.text_30>:
 800588e:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 8005892:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005896:	1c49      	adds	r1, r1, #1
 8005898:	4770      	bx	lr

0800589a <.text_31>:
 800589a:	f3c7 3102 	ubfx	r1, r7, #12, #3
 800589e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80058a2:	1e89      	subs	r1, r1, #2
 80058a4:	4770      	bx	lr

080058a6 <.text_32>:
 80058a6:	f3c7 3202 	ubfx	r2, r7, #12, #3
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	1e92      	subs	r2, r2, #2
 80058ae:	4291      	cmp	r1, r2
 80058b0:	4770      	bx	lr

080058b2 <.text_33>:
 80058b2:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80058b6:	0080      	lsls	r0, r0, #2
 80058b8:	1c80      	adds	r0, r0, #2
 80058ba:	9000      	str	r0, [sp, #0]
 80058bc:	4770      	bx	lr

080058be <.text_34>:
 80058be:	220f      	movs	r2, #15
 80058c0:	2103      	movs	r1, #3
 80058c2:	1da0      	adds	r0, r4, #6
 80058c4:	f000 b8bf 	b.w	8005a46 <__aeabi_memset>

080058c8 <PRL_ResetIndicate>:
 80058c8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80058cc:	460d      	mov	r5, r1
 80058ce:	2d05      	cmp	r5, #5
 80058d0:	4680      	mov	r8, r0
 80058d2:	d116      	bne.n	8005902 <PRL_ResetIndicate+0x3a>
 80058d4:	4f38      	ldr	r7, [pc, #224]	; (80059b8 <.text_40>)
 80058d6:	4646      	mov	r6, r8
 80058d8:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 80058dc:	2000      	movs	r0, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	b2c2      	uxtb	r2, r0
 80058e2:	1c40      	adds	r0, r0, #1
 80058e4:	18a2      	adds	r2, r4, r2
 80058e6:	b2c3      	uxtb	r3, r0
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	72d1      	strb	r1, [r2, #11]
 80058ec:	d3f8      	bcc.n	80058e0 <PRL_ResetIndicate+0x18>
 80058ee:	f7ff ffe6 	bl	80058be <.text_34>
 80058f2:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80058f6:	2200      	movs	r2, #0
 80058f8:	7142      	strb	r2, [r0, #5]
 80058fa:	7022      	strb	r2, [r4, #0]
 80058fc:	4640      	mov	r0, r8
 80058fe:	f7ff fe3d 	bl	800557c <PRL_DisableRX>
 8005902:	2000      	movs	r0, #0
 8005904:	4e2d      	ldr	r6, [pc, #180]	; (80059bc <.text_41>)
 8005906:	6837      	ldr	r7, [r6, #0]
 8005908:	9000      	str	r0, [sp, #0]
 800590a:	2300      	movs	r3, #0
 800590c:	462a      	mov	r2, r5
 800590e:	4641      	mov	r1, r8
 8005910:	2001      	movs	r0, #1
 8005912:	47b8      	blx	r7
 8005914:	4629      	mov	r1, r5
 8005916:	4640      	mov	r0, r8
 8005918:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800591c:	f7fb b8c3 	b.w	8000aa6 <PE_PRL_ResetReceived>

08005920 <PRL_ResetCompleted>:
 8005920:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <.text_40>)
 8005922:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005926:	2101      	movs	r1, #1
 8005928:	70c1      	strb	r1, [r0, #3]
 800592a:	4770      	bx	lr

0800592c <PRL_BistCompleted>:
 800592c:	f7fb b8e0 	b.w	8000af0 <PE_PRL_BistCompleted>

08005930 <PRL_TxCompleted>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <.text_40>)
 8005934:	4604      	mov	r4, r0
 8005936:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800593a:	7c2a      	ldrb	r2, [r5, #16]
 800593c:	2a01      	cmp	r2, #1
 800593e:	d002      	beq.n	8005946 <PRL_TxCompleted+0x16>
 8005940:	2a02      	cmp	r2, #2
 8005942:	d009      	beq.n	8005958 <PRL_TxCompleted+0x28>
 8005944:	e010      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005946:	b911      	cbnz	r1, 800594e <PRL_TxCompleted+0x1e>
 8005948:	f7fb f9fe 	bl	8000d48 <PE_PRL_PostReceiveEventComplete>
 800594c:	e001      	b.n	8005952 <PRL_TxCompleted+0x22>
 800594e:	f7fb f9c8 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005952:	2000      	movs	r0, #0
 8005954:	72a8      	strb	r0, [r5, #10]
 8005956:	e007      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005958:	f010 fcf8 	bl	801634c <USBPD_PHY_GetRetryTimerValue>
 800595c:	0064      	lsls	r4, r4, #1
 800595e:	4601      	mov	r1, r0
 8005960:	1c64      	adds	r4, r4, #1
 8005962:	b2e0      	uxtb	r0, r4
 8005964:	f012 f84a 	bl	80179fc <USBPD_TIM_Start>
 8005968:	2000      	movs	r0, #0
 800596a:	7428      	strb	r0, [r5, #16]
 800596c:	bd31      	pop	{r0, r4, r5, pc}

0800596e <USBPD_PRL_PrepareExtendedTxChunkSending>:
 800596e:	b530      	push	{r4, r5, lr}
 8005970:	4c11      	ldr	r4, [pc, #68]	; (80059b8 <.text_40>)
 8005972:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8005976:	8ba5      	ldrh	r5, [r4, #28]
 8005978:	f248 30ff 	movw	r0, #33791	; 0x83ff
 800597c:	4005      	ands	r5, r0
 800597e:	8a60      	ldrh	r0, [r4, #18]
 8005980:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 8005984:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005988:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
 800598c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005990:	8260      	strh	r0, [r4, #18]
 8005992:	432a      	orrs	r2, r5
 8005994:	8c21      	ldrh	r1, [r4, #32]
 8005996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800599a:	f361 0004 	bfi	r0, r1, #0, #5
 800599e:	83a2      	strh	r2, [r4, #28]
 80059a0:	8260      	strh	r0, [r4, #18]
 80059a2:	7018      	strb	r0, [r3, #0]
 80059a4:	8a60      	ldrh	r0, [r4, #18]
 80059a6:	0a00      	lsrs	r0, r0, #8
 80059a8:	7058      	strb	r0, [r3, #1]
 80059aa:	8ba0      	ldrh	r0, [r4, #28]
 80059ac:	7098      	strb	r0, [r3, #2]
 80059ae:	8ba1      	ldrh	r1, [r4, #28]
 80059b0:	0a09      	lsrs	r1, r1, #8
 80059b2:	70d9      	strb	r1, [r3, #3]
 80059b4:	bd30      	pop	{r4, r5, pc}
	...

080059b8 <.text_40>:
 80059b8:	200002c4 	.word	0x200002c4

080059bc <.text_41>:
 80059bc:	20000000 	.word	0x20000000

080059c0 <USBPD_PRL_PrepareChunkRequest>:
 80059c0:	b530      	push	{r4, r5, lr}
 80059c2:	f7ff fb2d 	bl	8005020 <.text_12>
 80059c6:	8b9c      	ldrh	r4, [r3, #28]
 80059c8:	8bdd      	ldrh	r5, [r3, #30]
 80059ca:	f444 4404 	orr.w	r4, r4, #33792	; 0x8400
 80059ce:	0aed      	lsrs	r5, r5, #11
 80059d0:	839c      	strh	r4, [r3, #28]
 80059d2:	1c6d      	adds	r5, r5, #1
 80059d4:	02ed      	lsls	r5, r5, #11
 80059d6:	f404 4406 	and.w	r4, r4, #34304	; 0x8600
 80059da:	f405 45f0 	and.w	r5, r5, #30720	; 0x7800
 80059de:	432c      	orrs	r4, r5
 80059e0:	839c      	strh	r4, [r3, #28]
 80059e2:	8a5c      	ldrh	r4, [r3, #18]
 80059e4:	8c1d      	ldrh	r5, [r3, #32]
 80059e6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80059ea:	825c      	strh	r4, [r3, #18]
 80059ec:	f365 0404 	bfi	r4, r5, #0, #5
 80059f0:	825c      	strh	r4, [r3, #18]
 80059f2:	2400      	movs	r4, #0
 80059f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80059f8:	7144      	strb	r4, [r0, #5]
 80059fa:	8a5a      	ldrh	r2, [r3, #18]
 80059fc:	700a      	strb	r2, [r1, #0]
 80059fe:	8a58      	ldrh	r0, [r3, #18]
 8005a00:	0a00      	lsrs	r0, r0, #8
 8005a02:	7048      	strb	r0, [r1, #1]
 8005a04:	8b98      	ldrh	r0, [r3, #28]
 8005a06:	7088      	strb	r0, [r1, #2]
 8005a08:	8b9a      	ldrh	r2, [r3, #28]
 8005a0a:	710c      	strb	r4, [r1, #4]
 8005a0c:	0a12      	lsrs	r2, r2, #8
 8005a0e:	714c      	strb	r4, [r1, #5]
 8005a10:	70ca      	strb	r2, [r1, #3]
 8005a12:	bd30      	pop	{r4, r5, pc}

08005a14 <.text_43>:
 8005a14:	5f4c5250 	.word	0x5f4c5250
 8005a18:	4e455645 	.word	0x4e455645
 8005a1c:	58525f54 	.word	0x58525f54
 8005a20:	5349445f 	.word	0x5349445f
 8005a24:	44524143 	.word	0x44524143
 8005a28:	00004445 	.word	0x00004445

08005a2c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8005a2c:	08005581 080058c9 08005921 0800592d     .U...X..!Y..-Y..
 8005a3c:	08005931 0800504d                       1Y..MP..

08005a44 <.text_45>:
 8005a44:	0001      	.short	0x0001

08005a46 <__aeabi_memset>:
 8005a46:	b470      	push	{r4, r5, r6}
 8005a48:	0784      	lsls	r4, r0, #30
 8005a4a:	d046      	beq.n	8005ada <__aeabi_memset+0x94>
 8005a4c:	1e4c      	subs	r4, r1, #1
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d041      	beq.n	8005ad6 <__aeabi_memset+0x90>
 8005a52:	b2d5      	uxtb	r5, r2
 8005a54:	4603      	mov	r3, r0
 8005a56:	e002      	b.n	8005a5e <__aeabi_memset+0x18>
 8005a58:	1e61      	subs	r1, r4, #1
 8005a5a:	b3e4      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	f803 5b01 	strb.w	r5, [r3], #1
 8005a62:	0799      	lsls	r1, r3, #30
 8005a64:	d1f8      	bne.n	8005a58 <__aeabi_memset+0x12>
 8005a66:	2c03      	cmp	r4, #3
 8005a68:	d92e      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005a6a:	b2d5      	uxtb	r5, r2
 8005a6c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005a70:	2c0f      	cmp	r4, #15
 8005a72:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005a76:	d919      	bls.n	8005aac <__aeabi_memset+0x66>
 8005a78:	4626      	mov	r6, r4
 8005a7a:	f103 0110 	add.w	r1, r3, #16
 8005a7e:	3e10      	subs	r6, #16
 8005a80:	2e0f      	cmp	r6, #15
 8005a82:	f841 5c10 	str.w	r5, [r1, #-16]
 8005a86:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005a8a:	f841 5c08 	str.w	r5, [r1, #-8]
 8005a8e:	f841 5c04 	str.w	r5, [r1, #-4]
 8005a92:	f101 0110 	add.w	r1, r1, #16
 8005a96:	d8f2      	bhi.n	8005a7e <__aeabi_memset+0x38>
 8005a98:	f1a4 0110 	sub.w	r1, r4, #16
 8005a9c:	f021 010f 	bic.w	r1, r1, #15
 8005aa0:	f004 040f 	and.w	r4, r4, #15
 8005aa4:	3110      	adds	r1, #16
 8005aa6:	2c03      	cmp	r4, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	d90d      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005aac:	461e      	mov	r6, r3
 8005aae:	4621      	mov	r1, r4
 8005ab0:	3904      	subs	r1, #4
 8005ab2:	2903      	cmp	r1, #3
 8005ab4:	f846 5b04 	str.w	r5, [r6], #4
 8005ab8:	d8fa      	bhi.n	8005ab0 <__aeabi_memset+0x6a>
 8005aba:	1f21      	subs	r1, r4, #4
 8005abc:	f021 0103 	bic.w	r1, r1, #3
 8005ac0:	3104      	adds	r1, #4
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f004 0403 	and.w	r4, r4, #3
 8005ac8:	b12c      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	441c      	add	r4, r3
 8005ace:	f803 2b01 	strb.w	r2, [r3], #1
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	d1fb      	bne.n	8005ace <__aeabi_memset+0x88>
 8005ad6:	bc70      	pop	{r4, r5, r6}
 8005ad8:	4770      	bx	lr
 8005ada:	460c      	mov	r4, r1
 8005adc:	4603      	mov	r3, r0
 8005ade:	e7c2      	b.n	8005a66 <__aeabi_memset+0x20>

08005ae0 <strlen>:
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	d1fb      	bne.n	8005ae2 <strlen+0x2>
 8005aea:	1a18      	subs	r0, r3, r0
 8005aec:	3801      	subs	r0, #1
 8005aee:	4770      	bx	lr

08005af0 <memchr>:
 8005af0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005af4:	2a10      	cmp	r2, #16
 8005af6:	db2b      	blt.n	8005b50 <memchr+0x60>
 8005af8:	f010 0f07 	tst.w	r0, #7
 8005afc:	d008      	beq.n	8005b10 <memchr+0x20>
 8005afe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b02:	3a01      	subs	r2, #1
 8005b04:	428b      	cmp	r3, r1
 8005b06:	d02d      	beq.n	8005b64 <memchr+0x74>
 8005b08:	f010 0f07 	tst.w	r0, #7
 8005b0c:	b342      	cbz	r2, 8005b60 <memchr+0x70>
 8005b0e:	d1f6      	bne.n	8005afe <memchr+0xe>
 8005b10:	b4f0      	push	{r4, r5, r6, r7}
 8005b12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005b16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005b1a:	f022 0407 	bic.w	r4, r2, #7
 8005b1e:	f07f 0700 	mvns.w	r7, #0
 8005b22:	2300      	movs	r3, #0
 8005b24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005b28:	3c08      	subs	r4, #8
 8005b2a:	ea85 0501 	eor.w	r5, r5, r1
 8005b2e:	ea86 0601 	eor.w	r6, r6, r1
 8005b32:	fa85 f547 	uadd8	r5, r5, r7
 8005b36:	faa3 f587 	sel	r5, r3, r7
 8005b3a:	fa86 f647 	uadd8	r6, r6, r7
 8005b3e:	faa5 f687 	sel	r6, r5, r7
 8005b42:	b98e      	cbnz	r6, 8005b68 <memchr+0x78>
 8005b44:	d1ee      	bne.n	8005b24 <memchr+0x34>
 8005b46:	bcf0      	pop	{r4, r5, r6, r7}
 8005b48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005b4c:	f002 0207 	and.w	r2, r2, #7
 8005b50:	b132      	cbz	r2, 8005b60 <memchr+0x70>
 8005b52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b56:	3a01      	subs	r2, #1
 8005b58:	ea83 0301 	eor.w	r3, r3, r1
 8005b5c:	b113      	cbz	r3, 8005b64 <memchr+0x74>
 8005b5e:	d1f8      	bne.n	8005b52 <memchr+0x62>
 8005b60:	2000      	movs	r0, #0
 8005b62:	4770      	bx	lr
 8005b64:	3801      	subs	r0, #1
 8005b66:	4770      	bx	lr
 8005b68:	2d00      	cmp	r5, #0
 8005b6a:	bf06      	itte	eq
 8005b6c:	4635      	moveq	r5, r6
 8005b6e:	3803      	subeq	r0, #3
 8005b70:	3807      	subne	r0, #7
 8005b72:	f015 0f01 	tst.w	r5, #1
 8005b76:	d107      	bne.n	8005b88 <memchr+0x98>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005b7e:	bf02      	ittt	eq
 8005b80:	3001      	addeq	r0, #1
 8005b82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005b86:	3001      	addeq	r0, #1
 8005b88:	bcf0      	pop	{r4, r5, r6, r7}
 8005b8a:	3801      	subs	r0, #1
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop

08005b90 <__aeabi_drsub>:
 8005b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005b94:	e002      	b.n	8005b9c <__adddf3>
 8005b96:	bf00      	nop

08005b98 <__aeabi_dsub>:
 8005b98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005b9c <__adddf3>:
 8005b9c:	b530      	push	{r4, r5, lr}
 8005b9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005ba2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005ba6:	ea94 0f05 	teq	r4, r5
 8005baa:	bf08      	it	eq
 8005bac:	ea90 0f02 	teqeq	r0, r2
 8005bb0:	bf1f      	itttt	ne
 8005bb2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005bb6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005bba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005bbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005bc2:	f000 80e2 	beq.w	8005d8a <__adddf3+0x1ee>
 8005bc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005bca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005bce:	bfb8      	it	lt
 8005bd0:	426d      	neglt	r5, r5
 8005bd2:	dd0c      	ble.n	8005bee <__adddf3+0x52>
 8005bd4:	442c      	add	r4, r5
 8005bd6:	ea80 0202 	eor.w	r2, r0, r2
 8005bda:	ea81 0303 	eor.w	r3, r1, r3
 8005bde:	ea82 0000 	eor.w	r0, r2, r0
 8005be2:	ea83 0101 	eor.w	r1, r3, r1
 8005be6:	ea80 0202 	eor.w	r2, r0, r2
 8005bea:	ea81 0303 	eor.w	r3, r1, r3
 8005bee:	2d36      	cmp	r5, #54	; 0x36
 8005bf0:	bf88      	it	hi
 8005bf2:	bd30      	pophi	{r4, r5, pc}
 8005bf4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005bf8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005bfc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005c00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005c04:	d002      	beq.n	8005c0c <__adddf3+0x70>
 8005c06:	4240      	negs	r0, r0
 8005c08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005c10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005c14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005c18:	d002      	beq.n	8005c20 <__adddf3+0x84>
 8005c1a:	4252      	negs	r2, r2
 8005c1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005c20:	ea94 0f05 	teq	r4, r5
 8005c24:	f000 80a7 	beq.w	8005d76 <__adddf3+0x1da>
 8005c28:	f1a4 0401 	sub.w	r4, r4, #1
 8005c2c:	f1d5 0e20 	rsbs	lr, r5, #32
 8005c30:	db0d      	blt.n	8005c4e <__adddf3+0xb2>
 8005c32:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005c36:	fa22 f205 	lsr.w	r2, r2, r5
 8005c3a:	1880      	adds	r0, r0, r2
 8005c3c:	f141 0100 	adc.w	r1, r1, #0
 8005c40:	fa03 f20e 	lsl.w	r2, r3, lr
 8005c44:	1880      	adds	r0, r0, r2
 8005c46:	fa43 f305 	asr.w	r3, r3, r5
 8005c4a:	4159      	adcs	r1, r3
 8005c4c:	e00e      	b.n	8005c6c <__adddf3+0xd0>
 8005c4e:	f1a5 0520 	sub.w	r5, r5, #32
 8005c52:	f10e 0e20 	add.w	lr, lr, #32
 8005c56:	2a01      	cmp	r2, #1
 8005c58:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005c5c:	bf28      	it	cs
 8005c5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005c62:	fa43 f305 	asr.w	r3, r3, r5
 8005c66:	18c0      	adds	r0, r0, r3
 8005c68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005c6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005c70:	d507      	bpl.n	8005c82 <__adddf3+0xe6>
 8005c72:	f04f 0e00 	mov.w	lr, #0
 8005c76:	f1dc 0c00 	rsbs	ip, ip, #0
 8005c7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005c7e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005c82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005c86:	d31b      	bcc.n	8005cc0 <__adddf3+0x124>
 8005c88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005c8c:	d30c      	bcc.n	8005ca8 <__adddf3+0x10c>
 8005c8e:	0849      	lsrs	r1, r1, #1
 8005c90:	ea5f 0030 	movs.w	r0, r0, rrx
 8005c94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005c98:	f104 0401 	add.w	r4, r4, #1
 8005c9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005ca0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005ca4:	f080 809a 	bcs.w	8005ddc <__adddf3+0x240>
 8005ca8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005cac:	bf08      	it	eq
 8005cae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005cb2:	f150 0000 	adcs.w	r0, r0, #0
 8005cb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005cba:	ea41 0105 	orr.w	r1, r1, r5
 8005cbe:	bd30      	pop	{r4, r5, pc}
 8005cc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005cc4:	4140      	adcs	r0, r0
 8005cc6:	eb41 0101 	adc.w	r1, r1, r1
 8005cca:	3c01      	subs	r4, #1
 8005ccc:	bf28      	it	cs
 8005cce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005cd2:	d2e9      	bcs.n	8005ca8 <__adddf3+0x10c>
 8005cd4:	f091 0f00 	teq	r1, #0
 8005cd8:	bf04      	itt	eq
 8005cda:	4601      	moveq	r1, r0
 8005cdc:	2000      	moveq	r0, #0
 8005cde:	fab1 f381 	clz	r3, r1
 8005ce2:	bf08      	it	eq
 8005ce4:	3320      	addeq	r3, #32
 8005ce6:	f1a3 030b 	sub.w	r3, r3, #11
 8005cea:	f1b3 0220 	subs.w	r2, r3, #32
 8005cee:	da0c      	bge.n	8005d0a <__adddf3+0x16e>
 8005cf0:	320c      	adds	r2, #12
 8005cf2:	dd08      	ble.n	8005d06 <__adddf3+0x16a>
 8005cf4:	f102 0c14 	add.w	ip, r2, #20
 8005cf8:	f1c2 020c 	rsb	r2, r2, #12
 8005cfc:	fa01 f00c 	lsl.w	r0, r1, ip
 8005d00:	fa21 f102 	lsr.w	r1, r1, r2
 8005d04:	e00c      	b.n	8005d20 <__adddf3+0x184>
 8005d06:	f102 0214 	add.w	r2, r2, #20
 8005d0a:	bfd8      	it	le
 8005d0c:	f1c2 0c20 	rsble	ip, r2, #32
 8005d10:	fa01 f102 	lsl.w	r1, r1, r2
 8005d14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005d18:	bfdc      	itt	le
 8005d1a:	ea41 010c 	orrle.w	r1, r1, ip
 8005d1e:	4090      	lslle	r0, r2
 8005d20:	1ae4      	subs	r4, r4, r3
 8005d22:	bfa2      	ittt	ge
 8005d24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005d28:	4329      	orrge	r1, r5
 8005d2a:	bd30      	popge	{r4, r5, pc}
 8005d2c:	ea6f 0404 	mvn.w	r4, r4
 8005d30:	3c1f      	subs	r4, #31
 8005d32:	da1c      	bge.n	8005d6e <__adddf3+0x1d2>
 8005d34:	340c      	adds	r4, #12
 8005d36:	dc0e      	bgt.n	8005d56 <__adddf3+0x1ba>
 8005d38:	f104 0414 	add.w	r4, r4, #20
 8005d3c:	f1c4 0220 	rsb	r2, r4, #32
 8005d40:	fa20 f004 	lsr.w	r0, r0, r4
 8005d44:	fa01 f302 	lsl.w	r3, r1, r2
 8005d48:	ea40 0003 	orr.w	r0, r0, r3
 8005d4c:	fa21 f304 	lsr.w	r3, r1, r4
 8005d50:	ea45 0103 	orr.w	r1, r5, r3
 8005d54:	bd30      	pop	{r4, r5, pc}
 8005d56:	f1c4 040c 	rsb	r4, r4, #12
 8005d5a:	f1c4 0220 	rsb	r2, r4, #32
 8005d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8005d62:	fa01 f304 	lsl.w	r3, r1, r4
 8005d66:	ea40 0003 	orr.w	r0, r0, r3
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	bd30      	pop	{r4, r5, pc}
 8005d6e:	fa21 f004 	lsr.w	r0, r1, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	bd30      	pop	{r4, r5, pc}
 8005d76:	f094 0f00 	teq	r4, #0
 8005d7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005d7e:	bf06      	itte	eq
 8005d80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005d84:	3401      	addeq	r4, #1
 8005d86:	3d01      	subne	r5, #1
 8005d88:	e74e      	b.n	8005c28 <__adddf3+0x8c>
 8005d8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005d8e:	bf18      	it	ne
 8005d90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005d94:	d029      	beq.n	8005dea <__adddf3+0x24e>
 8005d96:	ea94 0f05 	teq	r4, r5
 8005d9a:	bf08      	it	eq
 8005d9c:	ea90 0f02 	teqeq	r0, r2
 8005da0:	d005      	beq.n	8005dae <__adddf3+0x212>
 8005da2:	ea54 0c00 	orrs.w	ip, r4, r0
 8005da6:	bf04      	itt	eq
 8005da8:	4619      	moveq	r1, r3
 8005daa:	4610      	moveq	r0, r2
 8005dac:	bd30      	pop	{r4, r5, pc}
 8005dae:	ea91 0f03 	teq	r1, r3
 8005db2:	bf1e      	ittt	ne
 8005db4:	2100      	movne	r1, #0
 8005db6:	2000      	movne	r0, #0
 8005db8:	bd30      	popne	{r4, r5, pc}
 8005dba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005dbe:	d105      	bne.n	8005dcc <__adddf3+0x230>
 8005dc0:	0040      	lsls	r0, r0, #1
 8005dc2:	4149      	adcs	r1, r1
 8005dc4:	bf28      	it	cs
 8005dc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005dca:	bd30      	pop	{r4, r5, pc}
 8005dcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005dd0:	bf3c      	itt	cc
 8005dd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005dd6:	bd30      	popcc	{r4, r5, pc}
 8005dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ddc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005de0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005de4:	f04f 0000 	mov.w	r0, #0
 8005de8:	bd30      	pop	{r4, r5, pc}
 8005dea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005dee:	bf1a      	itte	ne
 8005df0:	4619      	movne	r1, r3
 8005df2:	4610      	movne	r0, r2
 8005df4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005df8:	bf1c      	itt	ne
 8005dfa:	460b      	movne	r3, r1
 8005dfc:	4602      	movne	r2, r0
 8005dfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005e02:	bf06      	itte	eq
 8005e04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005e08:	ea91 0f03 	teqeq	r1, r3
 8005e0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005e10:	bd30      	pop	{r4, r5, pc}
 8005e12:	bf00      	nop

08005e14 <__aeabi_ui2d>:
 8005e14:	f090 0f00 	teq	r0, #0
 8005e18:	bf04      	itt	eq
 8005e1a:	2100      	moveq	r1, #0
 8005e1c:	4770      	bxeq	lr
 8005e1e:	b530      	push	{r4, r5, lr}
 8005e20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005e24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005e28:	f04f 0500 	mov.w	r5, #0
 8005e2c:	f04f 0100 	mov.w	r1, #0
 8005e30:	e750      	b.n	8005cd4 <__adddf3+0x138>
 8005e32:	bf00      	nop

08005e34 <__aeabi_i2d>:
 8005e34:	f090 0f00 	teq	r0, #0
 8005e38:	bf04      	itt	eq
 8005e3a:	2100      	moveq	r1, #0
 8005e3c:	4770      	bxeq	lr
 8005e3e:	b530      	push	{r4, r5, lr}
 8005e40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005e44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005e48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005e4c:	bf48      	it	mi
 8005e4e:	4240      	negmi	r0, r0
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	e73e      	b.n	8005cd4 <__adddf3+0x138>
 8005e56:	bf00      	nop

08005e58 <__aeabi_f2d>:
 8005e58:	0042      	lsls	r2, r0, #1
 8005e5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005e5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005e62:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005e66:	bf1f      	itttt	ne
 8005e68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005e6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005e70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005e74:	4770      	bxne	lr
 8005e76:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005e7a:	bf08      	it	eq
 8005e7c:	4770      	bxeq	lr
 8005e7e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005e82:	bf04      	itt	eq
 8005e84:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005e88:	4770      	bxeq	lr
 8005e8a:	b530      	push	{r4, r5, lr}
 8005e8c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005e90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005e94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e98:	e71c      	b.n	8005cd4 <__adddf3+0x138>
 8005e9a:	bf00      	nop

08005e9c <__aeabi_ul2d>:
 8005e9c:	ea50 0201 	orrs.w	r2, r0, r1
 8005ea0:	bf08      	it	eq
 8005ea2:	4770      	bxeq	lr
 8005ea4:	b530      	push	{r4, r5, lr}
 8005ea6:	f04f 0500 	mov.w	r5, #0
 8005eaa:	e00a      	b.n	8005ec2 <__aeabi_l2d+0x16>

08005eac <__aeabi_l2d>:
 8005eac:	ea50 0201 	orrs.w	r2, r0, r1
 8005eb0:	bf08      	it	eq
 8005eb2:	4770      	bxeq	lr
 8005eb4:	b530      	push	{r4, r5, lr}
 8005eb6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005eba:	d502      	bpl.n	8005ec2 <__aeabi_l2d+0x16>
 8005ebc:	4240      	negs	r0, r0
 8005ebe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005ec2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005ec6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005eca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005ece:	f43f aed8 	beq.w	8005c82 <__adddf3+0xe6>
 8005ed2:	f04f 0203 	mov.w	r2, #3
 8005ed6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005eda:	bf18      	it	ne
 8005edc:	3203      	addne	r2, #3
 8005ede:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005ee2:	bf18      	it	ne
 8005ee4:	3203      	addne	r2, #3
 8005ee6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005eea:	f1c2 0320 	rsb	r3, r2, #32
 8005eee:	fa00 fc03 	lsl.w	ip, r0, r3
 8005ef2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ef6:	fa01 fe03 	lsl.w	lr, r1, r3
 8005efa:	ea40 000e 	orr.w	r0, r0, lr
 8005efe:	fa21 f102 	lsr.w	r1, r1, r2
 8005f02:	4414      	add	r4, r2
 8005f04:	e6bd      	b.n	8005c82 <__adddf3+0xe6>
 8005f06:	bf00      	nop

08005f08 <__aeabi_dmul>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005f0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005f12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005f16:	bf1d      	ittte	ne
 8005f18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005f1c:	ea94 0f0c 	teqne	r4, ip
 8005f20:	ea95 0f0c 	teqne	r5, ip
 8005f24:	f000 f8de 	bleq	80060e4 <__aeabi_dmul+0x1dc>
 8005f28:	442c      	add	r4, r5
 8005f2a:	ea81 0603 	eor.w	r6, r1, r3
 8005f2e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005f32:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005f36:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005f3a:	bf18      	it	ne
 8005f3c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005f40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f48:	d038      	beq.n	8005fbc <__aeabi_dmul+0xb4>
 8005f4a:	fba0 ce02 	umull	ip, lr, r0, r2
 8005f4e:	f04f 0500 	mov.w	r5, #0
 8005f52:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005f56:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005f5a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005f5e:	f04f 0600 	mov.w	r6, #0
 8005f62:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005f66:	f09c 0f00 	teq	ip, #0
 8005f6a:	bf18      	it	ne
 8005f6c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005f70:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005f74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005f78:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005f7c:	d204      	bcs.n	8005f88 <__aeabi_dmul+0x80>
 8005f7e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005f82:	416d      	adcs	r5, r5
 8005f84:	eb46 0606 	adc.w	r6, r6, r6
 8005f88:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005f8c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005f90:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005f94:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005f98:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005f9c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005fa0:	bf88      	it	hi
 8005fa2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005fa6:	d81e      	bhi.n	8005fe6 <__aeabi_dmul+0xde>
 8005fa8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005fac:	bf08      	it	eq
 8005fae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005fb2:	f150 0000 	adcs.w	r0, r0, #0
 8005fb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005fc0:	ea46 0101 	orr.w	r1, r6, r1
 8005fc4:	ea40 0002 	orr.w	r0, r0, r2
 8005fc8:	ea81 0103 	eor.w	r1, r1, r3
 8005fcc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005fd0:	bfc2      	ittt	gt
 8005fd2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005fd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005fda:	bd70      	popgt	{r4, r5, r6, pc}
 8005fdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005fe0:	f04f 0e00 	mov.w	lr, #0
 8005fe4:	3c01      	subs	r4, #1
 8005fe6:	f300 80ab 	bgt.w	8006140 <__aeabi_dmul+0x238>
 8005fea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005fee:	bfde      	ittt	le
 8005ff0:	2000      	movle	r0, #0
 8005ff2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005ff6:	bd70      	pople	{r4, r5, r6, pc}
 8005ff8:	f1c4 0400 	rsb	r4, r4, #0
 8005ffc:	3c20      	subs	r4, #32
 8005ffe:	da35      	bge.n	800606c <__aeabi_dmul+0x164>
 8006000:	340c      	adds	r4, #12
 8006002:	dc1b      	bgt.n	800603c <__aeabi_dmul+0x134>
 8006004:	f104 0414 	add.w	r4, r4, #20
 8006008:	f1c4 0520 	rsb	r5, r4, #32
 800600c:	fa00 f305 	lsl.w	r3, r0, r5
 8006010:	fa20 f004 	lsr.w	r0, r0, r4
 8006014:	fa01 f205 	lsl.w	r2, r1, r5
 8006018:	ea40 0002 	orr.w	r0, r0, r2
 800601c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006020:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006024:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006028:	fa21 f604 	lsr.w	r6, r1, r4
 800602c:	eb42 0106 	adc.w	r1, r2, r6
 8006030:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006034:	bf08      	it	eq
 8006036:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f1c4 040c 	rsb	r4, r4, #12
 8006040:	f1c4 0520 	rsb	r5, r4, #32
 8006044:	fa00 f304 	lsl.w	r3, r0, r4
 8006048:	fa20 f005 	lsr.w	r0, r0, r5
 800604c:	fa01 f204 	lsl.w	r2, r1, r4
 8006050:	ea40 0002 	orr.w	r0, r0, r2
 8006054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006058:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800605c:	f141 0100 	adc.w	r1, r1, #0
 8006060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006064:	bf08      	it	eq
 8006066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f1c4 0520 	rsb	r5, r4, #32
 8006070:	fa00 f205 	lsl.w	r2, r0, r5
 8006074:	ea4e 0e02 	orr.w	lr, lr, r2
 8006078:	fa20 f304 	lsr.w	r3, r0, r4
 800607c:	fa01 f205 	lsl.w	r2, r1, r5
 8006080:	ea43 0302 	orr.w	r3, r3, r2
 8006084:	fa21 f004 	lsr.w	r0, r1, r4
 8006088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800608c:	fa21 f204 	lsr.w	r2, r1, r4
 8006090:	ea20 0002 	bic.w	r0, r0, r2
 8006094:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006098:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800609c:	bf08      	it	eq
 800609e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	f094 0f00 	teq	r4, #0
 80060a8:	d10f      	bne.n	80060ca <__aeabi_dmul+0x1c2>
 80060aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80060ae:	0040      	lsls	r0, r0, #1
 80060b0:	eb41 0101 	adc.w	r1, r1, r1
 80060b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80060b8:	bf08      	it	eq
 80060ba:	3c01      	subeq	r4, #1
 80060bc:	d0f7      	beq.n	80060ae <__aeabi_dmul+0x1a6>
 80060be:	ea41 0106 	orr.w	r1, r1, r6
 80060c2:	f095 0f00 	teq	r5, #0
 80060c6:	bf18      	it	ne
 80060c8:	4770      	bxne	lr
 80060ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80060ce:	0052      	lsls	r2, r2, #1
 80060d0:	eb43 0303 	adc.w	r3, r3, r3
 80060d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80060d8:	bf08      	it	eq
 80060da:	3d01      	subeq	r5, #1
 80060dc:	d0f7      	beq.n	80060ce <__aeabi_dmul+0x1c6>
 80060de:	ea43 0306 	orr.w	r3, r3, r6
 80060e2:	4770      	bx	lr
 80060e4:	ea94 0f0c 	teq	r4, ip
 80060e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80060ec:	bf18      	it	ne
 80060ee:	ea95 0f0c 	teqne	r5, ip
 80060f2:	d00c      	beq.n	800610e <__aeabi_dmul+0x206>
 80060f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80060f8:	bf18      	it	ne
 80060fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80060fe:	d1d1      	bne.n	80060a4 <__aeabi_dmul+0x19c>
 8006100:	ea81 0103 	eor.w	r1, r1, r3
 8006104:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006108:	f04f 0000 	mov.w	r0, #0
 800610c:	bd70      	pop	{r4, r5, r6, pc}
 800610e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006112:	bf06      	itte	eq
 8006114:	4610      	moveq	r0, r2
 8006116:	4619      	moveq	r1, r3
 8006118:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800611c:	d019      	beq.n	8006152 <__aeabi_dmul+0x24a>
 800611e:	ea94 0f0c 	teq	r4, ip
 8006122:	d102      	bne.n	800612a <__aeabi_dmul+0x222>
 8006124:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006128:	d113      	bne.n	8006152 <__aeabi_dmul+0x24a>
 800612a:	ea95 0f0c 	teq	r5, ip
 800612e:	d105      	bne.n	800613c <__aeabi_dmul+0x234>
 8006130:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006134:	bf1c      	itt	ne
 8006136:	4610      	movne	r0, r2
 8006138:	4619      	movne	r1, r3
 800613a:	d10a      	bne.n	8006152 <__aeabi_dmul+0x24a>
 800613c:	ea81 0103 	eor.w	r1, r1, r3
 8006140:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006144:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006148:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800614c:	f04f 0000 	mov.w	r0, #0
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006156:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800615a:	bd70      	pop	{r4, r5, r6, pc}

0800615c <__aeabi_ddiv>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800616a:	bf1d      	ittte	ne
 800616c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006170:	ea94 0f0c 	teqne	r4, ip
 8006174:	ea95 0f0c 	teqne	r5, ip
 8006178:	f000 f8a7 	bleq	80062ca <__aeabi_ddiv+0x16e>
 800617c:	eba4 0405 	sub.w	r4, r4, r5
 8006180:	ea81 0e03 	eor.w	lr, r1, r3
 8006184:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006188:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800618c:	f000 8088 	beq.w	80062a0 <__aeabi_ddiv+0x144>
 8006190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006194:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006198:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800619c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80061a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80061a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80061a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80061ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80061b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80061b4:	429d      	cmp	r5, r3
 80061b6:	bf08      	it	eq
 80061b8:	4296      	cmpeq	r6, r2
 80061ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80061be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80061c2:	d202      	bcs.n	80061ca <__aeabi_ddiv+0x6e>
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80061ca:	1ab6      	subs	r6, r6, r2
 80061cc:	eb65 0503 	sbc.w	r5, r5, r3
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80061d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80061da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80061de:	ebb6 0e02 	subs.w	lr, r6, r2
 80061e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80061e6:	bf22      	ittt	cs
 80061e8:	1ab6      	subcs	r6, r6, r2
 80061ea:	4675      	movcs	r5, lr
 80061ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80061f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80061fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80061fe:	bf22      	ittt	cs
 8006200:	1ab6      	subcs	r6, r6, r2
 8006202:	4675      	movcs	r5, lr
 8006204:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	ea4f 0232 	mov.w	r2, r2, rrx
 800620e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006212:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006216:	bf22      	ittt	cs
 8006218:	1ab6      	subcs	r6, r6, r2
 800621a:	4675      	movcs	r5, lr
 800621c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	ea4f 0232 	mov.w	r2, r2, rrx
 8006226:	ebb6 0e02 	subs.w	lr, r6, r2
 800622a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800622e:	bf22      	ittt	cs
 8006230:	1ab6      	subcs	r6, r6, r2
 8006232:	4675      	movcs	r5, lr
 8006234:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006238:	ea55 0e06 	orrs.w	lr, r5, r6
 800623c:	d018      	beq.n	8006270 <__aeabi_ddiv+0x114>
 800623e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006242:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006246:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800624a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800624e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006252:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006256:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800625a:	d1c0      	bne.n	80061de <__aeabi_ddiv+0x82>
 800625c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006260:	d10b      	bne.n	800627a <__aeabi_ddiv+0x11e>
 8006262:	ea41 0100 	orr.w	r1, r1, r0
 8006266:	f04f 0000 	mov.w	r0, #0
 800626a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800626e:	e7b6      	b.n	80061de <__aeabi_ddiv+0x82>
 8006270:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006274:	bf04      	itt	eq
 8006276:	4301      	orreq	r1, r0
 8006278:	2000      	moveq	r0, #0
 800627a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800627e:	bf88      	it	hi
 8006280:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006284:	f63f aeaf 	bhi.w	8005fe6 <__aeabi_dmul+0xde>
 8006288:	ebb5 0c03 	subs.w	ip, r5, r3
 800628c:	bf04      	itt	eq
 800628e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006296:	f150 0000 	adcs.w	r0, r0, #0
 800629a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80062a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80062a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80062ac:	bfc2      	ittt	gt
 80062ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80062b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80062b6:	bd70      	popgt	{r4, r5, r6, pc}
 80062b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80062bc:	f04f 0e00 	mov.w	lr, #0
 80062c0:	3c01      	subs	r4, #1
 80062c2:	e690      	b.n	8005fe6 <__aeabi_dmul+0xde>
 80062c4:	ea45 0e06 	orr.w	lr, r5, r6
 80062c8:	e68d      	b.n	8005fe6 <__aeabi_dmul+0xde>
 80062ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80062ce:	ea94 0f0c 	teq	r4, ip
 80062d2:	bf08      	it	eq
 80062d4:	ea95 0f0c 	teqeq	r5, ip
 80062d8:	f43f af3b 	beq.w	8006152 <__aeabi_dmul+0x24a>
 80062dc:	ea94 0f0c 	teq	r4, ip
 80062e0:	d10a      	bne.n	80062f8 <__aeabi_ddiv+0x19c>
 80062e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80062e6:	f47f af34 	bne.w	8006152 <__aeabi_dmul+0x24a>
 80062ea:	ea95 0f0c 	teq	r5, ip
 80062ee:	f47f af25 	bne.w	800613c <__aeabi_dmul+0x234>
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	e72c      	b.n	8006152 <__aeabi_dmul+0x24a>
 80062f8:	ea95 0f0c 	teq	r5, ip
 80062fc:	d106      	bne.n	800630c <__aeabi_ddiv+0x1b0>
 80062fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006302:	f43f aefd 	beq.w	8006100 <__aeabi_dmul+0x1f8>
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	e722      	b.n	8006152 <__aeabi_dmul+0x24a>
 800630c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006310:	bf18      	it	ne
 8006312:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006316:	f47f aec5 	bne.w	80060a4 <__aeabi_dmul+0x19c>
 800631a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800631e:	f47f af0d 	bne.w	800613c <__aeabi_dmul+0x234>
 8006322:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006326:	f47f aeeb 	bne.w	8006100 <__aeabi_dmul+0x1f8>
 800632a:	e712      	b.n	8006152 <__aeabi_dmul+0x24a>

0800632c <__gedf2>:
 800632c:	f04f 3cff 	mov.w	ip, #4294967295
 8006330:	e006      	b.n	8006340 <__cmpdf2+0x4>
 8006332:	bf00      	nop

08006334 <__ledf2>:
 8006334:	f04f 0c01 	mov.w	ip, #1
 8006338:	e002      	b.n	8006340 <__cmpdf2+0x4>
 800633a:	bf00      	nop

0800633c <__cmpdf2>:
 800633c:	f04f 0c01 	mov.w	ip, #1
 8006340:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006344:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800634c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006350:	bf18      	it	ne
 8006352:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006356:	d01b      	beq.n	8006390 <__cmpdf2+0x54>
 8006358:	b001      	add	sp, #4
 800635a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800635e:	bf0c      	ite	eq
 8006360:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006364:	ea91 0f03 	teqne	r1, r3
 8006368:	bf02      	ittt	eq
 800636a:	ea90 0f02 	teqeq	r0, r2
 800636e:	2000      	moveq	r0, #0
 8006370:	4770      	bxeq	lr
 8006372:	f110 0f00 	cmn.w	r0, #0
 8006376:	ea91 0f03 	teq	r1, r3
 800637a:	bf58      	it	pl
 800637c:	4299      	cmppl	r1, r3
 800637e:	bf08      	it	eq
 8006380:	4290      	cmpeq	r0, r2
 8006382:	bf2c      	ite	cs
 8006384:	17d8      	asrcs	r0, r3, #31
 8006386:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800638a:	f040 0001 	orr.w	r0, r0, #1
 800638e:	4770      	bx	lr
 8006390:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006394:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006398:	d102      	bne.n	80063a0 <__cmpdf2+0x64>
 800639a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800639e:	d107      	bne.n	80063b0 <__cmpdf2+0x74>
 80063a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80063a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80063a8:	d1d6      	bne.n	8006358 <__cmpdf2+0x1c>
 80063aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80063ae:	d0d3      	beq.n	8006358 <__cmpdf2+0x1c>
 80063b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop

080063b8 <__aeabi_cdrcmple>:
 80063b8:	4684      	mov	ip, r0
 80063ba:	4610      	mov	r0, r2
 80063bc:	4662      	mov	r2, ip
 80063be:	468c      	mov	ip, r1
 80063c0:	4619      	mov	r1, r3
 80063c2:	4663      	mov	r3, ip
 80063c4:	e000      	b.n	80063c8 <__aeabi_cdcmpeq>
 80063c6:	bf00      	nop

080063c8 <__aeabi_cdcmpeq>:
 80063c8:	b501      	push	{r0, lr}
 80063ca:	f7ff ffb7 	bl	800633c <__cmpdf2>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	bf48      	it	mi
 80063d2:	f110 0f00 	cmnmi.w	r0, #0
 80063d6:	bd01      	pop	{r0, pc}

080063d8 <__aeabi_dcmpeq>:
 80063d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80063dc:	f7ff fff4 	bl	80063c8 <__aeabi_cdcmpeq>
 80063e0:	bf0c      	ite	eq
 80063e2:	2001      	moveq	r0, #1
 80063e4:	2000      	movne	r0, #0
 80063e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80063ea:	bf00      	nop

080063ec <__aeabi_dcmplt>:
 80063ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80063f0:	f7ff ffea 	bl	80063c8 <__aeabi_cdcmpeq>
 80063f4:	bf34      	ite	cc
 80063f6:	2001      	movcc	r0, #1
 80063f8:	2000      	movcs	r0, #0
 80063fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80063fe:	bf00      	nop

08006400 <__aeabi_dcmple>:
 8006400:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006404:	f7ff ffe0 	bl	80063c8 <__aeabi_cdcmpeq>
 8006408:	bf94      	ite	ls
 800640a:	2001      	movls	r0, #1
 800640c:	2000      	movhi	r0, #0
 800640e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006412:	bf00      	nop

08006414 <__aeabi_dcmpge>:
 8006414:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006418:	f7ff ffce 	bl	80063b8 <__aeabi_cdrcmple>
 800641c:	bf94      	ite	ls
 800641e:	2001      	movls	r0, #1
 8006420:	2000      	movhi	r0, #0
 8006422:	f85d fb08 	ldr.w	pc, [sp], #8
 8006426:	bf00      	nop

08006428 <__aeabi_dcmpgt>:
 8006428:	f84d ed08 	str.w	lr, [sp, #-8]!
 800642c:	f7ff ffc4 	bl	80063b8 <__aeabi_cdrcmple>
 8006430:	bf34      	ite	cc
 8006432:	2001      	movcc	r0, #1
 8006434:	2000      	movcs	r0, #0
 8006436:	f85d fb08 	ldr.w	pc, [sp], #8
 800643a:	bf00      	nop

0800643c <__aeabi_d2uiz>:
 800643c:	004a      	lsls	r2, r1, #1
 800643e:	d211      	bcs.n	8006464 <__aeabi_d2uiz+0x28>
 8006440:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006444:	d211      	bcs.n	800646a <__aeabi_d2uiz+0x2e>
 8006446:	d50d      	bpl.n	8006464 <__aeabi_d2uiz+0x28>
 8006448:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800644c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006450:	d40e      	bmi.n	8006470 <__aeabi_d2uiz+0x34>
 8006452:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800645a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800645e:	fa23 f002 	lsr.w	r0, r3, r2
 8006462:	4770      	bx	lr
 8006464:	f04f 0000 	mov.w	r0, #0
 8006468:	4770      	bx	lr
 800646a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800646e:	d102      	bne.n	8006476 <__aeabi_d2uiz+0x3a>
 8006470:	f04f 30ff 	mov.w	r0, #4294967295
 8006474:	4770      	bx	lr
 8006476:	f04f 0000 	mov.w	r0, #0
 800647a:	4770      	bx	lr

0800647c <__aeabi_d2f>:
 800647c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006480:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006484:	bf24      	itt	cs
 8006486:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800648a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800648e:	d90d      	bls.n	80064ac <__aeabi_d2f+0x30>
 8006490:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006494:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006498:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800649c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80064a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80064a4:	bf08      	it	eq
 80064a6:	f020 0001 	biceq.w	r0, r0, #1
 80064aa:	4770      	bx	lr
 80064ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80064b0:	d121      	bne.n	80064f6 <__aeabi_d2f+0x7a>
 80064b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80064b6:	bfbc      	itt	lt
 80064b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80064bc:	4770      	bxlt	lr
 80064be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80064c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80064c6:	f1c2 0218 	rsb	r2, r2, #24
 80064ca:	f1c2 0c20 	rsb	ip, r2, #32
 80064ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80064d2:	fa20 f002 	lsr.w	r0, r0, r2
 80064d6:	bf18      	it	ne
 80064d8:	f040 0001 	orrne.w	r0, r0, #1
 80064dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80064e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80064e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80064e8:	ea40 000c 	orr.w	r0, r0, ip
 80064ec:	fa23 f302 	lsr.w	r3, r3, r2
 80064f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064f4:	e7cc      	b.n	8006490 <__aeabi_d2f+0x14>
 80064f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80064fa:	d107      	bne.n	800650c <__aeabi_d2f+0x90>
 80064fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006500:	bf1e      	ittt	ne
 8006502:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006506:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800650a:	4770      	bxne	lr
 800650c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006510:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <__aeabi_uldivmod>:
 800651c:	b953      	cbnz	r3, 8006534 <__aeabi_uldivmod+0x18>
 800651e:	b94a      	cbnz	r2, 8006534 <__aeabi_uldivmod+0x18>
 8006520:	2900      	cmp	r1, #0
 8006522:	bf08      	it	eq
 8006524:	2800      	cmpeq	r0, #0
 8006526:	bf1c      	itt	ne
 8006528:	f04f 31ff 	movne.w	r1, #4294967295
 800652c:	f04f 30ff 	movne.w	r0, #4294967295
 8006530:	f000 b970 	b.w	8006814 <__aeabi_idiv0>
 8006534:	f1ad 0c08 	sub.w	ip, sp, #8
 8006538:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800653c:	f000 f806 	bl	800654c <__udivmoddi4>
 8006540:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006548:	b004      	add	sp, #16
 800654a:	4770      	bx	lr

0800654c <__udivmoddi4>:
 800654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006550:	9e08      	ldr	r6, [sp, #32]
 8006552:	460d      	mov	r5, r1
 8006554:	4604      	mov	r4, r0
 8006556:	460f      	mov	r7, r1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d14a      	bne.n	80065f2 <__udivmoddi4+0xa6>
 800655c:	428a      	cmp	r2, r1
 800655e:	4694      	mov	ip, r2
 8006560:	d965      	bls.n	800662e <__udivmoddi4+0xe2>
 8006562:	fab2 f382 	clz	r3, r2
 8006566:	b143      	cbz	r3, 800657a <__udivmoddi4+0x2e>
 8006568:	fa02 fc03 	lsl.w	ip, r2, r3
 800656c:	f1c3 0220 	rsb	r2, r3, #32
 8006570:	409f      	lsls	r7, r3
 8006572:	fa20 f202 	lsr.w	r2, r0, r2
 8006576:	4317      	orrs	r7, r2
 8006578:	409c      	lsls	r4, r3
 800657a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800657e:	fa1f f58c 	uxth.w	r5, ip
 8006582:	fbb7 f1fe 	udiv	r1, r7, lr
 8006586:	0c22      	lsrs	r2, r4, #16
 8006588:	fb0e 7711 	mls	r7, lr, r1, r7
 800658c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006590:	fb01 f005 	mul.w	r0, r1, r5
 8006594:	4290      	cmp	r0, r2
 8006596:	d90a      	bls.n	80065ae <__udivmoddi4+0x62>
 8006598:	eb1c 0202 	adds.w	r2, ip, r2
 800659c:	f101 37ff 	add.w	r7, r1, #4294967295
 80065a0:	f080 811c 	bcs.w	80067dc <__udivmoddi4+0x290>
 80065a4:	4290      	cmp	r0, r2
 80065a6:	f240 8119 	bls.w	80067dc <__udivmoddi4+0x290>
 80065aa:	3902      	subs	r1, #2
 80065ac:	4462      	add	r2, ip
 80065ae:	1a12      	subs	r2, r2, r0
 80065b0:	b2a4      	uxth	r4, r4
 80065b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80065b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80065ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80065be:	fb00 f505 	mul.w	r5, r0, r5
 80065c2:	42a5      	cmp	r5, r4
 80065c4:	d90a      	bls.n	80065dc <__udivmoddi4+0x90>
 80065c6:	eb1c 0404 	adds.w	r4, ip, r4
 80065ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80065ce:	f080 8107 	bcs.w	80067e0 <__udivmoddi4+0x294>
 80065d2:	42a5      	cmp	r5, r4
 80065d4:	f240 8104 	bls.w	80067e0 <__udivmoddi4+0x294>
 80065d8:	4464      	add	r4, ip
 80065da:	3802      	subs	r0, #2
 80065dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80065e0:	1b64      	subs	r4, r4, r5
 80065e2:	2100      	movs	r1, #0
 80065e4:	b11e      	cbz	r6, 80065ee <__udivmoddi4+0xa2>
 80065e6:	40dc      	lsrs	r4, r3
 80065e8:	2300      	movs	r3, #0
 80065ea:	e9c6 4300 	strd	r4, r3, [r6]
 80065ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f2:	428b      	cmp	r3, r1
 80065f4:	d908      	bls.n	8006608 <__udivmoddi4+0xbc>
 80065f6:	2e00      	cmp	r6, #0
 80065f8:	f000 80ed 	beq.w	80067d6 <__udivmoddi4+0x28a>
 80065fc:	2100      	movs	r1, #0
 80065fe:	e9c6 0500 	strd	r0, r5, [r6]
 8006602:	4608      	mov	r0, r1
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006608:	fab3 f183 	clz	r1, r3
 800660c:	2900      	cmp	r1, #0
 800660e:	d149      	bne.n	80066a4 <__udivmoddi4+0x158>
 8006610:	42ab      	cmp	r3, r5
 8006612:	d302      	bcc.n	800661a <__udivmoddi4+0xce>
 8006614:	4282      	cmp	r2, r0
 8006616:	f200 80f8 	bhi.w	800680a <__udivmoddi4+0x2be>
 800661a:	1a84      	subs	r4, r0, r2
 800661c:	eb65 0203 	sbc.w	r2, r5, r3
 8006620:	2001      	movs	r0, #1
 8006622:	4617      	mov	r7, r2
 8006624:	2e00      	cmp	r6, #0
 8006626:	d0e2      	beq.n	80065ee <__udivmoddi4+0xa2>
 8006628:	e9c6 4700 	strd	r4, r7, [r6]
 800662c:	e7df      	b.n	80065ee <__udivmoddi4+0xa2>
 800662e:	b902      	cbnz	r2, 8006632 <__udivmoddi4+0xe6>
 8006630:	deff      	udf	#255	; 0xff
 8006632:	fab2 f382 	clz	r3, r2
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 8090 	bne.w	800675c <__udivmoddi4+0x210>
 800663c:	1a8a      	subs	r2, r1, r2
 800663e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006642:	fa1f fe8c 	uxth.w	lr, ip
 8006646:	2101      	movs	r1, #1
 8006648:	fbb2 f5f7 	udiv	r5, r2, r7
 800664c:	fb07 2015 	mls	r0, r7, r5, r2
 8006650:	0c22      	lsrs	r2, r4, #16
 8006652:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006656:	fb0e f005 	mul.w	r0, lr, r5
 800665a:	4290      	cmp	r0, r2
 800665c:	d908      	bls.n	8006670 <__udivmoddi4+0x124>
 800665e:	eb1c 0202 	adds.w	r2, ip, r2
 8006662:	f105 38ff 	add.w	r8, r5, #4294967295
 8006666:	d202      	bcs.n	800666e <__udivmoddi4+0x122>
 8006668:	4290      	cmp	r0, r2
 800666a:	f200 80cb 	bhi.w	8006804 <__udivmoddi4+0x2b8>
 800666e:	4645      	mov	r5, r8
 8006670:	1a12      	subs	r2, r2, r0
 8006672:	b2a4      	uxth	r4, r4
 8006674:	fbb2 f0f7 	udiv	r0, r2, r7
 8006678:	fb07 2210 	mls	r2, r7, r0, r2
 800667c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006680:	fb0e fe00 	mul.w	lr, lr, r0
 8006684:	45a6      	cmp	lr, r4
 8006686:	d908      	bls.n	800669a <__udivmoddi4+0x14e>
 8006688:	eb1c 0404 	adds.w	r4, ip, r4
 800668c:	f100 32ff 	add.w	r2, r0, #4294967295
 8006690:	d202      	bcs.n	8006698 <__udivmoddi4+0x14c>
 8006692:	45a6      	cmp	lr, r4
 8006694:	f200 80bb 	bhi.w	800680e <__udivmoddi4+0x2c2>
 8006698:	4610      	mov	r0, r2
 800669a:	eba4 040e 	sub.w	r4, r4, lr
 800669e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80066a2:	e79f      	b.n	80065e4 <__udivmoddi4+0x98>
 80066a4:	f1c1 0720 	rsb	r7, r1, #32
 80066a8:	408b      	lsls	r3, r1
 80066aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80066ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80066b2:	fa05 f401 	lsl.w	r4, r5, r1
 80066b6:	fa20 f307 	lsr.w	r3, r0, r7
 80066ba:	40fd      	lsrs	r5, r7
 80066bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80066c0:	4323      	orrs	r3, r4
 80066c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80066c6:	fa1f fe8c 	uxth.w	lr, ip
 80066ca:	fb09 5518 	mls	r5, r9, r8, r5
 80066ce:	0c1c      	lsrs	r4, r3, #16
 80066d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80066d4:	fb08 f50e 	mul.w	r5, r8, lr
 80066d8:	42a5      	cmp	r5, r4
 80066da:	fa02 f201 	lsl.w	r2, r2, r1
 80066de:	fa00 f001 	lsl.w	r0, r0, r1
 80066e2:	d90b      	bls.n	80066fc <__udivmoddi4+0x1b0>
 80066e4:	eb1c 0404 	adds.w	r4, ip, r4
 80066e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80066ec:	f080 8088 	bcs.w	8006800 <__udivmoddi4+0x2b4>
 80066f0:	42a5      	cmp	r5, r4
 80066f2:	f240 8085 	bls.w	8006800 <__udivmoddi4+0x2b4>
 80066f6:	f1a8 0802 	sub.w	r8, r8, #2
 80066fa:	4464      	add	r4, ip
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	b29d      	uxth	r5, r3
 8006700:	fbb4 f3f9 	udiv	r3, r4, r9
 8006704:	fb09 4413 	mls	r4, r9, r3, r4
 8006708:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800670c:	fb03 fe0e 	mul.w	lr, r3, lr
 8006710:	45a6      	cmp	lr, r4
 8006712:	d908      	bls.n	8006726 <__udivmoddi4+0x1da>
 8006714:	eb1c 0404 	adds.w	r4, ip, r4
 8006718:	f103 35ff 	add.w	r5, r3, #4294967295
 800671c:	d26c      	bcs.n	80067f8 <__udivmoddi4+0x2ac>
 800671e:	45a6      	cmp	lr, r4
 8006720:	d96a      	bls.n	80067f8 <__udivmoddi4+0x2ac>
 8006722:	3b02      	subs	r3, #2
 8006724:	4464      	add	r4, ip
 8006726:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800672a:	fba3 9502 	umull	r9, r5, r3, r2
 800672e:	eba4 040e 	sub.w	r4, r4, lr
 8006732:	42ac      	cmp	r4, r5
 8006734:	46c8      	mov	r8, r9
 8006736:	46ae      	mov	lr, r5
 8006738:	d356      	bcc.n	80067e8 <__udivmoddi4+0x29c>
 800673a:	d053      	beq.n	80067e4 <__udivmoddi4+0x298>
 800673c:	b156      	cbz	r6, 8006754 <__udivmoddi4+0x208>
 800673e:	ebb0 0208 	subs.w	r2, r0, r8
 8006742:	eb64 040e 	sbc.w	r4, r4, lr
 8006746:	fa04 f707 	lsl.w	r7, r4, r7
 800674a:	40ca      	lsrs	r2, r1
 800674c:	40cc      	lsrs	r4, r1
 800674e:	4317      	orrs	r7, r2
 8006750:	e9c6 7400 	strd	r7, r4, [r6]
 8006754:	4618      	mov	r0, r3
 8006756:	2100      	movs	r1, #0
 8006758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675c:	f1c3 0120 	rsb	r1, r3, #32
 8006760:	fa02 fc03 	lsl.w	ip, r2, r3
 8006764:	fa20 f201 	lsr.w	r2, r0, r1
 8006768:	fa25 f101 	lsr.w	r1, r5, r1
 800676c:	409d      	lsls	r5, r3
 800676e:	432a      	orrs	r2, r5
 8006770:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006774:	fa1f fe8c 	uxth.w	lr, ip
 8006778:	fbb1 f0f7 	udiv	r0, r1, r7
 800677c:	fb07 1510 	mls	r5, r7, r0, r1
 8006780:	0c11      	lsrs	r1, r2, #16
 8006782:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006786:	fb00 f50e 	mul.w	r5, r0, lr
 800678a:	428d      	cmp	r5, r1
 800678c:	fa04 f403 	lsl.w	r4, r4, r3
 8006790:	d908      	bls.n	80067a4 <__udivmoddi4+0x258>
 8006792:	eb1c 0101 	adds.w	r1, ip, r1
 8006796:	f100 38ff 	add.w	r8, r0, #4294967295
 800679a:	d22f      	bcs.n	80067fc <__udivmoddi4+0x2b0>
 800679c:	428d      	cmp	r5, r1
 800679e:	d92d      	bls.n	80067fc <__udivmoddi4+0x2b0>
 80067a0:	3802      	subs	r0, #2
 80067a2:	4461      	add	r1, ip
 80067a4:	1b49      	subs	r1, r1, r5
 80067a6:	b292      	uxth	r2, r2
 80067a8:	fbb1 f5f7 	udiv	r5, r1, r7
 80067ac:	fb07 1115 	mls	r1, r7, r5, r1
 80067b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80067b4:	fb05 f10e 	mul.w	r1, r5, lr
 80067b8:	4291      	cmp	r1, r2
 80067ba:	d908      	bls.n	80067ce <__udivmoddi4+0x282>
 80067bc:	eb1c 0202 	adds.w	r2, ip, r2
 80067c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80067c4:	d216      	bcs.n	80067f4 <__udivmoddi4+0x2a8>
 80067c6:	4291      	cmp	r1, r2
 80067c8:	d914      	bls.n	80067f4 <__udivmoddi4+0x2a8>
 80067ca:	3d02      	subs	r5, #2
 80067cc:	4462      	add	r2, ip
 80067ce:	1a52      	subs	r2, r2, r1
 80067d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80067d4:	e738      	b.n	8006648 <__udivmoddi4+0xfc>
 80067d6:	4631      	mov	r1, r6
 80067d8:	4630      	mov	r0, r6
 80067da:	e708      	b.n	80065ee <__udivmoddi4+0xa2>
 80067dc:	4639      	mov	r1, r7
 80067de:	e6e6      	b.n	80065ae <__udivmoddi4+0x62>
 80067e0:	4610      	mov	r0, r2
 80067e2:	e6fb      	b.n	80065dc <__udivmoddi4+0x90>
 80067e4:	4548      	cmp	r0, r9
 80067e6:	d2a9      	bcs.n	800673c <__udivmoddi4+0x1f0>
 80067e8:	ebb9 0802 	subs.w	r8, r9, r2
 80067ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80067f0:	3b01      	subs	r3, #1
 80067f2:	e7a3      	b.n	800673c <__udivmoddi4+0x1f0>
 80067f4:	4645      	mov	r5, r8
 80067f6:	e7ea      	b.n	80067ce <__udivmoddi4+0x282>
 80067f8:	462b      	mov	r3, r5
 80067fa:	e794      	b.n	8006726 <__udivmoddi4+0x1da>
 80067fc:	4640      	mov	r0, r8
 80067fe:	e7d1      	b.n	80067a4 <__udivmoddi4+0x258>
 8006800:	46d0      	mov	r8, sl
 8006802:	e77b      	b.n	80066fc <__udivmoddi4+0x1b0>
 8006804:	3d02      	subs	r5, #2
 8006806:	4462      	add	r2, ip
 8006808:	e732      	b.n	8006670 <__udivmoddi4+0x124>
 800680a:	4608      	mov	r0, r1
 800680c:	e70a      	b.n	8006624 <__udivmoddi4+0xd8>
 800680e:	4464      	add	r4, ip
 8006810:	3802      	subs	r0, #2
 8006812:	e742      	b.n	800669a <__udivmoddi4+0x14e>

08006814 <__aeabi_idiv0>:
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop

08006818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <__NVIC_GetPriorityGrouping+0x18>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	0a1b      	lsrs	r3, r3, #8
 8006822:	f003 0307 	and.w	r3, r3, #7
}
 8006826:	4618      	mov	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	e000ed00 	.word	0xe000ed00

08006834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800683e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006842:	2b00      	cmp	r3, #0
 8006844:	db0b      	blt.n	800685e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	f003 021f 	and.w	r2, r3, #31
 800684c:	4907      	ldr	r1, [pc, #28]	; (800686c <__NVIC_EnableIRQ+0x38>)
 800684e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	2001      	movs	r0, #1
 8006856:	fa00 f202 	lsl.w	r2, r0, r2
 800685a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	e000e100 	.word	0xe000e100

08006870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	6039      	str	r1, [r7, #0]
 800687a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800687c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006880:	2b00      	cmp	r3, #0
 8006882:	db0a      	blt.n	800689a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	490c      	ldr	r1, [pc, #48]	; (80068bc <__NVIC_SetPriority+0x4c>)
 800688a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688e:	0112      	lsls	r2, r2, #4
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	440b      	add	r3, r1
 8006894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006898:	e00a      	b.n	80068b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	4908      	ldr	r1, [pc, #32]	; (80068c0 <__NVIC_SetPriority+0x50>)
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	3b04      	subs	r3, #4
 80068a8:	0112      	lsls	r2, r2, #4
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	440b      	add	r3, r1
 80068ae:	761a      	strb	r2, [r3, #24]
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	e000e100 	.word	0xe000e100
 80068c0:	e000ed00 	.word	0xe000ed00

080068c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b089      	sub	sp, #36	; 0x24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f1c3 0307 	rsb	r3, r3, #7
 80068de:	2b04      	cmp	r3, #4
 80068e0:	bf28      	it	cs
 80068e2:	2304      	movcs	r3, #4
 80068e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	3304      	adds	r3, #4
 80068ea:	2b06      	cmp	r3, #6
 80068ec:	d902      	bls.n	80068f4 <NVIC_EncodePriority+0x30>
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	3b03      	subs	r3, #3
 80068f2:	e000      	b.n	80068f6 <NVIC_EncodePriority+0x32>
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006902:	43da      	mvns	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	401a      	ands	r2, r3
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800690c:	f04f 31ff 	mov.w	r1, #4294967295
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	43d9      	mvns	r1, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800691c:	4313      	orrs	r3, r2
         );
}
 800691e:	4618      	mov	r0, r3
 8006920:	3724      	adds	r7, #36	; 0x24
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006930:	f3bf 8f4f 	dsb	sy
}
 8006934:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006936:	4b06      	ldr	r3, [pc, #24]	; (8006950 <__NVIC_SystemReset+0x24>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800693e:	4904      	ldr	r1, [pc, #16]	; (8006950 <__NVIC_SystemReset+0x24>)
 8006940:	4b04      	ldr	r3, [pc, #16]	; (8006954 <__NVIC_SystemReset+0x28>)
 8006942:	4313      	orrs	r3, r2
 8006944:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006946:	f3bf 8f4f 	dsb	sy
}
 800694a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800694c:	bf00      	nop
 800694e:	e7fd      	b.n	800694c <__NVIC_SystemReset+0x20>
 8006950:	e000ed00 	.word	0xe000ed00
 8006954:	05fa0004 	.word	0x05fa0004

08006958 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006960:	4b08      	ldr	r3, [pc, #32]	; (8006984 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006964:	4907      	ldr	r1, [pc, #28]	; (8006984 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4313      	orrs	r3, r2
 800696a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800696e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4013      	ands	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006976:	68fb      	ldr	r3, [r7, #12]
}
 8006978:	bf00      	nop
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40021000 	.word	0x40021000

08006988 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006990:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8006992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006994:	4907      	ldr	r1, [pc, #28]	; (80069b4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4313      	orrs	r3, r2
 800699a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <LL_APB1_GRP2_EnableClock+0x2c>)
 800699e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4013      	ands	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069a6:	68fb      	ldr	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40021000 	.word	0x40021000

080069b8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80069c8:	4a0e      	ldr	r2, [pc, #56]	; (8006a04 <LL_DMA_SetDataTransferDirection+0x4c>)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	4413      	add	r3, r2
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069dc:	f023 0310 	bic.w	r3, r3, #16
 80069e0:	4908      	ldr	r1, [pc, #32]	; (8006a04 <LL_DMA_SetDataTransferDirection+0x4c>)
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	440a      	add	r2, r1
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	4611      	mov	r1, r2
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	440a      	add	r2, r1
 80069ee:	4611      	mov	r1, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	0802037c 	.word	0x0802037c

08006a08 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8006a18:	4a0d      	ldr	r2, [pc, #52]	; (8006a50 <LL_DMA_SetMode+0x48>)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f023 0220 	bic.w	r2, r3, #32
 8006a2c:	4908      	ldr	r1, [pc, #32]	; (8006a50 <LL_DMA_SetMode+0x48>)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	440b      	add	r3, r1
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	4619      	mov	r1, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	440b      	add	r3, r1
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	600b      	str	r3, [r1, #0]
             Mode);
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	0802037c 	.word	0x0802037c

08006a54 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8006a64:	4a0d      	ldr	r2, [pc, #52]	; (8006a9c <LL_DMA_SetPeriphIncMode+0x48>)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4413      	add	r3, r2
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006a78:	4908      	ldr	r1, [pc, #32]	; (8006a9c <LL_DMA_SetPeriphIncMode+0x48>)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	440b      	add	r3, r1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	4619      	mov	r1, r3
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	440b      	add	r3, r1
 8006a86:	4619      	mov	r1, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	0802037c 	.word	0x0802037c

08006aa0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8006ab0:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <LL_DMA_SetMemoryIncMode+0x48>)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ac4:	4908      	ldr	r1, [pc, #32]	; (8006ae8 <LL_DMA_SetMemoryIncMode+0x48>)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	440b      	add	r3, r1
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	4619      	mov	r1, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	440b      	add	r3, r1
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	0802037c 	.word	0x0802037c

08006aec <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8006afc:	4a0d      	ldr	r2, [pc, #52]	; (8006b34 <LL_DMA_SetPeriphSize+0x48>)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b10:	4908      	ldr	r1, [pc, #32]	; (8006b34 <LL_DMA_SetPeriphSize+0x48>)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	440b      	add	r3, r1
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	440b      	add	r3, r1
 8006b1e:	4619      	mov	r1, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	0802037c 	.word	0x0802037c

08006b38 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8006b48:	4a0d      	ldr	r2, [pc, #52]	; (8006b80 <LL_DMA_SetMemorySize+0x48>)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4413      	add	r3, r2
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b5c:	4908      	ldr	r1, [pc, #32]	; (8006b80 <LL_DMA_SetMemorySize+0x48>)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	440b      	add	r3, r1
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	4619      	mov	r1, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	440b      	add	r3, r1
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	0802037c 	.word	0x0802037c

08006b84 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8006b94:	4a0d      	ldr	r2, [pc, #52]	; (8006bcc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4413      	add	r3, r2
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ba8:	4908      	ldr	r1, [pc, #32]	; (8006bcc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	440b      	add	r3, r1
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	440b      	add	r3, r1
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]
             Priority);
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	0802037c 	.word	0x0802037c

08006bd0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	0a9b      	lsrs	r3, r3, #10
 8006be0:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006be4:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bf8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c0e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	601a      	str	r2, [r3, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c28:	f002 faa7 	bl	800917a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c2c:	f000 f8ec 	bl	8006e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c30:	f000 fdc8 	bl	80077c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8006c34:	f000 fd40 	bl	80076b8 <MX_DMA_Init>
  MX_UART4_Init();
 8006c38:	f000 fbc0 	bl	80073bc <MX_UART4_Init>
  MX_USART1_UART_Init();
 8006c3c:	f000 fc0a 	bl	8007454 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 8006c40:	f000 fcaa 	bl	8007598 <MX_UCPD1_Init>
  MX_ADC1_Init();
 8006c44:	f000 f92c 	bl	8006ea0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006c48:	f000 f9b2 	bl	8006fb0 <MX_ADC2_Init>
  MX_ADC5_Init();
 8006c4c:	f000 fa16 	bl	800707c <MX_ADC5_Init>
  MX_I2C4_Init();
 8006c50:	f000 fa7a 	bl	8007148 <MX_I2C4_Init>
  MX_TIM3_Init();
 8006c54:	f000 fab8 	bl	80071c8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8006c58:	f000 fb38 	bl	80072cc <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8006c5c:	f000 fc4c 	bl	80074f8 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8006c60:	f017 fb42 	bl	801e2e8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  //------------------------------------------------------------------------------------- INIT

  while(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin)){}
 8006c64:	bf00      	nop
 8006c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c6a:	4842      	ldr	r0, [pc, #264]	; (8006d74 <main+0x150>)
 8006c6c:	f004 fed6 	bl	800ba1c <HAL_GPIO_ReadPin>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f7      	bne.n	8006c66 <main+0x42>

  LED_init(4);
 8006c76:	2004      	movs	r0, #4
 8006c78:	f016 f8d6 	bl	801ce28 <LED_init>

  UNICARD1data.OCR = UC1OCR_manual;
 8006c7c:	4b3e      	ldr	r3, [pc, #248]	; (8006d78 <main+0x154>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  UNICARD1data.OCRrecoveryTime_ms = 1000;
 8006c84:	4b3c      	ldr	r3, [pc, #240]	; (8006d78 <main+0x154>)
 8006c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  RS485cfg.huart = &huart2;
 8006c8e:	4b3b      	ldr	r3, [pc, #236]	; (8006d7c <main+0x158>)
 8006c90:	4a3b      	ldr	r2, [pc, #236]	; (8006d80 <main+0x15c>)
 8006c92:	601a      	str	r2, [r3, #0]
  RS485cfg.TXbuffSize = TXbuffSIZE;
 8006c94:	4b39      	ldr	r3, [pc, #228]	; (8006d7c <main+0x158>)
 8006c96:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006c9a:	811a      	strh	r2, [r3, #8]
  RS485cfg.TXbuffer = RS485TXbuffer;
 8006c9c:	4b37      	ldr	r3, [pc, #220]	; (8006d7c <main+0x158>)
 8006c9e:	4a39      	ldr	r2, [pc, #228]	; (8006d84 <main+0x160>)
 8006ca0:	605a      	str	r2, [r3, #4]
  RS485cfg.RXbuffSize = RXbuffSIZE;
 8006ca2:	4b36      	ldr	r3, [pc, #216]	; (8006d7c <main+0x158>)
 8006ca4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ca8:	821a      	strh	r2, [r3, #16]
  RS485cfg.RXbuffer = RS485RXbuffer;
 8006caa:	4b34      	ldr	r3, [pc, #208]	; (8006d7c <main+0x158>)
 8006cac:	4a36      	ldr	r2, [pc, #216]	; (8006d88 <main+0x164>)
 8006cae:	60da      	str	r2, [r3, #12]

  RS485_Init(&RS485cfg);
 8006cb0:	4832      	ldr	r0, [pc, #200]	; (8006d7c <main+0x158>)
 8006cb2:	f016 f833 	bl	801cd1c <RS485_Init>
  //HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&adc2_data, 1);

  //HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
  //HAL_ADC_Start_DMA(&hadc5, (uint32_t *)&adc5_data, 1);

  HAL_Delay(500);
 8006cb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cba:	f002 fa95 	bl	80091e8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006cbe:	f012 fbcb 	bl	8019458 <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8006cc2:	f016 ff1d 	bl	801db00 <MX_USBPD_Init>
  /* Create the mutex(es) */
  /* creation of mutex_RS485 */
  mutex_RS485Handle = osMutexNew(&mutex_RS485_attributes);
 8006cc6:	4831      	ldr	r0, [pc, #196]	; (8006d8c <main+0x168>)
 8006cc8:	f012 fcea 	bl	80196a0 <osMutexNew>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	4a30      	ldr	r2, [pc, #192]	; (8006d90 <main+0x16c>)
 8006cd0:	6013      	str	r3, [r2, #0]

  /* creation of mutex_USB */
  mutex_USBHandle = osMutexNew(&mutex_USB_attributes);
 8006cd2:	4830      	ldr	r0, [pc, #192]	; (8006d94 <main+0x170>)
 8006cd4:	f012 fce4 	bl	80196a0 <osMutexNew>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	4a2f      	ldr	r2, [pc, #188]	; (8006d98 <main+0x174>)
 8006cdc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_USBcom */
  task_USBcomHandle = osThreadNew(StartDefaultTask, NULL, &task_USBcom_attributes);
 8006cde:	4a2f      	ldr	r2, [pc, #188]	; (8006d9c <main+0x178>)
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	482f      	ldr	r0, [pc, #188]	; (8006da0 <main+0x17c>)
 8006ce4:	f012 fc02 	bl	80194ec <osThreadNew>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4a2e      	ldr	r2, [pc, #184]	; (8006da4 <main+0x180>)
 8006cec:	6013      	str	r3, [r2, #0]

  /* creation of LEDcontrol */
  LEDcontrolHandle = osThreadNew(task_LEDcontrol, NULL, &LEDcontrol_attributes);
 8006cee:	4a2e      	ldr	r2, [pc, #184]	; (8006da8 <main+0x184>)
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	482e      	ldr	r0, [pc, #184]	; (8006dac <main+0x188>)
 8006cf4:	f012 fbfa 	bl	80194ec <osThreadNew>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4a2d      	ldr	r2, [pc, #180]	; (8006db0 <main+0x18c>)
 8006cfc:	6013      	str	r3, [r2, #0]

  /* creation of Current_Check */
  Current_CheckHandle = osThreadNew(task_Current_Check, NULL, &Current_Check_attributes);
 8006cfe:	4a2d      	ldr	r2, [pc, #180]	; (8006db4 <main+0x190>)
 8006d00:	2100      	movs	r1, #0
 8006d02:	482d      	ldr	r0, [pc, #180]	; (8006db8 <main+0x194>)
 8006d04:	f012 fbf2 	bl	80194ec <osThreadNew>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	4a2c      	ldr	r2, [pc, #176]	; (8006dbc <main+0x198>)
 8006d0c:	6013      	str	r3, [r2, #0]

  /* creation of BUTTON */
  BUTTONHandle = osThreadNew(task_BUTTON, NULL, &BUTTON_attributes);
 8006d0e:	4a2c      	ldr	r2, [pc, #176]	; (8006dc0 <main+0x19c>)
 8006d10:	2100      	movs	r1, #0
 8006d12:	482c      	ldr	r0, [pc, #176]	; (8006dc4 <main+0x1a0>)
 8006d14:	f012 fbea 	bl	80194ec <osThreadNew>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4a2b      	ldr	r2, [pc, #172]	; (8006dc8 <main+0x1a4>)
 8006d1c:	6013      	str	r3, [r2, #0]

  /* creation of StateMachine */
  StateMachineHandle = osThreadNew(task_StateMachine, NULL, &StateMachine_attributes);
 8006d1e:	4a2b      	ldr	r2, [pc, #172]	; (8006dcc <main+0x1a8>)
 8006d20:	2100      	movs	r1, #0
 8006d22:	482b      	ldr	r0, [pc, #172]	; (8006dd0 <main+0x1ac>)
 8006d24:	f012 fbe2 	bl	80194ec <osThreadNew>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <main+0x1b0>)
 8006d2c:	6013      	str	r3, [r2, #0]

  /* creation of PCconnectionWat */
  PCconnectionWatHandle = osThreadNew(task_PCconnectionWatchDog, NULL, &PCconnectionWat_attributes);
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <main+0x1b4>)
 8006d30:	2100      	movs	r1, #0
 8006d32:	482a      	ldr	r0, [pc, #168]	; (8006ddc <main+0x1b8>)
 8006d34:	f012 fbda 	bl	80194ec <osThreadNew>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	4a29      	ldr	r2, [pc, #164]	; (8006de0 <main+0x1bc>)
 8006d3c:	6013      	str	r3, [r2, #0]

  /* creation of CardConnectionW */
  CardConnectionWHandle = osThreadNew(taks_CardConnectionWatchDog, NULL, &CardConnectionW_attributes);
 8006d3e:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <main+0x1c0>)
 8006d40:	2100      	movs	r1, #0
 8006d42:	4829      	ldr	r0, [pc, #164]	; (8006de8 <main+0x1c4>)
 8006d44:	f012 fbd2 	bl	80194ec <osThreadNew>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	4a28      	ldr	r2, [pc, #160]	; (8006dec <main+0x1c8>)
 8006d4c:	6013      	str	r3, [r2, #0]

  /* creation of CardConnectionC */
  CardConnectionCHandle = osThreadNew(task_CardConnectionCheck, NULL, &CardConnectionC_attributes);
 8006d4e:	4a28      	ldr	r2, [pc, #160]	; (8006df0 <main+0x1cc>)
 8006d50:	2100      	movs	r1, #0
 8006d52:	4828      	ldr	r0, [pc, #160]	; (8006df4 <main+0x1d0>)
 8006d54:	f012 fbca 	bl	80194ec <osThreadNew>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4a27      	ldr	r2, [pc, #156]	; (8006df8 <main+0x1d4>)
 8006d5c:	6013      	str	r3, [r2, #0]

  /* creation of CardUpdateStatu */
  CardUpdateStatuHandle = osThreadNew(task_CardUpdateStatus, NULL, &CardUpdateStatu_attributes);
 8006d5e:	4a27      	ldr	r2, [pc, #156]	; (8006dfc <main+0x1d8>)
 8006d60:	2100      	movs	r1, #0
 8006d62:	4827      	ldr	r0, [pc, #156]	; (8006e00 <main+0x1dc>)
 8006d64:	f012 fbc2 	bl	80194ec <osThreadNew>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <main+0x1e0>)
 8006d6c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8006d6e:	f012 fb97 	bl	80194a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006d72:	e7fe      	b.n	8006d72 <main+0x14e>
 8006d74:	48000800 	.word	0x48000800
 8006d78:	200009b4 	.word	0x200009b4
 8006d7c:	20000a08 	.word	0x20000a08
 8006d80:	20000748 	.word	0x20000748
 8006d84:	20000a1c 	.word	0x20000a1c
 8006d88:	20000ff8 	.word	0x20000ff8
 8006d8c:	080204c8 	.word	0x080204c8
 8006d90:	20000980 	.word	0x20000980
 8006d94:	080204d8 	.word	0x080204d8
 8006d98:	20000984 	.word	0x20000984
 8006d9c:	08020384 	.word	0x08020384
 8006da0:	08007c1d 	.word	0x08007c1d
 8006da4:	2000095c 	.word	0x2000095c
 8006da8:	080203a8 	.word	0x080203a8
 8006dac:	08007c2f 	.word	0x08007c2f
 8006db0:	20000960 	.word	0x20000960
 8006db4:	080203cc 	.word	0x080203cc
 8006db8:	08007c5d 	.word	0x08007c5d
 8006dbc:	20000964 	.word	0x20000964
 8006dc0:	080203f0 	.word	0x080203f0
 8006dc4:	08007d4d 	.word	0x08007d4d
 8006dc8:	20000968 	.word	0x20000968
 8006dcc:	08020414 	.word	0x08020414
 8006dd0:	08007db1 	.word	0x08007db1
 8006dd4:	2000096c 	.word	0x2000096c
 8006dd8:	08020438 	.word	0x08020438
 8006ddc:	0800809d 	.word	0x0800809d
 8006de0:	20000970 	.word	0x20000970
 8006de4:	0802045c 	.word	0x0802045c
 8006de8:	080080e1 	.word	0x080080e1
 8006dec:	20000974 	.word	0x20000974
 8006df0:	08020480 	.word	0x08020480
 8006df4:	08008131 	.word	0x08008131
 8006df8:	20000978 	.word	0x20000978
 8006dfc:	080204a4 	.word	0x080204a4
 8006e00:	08008279 	.word	0x08008279
 8006e04:	2000097c 	.word	0x2000097c

08006e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b094      	sub	sp, #80	; 0x50
 8006e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e0e:	f107 0318 	add.w	r3, r7, #24
 8006e12:	2238      	movs	r2, #56	; 0x38
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f018 f85a 	bl	801eed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e1c:	1d3b      	adds	r3, r7, #4
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	605a      	str	r2, [r3, #4]
 8006e24:	609a      	str	r2, [r3, #8]
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e2e:	f006 fc8b 	bl	800d748 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006e32:	2302      	movs	r3, #2
 8006e34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006e3c:	2340      	movs	r3, #64	; 0x40
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e40:	2302      	movs	r3, #2
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006e44:	2302      	movs	r3, #2
 8006e46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8006e4c:	2312      	movs	r3, #18
 8006e4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e50:	2302      	movs	r3, #2
 8006e52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8006e54:	2306      	movs	r3, #6
 8006e56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e5c:	f107 0318 	add.w	r3, r7, #24
 8006e60:	4618      	mov	r0, r3
 8006e62:	f006 fd25 	bl	800d8b0 <HAL_RCC_OscConfig>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8006e6c:	f001 fae2 	bl	8008434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e70:	230f      	movs	r3, #15
 8006e72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e74:	2303      	movs	r3, #3
 8006e76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006e84:	1d3b      	adds	r3, r7, #4
 8006e86:	2104      	movs	r1, #4
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f007 f823 	bl	800ded4 <HAL_RCC_ClockConfig>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8006e94:	f001 face 	bl	8008434 <Error_Handler>
  }
}
 8006e98:	bf00      	nop
 8006e9a:	3750      	adds	r7, #80	; 0x50
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	; 0x30
 8006ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8006ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	605a      	str	r2, [r3, #4]
 8006eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006eb2:	1d3b      	adds	r3, r7, #4
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f018 f809 	bl	801eed0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8006ebe:	4b39      	ldr	r3, [pc, #228]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006ec0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ec4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8006ec6:	4b37      	ldr	r3, [pc, #220]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006ec8:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8006ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006ece:	4b35      	ldr	r3, [pc, #212]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ed4:	4b33      	ldr	r3, [pc, #204]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006eda:	4b32      	ldr	r3, [pc, #200]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006ee0:	4b30      	ldr	r3, [pc, #192]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006ee6:	4b2f      	ldr	r3, [pc, #188]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006ee8:	2204      	movs	r2, #4
 8006eea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006eec:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006ef2:	4b2c      	ldr	r3, [pc, #176]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8006ef8:	4b2a      	ldr	r3, [pc, #168]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006efa:	2202      	movs	r2, #2
 8006efc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006efe:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006f06:	4b27      	ldr	r3, [pc, #156]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006f0c:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006f1a:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006f20:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006f28:	481e      	ldr	r0, [pc, #120]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f2a:	f002 fc0b 	bl	8009744 <HAL_ADC_Init>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8006f34:	f001 fa7e 	bl	8008434 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f40:	4619      	mov	r1, r3
 8006f42:	4818      	ldr	r0, [pc, #96]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f44:	f003 fece 	bl	800ace4 <HAL_ADCEx_MultiModeConfigChannel>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8006f4e:	f001 fa71 	bl	8008434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <MX_ADC1_Init+0x108>)
 8006f54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006f56:	2306      	movs	r3, #6
 8006f58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006f5e:	237f      	movs	r3, #127	; 0x7f
 8006f60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006f62:	2304      	movs	r3, #4
 8006f64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	480d      	ldr	r0, [pc, #52]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f70:	f003 f8f6 	bl	800a160 <HAL_ADC_ConfigChannel>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8006f7a:	f001 fa5b 	bl	8008434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <MX_ADC1_Init+0x10c>)
 8006f80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006f82:	230c      	movs	r3, #12
 8006f84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4806      	ldr	r0, [pc, #24]	; (8006fa4 <MX_ADC1_Init+0x104>)
 8006f8c:	f003 f8e8 	bl	800a160 <HAL_ADC_ConfigChannel>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8006f96:	f001 fa4d 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006f9a:	bf00      	nop
 8006f9c:	3730      	adds	r7, #48	; 0x30
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200002d0 	.word	0x200002d0
 8006fa8:	2e300800 	.word	0x2e300800
 8006fac:	2a000400 	.word	0x2a000400

08006fb0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	2220      	movs	r2, #32
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f017 ff87 	bl	801eed0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8006fc2:	4b2b      	ldr	r3, [pc, #172]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006fc4:	4a2b      	ldr	r2, [pc, #172]	; (8007074 <MX_ADC2_Init+0xc4>)
 8006fc6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8006fc8:	4b29      	ldr	r3, [pc, #164]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006fca:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8006fce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006fd0:	4b27      	ldr	r3, [pc, #156]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006fd6:	4b26      	ldr	r3, [pc, #152]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8006fdc:	4b24      	ldr	r3, [pc, #144]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006fe2:	4b23      	ldr	r3, [pc, #140]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006fe8:	4b21      	ldr	r3, [pc, #132]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006fea:	2204      	movs	r2, #4
 8006fec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8006fee:	4b20      	ldr	r3, [pc, #128]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006ff4:	4b1e      	ldr	r3, [pc, #120]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8006ffa:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <MX_ADC2_Init+0xc0>)
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007000:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <MX_ADC2_Init+0xc0>)
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007008:	4b19      	ldr	r3, [pc, #100]	; (8007070 <MX_ADC2_Init+0xc0>)
 800700a:	2200      	movs	r2, #0
 800700c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800700e:	4b18      	ldr	r3, [pc, #96]	; (8007070 <MX_ADC2_Init+0xc0>)
 8007010:	2200      	movs	r2, #0
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8007014:	4b16      	ldr	r3, [pc, #88]	; (8007070 <MX_ADC2_Init+0xc0>)
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800701c:	4b14      	ldr	r3, [pc, #80]	; (8007070 <MX_ADC2_Init+0xc0>)
 800701e:	2200      	movs	r2, #0
 8007020:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8007022:	4b13      	ldr	r3, [pc, #76]	; (8007070 <MX_ADC2_Init+0xc0>)
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800702a:	4811      	ldr	r0, [pc, #68]	; (8007070 <MX_ADC2_Init+0xc0>)
 800702c:	f002 fb8a 	bl	8009744 <HAL_ADC_Init>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8007036:	f001 f9fd 	bl	8008434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <MX_ADC2_Init+0xc8>)
 800703c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800703e:	2306      	movs	r3, #6
 8007040:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8007042:	2302      	movs	r3, #2
 8007044:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007046:	237f      	movs	r3, #127	; 0x7f
 8007048:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800704a:	2304      	movs	r3, #4
 800704c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007052:	463b      	mov	r3, r7
 8007054:	4619      	mov	r1, r3
 8007056:	4806      	ldr	r0, [pc, #24]	; (8007070 <MX_ADC2_Init+0xc0>)
 8007058:	f003 f882 	bl	800a160 <HAL_ADC_ConfigChannel>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8007062:	f001 f9e7 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8007066:	bf00      	nop
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	2000033c 	.word	0x2000033c
 8007074:	50000100 	.word	0x50000100
 8007078:	47520000 	.word	0x47520000

0800707c <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007082:	463b      	mov	r3, r7
 8007084:	2220      	movs	r2, #32
 8007086:	2100      	movs	r1, #0
 8007088:	4618      	mov	r0, r3
 800708a:	f017 ff21 	bl	801eed0 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800708e:	4b2b      	ldr	r3, [pc, #172]	; (800713c <MX_ADC5_Init+0xc0>)
 8007090:	4a2b      	ldr	r2, [pc, #172]	; (8007140 <MX_ADC5_Init+0xc4>)
 8007092:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8007094:	4b29      	ldr	r3, [pc, #164]	; (800713c <MX_ADC5_Init+0xc0>)
 8007096:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800709a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800709c:	4b27      	ldr	r3, [pc, #156]	; (800713c <MX_ADC5_Init+0xc0>)
 800709e:	2200      	movs	r2, #0
 80070a0:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070a2:	4b26      	ldr	r3, [pc, #152]	; (800713c <MX_ADC5_Init+0xc0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80070a8:	4b24      	ldr	r3, [pc, #144]	; (800713c <MX_ADC5_Init+0xc0>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80070ae:	4b23      	ldr	r3, [pc, #140]	; (800713c <MX_ADC5_Init+0xc0>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070b4:	4b21      	ldr	r3, [pc, #132]	; (800713c <MX_ADC5_Init+0xc0>)
 80070b6:	2204      	movs	r2, #4
 80070b8:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80070ba:	4b20      	ldr	r3, [pc, #128]	; (800713c <MX_ADC5_Init+0xc0>)
 80070bc:	2200      	movs	r2, #0
 80070be:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80070c0:	4b1e      	ldr	r3, [pc, #120]	; (800713c <MX_ADC5_Init+0xc0>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80070c6:	4b1d      	ldr	r3, [pc, #116]	; (800713c <MX_ADC5_Init+0xc0>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80070cc:	4b1b      	ldr	r3, [pc, #108]	; (800713c <MX_ADC5_Init+0xc0>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070d4:	4b19      	ldr	r3, [pc, #100]	; (800713c <MX_ADC5_Init+0xc0>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80070da:	4b18      	ldr	r3, [pc, #96]	; (800713c <MX_ADC5_Init+0xc0>)
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80070e0:	4b16      	ldr	r3, [pc, #88]	; (800713c <MX_ADC5_Init+0xc0>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80070e8:	4b14      	ldr	r3, [pc, #80]	; (800713c <MX_ADC5_Init+0xc0>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <MX_ADC5_Init+0xc0>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80070f6:	4811      	ldr	r0, [pc, #68]	; (800713c <MX_ADC5_Init+0xc0>)
 80070f8:	f002 fb24 	bl	8009744 <HAL_ADC_Init>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8007102:	f001 f997 	bl	8008434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007106:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <MX_ADC5_Init+0xc8>)
 8007108:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800710a:	2306      	movs	r3, #6
 800710c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800710e:	2302      	movs	r3, #2
 8007110:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007112:	237f      	movs	r3, #127	; 0x7f
 8007114:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007116:	2304      	movs	r3, #4
 8007118:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800711e:	463b      	mov	r3, r7
 8007120:	4619      	mov	r1, r3
 8007122:	4806      	ldr	r0, [pc, #24]	; (800713c <MX_ADC5_Init+0xc0>)
 8007124:	f003 f81c 	bl	800a160 <HAL_ADC_ConfigChannel>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800712e:	f001 f981 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8007132:	bf00      	nop
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	200003a8 	.word	0x200003a8
 8007140:	50000600 	.word	0x50000600
 8007144:	04300002 	.word	0x04300002

08007148 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800714c:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <MX_I2C4_Init+0x74>)
 800714e:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <MX_I2C4_Init+0x78>)
 8007150:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0D9FF;
 8007152:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <MX_I2C4_Init+0x74>)
 8007154:	4a1b      	ldr	r2, [pc, #108]	; (80071c4 <MX_I2C4_Init+0x7c>)
 8007156:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8007158:	4b18      	ldr	r3, [pc, #96]	; (80071bc <MX_I2C4_Init+0x74>)
 800715a:	2200      	movs	r2, #0
 800715c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800715e:	4b17      	ldr	r3, [pc, #92]	; (80071bc <MX_I2C4_Init+0x74>)
 8007160:	2201      	movs	r2, #1
 8007162:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007164:	4b15      	ldr	r3, [pc, #84]	; (80071bc <MX_I2C4_Init+0x74>)
 8007166:	2200      	movs	r2, #0
 8007168:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800716a:	4b14      	ldr	r3, [pc, #80]	; (80071bc <MX_I2C4_Init+0x74>)
 800716c:	2200      	movs	r2, #0
 800716e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007170:	4b12      	ldr	r3, [pc, #72]	; (80071bc <MX_I2C4_Init+0x74>)
 8007172:	2200      	movs	r2, #0
 8007174:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007176:	4b11      	ldr	r3, [pc, #68]	; (80071bc <MX_I2C4_Init+0x74>)
 8007178:	2200      	movs	r2, #0
 800717a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800717c:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <MX_I2C4_Init+0x74>)
 800717e:	2200      	movs	r2, #0
 8007180:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8007182:	480e      	ldr	r0, [pc, #56]	; (80071bc <MX_I2C4_Init+0x74>)
 8007184:	f004 fc7a 	bl	800ba7c <HAL_I2C_Init>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800718e:	f001 f951 	bl	8008434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007192:	2100      	movs	r1, #0
 8007194:	4809      	ldr	r0, [pc, #36]	; (80071bc <MX_I2C4_Init+0x74>)
 8007196:	f004 fd0c 	bl	800bbb2 <HAL_I2CEx_ConfigAnalogFilter>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80071a0:	f001 f948 	bl	8008434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80071a4:	2100      	movs	r1, #0
 80071a6:	4805      	ldr	r0, [pc, #20]	; (80071bc <MX_I2C4_Init+0x74>)
 80071a8:	f004 fd4e 	bl	800bc48 <HAL_I2CEx_ConfigDigitalFilter>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80071b2:	f001 f93f 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80071b6:	bf00      	nop
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000534 	.word	0x20000534
 80071c0:	40008400 	.word	0x40008400
 80071c4:	20b0d9ff 	.word	0x20b0d9ff

080071c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08e      	sub	sp, #56	; 0x38
 80071cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80071ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	605a      	str	r2, [r3, #4]
 80071d8:	609a      	str	r2, [r3, #8]
 80071da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071dc:	f107 031c 	add.w	r3, r7, #28
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80071e8:	463b      	mov	r3, r7
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	605a      	str	r2, [r3, #4]
 80071f0:	609a      	str	r2, [r3, #8]
 80071f2:	60da      	str	r2, [r3, #12]
 80071f4:	611a      	str	r2, [r3, #16]
 80071f6:	615a      	str	r2, [r3, #20]
 80071f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80071fa:	4b32      	ldr	r3, [pc, #200]	; (80072c4 <MX_TIM3_Init+0xfc>)
 80071fc:	4a32      	ldr	r2, [pc, #200]	; (80072c8 <MX_TIM3_Init+0x100>)
 80071fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8007200:	4b30      	ldr	r3, [pc, #192]	; (80072c4 <MX_TIM3_Init+0xfc>)
 8007202:	2209      	movs	r2, #9
 8007204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007206:	4b2f      	ldr	r3, [pc, #188]	; (80072c4 <MX_TIM3_Init+0xfc>)
 8007208:	2200      	movs	r2, #0
 800720a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800720c:	4b2d      	ldr	r3, [pc, #180]	; (80072c4 <MX_TIM3_Init+0xfc>)
 800720e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007214:	4b2b      	ldr	r3, [pc, #172]	; (80072c4 <MX_TIM3_Init+0xfc>)
 8007216:	2200      	movs	r2, #0
 8007218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800721a:	4b2a      	ldr	r3, [pc, #168]	; (80072c4 <MX_TIM3_Init+0xfc>)
 800721c:	2280      	movs	r2, #128	; 0x80
 800721e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007220:	4828      	ldr	r0, [pc, #160]	; (80072c4 <MX_TIM3_Init+0xfc>)
 8007222:	f007 faf3 	bl	800e80c <HAL_TIM_Base_Init>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800722c:	f001 f902 	bl	8008434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800723a:	4619      	mov	r1, r3
 800723c:	4821      	ldr	r0, [pc, #132]	; (80072c4 <MX_TIM3_Init+0xfc>)
 800723e:	f007 ff8d 	bl	800f15c <HAL_TIM_ConfigClockSource>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8007248:	f001 f8f4 	bl	8008434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800724c:	481d      	ldr	r0, [pc, #116]	; (80072c4 <MX_TIM3_Init+0xfc>)
 800724e:	f007 fbad 	bl	800e9ac <HAL_TIM_PWM_Init>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8007258:	f001 f8ec 	bl	8008434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800725c:	2300      	movs	r3, #0
 800725e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007260:	2300      	movs	r3, #0
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007264:	f107 031c 	add.w	r3, r7, #28
 8007268:	4619      	mov	r1, r3
 800726a:	4816      	ldr	r0, [pc, #88]	; (80072c4 <MX_TIM3_Init+0xfc>)
 800726c:	f008 fd54 	bl	800fd18 <HAL_TIMEx_MasterConfigSynchronization>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8007276:	f001 f8dd 	bl	8008434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800727a:	2360      	movs	r3, #96	; 0x60
 800727c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007282:	2300      	movs	r3, #0
 8007284:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007286:	2300      	movs	r3, #0
 8007288:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800728a:	463b      	mov	r3, r7
 800728c:	2208      	movs	r2, #8
 800728e:	4619      	mov	r1, r3
 8007290:	480c      	ldr	r0, [pc, #48]	; (80072c4 <MX_TIM3_Init+0xfc>)
 8007292:	f007 fe4f 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800729c:	f001 f8ca 	bl	8008434 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80072a0:	463b      	mov	r3, r7
 80072a2:	220c      	movs	r2, #12
 80072a4:	4619      	mov	r1, r3
 80072a6:	4807      	ldr	r0, [pc, #28]	; (80072c4 <MX_TIM3_Init+0xfc>)
 80072a8:	f007 fe44 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80072b2:	f001 f8bf 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80072b6:	4803      	ldr	r0, [pc, #12]	; (80072c4 <MX_TIM3_Init+0xfc>)
 80072b8:	f001 fb9c 	bl	80089f4 <HAL_TIM_MspPostInit>

}
 80072bc:	bf00      	nop
 80072be:	3738      	adds	r7, #56	; 0x38
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	20000588 	.word	0x20000588
 80072c8:	40000400 	.word	0x40000400

080072cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08e      	sub	sp, #56	; 0x38
 80072d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80072d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	605a      	str	r2, [r3, #4]
 80072dc:	609a      	str	r2, [r3, #8]
 80072de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072e0:	f107 031c 	add.w	r3, r7, #28
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072ec:	463b      	mov	r3, r7
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	605a      	str	r2, [r3, #4]
 80072f4:	609a      	str	r2, [r3, #8]
 80072f6:	60da      	str	r2, [r3, #12]
 80072f8:	611a      	str	r2, [r3, #16]
 80072fa:	615a      	str	r2, [r3, #20]
 80072fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80072fe:	4b2d      	ldr	r3, [pc, #180]	; (80073b4 <MX_TIM5_Init+0xe8>)
 8007300:	4a2d      	ldr	r2, [pc, #180]	; (80073b8 <MX_TIM5_Init+0xec>)
 8007302:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10-1;
 8007304:	4b2b      	ldr	r3, [pc, #172]	; (80073b4 <MX_TIM5_Init+0xe8>)
 8007306:	2209      	movs	r2, #9
 8007308:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800730a:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <MX_TIM5_Init+0xe8>)
 800730c:	2200      	movs	r2, #0
 800730e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8007310:	4b28      	ldr	r3, [pc, #160]	; (80073b4 <MX_TIM5_Init+0xe8>)
 8007312:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007316:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007318:	4b26      	ldr	r3, [pc, #152]	; (80073b4 <MX_TIM5_Init+0xe8>)
 800731a:	2200      	movs	r2, #0
 800731c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800731e:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <MX_TIM5_Init+0xe8>)
 8007320:	2280      	movs	r2, #128	; 0x80
 8007322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007324:	4823      	ldr	r0, [pc, #140]	; (80073b4 <MX_TIM5_Init+0xe8>)
 8007326:	f007 fa71 	bl	800e80c <HAL_TIM_Base_Init>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8007330:	f001 f880 	bl	8008434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800733a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800733e:	4619      	mov	r1, r3
 8007340:	481c      	ldr	r0, [pc, #112]	; (80073b4 <MX_TIM5_Init+0xe8>)
 8007342:	f007 ff0b 	bl	800f15c <HAL_TIM_ConfigClockSource>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800734c:	f001 f872 	bl	8008434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8007350:	4818      	ldr	r0, [pc, #96]	; (80073b4 <MX_TIM5_Init+0xe8>)
 8007352:	f007 fb2b 	bl	800e9ac <HAL_TIM_PWM_Init>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800735c:	f001 f86a 	bl	8008434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007364:	2300      	movs	r3, #0
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007368:	f107 031c 	add.w	r3, r7, #28
 800736c:	4619      	mov	r1, r3
 800736e:	4811      	ldr	r0, [pc, #68]	; (80073b4 <MX_TIM5_Init+0xe8>)
 8007370:	f008 fcd2 	bl	800fd18 <HAL_TIMEx_MasterConfigSynchronization>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800737a:	f001 f85b 	bl	8008434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800737e:	2360      	movs	r3, #96	; 0x60
 8007380:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007386:	2300      	movs	r3, #0
 8007388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800738a:	2300      	movs	r3, #0
 800738c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800738e:	463b      	mov	r3, r7
 8007390:	2200      	movs	r2, #0
 8007392:	4619      	mov	r1, r3
 8007394:	4807      	ldr	r0, [pc, #28]	; (80073b4 <MX_TIM5_Init+0xe8>)
 8007396:	f007 fdcd 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80073a0:	f001 f848 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80073a4:	4803      	ldr	r0, [pc, #12]	; (80073b4 <MX_TIM5_Init+0xe8>)
 80073a6:	f001 fb25 	bl	80089f4 <HAL_TIM_MspPostInit>

}
 80073aa:	bf00      	nop
 80073ac:	3738      	adds	r7, #56	; 0x38
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200005d4 	.word	0x200005d4
 80073b8:	40000c00 	.word	0x40000c00

080073bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80073c0:	4b22      	ldr	r3, [pc, #136]	; (800744c <MX_UART4_Init+0x90>)
 80073c2:	4a23      	ldr	r2, [pc, #140]	; (8007450 <MX_UART4_Init+0x94>)
 80073c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80073c6:	4b21      	ldr	r3, [pc, #132]	; (800744c <MX_UART4_Init+0x90>)
 80073c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80073ce:	4b1f      	ldr	r3, [pc, #124]	; (800744c <MX_UART4_Init+0x90>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80073d4:	4b1d      	ldr	r3, [pc, #116]	; (800744c <MX_UART4_Init+0x90>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80073da:	4b1c      	ldr	r3, [pc, #112]	; (800744c <MX_UART4_Init+0x90>)
 80073dc:	2200      	movs	r2, #0
 80073de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80073e0:	4b1a      	ldr	r3, [pc, #104]	; (800744c <MX_UART4_Init+0x90>)
 80073e2:	220c      	movs	r2, #12
 80073e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073e6:	4b19      	ldr	r3, [pc, #100]	; (800744c <MX_UART4_Init+0x90>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80073ec:	4b17      	ldr	r3, [pc, #92]	; (800744c <MX_UART4_Init+0x90>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80073f2:	4b16      	ldr	r3, [pc, #88]	; (800744c <MX_UART4_Init+0x90>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80073f8:	4b14      	ldr	r3, [pc, #80]	; (800744c <MX_UART4_Init+0x90>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80073fe:	4b13      	ldr	r3, [pc, #76]	; (800744c <MX_UART4_Init+0x90>)
 8007400:	2200      	movs	r2, #0
 8007402:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007404:	4811      	ldr	r0, [pc, #68]	; (800744c <MX_UART4_Init+0x90>)
 8007406:	f008 fd63 	bl	800fed0 <HAL_UART_Init>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8007410:	f001 f810 	bl	8008434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007414:	2100      	movs	r1, #0
 8007416:	480d      	ldr	r0, [pc, #52]	; (800744c <MX_UART4_Init+0x90>)
 8007418:	f00a febc 	bl	8012194 <HAL_UARTEx_SetTxFifoThreshold>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8007422:	f001 f807 	bl	8008434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007426:	2100      	movs	r1, #0
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <MX_UART4_Init+0x90>)
 800742a:	f00a fef1 	bl	8012210 <HAL_UARTEx_SetRxFifoThreshold>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8007434:	f000 fffe 	bl	8008434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007438:	4804      	ldr	r0, [pc, #16]	; (800744c <MX_UART4_Init+0x90>)
 800743a:	f00a fe72 	bl	8012122 <HAL_UARTEx_DisableFifoMode>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8007444:	f000 fff6 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007448:	bf00      	nop
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20000620 	.word	0x20000620
 8007450:	40004c00 	.word	0x40004c00

08007454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007458:	4b24      	ldr	r3, [pc, #144]	; (80074ec <MX_USART1_UART_Init+0x98>)
 800745a:	4a25      	ldr	r2, [pc, #148]	; (80074f0 <MX_USART1_UART_Init+0x9c>)
 800745c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 18000000;
 800745e:	4b23      	ldr	r3, [pc, #140]	; (80074ec <MX_USART1_UART_Init+0x98>)
 8007460:	4a24      	ldr	r2, [pc, #144]	; (80074f4 <MX_USART1_UART_Init+0xa0>)
 8007462:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <MX_USART1_UART_Init+0x98>)
 8007466:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800746a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800746c:	4b1f      	ldr	r3, [pc, #124]	; (80074ec <MX_USART1_UART_Init+0x98>)
 800746e:	2200      	movs	r2, #0
 8007470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8007472:	4b1e      	ldr	r3, [pc, #120]	; (80074ec <MX_USART1_UART_Init+0x98>)
 8007474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007478:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800747a:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <MX_USART1_UART_Init+0x98>)
 800747c:	220c      	movs	r2, #12
 800747e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007480:	4b1a      	ldr	r3, [pc, #104]	; (80074ec <MX_USART1_UART_Init+0x98>)
 8007482:	2200      	movs	r2, #0
 8007484:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8007486:	4b19      	ldr	r3, [pc, #100]	; (80074ec <MX_USART1_UART_Init+0x98>)
 8007488:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800748c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800748e:	4b17      	ldr	r3, [pc, #92]	; (80074ec <MX_USART1_UART_Init+0x98>)
 8007490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007494:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007496:	4b15      	ldr	r3, [pc, #84]	; (80074ec <MX_USART1_UART_Init+0x98>)
 8007498:	2200      	movs	r2, #0
 800749a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800749c:	4b13      	ldr	r3, [pc, #76]	; (80074ec <MX_USART1_UART_Init+0x98>)
 800749e:	2200      	movs	r2, #0
 80074a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80074a2:	4812      	ldr	r0, [pc, #72]	; (80074ec <MX_USART1_UART_Init+0x98>)
 80074a4:	f008 fd14 	bl	800fed0 <HAL_UART_Init>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80074ae:	f000 ffc1 	bl	8008434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80074b2:	2100      	movs	r1, #0
 80074b4:	480d      	ldr	r0, [pc, #52]	; (80074ec <MX_USART1_UART_Init+0x98>)
 80074b6:	f00a fe6d 	bl	8012194 <HAL_UARTEx_SetTxFifoThreshold>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 80074c0:	f000 ffb8 	bl	8008434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80074c4:	2100      	movs	r1, #0
 80074c6:	4809      	ldr	r0, [pc, #36]	; (80074ec <MX_USART1_UART_Init+0x98>)
 80074c8:	f00a fea2 	bl	8012210 <HAL_UARTEx_SetRxFifoThreshold>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 80074d2:	f000 ffaf 	bl	8008434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80074d6:	4805      	ldr	r0, [pc, #20]	; (80074ec <MX_USART1_UART_Init+0x98>)
 80074d8:	f00a fe23 	bl	8012122 <HAL_UARTEx_DisableFifoMode>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 80074e2:	f000 ffa7 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80074e6:	bf00      	nop
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	200006b4 	.word	0x200006b4
 80074f0:	40013800 	.word	0x40013800
 80074f4:	0112a880 	.word	0x0112a880

080074f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80074fc:	4b24      	ldr	r3, [pc, #144]	; (8007590 <MX_USART2_UART_Init+0x98>)
 80074fe:	4a25      	ldr	r2, [pc, #148]	; (8007594 <MX_USART2_UART_Init+0x9c>)
 8007500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007502:	4b23      	ldr	r3, [pc, #140]	; (8007590 <MX_USART2_UART_Init+0x98>)
 8007504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800750a:	4b21      	ldr	r3, [pc, #132]	; (8007590 <MX_USART2_UART_Init+0x98>)
 800750c:	2200      	movs	r2, #0
 800750e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007510:	4b1f      	ldr	r3, [pc, #124]	; (8007590 <MX_USART2_UART_Init+0x98>)
 8007512:	2200      	movs	r2, #0
 8007514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007516:	4b1e      	ldr	r3, [pc, #120]	; (8007590 <MX_USART2_UART_Init+0x98>)
 8007518:	2200      	movs	r2, #0
 800751a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800751c:	4b1c      	ldr	r3, [pc, #112]	; (8007590 <MX_USART2_UART_Init+0x98>)
 800751e:	220c      	movs	r2, #12
 8007520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007522:	4b1b      	ldr	r3, [pc, #108]	; (8007590 <MX_USART2_UART_Init+0x98>)
 8007524:	2200      	movs	r2, #0
 8007526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007528:	4b19      	ldr	r3, [pc, #100]	; (8007590 <MX_USART2_UART_Init+0x98>)
 800752a:	2200      	movs	r2, #0
 800752c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800752e:	4b18      	ldr	r3, [pc, #96]	; (8007590 <MX_USART2_UART_Init+0x98>)
 8007530:	2200      	movs	r2, #0
 8007532:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007534:	4b16      	ldr	r3, [pc, #88]	; (8007590 <MX_USART2_UART_Init+0x98>)
 8007536:	2200      	movs	r2, #0
 8007538:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800753a:	4b15      	ldr	r3, [pc, #84]	; (8007590 <MX_USART2_UART_Init+0x98>)
 800753c:	2200      	movs	r2, #0
 800753e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8007540:	2300      	movs	r3, #0
 8007542:	2200      	movs	r2, #0
 8007544:	2100      	movs	r1, #0
 8007546:	4812      	ldr	r0, [pc, #72]	; (8007590 <MX_USART2_UART_Init+0x98>)
 8007548:	f00a fd64 	bl	8012014 <HAL_RS485Ex_Init>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 8007552:	f000 ff6f 	bl	8008434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007556:	2100      	movs	r1, #0
 8007558:	480d      	ldr	r0, [pc, #52]	; (8007590 <MX_USART2_UART_Init+0x98>)
 800755a:	f00a fe1b 	bl	8012194 <HAL_UARTEx_SetTxFifoThreshold>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 8007564:	f000 ff66 	bl	8008434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007568:	2100      	movs	r1, #0
 800756a:	4809      	ldr	r0, [pc, #36]	; (8007590 <MX_USART2_UART_Init+0x98>)
 800756c:	f00a fe50 	bl	8012210 <HAL_UARTEx_SetRxFifoThreshold>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 8007576:	f000 ff5d 	bl	8008434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800757a:	4805      	ldr	r0, [pc, #20]	; (8007590 <MX_USART2_UART_Init+0x98>)
 800757c:	f00a fdd1 	bl	8012122 <HAL_UARTEx_DisableFifoMode>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8007586:	f000 ff55 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800758a:	bf00      	nop
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000748 	.word	0x20000748
 8007594:	40004400 	.word	0x40004400

08007598 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800759e:	463b      	mov	r3, r7
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	609a      	str	r2, [r3, #8]
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	611a      	str	r2, [r3, #16]
 80075ac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80075ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80075b2:	f7ff f9e9 	bl	8006988 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80075b6:	2002      	movs	r0, #2
 80075b8:	f7ff f9ce 	bl	8006958 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80075bc:	2310      	movs	r3, #16
 80075be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80075c0:	2303      	movs	r3, #3
 80075c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80075c4:	2300      	movs	r3, #0
 80075c6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075c8:	463b      	mov	r3, r7
 80075ca:	4619      	mov	r1, r3
 80075cc:	4838      	ldr	r0, [pc, #224]	; (80076b0 <MX_UCPD1_Init+0x118>)
 80075ce:	f00b f95d 	bl	801288c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80075d2:	2340      	movs	r3, #64	; 0x40
 80075d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80075d6:	2303      	movs	r3, #3
 80075d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80075da:	2300      	movs	r3, #0
 80075dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075de:	463b      	mov	r3, r7
 80075e0:	4619      	mov	r1, r3
 80075e2:	4833      	ldr	r0, [pc, #204]	; (80076b0 <MX_UCPD1_Init+0x118>)
 80075e4:	f00b f952 	bl	801288c <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_UCPD1_RX);
 80075e8:	2272      	movs	r2, #114	; 0x72
 80075ea:	2102      	movs	r1, #2
 80075ec:	4831      	ldr	r0, [pc, #196]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 80075ee:	f7ff faef 	bl	8006bd0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80075f2:	2200      	movs	r2, #0
 80075f4:	2102      	movs	r1, #2
 80075f6:	482f      	ldr	r0, [pc, #188]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 80075f8:	f7ff f9de 	bl	80069b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 80075fc:	2200      	movs	r2, #0
 80075fe:	2102      	movs	r1, #2
 8007600:	482c      	ldr	r0, [pc, #176]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 8007602:	f7ff fabf 	bl	8006b84 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8007606:	2200      	movs	r2, #0
 8007608:	2102      	movs	r1, #2
 800760a:	482a      	ldr	r0, [pc, #168]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 800760c:	f7ff f9fc 	bl	8006a08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8007610:	2200      	movs	r2, #0
 8007612:	2102      	movs	r1, #2
 8007614:	4827      	ldr	r0, [pc, #156]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 8007616:	f7ff fa1d 	bl	8006a54 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800761a:	2280      	movs	r2, #128	; 0x80
 800761c:	2102      	movs	r1, #2
 800761e:	4825      	ldr	r0, [pc, #148]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 8007620:	f7ff fa3e 	bl	8006aa0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8007624:	2200      	movs	r2, #0
 8007626:	2102      	movs	r1, #2
 8007628:	4822      	ldr	r0, [pc, #136]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 800762a:	f7ff fa5f 	bl	8006aec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 800762e:	2200      	movs	r2, #0
 8007630:	2102      	movs	r1, #2
 8007632:	4820      	ldr	r0, [pc, #128]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 8007634:	f7ff fa80 	bl	8006b38 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD1_TX);
 8007638:	2273      	movs	r2, #115	; 0x73
 800763a:	2103      	movs	r1, #3
 800763c:	481d      	ldr	r0, [pc, #116]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 800763e:	f7ff fac7 	bl	8006bd0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8007642:	2210      	movs	r2, #16
 8007644:	2103      	movs	r1, #3
 8007646:	481b      	ldr	r0, [pc, #108]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 8007648:	f7ff f9b6 	bl	80069b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 800764c:	2200      	movs	r2, #0
 800764e:	2103      	movs	r1, #3
 8007650:	4818      	ldr	r0, [pc, #96]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 8007652:	f7ff fa97 	bl	8006b84 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8007656:	2200      	movs	r2, #0
 8007658:	2103      	movs	r1, #3
 800765a:	4816      	ldr	r0, [pc, #88]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 800765c:	f7ff f9d4 	bl	8006a08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8007660:	2200      	movs	r2, #0
 8007662:	2103      	movs	r1, #3
 8007664:	4813      	ldr	r0, [pc, #76]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 8007666:	f7ff f9f5 	bl	8006a54 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 800766a:	2280      	movs	r2, #128	; 0x80
 800766c:	2103      	movs	r1, #3
 800766e:	4811      	ldr	r0, [pc, #68]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 8007670:	f7ff fa16 	bl	8006aa0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8007674:	2200      	movs	r2, #0
 8007676:	2103      	movs	r1, #3
 8007678:	480e      	ldr	r0, [pc, #56]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 800767a:	f7ff fa37 	bl	8006aec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 800767e:	2200      	movs	r2, #0
 8007680:	2103      	movs	r1, #3
 8007682:	480c      	ldr	r0, [pc, #48]	; (80076b4 <MX_UCPD1_Init+0x11c>)
 8007684:	f7ff fa58 	bl	8006b38 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8007688:	f7ff f8c6 	bl	8006818 <__NVIC_GetPriorityGrouping>
 800768c:	4603      	mov	r3, r0
 800768e:	2200      	movs	r2, #0
 8007690:	2105      	movs	r1, #5
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff f916 	bl	80068c4 <NVIC_EncodePriority>
 8007698:	4603      	mov	r3, r0
 800769a:	4619      	mov	r1, r3
 800769c:	203f      	movs	r0, #63	; 0x3f
 800769e:	f7ff f8e7 	bl	8006870 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 80076a2:	203f      	movs	r0, #63	; 0x3f
 80076a4:	f7ff f8c6 	bl	8006834 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80076a8:	bf00      	nop
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	48000400 	.word	0x48000400
 80076b4:	40020000 	.word	0x40020000

080076b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80076be:	4b40      	ldr	r3, [pc, #256]	; (80077c0 <MX_DMA_Init+0x108>)
 80076c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c2:	4a3f      	ldr	r2, [pc, #252]	; (80077c0 <MX_DMA_Init+0x108>)
 80076c4:	f043 0304 	orr.w	r3, r3, #4
 80076c8:	6493      	str	r3, [r2, #72]	; 0x48
 80076ca:	4b3d      	ldr	r3, [pc, #244]	; (80077c0 <MX_DMA_Init+0x108>)
 80076cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80076d6:	4b3a      	ldr	r3, [pc, #232]	; (80077c0 <MX_DMA_Init+0x108>)
 80076d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076da:	4a39      	ldr	r2, [pc, #228]	; (80077c0 <MX_DMA_Init+0x108>)
 80076dc:	f043 0301 	orr.w	r3, r3, #1
 80076e0:	6493      	str	r3, [r2, #72]	; 0x48
 80076e2:	4b37      	ldr	r3, [pc, #220]	; (80077c0 <MX_DMA_Init+0x108>)
 80076e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	60bb      	str	r3, [r7, #8]
 80076ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80076ee:	4b34      	ldr	r3, [pc, #208]	; (80077c0 <MX_DMA_Init+0x108>)
 80076f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f2:	4a33      	ldr	r2, [pc, #204]	; (80077c0 <MX_DMA_Init+0x108>)
 80076f4:	f043 0302 	orr.w	r3, r3, #2
 80076f8:	6493      	str	r3, [r2, #72]	; 0x48
 80076fa:	4b31      	ldr	r3, [pc, #196]	; (80077c0 <MX_DMA_Init+0x108>)
 80076fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8007706:	2200      	movs	r2, #0
 8007708:	2105      	movs	r1, #5
 800770a:	200b      	movs	r0, #11
 800770c:	f003 fcaa 	bl	800b064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007710:	200b      	movs	r0, #11
 8007712:	f003 fcc1 	bl	800b098 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8007716:	2200      	movs	r2, #0
 8007718:	2105      	movs	r1, #5
 800771a:	200c      	movs	r0, #12
 800771c:	f003 fca2 	bl	800b064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007720:	200c      	movs	r0, #12
 8007722:	f003 fcb9 	bl	800b098 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8007726:	f7ff f877 	bl	8006818 <__NVIC_GetPriorityGrouping>
 800772a:	4603      	mov	r3, r0
 800772c:	2200      	movs	r2, #0
 800772e:	2105      	movs	r1, #5
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff f8c7 	bl	80068c4 <NVIC_EncodePriority>
 8007736:	4603      	mov	r3, r0
 8007738:	4619      	mov	r1, r3
 800773a:	200d      	movs	r0, #13
 800773c:	f7ff f898 	bl	8006870 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007740:	200d      	movs	r0, #13
 8007742:	f7ff f877 	bl	8006834 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8007746:	f7ff f867 	bl	8006818 <__NVIC_GetPriorityGrouping>
 800774a:	4603      	mov	r3, r0
 800774c:	2200      	movs	r2, #0
 800774e:	2105      	movs	r1, #5
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff f8b7 	bl	80068c4 <NVIC_EncodePriority>
 8007756:	4603      	mov	r3, r0
 8007758:	4619      	mov	r1, r3
 800775a:	200e      	movs	r0, #14
 800775c:	f7ff f888 	bl	8006870 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007760:	200e      	movs	r0, #14
 8007762:	f7ff f867 	bl	8006834 <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8007766:	2200      	movs	r2, #0
 8007768:	2105      	movs	r1, #5
 800776a:	200f      	movs	r0, #15
 800776c:	f003 fc7a 	bl	800b064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007770:	200f      	movs	r0, #15
 8007772:	f003 fc91 	bl	800b098 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8007776:	2200      	movs	r2, #0
 8007778:	2105      	movs	r1, #5
 800777a:	2010      	movs	r0, #16
 800777c:	f003 fc72 	bl	800b064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007780:	2010      	movs	r0, #16
 8007782:	f003 fc89 	bl	800b098 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8007786:	2200      	movs	r2, #0
 8007788:	2105      	movs	r1, #5
 800778a:	2011      	movs	r0, #17
 800778c:	f003 fc6a 	bl	800b064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8007790:	2011      	movs	r0, #17
 8007792:	f003 fc81 	bl	800b098 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8007796:	2200      	movs	r2, #0
 8007798:	2105      	movs	r1, #5
 800779a:	2038      	movs	r0, #56	; 0x38
 800779c:	f003 fc62 	bl	800b064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80077a0:	2038      	movs	r0, #56	; 0x38
 80077a2:	f003 fc79 	bl	800b098 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 5, 0);
 80077a6:	2200      	movs	r2, #0
 80077a8:	2105      	movs	r1, #5
 80077aa:	2060      	movs	r0, #96	; 0x60
 80077ac:	f003 fc5a 	bl	800b064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80077b0:	2060      	movs	r0, #96	; 0x60
 80077b2:	f003 fc71 	bl	800b098 <HAL_NVIC_EnableIRQ>

}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40021000 	.word	0x40021000

080077c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ca:	f107 0314 	add.w	r3, r7, #20
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	609a      	str	r2, [r3, #8]
 80077d6:	60da      	str	r2, [r3, #12]
 80077d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077da:	4b67      	ldr	r3, [pc, #412]	; (8007978 <MX_GPIO_Init+0x1b4>)
 80077dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077de:	4a66      	ldr	r2, [pc, #408]	; (8007978 <MX_GPIO_Init+0x1b4>)
 80077e0:	f043 0304 	orr.w	r3, r3, #4
 80077e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077e6:	4b64      	ldr	r3, [pc, #400]	; (8007978 <MX_GPIO_Init+0x1b4>)
 80077e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80077f2:	4b61      	ldr	r3, [pc, #388]	; (8007978 <MX_GPIO_Init+0x1b4>)
 80077f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f6:	4a60      	ldr	r2, [pc, #384]	; (8007978 <MX_GPIO_Init+0x1b4>)
 80077f8:	f043 0320 	orr.w	r3, r3, #32
 80077fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077fe:	4b5e      	ldr	r3, [pc, #376]	; (8007978 <MX_GPIO_Init+0x1b4>)
 8007800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800780a:	4b5b      	ldr	r3, [pc, #364]	; (8007978 <MX_GPIO_Init+0x1b4>)
 800780c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780e:	4a5a      	ldr	r2, [pc, #360]	; (8007978 <MX_GPIO_Init+0x1b4>)
 8007810:	f043 0301 	orr.w	r3, r3, #1
 8007814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007816:	4b58      	ldr	r3, [pc, #352]	; (8007978 <MX_GPIO_Init+0x1b4>)
 8007818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	60bb      	str	r3, [r7, #8]
 8007820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007822:	4b55      	ldr	r3, [pc, #340]	; (8007978 <MX_GPIO_Init+0x1b4>)
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	4a54      	ldr	r2, [pc, #336]	; (8007978 <MX_GPIO_Init+0x1b4>)
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800782e:	4b52      	ldr	r3, [pc, #328]	; (8007978 <MX_GPIO_Init+0x1b4>)
 8007830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	607b      	str	r3, [r7, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800783a:	4b4f      	ldr	r3, [pc, #316]	; (8007978 <MX_GPIO_Init+0x1b4>)
 800783c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783e:	4a4e      	ldr	r2, [pc, #312]	; (8007978 <MX_GPIO_Init+0x1b4>)
 8007840:	f043 0308 	orr.w	r3, r3, #8
 8007844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007846:	4b4c      	ldr	r3, [pc, #304]	; (8007978 <MX_GPIO_Init+0x1b4>)
 8007848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784a:	f003 0308 	and.w	r3, r3, #8
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RLANESEL1_OUT_Pin|RLANEEN_OUT_Pin|TDI_OUT_Pin|TCK_OUT_Pin
 8007852:	2200      	movs	r2, #0
 8007854:	f24d 211d 	movw	r1, #53789	; 0xd21d
 8007858:	4848      	ldr	r0, [pc, #288]	; (800797c <MX_GPIO_Init+0x1b8>)
 800785a:	f004 f8f7 	bl	800ba4c <HAL_GPIO_WritePin>
                          |TMS_OUT_Pin|PWR5VEN_OUT_Pin|PWR3V3_EN_OUT_Pin|DEN_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RLANESEL2_OUT_GPIO_Port, RLANESEL2_OUT_Pin, GPIO_PIN_RESET);
 800785e:	2200      	movs	r2, #0
 8007860:	2102      	movs	r1, #2
 8007862:	4847      	ldr	r0, [pc, #284]	; (8007980 <MX_GPIO_Init+0x1bc>)
 8007864:	f004 f8f2 	bl	800ba4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TLANESEL0_OUT_Pin|TLANEEN_OUT_Pin|TLANESEL2_OUT_Pin|TLANESEL1_OUT_Pin
 8007868:	2200      	movs	r2, #0
 800786a:	f248 41e1 	movw	r1, #34017	; 0x84e1
 800786e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007872:	f004 f8eb 	bl	800ba4c <HAL_GPIO_WritePin>
                          |DFUEN_OUT_Pin|ESP32_EN_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_OUT_Pin|LED2_OUT_Pin|LED3_OUT_Pin, GPIO_PIN_RESET);
 8007876:	2200      	movs	r2, #0
 8007878:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800787c:	4841      	ldr	r0, [pc, #260]	; (8007984 <MX_GPIO_Init+0x1c0>)
 800787e:	f004 f8e5 	bl	800ba4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRVCC_EN_OUT_GPIO_Port, PWRVCC_EN_OUT_Pin, GPIO_PIN_RESET);
 8007882:	2200      	movs	r2, #0
 8007884:	2104      	movs	r1, #4
 8007886:	4840      	ldr	r0, [pc, #256]	; (8007988 <MX_GPIO_Init+0x1c4>)
 8007888:	f004 f8e0 	bl	800ba4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEST_BUTTON_Pin TDO_IN_Pin */
  GPIO_InitStruct.Pin = TEST_BUTTON_Pin|TDO_IN_Pin;
 800788c:	f242 0302 	movw	r3, #8194	; 0x2002
 8007890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007892:	2300      	movs	r3, #0
 8007894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007896:	2300      	movs	r3, #0
 8007898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800789a:	f107 0314 	add.w	r3, r7, #20
 800789e:	4619      	mov	r1, r3
 80078a0:	4836      	ldr	r0, [pc, #216]	; (800797c <MX_GPIO_Init+0x1b8>)
 80078a2:	f003 ff39 	bl	800b718 <HAL_GPIO_Init>

  /*Configure GPIO pins : RLANESEL1_OUT_Pin RLANEEN_OUT_Pin TDI_OUT_Pin TCK_OUT_Pin
                           TMS_OUT_Pin PWR5VEN_OUT_Pin PWR3V3_EN_OUT_Pin DEN_OUT_Pin */
  GPIO_InitStruct.Pin = RLANESEL1_OUT_Pin|RLANEEN_OUT_Pin|TDI_OUT_Pin|TCK_OUT_Pin
 80078a6:	f24d 231d 	movw	r3, #53789	; 0xd21d
 80078aa:	617b      	str	r3, [r7, #20]
                          |TMS_OUT_Pin|PWR5VEN_OUT_Pin|PWR3V3_EN_OUT_Pin|DEN_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078ac:	2301      	movs	r3, #1
 80078ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078b4:	2300      	movs	r3, #0
 80078b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078b8:	f107 0314 	add.w	r3, r7, #20
 80078bc:	4619      	mov	r1, r3
 80078be:	482f      	ldr	r0, [pc, #188]	; (800797c <MX_GPIO_Init+0x1b8>)
 80078c0:	f003 ff2a 	bl	800b718 <HAL_GPIO_Init>

  /*Configure GPIO pin : RLANESEL2_OUT_Pin */
  GPIO_InitStruct.Pin = RLANESEL2_OUT_Pin;
 80078c4:	2302      	movs	r3, #2
 80078c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078c8:	2301      	movs	r3, #1
 80078ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078d0:	2300      	movs	r3, #0
 80078d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RLANESEL2_OUT_GPIO_Port, &GPIO_InitStruct);
 80078d4:	f107 0314 	add.w	r3, r7, #20
 80078d8:	4619      	mov	r1, r3
 80078da:	4829      	ldr	r0, [pc, #164]	; (8007980 <MX_GPIO_Init+0x1bc>)
 80078dc:	f003 ff1c 	bl	800b718 <HAL_GPIO_Init>

  /*Configure GPIO pins : TLANESEL0_OUT_Pin TLANEEN_OUT_Pin TLANESEL2_OUT_Pin TLANESEL1_OUT_Pin
                           DFUEN_OUT_Pin ESP32_EN_OUT_Pin */
  GPIO_InitStruct.Pin = TLANESEL0_OUT_Pin|TLANEEN_OUT_Pin|TLANESEL2_OUT_Pin|TLANESEL1_OUT_Pin
 80078e0:	f248 43e1 	movw	r3, #34017	; 0x84e1
 80078e4:	617b      	str	r3, [r7, #20]
                          |DFUEN_OUT_Pin|ESP32_EN_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078e6:	2301      	movs	r3, #1
 80078e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ee:	2300      	movs	r3, #0
 80078f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078f2:	f107 0314 	add.w	r3, r7, #20
 80078f6:	4619      	mov	r1, r3
 80078f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078fc:	f003 ff0c 	bl	800b718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_OUT_Pin LED2_OUT_Pin LED3_OUT_Pin */
  GPIO_InitStruct.Pin = LED1_OUT_Pin|LED2_OUT_Pin|LED3_OUT_Pin;
 8007900:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8007904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007906:	2301      	movs	r3, #1
 8007908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790a:	2300      	movs	r3, #0
 800790c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800790e:	2300      	movs	r3, #0
 8007910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007912:	f107 0314 	add.w	r3, r7, #20
 8007916:	4619      	mov	r1, r3
 8007918:	481a      	ldr	r0, [pc, #104]	; (8007984 <MX_GPIO_Init+0x1c0>)
 800791a:	f003 fefd 	bl	800b718 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_IN_Pin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 800791e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007924:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792a:	2300      	movs	r3, #0
 800792c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 800792e:	f107 0314 	add.w	r3, r7, #20
 8007932:	4619      	mov	r1, r3
 8007934:	4811      	ldr	r0, [pc, #68]	; (800797c <MX_GPIO_Init+0x1b8>)
 8007936:	f003 feef 	bl	800b718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRVCC_EN_OUT_Pin */
  GPIO_InitStruct.Pin = PWRVCC_EN_OUT_Pin;
 800793a:	2304      	movs	r3, #4
 800793c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800793e:	2301      	movs	r3, #1
 8007940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007942:	2300      	movs	r3, #0
 8007944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007946:	2300      	movs	r3, #0
 8007948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWRVCC_EN_OUT_GPIO_Port, &GPIO_InitStruct);
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	4619      	mov	r1, r3
 8007950:	480d      	ldr	r0, [pc, #52]	; (8007988 <MX_GPIO_Init+0x1c4>)
 8007952:	f003 fee1 	bl	800b718 <HAL_GPIO_Init>

  /*Configure GPIO pin : CardDetect_IN_Pin */
  GPIO_InitStruct.Pin = CardDetect_IN_Pin;
 8007956:	2320      	movs	r3, #32
 8007958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800795a:	2300      	movs	r3, #0
 800795c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800795e:	2301      	movs	r3, #1
 8007960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CardDetect_IN_GPIO_Port, &GPIO_InitStruct);
 8007962:	f107 0314 	add.w	r3, r7, #20
 8007966:	4619      	mov	r1, r3
 8007968:	4806      	ldr	r0, [pc, #24]	; (8007984 <MX_GPIO_Init+0x1c0>)
 800796a:	f003 fed5 	bl	800b718 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800796e:	bf00      	nop
 8007970:	3728      	adds	r7, #40	; 0x28
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40021000 	.word	0x40021000
 800797c:	48000800 	.word	0x48000800
 8007980:	48001400 	.word	0x48001400
 8007984:	48000400 	.word	0x48000400
 8007988:	48000c00 	.word	0x48000c00

0800798c <delay>:

/* USER CODE BEGIN 4 */

//---------------------------------- a delay that can be used without irq enabled
void delay(uint32_t delay_ms) {
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
    // Configure the SysTick timer
    SysTick->LOAD = (SystemCoreClock / 1000) * delay_ms - 1; // 50 ms delay
 8007994:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <delay+0x4c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a10      	ldr	r2, [pc, #64]	; (80079dc <delay+0x50>)
 800799a:	fba2 2303 	umull	r2, r3, r2, r3
 800799e:	099b      	lsrs	r3, r3, #6
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	fb02 f303 	mul.w	r3, r2, r3
 80079a6:	4a0e      	ldr	r2, [pc, #56]	; (80079e0 <delay+0x54>)
 80079a8:	3b01      	subs	r3, #1
 80079aa:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                   // Clear current value
 80079ac:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <delay+0x54>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 80079b2:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <delay+0x54>)
 80079b4:	2205      	movs	r2, #5
 80079b6:	601a      	str	r2, [r3, #0]

    // Wait until the COUNTFLAG is set
    while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
 80079b8:	bf00      	nop
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <delay+0x54>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f9      	beq.n	80079ba <delay+0x2e>

    // Disable the SysTick timer
    SysTick->CTRL = 0;
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <delay+0x54>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	20000008 	.word	0x20000008
 80079dc:	10624dd3 	.word	0x10624dd3
 80079e0:	e000e010 	.word	0xe000e010

080079e4 <HAL_UARTEx_RxEventCallback>:
{
    CDC_Transmit_FS(Buf, Len);
}*/

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	807b      	strh	r3, [r7, #2]
	if(huart == RS485cfg.huart)
 80079f0:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <HAL_UARTEx_RxEventCallback+0x28>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d102      	bne.n	8007a00 <HAL_UARTEx_RxEventCallback+0x1c>
	{
		RS485receiveFlag = 1;
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <HAL_UARTEx_RxEventCallback+0x2c>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	701a      	strb	r2, [r3, #0]
		//RS485_Receive(&RS485cfg);
	}
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20000a08 	.word	0x20000a08
 8007a10:	20012478 	.word	0x20012478
 8007a14:	00000000 	.word	0x00000000

08007a18 <HAL_ADC_ConvCpltCallback>:
//----------------------------------------------------------------------------------------- adc conversion
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	// convert units
	I_3V3 = I_3V3_GAIN * Vref * adc1_data[0]/(float)(1 << 12);
 8007a20:	4b63      	ldr	r3, [pc, #396]	; (8007bb0 <HAL_ADC_ConvCpltCallback+0x198>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe f9f5 	bl	8005e14 <__aeabi_ui2d>
 8007a2a:	a35b      	add	r3, pc, #364	; (adr r3, 8007b98 <HAL_ADC_ConvCpltCallback+0x180>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f7fe fa6a 	bl	8005f08 <__aeabi_dmul>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	4b5c      	ldr	r3, [pc, #368]	; (8007bb4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007a42:	f7fe fb8b 	bl	800615c <__aeabi_ddiv>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f7fe fd15 	bl	800647c <__aeabi_d2f>
 8007a52:	4603      	mov	r3, r0
 8007a54:	4a58      	ldr	r2, [pc, #352]	; (8007bb8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007a56:	6013      	str	r3, [r2, #0]
	V_IN = V_IN_GAIN * Vref * adc1_data[1]/(float)(1 << 12);
 8007a58:	4b55      	ldr	r3, [pc, #340]	; (8007bb0 <HAL_ADC_ConvCpltCallback+0x198>)
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe f9d9 	bl	8005e14 <__aeabi_ui2d>
 8007a62:	a34f      	add	r3, pc, #316	; (adr r3, 8007ba0 <HAL_ADC_ConvCpltCallback+0x188>)
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	f7fe fa4e 	bl	8005f08 <__aeabi_dmul>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4610      	mov	r0, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	4b4e      	ldr	r3, [pc, #312]	; (8007bb4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007a7a:	f7fe fb6f 	bl	800615c <__aeabi_ddiv>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	f7fe fcf9 	bl	800647c <__aeabi_d2f>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4a4b      	ldr	r2, [pc, #300]	; (8007bbc <HAL_ADC_ConvCpltCallback+0x1a4>)
 8007a8e:	6013      	str	r3, [r2, #0]
	I_5V = I_5V_GAIN * Vref * adc2_data/(float)(1 << 12);
 8007a90:	4b4b      	ldr	r3, [pc, #300]	; (8007bc0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe f9bd 	bl	8005e14 <__aeabi_ui2d>
 8007a9a:	a33f      	add	r3, pc, #252	; (adr r3, 8007b98 <HAL_ADC_ConvCpltCallback+0x180>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f7fe fa32 	bl	8005f08 <__aeabi_dmul>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	4b40      	ldr	r3, [pc, #256]	; (8007bb4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007ab2:	f7fe fb53 	bl	800615c <__aeabi_ddiv>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4610      	mov	r0, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	f7fe fcdd 	bl	800647c <__aeabi_d2f>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4a3f      	ldr	r2, [pc, #252]	; (8007bc4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8007ac6:	6013      	str	r3, [r2, #0]
	I_VP = I_VP_GAIN * Vref * adc5_data/(float)(1 << 12);
 8007ac8:	4b3f      	ldr	r3, [pc, #252]	; (8007bc8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe f9a1 	bl	8005e14 <__aeabi_ui2d>
 8007ad2:	a335      	add	r3, pc, #212	; (adr r3, 8007ba8 <HAL_ADC_ConvCpltCallback+0x190>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7fe fa16 	bl	8005f08 <__aeabi_dmul>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	4b32      	ldr	r3, [pc, #200]	; (8007bb4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007aea:	f7fe fb37 	bl	800615c <__aeabi_ddiv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4610      	mov	r0, r2
 8007af4:	4619      	mov	r1, r3
 8007af6:	f7fe fcc1 	bl	800647c <__aeabi_d2f>
 8007afa:	4603      	mov	r3, r0
 8007afc:	4a33      	ldr	r2, [pc, #204]	; (8007bcc <HAL_ADC_ConvCpltCallback+0x1b4>)
 8007afe:	6013      	str	r3, [r2, #0]

	I_3V3_fault = (I_3V3 > I_3V3_MAX) ? 1 : 0;
 8007b00:	4b2d      	ldr	r3, [pc, #180]	; (8007bb8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007b02:	edd3 7a00 	vldr	s15, [r3]
 8007b06:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8007b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	bfcc      	ite	gt
 8007b14:	2301      	movgt	r3, #1
 8007b16:	2300      	movle	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4b2c      	ldr	r3, [pc, #176]	; (8007bd0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007b1e:	701a      	strb	r2, [r3, #0]
	I_5V_fault = (I_5V > I_5V_MAX) ? 1 : 0;
 8007b20:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8007b22:	edd3 7a00 	vldr	s15, [r3]
 8007b26:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8007b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b32:	bfcc      	ite	gt
 8007b34:	2301      	movgt	r3, #1
 8007b36:	2300      	movle	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8007b3e:	701a      	strb	r2, [r3, #0]
	//I_VP_fault = (I_VP > I_VP_MAX) || (I_VP > (UNICARD1data.VPmaxCurrent_mA * 1000.0)) ? 1 : 0;
	I_VP_fault = (I_VP > I_VP_MAX) ? 1 : 0;
 8007b40:	4b22      	ldr	r3, [pc, #136]	; (8007bcc <HAL_ADC_ConvCpltCallback+0x1b4>)
 8007b42:	edd3 7a00 	vldr	s15, [r3]
 8007b46:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b52:	bfcc      	ite	gt
 8007b54:	2301      	movgt	r3, #1
 8007b56:	2300      	movle	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4b1e      	ldr	r3, [pc, #120]	; (8007bd8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8007b5e:	701a      	strb	r2, [r3, #0]

	if(I_VP_fault + I_5V_fault + I_3V3_fault > 0)
 8007b60:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	4a18      	ldr	r2, [pc, #96]	; (8007bd0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	4413      	add	r3, r2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd09      	ble.n	8007b8a <HAL_ADC_ConvCpltCallback+0x172>
	{
		CardState = UDEV1CARD_OVERCURRENT;
 8007b76:	4b19      	ldr	r3, [pc, #100]	; (8007bdc <HAL_ADC_ConvCpltCallback+0x1c4>)
 8007b78:	2204      	movs	r2, #4
 8007b7a:	701a      	strb	r2, [r3, #0]
		OCRtimer = UNICARD1data.OCRrecoveryTime_ms + 1;
 8007b7c:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8007b7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b82:	3301      	adds	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	4b17      	ldr	r3, [pc, #92]	; (8007be4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8007b88:	801a      	strh	r2, [r3, #0]
	}
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	f3af 8000 	nop.w
 8007b98:	a4a8c155 	.word	0xa4a8c155
 8007b9c:	4013404e 	.word	0x4013404e
 8007ba0:	29cfdd23 	.word	0x29cfdd23
 8007ba4:	4046cfc8 	.word	0x4046cfc8
 8007ba8:	5fd8adac 	.word	0x5fd8adac
 8007bac:	401e4f76 	.word	0x401e4f76
 8007bb0:	20000988 	.word	0x20000988
 8007bb4:	40b00000 	.word	0x40b00000
 8007bb8:	200009a4 	.word	0x200009a4
 8007bbc:	20000998 	.word	0x20000998
 8007bc0:	20000990 	.word	0x20000990
 8007bc4:	200009a0 	.word	0x200009a0
 8007bc8:	20000994 	.word	0x20000994
 8007bcc:	2000099c 	.word	0x2000099c
 8007bd0:	200009aa 	.word	0x200009aa
 8007bd4:	200009ab 	.word	0x200009ab
 8007bd8:	200009ac 	.word	0x200009ac
 8007bdc:	200009b0 	.word	0x200009b0
 8007be0:	200009b4 	.word	0x200009b4
 8007be4:	200009a8 	.word	0x200009a8

08007be8 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
	// add SCPI
	const char* response = "Hello, World!\r\n";
 8007bf2:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <USB_CDC_RxHandler+0x30>)
 8007bf4:	60fb      	str	r3, [r7, #12]
	uint32_t response_len = strlen(response);
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7fd ff72 	bl	8005ae0 <strlen>
 8007bfc:	60b8      	str	r0, [r7, #8]

	strcpy((char*)Buf, response);
 8007bfe:	68f9      	ldr	r1, [r7, #12]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f017 fa11 	bl	801f028 <strcpy>
	CDC_Transmit_FS(Buf, response_len);
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f016 fc39 	bl	801e480 <CDC_Transmit_FS>
}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	0802028c 	.word	0x0802028c

08007c1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_Delay(1000);
 8007c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c28:	f001 fade 	bl	80091e8 <HAL_Delay>
 8007c2c:	e7fa      	b.n	8007c24 <StartDefaultTask+0x8>

08007c2e <task_LEDcontrol>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_LEDcontrol */
void task_LEDcontrol(void *argument)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_LEDcontrol */
  osDelay(500);
 8007c36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c3a:	f011 fd16 	bl	801966a <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  LED_Iterate();
 8007c3e:	f015 fdb7 	bl	801d7b0 <LED_Iterate>
	  LED_UpdateEffect();
 8007c42:	f015 fa51 	bl	801d0e8 <LED_UpdateEffect>
	  LED_UpdateTransition();
 8007c46:	f015 f90f 	bl	801ce68 <LED_UpdateTransition>
	  osDelay(3);
 8007c4a:	2003      	movs	r0, #3
 8007c4c:	f011 fd0d 	bl	801966a <osDelay>
	  LED_PWMCLEAR();
 8007c50:	f015 feb4 	bl	801d9bc <LED_PWMCLEAR>
	  osDelay(1);
 8007c54:	2001      	movs	r0, #1
 8007c56:	f011 fd08 	bl	801966a <osDelay>
	  LED_Iterate();
 8007c5a:	e7f0      	b.n	8007c3e <task_LEDcontrol+0x10>

08007c5c <task_Current_Check>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_Current_Check */
void task_Current_Check(void *argument)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_Current_Check */
	uint8_t outEN = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  // this function only triggers adc sampling, check void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
	  HAL_ADC_Start_DMA(&hadc1, adc1_data, 2);
 8007c68:	2202      	movs	r2, #2
 8007c6a:	492c      	ldr	r1, [pc, #176]	; (8007d1c <task_Current_Check+0xc0>)
 8007c6c:	482c      	ldr	r0, [pc, #176]	; (8007d20 <task_Current_Check+0xc4>)
 8007c6e:	f001 ff25 	bl	8009abc <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, &adc2_data, 1);
 8007c72:	2201      	movs	r2, #1
 8007c74:	492b      	ldr	r1, [pc, #172]	; (8007d24 <task_Current_Check+0xc8>)
 8007c76:	482c      	ldr	r0, [pc, #176]	; (8007d28 <task_Current_Check+0xcc>)
 8007c78:	f001 ff20 	bl	8009abc <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc5, &adc5_data, 1);
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	492b      	ldr	r1, [pc, #172]	; (8007d2c <task_Current_Check+0xd0>)
 8007c80:	482b      	ldr	r0, [pc, #172]	; (8007d30 <task_Current_Check+0xd4>)
 8007c82:	f001 ff1b 	bl	8009abc <HAL_ADC_Start_DMA>

	  // overcurrent recovery handling
	  if(OCRtimer > 0)
 8007c86:	4b2b      	ldr	r3, [pc, #172]	; (8007d34 <task_Current_Check+0xd8>)
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d022      	beq.n	8007cd4 <task_Current_Check+0x78>
	  {
		  if(OCRtimer == 1 && !I_VP_fault)
 8007c8e:	4b29      	ldr	r3, [pc, #164]	; (8007d34 <task_Current_Check+0xd8>)
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d118      	bne.n	8007cc8 <task_Current_Check+0x6c>
 8007c96:	4b28      	ldr	r3, [pc, #160]	; (8007d38 <task_Current_Check+0xdc>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d114      	bne.n	8007cc8 <task_Current_Check+0x6c>
		  {
			  switch (UNICARD1data.OCR)
 8007c9e:	4b27      	ldr	r3, [pc, #156]	; (8007d3c <task_Current_Check+0xe0>)
 8007ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d002      	beq.n	8007cae <task_Current_Check+0x52>
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d008      	beq.n	8007cbe <task_Current_Check+0x62>
			  {
			  	  default: /*UC1OCR_manual*/
			  		  //CardState = UDEV1CARD_OFF;
			  		  break;
 8007cac:	e00c      	b.n	8007cc8 <task_Current_Check+0x6c>
			  	  case UC1OCR_automatic:
			  		  if(CardState != UDEV1CARD_OFF) CardState = UDEV1CARD_CON;
 8007cae:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <task_Current_Check+0xe4>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <task_Current_Check+0x6a>
 8007cb6:	4b22      	ldr	r3, [pc, #136]	; (8007d40 <task_Current_Check+0xe4>)
 8007cb8:	2203      	movs	r2, #3
 8007cba:	701a      	strb	r2, [r3, #0]
			  		  break;
 8007cbc:	e003      	b.n	8007cc6 <task_Current_Check+0x6a>
			  	  case UC1OCR_shutdown:
			  		  CardState = UDEV1CARD_OFF;
 8007cbe:	4b20      	ldr	r3, [pc, #128]	; (8007d40 <task_Current_Check+0xe4>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
			  		  break;
 8007cc4:	e000      	b.n	8007cc8 <task_Current_Check+0x6c>
			  		  break;
 8007cc6:	bf00      	nop
			  }
		  }
		  OCRtimer--;
 8007cc8:	4b1a      	ldr	r3, [pc, #104]	; (8007d34 <task_Current_Check+0xd8>)
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	4b18      	ldr	r3, [pc, #96]	; (8007d34 <task_Current_Check+0xd8>)
 8007cd2:	801a      	strh	r2, [r3, #0]
	  }

	  outEN = !((CardState == UDEV1CARD_OFF) || (CardState == UDEV1CARD_OVERCURRENT));
 8007cd4:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <task_Current_Check+0xe4>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <task_Current_Check+0x8c>
 8007cdc:	4b18      	ldr	r3, [pc, #96]	; (8007d40 <task_Current_Check+0xe4>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d001      	beq.n	8007ce8 <task_Current_Check+0x8c>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <task_Current_Check+0x8e>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]

	  HAL_GPIO_WritePin(PWR3V3_EN_OUT_GPIO_Port, PWR3V3_EN_OUT_Pin, outEN);
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cf4:	4813      	ldr	r0, [pc, #76]	; (8007d44 <task_Current_Check+0xe8>)
 8007cf6:	f003 fea9 	bl	800ba4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWR5VEN_OUT_GPIO_Port, PWR5VEN_OUT_Pin, outEN);
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2110      	movs	r1, #16
 8007d00:	4810      	ldr	r0, [pc, #64]	; (8007d44 <task_Current_Check+0xe8>)
 8007d02:	f003 fea3 	bl	800ba4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWRVCC_EN_OUT_GPIO_Port, PWRVCC_EN_OUT_Pin, outEN);
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	480e      	ldr	r0, [pc, #56]	; (8007d48 <task_Current_Check+0xec>)
 8007d0e:	f003 fe9d 	bl	800ba4c <HAL_GPIO_WritePin>

	  osDelay(1);
 8007d12:	2001      	movs	r0, #1
 8007d14:	f011 fca9 	bl	801966a <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, adc1_data, 2);
 8007d18:	e7a6      	b.n	8007c68 <task_Current_Check+0xc>
 8007d1a:	bf00      	nop
 8007d1c:	20000988 	.word	0x20000988
 8007d20:	200002d0 	.word	0x200002d0
 8007d24:	20000990 	.word	0x20000990
 8007d28:	2000033c 	.word	0x2000033c
 8007d2c:	20000994 	.word	0x20000994
 8007d30:	200003a8 	.word	0x200003a8
 8007d34:	200009a8 	.word	0x200009a8
 8007d38:	200009ac 	.word	0x200009ac
 8007d3c:	200009b4 	.word	0x200009b4
 8007d40:	200009b0 	.word	0x200009b0
 8007d44:	48000800 	.word	0x48000800
 8007d48:	48000c00 	.word	0x48000c00

08007d4c <task_BUTTON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_BUTTON */
void task_BUTTON(void *argument)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_BUTTON */
	uint16_t ButtonTimer = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	81fb      	strh	r3, [r7, #14]
	uint8_t WaitingForRelease = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	737b      	strb	r3, [r7, #13]
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin))
 8007d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d60:	4811      	ldr	r0, [pc, #68]	; (8007da8 <task_BUTTON+0x5c>)
 8007d62:	f003 fe5b 	bl	800ba1c <HAL_GPIO_ReadPin>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d011      	beq.n	8007d90 <task_BUTTON+0x44>
	{
		if(ButtonTimer <= 20 && !WaitingForRelease)
 8007d6c:	89fb      	ldrh	r3, [r7, #14]
 8007d6e:	2b14      	cmp	r3, #20
 8007d70:	d806      	bhi.n	8007d80 <task_BUTTON+0x34>
 8007d72:	7b7b      	ldrb	r3, [r7, #13]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d103      	bne.n	8007d80 <task_BUTTON+0x34>
			ButtonTimer++;
 8007d78:	89fb      	ldrh	r3, [r7, #14]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	81fb      	strh	r3, [r7, #14]
 8007d7e:	e00e      	b.n	8007d9e <task_BUTTON+0x52>
		else
		{
			WaitingForRelease = 1;
 8007d80:	2301      	movs	r3, #1
 8007d82:	737b      	strb	r3, [r7, #13]
			lastButtonPressTime = ButtonTimer;
 8007d84:	4a09      	ldr	r2, [pc, #36]	; (8007dac <task_BUTTON+0x60>)
 8007d86:	89fb      	ldrh	r3, [r7, #14]
 8007d88:	8013      	strh	r3, [r2, #0]
			ButtonTimer = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	81fb      	strh	r3, [r7, #14]
 8007d8e:	e006      	b.n	8007d9e <task_BUTTON+0x52>
		}
	}
	else
	{
		WaitingForRelease = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	737b      	strb	r3, [r7, #13]
		lastButtonPressTime = ButtonTimer;
 8007d94:	4a05      	ldr	r2, [pc, #20]	; (8007dac <task_BUTTON+0x60>)
 8007d96:	89fb      	ldrh	r3, [r7, #14]
 8007d98:	8013      	strh	r3, [r2, #0]
		ButtonTimer = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	81fb      	strh	r3, [r7, #14]
	}

    osDelay(50);
 8007d9e:	2032      	movs	r0, #50	; 0x32
 8007da0:	f011 fc63 	bl	801966a <osDelay>
	if(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin))
 8007da4:	e7da      	b.n	8007d5c <task_BUTTON+0x10>
 8007da6:	bf00      	nop
 8007da8:	48000800 	.word	0x48000800
 8007dac:	200009ae 	.word	0x200009ae

08007db0 <task_StateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_StateMachine */
void task_StateMachine(void *argument)
{
 8007db0:	b5b0      	push	{r4, r5, r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN task_StateMachine */
  /* Infinite loop */
  for(;;)
  {
	  //---------------------------------------------- Device state machine
	  switch (MainState)
 8007db8:	4bb0      	ldr	r3, [pc, #704]	; (800807c <task_StateMachine+0x2cc>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d023      	beq.n	8007e08 <task_StateMachine+0x58>
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d04c      	beq.n	8007e5e <task_StateMachine+0xae>
	  {
	  	  default: //OFF
	  		  leds[0] = LED_Preset(PRESET_OFF);
 8007dc4:	4cae      	ldr	r4, [pc, #696]	; (8008080 <task_StateMachine+0x2d0>)
 8007dc6:	463b      	mov	r3, r7
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f015 fe0e 	bl	801d9ec <LED_Preset>
 8007dd0:	4625      	mov	r5, r4
 8007dd2:	463c      	mov	r4, r7
 8007dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ddc:	e885 0003 	stmia.w	r5, {r0, r1}
	  		  leds[1] = leds[0];
 8007de0:	4ba7      	ldr	r3, [pc, #668]	; (8008080 <task_StateMachine+0x2d0>)
 8007de2:	4aa7      	ldr	r2, [pc, #668]	; (8008080 <task_StateMachine+0x2d0>)
 8007de4:	f103 0418 	add.w	r4, r3, #24
 8007de8:	4615      	mov	r5, r2
 8007dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007df2:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  CardState = UDEV1CARD_OFF;
 8007df6:	4ba3      	ldr	r3, [pc, #652]	; (8008084 <task_StateMachine+0x2d4>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
	  		  if(lastButtonPressTime >= 1)
 8007dfc:	4ba2      	ldr	r3, [pc, #648]	; (8008088 <task_StateMachine+0x2d8>)
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d050      	beq.n	8007ea6 <task_StateMachine+0xf6>
	  		  {
	  			/*lastButtonPressTime = 0;
	  			MainState = UDEV1_ON_CON;
	  			CardState = UDEV1CARD_CON;*/
	  			NVIC_SystemReset();
 8007e04:	f7fe fd92 	bl	800692c <__NVIC_SystemReset>
	  		  }
	  		  break;
	  	  case UDEV1_ON_NC:
	  		  leds[0] = LED_Preset(PRESET_NOTLINKEDWITHPC);
 8007e08:	4c9d      	ldr	r4, [pc, #628]	; (8008080 <task_StateMachine+0x2d0>)
 8007e0a:	463b      	mov	r3, r7
 8007e0c:	2102      	movs	r1, #2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f015 fdec 	bl	801d9ec <LED_Preset>
 8007e14:	4625      	mov	r5, r4
 8007e16:	463c      	mov	r4, r7
 8007e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e20:	e885 0003 	stmia.w	r5, {r0, r1}
	  		  leds[1] = leds[0];
 8007e24:	4b96      	ldr	r3, [pc, #600]	; (8008080 <task_StateMachine+0x2d0>)
 8007e26:	4a96      	ldr	r2, [pc, #600]	; (8008080 <task_StateMachine+0x2d0>)
 8007e28:	f103 0418 	add.w	r4, r3, #24
 8007e2c:	4615      	mov	r5, r2
 8007e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e36:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(PCcon_Watchdog > 0) MainState = UDEV1_ON_CON;
 8007e3a:	4b94      	ldr	r3, [pc, #592]	; (800808c <task_StateMachine+0x2dc>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	dd02      	ble.n	8007e48 <task_StateMachine+0x98>
 8007e42:	4b8e      	ldr	r3, [pc, #568]	; (800807c <task_StateMachine+0x2cc>)
 8007e44:	2202      	movs	r2, #2
 8007e46:	701a      	strb	r2, [r3, #0]

	  		  if(lastButtonPressTime >= 10)
 8007e48:	4b8f      	ldr	r3, [pc, #572]	; (8008088 <task_StateMachine+0x2d8>)
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d92c      	bls.n	8007eaa <task_StateMachine+0xfa>
	  		  {
	  			lastButtonPressTime = 0;
 8007e50:	4b8d      	ldr	r3, [pc, #564]	; (8008088 <task_StateMachine+0x2d8>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	801a      	strh	r2, [r3, #0]
	  			MainState = UDEV1_OFF;
 8007e56:	4b89      	ldr	r3, [pc, #548]	; (800807c <task_StateMachine+0x2cc>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007e5c:	e025      	b.n	8007eaa <task_StateMachine+0xfa>
	  	  case UDEV1_ON_CON:
	  		  leds[0] = LED_Preset(PRESET_LINKEDTOPC);
 8007e5e:	4c88      	ldr	r4, [pc, #544]	; (8008080 <task_StateMachine+0x2d0>)
 8007e60:	463b      	mov	r3, r7
 8007e62:	2103      	movs	r1, #3
 8007e64:	4618      	mov	r0, r3
 8007e66:	f015 fdc1 	bl	801d9ec <LED_Preset>
 8007e6a:	4625      	mov	r5, r4
 8007e6c:	463c      	mov	r4, r7
 8007e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e76:	e885 0003 	stmia.w	r5, {r0, r1}
	  		  leds[1] = leds[0];
 8007e7a:	4b81      	ldr	r3, [pc, #516]	; (8008080 <task_StateMachine+0x2d0>)
 8007e7c:	4a80      	ldr	r2, [pc, #512]	; (8008080 <task_StateMachine+0x2d0>)
 8007e7e:	f103 0418 	add.w	r4, r3, #24
 8007e82:	4615      	mov	r5, r2
 8007e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e8c:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 10)
 8007e90:	4b7d      	ldr	r3, [pc, #500]	; (8008088 <task_StateMachine+0x2d8>)
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	2b09      	cmp	r3, #9
 8007e96:	d90a      	bls.n	8007eae <task_StateMachine+0xfe>
	  		  {
	  			lastButtonPressTime = 0;
 8007e98:	4b7b      	ldr	r3, [pc, #492]	; (8008088 <task_StateMachine+0x2d8>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	801a      	strh	r2, [r3, #0]
	  			MainState = UDEV1_OFF;
 8007e9e:	4b77      	ldr	r3, [pc, #476]	; (800807c <task_StateMachine+0x2cc>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007ea4:	e003      	b.n	8007eae <task_StateMachine+0xfe>
	  		  break;
 8007ea6:	bf00      	nop
 8007ea8:	e002      	b.n	8007eb0 <task_StateMachine+0x100>
	  		  break;
 8007eaa:	bf00      	nop
 8007eac:	e000      	b.n	8007eb0 <task_StateMachine+0x100>
	  		  break;
 8007eae:	bf00      	nop
	  }
	  //---------------------------------------------- Card state machine
	  switch (CardState)
 8007eb0:	4b74      	ldr	r3, [pc, #464]	; (8008084 <task_StateMachine+0x2d4>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d80c      	bhi.n	8007ed4 <task_StateMachine+0x124>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <task_StateMachine+0x110>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007f2f 	.word	0x08007f2f
 8007ec4:	08007f63 	.word	0x08007f63
 8007ec8:	08007f95 	.word	0x08007f95
 8007ecc:	08007fe1 	.word	0x08007fe1
 8007ed0:	08008013 	.word	0x08008013
	  {
	  	  default: //UDEV1CARD_OFF
	  		  leds[2] = LED_Preset(PRESET_OFF);
 8007ed4:	4c6a      	ldr	r4, [pc, #424]	; (8008080 <task_StateMachine+0x2d0>)
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	2100      	movs	r1, #0
 8007eda:	4618      	mov	r0, r3
 8007edc:	f015 fd86 	bl	801d9ec <LED_Preset>
 8007ee0:	3430      	adds	r4, #48	; 0x30
 8007ee2:	463d      	mov	r5, r7
 8007ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ee8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007eec:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1 && MainState != UDEV1_OFF && OCRtimer <= 1)
 8007ef0:	4b65      	ldr	r3, [pc, #404]	; (8008088 <task_StateMachine+0x2d8>)
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80b2 	beq.w	800805e <task_StateMachine+0x2ae>
 8007efa:	4b60      	ldr	r3, [pc, #384]	; (800807c <task_StateMachine+0x2cc>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 80ad 	beq.w	800805e <task_StateMachine+0x2ae>
 8007f04:	4b62      	ldr	r3, [pc, #392]	; (8008090 <task_StateMachine+0x2e0>)
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	f200 80a8 	bhi.w	800805e <task_StateMachine+0x2ae>
	  		  {
	  			  lastButtonPressTime = 0;
 8007f0e:	4b5e      	ldr	r3, [pc, #376]	; (8008088 <task_StateMachine+0x2d8>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	801a      	strh	r2, [r3, #0]
	  			  CardState = !HAL_GPIO_ReadPin(CardDetect_IN_GPIO_Port, CardDetect_IN_Pin) ? UDEV1CARD_CON : UDEV1CARD_NC;
 8007f14:	2120      	movs	r1, #32
 8007f16:	485f      	ldr	r0, [pc, #380]	; (8008094 <task_StateMachine+0x2e4>)
 8007f18:	f003 fd80 	bl	800ba1c <HAL_GPIO_ReadPin>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <task_StateMachine+0x176>
 8007f22:	2203      	movs	r2, #3
 8007f24:	e000      	b.n	8007f28 <task_StateMachine+0x178>
 8007f26:	2201      	movs	r2, #1
 8007f28:	4b56      	ldr	r3, [pc, #344]	; (8008084 <task_StateMachine+0x2d4>)
 8007f2a:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007f2c:	e097      	b.n	800805e <task_StateMachine+0x2ae>
	  	  case UDEV1CARD_NC:
	  		  leds[2] = LED_Preset(PRESET_CARDNOTDETECTED);
 8007f2e:	4c54      	ldr	r4, [pc, #336]	; (8008080 <task_StateMachine+0x2d0>)
 8007f30:	463b      	mov	r3, r7
 8007f32:	2105      	movs	r1, #5
 8007f34:	4618      	mov	r0, r3
 8007f36:	f015 fd59 	bl	801d9ec <LED_Preset>
 8007f3a:	3430      	adds	r4, #48	; 0x30
 8007f3c:	463d      	mov	r5, r7
 8007f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007f46:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1)
 8007f4a:	4b4f      	ldr	r3, [pc, #316]	; (8008088 <task_StateMachine+0x2d8>)
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 8087 	beq.w	8008062 <task_StateMachine+0x2b2>
	  		  {
	  			  lastButtonPressTime = 0;
 8007f54:	4b4c      	ldr	r3, [pc, #304]	; (8008088 <task_StateMachine+0x2d8>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 8007f5a:	4b4a      	ldr	r3, [pc, #296]	; (8008084 <task_StateMachine+0x2d4>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007f60:	e07f      	b.n	8008062 <task_StateMachine+0x2b2>
	  	  case UDEV1CARD_NOTRECOGNISED:
	  		  leds[2] = LED_Preset(PRESET_CARDNOTRECOGNISED);
 8007f62:	4c47      	ldr	r4, [pc, #284]	; (8008080 <task_StateMachine+0x2d0>)
 8007f64:	463b      	mov	r3, r7
 8007f66:	2106      	movs	r1, #6
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f015 fd3f 	bl	801d9ec <LED_Preset>
 8007f6e:	3430      	adds	r4, #48	; 0x30
 8007f70:	463d      	mov	r5, r7
 8007f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007f7a:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1)
 8007f7e:	4b42      	ldr	r3, [pc, #264]	; (8008088 <task_StateMachine+0x2d8>)
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d06f      	beq.n	8008066 <task_StateMachine+0x2b6>
	  		  {
	  			  lastButtonPressTime = 0;
 8007f86:	4b40      	ldr	r3, [pc, #256]	; (8008088 <task_StateMachine+0x2d8>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 8007f8c:	4b3d      	ldr	r3, [pc, #244]	; (8008084 <task_StateMachine+0x2d4>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
	  		  }
		  	  break;
 8007f92:	e068      	b.n	8008066 <task_StateMachine+0x2b6>

	  	case UDEV1CARD_CON:
	  		  leds[2] = LED_Preset(PRESET_CARDRECOGNISED);
 8007f94:	4c3a      	ldr	r4, [pc, #232]	; (8008080 <task_StateMachine+0x2d0>)
 8007f96:	463b      	mov	r3, r7
 8007f98:	2104      	movs	r1, #4
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f015 fd26 	bl	801d9ec <LED_Preset>
 8007fa0:	3430      	adds	r4, #48	; 0x30
 8007fa2:	463d      	mov	r5, r7
 8007fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fa8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007fac:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(ComFailCounter > 5) CardState = UDEV1CARD_COMFAIL;
 8007fb0:	4b39      	ldr	r3, [pc, #228]	; (8008098 <task_StateMachine+0x2e8>)
 8007fb2:	edd3 7a00 	vldr	s15, [r3]
 8007fb6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc2:	dd02      	ble.n	8007fca <task_StateMachine+0x21a>
 8007fc4:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <task_StateMachine+0x2d4>)
 8007fc6:	2205      	movs	r2, #5
 8007fc8:	701a      	strb	r2, [r3, #0]

	  		  if(lastButtonPressTime >= 1)
 8007fca:	4b2f      	ldr	r3, [pc, #188]	; (8008088 <task_StateMachine+0x2d8>)
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d04b      	beq.n	800806a <task_StateMachine+0x2ba>
	  		  {
	  			  lastButtonPressTime = 0;
 8007fd2:	4b2d      	ldr	r3, [pc, #180]	; (8008088 <task_StateMachine+0x2d8>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 8007fd8:	4b2a      	ldr	r3, [pc, #168]	; (8008084 <task_StateMachine+0x2d4>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007fde:	e044      	b.n	800806a <task_StateMachine+0x2ba>
	  	case UDEV1CARD_OVERCURRENT:
	  		  leds[2] = LED_Preset(PRESET_OVERCURRENT);
 8007fe0:	4c27      	ldr	r4, [pc, #156]	; (8008080 <task_StateMachine+0x2d0>)
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f015 fd00 	bl	801d9ec <LED_Preset>
 8007fec:	3430      	adds	r4, #48	; 0x30
 8007fee:	463d      	mov	r5, r7
 8007ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ff4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007ff8:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1)
 8007ffc:	4b22      	ldr	r3, [pc, #136]	; (8008088 <task_StateMachine+0x2d8>)
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d034      	beq.n	800806e <task_StateMachine+0x2be>
	  		  {
	  			  lastButtonPressTime = 0;
 8008004:	4b20      	ldr	r3, [pc, #128]	; (8008088 <task_StateMachine+0x2d8>)
 8008006:	2200      	movs	r2, #0
 8008008:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 800800a:	4b1e      	ldr	r3, [pc, #120]	; (8008084 <task_StateMachine+0x2d4>)
 800800c:	2200      	movs	r2, #0
 800800e:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8008010:	e02d      	b.n	800806e <task_StateMachine+0x2be>

		case UDEV1CARD_COMFAIL:
		  	leds[2] = LED_Preset(PRESET_CARDCOMFAIL);
 8008012:	4c1b      	ldr	r4, [pc, #108]	; (8008080 <task_StateMachine+0x2d0>)
 8008014:	463b      	mov	r3, r7
 8008016:	2107      	movs	r1, #7
 8008018:	4618      	mov	r0, r3
 800801a:	f015 fce7 	bl	801d9ec <LED_Preset>
 800801e:	3430      	adds	r4, #48	; 0x30
 8008020:	463d      	mov	r5, r7
 8008022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008026:	e895 0003 	ldmia.w	r5, {r0, r1}
 800802a:	e884 0003 	stmia.w	r4, {r0, r1}

		  	if(ComFailCounter < 3)  CardState = UDEV1CARD_CON;
 800802e:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <task_StateMachine+0x2e8>)
 8008030:	edd3 7a00 	vldr	s15, [r3]
 8008034:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800803c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008040:	d502      	bpl.n	8008048 <task_StateMachine+0x298>
 8008042:	4b10      	ldr	r3, [pc, #64]	; (8008084 <task_StateMachine+0x2d4>)
 8008044:	2203      	movs	r2, #3
 8008046:	701a      	strb	r2, [r3, #0]

		  	if(lastButtonPressTime >= 1)
 8008048:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <task_StateMachine+0x2d8>)
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d010      	beq.n	8008072 <task_StateMachine+0x2c2>
		  	{
		  		lastButtonPressTime = 0;
 8008050:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <task_StateMachine+0x2d8>)
 8008052:	2200      	movs	r2, #0
 8008054:	801a      	strh	r2, [r3, #0]
		  		CardState = UDEV1CARD_OFF;
 8008056:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <task_StateMachine+0x2d4>)
 8008058:	2200      	movs	r2, #0
 800805a:	701a      	strb	r2, [r3, #0]
		  	}
		  	break;
 800805c:	e009      	b.n	8008072 <task_StateMachine+0x2c2>
	  		  break;
 800805e:	bf00      	nop
 8008060:	e008      	b.n	8008074 <task_StateMachine+0x2c4>
	  		  break;
 8008062:	bf00      	nop
 8008064:	e006      	b.n	8008074 <task_StateMachine+0x2c4>
		  	  break;
 8008066:	bf00      	nop
 8008068:	e004      	b.n	8008074 <task_StateMachine+0x2c4>
	  		  break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <task_StateMachine+0x2c4>
	  		  break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <task_StateMachine+0x2c4>
		  	break;
 8008072:	bf00      	nop
	  }
	  osDelay(10);
 8008074:	200a      	movs	r0, #10
 8008076:	f011 faf8 	bl	801966a <osDelay>
	  switch (MainState)
 800807a:	e69d      	b.n	8007db8 <task_StateMachine+0x8>
 800807c:	20000004 	.word	0x20000004
 8008080:	2001247c 	.word	0x2001247c
 8008084:	200009b0 	.word	0x200009b0
 8008088:	200009ae 	.word	0x200009ae
 800808c:	200015d4 	.word	0x200015d4
 8008090:	200009a8 	.word	0x200009a8
 8008094:	48000400 	.word	0x48000400
 8008098:	200015dc 	.word	0x200015dc

0800809c <task_PCconnectionWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_PCconnectionWatchDog */
void task_PCconnectionWatchDog(void *argument)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_PCconnectionWatchDog */
  /* Infinite loop */
  for(;;)
  {
	if(MainState != UDEV1_OFF)
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <task_PCconnectionWatchDog+0x3c>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00d      	beq.n	80080c8 <task_PCconnectionWatchDog+0x2c>
	{
		if(PCcon_Watchdog > 0)	PCcon_Watchdog--;
 80080ac:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <task_PCconnectionWatchDog+0x40>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	dd05      	ble.n	80080c0 <task_PCconnectionWatchDog+0x24>
 80080b4:	4b09      	ldr	r3, [pc, #36]	; (80080dc <task_PCconnectionWatchDog+0x40>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	4a08      	ldr	r2, [pc, #32]	; (80080dc <task_PCconnectionWatchDog+0x40>)
 80080bc:	6013      	str	r3, [r2, #0]
 80080be:	e006      	b.n	80080ce <task_PCconnectionWatchDog+0x32>
		else 					MainState = UDEV1_ON_NC;
 80080c0:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <task_PCconnectionWatchDog+0x3c>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	701a      	strb	r2, [r3, #0]
 80080c6:	e002      	b.n	80080ce <task_PCconnectionWatchDog+0x32>
	}
	else PCcon_Watchdog = PCcon_Watchdog_TIME;
 80080c8:	4b04      	ldr	r3, [pc, #16]	; (80080dc <task_PCconnectionWatchDog+0x40>)
 80080ca:	220a      	movs	r2, #10
 80080cc:	601a      	str	r2, [r3, #0]
    osDelay(100);
 80080ce:	2064      	movs	r0, #100	; 0x64
 80080d0:	f011 facb 	bl	801966a <osDelay>
	if(MainState != UDEV1_OFF)
 80080d4:	e7e6      	b.n	80080a4 <task_PCconnectionWatchDog+0x8>
 80080d6:	bf00      	nop
 80080d8:	20000004 	.word	0x20000004
 80080dc:	200015d4 	.word	0x200015d4

080080e0 <taks_CardConnectionWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taks_CardConnectionWatchDog */
void taks_CardConnectionWatchDog(void *argument)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taks_CardConnectionWatchDog */
  /* Infinite loop */
  for(;;)
  {
	if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NC)
 80080e8:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <taks_CardConnectionWatchDog+0x44>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d011      	beq.n	8008114 <taks_CardConnectionWatchDog+0x34>
 80080f0:	4b0d      	ldr	r3, [pc, #52]	; (8008128 <taks_CardConnectionWatchDog+0x48>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d90d      	bls.n	8008114 <taks_CardConnectionWatchDog+0x34>
	{
		if(CardCon_Watchdog > 0)	CardCon_Watchdog--;
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <taks_CardConnectionWatchDog+0x4c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dd05      	ble.n	800810c <taks_CardConnectionWatchDog+0x2c>
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <taks_CardConnectionWatchDog+0x4c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3b01      	subs	r3, #1
 8008106:	4a09      	ldr	r2, [pc, #36]	; (800812c <taks_CardConnectionWatchDog+0x4c>)
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	e006      	b.n	800811a <taks_CardConnectionWatchDog+0x3a>
		else 						CardState = UDEV1CARD_NOTRECOGNISED;
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <taks_CardConnectionWatchDog+0x48>)
 800810e:	2202      	movs	r2, #2
 8008110:	701a      	strb	r2, [r3, #0]
		if(CardCon_Watchdog > 0)	CardCon_Watchdog--;
 8008112:	e002      	b.n	800811a <taks_CardConnectionWatchDog+0x3a>
	}
	else CardCon_Watchdog = 0;
 8008114:	4b05      	ldr	r3, [pc, #20]	; (800812c <taks_CardConnectionWatchDog+0x4c>)
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
    osDelay(100);
 800811a:	2064      	movs	r0, #100	; 0x64
 800811c:	f011 faa5 	bl	801966a <osDelay>
	if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NC)
 8008120:	e7e2      	b.n	80080e8 <taks_CardConnectionWatchDog+0x8>
 8008122:	bf00      	nop
 8008124:	20000004 	.word	0x20000004
 8008128:	200009b0 	.word	0x200009b0
 800812c:	200015d8 	.word	0x200015d8

08008130 <task_CardConnectionCheck>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_CardConnectionCheck */
void task_CardConnectionCheck(void *argument)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_CardConnectionCheck */

	uint8_t task_CardConnectionCheck_DONE = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if(!HAL_GPIO_ReadPin(CardDetect_IN_GPIO_Port, CardDetect_IN_Pin))
 800813c:	2120      	movs	r1, #32
 800813e:	4843      	ldr	r0, [pc, #268]	; (800824c <task_CardConnectionCheck+0x11c>)
 8008140:	f003 fc6c 	bl	800ba1c <HAL_GPIO_ReadPin>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d107      	bne.n	800815a <task_CardConnectionCheck+0x2a>
	  {
		  if(CardState == UDEV1CARD_NC) CardState = UDEV1CARD_CON;
 800814a:	4b41      	ldr	r3, [pc, #260]	; (8008250 <task_CardConnectionCheck+0x120>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d10a      	bne.n	8008168 <task_CardConnectionCheck+0x38>
 8008152:	4b3f      	ldr	r3, [pc, #252]	; (8008250 <task_CardConnectionCheck+0x120>)
 8008154:	2203      	movs	r2, #3
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	e006      	b.n	8008168 <task_CardConnectionCheck+0x38>
	  }
	  else if(CardState != UDEV1CARD_OFF) CardState = UDEV1CARD_NC;
 800815a:	4b3d      	ldr	r3, [pc, #244]	; (8008250 <task_CardConnectionCheck+0x120>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <task_CardConnectionCheck+0x38>
 8008162:	4b3b      	ldr	r3, [pc, #236]	; (8008250 <task_CardConnectionCheck+0x120>)
 8008164:	2201      	movs	r2, #1
 8008166:	701a      	strb	r2, [r3, #0]

	  task_CardConnectionCheck_DONE = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]

	  if(MainState != UDEV1_OFF && (CardState == UDEV1CARD_NOTRECOGNISED || CardState == UDEV1CARD_CON))
 800816c:	4b39      	ldr	r3, [pc, #228]	; (8008254 <task_CardConnectionCheck+0x124>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d067      	beq.n	8008244 <task_CardConnectionCheck+0x114>
 8008174:	4b36      	ldr	r3, [pc, #216]	; (8008250 <task_CardConnectionCheck+0x120>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d003      	beq.n	8008184 <task_CardConnectionCheck+0x54>
 800817c:	4b34      	ldr	r3, [pc, #208]	; (8008250 <task_CardConnectionCheck+0x120>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b03      	cmp	r3, #3
 8008182:	d15f      	bne.n	8008244 <task_CardConnectionCheck+0x114>
	  {
	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardConnectionCheck_DONE; i++)
 8008184:	2300      	movs	r3, #0
 8008186:	73bb      	strb	r3, [r7, #14]
 8008188:	e053      	b.n	8008232 <task_CardConnectionCheck+0x102>
	  	  {
			  if(osMutexAcquire(mutex_RS485Handle, osWaitForever) == osOK)
 800818a:	4b33      	ldr	r3, [pc, #204]	; (8008258 <task_CardConnectionCheck+0x128>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f04f 31ff 	mov.w	r1, #4294967295
 8008192:	4618      	mov	r0, r3
 8008194:	f011 fb0a 	bl	80197ac <osMutexAcquire>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d146      	bne.n	800822c <task_CardConnectionCheck+0xfc>
			  {
				  sprintf(RS485TXbuffer, "SYS:CON?");
 800819e:	492f      	ldr	r1, [pc, #188]	; (800825c <task_CardConnectionCheck+0x12c>)
 80081a0:	482f      	ldr	r0, [pc, #188]	; (8008260 <task_CardConnectionCheck+0x130>)
 80081a2:	f016 fe75 	bl	801ee90 <siprintf>
				  RS485_Transmit_DMA(&RS485cfg);
 80081a6:	482f      	ldr	r0, [pc, #188]	; (8008264 <task_CardConnectionCheck+0x134>)
 80081a8:	f014 fdd8 	bl	801cd5c <RS485_Transmit_DMA>

				  for(uint16_t timer = RS485maxTimeToTransmit_ms; timer > 0 && !RS485_TransmitDone(&RS485cfg); timer--) osDelay(1);
 80081ac:	230a      	movs	r3, #10
 80081ae:	81bb      	strh	r3, [r7, #12]
 80081b0:	e005      	b.n	80081be <task_CardConnectionCheck+0x8e>
 80081b2:	2001      	movs	r0, #1
 80081b4:	f011 fa59 	bl	801966a <osDelay>
 80081b8:	89bb      	ldrh	r3, [r7, #12]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	81bb      	strh	r3, [r7, #12]
 80081be:	89bb      	ldrh	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d005      	beq.n	80081d0 <task_CardConnectionCheck+0xa0>
 80081c4:	4827      	ldr	r0, [pc, #156]	; (8008264 <task_CardConnectionCheck+0x134>)
 80081c6:	f014 fe0d 	bl	801cde4 <RS485_TransmitDone>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0f0      	beq.n	80081b2 <task_CardConnectionCheck+0x82>

				  for(uint16_t timer = RS485maxTimeToReceive_ms; timer > 0 && !RS485_IsReceived(); timer--) osDelay(1);
 80081d0:	2364      	movs	r3, #100	; 0x64
 80081d2:	817b      	strh	r3, [r7, #10]
 80081d4:	e005      	b.n	80081e2 <task_CardConnectionCheck+0xb2>
 80081d6:	2001      	movs	r0, #1
 80081d8:	f011 fa47 	bl	801966a <osDelay>
 80081dc:	897b      	ldrh	r3, [r7, #10]
 80081de:	3b01      	subs	r3, #1
 80081e0:	817b      	strh	r3, [r7, #10]
 80081e2:	897b      	ldrh	r3, [r7, #10]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d004      	beq.n	80081f2 <task_CardConnectionCheck+0xc2>
 80081e8:	f014 fe12 	bl	801ce10 <RS485_IsReceived>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0f1      	beq.n	80081d6 <task_CardConnectionCheck+0xa6>

				  if(RS485_IsReceived())// && UC1_CheckCardValidity(&UNICARD1data))
 80081f2:	f014 fe0d 	bl	801ce10 <RS485_IsReceived>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d010      	beq.n	800821e <task_CardConnectionCheck+0xee>
				  {
					  if(!strncmp(RS485RXbuffer, "OK\r\n", 2))
 80081fc:	2202      	movs	r2, #2
 80081fe:	491a      	ldr	r1, [pc, #104]	; (8008268 <task_CardConnectionCheck+0x138>)
 8008200:	481a      	ldr	r0, [pc, #104]	; (800826c <task_CardConnectionCheck+0x13c>)
 8008202:	f016 fe6d 	bl	801eee0 <strncmp>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d105      	bne.n	8008218 <task_CardConnectionCheck+0xe8>
					  {
						  CardCon_Watchdog = CardCon_Watchdog_TIME;
 800820c:	4b18      	ldr	r3, [pc, #96]	; (8008270 <task_CardConnectionCheck+0x140>)
 800820e:	220a      	movs	r2, #10
 8008210:	601a      	str	r2, [r3, #0]
						  CardState = UDEV1CARD_CON;
 8008212:	4b0f      	ldr	r3, [pc, #60]	; (8008250 <task_CardConnectionCheck+0x120>)
 8008214:	2203      	movs	r2, #3
 8008216:	701a      	strb	r2, [r3, #0]
					  }
					  RS485receiveFlag = 0;
 8008218:	4b16      	ldr	r3, [pc, #88]	; (8008274 <task_CardConnectionCheck+0x144>)
 800821a:	2200      	movs	r2, #0
 800821c:	701a      	strb	r2, [r3, #0]
				  }
				  task_CardConnectionCheck_DONE = 1;
 800821e:	2301      	movs	r3, #1
 8008220:	73fb      	strb	r3, [r7, #15]
				  osMutexRelease(mutex_RS485Handle);
 8008222:	4b0d      	ldr	r3, [pc, #52]	; (8008258 <task_CardConnectionCheck+0x128>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f011 fb0b 	bl	8019842 <osMutexRelease>
	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardConnectionCheck_DONE; i++)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	3301      	adds	r3, #1
 8008230:	73bb      	strb	r3, [r7, #14]
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b04      	cmp	r3, #4
 8008236:	d802      	bhi.n	800823e <task_CardConnectionCheck+0x10e>
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0a5      	beq.n	800818a <task_CardConnectionCheck+0x5a>
			  }
		  }
		  osDelay(1);
 800823e:	2001      	movs	r0, #1
 8008240:	f011 fa13 	bl	801966a <osDelay>
	  }
	  osDelay(Card_ConnectionCheckPeriod_ms);
 8008244:	20c8      	movs	r0, #200	; 0xc8
 8008246:	f011 fa10 	bl	801966a <osDelay>
	  if(!HAL_GPIO_ReadPin(CardDetect_IN_GPIO_Port, CardDetect_IN_Pin))
 800824a:	e777      	b.n	800813c <task_CardConnectionCheck+0xc>
 800824c:	48000400 	.word	0x48000400
 8008250:	200009b0 	.word	0x200009b0
 8008254:	20000004 	.word	0x20000004
 8008258:	20000980 	.word	0x20000980
 800825c:	0802029c 	.word	0x0802029c
 8008260:	20000a1c 	.word	0x20000a1c
 8008264:	20000a08 	.word	0x20000a08
 8008268:	080202a8 	.word	0x080202a8
 800826c:	20000ff8 	.word	0x20000ff8
 8008270:	200015d8 	.word	0x200015d8
 8008274:	20012478 	.word	0x20012478

08008278 <task_CardUpdateStatus>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_CardUpdateStatus */
void task_CardUpdateStatus(void *argument)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_CardUpdateStatus */
	uint8_t task_CardUpdateStatus_DONE = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  	  task_CardUpdateStatus_DONE = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
	  	  if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NOTRECOGNISED)
 8008288:	4b57      	ldr	r3, [pc, #348]	; (80083e8 <task_CardUpdateStatus+0x170>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 809c 	beq.w	80083ca <task_CardUpdateStatus+0x152>
 8008292:	4b56      	ldr	r3, [pc, #344]	; (80083ec <task_CardUpdateStatus+0x174>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b02      	cmp	r3, #2
 8008298:	f240 8097 	bls.w	80083ca <task_CardUpdateStatus+0x152>
	  	  {
	  	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardUpdateStatus_DONE; i++)
 800829c:	2300      	movs	r3, #0
 800829e:	73bb      	strb	r3, [r7, #14]
 80082a0:	e089      	b.n	80083b6 <task_CardUpdateStatus+0x13e>
	  	  	  {
	  			  if(osMutexAcquire(mutex_RS485Handle, osWaitForever) == osOK)
 80082a2:	4b53      	ldr	r3, [pc, #332]	; (80083f0 <task_CardUpdateStatus+0x178>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f04f 31ff 	mov.w	r1, #4294967295
 80082aa:	4618      	mov	r0, r3
 80082ac:	f011 fa7e 	bl	80197ac <osMutexAcquire>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d17c      	bne.n	80083b0 <task_CardUpdateStatus+0x138>
	  			  {
	  				  sprintf(RS485TXbuffer, "SYS:STATUS:%d",(uint8_t)CardState);
 80082b6:	4b4d      	ldr	r3, [pc, #308]	; (80083ec <task_CardUpdateStatus+0x174>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	494d      	ldr	r1, [pc, #308]	; (80083f4 <task_CardUpdateStatus+0x17c>)
 80082be:	484e      	ldr	r0, [pc, #312]	; (80083f8 <task_CardUpdateStatus+0x180>)
 80082c0:	f016 fde6 	bl	801ee90 <siprintf>
	  				  RS485_Transmit_DMA(&RS485cfg);
 80082c4:	484d      	ldr	r0, [pc, #308]	; (80083fc <task_CardUpdateStatus+0x184>)
 80082c6:	f014 fd49 	bl	801cd5c <RS485_Transmit_DMA>

	  				  for(uint16_t timer = RS485maxTimeToTransmit_ms; timer > 0 && !RS485_TransmitDone(&RS485cfg); timer--) osDelay(1);
 80082ca:	230a      	movs	r3, #10
 80082cc:	81bb      	strh	r3, [r7, #12]
 80082ce:	e005      	b.n	80082dc <task_CardUpdateStatus+0x64>
 80082d0:	2001      	movs	r0, #1
 80082d2:	f011 f9ca 	bl	801966a <osDelay>
 80082d6:	89bb      	ldrh	r3, [r7, #12]
 80082d8:	3b01      	subs	r3, #1
 80082da:	81bb      	strh	r3, [r7, #12]
 80082dc:	89bb      	ldrh	r3, [r7, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <task_CardUpdateStatus+0x76>
 80082e2:	4846      	ldr	r0, [pc, #280]	; (80083fc <task_CardUpdateStatus+0x184>)
 80082e4:	f014 fd7e 	bl	801cde4 <RS485_TransmitDone>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0f0      	beq.n	80082d0 <task_CardUpdateStatus+0x58>

	  				  for(uint16_t timer = RS485maxTimeToReceive_ms; timer > 0 && !RS485_IsReceived(); timer--) osDelay(1);
 80082ee:	2364      	movs	r3, #100	; 0x64
 80082f0:	817b      	strh	r3, [r7, #10]
 80082f2:	e005      	b.n	8008300 <task_CardUpdateStatus+0x88>
 80082f4:	2001      	movs	r0, #1
 80082f6:	f011 f9b8 	bl	801966a <osDelay>
 80082fa:	897b      	ldrh	r3, [r7, #10]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	817b      	strh	r3, [r7, #10]
 8008300:	897b      	ldrh	r3, [r7, #10]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d004      	beq.n	8008310 <task_CardUpdateStatus+0x98>
 8008306:	f014 fd83 	bl	801ce10 <RS485_IsReceived>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d0f1      	beq.n	80082f4 <task_CardUpdateStatus+0x7c>

	  				  if(RS485_IsReceived() && !strncmp(RS485RXbuffer, "OK\r\n", 2))// && UC1_CheckCardValidity(&UNICARD1data))
 8008310:	f014 fd7e 	bl	801ce10 <RS485_IsReceived>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d025      	beq.n	8008366 <task_CardUpdateStatus+0xee>
 800831a:	2202      	movs	r2, #2
 800831c:	4938      	ldr	r1, [pc, #224]	; (8008400 <task_CardUpdateStatus+0x188>)
 800831e:	4839      	ldr	r0, [pc, #228]	; (8008404 <task_CardUpdateStatus+0x18c>)
 8008320:	f016 fdde 	bl	801eee0 <strncmp>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d11d      	bne.n	8008366 <task_CardUpdateStatus+0xee>
	  				  {
	  						if(ComFailCounter > 0) ComFailCounter -= Card_acceptableFailedComRatio;
 800832a:	4b37      	ldr	r3, [pc, #220]	; (8008408 <task_CardUpdateStatus+0x190>)
 800832c:	edd3 7a00 	vldr	s15, [r3]
 8008330:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008338:	dd12      	ble.n	8008360 <task_CardUpdateStatus+0xe8>
 800833a:	4b33      	ldr	r3, [pc, #204]	; (8008408 <task_CardUpdateStatus+0x190>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f7fd fd8a 	bl	8005e58 <__aeabi_f2d>
 8008344:	a324      	add	r3, pc, #144	; (adr r3, 80083d8 <task_CardUpdateStatus+0x160>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7fd fc25 	bl	8005b98 <__aeabi_dsub>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	f7fe f891 	bl	800647c <__aeabi_d2f>
 800835a:	4603      	mov	r3, r0
 800835c:	4a2a      	ldr	r2, [pc, #168]	; (8008408 <task_CardUpdateStatus+0x190>)
 800835e:	6013      	str	r3, [r2, #0]
	  						task_CardUpdateStatus_DONE = 1;
 8008360:	2301      	movs	r3, #1
 8008362:	73fb      	strb	r3, [r7, #15]
 8008364:	e01c      	b.n	80083a0 <task_CardUpdateStatus+0x128>
	  				  }
	  				  else if(ComFailCounter < 10) ComFailCounter += (1-Card_acceptableFailedComRatio);
 8008366:	4b28      	ldr	r3, [pc, #160]	; (8008408 <task_CardUpdateStatus+0x190>)
 8008368:	edd3 7a00 	vldr	s15, [r3]
 800836c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008378:	d512      	bpl.n	80083a0 <task_CardUpdateStatus+0x128>
 800837a:	4b23      	ldr	r3, [pc, #140]	; (8008408 <task_CardUpdateStatus+0x190>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f7fd fd6a 	bl	8005e58 <__aeabi_f2d>
 8008384:	a316      	add	r3, pc, #88	; (adr r3, 80083e0 <task_CardUpdateStatus+0x168>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	f7fd fc07 	bl	8005b9c <__adddf3>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4610      	mov	r0, r2
 8008394:	4619      	mov	r1, r3
 8008396:	f7fe f871 	bl	800647c <__aeabi_d2f>
 800839a:	4603      	mov	r3, r0
 800839c:	4a1a      	ldr	r2, [pc, #104]	; (8008408 <task_CardUpdateStatus+0x190>)
 800839e:	6013      	str	r3, [r2, #0]

	  				  RS485receiveFlag = 0;
 80083a0:	4b1a      	ldr	r3, [pc, #104]	; (800840c <task_CardUpdateStatus+0x194>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	701a      	strb	r2, [r3, #0]

	  				  osMutexRelease(mutex_RS485Handle);
 80083a6:	4b12      	ldr	r3, [pc, #72]	; (80083f0 <task_CardUpdateStatus+0x178>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f011 fa49 	bl	8019842 <osMutexRelease>
	  	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardUpdateStatus_DONE; i++)
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	3301      	adds	r3, #1
 80083b4:	73bb      	strb	r3, [r7, #14]
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d803      	bhi.n	80083c4 <task_CardUpdateStatus+0x14c>
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f43f af6f 	beq.w	80082a2 <task_CardUpdateStatus+0x2a>
	  			  }
	  		  }
	  		  osDelay(1);
 80083c4:	2001      	movs	r0, #1
 80083c6:	f011 f950 	bl	801966a <osDelay>
	  	  }
    osDelay(Card_StatusUpdatePeriod_ms);
 80083ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083ce:	f011 f94c 	bl	801966a <osDelay>
	  	  task_CardUpdateStatus_DONE = 0;
 80083d2:	e757      	b.n	8008284 <task_CardUpdateStatus+0xc>
 80083d4:	f3af 8000 	nop.w
 80083d8:	9999999a 	.word	0x9999999a
 80083dc:	3fb99999 	.word	0x3fb99999
 80083e0:	cccccccd 	.word	0xcccccccd
 80083e4:	3feccccc 	.word	0x3feccccc
 80083e8:	20000004 	.word	0x20000004
 80083ec:	200009b0 	.word	0x200009b0
 80083f0:	20000980 	.word	0x20000980
 80083f4:	080202b0 	.word	0x080202b0
 80083f8:	20000a1c 	.word	0x20000a1c
 80083fc:	20000a08 	.word	0x20000a08
 8008400:	080202a8 	.word	0x080202a8
 8008404:	20000ff8 	.word	0x20000ff8
 8008408:	200015dc 	.word	0x200015dc
 800840c:	20012478 	.word	0x20012478

08008410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM20) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a04      	ldr	r2, [pc, #16]	; (8008430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d101      	bne.n	8008426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008422:	f000 fec3 	bl	80091ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	40015000 	.word	0x40015000

08008434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800843a:	b672      	cpsid	i
}
 800843c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t toggler = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	71fb      	strb	r3, [r7, #7]
  int rstTimer = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  HAL_GPIO_WritePin(PWR3V3_EN_OUT_GPIO_Port, PWR3V3_EN_OUT_Pin, 0);
 8008446:	2200      	movs	r2, #0
 8008448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800844c:	482d      	ldr	r0, [pc, #180]	; (8008504 <Error_Handler+0xd0>)
 800844e:	f003 fafd 	bl	800ba4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWR5VEN_OUT_GPIO_Port, PWR5VEN_OUT_Pin, 0);
 8008452:	2200      	movs	r2, #0
 8008454:	2110      	movs	r1, #16
 8008456:	482b      	ldr	r0, [pc, #172]	; (8008504 <Error_Handler+0xd0>)
 8008458:	f003 faf8 	bl	800ba4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWRVCC_EN_OUT_GPIO_Port, PWRVCC_EN_OUT_Pin, 0);
 800845c:	2200      	movs	r2, #0
 800845e:	2104      	movs	r1, #4
 8008460:	4829      	ldr	r0, [pc, #164]	; (8008508 <Error_Handler+0xd4>)
 8008462:	f003 faf3 	bl	800ba4c <HAL_GPIO_WritePin>

	  LED_PWMSET(1, 0, 0);
 8008466:	ed9f 1a29 	vldr	s2, [pc, #164]	; 800850c <Error_Handler+0xd8>
 800846a:	eddf 0a28 	vldr	s1, [pc, #160]	; 800850c <Error_Handler+0xd8>
 800846e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008472:	f015 fa53 	bl	801d91c <LED_PWMSET>
	  HAL_GPIO_WritePin(LED1_OUT_GPIO_Port, LED1_OUT_Pin, !toggler);
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	2b00      	cmp	r3, #0
 800847a:	bf0c      	ite	eq
 800847c:	2301      	moveq	r3, #1
 800847e:	2300      	movne	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	461a      	mov	r2, r3
 8008484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008488:	4821      	ldr	r0, [pc, #132]	; (8008510 <Error_Handler+0xdc>)
 800848a:	f003 fadf 	bl	800ba4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_OUT_GPIO_Port, LED2_OUT_Pin, toggler);
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	461a      	mov	r2, r3
 8008492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008496:	481e      	ldr	r0, [pc, #120]	; (8008510 <Error_Handler+0xdc>)
 8008498:	f003 fad8 	bl	800ba4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_OUT_GPIO_Port, LED3_OUT_Pin, 0);
 800849c:	2200      	movs	r2, #0
 800849e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084a2:	481b      	ldr	r0, [pc, #108]	; (8008510 <Error_Handler+0xdc>)
 80084a4:	f003 fad2 	bl	800ba4c <HAL_GPIO_WritePin>
	  toggler = !toggler;
 80084a8:	79fb      	ldrb	r3, [r7, #7]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bf0c      	ite	eq
 80084ae:	2301      	moveq	r3, #1
 80084b0:	2300      	movne	r3, #0
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	71fb      	strb	r3, [r7, #7]

	  if(rstTimer >= 1 && !HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin)) NVIC_SystemReset();
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dd09      	ble.n	80084d0 <Error_Handler+0x9c>
 80084bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084c0:	4810      	ldr	r0, [pc, #64]	; (8008504 <Error_Handler+0xd0>)
 80084c2:	f003 faab 	bl	800ba1c <HAL_GPIO_ReadPin>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <Error_Handler+0x9c>
 80084cc:	f7fe fa2e 	bl	800692c <__NVIC_SystemReset>

	  if(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin)) rstTimer++;
 80084d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084d4:	480b      	ldr	r0, [pc, #44]	; (8008504 <Error_Handler+0xd0>)
 80084d6:	f003 faa1 	bl	800ba1c <HAL_GPIO_ReadPin>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <Error_Handler+0xb4>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	3301      	adds	r3, #1
 80084e4:	603b      	str	r3, [r7, #0]
 80084e6:	e008      	b.n	80084fa <Error_Handler+0xc6>
	  else if(rstTimer > 0) rstTimer--;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd03      	ble.n	80084f6 <Error_Handler+0xc2>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	e001      	b.n	80084fa <Error_Handler+0xc6>
	  else rstTimer = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	603b      	str	r3, [r7, #0]

	  delay(200);
 80084fa:	20c8      	movs	r0, #200	; 0xc8
 80084fc:	f7ff fa46 	bl	800798c <delay>
	  HAL_GPIO_WritePin(PWR3V3_EN_OUT_GPIO_Port, PWR3V3_EN_OUT_Pin, 0);
 8008500:	e7a1      	b.n	8008446 <Error_Handler+0x12>
 8008502:	bf00      	nop
 8008504:	48000800 	.word	0x48000800
 8008508:	48000c00 	.word	0x48000c00
 800850c:	00000000 	.word	0x00000000
 8008510:	48000400 	.word	0x48000400

08008514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800851a:	4b16      	ldr	r3, [pc, #88]	; (8008574 <HAL_MspInit+0x60>)
 800851c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851e:	4a15      	ldr	r2, [pc, #84]	; (8008574 <HAL_MspInit+0x60>)
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	6613      	str	r3, [r2, #96]	; 0x60
 8008526:	4b13      	ldr	r3, [pc, #76]	; (8008574 <HAL_MspInit+0x60>)
 8008528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	607b      	str	r3, [r7, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <HAL_MspInit+0x60>)
 8008534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008536:	4a0f      	ldr	r2, [pc, #60]	; (8008574 <HAL_MspInit+0x60>)
 8008538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800853c:	6593      	str	r3, [r2, #88]	; 0x58
 800853e:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <HAL_MspInit+0x60>)
 8008540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008546:	603b      	str	r3, [r7, #0]
 8008548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800854a:	2200      	movs	r2, #0
 800854c:	210f      	movs	r1, #15
 800854e:	f06f 0001 	mvn.w	r0, #1
 8008552:	f002 fd87 	bl	800b064 <HAL_NVIC_SetPriority>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8008556:	2000      	movs	r0, #0
 8008558:	f000 fe68 	bl	800922c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800855c:	f000 fe8e 	bl	800927c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8008560:	2000      	movs	r0, #0
 8008562:	f000 fe77 	bl	8009254 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008566:	f005 f993 	bl	800d890 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	40021000 	.word	0x40021000

08008578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b0a4      	sub	sp, #144	; 0x90
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008580:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	609a      	str	r2, [r3, #8]
 800858c:	60da      	str	r2, [r3, #12]
 800858e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008594:	2254      	movs	r2, #84	; 0x54
 8008596:	2100      	movs	r1, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f016 fc99 	bl	801eed0 <memset>
  if(hadc->Instance==ADC1)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085a6:	f040 808e 	bne.w	80086c6 <HAL_ADC_MspInit+0x14e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80085aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80085b0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80085b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80085b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085ba:	4618      	mov	r0, r3
 80085bc:	f005 fed8 	bl	800e370 <HAL_RCCEx_PeriphCLKConfig>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80085c6:	f7ff ff35 	bl	8008434 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80085ca:	4b7c      	ldr	r3, [pc, #496]	; (80087bc <HAL_ADC_MspInit+0x244>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3301      	adds	r3, #1
 80085d0:	4a7a      	ldr	r2, [pc, #488]	; (80087bc <HAL_ADC_MspInit+0x244>)
 80085d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80085d4:	4b79      	ldr	r3, [pc, #484]	; (80087bc <HAL_ADC_MspInit+0x244>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d10b      	bne.n	80085f4 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80085dc:	4b78      	ldr	r3, [pc, #480]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 80085de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e0:	4a77      	ldr	r2, [pc, #476]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 80085e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085e8:	4b75      	ldr	r3, [pc, #468]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 80085ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80085f4:	4b72      	ldr	r3, [pc, #456]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 80085f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f8:	4a71      	ldr	r2, [pc, #452]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 80085fa:	f043 0320 	orr.w	r3, r3, #32
 80085fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008600:	4b6f      	ldr	r3, [pc, #444]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 8008602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	623b      	str	r3, [r7, #32]
 800860a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800860c:	4b6c      	ldr	r3, [pc, #432]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 800860e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008610:	4a6b      	ldr	r2, [pc, #428]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 8008612:	f043 0302 	orr.w	r3, r3, #2
 8008616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008618:	4b69      	ldr	r3, [pc, #420]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 800861a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	61fb      	str	r3, [r7, #28]
 8008622:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = PWR3V3_ISENSE_ADC1IN10_Pin;
 8008624:	2301      	movs	r3, #1
 8008626:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008628:	2303      	movs	r3, #3
 800862a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800862e:	2300      	movs	r3, #0
 8008630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(PWR3V3_ISENSE_ADC1IN10_GPIO_Port, &GPIO_InitStruct);
 8008634:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008638:	4619      	mov	r1, r3
 800863a:	4862      	ldr	r0, [pc, #392]	; (80087c4 <HAL_ADC_MspInit+0x24c>)
 800863c:	f003 f86c 	bl	800b718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VIN_SENSE_ADC1_IN11_Pin;
 8008640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008644:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008646:	2303      	movs	r3, #3
 8008648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(VIN_SENSE_ADC1_IN11_GPIO_Port, &GPIO_InitStruct);
 8008652:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008656:	4619      	mov	r1, r3
 8008658:	485b      	ldr	r0, [pc, #364]	; (80087c8 <HAL_ADC_MspInit+0x250>)
 800865a:	f003 f85d 	bl	800b718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 800865e:	4b5b      	ldr	r3, [pc, #364]	; (80087cc <HAL_ADC_MspInit+0x254>)
 8008660:	4a5b      	ldr	r2, [pc, #364]	; (80087d0 <HAL_ADC_MspInit+0x258>)
 8008662:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008664:	4b59      	ldr	r3, [pc, #356]	; (80087cc <HAL_ADC_MspInit+0x254>)
 8008666:	2205      	movs	r2, #5
 8008668:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800866a:	4b58      	ldr	r3, [pc, #352]	; (80087cc <HAL_ADC_MspInit+0x254>)
 800866c:	2200      	movs	r2, #0
 800866e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008670:	4b56      	ldr	r3, [pc, #344]	; (80087cc <HAL_ADC_MspInit+0x254>)
 8008672:	2200      	movs	r2, #0
 8008674:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008676:	4b55      	ldr	r3, [pc, #340]	; (80087cc <HAL_ADC_MspInit+0x254>)
 8008678:	2280      	movs	r2, #128	; 0x80
 800867a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800867c:	4b53      	ldr	r3, [pc, #332]	; (80087cc <HAL_ADC_MspInit+0x254>)
 800867e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008682:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008684:	4b51      	ldr	r3, [pc, #324]	; (80087cc <HAL_ADC_MspInit+0x254>)
 8008686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800868a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800868c:	4b4f      	ldr	r3, [pc, #316]	; (80087cc <HAL_ADC_MspInit+0x254>)
 800868e:	2220      	movs	r2, #32
 8008690:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008692:	4b4e      	ldr	r3, [pc, #312]	; (80087cc <HAL_ADC_MspInit+0x254>)
 8008694:	2200      	movs	r2, #0
 8008696:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008698:	484c      	ldr	r0, [pc, #304]	; (80087cc <HAL_ADC_MspInit+0x254>)
 800869a:	f002 fd0b 	bl	800b0b4 <HAL_DMA_Init>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80086a4:	f7ff fec6 	bl	8008434 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a48      	ldr	r2, [pc, #288]	; (80087cc <HAL_ADC_MspInit+0x254>)
 80086ac:	655a      	str	r2, [r3, #84]	; 0x54
 80086ae:	4a47      	ldr	r2, [pc, #284]	; (80087cc <HAL_ADC_MspInit+0x254>)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80086b4:	2200      	movs	r2, #0
 80086b6:	2105      	movs	r1, #5
 80086b8:	2012      	movs	r0, #18
 80086ba:	f002 fcd3 	bl	800b064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80086be:	2012      	movs	r0, #18
 80086c0:	f002 fcea 	bl	800b098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80086c4:	e0fc      	b.n	80088c0 <HAL_ADC_MspInit+0x348>
  else if(hadc->Instance==ADC2)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a42      	ldr	r2, [pc, #264]	; (80087d4 <HAL_ADC_MspInit+0x25c>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	f040 8087 	bne.w	80087e0 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80086d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80086d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80086dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80086de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086e2:	4618      	mov	r0, r3
 80086e4:	f005 fe44 	bl	800e370 <HAL_RCCEx_PeriphCLKConfig>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 80086ee:	f7ff fea1 	bl	8008434 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80086f2:	4b32      	ldr	r3, [pc, #200]	; (80087bc <HAL_ADC_MspInit+0x244>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3301      	adds	r3, #1
 80086f8:	4a30      	ldr	r2, [pc, #192]	; (80087bc <HAL_ADC_MspInit+0x244>)
 80086fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80086fc:	4b2f      	ldr	r3, [pc, #188]	; (80087bc <HAL_ADC_MspInit+0x244>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d10b      	bne.n	800871c <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8008704:	4b2e      	ldr	r3, [pc, #184]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 8008706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008708:	4a2d      	ldr	r2, [pc, #180]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 800870a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800870e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008710:	4b2b      	ldr	r3, [pc, #172]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 8008712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008718:	61bb      	str	r3, [r7, #24]
 800871a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800871c:	4b28      	ldr	r3, [pc, #160]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 800871e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008720:	4a27      	ldr	r2, [pc, #156]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 8008722:	f043 0301 	orr.w	r3, r3, #1
 8008726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008728:	4b25      	ldr	r3, [pc, #148]	; (80087c0 <HAL_ADC_MspInit+0x248>)
 800872a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	617b      	str	r3, [r7, #20]
 8008732:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWR5VISENSE_ADC2IN17_Pin;
 8008734:	2310      	movs	r3, #16
 8008736:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008738:	2303      	movs	r3, #3
 800873a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800873e:	2300      	movs	r3, #0
 8008740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(PWR5VISENSE_ADC2IN17_GPIO_Port, &GPIO_InitStruct);
 8008744:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008748:	4619      	mov	r1, r3
 800874a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800874e:	f002 ffe3 	bl	800b718 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 8008752:	4b21      	ldr	r3, [pc, #132]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 8008754:	4a21      	ldr	r2, [pc, #132]	; (80087dc <HAL_ADC_MspInit+0x264>)
 8008756:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8008758:	4b1f      	ldr	r3, [pc, #124]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 800875a:	2224      	movs	r2, #36	; 0x24
 800875c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800875e:	4b1e      	ldr	r3, [pc, #120]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 8008760:	2200      	movs	r2, #0
 8008762:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008764:	4b1c      	ldr	r3, [pc, #112]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 8008766:	2200      	movs	r2, #0
 8008768:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800876a:	4b1b      	ldr	r3, [pc, #108]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 800876c:	2280      	movs	r2, #128	; 0x80
 800876e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008770:	4b19      	ldr	r3, [pc, #100]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 8008772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008776:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008778:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 800877a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800877e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8008780:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 8008782:	2220      	movs	r2, #32
 8008784:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 8008788:	2200      	movs	r2, #0
 800878a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800878c:	4812      	ldr	r0, [pc, #72]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 800878e:	f002 fc91 	bl	800b0b4 <HAL_DMA_Init>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <HAL_ADC_MspInit+0x224>
      Error_Handler();
 8008798:	f7ff fe4c 	bl	8008434 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a0e      	ldr	r2, [pc, #56]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 80087a0:	655a      	str	r2, [r3, #84]	; 0x54
 80087a2:	4a0d      	ldr	r2, [pc, #52]	; (80087d8 <HAL_ADC_MspInit+0x260>)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80087a8:	2200      	movs	r2, #0
 80087aa:	2105      	movs	r1, #5
 80087ac:	2012      	movs	r0, #18
 80087ae:	f002 fc59 	bl	800b064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80087b2:	2012      	movs	r0, #18
 80087b4:	f002 fc70 	bl	800b098 <HAL_NVIC_EnableIRQ>
}
 80087b8:	e082      	b.n	80088c0 <HAL_ADC_MspInit+0x348>
 80087ba:	bf00      	nop
 80087bc:	200015e0 	.word	0x200015e0
 80087c0:	40021000 	.word	0x40021000
 80087c4:	48001400 	.word	0x48001400
 80087c8:	48000400 	.word	0x48000400
 80087cc:	20000414 	.word	0x20000414
 80087d0:	40020058 	.word	0x40020058
 80087d4:	50000100 	.word	0x50000100
 80087d8:	20000474 	.word	0x20000474
 80087dc:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC5)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a38      	ldr	r2, [pc, #224]	; (80088c8 <HAL_ADC_MspInit+0x350>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d16a      	bne.n	80088c0 <HAL_ADC_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80087ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087ee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80087f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087f4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80087f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087fa:	4618      	mov	r0, r3
 80087fc:	f005 fdb8 	bl	800e370 <HAL_RCCEx_PeriphCLKConfig>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <HAL_ADC_MspInit+0x292>
      Error_Handler();
 8008806:	f7ff fe15 	bl	8008434 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800880a:	4b30      	ldr	r3, [pc, #192]	; (80088cc <HAL_ADC_MspInit+0x354>)
 800880c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880e:	4a2f      	ldr	r2, [pc, #188]	; (80088cc <HAL_ADC_MspInit+0x354>)
 8008810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008816:	4b2d      	ldr	r3, [pc, #180]	; (80088cc <HAL_ADC_MspInit+0x354>)
 8008818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800881e:	613b      	str	r3, [r7, #16]
 8008820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008822:	4b2a      	ldr	r3, [pc, #168]	; (80088cc <HAL_ADC_MspInit+0x354>)
 8008824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008826:	4a29      	ldr	r2, [pc, #164]	; (80088cc <HAL_ADC_MspInit+0x354>)
 8008828:	f043 0301 	orr.w	r3, r3, #1
 800882c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800882e:	4b27      	ldr	r3, [pc, #156]	; (80088cc <HAL_ADC_MspInit+0x354>)
 8008830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCC_ISENSE_ADC5_IN1_Pin;
 800883a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800883e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008840:	2303      	movs	r3, #3
 8008842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008846:	2300      	movs	r3, #0
 8008848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(VCC_ISENSE_ADC5_IN1_GPIO_Port, &GPIO_InitStruct);
 800884c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008850:	4619      	mov	r1, r3
 8008852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008856:	f002 ff5f 	bl	800b718 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel7;
 800885a:	4b1d      	ldr	r3, [pc, #116]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 800885c:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <HAL_ADC_MspInit+0x35c>)
 800885e:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8008860:	4b1b      	ldr	r3, [pc, #108]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 8008862:	2227      	movs	r2, #39	; 0x27
 8008864:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008866:	4b1a      	ldr	r3, [pc, #104]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 8008868:	2200      	movs	r2, #0
 800886a:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800886c:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 800886e:	2200      	movs	r2, #0
 8008870:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8008872:	4b17      	ldr	r3, [pc, #92]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 8008874:	2280      	movs	r2, #128	; 0x80
 8008876:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008878:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 800887a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800887e:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008880:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 8008882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008886:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8008888:	4b11      	ldr	r3, [pc, #68]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 800888a:	2220      	movs	r2, #32
 800888c:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 8008890:	2200      	movs	r2, #0
 8008892:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8008894:	480e      	ldr	r0, [pc, #56]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 8008896:	f002 fc0d 	bl	800b0b4 <HAL_DMA_Init>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <HAL_ADC_MspInit+0x32c>
      Error_Handler();
 80088a0:	f7ff fdc8 	bl	8008434 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a0a      	ldr	r2, [pc, #40]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 80088a8:	655a      	str	r2, [r3, #84]	; 0x54
 80088aa:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <HAL_ADC_MspInit+0x358>)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC5_IRQn, 5, 0);
 80088b0:	2200      	movs	r2, #0
 80088b2:	2105      	movs	r1, #5
 80088b4:	203e      	movs	r0, #62	; 0x3e
 80088b6:	f002 fbd5 	bl	800b064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 80088ba:	203e      	movs	r0, #62	; 0x3e
 80088bc:	f002 fbec 	bl	800b098 <HAL_NVIC_EnableIRQ>
}
 80088c0:	bf00      	nop
 80088c2:	3790      	adds	r7, #144	; 0x90
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	50000600 	.word	0x50000600
 80088cc:	40021000 	.word	0x40021000
 80088d0:	200004d4 	.word	0x200004d4
 80088d4:	40020080 	.word	0x40020080

080088d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b09e      	sub	sp, #120	; 0x78
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	605a      	str	r2, [r3, #4]
 80088ea:	609a      	str	r2, [r3, #8]
 80088ec:	60da      	str	r2, [r3, #12]
 80088ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80088f0:	f107 0310 	add.w	r3, r7, #16
 80088f4:	2254      	movs	r2, #84	; 0x54
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f016 fae9 	bl	801eed0 <memset>
  if(hi2c->Instance==I2C4)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <HAL_I2C_MspInit+0xa8>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d136      	bne.n	8008976 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8008908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800890c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800890e:	2300      	movs	r3, #0
 8008910:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008912:	f107 0310 	add.w	r3, r7, #16
 8008916:	4618      	mov	r0, r3
 8008918:	f005 fd2a 	bl	800e370 <HAL_RCCEx_PeriphCLKConfig>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8008922:	f7ff fd87 	bl	8008434 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008926:	4b17      	ldr	r3, [pc, #92]	; (8008984 <HAL_I2C_MspInit+0xac>)
 8008928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892a:	4a16      	ldr	r2, [pc, #88]	; (8008984 <HAL_I2C_MspInit+0xac>)
 800892c:	f043 0304 	orr.w	r3, r3, #4
 8008930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008932:	4b14      	ldr	r3, [pc, #80]	; (8008984 <HAL_I2C_MspInit+0xac>)
 8008934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008936:	f003 0304 	and.w	r3, r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PC7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800893e:	23c0      	movs	r3, #192	; 0xc0
 8008940:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008942:	2312      	movs	r3, #18
 8008944:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008946:	2300      	movs	r3, #0
 8008948:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800894a:	2300      	movs	r3, #0
 800894c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 800894e:	2308      	movs	r3, #8
 8008950:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008952:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008956:	4619      	mov	r1, r3
 8008958:	480b      	ldr	r0, [pc, #44]	; (8008988 <HAL_I2C_MspInit+0xb0>)
 800895a:	f002 fedd 	bl	800b718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <HAL_I2C_MspInit+0xac>)
 8008960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008962:	4a08      	ldr	r2, [pc, #32]	; (8008984 <HAL_I2C_MspInit+0xac>)
 8008964:	f043 0302 	orr.w	r3, r3, #2
 8008968:	65d3      	str	r3, [r2, #92]	; 0x5c
 800896a:	4b06      	ldr	r3, [pc, #24]	; (8008984 <HAL_I2C_MspInit+0xac>)
 800896c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	60bb      	str	r3, [r7, #8]
 8008974:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8008976:	bf00      	nop
 8008978:	3778      	adds	r7, #120	; 0x78
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	40008400 	.word	0x40008400
 8008984:	40021000 	.word	0x40021000
 8008988:	48000800 	.word	0x48000800

0800898c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <HAL_TIM_Base_MspInit+0x5c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d10c      	bne.n	80089b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800899e:	4b13      	ldr	r3, [pc, #76]	; (80089ec <HAL_TIM_Base_MspInit+0x60>)
 80089a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a2:	4a12      	ldr	r2, [pc, #72]	; (80089ec <HAL_TIM_Base_MspInit+0x60>)
 80089a4:	f043 0302 	orr.w	r3, r3, #2
 80089a8:	6593      	str	r3, [r2, #88]	; 0x58
 80089aa:	4b10      	ldr	r3, [pc, #64]	; (80089ec <HAL_TIM_Base_MspInit+0x60>)
 80089ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80089b6:	e010      	b.n	80089da <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a0c      	ldr	r2, [pc, #48]	; (80089f0 <HAL_TIM_Base_MspInit+0x64>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d10b      	bne.n	80089da <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80089c2:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <HAL_TIM_Base_MspInit+0x60>)
 80089c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c6:	4a09      	ldr	r2, [pc, #36]	; (80089ec <HAL_TIM_Base_MspInit+0x60>)
 80089c8:	f043 0308 	orr.w	r3, r3, #8
 80089cc:	6593      	str	r3, [r2, #88]	; 0x58
 80089ce:	4b07      	ldr	r3, [pc, #28]	; (80089ec <HAL_TIM_Base_MspInit+0x60>)
 80089d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	60bb      	str	r3, [r7, #8]
 80089d8:	68bb      	ldr	r3, [r7, #8]
}
 80089da:	bf00      	nop
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40000400 	.word	0x40000400
 80089ec:	40021000 	.word	0x40021000
 80089f0:	40000c00 	.word	0x40000c00

080089f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08a      	sub	sp, #40	; 0x28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089fc:	f107 0314 	add.w	r3, r7, #20
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	605a      	str	r2, [r3, #4]
 8008a06:	609a      	str	r2, [r3, #8]
 8008a08:	60da      	str	r2, [r3, #12]
 8008a0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a22      	ldr	r2, [pc, #136]	; (8008a9c <HAL_TIM_MspPostInit+0xa8>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d11c      	bne.n	8008a50 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a16:	4b22      	ldr	r3, [pc, #136]	; (8008aa0 <HAL_TIM_MspPostInit+0xac>)
 8008a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1a:	4a21      	ldr	r2, [pc, #132]	; (8008aa0 <HAL_TIM_MspPostInit+0xac>)
 8008a1c:	f043 0302 	orr.w	r3, r3, #2
 8008a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a22:	4b1f      	ldr	r3, [pc, #124]	; (8008aa0 <HAL_TIM_MspPostInit+0xac>)
 8008a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	613b      	str	r3, [r7, #16]
 8008a2c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = LEDB_TIM3CH3_Pin|LEDG_TIM3CH4_Pin;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a32:	2302      	movs	r3, #2
 8008a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a42:	f107 0314 	add.w	r3, r7, #20
 8008a46:	4619      	mov	r1, r3
 8008a48:	4816      	ldr	r0, [pc, #88]	; (8008aa4 <HAL_TIM_MspPostInit+0xb0>)
 8008a4a:	f002 fe65 	bl	800b718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008a4e:	e020      	b.n	8008a92 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM5)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a14      	ldr	r2, [pc, #80]	; (8008aa8 <HAL_TIM_MspPostInit+0xb4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d11b      	bne.n	8008a92 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a5a:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <HAL_TIM_MspPostInit+0xac>)
 8008a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a5e:	4a10      	ldr	r2, [pc, #64]	; (8008aa0 <HAL_TIM_MspPostInit+0xac>)
 8008a60:	f043 0302 	orr.w	r3, r3, #2
 8008a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a66:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <HAL_TIM_MspPostInit+0xac>)
 8008a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDR_TIM5CH1_Pin;
 8008a72:	2304      	movs	r3, #4
 8008a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a76:	2302      	movs	r3, #2
 8008a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008a82:	2302      	movs	r3, #2
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDR_TIM5CH1_GPIO_Port, &GPIO_InitStruct);
 8008a86:	f107 0314 	add.w	r3, r7, #20
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4805      	ldr	r0, [pc, #20]	; (8008aa4 <HAL_TIM_MspPostInit+0xb0>)
 8008a8e:	f002 fe43 	bl	800b718 <HAL_GPIO_Init>
}
 8008a92:	bf00      	nop
 8008a94:	3728      	adds	r7, #40	; 0x28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40021000 	.word	0x40021000
 8008aa4:	48000400 	.word	0x48000400
 8008aa8:	40000c00 	.word	0x40000c00

08008aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b0a4      	sub	sp, #144	; 0x90
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ab4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008ab8:	2200      	movs	r2, #0
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	605a      	str	r2, [r3, #4]
 8008abe:	609a      	str	r2, [r3, #8]
 8008ac0:	60da      	str	r2, [r3, #12]
 8008ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ac8:	2254      	movs	r2, #84	; 0x54
 8008aca:	2100      	movs	r1, #0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f016 f9ff 	bl	801eed0 <memset>
  if(huart->Instance==UART4)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a7e      	ldr	r2, [pc, #504]	; (8008cd0 <HAL_UART_MspInit+0x224>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	f040 8097 	bne.w	8008c0c <HAL_UART_MspInit+0x160>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008ade:	2308      	movs	r3, #8
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008aea:	4618      	mov	r0, r3
 8008aec:	f005 fc40 	bl	800e370 <HAL_RCCEx_PeriphCLKConfig>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008af6:	f7ff fc9d 	bl	8008434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008afa:	4b76      	ldr	r3, [pc, #472]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008afe:	4a75      	ldr	r2, [pc, #468]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b04:	6593      	str	r3, [r2, #88]	; 0x58
 8008b06:	4b73      	ldr	r3, [pc, #460]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b12:	4b70      	ldr	r3, [pc, #448]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b16:	4a6f      	ldr	r2, [pc, #444]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008b18:	f043 0304 	orr.w	r3, r3, #4
 8008b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b1e:	4b6d      	ldr	r3, [pc, #436]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b22:	f003 0304 	and.w	r3, r3, #4
 8008b26:	623b      	str	r3, [r7, #32]
 8008b28:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ESP32_TX_UART4_Pin|ESP32_RX_UART4_Pin;
 8008b2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b30:	2302      	movs	r3, #2
 8008b32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8008b42:	2305      	movs	r3, #5
 8008b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4862      	ldr	r0, [pc, #392]	; (8008cd8 <HAL_UART_MspInit+0x22c>)
 8008b50:	f002 fde2 	bl	800b718 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel8;
 8008b54:	4b61      	ldr	r3, [pc, #388]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b56:	4a62      	ldr	r2, [pc, #392]	; (8008ce0 <HAL_UART_MspInit+0x234>)
 8008b58:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8008b5a:	4b60      	ldr	r3, [pc, #384]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b5c:	221e      	movs	r2, #30
 8008b5e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b60:	4b5e      	ldr	r3, [pc, #376]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b66:	4b5d      	ldr	r3, [pc, #372]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b6c:	4b5b      	ldr	r3, [pc, #364]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b6e:	2280      	movs	r2, #128	; 0x80
 8008b70:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b72:	4b5a      	ldr	r3, [pc, #360]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b78:	4b58      	ldr	r3, [pc, #352]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8008b7e:	4b57      	ldr	r3, [pc, #348]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008b84:	4b55      	ldr	r3, [pc, #340]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008b8a:	4854      	ldr	r0, [pc, #336]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b8c:	f002 fa92 	bl	800b0b4 <HAL_DMA_Init>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8008b96:	f7ff fc4d 	bl	8008434 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a4f      	ldr	r2, [pc, #316]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008b9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008ba2:	4a4e      	ldr	r2, [pc, #312]	; (8008cdc <HAL_UART_MspInit+0x230>)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel1;
 8008ba8:	4b4e      	ldr	r3, [pc, #312]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008baa:	4a4f      	ldr	r2, [pc, #316]	; (8008ce8 <HAL_UART_MspInit+0x23c>)
 8008bac:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8008bae:	4b4d      	ldr	r3, [pc, #308]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bb0:	221f      	movs	r2, #31
 8008bb2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008bb4:	4b4b      	ldr	r3, [pc, #300]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bb6:	2210      	movs	r2, #16
 8008bb8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008bba:	4b4a      	ldr	r3, [pc, #296]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008bc0:	4b48      	ldr	r3, [pc, #288]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bc2:	2280      	movs	r2, #128	; 0x80
 8008bc4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008bc6:	4b47      	ldr	r3, [pc, #284]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008bcc:	4b45      	ldr	r3, [pc, #276]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8008bd2:	4b44      	ldr	r3, [pc, #272]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008bd8:	4b42      	ldr	r3, [pc, #264]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008bde:	4841      	ldr	r0, [pc, #260]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008be0:	f002 fa68 	bl	800b0b4 <HAL_DMA_Init>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8008bea:	f7ff fc23 	bl	8008434 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a3c      	ldr	r2, [pc, #240]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bf2:	67da      	str	r2, [r3, #124]	; 0x7c
 8008bf4:	4a3b      	ldr	r2, [pc, #236]	; (8008ce4 <HAL_UART_MspInit+0x238>)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	2105      	movs	r1, #5
 8008bfe:	2034      	movs	r0, #52	; 0x34
 8008c00:	f002 fa30 	bl	800b064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008c04:	2034      	movs	r0, #52	; 0x34
 8008c06:	f002 fa47 	bl	800b098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008c0a:	e10f      	b.n	8008e2c <HAL_UART_MspInit+0x380>
  else if(huart->Instance==USART1)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a36      	ldr	r2, [pc, #216]	; (8008cec <HAL_UART_MspInit+0x240>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d16c      	bne.n	8008cf0 <HAL_UART_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008c16:	2301      	movs	r3, #1
 8008c18:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c22:	4618      	mov	r0, r3
 8008c24:	f005 fba4 	bl	800e370 <HAL_RCCEx_PeriphCLKConfig>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <HAL_UART_MspInit+0x186>
      Error_Handler();
 8008c2e:	f7ff fc01 	bl	8008434 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c32:	4b28      	ldr	r3, [pc, #160]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c36:	4a27      	ldr	r2, [pc, #156]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8008c3e:	4b25      	ldr	r3, [pc, #148]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c4a:	4b22      	ldr	r3, [pc, #136]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c4e:	4a21      	ldr	r2, [pc, #132]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008c50:	f043 0304 	orr.w	r3, r3, #4
 8008c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c56:	4b1f      	ldr	r3, [pc, #124]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	61bb      	str	r3, [r7, #24]
 8008c60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c62:	4b1c      	ldr	r3, [pc, #112]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c66:	4a1b      	ldr	r2, [pc, #108]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008c68:	f043 0301 	orr.w	r3, r3, #1
 8008c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c6e:	4b19      	ldr	r3, [pc, #100]	; (8008cd4 <HAL_UART_MspInit+0x228>)
 8008c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = FLR_USART1RX_Pin;
 8008c7a:	2320      	movs	r3, #32
 8008c7c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c7e:	2302      	movs	r3, #2
 8008c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008c90:	2307      	movs	r3, #7
 8008c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(FLR_USART1RX_GPIO_Port, &GPIO_InitStruct);
 8008c96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	480e      	ldr	r0, [pc, #56]	; (8008cd8 <HAL_UART_MspInit+0x22c>)
 8008c9e:	f002 fd3b 	bl	800b718 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FLT_USART1TX_Pin;
 8008ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008cba:	2307      	movs	r3, #7
 8008cbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(FLT_USART1TX_GPIO_Port, &GPIO_InitStruct);
 8008cc0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008cca:	f002 fd25 	bl	800b718 <HAL_GPIO_Init>
}
 8008cce:	e0ad      	b.n	8008e2c <HAL_UART_MspInit+0x380>
 8008cd0:	40004c00 	.word	0x40004c00
 8008cd4:	40021000 	.word	0x40021000
 8008cd8:	48000800 	.word	0x48000800
 8008cdc:	200007dc 	.word	0x200007dc
 8008ce0:	40020094 	.word	0x40020094
 8008ce4:	2000083c 	.word	0x2000083c
 8008ce8:	40020408 	.word	0x40020408
 8008cec:	40013800 	.word	0x40013800
  else if(huart->Instance==USART2)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a4f      	ldr	r2, [pc, #316]	; (8008e34 <HAL_UART_MspInit+0x388>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	f040 8098 	bne.w	8008e2c <HAL_UART_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008d00:	2300      	movs	r3, #0
 8008d02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f005 fb31 	bl	800e370 <HAL_RCCEx_PeriphCLKConfig>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8008d14:	f7ff fb8e 	bl	8008434 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008d18:	4b47      	ldr	r3, [pc, #284]	; (8008e38 <HAL_UART_MspInit+0x38c>)
 8008d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1c:	4a46      	ldr	r2, [pc, #280]	; (8008e38 <HAL_UART_MspInit+0x38c>)
 8008d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d22:	6593      	str	r3, [r2, #88]	; 0x58
 8008d24:	4b44      	ldr	r3, [pc, #272]	; (8008e38 <HAL_UART_MspInit+0x38c>)
 8008d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d30:	4b41      	ldr	r3, [pc, #260]	; (8008e38 <HAL_UART_MspInit+0x38c>)
 8008d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d34:	4a40      	ldr	r2, [pc, #256]	; (8008e38 <HAL_UART_MspInit+0x38c>)
 8008d36:	f043 0301 	orr.w	r3, r3, #1
 8008d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d3c:	4b3e      	ldr	r3, [pc, #248]	; (8008e38 <HAL_UART_MspInit+0x38c>)
 8008d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_USART2DE_Pin|RS485_USART2TX_Pin|RS485_USART2RX_Pin;
 8008d48:	230e      	movs	r3, #14
 8008d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008d5e:	2307      	movs	r3, #7
 8008d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d6e:	f002 fcd3 	bl	800b718 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8008d72:	4b32      	ldr	r3, [pc, #200]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008d74:	4a32      	ldr	r2, [pc, #200]	; (8008e40 <HAL_UART_MspInit+0x394>)
 8008d76:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8008d78:	4b30      	ldr	r3, [pc, #192]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008d7a:	221b      	movs	r2, #27
 8008d7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008d7e:	4b2f      	ldr	r3, [pc, #188]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008d80:	2210      	movs	r2, #16
 8008d82:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d84:	4b2d      	ldr	r3, [pc, #180]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008d8a:	4b2c      	ldr	r3, [pc, #176]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008d8c:	2280      	movs	r2, #128	; 0x80
 8008d8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d90:	4b2a      	ldr	r3, [pc, #168]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d96:	4b29      	ldr	r3, [pc, #164]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008d9c:	4b27      	ldr	r3, [pc, #156]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008da2:	4b26      	ldr	r3, [pc, #152]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008da8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008daa:	4824      	ldr	r0, [pc, #144]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008dac:	f002 f982 	bl	800b0b4 <HAL_DMA_Init>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <HAL_UART_MspInit+0x30e>
      Error_Handler();
 8008db6:	f7ff fb3d 	bl	8008434 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a1f      	ldr	r2, [pc, #124]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008dbe:	67da      	str	r2, [r3, #124]	; 0x7c
 8008dc0:	4a1e      	ldr	r2, [pc, #120]	; (8008e3c <HAL_UART_MspInit+0x390>)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8008dc6:	4b1f      	ldr	r3, [pc, #124]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008dc8:	4a1f      	ldr	r2, [pc, #124]	; (8008e48 <HAL_UART_MspInit+0x39c>)
 8008dca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008dcc:	4b1d      	ldr	r3, [pc, #116]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008dce:	221a      	movs	r2, #26
 8008dd0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008dd2:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008dd8:	4b1a      	ldr	r3, [pc, #104]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008dde:	4b19      	ldr	r3, [pc, #100]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008de0:	2280      	movs	r2, #128	; 0x80
 8008de2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008dea:	4b16      	ldr	r3, [pc, #88]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008df0:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008df6:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008df8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008dfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008dfe:	4811      	ldr	r0, [pc, #68]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008e00:	f002 f958 	bl	800b0b4 <HAL_DMA_Init>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <HAL_UART_MspInit+0x362>
      Error_Handler();
 8008e0a:	f7ff fb13 	bl	8008434 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a0c      	ldr	r2, [pc, #48]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008e16:	4a0b      	ldr	r2, [pc, #44]	; (8008e44 <HAL_UART_MspInit+0x398>)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2105      	movs	r1, #5
 8008e20:	2026      	movs	r0, #38	; 0x26
 8008e22:	f002 f91f 	bl	800b064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008e26:	2026      	movs	r0, #38	; 0x26
 8008e28:	f002 f936 	bl	800b098 <HAL_NVIC_EnableIRQ>
}
 8008e2c:	bf00      	nop
 8008e2e:	3790      	adds	r7, #144	; 0x90
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40004400 	.word	0x40004400
 8008e38:	40021000 	.word	0x40021000
 8008e3c:	2000089c 	.word	0x2000089c
 8008e40:	40020008 	.word	0x40020008
 8008e44:	200008fc 	.word	0x200008fc
 8008e48:	4002001c 	.word	0x4002001c

08008e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08c      	sub	sp, #48	; 0x30
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM20 clock */
  __HAL_RCC_TIM20_CLK_ENABLE();
 8008e5c:	4b2c      	ldr	r3, [pc, #176]	; (8008f10 <HAL_InitTick+0xc4>)
 8008e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e60:	4a2b      	ldr	r2, [pc, #172]	; (8008f10 <HAL_InitTick+0xc4>)
 8008e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e66:	6613      	str	r3, [r2, #96]	; 0x60
 8008e68:	4b29      	ldr	r3, [pc, #164]	; (8008f10 <HAL_InitTick+0xc4>)
 8008e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e70:	60bb      	str	r3, [r7, #8]
 8008e72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008e74:	f107 020c 	add.w	r2, r7, #12
 8008e78:	f107 0310 	add.w	r3, r7, #16
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f005 f9fe 	bl	800e280 <HAL_RCC_GetClockConfig>

  /* Compute TIM20 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008e84:	f005 f9e6 	bl	800e254 <HAL_RCC_GetPCLK2Freq>
 8008e88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM20 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	4a21      	ldr	r2, [pc, #132]	; (8008f14 <HAL_InitTick+0xc8>)
 8008e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e92:	0c9b      	lsrs	r3, r3, #18
 8008e94:	3b01      	subs	r3, #1
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM20 */
  htim20.Instance = TIM20;
 8008e98:	4b1f      	ldr	r3, [pc, #124]	; (8008f18 <HAL_InitTick+0xcc>)
 8008e9a:	4a20      	ldr	r2, [pc, #128]	; (8008f1c <HAL_InitTick+0xd0>)
 8008e9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM20CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim20.Init.Period = (1000000U / 1000U) - 1U;
 8008e9e:	4b1e      	ldr	r3, [pc, #120]	; (8008f18 <HAL_InitTick+0xcc>)
 8008ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ea4:	60da      	str	r2, [r3, #12]
  htim20.Init.Prescaler = uwPrescalerValue;
 8008ea6:	4a1c      	ldr	r2, [pc, #112]	; (8008f18 <HAL_InitTick+0xcc>)
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	6053      	str	r3, [r2, #4]
  htim20.Init.ClockDivision = 0;
 8008eac:	4b1a      	ldr	r3, [pc, #104]	; (8008f18 <HAL_InitTick+0xcc>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	611a      	str	r2, [r3, #16]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008eb2:	4b19      	ldr	r3, [pc, #100]	; (8008f18 <HAL_InitTick+0xcc>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim20);
 8008eb8:	4817      	ldr	r0, [pc, #92]	; (8008f18 <HAL_InitTick+0xcc>)
 8008eba:	f005 fca7 	bl	800e80c <HAL_TIM_Base_Init>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8008ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d11b      	bne.n	8008f04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim20);
 8008ecc:	4812      	ldr	r0, [pc, #72]	; (8008f18 <HAL_InitTick+0xcc>)
 8008ece:	f005 fcf5 	bl	800e8bc <HAL_TIM_Base_Start_IT>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8008ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d111      	bne.n	8008f04 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM20 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM20_UP_IRQn);
 8008ee0:	204e      	movs	r0, #78	; 0x4e
 8008ee2:	f002 f8d9 	bl	800b098 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b0f      	cmp	r3, #15
 8008eea:	d808      	bhi.n	8008efe <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM20_UP_IRQn, TickPriority, 0U);
 8008eec:	2200      	movs	r2, #0
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	204e      	movs	r0, #78	; 0x4e
 8008ef2:	f002 f8b7 	bl	800b064 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008ef6:	4a0a      	ldr	r2, [pc, #40]	; (8008f20 <HAL_InitTick+0xd4>)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	e002      	b.n	8008f04 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8008f04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3730      	adds	r7, #48	; 0x30
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40021000 	.word	0x40021000
 8008f14:	431bde83 	.word	0x431bde83
 8008f18:	200015e4 	.word	0x200015e4
 8008f1c:	40015000 	.word	0x40015000
 8008f20:	2000000c 	.word	0x2000000c

08008f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f24:	b480      	push	{r7}
 8008f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008f28:	e7fe      	b.n	8008f28 <NMI_Handler+0x4>

08008f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f2e:	e7fe      	b.n	8008f2e <HardFault_Handler+0x4>

08008f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f34:	e7fe      	b.n	8008f34 <MemManage_Handler+0x4>

08008f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f36:	b480      	push	{r7}
 8008f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f3a:	e7fe      	b.n	8008f3a <BusFault_Handler+0x4>

08008f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f40:	e7fe      	b.n	8008f40 <UsageFault_Handler+0x4>

08008f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f42:	b480      	push	{r7}
 8008f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f46:	bf00      	nop
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008f54:	4802      	ldr	r0, [pc, #8]	; (8008f60 <DMA1_Channel1_IRQHandler+0x10>)
 8008f56:	f002 fa90 	bl	800b47a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	2000089c 	.word	0x2000089c

08008f64 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008f68:	4802      	ldr	r0, [pc, #8]	; (8008f74 <DMA1_Channel2_IRQHandler+0x10>)
 8008f6a:	f002 fa86 	bl	800b47a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008f6e:	bf00      	nop
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	200008fc 	.word	0x200008fc

08008f78 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008f7c:	bf00      	nop
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008f86:	b480      	push	{r7}
 8008f88:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008f8a:	bf00      	nop
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008f98:	4802      	ldr	r0, [pc, #8]	; (8008fa4 <DMA1_Channel5_IRQHandler+0x10>)
 8008f9a:	f002 fa6e 	bl	800b47a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8008f9e:	bf00      	nop
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000414 	.word	0x20000414

08008fa8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008fac:	4802      	ldr	r0, [pc, #8]	; (8008fb8 <DMA1_Channel6_IRQHandler+0x10>)
 8008fae:	f002 fa64 	bl	800b47a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8008fb2:	bf00      	nop
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000474 	.word	0x20000474

08008fbc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8008fc0:	4802      	ldr	r0, [pc, #8]	; (8008fcc <DMA1_Channel7_IRQHandler+0x10>)
 8008fc2:	f002 fa5a 	bl	800b47a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8008fc6:	bf00      	nop
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	200004d4 	.word	0x200004d4

08008fd0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008fd4:	4803      	ldr	r0, [pc, #12]	; (8008fe4 <ADC1_2_IRQHandler+0x14>)
 8008fd6:	f000 fe45 	bl	8009c64 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008fda:	4803      	ldr	r0, [pc, #12]	; (8008fe8 <ADC1_2_IRQHandler+0x18>)
 8008fdc:	f000 fe42 	bl	8009c64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8008fe0:	bf00      	nop
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	200002d0 	.word	0x200002d0
 8008fe8:	2000033c 	.word	0x2000033c

08008fec <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008ff0:	4802      	ldr	r0, [pc, #8]	; (8008ffc <USB_HP_IRQHandler+0x10>)
 8008ff2:	f002 ff65 	bl	800bec0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8008ff6:	bf00      	nop
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20013a20 	.word	0x20013a20

08009000 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009004:	4802      	ldr	r0, [pc, #8]	; (8009010 <USB_LP_IRQHandler+0x10>)
 8009006:	f002 ff5b 	bl	800bec0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800900a:	bf00      	nop
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20013a20 	.word	0x20013a20

08009014 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009018:	4802      	ldr	r0, [pc, #8]	; (8009024 <USART2_IRQHandler+0x10>)
 800901a:	f007 f829 	bl	8010070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800901e:	bf00      	nop
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000748 	.word	0x20000748

08009028 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800902c:	4802      	ldr	r0, [pc, #8]	; (8009038 <UART4_IRQHandler+0x10>)
 800902e:	f007 f81f 	bl	8010070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000620 	.word	0x20000620

0800903c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8009040:	4802      	ldr	r0, [pc, #8]	; (800904c <DMA2_Channel1_IRQHandler+0x10>)
 8009042:	f002 fa1a 	bl	800b47a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8009046:	bf00      	nop
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	2000083c 	.word	0x2000083c

08009050 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8009054:	4802      	ldr	r0, [pc, #8]	; (8009060 <ADC5_IRQHandler+0x10>)
 8009056:	f000 fe05 	bl	8009c64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 800905a:	bf00      	nop
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	200003a8 	.word	0x200003a8

08009064 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 8009068:	f00c ff13 	bl	8015e92 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 800906c:	bf00      	nop
 800906e:	bd80      	pop	{r7, pc}

08009070 <TIM20_UP_IRQHandler>:

/**
  * @brief This function handles TIM20 update interrupt.
  */
void TIM20_UP_IRQHandler(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_UP_IRQn 0 */

  /* USER CODE END TIM20_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 8009074:	4802      	ldr	r0, [pc, #8]	; (8009080 <TIM20_UP_IRQHandler+0x10>)
 8009076:	f005 fe0d 	bl	800ec94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_UP_IRQn 1 */

  /* USER CODE END TIM20_UP_IRQn 1 */
}
 800907a:	bf00      	nop
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	200015e4 	.word	0x200015e4

08009084 <DMA1_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA1 channel8 global interrupt.
  */
void DMA1_Channel8_IRQHandler(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8009088:	4802      	ldr	r0, [pc, #8]	; (8009094 <DMA1_Channel8_IRQHandler+0x10>)
 800908a:	f002 f9f6 	bl	800b47a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel8_IRQn 1 */

  /* USER CODE END DMA1_Channel8_IRQn 1 */
}
 800908e:	bf00      	nop
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	200007dc 	.word	0x200007dc

08009098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80090a0:	4a14      	ldr	r2, [pc, #80]	; (80090f4 <_sbrk+0x5c>)
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <_sbrk+0x60>)
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80090ac:	4b13      	ldr	r3, [pc, #76]	; (80090fc <_sbrk+0x64>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80090b4:	4b11      	ldr	r3, [pc, #68]	; (80090fc <_sbrk+0x64>)
 80090b6:	4a12      	ldr	r2, [pc, #72]	; (8009100 <_sbrk+0x68>)
 80090b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80090ba:	4b10      	ldr	r3, [pc, #64]	; (80090fc <_sbrk+0x64>)
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4413      	add	r3, r2
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d207      	bcs.n	80090d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80090c8:	f015 ff82 	bl	801efd0 <__errno>
 80090cc:	4603      	mov	r3, r0
 80090ce:	220c      	movs	r2, #12
 80090d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80090d2:	f04f 33ff 	mov.w	r3, #4294967295
 80090d6:	e009      	b.n	80090ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80090d8:	4b08      	ldr	r3, [pc, #32]	; (80090fc <_sbrk+0x64>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80090de:	4b07      	ldr	r3, [pc, #28]	; (80090fc <_sbrk+0x64>)
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4413      	add	r3, r2
 80090e6:	4a05      	ldr	r2, [pc, #20]	; (80090fc <_sbrk+0x64>)
 80090e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80090ea:	68fb      	ldr	r3, [r7, #12]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20020000 	.word	0x20020000
 80090f8:	00000400 	.word	0x00000400
 80090fc:	20001630 	.word	0x20001630
 8009100:	20014068 	.word	0x20014068

08009104 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009104:	b480      	push	{r7}
 8009106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009108:	4b06      	ldr	r3, [pc, #24]	; (8009124 <SystemInit+0x20>)
 800910a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800910e:	4a05      	ldr	r2, [pc, #20]	; (8009124 <SystemInit+0x20>)
 8009110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009118:	bf00      	nop
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	e000ed00 	.word	0xe000ed00

08009128 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009128:	480d      	ldr	r0, [pc, #52]	; (8009160 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800912a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800912c:	f7ff ffea 	bl	8009104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009130:	480c      	ldr	r0, [pc, #48]	; (8009164 <LoopForever+0x6>)
  ldr r1, =_edata
 8009132:	490d      	ldr	r1, [pc, #52]	; (8009168 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009134:	4a0d      	ldr	r2, [pc, #52]	; (800916c <LoopForever+0xe>)
  movs r3, #0
 8009136:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009138:	e002      	b.n	8009140 <LoopCopyDataInit>

0800913a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800913a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800913c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800913e:	3304      	adds	r3, #4

08009140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009144:	d3f9      	bcc.n	800913a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009146:	4a0a      	ldr	r2, [pc, #40]	; (8009170 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009148:	4c0a      	ldr	r4, [pc, #40]	; (8009174 <LoopForever+0x16>)
  movs r3, #0
 800914a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800914c:	e001      	b.n	8009152 <LoopFillZerobss>

0800914e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800914e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009150:	3204      	adds	r2, #4

08009152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009154:	d3fb      	bcc.n	800914e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009156:	f015 ff41 	bl	801efdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800915a:	f7fd fd63 	bl	8006c24 <main>

0800915e <LoopForever>:

LoopForever:
    b LoopForever
 800915e:	e7fe      	b.n	800915e <LoopForever>
  ldr   r0, =_estack
 8009160:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009168:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 800916c:	080209b0 	.word	0x080209b0
  ldr r2, =_sbss
 8009170:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8009174:	20014064 	.word	0x20014064

08009178 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009178:	e7fe      	b.n	8009178 <ADC3_IRQHandler>

0800917a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009184:	2003      	movs	r0, #3
 8009186:	f001 ff62 	bl	800b04e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800918a:	200f      	movs	r0, #15
 800918c:	f7ff fe5e 	bl	8008e4c <HAL_InitTick>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	71fb      	strb	r3, [r7, #7]
 800919a:	e001      	b.n	80091a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800919c:	f7ff f9ba 	bl	8008514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80091a0:	79fb      	ldrb	r3, [r7, #7]

}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80091b0:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <HAL_IncTick+0x1c>)
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <HAL_IncTick+0x20>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4413      	add	r3, r2
 80091ba:	4a03      	ldr	r2, [pc, #12]	; (80091c8 <HAL_IncTick+0x1c>)
 80091bc:	6013      	str	r3, [r2, #0]
}
 80091be:	bf00      	nop
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	20001634 	.word	0x20001634
 80091cc:	20000010 	.word	0x20000010

080091d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
  return uwTick;
 80091d4:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <HAL_GetTick+0x14>)
 80091d6:	681b      	ldr	r3, [r3, #0]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20001634 	.word	0x20001634

080091e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80091f0:	f7ff ffee 	bl	80091d0 <HAL_GetTick>
 80091f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009200:	d004      	beq.n	800920c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009202:	4b09      	ldr	r3, [pc, #36]	; (8009228 <HAL_Delay+0x40>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	4413      	add	r3, r2
 800920a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800920c:	bf00      	nop
 800920e:	f7ff ffdf 	bl	80091d0 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	429a      	cmp	r2, r3
 800921c:	d8f7      	bhi.n	800920e <HAL_Delay+0x26>
  {
  }
}
 800921e:	bf00      	nop
 8009220:	bf00      	nop
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20000010 	.word	0x20000010

0800922c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8009234:	4b06      	ldr	r3, [pc, #24]	; (8009250 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800923c:	4904      	ldr	r1, [pc, #16]	; (8009250 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4313      	orrs	r3, r2
 8009242:	600b      	str	r3, [r1, #0]
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	40010030 	.word	0x40010030

08009254 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800925c:	4b06      	ldr	r3, [pc, #24]	; (8009278 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f023 0202 	bic.w	r2, r3, #2
 8009264:	4904      	ldr	r1, [pc, #16]	; (8009278 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4313      	orrs	r3, r2
 800926a:	600b      	str	r3, [r1, #0]
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	40010030 	.word	0x40010030

0800927c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8009282:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a0e      	ldr	r2, [pc, #56]	; (80092c0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8009288:	f043 0301 	orr.w	r3, r3, #1
 800928c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800928e:	f7ff ff9f 	bl	80091d0 <HAL_GetTick>
 8009292:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8009294:	e008      	b.n	80092a8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8009296:	f7ff ff9b 	bl	80091d0 <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b0a      	cmp	r3, #10
 80092a2:	d901      	bls.n	80092a8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e006      	b.n	80092b6 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0308 	and.w	r3, r3, #8
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0f0      	beq.n	8009296 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	40010030 	.word	0x40010030

080092c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	609a      	str	r2, [r3, #8]
}
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	431a      	orrs	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	609a      	str	r2, [r3, #8]
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3360      	adds	r3, #96	; 0x60
 800933e:	461a      	mov	r2, r3
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	4b08      	ldr	r3, [pc, #32]	; (8009370 <LL_ADC_SetOffset+0x44>)
 800934e:	4013      	ands	r3, r2
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	4313      	orrs	r3, r2
 800935c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009364:	bf00      	nop
 8009366:	371c      	adds	r7, #28
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	03fff000 	.word	0x03fff000

08009374 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3360      	adds	r3, #96	; 0x60
 8009382:	461a      	mov	r2, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3360      	adds	r3, #96	; 0x60
 80093b0:	461a      	mov	r2, r3
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	431a      	orrs	r2, r3
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80093ca:	bf00      	nop
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b087      	sub	sp, #28
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3360      	adds	r3, #96	; 0x60
 80093e6:	461a      	mov	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	431a      	orrs	r2, r3
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009400:	bf00      	nop
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3360      	adds	r3, #96	; 0x60
 800941c:	461a      	mov	r2, r3
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	431a      	orrs	r2, r3
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8009436:	bf00      	nop
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	615a      	str	r2, [r3, #20]
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800947c:	2301      	movs	r3, #1
 800947e:	e000      	b.n	8009482 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800948e:	b480      	push	{r7}
 8009490:	b087      	sub	sp, #28
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3330      	adds	r3, #48	; 0x30
 800949e:	461a      	mov	r2, r3
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	0a1b      	lsrs	r3, r3, #8
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	f003 030c 	and.w	r3, r3, #12
 80094aa:	4413      	add	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	f003 031f 	and.w	r3, r3, #31
 80094b8:	211f      	movs	r1, #31
 80094ba:	fa01 f303 	lsl.w	r3, r1, r3
 80094be:	43db      	mvns	r3, r3
 80094c0:	401a      	ands	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	0e9b      	lsrs	r3, r3, #26
 80094c6:	f003 011f 	and.w	r1, r3, #31
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f003 031f 	and.w	r3, r3, #31
 80094d0:	fa01 f303 	lsl.w	r3, r1, r3
 80094d4:	431a      	orrs	r2, r3
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80094da:	bf00      	nop
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3314      	adds	r3, #20
 800951c:	461a      	mov	r2, r3
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	0e5b      	lsrs	r3, r3, #25
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	4413      	add	r3, r2
 800952a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	0d1b      	lsrs	r3, r3, #20
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	2107      	movs	r1, #7
 800953a:	fa01 f303 	lsl.w	r3, r1, r3
 800953e:	43db      	mvns	r3, r3
 8009540:	401a      	ands	r2, r3
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	0d1b      	lsrs	r3, r3, #20
 8009546:	f003 031f 	and.w	r3, r3, #31
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	fa01 f303 	lsl.w	r3, r1, r3
 8009550:	431a      	orrs	r2, r3
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009556:	bf00      	nop
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800957c:	43db      	mvns	r3, r3
 800957e:	401a      	ands	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f003 0318 	and.w	r3, r3, #24
 8009586:	4908      	ldr	r1, [pc, #32]	; (80095a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009588:	40d9      	lsrs	r1, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	400b      	ands	r3, r1
 800958e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009592:	431a      	orrs	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800959a:	bf00      	nop
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	0007ffff 	.word	0x0007ffff

080095ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f003 031f 	and.w	r3, r3, #31
}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80095f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	6093      	str	r3, [r2, #8]
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800961c:	d101      	bne.n	8009622 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800961e:	2301      	movs	r3, #1
 8009620:	e000      	b.n	8009624 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8009640:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009644:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800966c:	d101      	bne.n	8009672 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800966e:	2301      	movs	r3, #1
 8009670:	e000      	b.n	8009674 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009690:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009694:	f043 0201 	orr.w	r2, r3, #1
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d101      	bne.n	80096c0 <LL_ADC_IsEnabled+0x18>
 80096bc:	2301      	movs	r3, #1
 80096be:	e000      	b.n	80096c2 <LL_ADC_IsEnabled+0x1a>
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b083      	sub	sp, #12
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80096e2:	f043 0204 	orr.w	r2, r3, #4
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80096ea:	bf00      	nop
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b083      	sub	sp, #12
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 0304 	and.w	r3, r3, #4
 8009706:	2b04      	cmp	r3, #4
 8009708:	d101      	bne.n	800970e <LL_ADC_REG_IsConversionOngoing+0x18>
 800970a:	2301      	movs	r3, #1
 800970c:	e000      	b.n	8009710 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f003 0308 	and.w	r3, r3, #8
 800972c:	2b08      	cmp	r3, #8
 800972e:	d101      	bne.n	8009734 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009744:	b590      	push	{r4, r7, lr}
 8009746:	b089      	sub	sp, #36	; 0x24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e1a9      	b.n	8009ab2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7fe ff03 	bl	8008578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff ff3f 	bl	8009608 <LL_ADC_IsDeepPowerDownEnabled>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d004      	beq.n	800979a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4618      	mov	r0, r3
 8009796:	f7ff ff25 	bl	80095e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff ff5a 	bl	8009658 <LL_ADC_IsInternalRegulatorEnabled>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d115      	bne.n	80097d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff ff3e 	bl	8009630 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80097b4:	4b9c      	ldr	r3, [pc, #624]	; (8009a28 <HAL_ADC_Init+0x2e4>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	099b      	lsrs	r3, r3, #6
 80097ba:	4a9c      	ldr	r2, [pc, #624]	; (8009a2c <HAL_ADC_Init+0x2e8>)
 80097bc:	fba2 2303 	umull	r2, r3, r2, r3
 80097c0:	099b      	lsrs	r3, r3, #6
 80097c2:	3301      	adds	r3, #1
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80097c8:	e002      	b.n	80097d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1f9      	bne.n	80097ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff ff3c 	bl	8009658 <LL_ADC_IsInternalRegulatorEnabled>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10d      	bne.n	8009802 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ea:	f043 0210 	orr.w	r2, r3, #16
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f6:	f043 0201 	orr.w	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4618      	mov	r0, r3
 8009808:	f7ff ff75 	bl	80096f6 <LL_ADC_REG_IsConversionOngoing>
 800980c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009812:	f003 0310 	and.w	r3, r3, #16
 8009816:	2b00      	cmp	r3, #0
 8009818:	f040 8142 	bne.w	8009aa0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f040 813e 	bne.w	8009aa0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009828:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800982c:	f043 0202 	orr.w	r2, r3, #2
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4618      	mov	r0, r3
 800983a:	f7ff ff35 	bl	80096a8 <LL_ADC_IsEnabled>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d141      	bne.n	80098c8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800984c:	d004      	beq.n	8009858 <HAL_ADC_Init+0x114>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a77      	ldr	r2, [pc, #476]	; (8009a30 <HAL_ADC_Init+0x2ec>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d10f      	bne.n	8009878 <HAL_ADC_Init+0x134>
 8009858:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800985c:	f7ff ff24 	bl	80096a8 <LL_ADC_IsEnabled>
 8009860:	4604      	mov	r4, r0
 8009862:	4873      	ldr	r0, [pc, #460]	; (8009a30 <HAL_ADC_Init+0x2ec>)
 8009864:	f7ff ff20 	bl	80096a8 <LL_ADC_IsEnabled>
 8009868:	4603      	mov	r3, r0
 800986a:	4323      	orrs	r3, r4
 800986c:	2b00      	cmp	r3, #0
 800986e:	bf0c      	ite	eq
 8009870:	2301      	moveq	r3, #1
 8009872:	2300      	movne	r3, #0
 8009874:	b2db      	uxtb	r3, r3
 8009876:	e012      	b.n	800989e <HAL_ADC_Init+0x15a>
 8009878:	486e      	ldr	r0, [pc, #440]	; (8009a34 <HAL_ADC_Init+0x2f0>)
 800987a:	f7ff ff15 	bl	80096a8 <LL_ADC_IsEnabled>
 800987e:	4604      	mov	r4, r0
 8009880:	486d      	ldr	r0, [pc, #436]	; (8009a38 <HAL_ADC_Init+0x2f4>)
 8009882:	f7ff ff11 	bl	80096a8 <LL_ADC_IsEnabled>
 8009886:	4603      	mov	r3, r0
 8009888:	431c      	orrs	r4, r3
 800988a:	486c      	ldr	r0, [pc, #432]	; (8009a3c <HAL_ADC_Init+0x2f8>)
 800988c:	f7ff ff0c 	bl	80096a8 <LL_ADC_IsEnabled>
 8009890:	4603      	mov	r3, r0
 8009892:	4323      	orrs	r3, r4
 8009894:	2b00      	cmp	r3, #0
 8009896:	bf0c      	ite	eq
 8009898:	2301      	moveq	r3, #1
 800989a:	2300      	movne	r3, #0
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d012      	beq.n	80098c8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098aa:	d004      	beq.n	80098b6 <HAL_ADC_Init+0x172>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a5f      	ldr	r2, [pc, #380]	; (8009a30 <HAL_ADC_Init+0x2ec>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d101      	bne.n	80098ba <HAL_ADC_Init+0x176>
 80098b6:	4a62      	ldr	r2, [pc, #392]	; (8009a40 <HAL_ADC_Init+0x2fc>)
 80098b8:	e000      	b.n	80098bc <HAL_ADC_Init+0x178>
 80098ba:	4a62      	ldr	r2, [pc, #392]	; (8009a44 <HAL_ADC_Init+0x300>)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f7ff fcfe 	bl	80092c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	7f5b      	ldrb	r3, [r3, #29]
 80098cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80098d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80098d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80098de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80098e8:	4313      	orrs	r3, r2
 80098ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d106      	bne.n	8009904 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fa:	3b01      	subs	r3, #1
 80098fc:	045b      	lsls	r3, r3, #17
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	4313      	orrs	r3, r2
 8009902:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009908:	2b00      	cmp	r3, #0
 800990a:	d009      	beq.n	8009920 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009918:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	4313      	orrs	r3, r2
 800991e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	4b48      	ldr	r3, [pc, #288]	; (8009a48 <HAL_ADC_Init+0x304>)
 8009928:	4013      	ands	r3, r2
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	6812      	ldr	r2, [r2, #0]
 800992e:	69b9      	ldr	r1, [r7, #24]
 8009930:	430b      	orrs	r3, r1
 8009932:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f7ff fee4 	bl	800971c <LL_ADC_INJ_IsConversionOngoing>
 8009954:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d17f      	bne.n	8009a5c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d17c      	bne.n	8009a5c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009966:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800996e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009970:	4313      	orrs	r3, r2
 8009972:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800997e:	f023 0302 	bic.w	r3, r3, #2
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	6812      	ldr	r2, [r2, #0]
 8009986:	69b9      	ldr	r1, [r7, #24]
 8009988:	430b      	orrs	r3, r1
 800998a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d017      	beq.n	80099c4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	691a      	ldr	r2, [r3, #16]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80099a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80099ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80099b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6911      	ldr	r1, [r2, #16]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	6812      	ldr	r2, [r2, #0]
 80099bc:	430b      	orrs	r3, r1
 80099be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80099c2:	e013      	b.n	80099ec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	691a      	ldr	r2, [r3, #16]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80099d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80099e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80099e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d12a      	bne.n	8009a4c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009a00:	f023 0304 	bic.w	r3, r3, #4
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a0c:	4311      	orrs	r1, r2
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009a12:	4311      	orrs	r1, r2
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f042 0201 	orr.w	r2, r2, #1
 8009a24:	611a      	str	r2, [r3, #16]
 8009a26:	e019      	b.n	8009a5c <HAL_ADC_Init+0x318>
 8009a28:	20000008 	.word	0x20000008
 8009a2c:	053e2d63 	.word	0x053e2d63
 8009a30:	50000100 	.word	0x50000100
 8009a34:	50000400 	.word	0x50000400
 8009a38:	50000500 	.word	0x50000500
 8009a3c:	50000600 	.word	0x50000600
 8009a40:	50000300 	.word	0x50000300
 8009a44:	50000700 	.word	0x50000700
 8009a48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	691a      	ldr	r2, [r3, #16]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0201 	bic.w	r2, r2, #1
 8009a5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d10c      	bne.n	8009a7e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6a:	f023 010f 	bic.w	r1, r3, #15
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	1e5a      	subs	r2, r3, #1
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8009a7c:	e007      	b.n	8009a8e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 020f 	bic.w	r2, r2, #15
 8009a8c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a92:	f023 0303 	bic.w	r3, r3, #3
 8009a96:	f043 0201 	orr.w	r2, r3, #1
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a9e:	e007      	b.n	8009ab0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa4:	f043 0210 	orr.w	r2, r3, #16
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009ab0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3724      	adds	r7, #36	; 0x24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd90      	pop	{r4, r7, pc}
 8009aba:	bf00      	nop

08009abc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ad0:	d004      	beq.n	8009adc <HAL_ADC_Start_DMA+0x20>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a5a      	ldr	r2, [pc, #360]	; (8009c40 <HAL_ADC_Start_DMA+0x184>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d101      	bne.n	8009ae0 <HAL_ADC_Start_DMA+0x24>
 8009adc:	4b59      	ldr	r3, [pc, #356]	; (8009c44 <HAL_ADC_Start_DMA+0x188>)
 8009ade:	e000      	b.n	8009ae2 <HAL_ADC_Start_DMA+0x26>
 8009ae0:	4b59      	ldr	r3, [pc, #356]	; (8009c48 <HAL_ADC_Start_DMA+0x18c>)
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff fd62 	bl	80095ac <LL_ADC_GetMultimode>
 8009ae8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff fe01 	bl	80096f6 <LL_ADC_REG_IsConversionOngoing>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f040 809b 	bne.w	8009c32 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d101      	bne.n	8009b0a <HAL_ADC_Start_DMA+0x4e>
 8009b06:	2302      	movs	r3, #2
 8009b08:	e096      	b.n	8009c38 <HAL_ADC_Start_DMA+0x17c>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a4d      	ldr	r2, [pc, #308]	; (8009c4c <HAL_ADC_Start_DMA+0x190>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d008      	beq.n	8009b2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d005      	beq.n	8009b2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	2b05      	cmp	r3, #5
 8009b26:	d002      	beq.n	8009b2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	d17a      	bne.n	8009c24 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 ff56 	bl	800a9e0 <ADC_Enable>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d16d      	bne.n	8009c1a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b46:	f023 0301 	bic.w	r3, r3, #1
 8009b4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a3a      	ldr	r2, [pc, #232]	; (8009c40 <HAL_ADC_Start_DMA+0x184>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d009      	beq.n	8009b70 <HAL_ADC_Start_DMA+0xb4>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a3b      	ldr	r2, [pc, #236]	; (8009c50 <HAL_ADC_Start_DMA+0x194>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d002      	beq.n	8009b6c <HAL_ADC_Start_DMA+0xb0>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	e003      	b.n	8009b74 <HAL_ADC_Start_DMA+0xb8>
 8009b6c:	4b39      	ldr	r3, [pc, #228]	; (8009c54 <HAL_ADC_Start_DMA+0x198>)
 8009b6e:	e001      	b.n	8009b74 <HAL_ADC_Start_DMA+0xb8>
 8009b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	6812      	ldr	r2, [r2, #0]
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d002      	beq.n	8009b82 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d105      	bne.n	8009b8e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d006      	beq.n	8009ba8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b9e:	f023 0206 	bic.w	r2, r3, #6
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	661a      	str	r2, [r3, #96]	; 0x60
 8009ba6:	e002      	b.n	8009bae <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb2:	4a29      	ldr	r2, [pc, #164]	; (8009c58 <HAL_ADC_Start_DMA+0x19c>)
 8009bb4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bba:	4a28      	ldr	r2, [pc, #160]	; (8009c5c <HAL_ADC_Start_DMA+0x1a0>)
 8009bbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc2:	4a27      	ldr	r2, [pc, #156]	; (8009c60 <HAL_ADC_Start_DMA+0x1a4>)
 8009bc4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	221c      	movs	r2, #28
 8009bcc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f042 0210 	orr.w	r2, r2, #16
 8009be4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f042 0201 	orr.w	r2, r2, #1
 8009bf4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3340      	adds	r3, #64	; 0x40
 8009c00:	4619      	mov	r1, r3
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f001 fafd 	bl	800b204 <HAL_DMA_Start_IT>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff fd5b 	bl	80096ce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009c18:	e00d      	b.n	8009c36 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009c22:	e008      	b.n	8009c36 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009c30:	e001      	b.n	8009c36 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009c32:	2302      	movs	r3, #2
 8009c34:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	50000100 	.word	0x50000100
 8009c44:	50000300 	.word	0x50000300
 8009c48:	50000700 	.word	0x50000700
 8009c4c:	50000600 	.word	0x50000600
 8009c50:	50000500 	.word	0x50000500
 8009c54:	50000400 	.word	0x50000400
 8009c58:	0800ab0d 	.word	0x0800ab0d
 8009c5c:	0800abe5 	.word	0x0800abe5
 8009c60:	0800ac01 	.word	0x0800ac01

08009c64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08a      	sub	sp, #40	; 0x28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c88:	d004      	beq.n	8009c94 <HAL_ADC_IRQHandler+0x30>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a8e      	ldr	r2, [pc, #568]	; (8009ec8 <HAL_ADC_IRQHandler+0x264>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d101      	bne.n	8009c98 <HAL_ADC_IRQHandler+0x34>
 8009c94:	4b8d      	ldr	r3, [pc, #564]	; (8009ecc <HAL_ADC_IRQHandler+0x268>)
 8009c96:	e000      	b.n	8009c9a <HAL_ADC_IRQHandler+0x36>
 8009c98:	4b8d      	ldr	r3, [pc, #564]	; (8009ed0 <HAL_ADC_IRQHandler+0x26c>)
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff fc86 	bl	80095ac <LL_ADC_GetMultimode>
 8009ca0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d017      	beq.n	8009cdc <HAL_ADC_IRQHandler+0x78>
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d012      	beq.n	8009cdc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cba:	f003 0310 	and.w	r3, r3, #16
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d105      	bne.n	8009cce <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cc6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fffe 	bl	800acd0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2202      	movs	r2, #2
 8009cda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	f003 0304 	and.w	r3, r3, #4
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d004      	beq.n	8009cf0 <HAL_ADC_IRQHandler+0x8c>
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10b      	bne.n	8009d08 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 8094 	beq.w	8009e24 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	f003 0308 	and.w	r3, r3, #8
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 808e 	beq.w	8009e24 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d105      	bne.n	8009d20 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff fb9f 	bl	8009468 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d072      	beq.n	8009e16 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a64      	ldr	r2, [pc, #400]	; (8009ec8 <HAL_ADC_IRQHandler+0x264>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d009      	beq.n	8009d4e <HAL_ADC_IRQHandler+0xea>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a65      	ldr	r2, [pc, #404]	; (8009ed4 <HAL_ADC_IRQHandler+0x270>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d002      	beq.n	8009d4a <HAL_ADC_IRQHandler+0xe6>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	e003      	b.n	8009d52 <HAL_ADC_IRQHandler+0xee>
 8009d4a:	4b63      	ldr	r3, [pc, #396]	; (8009ed8 <HAL_ADC_IRQHandler+0x274>)
 8009d4c:	e001      	b.n	8009d52 <HAL_ADC_IRQHandler+0xee>
 8009d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6812      	ldr	r2, [r2, #0]
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d008      	beq.n	8009d6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d005      	beq.n	8009d6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	2b05      	cmp	r3, #5
 8009d64:	d002      	beq.n	8009d6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b09      	cmp	r3, #9
 8009d6a:	d104      	bne.n	8009d76 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	623b      	str	r3, [r7, #32]
 8009d74:	e014      	b.n	8009da0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a53      	ldr	r2, [pc, #332]	; (8009ec8 <HAL_ADC_IRQHandler+0x264>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d009      	beq.n	8009d94 <HAL_ADC_IRQHandler+0x130>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a53      	ldr	r2, [pc, #332]	; (8009ed4 <HAL_ADC_IRQHandler+0x270>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d002      	beq.n	8009d90 <HAL_ADC_IRQHandler+0x12c>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	e003      	b.n	8009d98 <HAL_ADC_IRQHandler+0x134>
 8009d90:	4b51      	ldr	r3, [pc, #324]	; (8009ed8 <HAL_ADC_IRQHandler+0x274>)
 8009d92:	e001      	b.n	8009d98 <HAL_ADC_IRQHandler+0x134>
 8009d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009d98:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d135      	bne.n	8009e16 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d12e      	bne.n	8009e16 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff fc9a 	bl	80096f6 <LL_ADC_REG_IsConversionOngoing>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11a      	bne.n	8009dfe <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 020c 	bic.w	r2, r2, #12
 8009dd6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d112      	bne.n	8009e16 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df4:	f043 0201 	orr.w	r2, r3, #1
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8009dfc:	e00b      	b.n	8009e16 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e02:	f043 0210 	orr.w	r2, r3, #16
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e0e:	f043 0201 	orr.w	r2, r3, #1
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7fd fdfe 	bl	8007a18 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	220c      	movs	r2, #12
 8009e22:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	f003 0320 	and.w	r3, r3, #32
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d004      	beq.n	8009e38 <HAL_ADC_IRQHandler+0x1d4>
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	f003 0320 	and.w	r3, r3, #32
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10b      	bne.n	8009e50 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 80b3 	beq.w	8009faa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f000 80ad 	beq.w	8009faa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e54:	f003 0310 	and.w	r3, r3, #16
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff fb3a 	bl	80094e6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009e72:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff faf5 	bl	8009468 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009e7e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a10      	ldr	r2, [pc, #64]	; (8009ec8 <HAL_ADC_IRQHandler+0x264>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d009      	beq.n	8009e9e <HAL_ADC_IRQHandler+0x23a>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a11      	ldr	r2, [pc, #68]	; (8009ed4 <HAL_ADC_IRQHandler+0x270>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d002      	beq.n	8009e9a <HAL_ADC_IRQHandler+0x236>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	e003      	b.n	8009ea2 <HAL_ADC_IRQHandler+0x23e>
 8009e9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ed8 <HAL_ADC_IRQHandler+0x274>)
 8009e9c:	e001      	b.n	8009ea2 <HAL_ADC_IRQHandler+0x23e>
 8009e9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6812      	ldr	r2, [r2, #0]
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d008      	beq.n	8009ebc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d005      	beq.n	8009ebc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2b06      	cmp	r3, #6
 8009eb4:	d002      	beq.n	8009ebc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b07      	cmp	r3, #7
 8009eba:	d10f      	bne.n	8009edc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	623b      	str	r3, [r7, #32]
 8009ec4:	e01f      	b.n	8009f06 <HAL_ADC_IRQHandler+0x2a2>
 8009ec6:	bf00      	nop
 8009ec8:	50000100 	.word	0x50000100
 8009ecc:	50000300 	.word	0x50000300
 8009ed0:	50000700 	.word	0x50000700
 8009ed4:	50000500 	.word	0x50000500
 8009ed8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a8b      	ldr	r2, [pc, #556]	; (800a110 <HAL_ADC_IRQHandler+0x4ac>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d009      	beq.n	8009efa <HAL_ADC_IRQHandler+0x296>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a8a      	ldr	r2, [pc, #552]	; (800a114 <HAL_ADC_IRQHandler+0x4b0>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d002      	beq.n	8009ef6 <HAL_ADC_IRQHandler+0x292>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	e003      	b.n	8009efe <HAL_ADC_IRQHandler+0x29a>
 8009ef6:	4b88      	ldr	r3, [pc, #544]	; (800a118 <HAL_ADC_IRQHandler+0x4b4>)
 8009ef8:	e001      	b.n	8009efe <HAL_ADC_IRQHandler+0x29a>
 8009efa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009efe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d047      	beq.n	8009f9c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d007      	beq.n	8009f26 <HAL_ADC_IRQHandler+0x2c2>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d03f      	beq.n	8009f9c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d13a      	bne.n	8009f9c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f30:	2b40      	cmp	r3, #64	; 0x40
 8009f32:	d133      	bne.n	8009f9c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d12e      	bne.n	8009f9c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7ff fbea 	bl	800971c <LL_ADC_INJ_IsConversionOngoing>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d11a      	bne.n	8009f84 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009f5c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d112      	bne.n	8009f9c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f7a:	f043 0201 	orr.w	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f82:	e00b      	b.n	8009f9c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f88:	f043 0210 	orr.w	r2, r3, #16
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f94:	f043 0201 	orr.w	r2, r3, #1
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fe6f 	bl	800ac80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2260      	movs	r2, #96	; 0x60
 8009fa8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d011      	beq.n	8009fd8 <HAL_ADC_IRQHandler+0x374>
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00c      	beq.n	8009fd8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f8b4 	bl	800a138 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2280      	movs	r2, #128	; 0x80
 8009fd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d012      	beq.n	800a008 <HAL_ADC_IRQHandler+0x3a4>
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00d      	beq.n	800a008 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fe55 	bl	800aca8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a006:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d012      	beq.n	800a038 <HAL_ADC_IRQHandler+0x3d4>
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00d      	beq.n	800a038 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a020:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fe47 	bl	800acbc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a036:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	f003 0310 	and.w	r3, r3, #16
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d043      	beq.n	800a0ca <HAL_ADC_IRQHandler+0x466>
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	f003 0310 	and.w	r3, r3, #16
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d03e      	beq.n	800a0ca <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800a054:	2301      	movs	r3, #1
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
 800a058:	e021      	b.n	800a09e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d015      	beq.n	800a08c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a068:	d004      	beq.n	800a074 <HAL_ADC_IRQHandler+0x410>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a28      	ldr	r2, [pc, #160]	; (800a110 <HAL_ADC_IRQHandler+0x4ac>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d101      	bne.n	800a078 <HAL_ADC_IRQHandler+0x414>
 800a074:	4b29      	ldr	r3, [pc, #164]	; (800a11c <HAL_ADC_IRQHandler+0x4b8>)
 800a076:	e000      	b.n	800a07a <HAL_ADC_IRQHandler+0x416>
 800a078:	4b29      	ldr	r3, [pc, #164]	; (800a120 <HAL_ADC_IRQHandler+0x4bc>)
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7ff faa4 	bl	80095c8 <LL_ADC_GetMultiDMATransfer>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00b      	beq.n	800a09e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800a086:	2301      	movs	r3, #1
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
 800a08a:	e008      	b.n	800a09e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800a09a:	2301      	movs	r3, #1
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d10e      	bne.n	800a0c2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0b4:	f043 0202 	orr.w	r2, r3, #2
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 f845 	bl	800a14c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2210      	movs	r2, #16
 800a0c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d018      	beq.n	800a106 <HAL_ADC_IRQHandler+0x4a2>
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d013      	beq.n	800a106 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0ee:	f043 0208 	orr.w	r2, r3, #8
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0fe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fdc7 	bl	800ac94 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a106:	bf00      	nop
 800a108:	3728      	adds	r7, #40	; 0x28
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	50000100 	.word	0x50000100
 800a114:	50000500 	.word	0x50000500
 800a118:	50000400 	.word	0x50000400
 800a11c:	50000300 	.word	0x50000300
 800a120:	50000700 	.word	0x50000700

0800a124 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b0b6      	sub	sp, #216	; 0xd8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d102      	bne.n	800a184 <HAL_ADC_ConfigChannel+0x24>
 800a17e:	2302      	movs	r3, #2
 800a180:	f000 bc13 	b.w	800a9aa <HAL_ADC_ConfigChannel+0x84a>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff fab0 	bl	80096f6 <LL_ADC_REG_IsConversionOngoing>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f040 83f3 	bne.w	800a984 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	6859      	ldr	r1, [r3, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f7ff f96f 	bl	800948e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fa9e 	bl	80096f6 <LL_ADC_REG_IsConversionOngoing>
 800a1ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7ff faaa 	bl	800971c <LL_ADC_INJ_IsConversionOngoing>
 800a1c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a1cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f040 81d9 	bne.w	800a588 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a1d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f040 81d4 	bne.w	800a588 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1e8:	d10f      	bne.n	800a20a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	f7ff f989 	bl	800950c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff f91d 	bl	8009442 <LL_ADC_SetSamplingTimeCommonConfig>
 800a208:	e00e      	b.n	800a228 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	6819      	ldr	r1, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	461a      	mov	r2, r3
 800a218:	f7ff f978 	bl	800950c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2100      	movs	r1, #0
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff f90d 	bl	8009442 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	695a      	ldr	r2, [r3, #20]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	08db      	lsrs	r3, r3, #3
 800a234:	f003 0303 	and.w	r3, r3, #3
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	fa02 f303 	lsl.w	r3, r2, r3
 800a23e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	2b04      	cmp	r3, #4
 800a248:	d022      	beq.n	800a290 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	6919      	ldr	r1, [r3, #16]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a25a:	f7ff f867 	bl	800932c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6919      	ldr	r1, [r3, #16]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f7ff f8b3 	bl	80093d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6818      	ldr	r0, [r3, #0]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d102      	bne.n	800a286 <HAL_ADC_ConfigChannel+0x126>
 800a280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a284:	e000      	b.n	800a288 <HAL_ADC_ConfigChannel+0x128>
 800a286:	2300      	movs	r3, #0
 800a288:	461a      	mov	r2, r3
 800a28a:	f7ff f8bf 	bl	800940c <LL_ADC_SetOffsetSaturation>
 800a28e:	e17b      	b.n	800a588 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2100      	movs	r1, #0
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff f86c 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a29c:	4603      	mov	r3, r0
 800a29e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10a      	bne.n	800a2bc <HAL_ADC_ConfigChannel+0x15c>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff f861 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	0e9b      	lsrs	r3, r3, #26
 800a2b6:	f003 021f 	and.w	r2, r3, #31
 800a2ba:	e01e      	b.n	800a2fa <HAL_ADC_ConfigChannel+0x19a>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7ff f856 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a2d2:	fa93 f3a3 	rbit	r3, r3
 800a2d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a2da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a2e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800a2ea:	2320      	movs	r3, #32
 800a2ec:	e004      	b.n	800a2f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800a2ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a2f2:	fab3 f383 	clz	r3, r3
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a302:	2b00      	cmp	r3, #0
 800a304:	d105      	bne.n	800a312 <HAL_ADC_ConfigChannel+0x1b2>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	0e9b      	lsrs	r3, r3, #26
 800a30c:	f003 031f 	and.w	r3, r3, #31
 800a310:	e018      	b.n	800a344 <HAL_ADC_ConfigChannel+0x1e4>
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a31a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a31e:	fa93 f3a3 	rbit	r3, r3
 800a322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800a326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a32a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800a32e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800a336:	2320      	movs	r3, #32
 800a338:	e004      	b.n	800a344 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800a33a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a33e:	fab3 f383 	clz	r3, r3
 800a342:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a344:	429a      	cmp	r2, r3
 800a346:	d106      	bne.n	800a356 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2200      	movs	r2, #0
 800a34e:	2100      	movs	r1, #0
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff f825 	bl	80093a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2101      	movs	r1, #1
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff f809 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a362:	4603      	mov	r3, r0
 800a364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <HAL_ADC_ConfigChannel+0x222>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2101      	movs	r1, #1
 800a372:	4618      	mov	r0, r3
 800a374:	f7fe fffe 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a378:	4603      	mov	r3, r0
 800a37a:	0e9b      	lsrs	r3, r3, #26
 800a37c:	f003 021f 	and.w	r2, r3, #31
 800a380:	e01e      	b.n	800a3c0 <HAL_ADC_ConfigChannel+0x260>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2101      	movs	r1, #1
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe fff3 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a38e:	4603      	mov	r3, r0
 800a390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a398:	fa93 f3a3 	rbit	r3, r3
 800a39c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800a3a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800a3a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	e004      	b.n	800a3be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800a3b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3b8:	fab3 f383 	clz	r3, r3
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d105      	bne.n	800a3d8 <HAL_ADC_ConfigChannel+0x278>
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	0e9b      	lsrs	r3, r3, #26
 800a3d2:	f003 031f 	and.w	r3, r3, #31
 800a3d6:	e018      	b.n	800a40a <HAL_ADC_ConfigChannel+0x2aa>
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3e4:	fa93 f3a3 	rbit	r3, r3
 800a3e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800a3ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800a3f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	e004      	b.n	800a40a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800a400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a404:	fab3 f383 	clz	r3, r3
 800a408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d106      	bne.n	800a41c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2200      	movs	r2, #0
 800a414:	2101      	movs	r1, #1
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe ffc2 	bl	80093a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2102      	movs	r1, #2
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe ffa6 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a428:	4603      	mov	r3, r0
 800a42a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <HAL_ADC_ConfigChannel+0x2e8>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2102      	movs	r1, #2
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fe ff9b 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a43e:	4603      	mov	r3, r0
 800a440:	0e9b      	lsrs	r3, r3, #26
 800a442:	f003 021f 	and.w	r2, r3, #31
 800a446:	e01e      	b.n	800a486 <HAL_ADC_ConfigChannel+0x326>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2102      	movs	r1, #2
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe ff90 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a454:	4603      	mov	r3, r0
 800a456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a45a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a45e:	fa93 f3a3 	rbit	r3, r3
 800a462:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800a466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a46a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800a46e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800a476:	2320      	movs	r3, #32
 800a478:	e004      	b.n	800a484 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800a47a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a47e:	fab3 f383 	clz	r3, r3
 800a482:	b2db      	uxtb	r3, r3
 800a484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d105      	bne.n	800a49e <HAL_ADC_ConfigChannel+0x33e>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	0e9b      	lsrs	r3, r3, #26
 800a498:	f003 031f 	and.w	r3, r3, #31
 800a49c:	e016      	b.n	800a4cc <HAL_ADC_ConfigChannel+0x36c>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4aa:	fa93 f3a3 	rbit	r3, r3
 800a4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800a4b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800a4b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800a4be:	2320      	movs	r3, #32
 800a4c0:	e004      	b.n	800a4cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800a4c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4c6:	fab3 f383 	clz	r3, r3
 800a4ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d106      	bne.n	800a4de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2102      	movs	r1, #2
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fe ff61 	bl	80093a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2103      	movs	r1, #3
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe ff45 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10a      	bne.n	800a50a <HAL_ADC_ConfigChannel+0x3aa>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2103      	movs	r1, #3
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe ff3a 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a500:	4603      	mov	r3, r0
 800a502:	0e9b      	lsrs	r3, r3, #26
 800a504:	f003 021f 	and.w	r2, r3, #31
 800a508:	e017      	b.n	800a53a <HAL_ADC_ConfigChannel+0x3da>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2103      	movs	r1, #3
 800a510:	4618      	mov	r0, r3
 800a512:	f7fe ff2f 	bl	8009374 <LL_ADC_GetOffsetChannel>
 800a516:	4603      	mov	r3, r0
 800a518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a51a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a51c:	fa93 f3a3 	rbit	r3, r3
 800a520:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800a522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a524:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800a526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800a52c:	2320      	movs	r3, #32
 800a52e:	e003      	b.n	800a538 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800a530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a532:	fab3 f383 	clz	r3, r3
 800a536:	b2db      	uxtb	r3, r3
 800a538:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a542:	2b00      	cmp	r3, #0
 800a544:	d105      	bne.n	800a552 <HAL_ADC_ConfigChannel+0x3f2>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	0e9b      	lsrs	r3, r3, #26
 800a54c:	f003 031f 	and.w	r3, r3, #31
 800a550:	e011      	b.n	800a576 <HAL_ADC_ConfigChannel+0x416>
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a55a:	fa93 f3a3 	rbit	r3, r3
 800a55e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800a560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a562:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800a564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800a56a:	2320      	movs	r3, #32
 800a56c:	e003      	b.n	800a576 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800a56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a570:	fab3 f383 	clz	r3, r3
 800a574:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a576:	429a      	cmp	r2, r3
 800a578:	d106      	bne.n	800a588 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2200      	movs	r2, #0
 800a580:	2103      	movs	r1, #3
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe ff0c 	bl	80093a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7ff f88b 	bl	80096a8 <LL_ADC_IsEnabled>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	f040 813d 	bne.w	800a814 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	6819      	ldr	r1, [r3, #0]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f7fe ffdc 	bl	8009564 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	4aa2      	ldr	r2, [pc, #648]	; (800a83c <HAL_ADC_ConfigChannel+0x6dc>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	f040 812e 	bne.w	800a814 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10b      	bne.n	800a5e0 <HAL_ADC_ConfigChannel+0x480>
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	0e9b      	lsrs	r3, r3, #26
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	f003 031f 	and.w	r3, r3, #31
 800a5d4:	2b09      	cmp	r3, #9
 800a5d6:	bf94      	ite	ls
 800a5d8:	2301      	movls	r3, #1
 800a5da:	2300      	movhi	r3, #0
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	e019      	b.n	800a614 <HAL_ADC_ConfigChannel+0x4b4>
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5e8:	fa93 f3a3 	rbit	r3, r3
 800a5ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800a5ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800a5f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800a5f8:	2320      	movs	r3, #32
 800a5fa:	e003      	b.n	800a604 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800a5fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5fe:	fab3 f383 	clz	r3, r3
 800a602:	b2db      	uxtb	r3, r3
 800a604:	3301      	adds	r3, #1
 800a606:	f003 031f 	and.w	r3, r3, #31
 800a60a:	2b09      	cmp	r3, #9
 800a60c:	bf94      	ite	ls
 800a60e:	2301      	movls	r3, #1
 800a610:	2300      	movhi	r3, #0
 800a612:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a614:	2b00      	cmp	r3, #0
 800a616:	d079      	beq.n	800a70c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a620:	2b00      	cmp	r3, #0
 800a622:	d107      	bne.n	800a634 <HAL_ADC_ConfigChannel+0x4d4>
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	0e9b      	lsrs	r3, r3, #26
 800a62a:	3301      	adds	r3, #1
 800a62c:	069b      	lsls	r3, r3, #26
 800a62e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a632:	e015      	b.n	800a660 <HAL_ADC_ConfigChannel+0x500>
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a63a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a63c:	fa93 f3a3 	rbit	r3, r3
 800a640:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a644:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800a646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800a64c:	2320      	movs	r3, #32
 800a64e:	e003      	b.n	800a658 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800a650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a652:	fab3 f383 	clz	r3, r3
 800a656:	b2db      	uxtb	r3, r3
 800a658:	3301      	adds	r3, #1
 800a65a:	069b      	lsls	r3, r3, #26
 800a65c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d109      	bne.n	800a680 <HAL_ADC_ConfigChannel+0x520>
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	0e9b      	lsrs	r3, r3, #26
 800a672:	3301      	adds	r3, #1
 800a674:	f003 031f 	and.w	r3, r3, #31
 800a678:	2101      	movs	r1, #1
 800a67a:	fa01 f303 	lsl.w	r3, r1, r3
 800a67e:	e017      	b.n	800a6b0 <HAL_ADC_ConfigChannel+0x550>
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a688:	fa93 f3a3 	rbit	r3, r3
 800a68c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800a68e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a690:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800a692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800a698:	2320      	movs	r3, #32
 800a69a:	e003      	b.n	800a6a4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800a69c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a69e:	fab3 f383 	clz	r3, r3
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	f003 031f 	and.w	r3, r3, #31
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b0:	ea42 0103 	orr.w	r1, r2, r3
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10a      	bne.n	800a6d6 <HAL_ADC_ConfigChannel+0x576>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	0e9b      	lsrs	r3, r3, #26
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	f003 021f 	and.w	r2, r3, #31
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	005b      	lsls	r3, r3, #1
 800a6d0:	4413      	add	r3, r2
 800a6d2:	051b      	lsls	r3, r3, #20
 800a6d4:	e018      	b.n	800a708 <HAL_ADC_ConfigChannel+0x5a8>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6de:	fa93 f3a3 	rbit	r3, r3
 800a6e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800a6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	e003      	b.n	800a6fa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800a6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f4:	fab3 f383 	clz	r3, r3
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	f003 021f 	and.w	r2, r3, #31
 800a700:	4613      	mov	r3, r2
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	4413      	add	r3, r2
 800a706:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a708:	430b      	orrs	r3, r1
 800a70a:	e07e      	b.n	800a80a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a714:	2b00      	cmp	r3, #0
 800a716:	d107      	bne.n	800a728 <HAL_ADC_ConfigChannel+0x5c8>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	0e9b      	lsrs	r3, r3, #26
 800a71e:	3301      	adds	r3, #1
 800a720:	069b      	lsls	r3, r3, #26
 800a722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a726:	e015      	b.n	800a754 <HAL_ADC_ConfigChannel+0x5f4>
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	fa93 f3a3 	rbit	r3, r3
 800a734:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800a740:	2320      	movs	r3, #32
 800a742:	e003      	b.n	800a74c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	fab3 f383 	clz	r3, r3
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	3301      	adds	r3, #1
 800a74e:	069b      	lsls	r3, r3, #26
 800a750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d109      	bne.n	800a774 <HAL_ADC_ConfigChannel+0x614>
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	0e9b      	lsrs	r3, r3, #26
 800a766:	3301      	adds	r3, #1
 800a768:	f003 031f 	and.w	r3, r3, #31
 800a76c:	2101      	movs	r1, #1
 800a76e:	fa01 f303 	lsl.w	r3, r1, r3
 800a772:	e017      	b.n	800a7a4 <HAL_ADC_ConfigChannel+0x644>
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	fa93 f3a3 	rbit	r3, r3
 800a780:	61fb      	str	r3, [r7, #28]
  return result;
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800a78c:	2320      	movs	r3, #32
 800a78e:	e003      	b.n	800a798 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	fab3 f383 	clz	r3, r3
 800a796:	b2db      	uxtb	r3, r3
 800a798:	3301      	adds	r3, #1
 800a79a:	f003 031f 	and.w	r3, r3, #31
 800a79e:	2101      	movs	r1, #1
 800a7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a4:	ea42 0103 	orr.w	r1, r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10d      	bne.n	800a7d0 <HAL_ADC_ConfigChannel+0x670>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	0e9b      	lsrs	r3, r3, #26
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	f003 021f 	and.w	r2, r3, #31
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	4413      	add	r3, r2
 800a7c6:	3b1e      	subs	r3, #30
 800a7c8:	051b      	lsls	r3, r3, #20
 800a7ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a7ce:	e01b      	b.n	800a808 <HAL_ADC_ConfigChannel+0x6a8>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	fa93 f3a3 	rbit	r3, r3
 800a7dc:	613b      	str	r3, [r7, #16]
  return result;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800a7e8:	2320      	movs	r3, #32
 800a7ea:	e003      	b.n	800a7f4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	fab3 f383 	clz	r3, r3
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	f003 021f 	and.w	r2, r3, #31
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	4413      	add	r3, r2
 800a800:	3b1e      	subs	r3, #30
 800a802:	051b      	lsls	r3, r3, #20
 800a804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a808:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a80e:	4619      	mov	r1, r3
 800a810:	f7fe fe7c 	bl	800950c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4b09      	ldr	r3, [pc, #36]	; (800a840 <HAL_ADC_ConfigChannel+0x6e0>)
 800a81a:	4013      	ands	r3, r2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 80be 	beq.w	800a99e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a82a:	d004      	beq.n	800a836 <HAL_ADC_ConfigChannel+0x6d6>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a04      	ldr	r2, [pc, #16]	; (800a844 <HAL_ADC_ConfigChannel+0x6e4>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d10a      	bne.n	800a84c <HAL_ADC_ConfigChannel+0x6ec>
 800a836:	4b04      	ldr	r3, [pc, #16]	; (800a848 <HAL_ADC_ConfigChannel+0x6e8>)
 800a838:	e009      	b.n	800a84e <HAL_ADC_ConfigChannel+0x6ee>
 800a83a:	bf00      	nop
 800a83c:	407f0000 	.word	0x407f0000
 800a840:	80080000 	.word	0x80080000
 800a844:	50000100 	.word	0x50000100
 800a848:	50000300 	.word	0x50000300
 800a84c:	4b59      	ldr	r3, [pc, #356]	; (800a9b4 <HAL_ADC_ConfigChannel+0x854>)
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fd5e 	bl	8009310 <LL_ADC_GetCommonPathInternalCh>
 800a854:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a56      	ldr	r2, [pc, #344]	; (800a9b8 <HAL_ADC_ConfigChannel+0x858>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d004      	beq.n	800a86c <HAL_ADC_ConfigChannel+0x70c>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a55      	ldr	r2, [pc, #340]	; (800a9bc <HAL_ADC_ConfigChannel+0x85c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d13a      	bne.n	800a8e2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a86c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d134      	bne.n	800a8e2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a880:	d005      	beq.n	800a88e <HAL_ADC_ConfigChannel+0x72e>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a4e      	ldr	r2, [pc, #312]	; (800a9c0 <HAL_ADC_ConfigChannel+0x860>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	f040 8085 	bne.w	800a998 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a896:	d004      	beq.n	800a8a2 <HAL_ADC_ConfigChannel+0x742>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a49      	ldr	r2, [pc, #292]	; (800a9c4 <HAL_ADC_ConfigChannel+0x864>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d101      	bne.n	800a8a6 <HAL_ADC_ConfigChannel+0x746>
 800a8a2:	4a49      	ldr	r2, [pc, #292]	; (800a9c8 <HAL_ADC_ConfigChannel+0x868>)
 800a8a4:	e000      	b.n	800a8a8 <HAL_ADC_ConfigChannel+0x748>
 800a8a6:	4a43      	ldr	r2, [pc, #268]	; (800a9b4 <HAL_ADC_ConfigChannel+0x854>)
 800a8a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a8ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	f7fe fd19 	bl	80092ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a8b8:	4b44      	ldr	r3, [pc, #272]	; (800a9cc <HAL_ADC_ConfigChannel+0x86c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	099b      	lsrs	r3, r3, #6
 800a8be:	4a44      	ldr	r2, [pc, #272]	; (800a9d0 <HAL_ADC_ConfigChannel+0x870>)
 800a8c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c4:	099b      	lsrs	r3, r3, #6
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	005b      	lsls	r3, r3, #1
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a8d2:	e002      	b.n	800a8da <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1f9      	bne.n	800a8d4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a8e0:	e05a      	b.n	800a998 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a3b      	ldr	r2, [pc, #236]	; (800a9d4 <HAL_ADC_ConfigChannel+0x874>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d125      	bne.n	800a938 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a8ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a8f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d11f      	bne.n	800a938 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a31      	ldr	r2, [pc, #196]	; (800a9c4 <HAL_ADC_ConfigChannel+0x864>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d104      	bne.n	800a90c <HAL_ADC_ConfigChannel+0x7ac>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a34      	ldr	r2, [pc, #208]	; (800a9d8 <HAL_ADC_ConfigChannel+0x878>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d047      	beq.n	800a99c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a914:	d004      	beq.n	800a920 <HAL_ADC_ConfigChannel+0x7c0>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a2a      	ldr	r2, [pc, #168]	; (800a9c4 <HAL_ADC_ConfigChannel+0x864>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d101      	bne.n	800a924 <HAL_ADC_ConfigChannel+0x7c4>
 800a920:	4a29      	ldr	r2, [pc, #164]	; (800a9c8 <HAL_ADC_ConfigChannel+0x868>)
 800a922:	e000      	b.n	800a926 <HAL_ADC_ConfigChannel+0x7c6>
 800a924:	4a23      	ldr	r2, [pc, #140]	; (800a9b4 <HAL_ADC_ConfigChannel+0x854>)
 800a926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a92a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f7fe fcda 	bl	80092ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a936:	e031      	b.n	800a99c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a27      	ldr	r2, [pc, #156]	; (800a9dc <HAL_ADC_ConfigChannel+0x87c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d12d      	bne.n	800a99e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d127      	bne.n	800a99e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a1c      	ldr	r2, [pc, #112]	; (800a9c4 <HAL_ADC_ConfigChannel+0x864>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d022      	beq.n	800a99e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a960:	d004      	beq.n	800a96c <HAL_ADC_ConfigChannel+0x80c>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a17      	ldr	r2, [pc, #92]	; (800a9c4 <HAL_ADC_ConfigChannel+0x864>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d101      	bne.n	800a970 <HAL_ADC_ConfigChannel+0x810>
 800a96c:	4a16      	ldr	r2, [pc, #88]	; (800a9c8 <HAL_ADC_ConfigChannel+0x868>)
 800a96e:	e000      	b.n	800a972 <HAL_ADC_ConfigChannel+0x812>
 800a970:	4a10      	ldr	r2, [pc, #64]	; (800a9b4 <HAL_ADC_ConfigChannel+0x854>)
 800a972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a976:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f7fe fcb4 	bl	80092ea <LL_ADC_SetCommonPathInternalCh>
 800a982:	e00c      	b.n	800a99e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a988:	f043 0220 	orr.w	r2, r3, #32
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800a996:	e002      	b.n	800a99e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a998:	bf00      	nop
 800a99a:	e000      	b.n	800a99e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a99c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a9a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	37d8      	adds	r7, #216	; 0xd8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	50000700 	.word	0x50000700
 800a9b8:	c3210000 	.word	0xc3210000
 800a9bc:	90c00010 	.word	0x90c00010
 800a9c0:	50000600 	.word	0x50000600
 800a9c4:	50000100 	.word	0x50000100
 800a9c8:	50000300 	.word	0x50000300
 800a9cc:	20000008 	.word	0x20000008
 800a9d0:	053e2d63 	.word	0x053e2d63
 800a9d4:	c7520000 	.word	0xc7520000
 800a9d8:	50000500 	.word	0x50000500
 800a9dc:	cb840000 	.word	0xcb840000

0800a9e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe fe59 	bl	80096a8 <LL_ADC_IsEnabled>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d176      	bne.n	800aaea <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689a      	ldr	r2, [r3, #8]
 800aa02:	4b3c      	ldr	r3, [pc, #240]	; (800aaf4 <ADC_Enable+0x114>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00d      	beq.n	800aa26 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa0e:	f043 0210 	orr.w	r2, r3, #16
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa1a:	f043 0201 	orr.w	r2, r3, #1
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e062      	b.n	800aaec <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe fe28 	bl	8009680 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa38:	d004      	beq.n	800aa44 <ADC_Enable+0x64>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a2e      	ldr	r2, [pc, #184]	; (800aaf8 <ADC_Enable+0x118>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d101      	bne.n	800aa48 <ADC_Enable+0x68>
 800aa44:	4b2d      	ldr	r3, [pc, #180]	; (800aafc <ADC_Enable+0x11c>)
 800aa46:	e000      	b.n	800aa4a <ADC_Enable+0x6a>
 800aa48:	4b2d      	ldr	r3, [pc, #180]	; (800ab00 <ADC_Enable+0x120>)
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fc60 	bl	8009310 <LL_ADC_GetCommonPathInternalCh>
 800aa50:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800aa52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d013      	beq.n	800aa82 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aa5a:	4b2a      	ldr	r3, [pc, #168]	; (800ab04 <ADC_Enable+0x124>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	099b      	lsrs	r3, r3, #6
 800aa60:	4a29      	ldr	r2, [pc, #164]	; (800ab08 <ADC_Enable+0x128>)
 800aa62:	fba2 2303 	umull	r2, r3, r2, r3
 800aa66:	099b      	lsrs	r3, r3, #6
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	4413      	add	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800aa74:	e002      	b.n	800aa7c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1f9      	bne.n	800aa76 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800aa82:	f7fe fba5 	bl	80091d0 <HAL_GetTick>
 800aa86:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aa88:	e028      	b.n	800aadc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe fe0a 	bl	80096a8 <LL_ADC_IsEnabled>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d104      	bne.n	800aaa4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fdee 	bl	8009680 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800aaa4:	f7fe fb94 	bl	80091d0 <HAL_GetTick>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d914      	bls.n	800aadc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d00d      	beq.n	800aadc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac4:	f043 0210 	orr.w	r2, r3, #16
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aad0:	f043 0201 	orr.w	r2, r3, #1
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e007      	b.n	800aaec <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d1cf      	bne.n	800aa8a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	8000003f 	.word	0x8000003f
 800aaf8:	50000100 	.word	0x50000100
 800aafc:	50000300 	.word	0x50000300
 800ab00:	50000700 	.word	0x50000700
 800ab04:	20000008 	.word	0x20000008
 800ab08:	053e2d63 	.word	0x053e2d63

0800ab0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d14b      	bne.n	800abbe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0308 	and.w	r3, r3, #8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d021      	beq.n	800ab84 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe fc8f 	bl	8009468 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d032      	beq.n	800abb6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d12b      	bne.n	800abb6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d11f      	bne.n	800abb6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab7a:	f043 0201 	orr.w	r2, r3, #1
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab82:	e018      	b.n	800abb6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	f003 0302 	and.w	r3, r3, #2
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d111      	bne.n	800abb6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d105      	bne.n	800abb6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abae:	f043 0201 	orr.w	r2, r3, #1
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f7fc ff2e 	bl	8007a18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800abbc:	e00e      	b.n	800abdc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abc2:	f003 0310 	and.w	r3, r3, #16
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f7ff fabe 	bl	800a14c <HAL_ADC_ErrorCallback>
}
 800abd0:	e004      	b.n	800abdc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	4798      	blx	r3
}
 800abdc:	bf00      	nop
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7ff fa96 	bl	800a124 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800abf8:	bf00      	nop
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac1e:	f043 0204 	orr.w	r2, r3, #4
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f7ff fa90 	bl	800a14c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ac2c:	bf00      	nop
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <LL_ADC_IsEnabled>:
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d101      	bne.n	800ac4c <LL_ADC_IsEnabled+0x18>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e000      	b.n	800ac4e <LL_ADC_IsEnabled+0x1a>
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <LL_ADC_REG_IsConversionOngoing>:
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f003 0304 	and.w	r3, r3, #4
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d101      	bne.n	800ac72 <LL_ADC_REG_IsConversionOngoing+0x18>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800ace4:	b590      	push	{r4, r7, lr}
 800ace6:	b0a1      	sub	sp, #132	; 0x84
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d101      	bne.n	800ad02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800acfe:	2302      	movs	r3, #2
 800ad00:	e0e7      	b.n	800aed2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800ad0e:	2300      	movs	r3, #0
 800ad10:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad1a:	d102      	bne.n	800ad22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800ad1c:	4b6f      	ldr	r3, [pc, #444]	; (800aedc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800ad1e:	60bb      	str	r3, [r7, #8]
 800ad20:	e009      	b.n	800ad36 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a6e      	ldr	r2, [pc, #440]	; (800aee0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d102      	bne.n	800ad32 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800ad2c:	4b6d      	ldr	r3, [pc, #436]	; (800aee4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800ad2e:	60bb      	str	r3, [r7, #8]
 800ad30:	e001      	b.n	800ad36 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800ad32:	2300      	movs	r3, #0
 800ad34:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10b      	bne.n	800ad54 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad40:	f043 0220 	orr.w	r2, r3, #32
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e0be      	b.n	800aed2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7ff ff7f 	bl	800ac5a <LL_ADC_REG_IsConversionOngoing>
 800ad5c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff ff79 	bl	800ac5a <LL_ADC_REG_IsConversionOngoing>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f040 80a0 	bne.w	800aeb0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800ad70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f040 809c 	bne.w	800aeb0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad80:	d004      	beq.n	800ad8c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a55      	ldr	r2, [pc, #340]	; (800aedc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d101      	bne.n	800ad90 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800ad8c:	4b56      	ldr	r3, [pc, #344]	; (800aee8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800ad8e:	e000      	b.n	800ad92 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800ad90:	4b56      	ldr	r3, [pc, #344]	; (800aeec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800ad92:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d04b      	beq.n	800ae34 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800ad9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	6859      	ldr	r1, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800adae:	035b      	lsls	r3, r3, #13
 800adb0:	430b      	orrs	r3, r1
 800adb2:	431a      	orrs	r2, r3
 800adb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adb6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adc0:	d004      	beq.n	800adcc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a45      	ldr	r2, [pc, #276]	; (800aedc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d10f      	bne.n	800adec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800adcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800add0:	f7ff ff30 	bl	800ac34 <LL_ADC_IsEnabled>
 800add4:	4604      	mov	r4, r0
 800add6:	4841      	ldr	r0, [pc, #260]	; (800aedc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800add8:	f7ff ff2c 	bl	800ac34 <LL_ADC_IsEnabled>
 800addc:	4603      	mov	r3, r0
 800adde:	4323      	orrs	r3, r4
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	bf0c      	ite	eq
 800ade4:	2301      	moveq	r3, #1
 800ade6:	2300      	movne	r3, #0
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	e012      	b.n	800ae12 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800adec:	483c      	ldr	r0, [pc, #240]	; (800aee0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800adee:	f7ff ff21 	bl	800ac34 <LL_ADC_IsEnabled>
 800adf2:	4604      	mov	r4, r0
 800adf4:	483b      	ldr	r0, [pc, #236]	; (800aee4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800adf6:	f7ff ff1d 	bl	800ac34 <LL_ADC_IsEnabled>
 800adfa:	4603      	mov	r3, r0
 800adfc:	431c      	orrs	r4, r3
 800adfe:	483c      	ldr	r0, [pc, #240]	; (800aef0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800ae00:	f7ff ff18 	bl	800ac34 <LL_ADC_IsEnabled>
 800ae04:	4603      	mov	r3, r0
 800ae06:	4323      	orrs	r3, r4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bf0c      	ite	eq
 800ae0c:	2301      	moveq	r3, #1
 800ae0e:	2300      	movne	r3, #0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d056      	beq.n	800aec4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800ae16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800ae1e:	f023 030f 	bic.w	r3, r3, #15
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	6811      	ldr	r1, [r2, #0]
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	6892      	ldr	r2, [r2, #8]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	431a      	orrs	r2, r3
 800ae2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae30:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ae32:	e047      	b.n	800aec4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800ae34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae3e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae48:	d004      	beq.n	800ae54 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a23      	ldr	r2, [pc, #140]	; (800aedc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d10f      	bne.n	800ae74 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800ae54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800ae58:	f7ff feec 	bl	800ac34 <LL_ADC_IsEnabled>
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	481f      	ldr	r0, [pc, #124]	; (800aedc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800ae60:	f7ff fee8 	bl	800ac34 <LL_ADC_IsEnabled>
 800ae64:	4603      	mov	r3, r0
 800ae66:	4323      	orrs	r3, r4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bf0c      	ite	eq
 800ae6c:	2301      	moveq	r3, #1
 800ae6e:	2300      	movne	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	e012      	b.n	800ae9a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800ae74:	481a      	ldr	r0, [pc, #104]	; (800aee0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800ae76:	f7ff fedd 	bl	800ac34 <LL_ADC_IsEnabled>
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	4819      	ldr	r0, [pc, #100]	; (800aee4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800ae7e:	f7ff fed9 	bl	800ac34 <LL_ADC_IsEnabled>
 800ae82:	4603      	mov	r3, r0
 800ae84:	431c      	orrs	r4, r3
 800ae86:	481a      	ldr	r0, [pc, #104]	; (800aef0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800ae88:	f7ff fed4 	bl	800ac34 <LL_ADC_IsEnabled>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	4323      	orrs	r3, r4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	bf0c      	ite	eq
 800ae94:	2301      	moveq	r3, #1
 800ae96:	2300      	movne	r3, #0
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d012      	beq.n	800aec4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800ae9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800aea6:	f023 030f 	bic.w	r3, r3, #15
 800aeaa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aeac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800aeae:	e009      	b.n	800aec4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeb4:	f043 0220 	orr.w	r2, r3, #32
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800aec2:	e000      	b.n	800aec6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800aec4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800aece:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3784      	adds	r7, #132	; 0x84
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd90      	pop	{r4, r7, pc}
 800aeda:	bf00      	nop
 800aedc:	50000100 	.word	0x50000100
 800aee0:	50000400 	.word	0x50000400
 800aee4:	50000500 	.word	0x50000500
 800aee8:	50000300 	.word	0x50000300
 800aeec:	50000700 	.word	0x50000700
 800aef0:	50000600 	.word	0x50000600

0800aef4 <__NVIC_SetPriorityGrouping>:
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f003 0307 	and.w	r3, r3, #7
 800af02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af04:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <__NVIC_SetPriorityGrouping+0x44>)
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800af10:	4013      	ands	r3, r2
 800af12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800af1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800af20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800af26:	4a04      	ldr	r2, [pc, #16]	; (800af38 <__NVIC_SetPriorityGrouping+0x44>)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	60d3      	str	r3, [r2, #12]
}
 800af2c:	bf00      	nop
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	e000ed00 	.word	0xe000ed00

0800af3c <__NVIC_GetPriorityGrouping>:
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800af40:	4b04      	ldr	r3, [pc, #16]	; (800af54 <__NVIC_GetPriorityGrouping+0x18>)
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	0a1b      	lsrs	r3, r3, #8
 800af46:	f003 0307 	and.w	r3, r3, #7
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	e000ed00 	.word	0xe000ed00

0800af58 <__NVIC_EnableIRQ>:
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af66:	2b00      	cmp	r3, #0
 800af68:	db0b      	blt.n	800af82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af6a:	79fb      	ldrb	r3, [r7, #7]
 800af6c:	f003 021f 	and.w	r2, r3, #31
 800af70:	4907      	ldr	r1, [pc, #28]	; (800af90 <__NVIC_EnableIRQ+0x38>)
 800af72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af76:	095b      	lsrs	r3, r3, #5
 800af78:	2001      	movs	r0, #1
 800af7a:	fa00 f202 	lsl.w	r2, r0, r2
 800af7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	e000e100 	.word	0xe000e100

0800af94 <__NVIC_SetPriority>:
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	6039      	str	r1, [r7, #0]
 800af9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	db0a      	blt.n	800afbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	490c      	ldr	r1, [pc, #48]	; (800afe0 <__NVIC_SetPriority+0x4c>)
 800afae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afb2:	0112      	lsls	r2, r2, #4
 800afb4:	b2d2      	uxtb	r2, r2
 800afb6:	440b      	add	r3, r1
 800afb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800afbc:	e00a      	b.n	800afd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	4908      	ldr	r1, [pc, #32]	; (800afe4 <__NVIC_SetPriority+0x50>)
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	f003 030f 	and.w	r3, r3, #15
 800afca:	3b04      	subs	r3, #4
 800afcc:	0112      	lsls	r2, r2, #4
 800afce:	b2d2      	uxtb	r2, r2
 800afd0:	440b      	add	r3, r1
 800afd2:	761a      	strb	r2, [r3, #24]
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	e000e100 	.word	0xe000e100
 800afe4:	e000ed00 	.word	0xe000ed00

0800afe8 <NVIC_EncodePriority>:
{
 800afe8:	b480      	push	{r7}
 800afea:	b089      	sub	sp, #36	; 0x24
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f003 0307 	and.w	r3, r3, #7
 800affa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	f1c3 0307 	rsb	r3, r3, #7
 800b002:	2b04      	cmp	r3, #4
 800b004:	bf28      	it	cs
 800b006:	2304      	movcs	r3, #4
 800b008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	3304      	adds	r3, #4
 800b00e:	2b06      	cmp	r3, #6
 800b010:	d902      	bls.n	800b018 <NVIC_EncodePriority+0x30>
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	3b03      	subs	r3, #3
 800b016:	e000      	b.n	800b01a <NVIC_EncodePriority+0x32>
 800b018:	2300      	movs	r3, #0
 800b01a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b01c:	f04f 32ff 	mov.w	r2, #4294967295
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	fa02 f303 	lsl.w	r3, r2, r3
 800b026:	43da      	mvns	r2, r3
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	401a      	ands	r2, r3
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b030:	f04f 31ff 	mov.w	r1, #4294967295
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	fa01 f303 	lsl.w	r3, r1, r3
 800b03a:	43d9      	mvns	r1, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b040:	4313      	orrs	r3, r2
}
 800b042:	4618      	mov	r0, r3
 800b044:	3724      	adds	r7, #36	; 0x24
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7ff ff4c 	bl	800aef4 <__NVIC_SetPriorityGrouping>
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	4603      	mov	r3, r0
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b072:	f7ff ff63 	bl	800af3c <__NVIC_GetPriorityGrouping>
 800b076:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	68b9      	ldr	r1, [r7, #8]
 800b07c:	6978      	ldr	r0, [r7, #20]
 800b07e:	f7ff ffb3 	bl	800afe8 <NVIC_EncodePriority>
 800b082:	4602      	mov	r2, r0
 800b084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b088:	4611      	mov	r1, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff ff82 	bl	800af94 <__NVIC_SetPriority>
}
 800b090:	bf00      	nop
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b0a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff ff56 	bl	800af58 <__NVIC_EnableIRQ>
}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e08d      	b.n	800b1e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	4b47      	ldr	r3, [pc, #284]	; (800b1ec <HAL_DMA_Init+0x138>)
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d80f      	bhi.n	800b0f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	4b45      	ldr	r3, [pc, #276]	; (800b1f0 <HAL_DMA_Init+0x13c>)
 800b0da:	4413      	add	r3, r2
 800b0dc:	4a45      	ldr	r2, [pc, #276]	; (800b1f4 <HAL_DMA_Init+0x140>)
 800b0de:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e2:	091b      	lsrs	r3, r3, #4
 800b0e4:	009a      	lsls	r2, r3, #2
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a42      	ldr	r2, [pc, #264]	; (800b1f8 <HAL_DMA_Init+0x144>)
 800b0ee:	641a      	str	r2, [r3, #64]	; 0x40
 800b0f0:	e00e      	b.n	800b110 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	4b40      	ldr	r3, [pc, #256]	; (800b1fc <HAL_DMA_Init+0x148>)
 800b0fa:	4413      	add	r3, r2
 800b0fc:	4a3d      	ldr	r2, [pc, #244]	; (800b1f4 <HAL_DMA_Init+0x140>)
 800b0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b102:	091b      	lsrs	r3, r3, #4
 800b104:	009a      	lsls	r2, r3, #2
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a3c      	ldr	r2, [pc, #240]	; (800b200 <HAL_DMA_Init+0x14c>)
 800b10e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b12a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b14c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	4313      	orrs	r3, r2
 800b158:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fa76 	bl	800b654 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b170:	d102      	bne.n	800b178 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b180:	b2d2      	uxtb	r2, r2
 800b182:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b18c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d010      	beq.n	800b1b8 <HAL_DMA_Init+0x104>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	d80c      	bhi.n	800b1b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa96 	bl	800b6d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b1b4:	605a      	str	r2, [r3, #4]
 800b1b6:	e008      	b.n	800b1ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	40020407 	.word	0x40020407
 800b1f0:	bffdfff8 	.word	0xbffdfff8
 800b1f4:	cccccccd 	.word	0xcccccccd
 800b1f8:	40020000 	.word	0x40020000
 800b1fc:	bffdfbf8 	.word	0xbffdfbf8
 800b200:	40020400 	.word	0x40020400

0800b204 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d101      	bne.n	800b224 <HAL_DMA_Start_IT+0x20>
 800b220:	2302      	movs	r3, #2
 800b222:	e066      	b.n	800b2f2 <HAL_DMA_Start_IT+0xee>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b01      	cmp	r3, #1
 800b236:	d155      	bne.n	800b2e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2202      	movs	r2, #2
 800b23c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f022 0201 	bic.w	r2, r2, #1
 800b254:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	68b9      	ldr	r1, [r7, #8]
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f000 f9bb 	bl	800b5d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b266:	2b00      	cmp	r3, #0
 800b268:	d008      	beq.n	800b27c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f042 020e 	orr.w	r2, r2, #14
 800b278:	601a      	str	r2, [r3, #0]
 800b27a:	e00f      	b.n	800b29c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f022 0204 	bic.w	r2, r2, #4
 800b28a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f042 020a 	orr.w	r2, r2, #10
 800b29a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d007      	beq.n	800b2ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d007      	beq.n	800b2d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f042 0201 	orr.w	r2, r2, #1
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	e005      	b.n	800b2f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b085      	sub	sp, #20
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d005      	beq.n	800b31e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2204      	movs	r2, #4
 800b316:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	73fb      	strb	r3, [r7, #15]
 800b31c:	e037      	b.n	800b38e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 020e 	bic.w	r2, r2, #14
 800b32c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b33c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f022 0201 	bic.w	r2, r2, #1
 800b34c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b352:	f003 021f 	and.w	r2, r3, #31
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35a:	2101      	movs	r1, #1
 800b35c:	fa01 f202 	lsl.w	r2, r1, r2
 800b360:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b36a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00c      	beq.n	800b38e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b382:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b38c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d00d      	beq.n	800b3e0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2204      	movs	r2, #4
 800b3c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	73fb      	strb	r3, [r7, #15]
 800b3de:	e047      	b.n	800b470 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f022 020e 	bic.w	r2, r2, #14
 800b3ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f022 0201 	bic.w	r2, r2, #1
 800b3fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b40a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b40e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b414:	f003 021f 	and.w	r2, r3, #31
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41c:	2101      	movs	r1, #1
 800b41e:	fa01 f202 	lsl.w	r2, r1, r2
 800b422:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b42c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00c      	beq.n	800b450 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b444:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b44e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	4798      	blx	r3
    }
  }
  return status;
 800b470:	7bfb      	ldrb	r3, [r7, #15]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b496:	f003 031f 	and.w	r3, r3, #31
 800b49a:	2204      	movs	r2, #4
 800b49c:	409a      	lsls	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d026      	beq.n	800b4f4 <HAL_DMA_IRQHandler+0x7a>
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	f003 0304 	and.w	r3, r3, #4
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d021      	beq.n	800b4f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0320 	and.w	r3, r3, #32
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d107      	bne.n	800b4ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f022 0204 	bic.w	r2, r2, #4
 800b4cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d2:	f003 021f 	and.w	r2, r3, #31
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4da:	2104      	movs	r1, #4
 800b4dc:	fa01 f202 	lsl.w	r2, r1, r2
 800b4e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d071      	beq.n	800b5ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b4f2:	e06c      	b.n	800b5ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f8:	f003 031f 	and.w	r3, r3, #31
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	409a      	lsls	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	4013      	ands	r3, r2
 800b504:	2b00      	cmp	r3, #0
 800b506:	d02e      	beq.n	800b566 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f003 0302 	and.w	r3, r3, #2
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d029      	beq.n	800b566 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0320 	and.w	r3, r3, #32
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10b      	bne.n	800b538 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f022 020a 	bic.w	r2, r2, #10
 800b52e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b53c:	f003 021f 	and.w	r2, r3, #31
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b544:	2102      	movs	r1, #2
 800b546:	fa01 f202 	lsl.w	r2, r1, r2
 800b54a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d038      	beq.n	800b5ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b564:	e033      	b.n	800b5ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b56a:	f003 031f 	and.w	r3, r3, #31
 800b56e:	2208      	movs	r2, #8
 800b570:	409a      	lsls	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	4013      	ands	r3, r2
 800b576:	2b00      	cmp	r3, #0
 800b578:	d02a      	beq.n	800b5d0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	f003 0308 	and.w	r3, r3, #8
 800b580:	2b00      	cmp	r3, #0
 800b582:	d025      	beq.n	800b5d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 020e 	bic.w	r2, r2, #14
 800b592:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b598:	f003 021f 	and.w	r2, r3, #31
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	fa01 f202 	lsl.w	r2, r1, r2
 800b5a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b5ce:	bf00      	nop
 800b5d0:	bf00      	nop
}
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b5ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d004      	beq.n	800b602 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b600:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b606:	f003 021f 	and.w	r2, r3, #31
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	2101      	movs	r1, #1
 800b610:	fa01 f202 	lsl.w	r2, r1, r2
 800b614:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	2b10      	cmp	r3, #16
 800b624:	d108      	bne.n	800b638 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b636:	e007      	b.n	800b648 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	60da      	str	r2, [r3, #12]
}
 800b648:	bf00      	nop
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	461a      	mov	r2, r3
 800b662:	4b16      	ldr	r3, [pc, #88]	; (800b6bc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b664:	429a      	cmp	r2, r3
 800b666:	d802      	bhi.n	800b66e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b668:	4b15      	ldr	r3, [pc, #84]	; (800b6c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e001      	b.n	800b672 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b66e:	4b15      	ldr	r3, [pc, #84]	; (800b6c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b670:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	3b08      	subs	r3, #8
 800b67e:	4a12      	ldr	r2, [pc, #72]	; (800b6c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b680:	fba2 2303 	umull	r2, r3, r2, r3
 800b684:	091b      	lsrs	r3, r3, #4
 800b686:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b68c:	089b      	lsrs	r3, r3, #2
 800b68e:	009a      	lsls	r2, r3, #2
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	4413      	add	r3, r2
 800b694:	461a      	mov	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a0b      	ldr	r2, [pc, #44]	; (800b6cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b69e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f003 031f 	and.w	r3, r3, #31
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	409a      	lsls	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b6ae:	bf00      	nop
 800b6b0:	371c      	adds	r7, #28
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	40020407 	.word	0x40020407
 800b6c0:	40020800 	.word	0x40020800
 800b6c4:	40020820 	.word	0x40020820
 800b6c8:	cccccccd 	.word	0xcccccccd
 800b6cc:	40020880 	.word	0x40020880

0800b6d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	4b0b      	ldr	r3, [pc, #44]	; (800b710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b6e4:	4413      	add	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a08      	ldr	r2, [pc, #32]	; (800b714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b6f2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	f003 031f 	and.w	r3, r3, #31
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	409a      	lsls	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b704:	bf00      	nop
 800b706:	3714      	adds	r7, #20
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr
 800b710:	1000823f 	.word	0x1000823f
 800b714:	40020940 	.word	0x40020940

0800b718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b718:	b480      	push	{r7}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b722:	2300      	movs	r3, #0
 800b724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b726:	e15a      	b.n	800b9de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	2101      	movs	r1, #1
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	fa01 f303 	lsl.w	r3, r1, r3
 800b734:	4013      	ands	r3, r2
 800b736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 814c 	beq.w	800b9d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	f003 0303 	and.w	r3, r3, #3
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d005      	beq.n	800b758 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b754:	2b02      	cmp	r3, #2
 800b756:	d130      	bne.n	800b7ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	2203      	movs	r2, #3
 800b764:	fa02 f303 	lsl.w	r3, r2, r3
 800b768:	43db      	mvns	r3, r3
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	4013      	ands	r3, r2
 800b76e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	68da      	ldr	r2, [r3, #12]
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	005b      	lsls	r3, r3, #1
 800b778:	fa02 f303 	lsl.w	r3, r2, r3
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	4313      	orrs	r3, r2
 800b780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	693a      	ldr	r2, [r7, #16]
 800b786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b78e:	2201      	movs	r2, #1
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	fa02 f303 	lsl.w	r3, r2, r3
 800b796:	43db      	mvns	r3, r3
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	4013      	ands	r3, r2
 800b79c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	091b      	lsrs	r3, r3, #4
 800b7a4:	f003 0201 	and.w	r2, r3, #1
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d017      	beq.n	800b7f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	005b      	lsls	r3, r3, #1
 800b7d0:	2203      	movs	r2, #3
 800b7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d6:	43db      	mvns	r3, r3
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	689a      	ldr	r2, [r3, #8]
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	005b      	lsls	r3, r3, #1
 800b7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	f003 0303 	and.w	r3, r3, #3
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d123      	bne.n	800b84a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	08da      	lsrs	r2, r3, #3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3208      	adds	r2, #8
 800b80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b80e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	f003 0307 	and.w	r3, r3, #7
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	220f      	movs	r2, #15
 800b81a:	fa02 f303 	lsl.w	r3, r2, r3
 800b81e:	43db      	mvns	r3, r3
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	4013      	ands	r3, r2
 800b824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	691a      	ldr	r2, [r3, #16]
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f003 0307 	and.w	r3, r3, #7
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	fa02 f303 	lsl.w	r3, r2, r3
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	4313      	orrs	r3, r2
 800b83a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	08da      	lsrs	r2, r3, #3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3208      	adds	r2, #8
 800b844:	6939      	ldr	r1, [r7, #16]
 800b846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	005b      	lsls	r3, r3, #1
 800b854:	2203      	movs	r2, #3
 800b856:	fa02 f303 	lsl.w	r3, r2, r3
 800b85a:	43db      	mvns	r3, r3
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	4013      	ands	r3, r2
 800b860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f003 0203 	and.w	r2, r3, #3
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	fa02 f303 	lsl.w	r3, r2, r3
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	4313      	orrs	r3, r2
 800b876:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 80a6 	beq.w	800b9d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b88c:	4b5b      	ldr	r3, [pc, #364]	; (800b9fc <HAL_GPIO_Init+0x2e4>)
 800b88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b890:	4a5a      	ldr	r2, [pc, #360]	; (800b9fc <HAL_GPIO_Init+0x2e4>)
 800b892:	f043 0301 	orr.w	r3, r3, #1
 800b896:	6613      	str	r3, [r2, #96]	; 0x60
 800b898:	4b58      	ldr	r3, [pc, #352]	; (800b9fc <HAL_GPIO_Init+0x2e4>)
 800b89a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	60bb      	str	r3, [r7, #8]
 800b8a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b8a4:	4a56      	ldr	r2, [pc, #344]	; (800ba00 <HAL_GPIO_Init+0x2e8>)
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	089b      	lsrs	r3, r3, #2
 800b8aa:	3302      	adds	r3, #2
 800b8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f003 0303 	and.w	r3, r3, #3
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	220f      	movs	r2, #15
 800b8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c0:	43db      	mvns	r3, r3
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b8ce:	d01f      	beq.n	800b910 <HAL_GPIO_Init+0x1f8>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a4c      	ldr	r2, [pc, #304]	; (800ba04 <HAL_GPIO_Init+0x2ec>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d019      	beq.n	800b90c <HAL_GPIO_Init+0x1f4>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a4b      	ldr	r2, [pc, #300]	; (800ba08 <HAL_GPIO_Init+0x2f0>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d013      	beq.n	800b908 <HAL_GPIO_Init+0x1f0>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a4a      	ldr	r2, [pc, #296]	; (800ba0c <HAL_GPIO_Init+0x2f4>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d00d      	beq.n	800b904 <HAL_GPIO_Init+0x1ec>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a49      	ldr	r2, [pc, #292]	; (800ba10 <HAL_GPIO_Init+0x2f8>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d007      	beq.n	800b900 <HAL_GPIO_Init+0x1e8>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a48      	ldr	r2, [pc, #288]	; (800ba14 <HAL_GPIO_Init+0x2fc>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d101      	bne.n	800b8fc <HAL_GPIO_Init+0x1e4>
 800b8f8:	2305      	movs	r3, #5
 800b8fa:	e00a      	b.n	800b912 <HAL_GPIO_Init+0x1fa>
 800b8fc:	2306      	movs	r3, #6
 800b8fe:	e008      	b.n	800b912 <HAL_GPIO_Init+0x1fa>
 800b900:	2304      	movs	r3, #4
 800b902:	e006      	b.n	800b912 <HAL_GPIO_Init+0x1fa>
 800b904:	2303      	movs	r3, #3
 800b906:	e004      	b.n	800b912 <HAL_GPIO_Init+0x1fa>
 800b908:	2302      	movs	r3, #2
 800b90a:	e002      	b.n	800b912 <HAL_GPIO_Init+0x1fa>
 800b90c:	2301      	movs	r3, #1
 800b90e:	e000      	b.n	800b912 <HAL_GPIO_Init+0x1fa>
 800b910:	2300      	movs	r3, #0
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	f002 0203 	and.w	r2, r2, #3
 800b918:	0092      	lsls	r2, r2, #2
 800b91a:	4093      	lsls	r3, r2
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	4313      	orrs	r3, r2
 800b920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b922:	4937      	ldr	r1, [pc, #220]	; (800ba00 <HAL_GPIO_Init+0x2e8>)
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	089b      	lsrs	r3, r3, #2
 800b928:	3302      	adds	r3, #2
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b930:	4b39      	ldr	r3, [pc, #228]	; (800ba18 <HAL_GPIO_Init+0x300>)
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	43db      	mvns	r3, r3
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	4013      	ands	r3, r2
 800b93e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	4313      	orrs	r3, r2
 800b952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b954:	4a30      	ldr	r2, [pc, #192]	; (800ba18 <HAL_GPIO_Init+0x300>)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b95a:	4b2f      	ldr	r3, [pc, #188]	; (800ba18 <HAL_GPIO_Init+0x300>)
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	43db      	mvns	r3, r3
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	4013      	ands	r3, r2
 800b968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b972:	2b00      	cmp	r3, #0
 800b974:	d003      	beq.n	800b97e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b97e:	4a26      	ldr	r2, [pc, #152]	; (800ba18 <HAL_GPIO_Init+0x300>)
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800b984:	4b24      	ldr	r3, [pc, #144]	; (800ba18 <HAL_GPIO_Init+0x300>)
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	43db      	mvns	r3, r3
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	4013      	ands	r3, r2
 800b992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b9a8:	4a1b      	ldr	r2, [pc, #108]	; (800ba18 <HAL_GPIO_Init+0x300>)
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b9ae:	4b1a      	ldr	r3, [pc, #104]	; (800ba18 <HAL_GPIO_Init+0x300>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	43db      	mvns	r3, r3
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d003      	beq.n	800b9d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b9d2:	4a11      	ldr	r2, [pc, #68]	; (800ba18 <HAL_GPIO_Init+0x300>)
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f47f ae9d 	bne.w	800b728 <HAL_GPIO_Init+0x10>
  }
}
 800b9ee:	bf00      	nop
 800b9f0:	bf00      	nop
 800b9f2:	371c      	adds	r7, #28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	40021000 	.word	0x40021000
 800ba00:	40010000 	.word	0x40010000
 800ba04:	48000400 	.word	0x48000400
 800ba08:	48000800 	.word	0x48000800
 800ba0c:	48000c00 	.word	0x48000c00
 800ba10:	48001000 	.word	0x48001000
 800ba14:	48001400 	.word	0x48001400
 800ba18:	40010400 	.word	0x40010400

0800ba1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	691a      	ldr	r2, [r3, #16]
 800ba2c:	887b      	ldrh	r3, [r7, #2]
 800ba2e:	4013      	ands	r3, r2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ba34:	2301      	movs	r3, #1
 800ba36:	73fb      	strb	r3, [r7, #15]
 800ba38:	e001      	b.n	800ba3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	807b      	strh	r3, [r7, #2]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ba5c:	787b      	ldrb	r3, [r7, #1]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ba62:	887a      	ldrh	r2, [r7, #2]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ba68:	e002      	b.n	800ba70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ba6a:	887a      	ldrh	r2, [r7, #2]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e08d      	b.n	800bbaa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d106      	bne.n	800baa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7fc ff18 	bl	80088d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2224      	movs	r2, #36	; 0x24
 800baac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f022 0201 	bic.w	r2, r2, #1
 800babe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bacc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	689a      	ldr	r2, [r3, #8]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800badc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d107      	bne.n	800baf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	689a      	ldr	r2, [r3, #8]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800baf2:	609a      	str	r2, [r3, #8]
 800baf4:	e006      	b.n	800bb04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689a      	ldr	r2, [r3, #8]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bb02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d108      	bne.n	800bb1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	685a      	ldr	r2, [r3, #4]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb1a:	605a      	str	r2, [r3, #4]
 800bb1c:	e007      	b.n	800bb2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	6812      	ldr	r2, [r2, #0]
 800bb38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bb3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68da      	ldr	r2, [r3, #12]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	691a      	ldr	r2, [r3, #16]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	430a      	orrs	r2, r1
 800bb6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	69d9      	ldr	r1, [r3, #28]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a1a      	ldr	r2, [r3, #32]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	430a      	orrs	r2, r1
 800bb7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0201 	orr.w	r2, r2, #1
 800bb8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2220      	movs	r2, #32
 800bb96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b20      	cmp	r3, #32
 800bbc6:	d138      	bne.n	800bc3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d101      	bne.n	800bbd6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bbd2:	2302      	movs	r3, #2
 800bbd4:	e032      	b.n	800bc3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2224      	movs	r2, #36	; 0x24
 800bbe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f022 0201 	bic.w	r2, r2, #1
 800bbf4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6819      	ldr	r1, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	430a      	orrs	r2, r1
 800bc14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f042 0201 	orr.w	r2, r2, #1
 800bc24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	e000      	b.n	800bc3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bc3a:	2302      	movs	r3, #2
  }
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	2b20      	cmp	r3, #32
 800bc5c:	d139      	bne.n	800bcd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d101      	bne.n	800bc6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bc68:	2302      	movs	r3, #2
 800bc6a:	e033      	b.n	800bcd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2224      	movs	r2, #36	; 0x24
 800bc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0201 	bic.w	r2, r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bc9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	021b      	lsls	r3, r3, #8
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f042 0201 	orr.w	r2, r2, #1
 800bcbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2220      	movs	r2, #32
 800bcc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e000      	b.n	800bcd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bcd2:	2302      	movs	r3, #2
  }
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d101      	bne.n	800bcf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e0c0      	b.n	800be74 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d106      	bne.n	800bd0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f012 fd02 	bl	801e710 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2203      	movs	r2, #3
 800bd10:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f006 fea9 	bl	8012a70 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd1e:	2300      	movs	r3, #0
 800bd20:	73fb      	strb	r3, [r7, #15]
 800bd22:	e03e      	b.n	800bda2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bd24:	7bfa      	ldrb	r2, [r7, #15]
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	440b      	add	r3, r1
 800bd32:	3311      	adds	r3, #17
 800bd34:	2201      	movs	r2, #1
 800bd36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bd38:	7bfa      	ldrb	r2, [r7, #15]
 800bd3a:	6879      	ldr	r1, [r7, #4]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	00db      	lsls	r3, r3, #3
 800bd44:	440b      	add	r3, r1
 800bd46:	3310      	adds	r3, #16
 800bd48:	7bfa      	ldrb	r2, [r7, #15]
 800bd4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bd4c:	7bfa      	ldrb	r2, [r7, #15]
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	4613      	mov	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	440b      	add	r3, r1
 800bd5a:	3313      	adds	r3, #19
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bd60:	7bfa      	ldrb	r2, [r7, #15]
 800bd62:	6879      	ldr	r1, [r7, #4]
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	440b      	add	r3, r1
 800bd6e:	3320      	adds	r3, #32
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bd74:	7bfa      	ldrb	r2, [r7, #15]
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	440b      	add	r3, r1
 800bd82:	3324      	adds	r3, #36	; 0x24
 800bd84:	2200      	movs	r2, #0
 800bd86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	4613      	mov	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	440b      	add	r3, r1
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	73fb      	strb	r3, [r7, #15]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	791b      	ldrb	r3, [r3, #4]
 800bda6:	7bfa      	ldrb	r2, [r7, #15]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d3bb      	bcc.n	800bd24 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdac:	2300      	movs	r3, #0
 800bdae:	73fb      	strb	r3, [r7, #15]
 800bdb0:	e044      	b.n	800be3c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bdb2:	7bfa      	ldrb	r2, [r7, #15]
 800bdb4:	6879      	ldr	r1, [r7, #4]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	00db      	lsls	r3, r3, #3
 800bdbe:	440b      	add	r3, r1
 800bdc0:	f203 1351 	addw	r3, r3, #337	; 0x151
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bdc8:	7bfa      	ldrb	r2, [r7, #15]
 800bdca:	6879      	ldr	r1, [r7, #4]
 800bdcc:	4613      	mov	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	440b      	add	r3, r1
 800bdd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdda:	7bfa      	ldrb	r2, [r7, #15]
 800bddc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bdde:	7bfa      	ldrb	r2, [r7, #15]
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	4613      	mov	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	00db      	lsls	r3, r3, #3
 800bdea:	440b      	add	r3, r1
 800bdec:	f203 1353 	addw	r3, r3, #339	; 0x153
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bdf4:	7bfa      	ldrb	r2, [r7, #15]
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	440b      	add	r3, r1
 800be02:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800be06:	2200      	movs	r2, #0
 800be08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800be0a:	7bfa      	ldrb	r2, [r7, #15]
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	4613      	mov	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	440b      	add	r3, r1
 800be18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be1c:	2200      	movs	r2, #0
 800be1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800be20:	7bfa      	ldrb	r2, [r7, #15]
 800be22:	6879      	ldr	r1, [r7, #4]
 800be24:	4613      	mov	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	00db      	lsls	r3, r3, #3
 800be2c:	440b      	add	r3, r1
 800be2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800be32:	2200      	movs	r2, #0
 800be34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	3301      	adds	r3, #1
 800be3a:	73fb      	strb	r3, [r7, #15]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	791b      	ldrb	r3, [r3, #4]
 800be40:	7bfa      	ldrb	r2, [r7, #15]
 800be42:	429a      	cmp	r2, r3
 800be44:	d3b5      	bcc.n	800bdb2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6818      	ldr	r0, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	3304      	adds	r3, #4
 800be4e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800be52:	f006 fe28 	bl	8012aa6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	7a9b      	ldrb	r3, [r3, #10]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d102      	bne.n	800be72 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f001 fc41 	bl	800d6f4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d101      	bne.n	800be92 <HAL_PCD_Start+0x16>
 800be8e:	2302      	movs	r3, #2
 800be90:	e012      	b.n	800beb8 <HAL_PCD_Start+0x3c>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f006 fdcf 	bl	8012a42 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f009 f890 	bl	8014fce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4618      	mov	r0, r3
 800bece:	f009 f895 	bl	8014ffc <USB_ReadInterrupts>
 800bed2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d003      	beq.n	800bee6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fb04 	bl	800c4ec <PCD_EP_ISR_Handler>

    return;
 800bee4:	e110      	b.n	800c108 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800beec:	2b00      	cmp	r3, #0
 800beee:	d013      	beq.n	800bf18 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bef8:	b29a      	uxth	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf02:	b292      	uxth	r2, r2
 800bf04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f012 fc9a 	bl	801e842 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800bf0e:	2100      	movs	r1, #0
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f8fc 	bl	800c10e <HAL_PCD_SetAddress>

    return;
 800bf16:	e0f7      	b.n	800c108 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00c      	beq.n	800bf3c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf34:	b292      	uxth	r2, r2
 800bf36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800bf3a:	e0e5      	b.n	800c108 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00c      	beq.n	800bf60 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf58:	b292      	uxth	r2, r2
 800bf5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800bf5e:	e0d3      	b.n	800c108 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d034      	beq.n	800bfd4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f022 0204 	bic.w	r2, r2, #4
 800bf7c:	b292      	uxth	r2, r2
 800bf7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f022 0208 	bic.w	r2, r2, #8
 800bf94:	b292      	uxth	r2, r2
 800bf96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d107      	bne.n	800bfb4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bfac:	2100      	movs	r1, #0
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f012 fe3a 	bl	801ec28 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f012 fc7d 	bl	801e8b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bfcc:	b292      	uxth	r2, r2
 800bfce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800bfd2:	e099      	b.n	800c108 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d027      	beq.n	800c02e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f042 0208 	orr.w	r2, r2, #8
 800bff0:	b292      	uxth	r2, r2
 800bff2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bffe:	b29a      	uxth	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c008:	b292      	uxth	r2, r2
 800c00a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c016:	b29a      	uxth	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f042 0204 	orr.w	r2, r2, #4
 800c020:	b292      	uxth	r2, r2
 800c022:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f012 fc2a 	bl	801e880 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c02c:	e06c      	b.n	800c108 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c034:	2b00      	cmp	r3, #0
 800c036:	d040      	beq.n	800c0ba <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c040:	b29a      	uxth	r2, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c04a:	b292      	uxth	r2, r2
 800c04c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800c056:	2b00      	cmp	r3, #0
 800c058:	d12b      	bne.n	800c0b2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c062:	b29a      	uxth	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f042 0204 	orr.w	r2, r2, #4
 800c06c:	b292      	uxth	r2, r2
 800c06e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f042 0208 	orr.w	r2, r2, #8
 800c084:	b292      	uxth	r2, r2
 800c086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	089b      	lsrs	r3, r3, #2
 800c09e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f012 fdbc 	bl	801ec28 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800c0b0:	e02a      	b.n	800c108 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f012 fbe4 	bl	801e880 <HAL_PCD_SuspendCallback>
    return;
 800c0b8:	e026      	b.n	800c108 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00f      	beq.n	800c0e4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c0d6:	b292      	uxth	r2, r2
 800c0d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f012 fba2 	bl	801e826 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c0e2:	e011      	b.n	800c108 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00c      	beq.n	800c108 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c100:	b292      	uxth	r2, r2
 800c102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c106:	bf00      	nop
  }
}
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b082      	sub	sp, #8
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	460b      	mov	r3, r1
 800c118:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c120:	2b01      	cmp	r3, #1
 800c122:	d101      	bne.n	800c128 <HAL_PCD_SetAddress+0x1a>
 800c124:	2302      	movs	r3, #2
 800c126:	e012      	b.n	800c14e <HAL_PCD_SetAddress+0x40>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	78fa      	ldrb	r2, [r7, #3]
 800c134:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	78fa      	ldrb	r2, [r7, #3]
 800c13c:	4611      	mov	r1, r2
 800c13e:	4618      	mov	r0, r3
 800c140:	f008 ff31 	bl	8014fa6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	4608      	mov	r0, r1
 800c160:	4611      	mov	r1, r2
 800c162:	461a      	mov	r2, r3
 800c164:	4603      	mov	r3, r0
 800c166:	70fb      	strb	r3, [r7, #3]
 800c168:	460b      	mov	r3, r1
 800c16a:	803b      	strh	r3, [r7, #0]
 800c16c:	4613      	mov	r3, r2
 800c16e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c170:	2300      	movs	r3, #0
 800c172:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	da0e      	bge.n	800c19a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c17c:	78fb      	ldrb	r3, [r7, #3]
 800c17e:	f003 0207 	and.w	r2, r3, #7
 800c182:	4613      	mov	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	00db      	lsls	r3, r3, #3
 800c18a:	3310      	adds	r3, #16
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	4413      	add	r3, r2
 800c190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2201      	movs	r2, #1
 800c196:	705a      	strb	r2, [r3, #1]
 800c198:	e00e      	b.n	800c1b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c19a:	78fb      	ldrb	r3, [r7, #3]
 800c19c:	f003 0207 	and.w	r2, r3, #7
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c1b8:	78fb      	ldrb	r3, [r7, #3]
 800c1ba:	f003 0307 	and.w	r3, r3, #7
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c1c4:	883a      	ldrh	r2, [r7, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	78ba      	ldrb	r2, [r7, #2]
 800c1ce:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c1d0:	78bb      	ldrb	r3, [r7, #2]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d102      	bne.n	800c1dc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d101      	bne.n	800c1ea <HAL_PCD_EP_Open+0x94>
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	e00e      	b.n	800c208 <HAL_PCD_EP_Open+0xb2>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68f9      	ldr	r1, [r7, #12]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f006 fc73 	bl	8012ae4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800c206:	7afb      	ldrb	r3, [r7, #11]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c21c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c220:	2b00      	cmp	r3, #0
 800c222:	da0e      	bge.n	800c242 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c224:	78fb      	ldrb	r3, [r7, #3]
 800c226:	f003 0207 	and.w	r2, r3, #7
 800c22a:	4613      	mov	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	00db      	lsls	r3, r3, #3
 800c232:	3310      	adds	r3, #16
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	4413      	add	r3, r2
 800c238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2201      	movs	r2, #1
 800c23e:	705a      	strb	r2, [r3, #1]
 800c240:	e00e      	b.n	800c260 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c242:	78fb      	ldrb	r3, [r7, #3]
 800c244:	f003 0207 	and.w	r2, r3, #7
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	4413      	add	r3, r2
 800c258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	f003 0307 	and.w	r3, r3, #7
 800c266:	b2da      	uxtb	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c272:	2b01      	cmp	r3, #1
 800c274:	d101      	bne.n	800c27a <HAL_PCD_EP_Close+0x6a>
 800c276:	2302      	movs	r3, #2
 800c278:	e00e      	b.n	800c298 <HAL_PCD_EP_Close+0x88>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68f9      	ldr	r1, [r7, #12]
 800c288:	4618      	mov	r0, r3
 800c28a:	f006 ffef 	bl	801326c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	607a      	str	r2, [r7, #4]
 800c2aa:	603b      	str	r3, [r7, #0]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c2b0:	7afb      	ldrb	r3, [r7, #11]
 800c2b2:	f003 0207 	and.w	r2, r3, #7
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	f003 0307 	and.w	r3, r3, #7
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6979      	ldr	r1, [r7, #20]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f007 f9a7 	bl	8013646 <USB_EPStartXfer>

  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c302:	b480      	push	{r7}
 800c304:	b083      	sub	sp, #12
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	460b      	mov	r3, r1
 800c30c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c30e:	78fb      	ldrb	r3, [r7, #3]
 800c310:	f003 0207 	and.w	r2, r3, #7
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	4613      	mov	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	00db      	lsls	r3, r3, #3
 800c31e:	440b      	add	r3, r1
 800c320:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c324:	681b      	ldr	r3, [r3, #0]
}
 800c326:	4618      	mov	r0, r3
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b086      	sub	sp, #24
 800c336:	af00      	add	r7, sp, #0
 800c338:	60f8      	str	r0, [r7, #12]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
 800c33e:	460b      	mov	r3, r1
 800c340:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c342:	7afb      	ldrb	r3, [r7, #11]
 800c344:	f003 0207 	and.w	r2, r3, #7
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	3310      	adds	r3, #16
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	4413      	add	r3, r2
 800c356:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	683a      	ldr	r2, [r7, #0]
 800c362:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2200      	movs	r2, #0
 800c376:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	2201      	movs	r2, #1
 800c37c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c37e:	7afb      	ldrb	r3, [r7, #11]
 800c380:	f003 0307 	and.w	r3, r3, #7
 800c384:	b2da      	uxtb	r2, r3
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6979      	ldr	r1, [r7, #20]
 800c390:	4618      	mov	r0, r3
 800c392:	f007 f958 	bl	8013646 <USB_EPStartXfer>

  return HAL_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3718      	adds	r7, #24
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c3ac:	78fb      	ldrb	r3, [r7, #3]
 800c3ae:	f003 0307 	and.w	r3, r3, #7
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	7912      	ldrb	r2, [r2, #4]
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d901      	bls.n	800c3be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e03e      	b.n	800c43c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c3be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	da0e      	bge.n	800c3e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3c6:	78fb      	ldrb	r3, [r7, #3]
 800c3c8:	f003 0207 	and.w	r2, r3, #7
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4413      	add	r3, r2
 800c3d2:	00db      	lsls	r3, r3, #3
 800c3d4:	3310      	adds	r3, #16
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	4413      	add	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	705a      	strb	r2, [r3, #1]
 800c3e2:	e00c      	b.n	800c3fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c3e4:	78fa      	ldrb	r2, [r7, #3]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	4413      	add	r3, r2
 800c3ec:	00db      	lsls	r3, r3, #3
 800c3ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2201      	movs	r2, #1
 800c402:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c404:	78fb      	ldrb	r3, [r7, #3]
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	b2da      	uxtb	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c416:	2b01      	cmp	r3, #1
 800c418:	d101      	bne.n	800c41e <HAL_PCD_EP_SetStall+0x7e>
 800c41a:	2302      	movs	r3, #2
 800c41c:	e00e      	b.n	800c43c <HAL_PCD_EP_SetStall+0x9c>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68f9      	ldr	r1, [r7, #12]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f008 fcbb 	bl	8014da8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	460b      	mov	r3, r1
 800c44e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	f003 030f 	and.w	r3, r3, #15
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	7912      	ldrb	r2, [r2, #4]
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d901      	bls.n	800c462 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	e040      	b.n	800c4e4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c466:	2b00      	cmp	r3, #0
 800c468:	da0e      	bge.n	800c488 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c46a:	78fb      	ldrb	r3, [r7, #3]
 800c46c:	f003 0207 	and.w	r2, r3, #7
 800c470:	4613      	mov	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	3310      	adds	r3, #16
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	4413      	add	r3, r2
 800c47e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2201      	movs	r2, #1
 800c484:	705a      	strb	r2, [r3, #1]
 800c486:	e00e      	b.n	800c4a6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c488:	78fb      	ldrb	r3, [r7, #3]
 800c48a:	f003 0207 	and.w	r2, r3, #7
 800c48e:	4613      	mov	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	4413      	add	r3, r2
 800c49e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c4ac:	78fb      	ldrb	r3, [r7, #3]
 800c4ae:	f003 0307 	and.w	r3, r3, #7
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d101      	bne.n	800c4c6 <HAL_PCD_EP_ClrStall+0x82>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	e00e      	b.n	800c4e4 <HAL_PCD_EP_ClrStall+0xa0>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68f9      	ldr	r1, [r7, #12]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f008 fcb8 	bl	8014e4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b096      	sub	sp, #88	; 0x58
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c4f4:	e3ae      	b.n	800cc54 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c4fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800c502:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c506:	b2db      	uxtb	r3, r3
 800c508:	f003 030f 	and.w	r3, r3, #15
 800c50c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800c510:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c514:	2b00      	cmp	r3, #0
 800c516:	f040 8170 	bne.w	800c7fa <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800c51a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c51e:	f003 0310 	and.w	r3, r3, #16
 800c522:	2b00      	cmp	r3, #0
 800c524:	d14d      	bne.n	800c5c2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c536:	81fb      	strh	r3, [r7, #14]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	89fb      	ldrh	r3, [r7, #14]
 800c53e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c546:	b29b      	uxth	r3, r3
 800c548:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	3310      	adds	r3, #16
 800c54e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c558:	b29b      	uxth	r3, r3
 800c55a:	461a      	mov	r2, r3
 800c55c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	4413      	add	r3, r2
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	6812      	ldr	r2, [r2, #0]
 800c568:	4413      	add	r3, r2
 800c56a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c576:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800c578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c57a:	695a      	ldr	r2, [r3, #20]
 800c57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c57e:	69db      	ldr	r3, [r3, #28]
 800c580:	441a      	add	r2, r3
 800c582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c584:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800c586:	2100      	movs	r1, #0
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f012 f932 	bl	801e7f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	7b1b      	ldrb	r3, [r3, #12]
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 835d 	beq.w	800cc54 <PCD_EP_ISR_Handler+0x768>
 800c59a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c59c:	699b      	ldr	r3, [r3, #24]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f040 8358 	bne.w	800cc54 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	7b1b      	ldrb	r3, [r3, #12]
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	b292      	uxth	r2, r2
 800c5b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	731a      	strb	r2, [r3, #12]
 800c5c0:	e348      	b.n	800cc54 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5c8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	881b      	ldrh	r3, [r3, #0]
 800c5d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800c5d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c5d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d032      	beq.n	800c646 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	00db      	lsls	r3, r3, #3
 800c5f2:	4413      	add	r3, r2
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	6812      	ldr	r2, [r2, #0]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c606:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6818      	ldr	r0, [r3, #0]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800c612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c614:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800c616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c618:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	f008 fd40 	bl	80150a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	881b      	ldrh	r3, [r3, #0]
 800c626:	b29a      	uxth	r2, r3
 800c628:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c62c:	4013      	ands	r3, r2
 800c62e:	823b      	strh	r3, [r7, #16]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	8a3a      	ldrh	r2, [r7, #16]
 800c636:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c63a:	b292      	uxth	r2, r2
 800c63c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f012 f8aa 	bl	801e798 <HAL_PCD_SetupStageCallback>
 800c644:	e306      	b.n	800cc54 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c646:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f280 8302 	bge.w	800cc54 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	b29a      	uxth	r2, r3
 800c658:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c65c:	4013      	ands	r3, r2
 800c65e:	83fb      	strh	r3, [r7, #30]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	8bfa      	ldrh	r2, [r7, #30]
 800c666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c66a:	b292      	uxth	r2, r2
 800c66c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c676:	b29b      	uxth	r3, r3
 800c678:	461a      	mov	r2, r3
 800c67a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	00db      	lsls	r3, r3, #3
 800c680:	4413      	add	r3, r2
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	6812      	ldr	r2, [r2, #0]
 800c686:	4413      	add	r3, r2
 800c688:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c68c:	881b      	ldrh	r3, [r3, #0]
 800c68e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c694:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800c696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d019      	beq.n	800c6d2 <PCD_EP_ISR_Handler+0x1e6>
 800c69e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d015      	beq.n	800c6d2 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6818      	ldr	r0, [r3, #0]
 800c6aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6ac:	6959      	ldr	r1, [r3, #20]
 800c6ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800c6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	f008 fcf2 	bl	80150a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800c6bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6be:	695a      	ldr	r2, [r3, #20]
 800c6c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6c2:	69db      	ldr	r3, [r3, #28]
 800c6c4:	441a      	add	r2, r3
 800c6c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f012 f875 	bl	801e7bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	881b      	ldrh	r3, [r3, #0]
 800c6d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800c6dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c6e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f040 82b5 	bne.w	800cc54 <PCD_EP_ISR_Handler+0x768>
 800c6ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c6ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c6f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6f6:	f000 82ad 	beq.w	800cc54 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	61bb      	str	r3, [r7, #24]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c708:	b29b      	uxth	r3, r3
 800c70a:	461a      	mov	r2, r3
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	4413      	add	r3, r2
 800c710:	61bb      	str	r3, [r7, #24]
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	b29b      	uxth	r3, r3
 800c720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c724:	b29a      	uxth	r2, r3
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	801a      	strh	r2, [r3, #0]
 800c72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	2b3e      	cmp	r3, #62	; 0x3e
 800c730:	d91d      	bls.n	800c76e <PCD_EP_ISR_Handler+0x282>
 800c732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	095b      	lsrs	r3, r3, #5
 800c738:	647b      	str	r3, [r7, #68]	; 0x44
 800c73a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	f003 031f 	and.w	r3, r3, #31
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <PCD_EP_ISR_Handler+0x260>
 800c746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c748:	3b01      	subs	r3, #1
 800c74a:	647b      	str	r3, [r7, #68]	; 0x44
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	b29a      	uxth	r2, r3
 800c752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c754:	b29b      	uxth	r3, r3
 800c756:	029b      	lsls	r3, r3, #10
 800c758:	b29b      	uxth	r3, r3
 800c75a:	4313      	orrs	r3, r2
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c766:	b29a      	uxth	r2, r3
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	801a      	strh	r2, [r3, #0]
 800c76c:	e026      	b.n	800c7bc <PCD_EP_ISR_Handler+0x2d0>
 800c76e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d10a      	bne.n	800c78c <PCD_EP_ISR_Handler+0x2a0>
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c784:	b29a      	uxth	r2, r3
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	801a      	strh	r2, [r3, #0]
 800c78a:	e017      	b.n	800c7bc <PCD_EP_ISR_Handler+0x2d0>
 800c78c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	085b      	lsrs	r3, r3, #1
 800c792:	647b      	str	r3, [r7, #68]	; 0x44
 800c794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <PCD_EP_ISR_Handler+0x2ba>
 800c7a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	647b      	str	r3, [r7, #68]	; 0x44
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	881b      	ldrh	r3, [r3, #0]
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	029b      	lsls	r3, r3, #10
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7cc:	827b      	strh	r3, [r7, #18]
 800c7ce:	8a7b      	ldrh	r3, [r7, #18]
 800c7d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c7d4:	827b      	strh	r3, [r7, #18]
 800c7d6:	8a7b      	ldrh	r3, [r7, #18]
 800c7d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c7dc:	827b      	strh	r3, [r7, #18]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	8a7b      	ldrh	r3, [r7, #18]
 800c7e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	8013      	strh	r3, [r2, #0]
 800c7f8:	e22c      	b.n	800cc54 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	461a      	mov	r2, r3
 800c800:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c80e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c812:	2b00      	cmp	r3, #0
 800c814:	f280 80f6 	bge.w	800ca04 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	461a      	mov	r2, r3
 800c81e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4413      	add	r3, r2
 800c826:	881b      	ldrh	r3, [r3, #0]
 800c828:	b29a      	uxth	r2, r3
 800c82a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c82e:	4013      	ands	r3, r2
 800c830:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	461a      	mov	r2, r3
 800c83a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4413      	add	r3, r2
 800c842:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800c846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c84a:	b292      	uxth	r2, r2
 800c84c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800c84e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	00db      	lsls	r3, r3, #3
 800c85a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	4413      	add	r3, r2
 800c862:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800c864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c866:	7b1b      	ldrb	r3, [r3, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d123      	bne.n	800c8b4 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c874:	b29b      	uxth	r3, r3
 800c876:	461a      	mov	r2, r3
 800c878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	4413      	add	r3, r2
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	6812      	ldr	r2, [r2, #0]
 800c884:	4413      	add	r3, r2
 800c886:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c890:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800c894:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 808e 	beq.w	800c9ba <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6818      	ldr	r0, [r3, #0]
 800c8a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a4:	6959      	ldr	r1, [r3, #20]
 800c8a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a8:	88da      	ldrh	r2, [r3, #6]
 800c8aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c8ae:	f008 fbf7 	bl	80150a0 <USB_ReadPMA>
 800c8b2:	e082      	b.n	800c9ba <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800c8b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8b6:	78db      	ldrb	r3, [r3, #3]
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d10a      	bne.n	800c8d2 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800c8bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f9d3 	bl	800cc70 <HAL_PCD_EP_DB_Receive>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800c8d0:	e073      	b.n	800c9ba <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	441a      	add	r2, r3
 800c8fe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c90a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c90e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c912:	b29b      	uxth	r3, r3
 800c914:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	4413      	add	r3, r2
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	b29b      	uxth	r3, r3
 800c928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d022      	beq.n	800c976 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c938:	b29b      	uxth	r3, r3
 800c93a:	461a      	mov	r2, r3
 800c93c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	00db      	lsls	r3, r3, #3
 800c942:	4413      	add	r3, r2
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	6812      	ldr	r2, [r2, #0]
 800c948:	4413      	add	r3, r2
 800c94a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c94e:	881b      	ldrh	r3, [r3, #0]
 800c950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c954:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800c958:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d02c      	beq.n	800c9ba <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6818      	ldr	r0, [r3, #0]
 800c964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c966:	6959      	ldr	r1, [r3, #20]
 800c968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c96a:	891a      	ldrh	r2, [r3, #8]
 800c96c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c970:	f008 fb96 	bl	80150a0 <USB_ReadPMA>
 800c974:	e021      	b.n	800c9ba <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c97e:	b29b      	uxth	r3, r3
 800c980:	461a      	mov	r2, r3
 800c982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	4413      	add	r3, r2
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	6812      	ldr	r2, [r2, #0]
 800c98e:	4413      	add	r3, r2
 800c990:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c994:	881b      	ldrh	r3, [r3, #0]
 800c996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c99a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800c99e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d009      	beq.n	800c9ba <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6818      	ldr	r0, [r3, #0]
 800c9aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ac:	6959      	ldr	r1, [r3, #20]
 800c9ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9b0:	895a      	ldrh	r2, [r3, #10]
 800c9b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c9b6:	f008 fb73 	bl	80150a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800c9ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9bc:	69da      	ldr	r2, [r3, #28]
 800c9be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c9c2:	441a      	add	r2, r3
 800c9c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800c9c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ca:	695a      	ldr	r2, [r3, #20]
 800c9cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c9d0:	441a      	add	r2, r3
 800c9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9d4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800c9d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d005      	beq.n	800c9ea <PCD_EP_ISR_Handler+0x4fe>
 800c9de:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800c9e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d206      	bcs.n	800c9f8 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800c9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f011 fee3 	bl	801e7bc <HAL_PCD_DataOutStageCallback>
 800c9f6:	e005      	b.n	800ca04 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f006 fe21 	bl	8013646 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ca04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ca08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f000 8121 	beq.w	800cc54 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800ca12:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800ca16:	4613      	mov	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	3310      	adds	r3, #16
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	4413      	add	r3, r2
 800ca24:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ca3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	441a      	add	r2, r3
 800ca52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ca62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca64:	78db      	ldrb	r3, [r3, #3]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	f040 80a2 	bne.w	800cbb0 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800ca6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca6e:	2200      	movs	r2, #0
 800ca70:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ca72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca74:	7b1b      	ldrb	r3, [r3, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 8093 	beq.w	800cba2 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ca7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ca80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d046      	beq.n	800cb16 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ca88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca8a:	785b      	ldrb	r3, [r3, #1]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d126      	bne.n	800cade <PCD_EP_ISR_Handler+0x5f2>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	627b      	str	r3, [r7, #36]	; 0x24
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	461a      	mov	r2, r3
 800caa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa4:	4413      	add	r3, r2
 800caa6:	627b      	str	r3, [r7, #36]	; 0x24
 800caa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	00da      	lsls	r2, r3, #3
 800caae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab0:	4413      	add	r3, r2
 800cab2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cab6:	623b      	str	r3, [r7, #32]
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	6a3b      	ldr	r3, [r7, #32]
 800cac6:	801a      	strh	r2, [r3, #0]
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	801a      	strh	r2, [r3, #0]
 800cadc:	e061      	b.n	800cba2 <PCD_EP_ISR_Handler+0x6b6>
 800cade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d15d      	bne.n	800cba2 <PCD_EP_ISR_Handler+0x6b6>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	461a      	mov	r2, r3
 800caf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafa:	4413      	add	r3, r2
 800cafc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cafe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	00da      	lsls	r2, r3, #3
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	4413      	add	r3, r2
 800cb08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	2200      	movs	r2, #0
 800cb12:	801a      	strh	r2, [r3, #0]
 800cb14:	e045      	b.n	800cba2 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb1e:	785b      	ldrb	r3, [r3, #1]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d126      	bne.n	800cb72 <PCD_EP_ISR_Handler+0x686>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	637b      	str	r3, [r7, #52]	; 0x34
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	461a      	mov	r2, r3
 800cb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb38:	4413      	add	r3, r2
 800cb3a:	637b      	str	r3, [r7, #52]	; 0x34
 800cb3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	00da      	lsls	r2, r3, #3
 800cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb44:	4413      	add	r3, r2
 800cb46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb4a:	633b      	str	r3, [r7, #48]	; 0x30
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	801a      	strh	r2, [r3, #0]
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	881b      	ldrh	r3, [r3, #0]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6e:	801a      	strh	r2, [r3, #0]
 800cb70:	e017      	b.n	800cba2 <PCD_EP_ISR_Handler+0x6b6>
 800cb72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb74:	785b      	ldrb	r3, [r3, #1]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d113      	bne.n	800cba2 <PCD_EP_ISR_Handler+0x6b6>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	461a      	mov	r2, r3
 800cb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb88:	4413      	add	r3, r2
 800cb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	00da      	lsls	r2, r3, #3
 800cb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb94:	4413      	add	r3, r2
 800cb96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	2200      	movs	r2, #0
 800cba0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f011 fe22 	bl	801e7f2 <HAL_PCD_DataInStageCallback>
 800cbae:	e051      	b.n	800cc54 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800cbb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cbb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d144      	bne.n	800cc46 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	4413      	add	r3, r2
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	6812      	ldr	r2, [r2, #0]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cbda:	881b      	ldrh	r3, [r3, #0]
 800cbdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbe0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800cbe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbe6:	699a      	ldr	r2, [r3, #24]
 800cbe8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d907      	bls.n	800cc00 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800cbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf2:	699a      	ldr	r2, [r3, #24]
 800cbf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cbf8:	1ad2      	subs	r2, r2, r3
 800cbfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbfc:	619a      	str	r2, [r3, #24]
 800cbfe:	e002      	b.n	800cc06 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800cc00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc02:	2200      	movs	r2, #0
 800cc04:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800cc06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d106      	bne.n	800cc1c <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cc0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f011 fdec 	bl	801e7f2 <HAL_PCD_DataInStageCallback>
 800cc1a:	e01b      	b.n	800cc54 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800cc1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc1e:	695a      	ldr	r2, [r3, #20]
 800cc20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc24:	441a      	add	r2, r3
 800cc26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc28:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800cc2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc2c:	69da      	ldr	r2, [r3, #28]
 800cc2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc32:	441a      	add	r2, r3
 800cc34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc36:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f006 fd01 	bl	8013646 <USB_EPStartXfer>
 800cc44:	e006      	b.n	800cc54 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800cc46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f917 	bl	800ce82 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	b21b      	sxth	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f6ff ac48 	blt.w	800c4f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3758      	adds	r7, #88	; 0x58
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800cc7e:	88fb      	ldrh	r3, [r7, #6]
 800cc80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d07c      	beq.n	800cd82 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	461a      	mov	r2, r3
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	00db      	lsls	r3, r3, #3
 800cc9a:	4413      	add	r3, r2
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	6812      	ldr	r2, [r2, #0]
 800cca0:	4413      	add	r3, r2
 800cca2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cca6:	881b      	ldrh	r3, [r3, #0]
 800cca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	699a      	ldr	r2, [r3, #24]
 800ccb2:	8b7b      	ldrh	r3, [r7, #26]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d306      	bcc.n	800ccc6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	699a      	ldr	r2, [r3, #24]
 800ccbc:	8b7b      	ldrh	r3, [r7, #26]
 800ccbe:	1ad2      	subs	r2, r2, r3
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	619a      	str	r2, [r3, #24]
 800ccc4:	e002      	b.n	800cccc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d123      	bne.n	800cd1c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	461a      	mov	r2, r3
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccee:	833b      	strh	r3, [r7, #24]
 800ccf0:	8b3b      	ldrh	r3, [r7, #24]
 800ccf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ccf6:	833b      	strh	r3, [r7, #24]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	441a      	add	r2, r3
 800cd06:	8b3b      	ldrh	r3, [r7, #24]
 800cd08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cd1c:	88fb      	ldrh	r3, [r7, #6]
 800cd1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d01f      	beq.n	800cd66 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	4413      	add	r3, r2
 800cd34:	881b      	ldrh	r3, [r3, #0]
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd40:	82fb      	strh	r3, [r7, #22]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	441a      	add	r2, r3
 800cd50:	8afb      	ldrh	r3, [r7, #22]
 800cd52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800cd66:	8b7b      	ldrh	r3, [r7, #26]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 8085 	beq.w	800ce78 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6818      	ldr	r0, [r3, #0]
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	6959      	ldr	r1, [r3, #20]
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	891a      	ldrh	r2, [r3, #8]
 800cd7a:	8b7b      	ldrh	r3, [r7, #26]
 800cd7c:	f008 f990 	bl	80150a0 <USB_ReadPMA>
 800cd80:	e07a      	b.n	800ce78 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	4413      	add	r3, r2
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	6812      	ldr	r2, [r2, #0]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cda6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	699a      	ldr	r2, [r3, #24]
 800cdac:	8b7b      	ldrh	r3, [r7, #26]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d306      	bcc.n	800cdc0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	699a      	ldr	r2, [r3, #24]
 800cdb6:	8b7b      	ldrh	r3, [r7, #26]
 800cdb8:	1ad2      	subs	r2, r2, r3
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	619a      	str	r2, [r3, #24]
 800cdbe:	e002      	b.n	800cdc6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	699b      	ldr	r3, [r3, #24]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d123      	bne.n	800ce16 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cde4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cde8:	83fb      	strh	r3, [r7, #30]
 800cdea:	8bfb      	ldrh	r3, [r7, #30]
 800cdec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cdf0:	83fb      	strh	r3, [r7, #30]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	441a      	add	r2, r3
 800ce00:	8bfb      	ldrh	r3, [r7, #30]
 800ce02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ce16:	88fb      	ldrh	r3, [r7, #6]
 800ce18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d11f      	bne.n	800ce60 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	461a      	mov	r2, r3
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce3a:	83bb      	strh	r3, [r7, #28]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	461a      	mov	r2, r3
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	441a      	add	r2, r3
 800ce4a:	8bbb      	ldrh	r3, [r7, #28]
 800ce4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ce60:	8b7b      	ldrh	r3, [r7, #26]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d008      	beq.n	800ce78 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6818      	ldr	r0, [r3, #0]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	6959      	ldr	r1, [r3, #20]
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	895a      	ldrh	r2, [r3, #10]
 800ce72:	8b7b      	ldrh	r3, [r7, #26]
 800ce74:	f008 f914 	bl	80150a0 <USB_ReadPMA>
    }
  }

  return count;
 800ce78:	8b7b      	ldrh	r3, [r7, #26]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3720      	adds	r7, #32
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b0a4      	sub	sp, #144	; 0x90
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	60f8      	str	r0, [r7, #12]
 800ce8a:	60b9      	str	r1, [r7, #8]
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ce90:	88fb      	ldrh	r3, [r7, #6]
 800ce92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f000 81db 	beq.w	800d252 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	461a      	mov	r2, r3
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	4413      	add	r3, r2
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	6812      	ldr	r2, [r2, #0]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cec0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	699a      	ldr	r2, [r3, #24]
 800cec8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cecc:	429a      	cmp	r2, r3
 800cece:	d907      	bls.n	800cee0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	699a      	ldr	r2, [r3, #24]
 800ced4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ced8:	1ad2      	subs	r2, r2, r3
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	619a      	str	r2, [r3, #24]
 800cede:	e002      	b.n	800cee6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	2200      	movs	r2, #0
 800cee4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f040 80b9 	bne.w	800d062 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	785b      	ldrb	r3, [r3, #1]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d126      	bne.n	800cf46 <HAL_PCD_EP_DB_Transmit+0xc4>
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	461a      	mov	r2, r3
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	4413      	add	r3, r2
 800cf0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	00da      	lsls	r2, r3, #3
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf18:	4413      	add	r3, r2
 800cf1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2e:	801a      	strh	r2, [r3, #0]
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	801a      	strh	r2, [r3, #0]
 800cf44:	e01a      	b.n	800cf7c <HAL_PCD_EP_DB_Transmit+0xfa>
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	785b      	ldrb	r3, [r3, #1]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d116      	bne.n	800cf7c <HAL_PCD_EP_DB_Transmit+0xfa>
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	637b      	str	r3, [r7, #52]	; 0x34
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	461a      	mov	r2, r3
 800cf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf62:	4413      	add	r3, r2
 800cf64:	637b      	str	r3, [r7, #52]	; 0x34
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	00da      	lsls	r2, r3, #3
 800cf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6e:	4413      	add	r3, r2
 800cf70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf74:	633b      	str	r3, [r7, #48]	; 0x30
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	2200      	movs	r2, #0
 800cf7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	627b      	str	r3, [r7, #36]	; 0x24
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	785b      	ldrb	r3, [r3, #1]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d126      	bne.n	800cfd8 <HAL_PCD_EP_DB_Transmit+0x156>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	61fb      	str	r3, [r7, #28]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	61fb      	str	r3, [r7, #28]
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	00da      	lsls	r2, r3, #3
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cfb0:	61bb      	str	r3, [r7, #24]
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	801a      	strh	r2, [r3, #0]
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	881b      	ldrh	r3, [r3, #0]
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	801a      	strh	r2, [r3, #0]
 800cfd6:	e017      	b.n	800d008 <HAL_PCD_EP_DB_Transmit+0x186>
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	785b      	ldrb	r3, [r3, #1]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d113      	bne.n	800d008 <HAL_PCD_EP_DB_Transmit+0x186>
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	461a      	mov	r2, r3
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	4413      	add	r3, r2
 800cff0:	627b      	str	r3, [r7, #36]	; 0x24
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	00da      	lsls	r2, r3, #3
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	4413      	add	r3, r2
 800cffc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d000:	623b      	str	r3, [r7, #32]
 800d002:	6a3b      	ldr	r3, [r7, #32]
 800d004:	2200      	movs	r2, #0
 800d006:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	4619      	mov	r1, r3
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f011 fbef 	bl	801e7f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d014:	88fb      	ldrh	r3, [r7, #6]
 800d016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 82fa 	beq.w	800d614 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	461a      	mov	r2, r3
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4413      	add	r3, r2
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	b29b      	uxth	r3, r3
 800d032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d03a:	82fb      	strh	r3, [r7, #22]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	461a      	mov	r2, r3
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	441a      	add	r2, r3
 800d04a:	8afb      	ldrh	r3, [r7, #22]
 800d04c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	8013      	strh	r3, [r2, #0]
 800d060:	e2d8      	b.n	800d614 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d062:	88fb      	ldrh	r3, [r7, #6]
 800d064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d021      	beq.n	800d0b0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	461a      	mov	r2, r3
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4413      	add	r3, r2
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d086:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	461a      	mov	r2, r3
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	441a      	add	r2, r3
 800d098:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d09c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	f040 82ac 	bne.w	800d614 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	695a      	ldr	r2, [r3, #20]
 800d0c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d0c4:	441a      	add	r2, r3
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	69da      	ldr	r2, [r3, #28]
 800d0ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d0d2:	441a      	add	r2, r3
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	6a1a      	ldr	r2, [r3, #32]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d30b      	bcc.n	800d0fc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	6a1a      	ldr	r2, [r3, #32]
 800d0f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d0f4:	1ad2      	subs	r2, r2, r3
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	621a      	str	r2, [r3, #32]
 800d0fa:	e017      	b.n	800d12c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	6a1b      	ldr	r3, [r3, #32]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d108      	bne.n	800d116 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800d104:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2200      	movs	r2, #0
 800d110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d114:	e00a      	b.n	800d12c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	2200      	movs	r2, #0
 800d12a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	785b      	ldrb	r3, [r3, #1]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d165      	bne.n	800d200 <HAL_PCD_EP_DB_Transmit+0x37e>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d142:	b29b      	uxth	r3, r3
 800d144:	461a      	mov	r2, r3
 800d146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d148:	4413      	add	r3, r2
 800d14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	00da      	lsls	r2, r3, #3
 800d152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d154:	4413      	add	r3, r2
 800d156:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d15a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15e:	881b      	ldrh	r3, [r3, #0]
 800d160:	b29b      	uxth	r3, r3
 800d162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d166:	b29a      	uxth	r2, r3
 800d168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16a:	801a      	strh	r2, [r3, #0]
 800d16c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d170:	2b3e      	cmp	r3, #62	; 0x3e
 800d172:	d91d      	bls.n	800d1b0 <HAL_PCD_EP_DB_Transmit+0x32e>
 800d174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d178:	095b      	lsrs	r3, r3, #5
 800d17a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d17c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d180:	f003 031f 	and.w	r3, r3, #31
 800d184:	2b00      	cmp	r3, #0
 800d186:	d102      	bne.n	800d18e <HAL_PCD_EP_DB_Transmit+0x30c>
 800d188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d18a:	3b01      	subs	r3, #1
 800d18c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	b29a      	uxth	r2, r3
 800d194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d196:	b29b      	uxth	r3, r3
 800d198:	029b      	lsls	r3, r3, #10
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	4313      	orrs	r3, r2
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ac:	801a      	strh	r2, [r3, #0]
 800d1ae:	e044      	b.n	800d23a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d1b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10a      	bne.n	800d1ce <HAL_PCD_EP_DB_Transmit+0x34c>
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	881b      	ldrh	r3, [r3, #0]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ca:	801a      	strh	r2, [r3, #0]
 800d1cc:	e035      	b.n	800d23a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d1ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1d2:	085b      	lsrs	r3, r3, #1
 800d1d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1da:	f003 0301 	and.w	r3, r3, #1
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d002      	beq.n	800d1e8 <HAL_PCD_EP_DB_Transmit+0x366>
 800d1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	881b      	ldrh	r3, [r3, #0]
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	029b      	lsls	r3, r3, #10
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fc:	801a      	strh	r2, [r3, #0]
 800d1fe:	e01c      	b.n	800d23a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	785b      	ldrb	r3, [r3, #1]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d118      	bne.n	800d23a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	647b      	str	r3, [r7, #68]	; 0x44
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d216:	b29b      	uxth	r3, r3
 800d218:	461a      	mov	r2, r3
 800d21a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d21c:	4413      	add	r3, r2
 800d21e:	647b      	str	r3, [r7, #68]	; 0x44
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	00da      	lsls	r2, r3, #3
 800d226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d228:	4413      	add	r3, r2
 800d22a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d22e:	643b      	str	r3, [r7, #64]	; 0x40
 800d230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d234:	b29a      	uxth	r2, r3
 800d236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d238:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6818      	ldr	r0, [r3, #0]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	6959      	ldr	r1, [r3, #20]
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	891a      	ldrh	r2, [r3, #8]
 800d246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	f007 fee6 	bl	801501c <USB_WritePMA>
 800d250:	e1e0      	b.n	800d614 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	461a      	mov	r2, r3
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	4413      	add	r3, r2
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	6812      	ldr	r2, [r2, #0]
 800d26a:	4413      	add	r3, r2
 800d26c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d276:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	699a      	ldr	r2, [r3, #24]
 800d27e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d282:	429a      	cmp	r2, r3
 800d284:	d307      	bcc.n	800d296 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	699a      	ldr	r2, [r3, #24]
 800d28a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d28e:	1ad2      	subs	r2, r2, r3
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	619a      	str	r2, [r3, #24]
 800d294:	e002      	b.n	800d29c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2200      	movs	r2, #0
 800d29a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f040 80c0 	bne.w	800d426 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	785b      	ldrb	r3, [r3, #1]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d126      	bne.n	800d2fc <HAL_PCD_EP_DB_Transmit+0x47a>
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	461a      	mov	r2, r3
 800d2c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2c2:	4413      	add	r3, r2
 800d2c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	00da      	lsls	r2, r3, #3
 800d2cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2ce:	4413      	add	r3, r2
 800d2d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d2d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d2d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2e4:	801a      	strh	r2, [r3, #0]
 800d2e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2f8:	801a      	strh	r2, [r3, #0]
 800d2fa:	e01a      	b.n	800d332 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	785b      	ldrb	r3, [r3, #1]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d116      	bne.n	800d332 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	667b      	str	r3, [r7, #100]	; 0x64
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d312:	b29b      	uxth	r3, r3
 800d314:	461a      	mov	r2, r3
 800d316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d318:	4413      	add	r3, r2
 800d31a:	667b      	str	r3, [r7, #100]	; 0x64
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	00da      	lsls	r2, r3, #3
 800d322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d324:	4413      	add	r3, r2
 800d326:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d32a:	663b      	str	r3, [r7, #96]	; 0x60
 800d32c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d32e:	2200      	movs	r2, #0
 800d330:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	677b      	str	r3, [r7, #116]	; 0x74
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	785b      	ldrb	r3, [r3, #1]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d12b      	bne.n	800d398 <HAL_PCD_EP_DB_Transmit+0x516>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d34e:	b29b      	uxth	r3, r3
 800d350:	461a      	mov	r2, r3
 800d352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d354:	4413      	add	r3, r2
 800d356:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	00da      	lsls	r2, r3, #3
 800d35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d360:	4413      	add	r3, r2
 800d362:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d366:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d36a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	b29b      	uxth	r3, r3
 800d372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d376:	b29a      	uxth	r2, r3
 800d378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d37c:	801a      	strh	r2, [r3, #0]
 800d37e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d382:	881b      	ldrh	r3, [r3, #0]
 800d384:	b29b      	uxth	r3, r3
 800d386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d38a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d38e:	b29a      	uxth	r2, r3
 800d390:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d394:	801a      	strh	r2, [r3, #0]
 800d396:	e017      	b.n	800d3c8 <HAL_PCD_EP_DB_Transmit+0x546>
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	785b      	ldrb	r3, [r3, #1]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d113      	bne.n	800d3c8 <HAL_PCD_EP_DB_Transmit+0x546>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3ae:	4413      	add	r3, r2
 800d3b0:	677b      	str	r3, [r7, #116]	; 0x74
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	00da      	lsls	r2, r3, #3
 800d3b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d3c0:	673b      	str	r3, [r7, #112]	; 0x70
 800d3c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f011 fa0f 	bl	801e7f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d3d4:	88fb      	ldrh	r3, [r7, #6]
 800d3d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f040 811a 	bne.w	800d614 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3fa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	461a      	mov	r2, r3
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	441a      	add	r2, r3
 800d40c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800d410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d41c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d420:	b29b      	uxth	r3, r3
 800d422:	8013      	strh	r3, [r2, #0]
 800d424:	e0f6      	b.n	800d614 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d426:	88fb      	ldrh	r3, [r7, #6]
 800d428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d121      	bne.n	800d474 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	b29b      	uxth	r3, r3
 800d442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d44a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	461a      	mov	r2, r3
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	441a      	add	r2, r3
 800d45c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d470:	b29b      	uxth	r3, r3
 800d472:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	f040 80ca 	bne.w	800d614 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	695a      	ldr	r2, [r3, #20]
 800d484:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d488:	441a      	add	r2, r3
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	69da      	ldr	r2, [r3, #28]
 800d492:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d496:	441a      	add	r2, r3
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	6a1a      	ldr	r2, [r3, #32]
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d30b      	bcc.n	800d4c0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	6a1a      	ldr	r2, [r3, #32]
 800d4b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4b8:	1ad2      	subs	r2, r2, r3
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	621a      	str	r2, [r3, #32]
 800d4be:	e017      	b.n	800d4f0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	6a1b      	ldr	r3, [r3, #32]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d108      	bne.n	800d4da <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800d4c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d4cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d4d8:	e00a      	b.n	800d4f0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	6a1b      	ldr	r3, [r3, #32]
 800d4de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	657b      	str	r3, [r7, #84]	; 0x54
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	785b      	ldrb	r3, [r3, #1]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d165      	bne.n	800d5ca <HAL_PCD_EP_DB_Transmit+0x748>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	461a      	mov	r2, r3
 800d510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d512:	4413      	add	r3, r2
 800d514:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	00da      	lsls	r2, r3, #3
 800d51c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d51e:	4413      	add	r3, r2
 800d520:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d524:	65bb      	str	r3, [r7, #88]	; 0x58
 800d526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d528:	881b      	ldrh	r3, [r3, #0]
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d530:	b29a      	uxth	r2, r3
 800d532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d534:	801a      	strh	r2, [r3, #0]
 800d536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d53a:	2b3e      	cmp	r3, #62	; 0x3e
 800d53c:	d91d      	bls.n	800d57a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800d53e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d542:	095b      	lsrs	r3, r3, #5
 800d544:	66bb      	str	r3, [r7, #104]	; 0x68
 800d546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d54a:	f003 031f 	and.w	r3, r3, #31
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d102      	bne.n	800d558 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800d552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d554:	3b01      	subs	r3, #1
 800d556:	66bb      	str	r3, [r7, #104]	; 0x68
 800d558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d55a:	881b      	ldrh	r3, [r3, #0]
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d560:	b29b      	uxth	r3, r3
 800d562:	029b      	lsls	r3, r3, #10
 800d564:	b29b      	uxth	r3, r3
 800d566:	4313      	orrs	r3, r2
 800d568:	b29b      	uxth	r3, r3
 800d56a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d56e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d572:	b29a      	uxth	r2, r3
 800d574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d576:	801a      	strh	r2, [r3, #0]
 800d578:	e041      	b.n	800d5fe <HAL_PCD_EP_DB_Transmit+0x77c>
 800d57a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10a      	bne.n	800d598 <HAL_PCD_EP_DB_Transmit+0x716>
 800d582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	b29b      	uxth	r3, r3
 800d588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d58c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d590:	b29a      	uxth	r2, r3
 800d592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d594:	801a      	strh	r2, [r3, #0]
 800d596:	e032      	b.n	800d5fe <HAL_PCD_EP_DB_Transmit+0x77c>
 800d598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d59c:	085b      	lsrs	r3, r3, #1
 800d59e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5a4:	f003 0301 	and.w	r3, r3, #1
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d002      	beq.n	800d5b2 <HAL_PCD_EP_DB_Transmit+0x730>
 800d5ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5b4:	881b      	ldrh	r3, [r3, #0]
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	029b      	lsls	r3, r3, #10
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5c6:	801a      	strh	r2, [r3, #0]
 800d5c8:	e019      	b.n	800d5fe <HAL_PCD_EP_DB_Transmit+0x77c>
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	785b      	ldrb	r3, [r3, #1]
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d115      	bne.n	800d5fe <HAL_PCD_EP_DB_Transmit+0x77c>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	461a      	mov	r2, r3
 800d5de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5e0:	4413      	add	r3, r2
 800d5e2:	657b      	str	r3, [r7, #84]	; 0x54
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	00da      	lsls	r2, r3, #3
 800d5ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5ec:	4413      	add	r3, r2
 800d5ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d5f2:	653b      	str	r3, [r7, #80]	; 0x50
 800d5f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6818      	ldr	r0, [r3, #0]
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	6959      	ldr	r1, [r3, #20]
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	895a      	ldrh	r2, [r3, #10]
 800d60a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d60e:	b29b      	uxth	r3, r3
 800d610:	f007 fd04 	bl	801501c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	461a      	mov	r2, r3
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	4413      	add	r3, r2
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	b29b      	uxth	r3, r3
 800d626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d62a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d62e:	82bb      	strh	r3, [r7, #20]
 800d630:	8abb      	ldrh	r3, [r7, #20]
 800d632:	f083 0310 	eor.w	r3, r3, #16
 800d636:	82bb      	strh	r3, [r7, #20]
 800d638:	8abb      	ldrh	r3, [r7, #20]
 800d63a:	f083 0320 	eor.w	r3, r3, #32
 800d63e:	82bb      	strh	r3, [r7, #20]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	461a      	mov	r2, r3
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	441a      	add	r2, r3
 800d64e:	8abb      	ldrh	r3, [r7, #20]
 800d650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d660:	b29b      	uxth	r3, r3
 800d662:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3790      	adds	r7, #144	; 0x90
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800d66e:	b480      	push	{r7}
 800d670:	b087      	sub	sp, #28
 800d672:	af00      	add	r7, sp, #0
 800d674:	60f8      	str	r0, [r7, #12]
 800d676:	607b      	str	r3, [r7, #4]
 800d678:	460b      	mov	r3, r1
 800d67a:	817b      	strh	r3, [r7, #10]
 800d67c:	4613      	mov	r3, r2
 800d67e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800d680:	897b      	ldrh	r3, [r7, #10]
 800d682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d686:	b29b      	uxth	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00b      	beq.n	800d6a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d68c:	897b      	ldrh	r3, [r7, #10]
 800d68e:	f003 0207 	and.w	r2, r3, #7
 800d692:	4613      	mov	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	4413      	add	r3, r2
 800d698:	00db      	lsls	r3, r3, #3
 800d69a:	3310      	adds	r3, #16
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	4413      	add	r3, r2
 800d6a0:	617b      	str	r3, [r7, #20]
 800d6a2:	e009      	b.n	800d6b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d6a4:	897a      	ldrh	r2, [r7, #10]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	00db      	lsls	r3, r3, #3
 800d6ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800d6b8:	893b      	ldrh	r3, [r7, #8]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d107      	bne.n	800d6ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	80da      	strh	r2, [r3, #6]
 800d6cc:	e00b      	b.n	800d6e6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	b29a      	uxth	r2, r3
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	0c1b      	lsrs	r3, r3, #16
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	371c      	adds	r7, #28
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d718:	b29b      	uxth	r3, r3
 800d71a:	f043 0301 	orr.w	r3, r3, #1
 800d71e:	b29a      	uxth	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	f043 0302 	orr.w	r3, r3, #2
 800d732:	b29a      	uxth	r2, r3
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d141      	bne.n	800d7da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d756:	4b4b      	ldr	r3, [pc, #300]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d75e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d762:	d131      	bne.n	800d7c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d764:	4b47      	ldr	r3, [pc, #284]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d76a:	4a46      	ldr	r2, [pc, #280]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d76c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d774:	4b43      	ldr	r3, [pc, #268]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d77c:	4a41      	ldr	r2, [pc, #260]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d77e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d782:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d784:	4b40      	ldr	r3, [pc, #256]	; (800d888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2232      	movs	r2, #50	; 0x32
 800d78a:	fb02 f303 	mul.w	r3, r2, r3
 800d78e:	4a3f      	ldr	r2, [pc, #252]	; (800d88c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d790:	fba2 2303 	umull	r2, r3, r2, r3
 800d794:	0c9b      	lsrs	r3, r3, #18
 800d796:	3301      	adds	r3, #1
 800d798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d79a:	e002      	b.n	800d7a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	3b01      	subs	r3, #1
 800d7a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d7a2:	4b38      	ldr	r3, [pc, #224]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d7a4:	695b      	ldr	r3, [r3, #20]
 800d7a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7ae:	d102      	bne.n	800d7b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1f2      	bne.n	800d79c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d7b6:	4b33      	ldr	r3, [pc, #204]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7c2:	d158      	bne.n	800d876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	e057      	b.n	800d878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d7c8:	4b2e      	ldr	r3, [pc, #184]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7ce:	4a2d      	ldr	r2, [pc, #180]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d7d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d7d8:	e04d      	b.n	800d876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7e0:	d141      	bne.n	800d866 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d7e2:	4b28      	ldr	r3, [pc, #160]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d7ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7ee:	d131      	bne.n	800d854 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d7f0:	4b24      	ldr	r3, [pc, #144]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7f6:	4a23      	ldr	r2, [pc, #140]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d7f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d800:	4b20      	ldr	r3, [pc, #128]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d808:	4a1e      	ldr	r2, [pc, #120]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d80a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d80e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d810:	4b1d      	ldr	r3, [pc, #116]	; (800d888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2232      	movs	r2, #50	; 0x32
 800d816:	fb02 f303 	mul.w	r3, r2, r3
 800d81a:	4a1c      	ldr	r2, [pc, #112]	; (800d88c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d81c:	fba2 2303 	umull	r2, r3, r2, r3
 800d820:	0c9b      	lsrs	r3, r3, #18
 800d822:	3301      	adds	r3, #1
 800d824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d826:	e002      	b.n	800d82e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	3b01      	subs	r3, #1
 800d82c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d82e:	4b15      	ldr	r3, [pc, #84]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d83a:	d102      	bne.n	800d842 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1f2      	bne.n	800d828 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d842:	4b10      	ldr	r3, [pc, #64]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d844:	695b      	ldr	r3, [r3, #20]
 800d846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d84e:	d112      	bne.n	800d876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d850:	2303      	movs	r3, #3
 800d852:	e011      	b.n	800d878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d854:	4b0b      	ldr	r3, [pc, #44]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d85a:	4a0a      	ldr	r2, [pc, #40]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d85c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d860:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d864:	e007      	b.n	800d876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d866:	4b07      	ldr	r3, [pc, #28]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d86e:	4a05      	ldr	r2, [pc, #20]	; (800d884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d874:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3714      	adds	r7, #20
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	40007000 	.word	0x40007000
 800d888:	20000008 	.word	0x20000008
 800d88c:	431bde83 	.word	0x431bde83

0800d890 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d890:	b480      	push	{r7}
 800d892:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d894:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	4a04      	ldr	r2, [pc, #16]	; (800d8ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d89a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d89e:	6093      	str	r3, [r2, #8]
}
 800d8a0:	bf00      	nop
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	40007000 	.word	0x40007000

0800d8b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b088      	sub	sp, #32
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e2fe      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f003 0301 	and.w	r3, r3, #1
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d075      	beq.n	800d9ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d8ce:	4b97      	ldr	r3, [pc, #604]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	f003 030c 	and.w	r3, r3, #12
 800d8d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d8d8:	4b94      	ldr	r3, [pc, #592]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	f003 0303 	and.w	r3, r3, #3
 800d8e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	2b0c      	cmp	r3, #12
 800d8e6:	d102      	bne.n	800d8ee <HAL_RCC_OscConfig+0x3e>
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	d002      	beq.n	800d8f4 <HAL_RCC_OscConfig+0x44>
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	2b08      	cmp	r3, #8
 800d8f2:	d10b      	bne.n	800d90c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8f4:	4b8d      	ldr	r3, [pc, #564]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d05b      	beq.n	800d9b8 <HAL_RCC_OscConfig+0x108>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d157      	bne.n	800d9b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	e2d9      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d914:	d106      	bne.n	800d924 <HAL_RCC_OscConfig+0x74>
 800d916:	4b85      	ldr	r3, [pc, #532]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a84      	ldr	r2, [pc, #528]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d91c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d920:	6013      	str	r3, [r2, #0]
 800d922:	e01d      	b.n	800d960 <HAL_RCC_OscConfig+0xb0>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d92c:	d10c      	bne.n	800d948 <HAL_RCC_OscConfig+0x98>
 800d92e:	4b7f      	ldr	r3, [pc, #508]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a7e      	ldr	r2, [pc, #504]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d938:	6013      	str	r3, [r2, #0]
 800d93a:	4b7c      	ldr	r3, [pc, #496]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4a7b      	ldr	r2, [pc, #492]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d944:	6013      	str	r3, [r2, #0]
 800d946:	e00b      	b.n	800d960 <HAL_RCC_OscConfig+0xb0>
 800d948:	4b78      	ldr	r3, [pc, #480]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a77      	ldr	r2, [pc, #476]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d94e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	4b75      	ldr	r3, [pc, #468]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a74      	ldr	r2, [pc, #464]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d95a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d95e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d013      	beq.n	800d990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d968:	f7fb fc32 	bl	80091d0 <HAL_GetTick>
 800d96c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d96e:	e008      	b.n	800d982 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d970:	f7fb fc2e 	bl	80091d0 <HAL_GetTick>
 800d974:	4602      	mov	r2, r0
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	2b64      	cmp	r3, #100	; 0x64
 800d97c:	d901      	bls.n	800d982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d97e:	2303      	movs	r3, #3
 800d980:	e29e      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d982:	4b6a      	ldr	r3, [pc, #424]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0f0      	beq.n	800d970 <HAL_RCC_OscConfig+0xc0>
 800d98e:	e014      	b.n	800d9ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d990:	f7fb fc1e 	bl	80091d0 <HAL_GetTick>
 800d994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d996:	e008      	b.n	800d9aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d998:	f7fb fc1a 	bl	80091d0 <HAL_GetTick>
 800d99c:	4602      	mov	r2, r0
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	2b64      	cmp	r3, #100	; 0x64
 800d9a4:	d901      	bls.n	800d9aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d9a6:	2303      	movs	r3, #3
 800d9a8:	e28a      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d9aa:	4b60      	ldr	r3, [pc, #384]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1f0      	bne.n	800d998 <HAL_RCC_OscConfig+0xe8>
 800d9b6:	e000      	b.n	800d9ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d9b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f003 0302 	and.w	r3, r3, #2
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d075      	beq.n	800dab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d9c6:	4b59      	ldr	r3, [pc, #356]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	f003 030c 	and.w	r3, r3, #12
 800d9ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d9d0:	4b56      	ldr	r3, [pc, #344]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	f003 0303 	and.w	r3, r3, #3
 800d9d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	2b0c      	cmp	r3, #12
 800d9de:	d102      	bne.n	800d9e6 <HAL_RCC_OscConfig+0x136>
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2b02      	cmp	r3, #2
 800d9e4:	d002      	beq.n	800d9ec <HAL_RCC_OscConfig+0x13c>
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	2b04      	cmp	r3, #4
 800d9ea:	d11f      	bne.n	800da2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d9ec:	4b4f      	ldr	r3, [pc, #316]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d005      	beq.n	800da04 <HAL_RCC_OscConfig+0x154>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e25d      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da04:	4b49      	ldr	r3, [pc, #292]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	061b      	lsls	r3, r3, #24
 800da12:	4946      	ldr	r1, [pc, #280]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800da14:	4313      	orrs	r3, r2
 800da16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800da18:	4b45      	ldr	r3, [pc, #276]	; (800db30 <HAL_RCC_OscConfig+0x280>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fb fa15 	bl	8008e4c <HAL_InitTick>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d043      	beq.n	800dab0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	e249      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d023      	beq.n	800da7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800da34:	4b3d      	ldr	r3, [pc, #244]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a3c      	ldr	r2, [pc, #240]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800da3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da40:	f7fb fbc6 	bl	80091d0 <HAL_GetTick>
 800da44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da46:	e008      	b.n	800da5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da48:	f7fb fbc2 	bl	80091d0 <HAL_GetTick>
 800da4c:	4602      	mov	r2, r0
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	2b02      	cmp	r3, #2
 800da54:	d901      	bls.n	800da5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800da56:	2303      	movs	r3, #3
 800da58:	e232      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da5a:	4b34      	ldr	r3, [pc, #208]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da62:	2b00      	cmp	r3, #0
 800da64:	d0f0      	beq.n	800da48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da66:	4b31      	ldr	r3, [pc, #196]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	061b      	lsls	r3, r3, #24
 800da74:	492d      	ldr	r1, [pc, #180]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800da76:	4313      	orrs	r3, r2
 800da78:	604b      	str	r3, [r1, #4]
 800da7a:	e01a      	b.n	800dab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800da7c:	4b2b      	ldr	r3, [pc, #172]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a2a      	ldr	r2, [pc, #168]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800da82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da88:	f7fb fba2 	bl	80091d0 <HAL_GetTick>
 800da8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800da8e:	e008      	b.n	800daa2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da90:	f7fb fb9e 	bl	80091d0 <HAL_GetTick>
 800da94:	4602      	mov	r2, r0
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d901      	bls.n	800daa2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800da9e:	2303      	movs	r3, #3
 800daa0:	e20e      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800daa2:	4b22      	ldr	r3, [pc, #136]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1f0      	bne.n	800da90 <HAL_RCC_OscConfig+0x1e0>
 800daae:	e000      	b.n	800dab2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dab0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f003 0308 	and.w	r3, r3, #8
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d041      	beq.n	800db42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d01c      	beq.n	800db00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dac6:	4b19      	ldr	r3, [pc, #100]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800dac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dacc:	4a17      	ldr	r2, [pc, #92]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800dace:	f043 0301 	orr.w	r3, r3, #1
 800dad2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dad6:	f7fb fb7b 	bl	80091d0 <HAL_GetTick>
 800dada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dadc:	e008      	b.n	800daf0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dade:	f7fb fb77 	bl	80091d0 <HAL_GetTick>
 800dae2:	4602      	mov	r2, r0
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	2b02      	cmp	r3, #2
 800daea:	d901      	bls.n	800daf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800daec:	2303      	movs	r3, #3
 800daee:	e1e7      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800daf0:	4b0e      	ldr	r3, [pc, #56]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800daf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800daf6:	f003 0302 	and.w	r3, r3, #2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0ef      	beq.n	800dade <HAL_RCC_OscConfig+0x22e>
 800dafe:	e020      	b.n	800db42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800db00:	4b0a      	ldr	r3, [pc, #40]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800db02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db06:	4a09      	ldr	r2, [pc, #36]	; (800db2c <HAL_RCC_OscConfig+0x27c>)
 800db08:	f023 0301 	bic.w	r3, r3, #1
 800db0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db10:	f7fb fb5e 	bl	80091d0 <HAL_GetTick>
 800db14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800db16:	e00d      	b.n	800db34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800db18:	f7fb fb5a 	bl	80091d0 <HAL_GetTick>
 800db1c:	4602      	mov	r2, r0
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	1ad3      	subs	r3, r2, r3
 800db22:	2b02      	cmp	r3, #2
 800db24:	d906      	bls.n	800db34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800db26:	2303      	movs	r3, #3
 800db28:	e1ca      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
 800db2a:	bf00      	nop
 800db2c:	40021000 	.word	0x40021000
 800db30:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800db34:	4b8c      	ldr	r3, [pc, #560]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800db36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db3a:	f003 0302 	and.w	r3, r3, #2
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1ea      	bne.n	800db18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f003 0304 	and.w	r3, r3, #4
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f000 80a6 	beq.w	800dc9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800db50:	2300      	movs	r3, #0
 800db52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800db54:	4b84      	ldr	r3, [pc, #528]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800db56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <HAL_RCC_OscConfig+0x2b4>
 800db60:	2301      	movs	r3, #1
 800db62:	e000      	b.n	800db66 <HAL_RCC_OscConfig+0x2b6>
 800db64:	2300      	movs	r3, #0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d00d      	beq.n	800db86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800db6a:	4b7f      	ldr	r3, [pc, #508]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800db6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db6e:	4a7e      	ldr	r2, [pc, #504]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800db70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db74:	6593      	str	r3, [r2, #88]	; 0x58
 800db76:	4b7c      	ldr	r3, [pc, #496]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800db78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db7e:	60fb      	str	r3, [r7, #12]
 800db80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800db82:	2301      	movs	r3, #1
 800db84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db86:	4b79      	ldr	r3, [pc, #484]	; (800dd6c <HAL_RCC_OscConfig+0x4bc>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d118      	bne.n	800dbc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800db92:	4b76      	ldr	r3, [pc, #472]	; (800dd6c <HAL_RCC_OscConfig+0x4bc>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4a75      	ldr	r2, [pc, #468]	; (800dd6c <HAL_RCC_OscConfig+0x4bc>)
 800db98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800db9e:	f7fb fb17 	bl	80091d0 <HAL_GetTick>
 800dba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dba4:	e008      	b.n	800dbb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dba6:	f7fb fb13 	bl	80091d0 <HAL_GetTick>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d901      	bls.n	800dbb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	e183      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dbb8:	4b6c      	ldr	r3, [pc, #432]	; (800dd6c <HAL_RCC_OscConfig+0x4bc>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d0f0      	beq.n	800dba6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	689b      	ldr	r3, [r3, #8]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d108      	bne.n	800dbde <HAL_RCC_OscConfig+0x32e>
 800dbcc:	4b66      	ldr	r3, [pc, #408]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dbce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbd2:	4a65      	ldr	r2, [pc, #404]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dbd4:	f043 0301 	orr.w	r3, r3, #1
 800dbd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dbdc:	e024      	b.n	800dc28 <HAL_RCC_OscConfig+0x378>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	689b      	ldr	r3, [r3, #8]
 800dbe2:	2b05      	cmp	r3, #5
 800dbe4:	d110      	bne.n	800dc08 <HAL_RCC_OscConfig+0x358>
 800dbe6:	4b60      	ldr	r3, [pc, #384]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dbe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbec:	4a5e      	ldr	r2, [pc, #376]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dbee:	f043 0304 	orr.w	r3, r3, #4
 800dbf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dbf6:	4b5c      	ldr	r3, [pc, #368]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbfc:	4a5a      	ldr	r2, [pc, #360]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dbfe:	f043 0301 	orr.w	r3, r3, #1
 800dc02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dc06:	e00f      	b.n	800dc28 <HAL_RCC_OscConfig+0x378>
 800dc08:	4b57      	ldr	r3, [pc, #348]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dc0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc0e:	4a56      	ldr	r2, [pc, #344]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dc10:	f023 0301 	bic.w	r3, r3, #1
 800dc14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dc18:	4b53      	ldr	r3, [pc, #332]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dc1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc1e:	4a52      	ldr	r2, [pc, #328]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dc20:	f023 0304 	bic.w	r3, r3, #4
 800dc24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d016      	beq.n	800dc5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc30:	f7fb face 	bl	80091d0 <HAL_GetTick>
 800dc34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc36:	e00a      	b.n	800dc4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc38:	f7fb faca 	bl	80091d0 <HAL_GetTick>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d901      	bls.n	800dc4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	e138      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc4e:	4b46      	ldr	r3, [pc, #280]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dc50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc54:	f003 0302 	and.w	r3, r3, #2
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d0ed      	beq.n	800dc38 <HAL_RCC_OscConfig+0x388>
 800dc5c:	e015      	b.n	800dc8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc5e:	f7fb fab7 	bl	80091d0 <HAL_GetTick>
 800dc62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800dc64:	e00a      	b.n	800dc7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc66:	f7fb fab3 	bl	80091d0 <HAL_GetTick>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d901      	bls.n	800dc7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800dc78:	2303      	movs	r3, #3
 800dc7a:	e121      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800dc7c:	4b3a      	ldr	r3, [pc, #232]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dc7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc82:	f003 0302 	and.w	r3, r3, #2
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1ed      	bne.n	800dc66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dc8a:	7ffb      	ldrb	r3, [r7, #31]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d105      	bne.n	800dc9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc90:	4b35      	ldr	r3, [pc, #212]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dc92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc94:	4a34      	ldr	r2, [pc, #208]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dc96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f003 0320 	and.w	r3, r3, #32
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d03c      	beq.n	800dd22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d01c      	beq.n	800dcea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dcb0:	4b2d      	ldr	r3, [pc, #180]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dcb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dcb6:	4a2c      	ldr	r2, [pc, #176]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dcb8:	f043 0301 	orr.w	r3, r3, #1
 800dcbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcc0:	f7fb fa86 	bl	80091d0 <HAL_GetTick>
 800dcc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dcc6:	e008      	b.n	800dcda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dcc8:	f7fb fa82 	bl	80091d0 <HAL_GetTick>
 800dccc:	4602      	mov	r2, r0
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	d901      	bls.n	800dcda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e0f2      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dcda:	4b23      	ldr	r3, [pc, #140]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dcdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dce0:	f003 0302 	and.w	r3, r3, #2
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d0ef      	beq.n	800dcc8 <HAL_RCC_OscConfig+0x418>
 800dce8:	e01b      	b.n	800dd22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dcea:	4b1f      	ldr	r3, [pc, #124]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dcec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dcf0:	4a1d      	ldr	r2, [pc, #116]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dcf2:	f023 0301 	bic.w	r3, r3, #1
 800dcf6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcfa:	f7fb fa69 	bl	80091d0 <HAL_GetTick>
 800dcfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dd00:	e008      	b.n	800dd14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd02:	f7fb fa65 	bl	80091d0 <HAL_GetTick>
 800dd06:	4602      	mov	r2, r0
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	d901      	bls.n	800dd14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800dd10:	2303      	movs	r3, #3
 800dd12:	e0d5      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dd14:	4b14      	ldr	r3, [pc, #80]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dd16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dd1a:	f003 0302 	and.w	r3, r3, #2
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1ef      	bne.n	800dd02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	69db      	ldr	r3, [r3, #28]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 80c9 	beq.w	800debe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dd2c:	4b0e      	ldr	r3, [pc, #56]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	f003 030c 	and.w	r3, r3, #12
 800dd34:	2b0c      	cmp	r3, #12
 800dd36:	f000 8083 	beq.w	800de40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	69db      	ldr	r3, [r3, #28]
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d15e      	bne.n	800de00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dd42:	4b09      	ldr	r3, [pc, #36]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a08      	ldr	r2, [pc, #32]	; (800dd68 <HAL_RCC_OscConfig+0x4b8>)
 800dd48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dd4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd4e:	f7fb fa3f 	bl	80091d0 <HAL_GetTick>
 800dd52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dd54:	e00c      	b.n	800dd70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dd56:	f7fb fa3b 	bl	80091d0 <HAL_GetTick>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	2b02      	cmp	r3, #2
 800dd62:	d905      	bls.n	800dd70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800dd64:	2303      	movs	r3, #3
 800dd66:	e0ab      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
 800dd68:	40021000 	.word	0x40021000
 800dd6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dd70:	4b55      	ldr	r3, [pc, #340]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d1ec      	bne.n	800dd56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dd7c:	4b52      	ldr	r3, [pc, #328]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800dd7e:	68da      	ldr	r2, [r3, #12]
 800dd80:	4b52      	ldr	r3, [pc, #328]	; (800decc <HAL_RCC_OscConfig+0x61c>)
 800dd82:	4013      	ands	r3, r2
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	6a11      	ldr	r1, [r2, #32]
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dd8c:	3a01      	subs	r2, #1
 800dd8e:	0112      	lsls	r2, r2, #4
 800dd90:	4311      	orrs	r1, r2
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dd96:	0212      	lsls	r2, r2, #8
 800dd98:	4311      	orrs	r1, r2
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd9e:	0852      	lsrs	r2, r2, #1
 800dda0:	3a01      	subs	r2, #1
 800dda2:	0552      	lsls	r2, r2, #21
 800dda4:	4311      	orrs	r1, r2
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ddaa:	0852      	lsrs	r2, r2, #1
 800ddac:	3a01      	subs	r2, #1
 800ddae:	0652      	lsls	r2, r2, #25
 800ddb0:	4311      	orrs	r1, r2
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ddb6:	06d2      	lsls	r2, r2, #27
 800ddb8:	430a      	orrs	r2, r1
 800ddba:	4943      	ldr	r1, [pc, #268]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ddc0:	4b41      	ldr	r3, [pc, #260]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a40      	ldr	r2, [pc, #256]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800ddc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ddca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ddcc:	4b3e      	ldr	r3, [pc, #248]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	4a3d      	ldr	r2, [pc, #244]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800ddd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ddd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddd8:	f7fb f9fa 	bl	80091d0 <HAL_GetTick>
 800dddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ddde:	e008      	b.n	800ddf2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dde0:	f7fb f9f6 	bl	80091d0 <HAL_GetTick>
 800dde4:	4602      	mov	r2, r0
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d901      	bls.n	800ddf2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800ddee:	2303      	movs	r3, #3
 800ddf0:	e066      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ddf2:	4b35      	ldr	r3, [pc, #212]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d0f0      	beq.n	800dde0 <HAL_RCC_OscConfig+0x530>
 800ddfe:	e05e      	b.n	800debe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de00:	4b31      	ldr	r3, [pc, #196]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a30      	ldr	r2, [pc, #192]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800de06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de0c:	f7fb f9e0 	bl	80091d0 <HAL_GetTick>
 800de10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800de12:	e008      	b.n	800de26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de14:	f7fb f9dc 	bl	80091d0 <HAL_GetTick>
 800de18:	4602      	mov	r2, r0
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	2b02      	cmp	r3, #2
 800de20:	d901      	bls.n	800de26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800de22:	2303      	movs	r3, #3
 800de24:	e04c      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800de26:	4b28      	ldr	r3, [pc, #160]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d1f0      	bne.n	800de14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800de32:	4b25      	ldr	r3, [pc, #148]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800de34:	68da      	ldr	r2, [r3, #12]
 800de36:	4924      	ldr	r1, [pc, #144]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800de38:	4b25      	ldr	r3, [pc, #148]	; (800ded0 <HAL_RCC_OscConfig+0x620>)
 800de3a:	4013      	ands	r3, r2
 800de3c:	60cb      	str	r3, [r1, #12]
 800de3e:	e03e      	b.n	800debe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	69db      	ldr	r3, [r3, #28]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d101      	bne.n	800de4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	e039      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800de4c:	4b1e      	ldr	r3, [pc, #120]	; (800dec8 <HAL_RCC_OscConfig+0x618>)
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	f003 0203 	and.w	r2, r3, #3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6a1b      	ldr	r3, [r3, #32]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d12c      	bne.n	800deba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6a:	3b01      	subs	r3, #1
 800de6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de6e:	429a      	cmp	r2, r3
 800de70:	d123      	bne.n	800deba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800de7e:	429a      	cmp	r2, r3
 800de80:	d11b      	bne.n	800deba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800de8e:	429a      	cmp	r2, r3
 800de90:	d113      	bne.n	800deba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9c:	085b      	lsrs	r3, r3, #1
 800de9e:	3b01      	subs	r3, #1
 800dea0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d109      	bne.n	800deba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb0:	085b      	lsrs	r3, r3, #1
 800deb2:	3b01      	subs	r3, #1
 800deb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d001      	beq.n	800debe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e000      	b.n	800dec0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3720      	adds	r7, #32
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	40021000 	.word	0x40021000
 800decc:	019f800c 	.word	0x019f800c
 800ded0:	feeefffc 	.word	0xfeeefffc

0800ded4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800dede:	2300      	movs	r3, #0
 800dee0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	e11e      	b.n	800e12a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800deec:	4b91      	ldr	r3, [pc, #580]	; (800e134 <HAL_RCC_ClockConfig+0x260>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f003 030f 	and.w	r3, r3, #15
 800def4:	683a      	ldr	r2, [r7, #0]
 800def6:	429a      	cmp	r2, r3
 800def8:	d910      	bls.n	800df1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800defa:	4b8e      	ldr	r3, [pc, #568]	; (800e134 <HAL_RCC_ClockConfig+0x260>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f023 020f 	bic.w	r2, r3, #15
 800df02:	498c      	ldr	r1, [pc, #560]	; (800e134 <HAL_RCC_ClockConfig+0x260>)
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	4313      	orrs	r3, r2
 800df08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df0a:	4b8a      	ldr	r3, [pc, #552]	; (800e134 <HAL_RCC_ClockConfig+0x260>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f003 030f 	and.w	r3, r3, #15
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	429a      	cmp	r2, r3
 800df16:	d001      	beq.n	800df1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	e106      	b.n	800e12a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f003 0301 	and.w	r3, r3, #1
 800df24:	2b00      	cmp	r3, #0
 800df26:	d073      	beq.n	800e010 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	2b03      	cmp	r3, #3
 800df2e:	d129      	bne.n	800df84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df30:	4b81      	ldr	r3, [pc, #516]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d101      	bne.n	800df40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800df3c:	2301      	movs	r3, #1
 800df3e:	e0f4      	b.n	800e12a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800df40:	f000 f9d0 	bl	800e2e4 <RCC_GetSysClockFreqFromPLLSource>
 800df44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	4a7c      	ldr	r2, [pc, #496]	; (800e13c <HAL_RCC_ClockConfig+0x268>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d93f      	bls.n	800dfce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800df4e:	4b7a      	ldr	r3, [pc, #488]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d009      	beq.n	800df6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800df62:	2b00      	cmp	r3, #0
 800df64:	d033      	beq.n	800dfce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d12f      	bne.n	800dfce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800df6e:	4b72      	ldr	r3, [pc, #456]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df76:	4a70      	ldr	r2, [pc, #448]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800df78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800df7e:	2380      	movs	r3, #128	; 0x80
 800df80:	617b      	str	r3, [r7, #20]
 800df82:	e024      	b.n	800dfce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	2b02      	cmp	r3, #2
 800df8a:	d107      	bne.n	800df9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800df8c:	4b6a      	ldr	r3, [pc, #424]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df94:	2b00      	cmp	r3, #0
 800df96:	d109      	bne.n	800dfac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e0c6      	b.n	800e12a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800df9c:	4b66      	ldr	r3, [pc, #408]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d101      	bne.n	800dfac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e0be      	b.n	800e12a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800dfac:	f000 f8ce 	bl	800e14c <HAL_RCC_GetSysClockFreq>
 800dfb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	4a61      	ldr	r2, [pc, #388]	; (800e13c <HAL_RCC_ClockConfig+0x268>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d909      	bls.n	800dfce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dfba:	4b5f      	ldr	r3, [pc, #380]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dfc2:	4a5d      	ldr	r2, [pc, #372]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800dfc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800dfca:	2380      	movs	r3, #128	; 0x80
 800dfcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dfce:	4b5a      	ldr	r3, [pc, #360]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	f023 0203 	bic.w	r2, r3, #3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	4957      	ldr	r1, [pc, #348]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfe0:	f7fb f8f6 	bl	80091d0 <HAL_GetTick>
 800dfe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dfe6:	e00a      	b.n	800dffe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dfe8:	f7fb f8f2 	bl	80091d0 <HAL_GetTick>
 800dfec:	4602      	mov	r2, r0
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d901      	bls.n	800dffe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800dffa:	2303      	movs	r3, #3
 800dffc:	e095      	b.n	800e12a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dffe:	4b4e      	ldr	r3, [pc, #312]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	f003 020c 	and.w	r2, r3, #12
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d1eb      	bne.n	800dfe8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f003 0302 	and.w	r3, r3, #2
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d023      	beq.n	800e064 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f003 0304 	and.w	r3, r3, #4
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e028:	4b43      	ldr	r3, [pc, #268]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	4a42      	ldr	r2, [pc, #264]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e02e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e032:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f003 0308 	and.w	r3, r3, #8
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d007      	beq.n	800e050 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800e040:	4b3d      	ldr	r3, [pc, #244]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e048:	4a3b      	ldr	r2, [pc, #236]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e04a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e04e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e050:	4b39      	ldr	r3, [pc, #228]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	4936      	ldr	r1, [pc, #216]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e05e:	4313      	orrs	r3, r2
 800e060:	608b      	str	r3, [r1, #8]
 800e062:	e008      	b.n	800e076 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	2b80      	cmp	r3, #128	; 0x80
 800e068:	d105      	bne.n	800e076 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800e06a:	4b33      	ldr	r3, [pc, #204]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	4a32      	ldr	r2, [pc, #200]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e074:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e076:	4b2f      	ldr	r3, [pc, #188]	; (800e134 <HAL_RCC_ClockConfig+0x260>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f003 030f 	and.w	r3, r3, #15
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	429a      	cmp	r2, r3
 800e082:	d21d      	bcs.n	800e0c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e084:	4b2b      	ldr	r3, [pc, #172]	; (800e134 <HAL_RCC_ClockConfig+0x260>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f023 020f 	bic.w	r2, r3, #15
 800e08c:	4929      	ldr	r1, [pc, #164]	; (800e134 <HAL_RCC_ClockConfig+0x260>)
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	4313      	orrs	r3, r2
 800e092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e094:	f7fb f89c 	bl	80091d0 <HAL_GetTick>
 800e098:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e09a:	e00a      	b.n	800e0b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e09c:	f7fb f898 	bl	80091d0 <HAL_GetTick>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d901      	bls.n	800e0b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	e03b      	b.n	800e12a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e0b2:	4b20      	ldr	r3, [pc, #128]	; (800e134 <HAL_RCC_ClockConfig+0x260>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f003 030f 	and.w	r3, r3, #15
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d1ed      	bne.n	800e09c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 0304 	and.w	r3, r3, #4
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d008      	beq.n	800e0de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e0cc:	4b1a      	ldr	r3, [pc, #104]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	4917      	ldr	r1, [pc, #92]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f003 0308 	and.w	r3, r3, #8
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d009      	beq.n	800e0fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e0ea:	4b13      	ldr	r3, [pc, #76]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	00db      	lsls	r3, r3, #3
 800e0f8:	490f      	ldr	r1, [pc, #60]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e0fe:	f000 f825 	bl	800e14c <HAL_RCC_GetSysClockFreq>
 800e102:	4602      	mov	r2, r0
 800e104:	4b0c      	ldr	r3, [pc, #48]	; (800e138 <HAL_RCC_ClockConfig+0x264>)
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	091b      	lsrs	r3, r3, #4
 800e10a:	f003 030f 	and.w	r3, r3, #15
 800e10e:	490c      	ldr	r1, [pc, #48]	; (800e140 <HAL_RCC_ClockConfig+0x26c>)
 800e110:	5ccb      	ldrb	r3, [r1, r3]
 800e112:	f003 031f 	and.w	r3, r3, #31
 800e116:	fa22 f303 	lsr.w	r3, r2, r3
 800e11a:	4a0a      	ldr	r2, [pc, #40]	; (800e144 <HAL_RCC_ClockConfig+0x270>)
 800e11c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e11e:	4b0a      	ldr	r3, [pc, #40]	; (800e148 <HAL_RCC_ClockConfig+0x274>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4618      	mov	r0, r3
 800e124:	f7fa fe92 	bl	8008e4c <HAL_InitTick>
 800e128:	4603      	mov	r3, r0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3718      	adds	r7, #24
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	40022000 	.word	0x40022000
 800e138:	40021000 	.word	0x40021000
 800e13c:	04c4b400 	.word	0x04c4b400
 800e140:	080204e8 	.word	0x080204e8
 800e144:	20000008 	.word	0x20000008
 800e148:	2000000c 	.word	0x2000000c

0800e14c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b087      	sub	sp, #28
 800e150:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e152:	4b2c      	ldr	r3, [pc, #176]	; (800e204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	f003 030c 	and.w	r3, r3, #12
 800e15a:	2b04      	cmp	r3, #4
 800e15c:	d102      	bne.n	800e164 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e15e:	4b2a      	ldr	r3, [pc, #168]	; (800e208 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e160:	613b      	str	r3, [r7, #16]
 800e162:	e047      	b.n	800e1f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e164:	4b27      	ldr	r3, [pc, #156]	; (800e204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	f003 030c 	and.w	r3, r3, #12
 800e16c:	2b08      	cmp	r3, #8
 800e16e:	d102      	bne.n	800e176 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e170:	4b26      	ldr	r3, [pc, #152]	; (800e20c <HAL_RCC_GetSysClockFreq+0xc0>)
 800e172:	613b      	str	r3, [r7, #16]
 800e174:	e03e      	b.n	800e1f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800e176:	4b23      	ldr	r3, [pc, #140]	; (800e204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e178:	689b      	ldr	r3, [r3, #8]
 800e17a:	f003 030c 	and.w	r3, r3, #12
 800e17e:	2b0c      	cmp	r3, #12
 800e180:	d136      	bne.n	800e1f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e182:	4b20      	ldr	r3, [pc, #128]	; (800e204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	f003 0303 	and.w	r3, r3, #3
 800e18a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e18c:	4b1d      	ldr	r3, [pc, #116]	; (800e204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	091b      	lsrs	r3, r3, #4
 800e192:	f003 030f 	and.w	r3, r3, #15
 800e196:	3301      	adds	r3, #1
 800e198:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2b03      	cmp	r3, #3
 800e19e:	d10c      	bne.n	800e1ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e1a0:	4a1a      	ldr	r2, [pc, #104]	; (800e20c <HAL_RCC_GetSysClockFreq+0xc0>)
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1a8:	4a16      	ldr	r2, [pc, #88]	; (800e204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e1aa:	68d2      	ldr	r2, [r2, #12]
 800e1ac:	0a12      	lsrs	r2, r2, #8
 800e1ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e1b2:	fb02 f303 	mul.w	r3, r2, r3
 800e1b6:	617b      	str	r3, [r7, #20]
      break;
 800e1b8:	e00c      	b.n	800e1d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e1ba:	4a13      	ldr	r2, [pc, #76]	; (800e208 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1c2:	4a10      	ldr	r2, [pc, #64]	; (800e204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e1c4:	68d2      	ldr	r2, [r2, #12]
 800e1c6:	0a12      	lsrs	r2, r2, #8
 800e1c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e1cc:	fb02 f303 	mul.w	r3, r2, r3
 800e1d0:	617b      	str	r3, [r7, #20]
      break;
 800e1d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e1d4:	4b0b      	ldr	r3, [pc, #44]	; (800e204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	0e5b      	lsrs	r3, r3, #25
 800e1da:	f003 0303 	and.w	r3, r3, #3
 800e1de:	3301      	adds	r3, #1
 800e1e0:	005b      	lsls	r3, r3, #1
 800e1e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800e1e4:	697a      	ldr	r2, [r7, #20]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ec:	613b      	str	r3, [r7, #16]
 800e1ee:	e001      	b.n	800e1f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e1f4:	693b      	ldr	r3, [r7, #16]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	371c      	adds	r7, #28
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	40021000 	.word	0x40021000
 800e208:	00f42400 	.word	0x00f42400
 800e20c:	007a1200 	.word	0x007a1200

0800e210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e210:	b480      	push	{r7}
 800e212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e214:	4b03      	ldr	r3, [pc, #12]	; (800e224 <HAL_RCC_GetHCLKFreq+0x14>)
 800e216:	681b      	ldr	r3, [r3, #0]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop
 800e224:	20000008 	.word	0x20000008

0800e228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e22c:	f7ff fff0 	bl	800e210 <HAL_RCC_GetHCLKFreq>
 800e230:	4602      	mov	r2, r0
 800e232:	4b06      	ldr	r3, [pc, #24]	; (800e24c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e234:	689b      	ldr	r3, [r3, #8]
 800e236:	0a1b      	lsrs	r3, r3, #8
 800e238:	f003 0307 	and.w	r3, r3, #7
 800e23c:	4904      	ldr	r1, [pc, #16]	; (800e250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e23e:	5ccb      	ldrb	r3, [r1, r3]
 800e240:	f003 031f 	and.w	r3, r3, #31
 800e244:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e248:	4618      	mov	r0, r3
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	40021000 	.word	0x40021000
 800e250:	080204f8 	.word	0x080204f8

0800e254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e258:	f7ff ffda 	bl	800e210 <HAL_RCC_GetHCLKFreq>
 800e25c:	4602      	mov	r2, r0
 800e25e:	4b06      	ldr	r3, [pc, #24]	; (800e278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	0adb      	lsrs	r3, r3, #11
 800e264:	f003 0307 	and.w	r3, r3, #7
 800e268:	4904      	ldr	r1, [pc, #16]	; (800e27c <HAL_RCC_GetPCLK2Freq+0x28>)
 800e26a:	5ccb      	ldrb	r3, [r1, r3]
 800e26c:	f003 031f 	and.w	r3, r3, #31
 800e270:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e274:	4618      	mov	r0, r3
 800e276:	bd80      	pop	{r7, pc}
 800e278:	40021000 	.word	0x40021000
 800e27c:	080204f8 	.word	0x080204f8

0800e280 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	220f      	movs	r2, #15
 800e28e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800e290:	4b12      	ldr	r3, [pc, #72]	; (800e2dc <HAL_RCC_GetClockConfig+0x5c>)
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	f003 0203 	and.w	r2, r3, #3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800e29c:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <HAL_RCC_GetClockConfig+0x5c>)
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800e2a8:	4b0c      	ldr	r3, [pc, #48]	; (800e2dc <HAL_RCC_GetClockConfig+0x5c>)
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800e2b4:	4b09      	ldr	r3, [pc, #36]	; (800e2dc <HAL_RCC_GetClockConfig+0x5c>)
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	08db      	lsrs	r3, r3, #3
 800e2ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800e2c2:	4b07      	ldr	r3, [pc, #28]	; (800e2e0 <HAL_RCC_GetClockConfig+0x60>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f003 020f 	and.w	r2, r3, #15
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	601a      	str	r2, [r3, #0]
}
 800e2ce:	bf00      	nop
 800e2d0:	370c      	adds	r7, #12
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	40021000 	.word	0x40021000
 800e2e0:	40022000 	.word	0x40022000

0800e2e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b087      	sub	sp, #28
 800e2e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e2ea:	4b1e      	ldr	r3, [pc, #120]	; (800e364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	f003 0303 	and.w	r3, r3, #3
 800e2f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e2f4:	4b1b      	ldr	r3, [pc, #108]	; (800e364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	091b      	lsrs	r3, r3, #4
 800e2fa:	f003 030f 	and.w	r3, r3, #15
 800e2fe:	3301      	adds	r3, #1
 800e300:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	2b03      	cmp	r3, #3
 800e306:	d10c      	bne.n	800e322 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e308:	4a17      	ldr	r2, [pc, #92]	; (800e368 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e310:	4a14      	ldr	r2, [pc, #80]	; (800e364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e312:	68d2      	ldr	r2, [r2, #12]
 800e314:	0a12      	lsrs	r2, r2, #8
 800e316:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e31a:	fb02 f303 	mul.w	r3, r2, r3
 800e31e:	617b      	str	r3, [r7, #20]
    break;
 800e320:	e00c      	b.n	800e33c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e322:	4a12      	ldr	r2, [pc, #72]	; (800e36c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	fbb2 f3f3 	udiv	r3, r2, r3
 800e32a:	4a0e      	ldr	r2, [pc, #56]	; (800e364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e32c:	68d2      	ldr	r2, [r2, #12]
 800e32e:	0a12      	lsrs	r2, r2, #8
 800e330:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e334:	fb02 f303 	mul.w	r3, r2, r3
 800e338:	617b      	str	r3, [r7, #20]
    break;
 800e33a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e33c:	4b09      	ldr	r3, [pc, #36]	; (800e364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	0e5b      	lsrs	r3, r3, #25
 800e342:	f003 0303 	and.w	r3, r3, #3
 800e346:	3301      	adds	r3, #1
 800e348:	005b      	lsls	r3, r3, #1
 800e34a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e34c:	697a      	ldr	r2, [r7, #20]
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	fbb2 f3f3 	udiv	r3, r2, r3
 800e354:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e356:	687b      	ldr	r3, [r7, #4]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	371c      	adds	r7, #28
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr
 800e364:	40021000 	.word	0x40021000
 800e368:	007a1200 	.word	0x007a1200
 800e36c:	00f42400 	.word	0x00f42400

0800e370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e378:	2300      	movs	r3, #0
 800e37a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e37c:	2300      	movs	r3, #0
 800e37e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f000 8098 	beq.w	800e4be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e38e:	2300      	movs	r3, #0
 800e390:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e392:	4b43      	ldr	r3, [pc, #268]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d10d      	bne.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e39e:	4b40      	ldr	r3, [pc, #256]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3a2:	4a3f      	ldr	r2, [pc, #252]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3a8:	6593      	str	r3, [r2, #88]	; 0x58
 800e3aa:	4b3d      	ldr	r3, [pc, #244]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3b2:	60bb      	str	r3, [r7, #8]
 800e3b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e3ba:	4b3a      	ldr	r3, [pc, #232]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a39      	ldr	r2, [pc, #228]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e3c6:	f7fa ff03 	bl	80091d0 <HAL_GetTick>
 800e3ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e3cc:	e009      	b.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e3ce:	f7fa feff 	bl	80091d0 <HAL_GetTick>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	1ad3      	subs	r3, r2, r3
 800e3d8:	2b02      	cmp	r3, #2
 800e3da:	d902      	bls.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e3dc:	2303      	movs	r3, #3
 800e3de:	74fb      	strb	r3, [r7, #19]
        break;
 800e3e0:	e005      	b.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e3e2:	4b30      	ldr	r3, [pc, #192]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d0ef      	beq.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e3ee:	7cfb      	ldrb	r3, [r7, #19]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d159      	bne.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e3f4:	4b2a      	ldr	r3, [pc, #168]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d01e      	beq.n	800e444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e40a:	697a      	ldr	r2, [r7, #20]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d019      	beq.n	800e444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e410:	4b23      	ldr	r3, [pc, #140]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e41a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e41c:	4b20      	ldr	r3, [pc, #128]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e422:	4a1f      	ldr	r2, [pc, #124]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e42c:	4b1c      	ldr	r3, [pc, #112]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e432:	4a1b      	ldr	r2, [pc, #108]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e43c:	4a18      	ldr	r2, [pc, #96]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d016      	beq.n	800e47c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e44e:	f7fa febf 	bl	80091d0 <HAL_GetTick>
 800e452:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e454:	e00b      	b.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e456:	f7fa febb 	bl	80091d0 <HAL_GetTick>
 800e45a:	4602      	mov	r2, r0
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	1ad3      	subs	r3, r2, r3
 800e460:	f241 3288 	movw	r2, #5000	; 0x1388
 800e464:	4293      	cmp	r3, r2
 800e466:	d902      	bls.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e468:	2303      	movs	r3, #3
 800e46a:	74fb      	strb	r3, [r7, #19]
            break;
 800e46c:	e006      	b.n	800e47c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e46e:	4b0c      	ldr	r3, [pc, #48]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e474:	f003 0302 	and.w	r3, r3, #2
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d0ec      	beq.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e47c:	7cfb      	ldrb	r3, [r7, #19]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d10b      	bne.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e482:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e490:	4903      	ldr	r1, [pc, #12]	; (800e4a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e492:	4313      	orrs	r3, r2
 800e494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e498:	e008      	b.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e49a:	7cfb      	ldrb	r3, [r7, #19]
 800e49c:	74bb      	strb	r3, [r7, #18]
 800e49e:	e005      	b.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e4a0:	40021000 	.word	0x40021000
 800e4a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4a8:	7cfb      	ldrb	r3, [r7, #19]
 800e4aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e4ac:	7c7b      	ldrb	r3, [r7, #17]
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d105      	bne.n	800e4be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e4b2:	4ba7      	ldr	r3, [pc, #668]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4b6:	4aa6      	ldr	r2, [pc, #664]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e4bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f003 0301 	and.w	r3, r3, #1
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00a      	beq.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e4ca:	4ba1      	ldr	r3, [pc, #644]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4d0:	f023 0203 	bic.w	r2, r3, #3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	499d      	ldr	r1, [pc, #628]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f003 0302 	and.w	r3, r3, #2
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d00a      	beq.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e4ec:	4b98      	ldr	r3, [pc, #608]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4f2:	f023 020c 	bic.w	r2, r3, #12
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	4995      	ldr	r1, [pc, #596]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f003 0304 	and.w	r3, r3, #4
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00a      	beq.n	800e524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e50e:	4b90      	ldr	r3, [pc, #576]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e514:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	498c      	ldr	r1, [pc, #560]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e51e:	4313      	orrs	r3, r2
 800e520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f003 0308 	and.w	r3, r3, #8
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00a      	beq.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e530:	4b87      	ldr	r3, [pc, #540]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e536:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	691b      	ldr	r3, [r3, #16]
 800e53e:	4984      	ldr	r1, [pc, #528]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e540:	4313      	orrs	r3, r2
 800e542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f003 0310 	and.w	r3, r3, #16
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00a      	beq.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e552:	4b7f      	ldr	r3, [pc, #508]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	695b      	ldr	r3, [r3, #20]
 800e560:	497b      	ldr	r1, [pc, #492]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e562:	4313      	orrs	r3, r2
 800e564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f003 0320 	and.w	r3, r3, #32
 800e570:	2b00      	cmp	r3, #0
 800e572:	d00a      	beq.n	800e58a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e574:	4b76      	ldr	r3, [pc, #472]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e57a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	4973      	ldr	r1, [pc, #460]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e584:	4313      	orrs	r3, r2
 800e586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00a      	beq.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e596:	4b6e      	ldr	r3, [pc, #440]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e59c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	496a      	ldr	r1, [pc, #424]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00a      	beq.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e5b8:	4b65      	ldr	r3, [pc, #404]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6a1b      	ldr	r3, [r3, #32]
 800e5c6:	4962      	ldr	r1, [pc, #392]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00a      	beq.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e5da:	4b5d      	ldr	r3, [pc, #372]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e8:	4959      	ldr	r1, [pc, #356]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00a      	beq.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e5fc:	4b54      	ldr	r3, [pc, #336]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e602:	f023 0203 	bic.w	r2, r3, #3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e60a:	4951      	ldr	r1, [pc, #324]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e60c:	4313      	orrs	r3, r2
 800e60e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00a      	beq.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e61e:	4b4c      	ldr	r3, [pc, #304]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e62c:	4948      	ldr	r1, [pc, #288]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e62e:	4313      	orrs	r3, r2
 800e630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d015      	beq.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e640:	4b43      	ldr	r3, [pc, #268]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e64e:	4940      	ldr	r1, [pc, #256]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e650:	4313      	orrs	r3, r2
 800e652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e65e:	d105      	bne.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e660:	4b3b      	ldr	r3, [pc, #236]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	4a3a      	ldr	r2, [pc, #232]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e66a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e674:	2b00      	cmp	r3, #0
 800e676:	d015      	beq.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e678:	4b35      	ldr	r3, [pc, #212]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e67e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e686:	4932      	ldr	r1, [pc, #200]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e688:	4313      	orrs	r3, r2
 800e68a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e696:	d105      	bne.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e698:	4b2d      	ldr	r3, [pc, #180]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	4a2c      	ldr	r2, [pc, #176]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e69e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d015      	beq.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e6b0:	4b27      	ldr	r3, [pc, #156]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6be:	4924      	ldr	r1, [pc, #144]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e6ce:	d105      	bne.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e6d0:	4b1f      	ldr	r3, [pc, #124]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	4a1e      	ldr	r2, [pc, #120]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d015      	beq.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e6e8:	4b19      	ldr	r3, [pc, #100]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f6:	4916      	ldr	r1, [pc, #88]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e706:	d105      	bne.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e708:	4b11      	ldr	r3, [pc, #68]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	4a10      	ldr	r2, [pc, #64]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e70e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e712:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d019      	beq.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e720:	4b0b      	ldr	r3, [pc, #44]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e72e:	4908      	ldr	r1, [pc, #32]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e730:	4313      	orrs	r3, r2
 800e732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e73a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e73e:	d109      	bne.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e740:	4b03      	ldr	r3, [pc, #12]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	4a02      	ldr	r2, [pc, #8]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e74a:	60d3      	str	r3, [r2, #12]
 800e74c:	e002      	b.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e74e:	bf00      	nop
 800e750:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d015      	beq.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e760:	4b29      	ldr	r3, [pc, #164]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e766:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e76e:	4926      	ldr	r1, [pc, #152]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e770:	4313      	orrs	r3, r2
 800e772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e77a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e77e:	d105      	bne.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e780:	4b21      	ldr	r3, [pc, #132]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	4a20      	ldr	r2, [pc, #128]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e78a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e794:	2b00      	cmp	r3, #0
 800e796:	d015      	beq.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e798:	4b1b      	ldr	r3, [pc, #108]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e79e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7a6:	4918      	ldr	r1, [pc, #96]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7b6:	d105      	bne.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e7b8:	4b13      	ldr	r3, [pc, #76]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	4a12      	ldr	r2, [pc, #72]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e7be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e7c2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d015      	beq.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e7d0:	4b0d      	ldr	r3, [pc, #52]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e7d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7de:	490a      	ldr	r1, [pc, #40]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e7ee:	d105      	bne.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e7f0:	4b05      	ldr	r3, [pc, #20]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	4a04      	ldr	r2, [pc, #16]	; (800e808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e7f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e7fc:	7cbb      	ldrb	r3, [r7, #18]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3718      	adds	r7, #24
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	40021000 	.word	0x40021000

0800e80c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d101      	bne.n	800e81e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	e049      	b.n	800e8b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e824:	b2db      	uxtb	r3, r3
 800e826:	2b00      	cmp	r3, #0
 800e828:	d106      	bne.n	800e838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7fa f8aa 	bl	800898c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2202      	movs	r2, #2
 800e83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	3304      	adds	r3, #4
 800e848:	4619      	mov	r1, r3
 800e84a:	4610      	mov	r0, r2
 800e84c:	f000 fdc4 	bl	800f3d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2201      	movs	r2, #1
 800e884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
	...

0800e8bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d001      	beq.n	800e8d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	e054      	b.n	800e97e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2202      	movs	r2, #2
 800e8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68da      	ldr	r2, [r3, #12]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f042 0201 	orr.w	r2, r2, #1
 800e8ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a26      	ldr	r2, [pc, #152]	; (800e98c <HAL_TIM_Base_Start_IT+0xd0>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d022      	beq.n	800e93c <HAL_TIM_Base_Start_IT+0x80>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8fe:	d01d      	beq.n	800e93c <HAL_TIM_Base_Start_IT+0x80>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4a22      	ldr	r2, [pc, #136]	; (800e990 <HAL_TIM_Base_Start_IT+0xd4>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d018      	beq.n	800e93c <HAL_TIM_Base_Start_IT+0x80>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4a21      	ldr	r2, [pc, #132]	; (800e994 <HAL_TIM_Base_Start_IT+0xd8>)
 800e910:	4293      	cmp	r3, r2
 800e912:	d013      	beq.n	800e93c <HAL_TIM_Base_Start_IT+0x80>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a1f      	ldr	r2, [pc, #124]	; (800e998 <HAL_TIM_Base_Start_IT+0xdc>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d00e      	beq.n	800e93c <HAL_TIM_Base_Start_IT+0x80>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a1e      	ldr	r2, [pc, #120]	; (800e99c <HAL_TIM_Base_Start_IT+0xe0>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d009      	beq.n	800e93c <HAL_TIM_Base_Start_IT+0x80>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4a1c      	ldr	r2, [pc, #112]	; (800e9a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d004      	beq.n	800e93c <HAL_TIM_Base_Start_IT+0x80>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a1b      	ldr	r2, [pc, #108]	; (800e9a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d115      	bne.n	800e968 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	689a      	ldr	r2, [r3, #8]
 800e942:	4b19      	ldr	r3, [pc, #100]	; (800e9a8 <HAL_TIM_Base_Start_IT+0xec>)
 800e944:	4013      	ands	r3, r2
 800e946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2b06      	cmp	r3, #6
 800e94c:	d015      	beq.n	800e97a <HAL_TIM_Base_Start_IT+0xbe>
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e954:	d011      	beq.n	800e97a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f042 0201 	orr.w	r2, r2, #1
 800e964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e966:	e008      	b.n	800e97a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f042 0201 	orr.w	r2, r2, #1
 800e976:	601a      	str	r2, [r3, #0]
 800e978:	e000      	b.n	800e97c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e97a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3714      	adds	r7, #20
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	40012c00 	.word	0x40012c00
 800e990:	40000400 	.word	0x40000400
 800e994:	40000800 	.word	0x40000800
 800e998:	40000c00 	.word	0x40000c00
 800e99c:	40013400 	.word	0x40013400
 800e9a0:	40014000 	.word	0x40014000
 800e9a4:	40015000 	.word	0x40015000
 800e9a8:	00010007 	.word	0x00010007

0800e9ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d101      	bne.n	800e9be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	e049      	b.n	800ea52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d106      	bne.n	800e9d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 f841 	bl	800ea5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2202      	movs	r2, #2
 800e9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	4610      	mov	r0, r2
 800e9ec:	f000 fcf4 	bl	800f3d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2201      	movs	r2, #1
 800ea44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ea5a:	b480      	push	{r7}
 800ea5c:	b083      	sub	sp, #12
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ea62:	bf00      	nop
 800ea64:	370c      	adds	r7, #12
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr
	...

0800ea70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d109      	bne.n	800ea94 <HAL_TIM_PWM_Start+0x24>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	bf14      	ite	ne
 800ea8c:	2301      	movne	r3, #1
 800ea8e:	2300      	moveq	r3, #0
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	e03c      	b.n	800eb0e <HAL_TIM_PWM_Start+0x9e>
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	2b04      	cmp	r3, #4
 800ea98:	d109      	bne.n	800eaae <HAL_TIM_PWM_Start+0x3e>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	bf14      	ite	ne
 800eaa6:	2301      	movne	r3, #1
 800eaa8:	2300      	moveq	r3, #0
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	e02f      	b.n	800eb0e <HAL_TIM_PWM_Start+0x9e>
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	2b08      	cmp	r3, #8
 800eab2:	d109      	bne.n	800eac8 <HAL_TIM_PWM_Start+0x58>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	bf14      	ite	ne
 800eac0:	2301      	movne	r3, #1
 800eac2:	2300      	moveq	r3, #0
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	e022      	b.n	800eb0e <HAL_TIM_PWM_Start+0x9e>
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	2b0c      	cmp	r3, #12
 800eacc:	d109      	bne.n	800eae2 <HAL_TIM_PWM_Start+0x72>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	bf14      	ite	ne
 800eada:	2301      	movne	r3, #1
 800eadc:	2300      	moveq	r3, #0
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	e015      	b.n	800eb0e <HAL_TIM_PWM_Start+0x9e>
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b10      	cmp	r3, #16
 800eae6:	d109      	bne.n	800eafc <HAL_TIM_PWM_Start+0x8c>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	bf14      	ite	ne
 800eaf4:	2301      	movne	r3, #1
 800eaf6:	2300      	moveq	r3, #0
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	e008      	b.n	800eb0e <HAL_TIM_PWM_Start+0x9e>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	bf14      	ite	ne
 800eb08:	2301      	movne	r3, #1
 800eb0a:	2300      	moveq	r3, #0
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d001      	beq.n	800eb16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800eb12:	2301      	movs	r3, #1
 800eb14:	e0a6      	b.n	800ec64 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d104      	bne.n	800eb26 <HAL_TIM_PWM_Start+0xb6>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2202      	movs	r2, #2
 800eb20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb24:	e023      	b.n	800eb6e <HAL_TIM_PWM_Start+0xfe>
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	2b04      	cmp	r3, #4
 800eb2a:	d104      	bne.n	800eb36 <HAL_TIM_PWM_Start+0xc6>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2202      	movs	r2, #2
 800eb30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb34:	e01b      	b.n	800eb6e <HAL_TIM_PWM_Start+0xfe>
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	2b08      	cmp	r3, #8
 800eb3a:	d104      	bne.n	800eb46 <HAL_TIM_PWM_Start+0xd6>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2202      	movs	r2, #2
 800eb40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb44:	e013      	b.n	800eb6e <HAL_TIM_PWM_Start+0xfe>
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	2b0c      	cmp	r3, #12
 800eb4a:	d104      	bne.n	800eb56 <HAL_TIM_PWM_Start+0xe6>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2202      	movs	r2, #2
 800eb50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb54:	e00b      	b.n	800eb6e <HAL_TIM_PWM_Start+0xfe>
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	2b10      	cmp	r3, #16
 800eb5a:	d104      	bne.n	800eb66 <HAL_TIM_PWM_Start+0xf6>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb64:	e003      	b.n	800eb6e <HAL_TIM_PWM_Start+0xfe>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2202      	movs	r2, #2
 800eb6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2201      	movs	r2, #1
 800eb74:	6839      	ldr	r1, [r7, #0]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f001 f8a8 	bl	800fccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a3a      	ldr	r2, [pc, #232]	; (800ec6c <HAL_TIM_PWM_Start+0x1fc>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d018      	beq.n	800ebb8 <HAL_TIM_PWM_Start+0x148>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a39      	ldr	r2, [pc, #228]	; (800ec70 <HAL_TIM_PWM_Start+0x200>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d013      	beq.n	800ebb8 <HAL_TIM_PWM_Start+0x148>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a37      	ldr	r2, [pc, #220]	; (800ec74 <HAL_TIM_PWM_Start+0x204>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d00e      	beq.n	800ebb8 <HAL_TIM_PWM_Start+0x148>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4a36      	ldr	r2, [pc, #216]	; (800ec78 <HAL_TIM_PWM_Start+0x208>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d009      	beq.n	800ebb8 <HAL_TIM_PWM_Start+0x148>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a34      	ldr	r2, [pc, #208]	; (800ec7c <HAL_TIM_PWM_Start+0x20c>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d004      	beq.n	800ebb8 <HAL_TIM_PWM_Start+0x148>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4a33      	ldr	r2, [pc, #204]	; (800ec80 <HAL_TIM_PWM_Start+0x210>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d101      	bne.n	800ebbc <HAL_TIM_PWM_Start+0x14c>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e000      	b.n	800ebbe <HAL_TIM_PWM_Start+0x14e>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d007      	beq.n	800ebd2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ebd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4a25      	ldr	r2, [pc, #148]	; (800ec6c <HAL_TIM_PWM_Start+0x1fc>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d022      	beq.n	800ec22 <HAL_TIM_PWM_Start+0x1b2>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebe4:	d01d      	beq.n	800ec22 <HAL_TIM_PWM_Start+0x1b2>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4a26      	ldr	r2, [pc, #152]	; (800ec84 <HAL_TIM_PWM_Start+0x214>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d018      	beq.n	800ec22 <HAL_TIM_PWM_Start+0x1b2>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4a24      	ldr	r2, [pc, #144]	; (800ec88 <HAL_TIM_PWM_Start+0x218>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d013      	beq.n	800ec22 <HAL_TIM_PWM_Start+0x1b2>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4a23      	ldr	r2, [pc, #140]	; (800ec8c <HAL_TIM_PWM_Start+0x21c>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d00e      	beq.n	800ec22 <HAL_TIM_PWM_Start+0x1b2>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a19      	ldr	r2, [pc, #100]	; (800ec70 <HAL_TIM_PWM_Start+0x200>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d009      	beq.n	800ec22 <HAL_TIM_PWM_Start+0x1b2>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a18      	ldr	r2, [pc, #96]	; (800ec74 <HAL_TIM_PWM_Start+0x204>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d004      	beq.n	800ec22 <HAL_TIM_PWM_Start+0x1b2>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a18      	ldr	r2, [pc, #96]	; (800ec80 <HAL_TIM_PWM_Start+0x210>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d115      	bne.n	800ec4e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	689a      	ldr	r2, [r3, #8]
 800ec28:	4b19      	ldr	r3, [pc, #100]	; (800ec90 <HAL_TIM_PWM_Start+0x220>)
 800ec2a:	4013      	ands	r3, r2
 800ec2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2b06      	cmp	r3, #6
 800ec32:	d015      	beq.n	800ec60 <HAL_TIM_PWM_Start+0x1f0>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec3a:	d011      	beq.n	800ec60 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f042 0201 	orr.w	r2, r2, #1
 800ec4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec4c:	e008      	b.n	800ec60 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f042 0201 	orr.w	r2, r2, #1
 800ec5c:	601a      	str	r2, [r3, #0]
 800ec5e:	e000      	b.n	800ec62 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	40012c00 	.word	0x40012c00
 800ec70:	40013400 	.word	0x40013400
 800ec74:	40014000 	.word	0x40014000
 800ec78:	40014400 	.word	0x40014400
 800ec7c:	40014800 	.word	0x40014800
 800ec80:	40015000 	.word	0x40015000
 800ec84:	40000400 	.word	0x40000400
 800ec88:	40000800 	.word	0x40000800
 800ec8c:	40000c00 	.word	0x40000c00
 800ec90:	00010007 	.word	0x00010007

0800ec94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	f003 0302 	and.w	r3, r3, #2
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d020      	beq.n	800ecf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f003 0302 	and.w	r3, r3, #2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d01b      	beq.n	800ecf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f06f 0202 	mvn.w	r2, #2
 800ecc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2201      	movs	r2, #1
 800ecce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	699b      	ldr	r3, [r3, #24]
 800ecd6:	f003 0303 	and.w	r3, r3, #3
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d003      	beq.n	800ece6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 fb5c 	bl	800f39c <HAL_TIM_IC_CaptureCallback>
 800ece4:	e005      	b.n	800ecf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 fb4e 	bl	800f388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 fb5f 	bl	800f3b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	f003 0304 	and.w	r3, r3, #4
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d020      	beq.n	800ed44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f003 0304 	and.w	r3, r3, #4
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d01b      	beq.n	800ed44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f06f 0204 	mvn.w	r2, #4
 800ed14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2202      	movs	r2, #2
 800ed1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	699b      	ldr	r3, [r3, #24]
 800ed22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d003      	beq.n	800ed32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fb36 	bl	800f39c <HAL_TIM_IC_CaptureCallback>
 800ed30:	e005      	b.n	800ed3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 fb28 	bl	800f388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 fb39 	bl	800f3b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	f003 0308 	and.w	r3, r3, #8
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d020      	beq.n	800ed90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f003 0308 	and.w	r3, r3, #8
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d01b      	beq.n	800ed90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f06f 0208 	mvn.w	r2, #8
 800ed60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2204      	movs	r2, #4
 800ed66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	69db      	ldr	r3, [r3, #28]
 800ed6e:	f003 0303 	and.w	r3, r3, #3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d003      	beq.n	800ed7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fb10 	bl	800f39c <HAL_TIM_IC_CaptureCallback>
 800ed7c:	e005      	b.n	800ed8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 fb02 	bl	800f388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fb13 	bl	800f3b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	f003 0310 	and.w	r3, r3, #16
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d020      	beq.n	800eddc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f003 0310 	and.w	r3, r3, #16
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d01b      	beq.n	800eddc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f06f 0210 	mvn.w	r2, #16
 800edac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2208      	movs	r2, #8
 800edb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	69db      	ldr	r3, [r3, #28]
 800edba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d003      	beq.n	800edca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 faea 	bl	800f39c <HAL_TIM_IC_CaptureCallback>
 800edc8:	e005      	b.n	800edd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 fadc 	bl	800f388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 faed 	bl	800f3b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00c      	beq.n	800ee00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f003 0301 	and.w	r3, r3, #1
 800edec:	2b00      	cmp	r3, #0
 800edee:	d007      	beq.n	800ee00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f06f 0201 	mvn.w	r2, #1
 800edf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f7f9 fb08 	bl	8008410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d104      	bne.n	800ee14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00c      	beq.n	800ee2e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d007      	beq.n	800ee2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ee26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f001 f815 	bl	800fe58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00c      	beq.n	800ee52 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d007      	beq.n	800ee52 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ee4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f001 f80d 	bl	800fe6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00c      	beq.n	800ee76 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d007      	beq.n	800ee76 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 faa7 	bl	800f3c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f003 0320 	and.w	r3, r3, #32
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00c      	beq.n	800ee9a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f003 0320 	and.w	r3, r3, #32
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d007      	beq.n	800ee9a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f06f 0220 	mvn.w	r2, #32
 800ee92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 ffd5 	bl	800fe44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d00c      	beq.n	800eebe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d007      	beq.n	800eebe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800eeb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 ffe1 	bl	800fe80 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00c      	beq.n	800eee2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d007      	beq.n	800eee2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800eeda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 ffd9 	bl	800fe94 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d00c      	beq.n	800ef06 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d007      	beq.n	800ef06 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800eefe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 ffd1 	bl	800fea8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00c      	beq.n	800ef2a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d007      	beq.n	800ef2a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ef22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 ffc9 	bl	800febc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef2a:	bf00      	nop
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
	...

0800ef34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d101      	bne.n	800ef52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ef4e:	2302      	movs	r3, #2
 800ef50:	e0ff      	b.n	800f152 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2201      	movs	r2, #1
 800ef56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2b14      	cmp	r3, #20
 800ef5e:	f200 80f0 	bhi.w	800f142 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ef62:	a201      	add	r2, pc, #4	; (adr r2, 800ef68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ef64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef68:	0800efbd 	.word	0x0800efbd
 800ef6c:	0800f143 	.word	0x0800f143
 800ef70:	0800f143 	.word	0x0800f143
 800ef74:	0800f143 	.word	0x0800f143
 800ef78:	0800effd 	.word	0x0800effd
 800ef7c:	0800f143 	.word	0x0800f143
 800ef80:	0800f143 	.word	0x0800f143
 800ef84:	0800f143 	.word	0x0800f143
 800ef88:	0800f03f 	.word	0x0800f03f
 800ef8c:	0800f143 	.word	0x0800f143
 800ef90:	0800f143 	.word	0x0800f143
 800ef94:	0800f143 	.word	0x0800f143
 800ef98:	0800f07f 	.word	0x0800f07f
 800ef9c:	0800f143 	.word	0x0800f143
 800efa0:	0800f143 	.word	0x0800f143
 800efa4:	0800f143 	.word	0x0800f143
 800efa8:	0800f0c1 	.word	0x0800f0c1
 800efac:	0800f143 	.word	0x0800f143
 800efb0:	0800f143 	.word	0x0800f143
 800efb4:	0800f143 	.word	0x0800f143
 800efb8:	0800f101 	.word	0x0800f101
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68b9      	ldr	r1, [r7, #8]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f000 fabc 	bl	800f540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	699a      	ldr	r2, [r3, #24]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f042 0208 	orr.w	r2, r2, #8
 800efd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	699a      	ldr	r2, [r3, #24]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f022 0204 	bic.w	r2, r2, #4
 800efe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	6999      	ldr	r1, [r3, #24]
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	691a      	ldr	r2, [r3, #16]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	430a      	orrs	r2, r1
 800eff8:	619a      	str	r2, [r3, #24]
      break;
 800effa:	e0a5      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68b9      	ldr	r1, [r7, #8]
 800f002:	4618      	mov	r0, r3
 800f004:	f000 fb36 	bl	800f674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	699a      	ldr	r2, [r3, #24]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	699a      	ldr	r2, [r3, #24]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6999      	ldr	r1, [r3, #24]
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	021a      	lsls	r2, r3, #8
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	430a      	orrs	r2, r1
 800f03a:	619a      	str	r2, [r3, #24]
      break;
 800f03c:	e084      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	68b9      	ldr	r1, [r7, #8]
 800f044:	4618      	mov	r0, r3
 800f046:	f000 fba9 	bl	800f79c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	69da      	ldr	r2, [r3, #28]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f042 0208 	orr.w	r2, r2, #8
 800f058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	69da      	ldr	r2, [r3, #28]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f022 0204 	bic.w	r2, r2, #4
 800f068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	69d9      	ldr	r1, [r3, #28]
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	691a      	ldr	r2, [r3, #16]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	430a      	orrs	r2, r1
 800f07a:	61da      	str	r2, [r3, #28]
      break;
 800f07c:	e064      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68b9      	ldr	r1, [r7, #8]
 800f084:	4618      	mov	r0, r3
 800f086:	f000 fc1b 	bl	800f8c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	69da      	ldr	r2, [r3, #28]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	69da      	ldr	r2, [r3, #28]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	69d9      	ldr	r1, [r3, #28]
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	691b      	ldr	r3, [r3, #16]
 800f0b4:	021a      	lsls	r2, r3, #8
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	430a      	orrs	r2, r1
 800f0bc:	61da      	str	r2, [r3, #28]
      break;
 800f0be:	e043      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	68b9      	ldr	r1, [r7, #8]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 fc8e 	bl	800f9e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f042 0208 	orr.w	r2, r2, #8
 800f0da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f022 0204 	bic.w	r2, r2, #4
 800f0ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	691a      	ldr	r2, [r3, #16]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800f0fe:	e023      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	68b9      	ldr	r1, [r7, #8]
 800f106:	4618      	mov	r0, r3
 800f108:	f000 fcd8 	bl	800fabc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f11a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f12a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	691b      	ldr	r3, [r3, #16]
 800f136:	021a      	lsls	r2, r3, #8
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	430a      	orrs	r2, r1
 800f13e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800f140:	e002      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f142:	2301      	movs	r3, #1
 800f144:	75fb      	strb	r3, [r7, #23]
      break;
 800f146:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f150:	7dfb      	ldrb	r3, [r7, #23]
}
 800f152:	4618      	mov	r0, r3
 800f154:	3718      	adds	r7, #24
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop

0800f15c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f166:	2300      	movs	r3, #0
 800f168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f170:	2b01      	cmp	r3, #1
 800f172:	d101      	bne.n	800f178 <HAL_TIM_ConfigClockSource+0x1c>
 800f174:	2302      	movs	r3, #2
 800f176:	e0f6      	b.n	800f366 <HAL_TIM_ConfigClockSource+0x20a>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2202      	movs	r2, #2
 800f184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800f196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f19a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f1a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	68ba      	ldr	r2, [r7, #8]
 800f1aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a6f      	ldr	r2, [pc, #444]	; (800f370 <HAL_TIM_ConfigClockSource+0x214>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	f000 80c1 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f1b8:	4a6d      	ldr	r2, [pc, #436]	; (800f370 <HAL_TIM_ConfigClockSource+0x214>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	f200 80c6 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f1c0:	4a6c      	ldr	r2, [pc, #432]	; (800f374 <HAL_TIM_ConfigClockSource+0x218>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	f000 80b9 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f1c8:	4a6a      	ldr	r2, [pc, #424]	; (800f374 <HAL_TIM_ConfigClockSource+0x218>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	f200 80be 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f1d0:	4a69      	ldr	r2, [pc, #420]	; (800f378 <HAL_TIM_ConfigClockSource+0x21c>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	f000 80b1 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f1d8:	4a67      	ldr	r2, [pc, #412]	; (800f378 <HAL_TIM_ConfigClockSource+0x21c>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	f200 80b6 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f1e0:	4a66      	ldr	r2, [pc, #408]	; (800f37c <HAL_TIM_ConfigClockSource+0x220>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	f000 80a9 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f1e8:	4a64      	ldr	r2, [pc, #400]	; (800f37c <HAL_TIM_ConfigClockSource+0x220>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	f200 80ae 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f1f0:	4a63      	ldr	r2, [pc, #396]	; (800f380 <HAL_TIM_ConfigClockSource+0x224>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	f000 80a1 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f1f8:	4a61      	ldr	r2, [pc, #388]	; (800f380 <HAL_TIM_ConfigClockSource+0x224>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	f200 80a6 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f200:	4a60      	ldr	r2, [pc, #384]	; (800f384 <HAL_TIM_ConfigClockSource+0x228>)
 800f202:	4293      	cmp	r3, r2
 800f204:	f000 8099 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f208:	4a5e      	ldr	r2, [pc, #376]	; (800f384 <HAL_TIM_ConfigClockSource+0x228>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	f200 809e 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f210:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f214:	f000 8091 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f218:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f21c:	f200 8096 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f224:	f000 8089 	beq.w	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f22c:	f200 808e 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f234:	d03e      	beq.n	800f2b4 <HAL_TIM_ConfigClockSource+0x158>
 800f236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f23a:	f200 8087 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f23e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f242:	f000 8086 	beq.w	800f352 <HAL_TIM_ConfigClockSource+0x1f6>
 800f246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f24a:	d87f      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f24c:	2b70      	cmp	r3, #112	; 0x70
 800f24e:	d01a      	beq.n	800f286 <HAL_TIM_ConfigClockSource+0x12a>
 800f250:	2b70      	cmp	r3, #112	; 0x70
 800f252:	d87b      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f254:	2b60      	cmp	r3, #96	; 0x60
 800f256:	d050      	beq.n	800f2fa <HAL_TIM_ConfigClockSource+0x19e>
 800f258:	2b60      	cmp	r3, #96	; 0x60
 800f25a:	d877      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f25c:	2b50      	cmp	r3, #80	; 0x50
 800f25e:	d03c      	beq.n	800f2da <HAL_TIM_ConfigClockSource+0x17e>
 800f260:	2b50      	cmp	r3, #80	; 0x50
 800f262:	d873      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f264:	2b40      	cmp	r3, #64	; 0x40
 800f266:	d058      	beq.n	800f31a <HAL_TIM_ConfigClockSource+0x1be>
 800f268:	2b40      	cmp	r3, #64	; 0x40
 800f26a:	d86f      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f26c:	2b30      	cmp	r3, #48	; 0x30
 800f26e:	d064      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f270:	2b30      	cmp	r3, #48	; 0x30
 800f272:	d86b      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f274:	2b20      	cmp	r3, #32
 800f276:	d060      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f278:	2b20      	cmp	r3, #32
 800f27a:	d867      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d05c      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f280:	2b10      	cmp	r3, #16
 800f282:	d05a      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x1de>
 800f284:	e062      	b.n	800f34c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f296:	f000 fcf9 	bl	800fc8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f2a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68ba      	ldr	r2, [r7, #8]
 800f2b0:	609a      	str	r2, [r3, #8]
      break;
 800f2b2:	e04f      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f2c4:	f000 fce2 	bl	800fc8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	689a      	ldr	r2, [r3, #8]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f2d6:	609a      	str	r2, [r3, #8]
      break;
 800f2d8:	e03c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	f000 fc54 	bl	800fb94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2150      	movs	r1, #80	; 0x50
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f000 fcad 	bl	800fc52 <TIM_ITRx_SetConfig>
      break;
 800f2f8:	e02c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f306:	461a      	mov	r2, r3
 800f308:	f000 fc73 	bl	800fbf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2160      	movs	r1, #96	; 0x60
 800f312:	4618      	mov	r0, r3
 800f314:	f000 fc9d 	bl	800fc52 <TIM_ITRx_SetConfig>
      break;
 800f318:	e01c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f326:	461a      	mov	r2, r3
 800f328:	f000 fc34 	bl	800fb94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2140      	movs	r1, #64	; 0x40
 800f332:	4618      	mov	r0, r3
 800f334:	f000 fc8d 	bl	800fc52 <TIM_ITRx_SetConfig>
      break;
 800f338:	e00c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4619      	mov	r1, r3
 800f344:	4610      	mov	r0, r2
 800f346:	f000 fc84 	bl	800fc52 <TIM_ITRx_SetConfig>
      break;
 800f34a:	e003      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800f34c:	2301      	movs	r3, #1
 800f34e:	73fb      	strb	r3, [r7, #15]
      break;
 800f350:	e000      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800f352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2201      	movs	r2, #1
 800f358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f364:	7bfb      	ldrb	r3, [r7, #15]
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	00100070 	.word	0x00100070
 800f374:	00100060 	.word	0x00100060
 800f378:	00100050 	.word	0x00100050
 800f37c:	00100040 	.word	0x00100040
 800f380:	00100030 	.word	0x00100030
 800f384:	00100020 	.word	0x00100020

0800f388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f390:	bf00      	nop
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f3a4:	bf00      	nop
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f3b8:	bf00      	nop
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f3cc:	bf00      	nop
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b085      	sub	sp, #20
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a4c      	ldr	r2, [pc, #304]	; (800f51c <TIM_Base_SetConfig+0x144>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d017      	beq.n	800f420 <TIM_Base_SetConfig+0x48>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3f6:	d013      	beq.n	800f420 <TIM_Base_SetConfig+0x48>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4a49      	ldr	r2, [pc, #292]	; (800f520 <TIM_Base_SetConfig+0x148>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d00f      	beq.n	800f420 <TIM_Base_SetConfig+0x48>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4a48      	ldr	r2, [pc, #288]	; (800f524 <TIM_Base_SetConfig+0x14c>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d00b      	beq.n	800f420 <TIM_Base_SetConfig+0x48>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a47      	ldr	r2, [pc, #284]	; (800f528 <TIM_Base_SetConfig+0x150>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d007      	beq.n	800f420 <TIM_Base_SetConfig+0x48>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4a46      	ldr	r2, [pc, #280]	; (800f52c <TIM_Base_SetConfig+0x154>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d003      	beq.n	800f420 <TIM_Base_SetConfig+0x48>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4a45      	ldr	r2, [pc, #276]	; (800f530 <TIM_Base_SetConfig+0x158>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d108      	bne.n	800f432 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	4313      	orrs	r3, r2
 800f430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	4a39      	ldr	r2, [pc, #228]	; (800f51c <TIM_Base_SetConfig+0x144>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d023      	beq.n	800f482 <TIM_Base_SetConfig+0xaa>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f440:	d01f      	beq.n	800f482 <TIM_Base_SetConfig+0xaa>
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	4a36      	ldr	r2, [pc, #216]	; (800f520 <TIM_Base_SetConfig+0x148>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d01b      	beq.n	800f482 <TIM_Base_SetConfig+0xaa>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	4a35      	ldr	r2, [pc, #212]	; (800f524 <TIM_Base_SetConfig+0x14c>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d017      	beq.n	800f482 <TIM_Base_SetConfig+0xaa>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	4a34      	ldr	r2, [pc, #208]	; (800f528 <TIM_Base_SetConfig+0x150>)
 800f456:	4293      	cmp	r3, r2
 800f458:	d013      	beq.n	800f482 <TIM_Base_SetConfig+0xaa>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4a33      	ldr	r2, [pc, #204]	; (800f52c <TIM_Base_SetConfig+0x154>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d00f      	beq.n	800f482 <TIM_Base_SetConfig+0xaa>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4a33      	ldr	r2, [pc, #204]	; (800f534 <TIM_Base_SetConfig+0x15c>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d00b      	beq.n	800f482 <TIM_Base_SetConfig+0xaa>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	4a32      	ldr	r2, [pc, #200]	; (800f538 <TIM_Base_SetConfig+0x160>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	d007      	beq.n	800f482 <TIM_Base_SetConfig+0xaa>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4a31      	ldr	r2, [pc, #196]	; (800f53c <TIM_Base_SetConfig+0x164>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d003      	beq.n	800f482 <TIM_Base_SetConfig+0xaa>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4a2c      	ldr	r2, [pc, #176]	; (800f530 <TIM_Base_SetConfig+0x158>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d108      	bne.n	800f494 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	68fa      	ldr	r2, [r7, #12]
 800f490:	4313      	orrs	r3, r2
 800f492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	695b      	ldr	r3, [r3, #20]
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	68fa      	ldr	r2, [r7, #12]
 800f4a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	689a      	ldr	r2, [r3, #8]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a18      	ldr	r2, [pc, #96]	; (800f51c <TIM_Base_SetConfig+0x144>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d013      	beq.n	800f4e8 <TIM_Base_SetConfig+0x110>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a1a      	ldr	r2, [pc, #104]	; (800f52c <TIM_Base_SetConfig+0x154>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d00f      	beq.n	800f4e8 <TIM_Base_SetConfig+0x110>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4a1a      	ldr	r2, [pc, #104]	; (800f534 <TIM_Base_SetConfig+0x15c>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d00b      	beq.n	800f4e8 <TIM_Base_SetConfig+0x110>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	4a19      	ldr	r2, [pc, #100]	; (800f538 <TIM_Base_SetConfig+0x160>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d007      	beq.n	800f4e8 <TIM_Base_SetConfig+0x110>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a18      	ldr	r2, [pc, #96]	; (800f53c <TIM_Base_SetConfig+0x164>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d003      	beq.n	800f4e8 <TIM_Base_SetConfig+0x110>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a13      	ldr	r2, [pc, #76]	; (800f530 <TIM_Base_SetConfig+0x158>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d103      	bne.n	800f4f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	691a      	ldr	r2, [r3, #16]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	f003 0301 	and.w	r3, r3, #1
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d105      	bne.n	800f50e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	691b      	ldr	r3, [r3, #16]
 800f506:	f023 0201 	bic.w	r2, r3, #1
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	611a      	str	r2, [r3, #16]
  }
}
 800f50e:	bf00      	nop
 800f510:	3714      	adds	r7, #20
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
 800f51a:	bf00      	nop
 800f51c:	40012c00 	.word	0x40012c00
 800f520:	40000400 	.word	0x40000400
 800f524:	40000800 	.word	0x40000800
 800f528:	40000c00 	.word	0x40000c00
 800f52c:	40013400 	.word	0x40013400
 800f530:	40015000 	.word	0x40015000
 800f534:	40014000 	.word	0x40014000
 800f538:	40014400 	.word	0x40014400
 800f53c:	40014800 	.word	0x40014800

0800f540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f540:	b480      	push	{r7}
 800f542:	b087      	sub	sp, #28
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6a1b      	ldr	r3, [r3, #32]
 800f54e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6a1b      	ldr	r3, [r3, #32]
 800f554:	f023 0201 	bic.w	r2, r3, #1
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	699b      	ldr	r3, [r3, #24]
 800f566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f023 0303 	bic.w	r3, r3, #3
 800f57a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	4313      	orrs	r3, r2
 800f584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	f023 0302 	bic.w	r3, r3, #2
 800f58c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	689b      	ldr	r3, [r3, #8]
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	4313      	orrs	r3, r2
 800f596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a30      	ldr	r2, [pc, #192]	; (800f65c <TIM_OC1_SetConfig+0x11c>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d013      	beq.n	800f5c8 <TIM_OC1_SetConfig+0x88>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a2f      	ldr	r2, [pc, #188]	; (800f660 <TIM_OC1_SetConfig+0x120>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d00f      	beq.n	800f5c8 <TIM_OC1_SetConfig+0x88>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a2e      	ldr	r2, [pc, #184]	; (800f664 <TIM_OC1_SetConfig+0x124>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d00b      	beq.n	800f5c8 <TIM_OC1_SetConfig+0x88>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4a2d      	ldr	r2, [pc, #180]	; (800f668 <TIM_OC1_SetConfig+0x128>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d007      	beq.n	800f5c8 <TIM_OC1_SetConfig+0x88>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4a2c      	ldr	r2, [pc, #176]	; (800f66c <TIM_OC1_SetConfig+0x12c>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d003      	beq.n	800f5c8 <TIM_OC1_SetConfig+0x88>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a2b      	ldr	r2, [pc, #172]	; (800f670 <TIM_OC1_SetConfig+0x130>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d10c      	bne.n	800f5e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	f023 0308 	bic.w	r3, r3, #8
 800f5ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	697a      	ldr	r2, [r7, #20]
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	f023 0304 	bic.w	r3, r3, #4
 800f5e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4a1d      	ldr	r2, [pc, #116]	; (800f65c <TIM_OC1_SetConfig+0x11c>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d013      	beq.n	800f612 <TIM_OC1_SetConfig+0xd2>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a1c      	ldr	r2, [pc, #112]	; (800f660 <TIM_OC1_SetConfig+0x120>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d00f      	beq.n	800f612 <TIM_OC1_SetConfig+0xd2>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4a1b      	ldr	r2, [pc, #108]	; (800f664 <TIM_OC1_SetConfig+0x124>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d00b      	beq.n	800f612 <TIM_OC1_SetConfig+0xd2>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a1a      	ldr	r2, [pc, #104]	; (800f668 <TIM_OC1_SetConfig+0x128>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d007      	beq.n	800f612 <TIM_OC1_SetConfig+0xd2>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a19      	ldr	r2, [pc, #100]	; (800f66c <TIM_OC1_SetConfig+0x12c>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d003      	beq.n	800f612 <TIM_OC1_SetConfig+0xd2>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a18      	ldr	r2, [pc, #96]	; (800f670 <TIM_OC1_SetConfig+0x130>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d111      	bne.n	800f636 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	695b      	ldr	r3, [r3, #20]
 800f626:	693a      	ldr	r2, [r7, #16]
 800f628:	4313      	orrs	r3, r2
 800f62a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	699b      	ldr	r3, [r3, #24]
 800f630:	693a      	ldr	r2, [r7, #16]
 800f632:	4313      	orrs	r3, r2
 800f634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	68fa      	ldr	r2, [r7, #12]
 800f640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	685a      	ldr	r2, [r3, #4]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	697a      	ldr	r2, [r7, #20]
 800f64e:	621a      	str	r2, [r3, #32]
}
 800f650:	bf00      	nop
 800f652:	371c      	adds	r7, #28
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	40012c00 	.word	0x40012c00
 800f660:	40013400 	.word	0x40013400
 800f664:	40014000 	.word	0x40014000
 800f668:	40014400 	.word	0x40014400
 800f66c:	40014800 	.word	0x40014800
 800f670:	40015000 	.word	0x40015000

0800f674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f674:	b480      	push	{r7}
 800f676:	b087      	sub	sp, #28
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6a1b      	ldr	r3, [r3, #32]
 800f682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6a1b      	ldr	r3, [r3, #32]
 800f688:	f023 0210 	bic.w	r2, r3, #16
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	699b      	ldr	r3, [r3, #24]
 800f69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f6a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	021b      	lsls	r3, r3, #8
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	f023 0320 	bic.w	r3, r3, #32
 800f6c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	689b      	ldr	r3, [r3, #8]
 800f6c8:	011b      	lsls	r3, r3, #4
 800f6ca:	697a      	ldr	r2, [r7, #20]
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4a2c      	ldr	r2, [pc, #176]	; (800f784 <TIM_OC2_SetConfig+0x110>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d007      	beq.n	800f6e8 <TIM_OC2_SetConfig+0x74>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	4a2b      	ldr	r2, [pc, #172]	; (800f788 <TIM_OC2_SetConfig+0x114>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d003      	beq.n	800f6e8 <TIM_OC2_SetConfig+0x74>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	4a2a      	ldr	r2, [pc, #168]	; (800f78c <TIM_OC2_SetConfig+0x118>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d10d      	bne.n	800f704 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	011b      	lsls	r3, r3, #4
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f702:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a1f      	ldr	r2, [pc, #124]	; (800f784 <TIM_OC2_SetConfig+0x110>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d013      	beq.n	800f734 <TIM_OC2_SetConfig+0xc0>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a1e      	ldr	r2, [pc, #120]	; (800f788 <TIM_OC2_SetConfig+0x114>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d00f      	beq.n	800f734 <TIM_OC2_SetConfig+0xc0>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a1e      	ldr	r2, [pc, #120]	; (800f790 <TIM_OC2_SetConfig+0x11c>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d00b      	beq.n	800f734 <TIM_OC2_SetConfig+0xc0>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a1d      	ldr	r2, [pc, #116]	; (800f794 <TIM_OC2_SetConfig+0x120>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d007      	beq.n	800f734 <TIM_OC2_SetConfig+0xc0>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4a1c      	ldr	r2, [pc, #112]	; (800f798 <TIM_OC2_SetConfig+0x124>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d003      	beq.n	800f734 <TIM_OC2_SetConfig+0xc0>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4a17      	ldr	r2, [pc, #92]	; (800f78c <TIM_OC2_SetConfig+0x118>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d113      	bne.n	800f75c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f73a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	695b      	ldr	r3, [r3, #20]
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	693a      	ldr	r2, [r7, #16]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	699b      	ldr	r3, [r3, #24]
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	693a      	ldr	r2, [r7, #16]
 800f758:	4313      	orrs	r3, r2
 800f75a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	697a      	ldr	r2, [r7, #20]
 800f774:	621a      	str	r2, [r3, #32]
}
 800f776:	bf00      	nop
 800f778:	371c      	adds	r7, #28
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	40012c00 	.word	0x40012c00
 800f788:	40013400 	.word	0x40013400
 800f78c:	40015000 	.word	0x40015000
 800f790:	40014000 	.word	0x40014000
 800f794:	40014400 	.word	0x40014400
 800f798:	40014800 	.word	0x40014800

0800f79c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b087      	sub	sp, #28
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a1b      	ldr	r3, [r3, #32]
 800f7aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6a1b      	ldr	r3, [r3, #32]
 800f7b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	69db      	ldr	r3, [r3, #28]
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f7ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f023 0303 	bic.w	r3, r3, #3
 800f7d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f7e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	689b      	ldr	r3, [r3, #8]
 800f7ee:	021b      	lsls	r3, r3, #8
 800f7f0:	697a      	ldr	r2, [r7, #20]
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4a2b      	ldr	r2, [pc, #172]	; (800f8a8 <TIM_OC3_SetConfig+0x10c>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d007      	beq.n	800f80e <TIM_OC3_SetConfig+0x72>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a2a      	ldr	r2, [pc, #168]	; (800f8ac <TIM_OC3_SetConfig+0x110>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d003      	beq.n	800f80e <TIM_OC3_SetConfig+0x72>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a29      	ldr	r2, [pc, #164]	; (800f8b0 <TIM_OC3_SetConfig+0x114>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d10d      	bne.n	800f82a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	68db      	ldr	r3, [r3, #12]
 800f81a:	021b      	lsls	r3, r3, #8
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	4313      	orrs	r3, r2
 800f820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a1e      	ldr	r2, [pc, #120]	; (800f8a8 <TIM_OC3_SetConfig+0x10c>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d013      	beq.n	800f85a <TIM_OC3_SetConfig+0xbe>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4a1d      	ldr	r2, [pc, #116]	; (800f8ac <TIM_OC3_SetConfig+0x110>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d00f      	beq.n	800f85a <TIM_OC3_SetConfig+0xbe>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4a1d      	ldr	r2, [pc, #116]	; (800f8b4 <TIM_OC3_SetConfig+0x118>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d00b      	beq.n	800f85a <TIM_OC3_SetConfig+0xbe>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4a1c      	ldr	r2, [pc, #112]	; (800f8b8 <TIM_OC3_SetConfig+0x11c>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d007      	beq.n	800f85a <TIM_OC3_SetConfig+0xbe>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4a1b      	ldr	r2, [pc, #108]	; (800f8bc <TIM_OC3_SetConfig+0x120>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d003      	beq.n	800f85a <TIM_OC3_SetConfig+0xbe>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4a16      	ldr	r2, [pc, #88]	; (800f8b0 <TIM_OC3_SetConfig+0x114>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d113      	bne.n	800f882 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	695b      	ldr	r3, [r3, #20]
 800f86e:	011b      	lsls	r3, r3, #4
 800f870:	693a      	ldr	r2, [r7, #16]
 800f872:	4313      	orrs	r3, r2
 800f874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	699b      	ldr	r3, [r3, #24]
 800f87a:	011b      	lsls	r3, r3, #4
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	4313      	orrs	r3, r2
 800f880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	693a      	ldr	r2, [r7, #16]
 800f886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	68fa      	ldr	r2, [r7, #12]
 800f88c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	685a      	ldr	r2, [r3, #4]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	697a      	ldr	r2, [r7, #20]
 800f89a:	621a      	str	r2, [r3, #32]
}
 800f89c:	bf00      	nop
 800f89e:	371c      	adds	r7, #28
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr
 800f8a8:	40012c00 	.word	0x40012c00
 800f8ac:	40013400 	.word	0x40013400
 800f8b0:	40015000 	.word	0x40015000
 800f8b4:	40014000 	.word	0x40014000
 800f8b8:	40014400 	.word	0x40014400
 800f8bc:	40014800 	.word	0x40014800

0800f8c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b087      	sub	sp, #28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a1b      	ldr	r3, [r3, #32]
 800f8d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	69db      	ldr	r3, [r3, #28]
 800f8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f8ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	021b      	lsls	r3, r3, #8
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	4313      	orrs	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f90e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	031b      	lsls	r3, r3, #12
 800f916:	697a      	ldr	r2, [r7, #20]
 800f918:	4313      	orrs	r3, r2
 800f91a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a2c      	ldr	r2, [pc, #176]	; (800f9d0 <TIM_OC4_SetConfig+0x110>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d007      	beq.n	800f934 <TIM_OC4_SetConfig+0x74>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a2b      	ldr	r2, [pc, #172]	; (800f9d4 <TIM_OC4_SetConfig+0x114>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d003      	beq.n	800f934 <TIM_OC4_SetConfig+0x74>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a2a      	ldr	r2, [pc, #168]	; (800f9d8 <TIM_OC4_SetConfig+0x118>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d10d      	bne.n	800f950 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f93a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	031b      	lsls	r3, r3, #12
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	4313      	orrs	r3, r2
 800f946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f94e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a1f      	ldr	r2, [pc, #124]	; (800f9d0 <TIM_OC4_SetConfig+0x110>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d013      	beq.n	800f980 <TIM_OC4_SetConfig+0xc0>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a1e      	ldr	r2, [pc, #120]	; (800f9d4 <TIM_OC4_SetConfig+0x114>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d00f      	beq.n	800f980 <TIM_OC4_SetConfig+0xc0>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a1e      	ldr	r2, [pc, #120]	; (800f9dc <TIM_OC4_SetConfig+0x11c>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d00b      	beq.n	800f980 <TIM_OC4_SetConfig+0xc0>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	4a1d      	ldr	r2, [pc, #116]	; (800f9e0 <TIM_OC4_SetConfig+0x120>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d007      	beq.n	800f980 <TIM_OC4_SetConfig+0xc0>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4a1c      	ldr	r2, [pc, #112]	; (800f9e4 <TIM_OC4_SetConfig+0x124>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d003      	beq.n	800f980 <TIM_OC4_SetConfig+0xc0>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4a17      	ldr	r2, [pc, #92]	; (800f9d8 <TIM_OC4_SetConfig+0x118>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d113      	bne.n	800f9a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f986:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f98e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	695b      	ldr	r3, [r3, #20]
 800f994:	019b      	lsls	r3, r3, #6
 800f996:	693a      	ldr	r2, [r7, #16]
 800f998:	4313      	orrs	r3, r2
 800f99a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	699b      	ldr	r3, [r3, #24]
 800f9a0:	019b      	lsls	r3, r3, #6
 800f9a2:	693a      	ldr	r2, [r7, #16]
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	693a      	ldr	r2, [r7, #16]
 800f9ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	68fa      	ldr	r2, [r7, #12]
 800f9b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	685a      	ldr	r2, [r3, #4]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	697a      	ldr	r2, [r7, #20]
 800f9c0:	621a      	str	r2, [r3, #32]
}
 800f9c2:	bf00      	nop
 800f9c4:	371c      	adds	r7, #28
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	40012c00 	.word	0x40012c00
 800f9d4:	40013400 	.word	0x40013400
 800f9d8:	40015000 	.word	0x40015000
 800f9dc:	40014000 	.word	0x40014000
 800f9e0:	40014400 	.word	0x40014400
 800f9e4:	40014800 	.word	0x40014800

0800f9e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6a1b      	ldr	r3, [r3, #32]
 800f9fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	4313      	orrs	r3, r2
 800fa24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	689b      	ldr	r3, [r3, #8]
 800fa32:	041b      	lsls	r3, r3, #16
 800fa34:	693a      	ldr	r2, [r7, #16]
 800fa36:	4313      	orrs	r3, r2
 800fa38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a19      	ldr	r2, [pc, #100]	; (800faa4 <TIM_OC5_SetConfig+0xbc>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d013      	beq.n	800fa6a <TIM_OC5_SetConfig+0x82>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4a18      	ldr	r2, [pc, #96]	; (800faa8 <TIM_OC5_SetConfig+0xc0>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d00f      	beq.n	800fa6a <TIM_OC5_SetConfig+0x82>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4a17      	ldr	r2, [pc, #92]	; (800faac <TIM_OC5_SetConfig+0xc4>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d00b      	beq.n	800fa6a <TIM_OC5_SetConfig+0x82>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4a16      	ldr	r2, [pc, #88]	; (800fab0 <TIM_OC5_SetConfig+0xc8>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d007      	beq.n	800fa6a <TIM_OC5_SetConfig+0x82>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a15      	ldr	r2, [pc, #84]	; (800fab4 <TIM_OC5_SetConfig+0xcc>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d003      	beq.n	800fa6a <TIM_OC5_SetConfig+0x82>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a14      	ldr	r2, [pc, #80]	; (800fab8 <TIM_OC5_SetConfig+0xd0>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d109      	bne.n	800fa7e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	695b      	ldr	r3, [r3, #20]
 800fa76:	021b      	lsls	r3, r3, #8
 800fa78:	697a      	ldr	r2, [r7, #20]
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	697a      	ldr	r2, [r7, #20]
 800fa82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	68fa      	ldr	r2, [r7, #12]
 800fa88:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	685a      	ldr	r2, [r3, #4]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	693a      	ldr	r2, [r7, #16]
 800fa96:	621a      	str	r2, [r3, #32]
}
 800fa98:	bf00      	nop
 800fa9a:	371c      	adds	r7, #28
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	40012c00 	.word	0x40012c00
 800faa8:	40013400 	.word	0x40013400
 800faac:	40014000 	.word	0x40014000
 800fab0:	40014400 	.word	0x40014400
 800fab4:	40014800 	.word	0x40014800
 800fab8:	40015000 	.word	0x40015000

0800fabc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b087      	sub	sp, #28
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6a1b      	ldr	r3, [r3, #32]
 800faca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a1b      	ldr	r3, [r3, #32]
 800fad0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800faea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	021b      	lsls	r3, r3, #8
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	4313      	orrs	r3, r2
 800fafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	689b      	ldr	r3, [r3, #8]
 800fb08:	051b      	lsls	r3, r3, #20
 800fb0a:	693a      	ldr	r2, [r7, #16]
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	4a1a      	ldr	r2, [pc, #104]	; (800fb7c <TIM_OC6_SetConfig+0xc0>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d013      	beq.n	800fb40 <TIM_OC6_SetConfig+0x84>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4a19      	ldr	r2, [pc, #100]	; (800fb80 <TIM_OC6_SetConfig+0xc4>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d00f      	beq.n	800fb40 <TIM_OC6_SetConfig+0x84>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a18      	ldr	r2, [pc, #96]	; (800fb84 <TIM_OC6_SetConfig+0xc8>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d00b      	beq.n	800fb40 <TIM_OC6_SetConfig+0x84>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a17      	ldr	r2, [pc, #92]	; (800fb88 <TIM_OC6_SetConfig+0xcc>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d007      	beq.n	800fb40 <TIM_OC6_SetConfig+0x84>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a16      	ldr	r2, [pc, #88]	; (800fb8c <TIM_OC6_SetConfig+0xd0>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d003      	beq.n	800fb40 <TIM_OC6_SetConfig+0x84>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a15      	ldr	r2, [pc, #84]	; (800fb90 <TIM_OC6_SetConfig+0xd4>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d109      	bne.n	800fb54 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	695b      	ldr	r3, [r3, #20]
 800fb4c:	029b      	lsls	r3, r3, #10
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	4313      	orrs	r3, r2
 800fb52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	693a      	ldr	r2, [r7, #16]
 800fb6c:	621a      	str	r2, [r3, #32]
}
 800fb6e:	bf00      	nop
 800fb70:	371c      	adds	r7, #28
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	40012c00 	.word	0x40012c00
 800fb80:	40013400 	.word	0x40013400
 800fb84:	40014000 	.word	0x40014000
 800fb88:	40014400 	.word	0x40014400
 800fb8c:	40014800 	.word	0x40014800
 800fb90:	40015000 	.word	0x40015000

0800fb94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b087      	sub	sp, #28
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	6a1b      	ldr	r3, [r3, #32]
 800fba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	6a1b      	ldr	r3, [r3, #32]
 800fbaa:	f023 0201 	bic.w	r2, r3, #1
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	699b      	ldr	r3, [r3, #24]
 800fbb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fbbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	011b      	lsls	r3, r3, #4
 800fbc4:	693a      	ldr	r2, [r7, #16]
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f023 030a 	bic.w	r3, r3, #10
 800fbd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	693a      	ldr	r2, [r7, #16]
 800fbde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	697a      	ldr	r2, [r7, #20]
 800fbe4:	621a      	str	r2, [r3, #32]
}
 800fbe6:	bf00      	nop
 800fbe8:	371c      	adds	r7, #28
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b087      	sub	sp, #28
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	60f8      	str	r0, [r7, #12]
 800fbfa:	60b9      	str	r1, [r7, #8]
 800fbfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	6a1b      	ldr	r3, [r3, #32]
 800fc02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	6a1b      	ldr	r3, [r3, #32]
 800fc08:	f023 0210 	bic.w	r2, r3, #16
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	699b      	ldr	r3, [r3, #24]
 800fc14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	031b      	lsls	r3, r3, #12
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	4313      	orrs	r3, r2
 800fc26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fc2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	011b      	lsls	r3, r3, #4
 800fc34:	697a      	ldr	r2, [r7, #20]
 800fc36:	4313      	orrs	r3, r2
 800fc38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	697a      	ldr	r2, [r7, #20]
 800fc44:	621a      	str	r2, [r3, #32]
}
 800fc46:	bf00      	nop
 800fc48:	371c      	adds	r7, #28
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc52:	b480      	push	{r7}
 800fc54:	b085      	sub	sp, #20
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	6078      	str	r0, [r7, #4]
 800fc5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fc68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc6e:	683a      	ldr	r2, [r7, #0]
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	4313      	orrs	r3, r2
 800fc74:	f043 0307 	orr.w	r3, r3, #7
 800fc78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	609a      	str	r2, [r3, #8]
}
 800fc80:	bf00      	nop
 800fc82:	3714      	adds	r7, #20
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b087      	sub	sp, #28
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
 800fc98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	689b      	ldr	r3, [r3, #8]
 800fc9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	021a      	lsls	r2, r3, #8
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	431a      	orrs	r2, r3
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	697a      	ldr	r2, [r7, #20]
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	609a      	str	r2, [r3, #8]
}
 800fcc0:	bf00      	nop
 800fcc2:	371c      	adds	r7, #28
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b087      	sub	sp, #28
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	f003 031f 	and.w	r3, r3, #31
 800fcde:	2201      	movs	r2, #1
 800fce0:	fa02 f303 	lsl.w	r3, r2, r3
 800fce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	6a1a      	ldr	r2, [r3, #32]
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	43db      	mvns	r3, r3
 800fcee:	401a      	ands	r2, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	6a1a      	ldr	r2, [r3, #32]
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	f003 031f 	and.w	r3, r3, #31
 800fcfe:	6879      	ldr	r1, [r7, #4]
 800fd00:	fa01 f303 	lsl.w	r3, r1, r3
 800fd04:	431a      	orrs	r2, r3
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	621a      	str	r2, [r3, #32]
}
 800fd0a:	bf00      	nop
 800fd0c:	371c      	adds	r7, #28
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
	...

0800fd18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d101      	bne.n	800fd30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd2c:	2302      	movs	r3, #2
 800fd2e:	e074      	b.n	800fe1a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2201      	movs	r2, #1
 800fd34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2202      	movs	r2, #2
 800fd3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	689b      	ldr	r3, [r3, #8]
 800fd4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a34      	ldr	r2, [pc, #208]	; (800fe28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d009      	beq.n	800fd6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	4a33      	ldr	r2, [pc, #204]	; (800fe2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d004      	beq.n	800fd6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a31      	ldr	r2, [pc, #196]	; (800fe30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d108      	bne.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fd86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	68fa      	ldr	r2, [r7, #12]
 800fd92:	4313      	orrs	r3, r2
 800fd94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4a21      	ldr	r2, [pc, #132]	; (800fe28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d022      	beq.n	800fdee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdb0:	d01d      	beq.n	800fdee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a1f      	ldr	r2, [pc, #124]	; (800fe34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d018      	beq.n	800fdee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a1d      	ldr	r2, [pc, #116]	; (800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d013      	beq.n	800fdee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4a1c      	ldr	r2, [pc, #112]	; (800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d00e      	beq.n	800fdee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4a15      	ldr	r2, [pc, #84]	; (800fe2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d009      	beq.n	800fdee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	4a18      	ldr	r2, [pc, #96]	; (800fe40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d004      	beq.n	800fdee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4a11      	ldr	r2, [pc, #68]	; (800fe30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d10c      	bne.n	800fe08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	689b      	ldr	r3, [r3, #8]
 800fdfa:	68ba      	ldr	r2, [r7, #8]
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	68ba      	ldr	r2, [r7, #8]
 800fe06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2200      	movs	r2, #0
 800fe14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe18:	2300      	movs	r3, #0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3714      	adds	r7, #20
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr
 800fe26:	bf00      	nop
 800fe28:	40012c00 	.word	0x40012c00
 800fe2c:	40013400 	.word	0x40013400
 800fe30:	40015000 	.word	0x40015000
 800fe34:	40000400 	.word	0x40000400
 800fe38:	40000800 	.word	0x40000800
 800fe3c:	40000c00 	.word	0x40000c00
 800fe40:	40014000 	.word	0x40014000

0800fe44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe4c:	bf00      	nop
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe60:	bf00      	nop
 800fe62:	370c      	adds	r7, #12
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr

0800fe6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b083      	sub	sp, #12
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fe74:	bf00      	nop
 800fe76:	370c      	adds	r7, #12
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fe88:	bf00      	nop
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800fe9c:	bf00      	nop
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d101      	bne.n	800fee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fede:	2301      	movs	r3, #1
 800fee0:	e042      	b.n	800ff68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d106      	bne.n	800fefa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2200      	movs	r2, #0
 800fef0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7f8 fdd9 	bl	8008aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2224      	movs	r2, #36	; 0x24
 800fefe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	f022 0201 	bic.w	r2, r2, #1
 800ff10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d002      	beq.n	800ff20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 fefe 	bl	8010d1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 fbff 	bl	8010724 <UART_SetConfig>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d101      	bne.n	800ff30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e01b      	b.n	800ff68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	685a      	ldr	r2, [r3, #4]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	689a      	ldr	r2, [r3, #8]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f042 0201 	orr.w	r2, r2, #1
 800ff5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 ff7d 	bl	8010e60 <UART_CheckIdleState>
 800ff66:	4603      	mov	r3, r0
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b08a      	sub	sp, #40	; 0x28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff84:	2b20      	cmp	r3, #32
 800ff86:	d167      	bne.n	8010058 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d002      	beq.n	800ff94 <HAL_UART_Transmit_DMA+0x24>
 800ff8e:	88fb      	ldrh	r3, [r7, #6]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d101      	bne.n	800ff98 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ff94:	2301      	movs	r3, #1
 800ff96:	e060      	b.n	801005a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	68ba      	ldr	r2, [r7, #8]
 800ff9c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	88fa      	ldrh	r2, [r7, #6]
 800ffa2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	88fa      	ldrh	r2, [r7, #6]
 800ffaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2221      	movs	r2, #33	; 0x21
 800ffba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d028      	beq.n	8010018 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffca:	4a26      	ldr	r2, [pc, #152]	; (8010064 <HAL_UART_Transmit_DMA+0xf4>)
 800ffcc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffd2:	4a25      	ldr	r2, [pc, #148]	; (8010068 <HAL_UART_Transmit_DMA+0xf8>)
 800ffd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffda:	4a24      	ldr	r2, [pc, #144]	; (801006c <HAL_UART_Transmit_DMA+0xfc>)
 800ffdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffee:	4619      	mov	r1, r3
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3328      	adds	r3, #40	; 0x28
 800fff6:	461a      	mov	r2, r3
 800fff8:	88fb      	ldrh	r3, [r7, #6]
 800fffa:	f7fb f903 	bl	800b204 <HAL_DMA_Start_IT>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d009      	beq.n	8010018 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2210      	movs	r2, #16
 8010008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2220      	movs	r2, #32
 8010010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010014:	2301      	movs	r3, #1
 8010016:	e020      	b.n	801005a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2240      	movs	r2, #64	; 0x40
 801001e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	3308      	adds	r3, #8
 8010026:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	e853 3f00 	ldrex	r3, [r3]
 801002e:	613b      	str	r3, [r7, #16]
   return(result);
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010036:	627b      	str	r3, [r7, #36]	; 0x24
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3308      	adds	r3, #8
 801003e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010040:	623a      	str	r2, [r7, #32]
 8010042:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010044:	69f9      	ldr	r1, [r7, #28]
 8010046:	6a3a      	ldr	r2, [r7, #32]
 8010048:	e841 2300 	strex	r3, r2, [r1]
 801004c:	61bb      	str	r3, [r7, #24]
   return(result);
 801004e:	69bb      	ldr	r3, [r7, #24]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d1e5      	bne.n	8010020 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010054:	2300      	movs	r3, #0
 8010056:	e000      	b.n	801005a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010058:	2302      	movs	r3, #2
  }
}
 801005a:	4618      	mov	r0, r3
 801005c:	3728      	adds	r7, #40	; 0x28
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
 8010062:	bf00      	nop
 8010064:	08011423 	.word	0x08011423
 8010068:	080114bd 	.word	0x080114bd
 801006c:	080114d9 	.word	0x080114d9

08010070 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b0ba      	sub	sp, #232	; 0xe8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	69db      	ldr	r3, [r3, #28]
 801007e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	689b      	ldr	r3, [r3, #8]
 8010092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010096:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801009a:	f640 030f 	movw	r3, #2063	; 0x80f
 801009e:	4013      	ands	r3, r2
 80100a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80100a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d11b      	bne.n	80100e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80100ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100b0:	f003 0320 	and.w	r3, r3, #32
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d015      	beq.n	80100e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80100b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100bc:	f003 0320 	and.w	r3, r3, #32
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d105      	bne.n	80100d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80100c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80100c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d009      	beq.n	80100e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f000 82e3 	beq.w	80106a0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	4798      	blx	r3
      }
      return;
 80100e2:	e2dd      	b.n	80106a0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80100e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	f000 8123 	beq.w	8010334 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80100ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80100f2:	4b8d      	ldr	r3, [pc, #564]	; (8010328 <HAL_UART_IRQHandler+0x2b8>)
 80100f4:	4013      	ands	r3, r2
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80100fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80100fe:	4b8b      	ldr	r3, [pc, #556]	; (801032c <HAL_UART_IRQHandler+0x2bc>)
 8010100:	4013      	ands	r3, r2
 8010102:	2b00      	cmp	r3, #0
 8010104:	f000 8116 	beq.w	8010334 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801010c:	f003 0301 	and.w	r3, r3, #1
 8010110:	2b00      	cmp	r3, #0
 8010112:	d011      	beq.n	8010138 <HAL_UART_IRQHandler+0xc8>
 8010114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801011c:	2b00      	cmp	r3, #0
 801011e:	d00b      	beq.n	8010138 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2201      	movs	r2, #1
 8010126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801012e:	f043 0201 	orr.w	r2, r3, #1
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801013c:	f003 0302 	and.w	r3, r3, #2
 8010140:	2b00      	cmp	r3, #0
 8010142:	d011      	beq.n	8010168 <HAL_UART_IRQHandler+0xf8>
 8010144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010148:	f003 0301 	and.w	r3, r3, #1
 801014c:	2b00      	cmp	r3, #0
 801014e:	d00b      	beq.n	8010168 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	2202      	movs	r2, #2
 8010156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801015e:	f043 0204 	orr.w	r2, r3, #4
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801016c:	f003 0304 	and.w	r3, r3, #4
 8010170:	2b00      	cmp	r3, #0
 8010172:	d011      	beq.n	8010198 <HAL_UART_IRQHandler+0x128>
 8010174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010178:	f003 0301 	and.w	r3, r3, #1
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00b      	beq.n	8010198 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2204      	movs	r2, #4
 8010186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801018e:	f043 0202 	orr.w	r2, r3, #2
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801019c:	f003 0308 	and.w	r3, r3, #8
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d017      	beq.n	80101d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80101a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101a8:	f003 0320 	and.w	r3, r3, #32
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d105      	bne.n	80101bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80101b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80101b4:	4b5c      	ldr	r3, [pc, #368]	; (8010328 <HAL_UART_IRQHandler+0x2b8>)
 80101b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d00b      	beq.n	80101d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2208      	movs	r2, #8
 80101c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101ca:	f043 0208 	orr.w	r2, r3, #8
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80101d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d012      	beq.n	8010206 <HAL_UART_IRQHandler+0x196>
 80101e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00c      	beq.n	8010206 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80101f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101fc:	f043 0220 	orr.w	r2, r3, #32
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801020c:	2b00      	cmp	r3, #0
 801020e:	f000 8249 	beq.w	80106a4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010216:	f003 0320 	and.w	r3, r3, #32
 801021a:	2b00      	cmp	r3, #0
 801021c:	d013      	beq.n	8010246 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801021e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010222:	f003 0320 	and.w	r3, r3, #32
 8010226:	2b00      	cmp	r3, #0
 8010228:	d105      	bne.n	8010236 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801022a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801022e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010232:	2b00      	cmp	r3, #0
 8010234:	d007      	beq.n	8010246 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801023a:	2b00      	cmp	r3, #0
 801023c:	d003      	beq.n	8010246 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801024c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	689b      	ldr	r3, [r3, #8]
 8010256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801025a:	2b40      	cmp	r3, #64	; 0x40
 801025c:	d005      	beq.n	801026a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801025e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010262:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010266:	2b00      	cmp	r3, #0
 8010268:	d054      	beq.n	8010314 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f001 f873 	bl	8011356 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801027a:	2b40      	cmp	r3, #64	; 0x40
 801027c:	d146      	bne.n	801030c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	3308      	adds	r3, #8
 8010284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801028c:	e853 3f00 	ldrex	r3, [r3]
 8010290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801029c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	3308      	adds	r3, #8
 80102a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80102aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80102ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80102b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80102ba:	e841 2300 	strex	r3, r2, [r1]
 80102be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80102c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d1d9      	bne.n	801027e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d017      	beq.n	8010304 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102da:	4a15      	ldr	r2, [pc, #84]	; (8010330 <HAL_UART_IRQHandler+0x2c0>)
 80102dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fb f861 	bl	800b3ac <HAL_DMA_Abort_IT>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d019      	beq.n	8010324 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80102fe:	4610      	mov	r0, r2
 8010300:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010302:	e00f      	b.n	8010324 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 f9f5 	bl	80106f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801030a:	e00b      	b.n	8010324 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 f9f1 	bl	80106f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010312:	e007      	b.n	8010324 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 f9ed 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010322:	e1bf      	b.n	80106a4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010324:	bf00      	nop
    return;
 8010326:	e1bd      	b.n	80106a4 <HAL_UART_IRQHandler+0x634>
 8010328:	10000001 	.word	0x10000001
 801032c:	04000120 	.word	0x04000120
 8010330:	08011559 	.word	0x08011559

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010338:	2b01      	cmp	r3, #1
 801033a:	f040 8153 	bne.w	80105e4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801033e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010342:	f003 0310 	and.w	r3, r3, #16
 8010346:	2b00      	cmp	r3, #0
 8010348:	f000 814c 	beq.w	80105e4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801034c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010350:	f003 0310 	and.w	r3, r3, #16
 8010354:	2b00      	cmp	r3, #0
 8010356:	f000 8145 	beq.w	80105e4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2210      	movs	r2, #16
 8010360:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	689b      	ldr	r3, [r3, #8]
 8010368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801036c:	2b40      	cmp	r3, #64	; 0x40
 801036e:	f040 80bb 	bne.w	80104e8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010380:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010384:	2b00      	cmp	r3, #0
 8010386:	f000 818f 	beq.w	80106a8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010390:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010394:	429a      	cmp	r2, r3
 8010396:	f080 8187 	bcs.w	80106a8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80103a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f003 0320 	and.w	r3, r3, #32
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f040 8087 	bne.w	80104c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80103c4:	e853 3f00 	ldrex	r3, [r3]
 80103c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80103cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80103d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	461a      	mov	r2, r3
 80103de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80103e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80103ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80103f2:	e841 2300 	strex	r3, r2, [r1]
 80103f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80103fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d1da      	bne.n	80103b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	3308      	adds	r3, #8
 8010408:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801040a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801040c:	e853 3f00 	ldrex	r3, [r3]
 8010410:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010414:	f023 0301 	bic.w	r3, r3, #1
 8010418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	3308      	adds	r3, #8
 8010422:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010426:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801042a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801042c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801042e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010432:	e841 2300 	strex	r3, r2, [r1]
 8010436:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1e1      	bne.n	8010402 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	3308      	adds	r3, #8
 8010444:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010448:	e853 3f00 	ldrex	r3, [r3]
 801044c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801044e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	3308      	adds	r3, #8
 801045e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010462:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010464:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010466:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801046a:	e841 2300 	strex	r3, r2, [r1]
 801046e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1e3      	bne.n	801043e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2220      	movs	r2, #32
 801047a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2200      	movs	r2, #0
 8010482:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801048c:	e853 3f00 	ldrex	r3, [r3]
 8010490:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010494:	f023 0310 	bic.w	r3, r3, #16
 8010498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	461a      	mov	r2, r3
 80104a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80104a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80104ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104ae:	e841 2300 	strex	r3, r2, [r1]
 80104b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80104b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d1e4      	bne.n	8010484 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fa ff1a 	bl	800b2fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2202      	movs	r2, #2
 80104ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104d8:	b29b      	uxth	r3, r3
 80104da:	1ad3      	subs	r3, r2, r3
 80104dc:	b29b      	uxth	r3, r3
 80104de:	4619      	mov	r1, r3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7f7 fa7f 	bl	80079e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80104e6:	e0df      	b.n	80106a8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	1ad3      	subs	r3, r2, r3
 80104f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010502:	b29b      	uxth	r3, r3
 8010504:	2b00      	cmp	r3, #0
 8010506:	f000 80d1 	beq.w	80106ac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801050a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801050e:	2b00      	cmp	r3, #0
 8010510:	f000 80cc 	beq.w	80106ac <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801051a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051c:	e853 3f00 	ldrex	r3, [r3]
 8010520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010528:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	461a      	mov	r2, r3
 8010532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010536:	647b      	str	r3, [r7, #68]	; 0x44
 8010538:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801053a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801053c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801053e:	e841 2300 	strex	r3, r2, [r1]
 8010542:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010546:	2b00      	cmp	r3, #0
 8010548:	d1e4      	bne.n	8010514 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	3308      	adds	r3, #8
 8010550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010554:	e853 3f00 	ldrex	r3, [r3]
 8010558:	623b      	str	r3, [r7, #32]
   return(result);
 801055a:	6a3b      	ldr	r3, [r7, #32]
 801055c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010560:	f023 0301 	bic.w	r3, r3, #1
 8010564:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	3308      	adds	r3, #8
 801056e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010572:	633a      	str	r2, [r7, #48]	; 0x30
 8010574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801057a:	e841 2300 	strex	r3, r2, [r1]
 801057e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010582:	2b00      	cmp	r3, #0
 8010584:	d1e1      	bne.n	801054a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2220      	movs	r2, #32
 801058a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2200      	movs	r2, #0
 8010598:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	e853 3f00 	ldrex	r3, [r3]
 80105a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f023 0310 	bic.w	r3, r3, #16
 80105ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	461a      	mov	r2, r3
 80105b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80105bc:	61fb      	str	r3, [r7, #28]
 80105be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c0:	69b9      	ldr	r1, [r7, #24]
 80105c2:	69fa      	ldr	r2, [r7, #28]
 80105c4:	e841 2300 	strex	r3, r2, [r1]
 80105c8:	617b      	str	r3, [r7, #20]
   return(result);
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1e4      	bne.n	801059a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2202      	movs	r2, #2
 80105d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80105d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80105da:	4619      	mov	r1, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7f7 fa01 	bl	80079e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80105e2:	e063      	b.n	80106ac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80105e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00e      	beq.n	801060e <HAL_UART_IRQHandler+0x59e>
 80105f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d008      	beq.n	801060e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f001 fd6d 	bl	80120e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801060c:	e051      	b.n	80106b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801060e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010616:	2b00      	cmp	r3, #0
 8010618:	d014      	beq.n	8010644 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801061a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010622:	2b00      	cmp	r3, #0
 8010624:	d105      	bne.n	8010632 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801062a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801062e:	2b00      	cmp	r3, #0
 8010630:	d008      	beq.n	8010644 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010636:	2b00      	cmp	r3, #0
 8010638:	d03a      	beq.n	80106b0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	4798      	blx	r3
    }
    return;
 8010642:	e035      	b.n	80106b0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801064c:	2b00      	cmp	r3, #0
 801064e:	d009      	beq.n	8010664 <HAL_UART_IRQHandler+0x5f4>
 8010650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010658:	2b00      	cmp	r3, #0
 801065a:	d003      	beq.n	8010664 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 ff91 	bl	8011584 <UART_EndTransmit_IT>
    return;
 8010662:	e026      	b.n	80106b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d009      	beq.n	8010684 <HAL_UART_IRQHandler+0x614>
 8010670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010674:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010678:	2b00      	cmp	r3, #0
 801067a:	d003      	beq.n	8010684 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f001 fd46 	bl	801210e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010682:	e016      	b.n	80106b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801068c:	2b00      	cmp	r3, #0
 801068e:	d010      	beq.n	80106b2 <HAL_UART_IRQHandler+0x642>
 8010690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010694:	2b00      	cmp	r3, #0
 8010696:	da0c      	bge.n	80106b2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f001 fd2e 	bl	80120fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801069e:	e008      	b.n	80106b2 <HAL_UART_IRQHandler+0x642>
      return;
 80106a0:	bf00      	nop
 80106a2:	e006      	b.n	80106b2 <HAL_UART_IRQHandler+0x642>
    return;
 80106a4:	bf00      	nop
 80106a6:	e004      	b.n	80106b2 <HAL_UART_IRQHandler+0x642>
      return;
 80106a8:	bf00      	nop
 80106aa:	e002      	b.n	80106b2 <HAL_UART_IRQHandler+0x642>
      return;
 80106ac:	bf00      	nop
 80106ae:	e000      	b.n	80106b2 <HAL_UART_IRQHandler+0x642>
    return;
 80106b0:	bf00      	nop
  }
}
 80106b2:	37e8      	adds	r7, #232	; 0xe8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80106c0:	bf00      	nop
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80106d4:	bf00      	nop
 80106d6:	370c      	adds	r7, #12
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr

080106e0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b083      	sub	sp, #12
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80106e8:	bf00      	nop
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80106fc:	bf00      	nop
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8010716:	4618      	mov	r0, r3
 8010718:	370c      	adds	r7, #12
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr
	...

08010724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010728:	b08c      	sub	sp, #48	; 0x30
 801072a:	af00      	add	r7, sp, #0
 801072c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801072e:	2300      	movs	r3, #0
 8010730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	689a      	ldr	r2, [r3, #8]
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	691b      	ldr	r3, [r3, #16]
 801073c:	431a      	orrs	r2, r3
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	695b      	ldr	r3, [r3, #20]
 8010742:	431a      	orrs	r2, r3
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	69db      	ldr	r3, [r3, #28]
 8010748:	4313      	orrs	r3, r2
 801074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	681a      	ldr	r2, [r3, #0]
 8010752:	4baa      	ldr	r3, [pc, #680]	; (80109fc <UART_SetConfig+0x2d8>)
 8010754:	4013      	ands	r3, r2
 8010756:	697a      	ldr	r2, [r7, #20]
 8010758:	6812      	ldr	r2, [r2, #0]
 801075a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801075c:	430b      	orrs	r3, r1
 801075e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	68da      	ldr	r2, [r3, #12]
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	430a      	orrs	r2, r1
 8010774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	699b      	ldr	r3, [r3, #24]
 801077a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4a9f      	ldr	r2, [pc, #636]	; (8010a00 <UART_SetConfig+0x2dc>)
 8010782:	4293      	cmp	r3, r2
 8010784:	d004      	beq.n	8010790 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	6a1b      	ldr	r3, [r3, #32]
 801078a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801078c:	4313      	orrs	r3, r2
 801078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801079a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801079e:	697a      	ldr	r2, [r7, #20]
 80107a0:	6812      	ldr	r2, [r2, #0]
 80107a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107a4:	430b      	orrs	r3, r1
 80107a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ae:	f023 010f 	bic.w	r1, r3, #15
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	430a      	orrs	r2, r1
 80107bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4a90      	ldr	r2, [pc, #576]	; (8010a04 <UART_SetConfig+0x2e0>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d125      	bne.n	8010814 <UART_SetConfig+0xf0>
 80107c8:	4b8f      	ldr	r3, [pc, #572]	; (8010a08 <UART_SetConfig+0x2e4>)
 80107ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107ce:	f003 0303 	and.w	r3, r3, #3
 80107d2:	2b03      	cmp	r3, #3
 80107d4:	d81a      	bhi.n	801080c <UART_SetConfig+0xe8>
 80107d6:	a201      	add	r2, pc, #4	; (adr r2, 80107dc <UART_SetConfig+0xb8>)
 80107d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107dc:	080107ed 	.word	0x080107ed
 80107e0:	080107fd 	.word	0x080107fd
 80107e4:	080107f5 	.word	0x080107f5
 80107e8:	08010805 	.word	0x08010805
 80107ec:	2301      	movs	r3, #1
 80107ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80107f2:	e116      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80107f4:	2302      	movs	r3, #2
 80107f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80107fa:	e112      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80107fc:	2304      	movs	r3, #4
 80107fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010802:	e10e      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010804:	2308      	movs	r3, #8
 8010806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801080a:	e10a      	b.n	8010a22 <UART_SetConfig+0x2fe>
 801080c:	2310      	movs	r3, #16
 801080e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010812:	e106      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4a7c      	ldr	r2, [pc, #496]	; (8010a0c <UART_SetConfig+0x2e8>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d138      	bne.n	8010890 <UART_SetConfig+0x16c>
 801081e:	4b7a      	ldr	r3, [pc, #488]	; (8010a08 <UART_SetConfig+0x2e4>)
 8010820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010824:	f003 030c 	and.w	r3, r3, #12
 8010828:	2b0c      	cmp	r3, #12
 801082a:	d82d      	bhi.n	8010888 <UART_SetConfig+0x164>
 801082c:	a201      	add	r2, pc, #4	; (adr r2, 8010834 <UART_SetConfig+0x110>)
 801082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010832:	bf00      	nop
 8010834:	08010869 	.word	0x08010869
 8010838:	08010889 	.word	0x08010889
 801083c:	08010889 	.word	0x08010889
 8010840:	08010889 	.word	0x08010889
 8010844:	08010879 	.word	0x08010879
 8010848:	08010889 	.word	0x08010889
 801084c:	08010889 	.word	0x08010889
 8010850:	08010889 	.word	0x08010889
 8010854:	08010871 	.word	0x08010871
 8010858:	08010889 	.word	0x08010889
 801085c:	08010889 	.word	0x08010889
 8010860:	08010889 	.word	0x08010889
 8010864:	08010881 	.word	0x08010881
 8010868:	2300      	movs	r3, #0
 801086a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801086e:	e0d8      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010870:	2302      	movs	r3, #2
 8010872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010876:	e0d4      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010878:	2304      	movs	r3, #4
 801087a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801087e:	e0d0      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010880:	2308      	movs	r3, #8
 8010882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010886:	e0cc      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010888:	2310      	movs	r3, #16
 801088a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801088e:	e0c8      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a5e      	ldr	r2, [pc, #376]	; (8010a10 <UART_SetConfig+0x2ec>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d125      	bne.n	80108e6 <UART_SetConfig+0x1c2>
 801089a:	4b5b      	ldr	r3, [pc, #364]	; (8010a08 <UART_SetConfig+0x2e4>)
 801089c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80108a4:	2b30      	cmp	r3, #48	; 0x30
 80108a6:	d016      	beq.n	80108d6 <UART_SetConfig+0x1b2>
 80108a8:	2b30      	cmp	r3, #48	; 0x30
 80108aa:	d818      	bhi.n	80108de <UART_SetConfig+0x1ba>
 80108ac:	2b20      	cmp	r3, #32
 80108ae:	d00a      	beq.n	80108c6 <UART_SetConfig+0x1a2>
 80108b0:	2b20      	cmp	r3, #32
 80108b2:	d814      	bhi.n	80108de <UART_SetConfig+0x1ba>
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <UART_SetConfig+0x19a>
 80108b8:	2b10      	cmp	r3, #16
 80108ba:	d008      	beq.n	80108ce <UART_SetConfig+0x1aa>
 80108bc:	e00f      	b.n	80108de <UART_SetConfig+0x1ba>
 80108be:	2300      	movs	r3, #0
 80108c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80108c4:	e0ad      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80108c6:	2302      	movs	r3, #2
 80108c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80108cc:	e0a9      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80108ce:	2304      	movs	r3, #4
 80108d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80108d4:	e0a5      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80108d6:	2308      	movs	r3, #8
 80108d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80108dc:	e0a1      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80108de:	2310      	movs	r3, #16
 80108e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80108e4:	e09d      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4a4a      	ldr	r2, [pc, #296]	; (8010a14 <UART_SetConfig+0x2f0>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d125      	bne.n	801093c <UART_SetConfig+0x218>
 80108f0:	4b45      	ldr	r3, [pc, #276]	; (8010a08 <UART_SetConfig+0x2e4>)
 80108f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80108fa:	2bc0      	cmp	r3, #192	; 0xc0
 80108fc:	d016      	beq.n	801092c <UART_SetConfig+0x208>
 80108fe:	2bc0      	cmp	r3, #192	; 0xc0
 8010900:	d818      	bhi.n	8010934 <UART_SetConfig+0x210>
 8010902:	2b80      	cmp	r3, #128	; 0x80
 8010904:	d00a      	beq.n	801091c <UART_SetConfig+0x1f8>
 8010906:	2b80      	cmp	r3, #128	; 0x80
 8010908:	d814      	bhi.n	8010934 <UART_SetConfig+0x210>
 801090a:	2b00      	cmp	r3, #0
 801090c:	d002      	beq.n	8010914 <UART_SetConfig+0x1f0>
 801090e:	2b40      	cmp	r3, #64	; 0x40
 8010910:	d008      	beq.n	8010924 <UART_SetConfig+0x200>
 8010912:	e00f      	b.n	8010934 <UART_SetConfig+0x210>
 8010914:	2300      	movs	r3, #0
 8010916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801091a:	e082      	b.n	8010a22 <UART_SetConfig+0x2fe>
 801091c:	2302      	movs	r3, #2
 801091e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010922:	e07e      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010924:	2304      	movs	r3, #4
 8010926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801092a:	e07a      	b.n	8010a22 <UART_SetConfig+0x2fe>
 801092c:	2308      	movs	r3, #8
 801092e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010932:	e076      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010934:	2310      	movs	r3, #16
 8010936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801093a:	e072      	b.n	8010a22 <UART_SetConfig+0x2fe>
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a35      	ldr	r2, [pc, #212]	; (8010a18 <UART_SetConfig+0x2f4>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d12a      	bne.n	801099c <UART_SetConfig+0x278>
 8010946:	4b30      	ldr	r3, [pc, #192]	; (8010a08 <UART_SetConfig+0x2e4>)
 8010948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801094c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010954:	d01a      	beq.n	801098c <UART_SetConfig+0x268>
 8010956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801095a:	d81b      	bhi.n	8010994 <UART_SetConfig+0x270>
 801095c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010960:	d00c      	beq.n	801097c <UART_SetConfig+0x258>
 8010962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010966:	d815      	bhi.n	8010994 <UART_SetConfig+0x270>
 8010968:	2b00      	cmp	r3, #0
 801096a:	d003      	beq.n	8010974 <UART_SetConfig+0x250>
 801096c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010970:	d008      	beq.n	8010984 <UART_SetConfig+0x260>
 8010972:	e00f      	b.n	8010994 <UART_SetConfig+0x270>
 8010974:	2300      	movs	r3, #0
 8010976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801097a:	e052      	b.n	8010a22 <UART_SetConfig+0x2fe>
 801097c:	2302      	movs	r3, #2
 801097e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010982:	e04e      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010984:	2304      	movs	r3, #4
 8010986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801098a:	e04a      	b.n	8010a22 <UART_SetConfig+0x2fe>
 801098c:	2308      	movs	r3, #8
 801098e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010992:	e046      	b.n	8010a22 <UART_SetConfig+0x2fe>
 8010994:	2310      	movs	r3, #16
 8010996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801099a:	e042      	b.n	8010a22 <UART_SetConfig+0x2fe>
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4a17      	ldr	r2, [pc, #92]	; (8010a00 <UART_SetConfig+0x2dc>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d13a      	bne.n	8010a1c <UART_SetConfig+0x2f8>
 80109a6:	4b18      	ldr	r3, [pc, #96]	; (8010a08 <UART_SetConfig+0x2e4>)
 80109a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80109b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80109b4:	d01a      	beq.n	80109ec <UART_SetConfig+0x2c8>
 80109b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80109ba:	d81b      	bhi.n	80109f4 <UART_SetConfig+0x2d0>
 80109bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109c0:	d00c      	beq.n	80109dc <UART_SetConfig+0x2b8>
 80109c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109c6:	d815      	bhi.n	80109f4 <UART_SetConfig+0x2d0>
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d003      	beq.n	80109d4 <UART_SetConfig+0x2b0>
 80109cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109d0:	d008      	beq.n	80109e4 <UART_SetConfig+0x2c0>
 80109d2:	e00f      	b.n	80109f4 <UART_SetConfig+0x2d0>
 80109d4:	2300      	movs	r3, #0
 80109d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109da:	e022      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80109dc:	2302      	movs	r3, #2
 80109de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109e2:	e01e      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80109e4:	2304      	movs	r3, #4
 80109e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109ea:	e01a      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80109ec:	2308      	movs	r3, #8
 80109ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109f2:	e016      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80109f4:	2310      	movs	r3, #16
 80109f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109fa:	e012      	b.n	8010a22 <UART_SetConfig+0x2fe>
 80109fc:	cfff69f3 	.word	0xcfff69f3
 8010a00:	40008000 	.word	0x40008000
 8010a04:	40013800 	.word	0x40013800
 8010a08:	40021000 	.word	0x40021000
 8010a0c:	40004400 	.word	0x40004400
 8010a10:	40004800 	.word	0x40004800
 8010a14:	40004c00 	.word	0x40004c00
 8010a18:	40005000 	.word	0x40005000
 8010a1c:	2310      	movs	r3, #16
 8010a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4aae      	ldr	r2, [pc, #696]	; (8010ce0 <UART_SetConfig+0x5bc>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	f040 8097 	bne.w	8010b5c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010a32:	2b08      	cmp	r3, #8
 8010a34:	d823      	bhi.n	8010a7e <UART_SetConfig+0x35a>
 8010a36:	a201      	add	r2, pc, #4	; (adr r2, 8010a3c <UART_SetConfig+0x318>)
 8010a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a3c:	08010a61 	.word	0x08010a61
 8010a40:	08010a7f 	.word	0x08010a7f
 8010a44:	08010a69 	.word	0x08010a69
 8010a48:	08010a7f 	.word	0x08010a7f
 8010a4c:	08010a6f 	.word	0x08010a6f
 8010a50:	08010a7f 	.word	0x08010a7f
 8010a54:	08010a7f 	.word	0x08010a7f
 8010a58:	08010a7f 	.word	0x08010a7f
 8010a5c:	08010a77 	.word	0x08010a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010a60:	f7fd fbe2 	bl	800e228 <HAL_RCC_GetPCLK1Freq>
 8010a64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010a66:	e010      	b.n	8010a8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010a68:	4b9e      	ldr	r3, [pc, #632]	; (8010ce4 <UART_SetConfig+0x5c0>)
 8010a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010a6c:	e00d      	b.n	8010a8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010a6e:	f7fd fb6d 	bl	800e14c <HAL_RCC_GetSysClockFreq>
 8010a72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010a74:	e009      	b.n	8010a8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010a7c:	e005      	b.n	8010a8a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010a82:	2301      	movs	r3, #1
 8010a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010a88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	f000 8130 	beq.w	8010cf2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a96:	4a94      	ldr	r2, [pc, #592]	; (8010ce8 <UART_SetConfig+0x5c4>)
 8010a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010aa4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	685a      	ldr	r2, [r3, #4]
 8010aaa:	4613      	mov	r3, r2
 8010aac:	005b      	lsls	r3, r3, #1
 8010aae:	4413      	add	r3, r2
 8010ab0:	69ba      	ldr	r2, [r7, #24]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d305      	bcc.n	8010ac2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010abc:	69ba      	ldr	r2, [r7, #24]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d903      	bls.n	8010aca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010ac8:	e113      	b.n	8010cf2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010acc:	2200      	movs	r2, #0
 8010ace:	60bb      	str	r3, [r7, #8]
 8010ad0:	60fa      	str	r2, [r7, #12]
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad6:	4a84      	ldr	r2, [pc, #528]	; (8010ce8 <UART_SetConfig+0x5c4>)
 8010ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	2200      	movs	r2, #0
 8010ae0:	603b      	str	r3, [r7, #0]
 8010ae2:	607a      	str	r2, [r7, #4]
 8010ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ae8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010aec:	f7f5 fd16 	bl	800651c <__aeabi_uldivmod>
 8010af0:	4602      	mov	r2, r0
 8010af2:	460b      	mov	r3, r1
 8010af4:	4610      	mov	r0, r2
 8010af6:	4619      	mov	r1, r3
 8010af8:	f04f 0200 	mov.w	r2, #0
 8010afc:	f04f 0300 	mov.w	r3, #0
 8010b00:	020b      	lsls	r3, r1, #8
 8010b02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010b06:	0202      	lsls	r2, r0, #8
 8010b08:	6979      	ldr	r1, [r7, #20]
 8010b0a:	6849      	ldr	r1, [r1, #4]
 8010b0c:	0849      	lsrs	r1, r1, #1
 8010b0e:	2000      	movs	r0, #0
 8010b10:	460c      	mov	r4, r1
 8010b12:	4605      	mov	r5, r0
 8010b14:	eb12 0804 	adds.w	r8, r2, r4
 8010b18:	eb43 0905 	adc.w	r9, r3, r5
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	469a      	mov	sl, r3
 8010b24:	4693      	mov	fp, r2
 8010b26:	4652      	mov	r2, sl
 8010b28:	465b      	mov	r3, fp
 8010b2a:	4640      	mov	r0, r8
 8010b2c:	4649      	mov	r1, r9
 8010b2e:	f7f5 fcf5 	bl	800651c <__aeabi_uldivmod>
 8010b32:	4602      	mov	r2, r0
 8010b34:	460b      	mov	r3, r1
 8010b36:	4613      	mov	r3, r2
 8010b38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010b3a:	6a3b      	ldr	r3, [r7, #32]
 8010b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b40:	d308      	bcc.n	8010b54 <UART_SetConfig+0x430>
 8010b42:	6a3b      	ldr	r3, [r7, #32]
 8010b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b48:	d204      	bcs.n	8010b54 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	6a3a      	ldr	r2, [r7, #32]
 8010b50:	60da      	str	r2, [r3, #12]
 8010b52:	e0ce      	b.n	8010cf2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010b54:	2301      	movs	r3, #1
 8010b56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010b5a:	e0ca      	b.n	8010cf2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	69db      	ldr	r3, [r3, #28]
 8010b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b64:	d166      	bne.n	8010c34 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010b66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010b6a:	2b08      	cmp	r3, #8
 8010b6c:	d827      	bhi.n	8010bbe <UART_SetConfig+0x49a>
 8010b6e:	a201      	add	r2, pc, #4	; (adr r2, 8010b74 <UART_SetConfig+0x450>)
 8010b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b74:	08010b99 	.word	0x08010b99
 8010b78:	08010ba1 	.word	0x08010ba1
 8010b7c:	08010ba9 	.word	0x08010ba9
 8010b80:	08010bbf 	.word	0x08010bbf
 8010b84:	08010baf 	.word	0x08010baf
 8010b88:	08010bbf 	.word	0x08010bbf
 8010b8c:	08010bbf 	.word	0x08010bbf
 8010b90:	08010bbf 	.word	0x08010bbf
 8010b94:	08010bb7 	.word	0x08010bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b98:	f7fd fb46 	bl	800e228 <HAL_RCC_GetPCLK1Freq>
 8010b9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010b9e:	e014      	b.n	8010bca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ba0:	f7fd fb58 	bl	800e254 <HAL_RCC_GetPCLK2Freq>
 8010ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010ba6:	e010      	b.n	8010bca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010ba8:	4b4e      	ldr	r3, [pc, #312]	; (8010ce4 <UART_SetConfig+0x5c0>)
 8010baa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010bac:	e00d      	b.n	8010bca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010bae:	f7fd facd 	bl	800e14c <HAL_RCC_GetSysClockFreq>
 8010bb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010bb4:	e009      	b.n	8010bca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010bbc:	e005      	b.n	8010bca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010bc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	f000 8090 	beq.w	8010cf2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd6:	4a44      	ldr	r2, [pc, #272]	; (8010ce8 <UART_SetConfig+0x5c4>)
 8010bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bdc:	461a      	mov	r2, r3
 8010bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010be4:	005a      	lsls	r2, r3, #1
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	085b      	lsrs	r3, r3, #1
 8010bec:	441a      	add	r2, r3
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010bf8:	6a3b      	ldr	r3, [r7, #32]
 8010bfa:	2b0f      	cmp	r3, #15
 8010bfc:	d916      	bls.n	8010c2c <UART_SetConfig+0x508>
 8010bfe:	6a3b      	ldr	r3, [r7, #32]
 8010c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c04:	d212      	bcs.n	8010c2c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c06:	6a3b      	ldr	r3, [r7, #32]
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	f023 030f 	bic.w	r3, r3, #15
 8010c0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010c10:	6a3b      	ldr	r3, [r7, #32]
 8010c12:	085b      	lsrs	r3, r3, #1
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	f003 0307 	and.w	r3, r3, #7
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	8bfb      	ldrh	r3, [r7, #30]
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	8bfa      	ldrh	r2, [r7, #30]
 8010c28:	60da      	str	r2, [r3, #12]
 8010c2a:	e062      	b.n	8010cf2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010c32:	e05e      	b.n	8010cf2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010c34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010c38:	2b08      	cmp	r3, #8
 8010c3a:	d828      	bhi.n	8010c8e <UART_SetConfig+0x56a>
 8010c3c:	a201      	add	r2, pc, #4	; (adr r2, 8010c44 <UART_SetConfig+0x520>)
 8010c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c42:	bf00      	nop
 8010c44:	08010c69 	.word	0x08010c69
 8010c48:	08010c71 	.word	0x08010c71
 8010c4c:	08010c79 	.word	0x08010c79
 8010c50:	08010c8f 	.word	0x08010c8f
 8010c54:	08010c7f 	.word	0x08010c7f
 8010c58:	08010c8f 	.word	0x08010c8f
 8010c5c:	08010c8f 	.word	0x08010c8f
 8010c60:	08010c8f 	.word	0x08010c8f
 8010c64:	08010c87 	.word	0x08010c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c68:	f7fd fade 	bl	800e228 <HAL_RCC_GetPCLK1Freq>
 8010c6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010c6e:	e014      	b.n	8010c9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c70:	f7fd faf0 	bl	800e254 <HAL_RCC_GetPCLK2Freq>
 8010c74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010c76:	e010      	b.n	8010c9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c78:	4b1a      	ldr	r3, [pc, #104]	; (8010ce4 <UART_SetConfig+0x5c0>)
 8010c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010c7c:	e00d      	b.n	8010c9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c7e:	f7fd fa65 	bl	800e14c <HAL_RCC_GetSysClockFreq>
 8010c82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010c84:	e009      	b.n	8010c9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010c8c:	e005      	b.n	8010c9a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010c92:	2301      	movs	r3, #1
 8010c94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010c98:	bf00      	nop
    }

    if (pclk != 0U)
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d028      	beq.n	8010cf2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca4:	4a10      	ldr	r2, [pc, #64]	; (8010ce8 <UART_SetConfig+0x5c4>)
 8010ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010caa:	461a      	mov	r2, r3
 8010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cae:	fbb3 f2f2 	udiv	r2, r3, r2
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	085b      	lsrs	r3, r3, #1
 8010cb8:	441a      	add	r2, r3
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010cc4:	6a3b      	ldr	r3, [r7, #32]
 8010cc6:	2b0f      	cmp	r3, #15
 8010cc8:	d910      	bls.n	8010cec <UART_SetConfig+0x5c8>
 8010cca:	6a3b      	ldr	r3, [r7, #32]
 8010ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cd0:	d20c      	bcs.n	8010cec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	60da      	str	r2, [r3, #12]
 8010cdc:	e009      	b.n	8010cf2 <UART_SetConfig+0x5ce>
 8010cde:	bf00      	nop
 8010ce0:	40008000 	.word	0x40008000
 8010ce4:	00f42400 	.word	0x00f42400
 8010ce8:	08020500 	.word	0x08020500
      }
      else
      {
        ret = HAL_ERROR;
 8010cec:	2301      	movs	r3, #1
 8010cee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	2200      	movs	r2, #0
 8010d06:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010d0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3730      	adds	r7, #48	; 0x30
 8010d16:	46bd      	mov	sp, r7
 8010d18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b083      	sub	sp, #12
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d28:	f003 0308 	and.w	r3, r3, #8
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00a      	beq.n	8010d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	430a      	orrs	r2, r1
 8010d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d4a:	f003 0301 	and.w	r3, r3, #1
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d00a      	beq.n	8010d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	685b      	ldr	r3, [r3, #4]
 8010d58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	430a      	orrs	r2, r1
 8010d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d6c:	f003 0302 	and.w	r3, r3, #2
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d00a      	beq.n	8010d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	430a      	orrs	r2, r1
 8010d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d8e:	f003 0304 	and.w	r3, r3, #4
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00a      	beq.n	8010dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	430a      	orrs	r2, r1
 8010daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010db0:	f003 0310 	and.w	r3, r3, #16
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d00a      	beq.n	8010dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	689b      	ldr	r3, [r3, #8]
 8010dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	430a      	orrs	r2, r1
 8010dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dd2:	f003 0320 	and.w	r3, r3, #32
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d00a      	beq.n	8010df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	689b      	ldr	r3, [r3, #8]
 8010de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	430a      	orrs	r2, r1
 8010dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d01a      	beq.n	8010e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	430a      	orrs	r2, r1
 8010e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e1a:	d10a      	bne.n	8010e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	430a      	orrs	r2, r1
 8010e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d00a      	beq.n	8010e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	430a      	orrs	r2, r1
 8010e52:	605a      	str	r2, [r3, #4]
  }
}
 8010e54:	bf00      	nop
 8010e56:	370c      	adds	r7, #12
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr

08010e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b098      	sub	sp, #96	; 0x60
 8010e64:	af02      	add	r7, sp, #8
 8010e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010e70:	f7f8 f9ae 	bl	80091d0 <HAL_GetTick>
 8010e74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f003 0308 	and.w	r3, r3, #8
 8010e80:	2b08      	cmp	r3, #8
 8010e82:	d12f      	bne.n	8010ee4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010e88:	9300      	str	r3, [sp, #0]
 8010e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f000 f88e 	bl	8010fb4 <UART_WaitOnFlagUntilTimeout>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d022      	beq.n	8010ee4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea6:	e853 3f00 	ldrex	r3, [r3]
 8010eaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	461a      	mov	r2, r3
 8010eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8010ebe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ec4:	e841 2300 	strex	r3, r2, [r1]
 8010ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d1e6      	bne.n	8010e9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2220      	movs	r2, #32
 8010ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2200      	movs	r2, #0
 8010edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	e063      	b.n	8010fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	f003 0304 	and.w	r3, r3, #4
 8010eee:	2b04      	cmp	r3, #4
 8010ef0:	d149      	bne.n	8010f86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ef2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010efa:	2200      	movs	r2, #0
 8010efc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f000 f857 	bl	8010fb4 <UART_WaitOnFlagUntilTimeout>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d03c      	beq.n	8010f86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f14:	e853 3f00 	ldrex	r3, [r3]
 8010f18:	623b      	str	r3, [r7, #32]
   return(result);
 8010f1a:	6a3b      	ldr	r3, [r7, #32]
 8010f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	461a      	mov	r2, r3
 8010f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8010f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f32:	e841 2300 	strex	r3, r2, [r1]
 8010f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d1e6      	bne.n	8010f0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	3308      	adds	r3, #8
 8010f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	e853 3f00 	ldrex	r3, [r3]
 8010f4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f023 0301 	bic.w	r3, r3, #1
 8010f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	3308      	adds	r3, #8
 8010f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f5e:	61fa      	str	r2, [r7, #28]
 8010f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f62:	69b9      	ldr	r1, [r7, #24]
 8010f64:	69fa      	ldr	r2, [r7, #28]
 8010f66:	e841 2300 	strex	r3, r2, [r1]
 8010f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d1e5      	bne.n	8010f3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2220      	movs	r2, #32
 8010f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f82:	2303      	movs	r3, #3
 8010f84:	e012      	b.n	8010fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2220      	movs	r2, #32
 8010f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2220      	movs	r2, #32
 8010f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010faa:	2300      	movs	r3, #0
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3758      	adds	r7, #88	; 0x58
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	603b      	str	r3, [r7, #0]
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fc4:	e04f      	b.n	8011066 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010fc6:	69bb      	ldr	r3, [r7, #24]
 8010fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fcc:	d04b      	beq.n	8011066 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010fce:	f7f8 f8ff 	bl	80091d0 <HAL_GetTick>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	1ad3      	subs	r3, r2, r3
 8010fd8:	69ba      	ldr	r2, [r7, #24]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d302      	bcc.n	8010fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d101      	bne.n	8010fe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	e04e      	b.n	8011086 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f003 0304 	and.w	r3, r3, #4
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d037      	beq.n	8011066 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	2b80      	cmp	r3, #128	; 0x80
 8010ffa:	d034      	beq.n	8011066 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	2b40      	cmp	r3, #64	; 0x40
 8011000:	d031      	beq.n	8011066 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	69db      	ldr	r3, [r3, #28]
 8011008:	f003 0308 	and.w	r3, r3, #8
 801100c:	2b08      	cmp	r3, #8
 801100e:	d110      	bne.n	8011032 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2208      	movs	r2, #8
 8011016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011018:	68f8      	ldr	r0, [r7, #12]
 801101a:	f000 f99c 	bl	8011356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2208      	movs	r2, #8
 8011022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	2200      	movs	r2, #0
 801102a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801102e:	2301      	movs	r3, #1
 8011030:	e029      	b.n	8011086 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	69db      	ldr	r3, [r3, #28]
 8011038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801103c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011040:	d111      	bne.n	8011066 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801104a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801104c:	68f8      	ldr	r0, [r7, #12]
 801104e:	f000 f982 	bl	8011356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	2220      	movs	r2, #32
 8011056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2200      	movs	r2, #0
 801105e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011062:	2303      	movs	r3, #3
 8011064:	e00f      	b.n	8011086 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	69da      	ldr	r2, [r3, #28]
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	4013      	ands	r3, r2
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	429a      	cmp	r2, r3
 8011074:	bf0c      	ite	eq
 8011076:	2301      	moveq	r3, #1
 8011078:	2300      	movne	r3, #0
 801107a:	b2db      	uxtb	r3, r3
 801107c:	461a      	mov	r2, r3
 801107e:	79fb      	ldrb	r3, [r7, #7]
 8011080:	429a      	cmp	r2, r3
 8011082:	d0a0      	beq.n	8010fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011084:	2300      	movs	r3, #0
}
 8011086:	4618      	mov	r0, r3
 8011088:	3710      	adds	r7, #16
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
	...

08011090 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011090:	b480      	push	{r7}
 8011092:	b0a3      	sub	sp, #140	; 0x8c
 8011094:	af00      	add	r7, sp, #0
 8011096:	60f8      	str	r0, [r7, #12]
 8011098:	60b9      	str	r1, [r7, #8]
 801109a:	4613      	mov	r3, r2
 801109c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	68ba      	ldr	r2, [r7, #8]
 80110a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	88fa      	ldrh	r2, [r7, #6]
 80110a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	88fa      	ldrh	r2, [r7, #6]
 80110b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2200      	movs	r2, #0
 80110b8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	689b      	ldr	r3, [r3, #8]
 80110be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110c2:	d10e      	bne.n	80110e2 <UART_Start_Receive_IT+0x52>
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	691b      	ldr	r3, [r3, #16]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d105      	bne.n	80110d8 <UART_Start_Receive_IT+0x48>
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80110d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80110d6:	e02d      	b.n	8011134 <UART_Start_Receive_IT+0xa4>
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	22ff      	movs	r2, #255	; 0xff
 80110dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80110e0:	e028      	b.n	8011134 <UART_Start_Receive_IT+0xa4>
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	689b      	ldr	r3, [r3, #8]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d10d      	bne.n	8011106 <UART_Start_Receive_IT+0x76>
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	691b      	ldr	r3, [r3, #16]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d104      	bne.n	80110fc <UART_Start_Receive_IT+0x6c>
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	22ff      	movs	r2, #255	; 0xff
 80110f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80110fa:	e01b      	b.n	8011134 <UART_Start_Receive_IT+0xa4>
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	227f      	movs	r2, #127	; 0x7f
 8011100:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011104:	e016      	b.n	8011134 <UART_Start_Receive_IT+0xa4>
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	689b      	ldr	r3, [r3, #8]
 801110a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801110e:	d10d      	bne.n	801112c <UART_Start_Receive_IT+0x9c>
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	691b      	ldr	r3, [r3, #16]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d104      	bne.n	8011122 <UART_Start_Receive_IT+0x92>
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	227f      	movs	r2, #127	; 0x7f
 801111c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011120:	e008      	b.n	8011134 <UART_Start_Receive_IT+0xa4>
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	223f      	movs	r2, #63	; 0x3f
 8011126:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801112a:	e003      	b.n	8011134 <UART_Start_Receive_IT+0xa4>
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2200      	movs	r2, #0
 8011130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2200      	movs	r2, #0
 8011138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2222      	movs	r2, #34	; 0x22
 8011140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	3308      	adds	r3, #8
 801114a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801114c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801114e:	e853 3f00 	ldrex	r3, [r3]
 8011152:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011156:	f043 0301 	orr.w	r3, r3, #1
 801115a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	3308      	adds	r3, #8
 8011164:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011168:	673a      	str	r2, [r7, #112]	; 0x70
 801116a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801116c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801116e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011170:	e841 2300 	strex	r3, r2, [r1]
 8011174:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011178:	2b00      	cmp	r3, #0
 801117a:	d1e3      	bne.n	8011144 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011184:	d14f      	bne.n	8011226 <UART_Start_Receive_IT+0x196>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801118c:	88fa      	ldrh	r2, [r7, #6]
 801118e:	429a      	cmp	r2, r3
 8011190:	d349      	bcc.n	8011226 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801119a:	d107      	bne.n	80111ac <UART_Start_Receive_IT+0x11c>
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	691b      	ldr	r3, [r3, #16]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d103      	bne.n	80111ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	4a47      	ldr	r2, [pc, #284]	; (80112c4 <UART_Start_Receive_IT+0x234>)
 80111a8:	675a      	str	r2, [r3, #116]	; 0x74
 80111aa:	e002      	b.n	80111b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	4a46      	ldr	r2, [pc, #280]	; (80112c8 <UART_Start_Receive_IT+0x238>)
 80111b0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	691b      	ldr	r3, [r3, #16]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d01a      	beq.n	80111f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111c2:	e853 3f00 	ldrex	r3, [r3]
 80111c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80111c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80111dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80111de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80111e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80111e4:	e841 2300 	strex	r3, r2, [r1]
 80111e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80111ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d1e4      	bne.n	80111ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	3308      	adds	r3, #8
 80111f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111fa:	e853 3f00 	ldrex	r3, [r3]
 80111fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011206:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	3308      	adds	r3, #8
 801120e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011210:	64ba      	str	r2, [r7, #72]	; 0x48
 8011212:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011214:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011218:	e841 2300 	strex	r3, r2, [r1]
 801121c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801121e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011220:	2b00      	cmp	r3, #0
 8011222:	d1e5      	bne.n	80111f0 <UART_Start_Receive_IT+0x160>
 8011224:	e046      	b.n	80112b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	689b      	ldr	r3, [r3, #8]
 801122a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801122e:	d107      	bne.n	8011240 <UART_Start_Receive_IT+0x1b0>
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	691b      	ldr	r3, [r3, #16]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d103      	bne.n	8011240 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	4a24      	ldr	r2, [pc, #144]	; (80112cc <UART_Start_Receive_IT+0x23c>)
 801123c:	675a      	str	r2, [r3, #116]	; 0x74
 801123e:	e002      	b.n	8011246 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	4a23      	ldr	r2, [pc, #140]	; (80112d0 <UART_Start_Receive_IT+0x240>)
 8011244:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	691b      	ldr	r3, [r3, #16]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d019      	beq.n	8011282 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011256:	e853 3f00 	ldrex	r3, [r3]
 801125a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011262:	677b      	str	r3, [r7, #116]	; 0x74
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	461a      	mov	r2, r3
 801126a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801126c:	637b      	str	r3, [r7, #52]	; 0x34
 801126e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011274:	e841 2300 	strex	r3, r2, [r1]
 8011278:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801127a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127c:	2b00      	cmp	r3, #0
 801127e:	d1e6      	bne.n	801124e <UART_Start_Receive_IT+0x1be>
 8011280:	e018      	b.n	80112b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	e853 3f00 	ldrex	r3, [r3]
 801128e:	613b      	str	r3, [r7, #16]
   return(result);
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	f043 0320 	orr.w	r3, r3, #32
 8011296:	67bb      	str	r3, [r7, #120]	; 0x78
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	461a      	mov	r2, r3
 801129e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112a0:	623b      	str	r3, [r7, #32]
 80112a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112a4:	69f9      	ldr	r1, [r7, #28]
 80112a6:	6a3a      	ldr	r2, [r7, #32]
 80112a8:	e841 2300 	strex	r3, r2, [r1]
 80112ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d1e6      	bne.n	8011282 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80112b4:	2300      	movs	r3, #0
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	378c      	adds	r7, #140	; 0x8c
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	08011cad 	.word	0x08011cad
 80112c8:	0801194d 	.word	0x0801194d
 80112cc:	08011795 	.word	0x08011795
 80112d0:	080115dd 	.word	0x080115dd

080112d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b08f      	sub	sp, #60	; 0x3c
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112e2:	6a3b      	ldr	r3, [r7, #32]
 80112e4:	e853 3f00 	ldrex	r3, [r3]
 80112e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80112f0:	637b      	str	r3, [r7, #52]	; 0x34
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	461a      	mov	r2, r3
 80112f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112fc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011302:	e841 2300 	strex	r3, r2, [r1]
 8011306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	2b00      	cmp	r3, #0
 801130c:	d1e6      	bne.n	80112dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3308      	adds	r3, #8
 8011314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	e853 3f00 	ldrex	r3, [r3]
 801131c:	60bb      	str	r3, [r7, #8]
   return(result);
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011324:	633b      	str	r3, [r7, #48]	; 0x30
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	3308      	adds	r3, #8
 801132c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801132e:	61ba      	str	r2, [r7, #24]
 8011330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011332:	6979      	ldr	r1, [r7, #20]
 8011334:	69ba      	ldr	r2, [r7, #24]
 8011336:	e841 2300 	strex	r3, r2, [r1]
 801133a:	613b      	str	r3, [r7, #16]
   return(result);
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d1e5      	bne.n	801130e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2220      	movs	r2, #32
 8011346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801134a:	bf00      	nop
 801134c:	373c      	adds	r7, #60	; 0x3c
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr

08011356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011356:	b480      	push	{r7}
 8011358:	b095      	sub	sp, #84	; 0x54
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011366:	e853 3f00 	ldrex	r3, [r3]
 801136a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801136c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801136e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	461a      	mov	r2, r3
 801137a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137c:	643b      	str	r3, [r7, #64]	; 0x40
 801137e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011384:	e841 2300 	strex	r3, r2, [r1]
 8011388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801138a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138c:	2b00      	cmp	r3, #0
 801138e:	d1e6      	bne.n	801135e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	3308      	adds	r3, #8
 8011396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011398:	6a3b      	ldr	r3, [r7, #32]
 801139a:	e853 3f00 	ldrex	r3, [r3]
 801139e:	61fb      	str	r3, [r7, #28]
   return(result);
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80113a6:	f023 0301 	bic.w	r3, r3, #1
 80113aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	3308      	adds	r3, #8
 80113b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80113b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80113ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113bc:	e841 2300 	strex	r3, r2, [r1]
 80113c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80113c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d1e3      	bne.n	8011390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d118      	bne.n	8011402 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	e853 3f00 	ldrex	r3, [r3]
 80113dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	f023 0310 	bic.w	r3, r3, #16
 80113e4:	647b      	str	r3, [r7, #68]	; 0x44
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	461a      	mov	r2, r3
 80113ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113ee:	61bb      	str	r3, [r7, #24]
 80113f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113f2:	6979      	ldr	r1, [r7, #20]
 80113f4:	69ba      	ldr	r2, [r7, #24]
 80113f6:	e841 2300 	strex	r3, r2, [r1]
 80113fa:	613b      	str	r3, [r7, #16]
   return(result);
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d1e6      	bne.n	80113d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2220      	movs	r2, #32
 8011406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2200      	movs	r2, #0
 801140e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011416:	bf00      	nop
 8011418:	3754      	adds	r7, #84	; 0x54
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr

08011422 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011422:	b580      	push	{r7, lr}
 8011424:	b090      	sub	sp, #64	; 0x40
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801142e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f003 0320 	and.w	r3, r3, #32
 801143a:	2b00      	cmp	r3, #0
 801143c:	d137      	bne.n	80114ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 801143e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011440:	2200      	movs	r2, #0
 8011442:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	3308      	adds	r3, #8
 801144c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011450:	e853 3f00 	ldrex	r3, [r3]
 8011454:	623b      	str	r3, [r7, #32]
   return(result);
 8011456:	6a3b      	ldr	r3, [r7, #32]
 8011458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801145c:	63bb      	str	r3, [r7, #56]	; 0x38
 801145e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	3308      	adds	r3, #8
 8011464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011466:	633a      	str	r2, [r7, #48]	; 0x30
 8011468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801146a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801146c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801146e:	e841 2300 	strex	r3, r2, [r1]
 8011472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011476:	2b00      	cmp	r3, #0
 8011478:	d1e5      	bne.n	8011446 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801147a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	e853 3f00 	ldrex	r3, [r3]
 8011486:	60fb      	str	r3, [r7, #12]
   return(result);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801148e:	637b      	str	r3, [r7, #52]	; 0x34
 8011490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	461a      	mov	r2, r3
 8011496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011498:	61fb      	str	r3, [r7, #28]
 801149a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801149c:	69b9      	ldr	r1, [r7, #24]
 801149e:	69fa      	ldr	r2, [r7, #28]
 80114a0:	e841 2300 	strex	r3, r2, [r1]
 80114a4:	617b      	str	r3, [r7, #20]
   return(result);
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1e6      	bne.n	801147a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80114ac:	e002      	b.n	80114b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80114ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114b0:	f7ff f902 	bl	80106b8 <HAL_UART_TxCpltCallback>
}
 80114b4:	bf00      	nop
 80114b6:	3740      	adds	r7, #64	; 0x40
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80114ca:	68f8      	ldr	r0, [r7, #12]
 80114cc:	f7ff f8fe 	bl	80106cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80114d0:	bf00      	nop
 80114d2:	3710      	adds	r7, #16
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b086      	sub	sp, #24
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114f4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011500:	2b80      	cmp	r3, #128	; 0x80
 8011502:	d109      	bne.n	8011518 <UART_DMAError+0x40>
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	2b21      	cmp	r3, #33	; 0x21
 8011508:	d106      	bne.n	8011518 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	2200      	movs	r2, #0
 801150e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011512:	6978      	ldr	r0, [r7, #20]
 8011514:	f7ff fede 	bl	80112d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	689b      	ldr	r3, [r3, #8]
 801151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011522:	2b40      	cmp	r3, #64	; 0x40
 8011524:	d109      	bne.n	801153a <UART_DMAError+0x62>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2b22      	cmp	r3, #34	; 0x22
 801152a:	d106      	bne.n	801153a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	2200      	movs	r2, #0
 8011530:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011534:	6978      	ldr	r0, [r7, #20]
 8011536:	f7ff ff0e 	bl	8011356 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011540:	f043 0210 	orr.w	r2, r3, #16
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801154a:	6978      	ldr	r0, [r7, #20]
 801154c:	f7ff f8d2 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011550:	bf00      	nop
 8011552:	3718      	adds	r7, #24
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2200      	movs	r2, #0
 801156a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2200      	movs	r2, #0
 8011572:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011576:	68f8      	ldr	r0, [r7, #12]
 8011578:	f7ff f8bc 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801157c:	bf00      	nop
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b088      	sub	sp, #32
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	e853 3f00 	ldrex	r3, [r3]
 8011598:	60bb      	str	r3, [r7, #8]
   return(result);
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115a0:	61fb      	str	r3, [r7, #28]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	461a      	mov	r2, r3
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	61bb      	str	r3, [r7, #24]
 80115ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ae:	6979      	ldr	r1, [r7, #20]
 80115b0:	69ba      	ldr	r2, [r7, #24]
 80115b2:	e841 2300 	strex	r3, r2, [r1]
 80115b6:	613b      	str	r3, [r7, #16]
   return(result);
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1e6      	bne.n	801158c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2220      	movs	r2, #32
 80115c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	f7ff f873 	bl	80106b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115d2:	bf00      	nop
 80115d4:	3720      	adds	r7, #32
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
	...

080115dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b09c      	sub	sp, #112	; 0x70
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115f4:	2b22      	cmp	r3, #34	; 0x22
 80115f6:	f040 80be 	bne.w	8011776 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011600:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011604:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011608:	b2d9      	uxtb	r1, r3
 801160a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801160e:	b2da      	uxtb	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011614:	400a      	ands	r2, r1
 8011616:	b2d2      	uxtb	r2, r2
 8011618:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801162a:	b29b      	uxth	r3, r3
 801162c:	3b01      	subs	r3, #1
 801162e:	b29a      	uxth	r2, r3
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801163c:	b29b      	uxth	r3, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	f040 80a1 	bne.w	8011786 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801164a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801164c:	e853 3f00 	ldrex	r3, [r3]
 8011650:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011658:	66bb      	str	r3, [r7, #104]	; 0x68
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	461a      	mov	r2, r3
 8011660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011662:	65bb      	str	r3, [r7, #88]	; 0x58
 8011664:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011666:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801166a:	e841 2300 	strex	r3, r2, [r1]
 801166e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011672:	2b00      	cmp	r3, #0
 8011674:	d1e6      	bne.n	8011644 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	3308      	adds	r3, #8
 801167c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801167e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011680:	e853 3f00 	ldrex	r3, [r3]
 8011684:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011688:	f023 0301 	bic.w	r3, r3, #1
 801168c:	667b      	str	r3, [r7, #100]	; 0x64
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	3308      	adds	r3, #8
 8011694:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011696:	647a      	str	r2, [r7, #68]	; 0x44
 8011698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801169a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801169c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801169e:	e841 2300 	strex	r3, r2, [r1]
 80116a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80116a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d1e5      	bne.n	8011676 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2220      	movs	r2, #32
 80116ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2200      	movs	r2, #0
 80116b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2200      	movs	r2, #0
 80116bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	4a33      	ldr	r2, [pc, #204]	; (8011790 <UART_RxISR_8BIT+0x1b4>)
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d01f      	beq.n	8011708 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d018      	beq.n	8011708 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116de:	e853 3f00 	ldrex	r3, [r3]
 80116e2:	623b      	str	r3, [r7, #32]
   return(result);
 80116e4:	6a3b      	ldr	r3, [r7, #32]
 80116e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80116ea:	663b      	str	r3, [r7, #96]	; 0x60
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	461a      	mov	r2, r3
 80116f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116f4:	633b      	str	r3, [r7, #48]	; 0x30
 80116f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116fc:	e841 2300 	strex	r3, r2, [r1]
 8011700:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1e6      	bne.n	80116d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801170c:	2b01      	cmp	r3, #1
 801170e:	d12e      	bne.n	801176e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2200      	movs	r2, #0
 8011714:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	e853 3f00 	ldrex	r3, [r3]
 8011722:	60fb      	str	r3, [r7, #12]
   return(result);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f023 0310 	bic.w	r3, r3, #16
 801172a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	461a      	mov	r2, r3
 8011732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011734:	61fb      	str	r3, [r7, #28]
 8011736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011738:	69b9      	ldr	r1, [r7, #24]
 801173a:	69fa      	ldr	r2, [r7, #28]
 801173c:	e841 2300 	strex	r3, r2, [r1]
 8011740:	617b      	str	r3, [r7, #20]
   return(result);
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d1e6      	bne.n	8011716 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	69db      	ldr	r3, [r3, #28]
 801174e:	f003 0310 	and.w	r3, r3, #16
 8011752:	2b10      	cmp	r3, #16
 8011754:	d103      	bne.n	801175e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2210      	movs	r2, #16
 801175c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011764:	4619      	mov	r1, r3
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7f6 f93c 	bl	80079e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801176c:	e00b      	b.n	8011786 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f7fe ffb6 	bl	80106e0 <HAL_UART_RxCpltCallback>
}
 8011774:	e007      	b.n	8011786 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	699a      	ldr	r2, [r3, #24]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	f042 0208 	orr.w	r2, r2, #8
 8011784:	619a      	str	r2, [r3, #24]
}
 8011786:	bf00      	nop
 8011788:	3770      	adds	r7, #112	; 0x70
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	40008000 	.word	0x40008000

08011794 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b09c      	sub	sp, #112	; 0x70
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117ac:	2b22      	cmp	r3, #34	; 0x22
 80117ae:	f040 80be 	bne.w	801192e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117c0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80117c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80117c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80117ca:	4013      	ands	r3, r2
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117d6:	1c9a      	adds	r2, r3, #2
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	3b01      	subs	r3, #1
 80117e6:	b29a      	uxth	r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f040 80a1 	bne.w	801193e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011804:	e853 3f00 	ldrex	r3, [r3]
 8011808:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801180a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801180c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011810:	667b      	str	r3, [r7, #100]	; 0x64
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	461a      	mov	r2, r3
 8011818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801181a:	657b      	str	r3, [r7, #84]	; 0x54
 801181c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801181e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011822:	e841 2300 	strex	r3, r2, [r1]
 8011826:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1e6      	bne.n	80117fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	3308      	adds	r3, #8
 8011834:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011838:	e853 3f00 	ldrex	r3, [r3]
 801183c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011840:	f023 0301 	bic.w	r3, r3, #1
 8011844:	663b      	str	r3, [r7, #96]	; 0x60
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	3308      	adds	r3, #8
 801184c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801184e:	643a      	str	r2, [r7, #64]	; 0x40
 8011850:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011852:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011856:	e841 2300 	strex	r3, r2, [r1]
 801185a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801185c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185e:	2b00      	cmp	r3, #0
 8011860:	d1e5      	bne.n	801182e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2220      	movs	r2, #32
 8011866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2200      	movs	r2, #0
 801186e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2200      	movs	r2, #0
 8011874:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4a33      	ldr	r2, [pc, #204]	; (8011948 <UART_RxISR_16BIT+0x1b4>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d01f      	beq.n	80118c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801188a:	2b00      	cmp	r3, #0
 801188c:	d018      	beq.n	80118c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011894:	6a3b      	ldr	r3, [r7, #32]
 8011896:	e853 3f00 	ldrex	r3, [r3]
 801189a:	61fb      	str	r3, [r7, #28]
   return(result);
 801189c:	69fb      	ldr	r3, [r7, #28]
 801189e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80118a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	461a      	mov	r2, r3
 80118aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80118b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118b4:	e841 2300 	strex	r3, r2, [r1]
 80118b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80118ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d1e6      	bne.n	801188e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d12e      	bne.n	8011926 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	e853 3f00 	ldrex	r3, [r3]
 80118da:	60bb      	str	r3, [r7, #8]
   return(result);
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	f023 0310 	bic.w	r3, r3, #16
 80118e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	461a      	mov	r2, r3
 80118ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118ec:	61bb      	str	r3, [r7, #24]
 80118ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118f0:	6979      	ldr	r1, [r7, #20]
 80118f2:	69ba      	ldr	r2, [r7, #24]
 80118f4:	e841 2300 	strex	r3, r2, [r1]
 80118f8:	613b      	str	r3, [r7, #16]
   return(result);
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d1e6      	bne.n	80118ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	69db      	ldr	r3, [r3, #28]
 8011906:	f003 0310 	and.w	r3, r3, #16
 801190a:	2b10      	cmp	r3, #16
 801190c:	d103      	bne.n	8011916 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2210      	movs	r2, #16
 8011914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801191c:	4619      	mov	r1, r3
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f7f6 f860 	bl	80079e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011924:	e00b      	b.n	801193e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7fe feda 	bl	80106e0 <HAL_UART_RxCpltCallback>
}
 801192c:	e007      	b.n	801193e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	699a      	ldr	r2, [r3, #24]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f042 0208 	orr.w	r2, r2, #8
 801193c:	619a      	str	r2, [r3, #24]
}
 801193e:	bf00      	nop
 8011940:	3770      	adds	r7, #112	; 0x70
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	40008000 	.word	0x40008000

0801194c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b0ac      	sub	sp, #176	; 0xb0
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801195a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	69db      	ldr	r3, [r3, #28]
 8011964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	689b      	ldr	r3, [r3, #8]
 8011978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011982:	2b22      	cmp	r3, #34	; 0x22
 8011984:	f040 8182 	bne.w	8011c8c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801198e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011992:	e125      	b.n	8011be0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801199a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801199e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80119a2:	b2d9      	uxtb	r1, r3
 80119a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80119a8:	b2da      	uxtb	r2, r3
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119ae:	400a      	ands	r2, r1
 80119b0:	b2d2      	uxtb	r2, r2
 80119b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119b8:	1c5a      	adds	r2, r3, #1
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	3b01      	subs	r3, #1
 80119c8:	b29a      	uxth	r2, r3
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	69db      	ldr	r3, [r3, #28]
 80119d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80119da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80119de:	f003 0307 	and.w	r3, r3, #7
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d053      	beq.n	8011a8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80119e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80119ea:	f003 0301 	and.w	r3, r3, #1
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d011      	beq.n	8011a16 <UART_RxISR_8BIT_FIFOEN+0xca>
 80119f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80119f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00b      	beq.n	8011a16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	2201      	movs	r2, #1
 8011a04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a0c:	f043 0201 	orr.w	r2, r3, #1
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011a1a:	f003 0302 	and.w	r3, r3, #2
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d011      	beq.n	8011a46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011a26:	f003 0301 	and.w	r3, r3, #1
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d00b      	beq.n	8011a46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	2202      	movs	r2, #2
 8011a34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a3c:	f043 0204 	orr.w	r2, r3, #4
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011a4a:	f003 0304 	and.w	r3, r3, #4
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d011      	beq.n	8011a76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011a56:	f003 0301 	and.w	r3, r3, #1
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d00b      	beq.n	8011a76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	2204      	movs	r2, #4
 8011a64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a6c:	f043 0202 	orr.w	r2, r3, #2
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d006      	beq.n	8011a8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f7fe fe37 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	f040 80a2 	bne.w	8011be0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011aa4:	e853 3f00 	ldrex	r3, [r3]
 8011aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	461a      	mov	r2, r3
 8011aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011abe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011ac0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011ac4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011ac6:	e841 2300 	strex	r3, r2, [r1]
 8011aca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d1e4      	bne.n	8011a9c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	3308      	adds	r3, #8
 8011ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011adc:	e853 3f00 	ldrex	r3, [r3]
 8011ae0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011ae8:	f023 0301 	bic.w	r3, r3, #1
 8011aec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	3308      	adds	r3, #8
 8011af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011afa:	66ba      	str	r2, [r7, #104]	; 0x68
 8011afc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011afe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011b00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011b02:	e841 2300 	strex	r3, r2, [r1]
 8011b06:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1e1      	bne.n	8011ad2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2220      	movs	r2, #32
 8011b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	4a5f      	ldr	r2, [pc, #380]	; (8011ca4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	d021      	beq.n	8011b70 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d01a      	beq.n	8011b70 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b42:	e853 3f00 	ldrex	r3, [r3]
 8011b46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	461a      	mov	r2, r3
 8011b58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8011b5e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b64:	e841 2300 	strex	r3, r2, [r1]
 8011b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d1e4      	bne.n	8011b3a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d130      	bne.n	8011bda <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b86:	e853 3f00 	ldrex	r3, [r3]
 8011b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b8e:	f023 0310 	bic.w	r3, r3, #16
 8011b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8011ba2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ba6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ba8:	e841 2300 	strex	r3, r2, [r1]
 8011bac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1e4      	bne.n	8011b7e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	69db      	ldr	r3, [r3, #28]
 8011bba:	f003 0310 	and.w	r3, r3, #16
 8011bbe:	2b10      	cmp	r3, #16
 8011bc0:	d103      	bne.n	8011bca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	2210      	movs	r2, #16
 8011bc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7f5 ff06 	bl	80079e4 <HAL_UARTEx_RxEventCallback>
 8011bd8:	e002      	b.n	8011be0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7fe fd80 	bl	80106e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011be0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d006      	beq.n	8011bf6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8011be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011bec:	f003 0320 	and.w	r3, r3, #32
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f47f aecf 	bne.w	8011994 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bfc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011c00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d049      	beq.n	8011c9c <UART_RxISR_8BIT_FIFOEN+0x350>
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c0e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d242      	bcs.n	8011c9c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	3308      	adds	r3, #8
 8011c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1e:	6a3b      	ldr	r3, [r7, #32]
 8011c20:	e853 3f00 	ldrex	r3, [r3]
 8011c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c26:	69fb      	ldr	r3, [r7, #28]
 8011c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	3308      	adds	r3, #8
 8011c36:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c42:	e841 2300 	strex	r3, r2, [r1]
 8011c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1e3      	bne.n	8011c16 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	4a15      	ldr	r2, [pc, #84]	; (8011ca8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011c52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	e853 3f00 	ldrex	r3, [r3]
 8011c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	f043 0320 	orr.w	r3, r3, #32
 8011c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	461a      	mov	r2, r3
 8011c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c76:	61bb      	str	r3, [r7, #24]
 8011c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c7a:	6979      	ldr	r1, [r7, #20]
 8011c7c:	69ba      	ldr	r2, [r7, #24]
 8011c7e:	e841 2300 	strex	r3, r2, [r1]
 8011c82:	613b      	str	r3, [r7, #16]
   return(result);
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d1e4      	bne.n	8011c54 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011c8a:	e007      	b.n	8011c9c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	699a      	ldr	r2, [r3, #24]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	f042 0208 	orr.w	r2, r2, #8
 8011c9a:	619a      	str	r2, [r3, #24]
}
 8011c9c:	bf00      	nop
 8011c9e:	37b0      	adds	r7, #176	; 0xb0
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	40008000 	.word	0x40008000
 8011ca8:	080115dd 	.word	0x080115dd

08011cac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b0ae      	sub	sp, #184	; 0xb8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	69db      	ldr	r3, [r3, #28]
 8011cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	689b      	ldr	r3, [r3, #8]
 8011cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ce2:	2b22      	cmp	r3, #34	; 0x22
 8011ce4:	f040 8186 	bne.w	8011ff4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011cee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011cf2:	e129      	b.n	8011f48 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cfa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011d06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011d0a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011d0e:	4013      	ands	r3, r2
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d1c:	1c9a      	adds	r2, r3, #2
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	b29a      	uxth	r2, r3
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	69db      	ldr	r3, [r3, #28]
 8011d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011d42:	f003 0307 	and.w	r3, r3, #7
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d053      	beq.n	8011df2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011d4e:	f003 0301 	and.w	r3, r3, #1
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d011      	beq.n	8011d7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8011d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00b      	beq.n	8011d7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2201      	movs	r2, #1
 8011d68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d70:	f043 0201 	orr.w	r2, r3, #1
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011d7e:	f003 0302 	and.w	r3, r3, #2
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d011      	beq.n	8011daa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011d8a:	f003 0301 	and.w	r3, r3, #1
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00b      	beq.n	8011daa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2202      	movs	r2, #2
 8011d98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011da0:	f043 0204 	orr.w	r2, r3, #4
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011daa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011dae:	f003 0304 	and.w	r3, r3, #4
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d011      	beq.n	8011dda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011dba:	f003 0301 	and.w	r3, r3, #1
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d00b      	beq.n	8011dda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2204      	movs	r2, #4
 8011dc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011dd0:	f043 0202 	orr.w	r2, r3, #2
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d006      	beq.n	8011df2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7fe fc85 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2200      	movs	r2, #0
 8011dee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	f040 80a4 	bne.w	8011f48 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011e08:	e853 3f00 	ldrex	r3, [r3]
 8011e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	461a      	mov	r2, r3
 8011e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011e26:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011e2e:	e841 2300 	strex	r3, r2, [r1]
 8011e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d1e2      	bne.n	8011e00 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	3308      	adds	r3, #8
 8011e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e44:	e853 3f00 	ldrex	r3, [r3]
 8011e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011e50:	f023 0301 	bic.w	r3, r3, #1
 8011e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	3308      	adds	r3, #8
 8011e5e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011e62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011e64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011e68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011e6a:	e841 2300 	strex	r3, r2, [r1]
 8011e6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d1e1      	bne.n	8011e3a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2220      	movs	r2, #32
 8011e7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2200      	movs	r2, #0
 8011e82:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2200      	movs	r2, #0
 8011e88:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	4a5f      	ldr	r2, [pc, #380]	; (801200c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011e90:	4293      	cmp	r3, r2
 8011e92:	d021      	beq.n	8011ed8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d01a      	beq.n	8011ed8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eaa:	e853 3f00 	ldrex	r3, [r3]
 8011eae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011eb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011ec4:	65bb      	str	r3, [r7, #88]	; 0x58
 8011ec6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ec8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011eca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011ecc:	e841 2300 	strex	r3, r2, [r1]
 8011ed0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d1e4      	bne.n	8011ea2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d130      	bne.n	8011f42 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eee:	e853 3f00 	ldrex	r3, [r3]
 8011ef2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ef6:	f023 0310 	bic.w	r3, r3, #16
 8011efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	461a      	mov	r2, r3
 8011f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011f08:	647b      	str	r3, [r7, #68]	; 0x44
 8011f0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f10:	e841 2300 	strex	r3, r2, [r1]
 8011f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d1e4      	bne.n	8011ee6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	69db      	ldr	r3, [r3, #28]
 8011f22:	f003 0310 	and.w	r3, r3, #16
 8011f26:	2b10      	cmp	r3, #16
 8011f28:	d103      	bne.n	8011f32 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2210      	movs	r2, #16
 8011f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f38:	4619      	mov	r1, r3
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f7f5 fd52 	bl	80079e4 <HAL_UARTEx_RxEventCallback>
 8011f40:	e002      	b.n	8011f48 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7fe fbcc 	bl	80106e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011f48:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d006      	beq.n	8011f5e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8011f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011f54:	f003 0320 	and.w	r3, r3, #32
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f47f aecb 	bne.w	8011cf4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f64:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011f68:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d049      	beq.n	8012004 <UART_RxISR_16BIT_FIFOEN+0x358>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011f76:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d242      	bcs.n	8012004 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	3308      	adds	r3, #8
 8011f84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	e853 3f00 	ldrex	r3, [r3]
 8011f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8011f8e:	6a3b      	ldr	r3, [r7, #32]
 8011f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	3308      	adds	r3, #8
 8011f9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8011fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011faa:	e841 2300 	strex	r3, r2, [r1]
 8011fae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d1e3      	bne.n	8011f7e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	4a15      	ldr	r2, [pc, #84]	; (8012010 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011fba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	e853 3f00 	ldrex	r3, [r3]
 8011fc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f043 0320 	orr.w	r3, r3, #32
 8011fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	461a      	mov	r2, r3
 8011fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011fde:	61fb      	str	r3, [r7, #28]
 8011fe0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fe2:	69b9      	ldr	r1, [r7, #24]
 8011fe4:	69fa      	ldr	r2, [r7, #28]
 8011fe6:	e841 2300 	strex	r3, r2, [r1]
 8011fea:	617b      	str	r3, [r7, #20]
   return(result);
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d1e4      	bne.n	8011fbc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011ff2:	e007      	b.n	8012004 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	699a      	ldr	r2, [r3, #24]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f042 0208 	orr.w	r2, r2, #8
 8012002:	619a      	str	r2, [r3, #24]
}
 8012004:	bf00      	nop
 8012006:	37b8      	adds	r7, #184	; 0xb8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	40008000 	.word	0x40008000
 8012010:	08011795 	.word	0x08011795

08012014 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b086      	sub	sp, #24
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
 8012020:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d101      	bne.n	801202c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8012028:	2301      	movs	r3, #1
 801202a:	e058      	b.n	80120de <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012032:	2b00      	cmp	r3, #0
 8012034:	d106      	bne.n	8012044 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	2200      	movs	r2, #0
 801203a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 801203e:	68f8      	ldr	r0, [r7, #12]
 8012040:	f7f6 fd34 	bl	8008aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	2224      	movs	r2, #36	; 0x24
 8012048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	681a      	ldr	r2, [r3, #0]
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f022 0201 	bic.w	r2, r2, #1
 801205a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012060:	2b00      	cmp	r3, #0
 8012062:	d002      	beq.n	801206a <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f7fe fe59 	bl	8010d1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801206a:	68f8      	ldr	r0, [r7, #12]
 801206c:	f7fe fb5a 	bl	8010724 <UART_SetConfig>
 8012070:	4603      	mov	r3, r0
 8012072:	2b01      	cmp	r3, #1
 8012074:	d101      	bne.n	801207a <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8012076:	2301      	movs	r3, #1
 8012078:	e031      	b.n	80120de <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	689a      	ldr	r2, [r3, #8]
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012088:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	689b      	ldr	r3, [r3, #8]
 8012090:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	430a      	orrs	r2, r1
 801209c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	055b      	lsls	r3, r3, #21
 80120a2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	041b      	lsls	r3, r3, #16
 80120a8:	697a      	ldr	r2, [r7, #20]
 80120aa:	4313      	orrs	r3, r2
 80120ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80120b8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80120bc:	68fa      	ldr	r2, [r7, #12]
 80120be:	6812      	ldr	r2, [r2, #0]
 80120c0:	6979      	ldr	r1, [r7, #20]
 80120c2:	430b      	orrs	r3, r1
 80120c4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	681a      	ldr	r2, [r3, #0]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	f042 0201 	orr.w	r2, r2, #1
 80120d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f7fe fec2 	bl	8010e60 <UART_CheckIdleState>
 80120dc:	4603      	mov	r3, r0
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3718      	adds	r7, #24
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}

080120e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80120e6:	b480      	push	{r7}
 80120e8:	b083      	sub	sp, #12
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80120ee:	bf00      	nop
 80120f0:	370c      	adds	r7, #12
 80120f2:	46bd      	mov	sp, r7
 80120f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f8:	4770      	bx	lr

080120fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80120fa:	b480      	push	{r7}
 80120fc:	b083      	sub	sp, #12
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012102:	bf00      	nop
 8012104:	370c      	adds	r7, #12
 8012106:	46bd      	mov	sp, r7
 8012108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210c:	4770      	bx	lr

0801210e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801210e:	b480      	push	{r7}
 8012110:	b083      	sub	sp, #12
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012116:	bf00      	nop
 8012118:	370c      	adds	r7, #12
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr

08012122 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012122:	b480      	push	{r7}
 8012124:	b085      	sub	sp, #20
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012130:	2b01      	cmp	r3, #1
 8012132:	d101      	bne.n	8012138 <HAL_UARTEx_DisableFifoMode+0x16>
 8012134:	2302      	movs	r3, #2
 8012136:	e027      	b.n	8012188 <HAL_UARTEx_DisableFifoMode+0x66>
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2201      	movs	r2, #1
 801213c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2224      	movs	r2, #36	; 0x24
 8012144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	681a      	ldr	r2, [r3, #0]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	f022 0201 	bic.w	r2, r2, #1
 801215e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012166:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2200      	movs	r2, #0
 801216c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2220      	movs	r2, #32
 801217a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2200      	movs	r2, #0
 8012182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012186:	2300      	movs	r3, #0
}
 8012188:	4618      	mov	r0, r3
 801218a:	3714      	adds	r7, #20
 801218c:	46bd      	mov	sp, r7
 801218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012192:	4770      	bx	lr

08012194 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d101      	bne.n	80121ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80121a8:	2302      	movs	r3, #2
 80121aa:	e02d      	b.n	8012208 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2201      	movs	r2, #1
 80121b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2224      	movs	r2, #36	; 0x24
 80121b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	f022 0201 	bic.w	r2, r2, #1
 80121d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	683a      	ldr	r2, [r7, #0]
 80121e4:	430a      	orrs	r2, r1
 80121e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f000 f89f 	bl	801232c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	68fa      	ldr	r2, [r7, #12]
 80121f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2220      	movs	r2, #32
 80121fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2200      	movs	r2, #0
 8012202:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012206:	2300      	movs	r3, #0
}
 8012208:	4618      	mov	r0, r3
 801220a:	3710      	adds	r7, #16
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012220:	2b01      	cmp	r3, #1
 8012222:	d101      	bne.n	8012228 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012224:	2302      	movs	r3, #2
 8012226:	e02d      	b.n	8012284 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2201      	movs	r2, #1
 801222c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2224      	movs	r2, #36	; 0x24
 8012234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f022 0201 	bic.w	r2, r2, #1
 801224e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	689b      	ldr	r3, [r3, #8]
 8012256:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	683a      	ldr	r2, [r7, #0]
 8012260:	430a      	orrs	r2, r1
 8012262:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 f861 	bl	801232c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	68fa      	ldr	r2, [r7, #12]
 8012270:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2220      	movs	r2, #32
 8012276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2200      	movs	r2, #0
 801227e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3710      	adds	r7, #16
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b08c      	sub	sp, #48	; 0x30
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	4613      	mov	r3, r2
 8012298:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 801229a:	2300      	movs	r3, #0
 801229c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122a6:	2b20      	cmp	r3, #32
 80122a8:	d13b      	bne.n	8012322 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d002      	beq.n	80122b6 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80122b0:	88fb      	ldrh	r3, [r7, #6]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d101      	bne.n	80122ba <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80122b6:	2301      	movs	r3, #1
 80122b8:	e034      	b.n	8012324 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2201      	movs	r2, #1
 80122be:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2200      	movs	r2, #0
 80122c4:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80122c6:	88fb      	ldrh	r3, [r7, #6]
 80122c8:	461a      	mov	r2, r3
 80122ca:	68b9      	ldr	r1, [r7, #8]
 80122cc:	68f8      	ldr	r0, [r7, #12]
 80122ce:	f7fe fedf 	bl	8011090 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d11d      	bne.n	8012316 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	2210      	movs	r2, #16
 80122e0:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e8:	69bb      	ldr	r3, [r7, #24]
 80122ea:	e853 3f00 	ldrex	r3, [r3]
 80122ee:	617b      	str	r3, [r7, #20]
   return(result);
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	f043 0310 	orr.w	r3, r3, #16
 80122f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	461a      	mov	r2, r3
 80122fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012300:	627b      	str	r3, [r7, #36]	; 0x24
 8012302:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012304:	6a39      	ldr	r1, [r7, #32]
 8012306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012308:	e841 2300 	strex	r3, r2, [r1]
 801230c:	61fb      	str	r3, [r7, #28]
   return(result);
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d1e6      	bne.n	80122e2 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8012314:	e002      	b.n	801231c <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8012316:	2301      	movs	r3, #1
 8012318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 801231c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012320:	e000      	b.n	8012324 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8012322:	2302      	movs	r3, #2
  }
}
 8012324:	4618      	mov	r0, r3
 8012326:	3730      	adds	r7, #48	; 0x30
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801232c:	b480      	push	{r7}
 801232e:	b085      	sub	sp, #20
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012338:	2b00      	cmp	r3, #0
 801233a:	d108      	bne.n	801234e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2201      	movs	r2, #1
 8012340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2201      	movs	r2, #1
 8012348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801234c:	e031      	b.n	80123b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801234e:	2308      	movs	r3, #8
 8012350:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012352:	2308      	movs	r3, #8
 8012354:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	0e5b      	lsrs	r3, r3, #25
 801235e:	b2db      	uxtb	r3, r3
 8012360:	f003 0307 	and.w	r3, r3, #7
 8012364:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	0f5b      	lsrs	r3, r3, #29
 801236e:	b2db      	uxtb	r3, r3
 8012370:	f003 0307 	and.w	r3, r3, #7
 8012374:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012376:	7bbb      	ldrb	r3, [r7, #14]
 8012378:	7b3a      	ldrb	r2, [r7, #12]
 801237a:	4911      	ldr	r1, [pc, #68]	; (80123c0 <UARTEx_SetNbDataToProcess+0x94>)
 801237c:	5c8a      	ldrb	r2, [r1, r2]
 801237e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012382:	7b3a      	ldrb	r2, [r7, #12]
 8012384:	490f      	ldr	r1, [pc, #60]	; (80123c4 <UARTEx_SetNbDataToProcess+0x98>)
 8012386:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012388:	fb93 f3f2 	sdiv	r3, r3, r2
 801238c:	b29a      	uxth	r2, r3
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012394:	7bfb      	ldrb	r3, [r7, #15]
 8012396:	7b7a      	ldrb	r2, [r7, #13]
 8012398:	4909      	ldr	r1, [pc, #36]	; (80123c0 <UARTEx_SetNbDataToProcess+0x94>)
 801239a:	5c8a      	ldrb	r2, [r1, r2]
 801239c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80123a0:	7b7a      	ldrb	r2, [r7, #13]
 80123a2:	4908      	ldr	r1, [pc, #32]	; (80123c4 <UARTEx_SetNbDataToProcess+0x98>)
 80123a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80123a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80123aa:	b29a      	uxth	r2, r3
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80123b2:	bf00      	nop
 80123b4:	3714      	adds	r7, #20
 80123b6:	46bd      	mov	sp, r7
 80123b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123bc:	4770      	bx	lr
 80123be:	bf00      	nop
 80123c0:	08020518 	.word	0x08020518
 80123c4:	08020520 	.word	0x08020520

080123c8 <LL_DMA_ConfigTransfer>:
{
 80123c8:	b480      	push	{r7}
 80123ca:	b087      	sub	sp, #28
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80123d8:	4a0e      	ldr	r2, [pc, #56]	; (8012414 <LL_DMA_ConfigTransfer+0x4c>)
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	4413      	add	r3, r2
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	461a      	mov	r2, r3
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	4413      	add	r3, r2
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80123ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123f0:	4908      	ldr	r1, [pc, #32]	; (8012414 <LL_DMA_ConfigTransfer+0x4c>)
 80123f2:	68ba      	ldr	r2, [r7, #8]
 80123f4:	440a      	add	r2, r1
 80123f6:	7812      	ldrb	r2, [r2, #0]
 80123f8:	4611      	mov	r1, r2
 80123fa:	697a      	ldr	r2, [r7, #20]
 80123fc:	440a      	add	r2, r1
 80123fe:	4611      	mov	r1, r2
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	4313      	orrs	r3, r2
 8012404:	600b      	str	r3, [r1, #0]
}
 8012406:	bf00      	nop
 8012408:	371c      	adds	r7, #28
 801240a:	46bd      	mov	sp, r7
 801240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012410:	4770      	bx	lr
 8012412:	bf00      	nop
 8012414:	08020528 	.word	0x08020528

08012418 <LL_DMA_SetDataLength>:
{
 8012418:	b480      	push	{r7}
 801241a:	b087      	sub	sp, #28
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8012428:	4a0d      	ldr	r2, [pc, #52]	; (8012460 <LL_DMA_SetDataLength+0x48>)
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	4413      	add	r3, r2
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	461a      	mov	r2, r3
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	4413      	add	r3, r2
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	0c1b      	lsrs	r3, r3, #16
 801243a:	041b      	lsls	r3, r3, #16
 801243c:	4908      	ldr	r1, [pc, #32]	; (8012460 <LL_DMA_SetDataLength+0x48>)
 801243e:	68ba      	ldr	r2, [r7, #8]
 8012440:	440a      	add	r2, r1
 8012442:	7812      	ldrb	r2, [r2, #0]
 8012444:	4611      	mov	r1, r2
 8012446:	697a      	ldr	r2, [r7, #20]
 8012448:	440a      	add	r2, r1
 801244a:	4611      	mov	r1, r2
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	4313      	orrs	r3, r2
 8012450:	604b      	str	r3, [r1, #4]
}
 8012452:	bf00      	nop
 8012454:	371c      	adds	r7, #28
 8012456:	46bd      	mov	sp, r7
 8012458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop
 8012460:	08020528 	.word	0x08020528

08012464 <LL_DMA_SetMemoryAddress>:
{
 8012464:	b480      	push	{r7}
 8012466:	b087      	sub	sp, #28
 8012468:	af00      	add	r7, sp, #0
 801246a:	60f8      	str	r0, [r7, #12]
 801246c:	60b9      	str	r1, [r7, #8]
 801246e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8012474:	4a07      	ldr	r2, [pc, #28]	; (8012494 <LL_DMA_SetMemoryAddress+0x30>)
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	4413      	add	r3, r2
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	461a      	mov	r2, r3
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	4413      	add	r3, r2
 8012482:	461a      	mov	r2, r3
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	60d3      	str	r3, [r2, #12]
}
 8012488:	bf00      	nop
 801248a:	371c      	adds	r7, #28
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr
 8012494:	08020528 	.word	0x08020528

08012498 <LL_DMA_SetPeriphAddress>:
{
 8012498:	b480      	push	{r7}
 801249a:	b087      	sub	sp, #28
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80124a8:	4a07      	ldr	r2, [pc, #28]	; (80124c8 <LL_DMA_SetPeriphAddress+0x30>)
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	4413      	add	r3, r2
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	461a      	mov	r2, r3
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	4413      	add	r3, r2
 80124b6:	461a      	mov	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6093      	str	r3, [r2, #8]
}
 80124bc:	bf00      	nop
 80124be:	371c      	adds	r7, #28
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr
 80124c8:	08020528 	.word	0x08020528

080124cc <LL_DMA_SetPeriphRequest>:
{
 80124cc:	b480      	push	{r7}
 80124ce:	b087      	sub	sp, #28
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	0a9b      	lsrs	r3, r3, #10
 80124dc:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80124e0:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80124e4:	00db      	lsls	r3, r3, #3
 80124e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 80124e8:	68ba      	ldr	r2, [r7, #8]
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	4413      	add	r3, r2
 80124ee:	009b      	lsls	r3, r3, #2
 80124f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80124f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80124fe:	68ba      	ldr	r2, [r7, #8]
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	4413      	add	r3, r2
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801250a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	430a      	orrs	r2, r1
 8012512:	601a      	str	r2, [r3, #0]
}
 8012514:	bf00      	nop
 8012516:	371c      	adds	r7, #28
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr

08012520 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b084      	sub	sp, #16
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8012534:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 801253a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8012540:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8012546:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 801254c:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8012552:	4313      	orrs	r3, r2
 8012554:	461a      	mov	r2, r3
 8012556:	68b9      	ldr	r1, [r7, #8]
 8012558:	68f8      	ldr	r0, [r7, #12]
 801255a:	f7ff ff35 	bl	80123c8 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	461a      	mov	r2, r3
 8012564:	68b9      	ldr	r1, [r7, #8]
 8012566:	68f8      	ldr	r0, [r7, #12]
 8012568:	f7ff ff7c 	bl	8012464 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	461a      	mov	r2, r3
 8012572:	68b9      	ldr	r1, [r7, #8]
 8012574:	68f8      	ldr	r0, [r7, #12]
 8012576:	f7ff ff8f 	bl	8012498 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6a1b      	ldr	r3, [r3, #32]
 801257e:	461a      	mov	r2, r3
 8012580:	68b9      	ldr	r1, [r7, #8]
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	f7ff ff48 	bl	8012418 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258c:	461a      	mov	r2, r3
 801258e:	68b9      	ldr	r1, [r7, #8]
 8012590:	68f8      	ldr	r0, [r7, #12]
 8012592:	f7ff ff9b 	bl	80124cc <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 8012596:	2300      	movs	r3, #0
}
 8012598:	4618      	mov	r0, r3
 801259a:	3710      	adds	r7, #16
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80125a0:	b480      	push	{r7}
 80125a2:	b083      	sub	sp, #12
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2200      	movs	r2, #0
 80125ac:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2200      	movs	r2, #0
 80125b2:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2200      	movs	r2, #0
 80125b8:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2200      	movs	r2, #0
 80125be:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2200      	movs	r2, #0
 80125c4:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2200      	movs	r2, #0
 80125ca:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2200      	movs	r2, #0
 80125d0:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2200      	movs	r2, #0
 80125d6:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2200      	movs	r2, #0
 80125e2:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2200      	movs	r2, #0
 80125e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80125ea:	bf00      	nop
 80125ec:	370c      	adds	r7, #12
 80125ee:	46bd      	mov	sp, r7
 80125f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f4:	4770      	bx	lr

080125f6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80125f6:	b480      	push	{r7}
 80125f8:	b08b      	sub	sp, #44	; 0x2c
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	60f8      	str	r0, [r7, #12]
 80125fe:	60b9      	str	r1, [r7, #8]
 8012600:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681a      	ldr	r2, [r3, #0]
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	fa93 f3a3 	rbit	r3, r3
 8012610:	613b      	str	r3, [r7, #16]
  return result;
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d101      	bne.n	8012620 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801261c:	2320      	movs	r3, #32
 801261e:	e003      	b.n	8012628 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	fab3 f383 	clz	r3, r3
 8012626:	b2db      	uxtb	r3, r3
 8012628:	005b      	lsls	r3, r3, #1
 801262a:	2103      	movs	r1, #3
 801262c:	fa01 f303 	lsl.w	r3, r1, r3
 8012630:	43db      	mvns	r3, r3
 8012632:	401a      	ands	r2, r3
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012638:	6a3b      	ldr	r3, [r7, #32]
 801263a:	fa93 f3a3 	rbit	r3, r3
 801263e:	61fb      	str	r3, [r7, #28]
  return result;
 8012640:	69fb      	ldr	r3, [r7, #28]
 8012642:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012646:	2b00      	cmp	r3, #0
 8012648:	d101      	bne.n	801264e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801264a:	2320      	movs	r3, #32
 801264c:	e003      	b.n	8012656 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012650:	fab3 f383 	clz	r3, r3
 8012654:	b2db      	uxtb	r3, r3
 8012656:	005b      	lsls	r3, r3, #1
 8012658:	6879      	ldr	r1, [r7, #4]
 801265a:	fa01 f303 	lsl.w	r3, r1, r3
 801265e:	431a      	orrs	r2, r3
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	601a      	str	r2, [r3, #0]
}
 8012664:	bf00      	nop
 8012666:	372c      	adds	r7, #44	; 0x2c
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr

08012670 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8012670:	b480      	push	{r7}
 8012672:	b085      	sub	sp, #20
 8012674:	af00      	add	r7, sp, #0
 8012676:	60f8      	str	r0, [r7, #12]
 8012678:	60b9      	str	r1, [r7, #8]
 801267a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	685a      	ldr	r2, [r3, #4]
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	43db      	mvns	r3, r3
 8012684:	401a      	ands	r2, r3
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	6879      	ldr	r1, [r7, #4]
 801268a:	fb01 f303 	mul.w	r3, r1, r3
 801268e:	431a      	orrs	r2, r3
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	605a      	str	r2, [r3, #4]
}
 8012694:	bf00      	nop
 8012696:	3714      	adds	r7, #20
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b08b      	sub	sp, #44	; 0x2c
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	689a      	ldr	r2, [r3, #8]
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	fa93 f3a3 	rbit	r3, r3
 80126ba:	613b      	str	r3, [r7, #16]
  return result;
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80126c0:	69bb      	ldr	r3, [r7, #24]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d101      	bne.n	80126ca <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80126c6:	2320      	movs	r3, #32
 80126c8:	e003      	b.n	80126d2 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80126ca:	69bb      	ldr	r3, [r7, #24]
 80126cc:	fab3 f383 	clz	r3, r3
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	005b      	lsls	r3, r3, #1
 80126d4:	2103      	movs	r1, #3
 80126d6:	fa01 f303 	lsl.w	r3, r1, r3
 80126da:	43db      	mvns	r3, r3
 80126dc:	401a      	ands	r2, r3
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126e2:	6a3b      	ldr	r3, [r7, #32]
 80126e4:	fa93 f3a3 	rbit	r3, r3
 80126e8:	61fb      	str	r3, [r7, #28]
  return result;
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80126ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d101      	bne.n	80126f8 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80126f4:	2320      	movs	r3, #32
 80126f6:	e003      	b.n	8012700 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80126f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fa:	fab3 f383 	clz	r3, r3
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	005b      	lsls	r3, r3, #1
 8012702:	6879      	ldr	r1, [r7, #4]
 8012704:	fa01 f303 	lsl.w	r3, r1, r3
 8012708:	431a      	orrs	r2, r3
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 801270e:	bf00      	nop
 8012710:	372c      	adds	r7, #44	; 0x2c
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr

0801271a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 801271a:	b480      	push	{r7}
 801271c:	b08b      	sub	sp, #44	; 0x2c
 801271e:	af00      	add	r7, sp, #0
 8012720:	60f8      	str	r0, [r7, #12]
 8012722:	60b9      	str	r1, [r7, #8]
 8012724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	68da      	ldr	r2, [r3, #12]
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	fa93 f3a3 	rbit	r3, r3
 8012734:	613b      	str	r3, [r7, #16]
  return result;
 8012736:	693b      	ldr	r3, [r7, #16]
 8012738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801273a:	69bb      	ldr	r3, [r7, #24]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d101      	bne.n	8012744 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8012740:	2320      	movs	r3, #32
 8012742:	e003      	b.n	801274c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8012744:	69bb      	ldr	r3, [r7, #24]
 8012746:	fab3 f383 	clz	r3, r3
 801274a:	b2db      	uxtb	r3, r3
 801274c:	005b      	lsls	r3, r3, #1
 801274e:	2103      	movs	r1, #3
 8012750:	fa01 f303 	lsl.w	r3, r1, r3
 8012754:	43db      	mvns	r3, r3
 8012756:	401a      	ands	r2, r3
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801275c:	6a3b      	ldr	r3, [r7, #32]
 801275e:	fa93 f3a3 	rbit	r3, r3
 8012762:	61fb      	str	r3, [r7, #28]
  return result;
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276a:	2b00      	cmp	r3, #0
 801276c:	d101      	bne.n	8012772 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801276e:	2320      	movs	r3, #32
 8012770:	e003      	b.n	801277a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8012772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012774:	fab3 f383 	clz	r3, r3
 8012778:	b2db      	uxtb	r3, r3
 801277a:	005b      	lsls	r3, r3, #1
 801277c:	6879      	ldr	r1, [r7, #4]
 801277e:	fa01 f303 	lsl.w	r3, r1, r3
 8012782:	431a      	orrs	r2, r3
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	60da      	str	r2, [r3, #12]
}
 8012788:	bf00      	nop
 801278a:	372c      	adds	r7, #44	; 0x2c
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr

08012794 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8012794:	b480      	push	{r7}
 8012796:	b08b      	sub	sp, #44	; 0x2c
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	6a1a      	ldr	r2, [r3, #32]
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	fa93 f3a3 	rbit	r3, r3
 80127ae:	613b      	str	r3, [r7, #16]
  return result;
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d101      	bne.n	80127be <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80127ba:	2320      	movs	r3, #32
 80127bc:	e003      	b.n	80127c6 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80127be:	69bb      	ldr	r3, [r7, #24]
 80127c0:	fab3 f383 	clz	r3, r3
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	210f      	movs	r1, #15
 80127ca:	fa01 f303 	lsl.w	r3, r1, r3
 80127ce:	43db      	mvns	r3, r3
 80127d0:	401a      	ands	r2, r3
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80127d6:	6a3b      	ldr	r3, [r7, #32]
 80127d8:	fa93 f3a3 	rbit	r3, r3
 80127dc:	61fb      	str	r3, [r7, #28]
  return result;
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80127e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d101      	bne.n	80127ec <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80127e8:	2320      	movs	r3, #32
 80127ea:	e003      	b.n	80127f4 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80127ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ee:	fab3 f383 	clz	r3, r3
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	009b      	lsls	r3, r3, #2
 80127f6:	6879      	ldr	r1, [r7, #4]
 80127f8:	fa01 f303 	lsl.w	r3, r1, r3
 80127fc:	431a      	orrs	r2, r3
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8012802:	bf00      	nop
 8012804:	372c      	adds	r7, #44	; 0x2c
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr

0801280e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801280e:	b480      	push	{r7}
 8012810:	b08b      	sub	sp, #44	; 0x2c
 8012812:	af00      	add	r7, sp, #0
 8012814:	60f8      	str	r0, [r7, #12]
 8012816:	60b9      	str	r1, [r7, #8]
 8012818:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	0a1b      	lsrs	r3, r3, #8
 8012822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	fa93 f3a3 	rbit	r3, r3
 801282a:	613b      	str	r3, [r7, #16]
  return result;
 801282c:	693b      	ldr	r3, [r7, #16]
 801282e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8012830:	69bb      	ldr	r3, [r7, #24]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d101      	bne.n	801283a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8012836:	2320      	movs	r3, #32
 8012838:	e003      	b.n	8012842 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	fab3 f383 	clz	r3, r3
 8012840:	b2db      	uxtb	r3, r3
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	210f      	movs	r1, #15
 8012846:	fa01 f303 	lsl.w	r3, r1, r3
 801284a:	43db      	mvns	r3, r3
 801284c:	401a      	ands	r2, r3
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	0a1b      	lsrs	r3, r3, #8
 8012852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012854:	6a3b      	ldr	r3, [r7, #32]
 8012856:	fa93 f3a3 	rbit	r3, r3
 801285a:	61fb      	str	r3, [r7, #28]
  return result;
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8012866:	2320      	movs	r3, #32
 8012868:	e003      	b.n	8012872 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286c:	fab3 f383 	clz	r3, r3
 8012870:	b2db      	uxtb	r3, r3
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	6879      	ldr	r1, [r7, #4]
 8012876:	fa01 f303 	lsl.w	r3, r1, r3
 801287a:	431a      	orrs	r2, r3
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8012880:	bf00      	nop
 8012882:	372c      	adds	r7, #44	; 0x2c
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr

0801288c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b088      	sub	sp, #32
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	fa93 f3a3 	rbit	r3, r3
 80128a2:	60fb      	str	r3, [r7, #12]
  return result;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d101      	bne.n	80128b2 <LL_GPIO_Init+0x26>
    return 32U;
 80128ae:	2320      	movs	r3, #32
 80128b0:	e003      	b.n	80128ba <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80128b2:	697b      	ldr	r3, [r7, #20]
 80128b4:	fab3 f383 	clz	r3, r3
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80128bc:	e048      	b.n	8012950 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	2101      	movs	r1, #1
 80128c4:	69fb      	ldr	r3, [r7, #28]
 80128c6:	fa01 f303 	lsl.w	r3, r1, r3
 80128ca:	4013      	ands	r3, r2
 80128cc:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80128ce:	69bb      	ldr	r3, [r7, #24]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d03a      	beq.n	801294a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d003      	beq.n	80128e4 <LL_GPIO_Init+0x58>
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	2b02      	cmp	r3, #2
 80128e2:	d10e      	bne.n	8012902 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	689b      	ldr	r3, [r3, #8]
 80128e8:	461a      	mov	r2, r3
 80128ea:	69b9      	ldr	r1, [r7, #24]
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7ff fed7 	bl	80126a0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	6819      	ldr	r1, [r3, #0]
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	461a      	mov	r2, r3
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7ff feb7 	bl	8012670 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	691b      	ldr	r3, [r3, #16]
 8012906:	461a      	mov	r2, r3
 8012908:	69b9      	ldr	r1, [r7, #24]
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7ff ff05 	bl	801271a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	2b02      	cmp	r3, #2
 8012916:	d111      	bne.n	801293c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	2bff      	cmp	r3, #255	; 0xff
 801291c:	d807      	bhi.n	801292e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	695b      	ldr	r3, [r3, #20]
 8012922:	461a      	mov	r2, r3
 8012924:	69b9      	ldr	r1, [r7, #24]
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7ff ff34 	bl	8012794 <LL_GPIO_SetAFPin_0_7>
 801292c:	e006      	b.n	801293c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	695b      	ldr	r3, [r3, #20]
 8012932:	461a      	mov	r2, r3
 8012934:	69b9      	ldr	r1, [r7, #24]
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7ff ff69 	bl	801280e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	461a      	mov	r2, r3
 8012942:	69b9      	ldr	r1, [r7, #24]
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f7ff fe56 	bl	80125f6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801294a:	69fb      	ldr	r3, [r7, #28]
 801294c:	3301      	adds	r3, #1
 801294e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	681a      	ldr	r2, [r3, #0]
 8012954:	69fb      	ldr	r3, [r7, #28]
 8012956:	fa22 f303 	lsr.w	r3, r2, r3
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1af      	bne.n	80128be <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	3720      	adds	r7, #32
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	601a      	str	r2, [r3, #0]
}
 801297c:	bf00      	nop
 801297e:	370c      	adds	r7, #12
 8012980:	46bd      	mov	sp, r7
 8012982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012986:	4770      	bx	lr

08012988 <LL_APB1_GRP2_EnableClock>:
{
 8012988:	b480      	push	{r7}
 801298a:	b085      	sub	sp, #20
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8012990:	4b08      	ldr	r3, [pc, #32]	; (80129b4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8012992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012994:	4907      	ldr	r1, [pc, #28]	; (80129b4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	4313      	orrs	r3, r2
 801299a:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801299c:	4b05      	ldr	r3, [pc, #20]	; (80129b4 <LL_APB1_GRP2_EnableClock+0x2c>)
 801299e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	4013      	ands	r3, r2
 80129a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80129a6:	68fb      	ldr	r3, [r7, #12]
}
 80129a8:	bf00      	nop
 80129aa:	3714      	adds	r7, #20
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr
 80129b4:	40021000 	.word	0x40021000

080129b8 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	4a11      	ldr	r2, [pc, #68]	; (8012a0c <LL_UCPD_Init+0x54>)
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d103      	bne.n	80129d2 <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80129ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80129ce:	f7ff ffdb 	bl	8012988 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f7ff ffc8 	bl	8012968 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	4b0c      	ldr	r3, [pc, #48]	; (8012a10 <LL_UCPD_Init+0x58>)
 80129de:	4013      	ands	r3, r2
 80129e0:	683a      	ldr	r2, [r7, #0]
 80129e2:	6811      	ldr	r1, [r2, #0]
 80129e4:	683a      	ldr	r2, [r7, #0]
 80129e6:	6852      	ldr	r2, [r2, #4]
 80129e8:	02d2      	lsls	r2, r2, #11
 80129ea:	4311      	orrs	r1, r2
 80129ec:	683a      	ldr	r2, [r7, #0]
 80129ee:	6892      	ldr	r2, [r2, #8]
 80129f0:	0192      	lsls	r2, r2, #6
 80129f2:	4311      	orrs	r1, r2
 80129f4:	683a      	ldr	r2, [r7, #0]
 80129f6:	68d2      	ldr	r2, [r2, #12]
 80129f8:	430a      	orrs	r2, r1
 80129fa:	431a      	orrs	r2, r3
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8012a00:	2300      	movs	r3, #0
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	4000a000 	.word	0x4000a000
 8012a10:	fff10000 	.word	0xfff10000

08012a14 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8012a22:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2207      	movs	r2, #7
 8012a28:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2210      	movs	r2, #16
 8012a2e:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	220d      	movs	r2, #13
 8012a34:	60da      	str	r2, [r3, #12]
}
 8012a36:	bf00      	nop
 8012a38:	370c      	adds	r7, #12
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr

08012a42 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012a42:	b480      	push	{r7}
 8012a44:	b085      	sub	sp, #20
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012a52:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012a56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012a62:	2300      	movs	r3, #0
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3714      	adds	r7, #20
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6e:	4770      	bx	lr

08012a70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012a70:	b480      	push	{r7}
 8012a72:	b085      	sub	sp, #20
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012a78:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012a7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	43db      	mvns	r3, r3
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	4013      	ands	r3, r2
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012a98:	2300      	movs	r3, #0
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3714      	adds	r7, #20
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa4:	4770      	bx	lr

08012aa6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012aa6:	b480      	push	{r7}
 8012aa8:	b085      	sub	sp, #20
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	60f8      	str	r0, [r7, #12]
 8012aae:	1d3b      	adds	r3, r7, #4
 8012ab0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2200      	movs	r2, #0
 8012ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012ad4:	2300      	movs	r3, #0
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3714      	adds	r7, #20
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr
	...

08012ae4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b09d      	sub	sp, #116	; 0x74
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012aee:	2300      	movs	r3, #0
 8012af0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012af4:	687a      	ldr	r2, [r7, #4]
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	009b      	lsls	r3, r3, #2
 8012afc:	4413      	add	r3, r2
 8012afe:	881b      	ldrh	r3, [r3, #0]
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8012b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b0a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	78db      	ldrb	r3, [r3, #3]
 8012b12:	2b03      	cmp	r3, #3
 8012b14:	d81f      	bhi.n	8012b56 <USB_ActivateEndpoint+0x72>
 8012b16:	a201      	add	r2, pc, #4	; (adr r2, 8012b1c <USB_ActivateEndpoint+0x38>)
 8012b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b1c:	08012b2d 	.word	0x08012b2d
 8012b20:	08012b49 	.word	0x08012b49
 8012b24:	08012b5f 	.word	0x08012b5f
 8012b28:	08012b3b 	.word	0x08012b3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012b2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012b34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012b38:	e012      	b.n	8012b60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012b3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012b3e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8012b42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012b46:	e00b      	b.n	8012b60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012b48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012b50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012b54:	e004      	b.n	8012b60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8012b56:	2301      	movs	r3, #1
 8012b58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8012b5c:	e000      	b.n	8012b60 <USB_ActivateEndpoint+0x7c>
      break;
 8012b5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	009b      	lsls	r3, r3, #2
 8012b68:	441a      	add	r2, r3
 8012b6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	009b      	lsls	r3, r3, #2
 8012b8a:	4413      	add	r3, r2
 8012b8c:	881b      	ldrh	r3, [r3, #0]
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	b21b      	sxth	r3, r3
 8012b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b9a:	b21a      	sxth	r2, r3
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	b21b      	sxth	r3, r3
 8012ba2:	4313      	orrs	r3, r2
 8012ba4:	b21b      	sxth	r3, r3
 8012ba6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012baa:	687a      	ldr	r2, [r7, #4]
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	441a      	add	r2, r3
 8012bb4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bc8:	b29b      	uxth	r3, r3
 8012bca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	7b1b      	ldrb	r3, [r3, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f040 8178 	bne.w	8012ec6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	785b      	ldrb	r3, [r3, #1]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	f000 8084 	beq.w	8012ce8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	61bb      	str	r3, [r7, #24]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	461a      	mov	r2, r3
 8012bee:	69bb      	ldr	r3, [r7, #24]
 8012bf0:	4413      	add	r3, r2
 8012bf2:	61bb      	str	r3, [r7, #24]
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	00da      	lsls	r2, r3, #3
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	4413      	add	r3, r2
 8012bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c02:	617b      	str	r3, [r7, #20]
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	88db      	ldrh	r3, [r3, #6]
 8012c08:	085b      	lsrs	r3, r3, #1
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	005b      	lsls	r3, r3, #1
 8012c0e:	b29a      	uxth	r2, r3
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	4413      	add	r3, r2
 8012c1e:	881b      	ldrh	r3, [r3, #0]
 8012c20:	827b      	strh	r3, [r7, #18]
 8012c22:	8a7b      	ldrh	r3, [r7, #18]
 8012c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d01b      	beq.n	8012c64 <USB_ActivateEndpoint+0x180>
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4413      	add	r3, r2
 8012c36:	881b      	ldrh	r3, [r3, #0]
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c42:	823b      	strh	r3, [r7, #16]
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	441a      	add	r2, r3
 8012c4e:	8a3b      	ldrh	r3, [r7, #16]
 8012c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	78db      	ldrb	r3, [r3, #3]
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	d020      	beq.n	8012cae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012c6c:	687a      	ldr	r2, [r7, #4]
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	4413      	add	r3, r2
 8012c76:	881b      	ldrh	r3, [r3, #0]
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012c82:	81bb      	strh	r3, [r7, #12]
 8012c84:	89bb      	ldrh	r3, [r7, #12]
 8012c86:	f083 0320 	eor.w	r3, r3, #32
 8012c8a:	81bb      	strh	r3, [r7, #12]
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	441a      	add	r2, r3
 8012c96:	89bb      	ldrh	r3, [r7, #12]
 8012c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	8013      	strh	r3, [r2, #0]
 8012cac:	e2d5      	b.n	801325a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	009b      	lsls	r3, r3, #2
 8012cb6:	4413      	add	r3, r2
 8012cb8:	881b      	ldrh	r3, [r3, #0]
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012cc4:	81fb      	strh	r3, [r7, #14]
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	009b      	lsls	r3, r3, #2
 8012cce:	441a      	add	r2, r3
 8012cd0:	89fb      	ldrh	r3, [r7, #14]
 8012cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	8013      	strh	r3, [r2, #0]
 8012ce6:	e2b8      	b.n	801325a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	633b      	str	r3, [r7, #48]	; 0x30
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012cf2:	b29b      	uxth	r3, r3
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf8:	4413      	add	r3, r2
 8012cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	00da      	lsls	r2, r3, #3
 8012d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d04:	4413      	add	r3, r2
 8012d06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	88db      	ldrh	r3, [r3, #6]
 8012d10:	085b      	lsrs	r3, r3, #1
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	005b      	lsls	r3, r3, #1
 8012d16:	b29a      	uxth	r2, r3
 8012d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	461a      	mov	r2, r3
 8012d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d2c:	4413      	add	r3, r2
 8012d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	00da      	lsls	r2, r3, #3
 8012d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d38:	4413      	add	r3, r2
 8012d3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8012d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d42:	881b      	ldrh	r3, [r3, #0]
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4e:	801a      	strh	r2, [r3, #0]
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	691b      	ldr	r3, [r3, #16]
 8012d54:	2b3e      	cmp	r3, #62	; 0x3e
 8012d56:	d91d      	bls.n	8012d94 <USB_ActivateEndpoint+0x2b0>
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	691b      	ldr	r3, [r3, #16]
 8012d5c:	095b      	lsrs	r3, r3, #5
 8012d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	691b      	ldr	r3, [r3, #16]
 8012d64:	f003 031f 	and.w	r3, r3, #31
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d102      	bne.n	8012d72 <USB_ActivateEndpoint+0x28e>
 8012d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d6e:	3b01      	subs	r3, #1
 8012d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8012d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d74:	881b      	ldrh	r3, [r3, #0]
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	029b      	lsls	r3, r3, #10
 8012d7e:	b29b      	uxth	r3, r3
 8012d80:	4313      	orrs	r3, r2
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d90:	801a      	strh	r2, [r3, #0]
 8012d92:	e026      	b.n	8012de2 <USB_ActivateEndpoint+0x2fe>
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	691b      	ldr	r3, [r3, #16]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d10a      	bne.n	8012db2 <USB_ActivateEndpoint+0x2ce>
 8012d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9e:	881b      	ldrh	r3, [r3, #0]
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012daa:	b29a      	uxth	r2, r3
 8012dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dae:	801a      	strh	r2, [r3, #0]
 8012db0:	e017      	b.n	8012de2 <USB_ActivateEndpoint+0x2fe>
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	691b      	ldr	r3, [r3, #16]
 8012db6:	085b      	lsrs	r3, r3, #1
 8012db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	691b      	ldr	r3, [r3, #16]
 8012dbe:	f003 0301 	and.w	r3, r3, #1
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d002      	beq.n	8012dcc <USB_ActivateEndpoint+0x2e8>
 8012dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012dc8:	3301      	adds	r3, #1
 8012dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dce:	881b      	ldrh	r3, [r3, #0]
 8012dd0:	b29a      	uxth	r2, r3
 8012dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	029b      	lsls	r3, r3, #10
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	b29a      	uxth	r2, r3
 8012dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	4413      	add	r3, r2
 8012dec:	881b      	ldrh	r3, [r3, #0]
 8012dee:	847b      	strh	r3, [r7, #34]	; 0x22
 8012df0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d01b      	beq.n	8012e32 <USB_ActivateEndpoint+0x34e>
 8012dfa:	687a      	ldr	r2, [r7, #4]
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	781b      	ldrb	r3, [r3, #0]
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	4413      	add	r3, r2
 8012e04:	881b      	ldrh	r3, [r3, #0]
 8012e06:	b29b      	uxth	r3, r3
 8012e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e10:	843b      	strh	r3, [r7, #32]
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	009b      	lsls	r3, r3, #2
 8012e1a:	441a      	add	r2, r3
 8012e1c:	8c3b      	ldrh	r3, [r7, #32]
 8012e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d124      	bne.n	8012e84 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	4413      	add	r3, r2
 8012e44:	881b      	ldrh	r3, [r3, #0]
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e50:	83bb      	strh	r3, [r7, #28]
 8012e52:	8bbb      	ldrh	r3, [r7, #28]
 8012e54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012e58:	83bb      	strh	r3, [r7, #28]
 8012e5a:	8bbb      	ldrh	r3, [r7, #28]
 8012e5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012e60:	83bb      	strh	r3, [r7, #28]
 8012e62:	687a      	ldr	r2, [r7, #4]
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	009b      	lsls	r3, r3, #2
 8012e6a:	441a      	add	r2, r3
 8012e6c:	8bbb      	ldrh	r3, [r7, #28]
 8012e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	8013      	strh	r3, [r2, #0]
 8012e82:	e1ea      	b.n	801325a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8012e84:	687a      	ldr	r2, [r7, #4]
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	009b      	lsls	r3, r3, #2
 8012e8c:	4413      	add	r3, r2
 8012e8e:	881b      	ldrh	r3, [r3, #0]
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e9a:	83fb      	strh	r3, [r7, #30]
 8012e9c:	8bfb      	ldrh	r3, [r7, #30]
 8012e9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012ea2:	83fb      	strh	r3, [r7, #30]
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	009b      	lsls	r3, r3, #2
 8012eac:	441a      	add	r2, r3
 8012eae:	8bfb      	ldrh	r3, [r7, #30]
 8012eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	8013      	strh	r3, [r2, #0]
 8012ec4:	e1c9      	b.n	801325a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	78db      	ldrb	r3, [r3, #3]
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	d11e      	bne.n	8012f0c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	4413      	add	r3, r2
 8012ed8:	881b      	ldrh	r3, [r3, #0]
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ee4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8012ee8:	687a      	ldr	r2, [r7, #4]
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	441a      	add	r2, r3
 8012ef2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012efe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8012f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	8013      	strh	r3, [r2, #0]
 8012f0a:	e01d      	b.n	8012f48 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	009b      	lsls	r3, r3, #2
 8012f14:	4413      	add	r3, r2
 8012f16:	881b      	ldrh	r3, [r3, #0]
 8012f18:	b29b      	uxth	r3, r3
 8012f1a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8012f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f22:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	009b      	lsls	r3, r3, #2
 8012f2e:	441a      	add	r2, r3
 8012f30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	461a      	mov	r2, r3
 8012f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f58:	4413      	add	r3, r2
 8012f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	00da      	lsls	r2, r3, #3
 8012f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f64:	4413      	add	r3, r2
 8012f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	891b      	ldrh	r3, [r3, #8]
 8012f70:	085b      	lsrs	r3, r3, #1
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	005b      	lsls	r3, r3, #1
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f7a:	801a      	strh	r2, [r3, #0]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	461a      	mov	r2, r3
 8012f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f8c:	4413      	add	r3, r2
 8012f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	00da      	lsls	r2, r3, #3
 8012f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f98:	4413      	add	r3, r2
 8012f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	895b      	ldrh	r3, [r3, #10]
 8012fa4:	085b      	lsrs	r3, r3, #1
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	005b      	lsls	r3, r3, #1
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	785b      	ldrb	r3, [r3, #1]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	f040 8093 	bne.w	80130e0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	009b      	lsls	r3, r3, #2
 8012fc2:	4413      	add	r3, r2
 8012fc4:	881b      	ldrh	r3, [r3, #0]
 8012fc6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012fca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d01b      	beq.n	801300e <USB_ActivateEndpoint+0x52a>
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	009b      	lsls	r3, r3, #2
 8012fde:	4413      	add	r3, r2
 8012fe0:	881b      	ldrh	r3, [r3, #0]
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	009b      	lsls	r3, r3, #2
 8012ff6:	441a      	add	r2, r3
 8012ff8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801300a:	b29b      	uxth	r3, r3
 801300c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	4413      	add	r3, r2
 8013018:	881b      	ldrh	r3, [r3, #0]
 801301a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801301c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013022:	2b00      	cmp	r3, #0
 8013024:	d01b      	beq.n	801305e <USB_ActivateEndpoint+0x57a>
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	009b      	lsls	r3, r3, #2
 801302e:	4413      	add	r3, r2
 8013030:	881b      	ldrh	r3, [r3, #0]
 8013032:	b29b      	uxth	r3, r3
 8013034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801303c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801303e:	687a      	ldr	r2, [r7, #4]
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	441a      	add	r2, r3
 8013048:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801304a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801304e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013056:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801305a:	b29b      	uxth	r3, r3
 801305c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801305e:	687a      	ldr	r2, [r7, #4]
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	4413      	add	r3, r2
 8013068:	881b      	ldrh	r3, [r3, #0]
 801306a:	b29b      	uxth	r3, r3
 801306c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013074:	873b      	strh	r3, [r7, #56]	; 0x38
 8013076:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013078:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801307c:	873b      	strh	r3, [r7, #56]	; 0x38
 801307e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013080:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013084:	873b      	strh	r3, [r7, #56]	; 0x38
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	009b      	lsls	r3, r3, #2
 801308e:	441a      	add	r2, r3
 8013090:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801309a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801309e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80130a6:	687a      	ldr	r2, [r7, #4]
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	4413      	add	r3, r2
 80130b0:	881b      	ldrh	r3, [r3, #0]
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80130b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80130bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	009b      	lsls	r3, r3, #2
 80130c6:	441a      	add	r2, r3
 80130c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80130ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80130ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80130d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80130d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130da:	b29b      	uxth	r3, r3
 80130dc:	8013      	strh	r3, [r2, #0]
 80130de:	e0bc      	b.n	801325a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	4413      	add	r3, r2
 80130ea:	881b      	ldrh	r3, [r3, #0]
 80130ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80130f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80130f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d01d      	beq.n	8013138 <USB_ActivateEndpoint+0x654>
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	4413      	add	r3, r2
 8013106:	881b      	ldrh	r3, [r3, #0]
 8013108:	b29b      	uxth	r3, r3
 801310a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013112:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	009b      	lsls	r3, r3, #2
 801311e:	441a      	add	r2, r3
 8013120:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8013124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801312c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013134:	b29b      	uxth	r3, r3
 8013136:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	009b      	lsls	r3, r3, #2
 8013140:	4413      	add	r3, r2
 8013142:	881b      	ldrh	r3, [r3, #0]
 8013144:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8013148:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013150:	2b00      	cmp	r3, #0
 8013152:	d01d      	beq.n	8013190 <USB_ActivateEndpoint+0x6ac>
 8013154:	687a      	ldr	r2, [r7, #4]
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	009b      	lsls	r3, r3, #2
 801315c:	4413      	add	r3, r2
 801315e:	881b      	ldrh	r3, [r3, #0]
 8013160:	b29b      	uxth	r3, r3
 8013162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801316a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	009b      	lsls	r3, r3, #2
 8013176:	441a      	add	r2, r3
 8013178:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801317c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013188:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801318c:	b29b      	uxth	r3, r3
 801318e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	78db      	ldrb	r3, [r3, #3]
 8013194:	2b01      	cmp	r3, #1
 8013196:	d024      	beq.n	80131e2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	009b      	lsls	r3, r3, #2
 80131a0:	4413      	add	r3, r2
 80131a2:	881b      	ldrh	r3, [r3, #0]
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80131aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80131ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80131b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80131b6:	f083 0320 	eor.w	r3, r3, #32
 80131ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	009b      	lsls	r3, r3, #2
 80131c6:	441a      	add	r2, r3
 80131c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80131cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80131d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131dc:	b29b      	uxth	r3, r3
 80131de:	8013      	strh	r3, [r2, #0]
 80131e0:	e01d      	b.n	801321e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80131e2:	687a      	ldr	r2, [r7, #4]
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	009b      	lsls	r3, r3, #2
 80131ea:	4413      	add	r3, r2
 80131ec:	881b      	ldrh	r3, [r3, #0]
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80131f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80131f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	441a      	add	r2, r3
 8013206:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801320a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801320e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801321a:	b29b      	uxth	r3, r3
 801321c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	009b      	lsls	r3, r3, #2
 8013226:	4413      	add	r3, r2
 8013228:	881b      	ldrh	r3, [r3, #0]
 801322a:	b29b      	uxth	r3, r3
 801322c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013234:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	441a      	add	r2, r3
 8013242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801324a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801324e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013256:	b29b      	uxth	r3, r3
 8013258:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801325a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801325e:	4618      	mov	r0, r3
 8013260:	3774      	adds	r7, #116	; 0x74
 8013262:	46bd      	mov	sp, r7
 8013264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013268:	4770      	bx	lr
 801326a:	bf00      	nop

0801326c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801326c:	b480      	push	{r7}
 801326e:	b08d      	sub	sp, #52	; 0x34
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	7b1b      	ldrb	r3, [r3, #12]
 801327a:	2b00      	cmp	r3, #0
 801327c:	f040 808e 	bne.w	801339c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	785b      	ldrb	r3, [r3, #1]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d044      	beq.n	8013312 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	009b      	lsls	r3, r3, #2
 8013290:	4413      	add	r3, r2
 8013292:	881b      	ldrh	r3, [r3, #0]
 8013294:	81bb      	strh	r3, [r7, #12]
 8013296:	89bb      	ldrh	r3, [r7, #12]
 8013298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801329c:	2b00      	cmp	r3, #0
 801329e:	d01b      	beq.n	80132d8 <USB_DeactivateEndpoint+0x6c>
 80132a0:	687a      	ldr	r2, [r7, #4]
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	009b      	lsls	r3, r3, #2
 80132a8:	4413      	add	r3, r2
 80132aa:	881b      	ldrh	r3, [r3, #0]
 80132ac:	b29b      	uxth	r3, r3
 80132ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80132b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132b6:	817b      	strh	r3, [r7, #10]
 80132b8:	687a      	ldr	r2, [r7, #4]
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	009b      	lsls	r3, r3, #2
 80132c0:	441a      	add	r2, r3
 80132c2:	897b      	ldrh	r3, [r7, #10]
 80132c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80132d4:	b29b      	uxth	r3, r3
 80132d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80132d8:	687a      	ldr	r2, [r7, #4]
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	4413      	add	r3, r2
 80132e2:	881b      	ldrh	r3, [r3, #0]
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80132ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80132ee:	813b      	strh	r3, [r7, #8]
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	441a      	add	r2, r3
 80132fa:	893b      	ldrh	r3, [r7, #8]
 80132fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801330c:	b29b      	uxth	r3, r3
 801330e:	8013      	strh	r3, [r2, #0]
 8013310:	e192      	b.n	8013638 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	4413      	add	r3, r2
 801331c:	881b      	ldrh	r3, [r3, #0]
 801331e:	827b      	strh	r3, [r7, #18]
 8013320:	8a7b      	ldrh	r3, [r7, #18]
 8013322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013326:	2b00      	cmp	r3, #0
 8013328:	d01b      	beq.n	8013362 <USB_DeactivateEndpoint+0xf6>
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	4413      	add	r3, r2
 8013334:	881b      	ldrh	r3, [r3, #0]
 8013336:	b29b      	uxth	r3, r3
 8013338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801333c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013340:	823b      	strh	r3, [r7, #16]
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	009b      	lsls	r3, r3, #2
 801334a:	441a      	add	r2, r3
 801334c:	8a3b      	ldrh	r3, [r7, #16]
 801334e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801335e:	b29b      	uxth	r3, r3
 8013360:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013362:	687a      	ldr	r2, [r7, #4]
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	009b      	lsls	r3, r3, #2
 801336a:	4413      	add	r3, r2
 801336c:	881b      	ldrh	r3, [r3, #0]
 801336e:	b29b      	uxth	r3, r3
 8013370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013378:	81fb      	strh	r3, [r7, #14]
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	441a      	add	r2, r3
 8013384:	89fb      	ldrh	r3, [r7, #14]
 8013386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801338a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801338e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013396:	b29b      	uxth	r3, r3
 8013398:	8013      	strh	r3, [r2, #0]
 801339a:	e14d      	b.n	8013638 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	785b      	ldrb	r3, [r3, #1]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f040 80a5 	bne.w	80134f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	4413      	add	r3, r2
 80133b0:	881b      	ldrh	r3, [r3, #0]
 80133b2:	843b      	strh	r3, [r7, #32]
 80133b4:	8c3b      	ldrh	r3, [r7, #32]
 80133b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d01b      	beq.n	80133f6 <USB_DeactivateEndpoint+0x18a>
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	4413      	add	r3, r2
 80133c8:	881b      	ldrh	r3, [r3, #0]
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80133d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133d4:	83fb      	strh	r3, [r7, #30]
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	009b      	lsls	r3, r3, #2
 80133de:	441a      	add	r2, r3
 80133e0:	8bfb      	ldrh	r3, [r7, #30]
 80133e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80133e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80133ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80133ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80133f6:	687a      	ldr	r2, [r7, #4]
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	4413      	add	r3, r2
 8013400:	881b      	ldrh	r3, [r3, #0]
 8013402:	83bb      	strh	r3, [r7, #28]
 8013404:	8bbb      	ldrh	r3, [r7, #28]
 8013406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801340a:	2b00      	cmp	r3, #0
 801340c:	d01b      	beq.n	8013446 <USB_DeactivateEndpoint+0x1da>
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	009b      	lsls	r3, r3, #2
 8013416:	4413      	add	r3, r2
 8013418:	881b      	ldrh	r3, [r3, #0]
 801341a:	b29b      	uxth	r3, r3
 801341c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013424:	837b      	strh	r3, [r7, #26]
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	441a      	add	r2, r3
 8013430:	8b7b      	ldrh	r3, [r7, #26]
 8013432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801343a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801343e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013442:	b29b      	uxth	r3, r3
 8013444:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8013446:	687a      	ldr	r2, [r7, #4]
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	009b      	lsls	r3, r3, #2
 801344e:	4413      	add	r3, r2
 8013450:	881b      	ldrh	r3, [r3, #0]
 8013452:	b29b      	uxth	r3, r3
 8013454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801345c:	833b      	strh	r3, [r7, #24]
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	009b      	lsls	r3, r3, #2
 8013466:	441a      	add	r2, r3
 8013468:	8b3b      	ldrh	r3, [r7, #24]
 801346a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801346e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801347a:	b29b      	uxth	r3, r3
 801347c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	009b      	lsls	r3, r3, #2
 8013486:	4413      	add	r3, r2
 8013488:	881b      	ldrh	r3, [r3, #0]
 801348a:	b29b      	uxth	r3, r3
 801348c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013494:	82fb      	strh	r3, [r7, #22]
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	009b      	lsls	r3, r3, #2
 801349e:	441a      	add	r2, r3
 80134a0:	8afb      	ldrh	r3, [r7, #22]
 80134a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80134a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80134aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80134ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	4413      	add	r3, r2
 80134c0:	881b      	ldrh	r3, [r3, #0]
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80134c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134cc:	82bb      	strh	r3, [r7, #20]
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	009b      	lsls	r3, r3, #2
 80134d6:	441a      	add	r2, r3
 80134d8:	8abb      	ldrh	r3, [r7, #20]
 80134da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80134de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80134e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80134e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	8013      	strh	r3, [r2, #0]
 80134ee:	e0a3      	b.n	8013638 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	009b      	lsls	r3, r3, #2
 80134f8:	4413      	add	r3, r2
 80134fa:	881b      	ldrh	r3, [r3, #0]
 80134fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80134fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013504:	2b00      	cmp	r3, #0
 8013506:	d01b      	beq.n	8013540 <USB_DeactivateEndpoint+0x2d4>
 8013508:	687a      	ldr	r2, [r7, #4]
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	009b      	lsls	r3, r3, #2
 8013510:	4413      	add	r3, r2
 8013512:	881b      	ldrh	r3, [r3, #0]
 8013514:	b29b      	uxth	r3, r3
 8013516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801351e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8013520:	687a      	ldr	r2, [r7, #4]
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	009b      	lsls	r3, r3, #2
 8013528:	441a      	add	r2, r3
 801352a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801352c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801353c:	b29b      	uxth	r3, r3
 801353e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	781b      	ldrb	r3, [r3, #0]
 8013546:	009b      	lsls	r3, r3, #2
 8013548:	4413      	add	r3, r2
 801354a:	881b      	ldrh	r3, [r3, #0]
 801354c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801354e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013554:	2b00      	cmp	r3, #0
 8013556:	d01b      	beq.n	8013590 <USB_DeactivateEndpoint+0x324>
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	009b      	lsls	r3, r3, #2
 8013560:	4413      	add	r3, r2
 8013562:	881b      	ldrh	r3, [r3, #0]
 8013564:	b29b      	uxth	r3, r3
 8013566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801356a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801356e:	853b      	strh	r3, [r7, #40]	; 0x28
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	441a      	add	r2, r3
 801357a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801357c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801358c:	b29b      	uxth	r3, r3
 801358e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	009b      	lsls	r3, r3, #2
 8013598:	4413      	add	r3, r2
 801359a:	881b      	ldrh	r3, [r3, #0]
 801359c:	b29b      	uxth	r3, r3
 801359e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	009b      	lsls	r3, r3, #2
 80135b0:	441a      	add	r2, r3
 80135b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80135b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80135bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80135c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135c4:	b29b      	uxth	r3, r3
 80135c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	4413      	add	r3, r2
 80135d2:	881b      	ldrh	r3, [r3, #0]
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80135de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80135e0:	687a      	ldr	r2, [r7, #4]
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	441a      	add	r2, r3
 80135ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80135f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80135f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80135f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135fc:	b29b      	uxth	r3, r3
 80135fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013600:	687a      	ldr	r2, [r7, #4]
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	009b      	lsls	r3, r3, #2
 8013608:	4413      	add	r3, r2
 801360a:	881b      	ldrh	r3, [r3, #0]
 801360c:	b29b      	uxth	r3, r3
 801360e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013616:	847b      	strh	r3, [r7, #34]	; 0x22
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	441a      	add	r2, r3
 8013622:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801362c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013634:	b29b      	uxth	r3, r3
 8013636:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8013638:	2300      	movs	r3, #0
}
 801363a:	4618      	mov	r0, r3
 801363c:	3734      	adds	r7, #52	; 0x34
 801363e:	46bd      	mov	sp, r7
 8013640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013644:	4770      	bx	lr

08013646 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013646:	b580      	push	{r7, lr}
 8013648:	b0c2      	sub	sp, #264	; 0x108
 801364a:	af00      	add	r7, sp, #0
 801364c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013654:	6018      	str	r0, [r3, #0]
 8013656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801365a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801365e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	785b      	ldrb	r3, [r3, #1]
 801366c:	2b01      	cmp	r3, #1
 801366e:	f040 86b7 	bne.w	80143e0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8013672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	699a      	ldr	r2, [r3, #24]
 801367e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	691b      	ldr	r3, [r3, #16]
 801368a:	429a      	cmp	r2, r3
 801368c:	d908      	bls.n	80136a0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 801368e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	691b      	ldr	r3, [r3, #16]
 801369a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801369e:	e007      	b.n	80136b0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80136a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	699b      	ldr	r3, [r3, #24]
 80136ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80136b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	7b1b      	ldrb	r3, [r3, #12]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d13a      	bne.n	8013736 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80136c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	6959      	ldr	r1, [r3, #20]
 80136cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	88da      	ldrh	r2, [r3, #6]
 80136d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80136dc:	b29b      	uxth	r3, r3
 80136de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80136e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80136e6:	6800      	ldr	r0, [r0, #0]
 80136e8:	f001 fc98 	bl	801501c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80136ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	613b      	str	r3, [r7, #16]
 80136f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013706:	b29b      	uxth	r3, r3
 8013708:	461a      	mov	r2, r3
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	4413      	add	r3, r2
 801370e:	613b      	str	r3, [r7, #16]
 8013710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	00da      	lsls	r2, r3, #3
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	4413      	add	r3, r2
 8013722:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013726:	60fb      	str	r3, [r7, #12]
 8013728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801372c:	b29a      	uxth	r2, r3
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	801a      	strh	r2, [r3, #0]
 8013732:	f000 be1f 	b.w	8014374 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801373a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	78db      	ldrb	r3, [r3, #3]
 8013742:	2b02      	cmp	r3, #2
 8013744:	f040 8462 	bne.w	801400c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801374c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	6a1a      	ldr	r2, [r3, #32]
 8013754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	691b      	ldr	r3, [r3, #16]
 8013760:	429a      	cmp	r2, r3
 8013762:	f240 83df 	bls.w	8013f24 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801376a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	009b      	lsls	r3, r3, #2
 801377e:	4413      	add	r3, r2
 8013780:	881b      	ldrh	r3, [r3, #0]
 8013782:	b29b      	uxth	r3, r3
 8013784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801378c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801379e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	009b      	lsls	r3, r3, #2
 80137a8:	441a      	add	r2, r3
 80137aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80137ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80137b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80137b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80137ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137be:	b29b      	uxth	r3, r3
 80137c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80137c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	6a1a      	ldr	r2, [r3, #32]
 80137ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80137d2:	1ad2      	subs	r2, r2, r3
 80137d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80137e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137e8:	681a      	ldr	r2, [r3, #0]
 80137ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	009b      	lsls	r3, r3, #2
 80137f8:	4413      	add	r3, r2
 80137fa:	881b      	ldrh	r3, [r3, #0]
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013802:	2b00      	cmp	r3, #0
 8013804:	f000 81c7 	beq.w	8013b96 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801380c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	633b      	str	r3, [r7, #48]	; 0x30
 8013814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	785b      	ldrb	r3, [r3, #1]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d177      	bne.n	8013914 <USB_EPStartXfer+0x2ce>
 8013824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801383e:	b29b      	uxth	r3, r3
 8013840:	461a      	mov	r2, r3
 8013842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013844:	4413      	add	r3, r2
 8013846:	62bb      	str	r3, [r7, #40]	; 0x28
 8013848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801384c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	00da      	lsls	r2, r3, #3
 8013856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013858:	4413      	add	r3, r2
 801385a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801385e:	627b      	str	r3, [r7, #36]	; 0x24
 8013860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013862:	881b      	ldrh	r3, [r3, #0]
 8013864:	b29b      	uxth	r3, r3
 8013866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801386a:	b29a      	uxth	r2, r3
 801386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386e:	801a      	strh	r2, [r3, #0]
 8013870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013874:	2b3e      	cmp	r3, #62	; 0x3e
 8013876:	d921      	bls.n	80138bc <USB_EPStartXfer+0x276>
 8013878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801387c:	095b      	lsrs	r3, r3, #5
 801387e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013886:	f003 031f 	and.w	r3, r3, #31
 801388a:	2b00      	cmp	r3, #0
 801388c:	d104      	bne.n	8013898 <USB_EPStartXfer+0x252>
 801388e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013892:	3b01      	subs	r3, #1
 8013894:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389a:	881b      	ldrh	r3, [r3, #0]
 801389c:	b29a      	uxth	r2, r3
 801389e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	029b      	lsls	r3, r3, #10
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	4313      	orrs	r3, r2
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80138b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b8:	801a      	strh	r2, [r3, #0]
 80138ba:	e050      	b.n	801395e <USB_EPStartXfer+0x318>
 80138bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d10a      	bne.n	80138da <USB_EPStartXfer+0x294>
 80138c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c6:	881b      	ldrh	r3, [r3, #0]
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80138ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d6:	801a      	strh	r2, [r3, #0]
 80138d8:	e041      	b.n	801395e <USB_EPStartXfer+0x318>
 80138da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138de:	085b      	lsrs	r3, r3, #1
 80138e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80138e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138e8:	f003 0301 	and.w	r3, r3, #1
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d004      	beq.n	80138fa <USB_EPStartXfer+0x2b4>
 80138f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80138f4:	3301      	adds	r3, #1
 80138f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80138fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fc:	881b      	ldrh	r3, [r3, #0]
 80138fe:	b29a      	uxth	r2, r3
 8013900:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013904:	b29b      	uxth	r3, r3
 8013906:	029b      	lsls	r3, r3, #10
 8013908:	b29b      	uxth	r3, r3
 801390a:	4313      	orrs	r3, r2
 801390c:	b29a      	uxth	r2, r3
 801390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013910:	801a      	strh	r2, [r3, #0]
 8013912:	e024      	b.n	801395e <USB_EPStartXfer+0x318>
 8013914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	785b      	ldrb	r3, [r3, #1]
 8013920:	2b01      	cmp	r3, #1
 8013922:	d11c      	bne.n	801395e <USB_EPStartXfer+0x318>
 8013924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013932:	b29b      	uxth	r3, r3
 8013934:	461a      	mov	r2, r3
 8013936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013938:	4413      	add	r3, r2
 801393a:	633b      	str	r3, [r7, #48]	; 0x30
 801393c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	00da      	lsls	r2, r3, #3
 801394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394c:	4413      	add	r3, r2
 801394e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013958:	b29a      	uxth	r2, r3
 801395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801395c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801395e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	895b      	ldrh	r3, [r3, #10]
 801396a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801396e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	6959      	ldr	r1, [r3, #20]
 801397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801397e:	b29b      	uxth	r3, r3
 8013980:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013984:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013988:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801398c:	6800      	ldr	r0, [r0, #0]
 801398e:	f001 fb45 	bl	801501c <USB_WritePMA>
            ep->xfer_buff += len;
 8013992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	695a      	ldr	r2, [r3, #20]
 801399e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80139a2:	441a      	add	r2, r3
 80139a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80139b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	6a1a      	ldr	r2, [r3, #32]
 80139bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	691b      	ldr	r3, [r3, #16]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d90f      	bls.n	80139ec <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80139cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	6a1a      	ldr	r2, [r3, #32]
 80139d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80139dc:	1ad2      	subs	r2, r2, r3
 80139de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	621a      	str	r2, [r3, #32]
 80139ea:	e00e      	b.n	8013a0a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80139ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	6a1b      	ldr	r3, [r3, #32]
 80139f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80139fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	2200      	movs	r2, #0
 8013a08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	785b      	ldrb	r3, [r3, #1]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d177      	bne.n	8013b0a <USB_EPStartXfer+0x4c4>
 8013a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	61bb      	str	r3, [r7, #24]
 8013a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013a34:	b29b      	uxth	r3, r3
 8013a36:	461a      	mov	r2, r3
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	4413      	add	r3, r2
 8013a3c:	61bb      	str	r3, [r7, #24]
 8013a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	00da      	lsls	r2, r3, #3
 8013a4c:	69bb      	ldr	r3, [r7, #24]
 8013a4e:	4413      	add	r3, r2
 8013a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013a54:	617b      	str	r3, [r7, #20]
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	881b      	ldrh	r3, [r3, #0]
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	801a      	strh	r2, [r3, #0]
 8013a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a6a:	2b3e      	cmp	r3, #62	; 0x3e
 8013a6c:	d921      	bls.n	8013ab2 <USB_EPStartXfer+0x46c>
 8013a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a72:	095b      	lsrs	r3, r3, #5
 8013a74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a7c:	f003 031f 	and.w	r3, r3, #31
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d104      	bne.n	8013a8e <USB_EPStartXfer+0x448>
 8013a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	881b      	ldrh	r3, [r3, #0]
 8013a92:	b29a      	uxth	r2, r3
 8013a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	029b      	lsls	r3, r3, #10
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	4313      	orrs	r3, r2
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013aaa:	b29a      	uxth	r2, r3
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	801a      	strh	r2, [r3, #0]
 8013ab0:	e056      	b.n	8013b60 <USB_EPStartXfer+0x51a>
 8013ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d10a      	bne.n	8013ad0 <USB_EPStartXfer+0x48a>
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	881b      	ldrh	r3, [r3, #0]
 8013abe:	b29b      	uxth	r3, r3
 8013ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013ac8:	b29a      	uxth	r2, r3
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	801a      	strh	r2, [r3, #0]
 8013ace:	e047      	b.n	8013b60 <USB_EPStartXfer+0x51a>
 8013ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ad4:	085b      	lsrs	r3, r3, #1
 8013ad6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ade:	f003 0301 	and.w	r3, r3, #1
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d004      	beq.n	8013af0 <USB_EPStartXfer+0x4aa>
 8013ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013aea:	3301      	adds	r3, #1
 8013aec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	881b      	ldrh	r3, [r3, #0]
 8013af4:	b29a      	uxth	r2, r3
 8013af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	029b      	lsls	r3, r3, #10
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	4313      	orrs	r3, r2
 8013b02:	b29a      	uxth	r2, r3
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	801a      	strh	r2, [r3, #0]
 8013b08:	e02a      	b.n	8013b60 <USB_EPStartXfer+0x51a>
 8013b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	785b      	ldrb	r3, [r3, #1]
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	d122      	bne.n	8013b60 <USB_EPStartXfer+0x51a>
 8013b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	623b      	str	r3, [r7, #32]
 8013b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	461a      	mov	r2, r3
 8013b38:	6a3b      	ldr	r3, [r7, #32]
 8013b3a:	4413      	add	r3, r2
 8013b3c:	623b      	str	r3, [r7, #32]
 8013b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	00da      	lsls	r2, r3, #3
 8013b4c:	6a3b      	ldr	r3, [r7, #32]
 8013b4e:	4413      	add	r3, r2
 8013b50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013b54:	61fb      	str	r3, [r7, #28]
 8013b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b5a:	b29a      	uxth	r2, r3
 8013b5c:	69fb      	ldr	r3, [r7, #28]
 8013b5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	891b      	ldrh	r3, [r3, #8]
 8013b6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	6959      	ldr	r1, [r3, #20]
 8013b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b80:	b29b      	uxth	r3, r3
 8013b82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013b86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013b8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013b8e:	6800      	ldr	r0, [r0, #0]
 8013b90:	f001 fa44 	bl	801501c <USB_WritePMA>
 8013b94:	e3ee      	b.n	8014374 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	785b      	ldrb	r3, [r3, #1]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d177      	bne.n	8013c96 <USB_EPStartXfer+0x650>
 8013ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013baa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8013bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013bc0:	b29b      	uxth	r3, r3
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bc6:	4413      	add	r3, r2
 8013bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8013bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	00da      	lsls	r2, r3, #3
 8013bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bda:	4413      	add	r3, r2
 8013bdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013be0:	647b      	str	r3, [r7, #68]	; 0x44
 8013be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013be4:	881b      	ldrh	r3, [r3, #0]
 8013be6:	b29b      	uxth	r3, r3
 8013be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bf0:	801a      	strh	r2, [r3, #0]
 8013bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8013bf8:	d921      	bls.n	8013c3e <USB_EPStartXfer+0x5f8>
 8013bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013bfe:	095b      	lsrs	r3, r3, #5
 8013c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c08:	f003 031f 	and.w	r3, r3, #31
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d104      	bne.n	8013c1a <USB_EPStartXfer+0x5d4>
 8013c10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013c14:	3b01      	subs	r3, #1
 8013c16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c1c:	881b      	ldrh	r3, [r3, #0]
 8013c1e:	b29a      	uxth	r2, r3
 8013c20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	029b      	lsls	r3, r3, #10
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	4313      	orrs	r3, r2
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013c36:	b29a      	uxth	r2, r3
 8013c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c3a:	801a      	strh	r2, [r3, #0]
 8013c3c:	e056      	b.n	8013cec <USB_EPStartXfer+0x6a6>
 8013c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d10a      	bne.n	8013c5c <USB_EPStartXfer+0x616>
 8013c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c48:	881b      	ldrh	r3, [r3, #0]
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c58:	801a      	strh	r2, [r3, #0]
 8013c5a:	e047      	b.n	8013cec <USB_EPStartXfer+0x6a6>
 8013c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c60:	085b      	lsrs	r3, r3, #1
 8013c62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c6a:	f003 0301 	and.w	r3, r3, #1
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d004      	beq.n	8013c7c <USB_EPStartXfer+0x636>
 8013c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013c76:	3301      	adds	r3, #1
 8013c78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c7e:	881b      	ldrh	r3, [r3, #0]
 8013c80:	b29a      	uxth	r2, r3
 8013c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013c86:	b29b      	uxth	r3, r3
 8013c88:	029b      	lsls	r3, r3, #10
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	4313      	orrs	r3, r2
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c92:	801a      	strh	r2, [r3, #0]
 8013c94:	e02a      	b.n	8013cec <USB_EPStartXfer+0x6a6>
 8013c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	785b      	ldrb	r3, [r3, #1]
 8013ca2:	2b01      	cmp	r3, #1
 8013ca4:	d122      	bne.n	8013cec <USB_EPStartXfer+0x6a6>
 8013ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	653b      	str	r3, [r7, #80]	; 0x50
 8013cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cc6:	4413      	add	r3, r2
 8013cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8013cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	00da      	lsls	r2, r3, #3
 8013cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cda:	4413      	add	r3, r2
 8013cdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	891b      	ldrh	r3, [r3, #8]
 8013cf8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	6959      	ldr	r1, [r3, #20]
 8013d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d0c:	b29b      	uxth	r3, r3
 8013d0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013d12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013d16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013d1a:	6800      	ldr	r0, [r0, #0]
 8013d1c:	f001 f97e 	bl	801501c <USB_WritePMA>
            ep->xfer_buff += len;
 8013d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	695a      	ldr	r2, [r3, #20]
 8013d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d30:	441a      	add	r2, r3
 8013d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	6a1a      	ldr	r2, [r3, #32]
 8013d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	691b      	ldr	r3, [r3, #16]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d90f      	bls.n	8013d7a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8013d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	6a1a      	ldr	r2, [r3, #32]
 8013d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d6a:	1ad2      	subs	r2, r2, r3
 8013d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	621a      	str	r2, [r3, #32]
 8013d78:	e00e      	b.n	8013d98 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8013d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	6a1b      	ldr	r3, [r3, #32]
 8013d86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8013d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2200      	movs	r2, #0
 8013d96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	643b      	str	r3, [r7, #64]	; 0x40
 8013da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	785b      	ldrb	r3, [r3, #1]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d177      	bne.n	8013ea4 <USB_EPStartXfer+0x85e>
 8013db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8013dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013dc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd4:	4413      	add	r3, r2
 8013dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8013dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	00da      	lsls	r2, r3, #3
 8013de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de8:	4413      	add	r3, r2
 8013dea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013dee:	637b      	str	r3, [r7, #52]	; 0x34
 8013df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013df2:	881b      	ldrh	r3, [r3, #0]
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dfe:	801a      	strh	r2, [r3, #0]
 8013e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e04:	2b3e      	cmp	r3, #62	; 0x3e
 8013e06:	d921      	bls.n	8013e4c <USB_EPStartXfer+0x806>
 8013e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e0c:	095b      	lsrs	r3, r3, #5
 8013e0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e16:	f003 031f 	and.w	r3, r3, #31
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d104      	bne.n	8013e28 <USB_EPStartXfer+0x7e2>
 8013e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013e22:	3b01      	subs	r3, #1
 8013e24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	b29a      	uxth	r2, r3
 8013e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013e32:	b29b      	uxth	r3, r3
 8013e34:	029b      	lsls	r3, r3, #10
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	4313      	orrs	r3, r2
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e48:	801a      	strh	r2, [r3, #0]
 8013e4a:	e050      	b.n	8013eee <USB_EPStartXfer+0x8a8>
 8013e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d10a      	bne.n	8013e6a <USB_EPStartXfer+0x824>
 8013e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e56:	881b      	ldrh	r3, [r3, #0]
 8013e58:	b29b      	uxth	r3, r3
 8013e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013e62:	b29a      	uxth	r2, r3
 8013e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e66:	801a      	strh	r2, [r3, #0]
 8013e68:	e041      	b.n	8013eee <USB_EPStartXfer+0x8a8>
 8013e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e6e:	085b      	lsrs	r3, r3, #1
 8013e70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e78:	f003 0301 	and.w	r3, r3, #1
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d004      	beq.n	8013e8a <USB_EPStartXfer+0x844>
 8013e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013e84:	3301      	adds	r3, #1
 8013e86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8c:	881b      	ldrh	r3, [r3, #0]
 8013e8e:	b29a      	uxth	r2, r3
 8013e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	029b      	lsls	r3, r3, #10
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	4313      	orrs	r3, r2
 8013e9c:	b29a      	uxth	r2, r3
 8013e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ea0:	801a      	strh	r2, [r3, #0]
 8013ea2:	e024      	b.n	8013eee <USB_EPStartXfer+0x8a8>
 8013ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	785b      	ldrb	r3, [r3, #1]
 8013eb0:	2b01      	cmp	r3, #1
 8013eb2:	d11c      	bne.n	8013eee <USB_EPStartXfer+0x8a8>
 8013eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ec8:	4413      	add	r3, r2
 8013eca:	643b      	str	r3, [r7, #64]	; 0x40
 8013ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	00da      	lsls	r2, r3, #3
 8013eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013edc:	4413      	add	r3, r2
 8013ede:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ee8:	b29a      	uxth	r2, r3
 8013eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	895b      	ldrh	r3, [r3, #10]
 8013efa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	6959      	ldr	r1, [r3, #20]
 8013f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013f0e:	b29b      	uxth	r3, r3
 8013f10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013f14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013f18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013f1c:	6800      	ldr	r0, [r0, #0]
 8013f1e:	f001 f87d 	bl	801501c <USB_WritePMA>
 8013f22:	e227      	b.n	8014374 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8013f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	6a1b      	ldr	r3, [r3, #32]
 8013f30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013f3c:	681a      	ldr	r2, [r3, #0]
 8013f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	4413      	add	r3, r2
 8013f4e:	881b      	ldrh	r3, [r3, #0]
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8013f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013f5a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8013f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013f66:	681a      	ldr	r2, [r3, #0]
 8013f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	009b      	lsls	r3, r3, #2
 8013f76:	441a      	add	r2, r3
 8013f78:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	461a      	mov	r2, r3
 8013fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013fb0:	4413      	add	r3, r2
 8013fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	00da      	lsls	r2, r3, #3
 8013fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013fc4:	4413      	add	r3, r2
 8013fc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013fca:	65bb      	str	r3, [r7, #88]	; 0x58
 8013fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013fd0:	b29a      	uxth	r2, r3
 8013fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	891b      	ldrh	r3, [r3, #8]
 8013fe2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	6959      	ldr	r1, [r3, #20]
 8013ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013ffc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8014000:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8014004:	6800      	ldr	r0, [r0, #0]
 8014006:	f001 f809 	bl	801501c <USB_WritePMA>
 801400a:	e1b3      	b.n	8014374 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801400c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	6a1a      	ldr	r2, [r3, #32]
 8014018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801401c:	1ad2      	subs	r2, r2, r3
 801401e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801402a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801402e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	009b      	lsls	r3, r3, #2
 8014042:	4413      	add	r3, r2
 8014044:	881b      	ldrh	r3, [r3, #0]
 8014046:	b29b      	uxth	r3, r3
 8014048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801404c:	2b00      	cmp	r3, #0
 801404e:	f000 80c6 	beq.w	80141de <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	673b      	str	r3, [r7, #112]	; 0x70
 801405e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	785b      	ldrb	r3, [r3, #1]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d177      	bne.n	801415e <USB_EPStartXfer+0xb18>
 801406e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	66bb      	str	r3, [r7, #104]	; 0x68
 801407a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801407e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014088:	b29b      	uxth	r3, r3
 801408a:	461a      	mov	r2, r3
 801408c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801408e:	4413      	add	r3, r2
 8014090:	66bb      	str	r3, [r7, #104]	; 0x68
 8014092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	781b      	ldrb	r3, [r3, #0]
 801409e:	00da      	lsls	r2, r3, #3
 80140a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140a2:	4413      	add	r3, r2
 80140a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80140a8:	667b      	str	r3, [r7, #100]	; 0x64
 80140aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140ac:	881b      	ldrh	r3, [r3, #0]
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140b8:	801a      	strh	r2, [r3, #0]
 80140ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80140be:	2b3e      	cmp	r3, #62	; 0x3e
 80140c0:	d921      	bls.n	8014106 <USB_EPStartXfer+0xac0>
 80140c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80140c6:	095b      	lsrs	r3, r3, #5
 80140c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80140cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80140d0:	f003 031f 	and.w	r3, r3, #31
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d104      	bne.n	80140e2 <USB_EPStartXfer+0xa9c>
 80140d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80140dc:	3b01      	subs	r3, #1
 80140de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80140e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140e4:	881b      	ldrh	r3, [r3, #0]
 80140e6:	b29a      	uxth	r2, r3
 80140e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	029b      	lsls	r3, r3, #10
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	4313      	orrs	r3, r2
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80140fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80140fe:	b29a      	uxth	r2, r3
 8014100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014102:	801a      	strh	r2, [r3, #0]
 8014104:	e050      	b.n	80141a8 <USB_EPStartXfer+0xb62>
 8014106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801410a:	2b00      	cmp	r3, #0
 801410c:	d10a      	bne.n	8014124 <USB_EPStartXfer+0xade>
 801410e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014110:	881b      	ldrh	r3, [r3, #0]
 8014112:	b29b      	uxth	r3, r3
 8014114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801411c:	b29a      	uxth	r2, r3
 801411e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014120:	801a      	strh	r2, [r3, #0]
 8014122:	e041      	b.n	80141a8 <USB_EPStartXfer+0xb62>
 8014124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014128:	085b      	lsrs	r3, r3, #1
 801412a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801412e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014132:	f003 0301 	and.w	r3, r3, #1
 8014136:	2b00      	cmp	r3, #0
 8014138:	d004      	beq.n	8014144 <USB_EPStartXfer+0xafe>
 801413a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801413e:	3301      	adds	r3, #1
 8014140:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014146:	881b      	ldrh	r3, [r3, #0]
 8014148:	b29a      	uxth	r2, r3
 801414a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801414e:	b29b      	uxth	r3, r3
 8014150:	029b      	lsls	r3, r3, #10
 8014152:	b29b      	uxth	r3, r3
 8014154:	4313      	orrs	r3, r2
 8014156:	b29a      	uxth	r2, r3
 8014158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801415a:	801a      	strh	r2, [r3, #0]
 801415c:	e024      	b.n	80141a8 <USB_EPStartXfer+0xb62>
 801415e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	785b      	ldrb	r3, [r3, #1]
 801416a:	2b01      	cmp	r3, #1
 801416c:	d11c      	bne.n	80141a8 <USB_EPStartXfer+0xb62>
 801416e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801417c:	b29b      	uxth	r3, r3
 801417e:	461a      	mov	r2, r3
 8014180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014182:	4413      	add	r3, r2
 8014184:	673b      	str	r3, [r7, #112]	; 0x70
 8014186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801418a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	00da      	lsls	r2, r3, #3
 8014194:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014196:	4413      	add	r3, r2
 8014198:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801419c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801419e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141a2:	b29a      	uxth	r2, r3
 80141a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80141a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	895b      	ldrh	r3, [r3, #10]
 80141b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80141b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	6959      	ldr	r1, [r3, #20]
 80141c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141c8:	b29b      	uxth	r3, r3
 80141ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80141ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80141d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80141d6:	6800      	ldr	r0, [r0, #0]
 80141d8:	f000 ff20 	bl	801501c <USB_WritePMA>
 80141dc:	e0ca      	b.n	8014374 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80141de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	785b      	ldrb	r3, [r3, #1]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d177      	bne.n	80142de <USB_EPStartXfer+0xc98>
 80141ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80141fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014208:	b29b      	uxth	r3, r3
 801420a:	461a      	mov	r2, r3
 801420c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801420e:	4413      	add	r3, r2
 8014210:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	00da      	lsls	r2, r3, #3
 8014220:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014222:	4413      	add	r3, r2
 8014224:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014228:	67bb      	str	r3, [r7, #120]	; 0x78
 801422a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801422c:	881b      	ldrh	r3, [r3, #0]
 801422e:	b29b      	uxth	r3, r3
 8014230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014234:	b29a      	uxth	r2, r3
 8014236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014238:	801a      	strh	r2, [r3, #0]
 801423a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801423e:	2b3e      	cmp	r3, #62	; 0x3e
 8014240:	d921      	bls.n	8014286 <USB_EPStartXfer+0xc40>
 8014242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014246:	095b      	lsrs	r3, r3, #5
 8014248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801424c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014250:	f003 031f 	and.w	r3, r3, #31
 8014254:	2b00      	cmp	r3, #0
 8014256:	d104      	bne.n	8014262 <USB_EPStartXfer+0xc1c>
 8014258:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801425c:	3b01      	subs	r3, #1
 801425e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014264:	881b      	ldrh	r3, [r3, #0]
 8014266:	b29a      	uxth	r2, r3
 8014268:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801426c:	b29b      	uxth	r3, r3
 801426e:	029b      	lsls	r3, r3, #10
 8014270:	b29b      	uxth	r3, r3
 8014272:	4313      	orrs	r3, r2
 8014274:	b29b      	uxth	r3, r3
 8014276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801427a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801427e:	b29a      	uxth	r2, r3
 8014280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014282:	801a      	strh	r2, [r3, #0]
 8014284:	e05c      	b.n	8014340 <USB_EPStartXfer+0xcfa>
 8014286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801428a:	2b00      	cmp	r3, #0
 801428c:	d10a      	bne.n	80142a4 <USB_EPStartXfer+0xc5e>
 801428e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014290:	881b      	ldrh	r3, [r3, #0]
 8014292:	b29b      	uxth	r3, r3
 8014294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801429c:	b29a      	uxth	r2, r3
 801429e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142a0:	801a      	strh	r2, [r3, #0]
 80142a2:	e04d      	b.n	8014340 <USB_EPStartXfer+0xcfa>
 80142a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142a8:	085b      	lsrs	r3, r3, #1
 80142aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80142ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142b2:	f003 0301 	and.w	r3, r3, #1
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d004      	beq.n	80142c4 <USB_EPStartXfer+0xc7e>
 80142ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80142be:	3301      	adds	r3, #1
 80142c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80142c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142c6:	881b      	ldrh	r3, [r3, #0]
 80142c8:	b29a      	uxth	r2, r3
 80142ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	029b      	lsls	r3, r3, #10
 80142d2:	b29b      	uxth	r3, r3
 80142d4:	4313      	orrs	r3, r2
 80142d6:	b29a      	uxth	r2, r3
 80142d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142da:	801a      	strh	r2, [r3, #0]
 80142dc:	e030      	b.n	8014340 <USB_EPStartXfer+0xcfa>
 80142de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	785b      	ldrb	r3, [r3, #1]
 80142ea:	2b01      	cmp	r3, #1
 80142ec:	d128      	bne.n	8014340 <USB_EPStartXfer+0xcfa>
 80142ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80142fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801430a:	b29b      	uxth	r3, r3
 801430c:	461a      	mov	r2, r3
 801430e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014312:	4413      	add	r3, r2
 8014314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801431c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	00da      	lsls	r2, r3, #3
 8014326:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801432a:	4413      	add	r3, r2
 801432c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014338:	b29a      	uxth	r2, r3
 801433a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801433e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	891b      	ldrh	r3, [r3, #8]
 801434c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	6959      	ldr	r1, [r3, #20]
 801435c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014360:	b29b      	uxth	r3, r3
 8014362:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8014366:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801436a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801436e:	6800      	ldr	r0, [r0, #0]
 8014370:	f000 fe54 	bl	801501c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8014374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801437c:	681a      	ldr	r2, [r3, #0]
 801437e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	009b      	lsls	r3, r3, #2
 801438c:	4413      	add	r3, r2
 801438e:	881b      	ldrh	r3, [r3, #0]
 8014390:	b29b      	uxth	r3, r3
 8014392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801439a:	817b      	strh	r3, [r7, #10]
 801439c:	897b      	ldrh	r3, [r7, #10]
 801439e:	f083 0310 	eor.w	r3, r3, #16
 80143a2:	817b      	strh	r3, [r7, #10]
 80143a4:	897b      	ldrh	r3, [r7, #10]
 80143a6:	f083 0320 	eor.w	r3, r3, #32
 80143aa:	817b      	strh	r3, [r7, #10]
 80143ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80143b4:	681a      	ldr	r2, [r3, #0]
 80143b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	009b      	lsls	r3, r3, #2
 80143c4:	441a      	add	r2, r3
 80143c6:	897b      	ldrh	r3, [r7, #10]
 80143c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80143cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80143d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80143d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143d8:	b29b      	uxth	r3, r3
 80143da:	8013      	strh	r3, [r2, #0]
 80143dc:	f000 bcde 	b.w	8014d9c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80143e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	7b1b      	ldrb	r3, [r3, #12]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	f040 80bb 	bne.w	8014568 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80143f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	699a      	ldr	r2, [r3, #24]
 80143fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	691b      	ldr	r3, [r3, #16]
 801440a:	429a      	cmp	r2, r3
 801440c:	d917      	bls.n	801443e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 801440e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	691b      	ldr	r3, [r3, #16]
 801441a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 801441e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	699a      	ldr	r2, [r3, #24]
 801442a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801442e:	1ad2      	subs	r2, r2, r3
 8014430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	619a      	str	r2, [r3, #24]
 801443c:	e00e      	b.n	801445c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 801443e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	699b      	ldr	r3, [r3, #24]
 801444a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801444e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	2200      	movs	r2, #0
 801445a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801445c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801446a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801446e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014478:	b29b      	uxth	r3, r3
 801447a:	461a      	mov	r2, r3
 801447c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014480:	4413      	add	r3, r2
 8014482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801448a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	00da      	lsls	r2, r3, #3
 8014494:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014498:	4413      	add	r3, r2
 801449a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801449e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80144a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80144a6:	881b      	ldrh	r3, [r3, #0]
 80144a8:	b29b      	uxth	r3, r3
 80144aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80144ae:	b29a      	uxth	r2, r3
 80144b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80144b4:	801a      	strh	r2, [r3, #0]
 80144b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80144ba:	2b3e      	cmp	r3, #62	; 0x3e
 80144bc:	d924      	bls.n	8014508 <USB_EPStartXfer+0xec2>
 80144be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80144c2:	095b      	lsrs	r3, r3, #5
 80144c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80144c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80144cc:	f003 031f 	and.w	r3, r3, #31
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d104      	bne.n	80144de <USB_EPStartXfer+0xe98>
 80144d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80144d8:	3b01      	subs	r3, #1
 80144da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80144de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80144e2:	881b      	ldrh	r3, [r3, #0]
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	029b      	lsls	r3, r3, #10
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	4313      	orrs	r3, r2
 80144f2:	b29b      	uxth	r3, r3
 80144f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80144f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80144fc:	b29a      	uxth	r2, r3
 80144fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014502:	801a      	strh	r2, [r3, #0]
 8014504:	f000 bc10 	b.w	8014d28 <USB_EPStartXfer+0x16e2>
 8014508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801450c:	2b00      	cmp	r3, #0
 801450e:	d10c      	bne.n	801452a <USB_EPStartXfer+0xee4>
 8014510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	b29b      	uxth	r3, r3
 8014518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801451c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014520:	b29a      	uxth	r2, r3
 8014522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014526:	801a      	strh	r2, [r3, #0]
 8014528:	e3fe      	b.n	8014d28 <USB_EPStartXfer+0x16e2>
 801452a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801452e:	085b      	lsrs	r3, r3, #1
 8014530:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014538:	f003 0301 	and.w	r3, r3, #1
 801453c:	2b00      	cmp	r3, #0
 801453e:	d004      	beq.n	801454a <USB_EPStartXfer+0xf04>
 8014540:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014544:	3301      	adds	r3, #1
 8014546:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801454a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801454e:	881b      	ldrh	r3, [r3, #0]
 8014550:	b29a      	uxth	r2, r3
 8014552:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014556:	b29b      	uxth	r3, r3
 8014558:	029b      	lsls	r3, r3, #10
 801455a:	b29b      	uxth	r3, r3
 801455c:	4313      	orrs	r3, r2
 801455e:	b29a      	uxth	r2, r3
 8014560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014564:	801a      	strh	r2, [r3, #0]
 8014566:	e3df      	b.n	8014d28 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8014568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801456c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	78db      	ldrb	r3, [r3, #3]
 8014574:	2b02      	cmp	r3, #2
 8014576:	f040 8218 	bne.w	80149aa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801457a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801457e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	785b      	ldrb	r3, [r3, #1]
 8014586:	2b00      	cmp	r3, #0
 8014588:	f040 809d 	bne.w	80146c6 <USB_EPStartXfer+0x1080>
 801458c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801459a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801459e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80145a8:	b29b      	uxth	r3, r3
 80145aa:	461a      	mov	r2, r3
 80145ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80145b0:	4413      	add	r3, r2
 80145b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80145b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	00da      	lsls	r2, r3, #3
 80145c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80145c8:	4413      	add	r3, r2
 80145ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80145ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80145d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80145d6:	881b      	ldrh	r3, [r3, #0]
 80145d8:	b29b      	uxth	r3, r3
 80145da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80145de:	b29a      	uxth	r2, r3
 80145e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80145e4:	801a      	strh	r2, [r3, #0]
 80145e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	691b      	ldr	r3, [r3, #16]
 80145f2:	2b3e      	cmp	r3, #62	; 0x3e
 80145f4:	d92b      	bls.n	801464e <USB_EPStartXfer+0x1008>
 80145f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	691b      	ldr	r3, [r3, #16]
 8014602:	095b      	lsrs	r3, r3, #5
 8014604:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801460c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	691b      	ldr	r3, [r3, #16]
 8014614:	f003 031f 	and.w	r3, r3, #31
 8014618:	2b00      	cmp	r3, #0
 801461a:	d104      	bne.n	8014626 <USB_EPStartXfer+0xfe0>
 801461c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014620:	3b01      	subs	r3, #1
 8014622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801462a:	881b      	ldrh	r3, [r3, #0]
 801462c:	b29a      	uxth	r2, r3
 801462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014632:	b29b      	uxth	r3, r3
 8014634:	029b      	lsls	r3, r3, #10
 8014636:	b29b      	uxth	r3, r3
 8014638:	4313      	orrs	r3, r2
 801463a:	b29b      	uxth	r3, r3
 801463c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014644:	b29a      	uxth	r2, r3
 8014646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801464a:	801a      	strh	r2, [r3, #0]
 801464c:	e070      	b.n	8014730 <USB_EPStartXfer+0x10ea>
 801464e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	691b      	ldr	r3, [r3, #16]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d10c      	bne.n	8014678 <USB_EPStartXfer+0x1032>
 801465e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014662:	881b      	ldrh	r3, [r3, #0]
 8014664:	b29b      	uxth	r3, r3
 8014666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801466a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801466e:	b29a      	uxth	r2, r3
 8014670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014674:	801a      	strh	r2, [r3, #0]
 8014676:	e05b      	b.n	8014730 <USB_EPStartXfer+0x10ea>
 8014678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801467c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	691b      	ldr	r3, [r3, #16]
 8014684:	085b      	lsrs	r3, r3, #1
 8014686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801468a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801468e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	691b      	ldr	r3, [r3, #16]
 8014696:	f003 0301 	and.w	r3, r3, #1
 801469a:	2b00      	cmp	r3, #0
 801469c:	d004      	beq.n	80146a8 <USB_EPStartXfer+0x1062>
 801469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80146a2:	3301      	adds	r3, #1
 80146a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80146a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146ac:	881b      	ldrh	r3, [r3, #0]
 80146ae:	b29a      	uxth	r2, r3
 80146b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	029b      	lsls	r3, r3, #10
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	4313      	orrs	r3, r2
 80146bc:	b29a      	uxth	r2, r3
 80146be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146c2:	801a      	strh	r2, [r3, #0]
 80146c4:	e034      	b.n	8014730 <USB_EPStartXfer+0x10ea>
 80146c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80146ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	785b      	ldrb	r3, [r3, #1]
 80146d2:	2b01      	cmp	r3, #1
 80146d4:	d12c      	bne.n	8014730 <USB_EPStartXfer+0x10ea>
 80146d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80146da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80146e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80146e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	461a      	mov	r2, r3
 80146f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80146fa:	4413      	add	r3, r2
 80146fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	00da      	lsls	r2, r3, #3
 801470e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014712:	4413      	add	r3, r2
 8014714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801471c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	691b      	ldr	r3, [r3, #16]
 8014728:	b29a      	uxth	r2, r3
 801472a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801472e:	801a      	strh	r2, [r3, #0]
 8014730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801473e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	785b      	ldrb	r3, [r3, #1]
 801474a:	2b00      	cmp	r3, #0
 801474c:	f040 809d 	bne.w	801488a <USB_EPStartXfer+0x1244>
 8014750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801475e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801476c:	b29b      	uxth	r3, r3
 801476e:	461a      	mov	r2, r3
 8014770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014774:	4413      	add	r3, r2
 8014776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801477a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801477e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	781b      	ldrb	r3, [r3, #0]
 8014786:	00da      	lsls	r2, r3, #3
 8014788:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801478c:	4413      	add	r3, r2
 801478e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014792:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014796:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801479a:	881b      	ldrh	r3, [r3, #0]
 801479c:	b29b      	uxth	r3, r3
 801479e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80147a2:	b29a      	uxth	r2, r3
 80147a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80147a8:	801a      	strh	r2, [r3, #0]
 80147aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80147ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	691b      	ldr	r3, [r3, #16]
 80147b6:	2b3e      	cmp	r3, #62	; 0x3e
 80147b8:	d92b      	bls.n	8014812 <USB_EPStartXfer+0x11cc>
 80147ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80147be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	691b      	ldr	r3, [r3, #16]
 80147c6:	095b      	lsrs	r3, r3, #5
 80147c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80147cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80147d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	691b      	ldr	r3, [r3, #16]
 80147d8:	f003 031f 	and.w	r3, r3, #31
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d104      	bne.n	80147ea <USB_EPStartXfer+0x11a4>
 80147e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80147e4:	3b01      	subs	r3, #1
 80147e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80147ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80147ee:	881b      	ldrh	r3, [r3, #0]
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	029b      	lsls	r3, r3, #10
 80147fa:	b29b      	uxth	r3, r3
 80147fc:	4313      	orrs	r3, r2
 80147fe:	b29b      	uxth	r3, r3
 8014800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014808:	b29a      	uxth	r2, r3
 801480a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801480e:	801a      	strh	r2, [r3, #0]
 8014810:	e069      	b.n	80148e6 <USB_EPStartXfer+0x12a0>
 8014812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	691b      	ldr	r3, [r3, #16]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d10c      	bne.n	801483c <USB_EPStartXfer+0x11f6>
 8014822:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014826:	881b      	ldrh	r3, [r3, #0]
 8014828:	b29b      	uxth	r3, r3
 801482a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801482e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014832:	b29a      	uxth	r2, r3
 8014834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014838:	801a      	strh	r2, [r3, #0]
 801483a:	e054      	b.n	80148e6 <USB_EPStartXfer+0x12a0>
 801483c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	691b      	ldr	r3, [r3, #16]
 8014848:	085b      	lsrs	r3, r3, #1
 801484a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801484e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	691b      	ldr	r3, [r3, #16]
 801485a:	f003 0301 	and.w	r3, r3, #1
 801485e:	2b00      	cmp	r3, #0
 8014860:	d004      	beq.n	801486c <USB_EPStartXfer+0x1226>
 8014862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014866:	3301      	adds	r3, #1
 8014868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801486c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014870:	881b      	ldrh	r3, [r3, #0]
 8014872:	b29a      	uxth	r2, r3
 8014874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014878:	b29b      	uxth	r3, r3
 801487a:	029b      	lsls	r3, r3, #10
 801487c:	b29b      	uxth	r3, r3
 801487e:	4313      	orrs	r3, r2
 8014880:	b29a      	uxth	r2, r3
 8014882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014886:	801a      	strh	r2, [r3, #0]
 8014888:	e02d      	b.n	80148e6 <USB_EPStartXfer+0x12a0>
 801488a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801488e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	785b      	ldrb	r3, [r3, #1]
 8014896:	2b01      	cmp	r3, #1
 8014898:	d125      	bne.n	80148e6 <USB_EPStartXfer+0x12a0>
 801489a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801489e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	461a      	mov	r2, r3
 80148ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80148b0:	4413      	add	r3, r2
 80148b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80148b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	781b      	ldrb	r3, [r3, #0]
 80148c2:	00da      	lsls	r2, r3, #3
 80148c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80148c8:	4413      	add	r3, r2
 80148ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80148ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80148d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	691b      	ldr	r3, [r3, #16]
 80148de:	b29a      	uxth	r2, r3
 80148e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80148e4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80148e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	69db      	ldr	r3, [r3, #28]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	f000 8218 	beq.w	8014d28 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80148f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	4413      	add	r3, r2
 8014912:	881b      	ldrh	r3, [r3, #0]
 8014914:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014918:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801491c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014920:	2b00      	cmp	r3, #0
 8014922:	d005      	beq.n	8014930 <USB_EPStartXfer+0x12ea>
 8014924:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801492c:	2b00      	cmp	r3, #0
 801492e:	d10d      	bne.n	801494c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014930:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014938:	2b00      	cmp	r3, #0
 801493a:	f040 81f5 	bne.w	8014d28 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801493e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014946:	2b00      	cmp	r3, #0
 8014948:	f040 81ee 	bne.w	8014d28 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801494c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801495a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	781b      	ldrb	r3, [r3, #0]
 8014962:	009b      	lsls	r3, r3, #2
 8014964:	4413      	add	r3, r2
 8014966:	881b      	ldrh	r3, [r3, #0]
 8014968:	b29b      	uxth	r3, r3
 801496a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014972:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8014976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801497a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801497e:	681a      	ldr	r2, [r3, #0]
 8014980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	441a      	add	r2, r3
 8014990:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8014994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801499c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80149a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	8013      	strh	r3, [r2, #0]
 80149a8:	e1be      	b.n	8014d28 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80149aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	78db      	ldrb	r3, [r3, #3]
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	f040 81b4 	bne.w	8014d24 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80149bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	699a      	ldr	r2, [r3, #24]
 80149c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	691b      	ldr	r3, [r3, #16]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d917      	bls.n	8014a08 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80149d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	691b      	ldr	r3, [r3, #16]
 80149e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80149e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	699a      	ldr	r2, [r3, #24]
 80149f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80149f8:	1ad2      	subs	r2, r2, r3
 80149fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	619a      	str	r2, [r3, #24]
 8014a06:	e00e      	b.n	8014a26 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8014a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	699b      	ldr	r3, [r3, #24]
 8014a14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8014a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	2200      	movs	r2, #0
 8014a24:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	785b      	ldrb	r3, [r3, #1]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	f040 8085 	bne.w	8014b42 <USB_EPStartXfer+0x14fc>
 8014a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014a54:	b29b      	uxth	r3, r3
 8014a56:	461a      	mov	r2, r3
 8014a58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014a5c:	4413      	add	r3, r2
 8014a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	00da      	lsls	r2, r3, #3
 8014a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014a74:	4413      	add	r3, r2
 8014a76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014a82:	881b      	ldrh	r3, [r3, #0]
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014a8a:	b29a      	uxth	r2, r3
 8014a8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014a90:	801a      	strh	r2, [r3, #0]
 8014a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a96:	2b3e      	cmp	r3, #62	; 0x3e
 8014a98:	d923      	bls.n	8014ae2 <USB_EPStartXfer+0x149c>
 8014a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a9e:	095b      	lsrs	r3, r3, #5
 8014aa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014aa8:	f003 031f 	and.w	r3, r3, #31
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d104      	bne.n	8014aba <USB_EPStartXfer+0x1474>
 8014ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ab4:	3b01      	subs	r3, #1
 8014ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014aba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014abe:	881b      	ldrh	r3, [r3, #0]
 8014ac0:	b29a      	uxth	r2, r3
 8014ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	029b      	lsls	r3, r3, #10
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	4313      	orrs	r3, r2
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014ad8:	b29a      	uxth	r2, r3
 8014ada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014ade:	801a      	strh	r2, [r3, #0]
 8014ae0:	e060      	b.n	8014ba4 <USB_EPStartXfer+0x155e>
 8014ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d10c      	bne.n	8014b04 <USB_EPStartXfer+0x14be>
 8014aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014aee:	881b      	ldrh	r3, [r3, #0]
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014afa:	b29a      	uxth	r2, r3
 8014afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014b00:	801a      	strh	r2, [r3, #0]
 8014b02:	e04f      	b.n	8014ba4 <USB_EPStartXfer+0x155e>
 8014b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b08:	085b      	lsrs	r3, r3, #1
 8014b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b12:	f003 0301 	and.w	r3, r3, #1
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d004      	beq.n	8014b24 <USB_EPStartXfer+0x14de>
 8014b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b1e:	3301      	adds	r3, #1
 8014b20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014b24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014b28:	881b      	ldrh	r3, [r3, #0]
 8014b2a:	b29a      	uxth	r2, r3
 8014b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b30:	b29b      	uxth	r3, r3
 8014b32:	029b      	lsls	r3, r3, #10
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	4313      	orrs	r3, r2
 8014b38:	b29a      	uxth	r2, r3
 8014b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014b3e:	801a      	strh	r2, [r3, #0]
 8014b40:	e030      	b.n	8014ba4 <USB_EPStartXfer+0x155e>
 8014b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	785b      	ldrb	r3, [r3, #1]
 8014b4e:	2b01      	cmp	r3, #1
 8014b50:	d128      	bne.n	8014ba4 <USB_EPStartXfer+0x155e>
 8014b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014b6e:	b29b      	uxth	r3, r3
 8014b70:	461a      	mov	r2, r3
 8014b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014b76:	4413      	add	r3, r2
 8014b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	00da      	lsls	r2, r3, #3
 8014b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014b8e:	4413      	add	r3, r2
 8014b90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014ba2:	801a      	strh	r2, [r3, #0]
 8014ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	785b      	ldrb	r3, [r3, #1]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	f040 8085 	bne.w	8014cce <USB_EPStartXfer+0x1688>
 8014bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014be0:	b29b      	uxth	r3, r3
 8014be2:	461a      	mov	r2, r3
 8014be4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014be8:	4413      	add	r3, r2
 8014bea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	00da      	lsls	r2, r3, #3
 8014bfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014c00:	4413      	add	r3, r2
 8014c02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014c06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014c0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c0e:	881b      	ldrh	r3, [r3, #0]
 8014c10:	b29b      	uxth	r3, r3
 8014c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c1c:	801a      	strh	r2, [r3, #0]
 8014c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c22:	2b3e      	cmp	r3, #62	; 0x3e
 8014c24:	d923      	bls.n	8014c6e <USB_EPStartXfer+0x1628>
 8014c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c2a:	095b      	lsrs	r3, r3, #5
 8014c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c34:	f003 031f 	and.w	r3, r3, #31
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d104      	bne.n	8014c46 <USB_EPStartXfer+0x1600>
 8014c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014c40:	3b01      	subs	r3, #1
 8014c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c4a:	881b      	ldrh	r3, [r3, #0]
 8014c4c:	b29a      	uxth	r2, r3
 8014c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014c52:	b29b      	uxth	r3, r3
 8014c54:	029b      	lsls	r3, r3, #10
 8014c56:	b29b      	uxth	r3, r3
 8014c58:	4313      	orrs	r3, r2
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014c64:	b29a      	uxth	r2, r3
 8014c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c6a:	801a      	strh	r2, [r3, #0]
 8014c6c:	e05c      	b.n	8014d28 <USB_EPStartXfer+0x16e2>
 8014c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d10c      	bne.n	8014c90 <USB_EPStartXfer+0x164a>
 8014c76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c7a:	881b      	ldrh	r3, [r3, #0]
 8014c7c:	b29b      	uxth	r3, r3
 8014c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c8c:	801a      	strh	r2, [r3, #0]
 8014c8e:	e04b      	b.n	8014d28 <USB_EPStartXfer+0x16e2>
 8014c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c94:	085b      	lsrs	r3, r3, #1
 8014c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c9e:	f003 0301 	and.w	r3, r3, #1
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d004      	beq.n	8014cb0 <USB_EPStartXfer+0x166a>
 8014ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014caa:	3301      	adds	r3, #1
 8014cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014cb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014cb4:	881b      	ldrh	r3, [r3, #0]
 8014cb6:	b29a      	uxth	r2, r3
 8014cb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	029b      	lsls	r3, r3, #10
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	4313      	orrs	r3, r2
 8014cc4:	b29a      	uxth	r2, r3
 8014cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014cca:	801a      	strh	r2, [r3, #0]
 8014ccc:	e02c      	b.n	8014d28 <USB_EPStartXfer+0x16e2>
 8014cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	785b      	ldrb	r3, [r3, #1]
 8014cda:	2b01      	cmp	r3, #1
 8014cdc:	d124      	bne.n	8014d28 <USB_EPStartXfer+0x16e2>
 8014cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	461a      	mov	r2, r3
 8014cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014cf4:	4413      	add	r3, r2
 8014cf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	00da      	lsls	r2, r3, #3
 8014d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014d0c:	4413      	add	r3, r2
 8014d0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014d12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d1a:	b29a      	uxth	r2, r3
 8014d1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d20:	801a      	strh	r2, [r3, #0]
 8014d22:	e001      	b.n	8014d28 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8014d24:	2301      	movs	r3, #1
 8014d26:	e03a      	b.n	8014d9e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	009b      	lsls	r3, r3, #2
 8014d40:	4413      	add	r3, r2
 8014d42:	881b      	ldrh	r3, [r3, #0]
 8014d44:	b29b      	uxth	r3, r3
 8014d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d4e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014d52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014d56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014d5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014d5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014d62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8014d66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014d72:	681a      	ldr	r2, [r3, #0]
 8014d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	441a      	add	r2, r3
 8014d84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8014d9c:	2300      	movs	r3, #0
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}

08014da8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014da8:	b480      	push	{r7}
 8014daa:	b085      	sub	sp, #20
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	785b      	ldrb	r3, [r3, #1]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d020      	beq.n	8014dfc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8014dba:	687a      	ldr	r2, [r7, #4]
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	781b      	ldrb	r3, [r3, #0]
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	4413      	add	r3, r2
 8014dc4:	881b      	ldrh	r3, [r3, #0]
 8014dc6:	b29b      	uxth	r3, r3
 8014dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014dd0:	81bb      	strh	r3, [r7, #12]
 8014dd2:	89bb      	ldrh	r3, [r7, #12]
 8014dd4:	f083 0310 	eor.w	r3, r3, #16
 8014dd8:	81bb      	strh	r3, [r7, #12]
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	009b      	lsls	r3, r3, #2
 8014de2:	441a      	add	r2, r3
 8014de4:	89bb      	ldrh	r3, [r7, #12]
 8014de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014df6:	b29b      	uxth	r3, r3
 8014df8:	8013      	strh	r3, [r2, #0]
 8014dfa:	e01f      	b.n	8014e3c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8014dfc:	687a      	ldr	r2, [r7, #4]
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	4413      	add	r3, r2
 8014e06:	881b      	ldrh	r3, [r3, #0]
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014e12:	81fb      	strh	r3, [r7, #14]
 8014e14:	89fb      	ldrh	r3, [r7, #14]
 8014e16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014e1a:	81fb      	strh	r3, [r7, #14]
 8014e1c:	687a      	ldr	r2, [r7, #4]
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	009b      	lsls	r3, r3, #2
 8014e24:	441a      	add	r2, r3
 8014e26:	89fb      	ldrh	r3, [r7, #14]
 8014e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e38:	b29b      	uxth	r3, r3
 8014e3a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8014e3c:	2300      	movs	r3, #0
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3714      	adds	r7, #20
 8014e42:	46bd      	mov	sp, r7
 8014e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e48:	4770      	bx	lr

08014e4a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014e4a:	b480      	push	{r7}
 8014e4c:	b087      	sub	sp, #28
 8014e4e:	af00      	add	r7, sp, #0
 8014e50:	6078      	str	r0, [r7, #4]
 8014e52:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	7b1b      	ldrb	r3, [r3, #12]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	f040 809d 	bne.w	8014f98 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	785b      	ldrb	r3, [r3, #1]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d04c      	beq.n	8014f00 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	4413      	add	r3, r2
 8014e70:	881b      	ldrh	r3, [r3, #0]
 8014e72:	823b      	strh	r3, [r7, #16]
 8014e74:	8a3b      	ldrh	r3, [r7, #16]
 8014e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d01b      	beq.n	8014eb6 <USB_EPClearStall+0x6c>
 8014e7e:	687a      	ldr	r2, [r7, #4]
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	781b      	ldrb	r3, [r3, #0]
 8014e84:	009b      	lsls	r3, r3, #2
 8014e86:	4413      	add	r3, r2
 8014e88:	881b      	ldrh	r3, [r3, #0]
 8014e8a:	b29b      	uxth	r3, r3
 8014e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014e94:	81fb      	strh	r3, [r7, #14]
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	781b      	ldrb	r3, [r3, #0]
 8014e9c:	009b      	lsls	r3, r3, #2
 8014e9e:	441a      	add	r2, r3
 8014ea0:	89fb      	ldrh	r3, [r7, #14]
 8014ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014eae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014eb6:	683b      	ldr	r3, [r7, #0]
 8014eb8:	78db      	ldrb	r3, [r3, #3]
 8014eba:	2b01      	cmp	r3, #1
 8014ebc:	d06c      	beq.n	8014f98 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014ebe:	687a      	ldr	r2, [r7, #4]
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	781b      	ldrb	r3, [r3, #0]
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	4413      	add	r3, r2
 8014ec8:	881b      	ldrh	r3, [r3, #0]
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014ed4:	81bb      	strh	r3, [r7, #12]
 8014ed6:	89bb      	ldrh	r3, [r7, #12]
 8014ed8:	f083 0320 	eor.w	r3, r3, #32
 8014edc:	81bb      	strh	r3, [r7, #12]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	683b      	ldr	r3, [r7, #0]
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	009b      	lsls	r3, r3, #2
 8014ee6:	441a      	add	r2, r3
 8014ee8:	89bb      	ldrh	r3, [r7, #12]
 8014eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	8013      	strh	r3, [r2, #0]
 8014efe:	e04b      	b.n	8014f98 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	781b      	ldrb	r3, [r3, #0]
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	4413      	add	r3, r2
 8014f0a:	881b      	ldrh	r3, [r3, #0]
 8014f0c:	82fb      	strh	r3, [r7, #22]
 8014f0e:	8afb      	ldrh	r3, [r7, #22]
 8014f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d01b      	beq.n	8014f50 <USB_EPClearStall+0x106>
 8014f18:	687a      	ldr	r2, [r7, #4]
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	4413      	add	r3, r2
 8014f22:	881b      	ldrh	r3, [r3, #0]
 8014f24:	b29b      	uxth	r3, r3
 8014f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014f2e:	82bb      	strh	r3, [r7, #20]
 8014f30:	687a      	ldr	r2, [r7, #4]
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	009b      	lsls	r3, r3, #2
 8014f38:	441a      	add	r2, r3
 8014f3a:	8abb      	ldrh	r3, [r7, #20]
 8014f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f4c:	b29b      	uxth	r3, r3
 8014f4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014f50:	687a      	ldr	r2, [r7, #4]
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	781b      	ldrb	r3, [r3, #0]
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	4413      	add	r3, r2
 8014f5a:	881b      	ldrh	r3, [r3, #0]
 8014f5c:	b29b      	uxth	r3, r3
 8014f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014f66:	827b      	strh	r3, [r7, #18]
 8014f68:	8a7b      	ldrh	r3, [r7, #18]
 8014f6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014f6e:	827b      	strh	r3, [r7, #18]
 8014f70:	8a7b      	ldrh	r3, [r7, #18]
 8014f72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8014f76:	827b      	strh	r3, [r7, #18]
 8014f78:	687a      	ldr	r2, [r7, #4]
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	009b      	lsls	r3, r3, #2
 8014f80:	441a      	add	r2, r3
 8014f82:	8a7b      	ldrh	r3, [r7, #18]
 8014f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f94:	b29b      	uxth	r3, r3
 8014f96:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8014f98:	2300      	movs	r3, #0
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	371c      	adds	r7, #28
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa4:	4770      	bx	lr

08014fa6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8014fa6:	b480      	push	{r7}
 8014fa8:	b083      	sub	sp, #12
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	6078      	str	r0, [r7, #4]
 8014fae:	460b      	mov	r3, r1
 8014fb0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8014fb2:	78fb      	ldrb	r3, [r7, #3]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d103      	bne.n	8014fc0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2280      	movs	r2, #128	; 0x80
 8014fbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8014fc0:	2300      	movs	r3, #0
}
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	370c      	adds	r7, #12
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fcc:	4770      	bx	lr

08014fce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8014fce:	b480      	push	{r7}
 8014fd0:	b083      	sub	sp, #12
 8014fd2:	af00      	add	r7, sp, #0
 8014fd4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8014fdc:	b29b      	uxth	r3, r3
 8014fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8014fee:	2300      	movs	r3, #0
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	b085      	sub	sp, #20
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801500a:	b29b      	uxth	r3, r3
 801500c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801500e:	68fb      	ldr	r3, [r7, #12]
}
 8015010:	4618      	mov	r0, r3
 8015012:	3714      	adds	r7, #20
 8015014:	46bd      	mov	sp, r7
 8015016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501a:	4770      	bx	lr

0801501c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801501c:	b480      	push	{r7}
 801501e:	b08b      	sub	sp, #44	; 0x2c
 8015020:	af00      	add	r7, sp, #0
 8015022:	60f8      	str	r0, [r7, #12]
 8015024:	60b9      	str	r1, [r7, #8]
 8015026:	4611      	mov	r1, r2
 8015028:	461a      	mov	r2, r3
 801502a:	460b      	mov	r3, r1
 801502c:	80fb      	strh	r3, [r7, #6]
 801502e:	4613      	mov	r3, r2
 8015030:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8015032:	88bb      	ldrh	r3, [r7, #4]
 8015034:	3301      	adds	r3, #1
 8015036:	085b      	lsrs	r3, r3, #1
 8015038:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801503e:	68bb      	ldr	r3, [r7, #8]
 8015040:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8015042:	88fa      	ldrh	r2, [r7, #6]
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	4413      	add	r3, r2
 8015048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801504c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801504e:	69bb      	ldr	r3, [r7, #24]
 8015050:	627b      	str	r3, [r7, #36]	; 0x24
 8015052:	e01b      	b.n	801508c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8015054:	69fb      	ldr	r3, [r7, #28]
 8015056:	781b      	ldrb	r3, [r3, #0]
 8015058:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801505a:	69fb      	ldr	r3, [r7, #28]
 801505c:	3301      	adds	r3, #1
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	021b      	lsls	r3, r3, #8
 8015062:	b21a      	sxth	r2, r3
 8015064:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015068:	4313      	orrs	r3, r2
 801506a:	b21b      	sxth	r3, r3
 801506c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801506e:	6a3b      	ldr	r3, [r7, #32]
 8015070:	8a7a      	ldrh	r2, [r7, #18]
 8015072:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8015074:	6a3b      	ldr	r3, [r7, #32]
 8015076:	3302      	adds	r3, #2
 8015078:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801507a:	69fb      	ldr	r3, [r7, #28]
 801507c:	3301      	adds	r3, #1
 801507e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8015080:	69fb      	ldr	r3, [r7, #28]
 8015082:	3301      	adds	r3, #1
 8015084:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8015086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015088:	3b01      	subs	r3, #1
 801508a:	627b      	str	r3, [r7, #36]	; 0x24
 801508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508e:	2b00      	cmp	r3, #0
 8015090:	d1e0      	bne.n	8015054 <USB_WritePMA+0x38>
  }
}
 8015092:	bf00      	nop
 8015094:	bf00      	nop
 8015096:	372c      	adds	r7, #44	; 0x2c
 8015098:	46bd      	mov	sp, r7
 801509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509e:	4770      	bx	lr

080150a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80150a0:	b480      	push	{r7}
 80150a2:	b08b      	sub	sp, #44	; 0x2c
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	60f8      	str	r0, [r7, #12]
 80150a8:	60b9      	str	r1, [r7, #8]
 80150aa:	4611      	mov	r1, r2
 80150ac:	461a      	mov	r2, r3
 80150ae:	460b      	mov	r3, r1
 80150b0:	80fb      	strh	r3, [r7, #6]
 80150b2:	4613      	mov	r3, r2
 80150b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80150b6:	88bb      	ldrh	r3, [r7, #4]
 80150b8:	085b      	lsrs	r3, r3, #1
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80150c6:	88fa      	ldrh	r2, [r7, #6]
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	4413      	add	r3, r2
 80150cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80150d2:	69bb      	ldr	r3, [r7, #24]
 80150d4:	627b      	str	r3, [r7, #36]	; 0x24
 80150d6:	e018      	b.n	801510a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80150d8:	6a3b      	ldr	r3, [r7, #32]
 80150da:	881b      	ldrh	r3, [r3, #0]
 80150dc:	b29b      	uxth	r3, r3
 80150de:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80150e0:	6a3b      	ldr	r3, [r7, #32]
 80150e2:	3302      	adds	r3, #2
 80150e4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	b2da      	uxtb	r2, r3
 80150ea:	69fb      	ldr	r3, [r7, #28]
 80150ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80150ee:	69fb      	ldr	r3, [r7, #28]
 80150f0:	3301      	adds	r3, #1
 80150f2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	0a1b      	lsrs	r3, r3, #8
 80150f8:	b2da      	uxtb	r2, r3
 80150fa:	69fb      	ldr	r3, [r7, #28]
 80150fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80150fe:	69fb      	ldr	r3, [r7, #28]
 8015100:	3301      	adds	r3, #1
 8015102:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8015104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015106:	3b01      	subs	r3, #1
 8015108:	627b      	str	r3, [r7, #36]	; 0x24
 801510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510c:	2b00      	cmp	r3, #0
 801510e:	d1e3      	bne.n	80150d8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8015110:	88bb      	ldrh	r3, [r7, #4]
 8015112:	f003 0301 	and.w	r3, r3, #1
 8015116:	b29b      	uxth	r3, r3
 8015118:	2b00      	cmp	r3, #0
 801511a:	d007      	beq.n	801512c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 801511c:	6a3b      	ldr	r3, [r7, #32]
 801511e:	881b      	ldrh	r3, [r3, #0]
 8015120:	b29b      	uxth	r3, r3
 8015122:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	b2da      	uxtb	r2, r3
 8015128:	69fb      	ldr	r3, [r7, #28]
 801512a:	701a      	strb	r2, [r3, #0]
  }
}
 801512c:	bf00      	nop
 801512e:	372c      	adds	r7, #44	; 0x2c
 8015130:	46bd      	mov	sp, r7
 8015132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015136:	4770      	bx	lr

08015138 <__NVIC_EnableIRQ>:
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
 801513e:	4603      	mov	r3, r0
 8015140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015146:	2b00      	cmp	r3, #0
 8015148:	db0b      	blt.n	8015162 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801514a:	79fb      	ldrb	r3, [r7, #7]
 801514c:	f003 021f 	and.w	r2, r3, #31
 8015150:	4907      	ldr	r1, [pc, #28]	; (8015170 <__NVIC_EnableIRQ+0x38>)
 8015152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015156:	095b      	lsrs	r3, r3, #5
 8015158:	2001      	movs	r0, #1
 801515a:	fa00 f202 	lsl.w	r2, r0, r2
 801515e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015162:	bf00      	nop
 8015164:	370c      	adds	r7, #12
 8015166:	46bd      	mov	sp, r7
 8015168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516c:	4770      	bx	lr
 801516e:	bf00      	nop
 8015170:	e000e100 	.word	0xe000e100

08015174 <__NVIC_SetPriority>:
{
 8015174:	b480      	push	{r7}
 8015176:	b083      	sub	sp, #12
 8015178:	af00      	add	r7, sp, #0
 801517a:	4603      	mov	r3, r0
 801517c:	6039      	str	r1, [r7, #0]
 801517e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015184:	2b00      	cmp	r3, #0
 8015186:	db0a      	blt.n	801519e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	b2da      	uxtb	r2, r3
 801518c:	490c      	ldr	r1, [pc, #48]	; (80151c0 <__NVIC_SetPriority+0x4c>)
 801518e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015192:	0112      	lsls	r2, r2, #4
 8015194:	b2d2      	uxtb	r2, r2
 8015196:	440b      	add	r3, r1
 8015198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801519c:	e00a      	b.n	80151b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	b2da      	uxtb	r2, r3
 80151a2:	4908      	ldr	r1, [pc, #32]	; (80151c4 <__NVIC_SetPriority+0x50>)
 80151a4:	79fb      	ldrb	r3, [r7, #7]
 80151a6:	f003 030f 	and.w	r3, r3, #15
 80151aa:	3b04      	subs	r3, #4
 80151ac:	0112      	lsls	r2, r2, #4
 80151ae:	b2d2      	uxtb	r2, r2
 80151b0:	440b      	add	r3, r1
 80151b2:	761a      	strb	r2, [r3, #24]
}
 80151b4:	bf00      	nop
 80151b6:	370c      	adds	r7, #12
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr
 80151c0:	e000e100 	.word	0xe000e100
 80151c4:	e000ed00 	.word	0xe000ed00

080151c8 <LL_AHB2_GRP1_EnableClock>:
{
 80151c8:	b480      	push	{r7}
 80151ca:	b085      	sub	sp, #20
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80151d0:	4b08      	ldr	r3, [pc, #32]	; (80151f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80151d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80151d4:	4907      	ldr	r1, [pc, #28]	; (80151f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	4313      	orrs	r3, r2
 80151da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80151dc:	4b05      	ldr	r3, [pc, #20]	; (80151f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80151de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	4013      	ands	r3, r2
 80151e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80151e6:	68fb      	ldr	r3, [r7, #12]
}
 80151e8:	bf00      	nop
 80151ea:	3714      	adds	r7, #20
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr
 80151f4:	40021000 	.word	0x40021000

080151f8 <LL_GPIO_SetPinMode>:
{
 80151f8:	b480      	push	{r7}
 80151fa:	b08b      	sub	sp, #44	; 0x2c
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	60f8      	str	r0, [r7, #12]
 8015200:	60b9      	str	r1, [r7, #8]
 8015202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	fa93 f3a3 	rbit	r3, r3
 8015212:	613b      	str	r3, [r7, #16]
  return result;
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015218:	69bb      	ldr	r3, [r7, #24]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d101      	bne.n	8015222 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801521e:	2320      	movs	r3, #32
 8015220:	e003      	b.n	801522a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8015222:	69bb      	ldr	r3, [r7, #24]
 8015224:	fab3 f383 	clz	r3, r3
 8015228:	b2db      	uxtb	r3, r3
 801522a:	005b      	lsls	r3, r3, #1
 801522c:	2103      	movs	r1, #3
 801522e:	fa01 f303 	lsl.w	r3, r1, r3
 8015232:	43db      	mvns	r3, r3
 8015234:	401a      	ands	r2, r3
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801523a:	6a3b      	ldr	r3, [r7, #32]
 801523c:	fa93 f3a3 	rbit	r3, r3
 8015240:	61fb      	str	r3, [r7, #28]
  return result;
 8015242:	69fb      	ldr	r3, [r7, #28]
 8015244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8015246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015248:	2b00      	cmp	r3, #0
 801524a:	d101      	bne.n	8015250 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801524c:	2320      	movs	r3, #32
 801524e:	e003      	b.n	8015258 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8015250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015252:	fab3 f383 	clz	r3, r3
 8015256:	b2db      	uxtb	r3, r3
 8015258:	005b      	lsls	r3, r3, #1
 801525a:	6879      	ldr	r1, [r7, #4]
 801525c:	fa01 f303 	lsl.w	r3, r1, r3
 8015260:	431a      	orrs	r2, r3
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	601a      	str	r2, [r3, #0]
}
 8015266:	bf00      	nop
 8015268:	372c      	adds	r7, #44	; 0x2c
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr

08015272 <LL_GPIO_SetPinPull>:
{
 8015272:	b480      	push	{r7}
 8015274:	b08b      	sub	sp, #44	; 0x2c
 8015276:	af00      	add	r7, sp, #0
 8015278:	60f8      	str	r0, [r7, #12]
 801527a:	60b9      	str	r1, [r7, #8]
 801527c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	68da      	ldr	r2, [r3, #12]
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	fa93 f3a3 	rbit	r3, r3
 801528c:	613b      	str	r3, [r7, #16]
  return result;
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015292:	69bb      	ldr	r3, [r7, #24]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d101      	bne.n	801529c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8015298:	2320      	movs	r3, #32
 801529a:	e003      	b.n	80152a4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801529c:	69bb      	ldr	r3, [r7, #24]
 801529e:	fab3 f383 	clz	r3, r3
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	005b      	lsls	r3, r3, #1
 80152a6:	2103      	movs	r1, #3
 80152a8:	fa01 f303 	lsl.w	r3, r1, r3
 80152ac:	43db      	mvns	r3, r3
 80152ae:	401a      	ands	r2, r3
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80152b4:	6a3b      	ldr	r3, [r7, #32]
 80152b6:	fa93 f3a3 	rbit	r3, r3
 80152ba:	61fb      	str	r3, [r7, #28]
  return result;
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80152c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d101      	bne.n	80152ca <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80152c6:	2320      	movs	r3, #32
 80152c8:	e003      	b.n	80152d2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80152ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152cc:	fab3 f383 	clz	r3, r3
 80152d0:	b2db      	uxtb	r3, r3
 80152d2:	005b      	lsls	r3, r3, #1
 80152d4:	6879      	ldr	r1, [r7, #4]
 80152d6:	fa01 f303 	lsl.w	r3, r1, r3
 80152da:	431a      	orrs	r2, r3
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	60da      	str	r2, [r3, #12]
}
 80152e0:	bf00      	nop
 80152e2:	372c      	adds	r7, #44	; 0x2c
 80152e4:	46bd      	mov	sp, r7
 80152e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ea:	4770      	bx	lr

080152ec <LL_UCPD_Enable>:
{
 80152ec:	b480      	push	{r7}
 80152ee:	b083      	sub	sp, #12
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	601a      	str	r2, [r3, #0]
}
 8015300:	bf00      	nop
 8015302:	370c      	adds	r7, #12
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr

0801530c <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 801530c:	b480      	push	{r7}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801531e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015322:	683a      	ldr	r2, [r7, #0]
 8015324:	431a      	orrs	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	601a      	str	r2, [r3, #0]
}
 801532a:	bf00      	nop
 801532c:	370c      	adds	r7, #12
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr

08015336 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 8015336:	b480      	push	{r7}
 8015338:	b083      	sub	sp, #12
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
 801533e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	68db      	ldr	r3, [r3, #12]
 8015344:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	431a      	orrs	r2, r3
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	60da      	str	r2, [r3, #12]
}
 8015350:	bf00      	nop
 8015352:	370c      	adds	r7, #12
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr

0801535c <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 801535c:	b480      	push	{r7}
 801535e:	b083      	sub	sp, #12
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	691b      	ldr	r3, [r3, #16]
 8015368:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	611a      	str	r2, [r3, #16]
}
 8015370:	bf00      	nop
 8015372:	370c      	adds	r7, #12
 8015374:	46bd      	mov	sp, r7
 8015376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537a:	4770      	bx	lr

0801537c <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 801537c:	b480      	push	{r7}
 801537e:	b083      	sub	sp, #12
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	691b      	ldr	r3, [r3, #16]
 8015388:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	611a      	str	r2, [r3, #16]
}
 8015390:	bf00      	nop
 8015392:	370c      	adds	r7, #12
 8015394:	46bd      	mov	sp, r7
 8015396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539a:	4770      	bx	lr

0801539c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 801539c:	b480      	push	{r7}
 801539e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80153a0:	4b05      	ldr	r3, [pc, #20]	; (80153b8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80153a2:	689b      	ldr	r3, [r3, #8]
 80153a4:	4a04      	ldr	r2, [pc, #16]	; (80153b8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80153a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80153aa:	6093      	str	r3, [r2, #8]
}
 80153ac:	bf00      	nop
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop
 80153b8:	40007000 	.word	0x40007000

080153bc <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 80153bc:	b590      	push	{r4, r7, lr}
 80153be:	b08b      	sub	sp, #44	; 0x2c
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	60b9      	str	r1, [r7, #8]
 80153c4:	607a      	str	r2, [r7, #4]
 80153c6:	603b      	str	r3, [r7, #0]
 80153c8:	4603      	mov	r3, r0
 80153ca:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80153cc:	7bfa      	ldrb	r2, [r7, #15]
 80153ce:	4613      	mov	r3, r2
 80153d0:	005b      	lsls	r3, r3, #1
 80153d2:	4413      	add	r3, r2
 80153d4:	009b      	lsls	r3, r3, #2
 80153d6:	4a66      	ldr	r2, [pc, #408]	; (8015570 <CAD_Init+0x1b4>)
 80153d8:	4413      	add	r3, r2
 80153da:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 80153dc:	7bfa      	ldrb	r2, [r7, #15]
 80153de:	4965      	ldr	r1, [pc, #404]	; (8015574 <CAD_Init+0x1b8>)
 80153e0:	4613      	mov	r3, r2
 80153e2:	011b      	lsls	r3, r3, #4
 80153e4:	1a9b      	subs	r3, r3, r2
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	440b      	add	r3, r1
 80153ea:	3310      	adds	r3, #16
 80153ec:	687a      	ldr	r2, [r7, #4]
 80153ee:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 80153f0:	7bfa      	ldrb	r2, [r7, #15]
 80153f2:	4960      	ldr	r1, [pc, #384]	; (8015574 <CAD_Init+0x1b8>)
 80153f4:	4613      	mov	r3, r2
 80153f6:	011b      	lsls	r3, r3, #4
 80153f8:	1a9b      	subs	r3, r3, r2
 80153fa:	009b      	lsls	r3, r3, #2
 80153fc:	440b      	add	r3, r1
 80153fe:	330c      	adds	r3, #12
 8015400:	68ba      	ldr	r2, [r7, #8]
 8015402:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8015404:	7bfa      	ldrb	r2, [r7, #15]
 8015406:	495b      	ldr	r1, [pc, #364]	; (8015574 <CAD_Init+0x1b8>)
 8015408:	4613      	mov	r3, r2
 801540a:	011b      	lsls	r3, r3, #4
 801540c:	1a9b      	subs	r3, r3, r2
 801540e:	009b      	lsls	r3, r3, #2
 8015410:	440b      	add	r3, r1
 8015412:	330c      	adds	r3, #12
 8015414:	6819      	ldr	r1, [r3, #0]
 8015416:	7bfa      	ldrb	r2, [r7, #15]
 8015418:	4856      	ldr	r0, [pc, #344]	; (8015574 <CAD_Init+0x1b8>)
 801541a:	4613      	mov	r3, r2
 801541c:	011b      	lsls	r3, r3, #4
 801541e:	1a9b      	subs	r3, r3, r2
 8015420:	009b      	lsls	r3, r3, #2
 8015422:	4403      	add	r3, r0
 8015424:	3310      	adds	r3, #16
 8015426:	681a      	ldr	r2, [r3, #0]
 8015428:	794b      	ldrb	r3, [r1, #5]
 801542a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801542e:	b2d9      	uxtb	r1, r3
 8015430:	7893      	ldrb	r3, [r2, #2]
 8015432:	f361 0301 	bfi	r3, r1, #0, #2
 8015436:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8015438:	7bfa      	ldrb	r2, [r7, #15]
 801543a:	494e      	ldr	r1, [pc, #312]	; (8015574 <CAD_Init+0x1b8>)
 801543c:	4613      	mov	r3, r2
 801543e:	011b      	lsls	r3, r3, #4
 8015440:	1a9b      	subs	r3, r3, r2
 8015442:	009b      	lsls	r3, r3, #2
 8015444:	440b      	add	r3, r1
 8015446:	3310      	adds	r3, #16
 8015448:	681a      	ldr	r2, [r3, #0]
 801544a:	7893      	ldrb	r3, [r2, #2]
 801544c:	f36f 0383 	bfc	r3, #2, #2
 8015450:	7093      	strb	r3, [r2, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8015452:	220c      	movs	r2, #12
 8015454:	2100      	movs	r1, #0
 8015456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015458:	f009 fd3a 	bl	801eed0 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 801545c:	7bfa      	ldrb	r2, [r7, #15]
 801545e:	4945      	ldr	r1, [pc, #276]	; (8015574 <CAD_Init+0x1b8>)
 8015460:	4613      	mov	r3, r2
 8015462:	011b      	lsls	r3, r3, #4
 8015464:	1a9b      	subs	r3, r3, r2
 8015466:	009b      	lsls	r3, r3, #2
 8015468:	440b      	add	r3, r1
 801546a:	332c      	adds	r3, #44	; 0x2c
 801546c:	683a      	ldr	r2, [r7, #0]
 801546e:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 8015470:	7bfc      	ldrb	r4, [r7, #15]
 8015472:	7bfb      	ldrb	r3, [r7, #15]
 8015474:	4618      	mov	r0, r3
 8015476:	f000 fbb1 	bl	8015bdc <USBPD_HW_GetUSPDInstance>
 801547a:	4602      	mov	r2, r0
 801547c:	493d      	ldr	r1, [pc, #244]	; (8015574 <CAD_Init+0x1b8>)
 801547e:	4623      	mov	r3, r4
 8015480:	011b      	lsls	r3, r3, #4
 8015482:	1b1b      	subs	r3, r3, r4
 8015484:	009b      	lsls	r3, r3, #2
 8015486:	440b      	add	r3, r1
 8015488:	601a      	str	r2, [r3, #0]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 801548a:	f107 0314 	add.w	r3, r7, #20
 801548e:	4618      	mov	r0, r3
 8015490:	f7fd fac0 	bl	8012a14 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8015494:	7bfa      	ldrb	r2, [r7, #15]
 8015496:	4937      	ldr	r1, [pc, #220]	; (8015574 <CAD_Init+0x1b8>)
 8015498:	4613      	mov	r3, r2
 801549a:	011b      	lsls	r3, r3, #4
 801549c:	1a9b      	subs	r3, r3, r2
 801549e:	009b      	lsls	r3, r3, #2
 80154a0:	440b      	add	r3, r1
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	f107 0214 	add.w	r2, r7, #20
 80154a8:	4611      	mov	r1, r2
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7fd fa84 	bl	80129b8 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 80154b0:	7bfa      	ldrb	r2, [r7, #15]
 80154b2:	4930      	ldr	r1, [pc, #192]	; (8015574 <CAD_Init+0x1b8>)
 80154b4:	4613      	mov	r3, r2
 80154b6:	011b      	lsls	r3, r3, #4
 80154b8:	1a9b      	subs	r3, r3, r2
 80154ba:	009b      	lsls	r3, r3, #2
 80154bc:	440b      	add	r3, r1
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7ff ff21 	bl	801530c <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80154ca:	7bfa      	ldrb	r2, [r7, #15]
 80154cc:	4929      	ldr	r1, [pc, #164]	; (8015574 <CAD_Init+0x1b8>)
 80154ce:	4613      	mov	r3, r2
 80154d0:	011b      	lsls	r3, r3, #4
 80154d2:	1a9b      	subs	r3, r3, r2
 80154d4:	009b      	lsls	r3, r3, #2
 80154d6:	440b      	add	r3, r1
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80154de:	4618      	mov	r0, r3
 80154e0:	f7ff ff29 	bl	8015336 <LL_UCPD_SetccEnable>

#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 80154e4:	f7ff ff5a 	bl	801539c <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 80154e8:	2002      	movs	r0, #2
 80154ea:	f7ff fe6d 	bl	80151c8 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 80154ee:	2203      	movs	r2, #3
 80154f0:	2140      	movs	r1, #64	; 0x40
 80154f2:	4821      	ldr	r0, [pc, #132]	; (8015578 <CAD_Init+0x1bc>)
 80154f4:	f7ff fe80 	bl	80151f8 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 80154f8:	2203      	movs	r2, #3
 80154fa:	2110      	movs	r1, #16
 80154fc:	481e      	ldr	r0, [pc, #120]	; (8015578 <CAD_Init+0x1bc>)
 80154fe:	f7ff fe7b 	bl	80151f8 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8015502:	2200      	movs	r2, #0
 8015504:	2140      	movs	r1, #64	; 0x40
 8015506:	481c      	ldr	r0, [pc, #112]	; (8015578 <CAD_Init+0x1bc>)
 8015508:	f7ff feb3 	bl	8015272 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 801550c:	2200      	movs	r2, #0
 801550e:	2110      	movs	r1, #16
 8015510:	4819      	ldr	r0, [pc, #100]	; (8015578 <CAD_Init+0x1bc>)
 8015512:	f7ff feae 	bl	8015272 <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8015516:	7bfb      	ldrb	r3, [r7, #15]
 8015518:	4618      	mov	r0, r3
 801551a:	f008 fe8d 	bl	801e238 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 801551e:	7bfa      	ldrb	r2, [r7, #15]
 8015520:	4914      	ldr	r1, [pc, #80]	; (8015574 <CAD_Init+0x1b8>)
 8015522:	4613      	mov	r3, r2
 8015524:	011b      	lsls	r3, r3, #4
 8015526:	1a9b      	subs	r3, r3, r2
 8015528:	009b      	lsls	r3, r3, #2
 801552a:	440b      	add	r3, r1
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	4618      	mov	r0, r3
 8015530:	f7ff fedc 	bl	80152ec <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8015534:	7bfb      	ldrb	r3, [r7, #15]
 8015536:	4618      	mov	r0, r3
 8015538:	f001 fc64 	bl	8016e04 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 801553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801553e:	4a0f      	ldr	r2, [pc, #60]	; (801557c <CAD_Init+0x1c0>)
 8015540:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8015542:	7bfa      	ldrb	r2, [r7, #15]
 8015544:	490b      	ldr	r1, [pc, #44]	; (8015574 <CAD_Init+0x1b8>)
 8015546:	4613      	mov	r3, r2
 8015548:	011b      	lsls	r3, r3, #4
 801554a:	1a9b      	subs	r3, r3, r2
 801554c:	009b      	lsls	r3, r3, #2
 801554e:	440b      	add	r3, r1
 8015550:	330c      	adds	r3, #12
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	795b      	ldrb	r3, [r3, #5]
 8015556:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801555a:	b2d9      	uxtb	r1, r3
 801555c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801555e:	7853      	ldrb	r3, [r2, #1]
 8015560:	f361 13c7 	bfi	r3, r1, #7, #1
 8015564:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 8015566:	bf00      	nop
 8015568:	372c      	adds	r7, #44	; 0x2c
 801556a:	46bd      	mov	sp, r7
 801556c:	bd90      	pop	{r4, r7, pc}
 801556e:	bf00      	nop
 8015570:	20001638 	.word	0x20001638
 8015574:	20001650 	.word	0x20001650
 8015578:	48000400 	.word	0x48000400
 801557c:	08015659 	.word	0x08015659

08015580 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	4603      	mov	r3, r0
 8015588:	71fb      	strb	r3, [r7, #7]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 801558a:	79fb      	ldrb	r3, [r7, #7]
 801558c:	4618      	mov	r0, r3
 801558e:	f001 fccb 	bl	8016f28 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 8015592:	79fa      	ldrb	r2, [r7, #7]
 8015594:	490b      	ldr	r1, [pc, #44]	; (80155c4 <CAD_Enter_ErrorRecovery+0x44>)
 8015596:	4613      	mov	r3, r2
 8015598:	005b      	lsls	r3, r3, #1
 801559a:	4413      	add	r3, r2
 801559c:	009b      	lsls	r3, r3, #2
 801559e:	18ca      	adds	r2, r1, r3
 80155a0:	7813      	ldrb	r3, [r2, #0]
 80155a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155a6:	7013      	strb	r3, [r2, #0]
  Ports[PortNum].USBPD_CAD_WakeUp();
 80155a8:	79fa      	ldrb	r2, [r7, #7]
 80155aa:	4907      	ldr	r1, [pc, #28]	; (80155c8 <CAD_Enter_ErrorRecovery+0x48>)
 80155ac:	4613      	mov	r3, r2
 80155ae:	011b      	lsls	r3, r3, #4
 80155b0:	1a9b      	subs	r3, r3, r2
 80155b2:	009b      	lsls	r3, r3, #2
 80155b4:	440b      	add	r3, r1
 80155b6:	332c      	adds	r3, #44	; 0x2c
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	4798      	blx	r3
}
 80155bc:	bf00      	nop
 80155be:	3708      	adds	r7, #8
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}
 80155c4:	20001638 	.word	0x20001638
 80155c8:	20001650 	.word	0x20001650

080155cc <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b082      	sub	sp, #8
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	4603      	mov	r3, r0
 80155d4:	6039      	str	r1, [r7, #0]
 80155d6:	71fb      	strb	r3, [r7, #7]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 80155d8:	79fa      	ldrb	r2, [r7, #7]
 80155da:	4915      	ldr	r1, [pc, #84]	; (8015630 <CAD_SRC_Set_ResistorRp+0x64>)
 80155dc:	4613      	mov	r3, r2
 80155de:	011b      	lsls	r3, r3, #4
 80155e0:	1a9b      	subs	r3, r3, r2
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	440b      	add	r3, r1
 80155e6:	3310      	adds	r3, #16
 80155e8:	681a      	ldr	r2, [r3, #0]
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	f003 0303 	and.w	r3, r3, #3
 80155f0:	b2d9      	uxtb	r1, r3
 80155f2:	7893      	ldrb	r3, [r2, #2]
 80155f4:	f361 0301 	bfi	r3, r1, #0, #2
 80155f8:	7093      	strb	r3, [r2, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 80155fa:	79fa      	ldrb	r2, [r7, #7]
 80155fc:	490d      	ldr	r1, [pc, #52]	; (8015634 <CAD_SRC_Set_ResistorRp+0x68>)
 80155fe:	4613      	mov	r3, r2
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	4413      	add	r3, r2
 8015604:	009b      	lsls	r3, r3, #2
 8015606:	18ca      	adds	r2, r1, r3
 8015608:	7853      	ldrb	r3, [r2, #1]
 801560a:	f043 0301 	orr.w	r3, r3, #1
 801560e:	7053      	strb	r3, [r2, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8015610:	79fa      	ldrb	r2, [r7, #7]
 8015612:	4907      	ldr	r1, [pc, #28]	; (8015630 <CAD_SRC_Set_ResistorRp+0x64>)
 8015614:	4613      	mov	r3, r2
 8015616:	011b      	lsls	r3, r3, #4
 8015618:	1a9b      	subs	r3, r3, r2
 801561a:	009b      	lsls	r3, r3, #2
 801561c:	440b      	add	r3, r1
 801561e:	332c      	adds	r3, #44	; 0x2c
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	4798      	blx	r3
  return 0;
 8015624:	2300      	movs	r3, #0
}
 8015626:	4618      	mov	r0, r3
 8015628:	3708      	adds	r7, #8
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	20001650 	.word	0x20001650
 8015634:	20001638 	.word	0x20001638

08015638 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b082      	sub	sp, #8
 801563c:	af00      	add	r7, sp, #0
 801563e:	4603      	mov	r3, r0
 8015640:	6039      	str	r1, [r7, #0]
 8015642:	71fb      	strb	r3, [r7, #7]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 8015644:	79fb      	ldrb	r3, [r7, #7]
 8015646:	6839      	ldr	r1, [r7, #0]
 8015648:	4618      	mov	r0, r3
 801564a:	f7ff ffbf 	bl	80155cc <CAD_SRC_Set_ResistorRp>
 801564e:	4603      	mov	r3, r0
}
 8015650:	4618      	mov	r0, r3
 8015652:	3708      	adds	r7, #8
 8015654:	46bd      	mov	sp, r7
 8015656:	bd80      	pop	{r7, pc}

08015658 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b086      	sub	sp, #24
 801565c:	af00      	add	r7, sp, #0
 801565e:	4603      	mov	r3, r0
 8015660:	60b9      	str	r1, [r7, #8]
 8015662:	607a      	str	r2, [r7, #4]
 8015664:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015666:	7bfa      	ldrb	r2, [r7, #15]
 8015668:	4613      	mov	r3, r2
 801566a:	005b      	lsls	r3, r3, #1
 801566c:	4413      	add	r3, r2
 801566e:	009b      	lsls	r3, r3, #2
 8015670:	4a17      	ldr	r2, [pc, #92]	; (80156d0 <CAD_StateMachine_SNK+0x78>)
 8015672:	4413      	add	r3, r2
 8015674:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015676:	2302      	movs	r3, #2
 8015678:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 801567a:	693b      	ldr	r3, [r7, #16]
 801567c:	785b      	ldrb	r3, [r3, #1]
 801567e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8015682:	b2db      	uxtb	r3, r3
 8015684:	2b03      	cmp	r3, #3
 8015686:	d014      	beq.n	80156b2 <CAD_StateMachine_SNK+0x5a>
 8015688:	2b03      	cmp	r3, #3
 801568a:	dc1a      	bgt.n	80156c2 <CAD_StateMachine_SNK+0x6a>
 801568c:	2b01      	cmp	r3, #1
 801568e:	d002      	beq.n	8015696 <CAD_StateMachine_SNK+0x3e>
 8015690:	2b02      	cmp	r3, #2
 8015692:	d006      	beq.n	80156a2 <CAD_StateMachine_SNK+0x4a>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 8015694:	e015      	b.n	80156c2 <CAD_StateMachine_SNK+0x6a>
      _timing = ManageStateDetached_SNK(PortNum);
 8015696:	7bfb      	ldrb	r3, [r7, #15]
 8015698:	4618      	mov	r0, r3
 801569a:	f000 f955 	bl	8015948 <ManageStateDetached_SNK>
 801569e:	6178      	str	r0, [r7, #20]
      break;
 80156a0:	e010      	b.n	80156c4 <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 80156a2:	7bfb      	ldrb	r3, [r7, #15]
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	68b9      	ldr	r1, [r7, #8]
 80156a8:	4618      	mov	r0, r3
 80156aa:	f000 f997 	bl	80159dc <ManageStateAttachedWait_SNK>
 80156ae:	6178      	str	r0, [r7, #20]
      break;
 80156b0:	e008      	b.n	80156c4 <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 80156b2:	7bfb      	ldrb	r3, [r7, #15]
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	68b9      	ldr	r1, [r7, #8]
 80156b8:	4618      	mov	r0, r3
 80156ba:	f000 fa11 	bl	8015ae0 <ManageStateAttached_SNK>
 80156be:	6178      	str	r0, [r7, #20]
      break;
 80156c0:	e000      	b.n	80156c4 <CAD_StateMachine_SNK+0x6c>
      break;
 80156c2:	bf00      	nop
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 80156c4:	697b      	ldr	r3, [r7, #20]
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3718      	adds	r7, #24
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	20001638 	.word	0x20001638

080156d4 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b086      	sub	sp, #24
 80156d8:	af00      	add	r7, sp, #0
 80156da:	4603      	mov	r3, r0
 80156dc:	60b9      	str	r1, [r7, #8]
 80156de:	607a      	str	r2, [r7, #4]
 80156e0:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80156e2:	7bfa      	ldrb	r2, [r7, #15]
 80156e4:	4613      	mov	r3, r2
 80156e6:	005b      	lsls	r3, r3, #1
 80156e8:	4413      	add	r3, r2
 80156ea:	009b      	lsls	r3, r3, #2
 80156ec:	4a52      	ldr	r2, [pc, #328]	; (8015838 <CAD_StateMachine+0x164>)
 80156ee:	4413      	add	r3, r2
 80156f0:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80156f2:	2302      	movs	r3, #2
 80156f4:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	2200      	movs	r2, #0
 80156fa:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 80156fc:	7bfa      	ldrb	r2, [r7, #15]
 80156fe:	494f      	ldr	r1, [pc, #316]	; (801583c <CAD_StateMachine+0x168>)
 8015700:	4613      	mov	r3, r2
 8015702:	011b      	lsls	r3, r3, #4
 8015704:	1a9b      	subs	r3, r3, r2
 8015706:	009b      	lsls	r3, r3, #2
 8015708:	440b      	add	r3, r1
 801570a:	3310      	adds	r3, #16
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	f003 0310 	and.w	r3, r3, #16
 8015714:	b2db      	uxtb	r3, r3
 8015716:	2b00      	cmp	r3, #0
 8015718:	d001      	beq.n	801571e <CAD_StateMachine+0x4a>
  {
    return _timing;
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	e087      	b.n	801582e <CAD_StateMachine+0x15a>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 801571e:	693b      	ldr	r3, [r7, #16]
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015726:	b2db      	uxtb	r3, r3
 8015728:	2b00      	cmp	r3, #0
 801572a:	d00a      	beq.n	8015742 <CAD_StateMachine+0x6e>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 801572c:	693a      	ldr	r2, [r7, #16]
 801572e:	7813      	ldrb	r3, [r2, #0]
 8015730:	f36f 13c7 	bfc	r3, #7, #1
 8015734:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8015736:	693a      	ldr	r2, [r7, #16]
 8015738:	7853      	ldrb	r3, [r2, #1]
 801573a:	210c      	movs	r1, #12
 801573c:	f361 0345 	bfi	r3, r1, #1, #5
 8015740:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 8015742:	693b      	ldr	r3, [r7, #16]
 8015744:	785b      	ldrb	r3, [r3, #1]
 8015746:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801574a:	b2db      	uxtb	r3, r3
 801574c:	2b0d      	cmp	r3, #13
 801574e:	d051      	beq.n	80157f4 <CAD_StateMachine+0x120>
 8015750:	2b0d      	cmp	r3, #13
 8015752:	dc62      	bgt.n	801581a <CAD_StateMachine+0x146>
 8015754:	2b00      	cmp	r3, #0
 8015756:	d002      	beq.n	801575e <CAD_StateMachine+0x8a>
 8015758:	2b0c      	cmp	r3, #12
 801575a:	d024      	beq.n	80157a6 <CAD_StateMachine+0xd2>
 801575c:	e05d      	b.n	801581a <CAD_StateMachine+0x146>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 801575e:	7bfa      	ldrb	r2, [r7, #15]
 8015760:	4936      	ldr	r1, [pc, #216]	; (801583c <CAD_StateMachine+0x168>)
 8015762:	4613      	mov	r3, r2
 8015764:	011b      	lsls	r3, r3, #4
 8015766:	1a9b      	subs	r3, r3, r2
 8015768:	009b      	lsls	r3, r3, #2
 801576a:	440b      	add	r3, r1
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	4618      	mov	r0, r3
 8015770:	f7ff fdf4 	bl	801535c <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8015774:	7bfa      	ldrb	r2, [r7, #15]
 8015776:	4931      	ldr	r1, [pc, #196]	; (801583c <CAD_StateMachine+0x168>)
 8015778:	4613      	mov	r3, r2
 801577a:	011b      	lsls	r3, r3, #4
 801577c:	1a9b      	subs	r3, r3, r2
 801577e:	009b      	lsls	r3, r3, #2
 8015780:	440b      	add	r3, r1
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	4618      	mov	r0, r3
 8015786:	f7ff fdf9 	bl	801537c <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      UCPD_INSTANCE0_ENABLEIRQ;
 801578a:	2104      	movs	r1, #4
 801578c:	203f      	movs	r0, #63	; 0x3f
 801578e:	f7ff fcf1 	bl	8015174 <__NVIC_SetPriority>
 8015792:	203f      	movs	r0, #63	; 0x3f
 8015794:	f7ff fcd0 	bl	8015138 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8015798:	693a      	ldr	r2, [r7, #16]
 801579a:	7853      	ldrb	r3, [r2, #1]
 801579c:	2101      	movs	r1, #1
 801579e:	f361 0345 	bfi	r3, r1, #1, #5
 80157a2:	7053      	strb	r3, [r2, #1]
      break;
 80157a4:	e042      	b.n	801582c <CAD_StateMachine+0x158>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 80157a6:	7bfb      	ldrb	r3, [r7, #15]
 80157a8:	4618      	mov	r0, r3
 80157aa:	f001 fbbd 	bl	8016f28 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 80157ae:	7bfa      	ldrb	r2, [r7, #15]
 80157b0:	4922      	ldr	r1, [pc, #136]	; (801583c <CAD_StateMachine+0x168>)
 80157b2:	4613      	mov	r3, r2
 80157b4:	011b      	lsls	r3, r3, #4
 80157b6:	1a9b      	subs	r3, r3, r2
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	440b      	add	r3, r1
 80157bc:	3334      	adds	r3, #52	; 0x34
 80157be:	2200      	movs	r2, #0
 80157c0:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2200      	movs	r2, #0
 80157c6:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 80157c8:	693a      	ldr	r2, [r7, #16]
 80157ca:	7813      	ldrb	r3, [r2, #0]
 80157cc:	f36f 0301 	bfc	r3, #0, #2
 80157d0:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	2201      	movs	r2, #1
 80157d6:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 80157d8:	f7f3 fcfa 	bl	80091d0 <HAL_GetTick>
 80157dc:	4602      	mov	r2, r0
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 80157e2:	231a      	movs	r3, #26
 80157e4:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 80157e6:	693a      	ldr	r2, [r7, #16]
 80157e8:	7853      	ldrb	r3, [r2, #1]
 80157ea:	210d      	movs	r1, #13
 80157ec:	f361 0345 	bfi	r3, r1, #1, #5
 80157f0:	7053      	strb	r3, [r2, #1]
      break;
 80157f2:	e01b      	b.n	801582c <CAD_StateMachine+0x158>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 80157f4:	f7f3 fcec 	bl	80091d0 <HAL_GetTick>
 80157f8:	4602      	mov	r2, r0
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	2b1a      	cmp	r3, #26
 8015802:	d912      	bls.n	801582a <CAD_StateMachine+0x156>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 8015804:	7bfb      	ldrb	r3, [r7, #15]
 8015806:	4618      	mov	r0, r3
 8015808:	f001 fafc 	bl	8016e04 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801580c:	693a      	ldr	r2, [r7, #16]
 801580e:	7853      	ldrb	r3, [r2, #1]
 8015810:	2101      	movs	r1, #1
 8015812:	f361 0345 	bfi	r3, r1, #1, #5
 8015816:	7053      	strb	r3, [r2, #1]
      }
      break;
 8015818:	e007      	b.n	801582a <CAD_StateMachine+0x156>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	689b      	ldr	r3, [r3, #8]
 801581e:	7bf8      	ldrb	r0, [r7, #15]
 8015820:	687a      	ldr	r2, [r7, #4]
 8015822:	68b9      	ldr	r1, [r7, #8]
 8015824:	4798      	blx	r3
 8015826:	6178      	str	r0, [r7, #20]
      break;
 8015828:	e000      	b.n	801582c <CAD_StateMachine+0x158>
      break;
 801582a:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 801582c:	697b      	ldr	r3, [r7, #20]
}
 801582e:	4618      	mov	r0, r3
 8015830:	3718      	adds	r7, #24
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}
 8015836:	bf00      	nop
 8015838:	20001638 	.word	0x20001638
 801583c:	20001650 	.word	0x20001650

08015840 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8015840:	b480      	push	{r7}
 8015842:	b087      	sub	sp, #28
 8015844:	af00      	add	r7, sp, #0
 8015846:	4603      	mov	r3, r0
 8015848:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801584a:	79fa      	ldrb	r2, [r7, #7]
 801584c:	4613      	mov	r3, r2
 801584e:	005b      	lsls	r3, r3, #1
 8015850:	4413      	add	r3, r2
 8015852:	009b      	lsls	r3, r3, #2
 8015854:	4a3a      	ldr	r2, [pc, #232]	; (8015940 <CAD_Check_HW_SNK+0x100>)
 8015856:	4413      	add	r3, r2
 8015858:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 801585a:	79fa      	ldrb	r2, [r7, #7]
 801585c:	4939      	ldr	r1, [pc, #228]	; (8015944 <CAD_Check_HW_SNK+0x104>)
 801585e:	4613      	mov	r3, r2
 8015860:	011b      	lsls	r3, r3, #4
 8015862:	1a9b      	subs	r3, r3, r2
 8015864:	009b      	lsls	r3, r3, #2
 8015866:	440b      	add	r3, r1
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	695b      	ldr	r3, [r3, #20]
 801586c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015870:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8015872:	79fa      	ldrb	r2, [r7, #7]
 8015874:	4933      	ldr	r1, [pc, #204]	; (8015944 <CAD_Check_HW_SNK+0x104>)
 8015876:	4613      	mov	r3, r2
 8015878:	011b      	lsls	r3, r3, #4
 801587a:	1a9b      	subs	r3, r3, r2
 801587c:	009b      	lsls	r3, r3, #2
 801587e:	440b      	add	r3, r1
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	695b      	ldr	r3, [r3, #20]
 8015884:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8015888:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 801588a:	697a      	ldr	r2, [r7, #20]
 801588c:	7813      	ldrb	r3, [r2, #0]
 801588e:	f36f 0301 	bfc	r3, #0, #2
 8015892:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8015894:	697a      	ldr	r2, [r7, #20]
 8015896:	7813      	ldrb	r3, [r2, #0]
 8015898:	f36f 0384 	bfc	r3, #2, #3
 801589c:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 801589e:	693b      	ldr	r3, [r7, #16]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d021      	beq.n	80158e8 <CAD_Check_HW_SNK+0xa8>
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d11e      	bne.n	80158e8 <CAD_Check_HW_SNK+0xa8>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 80158aa:	697a      	ldr	r2, [r7, #20]
 80158ac:	7813      	ldrb	r3, [r2, #0]
 80158ae:	2101      	movs	r1, #1
 80158b0:	f361 0384 	bfi	r3, r1, #2, #3
 80158b4:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC1;
 80158b6:	697a      	ldr	r2, [r7, #20]
 80158b8:	7813      	ldrb	r3, [r2, #0]
 80158ba:	2101      	movs	r1, #1
 80158bc:	f361 0301 	bfi	r3, r1, #0, #2
 80158c0:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	0c18      	lsrs	r0, r3, #16
 80158c6:	79fa      	ldrb	r2, [r7, #7]
 80158c8:	491e      	ldr	r1, [pc, #120]	; (8015944 <CAD_Check_HW_SNK+0x104>)
 80158ca:	4613      	mov	r3, r2
 80158cc:	011b      	lsls	r3, r3, #4
 80158ce:	1a9b      	subs	r3, r3, r2
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	440b      	add	r3, r1
 80158d4:	3310      	adds	r3, #16
 80158d6:	681a      	ldr	r2, [r3, #0]
 80158d8:	4603      	mov	r3, r0
 80158da:	f003 0303 	and.w	r3, r3, #3
 80158de:	b2d9      	uxtb	r1, r3
 80158e0:	7893      	ldrb	r3, [r2, #2]
 80158e2:	f361 0383 	bfi	r3, r1, #2, #2
 80158e6:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 80158e8:	693b      	ldr	r3, [r7, #16]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d121      	bne.n	8015932 <CAD_Check_HW_SNK+0xf2>
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d01e      	beq.n	8015932 <CAD_Check_HW_SNK+0xf2>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 80158f4:	697a      	ldr	r2, [r7, #20]
 80158f6:	7813      	ldrb	r3, [r2, #0]
 80158f8:	2101      	movs	r1, #1
 80158fa:	f361 0384 	bfi	r3, r1, #2, #3
 80158fe:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC2;
 8015900:	697a      	ldr	r2, [r7, #20]
 8015902:	7813      	ldrb	r3, [r2, #0]
 8015904:	2102      	movs	r1, #2
 8015906:	f361 0301 	bfi	r3, r1, #0, #2
 801590a:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	0c98      	lsrs	r0, r3, #18
 8015910:	79fa      	ldrb	r2, [r7, #7]
 8015912:	490c      	ldr	r1, [pc, #48]	; (8015944 <CAD_Check_HW_SNK+0x104>)
 8015914:	4613      	mov	r3, r2
 8015916:	011b      	lsls	r3, r3, #4
 8015918:	1a9b      	subs	r3, r3, r2
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	440b      	add	r3, r1
 801591e:	3310      	adds	r3, #16
 8015920:	681a      	ldr	r2, [r3, #0]
 8015922:	4603      	mov	r3, r0
 8015924:	f003 0303 	and.w	r3, r3, #3
 8015928:	b2d9      	uxtb	r1, r3
 801592a:	7893      	ldrb	r3, [r2, #2]
 801592c:	f361 0383 	bfi	r3, r1, #2, #2
 8015930:	7093      	strb	r3, [r2, #2]
  }
}
 8015932:	bf00      	nop
 8015934:	371c      	adds	r7, #28
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr
 801593e:	bf00      	nop
 8015940:	20001638 	.word	0x20001638
 8015944:	20001650 	.word	0x20001650

08015948 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
 801594e:	4603      	mov	r3, r0
 8015950:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015952:	79fa      	ldrb	r2, [r7, #7]
 8015954:	4613      	mov	r3, r2
 8015956:	005b      	lsls	r3, r3, #1
 8015958:	4413      	add	r3, r2
 801595a:	009b      	lsls	r3, r3, #2
 801595c:	4a1e      	ldr	r2, [pc, #120]	; (80159d8 <ManageStateDetached_SNK+0x90>)
 801595e:	4413      	add	r3, r2
 8015960:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015962:	2302      	movs	r3, #2
 8015964:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8015966:	79fb      	ldrb	r3, [r7, #7]
 8015968:	4618      	mov	r0, r3
 801596a:	f7ff ff69 	bl	8015840 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	781b      	ldrb	r3, [r3, #0]
 8015972:	f003 031c 	and.w	r3, r3, #28
 8015976:	b2db      	uxtb	r3, r3
 8015978:	2b00      	cmp	r3, #0
 801597a:	d103      	bne.n	8015984 <ManageStateDetached_SNK+0x3c>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 801597c:	f04f 33ff 	mov.w	r3, #4294967295
 8015980:	60fb      	str	r3, [r7, #12]
 8015982:	e023      	b.n	80159cc <ManageStateDetached_SNK+0x84>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8015984:	f7f3 fc24 	bl	80091d0 <HAL_GetTick>
 8015988:	4602      	mov	r2, r0
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 801598e:	68ba      	ldr	r2, [r7, #8]
 8015990:	7853      	ldrb	r3, [r2, #1]
 8015992:	2102      	movs	r1, #2
 8015994:	f361 0345 	bfi	r3, r1, #1, #5
 8015998:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 801599a:	2001      	movs	r0, #1
 801599c:	f7f3 fc24 	bl	80091e8 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 80159a0:	79fb      	ldrb	r3, [r7, #7]
 80159a2:	4618      	mov	r0, r3
 80159a4:	f7ff ff4c 	bl	8015840 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	f003 031c 	and.w	r3, r3, #28
 80159b0:	b2db      	uxtb	r3, r3
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d106      	bne.n	80159c4 <ManageStateDetached_SNK+0x7c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80159b6:	68ba      	ldr	r2, [r7, #8]
 80159b8:	7853      	ldrb	r3, [r2, #1]
 80159ba:	2101      	movs	r1, #1
 80159bc:	f361 0345 	bfi	r3, r1, #1, #5
 80159c0:	7053      	strb	r3, [r2, #1]
 80159c2:	e003      	b.n	80159cc <ManageStateDetached_SNK+0x84>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 80159c4:	79fb      	ldrb	r3, [r7, #7]
 80159c6:	4618      	mov	r0, r3
 80159c8:	f008 fc49 	bl	801e25e <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 80159cc:	68fb      	ldr	r3, [r7, #12]
}
 80159ce:	4618      	mov	r0, r3
 80159d0:	3710      	adds	r7, #16
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
 80159d6:	bf00      	nop
 80159d8:	20001638 	.word	0x20001638

080159dc <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b088      	sub	sp, #32
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	4603      	mov	r3, r0
 80159e4:	60b9      	str	r1, [r7, #8]
 80159e6:	607a      	str	r2, [r7, #4]
 80159e8:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80159ea:	7bfa      	ldrb	r2, [r7, #15]
 80159ec:	4613      	mov	r3, r2
 80159ee:	005b      	lsls	r3, r3, #1
 80159f0:	4413      	add	r3, r2
 80159f2:	009b      	lsls	r3, r3, #2
 80159f4:	4a39      	ldr	r2, [pc, #228]	; (8015adc <ManageStateAttachedWait_SNK+0x100>)
 80159f6:	4413      	add	r3, r2
 80159f8:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80159fa:	2302      	movs	r3, #2
 80159fc:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 80159fe:	f7f3 fbe7 	bl	80091d0 <HAL_GetTick>
 8015a02:	4602      	mov	r2, r0
 8015a04:	69bb      	ldr	r3, [r7, #24]
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	1ad3      	subs	r3, r2, r3
 8015a0a:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 8015a0c:	7bfb      	ldrb	r3, [r7, #15]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7ff ff16 	bl	8015840 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8015a14:	69bb      	ldr	r3, [r7, #24]
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	f003 031c 	and.w	r3, r3, #28
 8015a1c:	b2db      	uxtb	r3, r3
 8015a1e:	2b04      	cmp	r3, #4
 8015a20:	d12c      	bne.n	8015a7c <ManageStateAttachedWait_SNK+0xa0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	2b78      	cmp	r3, #120	; 0x78
 8015a26:	d923      	bls.n	8015a70 <ManageStateAttachedWait_SNK+0x94>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8015a28:	7bfb      	ldrb	r3, [r7, #15]
 8015a2a:	2101      	movs	r1, #1
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f008 fbc7 	bl	801e1c0 <USBPD_PWR_IF_GetVBUSStatus>
 8015a32:	4603      	mov	r3, r0
 8015a34:	2b01      	cmp	r3, #1
 8015a36:	d11b      	bne.n	8015a70 <ManageStateAttachedWait_SNK+0x94>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8015a38:	69bb      	ldr	r3, [r7, #24]
 8015a3a:	781b      	ldrb	r3, [r3, #0]
 8015a3c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015a40:	b2db      	uxtb	r3, r3
 8015a42:	461a      	mov	r2, r3
 8015a44:	7bfb      	ldrb	r3, [r7, #15]
 8015a46:	4611      	mov	r1, r2
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f001 fae1 	bl	8017010 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8015a4e:	69ba      	ldr	r2, [r7, #24]
 8015a50:	7853      	ldrb	r3, [r2, #1]
 8015a52:	2103      	movs	r1, #3
 8015a54:	f361 0345 	bfi	r3, r1, #1, #5
 8015a58:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	2202      	movs	r2, #2
 8015a5e:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8015a60:	69bb      	ldr	r3, [r7, #24]
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015a68:	b2db      	uxtb	r3, r3
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8015a70:	69ba      	ldr	r2, [r7, #24]
 8015a72:	7813      	ldrb	r3, [r2, #0]
 8015a74:	f36f 1345 	bfc	r3, #5, #1
 8015a78:	7013      	strb	r3, [r2, #0]
 8015a7a:	e02a      	b.n	8015ad2 <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8015a7c:	69bb      	ldr	r3, [r7, #24]
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	f003 0320 	and.w	r3, r3, #32
 8015a84:	b2db      	uxtb	r3, r3
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d10c      	bne.n	8015aa4 <ManageStateAttachedWait_SNK+0xc8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8015a8a:	f7f3 fba1 	bl	80091d0 <HAL_GetTick>
 8015a8e:	4602      	mov	r2, r0
 8015a90:	69bb      	ldr	r3, [r7, #24]
 8015a92:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8015a94:	69ba      	ldr	r2, [r7, #24]
 8015a96:	7813      	ldrb	r3, [r2, #0]
 8015a98:	f043 0320 	orr.w	r3, r3, #32
 8015a9c:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 8015a9e:	230c      	movs	r3, #12
 8015aa0:	61fb      	str	r3, [r7, #28]
 8015aa2:	e016      	b.n	8015ad2 <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 8015aa4:	f7f3 fb94 	bl	80091d0 <HAL_GetTick>
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	69bb      	ldr	r3, [r7, #24]
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	1ad3      	subs	r3, r2, r3
 8015ab0:	2b0c      	cmp	r3, #12
 8015ab2:	d90e      	bls.n	8015ad2 <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8015ab4:	69ba      	ldr	r2, [r7, #24]
 8015ab6:	7813      	ldrb	r3, [r2, #0]
 8015ab8:	f36f 1345 	bfc	r3, #5, #1
 8015abc:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8015abe:	69ba      	ldr	r2, [r7, #24]
 8015ac0:	7853      	ldrb	r3, [r2, #1]
 8015ac2:	2101      	movs	r1, #1
 8015ac4:	f361 0345 	bfi	r3, r1, #1, #5
 8015ac8:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8015aca:	7bfb      	ldrb	r3, [r7, #15]
 8015acc:	4618      	mov	r0, r3
 8015ace:	f008 fbd9 	bl	801e284 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8015ad2:	69fb      	ldr	r3, [r7, #28]
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3720      	adds	r7, #32
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}
 8015adc:	20001638 	.word	0x20001638

08015ae0 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b088      	sub	sp, #32
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	60b9      	str	r1, [r7, #8]
 8015aea:	607a      	str	r2, [r7, #4]
 8015aec:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015aee:	7bfa      	ldrb	r2, [r7, #15]
 8015af0:	4613      	mov	r3, r2
 8015af2:	005b      	lsls	r3, r3, #1
 8015af4:	4413      	add	r3, r2
 8015af6:	009b      	lsls	r3, r3, #2
 8015af8:	4a2a      	ldr	r2, [pc, #168]	; (8015ba4 <ManageStateAttached_SNK+0xc4>)
 8015afa:	4413      	add	r3, r2
 8015afc:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015afe:	2302      	movs	r3, #2
 8015b00:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 8015b02:	2300      	movs	r3, #0
 8015b04:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8015b06:	7bfa      	ldrb	r2, [r7, #15]
 8015b08:	4927      	ldr	r1, [pc, #156]	; (8015ba8 <ManageStateAttached_SNK+0xc8>)
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	011b      	lsls	r3, r3, #4
 8015b0e:	1a9b      	subs	r3, r3, r2
 8015b10:	009b      	lsls	r3, r3, #2
 8015b12:	440b      	add	r3, r1
 8015b14:	3334      	adds	r3, #52	; 0x34
 8015b16:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8015b18:	2b01      	cmp	r3, #1
 8015b1a:	d10b      	bne.n	8015b34 <ManageStateAttached_SNK+0x54>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8015b1c:	7bfa      	ldrb	r2, [r7, #15]
 8015b1e:	4922      	ldr	r1, [pc, #136]	; (8015ba8 <ManageStateAttached_SNK+0xc8>)
 8015b20:	4613      	mov	r3, r2
 8015b22:	011b      	lsls	r3, r3, #4
 8015b24:	1a9b      	subs	r3, r3, r2
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	440b      	add	r3, r1
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	695b      	ldr	r3, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8015b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015b32:	e00a      	b.n	8015b4a <ManageStateAttached_SNK+0x6a>
 8015b34:	7bfa      	ldrb	r2, [r7, #15]
 8015b36:	491c      	ldr	r1, [pc, #112]	; (8015ba8 <ManageStateAttached_SNK+0xc8>)
 8015b38:	4613      	mov	r3, r2
 8015b3a:	011b      	lsls	r3, r3, #4
 8015b3c:	1a9b      	subs	r3, r3, r2
 8015b3e:	009b      	lsls	r3, r3, #2
 8015b40:	440b      	add	r3, r1
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	695b      	ldr	r3, [r3, #20]
 8015b46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8015b4a:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8015b4c:	7bfb      	ldrb	r3, [r7, #15]
 8015b4e:	2102      	movs	r1, #2
 8015b50:	4618      	mov	r0, r3
 8015b52:	f008 fb35 	bl	801e1c0 <USBPD_PWR_IF_GetVBUSStatus>
 8015b56:	4603      	mov	r3, r0
 8015b58:	2b01      	cmp	r3, #1
 8015b5a:	d11b      	bne.n	8015b94 <ManageStateAttached_SNK+0xb4>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8015b5c:	697a      	ldr	r2, [r7, #20]
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d117      	bne.n	8015b94 <ManageStateAttached_SNK+0xb4>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8015b64:	7bfb      	ldrb	r3, [r7, #15]
 8015b66:	4618      	mov	r0, r3
 8015b68:	f001 fb9e 	bl	80172a8 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8015b6c:	69ba      	ldr	r2, [r7, #24]
 8015b6e:	7813      	ldrb	r3, [r2, #0]
 8015b70:	f36f 0384 	bfc	r3, #2, #3
 8015b74:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8015b76:	69ba      	ldr	r2, [r7, #24]
 8015b78:	7853      	ldrb	r3, [r2, #1]
 8015b7a:	2101      	movs	r1, #1
 8015b7c:	f361 0345 	bfi	r3, r1, #1, #5
 8015b80:	7053      	strb	r3, [r2, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8015b82:	68bb      	ldr	r3, [r7, #8]
 8015b84:	2201      	movs	r2, #1
 8015b86:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	61fb      	str	r3, [r7, #28]
 8015b92:	e001      	b.n	8015b98 <ManageStateAttached_SNK+0xb8>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8015b94:	230a      	movs	r3, #10
 8015b96:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8015b98:	69fb      	ldr	r3, [r7, #28]
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3720      	adds	r7, #32
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	20001638 	.word	0x20001638
 8015ba8:	20001650 	.word	0x20001650

08015bac <LL_AHB1_GRP1_EnableClock>:
{
 8015bac:	b480      	push	{r7}
 8015bae:	b085      	sub	sp, #20
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8015bb4:	4b08      	ldr	r3, [pc, #32]	; (8015bd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8015bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015bb8:	4907      	ldr	r1, [pc, #28]	; (8015bd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	4313      	orrs	r3, r2
 8015bbe:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8015bc0:	4b05      	ldr	r3, [pc, #20]	; (8015bd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8015bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	4013      	ands	r3, r2
 8015bc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015bca:	68fb      	ldr	r3, [r7, #12]
}
 8015bcc:	bf00      	nop
 8015bce:	3714      	adds	r7, #20
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd6:	4770      	bx	lr
 8015bd8:	40021000 	.word	0x40021000

08015bdc <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8015bdc:	b480      	push	{r7}
 8015bde:	b083      	sub	sp, #12
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	4603      	mov	r3, r0
 8015be4:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 8015be6:	4b03      	ldr	r3, [pc, #12]	; (8015bf4 <USBPD_HW_GetUSPDInstance+0x18>)
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	370c      	adds	r7, #12
 8015bec:	46bd      	mov	sp, r7
 8015bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf2:	4770      	bx	lr
 8015bf4:	4000a000 	.word	0x4000a000

08015bf8 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b08e      	sub	sp, #56	; 0x38
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	4603      	mov	r3, r0
 8015c00:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8015c02:	f107 030c 	add.w	r3, r7, #12
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7fc fcca 	bl	80125a0 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8015c10:	2300      	movs	r3, #0
 8015c12:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8015c14:	2300      	movs	r3, #0
 8015c16:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8015c18:	2380      	movs	r3, #128	; 0x80
 8015c1a:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8015c20:	2300      	movs	r3, #0
 8015c22:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 8015c24:	2300      	movs	r3, #0
 8015c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8015c28:	2300      	movs	r3, #0
 8015c2a:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8015c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015c34:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 8015c36:	2001      	movs	r0, #1
 8015c38:	f7ff ffb8 	bl	8015bac <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8015c3c:	2372      	movs	r3, #114	; 0x72
 8015c3e:	633b      	str	r3, [r7, #48]	; 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8015c40:	f107 030c 	add.w	r3, r7, #12
 8015c44:	461a      	mov	r2, r3
 8015c46:	2102      	movs	r1, #2
 8015c48:	4803      	ldr	r0, [pc, #12]	; (8015c58 <USBPD_HW_Init_DMARxInstance+0x60>)
 8015c4a:	f7fc fc69 	bl	8012520 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 8015c4e:	4b03      	ldr	r3, [pc, #12]	; (8015c5c <USBPD_HW_Init_DMARxInstance+0x64>)
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3738      	adds	r7, #56	; 0x38
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}
 8015c58:	40020000 	.word	0x40020000
 8015c5c:	40020030 	.word	0x40020030

08015c60 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8015c60:	b480      	push	{r7}
 8015c62:	b083      	sub	sp, #12
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	4603      	mov	r3, r0
 8015c68:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8015c6a:	bf00      	nop
 8015c6c:	370c      	adds	r7, #12
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c74:	4770      	bx	lr
	...

08015c78 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b08e      	sub	sp, #56	; 0x38
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	4603      	mov	r3, r0
 8015c80:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8015c82:	f107 030c 	add.w	r3, r7, #12
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7fc fc8a 	bl	80125a0 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8015c8c:	2310      	movs	r3, #16
 8015c8e:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8015c90:	2300      	movs	r3, #0
 8015c92:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8015c94:	2300      	movs	r3, #0
 8015c96:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8015c98:	2380      	movs	r3, #128	; 0x80
 8015c9a:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8015cac:	2300      	movs	r3, #0
 8015cae:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8015cb0:	2001      	movs	r0, #1
 8015cb2:	f7ff ff7b 	bl	8015bac <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8015cb6:	2373      	movs	r3, #115	; 0x73
 8015cb8:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8015cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015cbe:	637b      	str	r3, [r7, #52]	; 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8015cc0:	f107 030c 	add.w	r3, r7, #12
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	2103      	movs	r1, #3
 8015cc8:	4803      	ldr	r0, [pc, #12]	; (8015cd8 <USBPD_HW_Init_DMATxInstance+0x60>)
 8015cca:	f7fc fc29 	bl	8012520 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8015cce:	4b03      	ldr	r3, [pc, #12]	; (8015cdc <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	3738      	adds	r7, #56	; 0x38
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd80      	pop	{r7, pc}
 8015cd8:	40020000 	.word	0x40020000
 8015cdc:	40020044 	.word	0x40020044

08015ce0 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8015ce0:	b480      	push	{r7}
 8015ce2:	b083      	sub	sp, #12
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8015cea:	bf00      	nop
 8015cec:	370c      	adds	r7, #12
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf4:	4770      	bx	lr

08015cf6 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8015cf6:	b480      	push	{r7}
 8015cf8:	b083      	sub	sp, #12
 8015cfa:	af00      	add	r7, sp, #0
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	460a      	mov	r2, r1
 8015d00:	71fb      	strb	r3, [r7, #7]
 8015d02:	4613      	mov	r3, r2
 8015d04:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 8015d06:	bf00      	nop
 8015d08:	370c      	adds	r7, #12
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d10:	4770      	bx	lr

08015d12 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8015d12:	b480      	push	{r7}
 8015d14:	b083      	sub	sp, #12
 8015d16:	af00      	add	r7, sp, #0
 8015d18:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	699b      	ldr	r3, [r3, #24]
 8015d1e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	619a      	str	r2, [r3, #24]
}
 8015d26:	bf00      	nop
 8015d28:	370c      	adds	r7, #12
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d30:	4770      	bx	lr

08015d32 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8015d32:	b480      	push	{r7}
 8015d34:	b083      	sub	sp, #12
 8015d36:	af00      	add	r7, sp, #0
 8015d38:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	699b      	ldr	r3, [r3, #24]
 8015d3e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	619a      	str	r2, [r3, #24]
}
 8015d46:	bf00      	nop
 8015d48:	370c      	adds	r7, #12
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d50:	4770      	bx	lr

08015d52 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8015d52:	b480      	push	{r7}
 8015d54:	b083      	sub	sp, #12
 8015d56:	af00      	add	r7, sp, #0
 8015d58:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	699b      	ldr	r3, [r3, #24]
 8015d5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	619a      	str	r2, [r3, #24]
}
 8015d66:	bf00      	nop
 8015d68:	370c      	adds	r7, #12
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d70:	4770      	bx	lr

08015d72 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8015d72:	b480      	push	{r7}
 8015d74:	b083      	sub	sp, #12
 8015d76:	af00      	add	r7, sp, #0
 8015d78:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	699b      	ldr	r3, [r3, #24]
 8015d7e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	619a      	str	r2, [r3, #24]
}
 8015d86:	bf00      	nop
 8015d88:	370c      	adds	r7, #12
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d90:	4770      	bx	lr

08015d92 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8015d92:	b480      	push	{r7}
 8015d94:	b083      	sub	sp, #12
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	699b      	ldr	r3, [r3, #24]
 8015d9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	619a      	str	r2, [r3, #24]
}
 8015da6:	bf00      	nop
 8015da8:	370c      	adds	r7, #12
 8015daa:	46bd      	mov	sp, r7
 8015dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db0:	4770      	bx	lr

08015db2 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8015db2:	b480      	push	{r7}
 8015db4:	b083      	sub	sp, #12
 8015db6:	af00      	add	r7, sp, #0
 8015db8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	699b      	ldr	r3, [r3, #24]
 8015dbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	619a      	str	r2, [r3, #24]
}
 8015dc6:	bf00      	nop
 8015dc8:	370c      	adds	r7, #12
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd0:	4770      	bx	lr

08015dd2 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8015dd2:	b480      	push	{r7}
 8015dd4:	b083      	sub	sp, #12
 8015dd6:	af00      	add	r7, sp, #0
 8015dd8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	699b      	ldr	r3, [r3, #24]
 8015dde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	619a      	str	r2, [r3, #24]
}
 8015de6:	bf00      	nop
 8015de8:	370c      	adds	r7, #12
 8015dea:	46bd      	mov	sp, r7
 8015dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df0:	4770      	bx	lr

08015df2 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8015df2:	b480      	push	{r7}
 8015df4:	b083      	sub	sp, #12
 8015df6:	af00      	add	r7, sp, #0
 8015df8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	699b      	ldr	r3, [r3, #24]
 8015dfe:	f043 0220 	orr.w	r2, r3, #32
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	619a      	str	r2, [r3, #24]
}
 8015e06:	bf00      	nop
 8015e08:	370c      	adds	r7, #12
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e10:	4770      	bx	lr

08015e12 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8015e12:	b480      	push	{r7}
 8015e14:	b083      	sub	sp, #12
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	699b      	ldr	r3, [r3, #24]
 8015e1e:	f043 0210 	orr.w	r2, r3, #16
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	619a      	str	r2, [r3, #24]
}
 8015e26:	bf00      	nop
 8015e28:	370c      	adds	r7, #12
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e30:	4770      	bx	lr

08015e32 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8015e32:	b480      	push	{r7}
 8015e34:	b083      	sub	sp, #12
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	699b      	ldr	r3, [r3, #24]
 8015e3e:	f043 0208 	orr.w	r2, r3, #8
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	619a      	str	r2, [r3, #24]
}
 8015e46:	bf00      	nop
 8015e48:	370c      	adds	r7, #12
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e50:	4770      	bx	lr

08015e52 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8015e52:	b480      	push	{r7}
 8015e54:	b083      	sub	sp, #12
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	699b      	ldr	r3, [r3, #24]
 8015e5e:	f043 0204 	orr.w	r2, r3, #4
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	619a      	str	r2, [r3, #24]
}
 8015e66:	bf00      	nop
 8015e68:	370c      	adds	r7, #12
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e70:	4770      	bx	lr

08015e72 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8015e72:	b480      	push	{r7}
 8015e74:	b083      	sub	sp, #12
 8015e76:	af00      	add	r7, sp, #0
 8015e78:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	699b      	ldr	r3, [r3, #24]
 8015e7e:	f043 0202 	orr.w	r2, r3, #2
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	619a      	str	r2, [r3, #24]
}
 8015e86:	bf00      	nop
 8015e88:	370c      	adds	r7, #12
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e90:	4770      	bx	lr

08015e92 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8015e92:	b580      	push	{r7, lr}
 8015e94:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8015e96:	2000      	movs	r0, #0
 8015e98:	f000 f802 	bl	8015ea0 <PORTx_IRQHandler>
}
 8015e9c:	bf00      	nop
 8015e9e:	bd80      	pop	{r7, pc}

08015ea0 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b084      	sub	sp, #16
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8015eaa:	79fa      	ldrb	r2, [r7, #7]
 8015eac:	4998      	ldr	r1, [pc, #608]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015eae:	4613      	mov	r3, r2
 8015eb0:	011b      	lsls	r3, r3, #4
 8015eb2:	1a9b      	subs	r3, r3, r2
 8015eb4:	009b      	lsls	r3, r3, #2
 8015eb6:	440b      	add	r3, r1
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	695b      	ldr	r3, [r3, #20]
 8015ec0:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	691a      	ldr	r2, [r3, #16]
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	4013      	ands	r3, r2
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	f000 81ca 	beq.w	8016264 <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	f003 0302 	and.w	r3, r3, #2
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d035      	beq.n	8015f46 <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8015eda:	68f8      	ldr	r0, [r7, #12]
 8015edc:	f7ff ffc9 	bl	8015e72 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8015ee0:	79fa      	ldrb	r2, [r7, #7]
 8015ee2:	498b      	ldr	r1, [pc, #556]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015ee4:	4613      	mov	r3, r2
 8015ee6:	011b      	lsls	r3, r3, #4
 8015ee8:	1a9b      	subs	r3, r3, r2
 8015eea:	009b      	lsls	r3, r3, #2
 8015eec:	440b      	add	r3, r1
 8015eee:	3304      	adds	r3, #4
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	6819      	ldr	r1, [r3, #0]
 8015ef4:	79fa      	ldrb	r2, [r7, #7]
 8015ef6:	4886      	ldr	r0, [pc, #536]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015ef8:	4613      	mov	r3, r2
 8015efa:	011b      	lsls	r3, r3, #4
 8015efc:	1a9b      	subs	r3, r3, r2
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	4403      	add	r3, r0
 8015f02:	3304      	adds	r3, #4
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	f021 0201 	bic.w	r2, r1, #1
 8015f0a:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8015f0c:	bf00      	nop
 8015f0e:	79fa      	ldrb	r2, [r7, #7]
 8015f10:	497f      	ldr	r1, [pc, #508]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015f12:	4613      	mov	r3, r2
 8015f14:	011b      	lsls	r3, r3, #4
 8015f16:	1a9b      	subs	r3, r3, r2
 8015f18:	009b      	lsls	r3, r3, #2
 8015f1a:	440b      	add	r3, r1
 8015f1c:	3304      	adds	r3, #4
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	f003 0301 	and.w	r3, r3, #1
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d0f1      	beq.n	8015f0e <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8015f2a:	79fa      	ldrb	r2, [r7, #7]
 8015f2c:	4978      	ldr	r1, [pc, #480]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015f2e:	4613      	mov	r3, r2
 8015f30:	011b      	lsls	r3, r3, #4
 8015f32:	1a9b      	subs	r3, r3, r2
 8015f34:	009b      	lsls	r3, r3, #2
 8015f36:	440b      	add	r3, r1
 8015f38:	3314      	adds	r3, #20
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	79fa      	ldrb	r2, [r7, #7]
 8015f3e:	2101      	movs	r1, #1
 8015f40:	4610      	mov	r0, r2
 8015f42:	4798      	blx	r3
      return;
 8015f44:	e18e      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8015f46:	68bb      	ldr	r3, [r7, #8]
 8015f48:	f003 0304 	and.w	r3, r3, #4
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d035      	beq.n	8015fbc <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8015f50:	68f8      	ldr	r0, [r7, #12]
 8015f52:	f7ff ff7e 	bl	8015e52 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8015f56:	79fa      	ldrb	r2, [r7, #7]
 8015f58:	496d      	ldr	r1, [pc, #436]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015f5a:	4613      	mov	r3, r2
 8015f5c:	011b      	lsls	r3, r3, #4
 8015f5e:	1a9b      	subs	r3, r3, r2
 8015f60:	009b      	lsls	r3, r3, #2
 8015f62:	440b      	add	r3, r1
 8015f64:	3304      	adds	r3, #4
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	6819      	ldr	r1, [r3, #0]
 8015f6a:	79fa      	ldrb	r2, [r7, #7]
 8015f6c:	4868      	ldr	r0, [pc, #416]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015f6e:	4613      	mov	r3, r2
 8015f70:	011b      	lsls	r3, r3, #4
 8015f72:	1a9b      	subs	r3, r3, r2
 8015f74:	009b      	lsls	r3, r3, #2
 8015f76:	4403      	add	r3, r0
 8015f78:	3304      	adds	r3, #4
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	f021 0201 	bic.w	r2, r1, #1
 8015f80:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8015f82:	bf00      	nop
 8015f84:	79fa      	ldrb	r2, [r7, #7]
 8015f86:	4962      	ldr	r1, [pc, #392]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015f88:	4613      	mov	r3, r2
 8015f8a:	011b      	lsls	r3, r3, #4
 8015f8c:	1a9b      	subs	r3, r3, r2
 8015f8e:	009b      	lsls	r3, r3, #2
 8015f90:	440b      	add	r3, r1
 8015f92:	3304      	adds	r3, #4
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	f003 0301 	and.w	r3, r3, #1
 8015f9c:	2b01      	cmp	r3, #1
 8015f9e:	d0f1      	beq.n	8015f84 <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8015fa0:	79fa      	ldrb	r2, [r7, #7]
 8015fa2:	495b      	ldr	r1, [pc, #364]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015fa4:	4613      	mov	r3, r2
 8015fa6:	011b      	lsls	r3, r3, #4
 8015fa8:	1a9b      	subs	r3, r3, r2
 8015faa:	009b      	lsls	r3, r3, #2
 8015fac:	440b      	add	r3, r1
 8015fae:	3314      	adds	r3, #20
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	79fa      	ldrb	r2, [r7, #7]
 8015fb4:	2100      	movs	r1, #0
 8015fb6:	4610      	mov	r0, r2
 8015fb8:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8015fba:	e153      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	f003 0308 	and.w	r3, r3, #8
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d035      	beq.n	8016032 <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8015fc6:	68f8      	ldr	r0, [r7, #12]
 8015fc8:	f7ff ff33 	bl	8015e32 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8015fcc:	79fa      	ldrb	r2, [r7, #7]
 8015fce:	4950      	ldr	r1, [pc, #320]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015fd0:	4613      	mov	r3, r2
 8015fd2:	011b      	lsls	r3, r3, #4
 8015fd4:	1a9b      	subs	r3, r3, r2
 8015fd6:	009b      	lsls	r3, r3, #2
 8015fd8:	440b      	add	r3, r1
 8015fda:	3304      	adds	r3, #4
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	6819      	ldr	r1, [r3, #0]
 8015fe0:	79fa      	ldrb	r2, [r7, #7]
 8015fe2:	484b      	ldr	r0, [pc, #300]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015fe4:	4613      	mov	r3, r2
 8015fe6:	011b      	lsls	r3, r3, #4
 8015fe8:	1a9b      	subs	r3, r3, r2
 8015fea:	009b      	lsls	r3, r3, #2
 8015fec:	4403      	add	r3, r0
 8015fee:	3304      	adds	r3, #4
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	f021 0201 	bic.w	r2, r1, #1
 8015ff6:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8015ff8:	bf00      	nop
 8015ffa:	79fa      	ldrb	r2, [r7, #7]
 8015ffc:	4944      	ldr	r1, [pc, #272]	; (8016110 <PORTx_IRQHandler+0x270>)
 8015ffe:	4613      	mov	r3, r2
 8016000:	011b      	lsls	r3, r3, #4
 8016002:	1a9b      	subs	r3, r3, r2
 8016004:	009b      	lsls	r3, r3, #2
 8016006:	440b      	add	r3, r1
 8016008:	3304      	adds	r3, #4
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	f003 0301 	and.w	r3, r3, #1
 8016012:	2b01      	cmp	r3, #1
 8016014:	d0f1      	beq.n	8015ffa <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8016016:	79fa      	ldrb	r2, [r7, #7]
 8016018:	493d      	ldr	r1, [pc, #244]	; (8016110 <PORTx_IRQHandler+0x270>)
 801601a:	4613      	mov	r3, r2
 801601c:	011b      	lsls	r3, r3, #4
 801601e:	1a9b      	subs	r3, r3, r2
 8016020:	009b      	lsls	r3, r3, #2
 8016022:	440b      	add	r3, r1
 8016024:	3314      	adds	r3, #20
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	79fa      	ldrb	r2, [r7, #7]
 801602a:	2102      	movs	r1, #2
 801602c:	4610      	mov	r0, r2
 801602e:	4798      	blx	r3
      return;
 8016030:	e118      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	f003 0310 	and.w	r3, r3, #16
 8016038:	2b00      	cmp	r3, #0
 801603a:	d003      	beq.n	8016044 <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 801603c:	68f8      	ldr	r0, [r7, #12]
 801603e:	f7ff fee8 	bl	8015e12 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8016042:	e10f      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	f003 0320 	and.w	r3, r3, #32
 801604a:	2b00      	cmp	r3, #0
 801604c:	d010      	beq.n	8016070 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 801604e:	68f8      	ldr	r0, [r7, #12]
 8016050:	f7ff fecf 	bl	8015df2 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8016054:	79fa      	ldrb	r2, [r7, #7]
 8016056:	492e      	ldr	r1, [pc, #184]	; (8016110 <PORTx_IRQHandler+0x270>)
 8016058:	4613      	mov	r3, r2
 801605a:	011b      	lsls	r3, r3, #4
 801605c:	1a9b      	subs	r3, r3, r2
 801605e:	009b      	lsls	r3, r3, #2
 8016060:	440b      	add	r3, r1
 8016062:	3324      	adds	r3, #36	; 0x24
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	79fa      	ldrb	r2, [r7, #7]
 8016068:	2105      	movs	r1, #5
 801606a:	4610      	mov	r0, r2
 801606c:	4798      	blx	r3
      return;
 801606e:	e0f9      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016076:	2b00      	cmp	r3, #0
 8016078:	d003      	beq.n	8016082 <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 801607a:	68f8      	ldr	r0, [r7, #12]
 801607c:	f7ff fea9 	bl	8015dd2 <LL_UCPD_ClearFlag_TxUND>
      return;
 8016080:	e0f0      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016088:	2b00      	cmp	r3, #0
 801608a:	d01e      	beq.n	80160ca <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016090:	2b05      	cmp	r3, #5
 8016092:	d10c      	bne.n	80160ae <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8016094:	79fa      	ldrb	r2, [r7, #7]
 8016096:	491e      	ldr	r1, [pc, #120]	; (8016110 <PORTx_IRQHandler+0x270>)
 8016098:	4613      	mov	r3, r2
 801609a:	011b      	lsls	r3, r3, #4
 801609c:	1a9b      	subs	r3, r3, r2
 801609e:	009b      	lsls	r3, r3, #2
 80160a0:	440b      	add	r3, r1
 80160a2:	331c      	adds	r3, #28
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	79fa      	ldrb	r2, [r7, #7]
 80160a8:	2106      	movs	r1, #6
 80160aa:	4610      	mov	r0, r2
 80160ac:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 80160ae:	68f8      	ldr	r0, [r7, #12]
 80160b0:	f7ff fe7f 	bl	8015db2 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 80160b4:	79fa      	ldrb	r2, [r7, #7]
 80160b6:	4916      	ldr	r1, [pc, #88]	; (8016110 <PORTx_IRQHandler+0x270>)
 80160b8:	4613      	mov	r3, r2
 80160ba:	011b      	lsls	r3, r3, #4
 80160bc:	1a9b      	subs	r3, r3, r2
 80160be:	009b      	lsls	r3, r3, #2
 80160c0:	440b      	add	r3, r1
 80160c2:	3338      	adds	r3, #56	; 0x38
 80160c4:	2201      	movs	r2, #1
 80160c6:	701a      	strb	r2, [r3, #0]
      return;
 80160c8:	e0cc      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d010      	beq.n	80160f6 <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 80160d4:	79fa      	ldrb	r2, [r7, #7]
 80160d6:	490e      	ldr	r1, [pc, #56]	; (8016110 <PORTx_IRQHandler+0x270>)
 80160d8:	4613      	mov	r3, r2
 80160da:	011b      	lsls	r3, r3, #4
 80160dc:	1a9b      	subs	r3, r3, r2
 80160de:	009b      	lsls	r3, r3, #2
 80160e0:	440b      	add	r3, r1
 80160e2:	331c      	adds	r3, #28
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	79fa      	ldrb	r2, [r7, #7]
 80160e8:	2105      	movs	r1, #5
 80160ea:	4610      	mov	r0, r2
 80160ec:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 80160ee:	68f8      	ldr	r0, [r7, #12]
 80160f0:	f7ff fe4f 	bl	8015d92 <LL_UCPD_ClearFlag_RxHRST>
      return;
 80160f4:	e0b6      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d00b      	beq.n	8016118 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 8016100:	4b04      	ldr	r3, [pc, #16]	; (8016114 <PORTx_IRQHandler+0x274>)
 8016102:	2201      	movs	r2, #1
 8016104:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8016106:	68f8      	ldr	r0, [r7, #12]
 8016108:	f7ff fe33 	bl	8015d72 <LL_UCPD_ClearFlag_RxOvr>
      return;
 801610c:	e0aa      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
 801610e:	bf00      	nop
 8016110:	20001650 	.word	0x20001650
 8016114:	20001644 	.word	0x20001644
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801611e:	2b00      	cmp	r3, #0
 8016120:	f000 8085 	beq.w	801622e <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8016124:	79fa      	ldrb	r2, [r7, #7]
 8016126:	4951      	ldr	r1, [pc, #324]	; (801626c <PORTx_IRQHandler+0x3cc>)
 8016128:	4613      	mov	r3, r2
 801612a:	011b      	lsls	r3, r3, #4
 801612c:	1a9b      	subs	r3, r3, r2
 801612e:	009b      	lsls	r3, r3, #2
 8016130:	440b      	add	r3, r1
 8016132:	3338      	adds	r3, #56	; 0x38
 8016134:	2200      	movs	r2, #0
 8016136:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8016138:	68f8      	ldr	r0, [r7, #12]
 801613a:	f7ff fe0a 	bl	8015d52 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 801613e:	79fa      	ldrb	r2, [r7, #7]
 8016140:	494a      	ldr	r1, [pc, #296]	; (801626c <PORTx_IRQHandler+0x3cc>)
 8016142:	4613      	mov	r3, r2
 8016144:	011b      	lsls	r3, r3, #4
 8016146:	1a9b      	subs	r3, r3, r2
 8016148:	009b      	lsls	r3, r3, #2
 801614a:	440b      	add	r3, r1
 801614c:	3308      	adds	r3, #8
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	6819      	ldr	r1, [r3, #0]
 8016152:	79fa      	ldrb	r2, [r7, #7]
 8016154:	4845      	ldr	r0, [pc, #276]	; (801626c <PORTx_IRQHandler+0x3cc>)
 8016156:	4613      	mov	r3, r2
 8016158:	011b      	lsls	r3, r3, #4
 801615a:	1a9b      	subs	r3, r3, r2
 801615c:	009b      	lsls	r3, r3, #2
 801615e:	4403      	add	r3, r0
 8016160:	3308      	adds	r3, #8
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	f021 0201 	bic.w	r2, r1, #1
 8016168:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 801616a:	bf00      	nop
 801616c:	79fa      	ldrb	r2, [r7, #7]
 801616e:	493f      	ldr	r1, [pc, #252]	; (801626c <PORTx_IRQHandler+0x3cc>)
 8016170:	4613      	mov	r3, r2
 8016172:	011b      	lsls	r3, r3, #4
 8016174:	1a9b      	subs	r3, r3, r2
 8016176:	009b      	lsls	r3, r3, #2
 8016178:	440b      	add	r3, r1
 801617a:	3308      	adds	r3, #8
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	f003 0301 	and.w	r3, r3, #1
 8016184:	2b01      	cmp	r3, #1
 8016186:	d0f1      	beq.n	801616c <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8016188:	79fa      	ldrb	r2, [r7, #7]
 801618a:	4938      	ldr	r1, [pc, #224]	; (801626c <PORTx_IRQHandler+0x3cc>)
 801618c:	4613      	mov	r3, r2
 801618e:	011b      	lsls	r3, r3, #4
 8016190:	1a9b      	subs	r3, r3, r2
 8016192:	009b      	lsls	r3, r3, #2
 8016194:	440b      	add	r3, r1
 8016196:	3330      	adds	r3, #48	; 0x30
 8016198:	6818      	ldr	r0, [r3, #0]
 801619a:	79fa      	ldrb	r2, [r7, #7]
 801619c:	4933      	ldr	r1, [pc, #204]	; (801626c <PORTx_IRQHandler+0x3cc>)
 801619e:	4613      	mov	r3, r2
 80161a0:	011b      	lsls	r3, r3, #4
 80161a2:	1a9b      	subs	r3, r3, r2
 80161a4:	009b      	lsls	r3, r3, #2
 80161a6:	440b      	add	r3, r1
 80161a8:	3308      	adds	r3, #8
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	4602      	mov	r2, r0
 80161ae:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 80161b0:	79fa      	ldrb	r2, [r7, #7]
 80161b2:	492e      	ldr	r1, [pc, #184]	; (801626c <PORTx_IRQHandler+0x3cc>)
 80161b4:	4613      	mov	r3, r2
 80161b6:	011b      	lsls	r3, r3, #4
 80161b8:	1a9b      	subs	r3, r3, r2
 80161ba:	009b      	lsls	r3, r3, #2
 80161bc:	440b      	add	r3, r1
 80161be:	3308      	adds	r3, #8
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	f44f 7284 	mov.w	r2, #264	; 0x108
 80161c6:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 80161c8:	79fa      	ldrb	r2, [r7, #7]
 80161ca:	4928      	ldr	r1, [pc, #160]	; (801626c <PORTx_IRQHandler+0x3cc>)
 80161cc:	4613      	mov	r3, r2
 80161ce:	011b      	lsls	r3, r3, #4
 80161d0:	1a9b      	subs	r3, r3, r2
 80161d2:	009b      	lsls	r3, r3, #2
 80161d4:	440b      	add	r3, r1
 80161d6:	3308      	adds	r3, #8
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	6819      	ldr	r1, [r3, #0]
 80161dc:	79fa      	ldrb	r2, [r7, #7]
 80161de:	4823      	ldr	r0, [pc, #140]	; (801626c <PORTx_IRQHandler+0x3cc>)
 80161e0:	4613      	mov	r3, r2
 80161e2:	011b      	lsls	r3, r3, #4
 80161e4:	1a9b      	subs	r3, r3, r2
 80161e6:	009b      	lsls	r3, r3, #2
 80161e8:	4403      	add	r3, r0
 80161ea:	3308      	adds	r3, #8
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	f041 0201 	orr.w	r2, r1, #1
 80161f2:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d113      	bne.n	8016226 <PORTx_IRQHandler+0x386>
 80161fe:	4b1c      	ldr	r3, [pc, #112]	; (8016270 <PORTx_IRQHandler+0x3d0>)
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d10f      	bne.n	8016226 <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8016206:	79fa      	ldrb	r2, [r7, #7]
 8016208:	4918      	ldr	r1, [pc, #96]	; (801626c <PORTx_IRQHandler+0x3cc>)
 801620a:	4613      	mov	r3, r2
 801620c:	011b      	lsls	r3, r3, #4
 801620e:	1a9b      	subs	r3, r3, r2
 8016210:	009b      	lsls	r3, r3, #2
 8016212:	440b      	add	r3, r1
 8016214:	3320      	adds	r3, #32
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	68fa      	ldr	r2, [r7, #12]
 801621a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801621c:	f002 0107 	and.w	r1, r2, #7
 8016220:	79fa      	ldrb	r2, [r7, #7]
 8016222:	4610      	mov	r0, r2
 8016224:	4798      	blx	r3
      }
      ovrflag = 0;
 8016226:	4b12      	ldr	r3, [pc, #72]	; (8016270 <PORTx_IRQHandler+0x3d0>)
 8016228:	2200      	movs	r2, #0
 801622a:	701a      	strb	r2, [r3, #0]
      return;
 801622c:	e01a      	b.n	8016264 <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016234:	2b00      	cmp	r3, #0
 8016236:	d104      	bne.n	8016242 <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8016238:	68bb      	ldr	r3, [r7, #8]
 801623a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801623e:	2b00      	cmp	r3, #0
 8016240:	d010      	beq.n	8016264 <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8016242:	68f8      	ldr	r0, [r7, #12]
 8016244:	f7ff fd75 	bl	8015d32 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8016248:	68f8      	ldr	r0, [r7, #12]
 801624a:	f7ff fd62 	bl	8015d12 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 801624e:	79fa      	ldrb	r2, [r7, #7]
 8016250:	4906      	ldr	r1, [pc, #24]	; (801626c <PORTx_IRQHandler+0x3cc>)
 8016252:	4613      	mov	r3, r2
 8016254:	011b      	lsls	r3, r3, #4
 8016256:	1a9b      	subs	r3, r3, r2
 8016258:	009b      	lsls	r3, r3, #2
 801625a:	440b      	add	r3, r1
 801625c:	332c      	adds	r3, #44	; 0x2c
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 8016262:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 8016264:	3710      	adds	r7, #16
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}
 801626a:	bf00      	nop
 801626c:	20001650 	.word	0x20001650
 8016270:	20001644 	.word	0x20001644

08016274 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 8016274:	b480      	push	{r7}
 8016276:	b085      	sub	sp, #20
 8016278:	af00      	add	r7, sp, #0
 801627a:	60b9      	str	r1, [r7, #8]
 801627c:	607a      	str	r2, [r7, #4]
 801627e:	603b      	str	r3, [r7, #0]
 8016280:	4603      	mov	r3, r0
 8016282:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 8016284:	7bfa      	ldrb	r2, [r7, #15]
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	6919      	ldr	r1, [r3, #16]
 801628a:	482d      	ldr	r0, [pc, #180]	; (8016340 <USBPD_PHY_Init+0xcc>)
 801628c:	4613      	mov	r3, r2
 801628e:	011b      	lsls	r3, r3, #4
 8016290:	1a9b      	subs	r3, r3, r2
 8016292:	009b      	lsls	r3, r3, #2
 8016294:	4403      	add	r3, r0
 8016296:	3314      	adds	r3, #20
 8016298:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 801629a:	7bfa      	ldrb	r2, [r7, #15]
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	68d9      	ldr	r1, [r3, #12]
 80162a0:	4827      	ldr	r0, [pc, #156]	; (8016340 <USBPD_PHY_Init+0xcc>)
 80162a2:	4613      	mov	r3, r2
 80162a4:	011b      	lsls	r3, r3, #4
 80162a6:	1a9b      	subs	r3, r3, r2
 80162a8:	009b      	lsls	r3, r3, #2
 80162aa:	4403      	add	r3, r0
 80162ac:	3318      	adds	r3, #24
 80162ae:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 80162b0:	7bfa      	ldrb	r2, [r7, #15]
 80162b2:	68bb      	ldr	r3, [r7, #8]
 80162b4:	6859      	ldr	r1, [r3, #4]
 80162b6:	4822      	ldr	r0, [pc, #136]	; (8016340 <USBPD_PHY_Init+0xcc>)
 80162b8:	4613      	mov	r3, r2
 80162ba:	011b      	lsls	r3, r3, #4
 80162bc:	1a9b      	subs	r3, r3, r2
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	4403      	add	r3, r0
 80162c2:	331c      	adds	r3, #28
 80162c4:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 80162c6:	7bfa      	ldrb	r2, [r7, #15]
 80162c8:	491d      	ldr	r1, [pc, #116]	; (8016340 <USBPD_PHY_Init+0xcc>)
 80162ca:	4613      	mov	r3, r2
 80162cc:	011b      	lsls	r3, r3, #4
 80162ce:	1a9b      	subs	r3, r3, r2
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	440b      	add	r3, r1
 80162d4:	3320      	adds	r3, #32
 80162d6:	4a1b      	ldr	r2, [pc, #108]	; (8016344 <USBPD_PHY_Init+0xd0>)
 80162d8:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 80162da:	7bfa      	ldrb	r2, [r7, #15]
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	6899      	ldr	r1, [r3, #8]
 80162e0:	4817      	ldr	r0, [pc, #92]	; (8016340 <USBPD_PHY_Init+0xcc>)
 80162e2:	4613      	mov	r3, r2
 80162e4:	011b      	lsls	r3, r3, #4
 80162e6:	1a9b      	subs	r3, r3, r2
 80162e8:	009b      	lsls	r3, r3, #2
 80162ea:	4403      	add	r3, r0
 80162ec:	3324      	adds	r3, #36	; 0x24
 80162ee:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 80162f0:	7bfa      	ldrb	r2, [r7, #15]
 80162f2:	68bb      	ldr	r3, [r7, #8]
 80162f4:	6959      	ldr	r1, [r3, #20]
 80162f6:	4812      	ldr	r0, [pc, #72]	; (8016340 <USBPD_PHY_Init+0xcc>)
 80162f8:	4613      	mov	r3, r2
 80162fa:	011b      	lsls	r3, r3, #4
 80162fc:	1a9b      	subs	r3, r3, r2
 80162fe:	009b      	lsls	r3, r3, #2
 8016300:	4403      	add	r3, r0
 8016302:	3328      	adds	r3, #40	; 0x28
 8016304:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8016306:	7bfa      	ldrb	r2, [r7, #15]
 8016308:	490d      	ldr	r1, [pc, #52]	; (8016340 <USBPD_PHY_Init+0xcc>)
 801630a:	4613      	mov	r3, r2
 801630c:	011b      	lsls	r3, r3, #4
 801630e:	1a9b      	subs	r3, r3, r2
 8016310:	009b      	lsls	r3, r3, #2
 8016312:	440b      	add	r3, r1
 8016314:	3330      	adds	r3, #48	; 0x30
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 801631a:	7bfb      	ldrb	r3, [r7, #15]
 801631c:	4a0a      	ldr	r2, [pc, #40]	; (8016348 <USBPD_PHY_Init+0xd4>)
 801631e:	00db      	lsls	r3, r3, #3
 8016320:	4413      	add	r3, r2
 8016322:	69ba      	ldr	r2, [r7, #24]
 8016324:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 8016326:	7bfb      	ldrb	r3, [r7, #15]
 8016328:	68ba      	ldr	r2, [r7, #8]
 801632a:	6812      	ldr	r2, [r2, #0]
 801632c:	4906      	ldr	r1, [pc, #24]	; (8016348 <USBPD_PHY_Init+0xd4>)
 801632e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 8016332:	2300      	movs	r3, #0
}
 8016334:	4618      	mov	r0, r3
 8016336:	3714      	adds	r7, #20
 8016338:	46bd      	mov	sp, r7
 801633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633e:	4770      	bx	lr
 8016340:	20001650 	.word	0x20001650
 8016344:	080164f5 	.word	0x080164f5
 8016348:	20001648 	.word	0x20001648

0801634c <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 801634c:	b480      	push	{r7}
 801634e:	b083      	sub	sp, #12
 8016350:	af00      	add	r7, sp, #0
 8016352:	4603      	mov	r3, r0
 8016354:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 8016356:	f240 3389 	movw	r3, #905	; 0x389
}
 801635a:	4618      	mov	r0, r3
 801635c:	370c      	adds	r7, #12
 801635e:	46bd      	mov	sp, r7
 8016360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016364:	4770      	bx	lr

08016366 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 8016366:	b480      	push	{r7}
 8016368:	b083      	sub	sp, #12
 801636a:	af00      	add	r7, sp, #0
 801636c:	4603      	mov	r3, r0
 801636e:	71fb      	strb	r3, [r7, #7]
  return 30u;
 8016370:	231e      	movs	r3, #30
}
 8016372:	4618      	mov	r0, r3
 8016374:	370c      	adds	r7, #12
 8016376:	46bd      	mov	sp, r7
 8016378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637c:	4770      	bx	lr

0801637e <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 801637e:	b480      	push	{r7}
 8016380:	b083      	sub	sp, #12
 8016382:	af00      	add	r7, sp, #0
 8016384:	4603      	mov	r3, r0
 8016386:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 8016388:	bf00      	nop
 801638a:	370c      	adds	r7, #12
 801638c:	46bd      	mov	sp, r7
 801638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016392:	4770      	bx	lr

08016394 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	4603      	mov	r3, r0
 801639c:	460a      	mov	r2, r1
 801639e:	71fb      	strb	r3, [r7, #7]
 80163a0:	4613      	mov	r3, r2
 80163a2:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 80163a4:	79b9      	ldrb	r1, [r7, #6]
 80163a6:	79f8      	ldrb	r0, [r7, #7]
 80163a8:	2300      	movs	r3, #0
 80163aa:	2200      	movs	r2, #0
 80163ac:	f000 f805 	bl	80163ba <USBPD_PHY_SendMessage>
 80163b0:	4603      	mov	r3, r0
}
 80163b2:	4618      	mov	r0, r3
 80163b4:	3708      	adds	r7, #8
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}

080163ba <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 80163ba:	b580      	push	{r7, lr}
 80163bc:	b082      	sub	sp, #8
 80163be:	af00      	add	r7, sp, #0
 80163c0:	603a      	str	r2, [r7, #0]
 80163c2:	461a      	mov	r2, r3
 80163c4:	4603      	mov	r3, r0
 80163c6:	71fb      	strb	r3, [r7, #7]
 80163c8:	460b      	mov	r3, r1
 80163ca:	71bb      	strb	r3, [r7, #6]
 80163cc:	4613      	mov	r3, r2
 80163ce:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 80163d0:	88bb      	ldrh	r3, [r7, #4]
 80163d2:	79b9      	ldrb	r1, [r7, #6]
 80163d4:	79f8      	ldrb	r0, [r7, #7]
 80163d6:	683a      	ldr	r2, [r7, #0]
 80163d8:	f000 fb0a 	bl	80169f0 <USBPD_HW_IF_SendBuffer>
 80163dc:	4603      	mov	r3, r0
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3708      	adds	r7, #8
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}

080163e6 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 80163e6:	b580      	push	{r7, lr}
 80163e8:	b082      	sub	sp, #8
 80163ea:	af00      	add	r7, sp, #0
 80163ec:	4603      	mov	r3, r0
 80163ee:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 80163f0:	79fb      	ldrb	r3, [r7, #7]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f000 fc42 	bl	8016c7c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 80163f8:	2300      	movs	r3, #0
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3708      	adds	r7, #8
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}

08016402 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 8016402:	b580      	push	{r7, lr}
 8016404:	b082      	sub	sp, #8
 8016406:	af00      	add	r7, sp, #0
 8016408:	4603      	mov	r3, r0
 801640a:	460a      	mov	r2, r1
 801640c:	71fb      	strb	r3, [r7, #7]
 801640e:	4613      	mov	r3, r2
 8016410:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 8016412:	79bb      	ldrb	r3, [r7, #6]
 8016414:	2b07      	cmp	r3, #7
 8016416:	d103      	bne.n	8016420 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 8016418:	79fb      	ldrb	r3, [r7, #7]
 801641a:	4618      	mov	r0, r3
 801641c:	f000 fab0 	bl	8016980 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 8016420:	2300      	movs	r3, #0
}
 8016422:	4618      	mov	r0, r3
 8016424:	3708      	adds	r7, #8
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}

0801642a <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 801642a:	b580      	push	{r7, lr}
 801642c:	b082      	sub	sp, #8
 801642e:	af00      	add	r7, sp, #0
 8016430:	4603      	mov	r3, r0
 8016432:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 8016434:	79fb      	ldrb	r3, [r7, #7]
 8016436:	4618      	mov	r0, r3
 8016438:	f000 ffbc 	bl	80173b4 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 801643c:	bf00      	nop
 801643e:	3708      	adds	r7, #8
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}

08016444 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b082      	sub	sp, #8
 8016448:	af00      	add	r7, sp, #0
 801644a:	4603      	mov	r3, r0
 801644c:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 801644e:	79fb      	ldrb	r3, [r7, #7]
 8016450:	4618      	mov	r0, r3
 8016452:	f000 ffc7 	bl	80173e4 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 8016456:	bf00      	nop
 8016458:	3708      	adds	r7, #8
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
	...

08016460 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 8016460:	b480      	push	{r7}
 8016462:	b083      	sub	sp, #12
 8016464:	af00      	add	r7, sp, #0
 8016466:	4603      	mov	r3, r0
 8016468:	6039      	str	r1, [r7, #0]
 801646a:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 801646c:	79fb      	ldrb	r3, [r7, #7]
 801646e:	4a05      	ldr	r2, [pc, #20]	; (8016484 <USBPD_PHY_SOPSupported+0x24>)
 8016470:	00db      	lsls	r3, r3, #3
 8016472:	4413      	add	r3, r2
 8016474:	683a      	ldr	r2, [r7, #0]
 8016476:	605a      	str	r2, [r3, #4]
}
 8016478:	bf00      	nop
 801647a:	370c      	adds	r7, #12
 801647c:	46bd      	mov	sp, r7
 801647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016482:	4770      	bx	lr
 8016484:	20001648 	.word	0x20001648

08016488 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	4603      	mov	r3, r0
 8016490:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 8016492:	79fb      	ldrb	r3, [r7, #7]
 8016494:	4618      	mov	r0, r3
 8016496:	f000 ffbd 	bl	8017414 <USBPD_HW_IF_IsResistor_SinkTxOk>
 801649a:	4603      	mov	r3, r0
}
 801649c:	4618      	mov	r0, r3
 801649e:	3708      	adds	r7, #8
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b082      	sub	sp, #8
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	4603      	mov	r3, r0
 80164ac:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 80164ae:	79fb      	ldrb	r3, [r7, #7]
 80164b0:	4618      	mov	r0, r3
 80164b2:	f000 ffef 	bl	8017494 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 80164b6:	bf00      	nop
 80164b8:	3708      	adds	r7, #8
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bd80      	pop	{r7, pc}

080164be <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 80164be:	b580      	push	{r7, lr}
 80164c0:	b082      	sub	sp, #8
 80164c2:	af00      	add	r7, sp, #0
 80164c4:	4603      	mov	r3, r0
 80164c6:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 80164c8:	79fb      	ldrb	r3, [r7, #7]
 80164ca:	4618      	mov	r0, r3
 80164cc:	f000 fd74 	bl	8016fb8 <USBPD_HW_IF_EnableRX>
}
 80164d0:	bf00      	nop
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}

080164d8 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b082      	sub	sp, #8
 80164dc:	af00      	add	r7, sp, #0
 80164de:	4603      	mov	r3, r0
 80164e0:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 80164e2:	79fb      	ldrb	r3, [r7, #7]
 80164e4:	4618      	mov	r0, r3
 80164e6:	f000 fd7d 	bl	8016fe4 <USBPD_HW_IF_DisableRX>
}
 80164ea:	bf00      	nop
 80164ec:	3708      	adds	r7, #8
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
	...

080164f4 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b084      	sub	sp, #16
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	4603      	mov	r3, r0
 80164fc:	6039      	str	r1, [r7, #0]
 80164fe:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8016500:	4a28      	ldr	r2, [pc, #160]	; (80165a4 <PHY_Rx_Completed+0xb0>)
 8016502:	f107 0308 	add.w	r3, r7, #8
 8016506:	e892 0003 	ldmia.w	r2, {r0, r1}
 801650a:	6018      	str	r0, [r3, #0]
 801650c:	3304      	adds	r3, #4
 801650e:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8016510:	f107 0208 	add.w	r2, r7, #8
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	4413      	add	r3, r2
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	73fb      	strb	r3, [r7, #15]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 801651c:	7bfb      	ldrb	r3, [r7, #15]
 801651e:	2b04      	cmp	r3, #4
 8016520:	dc02      	bgt.n	8016528 <PHY_Rx_Completed+0x34>
 8016522:	2b00      	cmp	r3, #0
 8016524:	da19      	bge.n	801655a <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 8016526:	e034      	b.n	8016592 <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 8016528:	2b06      	cmp	r3, #6
 801652a:	d132      	bne.n	8016592 <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 801652c:	79fb      	ldrb	r3, [r7, #7]
 801652e:	4a1e      	ldr	r2, [pc, #120]	; (80165a8 <PHY_Rx_Completed+0xb4>)
 8016530:	00db      	lsls	r3, r3, #3
 8016532:	4413      	add	r3, r2
 8016534:	685b      	ldr	r3, [r3, #4]
 8016536:	f003 031e 	and.w	r3, r3, #30
 801653a:	2b1e      	cmp	r3, #30
 801653c:	d12b      	bne.n	8016596 <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 801653e:	79fa      	ldrb	r2, [r7, #7]
 8016540:	491a      	ldr	r1, [pc, #104]	; (80165ac <PHY_Rx_Completed+0xb8>)
 8016542:	4613      	mov	r3, r2
 8016544:	011b      	lsls	r3, r3, #4
 8016546:	1a9b      	subs	r3, r3, r2
 8016548:	009b      	lsls	r3, r3, #2
 801654a:	440b      	add	r3, r1
 801654c:	331c      	adds	r3, #28
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	79fa      	ldrb	r2, [r7, #7]
 8016552:	2106      	movs	r1, #6
 8016554:	4610      	mov	r0, r2
 8016556:	4798      	blx	r3
      break;
 8016558:	e01d      	b.n	8016596 <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 801655a:	7bfb      	ldrb	r3, [r7, #15]
 801655c:	2201      	movs	r2, #1
 801655e:	fa02 f303 	lsl.w	r3, r2, r3
 8016562:	b2db      	uxtb	r3, r3
 8016564:	4618      	mov	r0, r3
 8016566:	79fb      	ldrb	r3, [r7, #7]
 8016568:	4a0f      	ldr	r2, [pc, #60]	; (80165a8 <PHY_Rx_Completed+0xb4>)
 801656a:	00db      	lsls	r3, r3, #3
 801656c:	4413      	add	r3, r2
 801656e:	685b      	ldr	r3, [r3, #4]
 8016570:	7bfa      	ldrb	r2, [r7, #15]
 8016572:	2101      	movs	r1, #1
 8016574:	fa01 f202 	lsl.w	r2, r1, r2
 8016578:	b2d2      	uxtb	r2, r2
 801657a:	4013      	ands	r3, r2
 801657c:	4298      	cmp	r0, r3
 801657e:	d10c      	bne.n	801659a <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 8016580:	79fb      	ldrb	r3, [r7, #7]
 8016582:	4a09      	ldr	r2, [pc, #36]	; (80165a8 <PHY_Rx_Completed+0xb4>)
 8016584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016588:	7bf9      	ldrb	r1, [r7, #15]
 801658a:	79fa      	ldrb	r2, [r7, #7]
 801658c:	4610      	mov	r0, r2
 801658e:	4798      	blx	r3
      break;
 8016590:	e003      	b.n	801659a <PHY_Rx_Completed+0xa6>
      break;
 8016592:	bf00      	nop
 8016594:	e002      	b.n	801659c <PHY_Rx_Completed+0xa8>
      break;
 8016596:	bf00      	nop
 8016598:	e000      	b.n	801659c <PHY_Rx_Completed+0xa8>
      break;
 801659a:	bf00      	nop
  }
}
 801659c:	bf00      	nop
 801659e:	3710      	adds	r7, #16
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	080202c0 	.word	0x080202c0
 80165a8:	20001648 	.word	0x20001648
 80165ac:	20001650 	.word	0x20001650

080165b0 <LL_AHB1_GRP1_EnableClock>:
{
 80165b0:	b480      	push	{r7}
 80165b2:	b085      	sub	sp, #20
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80165b8:	4b08      	ldr	r3, [pc, #32]	; (80165dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80165ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80165bc:	4907      	ldr	r1, [pc, #28]	; (80165dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	4313      	orrs	r3, r2
 80165c2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80165c4:	4b05      	ldr	r3, [pc, #20]	; (80165dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80165c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	4013      	ands	r3, r2
 80165cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80165ce:	68fb      	ldr	r3, [r7, #12]
}
 80165d0:	bf00      	nop
 80165d2:	3714      	adds	r7, #20
 80165d4:	46bd      	mov	sp, r7
 80165d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165da:	4770      	bx	lr
 80165dc:	40021000 	.word	0x40021000

080165e0 <LL_APB1_GRP1_EnableClock>:
{
 80165e0:	b480      	push	{r7}
 80165e2:	b085      	sub	sp, #20
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80165e8:	4b08      	ldr	r3, [pc, #32]	; (801660c <LL_APB1_GRP1_EnableClock+0x2c>)
 80165ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80165ec:	4907      	ldr	r1, [pc, #28]	; (801660c <LL_APB1_GRP1_EnableClock+0x2c>)
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	4313      	orrs	r3, r2
 80165f2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80165f4:	4b05      	ldr	r3, [pc, #20]	; (801660c <LL_APB1_GRP1_EnableClock+0x2c>)
 80165f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	4013      	ands	r3, r2
 80165fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80165fe:	68fb      	ldr	r3, [r7, #12]
}
 8016600:	bf00      	nop
 8016602:	3714      	adds	r7, #20
 8016604:	46bd      	mov	sp, r7
 8016606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660a:	4770      	bx	lr
 801660c:	40021000 	.word	0x40021000

08016610 <LL_UCPD_Enable>:
{
 8016610:	b480      	push	{r7}
 8016612:	b083      	sub	sp, #12
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	601a      	str	r2, [r3, #0]
}
 8016624:	bf00      	nop
 8016626:	370c      	adds	r7, #12
 8016628:	46bd      	mov	sp, r7
 801662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662e:	4770      	bx	lr

08016630 <LL_UCPD_Disable>:
{
 8016630:	b480      	push	{r7}
 8016632:	b083      	sub	sp, #12
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	601a      	str	r2, [r3, #0]
}
 8016644:	bf00      	nop
 8016646:	370c      	adds	r7, #12
 8016648:	46bd      	mov	sp, r7
 801664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664e:	4770      	bx	lr

08016650 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8016650:	b480      	push	{r7}
 8016652:	b083      	sub	sp, #12
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	68db      	ldr	r3, [r3, #12]
 801665c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	60da      	str	r2, [r3, #12]
}
 8016664:	bf00      	nop
 8016666:	370c      	adds	r7, #12
 8016668:	46bd      	mov	sp, r7
 801666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666e:	4770      	bx	lr

08016670 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8016670:	b480      	push	{r7}
 8016672:	b083      	sub	sp, #12
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	68db      	ldr	r3, [r3, #12]
 801667c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	60da      	str	r2, [r3, #12]
}
 8016684:	bf00      	nop
 8016686:	370c      	adds	r7, #12
 8016688:	46bd      	mov	sp, r7
 801668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668e:	4770      	bx	lr

08016690 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8016690:	b480      	push	{r7}
 8016692:	b083      	sub	sp, #12
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	68db      	ldr	r3, [r3, #12]
 801669c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	60da      	str	r2, [r3, #12]
}
 80166a4:	bf00      	nop
 80166a6:	370c      	adds	r7, #12
 80166a8:	46bd      	mov	sp, r7
 80166aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ae:	4770      	bx	lr

080166b0 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 80166b0:	b480      	push	{r7}
 80166b2:	b083      	sub	sp, #12
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	68db      	ldr	r3, [r3, #12]
 80166bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	60da      	str	r2, [r3, #12]
}
 80166c4:	bf00      	nop
 80166c6:	370c      	adds	r7, #12
 80166c8:	46bd      	mov	sp, r7
 80166ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ce:	4770      	bx	lr

080166d0 <LL_UCPD_SignalFRSTX>:
{
 80166d0:	b480      	push	{r7}
 80166d2:	b083      	sub	sp, #12
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	68db      	ldr	r3, [r3, #12]
 80166dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	60da      	str	r2, [r3, #12]
}
 80166e4:	bf00      	nop
 80166e6:	370c      	adds	r7, #12
 80166e8:	46bd      	mov	sp, r7
 80166ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ee:	4770      	bx	lr

080166f0 <LL_UCPD_FRSDetectionEnable>:
{
 80166f0:	b480      	push	{r7}
 80166f2:	b083      	sub	sp, #12
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	68db      	ldr	r3, [r3, #12]
 80166fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	60da      	str	r2, [r3, #12]
}
 8016704:	bf00      	nop
 8016706:	370c      	adds	r7, #12
 8016708:	46bd      	mov	sp, r7
 801670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670e:	4770      	bx	lr

08016710 <LL_UCPD_FRSDetectionDisable>:
{
 8016710:	b480      	push	{r7}
 8016712:	b083      	sub	sp, #12
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	68db      	ldr	r3, [r3, #12]
 801671c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	60da      	str	r2, [r3, #12]
}
 8016724:	bf00      	nop
 8016726:	370c      	adds	r7, #12
 8016728:	46bd      	mov	sp, r7
 801672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672e:	4770      	bx	lr

08016730 <LL_UCPD_SetccEnable>:
{
 8016730:	b480      	push	{r7}
 8016732:	b083      	sub	sp, #12
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
 8016738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	68db      	ldr	r3, [r3, #12]
 801673e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	431a      	orrs	r2, r3
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	60da      	str	r2, [r3, #12]
}
 801674a:	bf00      	nop
 801674c:	370c      	adds	r7, #12
 801674e:	46bd      	mov	sp, r7
 8016750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016754:	4770      	bx	lr

08016756 <LL_UCPD_SetSNKRole>:
{
 8016756:	b480      	push	{r7}
 8016758:	b083      	sub	sp, #12
 801675a:	af00      	add	r7, sp, #0
 801675c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	68db      	ldr	r3, [r3, #12]
 8016762:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	60da      	str	r2, [r3, #12]
}
 801676a:	bf00      	nop
 801676c:	370c      	adds	r7, #12
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr

08016776 <LL_UCPD_SetSRCRole>:
{
 8016776:	b480      	push	{r7}
 8016778:	b083      	sub	sp, #12
 801677a:	af00      	add	r7, sp, #0
 801677c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	68db      	ldr	r3, [r3, #12]
 8016782:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	60da      	str	r2, [r3, #12]
}
 801678a:	bf00      	nop
 801678c:	370c      	adds	r7, #12
 801678e:	46bd      	mov	sp, r7
 8016790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016794:	4770      	bx	lr

08016796 <LL_UCPD_SetRpResistor>:
{
 8016796:	b480      	push	{r7}
 8016798:	b083      	sub	sp, #12
 801679a:	af00      	add	r7, sp, #0
 801679c:	6078      	str	r0, [r7, #4]
 801679e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	f423 72c0 	bic.w	r2, r3, #384	; 0x180
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	431a      	orrs	r2, r3
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	60da      	str	r2, [r3, #12]
}
 80167b0:	bf00      	nop
 80167b2:	370c      	adds	r7, #12
 80167b4:	46bd      	mov	sp, r7
 80167b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ba:	4770      	bx	lr

080167bc <LL_UCPD_SetCCPin>:
{
 80167bc:	b480      	push	{r7}
 80167be:	b083      	sub	sp, #12
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	68db      	ldr	r3, [r3, #12]
 80167ca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	431a      	orrs	r2, r3
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	60da      	str	r2, [r3, #12]
}
 80167d6:	bf00      	nop
 80167d8:	370c      	adds	r7, #12
 80167da:	46bd      	mov	sp, r7
 80167dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e0:	4770      	bx	lr

080167e2 <LL_UCPD_RxEnable>:
{
 80167e2:	b480      	push	{r7}
 80167e4:	b083      	sub	sp, #12
 80167e6:	af00      	add	r7, sp, #0
 80167e8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	68db      	ldr	r3, [r3, #12]
 80167ee:	f043 0220 	orr.w	r2, r3, #32
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	60da      	str	r2, [r3, #12]
}
 80167f6:	bf00      	nop
 80167f8:	370c      	adds	r7, #12
 80167fa:	46bd      	mov	sp, r7
 80167fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016800:	4770      	bx	lr

08016802 <LL_UCPD_RxDisable>:
{
 8016802:	b480      	push	{r7}
 8016804:	b083      	sub	sp, #12
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	68db      	ldr	r3, [r3, #12]
 801680e:	f023 0220 	bic.w	r2, r3, #32
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	60da      	str	r2, [r3, #12]
}
 8016816:	bf00      	nop
 8016818:	370c      	adds	r7, #12
 801681a:	46bd      	mov	sp, r7
 801681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016820:	4770      	bx	lr

08016822 <LL_UCPD_SetRxMode>:
{
 8016822:	b480      	push	{r7}
 8016824:	b083      	sub	sp, #12
 8016826:	af00      	add	r7, sp, #0
 8016828:	6078      	str	r0, [r7, #4]
 801682a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	68db      	ldr	r3, [r3, #12]
 8016830:	f023 0210 	bic.w	r2, r3, #16
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	431a      	orrs	r2, r3
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	60da      	str	r2, [r3, #12]
}
 801683c:	bf00      	nop
 801683e:	370c      	adds	r7, #12
 8016840:	46bd      	mov	sp, r7
 8016842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016846:	4770      	bx	lr

08016848 <LL_UCPD_SendHardReset>:
{
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	68db      	ldr	r3, [r3, #12]
 8016854:	f043 0208 	orr.w	r2, r3, #8
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	60da      	str	r2, [r3, #12]
}
 801685c:	bf00      	nop
 801685e:	370c      	adds	r7, #12
 8016860:	46bd      	mov	sp, r7
 8016862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016866:	4770      	bx	lr

08016868 <LL_UCPD_SendMessage>:
{
 8016868:	b480      	push	{r7}
 801686a:	b083      	sub	sp, #12
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	68db      	ldr	r3, [r3, #12]
 8016874:	f043 0204 	orr.w	r2, r3, #4
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	60da      	str	r2, [r3, #12]
}
 801687c:	bf00      	nop
 801687e:	370c      	adds	r7, #12
 8016880:	46bd      	mov	sp, r7
 8016882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016886:	4770      	bx	lr

08016888 <LL_UCPD_SetTxMode>:
{
 8016888:	b480      	push	{r7}
 801688a:	b083      	sub	sp, #12
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
 8016890:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	68db      	ldr	r3, [r3, #12]
 8016896:	f023 0203 	bic.w	r2, r3, #3
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	431a      	orrs	r2, r3
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	60da      	str	r2, [r3, #12]
}
 80168a2:	bf00      	nop
 80168a4:	370c      	adds	r7, #12
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80168ae:	b480      	push	{r7}
 80168b0:	b083      	sub	sp, #12
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	601a      	str	r2, [r3, #0]
}
 80168c2:	bf00      	nop
 80168c4:	370c      	adds	r7, #12
 80168c6:	46bd      	mov	sp, r7
 80168c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168cc:	4770      	bx	lr

080168ce <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 80168ce:	b480      	push	{r7}
 80168d0:	b083      	sub	sp, #12
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	601a      	str	r2, [r3, #0]
}
 80168e2:	bf00      	nop
 80168e4:	370c      	adds	r7, #12
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr

080168ee <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80168ee:	b480      	push	{r7}
 80168f0:	b083      	sub	sp, #12
 80168f2:	af00      	add	r7, sp, #0
 80168f4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	601a      	str	r2, [r3, #0]
}
 8016902:	bf00      	nop
 8016904:	370c      	adds	r7, #12
 8016906:	46bd      	mov	sp, r7
 8016908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690c:	4770      	bx	lr

0801690e <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 801690e:	b480      	push	{r7}
 8016910:	b083      	sub	sp, #12
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	601a      	str	r2, [r3, #0]
}
 8016922:	bf00      	nop
 8016924:	370c      	adds	r7, #12
 8016926:	46bd      	mov	sp, r7
 8016928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692c:	4770      	bx	lr

0801692e <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 801692e:	b480      	push	{r7}
 8016930:	b083      	sub	sp, #12
 8016932:	af00      	add	r7, sp, #0
 8016934:	6078      	str	r0, [r7, #4]
 8016936:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	683a      	ldr	r2, [r7, #0]
 801693c:	61da      	str	r2, [r3, #28]
}
 801693e:	bf00      	nop
 8016940:	370c      	adds	r7, #12
 8016942:	46bd      	mov	sp, r7
 8016944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016948:	4770      	bx	lr

0801694a <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 801694a:	b480      	push	{r7}
 801694c:	b083      	sub	sp, #12
 801694e:	af00      	add	r7, sp, #0
 8016950:	6078      	str	r0, [r7, #4]
 8016952:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	683a      	ldr	r2, [r7, #0]
 8016958:	621a      	str	r2, [r3, #32]
}
 801695a:	bf00      	nop
 801695c:	370c      	adds	r7, #12
 801695e:	46bd      	mov	sp, r7
 8016960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016964:	4770      	bx	lr

08016966 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8016966:	b580      	push	{r7, lr}
 8016968:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 801696a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801696e:	f7ff fe37 	bl	80165e0 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8016972:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8016976:	f7ff fe1b 	bl	80165b0 <LL_AHB1_GRP1_EnableClock>
}
 801697a:	bf00      	nop
 801697c:	bd80      	pop	{r7, pc}
	...

08016980 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b084      	sub	sp, #16
 8016984:	af00      	add	r7, sp, #0
 8016986:	4603      	mov	r3, r0
 8016988:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 801698a:	79fa      	ldrb	r2, [r7, #7]
 801698c:	4917      	ldr	r1, [pc, #92]	; (80169ec <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801698e:	4613      	mov	r3, r2
 8016990:	011b      	lsls	r3, r3, #4
 8016992:	1a9b      	subs	r3, r3, r2
 8016994:	009b      	lsls	r3, r3, #2
 8016996:	440b      	add	r3, r1
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	68db      	ldr	r3, [r3, #12]
 801699c:	f023 0307 	bic.w	r3, r3, #7
 80169a0:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 80169a2:	79fa      	ldrb	r2, [r7, #7]
 80169a4:	4911      	ldr	r1, [pc, #68]	; (80169ec <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80169a6:	4613      	mov	r3, r2
 80169a8:	011b      	lsls	r3, r3, #4
 80169aa:	1a9b      	subs	r3, r3, r2
 80169ac:	009b      	lsls	r3, r3, #2
 80169ae:	440b      	add	r3, r1
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	4618      	mov	r0, r3
 80169b4:	f7ff fe3c 	bl	8016630 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 80169b8:	79fa      	ldrb	r2, [r7, #7]
 80169ba:	490c      	ldr	r1, [pc, #48]	; (80169ec <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80169bc:	4613      	mov	r3, r2
 80169be:	011b      	lsls	r3, r3, #4
 80169c0:	1a9b      	subs	r3, r3, r2
 80169c2:	009b      	lsls	r3, r3, #2
 80169c4:	440b      	add	r3, r1
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7ff fe21 	bl	8016610 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 80169ce:	79fa      	ldrb	r2, [r7, #7]
 80169d0:	4906      	ldr	r1, [pc, #24]	; (80169ec <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80169d2:	4613      	mov	r3, r2
 80169d4:	011b      	lsls	r3, r3, #4
 80169d6:	1a9b      	subs	r3, r3, r2
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	440b      	add	r3, r1
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	68fa      	ldr	r2, [r7, #12]
 80169e0:	60da      	str	r2, [r3, #12]
}
 80169e2:	bf00      	nop
 80169e4:	3710      	adds	r7, #16
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}
 80169ea:	bf00      	nop
 80169ec:	20001650 	.word	0x20001650

080169f0 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b08a      	sub	sp, #40	; 0x28
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	60ba      	str	r2, [r7, #8]
 80169f8:	607b      	str	r3, [r7, #4]
 80169fa:	4603      	mov	r3, r0
 80169fc:	73fb      	strb	r3, [r7, #15]
 80169fe:	460b      	mov	r3, r1
 8016a00:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8016a02:	2300      	movs	r3, #0
 8016a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8016a08:	7bbb      	ldrb	r3, [r7, #14]
 8016a0a:	2b05      	cmp	r3, #5
 8016a0c:	d10b      	bne.n	8016a26 <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8016a0e:	7bfa      	ldrb	r2, [r7, #15]
 8016a10:	4996      	ldr	r1, [pc, #600]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016a12:	4613      	mov	r3, r2
 8016a14:	011b      	lsls	r3, r3, #4
 8016a16:	1a9b      	subs	r3, r3, r2
 8016a18:	009b      	lsls	r3, r3, #2
 8016a1a:	440b      	add	r3, r1
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	4618      	mov	r0, r3
 8016a20:	f7ff ff12 	bl	8016848 <LL_UCPD_SendHardReset>
 8016a24:	e11b      	b.n	8016c5e <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a26:	f3ef 8310 	mrs	r3, PRIMASK
 8016a2a:	61fb      	str	r3, [r7, #28]
  return(result);
 8016a2c:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8016a2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8016a30:	b672      	cpsid	i
}
 8016a32:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8016a34:	7bfa      	ldrb	r2, [r7, #15]
 8016a36:	498d      	ldr	r1, [pc, #564]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016a38:	4613      	mov	r3, r2
 8016a3a:	011b      	lsls	r3, r3, #4
 8016a3c:	1a9b      	subs	r3, r3, r2
 8016a3e:	009b      	lsls	r3, r3, #2
 8016a40:	440b      	add	r3, r1
 8016a42:	3338      	adds	r3, #56	; 0x38
 8016a44:	781b      	ldrb	r3, [r3, #0]
 8016a46:	b2db      	uxtb	r3, r3
 8016a48:	2b01      	cmp	r3, #1
 8016a4a:	d00d      	beq.n	8016a68 <USBPD_HW_IF_SendBuffer+0x78>
 8016a4c:	7bfa      	ldrb	r2, [r7, #15]
 8016a4e:	4987      	ldr	r1, [pc, #540]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016a50:	4613      	mov	r3, r2
 8016a52:	011b      	lsls	r3, r3, #4
 8016a54:	1a9b      	subs	r3, r3, r2
 8016a56:	009b      	lsls	r3, r3, #2
 8016a58:	440b      	add	r3, r1
 8016a5a:	3304      	adds	r3, #4
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	f003 0301 	and.w	r3, r3, #1
 8016a64:	2b01      	cmp	r3, #1
 8016a66:	d109      	bne.n	8016a7c <USBPD_HW_IF_SendBuffer+0x8c>
 8016a68:	6a3b      	ldr	r3, [r7, #32]
 8016a6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	f383 8810 	msr	PRIMASK, r3
}
 8016a72:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8016a74:	2302      	movs	r3, #2
 8016a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a7a:	e0f0      	b.n	8016c5e <USBPD_HW_IF_SendBuffer+0x26e>
 8016a7c:	6a3b      	ldr	r3, [r7, #32]
 8016a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	f383 8810 	msr	PRIMASK, r3
}
 8016a86:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8016a88:	7bbb      	ldrb	r3, [r7, #14]
 8016a8a:	2b07      	cmp	r3, #7
 8016a8c:	d877      	bhi.n	8016b7e <USBPD_HW_IF_SendBuffer+0x18e>
 8016a8e:	a201      	add	r2, pc, #4	; (adr r2, 8016a94 <USBPD_HW_IF_SendBuffer+0xa4>)
 8016a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a94:	08016ab5 	.word	0x08016ab5
 8016a98:	08016ae7 	.word	0x08016ae7
 8016a9c:	08016b19 	.word	0x08016b19
 8016aa0:	08016b7f 	.word	0x08016b7f
 8016aa4:	08016b7f 	.word	0x08016b7f
 8016aa8:	08016b7f 	.word	0x08016b7f
 8016aac:	08016b4b 	.word	0x08016b4b
 8016ab0:	08016b65 	.word	0x08016b65
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8016ab4:	7bfa      	ldrb	r2, [r7, #15]
 8016ab6:	496d      	ldr	r1, [pc, #436]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016ab8:	4613      	mov	r3, r2
 8016aba:	011b      	lsls	r3, r3, #4
 8016abc:	1a9b      	subs	r3, r3, r2
 8016abe:	009b      	lsls	r3, r3, #2
 8016ac0:	440b      	add	r3, r1
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	496a      	ldr	r1, [pc, #424]	; (8016c70 <USBPD_HW_IF_SendBuffer+0x280>)
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f7ff ff31 	bl	801692e <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8016acc:	7bfa      	ldrb	r2, [r7, #15]
 8016ace:	4967      	ldr	r1, [pc, #412]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	011b      	lsls	r3, r3, #4
 8016ad4:	1a9b      	subs	r3, r3, r2
 8016ad6:	009b      	lsls	r3, r3, #2
 8016ad8:	440b      	add	r3, r1
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	2100      	movs	r1, #0
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7ff fed2 	bl	8016888 <LL_UCPD_SetTxMode>
          break;
 8016ae4:	e04f      	b.n	8016b86 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8016ae6:	7bfa      	ldrb	r2, [r7, #15]
 8016ae8:	4960      	ldr	r1, [pc, #384]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016aea:	4613      	mov	r3, r2
 8016aec:	011b      	lsls	r3, r3, #4
 8016aee:	1a9b      	subs	r3, r3, r2
 8016af0:	009b      	lsls	r3, r3, #2
 8016af2:	440b      	add	r3, r1
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	495f      	ldr	r1, [pc, #380]	; (8016c74 <USBPD_HW_IF_SendBuffer+0x284>)
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7ff ff18 	bl	801692e <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8016afe:	7bfa      	ldrb	r2, [r7, #15]
 8016b00:	495a      	ldr	r1, [pc, #360]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016b02:	4613      	mov	r3, r2
 8016b04:	011b      	lsls	r3, r3, #4
 8016b06:	1a9b      	subs	r3, r3, r2
 8016b08:	009b      	lsls	r3, r3, #2
 8016b0a:	440b      	add	r3, r1
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	2100      	movs	r1, #0
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7ff feb9 	bl	8016888 <LL_UCPD_SetTxMode>
          break;
 8016b16:	e036      	b.n	8016b86 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8016b18:	7bfa      	ldrb	r2, [r7, #15]
 8016b1a:	4954      	ldr	r1, [pc, #336]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	011b      	lsls	r3, r3, #4
 8016b20:	1a9b      	subs	r3, r3, r2
 8016b22:	009b      	lsls	r3, r3, #2
 8016b24:	440b      	add	r3, r1
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	4953      	ldr	r1, [pc, #332]	; (8016c78 <USBPD_HW_IF_SendBuffer+0x288>)
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f7ff feff 	bl	801692e <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8016b30:	7bfa      	ldrb	r2, [r7, #15]
 8016b32:	494e      	ldr	r1, [pc, #312]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016b34:	4613      	mov	r3, r2
 8016b36:	011b      	lsls	r3, r3, #4
 8016b38:	1a9b      	subs	r3, r3, r2
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	440b      	add	r3, r1
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	2100      	movs	r1, #0
 8016b42:	4618      	mov	r0, r3
 8016b44:	f7ff fea0 	bl	8016888 <LL_UCPD_SetTxMode>
          break;
 8016b48:	e01d      	b.n	8016b86 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8016b4a:	7bfa      	ldrb	r2, [r7, #15]
 8016b4c:	4947      	ldr	r1, [pc, #284]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016b4e:	4613      	mov	r3, r2
 8016b50:	011b      	lsls	r3, r3, #4
 8016b52:	1a9b      	subs	r3, r3, r2
 8016b54:	009b      	lsls	r3, r3, #2
 8016b56:	440b      	add	r3, r1
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	2101      	movs	r1, #1
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7ff fe93 	bl	8016888 <LL_UCPD_SetTxMode>
          break;
 8016b62:	e010      	b.n	8016b86 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8016b64:	7bfa      	ldrb	r2, [r7, #15]
 8016b66:	4941      	ldr	r1, [pc, #260]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016b68:	4613      	mov	r3, r2
 8016b6a:	011b      	lsls	r3, r3, #4
 8016b6c:	1a9b      	subs	r3, r3, r2
 8016b6e:	009b      	lsls	r3, r3, #2
 8016b70:	440b      	add	r3, r1
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	2102      	movs	r1, #2
 8016b76:	4618      	mov	r0, r3
 8016b78:	f7ff fe86 	bl	8016888 <LL_UCPD_SetTxMode>
          break;
 8016b7c:	e003      	b.n	8016b86 <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 8016b7e:	2302      	movs	r3, #2
 8016b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8016b84:	bf00      	nop
      }

      if (USBPD_OK == _status)
 8016b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d167      	bne.n	8016c5e <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016b8e:	7bfa      	ldrb	r2, [r7, #15]
 8016b90:	4936      	ldr	r1, [pc, #216]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016b92:	4613      	mov	r3, r2
 8016b94:	011b      	lsls	r3, r3, #4
 8016b96:	1a9b      	subs	r3, r3, r2
 8016b98:	009b      	lsls	r3, r3, #2
 8016b9a:	440b      	add	r3, r1
 8016b9c:	3304      	adds	r3, #4
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	6819      	ldr	r1, [r3, #0]
 8016ba2:	7bfa      	ldrb	r2, [r7, #15]
 8016ba4:	4831      	ldr	r0, [pc, #196]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016ba6:	4613      	mov	r3, r2
 8016ba8:	011b      	lsls	r3, r3, #4
 8016baa:	1a9b      	subs	r3, r3, r2
 8016bac:	009b      	lsls	r3, r3, #2
 8016bae:	4403      	add	r3, r0
 8016bb0:	3304      	adds	r3, #4
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	f021 0201 	bic.w	r2, r1, #1
 8016bb8:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8016bba:	bf00      	nop
 8016bbc:	7bfa      	ldrb	r2, [r7, #15]
 8016bbe:	492b      	ldr	r1, [pc, #172]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	011b      	lsls	r3, r3, #4
 8016bc4:	1a9b      	subs	r3, r3, r2
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	440b      	add	r3, r1
 8016bca:	3304      	adds	r3, #4
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	f003 0301 	and.w	r3, r3, #1
 8016bd4:	2b01      	cmp	r3, #1
 8016bd6:	d0f1      	beq.n	8016bbc <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8016bd8:	7bfa      	ldrb	r2, [r7, #15]
 8016bda:	4924      	ldr	r1, [pc, #144]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016bdc:	4613      	mov	r3, r2
 8016bde:	011b      	lsls	r3, r3, #4
 8016be0:	1a9b      	subs	r3, r3, r2
 8016be2:	009b      	lsls	r3, r3, #2
 8016be4:	440b      	add	r3, r1
 8016be6:	3304      	adds	r3, #4
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	68ba      	ldr	r2, [r7, #8]
 8016bec:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8016bee:	7bfa      	ldrb	r2, [r7, #15]
 8016bf0:	491e      	ldr	r1, [pc, #120]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016bf2:	4613      	mov	r3, r2
 8016bf4:	011b      	lsls	r3, r3, #4
 8016bf6:	1a9b      	subs	r3, r3, r2
 8016bf8:	009b      	lsls	r3, r3, #2
 8016bfa:	440b      	add	r3, r1
 8016bfc:	3304      	adds	r3, #4
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	687a      	ldr	r2, [r7, #4]
 8016c02:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016c04:	7bfa      	ldrb	r2, [r7, #15]
 8016c06:	4919      	ldr	r1, [pc, #100]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016c08:	4613      	mov	r3, r2
 8016c0a:	011b      	lsls	r3, r3, #4
 8016c0c:	1a9b      	subs	r3, r3, r2
 8016c0e:	009b      	lsls	r3, r3, #2
 8016c10:	440b      	add	r3, r1
 8016c12:	3304      	adds	r3, #4
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	6819      	ldr	r1, [r3, #0]
 8016c18:	7bfa      	ldrb	r2, [r7, #15]
 8016c1a:	4814      	ldr	r0, [pc, #80]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016c1c:	4613      	mov	r3, r2
 8016c1e:	011b      	lsls	r3, r3, #4
 8016c20:	1a9b      	subs	r3, r3, r2
 8016c22:	009b      	lsls	r3, r3, #2
 8016c24:	4403      	add	r3, r0
 8016c26:	3304      	adds	r3, #4
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	f041 0201 	orr.w	r2, r1, #1
 8016c2e:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8016c30:	7bfa      	ldrb	r2, [r7, #15]
 8016c32:	490e      	ldr	r1, [pc, #56]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016c34:	4613      	mov	r3, r2
 8016c36:	011b      	lsls	r3, r3, #4
 8016c38:	1a9b      	subs	r3, r3, r2
 8016c3a:	009b      	lsls	r3, r3, #2
 8016c3c:	440b      	add	r3, r1
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	6879      	ldr	r1, [r7, #4]
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7ff fe81 	bl	801694a <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8016c48:	7bfa      	ldrb	r2, [r7, #15]
 8016c4a:	4908      	ldr	r1, [pc, #32]	; (8016c6c <USBPD_HW_IF_SendBuffer+0x27c>)
 8016c4c:	4613      	mov	r3, r2
 8016c4e:	011b      	lsls	r3, r3, #4
 8016c50:	1a9b      	subs	r3, r3, r2
 8016c52:	009b      	lsls	r3, r3, #2
 8016c54:	440b      	add	r3, r1
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7ff fe05 	bl	8016868 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8016c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	3728      	adds	r7, #40	; 0x28
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}
 8016c6a:	bf00      	nop
 8016c6c:	20001650 	.word	0x20001650
 8016c70:	0008e318 	.word	0x0008e318
 8016c74:	00031b18 	.word	0x00031b18
 8016c78:	000360d8 	.word	0x000360d8

08016c7c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	4603      	mov	r3, r0
 8016c84:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8016c86:	79fa      	ldrb	r2, [r7, #7]
 8016c88:	490c      	ldr	r1, [pc, #48]	; (8016cbc <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8016c8a:	4613      	mov	r3, r2
 8016c8c:	011b      	lsls	r3, r3, #4
 8016c8e:	1a9b      	subs	r3, r3, r2
 8016c90:	009b      	lsls	r3, r3, #2
 8016c92:	440b      	add	r3, r1
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	2102      	movs	r1, #2
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7ff fdf5 	bl	8016888 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8016c9e:	79fa      	ldrb	r2, [r7, #7]
 8016ca0:	4906      	ldr	r1, [pc, #24]	; (8016cbc <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8016ca2:	4613      	mov	r3, r2
 8016ca4:	011b      	lsls	r3, r3, #4
 8016ca6:	1a9b      	subs	r3, r3, r2
 8016ca8:	009b      	lsls	r3, r3, #2
 8016caa:	440b      	add	r3, r1
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f7ff fdda 	bl	8016868 <LL_UCPD_SendMessage>
}
 8016cb4:	bf00      	nop
 8016cb6:	3708      	adds	r7, #8
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}
 8016cbc:	20001650 	.word	0x20001650

08016cc0 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 8016cca:	79fa      	ldrb	r2, [r7, #7]
 8016ccc:	4946      	ldr	r1, [pc, #280]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016cce:	4613      	mov	r3, r2
 8016cd0:	011b      	lsls	r3, r3, #4
 8016cd2:	1a9b      	subs	r3, r3, r2
 8016cd4:	009b      	lsls	r3, r3, #2
 8016cd6:	440b      	add	r3, r1
 8016cd8:	3310      	adds	r3, #16
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	789b      	ldrb	r3, [r3, #2]
 8016cde:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8016ce2:	b2db      	uxtb	r3, r3
 8016ce4:	2b02      	cmp	r3, #2
 8016ce6:	d021      	beq.n	8016d2c <USBPDM1_AssertRp+0x6c>
 8016ce8:	2b02      	cmp	r3, #2
 8016cea:	dc2d      	bgt.n	8016d48 <USBPDM1_AssertRp+0x88>
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d002      	beq.n	8016cf6 <USBPDM1_AssertRp+0x36>
 8016cf0:	2b01      	cmp	r3, #1
 8016cf2:	d00d      	beq.n	8016d10 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8016cf4:	e028      	b.n	8016d48 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8016cf6:	79fa      	ldrb	r2, [r7, #7]
 8016cf8:	493b      	ldr	r1, [pc, #236]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016cfa:	4613      	mov	r3, r2
 8016cfc:	011b      	lsls	r3, r3, #4
 8016cfe:	1a9b      	subs	r3, r3, r2
 8016d00:	009b      	lsls	r3, r3, #2
 8016d02:	440b      	add	r3, r1
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	2180      	movs	r1, #128	; 0x80
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f7ff fd44 	bl	8016796 <LL_UCPD_SetRpResistor>
      break;
 8016d0e:	e01c      	b.n	8016d4a <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8016d10:	79fa      	ldrb	r2, [r7, #7]
 8016d12:	4935      	ldr	r1, [pc, #212]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016d14:	4613      	mov	r3, r2
 8016d16:	011b      	lsls	r3, r3, #4
 8016d18:	1a9b      	subs	r3, r3, r2
 8016d1a:	009b      	lsls	r3, r3, #2
 8016d1c:	440b      	add	r3, r1
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7ff fd36 	bl	8016796 <LL_UCPD_SetRpResistor>
      break;
 8016d2a:	e00e      	b.n	8016d4a <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8016d2c:	79fa      	ldrb	r2, [r7, #7]
 8016d2e:	492e      	ldr	r1, [pc, #184]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016d30:	4613      	mov	r3, r2
 8016d32:	011b      	lsls	r3, r3, #4
 8016d34:	1a9b      	subs	r3, r3, r2
 8016d36:	009b      	lsls	r3, r3, #2
 8016d38:	440b      	add	r3, r1
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8016d40:	4618      	mov	r0, r3
 8016d42:	f7ff fd28 	bl	8016796 <LL_UCPD_SetRpResistor>
      break;
 8016d46:	e000      	b.n	8016d4a <USBPDM1_AssertRp+0x8a>
      break;
 8016d48:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8016d4a:	79fa      	ldrb	r2, [r7, #7]
 8016d4c:	4926      	ldr	r1, [pc, #152]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016d4e:	4613      	mov	r3, r2
 8016d50:	011b      	lsls	r3, r3, #4
 8016d52:	1a9b      	subs	r3, r3, r2
 8016d54:	009b      	lsls	r3, r3, #2
 8016d56:	440b      	add	r3, r1
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	2100      	movs	r1, #0
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7ff fce7 	bl	8016730 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8016d62:	79fa      	ldrb	r2, [r7, #7]
 8016d64:	4920      	ldr	r1, [pc, #128]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016d66:	4613      	mov	r3, r2
 8016d68:	011b      	lsls	r3, r3, #4
 8016d6a:	1a9b      	subs	r3, r3, r2
 8016d6c:	009b      	lsls	r3, r3, #2
 8016d6e:	440b      	add	r3, r1
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7ff fcff 	bl	8016776 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8016d78:	79fa      	ldrb	r2, [r7, #7]
 8016d7a:	491b      	ldr	r1, [pc, #108]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016d7c:	4613      	mov	r3, r2
 8016d7e:	011b      	lsls	r3, r3, #4
 8016d80:	1a9b      	subs	r3, r3, r2
 8016d82:	009b      	lsls	r3, r3, #2
 8016d84:	440b      	add	r3, r1
 8016d86:	3334      	adds	r3, #52	; 0x34
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d10d      	bne.n	8016daa <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8016d8e:	79fa      	ldrb	r2, [r7, #7]
 8016d90:	4915      	ldr	r1, [pc, #84]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016d92:	4613      	mov	r3, r2
 8016d94:	011b      	lsls	r3, r3, #4
 8016d96:	1a9b      	subs	r3, r3, r2
 8016d98:	009b      	lsls	r3, r3, #2
 8016d9a:	440b      	add	r3, r1
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7ff fcc4 	bl	8016730 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8016da8:	e01a      	b.n	8016de0 <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8016daa:	79fa      	ldrb	r2, [r7, #7]
 8016dac:	490e      	ldr	r1, [pc, #56]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016dae:	4613      	mov	r3, r2
 8016db0:	011b      	lsls	r3, r3, #4
 8016db2:	1a9b      	subs	r3, r3, r2
 8016db4:	009b      	lsls	r3, r3, #2
 8016db6:	440b      	add	r3, r1
 8016db8:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8016dba:	79fa      	ldrb	r2, [r7, #7]
 8016dbc:	490a      	ldr	r1, [pc, #40]	; (8016de8 <USBPDM1_AssertRp+0x128>)
 8016dbe:	4613      	mov	r3, r2
 8016dc0:	011b      	lsls	r3, r3, #4
 8016dc2:	1a9b      	subs	r3, r3, r2
 8016dc4:	009b      	lsls	r3, r3, #2
 8016dc6:	440b      	add	r3, r1
 8016dc8:	3334      	adds	r3, #52	; 0x34
 8016dca:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8016dcc:	2b01      	cmp	r3, #1
 8016dce:	d102      	bne.n	8016dd6 <USBPDM1_AssertRp+0x116>
 8016dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016dd4:	e001      	b.n	8016dda <USBPDM1_AssertRp+0x11a>
 8016dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016dda:	4619      	mov	r1, r3
 8016ddc:	f7ff fca8 	bl	8016730 <LL_UCPD_SetccEnable>
}
 8016de0:	bf00      	nop
 8016de2:	3708      	adds	r7, #8
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}
 8016de8:	20001650 	.word	0x20001650

08016dec <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8016dec:	b480      	push	{r7}
 8016dee:	b083      	sub	sp, #12
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	4603      	mov	r3, r0
 8016df4:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8016df6:	bf00      	nop
 8016df8:	370c      	adds	r7, #12
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e00:	4770      	bx	lr
	...

08016e04 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8016e0e:	79fa      	ldrb	r2, [r7, #7]
 8016e10:	493e      	ldr	r1, [pc, #248]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016e12:	4613      	mov	r3, r2
 8016e14:	011b      	lsls	r3, r3, #4
 8016e16:	1a9b      	subs	r3, r3, r2
 8016e18:	009b      	lsls	r3, r3, #2
 8016e1a:	440b      	add	r3, r1
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7ff fc26 	bl	8016670 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8016e24:	79fa      	ldrb	r2, [r7, #7]
 8016e26:	4939      	ldr	r1, [pc, #228]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016e28:	4613      	mov	r3, r2
 8016e2a:	011b      	lsls	r3, r3, #4
 8016e2c:	1a9b      	subs	r3, r3, r2
 8016e2e:	009b      	lsls	r3, r3, #2
 8016e30:	440b      	add	r3, r1
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7ff fc3b 	bl	80166b0 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8016e3a:	79fa      	ldrb	r2, [r7, #7]
 8016e3c:	4933      	ldr	r1, [pc, #204]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016e3e:	4613      	mov	r3, r2
 8016e40:	011b      	lsls	r3, r3, #4
 8016e42:	1a9b      	subs	r3, r3, r2
 8016e44:	009b      	lsls	r3, r3, #2
 8016e46:	440b      	add	r3, r1
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	2100      	movs	r1, #0
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7ff fc6f 	bl	8016730 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8016e52:	79fa      	ldrb	r2, [r7, #7]
 8016e54:	492d      	ldr	r1, [pc, #180]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016e56:	4613      	mov	r3, r2
 8016e58:	011b      	lsls	r3, r3, #4
 8016e5a:	1a9b      	subs	r3, r3, r2
 8016e5c:	009b      	lsls	r3, r3, #2
 8016e5e:	440b      	add	r3, r1
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7ff fc77 	bl	8016756 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8016e68:	79fa      	ldrb	r2, [r7, #7]
 8016e6a:	4928      	ldr	r1, [pc, #160]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016e6c:	4613      	mov	r3, r2
 8016e6e:	011b      	lsls	r3, r3, #4
 8016e70:	1a9b      	subs	r3, r3, r2
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	440b      	add	r3, r1
 8016e76:	3334      	adds	r3, #52	; 0x34
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d10d      	bne.n	8016e9a <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8016e7e:	79fa      	ldrb	r2, [r7, #7]
 8016e80:	4922      	ldr	r1, [pc, #136]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016e82:	4613      	mov	r3, r2
 8016e84:	011b      	lsls	r3, r3, #4
 8016e86:	1a9b      	subs	r3, r3, r2
 8016e88:	009b      	lsls	r3, r3, #2
 8016e8a:	440b      	add	r3, r1
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7ff fc4c 	bl	8016730 <LL_UCPD_SetccEnable>
 8016e98:	e01a      	b.n	8016ed0 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8016e9a:	79fa      	ldrb	r2, [r7, #7]
 8016e9c:	491b      	ldr	r1, [pc, #108]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016e9e:	4613      	mov	r3, r2
 8016ea0:	011b      	lsls	r3, r3, #4
 8016ea2:	1a9b      	subs	r3, r3, r2
 8016ea4:	009b      	lsls	r3, r3, #2
 8016ea6:	440b      	add	r3, r1
 8016ea8:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8016eaa:	79fa      	ldrb	r2, [r7, #7]
 8016eac:	4917      	ldr	r1, [pc, #92]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016eae:	4613      	mov	r3, r2
 8016eb0:	011b      	lsls	r3, r3, #4
 8016eb2:	1a9b      	subs	r3, r3, r2
 8016eb4:	009b      	lsls	r3, r3, #2
 8016eb6:	440b      	add	r3, r1
 8016eb8:	3334      	adds	r3, #52	; 0x34
 8016eba:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8016ebc:	2b01      	cmp	r3, #1
 8016ebe:	d102      	bne.n	8016ec6 <USBPDM1_AssertRd+0xc2>
 8016ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ec4:	e001      	b.n	8016eca <USBPDM1_AssertRd+0xc6>
 8016ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016eca:	4619      	mov	r1, r3
 8016ecc:	f7ff fc30 	bl	8016730 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 8016ed0:	2001      	movs	r0, #1
 8016ed2:	f7f2 f989 	bl	80091e8 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8016ed6:	79fa      	ldrb	r2, [r7, #7]
 8016ed8:	490c      	ldr	r1, [pc, #48]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016eda:	4613      	mov	r3, r2
 8016edc:	011b      	lsls	r3, r3, #4
 8016ede:	1a9b      	subs	r3, r3, r2
 8016ee0:	009b      	lsls	r3, r3, #2
 8016ee2:	440b      	add	r3, r1
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7ff fbb2 	bl	8016650 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8016eec:	79fa      	ldrb	r2, [r7, #7]
 8016eee:	4907      	ldr	r1, [pc, #28]	; (8016f0c <USBPDM1_AssertRd+0x108>)
 8016ef0:	4613      	mov	r3, r2
 8016ef2:	011b      	lsls	r3, r3, #4
 8016ef4:	1a9b      	subs	r3, r3, r2
 8016ef6:	009b      	lsls	r3, r3, #2
 8016ef8:	440b      	add	r3, r1
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7ff fbc7 	bl	8016690 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8016f02:	bf00      	nop
 8016f04:	3708      	adds	r7, #8
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}
 8016f0a:	bf00      	nop
 8016f0c:	20001650 	.word	0x20001650

08016f10 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8016f10:	b480      	push	{r7}
 8016f12:	b083      	sub	sp, #12
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	4603      	mov	r3, r0
 8016f18:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8016f1a:	bf00      	nop
 8016f1c:	370c      	adds	r7, #12
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f24:	4770      	bx	lr
	...

08016f28 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	4603      	mov	r3, r0
 8016f30:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8016f32:	79fa      	ldrb	r2, [r7, #7]
 8016f34:	491f      	ldr	r1, [pc, #124]	; (8016fb4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8016f36:	4613      	mov	r3, r2
 8016f38:	011b      	lsls	r3, r3, #4
 8016f3a:	1a9b      	subs	r3, r3, r2
 8016f3c:	009b      	lsls	r3, r3, #2
 8016f3e:	440b      	add	r3, r1
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	4618      	mov	r0, r3
 8016f44:	f7ff fc17 	bl	8016776 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8016f48:	79fa      	ldrb	r2, [r7, #7]
 8016f4a:	491a      	ldr	r1, [pc, #104]	; (8016fb4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	011b      	lsls	r3, r3, #4
 8016f50:	1a9b      	subs	r3, r3, r2
 8016f52:	009b      	lsls	r3, r3, #2
 8016f54:	440b      	add	r3, r1
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	2100      	movs	r1, #0
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7ff fc1b 	bl	8016796 <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8016f60:	79fa      	ldrb	r2, [r7, #7]
 8016f62:	4914      	ldr	r1, [pc, #80]	; (8016fb4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8016f64:	4613      	mov	r3, r2
 8016f66:	011b      	lsls	r3, r3, #4
 8016f68:	1a9b      	subs	r3, r3, r2
 8016f6a:	009b      	lsls	r3, r3, #2
 8016f6c:	440b      	add	r3, r1
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	4618      	mov	r0, r3
 8016f72:	f7ff fc46 	bl	8016802 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8016f76:	79fa      	ldrb	r2, [r7, #7]
 8016f78:	490e      	ldr	r1, [pc, #56]	; (8016fb4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8016f7a:	4613      	mov	r3, r2
 8016f7c:	011b      	lsls	r3, r3, #4
 8016f7e:	1a9b      	subs	r3, r3, r2
 8016f80:	009b      	lsls	r3, r3, #2
 8016f82:	440b      	add	r3, r1
 8016f84:	330c      	adds	r3, #12
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	7a1b      	ldrb	r3, [r3, #8]
 8016f8a:	f003 0302 	and.w	r3, r3, #2
 8016f8e:	b2db      	uxtb	r3, r3
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d00a      	beq.n	8016faa <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8016f94:	79fa      	ldrb	r2, [r7, #7]
 8016f96:	4907      	ldr	r1, [pc, #28]	; (8016fb4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8016f98:	4613      	mov	r3, r2
 8016f9a:	011b      	lsls	r3, r3, #4
 8016f9c:	1a9b      	subs	r3, r3, r2
 8016f9e:	009b      	lsls	r3, r3, #2
 8016fa0:	440b      	add	r3, r1
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7ff fbb3 	bl	8016710 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 8016faa:	bf00      	nop
 8016fac:	3708      	adds	r7, #8
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bd80      	pop	{r7, pc}
 8016fb2:	bf00      	nop
 8016fb4:	20001650 	.word	0x20001650

08016fb8 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b082      	sub	sp, #8
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8016fc2:	79fa      	ldrb	r2, [r7, #7]
 8016fc4:	4906      	ldr	r1, [pc, #24]	; (8016fe0 <USBPD_HW_IF_EnableRX+0x28>)
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	011b      	lsls	r3, r3, #4
 8016fca:	1a9b      	subs	r3, r3, r2
 8016fcc:	009b      	lsls	r3, r3, #2
 8016fce:	440b      	add	r3, r1
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7ff fc05 	bl	80167e2 <LL_UCPD_RxEnable>
}
 8016fd8:	bf00      	nop
 8016fda:	3708      	adds	r7, #8
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	20001650 	.word	0x20001650

08016fe4 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b082      	sub	sp, #8
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	4603      	mov	r3, r0
 8016fec:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8016fee:	79fa      	ldrb	r2, [r7, #7]
 8016ff0:	4906      	ldr	r1, [pc, #24]	; (801700c <USBPD_HW_IF_DisableRX+0x28>)
 8016ff2:	4613      	mov	r3, r2
 8016ff4:	011b      	lsls	r3, r3, #4
 8016ff6:	1a9b      	subs	r3, r3, r2
 8016ff8:	009b      	lsls	r3, r3, #2
 8016ffa:	440b      	add	r3, r1
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7ff fbff 	bl	8016802 <LL_UCPD_RxDisable>
}
 8017004:	bf00      	nop
 8017006:	3708      	adds	r7, #8
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}
 801700c:	20001650 	.word	0x20001650

08017010 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8017010:	b590      	push	{r4, r7, lr}
 8017012:	b085      	sub	sp, #20
 8017014:	af00      	add	r7, sp, #0
 8017016:	4603      	mov	r3, r0
 8017018:	6039      	str	r1, [r7, #0]
 801701a:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 801701c:	f000 fc4e 	bl	80178bc <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8017020:	79fc      	ldrb	r4, [r7, #7]
 8017022:	79fb      	ldrb	r3, [r7, #7]
 8017024:	4618      	mov	r0, r3
 8017026:	f7fe fe27 	bl	8015c78 <USBPD_HW_Init_DMATxInstance>
 801702a:	4602      	mov	r2, r0
 801702c:	499d      	ldr	r1, [pc, #628]	; (80172a4 <HW_SignalAttachement+0x294>)
 801702e:	4623      	mov	r3, r4
 8017030:	011b      	lsls	r3, r3, #4
 8017032:	1b1b      	subs	r3, r3, r4
 8017034:	009b      	lsls	r3, r3, #2
 8017036:	440b      	add	r3, r1
 8017038:	3304      	adds	r3, #4
 801703a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 801703c:	79fc      	ldrb	r4, [r7, #7]
 801703e:	79fb      	ldrb	r3, [r7, #7]
 8017040:	4618      	mov	r0, r3
 8017042:	f7fe fdd9 	bl	8015bf8 <USBPD_HW_Init_DMARxInstance>
 8017046:	4602      	mov	r2, r0
 8017048:	4996      	ldr	r1, [pc, #600]	; (80172a4 <HW_SignalAttachement+0x294>)
 801704a:	4623      	mov	r3, r4
 801704c:	011b      	lsls	r3, r3, #4
 801704e:	1b1b      	subs	r3, r3, r4
 8017050:	009b      	lsls	r3, r3, #2
 8017052:	440b      	add	r3, r1
 8017054:	3308      	adds	r3, #8
 8017056:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8017058:	79fa      	ldrb	r2, [r7, #7]
 801705a:	4992      	ldr	r1, [pc, #584]	; (80172a4 <HW_SignalAttachement+0x294>)
 801705c:	4613      	mov	r3, r2
 801705e:	011b      	lsls	r3, r3, #4
 8017060:	1a9b      	subs	r3, r3, r2
 8017062:	009b      	lsls	r3, r3, #2
 8017064:	440b      	add	r3, r1
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	3330      	adds	r3, #48	; 0x30
 801706a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 801706c:	79fa      	ldrb	r2, [r7, #7]
 801706e:	498d      	ldr	r1, [pc, #564]	; (80172a4 <HW_SignalAttachement+0x294>)
 8017070:	4613      	mov	r3, r2
 8017072:	011b      	lsls	r3, r3, #4
 8017074:	1a9b      	subs	r3, r3, r2
 8017076:	009b      	lsls	r3, r3, #2
 8017078:	440b      	add	r3, r1
 801707a:	3308      	adds	r3, #8
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	68fa      	ldr	r2, [r7, #12]
 8017080:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8017082:	79fa      	ldrb	r2, [r7, #7]
 8017084:	4987      	ldr	r1, [pc, #540]	; (80172a4 <HW_SignalAttachement+0x294>)
 8017086:	4613      	mov	r3, r2
 8017088:	011b      	lsls	r3, r3, #4
 801708a:	1a9b      	subs	r3, r3, r2
 801708c:	009b      	lsls	r3, r3, #2
 801708e:	440b      	add	r3, r1
 8017090:	3330      	adds	r3, #48	; 0x30
 8017092:	6818      	ldr	r0, [r3, #0]
 8017094:	79fa      	ldrb	r2, [r7, #7]
 8017096:	4983      	ldr	r1, [pc, #524]	; (80172a4 <HW_SignalAttachement+0x294>)
 8017098:	4613      	mov	r3, r2
 801709a:	011b      	lsls	r3, r3, #4
 801709c:	1a9b      	subs	r3, r3, r2
 801709e:	009b      	lsls	r3, r3, #2
 80170a0:	440b      	add	r3, r1
 80170a2:	3308      	adds	r3, #8
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	4602      	mov	r2, r0
 80170a8:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 80170aa:	79fa      	ldrb	r2, [r7, #7]
 80170ac:	497d      	ldr	r1, [pc, #500]	; (80172a4 <HW_SignalAttachement+0x294>)
 80170ae:	4613      	mov	r3, r2
 80170b0:	011b      	lsls	r3, r3, #4
 80170b2:	1a9b      	subs	r3, r3, r2
 80170b4:	009b      	lsls	r3, r3, #2
 80170b6:	440b      	add	r3, r1
 80170b8:	3308      	adds	r3, #8
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	f44f 7284 	mov.w	r2, #264	; 0x108
 80170c0:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 80170c2:	79fa      	ldrb	r2, [r7, #7]
 80170c4:	4977      	ldr	r1, [pc, #476]	; (80172a4 <HW_SignalAttachement+0x294>)
 80170c6:	4613      	mov	r3, r2
 80170c8:	011b      	lsls	r3, r3, #4
 80170ca:	1a9b      	subs	r3, r3, r2
 80170cc:	009b      	lsls	r3, r3, #2
 80170ce:	440b      	add	r3, r1
 80170d0:	3308      	adds	r3, #8
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	6819      	ldr	r1, [r3, #0]
 80170d6:	79fa      	ldrb	r2, [r7, #7]
 80170d8:	4872      	ldr	r0, [pc, #456]	; (80172a4 <HW_SignalAttachement+0x294>)
 80170da:	4613      	mov	r3, r2
 80170dc:	011b      	lsls	r3, r3, #4
 80170de:	1a9b      	subs	r3, r3, r2
 80170e0:	009b      	lsls	r3, r3, #2
 80170e2:	4403      	add	r3, r0
 80170e4:	3308      	adds	r3, #8
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	f041 0201 	orr.w	r2, r1, #1
 80170ec:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 80170ee:	79fa      	ldrb	r2, [r7, #7]
 80170f0:	496c      	ldr	r1, [pc, #432]	; (80172a4 <HW_SignalAttachement+0x294>)
 80170f2:	4613      	mov	r3, r2
 80170f4:	011b      	lsls	r3, r3, #4
 80170f6:	1a9b      	subs	r3, r3, r2
 80170f8:	009b      	lsls	r3, r3, #2
 80170fa:	440b      	add	r3, r1
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	3324      	adds	r3, #36	; 0x24
 8017100:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8017102:	79fa      	ldrb	r2, [r7, #7]
 8017104:	4967      	ldr	r1, [pc, #412]	; (80172a4 <HW_SignalAttachement+0x294>)
 8017106:	4613      	mov	r3, r2
 8017108:	011b      	lsls	r3, r3, #4
 801710a:	1a9b      	subs	r3, r3, r2
 801710c:	009b      	lsls	r3, r3, #2
 801710e:	440b      	add	r3, r1
 8017110:	3304      	adds	r3, #4
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	68fa      	ldr	r2, [r7, #12]
 8017116:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8017118:	79fa      	ldrb	r2, [r7, #7]
 801711a:	4962      	ldr	r1, [pc, #392]	; (80172a4 <HW_SignalAttachement+0x294>)
 801711c:	4613      	mov	r3, r2
 801711e:	011b      	lsls	r3, r3, #4
 8017120:	1a9b      	subs	r3, r3, r2
 8017122:	009b      	lsls	r3, r3, #2
 8017124:	440b      	add	r3, r1
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	6919      	ldr	r1, [r3, #16]
 801712a:	79fa      	ldrb	r2, [r7, #7]
 801712c:	485d      	ldr	r0, [pc, #372]	; (80172a4 <HW_SignalAttachement+0x294>)
 801712e:	4613      	mov	r3, r2
 8017130:	011b      	lsls	r3, r3, #4
 8017132:	1a9b      	subs	r3, r3, r2
 8017134:	009b      	lsls	r3, r3, #2
 8017136:	4403      	add	r3, r0
 8017138:	681a      	ldr	r2, [r3, #0]
 801713a:	f441 53f3 	orr.w	r3, r1, #7776	; 0x1e60
 801713e:	f043 031e 	orr.w	r3, r3, #30
 8017142:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8017144:	79fa      	ldrb	r2, [r7, #7]
 8017146:	4957      	ldr	r1, [pc, #348]	; (80172a4 <HW_SignalAttachement+0x294>)
 8017148:	4613      	mov	r3, r2
 801714a:	011b      	lsls	r3, r3, #4
 801714c:	1a9b      	subs	r3, r3, r2
 801714e:	009b      	lsls	r3, r3, #2
 8017150:	440b      	add	r3, r1
 8017152:	3334      	adds	r3, #52	; 0x34
 8017154:	683a      	ldr	r2, [r7, #0]
 8017156:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8017158:	79fa      	ldrb	r2, [r7, #7]
 801715a:	4952      	ldr	r1, [pc, #328]	; (80172a4 <HW_SignalAttachement+0x294>)
 801715c:	4613      	mov	r3, r2
 801715e:	011b      	lsls	r3, r3, #4
 8017160:	1a9b      	subs	r3, r3, r2
 8017162:	009b      	lsls	r3, r3, #2
 8017164:	440b      	add	r3, r1
 8017166:	6818      	ldr	r0, [r3, #0]
 8017168:	79fa      	ldrb	r2, [r7, #7]
 801716a:	494e      	ldr	r1, [pc, #312]	; (80172a4 <HW_SignalAttachement+0x294>)
 801716c:	4613      	mov	r3, r2
 801716e:	011b      	lsls	r3, r3, #4
 8017170:	1a9b      	subs	r3, r3, r2
 8017172:	009b      	lsls	r3, r3, #2
 8017174:	440b      	add	r3, r1
 8017176:	3334      	adds	r3, #52	; 0x34
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	2b01      	cmp	r3, #1
 801717c:	d101      	bne.n	8017182 <HW_SignalAttachement+0x172>
 801717e:	2300      	movs	r3, #0
 8017180:	e000      	b.n	8017184 <HW_SignalAttachement+0x174>
 8017182:	2340      	movs	r3, #64	; 0x40
 8017184:	4619      	mov	r1, r3
 8017186:	f7ff fb19 	bl	80167bc <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801718a:	79fa      	ldrb	r2, [r7, #7]
 801718c:	4945      	ldr	r1, [pc, #276]	; (80172a4 <HW_SignalAttachement+0x294>)
 801718e:	4613      	mov	r3, r2
 8017190:	011b      	lsls	r3, r3, #4
 8017192:	1a9b      	subs	r3, r3, r2
 8017194:	009b      	lsls	r3, r3, #2
 8017196:	440b      	add	r3, r1
 8017198:	330c      	adds	r3, #12
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	7a1b      	ldrb	r3, [r3, #8]
 801719e:	f003 0302 	and.w	r3, r3, #2
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d031      	beq.n	801720c <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 80171a8:	79fa      	ldrb	r2, [r7, #7]
 80171aa:	493e      	ldr	r1, [pc, #248]	; (80172a4 <HW_SignalAttachement+0x294>)
 80171ac:	4613      	mov	r3, r2
 80171ae:	011b      	lsls	r3, r3, #4
 80171b0:	1a9b      	subs	r3, r3, r2
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	440b      	add	r3, r1
 80171b6:	3334      	adds	r3, #52	; 0x34
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	2b01      	cmp	r3, #1
 80171bc:	d101      	bne.n	80171c2 <HW_SignalAttachement+0x1b2>
 80171be:	2201      	movs	r2, #1
 80171c0:	e000      	b.n	80171c4 <HW_SignalAttachement+0x1b4>
 80171c2:	2202      	movs	r2, #2
 80171c4:	79fb      	ldrb	r3, [r7, #7]
 80171c6:	4611      	mov	r1, r2
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7fe fd94 	bl	8015cf6 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 80171ce:	79fa      	ldrb	r2, [r7, #7]
 80171d0:	4934      	ldr	r1, [pc, #208]	; (80172a4 <HW_SignalAttachement+0x294>)
 80171d2:	4613      	mov	r3, r2
 80171d4:	011b      	lsls	r3, r3, #4
 80171d6:	1a9b      	subs	r3, r3, r2
 80171d8:	009b      	lsls	r3, r3, #2
 80171da:	440b      	add	r3, r1
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	4618      	mov	r0, r3
 80171e0:	f7ff fa86 	bl	80166f0 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 80171e4:	79fa      	ldrb	r2, [r7, #7]
 80171e6:	492f      	ldr	r1, [pc, #188]	; (80172a4 <HW_SignalAttachement+0x294>)
 80171e8:	4613      	mov	r3, r2
 80171ea:	011b      	lsls	r3, r3, #4
 80171ec:	1a9b      	subs	r3, r3, r2
 80171ee:	009b      	lsls	r3, r3, #2
 80171f0:	440b      	add	r3, r1
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	6919      	ldr	r1, [r3, #16]
 80171f6:	79fa      	ldrb	r2, [r7, #7]
 80171f8:	482a      	ldr	r0, [pc, #168]	; (80172a4 <HW_SignalAttachement+0x294>)
 80171fa:	4613      	mov	r3, r2
 80171fc:	011b      	lsls	r3, r3, #4
 80171fe:	1a9b      	subs	r3, r3, r2
 8017200:	009b      	lsls	r3, r3, #2
 8017202:	4403      	add	r3, r0
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	f441 1280 	orr.w	r2, r1, #1048576	; 0x100000
 801720a:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 801720c:	79fa      	ldrb	r2, [r7, #7]
 801720e:	4925      	ldr	r1, [pc, #148]	; (80172a4 <HW_SignalAttachement+0x294>)
 8017210:	4613      	mov	r3, r2
 8017212:	011b      	lsls	r3, r3, #4
 8017214:	1a9b      	subs	r3, r3, r2
 8017216:	009b      	lsls	r3, r3, #2
 8017218:	440b      	add	r3, r1
 801721a:	3334      	adds	r3, #52	; 0x34
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	2b01      	cmp	r3, #1
 8017220:	d10d      	bne.n	801723e <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8017222:	79fa      	ldrb	r2, [r7, #7]
 8017224:	491f      	ldr	r1, [pc, #124]	; (80172a4 <HW_SignalAttachement+0x294>)
 8017226:	4613      	mov	r3, r2
 8017228:	011b      	lsls	r3, r3, #4
 801722a:	1a9b      	subs	r3, r3, r2
 801722c:	009b      	lsls	r3, r3, #2
 801722e:	440b      	add	r3, r1
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017236:	4618      	mov	r0, r3
 8017238:	f7ff fa7a 	bl	8016730 <LL_UCPD_SetccEnable>
 801723c:	e00c      	b.n	8017258 <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 801723e:	79fa      	ldrb	r2, [r7, #7]
 8017240:	4918      	ldr	r1, [pc, #96]	; (80172a4 <HW_SignalAttachement+0x294>)
 8017242:	4613      	mov	r3, r2
 8017244:	011b      	lsls	r3, r3, #4
 8017246:	1a9b      	subs	r3, r3, r2
 8017248:	009b      	lsls	r3, r3, #2
 801724a:	440b      	add	r3, r1
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8017252:	4618      	mov	r0, r3
 8017254:	f7ff fa6c 	bl	8016730 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8017258:	79fa      	ldrb	r2, [r7, #7]
 801725a:	4912      	ldr	r1, [pc, #72]	; (80172a4 <HW_SignalAttachement+0x294>)
 801725c:	4613      	mov	r3, r2
 801725e:	011b      	lsls	r3, r3, #4
 8017260:	1a9b      	subs	r3, r3, r2
 8017262:	009b      	lsls	r3, r3, #2
 8017264:	440b      	add	r3, r1
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	2100      	movs	r1, #0
 801726a:	4618      	mov	r0, r3
 801726c:	f7ff fad9 	bl	8016822 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8017270:	79fa      	ldrb	r2, [r7, #7]
 8017272:	490c      	ldr	r1, [pc, #48]	; (80172a4 <HW_SignalAttachement+0x294>)
 8017274:	4613      	mov	r3, r2
 8017276:	011b      	lsls	r3, r3, #4
 8017278:	1a9b      	subs	r3, r3, r2
 801727a:	009b      	lsls	r3, r3, #2
 801727c:	440b      	add	r3, r1
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	4618      	mov	r0, r3
 8017282:	f7ff fb14 	bl	80168ae <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8017286:	79fa      	ldrb	r2, [r7, #7]
 8017288:	4906      	ldr	r1, [pc, #24]	; (80172a4 <HW_SignalAttachement+0x294>)
 801728a:	4613      	mov	r3, r2
 801728c:	011b      	lsls	r3, r3, #4
 801728e:	1a9b      	subs	r3, r3, r2
 8017290:	009b      	lsls	r3, r3, #2
 8017292:	440b      	add	r3, r1
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	4618      	mov	r0, r3
 8017298:	f7ff fb29 	bl	80168ee <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 801729c:	bf00      	nop
 801729e:	3714      	adds	r7, #20
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd90      	pop	{r4, r7, pc}
 80172a4:	20001650 	.word	0x20001650

080172a8 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b082      	sub	sp, #8
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	4603      	mov	r3, r0
 80172b0:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 80172b2:	79fa      	ldrb	r2, [r7, #7]
 80172b4:	493e      	ldr	r1, [pc, #248]	; (80173b0 <HW_SignalDetachment+0x108>)
 80172b6:	4613      	mov	r3, r2
 80172b8:	011b      	lsls	r3, r3, #4
 80172ba:	1a9b      	subs	r3, r3, r2
 80172bc:	009b      	lsls	r3, r3, #2
 80172be:	440b      	add	r3, r1
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	4618      	mov	r0, r3
 80172c4:	f7ff fb03 	bl	80168ce <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 80172c8:	79fa      	ldrb	r2, [r7, #7]
 80172ca:	4939      	ldr	r1, [pc, #228]	; (80173b0 <HW_SignalDetachment+0x108>)
 80172cc:	4613      	mov	r3, r2
 80172ce:	011b      	lsls	r3, r3, #4
 80172d0:	1a9b      	subs	r3, r3, r2
 80172d2:	009b      	lsls	r3, r3, #2
 80172d4:	440b      	add	r3, r1
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	4618      	mov	r0, r3
 80172da:	f7ff fb18 	bl	801690e <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80172de:	79fa      	ldrb	r2, [r7, #7]
 80172e0:	4933      	ldr	r1, [pc, #204]	; (80173b0 <HW_SignalDetachment+0x108>)
 80172e2:	4613      	mov	r3, r2
 80172e4:	011b      	lsls	r3, r3, #4
 80172e6:	1a9b      	subs	r3, r3, r2
 80172e8:	009b      	lsls	r3, r3, #2
 80172ea:	440b      	add	r3, r1
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	4618      	mov	r0, r3
 80172f0:	f7ff fa87 	bl	8016802 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 80172f4:	79fa      	ldrb	r2, [r7, #7]
 80172f6:	492e      	ldr	r1, [pc, #184]	; (80173b0 <HW_SignalDetachment+0x108>)
 80172f8:	4613      	mov	r3, r2
 80172fa:	011b      	lsls	r3, r3, #4
 80172fc:	1a9b      	subs	r3, r3, r2
 80172fe:	009b      	lsls	r3, r3, #2
 8017300:	440b      	add	r3, r1
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017308:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 801730a:	79fb      	ldrb	r3, [r7, #7]
 801730c:	4618      	mov	r0, r3
 801730e:	f7fe fce7 	bl	8015ce0 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8017312:	79fb      	ldrb	r3, [r7, #7]
 8017314:	4618      	mov	r0, r3
 8017316:	f7fe fca3 	bl	8015c60 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801731a:	79fa      	ldrb	r2, [r7, #7]
 801731c:	4924      	ldr	r1, [pc, #144]	; (80173b0 <HW_SignalDetachment+0x108>)
 801731e:	4613      	mov	r3, r2
 8017320:	011b      	lsls	r3, r3, #4
 8017322:	1a9b      	subs	r3, r3, r2
 8017324:	009b      	lsls	r3, r3, #2
 8017326:	440b      	add	r3, r1
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 801732e:	4618      	mov	r0, r3
 8017330:	f7ff f9fe 	bl	8016730 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8017334:	79fa      	ldrb	r2, [r7, #7]
 8017336:	491e      	ldr	r1, [pc, #120]	; (80173b0 <HW_SignalDetachment+0x108>)
 8017338:	4613      	mov	r3, r2
 801733a:	011b      	lsls	r3, r3, #4
 801733c:	1a9b      	subs	r3, r3, r2
 801733e:	009b      	lsls	r3, r3, #2
 8017340:	440b      	add	r3, r1
 8017342:	3310      	adds	r3, #16
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	f003 0304 	and.w	r3, r3, #4
 801734c:	b2db      	uxtb	r3, r3
 801734e:	2b00      	cmp	r3, #0
 8017350:	d103      	bne.n	801735a <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8017352:	79fb      	ldrb	r3, [r7, #7]
 8017354:	4618      	mov	r0, r3
 8017356:	f006 ff95 	bl	801e284 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801735a:	79fa      	ldrb	r2, [r7, #7]
 801735c:	4914      	ldr	r1, [pc, #80]	; (80173b0 <HW_SignalDetachment+0x108>)
 801735e:	4613      	mov	r3, r2
 8017360:	011b      	lsls	r3, r3, #4
 8017362:	1a9b      	subs	r3, r3, r2
 8017364:	009b      	lsls	r3, r3, #2
 8017366:	440b      	add	r3, r1
 8017368:	330c      	adds	r3, #12
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	7a1b      	ldrb	r3, [r3, #8]
 801736e:	f003 0302 	and.w	r3, r3, #2
 8017372:	b2db      	uxtb	r3, r3
 8017374:	2b00      	cmp	r3, #0
 8017376:	d00a      	beq.n	801738e <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8017378:	79fa      	ldrb	r2, [r7, #7]
 801737a:	490d      	ldr	r1, [pc, #52]	; (80173b0 <HW_SignalDetachment+0x108>)
 801737c:	4613      	mov	r3, r2
 801737e:	011b      	lsls	r3, r3, #4
 8017380:	1a9b      	subs	r3, r3, r2
 8017382:	009b      	lsls	r3, r3, #2
 8017384:	440b      	add	r3, r1
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	4618      	mov	r0, r3
 801738a:	f7ff f9c1 	bl	8016710 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 801738e:	79fa      	ldrb	r2, [r7, #7]
 8017390:	4907      	ldr	r1, [pc, #28]	; (80173b0 <HW_SignalDetachment+0x108>)
 8017392:	4613      	mov	r3, r2
 8017394:	011b      	lsls	r3, r3, #4
 8017396:	1a9b      	subs	r3, r3, r2
 8017398:	009b      	lsls	r3, r3, #2
 801739a:	440b      	add	r3, r1
 801739c:	3334      	adds	r3, #52	; 0x34
 801739e:	2200      	movs	r2, #0
 80173a0:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80173a2:	f000 fb13 	bl	80179cc <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80173a6:	bf00      	nop
 80173a8:	3708      	adds	r7, #8
 80173aa:	46bd      	mov	sp, r7
 80173ac:	bd80      	pop	{r7, pc}
 80173ae:	bf00      	nop
 80173b0:	20001650 	.word	0x20001650

080173b4 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b082      	sub	sp, #8
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	4603      	mov	r3, r0
 80173bc:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80173be:	79fa      	ldrb	r2, [r7, #7]
 80173c0:	4907      	ldr	r1, [pc, #28]	; (80173e0 <USBPD_HW_IF_SetResistor_SinkTxNG+0x2c>)
 80173c2:	4613      	mov	r3, r2
 80173c4:	011b      	lsls	r3, r3, #4
 80173c6:	1a9b      	subs	r3, r3, r2
 80173c8:	009b      	lsls	r3, r3, #2
 80173ca:	440b      	add	r3, r1
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80173d2:	4618      	mov	r0, r3
 80173d4:	f7ff f9df 	bl	8016796 <LL_UCPD_SetRpResistor>
}
 80173d8:	bf00      	nop
 80173da:	3708      	adds	r7, #8
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}
 80173e0:	20001650 	.word	0x20001650

080173e4 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	4603      	mov	r3, r0
 80173ec:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 80173ee:	79fa      	ldrb	r2, [r7, #7]
 80173f0:	4907      	ldr	r1, [pc, #28]	; (8017410 <USBPD_HW_IF_SetResistor_SinkTxOK+0x2c>)
 80173f2:	4613      	mov	r3, r2
 80173f4:	011b      	lsls	r3, r3, #4
 80173f6:	1a9b      	subs	r3, r3, r2
 80173f8:	009b      	lsls	r3, r3, #2
 80173fa:	440b      	add	r3, r1
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017402:	4618      	mov	r0, r3
 8017404:	f7ff f9c7 	bl	8016796 <LL_UCPD_SetRpResistor>
}
 8017408:	bf00      	nop
 801740a:	3708      	adds	r7, #8
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}
 8017410:	20001650 	.word	0x20001650

08017414 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8017414:	b480      	push	{r7}
 8017416:	b083      	sub	sp, #12
 8017418:	af00      	add	r7, sp, #0
 801741a:	4603      	mov	r3, r0
 801741c:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 801741e:	79fa      	ldrb	r2, [r7, #7]
 8017420:	491b      	ldr	r1, [pc, #108]	; (8017490 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8017422:	4613      	mov	r3, r2
 8017424:	011b      	lsls	r3, r3, #4
 8017426:	1a9b      	subs	r3, r3, r2
 8017428:	009b      	lsls	r3, r3, #2
 801742a:	440b      	add	r3, r1
 801742c:	3334      	adds	r3, #52	; 0x34
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2b01      	cmp	r3, #1
 8017432:	d002      	beq.n	801743a <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 8017434:	2b02      	cmp	r3, #2
 8017436:	d010      	beq.n	801745a <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 8017438:	e022      	b.n	8017480 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 801743a:	79fa      	ldrb	r2, [r7, #7]
 801743c:	4914      	ldr	r1, [pc, #80]	; (8017490 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 801743e:	4613      	mov	r3, r2
 8017440:	011b      	lsls	r3, r3, #4
 8017442:	1a9b      	subs	r3, r3, r2
 8017444:	009b      	lsls	r3, r3, #2
 8017446:	440b      	add	r3, r1
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	695b      	ldr	r3, [r3, #20]
 801744c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017450:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017454:	d111      	bne.n	801747a <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 8017456:	2301      	movs	r3, #1
 8017458:	e013      	b.n	8017482 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 801745a:	79fa      	ldrb	r2, [r7, #7]
 801745c:	490c      	ldr	r1, [pc, #48]	; (8017490 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 801745e:	4613      	mov	r3, r2
 8017460:	011b      	lsls	r3, r3, #4
 8017462:	1a9b      	subs	r3, r3, r2
 8017464:	009b      	lsls	r3, r3, #2
 8017466:	440b      	add	r3, r1
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	695b      	ldr	r3, [r3, #20]
 801746c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8017470:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8017474:	d103      	bne.n	801747e <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 8017476:	2301      	movs	r3, #1
 8017478:	e003      	b.n	8017482 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 801747a:	bf00      	nop
 801747c:	e000      	b.n	8017480 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 801747e:	bf00      	nop
  }

  return USBPD_FALSE;
 8017480:	2300      	movs	r3, #0
}
 8017482:	4618      	mov	r0, r3
 8017484:	370c      	adds	r7, #12
 8017486:	46bd      	mov	sp, r7
 8017488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748c:	4770      	bx	lr
 801748e:	bf00      	nop
 8017490:	20001650 	.word	0x20001650

08017494 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b082      	sub	sp, #8
 8017498:	af00      	add	r7, sp, #0
 801749a:	4603      	mov	r3, r0
 801749c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 801749e:	79fa      	ldrb	r2, [r7, #7]
 80174a0:	4906      	ldr	r1, [pc, #24]	; (80174bc <USBPD_HW_IF_FastRoleSwapSignalling+0x28>)
 80174a2:	4613      	mov	r3, r2
 80174a4:	011b      	lsls	r3, r3, #4
 80174a6:	1a9b      	subs	r3, r3, r2
 80174a8:	009b      	lsls	r3, r3, #2
 80174aa:	440b      	add	r3, r1
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	4618      	mov	r0, r3
 80174b0:	f7ff f90e 	bl	80166d0 <LL_UCPD_SignalFRSTX>
}
 80174b4:	bf00      	nop
 80174b6:	3708      	adds	r7, #8
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}
 80174bc:	20001650 	.word	0x20001650

080174c0 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b084      	sub	sp, #16
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	4603      	mov	r3, r0
 80174c8:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 80174ca:	79fb      	ldrb	r3, [r7, #7]
 80174cc:	f107 020c 	add.w	r2, r7, #12
 80174d0:	4611      	mov	r1, r2
 80174d2:	4618      	mov	r0, r3
 80174d4:	f006 feea 	bl	801e2ac <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	b29b      	uxth	r3, r3
}
 80174dc:	4618      	mov	r0, r3
 80174de:	3710      	adds	r7, #16
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd80      	pop	{r7, pc}

080174e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80174e4:	b480      	push	{r7}
 80174e6:	b085      	sub	sp, #20
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80174ec:	4b08      	ldr	r3, [pc, #32]	; (8017510 <LL_APB2_GRP1_EnableClock+0x2c>)
 80174ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80174f0:	4907      	ldr	r1, [pc, #28]	; (8017510 <LL_APB2_GRP1_EnableClock+0x2c>)
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	4313      	orrs	r3, r2
 80174f6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80174f8:	4b05      	ldr	r3, [pc, #20]	; (8017510 <LL_APB2_GRP1_EnableClock+0x2c>)
 80174fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	4013      	ands	r3, r2
 8017500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017502:	68fb      	ldr	r3, [r7, #12]
}
 8017504:	bf00      	nop
 8017506:	3714      	adds	r7, #20
 8017508:	46bd      	mov	sp, r7
 801750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750e:	4770      	bx	lr
 8017510:	40021000 	.word	0x40021000

08017514 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 801751c:	4b06      	ldr	r3, [pc, #24]	; (8017538 <LL_APB2_GRP1_DisableClock+0x24>)
 801751e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	43db      	mvns	r3, r3
 8017524:	4904      	ldr	r1, [pc, #16]	; (8017538 <LL_APB2_GRP1_DisableClock+0x24>)
 8017526:	4013      	ands	r3, r2
 8017528:	660b      	str	r3, [r1, #96]	; 0x60
}
 801752a:	bf00      	nop
 801752c:	370c      	adds	r7, #12
 801752e:	46bd      	mov	sp, r7
 8017530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017534:	4770      	bx	lr
 8017536:	bf00      	nop
 8017538:	40021000 	.word	0x40021000

0801753c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 801753c:	b480      	push	{r7}
 801753e:	b083      	sub	sp, #12
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	f043 0201 	orr.w	r2, r3, #1
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	601a      	str	r2, [r3, #0]
}
 8017550:	bf00      	nop
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr

0801755c <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 801755c:	b480      	push	{r7}
 801755e:	b083      	sub	sp, #12
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	431a      	orrs	r2, r3
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	601a      	str	r2, [r3, #0]
}
 8017576:	bf00      	nop
 8017578:	370c      	adds	r7, #12
 801757a:	46bd      	mov	sp, r7
 801757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017580:	4770      	bx	lr

08017582 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8017582:	b480      	push	{r7}
 8017584:	b083      	sub	sp, #12
 8017586:	af00      	add	r7, sp, #0
 8017588:	6078      	str	r0, [r7, #4]
 801758a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	683a      	ldr	r2, [r7, #0]
 8017590:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017592:	bf00      	nop
 8017594:	370c      	adds	r7, #12
 8017596:	46bd      	mov	sp, r7
 8017598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759c:	4770      	bx	lr

0801759e <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 801759e:	b480      	push	{r7}
 80175a0:	b083      	sub	sp, #12
 80175a2:	af00      	add	r7, sp, #0
 80175a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80175aa:	4618      	mov	r0, r3
 80175ac:	370c      	adds	r7, #12
 80175ae:	46bd      	mov	sp, r7
 80175b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b4:	4770      	bx	lr

080175b6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80175b6:	b480      	push	{r7}
 80175b8:	b083      	sub	sp, #12
 80175ba:	af00      	add	r7, sp, #0
 80175bc:	6078      	str	r0, [r7, #4]
 80175be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	683a      	ldr	r2, [r7, #0]
 80175c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80175c6:	bf00      	nop
 80175c8:	370c      	adds	r7, #12
 80175ca:	46bd      	mov	sp, r7
 80175cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d0:	4770      	bx	lr
	...

080175d4 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 80175d4:	b480      	push	{r7}
 80175d6:	b087      	sub	sp, #28
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	60b9      	str	r1, [r7, #8]
 80175de:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	2b01      	cmp	r3, #1
 80175e4:	d02e      	beq.n	8017644 <LL_TIM_OC_SetMode+0x70>
 80175e6:	68bb      	ldr	r3, [r7, #8]
 80175e8:	2b04      	cmp	r3, #4
 80175ea:	d029      	beq.n	8017640 <LL_TIM_OC_SetMode+0x6c>
 80175ec:	68bb      	ldr	r3, [r7, #8]
 80175ee:	2b10      	cmp	r3, #16
 80175f0:	d024      	beq.n	801763c <LL_TIM_OC_SetMode+0x68>
 80175f2:	68bb      	ldr	r3, [r7, #8]
 80175f4:	2b40      	cmp	r3, #64	; 0x40
 80175f6:	d01f      	beq.n	8017638 <LL_TIM_OC_SetMode+0x64>
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80175fe:	d019      	beq.n	8017634 <LL_TIM_OC_SetMode+0x60>
 8017600:	68bb      	ldr	r3, [r7, #8]
 8017602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017606:	d013      	beq.n	8017630 <LL_TIM_OC_SetMode+0x5c>
 8017608:	68bb      	ldr	r3, [r7, #8]
 801760a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801760e:	d00d      	beq.n	801762c <LL_TIM_OC_SetMode+0x58>
 8017610:	68bb      	ldr	r3, [r7, #8]
 8017612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017616:	d007      	beq.n	8017628 <LL_TIM_OC_SetMode+0x54>
 8017618:	68bb      	ldr	r3, [r7, #8]
 801761a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801761e:	d101      	bne.n	8017624 <LL_TIM_OC_SetMode+0x50>
 8017620:	2308      	movs	r3, #8
 8017622:	e010      	b.n	8017646 <LL_TIM_OC_SetMode+0x72>
 8017624:	2309      	movs	r3, #9
 8017626:	e00e      	b.n	8017646 <LL_TIM_OC_SetMode+0x72>
 8017628:	2307      	movs	r3, #7
 801762a:	e00c      	b.n	8017646 <LL_TIM_OC_SetMode+0x72>
 801762c:	2306      	movs	r3, #6
 801762e:	e00a      	b.n	8017646 <LL_TIM_OC_SetMode+0x72>
 8017630:	2305      	movs	r3, #5
 8017632:	e008      	b.n	8017646 <LL_TIM_OC_SetMode+0x72>
 8017634:	2304      	movs	r3, #4
 8017636:	e006      	b.n	8017646 <LL_TIM_OC_SetMode+0x72>
 8017638:	2303      	movs	r3, #3
 801763a:	e004      	b.n	8017646 <LL_TIM_OC_SetMode+0x72>
 801763c:	2302      	movs	r3, #2
 801763e:	e002      	b.n	8017646 <LL_TIM_OC_SetMode+0x72>
 8017640:	2301      	movs	r3, #1
 8017642:	e000      	b.n	8017646 <LL_TIM_OC_SetMode+0x72>
 8017644:	2300      	movs	r3, #0
 8017646:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	3318      	adds	r3, #24
 801764c:	4619      	mov	r1, r3
 801764e:	7dfb      	ldrb	r3, [r7, #23]
 8017650:	4a0e      	ldr	r2, [pc, #56]	; (801768c <LL_TIM_OC_SetMode+0xb8>)
 8017652:	5cd3      	ldrb	r3, [r2, r3]
 8017654:	440b      	add	r3, r1
 8017656:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8017658:	693b      	ldr	r3, [r7, #16]
 801765a:	681a      	ldr	r2, [r3, #0]
 801765c:	7dfb      	ldrb	r3, [r7, #23]
 801765e:	490c      	ldr	r1, [pc, #48]	; (8017690 <LL_TIM_OC_SetMode+0xbc>)
 8017660:	5ccb      	ldrb	r3, [r1, r3]
 8017662:	4619      	mov	r1, r3
 8017664:	4b0b      	ldr	r3, [pc, #44]	; (8017694 <LL_TIM_OC_SetMode+0xc0>)
 8017666:	408b      	lsls	r3, r1
 8017668:	43db      	mvns	r3, r3
 801766a:	401a      	ands	r2, r3
 801766c:	7dfb      	ldrb	r3, [r7, #23]
 801766e:	4908      	ldr	r1, [pc, #32]	; (8017690 <LL_TIM_OC_SetMode+0xbc>)
 8017670:	5ccb      	ldrb	r3, [r1, r3]
 8017672:	4619      	mov	r1, r3
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	408b      	lsls	r3, r1
 8017678:	431a      	orrs	r2, r3
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	601a      	str	r2, [r3, #0]
}
 801767e:	bf00      	nop
 8017680:	371c      	adds	r7, #28
 8017682:	46bd      	mov	sp, r7
 8017684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017688:	4770      	bx	lr
 801768a:	bf00      	nop
 801768c:	08020530 	.word	0x08020530
 8017690:	0802053c 	.word	0x0802053c
 8017694:	00010073 	.word	0x00010073

08017698 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8017698:	b480      	push	{r7}
 801769a:	b087      	sub	sp, #28
 801769c:	af00      	add	r7, sp, #0
 801769e:	60f8      	str	r0, [r7, #12]
 80176a0:	60b9      	str	r1, [r7, #8]
 80176a2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	2b01      	cmp	r3, #1
 80176a8:	d02e      	beq.n	8017708 <LL_TIM_OC_SetPolarity+0x70>
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	2b04      	cmp	r3, #4
 80176ae:	d029      	beq.n	8017704 <LL_TIM_OC_SetPolarity+0x6c>
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	2b10      	cmp	r3, #16
 80176b4:	d024      	beq.n	8017700 <LL_TIM_OC_SetPolarity+0x68>
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	2b40      	cmp	r3, #64	; 0x40
 80176ba:	d01f      	beq.n	80176fc <LL_TIM_OC_SetPolarity+0x64>
 80176bc:	68bb      	ldr	r3, [r7, #8]
 80176be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80176c2:	d019      	beq.n	80176f8 <LL_TIM_OC_SetPolarity+0x60>
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80176ca:	d013      	beq.n	80176f4 <LL_TIM_OC_SetPolarity+0x5c>
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80176d2:	d00d      	beq.n	80176f0 <LL_TIM_OC_SetPolarity+0x58>
 80176d4:	68bb      	ldr	r3, [r7, #8]
 80176d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80176da:	d007      	beq.n	80176ec <LL_TIM_OC_SetPolarity+0x54>
 80176dc:	68bb      	ldr	r3, [r7, #8]
 80176de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80176e2:	d101      	bne.n	80176e8 <LL_TIM_OC_SetPolarity+0x50>
 80176e4:	2308      	movs	r3, #8
 80176e6:	e010      	b.n	801770a <LL_TIM_OC_SetPolarity+0x72>
 80176e8:	2309      	movs	r3, #9
 80176ea:	e00e      	b.n	801770a <LL_TIM_OC_SetPolarity+0x72>
 80176ec:	2307      	movs	r3, #7
 80176ee:	e00c      	b.n	801770a <LL_TIM_OC_SetPolarity+0x72>
 80176f0:	2306      	movs	r3, #6
 80176f2:	e00a      	b.n	801770a <LL_TIM_OC_SetPolarity+0x72>
 80176f4:	2305      	movs	r3, #5
 80176f6:	e008      	b.n	801770a <LL_TIM_OC_SetPolarity+0x72>
 80176f8:	2304      	movs	r3, #4
 80176fa:	e006      	b.n	801770a <LL_TIM_OC_SetPolarity+0x72>
 80176fc:	2303      	movs	r3, #3
 80176fe:	e004      	b.n	801770a <LL_TIM_OC_SetPolarity+0x72>
 8017700:	2302      	movs	r3, #2
 8017702:	e002      	b.n	801770a <LL_TIM_OC_SetPolarity+0x72>
 8017704:	2301      	movs	r3, #1
 8017706:	e000      	b.n	801770a <LL_TIM_OC_SetPolarity+0x72>
 8017708:	2300      	movs	r3, #0
 801770a:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	6a1a      	ldr	r2, [r3, #32]
 8017710:	7dfb      	ldrb	r3, [r7, #23]
 8017712:	490b      	ldr	r1, [pc, #44]	; (8017740 <LL_TIM_OC_SetPolarity+0xa8>)
 8017714:	5ccb      	ldrb	r3, [r1, r3]
 8017716:	4619      	mov	r1, r3
 8017718:	2302      	movs	r3, #2
 801771a:	408b      	lsls	r3, r1
 801771c:	43db      	mvns	r3, r3
 801771e:	401a      	ands	r2, r3
 8017720:	7dfb      	ldrb	r3, [r7, #23]
 8017722:	4907      	ldr	r1, [pc, #28]	; (8017740 <LL_TIM_OC_SetPolarity+0xa8>)
 8017724:	5ccb      	ldrb	r3, [r1, r3]
 8017726:	4619      	mov	r1, r3
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	408b      	lsls	r3, r1
 801772c:	431a      	orrs	r2, r3
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	621a      	str	r2, [r3, #32]
}
 8017732:	bf00      	nop
 8017734:	371c      	adds	r7, #28
 8017736:	46bd      	mov	sp, r7
 8017738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773c:	4770      	bx	lr
 801773e:	bf00      	nop
 8017740:	08020548 	.word	0x08020548

08017744 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017744:	b480      	push	{r7}
 8017746:	b083      	sub	sp, #12
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	683a      	ldr	r2, [r7, #0]
 8017752:	635a      	str	r2, [r3, #52]	; 0x34
}
 8017754:	bf00      	nop
 8017756:	370c      	adds	r7, #12
 8017758:	46bd      	mov	sp, r7
 801775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775e:	4770      	bx	lr

08017760 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017760:	b480      	push	{r7}
 8017762:	b083      	sub	sp, #12
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	683a      	ldr	r2, [r7, #0]
 801776e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8017770:	bf00      	nop
 8017772:	370c      	adds	r7, #12
 8017774:	46bd      	mov	sp, r7
 8017776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801777a:	4770      	bx	lr

0801777c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 801777c:	b480      	push	{r7}
 801777e:	b083      	sub	sp, #12
 8017780:	af00      	add	r7, sp, #0
 8017782:	6078      	str	r0, [r7, #4]
 8017784:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	683a      	ldr	r2, [r7, #0]
 801778a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801778c:	bf00      	nop
 801778e:	370c      	adds	r7, #12
 8017790:	46bd      	mov	sp, r7
 8017792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017796:	4770      	bx	lr

08017798 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017798:	b480      	push	{r7}
 801779a:	b083      	sub	sp, #12
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	683a      	ldr	r2, [r7, #0]
 80177a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80177a8:	bf00      	nop
 80177aa:	370c      	adds	r7, #12
 80177ac:	46bd      	mov	sp, r7
 80177ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b2:	4770      	bx	lr

080177b4 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 80177b4:	b480      	push	{r7}
 80177b6:	b083      	sub	sp, #12
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f06f 0202 	mvn.w	r2, #2
 80177c2:	611a      	str	r2, [r3, #16]
}
 80177c4:	bf00      	nop
 80177c6:	370c      	adds	r7, #12
 80177c8:	46bd      	mov	sp, r7
 80177ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ce:	4770      	bx	lr

080177d0 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 80177d0:	b480      	push	{r7}
 80177d2:	b083      	sub	sp, #12
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	691b      	ldr	r3, [r3, #16]
 80177dc:	f003 0302 	and.w	r3, r3, #2
 80177e0:	2b02      	cmp	r3, #2
 80177e2:	d101      	bne.n	80177e8 <LL_TIM_IsActiveFlag_CC1+0x18>
 80177e4:	2301      	movs	r3, #1
 80177e6:	e000      	b.n	80177ea <LL_TIM_IsActiveFlag_CC1+0x1a>
 80177e8:	2300      	movs	r3, #0
}
 80177ea:	4618      	mov	r0, r3
 80177ec:	370c      	adds	r7, #12
 80177ee:	46bd      	mov	sp, r7
 80177f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f4:	4770      	bx	lr

080177f6 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 80177f6:	b480      	push	{r7}
 80177f8:	b083      	sub	sp, #12
 80177fa:	af00      	add	r7, sp, #0
 80177fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	f06f 0204 	mvn.w	r2, #4
 8017804:	611a      	str	r2, [r3, #16]
}
 8017806:	bf00      	nop
 8017808:	370c      	adds	r7, #12
 801780a:	46bd      	mov	sp, r7
 801780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017810:	4770      	bx	lr

08017812 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8017812:	b480      	push	{r7}
 8017814:	b083      	sub	sp, #12
 8017816:	af00      	add	r7, sp, #0
 8017818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	691b      	ldr	r3, [r3, #16]
 801781e:	f003 0304 	and.w	r3, r3, #4
 8017822:	2b04      	cmp	r3, #4
 8017824:	d101      	bne.n	801782a <LL_TIM_IsActiveFlag_CC2+0x18>
 8017826:	2301      	movs	r3, #1
 8017828:	e000      	b.n	801782c <LL_TIM_IsActiveFlag_CC2+0x1a>
 801782a:	2300      	movs	r3, #0
}
 801782c:	4618      	mov	r0, r3
 801782e:	370c      	adds	r7, #12
 8017830:	46bd      	mov	sp, r7
 8017832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017836:	4770      	bx	lr

08017838 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8017838:	b480      	push	{r7}
 801783a:	b083      	sub	sp, #12
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	f06f 0208 	mvn.w	r2, #8
 8017846:	611a      	str	r2, [r3, #16]
}
 8017848:	bf00      	nop
 801784a:	370c      	adds	r7, #12
 801784c:	46bd      	mov	sp, r7
 801784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017852:	4770      	bx	lr

08017854 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8017854:	b480      	push	{r7}
 8017856:	b083      	sub	sp, #12
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	691b      	ldr	r3, [r3, #16]
 8017860:	f003 0308 	and.w	r3, r3, #8
 8017864:	2b08      	cmp	r3, #8
 8017866:	d101      	bne.n	801786c <LL_TIM_IsActiveFlag_CC3+0x18>
 8017868:	2301      	movs	r3, #1
 801786a:	e000      	b.n	801786e <LL_TIM_IsActiveFlag_CC3+0x1a>
 801786c:	2300      	movs	r3, #0
}
 801786e:	4618      	mov	r0, r3
 8017870:	370c      	adds	r7, #12
 8017872:	46bd      	mov	sp, r7
 8017874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017878:	4770      	bx	lr

0801787a <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 801787a:	b480      	push	{r7}
 801787c:	b083      	sub	sp, #12
 801787e:	af00      	add	r7, sp, #0
 8017880:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	f06f 0210 	mvn.w	r2, #16
 8017888:	611a      	str	r2, [r3, #16]
}
 801788a:	bf00      	nop
 801788c:	370c      	adds	r7, #12
 801788e:	46bd      	mov	sp, r7
 8017890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017894:	4770      	bx	lr

08017896 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8017896:	b480      	push	{r7}
 8017898:	b083      	sub	sp, #12
 801789a:	af00      	add	r7, sp, #0
 801789c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	691b      	ldr	r3, [r3, #16]
 80178a2:	f003 0310 	and.w	r3, r3, #16
 80178a6:	2b10      	cmp	r3, #16
 80178a8:	d101      	bne.n	80178ae <LL_TIM_IsActiveFlag_CC4+0x18>
 80178aa:	2301      	movs	r3, #1
 80178ac:	e000      	b.n	80178b0 <LL_TIM_IsActiveFlag_CC4+0x1a>
 80178ae:	2300      	movs	r3, #0
}
 80178b0:	4618      	mov	r0, r3
 80178b2:	370c      	adds	r7, #12
 80178b4:	46bd      	mov	sp, r7
 80178b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ba:	4770      	bx	lr

080178bc <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 80178bc:	b598      	push	{r3, r4, r7, lr}
 80178be:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 80178c0:	4b3d      	ldr	r3, [pc, #244]	; (80179b8 <USBPD_TIM_Init+0xfc>)
 80178c2:	f993 3000 	ldrsb.w	r3, [r3]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d16a      	bne.n	80179a0 <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 80178ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80178ce:	f7ff fe09 	bl	80174e4 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 80178d2:	2100      	movs	r1, #0
 80178d4:	4839      	ldr	r0, [pc, #228]	; (80179bc <USBPD_TIM_Init+0x100>)
 80178d6:	f7ff fe41 	bl	801755c <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 80178da:	4b39      	ldr	r3, [pc, #228]	; (80179c0 <USBPD_TIM_Init+0x104>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	4a39      	ldr	r2, [pc, #228]	; (80179c4 <USBPD_TIM_Init+0x108>)
 80178e0:	4293      	cmp	r3, r2
 80178e2:	d90b      	bls.n	80178fc <USBPD_TIM_Init+0x40>
 80178e4:	4b36      	ldr	r3, [pc, #216]	; (80179c0 <USBPD_TIM_Init+0x104>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 80178ec:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80178f0:	4a35      	ldr	r2, [pc, #212]	; (80179c8 <USBPD_TIM_Init+0x10c>)
 80178f2:	fba2 2303 	umull	r2, r3, r2, r3
 80178f6:	0c9b      	lsrs	r3, r3, #18
 80178f8:	3b01      	subs	r3, #1
 80178fa:	e000      	b.n	80178fe <USBPD_TIM_Init+0x42>
 80178fc:	2300      	movs	r3, #0
 80178fe:	4619      	mov	r1, r3
 8017900:	482e      	ldr	r0, [pc, #184]	; (80179bc <USBPD_TIM_Init+0x100>)
 8017902:	f7ff fe3e 	bl	8017582 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8017906:	4b2e      	ldr	r3, [pc, #184]	; (80179c0 <USBPD_TIM_Init+0x104>)
 8017908:	681c      	ldr	r4, [r3, #0]
 801790a:	482c      	ldr	r0, [pc, #176]	; (80179bc <USBPD_TIM_Init+0x100>)
 801790c:	f7ff fe47 	bl	801759e <LL_TIM_GetPrescaler>
 8017910:	4603      	mov	r3, r0
 8017912:	3301      	adds	r3, #1
 8017914:	fbb4 f3f3 	udiv	r3, r4, r3
 8017918:	2b63      	cmp	r3, #99	; 0x63
 801791a:	d90d      	bls.n	8017938 <USBPD_TIM_Init+0x7c>
 801791c:	4b28      	ldr	r3, [pc, #160]	; (80179c0 <USBPD_TIM_Init+0x104>)
 801791e:	681c      	ldr	r4, [r3, #0]
 8017920:	4826      	ldr	r0, [pc, #152]	; (80179bc <USBPD_TIM_Init+0x100>)
 8017922:	f7ff fe3c 	bl	801759e <LL_TIM_GetPrescaler>
 8017926:	4603      	mov	r3, r0
 8017928:	3301      	adds	r3, #1
 801792a:	2264      	movs	r2, #100	; 0x64
 801792c:	fb02 f303 	mul.w	r3, r2, r3
 8017930:	fbb4 f3f3 	udiv	r3, r4, r3
 8017934:	3b01      	subs	r3, #1
 8017936:	e000      	b.n	801793a <USBPD_TIM_Init+0x7e>
 8017938:	2300      	movs	r3, #0
 801793a:	4619      	mov	r1, r3
 801793c:	481f      	ldr	r0, [pc, #124]	; (80179bc <USBPD_TIM_Init+0x100>)
 801793e:	f7ff fe3a 	bl	80175b6 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8017942:	2230      	movs	r2, #48	; 0x30
 8017944:	2101      	movs	r1, #1
 8017946:	481d      	ldr	r0, [pc, #116]	; (80179bc <USBPD_TIM_Init+0x100>)
 8017948:	f7ff fe44 	bl	80175d4 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 801794c:	2230      	movs	r2, #48	; 0x30
 801794e:	2110      	movs	r1, #16
 8017950:	481a      	ldr	r0, [pc, #104]	; (80179bc <USBPD_TIM_Init+0x100>)
 8017952:	f7ff fe3f 	bl	80175d4 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8017956:	2230      	movs	r2, #48	; 0x30
 8017958:	f44f 7180 	mov.w	r1, #256	; 0x100
 801795c:	4817      	ldr	r0, [pc, #92]	; (80179bc <USBPD_TIM_Init+0x100>)
 801795e:	f7ff fe39 	bl	80175d4 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8017962:	2230      	movs	r2, #48	; 0x30
 8017964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017968:	4814      	ldr	r0, [pc, #80]	; (80179bc <USBPD_TIM_Init+0x100>)
 801796a:	f7ff fe33 	bl	80175d4 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 801796e:	2200      	movs	r2, #0
 8017970:	2101      	movs	r1, #1
 8017972:	4812      	ldr	r0, [pc, #72]	; (80179bc <USBPD_TIM_Init+0x100>)
 8017974:	f7ff fe90 	bl	8017698 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8017978:	2200      	movs	r2, #0
 801797a:	2110      	movs	r1, #16
 801797c:	480f      	ldr	r0, [pc, #60]	; (80179bc <USBPD_TIM_Init+0x100>)
 801797e:	f7ff fe8b 	bl	8017698 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8017982:	2200      	movs	r2, #0
 8017984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017988:	480c      	ldr	r0, [pc, #48]	; (80179bc <USBPD_TIM_Init+0x100>)
 801798a:	f7ff fe85 	bl	8017698 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 801798e:	2200      	movs	r2, #0
 8017990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017994:	4809      	ldr	r0, [pc, #36]	; (80179bc <USBPD_TIM_Init+0x100>)
 8017996:	f7ff fe7f 	bl	8017698 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 801799a:	4808      	ldr	r0, [pc, #32]	; (80179bc <USBPD_TIM_Init+0x100>)
 801799c:	f7ff fdce 	bl	801753c <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 80179a0:	4b05      	ldr	r3, [pc, #20]	; (80179b8 <USBPD_TIM_Init+0xfc>)
 80179a2:	f993 3000 	ldrsb.w	r3, [r3]
 80179a6:	b2db      	uxtb	r3, r3
 80179a8:	3301      	adds	r3, #1
 80179aa:	b2db      	uxtb	r3, r3
 80179ac:	b25a      	sxtb	r2, r3
 80179ae:	4b02      	ldr	r3, [pc, #8]	; (80179b8 <USBPD_TIM_Init+0xfc>)
 80179b0:	701a      	strb	r2, [r3, #0]
}
 80179b2:	bf00      	nop
 80179b4:	bd98      	pop	{r3, r4, r7, pc}
 80179b6:	bf00      	nop
 80179b8:	2000168c 	.word	0x2000168c
 80179bc:	40012c00 	.word	0x40012c00
 80179c0:	20000008 	.word	0x20000008
 80179c4:	000f423f 	.word	0x000f423f
 80179c8:	431bde83 	.word	0x431bde83

080179cc <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	af00      	add	r7, sp, #0
  timer_initcounter--;
 80179d0:	4b09      	ldr	r3, [pc, #36]	; (80179f8 <USBPD_TIM_DeInit+0x2c>)
 80179d2:	f993 3000 	ldrsb.w	r3, [r3]
 80179d6:	b2db      	uxtb	r3, r3
 80179d8:	3b01      	subs	r3, #1
 80179da:	b2db      	uxtb	r3, r3
 80179dc:	b25a      	sxtb	r2, r3
 80179de:	4b06      	ldr	r3, [pc, #24]	; (80179f8 <USBPD_TIM_DeInit+0x2c>)
 80179e0:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 80179e2:	4b05      	ldr	r3, [pc, #20]	; (80179f8 <USBPD_TIM_DeInit+0x2c>)
 80179e4:	f993 3000 	ldrsb.w	r3, [r3]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d103      	bne.n	80179f4 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 80179ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80179f0:	f7ff fd90 	bl	8017514 <LL_APB2_GRP1_DisableClock>
  }
}
 80179f4:	bf00      	nop
 80179f6:	bd80      	pop	{r7, pc}
 80179f8:	2000168c 	.word	0x2000168c

080179fc <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b082      	sub	sp, #8
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	4603      	mov	r3, r0
 8017a04:	6039      	str	r1, [r7, #0]
 8017a06:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8017a08:	79fb      	ldrb	r3, [r7, #7]
 8017a0a:	2b03      	cmp	r3, #3
 8017a0c:	d85e      	bhi.n	8017acc <USBPD_TIM_Start+0xd0>
 8017a0e:	a201      	add	r2, pc, #4	; (adr r2, 8017a14 <USBPD_TIM_Start+0x18>)
 8017a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a14:	08017a25 	.word	0x08017a25
 8017a18:	08017a4f 	.word	0x08017a4f
 8017a1c:	08017a79 	.word	0x08017a79
 8017a20:	08017aa3 	.word	0x08017aa3
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 8017a24:	4b2c      	ldr	r3, [pc, #176]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	441a      	add	r2, r3
 8017a2c:	4b2b      	ldr	r3, [pc, #172]	; (8017adc <USBPD_TIM_Start+0xe0>)
 8017a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8017a32:	0b5b      	lsrs	r3, r3, #13
 8017a34:	f242 7110 	movw	r1, #10000	; 0x2710
 8017a38:	fb01 f303 	mul.w	r3, r1, r3
 8017a3c:	1ad3      	subs	r3, r2, r3
 8017a3e:	4619      	mov	r1, r3
 8017a40:	4825      	ldr	r0, [pc, #148]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017a42:	f7ff fe7f 	bl	8017744 <LL_TIM_OC_SetCompareCH1>
 8017a46:	4824      	ldr	r0, [pc, #144]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017a48:	f7ff feb4 	bl	80177b4 <LL_TIM_ClearFlag_CC1>
      break;
 8017a4c:	e03f      	b.n	8017ace <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 8017a4e:	4b22      	ldr	r3, [pc, #136]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017a52:	683b      	ldr	r3, [r7, #0]
 8017a54:	441a      	add	r2, r3
 8017a56:	4b21      	ldr	r3, [pc, #132]	; (8017adc <USBPD_TIM_Start+0xe0>)
 8017a58:	fba3 1302 	umull	r1, r3, r3, r2
 8017a5c:	0b5b      	lsrs	r3, r3, #13
 8017a5e:	f242 7110 	movw	r1, #10000	; 0x2710
 8017a62:	fb01 f303 	mul.w	r3, r1, r3
 8017a66:	1ad3      	subs	r3, r2, r3
 8017a68:	4619      	mov	r1, r3
 8017a6a:	481b      	ldr	r0, [pc, #108]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017a6c:	f7ff fe78 	bl	8017760 <LL_TIM_OC_SetCompareCH2>
 8017a70:	4819      	ldr	r0, [pc, #100]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017a72:	f7ff fec0 	bl	80177f6 <LL_TIM_ClearFlag_CC2>
      break;
 8017a76:	e02a      	b.n	8017ace <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 8017a78:	4b17      	ldr	r3, [pc, #92]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017a7c:	683b      	ldr	r3, [r7, #0]
 8017a7e:	441a      	add	r2, r3
 8017a80:	4b16      	ldr	r3, [pc, #88]	; (8017adc <USBPD_TIM_Start+0xe0>)
 8017a82:	fba3 1302 	umull	r1, r3, r3, r2
 8017a86:	0b5b      	lsrs	r3, r3, #13
 8017a88:	f242 7110 	movw	r1, #10000	; 0x2710
 8017a8c:	fb01 f303 	mul.w	r3, r1, r3
 8017a90:	1ad3      	subs	r3, r2, r3
 8017a92:	4619      	mov	r1, r3
 8017a94:	4810      	ldr	r0, [pc, #64]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017a96:	f7ff fe71 	bl	801777c <LL_TIM_OC_SetCompareCH3>
 8017a9a:	480f      	ldr	r0, [pc, #60]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017a9c:	f7ff fecc 	bl	8017838 <LL_TIM_ClearFlag_CC3>
      break;
 8017aa0:	e015      	b.n	8017ace <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 8017aa2:	4b0d      	ldr	r3, [pc, #52]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017aa6:	683b      	ldr	r3, [r7, #0]
 8017aa8:	441a      	add	r2, r3
 8017aaa:	4b0c      	ldr	r3, [pc, #48]	; (8017adc <USBPD_TIM_Start+0xe0>)
 8017aac:	fba3 1302 	umull	r1, r3, r3, r2
 8017ab0:	0b5b      	lsrs	r3, r3, #13
 8017ab2:	f242 7110 	movw	r1, #10000	; 0x2710
 8017ab6:	fb01 f303 	mul.w	r3, r1, r3
 8017aba:	1ad3      	subs	r3, r2, r3
 8017abc:	4619      	mov	r1, r3
 8017abe:	4806      	ldr	r0, [pc, #24]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017ac0:	f7ff fe6a 	bl	8017798 <LL_TIM_OC_SetCompareCH4>
 8017ac4:	4804      	ldr	r0, [pc, #16]	; (8017ad8 <USBPD_TIM_Start+0xdc>)
 8017ac6:	f7ff fed8 	bl	801787a <LL_TIM_ClearFlag_CC4>
      break;
 8017aca:	e000      	b.n	8017ace <USBPD_TIM_Start+0xd2>
    default:
      break;
 8017acc:	bf00      	nop
  }
}
 8017ace:	bf00      	nop
 8017ad0:	3708      	adds	r7, #8
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}
 8017ad6:	bf00      	nop
 8017ad8:	40012c00 	.word	0x40012c00
 8017adc:	d1b71759 	.word	0xd1b71759

08017ae0 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b084      	sub	sp, #16
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 8017aea:	2301      	movs	r3, #1
 8017aec:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8017aee:	79fb      	ldrb	r3, [r7, #7]
 8017af0:	2b03      	cmp	r3, #3
 8017af2:	d81f      	bhi.n	8017b34 <USBPD_TIM_IsExpired+0x54>
 8017af4:	a201      	add	r2, pc, #4	; (adr r2, 8017afc <USBPD_TIM_IsExpired+0x1c>)
 8017af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017afa:	bf00      	nop
 8017afc:	08017b0d 	.word	0x08017b0d
 8017b00:	08017b17 	.word	0x08017b17
 8017b04:	08017b21 	.word	0x08017b21
 8017b08:	08017b2b 	.word	0x08017b2b
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8017b0c:	480c      	ldr	r0, [pc, #48]	; (8017b40 <USBPD_TIM_IsExpired+0x60>)
 8017b0e:	f7ff fe5f 	bl	80177d0 <LL_TIM_IsActiveFlag_CC1>
 8017b12:	60f8      	str	r0, [r7, #12]
      break;
 8017b14:	e00f      	b.n	8017b36 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8017b16:	480a      	ldr	r0, [pc, #40]	; (8017b40 <USBPD_TIM_IsExpired+0x60>)
 8017b18:	f7ff fe7b 	bl	8017812 <LL_TIM_IsActiveFlag_CC2>
 8017b1c:	60f8      	str	r0, [r7, #12]
      break;
 8017b1e:	e00a      	b.n	8017b36 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8017b20:	4807      	ldr	r0, [pc, #28]	; (8017b40 <USBPD_TIM_IsExpired+0x60>)
 8017b22:	f7ff fe97 	bl	8017854 <LL_TIM_IsActiveFlag_CC3>
 8017b26:	60f8      	str	r0, [r7, #12]
      break;
 8017b28:	e005      	b.n	8017b36 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8017b2a:	4805      	ldr	r0, [pc, #20]	; (8017b40 <USBPD_TIM_IsExpired+0x60>)
 8017b2c:	f7ff feb3 	bl	8017896 <LL_TIM_IsActiveFlag_CC4>
 8017b30:	60f8      	str	r0, [r7, #12]
      break;
 8017b32:	e000      	b.n	8017b36 <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 8017b34:	bf00      	nop
  }
  return _expired;
 8017b36:	68fb      	ldr	r3, [r7, #12]
}
 8017b38:	4618      	mov	r0, r3
 8017b3a:	3710      	adds	r7, #16
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}
 8017b40:	40012c00 	.word	0x40012c00

08017b44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b084      	sub	sp, #16
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]
 8017b4c:	460b      	mov	r3, r1
 8017b4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017b50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8017b54:	f007 f89e 	bl	801ec94 <USBD_static_malloc>
 8017b58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d105      	bne.n	8017b6c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	2200      	movs	r2, #0
 8017b64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8017b68:	2302      	movs	r3, #2
 8017b6a:	e066      	b.n	8017c3a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	68fa      	ldr	r2, [r7, #12]
 8017b70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	7c1b      	ldrb	r3, [r3, #16]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d119      	bne.n	8017bb0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017b80:	2202      	movs	r2, #2
 8017b82:	2181      	movs	r1, #129	; 0x81
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	f006 ff2c 	bl	801e9e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	2201      	movs	r2, #1
 8017b8e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017b94:	2202      	movs	r2, #2
 8017b96:	2101      	movs	r1, #1
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f006 ff22 	bl	801e9e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	2201      	movs	r2, #1
 8017ba2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2210      	movs	r2, #16
 8017baa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8017bae:	e016      	b.n	8017bde <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017bb0:	2340      	movs	r3, #64	; 0x40
 8017bb2:	2202      	movs	r2, #2
 8017bb4:	2181      	movs	r1, #129	; 0x81
 8017bb6:	6878      	ldr	r0, [r7, #4]
 8017bb8:	f006 ff13 	bl	801e9e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2201      	movs	r2, #1
 8017bc0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017bc2:	2340      	movs	r3, #64	; 0x40
 8017bc4:	2202      	movs	r2, #2
 8017bc6:	2101      	movs	r1, #1
 8017bc8:	6878      	ldr	r0, [r7, #4]
 8017bca:	f006 ff0a 	bl	801e9e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	2210      	movs	r2, #16
 8017bda:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017bde:	2308      	movs	r3, #8
 8017be0:	2203      	movs	r2, #3
 8017be2:	2182      	movs	r1, #130	; 0x82
 8017be4:	6878      	ldr	r0, [r7, #4]
 8017be6:	f006 fefc 	bl	801e9e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2201      	movs	r2, #1
 8017bee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	2200      	movs	r2, #0
 8017c00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	2200      	movs	r2, #0
 8017c08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	7c1b      	ldrb	r3, [r3, #16]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d109      	bne.n	8017c28 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017c1e:	2101      	movs	r1, #1
 8017c20:	6878      	ldr	r0, [r7, #4]
 8017c22:	f006 ffcd 	bl	801ebc0 <USBD_LL_PrepareReceive>
 8017c26:	e007      	b.n	8017c38 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017c2e:	2340      	movs	r3, #64	; 0x40
 8017c30:	2101      	movs	r1, #1
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f006 ffc4 	bl	801ebc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017c38:	2300      	movs	r3, #0
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	3710      	adds	r7, #16
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}

08017c42 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017c42:	b580      	push	{r7, lr}
 8017c44:	b082      	sub	sp, #8
 8017c46:	af00      	add	r7, sp, #0
 8017c48:	6078      	str	r0, [r7, #4]
 8017c4a:	460b      	mov	r3, r1
 8017c4c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8017c4e:	2181      	movs	r1, #129	; 0x81
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f006 feec 	bl	801ea2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	2200      	movs	r2, #0
 8017c5a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8017c5c:	2101      	movs	r1, #1
 8017c5e:	6878      	ldr	r0, [r7, #4]
 8017c60:	f006 fee5 	bl	801ea2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	2200      	movs	r2, #0
 8017c68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8017c6c:	2182      	movs	r1, #130	; 0x82
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	f006 fedd 	bl	801ea2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	2200      	movs	r2, #0
 8017c78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d00e      	beq.n	8017cac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017c94:	685b      	ldr	r3, [r3, #4]
 8017c96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f007 f806 	bl	801ecb0 <USBD_static_free>
    pdev->pClassData = NULL;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8017cac:	2300      	movs	r3, #0
}
 8017cae:	4618      	mov	r0, r3
 8017cb0:	3708      	adds	r7, #8
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	bd80      	pop	{r7, pc}
	...

08017cb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b086      	sub	sp, #24
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017cc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8017cd6:	693b      	ldr	r3, [r7, #16]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d101      	bne.n	8017ce0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8017cdc:	2303      	movs	r3, #3
 8017cde:	e0af      	b.n	8017e40 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	781b      	ldrb	r3, [r3, #0]
 8017ce4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d03f      	beq.n	8017d6c <USBD_CDC_Setup+0xb4>
 8017cec:	2b20      	cmp	r3, #32
 8017cee:	f040 809f 	bne.w	8017e30 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	88db      	ldrh	r3, [r3, #6]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d02e      	beq.n	8017d58 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	781b      	ldrb	r3, [r3, #0]
 8017cfe:	b25b      	sxtb	r3, r3
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	da16      	bge.n	8017d32 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017d0a:	689b      	ldr	r3, [r3, #8]
 8017d0c:	683a      	ldr	r2, [r7, #0]
 8017d0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8017d10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017d12:	683a      	ldr	r2, [r7, #0]
 8017d14:	88d2      	ldrh	r2, [r2, #6]
 8017d16:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	88db      	ldrh	r3, [r3, #6]
 8017d1c:	2b07      	cmp	r3, #7
 8017d1e:	bf28      	it	cs
 8017d20:	2307      	movcs	r3, #7
 8017d22:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8017d24:	693b      	ldr	r3, [r7, #16]
 8017d26:	89fa      	ldrh	r2, [r7, #14]
 8017d28:	4619      	mov	r1, r3
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f001 facf 	bl	80192ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8017d30:	e085      	b.n	8017e3e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8017d32:	683b      	ldr	r3, [r7, #0]
 8017d34:	785a      	ldrb	r2, [r3, #1]
 8017d36:	693b      	ldr	r3, [r7, #16]
 8017d38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8017d3c:	683b      	ldr	r3, [r7, #0]
 8017d3e:	88db      	ldrh	r3, [r3, #6]
 8017d40:	b2da      	uxtb	r2, r3
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8017d48:	6939      	ldr	r1, [r7, #16]
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	88db      	ldrh	r3, [r3, #6]
 8017d4e:	461a      	mov	r2, r3
 8017d50:	6878      	ldr	r0, [r7, #4]
 8017d52:	f001 fae8 	bl	8019326 <USBD_CtlPrepareRx>
      break;
 8017d56:	e072      	b.n	8017e3e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017d5e:	689b      	ldr	r3, [r3, #8]
 8017d60:	683a      	ldr	r2, [r7, #0]
 8017d62:	7850      	ldrb	r0, [r2, #1]
 8017d64:	2200      	movs	r2, #0
 8017d66:	6839      	ldr	r1, [r7, #0]
 8017d68:	4798      	blx	r3
      break;
 8017d6a:	e068      	b.n	8017e3e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	785b      	ldrb	r3, [r3, #1]
 8017d70:	2b0b      	cmp	r3, #11
 8017d72:	d852      	bhi.n	8017e1a <USBD_CDC_Setup+0x162>
 8017d74:	a201      	add	r2, pc, #4	; (adr r2, 8017d7c <USBD_CDC_Setup+0xc4>)
 8017d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d7a:	bf00      	nop
 8017d7c:	08017dad 	.word	0x08017dad
 8017d80:	08017e29 	.word	0x08017e29
 8017d84:	08017e1b 	.word	0x08017e1b
 8017d88:	08017e1b 	.word	0x08017e1b
 8017d8c:	08017e1b 	.word	0x08017e1b
 8017d90:	08017e1b 	.word	0x08017e1b
 8017d94:	08017e1b 	.word	0x08017e1b
 8017d98:	08017e1b 	.word	0x08017e1b
 8017d9c:	08017e1b 	.word	0x08017e1b
 8017da0:	08017e1b 	.word	0x08017e1b
 8017da4:	08017dd7 	.word	0x08017dd7
 8017da8:	08017e01 	.word	0x08017e01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017db2:	b2db      	uxtb	r3, r3
 8017db4:	2b03      	cmp	r3, #3
 8017db6:	d107      	bne.n	8017dc8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8017db8:	f107 030a 	add.w	r3, r7, #10
 8017dbc:	2202      	movs	r2, #2
 8017dbe:	4619      	mov	r1, r3
 8017dc0:	6878      	ldr	r0, [r7, #4]
 8017dc2:	f001 fa84 	bl	80192ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017dc6:	e032      	b.n	8017e2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8017dc8:	6839      	ldr	r1, [r7, #0]
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	f001 fa0e 	bl	80191ec <USBD_CtlError>
            ret = USBD_FAIL;
 8017dd0:	2303      	movs	r3, #3
 8017dd2:	75fb      	strb	r3, [r7, #23]
          break;
 8017dd4:	e02b      	b.n	8017e2e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017ddc:	b2db      	uxtb	r3, r3
 8017dde:	2b03      	cmp	r3, #3
 8017de0:	d107      	bne.n	8017df2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8017de2:	f107 030d 	add.w	r3, r7, #13
 8017de6:	2201      	movs	r2, #1
 8017de8:	4619      	mov	r1, r3
 8017dea:	6878      	ldr	r0, [r7, #4]
 8017dec:	f001 fa6f 	bl	80192ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017df0:	e01d      	b.n	8017e2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8017df2:	6839      	ldr	r1, [r7, #0]
 8017df4:	6878      	ldr	r0, [r7, #4]
 8017df6:	f001 f9f9 	bl	80191ec <USBD_CtlError>
            ret = USBD_FAIL;
 8017dfa:	2303      	movs	r3, #3
 8017dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8017dfe:	e016      	b.n	8017e2e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e06:	b2db      	uxtb	r3, r3
 8017e08:	2b03      	cmp	r3, #3
 8017e0a:	d00f      	beq.n	8017e2c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8017e0c:	6839      	ldr	r1, [r7, #0]
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	f001 f9ec 	bl	80191ec <USBD_CtlError>
            ret = USBD_FAIL;
 8017e14:	2303      	movs	r3, #3
 8017e16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8017e18:	e008      	b.n	8017e2c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8017e1a:	6839      	ldr	r1, [r7, #0]
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f001 f9e5 	bl	80191ec <USBD_CtlError>
          ret = USBD_FAIL;
 8017e22:	2303      	movs	r3, #3
 8017e24:	75fb      	strb	r3, [r7, #23]
          break;
 8017e26:	e002      	b.n	8017e2e <USBD_CDC_Setup+0x176>
          break;
 8017e28:	bf00      	nop
 8017e2a:	e008      	b.n	8017e3e <USBD_CDC_Setup+0x186>
          break;
 8017e2c:	bf00      	nop
      }
      break;
 8017e2e:	e006      	b.n	8017e3e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8017e30:	6839      	ldr	r1, [r7, #0]
 8017e32:	6878      	ldr	r0, [r7, #4]
 8017e34:	f001 f9da 	bl	80191ec <USBD_CtlError>
      ret = USBD_FAIL;
 8017e38:	2303      	movs	r3, #3
 8017e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8017e3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8017e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e40:	4618      	mov	r0, r3
 8017e42:	3718      	adds	r7, #24
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}

08017e48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b084      	sub	sp, #16
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
 8017e50:	460b      	mov	r3, r1
 8017e52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017e5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d101      	bne.n	8017e6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017e66:	2303      	movs	r3, #3
 8017e68:	e04f      	b.n	8017f0a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017e70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8017e72:	78fa      	ldrb	r2, [r7, #3]
 8017e74:	6879      	ldr	r1, [r7, #4]
 8017e76:	4613      	mov	r3, r2
 8017e78:	009b      	lsls	r3, r3, #2
 8017e7a:	4413      	add	r3, r2
 8017e7c:	009b      	lsls	r3, r3, #2
 8017e7e:	440b      	add	r3, r1
 8017e80:	3318      	adds	r3, #24
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d029      	beq.n	8017edc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8017e88:	78fa      	ldrb	r2, [r7, #3]
 8017e8a:	6879      	ldr	r1, [r7, #4]
 8017e8c:	4613      	mov	r3, r2
 8017e8e:	009b      	lsls	r3, r3, #2
 8017e90:	4413      	add	r3, r2
 8017e92:	009b      	lsls	r3, r3, #2
 8017e94:	440b      	add	r3, r1
 8017e96:	3318      	adds	r3, #24
 8017e98:	681a      	ldr	r2, [r3, #0]
 8017e9a:	78f9      	ldrb	r1, [r7, #3]
 8017e9c:	68f8      	ldr	r0, [r7, #12]
 8017e9e:	460b      	mov	r3, r1
 8017ea0:	009b      	lsls	r3, r3, #2
 8017ea2:	440b      	add	r3, r1
 8017ea4:	00db      	lsls	r3, r3, #3
 8017ea6:	4403      	add	r3, r0
 8017ea8:	3320      	adds	r3, #32
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	fbb2 f1f3 	udiv	r1, r2, r3
 8017eb0:	fb01 f303 	mul.w	r3, r1, r3
 8017eb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d110      	bne.n	8017edc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8017eba:	78fa      	ldrb	r2, [r7, #3]
 8017ebc:	6879      	ldr	r1, [r7, #4]
 8017ebe:	4613      	mov	r3, r2
 8017ec0:	009b      	lsls	r3, r3, #2
 8017ec2:	4413      	add	r3, r2
 8017ec4:	009b      	lsls	r3, r3, #2
 8017ec6:	440b      	add	r3, r1
 8017ec8:	3318      	adds	r3, #24
 8017eca:	2200      	movs	r2, #0
 8017ecc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017ece:	78f9      	ldrb	r1, [r7, #3]
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	6878      	ldr	r0, [r7, #4]
 8017ed6:	f006 fe52 	bl	801eb7e <USBD_LL_Transmit>
 8017eda:	e015      	b.n	8017f08 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8017edc:	68bb      	ldr	r3, [r7, #8]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017eea:	691b      	ldr	r3, [r3, #16]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d00b      	beq.n	8017f08 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017ef6:	691b      	ldr	r3, [r3, #16]
 8017ef8:	68ba      	ldr	r2, [r7, #8]
 8017efa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8017efe:	68ba      	ldr	r2, [r7, #8]
 8017f00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8017f04:	78fa      	ldrb	r2, [r7, #3]
 8017f06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8017f08:	2300      	movs	r3, #0
}
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	3710      	adds	r7, #16
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}

08017f12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017f12:	b580      	push	{r7, lr}
 8017f14:	b084      	sub	sp, #16
 8017f16:	af00      	add	r7, sp, #0
 8017f18:	6078      	str	r0, [r7, #4]
 8017f1a:	460b      	mov	r3, r1
 8017f1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017f24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d101      	bne.n	8017f34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017f30:	2303      	movs	r3, #3
 8017f32:	e015      	b.n	8017f60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017f34:	78fb      	ldrb	r3, [r7, #3]
 8017f36:	4619      	mov	r1, r3
 8017f38:	6878      	ldr	r0, [r7, #4]
 8017f3a:	f006 fe62 	bl	801ec02 <USBD_LL_GetRxDataSize>
 8017f3e:	4602      	mov	r2, r0
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017f4c:	68db      	ldr	r3, [r3, #12]
 8017f4e:	68fa      	ldr	r2, [r7, #12]
 8017f50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8017f54:	68fa      	ldr	r2, [r7, #12]
 8017f56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8017f5a:	4611      	mov	r1, r2
 8017f5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8017f5e:	2300      	movs	r3, #0
}
 8017f60:	4618      	mov	r0, r3
 8017f62:	3710      	adds	r7, #16
 8017f64:	46bd      	mov	sp, r7
 8017f66:	bd80      	pop	{r7, pc}

08017f68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b084      	sub	sp, #16
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017f76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d101      	bne.n	8017f82 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8017f7e:	2303      	movs	r3, #3
 8017f80:	e01b      	b.n	8017fba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d015      	beq.n	8017fb8 <USBD_CDC_EP0_RxReady+0x50>
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8017f92:	2bff      	cmp	r3, #255	; 0xff
 8017f94:	d010      	beq.n	8017fb8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017f9c:	689b      	ldr	r3, [r3, #8]
 8017f9e:	68fa      	ldr	r2, [r7, #12]
 8017fa0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8017fa4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8017fa6:	68fa      	ldr	r2, [r7, #12]
 8017fa8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017fac:	b292      	uxth	r2, r2
 8017fae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	22ff      	movs	r2, #255	; 0xff
 8017fb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8017fb8:	2300      	movs	r3, #0
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3710      	adds	r7, #16
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
	...

08017fc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017fc4:	b480      	push	{r7}
 8017fc6:	b083      	sub	sp, #12
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2243      	movs	r2, #67	; 0x43
 8017fd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8017fd2:	4b03      	ldr	r3, [pc, #12]	; (8017fe0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	370c      	adds	r7, #12
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fde:	4770      	bx	lr
 8017fe0:	2000009c 	.word	0x2000009c

08017fe4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017fe4:	b480      	push	{r7}
 8017fe6:	b083      	sub	sp, #12
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	2243      	movs	r2, #67	; 0x43
 8017ff0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8017ff2:	4b03      	ldr	r3, [pc, #12]	; (8018000 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	370c      	adds	r7, #12
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffe:	4770      	bx	lr
 8018000:	20000058 	.word	0x20000058

08018004 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018004:	b480      	push	{r7}
 8018006:	b083      	sub	sp, #12
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	2243      	movs	r2, #67	; 0x43
 8018010:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8018012:	4b03      	ldr	r3, [pc, #12]	; (8018020 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018014:	4618      	mov	r0, r3
 8018016:	370c      	adds	r7, #12
 8018018:	46bd      	mov	sp, r7
 801801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801e:	4770      	bx	lr
 8018020:	200000e0 	.word	0x200000e0

08018024 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018024:	b480      	push	{r7}
 8018026:	b083      	sub	sp, #12
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	220a      	movs	r2, #10
 8018030:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8018032:	4b03      	ldr	r3, [pc, #12]	; (8018040 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018034:	4618      	mov	r0, r3
 8018036:	370c      	adds	r7, #12
 8018038:	46bd      	mov	sp, r7
 801803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803e:	4770      	bx	lr
 8018040:	20000014 	.word	0x20000014

08018044 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8018044:	b480      	push	{r7}
 8018046:	b083      	sub	sp, #12
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
 801804c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d101      	bne.n	8018058 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8018054:	2303      	movs	r3, #3
 8018056:	e004      	b.n	8018062 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	683a      	ldr	r2, [r7, #0]
 801805c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8018060:	2300      	movs	r3, #0
}
 8018062:	4618      	mov	r0, r3
 8018064:	370c      	adds	r7, #12
 8018066:	46bd      	mov	sp, r7
 8018068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806c:	4770      	bx	lr

0801806e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801806e:	b480      	push	{r7}
 8018070:	b087      	sub	sp, #28
 8018072:	af00      	add	r7, sp, #0
 8018074:	60f8      	str	r0, [r7, #12]
 8018076:	60b9      	str	r1, [r7, #8]
 8018078:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018080:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d101      	bne.n	801808c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8018088:	2303      	movs	r3, #3
 801808a:	e008      	b.n	801809e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801808c:	697b      	ldr	r3, [r7, #20]
 801808e:	68ba      	ldr	r2, [r7, #8]
 8018090:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8018094:	697b      	ldr	r3, [r7, #20]
 8018096:	687a      	ldr	r2, [r7, #4]
 8018098:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801809c:	2300      	movs	r3, #0
}
 801809e:	4618      	mov	r0, r3
 80180a0:	371c      	adds	r7, #28
 80180a2:	46bd      	mov	sp, r7
 80180a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a8:	4770      	bx	lr

080180aa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80180aa:	b480      	push	{r7}
 80180ac:	b085      	sub	sp, #20
 80180ae:	af00      	add	r7, sp, #0
 80180b0:	6078      	str	r0, [r7, #4]
 80180b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d101      	bne.n	80180c6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80180c2:	2303      	movs	r3, #3
 80180c4:	e004      	b.n	80180d0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	683a      	ldr	r2, [r7, #0]
 80180ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80180ce:	2300      	movs	r3, #0
}
 80180d0:	4618      	mov	r0, r3
 80180d2:	3714      	adds	r7, #20
 80180d4:	46bd      	mov	sp, r7
 80180d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180da:	4770      	bx	lr

080180dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b084      	sub	sp, #16
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80180ec:	2301      	movs	r3, #1
 80180ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d101      	bne.n	80180fe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80180fa:	2303      	movs	r3, #3
 80180fc:	e01a      	b.n	8018134 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8018104:	2b00      	cmp	r3, #0
 8018106:	d114      	bne.n	8018132 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8018108:	68bb      	ldr	r3, [r7, #8]
 801810a:	2201      	movs	r2, #1
 801810c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8018126:	2181      	movs	r1, #129	; 0x81
 8018128:	6878      	ldr	r0, [r7, #4]
 801812a:	f006 fd28 	bl	801eb7e <USBD_LL_Transmit>

    ret = USBD_OK;
 801812e:	2300      	movs	r3, #0
 8018130:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8018132:	7bfb      	ldrb	r3, [r7, #15]
}
 8018134:	4618      	mov	r0, r3
 8018136:	3710      	adds	r7, #16
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}

0801813c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b084      	sub	sp, #16
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801814a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018152:	2b00      	cmp	r3, #0
 8018154:	d101      	bne.n	801815a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8018156:	2303      	movs	r3, #3
 8018158:	e016      	b.n	8018188 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	7c1b      	ldrb	r3, [r3, #16]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d109      	bne.n	8018176 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018168:	f44f 7300 	mov.w	r3, #512	; 0x200
 801816c:	2101      	movs	r1, #1
 801816e:	6878      	ldr	r0, [r7, #4]
 8018170:	f006 fd26 	bl	801ebc0 <USBD_LL_PrepareReceive>
 8018174:	e007      	b.n	8018186 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801817c:	2340      	movs	r3, #64	; 0x40
 801817e:	2101      	movs	r1, #1
 8018180:	6878      	ldr	r0, [r7, #4]
 8018182:	f006 fd1d 	bl	801ebc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018186:	2300      	movs	r3, #0
}
 8018188:	4618      	mov	r0, r3
 801818a:	3710      	adds	r7, #16
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}

08018190 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b086      	sub	sp, #24
 8018194:	af00      	add	r7, sp, #0
 8018196:	60f8      	str	r0, [r7, #12]
 8018198:	60b9      	str	r1, [r7, #8]
 801819a:	4613      	mov	r3, r2
 801819c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d101      	bne.n	80181a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80181a4:	2303      	movs	r3, #3
 80181a6:	e01f      	b.n	80181e8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	2200      	movs	r2, #0
 80181ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	2200      	movs	r2, #0
 80181b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	2200      	movs	r2, #0
 80181bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d003      	beq.n	80181ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	68ba      	ldr	r2, [r7, #8]
 80181ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	2201      	movs	r2, #1
 80181d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	79fa      	ldrb	r2, [r7, #7]
 80181da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80181dc:	68f8      	ldr	r0, [r7, #12]
 80181de:	f006 fb85 	bl	801e8ec <USBD_LL_Init>
 80181e2:	4603      	mov	r3, r0
 80181e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80181e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80181e8:	4618      	mov	r0, r3
 80181ea:	3718      	adds	r7, #24
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b084      	sub	sp, #16
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
 80181f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80181fa:	2300      	movs	r3, #0
 80181fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d101      	bne.n	8018208 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8018204:	2303      	movs	r3, #3
 8018206:	e016      	b.n	8018236 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	683a      	ldr	r2, [r7, #0]
 801820c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018218:	2b00      	cmp	r3, #0
 801821a:	d00b      	beq.n	8018234 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018224:	f107 020e 	add.w	r2, r7, #14
 8018228:	4610      	mov	r0, r2
 801822a:	4798      	blx	r3
 801822c:	4602      	mov	r2, r0
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8018234:	2300      	movs	r3, #0
}
 8018236:	4618      	mov	r0, r3
 8018238:	3710      	adds	r7, #16
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}

0801823e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801823e:	b580      	push	{r7, lr}
 8018240:	b082      	sub	sp, #8
 8018242:	af00      	add	r7, sp, #0
 8018244:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8018246:	6878      	ldr	r0, [r7, #4]
 8018248:	f006 fbb0 	bl	801e9ac <USBD_LL_Start>
 801824c:	4603      	mov	r3, r0
}
 801824e:	4618      	mov	r0, r3
 8018250:	3708      	adds	r7, #8
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}

08018256 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8018256:	b480      	push	{r7}
 8018258:	b083      	sub	sp, #12
 801825a:	af00      	add	r7, sp, #0
 801825c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801825e:	2300      	movs	r3, #0
}
 8018260:	4618      	mov	r0, r3
 8018262:	370c      	adds	r7, #12
 8018264:	46bd      	mov	sp, r7
 8018266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801826a:	4770      	bx	lr

0801826c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b084      	sub	sp, #16
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
 8018274:	460b      	mov	r3, r1
 8018276:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8018278:	2303      	movs	r3, #3
 801827a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018282:	2b00      	cmp	r3, #0
 8018284:	d009      	beq.n	801829a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	78fa      	ldrb	r2, [r7, #3]
 8018290:	4611      	mov	r1, r2
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	4798      	blx	r3
 8018296:	4603      	mov	r3, r0
 8018298:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801829a:	7bfb      	ldrb	r3, [r7, #15]
}
 801829c:	4618      	mov	r0, r3
 801829e:	3710      	adds	r7, #16
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}

080182a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
 80182ac:	460b      	mov	r3, r1
 80182ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d007      	beq.n	80182ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80182c0:	685b      	ldr	r3, [r3, #4]
 80182c2:	78fa      	ldrb	r2, [r7, #3]
 80182c4:	4611      	mov	r1, r2
 80182c6:	6878      	ldr	r0, [r7, #4]
 80182c8:	4798      	blx	r3
  }

  return USBD_OK;
 80182ca:	2300      	movs	r3, #0
}
 80182cc:	4618      	mov	r0, r3
 80182ce:	3708      	adds	r7, #8
 80182d0:	46bd      	mov	sp, r7
 80182d2:	bd80      	pop	{r7, pc}

080182d4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b084      	sub	sp, #16
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80182e4:	6839      	ldr	r1, [r7, #0]
 80182e6:	4618      	mov	r0, r3
 80182e8:	f000 ff46 	bl	8019178 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	2201      	movs	r2, #1
 80182f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80182fa:	461a      	mov	r2, r3
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018308:	f003 031f 	and.w	r3, r3, #31
 801830c:	2b02      	cmp	r3, #2
 801830e:	d01a      	beq.n	8018346 <USBD_LL_SetupStage+0x72>
 8018310:	2b02      	cmp	r3, #2
 8018312:	d822      	bhi.n	801835a <USBD_LL_SetupStage+0x86>
 8018314:	2b00      	cmp	r3, #0
 8018316:	d002      	beq.n	801831e <USBD_LL_SetupStage+0x4a>
 8018318:	2b01      	cmp	r3, #1
 801831a:	d00a      	beq.n	8018332 <USBD_LL_SetupStage+0x5e>
 801831c:	e01d      	b.n	801835a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018324:	4619      	mov	r1, r3
 8018326:	6878      	ldr	r0, [r7, #4]
 8018328:	f000 f9ee 	bl	8018708 <USBD_StdDevReq>
 801832c:	4603      	mov	r3, r0
 801832e:	73fb      	strb	r3, [r7, #15]
      break;
 8018330:	e020      	b.n	8018374 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018338:	4619      	mov	r1, r3
 801833a:	6878      	ldr	r0, [r7, #4]
 801833c:	f000 fa52 	bl	80187e4 <USBD_StdItfReq>
 8018340:	4603      	mov	r3, r0
 8018342:	73fb      	strb	r3, [r7, #15]
      break;
 8018344:	e016      	b.n	8018374 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801834c:	4619      	mov	r1, r3
 801834e:	6878      	ldr	r0, [r7, #4]
 8018350:	f000 fa91 	bl	8018876 <USBD_StdEPReq>
 8018354:	4603      	mov	r3, r0
 8018356:	73fb      	strb	r3, [r7, #15]
      break;
 8018358:	e00c      	b.n	8018374 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018360:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018364:	b2db      	uxtb	r3, r3
 8018366:	4619      	mov	r1, r3
 8018368:	6878      	ldr	r0, [r7, #4]
 801836a:	f006 fb7f 	bl	801ea6c <USBD_LL_StallEP>
 801836e:	4603      	mov	r3, r0
 8018370:	73fb      	strb	r3, [r7, #15]
      break;
 8018372:	bf00      	nop
  }

  return ret;
 8018374:	7bfb      	ldrb	r3, [r7, #15]
}
 8018376:	4618      	mov	r0, r3
 8018378:	3710      	adds	r7, #16
 801837a:	46bd      	mov	sp, r7
 801837c:	bd80      	pop	{r7, pc}

0801837e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801837e:	b580      	push	{r7, lr}
 8018380:	b086      	sub	sp, #24
 8018382:	af00      	add	r7, sp, #0
 8018384:	60f8      	str	r0, [r7, #12]
 8018386:	460b      	mov	r3, r1
 8018388:	607a      	str	r2, [r7, #4]
 801838a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801838c:	7afb      	ldrb	r3, [r7, #11]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d138      	bne.n	8018404 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018398:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80183a0:	2b03      	cmp	r3, #3
 80183a2:	d14a      	bne.n	801843a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80183a4:	693b      	ldr	r3, [r7, #16]
 80183a6:	689a      	ldr	r2, [r3, #8]
 80183a8:	693b      	ldr	r3, [r7, #16]
 80183aa:	68db      	ldr	r3, [r3, #12]
 80183ac:	429a      	cmp	r2, r3
 80183ae:	d913      	bls.n	80183d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80183b0:	693b      	ldr	r3, [r7, #16]
 80183b2:	689a      	ldr	r2, [r3, #8]
 80183b4:	693b      	ldr	r3, [r7, #16]
 80183b6:	68db      	ldr	r3, [r3, #12]
 80183b8:	1ad2      	subs	r2, r2, r3
 80183ba:	693b      	ldr	r3, [r7, #16]
 80183bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80183be:	693b      	ldr	r3, [r7, #16]
 80183c0:	68da      	ldr	r2, [r3, #12]
 80183c2:	693b      	ldr	r3, [r7, #16]
 80183c4:	689b      	ldr	r3, [r3, #8]
 80183c6:	4293      	cmp	r3, r2
 80183c8:	bf28      	it	cs
 80183ca:	4613      	movcs	r3, r2
 80183cc:	461a      	mov	r2, r3
 80183ce:	6879      	ldr	r1, [r7, #4]
 80183d0:	68f8      	ldr	r0, [r7, #12]
 80183d2:	f000 ffc5 	bl	8019360 <USBD_CtlContinueRx>
 80183d6:	e030      	b.n	801843a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80183de:	b2db      	uxtb	r3, r3
 80183e0:	2b03      	cmp	r3, #3
 80183e2:	d10b      	bne.n	80183fc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80183ea:	691b      	ldr	r3, [r3, #16]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d005      	beq.n	80183fc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80183f6:	691b      	ldr	r3, [r3, #16]
 80183f8:	68f8      	ldr	r0, [r7, #12]
 80183fa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80183fc:	68f8      	ldr	r0, [r7, #12]
 80183fe:	f000 ffc0 	bl	8019382 <USBD_CtlSendStatus>
 8018402:	e01a      	b.n	801843a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801840a:	b2db      	uxtb	r3, r3
 801840c:	2b03      	cmp	r3, #3
 801840e:	d114      	bne.n	801843a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018416:	699b      	ldr	r3, [r3, #24]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d00e      	beq.n	801843a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018422:	699b      	ldr	r3, [r3, #24]
 8018424:	7afa      	ldrb	r2, [r7, #11]
 8018426:	4611      	mov	r1, r2
 8018428:	68f8      	ldr	r0, [r7, #12]
 801842a:	4798      	blx	r3
 801842c:	4603      	mov	r3, r0
 801842e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8018430:	7dfb      	ldrb	r3, [r7, #23]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d001      	beq.n	801843a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8018436:	7dfb      	ldrb	r3, [r7, #23]
 8018438:	e000      	b.n	801843c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801843a:	2300      	movs	r3, #0
}
 801843c:	4618      	mov	r0, r3
 801843e:	3718      	adds	r7, #24
 8018440:	46bd      	mov	sp, r7
 8018442:	bd80      	pop	{r7, pc}

08018444 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b086      	sub	sp, #24
 8018448:	af00      	add	r7, sp, #0
 801844a:	60f8      	str	r0, [r7, #12]
 801844c:	460b      	mov	r3, r1
 801844e:	607a      	str	r2, [r7, #4]
 8018450:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8018452:	7afb      	ldrb	r3, [r7, #11]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d16b      	bne.n	8018530 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	3314      	adds	r3, #20
 801845c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018464:	2b02      	cmp	r3, #2
 8018466:	d156      	bne.n	8018516 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8018468:	693b      	ldr	r3, [r7, #16]
 801846a:	689a      	ldr	r2, [r3, #8]
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	68db      	ldr	r3, [r3, #12]
 8018470:	429a      	cmp	r2, r3
 8018472:	d914      	bls.n	801849e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018474:	693b      	ldr	r3, [r7, #16]
 8018476:	689a      	ldr	r2, [r3, #8]
 8018478:	693b      	ldr	r3, [r7, #16]
 801847a:	68db      	ldr	r3, [r3, #12]
 801847c:	1ad2      	subs	r2, r2, r3
 801847e:	693b      	ldr	r3, [r7, #16]
 8018480:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8018482:	693b      	ldr	r3, [r7, #16]
 8018484:	689b      	ldr	r3, [r3, #8]
 8018486:	461a      	mov	r2, r3
 8018488:	6879      	ldr	r1, [r7, #4]
 801848a:	68f8      	ldr	r0, [r7, #12]
 801848c:	f000 ff3a 	bl	8019304 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018490:	2300      	movs	r3, #0
 8018492:	2200      	movs	r2, #0
 8018494:	2100      	movs	r1, #0
 8018496:	68f8      	ldr	r0, [r7, #12]
 8018498:	f006 fb92 	bl	801ebc0 <USBD_LL_PrepareReceive>
 801849c:	e03b      	b.n	8018516 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801849e:	693b      	ldr	r3, [r7, #16]
 80184a0:	68da      	ldr	r2, [r3, #12]
 80184a2:	693b      	ldr	r3, [r7, #16]
 80184a4:	689b      	ldr	r3, [r3, #8]
 80184a6:	429a      	cmp	r2, r3
 80184a8:	d11c      	bne.n	80184e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80184aa:	693b      	ldr	r3, [r7, #16]
 80184ac:	685a      	ldr	r2, [r3, #4]
 80184ae:	693b      	ldr	r3, [r7, #16]
 80184b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80184b2:	429a      	cmp	r2, r3
 80184b4:	d316      	bcc.n	80184e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80184b6:	693b      	ldr	r3, [r7, #16]
 80184b8:	685a      	ldr	r2, [r3, #4]
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80184c0:	429a      	cmp	r2, r3
 80184c2:	d20f      	bcs.n	80184e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80184c4:	2200      	movs	r2, #0
 80184c6:	2100      	movs	r1, #0
 80184c8:	68f8      	ldr	r0, [r7, #12]
 80184ca:	f000 ff1b 	bl	8019304 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	2200      	movs	r2, #0
 80184d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80184d6:	2300      	movs	r3, #0
 80184d8:	2200      	movs	r2, #0
 80184da:	2100      	movs	r1, #0
 80184dc:	68f8      	ldr	r0, [r7, #12]
 80184de:	f006 fb6f 	bl	801ebc0 <USBD_LL_PrepareReceive>
 80184e2:	e018      	b.n	8018516 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80184ea:	b2db      	uxtb	r3, r3
 80184ec:	2b03      	cmp	r3, #3
 80184ee:	d10b      	bne.n	8018508 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80184f6:	68db      	ldr	r3, [r3, #12]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d005      	beq.n	8018508 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018502:	68db      	ldr	r3, [r3, #12]
 8018504:	68f8      	ldr	r0, [r7, #12]
 8018506:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018508:	2180      	movs	r1, #128	; 0x80
 801850a:	68f8      	ldr	r0, [r7, #12]
 801850c:	f006 faae 	bl	801ea6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8018510:	68f8      	ldr	r0, [r7, #12]
 8018512:	f000 ff49 	bl	80193a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801851c:	2b01      	cmp	r3, #1
 801851e:	d122      	bne.n	8018566 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8018520:	68f8      	ldr	r0, [r7, #12]
 8018522:	f7ff fe98 	bl	8018256 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	2200      	movs	r2, #0
 801852a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801852e:	e01a      	b.n	8018566 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018536:	b2db      	uxtb	r3, r3
 8018538:	2b03      	cmp	r3, #3
 801853a:	d114      	bne.n	8018566 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018542:	695b      	ldr	r3, [r3, #20]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d00e      	beq.n	8018566 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801854e:	695b      	ldr	r3, [r3, #20]
 8018550:	7afa      	ldrb	r2, [r7, #11]
 8018552:	4611      	mov	r1, r2
 8018554:	68f8      	ldr	r0, [r7, #12]
 8018556:	4798      	blx	r3
 8018558:	4603      	mov	r3, r0
 801855a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801855c:	7dfb      	ldrb	r3, [r7, #23]
 801855e:	2b00      	cmp	r3, #0
 8018560:	d001      	beq.n	8018566 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8018562:	7dfb      	ldrb	r3, [r7, #23]
 8018564:	e000      	b.n	8018568 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8018566:	2300      	movs	r3, #0
}
 8018568:	4618      	mov	r0, r3
 801856a:	3718      	adds	r7, #24
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}

08018570 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2201      	movs	r2, #1
 801857c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	2200      	movs	r2, #0
 8018584:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	2200      	movs	r2, #0
 801858c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	2200      	movs	r2, #0
 8018592:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801859c:	2b00      	cmp	r3, #0
 801859e:	d101      	bne.n	80185a4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80185a0:	2303      	movs	r3, #3
 80185a2:	e02f      	b.n	8018604 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d00f      	beq.n	80185ce <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80185b4:	685b      	ldr	r3, [r3, #4]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d009      	beq.n	80185ce <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80185c0:	685b      	ldr	r3, [r3, #4]
 80185c2:	687a      	ldr	r2, [r7, #4]
 80185c4:	6852      	ldr	r2, [r2, #4]
 80185c6:	b2d2      	uxtb	r2, r2
 80185c8:	4611      	mov	r1, r2
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80185ce:	2340      	movs	r3, #64	; 0x40
 80185d0:	2200      	movs	r2, #0
 80185d2:	2100      	movs	r1, #0
 80185d4:	6878      	ldr	r0, [r7, #4]
 80185d6:	f006 fa04 	bl	801e9e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	2201      	movs	r2, #1
 80185de:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	2240      	movs	r2, #64	; 0x40
 80185e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80185ea:	2340      	movs	r3, #64	; 0x40
 80185ec:	2200      	movs	r2, #0
 80185ee:	2180      	movs	r1, #128	; 0x80
 80185f0:	6878      	ldr	r0, [r7, #4]
 80185f2:	f006 f9f6 	bl	801e9e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	2201      	movs	r2, #1
 80185fa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	2240      	movs	r2, #64	; 0x40
 8018600:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8018602:	2300      	movs	r3, #0
}
 8018604:	4618      	mov	r0, r3
 8018606:	3708      	adds	r7, #8
 8018608:	46bd      	mov	sp, r7
 801860a:	bd80      	pop	{r7, pc}

0801860c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801860c:	b480      	push	{r7}
 801860e:	b083      	sub	sp, #12
 8018610:	af00      	add	r7, sp, #0
 8018612:	6078      	str	r0, [r7, #4]
 8018614:	460b      	mov	r3, r1
 8018616:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	78fa      	ldrb	r2, [r7, #3]
 801861c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801861e:	2300      	movs	r3, #0
}
 8018620:	4618      	mov	r0, r3
 8018622:	370c      	adds	r7, #12
 8018624:	46bd      	mov	sp, r7
 8018626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862a:	4770      	bx	lr

0801862c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801862c:	b480      	push	{r7}
 801862e:	b083      	sub	sp, #12
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801863a:	b2da      	uxtb	r2, r3
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	2204      	movs	r2, #4
 8018646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801864a:	2300      	movs	r3, #0
}
 801864c:	4618      	mov	r0, r3
 801864e:	370c      	adds	r7, #12
 8018650:	46bd      	mov	sp, r7
 8018652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018656:	4770      	bx	lr

08018658 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018658:	b480      	push	{r7}
 801865a:	b083      	sub	sp, #12
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018666:	b2db      	uxtb	r3, r3
 8018668:	2b04      	cmp	r3, #4
 801866a:	d106      	bne.n	801867a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8018672:	b2da      	uxtb	r2, r3
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801867a:	2300      	movs	r3, #0
}
 801867c:	4618      	mov	r0, r3
 801867e:	370c      	adds	r7, #12
 8018680:	46bd      	mov	sp, r7
 8018682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018686:	4770      	bx	lr

08018688 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018688:	b580      	push	{r7, lr}
 801868a:	b082      	sub	sp, #8
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018696:	2b00      	cmp	r3, #0
 8018698:	d101      	bne.n	801869e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801869a:	2303      	movs	r3, #3
 801869c:	e012      	b.n	80186c4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80186a4:	b2db      	uxtb	r3, r3
 80186a6:	2b03      	cmp	r3, #3
 80186a8:	d10b      	bne.n	80186c2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186b0:	69db      	ldr	r3, [r3, #28]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d005      	beq.n	80186c2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186bc:	69db      	ldr	r3, [r3, #28]
 80186be:	6878      	ldr	r0, [r7, #4]
 80186c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80186c2:	2300      	movs	r3, #0
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3708      	adds	r7, #8
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}

080186cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80186cc:	b480      	push	{r7}
 80186ce:	b087      	sub	sp, #28
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80186d8:	697b      	ldr	r3, [r7, #20]
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80186de:	697b      	ldr	r3, [r7, #20]
 80186e0:	3301      	adds	r3, #1
 80186e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80186e4:	697b      	ldr	r3, [r7, #20]
 80186e6:	781b      	ldrb	r3, [r3, #0]
 80186e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80186ea:	8a3b      	ldrh	r3, [r7, #16]
 80186ec:	021b      	lsls	r3, r3, #8
 80186ee:	b21a      	sxth	r2, r3
 80186f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80186f4:	4313      	orrs	r3, r2
 80186f6:	b21b      	sxth	r3, r3
 80186f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80186fa:	89fb      	ldrh	r3, [r7, #14]
}
 80186fc:	4618      	mov	r0, r3
 80186fe:	371c      	adds	r7, #28
 8018700:	46bd      	mov	sp, r7
 8018702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018706:	4770      	bx	lr

08018708 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b084      	sub	sp, #16
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
 8018710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018712:	2300      	movs	r3, #0
 8018714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	781b      	ldrb	r3, [r3, #0]
 801871a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801871e:	2b40      	cmp	r3, #64	; 0x40
 8018720:	d005      	beq.n	801872e <USBD_StdDevReq+0x26>
 8018722:	2b40      	cmp	r3, #64	; 0x40
 8018724:	d853      	bhi.n	80187ce <USBD_StdDevReq+0xc6>
 8018726:	2b00      	cmp	r3, #0
 8018728:	d00b      	beq.n	8018742 <USBD_StdDevReq+0x3a>
 801872a:	2b20      	cmp	r3, #32
 801872c:	d14f      	bne.n	80187ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018734:	689b      	ldr	r3, [r3, #8]
 8018736:	6839      	ldr	r1, [r7, #0]
 8018738:	6878      	ldr	r0, [r7, #4]
 801873a:	4798      	blx	r3
 801873c:	4603      	mov	r3, r0
 801873e:	73fb      	strb	r3, [r7, #15]
      break;
 8018740:	e04a      	b.n	80187d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018742:	683b      	ldr	r3, [r7, #0]
 8018744:	785b      	ldrb	r3, [r3, #1]
 8018746:	2b09      	cmp	r3, #9
 8018748:	d83b      	bhi.n	80187c2 <USBD_StdDevReq+0xba>
 801874a:	a201      	add	r2, pc, #4	; (adr r2, 8018750 <USBD_StdDevReq+0x48>)
 801874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018750:	080187a5 	.word	0x080187a5
 8018754:	080187b9 	.word	0x080187b9
 8018758:	080187c3 	.word	0x080187c3
 801875c:	080187af 	.word	0x080187af
 8018760:	080187c3 	.word	0x080187c3
 8018764:	08018783 	.word	0x08018783
 8018768:	08018779 	.word	0x08018779
 801876c:	080187c3 	.word	0x080187c3
 8018770:	0801879b 	.word	0x0801879b
 8018774:	0801878d 	.word	0x0801878d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018778:	6839      	ldr	r1, [r7, #0]
 801877a:	6878      	ldr	r0, [r7, #4]
 801877c:	f000 f9de 	bl	8018b3c <USBD_GetDescriptor>
          break;
 8018780:	e024      	b.n	80187cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018782:	6839      	ldr	r1, [r7, #0]
 8018784:	6878      	ldr	r0, [r7, #4]
 8018786:	f000 fb6d 	bl	8018e64 <USBD_SetAddress>
          break;
 801878a:	e01f      	b.n	80187cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801878c:	6839      	ldr	r1, [r7, #0]
 801878e:	6878      	ldr	r0, [r7, #4]
 8018790:	f000 fbac 	bl	8018eec <USBD_SetConfig>
 8018794:	4603      	mov	r3, r0
 8018796:	73fb      	strb	r3, [r7, #15]
          break;
 8018798:	e018      	b.n	80187cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801879a:	6839      	ldr	r1, [r7, #0]
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	f000 fc4b 	bl	8019038 <USBD_GetConfig>
          break;
 80187a2:	e013      	b.n	80187cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80187a4:	6839      	ldr	r1, [r7, #0]
 80187a6:	6878      	ldr	r0, [r7, #4]
 80187a8:	f000 fc7c 	bl	80190a4 <USBD_GetStatus>
          break;
 80187ac:	e00e      	b.n	80187cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80187ae:	6839      	ldr	r1, [r7, #0]
 80187b0:	6878      	ldr	r0, [r7, #4]
 80187b2:	f000 fcab 	bl	801910c <USBD_SetFeature>
          break;
 80187b6:	e009      	b.n	80187cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80187b8:	6839      	ldr	r1, [r7, #0]
 80187ba:	6878      	ldr	r0, [r7, #4]
 80187bc:	f000 fcba 	bl	8019134 <USBD_ClrFeature>
          break;
 80187c0:	e004      	b.n	80187cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80187c2:	6839      	ldr	r1, [r7, #0]
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	f000 fd11 	bl	80191ec <USBD_CtlError>
          break;
 80187ca:	bf00      	nop
      }
      break;
 80187cc:	e004      	b.n	80187d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80187ce:	6839      	ldr	r1, [r7, #0]
 80187d0:	6878      	ldr	r0, [r7, #4]
 80187d2:	f000 fd0b 	bl	80191ec <USBD_CtlError>
      break;
 80187d6:	bf00      	nop
  }

  return ret;
 80187d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80187da:	4618      	mov	r0, r3
 80187dc:	3710      	adds	r7, #16
 80187de:	46bd      	mov	sp, r7
 80187e0:	bd80      	pop	{r7, pc}
 80187e2:	bf00      	nop

080187e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b084      	sub	sp, #16
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80187ee:	2300      	movs	r3, #0
 80187f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	781b      	ldrb	r3, [r3, #0]
 80187f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80187fa:	2b40      	cmp	r3, #64	; 0x40
 80187fc:	d005      	beq.n	801880a <USBD_StdItfReq+0x26>
 80187fe:	2b40      	cmp	r3, #64	; 0x40
 8018800:	d82f      	bhi.n	8018862 <USBD_StdItfReq+0x7e>
 8018802:	2b00      	cmp	r3, #0
 8018804:	d001      	beq.n	801880a <USBD_StdItfReq+0x26>
 8018806:	2b20      	cmp	r3, #32
 8018808:	d12b      	bne.n	8018862 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018810:	b2db      	uxtb	r3, r3
 8018812:	3b01      	subs	r3, #1
 8018814:	2b02      	cmp	r3, #2
 8018816:	d81d      	bhi.n	8018854 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018818:	683b      	ldr	r3, [r7, #0]
 801881a:	889b      	ldrh	r3, [r3, #4]
 801881c:	b2db      	uxtb	r3, r3
 801881e:	2b01      	cmp	r3, #1
 8018820:	d813      	bhi.n	801884a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018828:	689b      	ldr	r3, [r3, #8]
 801882a:	6839      	ldr	r1, [r7, #0]
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	4798      	blx	r3
 8018830:	4603      	mov	r3, r0
 8018832:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018834:	683b      	ldr	r3, [r7, #0]
 8018836:	88db      	ldrh	r3, [r3, #6]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d110      	bne.n	801885e <USBD_StdItfReq+0x7a>
 801883c:	7bfb      	ldrb	r3, [r7, #15]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d10d      	bne.n	801885e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018842:	6878      	ldr	r0, [r7, #4]
 8018844:	f000 fd9d 	bl	8019382 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018848:	e009      	b.n	801885e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801884a:	6839      	ldr	r1, [r7, #0]
 801884c:	6878      	ldr	r0, [r7, #4]
 801884e:	f000 fccd 	bl	80191ec <USBD_CtlError>
          break;
 8018852:	e004      	b.n	801885e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8018854:	6839      	ldr	r1, [r7, #0]
 8018856:	6878      	ldr	r0, [r7, #4]
 8018858:	f000 fcc8 	bl	80191ec <USBD_CtlError>
          break;
 801885c:	e000      	b.n	8018860 <USBD_StdItfReq+0x7c>
          break;
 801885e:	bf00      	nop
      }
      break;
 8018860:	e004      	b.n	801886c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8018862:	6839      	ldr	r1, [r7, #0]
 8018864:	6878      	ldr	r0, [r7, #4]
 8018866:	f000 fcc1 	bl	80191ec <USBD_CtlError>
      break;
 801886a:	bf00      	nop
  }

  return ret;
 801886c:	7bfb      	ldrb	r3, [r7, #15]
}
 801886e:	4618      	mov	r0, r3
 8018870:	3710      	adds	r7, #16
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}

08018876 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018876:	b580      	push	{r7, lr}
 8018878:	b084      	sub	sp, #16
 801887a:	af00      	add	r7, sp, #0
 801887c:	6078      	str	r0, [r7, #4]
 801887e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8018880:	2300      	movs	r3, #0
 8018882:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	889b      	ldrh	r3, [r3, #4]
 8018888:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801888a:	683b      	ldr	r3, [r7, #0]
 801888c:	781b      	ldrb	r3, [r3, #0]
 801888e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018892:	2b40      	cmp	r3, #64	; 0x40
 8018894:	d007      	beq.n	80188a6 <USBD_StdEPReq+0x30>
 8018896:	2b40      	cmp	r3, #64	; 0x40
 8018898:	f200 8145 	bhi.w	8018b26 <USBD_StdEPReq+0x2b0>
 801889c:	2b00      	cmp	r3, #0
 801889e:	d00c      	beq.n	80188ba <USBD_StdEPReq+0x44>
 80188a0:	2b20      	cmp	r3, #32
 80188a2:	f040 8140 	bne.w	8018b26 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80188ac:	689b      	ldr	r3, [r3, #8]
 80188ae:	6839      	ldr	r1, [r7, #0]
 80188b0:	6878      	ldr	r0, [r7, #4]
 80188b2:	4798      	blx	r3
 80188b4:	4603      	mov	r3, r0
 80188b6:	73fb      	strb	r3, [r7, #15]
      break;
 80188b8:	e13a      	b.n	8018b30 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80188ba:	683b      	ldr	r3, [r7, #0]
 80188bc:	785b      	ldrb	r3, [r3, #1]
 80188be:	2b03      	cmp	r3, #3
 80188c0:	d007      	beq.n	80188d2 <USBD_StdEPReq+0x5c>
 80188c2:	2b03      	cmp	r3, #3
 80188c4:	f300 8129 	bgt.w	8018b1a <USBD_StdEPReq+0x2a4>
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d07f      	beq.n	80189cc <USBD_StdEPReq+0x156>
 80188cc:	2b01      	cmp	r3, #1
 80188ce:	d03c      	beq.n	801894a <USBD_StdEPReq+0xd4>
 80188d0:	e123      	b.n	8018b1a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80188d8:	b2db      	uxtb	r3, r3
 80188da:	2b02      	cmp	r3, #2
 80188dc:	d002      	beq.n	80188e4 <USBD_StdEPReq+0x6e>
 80188de:	2b03      	cmp	r3, #3
 80188e0:	d016      	beq.n	8018910 <USBD_StdEPReq+0x9a>
 80188e2:	e02c      	b.n	801893e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80188e4:	7bbb      	ldrb	r3, [r7, #14]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d00d      	beq.n	8018906 <USBD_StdEPReq+0x90>
 80188ea:	7bbb      	ldrb	r3, [r7, #14]
 80188ec:	2b80      	cmp	r3, #128	; 0x80
 80188ee:	d00a      	beq.n	8018906 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80188f0:	7bbb      	ldrb	r3, [r7, #14]
 80188f2:	4619      	mov	r1, r3
 80188f4:	6878      	ldr	r0, [r7, #4]
 80188f6:	f006 f8b9 	bl	801ea6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80188fa:	2180      	movs	r1, #128	; 0x80
 80188fc:	6878      	ldr	r0, [r7, #4]
 80188fe:	f006 f8b5 	bl	801ea6c <USBD_LL_StallEP>
 8018902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018904:	e020      	b.n	8018948 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8018906:	6839      	ldr	r1, [r7, #0]
 8018908:	6878      	ldr	r0, [r7, #4]
 801890a:	f000 fc6f 	bl	80191ec <USBD_CtlError>
              break;
 801890e:	e01b      	b.n	8018948 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018910:	683b      	ldr	r3, [r7, #0]
 8018912:	885b      	ldrh	r3, [r3, #2]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d10e      	bne.n	8018936 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018918:	7bbb      	ldrb	r3, [r7, #14]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d00b      	beq.n	8018936 <USBD_StdEPReq+0xc0>
 801891e:	7bbb      	ldrb	r3, [r7, #14]
 8018920:	2b80      	cmp	r3, #128	; 0x80
 8018922:	d008      	beq.n	8018936 <USBD_StdEPReq+0xc0>
 8018924:	683b      	ldr	r3, [r7, #0]
 8018926:	88db      	ldrh	r3, [r3, #6]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d104      	bne.n	8018936 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801892c:	7bbb      	ldrb	r3, [r7, #14]
 801892e:	4619      	mov	r1, r3
 8018930:	6878      	ldr	r0, [r7, #4]
 8018932:	f006 f89b 	bl	801ea6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8018936:	6878      	ldr	r0, [r7, #4]
 8018938:	f000 fd23 	bl	8019382 <USBD_CtlSendStatus>

              break;
 801893c:	e004      	b.n	8018948 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801893e:	6839      	ldr	r1, [r7, #0]
 8018940:	6878      	ldr	r0, [r7, #4]
 8018942:	f000 fc53 	bl	80191ec <USBD_CtlError>
              break;
 8018946:	bf00      	nop
          }
          break;
 8018948:	e0ec      	b.n	8018b24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018950:	b2db      	uxtb	r3, r3
 8018952:	2b02      	cmp	r3, #2
 8018954:	d002      	beq.n	801895c <USBD_StdEPReq+0xe6>
 8018956:	2b03      	cmp	r3, #3
 8018958:	d016      	beq.n	8018988 <USBD_StdEPReq+0x112>
 801895a:	e030      	b.n	80189be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801895c:	7bbb      	ldrb	r3, [r7, #14]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d00d      	beq.n	801897e <USBD_StdEPReq+0x108>
 8018962:	7bbb      	ldrb	r3, [r7, #14]
 8018964:	2b80      	cmp	r3, #128	; 0x80
 8018966:	d00a      	beq.n	801897e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018968:	7bbb      	ldrb	r3, [r7, #14]
 801896a:	4619      	mov	r1, r3
 801896c:	6878      	ldr	r0, [r7, #4]
 801896e:	f006 f87d 	bl	801ea6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018972:	2180      	movs	r1, #128	; 0x80
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	f006 f879 	bl	801ea6c <USBD_LL_StallEP>
 801897a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801897c:	e025      	b.n	80189ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801897e:	6839      	ldr	r1, [r7, #0]
 8018980:	6878      	ldr	r0, [r7, #4]
 8018982:	f000 fc33 	bl	80191ec <USBD_CtlError>
              break;
 8018986:	e020      	b.n	80189ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018988:	683b      	ldr	r3, [r7, #0]
 801898a:	885b      	ldrh	r3, [r3, #2]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d11b      	bne.n	80189c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018990:	7bbb      	ldrb	r3, [r7, #14]
 8018992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018996:	2b00      	cmp	r3, #0
 8018998:	d004      	beq.n	80189a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801899a:	7bbb      	ldrb	r3, [r7, #14]
 801899c:	4619      	mov	r1, r3
 801899e:	6878      	ldr	r0, [r7, #4]
 80189a0:	f006 f883 	bl	801eaaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80189a4:	6878      	ldr	r0, [r7, #4]
 80189a6:	f000 fcec 	bl	8019382 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189b0:	689b      	ldr	r3, [r3, #8]
 80189b2:	6839      	ldr	r1, [r7, #0]
 80189b4:	6878      	ldr	r0, [r7, #4]
 80189b6:	4798      	blx	r3
 80189b8:	4603      	mov	r3, r0
 80189ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80189bc:	e004      	b.n	80189c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80189be:	6839      	ldr	r1, [r7, #0]
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f000 fc13 	bl	80191ec <USBD_CtlError>
              break;
 80189c6:	e000      	b.n	80189ca <USBD_StdEPReq+0x154>
              break;
 80189c8:	bf00      	nop
          }
          break;
 80189ca:	e0ab      	b.n	8018b24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80189d2:	b2db      	uxtb	r3, r3
 80189d4:	2b02      	cmp	r3, #2
 80189d6:	d002      	beq.n	80189de <USBD_StdEPReq+0x168>
 80189d8:	2b03      	cmp	r3, #3
 80189da:	d032      	beq.n	8018a42 <USBD_StdEPReq+0x1cc>
 80189dc:	e097      	b.n	8018b0e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80189de:	7bbb      	ldrb	r3, [r7, #14]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d007      	beq.n	80189f4 <USBD_StdEPReq+0x17e>
 80189e4:	7bbb      	ldrb	r3, [r7, #14]
 80189e6:	2b80      	cmp	r3, #128	; 0x80
 80189e8:	d004      	beq.n	80189f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80189ea:	6839      	ldr	r1, [r7, #0]
 80189ec:	6878      	ldr	r0, [r7, #4]
 80189ee:	f000 fbfd 	bl	80191ec <USBD_CtlError>
                break;
 80189f2:	e091      	b.n	8018b18 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80189f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	da0b      	bge.n	8018a14 <USBD_StdEPReq+0x19e>
 80189fc:	7bbb      	ldrb	r3, [r7, #14]
 80189fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018a02:	4613      	mov	r3, r2
 8018a04:	009b      	lsls	r3, r3, #2
 8018a06:	4413      	add	r3, r2
 8018a08:	009b      	lsls	r3, r3, #2
 8018a0a:	3310      	adds	r3, #16
 8018a0c:	687a      	ldr	r2, [r7, #4]
 8018a0e:	4413      	add	r3, r2
 8018a10:	3304      	adds	r3, #4
 8018a12:	e00b      	b.n	8018a2c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018a14:	7bbb      	ldrb	r3, [r7, #14]
 8018a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018a1a:	4613      	mov	r3, r2
 8018a1c:	009b      	lsls	r3, r3, #2
 8018a1e:	4413      	add	r3, r2
 8018a20:	009b      	lsls	r3, r3, #2
 8018a22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018a26:	687a      	ldr	r2, [r7, #4]
 8018a28:	4413      	add	r3, r2
 8018a2a:	3304      	adds	r3, #4
 8018a2c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8018a2e:	68bb      	ldr	r3, [r7, #8]
 8018a30:	2200      	movs	r2, #0
 8018a32:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	2202      	movs	r2, #2
 8018a38:	4619      	mov	r1, r3
 8018a3a:	6878      	ldr	r0, [r7, #4]
 8018a3c:	f000 fc47 	bl	80192ce <USBD_CtlSendData>
              break;
 8018a40:	e06a      	b.n	8018b18 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	da11      	bge.n	8018a6e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018a4a:	7bbb      	ldrb	r3, [r7, #14]
 8018a4c:	f003 020f 	and.w	r2, r3, #15
 8018a50:	6879      	ldr	r1, [r7, #4]
 8018a52:	4613      	mov	r3, r2
 8018a54:	009b      	lsls	r3, r3, #2
 8018a56:	4413      	add	r3, r2
 8018a58:	009b      	lsls	r3, r3, #2
 8018a5a:	440b      	add	r3, r1
 8018a5c:	3324      	adds	r3, #36	; 0x24
 8018a5e:	881b      	ldrh	r3, [r3, #0]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d117      	bne.n	8018a94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018a64:	6839      	ldr	r1, [r7, #0]
 8018a66:	6878      	ldr	r0, [r7, #4]
 8018a68:	f000 fbc0 	bl	80191ec <USBD_CtlError>
                  break;
 8018a6c:	e054      	b.n	8018b18 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018a6e:	7bbb      	ldrb	r3, [r7, #14]
 8018a70:	f003 020f 	and.w	r2, r3, #15
 8018a74:	6879      	ldr	r1, [r7, #4]
 8018a76:	4613      	mov	r3, r2
 8018a78:	009b      	lsls	r3, r3, #2
 8018a7a:	4413      	add	r3, r2
 8018a7c:	009b      	lsls	r3, r3, #2
 8018a7e:	440b      	add	r3, r1
 8018a80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018a84:	881b      	ldrh	r3, [r3, #0]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d104      	bne.n	8018a94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018a8a:	6839      	ldr	r1, [r7, #0]
 8018a8c:	6878      	ldr	r0, [r7, #4]
 8018a8e:	f000 fbad 	bl	80191ec <USBD_CtlError>
                  break;
 8018a92:	e041      	b.n	8018b18 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	da0b      	bge.n	8018ab4 <USBD_StdEPReq+0x23e>
 8018a9c:	7bbb      	ldrb	r3, [r7, #14]
 8018a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018aa2:	4613      	mov	r3, r2
 8018aa4:	009b      	lsls	r3, r3, #2
 8018aa6:	4413      	add	r3, r2
 8018aa8:	009b      	lsls	r3, r3, #2
 8018aaa:	3310      	adds	r3, #16
 8018aac:	687a      	ldr	r2, [r7, #4]
 8018aae:	4413      	add	r3, r2
 8018ab0:	3304      	adds	r3, #4
 8018ab2:	e00b      	b.n	8018acc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018ab4:	7bbb      	ldrb	r3, [r7, #14]
 8018ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018aba:	4613      	mov	r3, r2
 8018abc:	009b      	lsls	r3, r3, #2
 8018abe:	4413      	add	r3, r2
 8018ac0:	009b      	lsls	r3, r3, #2
 8018ac2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018ac6:	687a      	ldr	r2, [r7, #4]
 8018ac8:	4413      	add	r3, r2
 8018aca:	3304      	adds	r3, #4
 8018acc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018ace:	7bbb      	ldrb	r3, [r7, #14]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d002      	beq.n	8018ada <USBD_StdEPReq+0x264>
 8018ad4:	7bbb      	ldrb	r3, [r7, #14]
 8018ad6:	2b80      	cmp	r3, #128	; 0x80
 8018ad8:	d103      	bne.n	8018ae2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	2200      	movs	r2, #0
 8018ade:	601a      	str	r2, [r3, #0]
 8018ae0:	e00e      	b.n	8018b00 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8018ae2:	7bbb      	ldrb	r3, [r7, #14]
 8018ae4:	4619      	mov	r1, r3
 8018ae6:	6878      	ldr	r0, [r7, #4]
 8018ae8:	f005 fffe 	bl	801eae8 <USBD_LL_IsStallEP>
 8018aec:	4603      	mov	r3, r0
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d003      	beq.n	8018afa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	2201      	movs	r2, #1
 8018af6:	601a      	str	r2, [r3, #0]
 8018af8:	e002      	b.n	8018b00 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8018afa:	68bb      	ldr	r3, [r7, #8]
 8018afc:	2200      	movs	r2, #0
 8018afe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018b00:	68bb      	ldr	r3, [r7, #8]
 8018b02:	2202      	movs	r2, #2
 8018b04:	4619      	mov	r1, r3
 8018b06:	6878      	ldr	r0, [r7, #4]
 8018b08:	f000 fbe1 	bl	80192ce <USBD_CtlSendData>
              break;
 8018b0c:	e004      	b.n	8018b18 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8018b0e:	6839      	ldr	r1, [r7, #0]
 8018b10:	6878      	ldr	r0, [r7, #4]
 8018b12:	f000 fb6b 	bl	80191ec <USBD_CtlError>
              break;
 8018b16:	bf00      	nop
          }
          break;
 8018b18:	e004      	b.n	8018b24 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8018b1a:	6839      	ldr	r1, [r7, #0]
 8018b1c:	6878      	ldr	r0, [r7, #4]
 8018b1e:	f000 fb65 	bl	80191ec <USBD_CtlError>
          break;
 8018b22:	bf00      	nop
      }
      break;
 8018b24:	e004      	b.n	8018b30 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8018b26:	6839      	ldr	r1, [r7, #0]
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f000 fb5f 	bl	80191ec <USBD_CtlError>
      break;
 8018b2e:	bf00      	nop
  }

  return ret;
 8018b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b32:	4618      	mov	r0, r3
 8018b34:	3710      	adds	r7, #16
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bd80      	pop	{r7, pc}
	...

08018b3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b084      	sub	sp, #16
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
 8018b44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018b46:	2300      	movs	r3, #0
 8018b48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018b4e:	2300      	movs	r3, #0
 8018b50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018b52:	683b      	ldr	r3, [r7, #0]
 8018b54:	885b      	ldrh	r3, [r3, #2]
 8018b56:	0a1b      	lsrs	r3, r3, #8
 8018b58:	b29b      	uxth	r3, r3
 8018b5a:	3b01      	subs	r3, #1
 8018b5c:	2b0e      	cmp	r3, #14
 8018b5e:	f200 8152 	bhi.w	8018e06 <USBD_GetDescriptor+0x2ca>
 8018b62:	a201      	add	r2, pc, #4	; (adr r2, 8018b68 <USBD_GetDescriptor+0x2c>)
 8018b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b68:	08018bd9 	.word	0x08018bd9
 8018b6c:	08018bf1 	.word	0x08018bf1
 8018b70:	08018c31 	.word	0x08018c31
 8018b74:	08018e07 	.word	0x08018e07
 8018b78:	08018e07 	.word	0x08018e07
 8018b7c:	08018da7 	.word	0x08018da7
 8018b80:	08018dd3 	.word	0x08018dd3
 8018b84:	08018e07 	.word	0x08018e07
 8018b88:	08018e07 	.word	0x08018e07
 8018b8c:	08018e07 	.word	0x08018e07
 8018b90:	08018e07 	.word	0x08018e07
 8018b94:	08018e07 	.word	0x08018e07
 8018b98:	08018e07 	.word	0x08018e07
 8018b9c:	08018e07 	.word	0x08018e07
 8018ba0:	08018ba5 	.word	0x08018ba5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018baa:	69db      	ldr	r3, [r3, #28]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d00b      	beq.n	8018bc8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018bb6:	69db      	ldr	r3, [r3, #28]
 8018bb8:	687a      	ldr	r2, [r7, #4]
 8018bba:	7c12      	ldrb	r2, [r2, #16]
 8018bbc:	f107 0108 	add.w	r1, r7, #8
 8018bc0:	4610      	mov	r0, r2
 8018bc2:	4798      	blx	r3
 8018bc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018bc6:	e126      	b.n	8018e16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018bc8:	6839      	ldr	r1, [r7, #0]
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f000 fb0e 	bl	80191ec <USBD_CtlError>
        err++;
 8018bd0:	7afb      	ldrb	r3, [r7, #11]
 8018bd2:	3301      	adds	r3, #1
 8018bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8018bd6:	e11e      	b.n	8018e16 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	687a      	ldr	r2, [r7, #4]
 8018be2:	7c12      	ldrb	r2, [r2, #16]
 8018be4:	f107 0108 	add.w	r1, r7, #8
 8018be8:	4610      	mov	r0, r2
 8018bea:	4798      	blx	r3
 8018bec:	60f8      	str	r0, [r7, #12]
      break;
 8018bee:	e112      	b.n	8018e16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	7c1b      	ldrb	r3, [r3, #16]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d10d      	bne.n	8018c14 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c00:	f107 0208 	add.w	r2, r7, #8
 8018c04:	4610      	mov	r0, r2
 8018c06:	4798      	blx	r3
 8018c08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	3301      	adds	r3, #1
 8018c0e:	2202      	movs	r2, #2
 8018c10:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8018c12:	e100      	b.n	8018e16 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c1c:	f107 0208 	add.w	r2, r7, #8
 8018c20:	4610      	mov	r0, r2
 8018c22:	4798      	blx	r3
 8018c24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	3301      	adds	r3, #1
 8018c2a:	2202      	movs	r2, #2
 8018c2c:	701a      	strb	r2, [r3, #0]
      break;
 8018c2e:	e0f2      	b.n	8018e16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	885b      	ldrh	r3, [r3, #2]
 8018c34:	b2db      	uxtb	r3, r3
 8018c36:	2b05      	cmp	r3, #5
 8018c38:	f200 80ac 	bhi.w	8018d94 <USBD_GetDescriptor+0x258>
 8018c3c:	a201      	add	r2, pc, #4	; (adr r2, 8018c44 <USBD_GetDescriptor+0x108>)
 8018c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c42:	bf00      	nop
 8018c44:	08018c5d 	.word	0x08018c5d
 8018c48:	08018c91 	.word	0x08018c91
 8018c4c:	08018cc5 	.word	0x08018cc5
 8018c50:	08018cf9 	.word	0x08018cf9
 8018c54:	08018d2d 	.word	0x08018d2d
 8018c58:	08018d61 	.word	0x08018d61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018c62:	685b      	ldr	r3, [r3, #4]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d00b      	beq.n	8018c80 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018c6e:	685b      	ldr	r3, [r3, #4]
 8018c70:	687a      	ldr	r2, [r7, #4]
 8018c72:	7c12      	ldrb	r2, [r2, #16]
 8018c74:	f107 0108 	add.w	r1, r7, #8
 8018c78:	4610      	mov	r0, r2
 8018c7a:	4798      	blx	r3
 8018c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018c7e:	e091      	b.n	8018da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018c80:	6839      	ldr	r1, [r7, #0]
 8018c82:	6878      	ldr	r0, [r7, #4]
 8018c84:	f000 fab2 	bl	80191ec <USBD_CtlError>
            err++;
 8018c88:	7afb      	ldrb	r3, [r7, #11]
 8018c8a:	3301      	adds	r3, #1
 8018c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8018c8e:	e089      	b.n	8018da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018c96:	689b      	ldr	r3, [r3, #8]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d00b      	beq.n	8018cb4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018ca2:	689b      	ldr	r3, [r3, #8]
 8018ca4:	687a      	ldr	r2, [r7, #4]
 8018ca6:	7c12      	ldrb	r2, [r2, #16]
 8018ca8:	f107 0108 	add.w	r1, r7, #8
 8018cac:	4610      	mov	r0, r2
 8018cae:	4798      	blx	r3
 8018cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018cb2:	e077      	b.n	8018da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018cb4:	6839      	ldr	r1, [r7, #0]
 8018cb6:	6878      	ldr	r0, [r7, #4]
 8018cb8:	f000 fa98 	bl	80191ec <USBD_CtlError>
            err++;
 8018cbc:	7afb      	ldrb	r3, [r7, #11]
 8018cbe:	3301      	adds	r3, #1
 8018cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8018cc2:	e06f      	b.n	8018da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018cca:	68db      	ldr	r3, [r3, #12]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d00b      	beq.n	8018ce8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018cd6:	68db      	ldr	r3, [r3, #12]
 8018cd8:	687a      	ldr	r2, [r7, #4]
 8018cda:	7c12      	ldrb	r2, [r2, #16]
 8018cdc:	f107 0108 	add.w	r1, r7, #8
 8018ce0:	4610      	mov	r0, r2
 8018ce2:	4798      	blx	r3
 8018ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018ce6:	e05d      	b.n	8018da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018ce8:	6839      	ldr	r1, [r7, #0]
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	f000 fa7e 	bl	80191ec <USBD_CtlError>
            err++;
 8018cf0:	7afb      	ldrb	r3, [r7, #11]
 8018cf2:	3301      	adds	r3, #1
 8018cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8018cf6:	e055      	b.n	8018da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018cfe:	691b      	ldr	r3, [r3, #16]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d00b      	beq.n	8018d1c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d0a:	691b      	ldr	r3, [r3, #16]
 8018d0c:	687a      	ldr	r2, [r7, #4]
 8018d0e:	7c12      	ldrb	r2, [r2, #16]
 8018d10:	f107 0108 	add.w	r1, r7, #8
 8018d14:	4610      	mov	r0, r2
 8018d16:	4798      	blx	r3
 8018d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018d1a:	e043      	b.n	8018da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018d1c:	6839      	ldr	r1, [r7, #0]
 8018d1e:	6878      	ldr	r0, [r7, #4]
 8018d20:	f000 fa64 	bl	80191ec <USBD_CtlError>
            err++;
 8018d24:	7afb      	ldrb	r3, [r7, #11]
 8018d26:	3301      	adds	r3, #1
 8018d28:	72fb      	strb	r3, [r7, #11]
          break;
 8018d2a:	e03b      	b.n	8018da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d32:	695b      	ldr	r3, [r3, #20]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d00b      	beq.n	8018d50 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d3e:	695b      	ldr	r3, [r3, #20]
 8018d40:	687a      	ldr	r2, [r7, #4]
 8018d42:	7c12      	ldrb	r2, [r2, #16]
 8018d44:	f107 0108 	add.w	r1, r7, #8
 8018d48:	4610      	mov	r0, r2
 8018d4a:	4798      	blx	r3
 8018d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018d4e:	e029      	b.n	8018da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018d50:	6839      	ldr	r1, [r7, #0]
 8018d52:	6878      	ldr	r0, [r7, #4]
 8018d54:	f000 fa4a 	bl	80191ec <USBD_CtlError>
            err++;
 8018d58:	7afb      	ldrb	r3, [r7, #11]
 8018d5a:	3301      	adds	r3, #1
 8018d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8018d5e:	e021      	b.n	8018da4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d66:	699b      	ldr	r3, [r3, #24]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d00b      	beq.n	8018d84 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d72:	699b      	ldr	r3, [r3, #24]
 8018d74:	687a      	ldr	r2, [r7, #4]
 8018d76:	7c12      	ldrb	r2, [r2, #16]
 8018d78:	f107 0108 	add.w	r1, r7, #8
 8018d7c:	4610      	mov	r0, r2
 8018d7e:	4798      	blx	r3
 8018d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018d82:	e00f      	b.n	8018da4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018d84:	6839      	ldr	r1, [r7, #0]
 8018d86:	6878      	ldr	r0, [r7, #4]
 8018d88:	f000 fa30 	bl	80191ec <USBD_CtlError>
            err++;
 8018d8c:	7afb      	ldrb	r3, [r7, #11]
 8018d8e:	3301      	adds	r3, #1
 8018d90:	72fb      	strb	r3, [r7, #11]
          break;
 8018d92:	e007      	b.n	8018da4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018d94:	6839      	ldr	r1, [r7, #0]
 8018d96:	6878      	ldr	r0, [r7, #4]
 8018d98:	f000 fa28 	bl	80191ec <USBD_CtlError>
          err++;
 8018d9c:	7afb      	ldrb	r3, [r7, #11]
 8018d9e:	3301      	adds	r3, #1
 8018da0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8018da2:	bf00      	nop
      }
      break;
 8018da4:	e037      	b.n	8018e16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	7c1b      	ldrb	r3, [r3, #16]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d109      	bne.n	8018dc2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018db6:	f107 0208 	add.w	r2, r7, #8
 8018dba:	4610      	mov	r0, r2
 8018dbc:	4798      	blx	r3
 8018dbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018dc0:	e029      	b.n	8018e16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018dc2:	6839      	ldr	r1, [r7, #0]
 8018dc4:	6878      	ldr	r0, [r7, #4]
 8018dc6:	f000 fa11 	bl	80191ec <USBD_CtlError>
        err++;
 8018dca:	7afb      	ldrb	r3, [r7, #11]
 8018dcc:	3301      	adds	r3, #1
 8018dce:	72fb      	strb	r3, [r7, #11]
      break;
 8018dd0:	e021      	b.n	8018e16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	7c1b      	ldrb	r3, [r3, #16]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d10d      	bne.n	8018df6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018de2:	f107 0208 	add.w	r2, r7, #8
 8018de6:	4610      	mov	r0, r2
 8018de8:	4798      	blx	r3
 8018dea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	3301      	adds	r3, #1
 8018df0:	2207      	movs	r2, #7
 8018df2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018df4:	e00f      	b.n	8018e16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018df6:	6839      	ldr	r1, [r7, #0]
 8018df8:	6878      	ldr	r0, [r7, #4]
 8018dfa:	f000 f9f7 	bl	80191ec <USBD_CtlError>
        err++;
 8018dfe:	7afb      	ldrb	r3, [r7, #11]
 8018e00:	3301      	adds	r3, #1
 8018e02:	72fb      	strb	r3, [r7, #11]
      break;
 8018e04:	e007      	b.n	8018e16 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8018e06:	6839      	ldr	r1, [r7, #0]
 8018e08:	6878      	ldr	r0, [r7, #4]
 8018e0a:	f000 f9ef 	bl	80191ec <USBD_CtlError>
      err++;
 8018e0e:	7afb      	ldrb	r3, [r7, #11]
 8018e10:	3301      	adds	r3, #1
 8018e12:	72fb      	strb	r3, [r7, #11]
      break;
 8018e14:	bf00      	nop
  }

  if (err != 0U)
 8018e16:	7afb      	ldrb	r3, [r7, #11]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d11e      	bne.n	8018e5a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8018e1c:	683b      	ldr	r3, [r7, #0]
 8018e1e:	88db      	ldrh	r3, [r3, #6]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d016      	beq.n	8018e52 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8018e24:	893b      	ldrh	r3, [r7, #8]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d00e      	beq.n	8018e48 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8018e2a:	683b      	ldr	r3, [r7, #0]
 8018e2c:	88da      	ldrh	r2, [r3, #6]
 8018e2e:	893b      	ldrh	r3, [r7, #8]
 8018e30:	4293      	cmp	r3, r2
 8018e32:	bf28      	it	cs
 8018e34:	4613      	movcs	r3, r2
 8018e36:	b29b      	uxth	r3, r3
 8018e38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018e3a:	893b      	ldrh	r3, [r7, #8]
 8018e3c:	461a      	mov	r2, r3
 8018e3e:	68f9      	ldr	r1, [r7, #12]
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	f000 fa44 	bl	80192ce <USBD_CtlSendData>
 8018e46:	e009      	b.n	8018e5c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018e48:	6839      	ldr	r1, [r7, #0]
 8018e4a:	6878      	ldr	r0, [r7, #4]
 8018e4c:	f000 f9ce 	bl	80191ec <USBD_CtlError>
 8018e50:	e004      	b.n	8018e5c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018e52:	6878      	ldr	r0, [r7, #4]
 8018e54:	f000 fa95 	bl	8019382 <USBD_CtlSendStatus>
 8018e58:	e000      	b.n	8018e5c <USBD_GetDescriptor+0x320>
    return;
 8018e5a:	bf00      	nop
  }
}
 8018e5c:	3710      	adds	r7, #16
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bd80      	pop	{r7, pc}
 8018e62:	bf00      	nop

08018e64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b084      	sub	sp, #16
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018e6e:	683b      	ldr	r3, [r7, #0]
 8018e70:	889b      	ldrh	r3, [r3, #4]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d131      	bne.n	8018eda <USBD_SetAddress+0x76>
 8018e76:	683b      	ldr	r3, [r7, #0]
 8018e78:	88db      	ldrh	r3, [r3, #6]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d12d      	bne.n	8018eda <USBD_SetAddress+0x76>
 8018e7e:	683b      	ldr	r3, [r7, #0]
 8018e80:	885b      	ldrh	r3, [r3, #2]
 8018e82:	2b7f      	cmp	r3, #127	; 0x7f
 8018e84:	d829      	bhi.n	8018eda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	885b      	ldrh	r3, [r3, #2]
 8018e8a:	b2db      	uxtb	r3, r3
 8018e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018e98:	b2db      	uxtb	r3, r3
 8018e9a:	2b03      	cmp	r3, #3
 8018e9c:	d104      	bne.n	8018ea8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018e9e:	6839      	ldr	r1, [r7, #0]
 8018ea0:	6878      	ldr	r0, [r7, #4]
 8018ea2:	f000 f9a3 	bl	80191ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ea6:	e01d      	b.n	8018ee4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	7bfa      	ldrb	r2, [r7, #15]
 8018eac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018eb0:	7bfb      	ldrb	r3, [r7, #15]
 8018eb2:	4619      	mov	r1, r3
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	f005 fe43 	bl	801eb40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018eba:	6878      	ldr	r0, [r7, #4]
 8018ebc:	f000 fa61 	bl	8019382 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018ec0:	7bfb      	ldrb	r3, [r7, #15]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d004      	beq.n	8018ed0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	2202      	movs	r2, #2
 8018eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ece:	e009      	b.n	8018ee4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	2201      	movs	r2, #1
 8018ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ed8:	e004      	b.n	8018ee4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018eda:	6839      	ldr	r1, [r7, #0]
 8018edc:	6878      	ldr	r0, [r7, #4]
 8018ede:	f000 f985 	bl	80191ec <USBD_CtlError>
  }
}
 8018ee2:	bf00      	nop
 8018ee4:	bf00      	nop
 8018ee6:	3710      	adds	r7, #16
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}

08018eec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b084      	sub	sp, #16
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
 8018ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018efa:	683b      	ldr	r3, [r7, #0]
 8018efc:	885b      	ldrh	r3, [r3, #2]
 8018efe:	b2da      	uxtb	r2, r3
 8018f00:	4b4c      	ldr	r3, [pc, #304]	; (8019034 <USBD_SetConfig+0x148>)
 8018f02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018f04:	4b4b      	ldr	r3, [pc, #300]	; (8019034 <USBD_SetConfig+0x148>)
 8018f06:	781b      	ldrb	r3, [r3, #0]
 8018f08:	2b01      	cmp	r3, #1
 8018f0a:	d905      	bls.n	8018f18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018f0c:	6839      	ldr	r1, [r7, #0]
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f000 f96c 	bl	80191ec <USBD_CtlError>
    return USBD_FAIL;
 8018f14:	2303      	movs	r3, #3
 8018f16:	e088      	b.n	801902a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	2b02      	cmp	r3, #2
 8018f22:	d002      	beq.n	8018f2a <USBD_SetConfig+0x3e>
 8018f24:	2b03      	cmp	r3, #3
 8018f26:	d025      	beq.n	8018f74 <USBD_SetConfig+0x88>
 8018f28:	e071      	b.n	801900e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018f2a:	4b42      	ldr	r3, [pc, #264]	; (8019034 <USBD_SetConfig+0x148>)
 8018f2c:	781b      	ldrb	r3, [r3, #0]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d01c      	beq.n	8018f6c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8018f32:	4b40      	ldr	r3, [pc, #256]	; (8019034 <USBD_SetConfig+0x148>)
 8018f34:	781b      	ldrb	r3, [r3, #0]
 8018f36:	461a      	mov	r2, r3
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018f3c:	4b3d      	ldr	r3, [pc, #244]	; (8019034 <USBD_SetConfig+0x148>)
 8018f3e:	781b      	ldrb	r3, [r3, #0]
 8018f40:	4619      	mov	r1, r3
 8018f42:	6878      	ldr	r0, [r7, #4]
 8018f44:	f7ff f992 	bl	801826c <USBD_SetClassConfig>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018f4c:	7bfb      	ldrb	r3, [r7, #15]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d004      	beq.n	8018f5c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8018f52:	6839      	ldr	r1, [r7, #0]
 8018f54:	6878      	ldr	r0, [r7, #4]
 8018f56:	f000 f949 	bl	80191ec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018f5a:	e065      	b.n	8019028 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8018f5c:	6878      	ldr	r0, [r7, #4]
 8018f5e:	f000 fa10 	bl	8019382 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2203      	movs	r2, #3
 8018f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8018f6a:	e05d      	b.n	8019028 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8018f6c:	6878      	ldr	r0, [r7, #4]
 8018f6e:	f000 fa08 	bl	8019382 <USBD_CtlSendStatus>
      break;
 8018f72:	e059      	b.n	8019028 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018f74:	4b2f      	ldr	r3, [pc, #188]	; (8019034 <USBD_SetConfig+0x148>)
 8018f76:	781b      	ldrb	r3, [r3, #0]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d112      	bne.n	8018fa2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	2202      	movs	r2, #2
 8018f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8018f84:	4b2b      	ldr	r3, [pc, #172]	; (8019034 <USBD_SetConfig+0x148>)
 8018f86:	781b      	ldrb	r3, [r3, #0]
 8018f88:	461a      	mov	r2, r3
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018f8e:	4b29      	ldr	r3, [pc, #164]	; (8019034 <USBD_SetConfig+0x148>)
 8018f90:	781b      	ldrb	r3, [r3, #0]
 8018f92:	4619      	mov	r1, r3
 8018f94:	6878      	ldr	r0, [r7, #4]
 8018f96:	f7ff f985 	bl	80182a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018f9a:	6878      	ldr	r0, [r7, #4]
 8018f9c:	f000 f9f1 	bl	8019382 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018fa0:	e042      	b.n	8019028 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8018fa2:	4b24      	ldr	r3, [pc, #144]	; (8019034 <USBD_SetConfig+0x148>)
 8018fa4:	781b      	ldrb	r3, [r3, #0]
 8018fa6:	461a      	mov	r2, r3
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	685b      	ldr	r3, [r3, #4]
 8018fac:	429a      	cmp	r2, r3
 8018fae:	d02a      	beq.n	8019006 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	685b      	ldr	r3, [r3, #4]
 8018fb4:	b2db      	uxtb	r3, r3
 8018fb6:	4619      	mov	r1, r3
 8018fb8:	6878      	ldr	r0, [r7, #4]
 8018fba:	f7ff f973 	bl	80182a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018fbe:	4b1d      	ldr	r3, [pc, #116]	; (8019034 <USBD_SetConfig+0x148>)
 8018fc0:	781b      	ldrb	r3, [r3, #0]
 8018fc2:	461a      	mov	r2, r3
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018fc8:	4b1a      	ldr	r3, [pc, #104]	; (8019034 <USBD_SetConfig+0x148>)
 8018fca:	781b      	ldrb	r3, [r3, #0]
 8018fcc:	4619      	mov	r1, r3
 8018fce:	6878      	ldr	r0, [r7, #4]
 8018fd0:	f7ff f94c 	bl	801826c <USBD_SetClassConfig>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018fd8:	7bfb      	ldrb	r3, [r7, #15]
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d00f      	beq.n	8018ffe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8018fde:	6839      	ldr	r1, [r7, #0]
 8018fe0:	6878      	ldr	r0, [r7, #4]
 8018fe2:	f000 f903 	bl	80191ec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	685b      	ldr	r3, [r3, #4]
 8018fea:	b2db      	uxtb	r3, r3
 8018fec:	4619      	mov	r1, r3
 8018fee:	6878      	ldr	r0, [r7, #4]
 8018ff0:	f7ff f958 	bl	80182a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	2202      	movs	r2, #2
 8018ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8018ffc:	e014      	b.n	8019028 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8018ffe:	6878      	ldr	r0, [r7, #4]
 8019000:	f000 f9bf 	bl	8019382 <USBD_CtlSendStatus>
      break;
 8019004:	e010      	b.n	8019028 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8019006:	6878      	ldr	r0, [r7, #4]
 8019008:	f000 f9bb 	bl	8019382 <USBD_CtlSendStatus>
      break;
 801900c:	e00c      	b.n	8019028 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801900e:	6839      	ldr	r1, [r7, #0]
 8019010:	6878      	ldr	r0, [r7, #4]
 8019012:	f000 f8eb 	bl	80191ec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8019016:	4b07      	ldr	r3, [pc, #28]	; (8019034 <USBD_SetConfig+0x148>)
 8019018:	781b      	ldrb	r3, [r3, #0]
 801901a:	4619      	mov	r1, r3
 801901c:	6878      	ldr	r0, [r7, #4]
 801901e:	f7ff f941 	bl	80182a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8019022:	2303      	movs	r3, #3
 8019024:	73fb      	strb	r3, [r7, #15]
      break;
 8019026:	bf00      	nop
  }

  return ret;
 8019028:	7bfb      	ldrb	r3, [r7, #15]
}
 801902a:	4618      	mov	r0, r3
 801902c:	3710      	adds	r7, #16
 801902e:	46bd      	mov	sp, r7
 8019030:	bd80      	pop	{r7, pc}
 8019032:	bf00      	nop
 8019034:	2000168d 	.word	0x2000168d

08019038 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b082      	sub	sp, #8
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
 8019040:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8019042:	683b      	ldr	r3, [r7, #0]
 8019044:	88db      	ldrh	r3, [r3, #6]
 8019046:	2b01      	cmp	r3, #1
 8019048:	d004      	beq.n	8019054 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801904a:	6839      	ldr	r1, [r7, #0]
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	f000 f8cd 	bl	80191ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8019052:	e023      	b.n	801909c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801905a:	b2db      	uxtb	r3, r3
 801905c:	2b02      	cmp	r3, #2
 801905e:	dc02      	bgt.n	8019066 <USBD_GetConfig+0x2e>
 8019060:	2b00      	cmp	r3, #0
 8019062:	dc03      	bgt.n	801906c <USBD_GetConfig+0x34>
 8019064:	e015      	b.n	8019092 <USBD_GetConfig+0x5a>
 8019066:	2b03      	cmp	r3, #3
 8019068:	d00b      	beq.n	8019082 <USBD_GetConfig+0x4a>
 801906a:	e012      	b.n	8019092 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2200      	movs	r2, #0
 8019070:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	3308      	adds	r3, #8
 8019076:	2201      	movs	r2, #1
 8019078:	4619      	mov	r1, r3
 801907a:	6878      	ldr	r0, [r7, #4]
 801907c:	f000 f927 	bl	80192ce <USBD_CtlSendData>
        break;
 8019080:	e00c      	b.n	801909c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	3304      	adds	r3, #4
 8019086:	2201      	movs	r2, #1
 8019088:	4619      	mov	r1, r3
 801908a:	6878      	ldr	r0, [r7, #4]
 801908c:	f000 f91f 	bl	80192ce <USBD_CtlSendData>
        break;
 8019090:	e004      	b.n	801909c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8019092:	6839      	ldr	r1, [r7, #0]
 8019094:	6878      	ldr	r0, [r7, #4]
 8019096:	f000 f8a9 	bl	80191ec <USBD_CtlError>
        break;
 801909a:	bf00      	nop
}
 801909c:	bf00      	nop
 801909e:	3708      	adds	r7, #8
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}

080190a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b082      	sub	sp, #8
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
 80190ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80190b4:	b2db      	uxtb	r3, r3
 80190b6:	3b01      	subs	r3, #1
 80190b8:	2b02      	cmp	r3, #2
 80190ba:	d81e      	bhi.n	80190fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80190bc:	683b      	ldr	r3, [r7, #0]
 80190be:	88db      	ldrh	r3, [r3, #6]
 80190c0:	2b02      	cmp	r3, #2
 80190c2:	d004      	beq.n	80190ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80190c4:	6839      	ldr	r1, [r7, #0]
 80190c6:	6878      	ldr	r0, [r7, #4]
 80190c8:	f000 f890 	bl	80191ec <USBD_CtlError>
        break;
 80190cc:	e01a      	b.n	8019104 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2201      	movs	r2, #1
 80190d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d005      	beq.n	80190ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	68db      	ldr	r3, [r3, #12]
 80190e2:	f043 0202 	orr.w	r2, r3, #2
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	330c      	adds	r3, #12
 80190ee:	2202      	movs	r2, #2
 80190f0:	4619      	mov	r1, r3
 80190f2:	6878      	ldr	r0, [r7, #4]
 80190f4:	f000 f8eb 	bl	80192ce <USBD_CtlSendData>
      break;
 80190f8:	e004      	b.n	8019104 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80190fa:	6839      	ldr	r1, [r7, #0]
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	f000 f875 	bl	80191ec <USBD_CtlError>
      break;
 8019102:	bf00      	nop
  }
}
 8019104:	bf00      	nop
 8019106:	3708      	adds	r7, #8
 8019108:	46bd      	mov	sp, r7
 801910a:	bd80      	pop	{r7, pc}

0801910c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b082      	sub	sp, #8
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
 8019114:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019116:	683b      	ldr	r3, [r7, #0]
 8019118:	885b      	ldrh	r3, [r3, #2]
 801911a:	2b01      	cmp	r3, #1
 801911c:	d106      	bne.n	801912c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	2201      	movs	r2, #1
 8019122:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8019126:	6878      	ldr	r0, [r7, #4]
 8019128:	f000 f92b 	bl	8019382 <USBD_CtlSendStatus>
  }
}
 801912c:	bf00      	nop
 801912e:	3708      	adds	r7, #8
 8019130:	46bd      	mov	sp, r7
 8019132:	bd80      	pop	{r7, pc}

08019134 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b082      	sub	sp, #8
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
 801913c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019144:	b2db      	uxtb	r3, r3
 8019146:	3b01      	subs	r3, #1
 8019148:	2b02      	cmp	r3, #2
 801914a:	d80b      	bhi.n	8019164 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	885b      	ldrh	r3, [r3, #2]
 8019150:	2b01      	cmp	r3, #1
 8019152:	d10c      	bne.n	801916e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	2200      	movs	r2, #0
 8019158:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801915c:	6878      	ldr	r0, [r7, #4]
 801915e:	f000 f910 	bl	8019382 <USBD_CtlSendStatus>
      }
      break;
 8019162:	e004      	b.n	801916e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8019164:	6839      	ldr	r1, [r7, #0]
 8019166:	6878      	ldr	r0, [r7, #4]
 8019168:	f000 f840 	bl	80191ec <USBD_CtlError>
      break;
 801916c:	e000      	b.n	8019170 <USBD_ClrFeature+0x3c>
      break;
 801916e:	bf00      	nop
  }
}
 8019170:	bf00      	nop
 8019172:	3708      	adds	r7, #8
 8019174:	46bd      	mov	sp, r7
 8019176:	bd80      	pop	{r7, pc}

08019178 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b084      	sub	sp, #16
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
 8019180:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8019182:	683b      	ldr	r3, [r7, #0]
 8019184:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	781a      	ldrb	r2, [r3, #0]
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	3301      	adds	r3, #1
 8019192:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	781a      	ldrb	r2, [r3, #0]
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	3301      	adds	r3, #1
 80191a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80191a2:	68f8      	ldr	r0, [r7, #12]
 80191a4:	f7ff fa92 	bl	80186cc <SWAPBYTE>
 80191a8:	4603      	mov	r3, r0
 80191aa:	461a      	mov	r2, r3
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	3301      	adds	r3, #1
 80191b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	3301      	adds	r3, #1
 80191ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80191bc:	68f8      	ldr	r0, [r7, #12]
 80191be:	f7ff fa85 	bl	80186cc <SWAPBYTE>
 80191c2:	4603      	mov	r3, r0
 80191c4:	461a      	mov	r2, r3
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	3301      	adds	r3, #1
 80191ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	3301      	adds	r3, #1
 80191d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80191d6:	68f8      	ldr	r0, [r7, #12]
 80191d8:	f7ff fa78 	bl	80186cc <SWAPBYTE>
 80191dc:	4603      	mov	r3, r0
 80191de:	461a      	mov	r2, r3
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	80da      	strh	r2, [r3, #6]
}
 80191e4:	bf00      	nop
 80191e6:	3710      	adds	r7, #16
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}

080191ec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b082      	sub	sp, #8
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
 80191f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80191f6:	2180      	movs	r1, #128	; 0x80
 80191f8:	6878      	ldr	r0, [r7, #4]
 80191fa:	f005 fc37 	bl	801ea6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80191fe:	2100      	movs	r1, #0
 8019200:	6878      	ldr	r0, [r7, #4]
 8019202:	f005 fc33 	bl	801ea6c <USBD_LL_StallEP>
}
 8019206:	bf00      	nop
 8019208:	3708      	adds	r7, #8
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}

0801920e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801920e:	b580      	push	{r7, lr}
 8019210:	b086      	sub	sp, #24
 8019212:	af00      	add	r7, sp, #0
 8019214:	60f8      	str	r0, [r7, #12]
 8019216:	60b9      	str	r1, [r7, #8]
 8019218:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801921a:	2300      	movs	r3, #0
 801921c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	2b00      	cmp	r3, #0
 8019222:	d036      	beq.n	8019292 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8019228:	6938      	ldr	r0, [r7, #16]
 801922a:	f000 f836 	bl	801929a <USBD_GetLen>
 801922e:	4603      	mov	r3, r0
 8019230:	3301      	adds	r3, #1
 8019232:	b29b      	uxth	r3, r3
 8019234:	005b      	lsls	r3, r3, #1
 8019236:	b29a      	uxth	r2, r3
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801923c:	7dfb      	ldrb	r3, [r7, #23]
 801923e:	68ba      	ldr	r2, [r7, #8]
 8019240:	4413      	add	r3, r2
 8019242:	687a      	ldr	r2, [r7, #4]
 8019244:	7812      	ldrb	r2, [r2, #0]
 8019246:	701a      	strb	r2, [r3, #0]
  idx++;
 8019248:	7dfb      	ldrb	r3, [r7, #23]
 801924a:	3301      	adds	r3, #1
 801924c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801924e:	7dfb      	ldrb	r3, [r7, #23]
 8019250:	68ba      	ldr	r2, [r7, #8]
 8019252:	4413      	add	r3, r2
 8019254:	2203      	movs	r2, #3
 8019256:	701a      	strb	r2, [r3, #0]
  idx++;
 8019258:	7dfb      	ldrb	r3, [r7, #23]
 801925a:	3301      	adds	r3, #1
 801925c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801925e:	e013      	b.n	8019288 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8019260:	7dfb      	ldrb	r3, [r7, #23]
 8019262:	68ba      	ldr	r2, [r7, #8]
 8019264:	4413      	add	r3, r2
 8019266:	693a      	ldr	r2, [r7, #16]
 8019268:	7812      	ldrb	r2, [r2, #0]
 801926a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801926c:	693b      	ldr	r3, [r7, #16]
 801926e:	3301      	adds	r3, #1
 8019270:	613b      	str	r3, [r7, #16]
    idx++;
 8019272:	7dfb      	ldrb	r3, [r7, #23]
 8019274:	3301      	adds	r3, #1
 8019276:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8019278:	7dfb      	ldrb	r3, [r7, #23]
 801927a:	68ba      	ldr	r2, [r7, #8]
 801927c:	4413      	add	r3, r2
 801927e:	2200      	movs	r2, #0
 8019280:	701a      	strb	r2, [r3, #0]
    idx++;
 8019282:	7dfb      	ldrb	r3, [r7, #23]
 8019284:	3301      	adds	r3, #1
 8019286:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019288:	693b      	ldr	r3, [r7, #16]
 801928a:	781b      	ldrb	r3, [r3, #0]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d1e7      	bne.n	8019260 <USBD_GetString+0x52>
 8019290:	e000      	b.n	8019294 <USBD_GetString+0x86>
    return;
 8019292:	bf00      	nop
  }
}
 8019294:	3718      	adds	r7, #24
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}

0801929a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801929a:	b480      	push	{r7}
 801929c:	b085      	sub	sp, #20
 801929e:	af00      	add	r7, sp, #0
 80192a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80192a2:	2300      	movs	r3, #0
 80192a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80192aa:	e005      	b.n	80192b8 <USBD_GetLen+0x1e>
  {
    len++;
 80192ac:	7bfb      	ldrb	r3, [r7, #15]
 80192ae:	3301      	adds	r3, #1
 80192b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80192b2:	68bb      	ldr	r3, [r7, #8]
 80192b4:	3301      	adds	r3, #1
 80192b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80192b8:	68bb      	ldr	r3, [r7, #8]
 80192ba:	781b      	ldrb	r3, [r3, #0]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d1f5      	bne.n	80192ac <USBD_GetLen+0x12>
  }

  return len;
 80192c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80192c2:	4618      	mov	r0, r3
 80192c4:	3714      	adds	r7, #20
 80192c6:	46bd      	mov	sp, r7
 80192c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192cc:	4770      	bx	lr

080192ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80192ce:	b580      	push	{r7, lr}
 80192d0:	b084      	sub	sp, #16
 80192d2:	af00      	add	r7, sp, #0
 80192d4:	60f8      	str	r0, [r7, #12]
 80192d6:	60b9      	str	r1, [r7, #8]
 80192d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	2202      	movs	r2, #2
 80192de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	687a      	ldr	r2, [r7, #4]
 80192e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	687a      	ldr	r2, [r7, #4]
 80192ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	68ba      	ldr	r2, [r7, #8]
 80192f2:	2100      	movs	r1, #0
 80192f4:	68f8      	ldr	r0, [r7, #12]
 80192f6:	f005 fc42 	bl	801eb7e <USBD_LL_Transmit>

  return USBD_OK;
 80192fa:	2300      	movs	r3, #0
}
 80192fc:	4618      	mov	r0, r3
 80192fe:	3710      	adds	r7, #16
 8019300:	46bd      	mov	sp, r7
 8019302:	bd80      	pop	{r7, pc}

08019304 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b084      	sub	sp, #16
 8019308:	af00      	add	r7, sp, #0
 801930a:	60f8      	str	r0, [r7, #12]
 801930c:	60b9      	str	r1, [r7, #8]
 801930e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	68ba      	ldr	r2, [r7, #8]
 8019314:	2100      	movs	r1, #0
 8019316:	68f8      	ldr	r0, [r7, #12]
 8019318:	f005 fc31 	bl	801eb7e <USBD_LL_Transmit>

  return USBD_OK;
 801931c:	2300      	movs	r3, #0
}
 801931e:	4618      	mov	r0, r3
 8019320:	3710      	adds	r7, #16
 8019322:	46bd      	mov	sp, r7
 8019324:	bd80      	pop	{r7, pc}

08019326 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8019326:	b580      	push	{r7, lr}
 8019328:	b084      	sub	sp, #16
 801932a:	af00      	add	r7, sp, #0
 801932c:	60f8      	str	r0, [r7, #12]
 801932e:	60b9      	str	r1, [r7, #8]
 8019330:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	2203      	movs	r2, #3
 8019336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	687a      	ldr	r2, [r7, #4]
 801933e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	687a      	ldr	r2, [r7, #4]
 8019346:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	68ba      	ldr	r2, [r7, #8]
 801934e:	2100      	movs	r1, #0
 8019350:	68f8      	ldr	r0, [r7, #12]
 8019352:	f005 fc35 	bl	801ebc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019356:	2300      	movs	r3, #0
}
 8019358:	4618      	mov	r0, r3
 801935a:	3710      	adds	r7, #16
 801935c:	46bd      	mov	sp, r7
 801935e:	bd80      	pop	{r7, pc}

08019360 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b084      	sub	sp, #16
 8019364:	af00      	add	r7, sp, #0
 8019366:	60f8      	str	r0, [r7, #12]
 8019368:	60b9      	str	r1, [r7, #8]
 801936a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	68ba      	ldr	r2, [r7, #8]
 8019370:	2100      	movs	r1, #0
 8019372:	68f8      	ldr	r0, [r7, #12]
 8019374:	f005 fc24 	bl	801ebc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019378:	2300      	movs	r3, #0
}
 801937a:	4618      	mov	r0, r3
 801937c:	3710      	adds	r7, #16
 801937e:	46bd      	mov	sp, r7
 8019380:	bd80      	pop	{r7, pc}

08019382 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019382:	b580      	push	{r7, lr}
 8019384:	b082      	sub	sp, #8
 8019386:	af00      	add	r7, sp, #0
 8019388:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2204      	movs	r2, #4
 801938e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019392:	2300      	movs	r3, #0
 8019394:	2200      	movs	r2, #0
 8019396:	2100      	movs	r1, #0
 8019398:	6878      	ldr	r0, [r7, #4]
 801939a:	f005 fbf0 	bl	801eb7e <USBD_LL_Transmit>

  return USBD_OK;
 801939e:	2300      	movs	r3, #0
}
 80193a0:	4618      	mov	r0, r3
 80193a2:	3708      	adds	r7, #8
 80193a4:	46bd      	mov	sp, r7
 80193a6:	bd80      	pop	{r7, pc}

080193a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b082      	sub	sp, #8
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	2205      	movs	r2, #5
 80193b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80193b8:	2300      	movs	r3, #0
 80193ba:	2200      	movs	r2, #0
 80193bc:	2100      	movs	r1, #0
 80193be:	6878      	ldr	r0, [r7, #4]
 80193c0:	f005 fbfe 	bl	801ebc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80193c4:	2300      	movs	r3, #0
}
 80193c6:	4618      	mov	r0, r3
 80193c8:	3708      	adds	r7, #8
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd80      	pop	{r7, pc}
	...

080193d0 <__NVIC_SetPriority>:
{
 80193d0:	b480      	push	{r7}
 80193d2:	b083      	sub	sp, #12
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	4603      	mov	r3, r0
 80193d8:	6039      	str	r1, [r7, #0]
 80193da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80193dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	db0a      	blt.n	80193fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80193e4:	683b      	ldr	r3, [r7, #0]
 80193e6:	b2da      	uxtb	r2, r3
 80193e8:	490c      	ldr	r1, [pc, #48]	; (801941c <__NVIC_SetPriority+0x4c>)
 80193ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80193ee:	0112      	lsls	r2, r2, #4
 80193f0:	b2d2      	uxtb	r2, r2
 80193f2:	440b      	add	r3, r1
 80193f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80193f8:	e00a      	b.n	8019410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	b2da      	uxtb	r2, r3
 80193fe:	4908      	ldr	r1, [pc, #32]	; (8019420 <__NVIC_SetPriority+0x50>)
 8019400:	79fb      	ldrb	r3, [r7, #7]
 8019402:	f003 030f 	and.w	r3, r3, #15
 8019406:	3b04      	subs	r3, #4
 8019408:	0112      	lsls	r2, r2, #4
 801940a:	b2d2      	uxtb	r2, r2
 801940c:	440b      	add	r3, r1
 801940e:	761a      	strb	r2, [r3, #24]
}
 8019410:	bf00      	nop
 8019412:	370c      	adds	r7, #12
 8019414:	46bd      	mov	sp, r7
 8019416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941a:	4770      	bx	lr
 801941c:	e000e100 	.word	0xe000e100
 8019420:	e000ed00 	.word	0xe000ed00

08019424 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8019424:	b580      	push	{r7, lr}
 8019426:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8019428:	4b05      	ldr	r3, [pc, #20]	; (8019440 <SysTick_Handler+0x1c>)
 801942a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801942c:	f002 fb10 	bl	801ba50 <xTaskGetSchedulerState>
 8019430:	4603      	mov	r3, r0
 8019432:	2b01      	cmp	r3, #1
 8019434:	d001      	beq.n	801943a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8019436:	f003 f9f7 	bl	801c828 <xPortSysTickHandler>
  }
}
 801943a:	bf00      	nop
 801943c:	bd80      	pop	{r7, pc}
 801943e:	bf00      	nop
 8019440:	e000e010 	.word	0xe000e010

08019444 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8019444:	b580      	push	{r7, lr}
 8019446:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8019448:	2100      	movs	r1, #0
 801944a:	f06f 0004 	mvn.w	r0, #4
 801944e:	f7ff ffbf 	bl	80193d0 <__NVIC_SetPriority>
#endif
}
 8019452:	bf00      	nop
 8019454:	bd80      	pop	{r7, pc}
	...

08019458 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8019458:	b480      	push	{r7}
 801945a:	b083      	sub	sp, #12
 801945c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801945e:	f3ef 8305 	mrs	r3, IPSR
 8019462:	603b      	str	r3, [r7, #0]
  return(result);
 8019464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019466:	2b00      	cmp	r3, #0
 8019468:	d003      	beq.n	8019472 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801946a:	f06f 0305 	mvn.w	r3, #5
 801946e:	607b      	str	r3, [r7, #4]
 8019470:	e00c      	b.n	801948c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8019472:	4b0a      	ldr	r3, [pc, #40]	; (801949c <osKernelInitialize+0x44>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d105      	bne.n	8019486 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801947a:	4b08      	ldr	r3, [pc, #32]	; (801949c <osKernelInitialize+0x44>)
 801947c:	2201      	movs	r2, #1
 801947e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8019480:	2300      	movs	r3, #0
 8019482:	607b      	str	r3, [r7, #4]
 8019484:	e002      	b.n	801948c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8019486:	f04f 33ff 	mov.w	r3, #4294967295
 801948a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801948c:	687b      	ldr	r3, [r7, #4]
}
 801948e:	4618      	mov	r0, r3
 8019490:	370c      	adds	r7, #12
 8019492:	46bd      	mov	sp, r7
 8019494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019498:	4770      	bx	lr
 801949a:	bf00      	nop
 801949c:	20001690 	.word	0x20001690

080194a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80194a0:	b580      	push	{r7, lr}
 80194a2:	b082      	sub	sp, #8
 80194a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80194a6:	f3ef 8305 	mrs	r3, IPSR
 80194aa:	603b      	str	r3, [r7, #0]
  return(result);
 80194ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d003      	beq.n	80194ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80194b2:	f06f 0305 	mvn.w	r3, #5
 80194b6:	607b      	str	r3, [r7, #4]
 80194b8:	e010      	b.n	80194dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80194ba:	4b0b      	ldr	r3, [pc, #44]	; (80194e8 <osKernelStart+0x48>)
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	2b01      	cmp	r3, #1
 80194c0:	d109      	bne.n	80194d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80194c2:	f7ff ffbf 	bl	8019444 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80194c6:	4b08      	ldr	r3, [pc, #32]	; (80194e8 <osKernelStart+0x48>)
 80194c8:	2202      	movs	r2, #2
 80194ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80194cc:	f001 fe54 	bl	801b178 <vTaskStartScheduler>
      stat = osOK;
 80194d0:	2300      	movs	r3, #0
 80194d2:	607b      	str	r3, [r7, #4]
 80194d4:	e002      	b.n	80194dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80194d6:	f04f 33ff 	mov.w	r3, #4294967295
 80194da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80194dc:	687b      	ldr	r3, [r7, #4]
}
 80194de:	4618      	mov	r0, r3
 80194e0:	3708      	adds	r7, #8
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	20001690 	.word	0x20001690

080194ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b08e      	sub	sp, #56	; 0x38
 80194f0:	af04      	add	r7, sp, #16
 80194f2:	60f8      	str	r0, [r7, #12]
 80194f4:	60b9      	str	r1, [r7, #8]
 80194f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80194f8:	2300      	movs	r3, #0
 80194fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80194fc:	f3ef 8305 	mrs	r3, IPSR
 8019500:	617b      	str	r3, [r7, #20]
  return(result);
 8019502:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8019504:	2b00      	cmp	r3, #0
 8019506:	d17e      	bne.n	8019606 <osThreadNew+0x11a>
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d07b      	beq.n	8019606 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801950e:	2380      	movs	r3, #128	; 0x80
 8019510:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8019512:	2318      	movs	r3, #24
 8019514:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8019516:	2300      	movs	r3, #0
 8019518:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801951a:	f04f 33ff 	mov.w	r3, #4294967295
 801951e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d045      	beq.n	80195b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d002      	beq.n	8019534 <osThreadNew+0x48>
        name = attr->name;
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	699b      	ldr	r3, [r3, #24]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d002      	beq.n	8019542 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	699b      	ldr	r3, [r3, #24]
 8019540:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8019542:	69fb      	ldr	r3, [r7, #28]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d008      	beq.n	801955a <osThreadNew+0x6e>
 8019548:	69fb      	ldr	r3, [r7, #28]
 801954a:	2b38      	cmp	r3, #56	; 0x38
 801954c:	d805      	bhi.n	801955a <osThreadNew+0x6e>
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	685b      	ldr	r3, [r3, #4]
 8019552:	f003 0301 	and.w	r3, r3, #1
 8019556:	2b00      	cmp	r3, #0
 8019558:	d001      	beq.n	801955e <osThreadNew+0x72>
        return (NULL);
 801955a:	2300      	movs	r3, #0
 801955c:	e054      	b.n	8019608 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	695b      	ldr	r3, [r3, #20]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d003      	beq.n	801956e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	695b      	ldr	r3, [r3, #20]
 801956a:	089b      	lsrs	r3, r3, #2
 801956c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	689b      	ldr	r3, [r3, #8]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d00e      	beq.n	8019594 <osThreadNew+0xa8>
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	68db      	ldr	r3, [r3, #12]
 801957a:	2ba7      	cmp	r3, #167	; 0xa7
 801957c:	d90a      	bls.n	8019594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019582:	2b00      	cmp	r3, #0
 8019584:	d006      	beq.n	8019594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	695b      	ldr	r3, [r3, #20]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d002      	beq.n	8019594 <osThreadNew+0xa8>
        mem = 1;
 801958e:	2301      	movs	r3, #1
 8019590:	61bb      	str	r3, [r7, #24]
 8019592:	e010      	b.n	80195b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	689b      	ldr	r3, [r3, #8]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d10c      	bne.n	80195b6 <osThreadNew+0xca>
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	68db      	ldr	r3, [r3, #12]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d108      	bne.n	80195b6 <osThreadNew+0xca>
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	691b      	ldr	r3, [r3, #16]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d104      	bne.n	80195b6 <osThreadNew+0xca>
          mem = 0;
 80195ac:	2300      	movs	r3, #0
 80195ae:	61bb      	str	r3, [r7, #24]
 80195b0:	e001      	b.n	80195b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80195b2:	2300      	movs	r3, #0
 80195b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80195b6:	69bb      	ldr	r3, [r7, #24]
 80195b8:	2b01      	cmp	r3, #1
 80195ba:	d110      	bne.n	80195de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80195c0:	687a      	ldr	r2, [r7, #4]
 80195c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80195c4:	9202      	str	r2, [sp, #8]
 80195c6:	9301      	str	r3, [sp, #4]
 80195c8:	69fb      	ldr	r3, [r7, #28]
 80195ca:	9300      	str	r3, [sp, #0]
 80195cc:	68bb      	ldr	r3, [r7, #8]
 80195ce:	6a3a      	ldr	r2, [r7, #32]
 80195d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80195d2:	68f8      	ldr	r0, [r7, #12]
 80195d4:	f001 fb0c 	bl	801abf0 <xTaskCreateStatic>
 80195d8:	4603      	mov	r3, r0
 80195da:	613b      	str	r3, [r7, #16]
 80195dc:	e013      	b.n	8019606 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80195de:	69bb      	ldr	r3, [r7, #24]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d110      	bne.n	8019606 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80195e4:	6a3b      	ldr	r3, [r7, #32]
 80195e6:	b29a      	uxth	r2, r3
 80195e8:	f107 0310 	add.w	r3, r7, #16
 80195ec:	9301      	str	r3, [sp, #4]
 80195ee:	69fb      	ldr	r3, [r7, #28]
 80195f0:	9300      	str	r3, [sp, #0]
 80195f2:	68bb      	ldr	r3, [r7, #8]
 80195f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80195f6:	68f8      	ldr	r0, [r7, #12]
 80195f8:	f001 fb57 	bl	801acaa <xTaskCreate>
 80195fc:	4603      	mov	r3, r0
 80195fe:	2b01      	cmp	r3, #1
 8019600:	d001      	beq.n	8019606 <osThreadNew+0x11a>
            hTask = NULL;
 8019602:	2300      	movs	r3, #0
 8019604:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019606:	693b      	ldr	r3, [r7, #16]
}
 8019608:	4618      	mov	r0, r3
 801960a:	3728      	adds	r7, #40	; 0x28
 801960c:	46bd      	mov	sp, r7
 801960e:	bd80      	pop	{r7, pc}

08019610 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8019610:	b580      	push	{r7, lr}
 8019612:	b086      	sub	sp, #24
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801961c:	f3ef 8305 	mrs	r3, IPSR
 8019620:	60bb      	str	r3, [r7, #8]
  return(result);
 8019622:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8019624:	2b00      	cmp	r3, #0
 8019626:	d003      	beq.n	8019630 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8019628:	f06f 0305 	mvn.w	r3, #5
 801962c:	617b      	str	r3, [r7, #20]
 801962e:	e017      	b.n	8019660 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8019630:	693b      	ldr	r3, [r7, #16]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d103      	bne.n	801963e <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8019636:	f06f 0303 	mvn.w	r3, #3
 801963a:	617b      	str	r3, [r7, #20]
 801963c:	e010      	b.n	8019660 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 801963e:	6938      	ldr	r0, [r7, #16]
 8019640:	f001 fd34 	bl	801b0ac <eTaskGetState>
 8019644:	4603      	mov	r3, r0
 8019646:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8019648:	7bfb      	ldrb	r3, [r7, #15]
 801964a:	2b04      	cmp	r3, #4
 801964c:	d005      	beq.n	801965a <osThreadTerminate+0x4a>
      stat = osOK;
 801964e:	2300      	movs	r3, #0
 8019650:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8019652:	6938      	ldr	r0, [r7, #16]
 8019654:	f001 fc84 	bl	801af60 <vTaskDelete>
 8019658:	e002      	b.n	8019660 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 801965a:	f06f 0302 	mvn.w	r3, #2
 801965e:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8019660:	697b      	ldr	r3, [r7, #20]
}
 8019662:	4618      	mov	r0, r3
 8019664:	3718      	adds	r7, #24
 8019666:	46bd      	mov	sp, r7
 8019668:	bd80      	pop	{r7, pc}

0801966a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801966a:	b580      	push	{r7, lr}
 801966c:	b084      	sub	sp, #16
 801966e:	af00      	add	r7, sp, #0
 8019670:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019672:	f3ef 8305 	mrs	r3, IPSR
 8019676:	60bb      	str	r3, [r7, #8]
  return(result);
 8019678:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801967a:	2b00      	cmp	r3, #0
 801967c:	d003      	beq.n	8019686 <osDelay+0x1c>
    stat = osErrorISR;
 801967e:	f06f 0305 	mvn.w	r3, #5
 8019682:	60fb      	str	r3, [r7, #12]
 8019684:	e007      	b.n	8019696 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8019686:	2300      	movs	r3, #0
 8019688:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d002      	beq.n	8019696 <osDelay+0x2c>
      vTaskDelay(ticks);
 8019690:	6878      	ldr	r0, [r7, #4]
 8019692:	f001 fcd7 	bl	801b044 <vTaskDelay>
    }
  }

  return (stat);
 8019696:	68fb      	ldr	r3, [r7, #12]
}
 8019698:	4618      	mov	r0, r3
 801969a:	3710      	adds	r7, #16
 801969c:	46bd      	mov	sp, r7
 801969e:	bd80      	pop	{r7, pc}

080196a0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b088      	sub	sp, #32
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80196a8:	2300      	movs	r3, #0
 80196aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80196ac:	f3ef 8305 	mrs	r3, IPSR
 80196b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80196b2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d174      	bne.n	80197a2 <osMutexNew+0x102>
    if (attr != NULL) {
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d003      	beq.n	80196c6 <osMutexNew+0x26>
      type = attr->attr_bits;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	685b      	ldr	r3, [r3, #4]
 80196c2:	61bb      	str	r3, [r7, #24]
 80196c4:	e001      	b.n	80196ca <osMutexNew+0x2a>
    } else {
      type = 0U;
 80196c6:	2300      	movs	r3, #0
 80196c8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80196ca:	69bb      	ldr	r3, [r7, #24]
 80196cc:	f003 0301 	and.w	r3, r3, #1
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d002      	beq.n	80196da <osMutexNew+0x3a>
      rmtx = 1U;
 80196d4:	2301      	movs	r3, #1
 80196d6:	617b      	str	r3, [r7, #20]
 80196d8:	e001      	b.n	80196de <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80196da:	2300      	movs	r3, #0
 80196dc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80196de:	69bb      	ldr	r3, [r7, #24]
 80196e0:	f003 0308 	and.w	r3, r3, #8
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d15c      	bne.n	80197a2 <osMutexNew+0x102>
      mem = -1;
 80196e8:	f04f 33ff 	mov.w	r3, #4294967295
 80196ec:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d015      	beq.n	8019720 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	689b      	ldr	r3, [r3, #8]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d006      	beq.n	801970a <osMutexNew+0x6a>
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	68db      	ldr	r3, [r3, #12]
 8019700:	2b4f      	cmp	r3, #79	; 0x4f
 8019702:	d902      	bls.n	801970a <osMutexNew+0x6a>
          mem = 1;
 8019704:	2301      	movs	r3, #1
 8019706:	613b      	str	r3, [r7, #16]
 8019708:	e00c      	b.n	8019724 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	689b      	ldr	r3, [r3, #8]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d108      	bne.n	8019724 <osMutexNew+0x84>
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	68db      	ldr	r3, [r3, #12]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d104      	bne.n	8019724 <osMutexNew+0x84>
            mem = 0;
 801971a:	2300      	movs	r3, #0
 801971c:	613b      	str	r3, [r7, #16]
 801971e:	e001      	b.n	8019724 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8019720:	2300      	movs	r3, #0
 8019722:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8019724:	693b      	ldr	r3, [r7, #16]
 8019726:	2b01      	cmp	r3, #1
 8019728:	d112      	bne.n	8019750 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801972a:	697b      	ldr	r3, [r7, #20]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d007      	beq.n	8019740 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	689b      	ldr	r3, [r3, #8]
 8019734:	4619      	mov	r1, r3
 8019736:	2004      	movs	r0, #4
 8019738:	f000 fc49 	bl	8019fce <xQueueCreateMutexStatic>
 801973c:	61f8      	str	r0, [r7, #28]
 801973e:	e016      	b.n	801976e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	689b      	ldr	r3, [r3, #8]
 8019744:	4619      	mov	r1, r3
 8019746:	2001      	movs	r0, #1
 8019748:	f000 fc41 	bl	8019fce <xQueueCreateMutexStatic>
 801974c:	61f8      	str	r0, [r7, #28]
 801974e:	e00e      	b.n	801976e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8019750:	693b      	ldr	r3, [r7, #16]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d10b      	bne.n	801976e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8019756:	697b      	ldr	r3, [r7, #20]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d004      	beq.n	8019766 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801975c:	2004      	movs	r0, #4
 801975e:	f000 fc1e 	bl	8019f9e <xQueueCreateMutex>
 8019762:	61f8      	str	r0, [r7, #28]
 8019764:	e003      	b.n	801976e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8019766:	2001      	movs	r0, #1
 8019768:	f000 fc19 	bl	8019f9e <xQueueCreateMutex>
 801976c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801976e:	69fb      	ldr	r3, [r7, #28]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d00c      	beq.n	801978e <osMutexNew+0xee>
        if (attr != NULL) {
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d003      	beq.n	8019782 <osMutexNew+0xe2>
          name = attr->name;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	60fb      	str	r3, [r7, #12]
 8019780:	e001      	b.n	8019786 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8019782:	2300      	movs	r3, #0
 8019784:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8019786:	68f9      	ldr	r1, [r7, #12]
 8019788:	69f8      	ldr	r0, [r7, #28]
 801978a:	f001 f9d3 	bl	801ab34 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801978e:	69fb      	ldr	r3, [r7, #28]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d006      	beq.n	80197a2 <osMutexNew+0x102>
 8019794:	697b      	ldr	r3, [r7, #20]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d003      	beq.n	80197a2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	f043 0301 	orr.w	r3, r3, #1
 80197a0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80197a2:	69fb      	ldr	r3, [r7, #28]
}
 80197a4:	4618      	mov	r0, r3
 80197a6:	3720      	adds	r7, #32
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd80      	pop	{r7, pc}

080197ac <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80197ac:	b580      	push	{r7, lr}
 80197ae:	b086      	sub	sp, #24
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	6078      	str	r0, [r7, #4]
 80197b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	f023 0301 	bic.w	r3, r3, #1
 80197bc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	f003 0301 	and.w	r3, r3, #1
 80197c4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80197c6:	2300      	movs	r3, #0
 80197c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80197ca:	f3ef 8305 	mrs	r3, IPSR
 80197ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80197d0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d003      	beq.n	80197de <osMutexAcquire+0x32>
    stat = osErrorISR;
 80197d6:	f06f 0305 	mvn.w	r3, #5
 80197da:	617b      	str	r3, [r7, #20]
 80197dc:	e02c      	b.n	8019838 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80197de:	693b      	ldr	r3, [r7, #16]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d103      	bne.n	80197ec <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80197e4:	f06f 0303 	mvn.w	r3, #3
 80197e8:	617b      	str	r3, [r7, #20]
 80197ea:	e025      	b.n	8019838 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d011      	beq.n	8019816 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80197f2:	6839      	ldr	r1, [r7, #0]
 80197f4:	6938      	ldr	r0, [r7, #16]
 80197f6:	f000 fc39 	bl	801a06c <xQueueTakeMutexRecursive>
 80197fa:	4603      	mov	r3, r0
 80197fc:	2b01      	cmp	r3, #1
 80197fe:	d01b      	beq.n	8019838 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019800:	683b      	ldr	r3, [r7, #0]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d003      	beq.n	801980e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8019806:	f06f 0301 	mvn.w	r3, #1
 801980a:	617b      	str	r3, [r7, #20]
 801980c:	e014      	b.n	8019838 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801980e:	f06f 0302 	mvn.w	r3, #2
 8019812:	617b      	str	r3, [r7, #20]
 8019814:	e010      	b.n	8019838 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8019816:	6839      	ldr	r1, [r7, #0]
 8019818:	6938      	ldr	r0, [r7, #16]
 801981a:	f000 fed7 	bl	801a5cc <xQueueSemaphoreTake>
 801981e:	4603      	mov	r3, r0
 8019820:	2b01      	cmp	r3, #1
 8019822:	d009      	beq.n	8019838 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019824:	683b      	ldr	r3, [r7, #0]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d003      	beq.n	8019832 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 801982a:	f06f 0301 	mvn.w	r3, #1
 801982e:	617b      	str	r3, [r7, #20]
 8019830:	e002      	b.n	8019838 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8019832:	f06f 0302 	mvn.w	r3, #2
 8019836:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8019838:	697b      	ldr	r3, [r7, #20]
}
 801983a:	4618      	mov	r0, r3
 801983c:	3718      	adds	r7, #24
 801983e:	46bd      	mov	sp, r7
 8019840:	bd80      	pop	{r7, pc}

08019842 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8019842:	b580      	push	{r7, lr}
 8019844:	b086      	sub	sp, #24
 8019846:	af00      	add	r7, sp, #0
 8019848:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	f023 0301 	bic.w	r3, r3, #1
 8019850:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	f003 0301 	and.w	r3, r3, #1
 8019858:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801985a:	2300      	movs	r3, #0
 801985c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801985e:	f3ef 8305 	mrs	r3, IPSR
 8019862:	60bb      	str	r3, [r7, #8]
  return(result);
 8019864:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019866:	2b00      	cmp	r3, #0
 8019868:	d003      	beq.n	8019872 <osMutexRelease+0x30>
    stat = osErrorISR;
 801986a:	f06f 0305 	mvn.w	r3, #5
 801986e:	617b      	str	r3, [r7, #20]
 8019870:	e01f      	b.n	80198b2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8019872:	693b      	ldr	r3, [r7, #16]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d103      	bne.n	8019880 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8019878:	f06f 0303 	mvn.w	r3, #3
 801987c:	617b      	str	r3, [r7, #20]
 801987e:	e018      	b.n	80198b2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d009      	beq.n	801989a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8019886:	6938      	ldr	r0, [r7, #16]
 8019888:	f000 fbbc 	bl	801a004 <xQueueGiveMutexRecursive>
 801988c:	4603      	mov	r3, r0
 801988e:	2b01      	cmp	r3, #1
 8019890:	d00f      	beq.n	80198b2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8019892:	f06f 0302 	mvn.w	r3, #2
 8019896:	617b      	str	r3, [r7, #20]
 8019898:	e00b      	b.n	80198b2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801989a:	2300      	movs	r3, #0
 801989c:	2200      	movs	r2, #0
 801989e:	2100      	movs	r1, #0
 80198a0:	6938      	ldr	r0, [r7, #16]
 80198a2:	f000 fc19 	bl	801a0d8 <xQueueGenericSend>
 80198a6:	4603      	mov	r3, r0
 80198a8:	2b01      	cmp	r3, #1
 80198aa:	d002      	beq.n	80198b2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80198ac:	f06f 0302 	mvn.w	r3, #2
 80198b0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80198b2:	697b      	ldr	r3, [r7, #20]
}
 80198b4:	4618      	mov	r0, r3
 80198b6:	3718      	adds	r7, #24
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bd80      	pop	{r7, pc}

080198bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80198bc:	b580      	push	{r7, lr}
 80198be:	b08a      	sub	sp, #40	; 0x28
 80198c0:	af02      	add	r7, sp, #8
 80198c2:	60f8      	str	r0, [r7, #12]
 80198c4:	60b9      	str	r1, [r7, #8]
 80198c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80198c8:	2300      	movs	r3, #0
 80198ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80198cc:	f3ef 8305 	mrs	r3, IPSR
 80198d0:	613b      	str	r3, [r7, #16]
  return(result);
 80198d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d15f      	bne.n	8019998 <osMessageQueueNew+0xdc>
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d05c      	beq.n	8019998 <osMessageQueueNew+0xdc>
 80198de:	68bb      	ldr	r3, [r7, #8]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d059      	beq.n	8019998 <osMessageQueueNew+0xdc>
    mem = -1;
 80198e4:	f04f 33ff 	mov.w	r3, #4294967295
 80198e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d029      	beq.n	8019944 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	689b      	ldr	r3, [r3, #8]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d012      	beq.n	801991e <osMessageQueueNew+0x62>
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	68db      	ldr	r3, [r3, #12]
 80198fc:	2b4f      	cmp	r3, #79	; 0x4f
 80198fe:	d90e      	bls.n	801991e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019904:	2b00      	cmp	r3, #0
 8019906:	d00a      	beq.n	801991e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	695a      	ldr	r2, [r3, #20]
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	68b9      	ldr	r1, [r7, #8]
 8019910:	fb01 f303 	mul.w	r3, r1, r3
 8019914:	429a      	cmp	r2, r3
 8019916:	d302      	bcc.n	801991e <osMessageQueueNew+0x62>
        mem = 1;
 8019918:	2301      	movs	r3, #1
 801991a:	61bb      	str	r3, [r7, #24]
 801991c:	e014      	b.n	8019948 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	689b      	ldr	r3, [r3, #8]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d110      	bne.n	8019948 <osMessageQueueNew+0x8c>
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	68db      	ldr	r3, [r3, #12]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d10c      	bne.n	8019948 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8019932:	2b00      	cmp	r3, #0
 8019934:	d108      	bne.n	8019948 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	695b      	ldr	r3, [r3, #20]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d104      	bne.n	8019948 <osMessageQueueNew+0x8c>
          mem = 0;
 801993e:	2300      	movs	r3, #0
 8019940:	61bb      	str	r3, [r7, #24]
 8019942:	e001      	b.n	8019948 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8019944:	2300      	movs	r3, #0
 8019946:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8019948:	69bb      	ldr	r3, [r7, #24]
 801994a:	2b01      	cmp	r3, #1
 801994c:	d10b      	bne.n	8019966 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	691a      	ldr	r2, [r3, #16]
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	689b      	ldr	r3, [r3, #8]
 8019956:	2100      	movs	r1, #0
 8019958:	9100      	str	r1, [sp, #0]
 801995a:	68b9      	ldr	r1, [r7, #8]
 801995c:	68f8      	ldr	r0, [r7, #12]
 801995e:	f000 fa2f 	bl	8019dc0 <xQueueGenericCreateStatic>
 8019962:	61f8      	str	r0, [r7, #28]
 8019964:	e008      	b.n	8019978 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8019966:	69bb      	ldr	r3, [r7, #24]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d105      	bne.n	8019978 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801996c:	2200      	movs	r2, #0
 801996e:	68b9      	ldr	r1, [r7, #8]
 8019970:	68f8      	ldr	r0, [r7, #12]
 8019972:	f000 fa9d 	bl	8019eb0 <xQueueGenericCreate>
 8019976:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8019978:	69fb      	ldr	r3, [r7, #28]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d00c      	beq.n	8019998 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d003      	beq.n	801998c <osMessageQueueNew+0xd0>
        name = attr->name;
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	617b      	str	r3, [r7, #20]
 801998a:	e001      	b.n	8019990 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801998c:	2300      	movs	r3, #0
 801998e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8019990:	6979      	ldr	r1, [r7, #20]
 8019992:	69f8      	ldr	r0, [r7, #28]
 8019994:	f001 f8ce 	bl	801ab34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8019998:	69fb      	ldr	r3, [r7, #28]
}
 801999a:	4618      	mov	r0, r3
 801999c:	3720      	adds	r7, #32
 801999e:	46bd      	mov	sp, r7
 80199a0:	bd80      	pop	{r7, pc}
	...

080199a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b088      	sub	sp, #32
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	60f8      	str	r0, [r7, #12]
 80199ac:	60b9      	str	r1, [r7, #8]
 80199ae:	603b      	str	r3, [r7, #0]
 80199b0:	4613      	mov	r3, r2
 80199b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80199b8:	2300      	movs	r3, #0
 80199ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80199bc:	f3ef 8305 	mrs	r3, IPSR
 80199c0:	617b      	str	r3, [r7, #20]
  return(result);
 80199c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d028      	beq.n	8019a1a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80199c8:	69bb      	ldr	r3, [r7, #24]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d005      	beq.n	80199da <osMessageQueuePut+0x36>
 80199ce:	68bb      	ldr	r3, [r7, #8]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d002      	beq.n	80199da <osMessageQueuePut+0x36>
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d003      	beq.n	80199e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80199da:	f06f 0303 	mvn.w	r3, #3
 80199de:	61fb      	str	r3, [r7, #28]
 80199e0:	e038      	b.n	8019a54 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80199e2:	2300      	movs	r3, #0
 80199e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80199e6:	f107 0210 	add.w	r2, r7, #16
 80199ea:	2300      	movs	r3, #0
 80199ec:	68b9      	ldr	r1, [r7, #8]
 80199ee:	69b8      	ldr	r0, [r7, #24]
 80199f0:	f000 fc70 	bl	801a2d4 <xQueueGenericSendFromISR>
 80199f4:	4603      	mov	r3, r0
 80199f6:	2b01      	cmp	r3, #1
 80199f8:	d003      	beq.n	8019a02 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80199fa:	f06f 0302 	mvn.w	r3, #2
 80199fe:	61fb      	str	r3, [r7, #28]
 8019a00:	e028      	b.n	8019a54 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8019a02:	693b      	ldr	r3, [r7, #16]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d025      	beq.n	8019a54 <osMessageQueuePut+0xb0>
 8019a08:	4b15      	ldr	r3, [pc, #84]	; (8019a60 <osMessageQueuePut+0xbc>)
 8019a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a0e:	601a      	str	r2, [r3, #0]
 8019a10:	f3bf 8f4f 	dsb	sy
 8019a14:	f3bf 8f6f 	isb	sy
 8019a18:	e01c      	b.n	8019a54 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019a1a:	69bb      	ldr	r3, [r7, #24]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d002      	beq.n	8019a26 <osMessageQueuePut+0x82>
 8019a20:	68bb      	ldr	r3, [r7, #8]
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d103      	bne.n	8019a2e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8019a26:	f06f 0303 	mvn.w	r3, #3
 8019a2a:	61fb      	str	r3, [r7, #28]
 8019a2c:	e012      	b.n	8019a54 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8019a2e:	2300      	movs	r3, #0
 8019a30:	683a      	ldr	r2, [r7, #0]
 8019a32:	68b9      	ldr	r1, [r7, #8]
 8019a34:	69b8      	ldr	r0, [r7, #24]
 8019a36:	f000 fb4f 	bl	801a0d8 <xQueueGenericSend>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	2b01      	cmp	r3, #1
 8019a3e:	d009      	beq.n	8019a54 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d003      	beq.n	8019a4e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8019a46:	f06f 0301 	mvn.w	r3, #1
 8019a4a:	61fb      	str	r3, [r7, #28]
 8019a4c:	e002      	b.n	8019a54 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8019a4e:	f06f 0302 	mvn.w	r3, #2
 8019a52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8019a54:	69fb      	ldr	r3, [r7, #28]
}
 8019a56:	4618      	mov	r0, r3
 8019a58:	3720      	adds	r7, #32
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}
 8019a5e:	bf00      	nop
 8019a60:	e000ed04 	.word	0xe000ed04

08019a64 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8019a64:	b580      	push	{r7, lr}
 8019a66:	b088      	sub	sp, #32
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	60f8      	str	r0, [r7, #12]
 8019a6c:	60b9      	str	r1, [r7, #8]
 8019a6e:	607a      	str	r2, [r7, #4]
 8019a70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8019a76:	2300      	movs	r3, #0
 8019a78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019a7a:	f3ef 8305 	mrs	r3, IPSR
 8019a7e:	617b      	str	r3, [r7, #20]
  return(result);
 8019a80:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d028      	beq.n	8019ad8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019a86:	69bb      	ldr	r3, [r7, #24]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d005      	beq.n	8019a98 <osMessageQueueGet+0x34>
 8019a8c:	68bb      	ldr	r3, [r7, #8]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d002      	beq.n	8019a98 <osMessageQueueGet+0x34>
 8019a92:	683b      	ldr	r3, [r7, #0]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d003      	beq.n	8019aa0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8019a98:	f06f 0303 	mvn.w	r3, #3
 8019a9c:	61fb      	str	r3, [r7, #28]
 8019a9e:	e037      	b.n	8019b10 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8019aa4:	f107 0310 	add.w	r3, r7, #16
 8019aa8:	461a      	mov	r2, r3
 8019aaa:	68b9      	ldr	r1, [r7, #8]
 8019aac:	69b8      	ldr	r0, [r7, #24]
 8019aae:	f000 fe99 	bl	801a7e4 <xQueueReceiveFromISR>
 8019ab2:	4603      	mov	r3, r0
 8019ab4:	2b01      	cmp	r3, #1
 8019ab6:	d003      	beq.n	8019ac0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8019ab8:	f06f 0302 	mvn.w	r3, #2
 8019abc:	61fb      	str	r3, [r7, #28]
 8019abe:	e027      	b.n	8019b10 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8019ac0:	693b      	ldr	r3, [r7, #16]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d024      	beq.n	8019b10 <osMessageQueueGet+0xac>
 8019ac6:	4b15      	ldr	r3, [pc, #84]	; (8019b1c <osMessageQueueGet+0xb8>)
 8019ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019acc:	601a      	str	r2, [r3, #0]
 8019ace:	f3bf 8f4f 	dsb	sy
 8019ad2:	f3bf 8f6f 	isb	sy
 8019ad6:	e01b      	b.n	8019b10 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019ad8:	69bb      	ldr	r3, [r7, #24]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d002      	beq.n	8019ae4 <osMessageQueueGet+0x80>
 8019ade:	68bb      	ldr	r3, [r7, #8]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d103      	bne.n	8019aec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8019ae4:	f06f 0303 	mvn.w	r3, #3
 8019ae8:	61fb      	str	r3, [r7, #28]
 8019aea:	e011      	b.n	8019b10 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8019aec:	683a      	ldr	r2, [r7, #0]
 8019aee:	68b9      	ldr	r1, [r7, #8]
 8019af0:	69b8      	ldr	r0, [r7, #24]
 8019af2:	f000 fc8b 	bl	801a40c <xQueueReceive>
 8019af6:	4603      	mov	r3, r0
 8019af8:	2b01      	cmp	r3, #1
 8019afa:	d009      	beq.n	8019b10 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d003      	beq.n	8019b0a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8019b02:	f06f 0301 	mvn.w	r3, #1
 8019b06:	61fb      	str	r3, [r7, #28]
 8019b08:	e002      	b.n	8019b10 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8019b0a:	f06f 0302 	mvn.w	r3, #2
 8019b0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8019b10:	69fb      	ldr	r3, [r7, #28]
}
 8019b12:	4618      	mov	r0, r3
 8019b14:	3720      	adds	r7, #32
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd80      	pop	{r7, pc}
 8019b1a:	bf00      	nop
 8019b1c:	e000ed04 	.word	0xe000ed04

08019b20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019b20:	b480      	push	{r7}
 8019b22:	b085      	sub	sp, #20
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	60f8      	str	r0, [r7, #12]
 8019b28:	60b9      	str	r1, [r7, #8]
 8019b2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	4a07      	ldr	r2, [pc, #28]	; (8019b4c <vApplicationGetIdleTaskMemory+0x2c>)
 8019b30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019b32:	68bb      	ldr	r3, [r7, #8]
 8019b34:	4a06      	ldr	r2, [pc, #24]	; (8019b50 <vApplicationGetIdleTaskMemory+0x30>)
 8019b36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2280      	movs	r2, #128	; 0x80
 8019b3c:	601a      	str	r2, [r3, #0]
}
 8019b3e:	bf00      	nop
 8019b40:	3714      	adds	r7, #20
 8019b42:	46bd      	mov	sp, r7
 8019b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b48:	4770      	bx	lr
 8019b4a:	bf00      	nop
 8019b4c:	20001694 	.word	0x20001694
 8019b50:	2000173c 	.word	0x2000173c

08019b54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019b54:	b480      	push	{r7}
 8019b56:	b085      	sub	sp, #20
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	60f8      	str	r0, [r7, #12]
 8019b5c:	60b9      	str	r1, [r7, #8]
 8019b5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	4a07      	ldr	r2, [pc, #28]	; (8019b80 <vApplicationGetTimerTaskMemory+0x2c>)
 8019b64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8019b66:	68bb      	ldr	r3, [r7, #8]
 8019b68:	4a06      	ldr	r2, [pc, #24]	; (8019b84 <vApplicationGetTimerTaskMemory+0x30>)
 8019b6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019b72:	601a      	str	r2, [r3, #0]
}
 8019b74:	bf00      	nop
 8019b76:	3714      	adds	r7, #20
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7e:	4770      	bx	lr
 8019b80:	2000193c 	.word	0x2000193c
 8019b84:	200019e4 	.word	0x200019e4

08019b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b083      	sub	sp, #12
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	f103 0208 	add.w	r2, r3, #8
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8019ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	f103 0208 	add.w	r2, r3, #8
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	f103 0208 	add.w	r2, r3, #8
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	2200      	movs	r2, #0
 8019bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019bbc:	bf00      	nop
 8019bbe:	370c      	adds	r7, #12
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bc6:	4770      	bx	lr

08019bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019bc8:	b480      	push	{r7}
 8019bca:	b083      	sub	sp, #12
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019bd6:	bf00      	nop
 8019bd8:	370c      	adds	r7, #12
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be0:	4770      	bx	lr

08019be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019be2:	b480      	push	{r7}
 8019be4:	b085      	sub	sp, #20
 8019be6:	af00      	add	r7, sp, #0
 8019be8:	6078      	str	r0, [r7, #4]
 8019bea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	685b      	ldr	r3, [r3, #4]
 8019bf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019bf2:	683b      	ldr	r3, [r7, #0]
 8019bf4:	68fa      	ldr	r2, [r7, #12]
 8019bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	689a      	ldr	r2, [r3, #8]
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	689b      	ldr	r3, [r3, #8]
 8019c04:	683a      	ldr	r2, [r7, #0]
 8019c06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	683a      	ldr	r2, [r7, #0]
 8019c0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019c0e:	683b      	ldr	r3, [r7, #0]
 8019c10:	687a      	ldr	r2, [r7, #4]
 8019c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	1c5a      	adds	r2, r3, #1
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	601a      	str	r2, [r3, #0]
}
 8019c1e:	bf00      	nop
 8019c20:	3714      	adds	r7, #20
 8019c22:	46bd      	mov	sp, r7
 8019c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c28:	4770      	bx	lr

08019c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019c2a:	b480      	push	{r7}
 8019c2c:	b085      	sub	sp, #20
 8019c2e:	af00      	add	r7, sp, #0
 8019c30:	6078      	str	r0, [r7, #4]
 8019c32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019c34:	683b      	ldr	r3, [r7, #0]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019c3a:	68bb      	ldr	r3, [r7, #8]
 8019c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c40:	d103      	bne.n	8019c4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	691b      	ldr	r3, [r3, #16]
 8019c46:	60fb      	str	r3, [r7, #12]
 8019c48:	e00c      	b.n	8019c64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	3308      	adds	r3, #8
 8019c4e:	60fb      	str	r3, [r7, #12]
 8019c50:	e002      	b.n	8019c58 <vListInsert+0x2e>
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	685b      	ldr	r3, [r3, #4]
 8019c56:	60fb      	str	r3, [r7, #12]
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	685b      	ldr	r3, [r3, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	68ba      	ldr	r2, [r7, #8]
 8019c60:	429a      	cmp	r2, r3
 8019c62:	d2f6      	bcs.n	8019c52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	685a      	ldr	r2, [r3, #4]
 8019c68:	683b      	ldr	r3, [r7, #0]
 8019c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	685b      	ldr	r3, [r3, #4]
 8019c70:	683a      	ldr	r2, [r7, #0]
 8019c72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	68fa      	ldr	r2, [r7, #12]
 8019c78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	683a      	ldr	r2, [r7, #0]
 8019c7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019c80:	683b      	ldr	r3, [r7, #0]
 8019c82:	687a      	ldr	r2, [r7, #4]
 8019c84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	1c5a      	adds	r2, r3, #1
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	601a      	str	r2, [r3, #0]
}
 8019c90:	bf00      	nop
 8019c92:	3714      	adds	r7, #20
 8019c94:	46bd      	mov	sp, r7
 8019c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c9a:	4770      	bx	lr

08019c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019c9c:	b480      	push	{r7}
 8019c9e:	b085      	sub	sp, #20
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	691b      	ldr	r3, [r3, #16]
 8019ca8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	685b      	ldr	r3, [r3, #4]
 8019cae:	687a      	ldr	r2, [r7, #4]
 8019cb0:	6892      	ldr	r2, [r2, #8]
 8019cb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	689b      	ldr	r3, [r3, #8]
 8019cb8:	687a      	ldr	r2, [r7, #4]
 8019cba:	6852      	ldr	r2, [r2, #4]
 8019cbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	687a      	ldr	r2, [r7, #4]
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	d103      	bne.n	8019cd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	689a      	ldr	r2, [r3, #8]
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	1e5a      	subs	r2, r3, #1
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	681b      	ldr	r3, [r3, #0]
}
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	3714      	adds	r7, #20
 8019ce8:	46bd      	mov	sp, r7
 8019cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cee:	4770      	bx	lr

08019cf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b084      	sub	sp, #16
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
 8019cf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d10a      	bne.n	8019d1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d08:	f383 8811 	msr	BASEPRI, r3
 8019d0c:	f3bf 8f6f 	isb	sy
 8019d10:	f3bf 8f4f 	dsb	sy
 8019d14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019d16:	bf00      	nop
 8019d18:	e7fe      	b.n	8019d18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8019d1a:	f002 fcf3 	bl	801c704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	681a      	ldr	r2, [r3, #0]
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d26:	68f9      	ldr	r1, [r7, #12]
 8019d28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019d2a:	fb01 f303 	mul.w	r3, r1, r3
 8019d2e:	441a      	add	r2, r3
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	2200      	movs	r2, #0
 8019d38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	681a      	ldr	r2, [r3, #0]
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	681a      	ldr	r2, [r3, #0]
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d4a:	3b01      	subs	r3, #1
 8019d4c:	68f9      	ldr	r1, [r7, #12]
 8019d4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019d50:	fb01 f303 	mul.w	r3, r1, r3
 8019d54:	441a      	add	r2, r3
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	22ff      	movs	r2, #255	; 0xff
 8019d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	22ff      	movs	r2, #255	; 0xff
 8019d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8019d6a:	683b      	ldr	r3, [r7, #0]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d114      	bne.n	8019d9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	691b      	ldr	r3, [r3, #16]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d01a      	beq.n	8019dae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	3310      	adds	r3, #16
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	f001 fc95 	bl	801b6ac <xTaskRemoveFromEventList>
 8019d82:	4603      	mov	r3, r0
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d012      	beq.n	8019dae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019d88:	4b0c      	ldr	r3, [pc, #48]	; (8019dbc <xQueueGenericReset+0xcc>)
 8019d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d8e:	601a      	str	r2, [r3, #0]
 8019d90:	f3bf 8f4f 	dsb	sy
 8019d94:	f3bf 8f6f 	isb	sy
 8019d98:	e009      	b.n	8019dae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	3310      	adds	r3, #16
 8019d9e:	4618      	mov	r0, r3
 8019da0:	f7ff fef2 	bl	8019b88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	3324      	adds	r3, #36	; 0x24
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7ff feed 	bl	8019b88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019dae:	f002 fcd9 	bl	801c764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019db2:	2301      	movs	r3, #1
}
 8019db4:	4618      	mov	r0, r3
 8019db6:	3710      	adds	r7, #16
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}
 8019dbc:	e000ed04 	.word	0xe000ed04

08019dc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b08e      	sub	sp, #56	; 0x38
 8019dc4:	af02      	add	r7, sp, #8
 8019dc6:	60f8      	str	r0, [r7, #12]
 8019dc8:	60b9      	str	r1, [r7, #8]
 8019dca:	607a      	str	r2, [r7, #4]
 8019dcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d10a      	bne.n	8019dea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8019dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dd8:	f383 8811 	msr	BASEPRI, r3
 8019ddc:	f3bf 8f6f 	isb	sy
 8019de0:	f3bf 8f4f 	dsb	sy
 8019de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019de6:	bf00      	nop
 8019de8:	e7fe      	b.n	8019de8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019dea:	683b      	ldr	r3, [r7, #0]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d10a      	bne.n	8019e06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8019df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019df4:	f383 8811 	msr	BASEPRI, r3
 8019df8:	f3bf 8f6f 	isb	sy
 8019dfc:	f3bf 8f4f 	dsb	sy
 8019e00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019e02:	bf00      	nop
 8019e04:	e7fe      	b.n	8019e04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d002      	beq.n	8019e12 <xQueueGenericCreateStatic+0x52>
 8019e0c:	68bb      	ldr	r3, [r7, #8]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d001      	beq.n	8019e16 <xQueueGenericCreateStatic+0x56>
 8019e12:	2301      	movs	r3, #1
 8019e14:	e000      	b.n	8019e18 <xQueueGenericCreateStatic+0x58>
 8019e16:	2300      	movs	r3, #0
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d10a      	bne.n	8019e32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8019e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e20:	f383 8811 	msr	BASEPRI, r3
 8019e24:	f3bf 8f6f 	isb	sy
 8019e28:	f3bf 8f4f 	dsb	sy
 8019e2c:	623b      	str	r3, [r7, #32]
}
 8019e2e:	bf00      	nop
 8019e30:	e7fe      	b.n	8019e30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d102      	bne.n	8019e3e <xQueueGenericCreateStatic+0x7e>
 8019e38:	68bb      	ldr	r3, [r7, #8]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d101      	bne.n	8019e42 <xQueueGenericCreateStatic+0x82>
 8019e3e:	2301      	movs	r3, #1
 8019e40:	e000      	b.n	8019e44 <xQueueGenericCreateStatic+0x84>
 8019e42:	2300      	movs	r3, #0
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d10a      	bne.n	8019e5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8019e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e4c:	f383 8811 	msr	BASEPRI, r3
 8019e50:	f3bf 8f6f 	isb	sy
 8019e54:	f3bf 8f4f 	dsb	sy
 8019e58:	61fb      	str	r3, [r7, #28]
}
 8019e5a:	bf00      	nop
 8019e5c:	e7fe      	b.n	8019e5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019e5e:	2350      	movs	r3, #80	; 0x50
 8019e60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019e62:	697b      	ldr	r3, [r7, #20]
 8019e64:	2b50      	cmp	r3, #80	; 0x50
 8019e66:	d00a      	beq.n	8019e7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8019e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e6c:	f383 8811 	msr	BASEPRI, r3
 8019e70:	f3bf 8f6f 	isb	sy
 8019e74:	f3bf 8f4f 	dsb	sy
 8019e78:	61bb      	str	r3, [r7, #24]
}
 8019e7a:	bf00      	nop
 8019e7c:	e7fe      	b.n	8019e7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019e7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019e80:	683b      	ldr	r3, [r7, #0]
 8019e82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d00d      	beq.n	8019ea6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8c:	2201      	movs	r2, #1
 8019e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019e92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e98:	9300      	str	r3, [sp, #0]
 8019e9a:	4613      	mov	r3, r2
 8019e9c:	687a      	ldr	r2, [r7, #4]
 8019e9e:	68b9      	ldr	r1, [r7, #8]
 8019ea0:	68f8      	ldr	r0, [r7, #12]
 8019ea2:	f000 f83f 	bl	8019f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3730      	adds	r7, #48	; 0x30
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}

08019eb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b08a      	sub	sp, #40	; 0x28
 8019eb4:	af02      	add	r7, sp, #8
 8019eb6:	60f8      	str	r0, [r7, #12]
 8019eb8:	60b9      	str	r1, [r7, #8]
 8019eba:	4613      	mov	r3, r2
 8019ebc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d10a      	bne.n	8019eda <xQueueGenericCreate+0x2a>
	__asm volatile
 8019ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ec8:	f383 8811 	msr	BASEPRI, r3
 8019ecc:	f3bf 8f6f 	isb	sy
 8019ed0:	f3bf 8f4f 	dsb	sy
 8019ed4:	613b      	str	r3, [r7, #16]
}
 8019ed6:	bf00      	nop
 8019ed8:	e7fe      	b.n	8019ed8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	68ba      	ldr	r2, [r7, #8]
 8019ede:	fb02 f303 	mul.w	r3, r2, r3
 8019ee2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019ee4:	69fb      	ldr	r3, [r7, #28]
 8019ee6:	3350      	adds	r3, #80	; 0x50
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f002 fd2d 	bl	801c948 <pvPortMalloc>
 8019eee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019ef0:	69bb      	ldr	r3, [r7, #24]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d011      	beq.n	8019f1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019ef6:	69bb      	ldr	r3, [r7, #24]
 8019ef8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019efa:	697b      	ldr	r3, [r7, #20]
 8019efc:	3350      	adds	r3, #80	; 0x50
 8019efe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019f00:	69bb      	ldr	r3, [r7, #24]
 8019f02:	2200      	movs	r2, #0
 8019f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019f08:	79fa      	ldrb	r2, [r7, #7]
 8019f0a:	69bb      	ldr	r3, [r7, #24]
 8019f0c:	9300      	str	r3, [sp, #0]
 8019f0e:	4613      	mov	r3, r2
 8019f10:	697a      	ldr	r2, [r7, #20]
 8019f12:	68b9      	ldr	r1, [r7, #8]
 8019f14:	68f8      	ldr	r0, [r7, #12]
 8019f16:	f000 f805 	bl	8019f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3720      	adds	r7, #32
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}

08019f24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b084      	sub	sp, #16
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	60f8      	str	r0, [r7, #12]
 8019f2c:	60b9      	str	r1, [r7, #8]
 8019f2e:	607a      	str	r2, [r7, #4]
 8019f30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019f32:	68bb      	ldr	r3, [r7, #8]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d103      	bne.n	8019f40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019f38:	69bb      	ldr	r3, [r7, #24]
 8019f3a:	69ba      	ldr	r2, [r7, #24]
 8019f3c:	601a      	str	r2, [r3, #0]
 8019f3e:	e002      	b.n	8019f46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019f40:	69bb      	ldr	r3, [r7, #24]
 8019f42:	687a      	ldr	r2, [r7, #4]
 8019f44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019f46:	69bb      	ldr	r3, [r7, #24]
 8019f48:	68fa      	ldr	r2, [r7, #12]
 8019f4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019f4c:	69bb      	ldr	r3, [r7, #24]
 8019f4e:	68ba      	ldr	r2, [r7, #8]
 8019f50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019f52:	2101      	movs	r1, #1
 8019f54:	69b8      	ldr	r0, [r7, #24]
 8019f56:	f7ff fecb 	bl	8019cf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8019f5a:	69bb      	ldr	r3, [r7, #24]
 8019f5c:	78fa      	ldrb	r2, [r7, #3]
 8019f5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019f62:	bf00      	nop
 8019f64:	3710      	adds	r7, #16
 8019f66:	46bd      	mov	sp, r7
 8019f68:	bd80      	pop	{r7, pc}

08019f6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8019f6a:	b580      	push	{r7, lr}
 8019f6c:	b082      	sub	sp, #8
 8019f6e:	af00      	add	r7, sp, #0
 8019f70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d00e      	beq.n	8019f96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	2200      	movs	r2, #0
 8019f82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	2200      	movs	r2, #0
 8019f88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8019f8a:	2300      	movs	r3, #0
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	2100      	movs	r1, #0
 8019f90:	6878      	ldr	r0, [r7, #4]
 8019f92:	f000 f8a1 	bl	801a0d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8019f96:	bf00      	nop
 8019f98:	3708      	adds	r7, #8
 8019f9a:	46bd      	mov	sp, r7
 8019f9c:	bd80      	pop	{r7, pc}

08019f9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8019f9e:	b580      	push	{r7, lr}
 8019fa0:	b086      	sub	sp, #24
 8019fa2:	af00      	add	r7, sp, #0
 8019fa4:	4603      	mov	r3, r0
 8019fa6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019fa8:	2301      	movs	r3, #1
 8019faa:	617b      	str	r3, [r7, #20]
 8019fac:	2300      	movs	r3, #0
 8019fae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019fb0:	79fb      	ldrb	r3, [r7, #7]
 8019fb2:	461a      	mov	r2, r3
 8019fb4:	6939      	ldr	r1, [r7, #16]
 8019fb6:	6978      	ldr	r0, [r7, #20]
 8019fb8:	f7ff ff7a 	bl	8019eb0 <xQueueGenericCreate>
 8019fbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019fbe:	68f8      	ldr	r0, [r7, #12]
 8019fc0:	f7ff ffd3 	bl	8019f6a <prvInitialiseMutex>

		return xNewQueue;
 8019fc4:	68fb      	ldr	r3, [r7, #12]
	}
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	3718      	adds	r7, #24
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}

08019fce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8019fce:	b580      	push	{r7, lr}
 8019fd0:	b088      	sub	sp, #32
 8019fd2:	af02      	add	r7, sp, #8
 8019fd4:	4603      	mov	r3, r0
 8019fd6:	6039      	str	r1, [r7, #0]
 8019fd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019fda:	2301      	movs	r3, #1
 8019fdc:	617b      	str	r3, [r7, #20]
 8019fde:	2300      	movs	r3, #0
 8019fe0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8019fe2:	79fb      	ldrb	r3, [r7, #7]
 8019fe4:	9300      	str	r3, [sp, #0]
 8019fe6:	683b      	ldr	r3, [r7, #0]
 8019fe8:	2200      	movs	r2, #0
 8019fea:	6939      	ldr	r1, [r7, #16]
 8019fec:	6978      	ldr	r0, [r7, #20]
 8019fee:	f7ff fee7 	bl	8019dc0 <xQueueGenericCreateStatic>
 8019ff2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019ff4:	68f8      	ldr	r0, [r7, #12]
 8019ff6:	f7ff ffb8 	bl	8019f6a <prvInitialiseMutex>

		return xNewQueue;
 8019ffa:	68fb      	ldr	r3, [r7, #12]
	}
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	3718      	adds	r7, #24
 801a000:	46bd      	mov	sp, r7
 801a002:	bd80      	pop	{r7, pc}

0801a004 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801a004:	b590      	push	{r4, r7, lr}
 801a006:	b087      	sub	sp, #28
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801a010:	693b      	ldr	r3, [r7, #16]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d10a      	bne.n	801a02c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 801a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a01a:	f383 8811 	msr	BASEPRI, r3
 801a01e:	f3bf 8f6f 	isb	sy
 801a022:	f3bf 8f4f 	dsb	sy
 801a026:	60fb      	str	r3, [r7, #12]
}
 801a028:	bf00      	nop
 801a02a:	e7fe      	b.n	801a02a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a02c:	693b      	ldr	r3, [r7, #16]
 801a02e:	689c      	ldr	r4, [r3, #8]
 801a030:	f001 fcfe 	bl	801ba30 <xTaskGetCurrentTaskHandle>
 801a034:	4603      	mov	r3, r0
 801a036:	429c      	cmp	r4, r3
 801a038:	d111      	bne.n	801a05e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801a03a:	693b      	ldr	r3, [r7, #16]
 801a03c:	68db      	ldr	r3, [r3, #12]
 801a03e:	1e5a      	subs	r2, r3, #1
 801a040:	693b      	ldr	r3, [r7, #16]
 801a042:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801a044:	693b      	ldr	r3, [r7, #16]
 801a046:	68db      	ldr	r3, [r3, #12]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d105      	bne.n	801a058 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801a04c:	2300      	movs	r3, #0
 801a04e:	2200      	movs	r2, #0
 801a050:	2100      	movs	r1, #0
 801a052:	6938      	ldr	r0, [r7, #16]
 801a054:	f000 f840 	bl	801a0d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801a058:	2301      	movs	r3, #1
 801a05a:	617b      	str	r3, [r7, #20]
 801a05c:	e001      	b.n	801a062 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801a05e:	2300      	movs	r3, #0
 801a060:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801a062:	697b      	ldr	r3, [r7, #20]
	}
 801a064:	4618      	mov	r0, r3
 801a066:	371c      	adds	r7, #28
 801a068:	46bd      	mov	sp, r7
 801a06a:	bd90      	pop	{r4, r7, pc}

0801a06c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801a06c:	b590      	push	{r4, r7, lr}
 801a06e:	b087      	sub	sp, #28
 801a070:	af00      	add	r7, sp, #0
 801a072:	6078      	str	r0, [r7, #4]
 801a074:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801a07a:	693b      	ldr	r3, [r7, #16]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d10a      	bne.n	801a096 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 801a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a084:	f383 8811 	msr	BASEPRI, r3
 801a088:	f3bf 8f6f 	isb	sy
 801a08c:	f3bf 8f4f 	dsb	sy
 801a090:	60fb      	str	r3, [r7, #12]
}
 801a092:	bf00      	nop
 801a094:	e7fe      	b.n	801a094 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a096:	693b      	ldr	r3, [r7, #16]
 801a098:	689c      	ldr	r4, [r3, #8]
 801a09a:	f001 fcc9 	bl	801ba30 <xTaskGetCurrentTaskHandle>
 801a09e:	4603      	mov	r3, r0
 801a0a0:	429c      	cmp	r4, r3
 801a0a2:	d107      	bne.n	801a0b4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a0a4:	693b      	ldr	r3, [r7, #16]
 801a0a6:	68db      	ldr	r3, [r3, #12]
 801a0a8:	1c5a      	adds	r2, r3, #1
 801a0aa:	693b      	ldr	r3, [r7, #16]
 801a0ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801a0ae:	2301      	movs	r3, #1
 801a0b0:	617b      	str	r3, [r7, #20]
 801a0b2:	e00c      	b.n	801a0ce <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801a0b4:	6839      	ldr	r1, [r7, #0]
 801a0b6:	6938      	ldr	r0, [r7, #16]
 801a0b8:	f000 fa88 	bl	801a5cc <xQueueSemaphoreTake>
 801a0bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801a0be:	697b      	ldr	r3, [r7, #20]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d004      	beq.n	801a0ce <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a0c4:	693b      	ldr	r3, [r7, #16]
 801a0c6:	68db      	ldr	r3, [r3, #12]
 801a0c8:	1c5a      	adds	r2, r3, #1
 801a0ca:	693b      	ldr	r3, [r7, #16]
 801a0cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801a0ce:	697b      	ldr	r3, [r7, #20]
	}
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	371c      	adds	r7, #28
 801a0d4:	46bd      	mov	sp, r7
 801a0d6:	bd90      	pop	{r4, r7, pc}

0801a0d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a0d8:	b580      	push	{r7, lr}
 801a0da:	b08e      	sub	sp, #56	; 0x38
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	60f8      	str	r0, [r7, #12]
 801a0e0:	60b9      	str	r1, [r7, #8]
 801a0e2:	607a      	str	r2, [r7, #4]
 801a0e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d10a      	bne.n	801a10a <xQueueGenericSend+0x32>
	__asm volatile
 801a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0f8:	f383 8811 	msr	BASEPRI, r3
 801a0fc:	f3bf 8f6f 	isb	sy
 801a100:	f3bf 8f4f 	dsb	sy
 801a104:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a106:	bf00      	nop
 801a108:	e7fe      	b.n	801a108 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d103      	bne.n	801a118 <xQueueGenericSend+0x40>
 801a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a114:	2b00      	cmp	r3, #0
 801a116:	d101      	bne.n	801a11c <xQueueGenericSend+0x44>
 801a118:	2301      	movs	r3, #1
 801a11a:	e000      	b.n	801a11e <xQueueGenericSend+0x46>
 801a11c:	2300      	movs	r3, #0
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d10a      	bne.n	801a138 <xQueueGenericSend+0x60>
	__asm volatile
 801a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a126:	f383 8811 	msr	BASEPRI, r3
 801a12a:	f3bf 8f6f 	isb	sy
 801a12e:	f3bf 8f4f 	dsb	sy
 801a132:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a134:	bf00      	nop
 801a136:	e7fe      	b.n	801a136 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a138:	683b      	ldr	r3, [r7, #0]
 801a13a:	2b02      	cmp	r3, #2
 801a13c:	d103      	bne.n	801a146 <xQueueGenericSend+0x6e>
 801a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a142:	2b01      	cmp	r3, #1
 801a144:	d101      	bne.n	801a14a <xQueueGenericSend+0x72>
 801a146:	2301      	movs	r3, #1
 801a148:	e000      	b.n	801a14c <xQueueGenericSend+0x74>
 801a14a:	2300      	movs	r3, #0
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d10a      	bne.n	801a166 <xQueueGenericSend+0x8e>
	__asm volatile
 801a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a154:	f383 8811 	msr	BASEPRI, r3
 801a158:	f3bf 8f6f 	isb	sy
 801a15c:	f3bf 8f4f 	dsb	sy
 801a160:	623b      	str	r3, [r7, #32]
}
 801a162:	bf00      	nop
 801a164:	e7fe      	b.n	801a164 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a166:	f001 fc73 	bl	801ba50 <xTaskGetSchedulerState>
 801a16a:	4603      	mov	r3, r0
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d102      	bne.n	801a176 <xQueueGenericSend+0x9e>
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d101      	bne.n	801a17a <xQueueGenericSend+0xa2>
 801a176:	2301      	movs	r3, #1
 801a178:	e000      	b.n	801a17c <xQueueGenericSend+0xa4>
 801a17a:	2300      	movs	r3, #0
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d10a      	bne.n	801a196 <xQueueGenericSend+0xbe>
	__asm volatile
 801a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a184:	f383 8811 	msr	BASEPRI, r3
 801a188:	f3bf 8f6f 	isb	sy
 801a18c:	f3bf 8f4f 	dsb	sy
 801a190:	61fb      	str	r3, [r7, #28]
}
 801a192:	bf00      	nop
 801a194:	e7fe      	b.n	801a194 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a196:	f002 fab5 	bl	801c704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a19c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1a2:	429a      	cmp	r2, r3
 801a1a4:	d302      	bcc.n	801a1ac <xQueueGenericSend+0xd4>
 801a1a6:	683b      	ldr	r3, [r7, #0]
 801a1a8:	2b02      	cmp	r3, #2
 801a1aa:	d129      	bne.n	801a200 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a1ac:	683a      	ldr	r2, [r7, #0]
 801a1ae:	68b9      	ldr	r1, [r7, #8]
 801a1b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a1b2:	f000 fbaf 	bl	801a914 <prvCopyDataToQueue>
 801a1b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d010      	beq.n	801a1e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1c2:	3324      	adds	r3, #36	; 0x24
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	f001 fa71 	bl	801b6ac <xTaskRemoveFromEventList>
 801a1ca:	4603      	mov	r3, r0
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d013      	beq.n	801a1f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a1d0:	4b3f      	ldr	r3, [pc, #252]	; (801a2d0 <xQueueGenericSend+0x1f8>)
 801a1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1d6:	601a      	str	r2, [r3, #0]
 801a1d8:	f3bf 8f4f 	dsb	sy
 801a1dc:	f3bf 8f6f 	isb	sy
 801a1e0:	e00a      	b.n	801a1f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d007      	beq.n	801a1f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a1e8:	4b39      	ldr	r3, [pc, #228]	; (801a2d0 <xQueueGenericSend+0x1f8>)
 801a1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1ee:	601a      	str	r2, [r3, #0]
 801a1f0:	f3bf 8f4f 	dsb	sy
 801a1f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a1f8:	f002 fab4 	bl	801c764 <vPortExitCritical>
				return pdPASS;
 801a1fc:	2301      	movs	r3, #1
 801a1fe:	e063      	b.n	801a2c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	2b00      	cmp	r3, #0
 801a204:	d103      	bne.n	801a20e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a206:	f002 faad 	bl	801c764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a20a:	2300      	movs	r3, #0
 801a20c:	e05c      	b.n	801a2c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a210:	2b00      	cmp	r3, #0
 801a212:	d106      	bne.n	801a222 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a214:	f107 0314 	add.w	r3, r7, #20
 801a218:	4618      	mov	r0, r3
 801a21a:	f001 faab 	bl	801b774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a21e:	2301      	movs	r3, #1
 801a220:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a222:	f002 fa9f 	bl	801c764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a226:	f001 f817 	bl	801b258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a22a:	f002 fa6b 	bl	801c704 <vPortEnterCritical>
 801a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a234:	b25b      	sxtb	r3, r3
 801a236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a23a:	d103      	bne.n	801a244 <xQueueGenericSend+0x16c>
 801a23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a23e:	2200      	movs	r2, #0
 801a240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a24a:	b25b      	sxtb	r3, r3
 801a24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a250:	d103      	bne.n	801a25a <xQueueGenericSend+0x182>
 801a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a254:	2200      	movs	r2, #0
 801a256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a25a:	f002 fa83 	bl	801c764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a25e:	1d3a      	adds	r2, r7, #4
 801a260:	f107 0314 	add.w	r3, r7, #20
 801a264:	4611      	mov	r1, r2
 801a266:	4618      	mov	r0, r3
 801a268:	f001 fa9a 	bl	801b7a0 <xTaskCheckForTimeOut>
 801a26c:	4603      	mov	r3, r0
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d124      	bne.n	801a2bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a274:	f000 fc46 	bl	801ab04 <prvIsQueueFull>
 801a278:	4603      	mov	r3, r0
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d018      	beq.n	801a2b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a280:	3310      	adds	r3, #16
 801a282:	687a      	ldr	r2, [r7, #4]
 801a284:	4611      	mov	r1, r2
 801a286:	4618      	mov	r0, r3
 801a288:	f001 f9c0 	bl	801b60c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a28c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a28e:	f000 fbd1 	bl	801aa34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a292:	f000 ffef 	bl	801b274 <xTaskResumeAll>
 801a296:	4603      	mov	r3, r0
 801a298:	2b00      	cmp	r3, #0
 801a29a:	f47f af7c 	bne.w	801a196 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801a29e:	4b0c      	ldr	r3, [pc, #48]	; (801a2d0 <xQueueGenericSend+0x1f8>)
 801a2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a2a4:	601a      	str	r2, [r3, #0]
 801a2a6:	f3bf 8f4f 	dsb	sy
 801a2aa:	f3bf 8f6f 	isb	sy
 801a2ae:	e772      	b.n	801a196 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a2b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2b2:	f000 fbbf 	bl	801aa34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a2b6:	f000 ffdd 	bl	801b274 <xTaskResumeAll>
 801a2ba:	e76c      	b.n	801a196 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2be:	f000 fbb9 	bl	801aa34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a2c2:	f000 ffd7 	bl	801b274 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a2c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	3738      	adds	r7, #56	; 0x38
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	bd80      	pop	{r7, pc}
 801a2d0:	e000ed04 	.word	0xe000ed04

0801a2d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a2d4:	b580      	push	{r7, lr}
 801a2d6:	b090      	sub	sp, #64	; 0x40
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	60f8      	str	r0, [r7, #12]
 801a2dc:	60b9      	str	r1, [r7, #8]
 801a2de:	607a      	str	r2, [r7, #4]
 801a2e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801a2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d10a      	bne.n	801a302 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2f0:	f383 8811 	msr	BASEPRI, r3
 801a2f4:	f3bf 8f6f 	isb	sy
 801a2f8:	f3bf 8f4f 	dsb	sy
 801a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a2fe:	bf00      	nop
 801a300:	e7fe      	b.n	801a300 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a302:	68bb      	ldr	r3, [r7, #8]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d103      	bne.n	801a310 <xQueueGenericSendFromISR+0x3c>
 801a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d101      	bne.n	801a314 <xQueueGenericSendFromISR+0x40>
 801a310:	2301      	movs	r3, #1
 801a312:	e000      	b.n	801a316 <xQueueGenericSendFromISR+0x42>
 801a314:	2300      	movs	r3, #0
 801a316:	2b00      	cmp	r3, #0
 801a318:	d10a      	bne.n	801a330 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a31e:	f383 8811 	msr	BASEPRI, r3
 801a322:	f3bf 8f6f 	isb	sy
 801a326:	f3bf 8f4f 	dsb	sy
 801a32a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a32c:	bf00      	nop
 801a32e:	e7fe      	b.n	801a32e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a330:	683b      	ldr	r3, [r7, #0]
 801a332:	2b02      	cmp	r3, #2
 801a334:	d103      	bne.n	801a33e <xQueueGenericSendFromISR+0x6a>
 801a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a33a:	2b01      	cmp	r3, #1
 801a33c:	d101      	bne.n	801a342 <xQueueGenericSendFromISR+0x6e>
 801a33e:	2301      	movs	r3, #1
 801a340:	e000      	b.n	801a344 <xQueueGenericSendFromISR+0x70>
 801a342:	2300      	movs	r3, #0
 801a344:	2b00      	cmp	r3, #0
 801a346:	d10a      	bne.n	801a35e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a34c:	f383 8811 	msr	BASEPRI, r3
 801a350:	f3bf 8f6f 	isb	sy
 801a354:	f3bf 8f4f 	dsb	sy
 801a358:	623b      	str	r3, [r7, #32]
}
 801a35a:	bf00      	nop
 801a35c:	e7fe      	b.n	801a35c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a35e:	f002 fab3 	bl	801c8c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a362:	f3ef 8211 	mrs	r2, BASEPRI
 801a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a36a:	f383 8811 	msr	BASEPRI, r3
 801a36e:	f3bf 8f6f 	isb	sy
 801a372:	f3bf 8f4f 	dsb	sy
 801a376:	61fa      	str	r2, [r7, #28]
 801a378:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a37a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a37c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a386:	429a      	cmp	r2, r3
 801a388:	d302      	bcc.n	801a390 <xQueueGenericSendFromISR+0xbc>
 801a38a:	683b      	ldr	r3, [r7, #0]
 801a38c:	2b02      	cmp	r3, #2
 801a38e:	d12f      	bne.n	801a3f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a3a0:	683a      	ldr	r2, [r7, #0]
 801a3a2:	68b9      	ldr	r1, [r7, #8]
 801a3a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a3a6:	f000 fab5 	bl	801a914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a3aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a3b2:	d112      	bne.n	801a3da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d016      	beq.n	801a3ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3be:	3324      	adds	r3, #36	; 0x24
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	f001 f973 	bl	801b6ac <xTaskRemoveFromEventList>
 801a3c6:	4603      	mov	r3, r0
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d00e      	beq.n	801a3ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d00b      	beq.n	801a3ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	2201      	movs	r2, #1
 801a3d6:	601a      	str	r2, [r3, #0]
 801a3d8:	e007      	b.n	801a3ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a3da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801a3de:	3301      	adds	r3, #1
 801a3e0:	b2db      	uxtb	r3, r3
 801a3e2:	b25a      	sxtb	r2, r3
 801a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a3ea:	2301      	movs	r3, #1
 801a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801a3ee:	e001      	b.n	801a3f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a3f8:	697b      	ldr	r3, [r7, #20]
 801a3fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a3fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a402:	4618      	mov	r0, r3
 801a404:	3740      	adds	r7, #64	; 0x40
 801a406:	46bd      	mov	sp, r7
 801a408:	bd80      	pop	{r7, pc}
	...

0801a40c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b08c      	sub	sp, #48	; 0x30
 801a410:	af00      	add	r7, sp, #0
 801a412:	60f8      	str	r0, [r7, #12]
 801a414:	60b9      	str	r1, [r7, #8]
 801a416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a418:	2300      	movs	r3, #0
 801a41a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a422:	2b00      	cmp	r3, #0
 801a424:	d10a      	bne.n	801a43c <xQueueReceive+0x30>
	__asm volatile
 801a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a42a:	f383 8811 	msr	BASEPRI, r3
 801a42e:	f3bf 8f6f 	isb	sy
 801a432:	f3bf 8f4f 	dsb	sy
 801a436:	623b      	str	r3, [r7, #32]
}
 801a438:	bf00      	nop
 801a43a:	e7fe      	b.n	801a43a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d103      	bne.n	801a44a <xQueueReceive+0x3e>
 801a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a446:	2b00      	cmp	r3, #0
 801a448:	d101      	bne.n	801a44e <xQueueReceive+0x42>
 801a44a:	2301      	movs	r3, #1
 801a44c:	e000      	b.n	801a450 <xQueueReceive+0x44>
 801a44e:	2300      	movs	r3, #0
 801a450:	2b00      	cmp	r3, #0
 801a452:	d10a      	bne.n	801a46a <xQueueReceive+0x5e>
	__asm volatile
 801a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a458:	f383 8811 	msr	BASEPRI, r3
 801a45c:	f3bf 8f6f 	isb	sy
 801a460:	f3bf 8f4f 	dsb	sy
 801a464:	61fb      	str	r3, [r7, #28]
}
 801a466:	bf00      	nop
 801a468:	e7fe      	b.n	801a468 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a46a:	f001 faf1 	bl	801ba50 <xTaskGetSchedulerState>
 801a46e:	4603      	mov	r3, r0
 801a470:	2b00      	cmp	r3, #0
 801a472:	d102      	bne.n	801a47a <xQueueReceive+0x6e>
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d101      	bne.n	801a47e <xQueueReceive+0x72>
 801a47a:	2301      	movs	r3, #1
 801a47c:	e000      	b.n	801a480 <xQueueReceive+0x74>
 801a47e:	2300      	movs	r3, #0
 801a480:	2b00      	cmp	r3, #0
 801a482:	d10a      	bne.n	801a49a <xQueueReceive+0x8e>
	__asm volatile
 801a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a488:	f383 8811 	msr	BASEPRI, r3
 801a48c:	f3bf 8f6f 	isb	sy
 801a490:	f3bf 8f4f 	dsb	sy
 801a494:	61bb      	str	r3, [r7, #24]
}
 801a496:	bf00      	nop
 801a498:	e7fe      	b.n	801a498 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a49a:	f002 f933 	bl	801c704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d01f      	beq.n	801a4ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a4aa:	68b9      	ldr	r1, [r7, #8]
 801a4ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a4ae:	f000 fa9b 	bl	801a9e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4b4:	1e5a      	subs	r2, r3, #1
 801a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4bc:	691b      	ldr	r3, [r3, #16]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d00f      	beq.n	801a4e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4c4:	3310      	adds	r3, #16
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f001 f8f0 	bl	801b6ac <xTaskRemoveFromEventList>
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d007      	beq.n	801a4e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a4d2:	4b3d      	ldr	r3, [pc, #244]	; (801a5c8 <xQueueReceive+0x1bc>)
 801a4d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a4d8:	601a      	str	r2, [r3, #0]
 801a4da:	f3bf 8f4f 	dsb	sy
 801a4de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a4e2:	f002 f93f 	bl	801c764 <vPortExitCritical>
				return pdPASS;
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	e069      	b.n	801a5be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d103      	bne.n	801a4f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a4f0:	f002 f938 	bl	801c764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	e062      	b.n	801a5be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d106      	bne.n	801a50c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a4fe:	f107 0310 	add.w	r3, r7, #16
 801a502:	4618      	mov	r0, r3
 801a504:	f001 f936 	bl	801b774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a508:	2301      	movs	r3, #1
 801a50a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a50c:	f002 f92a 	bl	801c764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a510:	f000 fea2 	bl	801b258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a514:	f002 f8f6 	bl	801c704 <vPortEnterCritical>
 801a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a51a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a51e:	b25b      	sxtb	r3, r3
 801a520:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a524:	d103      	bne.n	801a52e <xQueueReceive+0x122>
 801a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a528:	2200      	movs	r2, #0
 801a52a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a534:	b25b      	sxtb	r3, r3
 801a536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a53a:	d103      	bne.n	801a544 <xQueueReceive+0x138>
 801a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a53e:	2200      	movs	r2, #0
 801a540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a544:	f002 f90e 	bl	801c764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a548:	1d3a      	adds	r2, r7, #4
 801a54a:	f107 0310 	add.w	r3, r7, #16
 801a54e:	4611      	mov	r1, r2
 801a550:	4618      	mov	r0, r3
 801a552:	f001 f925 	bl	801b7a0 <xTaskCheckForTimeOut>
 801a556:	4603      	mov	r3, r0
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d123      	bne.n	801a5a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a55e:	f000 fabb 	bl	801aad8 <prvIsQueueEmpty>
 801a562:	4603      	mov	r3, r0
 801a564:	2b00      	cmp	r3, #0
 801a566:	d017      	beq.n	801a598 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a56a:	3324      	adds	r3, #36	; 0x24
 801a56c:	687a      	ldr	r2, [r7, #4]
 801a56e:	4611      	mov	r1, r2
 801a570:	4618      	mov	r0, r3
 801a572:	f001 f84b 	bl	801b60c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a578:	f000 fa5c 	bl	801aa34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a57c:	f000 fe7a 	bl	801b274 <xTaskResumeAll>
 801a580:	4603      	mov	r3, r0
 801a582:	2b00      	cmp	r3, #0
 801a584:	d189      	bne.n	801a49a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801a586:	4b10      	ldr	r3, [pc, #64]	; (801a5c8 <xQueueReceive+0x1bc>)
 801a588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a58c:	601a      	str	r2, [r3, #0]
 801a58e:	f3bf 8f4f 	dsb	sy
 801a592:	f3bf 8f6f 	isb	sy
 801a596:	e780      	b.n	801a49a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a59a:	f000 fa4b 	bl	801aa34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a59e:	f000 fe69 	bl	801b274 <xTaskResumeAll>
 801a5a2:	e77a      	b.n	801a49a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a5a6:	f000 fa45 	bl	801aa34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a5aa:	f000 fe63 	bl	801b274 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a5b0:	f000 fa92 	bl	801aad8 <prvIsQueueEmpty>
 801a5b4:	4603      	mov	r3, r0
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	f43f af6f 	beq.w	801a49a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a5bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a5be:	4618      	mov	r0, r3
 801a5c0:	3730      	adds	r7, #48	; 0x30
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	bd80      	pop	{r7, pc}
 801a5c6:	bf00      	nop
 801a5c8:	e000ed04 	.word	0xe000ed04

0801a5cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b08e      	sub	sp, #56	; 0x38
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
 801a5d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801a5de:	2300      	movs	r3, #0
 801a5e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d10a      	bne.n	801a5fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 801a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5ec:	f383 8811 	msr	BASEPRI, r3
 801a5f0:	f3bf 8f6f 	isb	sy
 801a5f4:	f3bf 8f4f 	dsb	sy
 801a5f8:	623b      	str	r3, [r7, #32]
}
 801a5fa:	bf00      	nop
 801a5fc:	e7fe      	b.n	801a5fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a602:	2b00      	cmp	r3, #0
 801a604:	d00a      	beq.n	801a61c <xQueueSemaphoreTake+0x50>
	__asm volatile
 801a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a60a:	f383 8811 	msr	BASEPRI, r3
 801a60e:	f3bf 8f6f 	isb	sy
 801a612:	f3bf 8f4f 	dsb	sy
 801a616:	61fb      	str	r3, [r7, #28]
}
 801a618:	bf00      	nop
 801a61a:	e7fe      	b.n	801a61a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a61c:	f001 fa18 	bl	801ba50 <xTaskGetSchedulerState>
 801a620:	4603      	mov	r3, r0
 801a622:	2b00      	cmp	r3, #0
 801a624:	d102      	bne.n	801a62c <xQueueSemaphoreTake+0x60>
 801a626:	683b      	ldr	r3, [r7, #0]
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d101      	bne.n	801a630 <xQueueSemaphoreTake+0x64>
 801a62c:	2301      	movs	r3, #1
 801a62e:	e000      	b.n	801a632 <xQueueSemaphoreTake+0x66>
 801a630:	2300      	movs	r3, #0
 801a632:	2b00      	cmp	r3, #0
 801a634:	d10a      	bne.n	801a64c <xQueueSemaphoreTake+0x80>
	__asm volatile
 801a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a63a:	f383 8811 	msr	BASEPRI, r3
 801a63e:	f3bf 8f6f 	isb	sy
 801a642:	f3bf 8f4f 	dsb	sy
 801a646:	61bb      	str	r3, [r7, #24]
}
 801a648:	bf00      	nop
 801a64a:	e7fe      	b.n	801a64a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a64c:	f002 f85a 	bl	801c704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a654:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d024      	beq.n	801a6a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a65e:	1e5a      	subs	r2, r3, #1
 801a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a662:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d104      	bne.n	801a676 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a66c:	f001 fb66 	bl	801bd3c <pvTaskIncrementMutexHeldCount>
 801a670:	4602      	mov	r2, r0
 801a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a674:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a678:	691b      	ldr	r3, [r3, #16]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d00f      	beq.n	801a69e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a680:	3310      	adds	r3, #16
 801a682:	4618      	mov	r0, r3
 801a684:	f001 f812 	bl	801b6ac <xTaskRemoveFromEventList>
 801a688:	4603      	mov	r3, r0
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d007      	beq.n	801a69e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a68e:	4b54      	ldr	r3, [pc, #336]	; (801a7e0 <xQueueSemaphoreTake+0x214>)
 801a690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a694:	601a      	str	r2, [r3, #0]
 801a696:	f3bf 8f4f 	dsb	sy
 801a69a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a69e:	f002 f861 	bl	801c764 <vPortExitCritical>
				return pdPASS;
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	e097      	b.n	801a7d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d111      	bne.n	801a6d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d00a      	beq.n	801a6c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6b6:	f383 8811 	msr	BASEPRI, r3
 801a6ba:	f3bf 8f6f 	isb	sy
 801a6be:	f3bf 8f4f 	dsb	sy
 801a6c2:	617b      	str	r3, [r7, #20]
}
 801a6c4:	bf00      	nop
 801a6c6:	e7fe      	b.n	801a6c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a6c8:	f002 f84c 	bl	801c764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a6cc:	2300      	movs	r3, #0
 801a6ce:	e082      	b.n	801a7d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d106      	bne.n	801a6e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a6d6:	f107 030c 	add.w	r3, r7, #12
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f001 f84a 	bl	801b774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a6e0:	2301      	movs	r3, #1
 801a6e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a6e4:	f002 f83e 	bl	801c764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a6e8:	f000 fdb6 	bl	801b258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a6ec:	f002 f80a 	bl	801c704 <vPortEnterCritical>
 801a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a6f6:	b25b      	sxtb	r3, r3
 801a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6fc:	d103      	bne.n	801a706 <xQueueSemaphoreTake+0x13a>
 801a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a700:	2200      	movs	r2, #0
 801a702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a70c:	b25b      	sxtb	r3, r3
 801a70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a712:	d103      	bne.n	801a71c <xQueueSemaphoreTake+0x150>
 801a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a716:	2200      	movs	r2, #0
 801a718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a71c:	f002 f822 	bl	801c764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a720:	463a      	mov	r2, r7
 801a722:	f107 030c 	add.w	r3, r7, #12
 801a726:	4611      	mov	r1, r2
 801a728:	4618      	mov	r0, r3
 801a72a:	f001 f839 	bl	801b7a0 <xTaskCheckForTimeOut>
 801a72e:	4603      	mov	r3, r0
 801a730:	2b00      	cmp	r3, #0
 801a732:	d132      	bne.n	801a79a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a736:	f000 f9cf 	bl	801aad8 <prvIsQueueEmpty>
 801a73a:	4603      	mov	r3, r0
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d026      	beq.n	801a78e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d109      	bne.n	801a75c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801a748:	f001 ffdc 	bl	801c704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a74e:	689b      	ldr	r3, [r3, #8]
 801a750:	4618      	mov	r0, r3
 801a752:	f001 f99b 	bl	801ba8c <xTaskPriorityInherit>
 801a756:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801a758:	f002 f804 	bl	801c764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a75e:	3324      	adds	r3, #36	; 0x24
 801a760:	683a      	ldr	r2, [r7, #0]
 801a762:	4611      	mov	r1, r2
 801a764:	4618      	mov	r0, r3
 801a766:	f000 ff51 	bl	801b60c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a76a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a76c:	f000 f962 	bl	801aa34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a770:	f000 fd80 	bl	801b274 <xTaskResumeAll>
 801a774:	4603      	mov	r3, r0
 801a776:	2b00      	cmp	r3, #0
 801a778:	f47f af68 	bne.w	801a64c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801a77c:	4b18      	ldr	r3, [pc, #96]	; (801a7e0 <xQueueSemaphoreTake+0x214>)
 801a77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a782:	601a      	str	r2, [r3, #0]
 801a784:	f3bf 8f4f 	dsb	sy
 801a788:	f3bf 8f6f 	isb	sy
 801a78c:	e75e      	b.n	801a64c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a78e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a790:	f000 f950 	bl	801aa34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a794:	f000 fd6e 	bl	801b274 <xTaskResumeAll>
 801a798:	e758      	b.n	801a64c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a79c:	f000 f94a 	bl	801aa34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a7a0:	f000 fd68 	bl	801b274 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a7a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a7a6:	f000 f997 	bl	801aad8 <prvIsQueueEmpty>
 801a7aa:	4603      	mov	r3, r0
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	f43f af4d 	beq.w	801a64c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d00d      	beq.n	801a7d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801a7b8:	f001 ffa4 	bl	801c704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a7bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a7be:	f000 f891 	bl	801a8e4 <prvGetDisinheritPriorityAfterTimeout>
 801a7c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c6:	689b      	ldr	r3, [r3, #8]
 801a7c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f001 fa34 	bl	801bc38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a7d0:	f001 ffc8 	bl	801c764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a7d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	3738      	adds	r7, #56	; 0x38
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd80      	pop	{r7, pc}
 801a7de:	bf00      	nop
 801a7e0:	e000ed04 	.word	0xe000ed04

0801a7e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b08e      	sub	sp, #56	; 0x38
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	60f8      	str	r0, [r7, #12]
 801a7ec:	60b9      	str	r1, [r7, #8]
 801a7ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d10a      	bne.n	801a810 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7fe:	f383 8811 	msr	BASEPRI, r3
 801a802:	f3bf 8f6f 	isb	sy
 801a806:	f3bf 8f4f 	dsb	sy
 801a80a:	623b      	str	r3, [r7, #32]
}
 801a80c:	bf00      	nop
 801a80e:	e7fe      	b.n	801a80e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a810:	68bb      	ldr	r3, [r7, #8]
 801a812:	2b00      	cmp	r3, #0
 801a814:	d103      	bne.n	801a81e <xQueueReceiveFromISR+0x3a>
 801a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d101      	bne.n	801a822 <xQueueReceiveFromISR+0x3e>
 801a81e:	2301      	movs	r3, #1
 801a820:	e000      	b.n	801a824 <xQueueReceiveFromISR+0x40>
 801a822:	2300      	movs	r3, #0
 801a824:	2b00      	cmp	r3, #0
 801a826:	d10a      	bne.n	801a83e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a82c:	f383 8811 	msr	BASEPRI, r3
 801a830:	f3bf 8f6f 	isb	sy
 801a834:	f3bf 8f4f 	dsb	sy
 801a838:	61fb      	str	r3, [r7, #28]
}
 801a83a:	bf00      	nop
 801a83c:	e7fe      	b.n	801a83c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a83e:	f002 f843 	bl	801c8c8 <vPortValidateInterruptPriority>
	__asm volatile
 801a842:	f3ef 8211 	mrs	r2, BASEPRI
 801a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a84a:	f383 8811 	msr	BASEPRI, r3
 801a84e:	f3bf 8f6f 	isb	sy
 801a852:	f3bf 8f4f 	dsb	sy
 801a856:	61ba      	str	r2, [r7, #24]
 801a858:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a85a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a85c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a862:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a866:	2b00      	cmp	r3, #0
 801a868:	d02f      	beq.n	801a8ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a86c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a874:	68b9      	ldr	r1, [r7, #8]
 801a876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a878:	f000 f8b6 	bl	801a9e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a87e:	1e5a      	subs	r2, r3, #1
 801a880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a882:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a884:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a888:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a88c:	d112      	bne.n	801a8b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a890:	691b      	ldr	r3, [r3, #16]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d016      	beq.n	801a8c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a898:	3310      	adds	r3, #16
 801a89a:	4618      	mov	r0, r3
 801a89c:	f000 ff06 	bl	801b6ac <xTaskRemoveFromEventList>
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d00e      	beq.n	801a8c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d00b      	beq.n	801a8c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2201      	movs	r2, #1
 801a8b0:	601a      	str	r2, [r3, #0]
 801a8b2:	e007      	b.n	801a8c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a8b8:	3301      	adds	r3, #1
 801a8ba:	b2db      	uxtb	r3, r3
 801a8bc:	b25a      	sxtb	r2, r3
 801a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801a8c4:	2301      	movs	r3, #1
 801a8c6:	637b      	str	r3, [r7, #52]	; 0x34
 801a8c8:	e001      	b.n	801a8ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	637b      	str	r3, [r7, #52]	; 0x34
 801a8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a8d2:	693b      	ldr	r3, [r7, #16]
 801a8d4:	f383 8811 	msr	BASEPRI, r3
}
 801a8d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a8dc:	4618      	mov	r0, r3
 801a8de:	3738      	adds	r7, #56	; 0x38
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bd80      	pop	{r7, pc}

0801a8e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a8e4:	b480      	push	{r7}
 801a8e6:	b085      	sub	sp, #20
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d006      	beq.n	801a902 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801a8fe:	60fb      	str	r3, [r7, #12]
 801a900:	e001      	b.n	801a906 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a902:	2300      	movs	r3, #0
 801a904:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a906:	68fb      	ldr	r3, [r7, #12]
	}
 801a908:	4618      	mov	r0, r3
 801a90a:	3714      	adds	r7, #20
 801a90c:	46bd      	mov	sp, r7
 801a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a912:	4770      	bx	lr

0801a914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a914:	b580      	push	{r7, lr}
 801a916:	b086      	sub	sp, #24
 801a918:	af00      	add	r7, sp, #0
 801a91a:	60f8      	str	r0, [r7, #12]
 801a91c:	60b9      	str	r1, [r7, #8]
 801a91e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a920:	2300      	movs	r3, #0
 801a922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d10d      	bne.n	801a94e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d14d      	bne.n	801a9d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	689b      	ldr	r3, [r3, #8]
 801a93e:	4618      	mov	r0, r3
 801a940:	f001 f90c 	bl	801bb5c <xTaskPriorityDisinherit>
 801a944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	2200      	movs	r2, #0
 801a94a:	609a      	str	r2, [r3, #8]
 801a94c:	e043      	b.n	801a9d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d119      	bne.n	801a988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	6858      	ldr	r0, [r3, #4]
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a95c:	461a      	mov	r2, r3
 801a95e:	68b9      	ldr	r1, [r7, #8]
 801a960:	f004 fb6f 	bl	801f042 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	685a      	ldr	r2, [r3, #4]
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a96c:	441a      	add	r2, r3
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	685a      	ldr	r2, [r3, #4]
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	689b      	ldr	r3, [r3, #8]
 801a97a:	429a      	cmp	r2, r3
 801a97c:	d32b      	bcc.n	801a9d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	681a      	ldr	r2, [r3, #0]
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	605a      	str	r2, [r3, #4]
 801a986:	e026      	b.n	801a9d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	68d8      	ldr	r0, [r3, #12]
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a990:	461a      	mov	r2, r3
 801a992:	68b9      	ldr	r1, [r7, #8]
 801a994:	f004 fb55 	bl	801f042 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	68da      	ldr	r2, [r3, #12]
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9a0:	425b      	negs	r3, r3
 801a9a2:	441a      	add	r2, r3
 801a9a4:	68fb      	ldr	r3, [r7, #12]
 801a9a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	68da      	ldr	r2, [r3, #12]
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	d207      	bcs.n	801a9c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	689a      	ldr	r2, [r3, #8]
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9bc:	425b      	negs	r3, r3
 801a9be:	441a      	add	r2, r3
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	2b02      	cmp	r3, #2
 801a9c8:	d105      	bne.n	801a9d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a9ca:	693b      	ldr	r3, [r7, #16]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d002      	beq.n	801a9d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a9d0:	693b      	ldr	r3, [r7, #16]
 801a9d2:	3b01      	subs	r3, #1
 801a9d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a9d6:	693b      	ldr	r3, [r7, #16]
 801a9d8:	1c5a      	adds	r2, r3, #1
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a9de:	697b      	ldr	r3, [r7, #20]
}
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	3718      	adds	r7, #24
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	bd80      	pop	{r7, pc}

0801a9e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b082      	sub	sp, #8
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	6078      	str	r0, [r7, #4]
 801a9f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d018      	beq.n	801aa2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	68da      	ldr	r2, [r3, #12]
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa02:	441a      	add	r2, r3
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	68da      	ldr	r2, [r3, #12]
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	689b      	ldr	r3, [r3, #8]
 801aa10:	429a      	cmp	r2, r3
 801aa12:	d303      	bcc.n	801aa1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681a      	ldr	r2, [r3, #0]
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	68d9      	ldr	r1, [r3, #12]
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa24:	461a      	mov	r2, r3
 801aa26:	6838      	ldr	r0, [r7, #0]
 801aa28:	f004 fb0b 	bl	801f042 <memcpy>
	}
}
 801aa2c:	bf00      	nop
 801aa2e:	3708      	adds	r7, #8
 801aa30:	46bd      	mov	sp, r7
 801aa32:	bd80      	pop	{r7, pc}

0801aa34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b084      	sub	sp, #16
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801aa3c:	f001 fe62 	bl	801c704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aa46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801aa48:	e011      	b.n	801aa6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d012      	beq.n	801aa78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	3324      	adds	r3, #36	; 0x24
 801aa56:	4618      	mov	r0, r3
 801aa58:	f000 fe28 	bl	801b6ac <xTaskRemoveFromEventList>
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d001      	beq.n	801aa66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801aa62:	f000 feff 	bl	801b864 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801aa66:	7bfb      	ldrb	r3, [r7, #15]
 801aa68:	3b01      	subs	r3, #1
 801aa6a:	b2db      	uxtb	r3, r3
 801aa6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801aa6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	dce9      	bgt.n	801aa4a <prvUnlockQueue+0x16>
 801aa76:	e000      	b.n	801aa7a <prvUnlockQueue+0x46>
					break;
 801aa78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	22ff      	movs	r2, #255	; 0xff
 801aa7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801aa82:	f001 fe6f 	bl	801c764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801aa86:	f001 fe3d 	bl	801c704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aa90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801aa92:	e011      	b.n	801aab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	691b      	ldr	r3, [r3, #16]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d012      	beq.n	801aac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	3310      	adds	r3, #16
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	f000 fe03 	bl	801b6ac <xTaskRemoveFromEventList>
 801aaa6:	4603      	mov	r3, r0
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d001      	beq.n	801aab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801aaac:	f000 feda 	bl	801b864 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801aab0:	7bbb      	ldrb	r3, [r7, #14]
 801aab2:	3b01      	subs	r3, #1
 801aab4:	b2db      	uxtb	r3, r3
 801aab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801aab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	dce9      	bgt.n	801aa94 <prvUnlockQueue+0x60>
 801aac0:	e000      	b.n	801aac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801aac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	22ff      	movs	r2, #255	; 0xff
 801aac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801aacc:	f001 fe4a 	bl	801c764 <vPortExitCritical>
}
 801aad0:	bf00      	nop
 801aad2:	3710      	adds	r7, #16
 801aad4:	46bd      	mov	sp, r7
 801aad6:	bd80      	pop	{r7, pc}

0801aad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b084      	sub	sp, #16
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801aae0:	f001 fe10 	bl	801c704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d102      	bne.n	801aaf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801aaec:	2301      	movs	r3, #1
 801aaee:	60fb      	str	r3, [r7, #12]
 801aaf0:	e001      	b.n	801aaf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801aaf2:	2300      	movs	r3, #0
 801aaf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801aaf6:	f001 fe35 	bl	801c764 <vPortExitCritical>

	return xReturn;
 801aafa:	68fb      	ldr	r3, [r7, #12]
}
 801aafc:	4618      	mov	r0, r3
 801aafe:	3710      	adds	r7, #16
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd80      	pop	{r7, pc}

0801ab04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b084      	sub	sp, #16
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ab0c:	f001 fdfa 	bl	801c704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ab18:	429a      	cmp	r2, r3
 801ab1a:	d102      	bne.n	801ab22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801ab1c:	2301      	movs	r3, #1
 801ab1e:	60fb      	str	r3, [r7, #12]
 801ab20:	e001      	b.n	801ab26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801ab22:	2300      	movs	r3, #0
 801ab24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ab26:	f001 fe1d 	bl	801c764 <vPortExitCritical>

	return xReturn;
 801ab2a:	68fb      	ldr	r3, [r7, #12]
}
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	3710      	adds	r7, #16
 801ab30:	46bd      	mov	sp, r7
 801ab32:	bd80      	pop	{r7, pc}

0801ab34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801ab34:	b480      	push	{r7}
 801ab36:	b085      	sub	sp, #20
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
 801ab3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ab3e:	2300      	movs	r3, #0
 801ab40:	60fb      	str	r3, [r7, #12]
 801ab42:	e014      	b.n	801ab6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801ab44:	4a0f      	ldr	r2, [pc, #60]	; (801ab84 <vQueueAddToRegistry+0x50>)
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d10b      	bne.n	801ab68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801ab50:	490c      	ldr	r1, [pc, #48]	; (801ab84 <vQueueAddToRegistry+0x50>)
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	683a      	ldr	r2, [r7, #0]
 801ab56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801ab5a:	4a0a      	ldr	r2, [pc, #40]	; (801ab84 <vQueueAddToRegistry+0x50>)
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	00db      	lsls	r3, r3, #3
 801ab60:	4413      	add	r3, r2
 801ab62:	687a      	ldr	r2, [r7, #4]
 801ab64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801ab66:	e006      	b.n	801ab76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	3301      	adds	r3, #1
 801ab6c:	60fb      	str	r3, [r7, #12]
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	2b07      	cmp	r3, #7
 801ab72:	d9e7      	bls.n	801ab44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801ab74:	bf00      	nop
 801ab76:	bf00      	nop
 801ab78:	3714      	adds	r7, #20
 801ab7a:	46bd      	mov	sp, r7
 801ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab80:	4770      	bx	lr
 801ab82:	bf00      	nop
 801ab84:	20001de4 	.word	0x20001de4

0801ab88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ab88:	b580      	push	{r7, lr}
 801ab8a:	b086      	sub	sp, #24
 801ab8c:	af00      	add	r7, sp, #0
 801ab8e:	60f8      	str	r0, [r7, #12]
 801ab90:	60b9      	str	r1, [r7, #8]
 801ab92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801ab98:	f001 fdb4 	bl	801c704 <vPortEnterCritical>
 801ab9c:	697b      	ldr	r3, [r7, #20]
 801ab9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aba2:	b25b      	sxtb	r3, r3
 801aba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aba8:	d103      	bne.n	801abb2 <vQueueWaitForMessageRestricted+0x2a>
 801abaa:	697b      	ldr	r3, [r7, #20]
 801abac:	2200      	movs	r2, #0
 801abae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801abb2:	697b      	ldr	r3, [r7, #20]
 801abb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801abb8:	b25b      	sxtb	r3, r3
 801abba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abbe:	d103      	bne.n	801abc8 <vQueueWaitForMessageRestricted+0x40>
 801abc0:	697b      	ldr	r3, [r7, #20]
 801abc2:	2200      	movs	r2, #0
 801abc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801abc8:	f001 fdcc 	bl	801c764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801abcc:	697b      	ldr	r3, [r7, #20]
 801abce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d106      	bne.n	801abe2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801abd4:	697b      	ldr	r3, [r7, #20]
 801abd6:	3324      	adds	r3, #36	; 0x24
 801abd8:	687a      	ldr	r2, [r7, #4]
 801abda:	68b9      	ldr	r1, [r7, #8]
 801abdc:	4618      	mov	r0, r3
 801abde:	f000 fd39 	bl	801b654 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801abe2:	6978      	ldr	r0, [r7, #20]
 801abe4:	f7ff ff26 	bl	801aa34 <prvUnlockQueue>
	}
 801abe8:	bf00      	nop
 801abea:	3718      	adds	r7, #24
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}

0801abf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b08e      	sub	sp, #56	; 0x38
 801abf4:	af04      	add	r7, sp, #16
 801abf6:	60f8      	str	r0, [r7, #12]
 801abf8:	60b9      	str	r1, [r7, #8]
 801abfa:	607a      	str	r2, [r7, #4]
 801abfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801abfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d10a      	bne.n	801ac1a <xTaskCreateStatic+0x2a>
	__asm volatile
 801ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac08:	f383 8811 	msr	BASEPRI, r3
 801ac0c:	f3bf 8f6f 	isb	sy
 801ac10:	f3bf 8f4f 	dsb	sy
 801ac14:	623b      	str	r3, [r7, #32]
}
 801ac16:	bf00      	nop
 801ac18:	e7fe      	b.n	801ac18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d10a      	bne.n	801ac36 <xTaskCreateStatic+0x46>
	__asm volatile
 801ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac24:	f383 8811 	msr	BASEPRI, r3
 801ac28:	f3bf 8f6f 	isb	sy
 801ac2c:	f3bf 8f4f 	dsb	sy
 801ac30:	61fb      	str	r3, [r7, #28]
}
 801ac32:	bf00      	nop
 801ac34:	e7fe      	b.n	801ac34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801ac36:	23a8      	movs	r3, #168	; 0xa8
 801ac38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801ac3a:	693b      	ldr	r3, [r7, #16]
 801ac3c:	2ba8      	cmp	r3, #168	; 0xa8
 801ac3e:	d00a      	beq.n	801ac56 <xTaskCreateStatic+0x66>
	__asm volatile
 801ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac44:	f383 8811 	msr	BASEPRI, r3
 801ac48:	f3bf 8f6f 	isb	sy
 801ac4c:	f3bf 8f4f 	dsb	sy
 801ac50:	61bb      	str	r3, [r7, #24]
}
 801ac52:	bf00      	nop
 801ac54:	e7fe      	b.n	801ac54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ac56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801ac58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d01e      	beq.n	801ac9c <xTaskCreateStatic+0xac>
 801ac5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d01b      	beq.n	801ac9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ac64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac70:	2202      	movs	r2, #2
 801ac72:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ac76:	2300      	movs	r3, #0
 801ac78:	9303      	str	r3, [sp, #12]
 801ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac7c:	9302      	str	r3, [sp, #8]
 801ac7e:	f107 0314 	add.w	r3, r7, #20
 801ac82:	9301      	str	r3, [sp, #4]
 801ac84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac86:	9300      	str	r3, [sp, #0]
 801ac88:	683b      	ldr	r3, [r7, #0]
 801ac8a:	687a      	ldr	r2, [r7, #4]
 801ac8c:	68b9      	ldr	r1, [r7, #8]
 801ac8e:	68f8      	ldr	r0, [r7, #12]
 801ac90:	f000 f850 	bl	801ad34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ac94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ac96:	f000 f8f3 	bl	801ae80 <prvAddNewTaskToReadyList>
 801ac9a:	e001      	b.n	801aca0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801aca0:	697b      	ldr	r3, [r7, #20]
	}
 801aca2:	4618      	mov	r0, r3
 801aca4:	3728      	adds	r7, #40	; 0x28
 801aca6:	46bd      	mov	sp, r7
 801aca8:	bd80      	pop	{r7, pc}

0801acaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801acaa:	b580      	push	{r7, lr}
 801acac:	b08c      	sub	sp, #48	; 0x30
 801acae:	af04      	add	r7, sp, #16
 801acb0:	60f8      	str	r0, [r7, #12]
 801acb2:	60b9      	str	r1, [r7, #8]
 801acb4:	603b      	str	r3, [r7, #0]
 801acb6:	4613      	mov	r3, r2
 801acb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801acba:	88fb      	ldrh	r3, [r7, #6]
 801acbc:	009b      	lsls	r3, r3, #2
 801acbe:	4618      	mov	r0, r3
 801acc0:	f001 fe42 	bl	801c948 <pvPortMalloc>
 801acc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d00e      	beq.n	801acea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801accc:	20a8      	movs	r0, #168	; 0xa8
 801acce:	f001 fe3b 	bl	801c948 <pvPortMalloc>
 801acd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801acd4:	69fb      	ldr	r3, [r7, #28]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d003      	beq.n	801ace2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801acda:	69fb      	ldr	r3, [r7, #28]
 801acdc:	697a      	ldr	r2, [r7, #20]
 801acde:	631a      	str	r2, [r3, #48]	; 0x30
 801ace0:	e005      	b.n	801acee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801ace2:	6978      	ldr	r0, [r7, #20]
 801ace4:	f001 fefc 	bl	801cae0 <vPortFree>
 801ace8:	e001      	b.n	801acee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801acea:	2300      	movs	r3, #0
 801acec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801acee:	69fb      	ldr	r3, [r7, #28]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d017      	beq.n	801ad24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801acf4:	69fb      	ldr	r3, [r7, #28]
 801acf6:	2200      	movs	r2, #0
 801acf8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801acfc:	88fa      	ldrh	r2, [r7, #6]
 801acfe:	2300      	movs	r3, #0
 801ad00:	9303      	str	r3, [sp, #12]
 801ad02:	69fb      	ldr	r3, [r7, #28]
 801ad04:	9302      	str	r3, [sp, #8]
 801ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad08:	9301      	str	r3, [sp, #4]
 801ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad0c:	9300      	str	r3, [sp, #0]
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	68b9      	ldr	r1, [r7, #8]
 801ad12:	68f8      	ldr	r0, [r7, #12]
 801ad14:	f000 f80e 	bl	801ad34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ad18:	69f8      	ldr	r0, [r7, #28]
 801ad1a:	f000 f8b1 	bl	801ae80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801ad1e:	2301      	movs	r3, #1
 801ad20:	61bb      	str	r3, [r7, #24]
 801ad22:	e002      	b.n	801ad2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801ad24:	f04f 33ff 	mov.w	r3, #4294967295
 801ad28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801ad2a:	69bb      	ldr	r3, [r7, #24]
	}
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	3720      	adds	r7, #32
 801ad30:	46bd      	mov	sp, r7
 801ad32:	bd80      	pop	{r7, pc}

0801ad34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801ad34:	b580      	push	{r7, lr}
 801ad36:	b088      	sub	sp, #32
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	60f8      	str	r0, [r7, #12]
 801ad3c:	60b9      	str	r1, [r7, #8]
 801ad3e:	607a      	str	r2, [r7, #4]
 801ad40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	009b      	lsls	r3, r3, #2
 801ad4a:	461a      	mov	r2, r3
 801ad4c:	21a5      	movs	r1, #165	; 0xa5
 801ad4e:	f004 f8bf 	bl	801eed0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ad5c:	3b01      	subs	r3, #1
 801ad5e:	009b      	lsls	r3, r3, #2
 801ad60:	4413      	add	r3, r2
 801ad62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ad64:	69bb      	ldr	r3, [r7, #24]
 801ad66:	f023 0307 	bic.w	r3, r3, #7
 801ad6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ad6c:	69bb      	ldr	r3, [r7, #24]
 801ad6e:	f003 0307 	and.w	r3, r3, #7
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d00a      	beq.n	801ad8c <prvInitialiseNewTask+0x58>
	__asm volatile
 801ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad7a:	f383 8811 	msr	BASEPRI, r3
 801ad7e:	f3bf 8f6f 	isb	sy
 801ad82:	f3bf 8f4f 	dsb	sy
 801ad86:	617b      	str	r3, [r7, #20]
}
 801ad88:	bf00      	nop
 801ad8a:	e7fe      	b.n	801ad8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801ad8c:	68bb      	ldr	r3, [r7, #8]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d01f      	beq.n	801add2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ad92:	2300      	movs	r3, #0
 801ad94:	61fb      	str	r3, [r7, #28]
 801ad96:	e012      	b.n	801adbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801ad98:	68ba      	ldr	r2, [r7, #8]
 801ad9a:	69fb      	ldr	r3, [r7, #28]
 801ad9c:	4413      	add	r3, r2
 801ad9e:	7819      	ldrb	r1, [r3, #0]
 801ada0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ada2:	69fb      	ldr	r3, [r7, #28]
 801ada4:	4413      	add	r3, r2
 801ada6:	3334      	adds	r3, #52	; 0x34
 801ada8:	460a      	mov	r2, r1
 801adaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801adac:	68ba      	ldr	r2, [r7, #8]
 801adae:	69fb      	ldr	r3, [r7, #28]
 801adb0:	4413      	add	r3, r2
 801adb2:	781b      	ldrb	r3, [r3, #0]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d006      	beq.n	801adc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801adb8:	69fb      	ldr	r3, [r7, #28]
 801adba:	3301      	adds	r3, #1
 801adbc:	61fb      	str	r3, [r7, #28]
 801adbe:	69fb      	ldr	r3, [r7, #28]
 801adc0:	2b0f      	cmp	r3, #15
 801adc2:	d9e9      	bls.n	801ad98 <prvInitialiseNewTask+0x64>
 801adc4:	e000      	b.n	801adc8 <prvInitialiseNewTask+0x94>
			{
				break;
 801adc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adca:	2200      	movs	r2, #0
 801adcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801add0:	e003      	b.n	801adda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801add4:	2200      	movs	r2, #0
 801add6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801addc:	2b37      	cmp	r3, #55	; 0x37
 801adde:	d901      	bls.n	801ade4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801ade0:	2337      	movs	r3, #55	; 0x37
 801ade2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ade6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ade8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801adee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adf2:	2200      	movs	r2, #0
 801adf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adf8:	3304      	adds	r3, #4
 801adfa:	4618      	mov	r0, r3
 801adfc:	f7fe fee4 	bl	8019bc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae02:	3318      	adds	r3, #24
 801ae04:	4618      	mov	r0, r3
 801ae06:	f7fe fedf 	bl	8019bc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae22:	2200      	movs	r2, #0
 801ae24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae32:	3354      	adds	r3, #84	; 0x54
 801ae34:	224c      	movs	r2, #76	; 0x4c
 801ae36:	2100      	movs	r1, #0
 801ae38:	4618      	mov	r0, r3
 801ae3a:	f004 f849 	bl	801eed0 <memset>
 801ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae40:	4a0c      	ldr	r2, [pc, #48]	; (801ae74 <prvInitialiseNewTask+0x140>)
 801ae42:	659a      	str	r2, [r3, #88]	; 0x58
 801ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae46:	4a0c      	ldr	r2, [pc, #48]	; (801ae78 <prvInitialiseNewTask+0x144>)
 801ae48:	65da      	str	r2, [r3, #92]	; 0x5c
 801ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae4c:	4a0b      	ldr	r2, [pc, #44]	; (801ae7c <prvInitialiseNewTask+0x148>)
 801ae4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801ae50:	683a      	ldr	r2, [r7, #0]
 801ae52:	68f9      	ldr	r1, [r7, #12]
 801ae54:	69b8      	ldr	r0, [r7, #24]
 801ae56:	f001 fb27 	bl	801c4a8 <pxPortInitialiseStack>
 801ae5a:	4602      	mov	r2, r0
 801ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d002      	beq.n	801ae6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ae6c:	bf00      	nop
 801ae6e:	3720      	adds	r7, #32
 801ae70:	46bd      	mov	sp, r7
 801ae72:	bd80      	pop	{r7, pc}
 801ae74:	20013f24 	.word	0x20013f24
 801ae78:	20013f8c 	.word	0x20013f8c
 801ae7c:	20013ff4 	.word	0x20013ff4

0801ae80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b082      	sub	sp, #8
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801ae88:	f001 fc3c 	bl	801c704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801ae8c:	4b2d      	ldr	r3, [pc, #180]	; (801af44 <prvAddNewTaskToReadyList+0xc4>)
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	3301      	adds	r3, #1
 801ae92:	4a2c      	ldr	r2, [pc, #176]	; (801af44 <prvAddNewTaskToReadyList+0xc4>)
 801ae94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801ae96:	4b2c      	ldr	r3, [pc, #176]	; (801af48 <prvAddNewTaskToReadyList+0xc8>)
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d109      	bne.n	801aeb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801ae9e:	4a2a      	ldr	r2, [pc, #168]	; (801af48 <prvAddNewTaskToReadyList+0xc8>)
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801aea4:	4b27      	ldr	r3, [pc, #156]	; (801af44 <prvAddNewTaskToReadyList+0xc4>)
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	2b01      	cmp	r3, #1
 801aeaa:	d110      	bne.n	801aece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801aeac:	f000 fcfe 	bl	801b8ac <prvInitialiseTaskLists>
 801aeb0:	e00d      	b.n	801aece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801aeb2:	4b26      	ldr	r3, [pc, #152]	; (801af4c <prvAddNewTaskToReadyList+0xcc>)
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d109      	bne.n	801aece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801aeba:	4b23      	ldr	r3, [pc, #140]	; (801af48 <prvAddNewTaskToReadyList+0xc8>)
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aec4:	429a      	cmp	r2, r3
 801aec6:	d802      	bhi.n	801aece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801aec8:	4a1f      	ldr	r2, [pc, #124]	; (801af48 <prvAddNewTaskToReadyList+0xc8>)
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801aece:	4b20      	ldr	r3, [pc, #128]	; (801af50 <prvAddNewTaskToReadyList+0xd0>)
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	3301      	adds	r3, #1
 801aed4:	4a1e      	ldr	r2, [pc, #120]	; (801af50 <prvAddNewTaskToReadyList+0xd0>)
 801aed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801aed8:	4b1d      	ldr	r3, [pc, #116]	; (801af50 <prvAddNewTaskToReadyList+0xd0>)
 801aeda:	681a      	ldr	r2, [r3, #0]
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aee4:	4b1b      	ldr	r3, [pc, #108]	; (801af54 <prvAddNewTaskToReadyList+0xd4>)
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	429a      	cmp	r2, r3
 801aeea:	d903      	bls.n	801aef4 <prvAddNewTaskToReadyList+0x74>
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aef0:	4a18      	ldr	r2, [pc, #96]	; (801af54 <prvAddNewTaskToReadyList+0xd4>)
 801aef2:	6013      	str	r3, [r2, #0]
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aef8:	4613      	mov	r3, r2
 801aefa:	009b      	lsls	r3, r3, #2
 801aefc:	4413      	add	r3, r2
 801aefe:	009b      	lsls	r3, r3, #2
 801af00:	4a15      	ldr	r2, [pc, #84]	; (801af58 <prvAddNewTaskToReadyList+0xd8>)
 801af02:	441a      	add	r2, r3
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	3304      	adds	r3, #4
 801af08:	4619      	mov	r1, r3
 801af0a:	4610      	mov	r0, r2
 801af0c:	f7fe fe69 	bl	8019be2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801af10:	f001 fc28 	bl	801c764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801af14:	4b0d      	ldr	r3, [pc, #52]	; (801af4c <prvAddNewTaskToReadyList+0xcc>)
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d00e      	beq.n	801af3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801af1c:	4b0a      	ldr	r3, [pc, #40]	; (801af48 <prvAddNewTaskToReadyList+0xc8>)
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af26:	429a      	cmp	r2, r3
 801af28:	d207      	bcs.n	801af3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801af2a:	4b0c      	ldr	r3, [pc, #48]	; (801af5c <prvAddNewTaskToReadyList+0xdc>)
 801af2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801af30:	601a      	str	r2, [r3, #0]
 801af32:	f3bf 8f4f 	dsb	sy
 801af36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801af3a:	bf00      	nop
 801af3c:	3708      	adds	r7, #8
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}
 801af42:	bf00      	nop
 801af44:	200022f8 	.word	0x200022f8
 801af48:	20001e24 	.word	0x20001e24
 801af4c:	20002304 	.word	0x20002304
 801af50:	20002314 	.word	0x20002314
 801af54:	20002300 	.word	0x20002300
 801af58:	20001e28 	.word	0x20001e28
 801af5c:	e000ed04 	.word	0xe000ed04

0801af60 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801af60:	b580      	push	{r7, lr}
 801af62:	b084      	sub	sp, #16
 801af64:	af00      	add	r7, sp, #0
 801af66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801af68:	f001 fbcc 	bl	801c704 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d102      	bne.n	801af78 <vTaskDelete+0x18>
 801af72:	4b2c      	ldr	r3, [pc, #176]	; (801b024 <vTaskDelete+0xc4>)
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	e000      	b.n	801af7a <vTaskDelete+0x1a>
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	3304      	adds	r3, #4
 801af80:	4618      	mov	r0, r3
 801af82:	f7fe fe8b 	bl	8019c9c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d004      	beq.n	801af98 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	3318      	adds	r3, #24
 801af92:	4618      	mov	r0, r3
 801af94:	f7fe fe82 	bl	8019c9c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801af98:	4b23      	ldr	r3, [pc, #140]	; (801b028 <vTaskDelete+0xc8>)
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	3301      	adds	r3, #1
 801af9e:	4a22      	ldr	r2, [pc, #136]	; (801b028 <vTaskDelete+0xc8>)
 801afa0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801afa2:	4b20      	ldr	r3, [pc, #128]	; (801b024 <vTaskDelete+0xc4>)
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	68fa      	ldr	r2, [r7, #12]
 801afa8:	429a      	cmp	r2, r3
 801afaa:	d10b      	bne.n	801afc4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	3304      	adds	r3, #4
 801afb0:	4619      	mov	r1, r3
 801afb2:	481e      	ldr	r0, [pc, #120]	; (801b02c <vTaskDelete+0xcc>)
 801afb4:	f7fe fe15 	bl	8019be2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801afb8:	4b1d      	ldr	r3, [pc, #116]	; (801b030 <vTaskDelete+0xd0>)
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	3301      	adds	r3, #1
 801afbe:	4a1c      	ldr	r2, [pc, #112]	; (801b030 <vTaskDelete+0xd0>)
 801afc0:	6013      	str	r3, [r2, #0]
 801afc2:	e009      	b.n	801afd8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801afc4:	4b1b      	ldr	r3, [pc, #108]	; (801b034 <vTaskDelete+0xd4>)
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	3b01      	subs	r3, #1
 801afca:	4a1a      	ldr	r2, [pc, #104]	; (801b034 <vTaskDelete+0xd4>)
 801afcc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801afce:	68f8      	ldr	r0, [r7, #12]
 801afd0:	f000 fcda 	bl	801b988 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801afd4:	f000 fd0c 	bl	801b9f0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801afd8:	f001 fbc4 	bl	801c764 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801afdc:	4b16      	ldr	r3, [pc, #88]	; (801b038 <vTaskDelete+0xd8>)
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d01b      	beq.n	801b01c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801afe4:	4b0f      	ldr	r3, [pc, #60]	; (801b024 <vTaskDelete+0xc4>)
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	68fa      	ldr	r2, [r7, #12]
 801afea:	429a      	cmp	r2, r3
 801afec:	d116      	bne.n	801b01c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801afee:	4b13      	ldr	r3, [pc, #76]	; (801b03c <vTaskDelete+0xdc>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d00a      	beq.n	801b00c <vTaskDelete+0xac>
	__asm volatile
 801aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801affa:	f383 8811 	msr	BASEPRI, r3
 801affe:	f3bf 8f6f 	isb	sy
 801b002:	f3bf 8f4f 	dsb	sy
 801b006:	60bb      	str	r3, [r7, #8]
}
 801b008:	bf00      	nop
 801b00a:	e7fe      	b.n	801b00a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801b00c:	4b0c      	ldr	r3, [pc, #48]	; (801b040 <vTaskDelete+0xe0>)
 801b00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b012:	601a      	str	r2, [r3, #0]
 801b014:	f3bf 8f4f 	dsb	sy
 801b018:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801b01c:	bf00      	nop
 801b01e:	3710      	adds	r7, #16
 801b020:	46bd      	mov	sp, r7
 801b022:	bd80      	pop	{r7, pc}
 801b024:	20001e24 	.word	0x20001e24
 801b028:	20002314 	.word	0x20002314
 801b02c:	200022cc 	.word	0x200022cc
 801b030:	200022e0 	.word	0x200022e0
 801b034:	200022f8 	.word	0x200022f8
 801b038:	20002304 	.word	0x20002304
 801b03c:	20002320 	.word	0x20002320
 801b040:	e000ed04 	.word	0xe000ed04

0801b044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b044:	b580      	push	{r7, lr}
 801b046:	b084      	sub	sp, #16
 801b048:	af00      	add	r7, sp, #0
 801b04a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b04c:	2300      	movs	r3, #0
 801b04e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d017      	beq.n	801b086 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b056:	4b13      	ldr	r3, [pc, #76]	; (801b0a4 <vTaskDelay+0x60>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d00a      	beq.n	801b074 <vTaskDelay+0x30>
	__asm volatile
 801b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b062:	f383 8811 	msr	BASEPRI, r3
 801b066:	f3bf 8f6f 	isb	sy
 801b06a:	f3bf 8f4f 	dsb	sy
 801b06e:	60bb      	str	r3, [r7, #8]
}
 801b070:	bf00      	nop
 801b072:	e7fe      	b.n	801b072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801b074:	f000 f8f0 	bl	801b258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b078:	2100      	movs	r1, #0
 801b07a:	6878      	ldr	r0, [r7, #4]
 801b07c:	f000 fe72 	bl	801bd64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b080:	f000 f8f8 	bl	801b274 <xTaskResumeAll>
 801b084:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b086:	68fb      	ldr	r3, [r7, #12]
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d107      	bne.n	801b09c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801b08c:	4b06      	ldr	r3, [pc, #24]	; (801b0a8 <vTaskDelay+0x64>)
 801b08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b092:	601a      	str	r2, [r3, #0]
 801b094:	f3bf 8f4f 	dsb	sy
 801b098:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b09c:	bf00      	nop
 801b09e:	3710      	adds	r7, #16
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	bd80      	pop	{r7, pc}
 801b0a4:	20002320 	.word	0x20002320
 801b0a8:	e000ed04 	.word	0xe000ed04

0801b0ac <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b088      	sub	sp, #32
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801b0b8:	69bb      	ldr	r3, [r7, #24]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d10a      	bne.n	801b0d4 <eTaskGetState+0x28>
	__asm volatile
 801b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0c2:	f383 8811 	msr	BASEPRI, r3
 801b0c6:	f3bf 8f6f 	isb	sy
 801b0ca:	f3bf 8f4f 	dsb	sy
 801b0ce:	60bb      	str	r3, [r7, #8]
}
 801b0d0:	bf00      	nop
 801b0d2:	e7fe      	b.n	801b0d2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801b0d4:	4b23      	ldr	r3, [pc, #140]	; (801b164 <eTaskGetState+0xb8>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	69ba      	ldr	r2, [r7, #24]
 801b0da:	429a      	cmp	r2, r3
 801b0dc:	d102      	bne.n	801b0e4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801b0de:	2300      	movs	r3, #0
 801b0e0:	77fb      	strb	r3, [r7, #31]
 801b0e2:	e03a      	b.n	801b15a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801b0e4:	f001 fb0e 	bl	801c704 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801b0e8:	69bb      	ldr	r3, [r7, #24]
 801b0ea:	695b      	ldr	r3, [r3, #20]
 801b0ec:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801b0ee:	4b1e      	ldr	r3, [pc, #120]	; (801b168 <eTaskGetState+0xbc>)
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801b0f4:	4b1d      	ldr	r3, [pc, #116]	; (801b16c <eTaskGetState+0xc0>)
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801b0fa:	f001 fb33 	bl	801c764 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801b0fe:	697a      	ldr	r2, [r7, #20]
 801b100:	693b      	ldr	r3, [r7, #16]
 801b102:	429a      	cmp	r2, r3
 801b104:	d003      	beq.n	801b10e <eTaskGetState+0x62>
 801b106:	697a      	ldr	r2, [r7, #20]
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	429a      	cmp	r2, r3
 801b10c:	d102      	bne.n	801b114 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801b10e:	2302      	movs	r3, #2
 801b110:	77fb      	strb	r3, [r7, #31]
 801b112:	e022      	b.n	801b15a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801b114:	697b      	ldr	r3, [r7, #20]
 801b116:	4a16      	ldr	r2, [pc, #88]	; (801b170 <eTaskGetState+0xc4>)
 801b118:	4293      	cmp	r3, r2
 801b11a:	d112      	bne.n	801b142 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801b11c:	69bb      	ldr	r3, [r7, #24]
 801b11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b120:	2b00      	cmp	r3, #0
 801b122:	d10b      	bne.n	801b13c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801b124:	69bb      	ldr	r3, [r7, #24]
 801b126:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 801b12a:	b2db      	uxtb	r3, r3
 801b12c:	2b01      	cmp	r3, #1
 801b12e:	d102      	bne.n	801b136 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801b130:	2302      	movs	r3, #2
 801b132:	77fb      	strb	r3, [r7, #31]
 801b134:	e011      	b.n	801b15a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801b136:	2303      	movs	r3, #3
 801b138:	77fb      	strb	r3, [r7, #31]
 801b13a:	e00e      	b.n	801b15a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801b13c:	2302      	movs	r3, #2
 801b13e:	77fb      	strb	r3, [r7, #31]
 801b140:	e00b      	b.n	801b15a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801b142:	697b      	ldr	r3, [r7, #20]
 801b144:	4a0b      	ldr	r2, [pc, #44]	; (801b174 <eTaskGetState+0xc8>)
 801b146:	4293      	cmp	r3, r2
 801b148:	d002      	beq.n	801b150 <eTaskGetState+0xa4>
 801b14a:	697b      	ldr	r3, [r7, #20]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d102      	bne.n	801b156 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801b150:	2304      	movs	r3, #4
 801b152:	77fb      	strb	r3, [r7, #31]
 801b154:	e001      	b.n	801b15a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801b156:	2301      	movs	r3, #1
 801b158:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801b15a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801b15c:	4618      	mov	r0, r3
 801b15e:	3720      	adds	r7, #32
 801b160:	46bd      	mov	sp, r7
 801b162:	bd80      	pop	{r7, pc}
 801b164:	20001e24 	.word	0x20001e24
 801b168:	200022b0 	.word	0x200022b0
 801b16c:	200022b4 	.word	0x200022b4
 801b170:	200022e4 	.word	0x200022e4
 801b174:	200022cc 	.word	0x200022cc

0801b178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b08a      	sub	sp, #40	; 0x28
 801b17c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b17e:	2300      	movs	r3, #0
 801b180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b182:	2300      	movs	r3, #0
 801b184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b186:	463a      	mov	r2, r7
 801b188:	1d39      	adds	r1, r7, #4
 801b18a:	f107 0308 	add.w	r3, r7, #8
 801b18e:	4618      	mov	r0, r3
 801b190:	f7fe fcc6 	bl	8019b20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b194:	6839      	ldr	r1, [r7, #0]
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	68ba      	ldr	r2, [r7, #8]
 801b19a:	9202      	str	r2, [sp, #8]
 801b19c:	9301      	str	r3, [sp, #4]
 801b19e:	2300      	movs	r3, #0
 801b1a0:	9300      	str	r3, [sp, #0]
 801b1a2:	2300      	movs	r3, #0
 801b1a4:	460a      	mov	r2, r1
 801b1a6:	4924      	ldr	r1, [pc, #144]	; (801b238 <vTaskStartScheduler+0xc0>)
 801b1a8:	4824      	ldr	r0, [pc, #144]	; (801b23c <vTaskStartScheduler+0xc4>)
 801b1aa:	f7ff fd21 	bl	801abf0 <xTaskCreateStatic>
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	4a23      	ldr	r2, [pc, #140]	; (801b240 <vTaskStartScheduler+0xc8>)
 801b1b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b1b4:	4b22      	ldr	r3, [pc, #136]	; (801b240 <vTaskStartScheduler+0xc8>)
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d002      	beq.n	801b1c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b1bc:	2301      	movs	r3, #1
 801b1be:	617b      	str	r3, [r7, #20]
 801b1c0:	e001      	b.n	801b1c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801b1c6:	697b      	ldr	r3, [r7, #20]
 801b1c8:	2b01      	cmp	r3, #1
 801b1ca:	d102      	bne.n	801b1d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801b1cc:	f000 fe1e 	bl	801be0c <xTimerCreateTimerTask>
 801b1d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b1d2:	697b      	ldr	r3, [r7, #20]
 801b1d4:	2b01      	cmp	r3, #1
 801b1d6:	d11b      	bne.n	801b210 <vTaskStartScheduler+0x98>
	__asm volatile
 801b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1dc:	f383 8811 	msr	BASEPRI, r3
 801b1e0:	f3bf 8f6f 	isb	sy
 801b1e4:	f3bf 8f4f 	dsb	sy
 801b1e8:	613b      	str	r3, [r7, #16]
}
 801b1ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b1ec:	4b15      	ldr	r3, [pc, #84]	; (801b244 <vTaskStartScheduler+0xcc>)
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	3354      	adds	r3, #84	; 0x54
 801b1f2:	4a15      	ldr	r2, [pc, #84]	; (801b248 <vTaskStartScheduler+0xd0>)
 801b1f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b1f6:	4b15      	ldr	r3, [pc, #84]	; (801b24c <vTaskStartScheduler+0xd4>)
 801b1f8:	f04f 32ff 	mov.w	r2, #4294967295
 801b1fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b1fe:	4b14      	ldr	r3, [pc, #80]	; (801b250 <vTaskStartScheduler+0xd8>)
 801b200:	2201      	movs	r2, #1
 801b202:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b204:	4b13      	ldr	r3, [pc, #76]	; (801b254 <vTaskStartScheduler+0xdc>)
 801b206:	2200      	movs	r2, #0
 801b208:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b20a:	f001 f9d9 	bl	801c5c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b20e:	e00e      	b.n	801b22e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b210:	697b      	ldr	r3, [r7, #20]
 801b212:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b216:	d10a      	bne.n	801b22e <vTaskStartScheduler+0xb6>
	__asm volatile
 801b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b21c:	f383 8811 	msr	BASEPRI, r3
 801b220:	f3bf 8f6f 	isb	sy
 801b224:	f3bf 8f4f 	dsb	sy
 801b228:	60fb      	str	r3, [r7, #12]
}
 801b22a:	bf00      	nop
 801b22c:	e7fe      	b.n	801b22c <vTaskStartScheduler+0xb4>
}
 801b22e:	bf00      	nop
 801b230:	3718      	adds	r7, #24
 801b232:	46bd      	mov	sp, r7
 801b234:	bd80      	pop	{r7, pc}
 801b236:	bf00      	nop
 801b238:	080202c8 	.word	0x080202c8
 801b23c:	0801b87d 	.word	0x0801b87d
 801b240:	2000231c 	.word	0x2000231c
 801b244:	20001e24 	.word	0x20001e24
 801b248:	2000028c 	.word	0x2000028c
 801b24c:	20002318 	.word	0x20002318
 801b250:	20002304 	.word	0x20002304
 801b254:	200022fc 	.word	0x200022fc

0801b258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b258:	b480      	push	{r7}
 801b25a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b25c:	4b04      	ldr	r3, [pc, #16]	; (801b270 <vTaskSuspendAll+0x18>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	3301      	adds	r3, #1
 801b262:	4a03      	ldr	r2, [pc, #12]	; (801b270 <vTaskSuspendAll+0x18>)
 801b264:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b266:	bf00      	nop
 801b268:	46bd      	mov	sp, r7
 801b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b26e:	4770      	bx	lr
 801b270:	20002320 	.word	0x20002320

0801b274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b084      	sub	sp, #16
 801b278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b27a:	2300      	movs	r3, #0
 801b27c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b27e:	2300      	movs	r3, #0
 801b280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b282:	4b42      	ldr	r3, [pc, #264]	; (801b38c <xTaskResumeAll+0x118>)
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d10a      	bne.n	801b2a0 <xTaskResumeAll+0x2c>
	__asm volatile
 801b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b28e:	f383 8811 	msr	BASEPRI, r3
 801b292:	f3bf 8f6f 	isb	sy
 801b296:	f3bf 8f4f 	dsb	sy
 801b29a:	603b      	str	r3, [r7, #0]
}
 801b29c:	bf00      	nop
 801b29e:	e7fe      	b.n	801b29e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b2a0:	f001 fa30 	bl	801c704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b2a4:	4b39      	ldr	r3, [pc, #228]	; (801b38c <xTaskResumeAll+0x118>)
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	3b01      	subs	r3, #1
 801b2aa:	4a38      	ldr	r2, [pc, #224]	; (801b38c <xTaskResumeAll+0x118>)
 801b2ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b2ae:	4b37      	ldr	r3, [pc, #220]	; (801b38c <xTaskResumeAll+0x118>)
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d162      	bne.n	801b37c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b2b6:	4b36      	ldr	r3, [pc, #216]	; (801b390 <xTaskResumeAll+0x11c>)
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d05e      	beq.n	801b37c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b2be:	e02f      	b.n	801b320 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b2c0:	4b34      	ldr	r3, [pc, #208]	; (801b394 <xTaskResumeAll+0x120>)
 801b2c2:	68db      	ldr	r3, [r3, #12]
 801b2c4:	68db      	ldr	r3, [r3, #12]
 801b2c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	3318      	adds	r3, #24
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	f7fe fce5 	bl	8019c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	3304      	adds	r3, #4
 801b2d6:	4618      	mov	r0, r3
 801b2d8:	f7fe fce0 	bl	8019c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2e0:	4b2d      	ldr	r3, [pc, #180]	; (801b398 <xTaskResumeAll+0x124>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	429a      	cmp	r2, r3
 801b2e6:	d903      	bls.n	801b2f0 <xTaskResumeAll+0x7c>
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2ec:	4a2a      	ldr	r2, [pc, #168]	; (801b398 <xTaskResumeAll+0x124>)
 801b2ee:	6013      	str	r3, [r2, #0]
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2f4:	4613      	mov	r3, r2
 801b2f6:	009b      	lsls	r3, r3, #2
 801b2f8:	4413      	add	r3, r2
 801b2fa:	009b      	lsls	r3, r3, #2
 801b2fc:	4a27      	ldr	r2, [pc, #156]	; (801b39c <xTaskResumeAll+0x128>)
 801b2fe:	441a      	add	r2, r3
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	3304      	adds	r3, #4
 801b304:	4619      	mov	r1, r3
 801b306:	4610      	mov	r0, r2
 801b308:	f7fe fc6b 	bl	8019be2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b310:	4b23      	ldr	r3, [pc, #140]	; (801b3a0 <xTaskResumeAll+0x12c>)
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b316:	429a      	cmp	r2, r3
 801b318:	d302      	bcc.n	801b320 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801b31a:	4b22      	ldr	r3, [pc, #136]	; (801b3a4 <xTaskResumeAll+0x130>)
 801b31c:	2201      	movs	r2, #1
 801b31e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b320:	4b1c      	ldr	r3, [pc, #112]	; (801b394 <xTaskResumeAll+0x120>)
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d1cb      	bne.n	801b2c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d001      	beq.n	801b332 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b32e:	f000 fb5f 	bl	801b9f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b332:	4b1d      	ldr	r3, [pc, #116]	; (801b3a8 <xTaskResumeAll+0x134>)
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d010      	beq.n	801b360 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b33e:	f000 f847 	bl	801b3d0 <xTaskIncrementTick>
 801b342:	4603      	mov	r3, r0
 801b344:	2b00      	cmp	r3, #0
 801b346:	d002      	beq.n	801b34e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801b348:	4b16      	ldr	r3, [pc, #88]	; (801b3a4 <xTaskResumeAll+0x130>)
 801b34a:	2201      	movs	r2, #1
 801b34c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	3b01      	subs	r3, #1
 801b352:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	2b00      	cmp	r3, #0
 801b358:	d1f1      	bne.n	801b33e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801b35a:	4b13      	ldr	r3, [pc, #76]	; (801b3a8 <xTaskResumeAll+0x134>)
 801b35c:	2200      	movs	r2, #0
 801b35e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b360:	4b10      	ldr	r3, [pc, #64]	; (801b3a4 <xTaskResumeAll+0x130>)
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d009      	beq.n	801b37c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b368:	2301      	movs	r3, #1
 801b36a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b36c:	4b0f      	ldr	r3, [pc, #60]	; (801b3ac <xTaskResumeAll+0x138>)
 801b36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b372:	601a      	str	r2, [r3, #0]
 801b374:	f3bf 8f4f 	dsb	sy
 801b378:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b37c:	f001 f9f2 	bl	801c764 <vPortExitCritical>

	return xAlreadyYielded;
 801b380:	68bb      	ldr	r3, [r7, #8]
}
 801b382:	4618      	mov	r0, r3
 801b384:	3710      	adds	r7, #16
 801b386:	46bd      	mov	sp, r7
 801b388:	bd80      	pop	{r7, pc}
 801b38a:	bf00      	nop
 801b38c:	20002320 	.word	0x20002320
 801b390:	200022f8 	.word	0x200022f8
 801b394:	200022b8 	.word	0x200022b8
 801b398:	20002300 	.word	0x20002300
 801b39c:	20001e28 	.word	0x20001e28
 801b3a0:	20001e24 	.word	0x20001e24
 801b3a4:	2000230c 	.word	0x2000230c
 801b3a8:	20002308 	.word	0x20002308
 801b3ac:	e000ed04 	.word	0xe000ed04

0801b3b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b3b0:	b480      	push	{r7}
 801b3b2:	b083      	sub	sp, #12
 801b3b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b3b6:	4b05      	ldr	r3, [pc, #20]	; (801b3cc <xTaskGetTickCount+0x1c>)
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b3bc:	687b      	ldr	r3, [r7, #4]
}
 801b3be:	4618      	mov	r0, r3
 801b3c0:	370c      	adds	r7, #12
 801b3c2:	46bd      	mov	sp, r7
 801b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3c8:	4770      	bx	lr
 801b3ca:	bf00      	nop
 801b3cc:	200022fc 	.word	0x200022fc

0801b3d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b086      	sub	sp, #24
 801b3d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b3da:	4b4f      	ldr	r3, [pc, #316]	; (801b518 <xTaskIncrementTick+0x148>)
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	f040 808f 	bne.w	801b502 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b3e4:	4b4d      	ldr	r3, [pc, #308]	; (801b51c <xTaskIncrementTick+0x14c>)
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	3301      	adds	r3, #1
 801b3ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b3ec:	4a4b      	ldr	r2, [pc, #300]	; (801b51c <xTaskIncrementTick+0x14c>)
 801b3ee:	693b      	ldr	r3, [r7, #16]
 801b3f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b3f2:	693b      	ldr	r3, [r7, #16]
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d120      	bne.n	801b43a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801b3f8:	4b49      	ldr	r3, [pc, #292]	; (801b520 <xTaskIncrementTick+0x150>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d00a      	beq.n	801b418 <xTaskIncrementTick+0x48>
	__asm volatile
 801b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b406:	f383 8811 	msr	BASEPRI, r3
 801b40a:	f3bf 8f6f 	isb	sy
 801b40e:	f3bf 8f4f 	dsb	sy
 801b412:	603b      	str	r3, [r7, #0]
}
 801b414:	bf00      	nop
 801b416:	e7fe      	b.n	801b416 <xTaskIncrementTick+0x46>
 801b418:	4b41      	ldr	r3, [pc, #260]	; (801b520 <xTaskIncrementTick+0x150>)
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	60fb      	str	r3, [r7, #12]
 801b41e:	4b41      	ldr	r3, [pc, #260]	; (801b524 <xTaskIncrementTick+0x154>)
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	4a3f      	ldr	r2, [pc, #252]	; (801b520 <xTaskIncrementTick+0x150>)
 801b424:	6013      	str	r3, [r2, #0]
 801b426:	4a3f      	ldr	r2, [pc, #252]	; (801b524 <xTaskIncrementTick+0x154>)
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	6013      	str	r3, [r2, #0]
 801b42c:	4b3e      	ldr	r3, [pc, #248]	; (801b528 <xTaskIncrementTick+0x158>)
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	3301      	adds	r3, #1
 801b432:	4a3d      	ldr	r2, [pc, #244]	; (801b528 <xTaskIncrementTick+0x158>)
 801b434:	6013      	str	r3, [r2, #0]
 801b436:	f000 fadb 	bl	801b9f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b43a:	4b3c      	ldr	r3, [pc, #240]	; (801b52c <xTaskIncrementTick+0x15c>)
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	693a      	ldr	r2, [r7, #16]
 801b440:	429a      	cmp	r2, r3
 801b442:	d349      	bcc.n	801b4d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b444:	4b36      	ldr	r3, [pc, #216]	; (801b520 <xTaskIncrementTick+0x150>)
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d104      	bne.n	801b458 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b44e:	4b37      	ldr	r3, [pc, #220]	; (801b52c <xTaskIncrementTick+0x15c>)
 801b450:	f04f 32ff 	mov.w	r2, #4294967295
 801b454:	601a      	str	r2, [r3, #0]
					break;
 801b456:	e03f      	b.n	801b4d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b458:	4b31      	ldr	r3, [pc, #196]	; (801b520 <xTaskIncrementTick+0x150>)
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	68db      	ldr	r3, [r3, #12]
 801b45e:	68db      	ldr	r3, [r3, #12]
 801b460:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b462:	68bb      	ldr	r3, [r7, #8]
 801b464:	685b      	ldr	r3, [r3, #4]
 801b466:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b468:	693a      	ldr	r2, [r7, #16]
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	429a      	cmp	r2, r3
 801b46e:	d203      	bcs.n	801b478 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b470:	4a2e      	ldr	r2, [pc, #184]	; (801b52c <xTaskIncrementTick+0x15c>)
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b476:	e02f      	b.n	801b4d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b478:	68bb      	ldr	r3, [r7, #8]
 801b47a:	3304      	adds	r3, #4
 801b47c:	4618      	mov	r0, r3
 801b47e:	f7fe fc0d 	bl	8019c9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b482:	68bb      	ldr	r3, [r7, #8]
 801b484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b486:	2b00      	cmp	r3, #0
 801b488:	d004      	beq.n	801b494 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b48a:	68bb      	ldr	r3, [r7, #8]
 801b48c:	3318      	adds	r3, #24
 801b48e:	4618      	mov	r0, r3
 801b490:	f7fe fc04 	bl	8019c9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b494:	68bb      	ldr	r3, [r7, #8]
 801b496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b498:	4b25      	ldr	r3, [pc, #148]	; (801b530 <xTaskIncrementTick+0x160>)
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	429a      	cmp	r2, r3
 801b49e:	d903      	bls.n	801b4a8 <xTaskIncrementTick+0xd8>
 801b4a0:	68bb      	ldr	r3, [r7, #8]
 801b4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4a4:	4a22      	ldr	r2, [pc, #136]	; (801b530 <xTaskIncrementTick+0x160>)
 801b4a6:	6013      	str	r3, [r2, #0]
 801b4a8:	68bb      	ldr	r3, [r7, #8]
 801b4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b4ac:	4613      	mov	r3, r2
 801b4ae:	009b      	lsls	r3, r3, #2
 801b4b0:	4413      	add	r3, r2
 801b4b2:	009b      	lsls	r3, r3, #2
 801b4b4:	4a1f      	ldr	r2, [pc, #124]	; (801b534 <xTaskIncrementTick+0x164>)
 801b4b6:	441a      	add	r2, r3
 801b4b8:	68bb      	ldr	r3, [r7, #8]
 801b4ba:	3304      	adds	r3, #4
 801b4bc:	4619      	mov	r1, r3
 801b4be:	4610      	mov	r0, r2
 801b4c0:	f7fe fb8f 	bl	8019be2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b4c4:	68bb      	ldr	r3, [r7, #8]
 801b4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b4c8:	4b1b      	ldr	r3, [pc, #108]	; (801b538 <xTaskIncrementTick+0x168>)
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4ce:	429a      	cmp	r2, r3
 801b4d0:	d3b8      	bcc.n	801b444 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801b4d2:	2301      	movs	r3, #1
 801b4d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b4d6:	e7b5      	b.n	801b444 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b4d8:	4b17      	ldr	r3, [pc, #92]	; (801b538 <xTaskIncrementTick+0x168>)
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b4de:	4915      	ldr	r1, [pc, #84]	; (801b534 <xTaskIncrementTick+0x164>)
 801b4e0:	4613      	mov	r3, r2
 801b4e2:	009b      	lsls	r3, r3, #2
 801b4e4:	4413      	add	r3, r2
 801b4e6:	009b      	lsls	r3, r3, #2
 801b4e8:	440b      	add	r3, r1
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	2b01      	cmp	r3, #1
 801b4ee:	d901      	bls.n	801b4f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801b4f0:	2301      	movs	r3, #1
 801b4f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b4f4:	4b11      	ldr	r3, [pc, #68]	; (801b53c <xTaskIncrementTick+0x16c>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d007      	beq.n	801b50c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801b4fc:	2301      	movs	r3, #1
 801b4fe:	617b      	str	r3, [r7, #20]
 801b500:	e004      	b.n	801b50c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b502:	4b0f      	ldr	r3, [pc, #60]	; (801b540 <xTaskIncrementTick+0x170>)
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	3301      	adds	r3, #1
 801b508:	4a0d      	ldr	r2, [pc, #52]	; (801b540 <xTaskIncrementTick+0x170>)
 801b50a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b50c:	697b      	ldr	r3, [r7, #20]
}
 801b50e:	4618      	mov	r0, r3
 801b510:	3718      	adds	r7, #24
 801b512:	46bd      	mov	sp, r7
 801b514:	bd80      	pop	{r7, pc}
 801b516:	bf00      	nop
 801b518:	20002320 	.word	0x20002320
 801b51c:	200022fc 	.word	0x200022fc
 801b520:	200022b0 	.word	0x200022b0
 801b524:	200022b4 	.word	0x200022b4
 801b528:	20002310 	.word	0x20002310
 801b52c:	20002318 	.word	0x20002318
 801b530:	20002300 	.word	0x20002300
 801b534:	20001e28 	.word	0x20001e28
 801b538:	20001e24 	.word	0x20001e24
 801b53c:	2000230c 	.word	0x2000230c
 801b540:	20002308 	.word	0x20002308

0801b544 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b544:	b480      	push	{r7}
 801b546:	b085      	sub	sp, #20
 801b548:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b54a:	4b2a      	ldr	r3, [pc, #168]	; (801b5f4 <vTaskSwitchContext+0xb0>)
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d003      	beq.n	801b55a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b552:	4b29      	ldr	r3, [pc, #164]	; (801b5f8 <vTaskSwitchContext+0xb4>)
 801b554:	2201      	movs	r2, #1
 801b556:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b558:	e046      	b.n	801b5e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801b55a:	4b27      	ldr	r3, [pc, #156]	; (801b5f8 <vTaskSwitchContext+0xb4>)
 801b55c:	2200      	movs	r2, #0
 801b55e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b560:	4b26      	ldr	r3, [pc, #152]	; (801b5fc <vTaskSwitchContext+0xb8>)
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	60fb      	str	r3, [r7, #12]
 801b566:	e010      	b.n	801b58a <vTaskSwitchContext+0x46>
 801b568:	68fb      	ldr	r3, [r7, #12]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d10a      	bne.n	801b584 <vTaskSwitchContext+0x40>
	__asm volatile
 801b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b572:	f383 8811 	msr	BASEPRI, r3
 801b576:	f3bf 8f6f 	isb	sy
 801b57a:	f3bf 8f4f 	dsb	sy
 801b57e:	607b      	str	r3, [r7, #4]
}
 801b580:	bf00      	nop
 801b582:	e7fe      	b.n	801b582 <vTaskSwitchContext+0x3e>
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	3b01      	subs	r3, #1
 801b588:	60fb      	str	r3, [r7, #12]
 801b58a:	491d      	ldr	r1, [pc, #116]	; (801b600 <vTaskSwitchContext+0xbc>)
 801b58c:	68fa      	ldr	r2, [r7, #12]
 801b58e:	4613      	mov	r3, r2
 801b590:	009b      	lsls	r3, r3, #2
 801b592:	4413      	add	r3, r2
 801b594:	009b      	lsls	r3, r3, #2
 801b596:	440b      	add	r3, r1
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d0e4      	beq.n	801b568 <vTaskSwitchContext+0x24>
 801b59e:	68fa      	ldr	r2, [r7, #12]
 801b5a0:	4613      	mov	r3, r2
 801b5a2:	009b      	lsls	r3, r3, #2
 801b5a4:	4413      	add	r3, r2
 801b5a6:	009b      	lsls	r3, r3, #2
 801b5a8:	4a15      	ldr	r2, [pc, #84]	; (801b600 <vTaskSwitchContext+0xbc>)
 801b5aa:	4413      	add	r3, r2
 801b5ac:	60bb      	str	r3, [r7, #8]
 801b5ae:	68bb      	ldr	r3, [r7, #8]
 801b5b0:	685b      	ldr	r3, [r3, #4]
 801b5b2:	685a      	ldr	r2, [r3, #4]
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	605a      	str	r2, [r3, #4]
 801b5b8:	68bb      	ldr	r3, [r7, #8]
 801b5ba:	685a      	ldr	r2, [r3, #4]
 801b5bc:	68bb      	ldr	r3, [r7, #8]
 801b5be:	3308      	adds	r3, #8
 801b5c0:	429a      	cmp	r2, r3
 801b5c2:	d104      	bne.n	801b5ce <vTaskSwitchContext+0x8a>
 801b5c4:	68bb      	ldr	r3, [r7, #8]
 801b5c6:	685b      	ldr	r3, [r3, #4]
 801b5c8:	685a      	ldr	r2, [r3, #4]
 801b5ca:	68bb      	ldr	r3, [r7, #8]
 801b5cc:	605a      	str	r2, [r3, #4]
 801b5ce:	68bb      	ldr	r3, [r7, #8]
 801b5d0:	685b      	ldr	r3, [r3, #4]
 801b5d2:	68db      	ldr	r3, [r3, #12]
 801b5d4:	4a0b      	ldr	r2, [pc, #44]	; (801b604 <vTaskSwitchContext+0xc0>)
 801b5d6:	6013      	str	r3, [r2, #0]
 801b5d8:	4a08      	ldr	r2, [pc, #32]	; (801b5fc <vTaskSwitchContext+0xb8>)
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b5de:	4b09      	ldr	r3, [pc, #36]	; (801b604 <vTaskSwitchContext+0xc0>)
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	3354      	adds	r3, #84	; 0x54
 801b5e4:	4a08      	ldr	r2, [pc, #32]	; (801b608 <vTaskSwitchContext+0xc4>)
 801b5e6:	6013      	str	r3, [r2, #0]
}
 801b5e8:	bf00      	nop
 801b5ea:	3714      	adds	r7, #20
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f2:	4770      	bx	lr
 801b5f4:	20002320 	.word	0x20002320
 801b5f8:	2000230c 	.word	0x2000230c
 801b5fc:	20002300 	.word	0x20002300
 801b600:	20001e28 	.word	0x20001e28
 801b604:	20001e24 	.word	0x20001e24
 801b608:	2000028c 	.word	0x2000028c

0801b60c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b084      	sub	sp, #16
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
 801b614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d10a      	bne.n	801b632 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b620:	f383 8811 	msr	BASEPRI, r3
 801b624:	f3bf 8f6f 	isb	sy
 801b628:	f3bf 8f4f 	dsb	sy
 801b62c:	60fb      	str	r3, [r7, #12]
}
 801b62e:	bf00      	nop
 801b630:	e7fe      	b.n	801b630 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b632:	4b07      	ldr	r3, [pc, #28]	; (801b650 <vTaskPlaceOnEventList+0x44>)
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	3318      	adds	r3, #24
 801b638:	4619      	mov	r1, r3
 801b63a:	6878      	ldr	r0, [r7, #4]
 801b63c:	f7fe faf5 	bl	8019c2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b640:	2101      	movs	r1, #1
 801b642:	6838      	ldr	r0, [r7, #0]
 801b644:	f000 fb8e 	bl	801bd64 <prvAddCurrentTaskToDelayedList>
}
 801b648:	bf00      	nop
 801b64a:	3710      	adds	r7, #16
 801b64c:	46bd      	mov	sp, r7
 801b64e:	bd80      	pop	{r7, pc}
 801b650:	20001e24 	.word	0x20001e24

0801b654 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b654:	b580      	push	{r7, lr}
 801b656:	b086      	sub	sp, #24
 801b658:	af00      	add	r7, sp, #0
 801b65a:	60f8      	str	r0, [r7, #12]
 801b65c:	60b9      	str	r1, [r7, #8]
 801b65e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	2b00      	cmp	r3, #0
 801b664:	d10a      	bne.n	801b67c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801b666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b66a:	f383 8811 	msr	BASEPRI, r3
 801b66e:	f3bf 8f6f 	isb	sy
 801b672:	f3bf 8f4f 	dsb	sy
 801b676:	617b      	str	r3, [r7, #20]
}
 801b678:	bf00      	nop
 801b67a:	e7fe      	b.n	801b67a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b67c:	4b0a      	ldr	r3, [pc, #40]	; (801b6a8 <vTaskPlaceOnEventListRestricted+0x54>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	3318      	adds	r3, #24
 801b682:	4619      	mov	r1, r3
 801b684:	68f8      	ldr	r0, [r7, #12]
 801b686:	f7fe faac 	bl	8019be2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d002      	beq.n	801b696 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801b690:	f04f 33ff 	mov.w	r3, #4294967295
 801b694:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b696:	6879      	ldr	r1, [r7, #4]
 801b698:	68b8      	ldr	r0, [r7, #8]
 801b69a:	f000 fb63 	bl	801bd64 <prvAddCurrentTaskToDelayedList>
	}
 801b69e:	bf00      	nop
 801b6a0:	3718      	adds	r7, #24
 801b6a2:	46bd      	mov	sp, r7
 801b6a4:	bd80      	pop	{r7, pc}
 801b6a6:	bf00      	nop
 801b6a8:	20001e24 	.word	0x20001e24

0801b6ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	b086      	sub	sp, #24
 801b6b0:	af00      	add	r7, sp, #0
 801b6b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	68db      	ldr	r3, [r3, #12]
 801b6b8:	68db      	ldr	r3, [r3, #12]
 801b6ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b6bc:	693b      	ldr	r3, [r7, #16]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d10a      	bne.n	801b6d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6c6:	f383 8811 	msr	BASEPRI, r3
 801b6ca:	f3bf 8f6f 	isb	sy
 801b6ce:	f3bf 8f4f 	dsb	sy
 801b6d2:	60fb      	str	r3, [r7, #12]
}
 801b6d4:	bf00      	nop
 801b6d6:	e7fe      	b.n	801b6d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b6d8:	693b      	ldr	r3, [r7, #16]
 801b6da:	3318      	adds	r3, #24
 801b6dc:	4618      	mov	r0, r3
 801b6de:	f7fe fadd 	bl	8019c9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b6e2:	4b1e      	ldr	r3, [pc, #120]	; (801b75c <xTaskRemoveFromEventList+0xb0>)
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d11d      	bne.n	801b726 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b6ea:	693b      	ldr	r3, [r7, #16]
 801b6ec:	3304      	adds	r3, #4
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	f7fe fad4 	bl	8019c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b6f4:	693b      	ldr	r3, [r7, #16]
 801b6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6f8:	4b19      	ldr	r3, [pc, #100]	; (801b760 <xTaskRemoveFromEventList+0xb4>)
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	429a      	cmp	r2, r3
 801b6fe:	d903      	bls.n	801b708 <xTaskRemoveFromEventList+0x5c>
 801b700:	693b      	ldr	r3, [r7, #16]
 801b702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b704:	4a16      	ldr	r2, [pc, #88]	; (801b760 <xTaskRemoveFromEventList+0xb4>)
 801b706:	6013      	str	r3, [r2, #0]
 801b708:	693b      	ldr	r3, [r7, #16]
 801b70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b70c:	4613      	mov	r3, r2
 801b70e:	009b      	lsls	r3, r3, #2
 801b710:	4413      	add	r3, r2
 801b712:	009b      	lsls	r3, r3, #2
 801b714:	4a13      	ldr	r2, [pc, #76]	; (801b764 <xTaskRemoveFromEventList+0xb8>)
 801b716:	441a      	add	r2, r3
 801b718:	693b      	ldr	r3, [r7, #16]
 801b71a:	3304      	adds	r3, #4
 801b71c:	4619      	mov	r1, r3
 801b71e:	4610      	mov	r0, r2
 801b720:	f7fe fa5f 	bl	8019be2 <vListInsertEnd>
 801b724:	e005      	b.n	801b732 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b726:	693b      	ldr	r3, [r7, #16]
 801b728:	3318      	adds	r3, #24
 801b72a:	4619      	mov	r1, r3
 801b72c:	480e      	ldr	r0, [pc, #56]	; (801b768 <xTaskRemoveFromEventList+0xbc>)
 801b72e:	f7fe fa58 	bl	8019be2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b732:	693b      	ldr	r3, [r7, #16]
 801b734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b736:	4b0d      	ldr	r3, [pc, #52]	; (801b76c <xTaskRemoveFromEventList+0xc0>)
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b73c:	429a      	cmp	r2, r3
 801b73e:	d905      	bls.n	801b74c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b740:	2301      	movs	r3, #1
 801b742:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b744:	4b0a      	ldr	r3, [pc, #40]	; (801b770 <xTaskRemoveFromEventList+0xc4>)
 801b746:	2201      	movs	r2, #1
 801b748:	601a      	str	r2, [r3, #0]
 801b74a:	e001      	b.n	801b750 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801b74c:	2300      	movs	r3, #0
 801b74e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b750:	697b      	ldr	r3, [r7, #20]
}
 801b752:	4618      	mov	r0, r3
 801b754:	3718      	adds	r7, #24
 801b756:	46bd      	mov	sp, r7
 801b758:	bd80      	pop	{r7, pc}
 801b75a:	bf00      	nop
 801b75c:	20002320 	.word	0x20002320
 801b760:	20002300 	.word	0x20002300
 801b764:	20001e28 	.word	0x20001e28
 801b768:	200022b8 	.word	0x200022b8
 801b76c:	20001e24 	.word	0x20001e24
 801b770:	2000230c 	.word	0x2000230c

0801b774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b774:	b480      	push	{r7}
 801b776:	b083      	sub	sp, #12
 801b778:	af00      	add	r7, sp, #0
 801b77a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b77c:	4b06      	ldr	r3, [pc, #24]	; (801b798 <vTaskInternalSetTimeOutState+0x24>)
 801b77e:	681a      	ldr	r2, [r3, #0]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b784:	4b05      	ldr	r3, [pc, #20]	; (801b79c <vTaskInternalSetTimeOutState+0x28>)
 801b786:	681a      	ldr	r2, [r3, #0]
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	605a      	str	r2, [r3, #4]
}
 801b78c:	bf00      	nop
 801b78e:	370c      	adds	r7, #12
 801b790:	46bd      	mov	sp, r7
 801b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b796:	4770      	bx	lr
 801b798:	20002310 	.word	0x20002310
 801b79c:	200022fc 	.word	0x200022fc

0801b7a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b7a0:	b580      	push	{r7, lr}
 801b7a2:	b088      	sub	sp, #32
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	6078      	str	r0, [r7, #4]
 801b7a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d10a      	bne.n	801b7c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7b4:	f383 8811 	msr	BASEPRI, r3
 801b7b8:	f3bf 8f6f 	isb	sy
 801b7bc:	f3bf 8f4f 	dsb	sy
 801b7c0:	613b      	str	r3, [r7, #16]
}
 801b7c2:	bf00      	nop
 801b7c4:	e7fe      	b.n	801b7c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b7c6:	683b      	ldr	r3, [r7, #0]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d10a      	bne.n	801b7e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7d0:	f383 8811 	msr	BASEPRI, r3
 801b7d4:	f3bf 8f6f 	isb	sy
 801b7d8:	f3bf 8f4f 	dsb	sy
 801b7dc:	60fb      	str	r3, [r7, #12]
}
 801b7de:	bf00      	nop
 801b7e0:	e7fe      	b.n	801b7e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801b7e2:	f000 ff8f 	bl	801c704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b7e6:	4b1d      	ldr	r3, [pc, #116]	; (801b85c <xTaskCheckForTimeOut+0xbc>)
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	685b      	ldr	r3, [r3, #4]
 801b7f0:	69ba      	ldr	r2, [r7, #24]
 801b7f2:	1ad3      	subs	r3, r2, r3
 801b7f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b7f6:	683b      	ldr	r3, [r7, #0]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7fe:	d102      	bne.n	801b806 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b800:	2300      	movs	r3, #0
 801b802:	61fb      	str	r3, [r7, #28]
 801b804:	e023      	b.n	801b84e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	681a      	ldr	r2, [r3, #0]
 801b80a:	4b15      	ldr	r3, [pc, #84]	; (801b860 <xTaskCheckForTimeOut+0xc0>)
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	429a      	cmp	r2, r3
 801b810:	d007      	beq.n	801b822 <xTaskCheckForTimeOut+0x82>
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	685b      	ldr	r3, [r3, #4]
 801b816:	69ba      	ldr	r2, [r7, #24]
 801b818:	429a      	cmp	r2, r3
 801b81a:	d302      	bcc.n	801b822 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b81c:	2301      	movs	r3, #1
 801b81e:	61fb      	str	r3, [r7, #28]
 801b820:	e015      	b.n	801b84e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b822:	683b      	ldr	r3, [r7, #0]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	697a      	ldr	r2, [r7, #20]
 801b828:	429a      	cmp	r2, r3
 801b82a:	d20b      	bcs.n	801b844 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b82c:	683b      	ldr	r3, [r7, #0]
 801b82e:	681a      	ldr	r2, [r3, #0]
 801b830:	697b      	ldr	r3, [r7, #20]
 801b832:	1ad2      	subs	r2, r2, r3
 801b834:	683b      	ldr	r3, [r7, #0]
 801b836:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b838:	6878      	ldr	r0, [r7, #4]
 801b83a:	f7ff ff9b 	bl	801b774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b83e:	2300      	movs	r3, #0
 801b840:	61fb      	str	r3, [r7, #28]
 801b842:	e004      	b.n	801b84e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801b844:	683b      	ldr	r3, [r7, #0]
 801b846:	2200      	movs	r2, #0
 801b848:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b84a:	2301      	movs	r3, #1
 801b84c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b84e:	f000 ff89 	bl	801c764 <vPortExitCritical>

	return xReturn;
 801b852:	69fb      	ldr	r3, [r7, #28]
}
 801b854:	4618      	mov	r0, r3
 801b856:	3720      	adds	r7, #32
 801b858:	46bd      	mov	sp, r7
 801b85a:	bd80      	pop	{r7, pc}
 801b85c:	200022fc 	.word	0x200022fc
 801b860:	20002310 	.word	0x20002310

0801b864 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b864:	b480      	push	{r7}
 801b866:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b868:	4b03      	ldr	r3, [pc, #12]	; (801b878 <vTaskMissedYield+0x14>)
 801b86a:	2201      	movs	r2, #1
 801b86c:	601a      	str	r2, [r3, #0]
}
 801b86e:	bf00      	nop
 801b870:	46bd      	mov	sp, r7
 801b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b876:	4770      	bx	lr
 801b878:	2000230c 	.word	0x2000230c

0801b87c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b87c:	b580      	push	{r7, lr}
 801b87e:	b082      	sub	sp, #8
 801b880:	af00      	add	r7, sp, #0
 801b882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b884:	f000 f852 	bl	801b92c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b888:	4b06      	ldr	r3, [pc, #24]	; (801b8a4 <prvIdleTask+0x28>)
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	2b01      	cmp	r3, #1
 801b88e:	d9f9      	bls.n	801b884 <prvIdleTask+0x8>
			{
				taskYIELD();
 801b890:	4b05      	ldr	r3, [pc, #20]	; (801b8a8 <prvIdleTask+0x2c>)
 801b892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b896:	601a      	str	r2, [r3, #0]
 801b898:	f3bf 8f4f 	dsb	sy
 801b89c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b8a0:	e7f0      	b.n	801b884 <prvIdleTask+0x8>
 801b8a2:	bf00      	nop
 801b8a4:	20001e28 	.word	0x20001e28
 801b8a8:	e000ed04 	.word	0xe000ed04

0801b8ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b082      	sub	sp, #8
 801b8b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	607b      	str	r3, [r7, #4]
 801b8b6:	e00c      	b.n	801b8d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b8b8:	687a      	ldr	r2, [r7, #4]
 801b8ba:	4613      	mov	r3, r2
 801b8bc:	009b      	lsls	r3, r3, #2
 801b8be:	4413      	add	r3, r2
 801b8c0:	009b      	lsls	r3, r3, #2
 801b8c2:	4a12      	ldr	r2, [pc, #72]	; (801b90c <prvInitialiseTaskLists+0x60>)
 801b8c4:	4413      	add	r3, r2
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	f7fe f95e 	bl	8019b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	3301      	adds	r3, #1
 801b8d0:	607b      	str	r3, [r7, #4]
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	2b37      	cmp	r3, #55	; 0x37
 801b8d6:	d9ef      	bls.n	801b8b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b8d8:	480d      	ldr	r0, [pc, #52]	; (801b910 <prvInitialiseTaskLists+0x64>)
 801b8da:	f7fe f955 	bl	8019b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b8de:	480d      	ldr	r0, [pc, #52]	; (801b914 <prvInitialiseTaskLists+0x68>)
 801b8e0:	f7fe f952 	bl	8019b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b8e4:	480c      	ldr	r0, [pc, #48]	; (801b918 <prvInitialiseTaskLists+0x6c>)
 801b8e6:	f7fe f94f 	bl	8019b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b8ea:	480c      	ldr	r0, [pc, #48]	; (801b91c <prvInitialiseTaskLists+0x70>)
 801b8ec:	f7fe f94c 	bl	8019b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b8f0:	480b      	ldr	r0, [pc, #44]	; (801b920 <prvInitialiseTaskLists+0x74>)
 801b8f2:	f7fe f949 	bl	8019b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b8f6:	4b0b      	ldr	r3, [pc, #44]	; (801b924 <prvInitialiseTaskLists+0x78>)
 801b8f8:	4a05      	ldr	r2, [pc, #20]	; (801b910 <prvInitialiseTaskLists+0x64>)
 801b8fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b8fc:	4b0a      	ldr	r3, [pc, #40]	; (801b928 <prvInitialiseTaskLists+0x7c>)
 801b8fe:	4a05      	ldr	r2, [pc, #20]	; (801b914 <prvInitialiseTaskLists+0x68>)
 801b900:	601a      	str	r2, [r3, #0]
}
 801b902:	bf00      	nop
 801b904:	3708      	adds	r7, #8
 801b906:	46bd      	mov	sp, r7
 801b908:	bd80      	pop	{r7, pc}
 801b90a:	bf00      	nop
 801b90c:	20001e28 	.word	0x20001e28
 801b910:	20002288 	.word	0x20002288
 801b914:	2000229c 	.word	0x2000229c
 801b918:	200022b8 	.word	0x200022b8
 801b91c:	200022cc 	.word	0x200022cc
 801b920:	200022e4 	.word	0x200022e4
 801b924:	200022b0 	.word	0x200022b0
 801b928:	200022b4 	.word	0x200022b4

0801b92c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b92c:	b580      	push	{r7, lr}
 801b92e:	b082      	sub	sp, #8
 801b930:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b932:	e019      	b.n	801b968 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b934:	f000 fee6 	bl	801c704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b938:	4b10      	ldr	r3, [pc, #64]	; (801b97c <prvCheckTasksWaitingTermination+0x50>)
 801b93a:	68db      	ldr	r3, [r3, #12]
 801b93c:	68db      	ldr	r3, [r3, #12]
 801b93e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	3304      	adds	r3, #4
 801b944:	4618      	mov	r0, r3
 801b946:	f7fe f9a9 	bl	8019c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b94a:	4b0d      	ldr	r3, [pc, #52]	; (801b980 <prvCheckTasksWaitingTermination+0x54>)
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	3b01      	subs	r3, #1
 801b950:	4a0b      	ldr	r2, [pc, #44]	; (801b980 <prvCheckTasksWaitingTermination+0x54>)
 801b952:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b954:	4b0b      	ldr	r3, [pc, #44]	; (801b984 <prvCheckTasksWaitingTermination+0x58>)
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	3b01      	subs	r3, #1
 801b95a:	4a0a      	ldr	r2, [pc, #40]	; (801b984 <prvCheckTasksWaitingTermination+0x58>)
 801b95c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b95e:	f000 ff01 	bl	801c764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b962:	6878      	ldr	r0, [r7, #4]
 801b964:	f000 f810 	bl	801b988 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b968:	4b06      	ldr	r3, [pc, #24]	; (801b984 <prvCheckTasksWaitingTermination+0x58>)
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	d1e1      	bne.n	801b934 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b970:	bf00      	nop
 801b972:	bf00      	nop
 801b974:	3708      	adds	r7, #8
 801b976:	46bd      	mov	sp, r7
 801b978:	bd80      	pop	{r7, pc}
 801b97a:	bf00      	nop
 801b97c:	200022cc 	.word	0x200022cc
 801b980:	200022f8 	.word	0x200022f8
 801b984:	200022e0 	.word	0x200022e0

0801b988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b988:	b580      	push	{r7, lr}
 801b98a:	b084      	sub	sp, #16
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	3354      	adds	r3, #84	; 0x54
 801b994:	4618      	mov	r0, r3
 801b996:	f003 fab5 	bl	801ef04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d108      	bne.n	801b9b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9a8:	4618      	mov	r0, r3
 801b9aa:	f001 f899 	bl	801cae0 <vPortFree>
				vPortFree( pxTCB );
 801b9ae:	6878      	ldr	r0, [r7, #4]
 801b9b0:	f001 f896 	bl	801cae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b9b4:	e018      	b.n	801b9e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801b9bc:	2b01      	cmp	r3, #1
 801b9be:	d103      	bne.n	801b9c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801b9c0:	6878      	ldr	r0, [r7, #4]
 801b9c2:	f001 f88d 	bl	801cae0 <vPortFree>
	}
 801b9c6:	e00f      	b.n	801b9e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801b9ce:	2b02      	cmp	r3, #2
 801b9d0:	d00a      	beq.n	801b9e8 <prvDeleteTCB+0x60>
	__asm volatile
 801b9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9d6:	f383 8811 	msr	BASEPRI, r3
 801b9da:	f3bf 8f6f 	isb	sy
 801b9de:	f3bf 8f4f 	dsb	sy
 801b9e2:	60fb      	str	r3, [r7, #12]
}
 801b9e4:	bf00      	nop
 801b9e6:	e7fe      	b.n	801b9e6 <prvDeleteTCB+0x5e>
	}
 801b9e8:	bf00      	nop
 801b9ea:	3710      	adds	r7, #16
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	bd80      	pop	{r7, pc}

0801b9f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b9f0:	b480      	push	{r7}
 801b9f2:	b083      	sub	sp, #12
 801b9f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b9f6:	4b0c      	ldr	r3, [pc, #48]	; (801ba28 <prvResetNextTaskUnblockTime+0x38>)
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d104      	bne.n	801ba0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801ba00:	4b0a      	ldr	r3, [pc, #40]	; (801ba2c <prvResetNextTaskUnblockTime+0x3c>)
 801ba02:	f04f 32ff 	mov.w	r2, #4294967295
 801ba06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801ba08:	e008      	b.n	801ba1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ba0a:	4b07      	ldr	r3, [pc, #28]	; (801ba28 <prvResetNextTaskUnblockTime+0x38>)
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	68db      	ldr	r3, [r3, #12]
 801ba10:	68db      	ldr	r3, [r3, #12]
 801ba12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	685b      	ldr	r3, [r3, #4]
 801ba18:	4a04      	ldr	r2, [pc, #16]	; (801ba2c <prvResetNextTaskUnblockTime+0x3c>)
 801ba1a:	6013      	str	r3, [r2, #0]
}
 801ba1c:	bf00      	nop
 801ba1e:	370c      	adds	r7, #12
 801ba20:	46bd      	mov	sp, r7
 801ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba26:	4770      	bx	lr
 801ba28:	200022b0 	.word	0x200022b0
 801ba2c:	20002318 	.word	0x20002318

0801ba30 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801ba30:	b480      	push	{r7}
 801ba32:	b083      	sub	sp, #12
 801ba34:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801ba36:	4b05      	ldr	r3, [pc, #20]	; (801ba4c <xTaskGetCurrentTaskHandle+0x1c>)
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801ba3c:	687b      	ldr	r3, [r7, #4]
	}
 801ba3e:	4618      	mov	r0, r3
 801ba40:	370c      	adds	r7, #12
 801ba42:	46bd      	mov	sp, r7
 801ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba48:	4770      	bx	lr
 801ba4a:	bf00      	nop
 801ba4c:	20001e24 	.word	0x20001e24

0801ba50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801ba50:	b480      	push	{r7}
 801ba52:	b083      	sub	sp, #12
 801ba54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801ba56:	4b0b      	ldr	r3, [pc, #44]	; (801ba84 <xTaskGetSchedulerState+0x34>)
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d102      	bne.n	801ba64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801ba5e:	2301      	movs	r3, #1
 801ba60:	607b      	str	r3, [r7, #4]
 801ba62:	e008      	b.n	801ba76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ba64:	4b08      	ldr	r3, [pc, #32]	; (801ba88 <xTaskGetSchedulerState+0x38>)
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d102      	bne.n	801ba72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801ba6c:	2302      	movs	r3, #2
 801ba6e:	607b      	str	r3, [r7, #4]
 801ba70:	e001      	b.n	801ba76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801ba72:	2300      	movs	r3, #0
 801ba74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801ba76:	687b      	ldr	r3, [r7, #4]
	}
 801ba78:	4618      	mov	r0, r3
 801ba7a:	370c      	adds	r7, #12
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba82:	4770      	bx	lr
 801ba84:	20002304 	.word	0x20002304
 801ba88:	20002320 	.word	0x20002320

0801ba8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801ba8c:	b580      	push	{r7, lr}
 801ba8e:	b084      	sub	sp, #16
 801ba90:	af00      	add	r7, sp, #0
 801ba92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801ba98:	2300      	movs	r3, #0
 801ba9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d051      	beq.n	801bb46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801baa2:	68bb      	ldr	r3, [r7, #8]
 801baa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801baa6:	4b2a      	ldr	r3, [pc, #168]	; (801bb50 <xTaskPriorityInherit+0xc4>)
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801baac:	429a      	cmp	r2, r3
 801baae:	d241      	bcs.n	801bb34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801bab0:	68bb      	ldr	r3, [r7, #8]
 801bab2:	699b      	ldr	r3, [r3, #24]
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	db06      	blt.n	801bac6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bab8:	4b25      	ldr	r3, [pc, #148]	; (801bb50 <xTaskPriorityInherit+0xc4>)
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801babe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801bac2:	68bb      	ldr	r3, [r7, #8]
 801bac4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	6959      	ldr	r1, [r3, #20]
 801baca:	68bb      	ldr	r3, [r7, #8]
 801bacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bace:	4613      	mov	r3, r2
 801bad0:	009b      	lsls	r3, r3, #2
 801bad2:	4413      	add	r3, r2
 801bad4:	009b      	lsls	r3, r3, #2
 801bad6:	4a1f      	ldr	r2, [pc, #124]	; (801bb54 <xTaskPriorityInherit+0xc8>)
 801bad8:	4413      	add	r3, r2
 801bada:	4299      	cmp	r1, r3
 801badc:	d122      	bne.n	801bb24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bade:	68bb      	ldr	r3, [r7, #8]
 801bae0:	3304      	adds	r3, #4
 801bae2:	4618      	mov	r0, r3
 801bae4:	f7fe f8da 	bl	8019c9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bae8:	4b19      	ldr	r3, [pc, #100]	; (801bb50 <xTaskPriorityInherit+0xc4>)
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801baee:	68bb      	ldr	r3, [r7, #8]
 801baf0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801baf2:	68bb      	ldr	r3, [r7, #8]
 801baf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801baf6:	4b18      	ldr	r3, [pc, #96]	; (801bb58 <xTaskPriorityInherit+0xcc>)
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	429a      	cmp	r2, r3
 801bafc:	d903      	bls.n	801bb06 <xTaskPriorityInherit+0x7a>
 801bafe:	68bb      	ldr	r3, [r7, #8]
 801bb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb02:	4a15      	ldr	r2, [pc, #84]	; (801bb58 <xTaskPriorityInherit+0xcc>)
 801bb04:	6013      	str	r3, [r2, #0]
 801bb06:	68bb      	ldr	r3, [r7, #8]
 801bb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb0a:	4613      	mov	r3, r2
 801bb0c:	009b      	lsls	r3, r3, #2
 801bb0e:	4413      	add	r3, r2
 801bb10:	009b      	lsls	r3, r3, #2
 801bb12:	4a10      	ldr	r2, [pc, #64]	; (801bb54 <xTaskPriorityInherit+0xc8>)
 801bb14:	441a      	add	r2, r3
 801bb16:	68bb      	ldr	r3, [r7, #8]
 801bb18:	3304      	adds	r3, #4
 801bb1a:	4619      	mov	r1, r3
 801bb1c:	4610      	mov	r0, r2
 801bb1e:	f7fe f860 	bl	8019be2 <vListInsertEnd>
 801bb22:	e004      	b.n	801bb2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bb24:	4b0a      	ldr	r3, [pc, #40]	; (801bb50 <xTaskPriorityInherit+0xc4>)
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb2a:	68bb      	ldr	r3, [r7, #8]
 801bb2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801bb2e:	2301      	movs	r3, #1
 801bb30:	60fb      	str	r3, [r7, #12]
 801bb32:	e008      	b.n	801bb46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801bb34:	68bb      	ldr	r3, [r7, #8]
 801bb36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801bb38:	4b05      	ldr	r3, [pc, #20]	; (801bb50 <xTaskPriorityInherit+0xc4>)
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb3e:	429a      	cmp	r2, r3
 801bb40:	d201      	bcs.n	801bb46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801bb42:	2301      	movs	r3, #1
 801bb44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bb46:	68fb      	ldr	r3, [r7, #12]
	}
 801bb48:	4618      	mov	r0, r3
 801bb4a:	3710      	adds	r7, #16
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}
 801bb50:	20001e24 	.word	0x20001e24
 801bb54:	20001e28 	.word	0x20001e28
 801bb58:	20002300 	.word	0x20002300

0801bb5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	b086      	sub	sp, #24
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801bb68:	2300      	movs	r3, #0
 801bb6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d056      	beq.n	801bc20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801bb72:	4b2e      	ldr	r3, [pc, #184]	; (801bc2c <xTaskPriorityDisinherit+0xd0>)
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	693a      	ldr	r2, [r7, #16]
 801bb78:	429a      	cmp	r2, r3
 801bb7a:	d00a      	beq.n	801bb92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801bb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb80:	f383 8811 	msr	BASEPRI, r3
 801bb84:	f3bf 8f6f 	isb	sy
 801bb88:	f3bf 8f4f 	dsb	sy
 801bb8c:	60fb      	str	r3, [r7, #12]
}
 801bb8e:	bf00      	nop
 801bb90:	e7fe      	b.n	801bb90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801bb92:	693b      	ldr	r3, [r7, #16]
 801bb94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d10a      	bne.n	801bbb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb9e:	f383 8811 	msr	BASEPRI, r3
 801bba2:	f3bf 8f6f 	isb	sy
 801bba6:	f3bf 8f4f 	dsb	sy
 801bbaa:	60bb      	str	r3, [r7, #8]
}
 801bbac:	bf00      	nop
 801bbae:	e7fe      	b.n	801bbae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801bbb0:	693b      	ldr	r3, [r7, #16]
 801bbb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bbb4:	1e5a      	subs	r2, r3, #1
 801bbb6:	693b      	ldr	r3, [r7, #16]
 801bbb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801bbba:	693b      	ldr	r3, [r7, #16]
 801bbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bbbe:	693b      	ldr	r3, [r7, #16]
 801bbc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bbc2:	429a      	cmp	r2, r3
 801bbc4:	d02c      	beq.n	801bc20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801bbc6:	693b      	ldr	r3, [r7, #16]
 801bbc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d128      	bne.n	801bc20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bbce:	693b      	ldr	r3, [r7, #16]
 801bbd0:	3304      	adds	r3, #4
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	f7fe f862 	bl	8019c9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801bbd8:	693b      	ldr	r3, [r7, #16]
 801bbda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801bbdc:	693b      	ldr	r3, [r7, #16]
 801bbde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bbe0:	693b      	ldr	r3, [r7, #16]
 801bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bbe4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801bbe8:	693b      	ldr	r3, [r7, #16]
 801bbea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801bbec:	693b      	ldr	r3, [r7, #16]
 801bbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bbf0:	4b0f      	ldr	r3, [pc, #60]	; (801bc30 <xTaskPriorityDisinherit+0xd4>)
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	429a      	cmp	r2, r3
 801bbf6:	d903      	bls.n	801bc00 <xTaskPriorityDisinherit+0xa4>
 801bbf8:	693b      	ldr	r3, [r7, #16]
 801bbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bbfc:	4a0c      	ldr	r2, [pc, #48]	; (801bc30 <xTaskPriorityDisinherit+0xd4>)
 801bbfe:	6013      	str	r3, [r2, #0]
 801bc00:	693b      	ldr	r3, [r7, #16]
 801bc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc04:	4613      	mov	r3, r2
 801bc06:	009b      	lsls	r3, r3, #2
 801bc08:	4413      	add	r3, r2
 801bc0a:	009b      	lsls	r3, r3, #2
 801bc0c:	4a09      	ldr	r2, [pc, #36]	; (801bc34 <xTaskPriorityDisinherit+0xd8>)
 801bc0e:	441a      	add	r2, r3
 801bc10:	693b      	ldr	r3, [r7, #16]
 801bc12:	3304      	adds	r3, #4
 801bc14:	4619      	mov	r1, r3
 801bc16:	4610      	mov	r0, r2
 801bc18:	f7fd ffe3 	bl	8019be2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801bc1c:	2301      	movs	r3, #1
 801bc1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bc20:	697b      	ldr	r3, [r7, #20]
	}
 801bc22:	4618      	mov	r0, r3
 801bc24:	3718      	adds	r7, #24
 801bc26:	46bd      	mov	sp, r7
 801bc28:	bd80      	pop	{r7, pc}
 801bc2a:	bf00      	nop
 801bc2c:	20001e24 	.word	0x20001e24
 801bc30:	20002300 	.word	0x20002300
 801bc34:	20001e28 	.word	0x20001e28

0801bc38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	b088      	sub	sp, #32
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	6078      	str	r0, [r7, #4]
 801bc40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801bc46:	2301      	movs	r3, #1
 801bc48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d06a      	beq.n	801bd26 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801bc50:	69bb      	ldr	r3, [r7, #24]
 801bc52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d10a      	bne.n	801bc6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc5c:	f383 8811 	msr	BASEPRI, r3
 801bc60:	f3bf 8f6f 	isb	sy
 801bc64:	f3bf 8f4f 	dsb	sy
 801bc68:	60fb      	str	r3, [r7, #12]
}
 801bc6a:	bf00      	nop
 801bc6c:	e7fe      	b.n	801bc6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801bc6e:	69bb      	ldr	r3, [r7, #24]
 801bc70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bc72:	683a      	ldr	r2, [r7, #0]
 801bc74:	429a      	cmp	r2, r3
 801bc76:	d902      	bls.n	801bc7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801bc78:	683b      	ldr	r3, [r7, #0]
 801bc7a:	61fb      	str	r3, [r7, #28]
 801bc7c:	e002      	b.n	801bc84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801bc7e:	69bb      	ldr	r3, [r7, #24]
 801bc80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bc82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801bc84:	69bb      	ldr	r3, [r7, #24]
 801bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc88:	69fa      	ldr	r2, [r7, #28]
 801bc8a:	429a      	cmp	r2, r3
 801bc8c:	d04b      	beq.n	801bd26 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801bc8e:	69bb      	ldr	r3, [r7, #24]
 801bc90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bc92:	697a      	ldr	r2, [r7, #20]
 801bc94:	429a      	cmp	r2, r3
 801bc96:	d146      	bne.n	801bd26 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801bc98:	4b25      	ldr	r3, [pc, #148]	; (801bd30 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	69ba      	ldr	r2, [r7, #24]
 801bc9e:	429a      	cmp	r2, r3
 801bca0:	d10a      	bne.n	801bcb8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bca6:	f383 8811 	msr	BASEPRI, r3
 801bcaa:	f3bf 8f6f 	isb	sy
 801bcae:	f3bf 8f4f 	dsb	sy
 801bcb2:	60bb      	str	r3, [r7, #8]
}
 801bcb4:	bf00      	nop
 801bcb6:	e7fe      	b.n	801bcb6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801bcb8:	69bb      	ldr	r3, [r7, #24]
 801bcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801bcbe:	69bb      	ldr	r3, [r7, #24]
 801bcc0:	69fa      	ldr	r2, [r7, #28]
 801bcc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801bcc4:	69bb      	ldr	r3, [r7, #24]
 801bcc6:	699b      	ldr	r3, [r3, #24]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	db04      	blt.n	801bcd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bccc:	69fb      	ldr	r3, [r7, #28]
 801bcce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801bcd2:	69bb      	ldr	r3, [r7, #24]
 801bcd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801bcd6:	69bb      	ldr	r3, [r7, #24]
 801bcd8:	6959      	ldr	r1, [r3, #20]
 801bcda:	693a      	ldr	r2, [r7, #16]
 801bcdc:	4613      	mov	r3, r2
 801bcde:	009b      	lsls	r3, r3, #2
 801bce0:	4413      	add	r3, r2
 801bce2:	009b      	lsls	r3, r3, #2
 801bce4:	4a13      	ldr	r2, [pc, #76]	; (801bd34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801bce6:	4413      	add	r3, r2
 801bce8:	4299      	cmp	r1, r3
 801bcea:	d11c      	bne.n	801bd26 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bcec:	69bb      	ldr	r3, [r7, #24]
 801bcee:	3304      	adds	r3, #4
 801bcf0:	4618      	mov	r0, r3
 801bcf2:	f7fd ffd3 	bl	8019c9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801bcf6:	69bb      	ldr	r3, [r7, #24]
 801bcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bcfa:	4b0f      	ldr	r3, [pc, #60]	; (801bd38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	429a      	cmp	r2, r3
 801bd00:	d903      	bls.n	801bd0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801bd02:	69bb      	ldr	r3, [r7, #24]
 801bd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd06:	4a0c      	ldr	r2, [pc, #48]	; (801bd38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801bd08:	6013      	str	r3, [r2, #0]
 801bd0a:	69bb      	ldr	r3, [r7, #24]
 801bd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd0e:	4613      	mov	r3, r2
 801bd10:	009b      	lsls	r3, r3, #2
 801bd12:	4413      	add	r3, r2
 801bd14:	009b      	lsls	r3, r3, #2
 801bd16:	4a07      	ldr	r2, [pc, #28]	; (801bd34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801bd18:	441a      	add	r2, r3
 801bd1a:	69bb      	ldr	r3, [r7, #24]
 801bd1c:	3304      	adds	r3, #4
 801bd1e:	4619      	mov	r1, r3
 801bd20:	4610      	mov	r0, r2
 801bd22:	f7fd ff5e 	bl	8019be2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801bd26:	bf00      	nop
 801bd28:	3720      	adds	r7, #32
 801bd2a:	46bd      	mov	sp, r7
 801bd2c:	bd80      	pop	{r7, pc}
 801bd2e:	bf00      	nop
 801bd30:	20001e24 	.word	0x20001e24
 801bd34:	20001e28 	.word	0x20001e28
 801bd38:	20002300 	.word	0x20002300

0801bd3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801bd3c:	b480      	push	{r7}
 801bd3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801bd40:	4b07      	ldr	r3, [pc, #28]	; (801bd60 <pvTaskIncrementMutexHeldCount+0x24>)
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d004      	beq.n	801bd52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801bd48:	4b05      	ldr	r3, [pc, #20]	; (801bd60 <pvTaskIncrementMutexHeldCount+0x24>)
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bd4e:	3201      	adds	r2, #1
 801bd50:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801bd52:	4b03      	ldr	r3, [pc, #12]	; (801bd60 <pvTaskIncrementMutexHeldCount+0x24>)
 801bd54:	681b      	ldr	r3, [r3, #0]
	}
 801bd56:	4618      	mov	r0, r3
 801bd58:	46bd      	mov	sp, r7
 801bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd5e:	4770      	bx	lr
 801bd60:	20001e24 	.word	0x20001e24

0801bd64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b084      	sub	sp, #16
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	6078      	str	r0, [r7, #4]
 801bd6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801bd6e:	4b21      	ldr	r3, [pc, #132]	; (801bdf4 <prvAddCurrentTaskToDelayedList+0x90>)
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bd74:	4b20      	ldr	r3, [pc, #128]	; (801bdf8 <prvAddCurrentTaskToDelayedList+0x94>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	3304      	adds	r3, #4
 801bd7a:	4618      	mov	r0, r3
 801bd7c:	f7fd ff8e 	bl	8019c9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd86:	d10a      	bne.n	801bd9e <prvAddCurrentTaskToDelayedList+0x3a>
 801bd88:	683b      	ldr	r3, [r7, #0]
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d007      	beq.n	801bd9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bd8e:	4b1a      	ldr	r3, [pc, #104]	; (801bdf8 <prvAddCurrentTaskToDelayedList+0x94>)
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	3304      	adds	r3, #4
 801bd94:	4619      	mov	r1, r3
 801bd96:	4819      	ldr	r0, [pc, #100]	; (801bdfc <prvAddCurrentTaskToDelayedList+0x98>)
 801bd98:	f7fd ff23 	bl	8019be2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801bd9c:	e026      	b.n	801bdec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801bd9e:	68fa      	ldr	r2, [r7, #12]
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	4413      	add	r3, r2
 801bda4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801bda6:	4b14      	ldr	r3, [pc, #80]	; (801bdf8 <prvAddCurrentTaskToDelayedList+0x94>)
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	68ba      	ldr	r2, [r7, #8]
 801bdac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bdae:	68ba      	ldr	r2, [r7, #8]
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	429a      	cmp	r2, r3
 801bdb4:	d209      	bcs.n	801bdca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bdb6:	4b12      	ldr	r3, [pc, #72]	; (801be00 <prvAddCurrentTaskToDelayedList+0x9c>)
 801bdb8:	681a      	ldr	r2, [r3, #0]
 801bdba:	4b0f      	ldr	r3, [pc, #60]	; (801bdf8 <prvAddCurrentTaskToDelayedList+0x94>)
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	3304      	adds	r3, #4
 801bdc0:	4619      	mov	r1, r3
 801bdc2:	4610      	mov	r0, r2
 801bdc4:	f7fd ff31 	bl	8019c2a <vListInsert>
}
 801bdc8:	e010      	b.n	801bdec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bdca:	4b0e      	ldr	r3, [pc, #56]	; (801be04 <prvAddCurrentTaskToDelayedList+0xa0>)
 801bdcc:	681a      	ldr	r2, [r3, #0]
 801bdce:	4b0a      	ldr	r3, [pc, #40]	; (801bdf8 <prvAddCurrentTaskToDelayedList+0x94>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	3304      	adds	r3, #4
 801bdd4:	4619      	mov	r1, r3
 801bdd6:	4610      	mov	r0, r2
 801bdd8:	f7fd ff27 	bl	8019c2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801bddc:	4b0a      	ldr	r3, [pc, #40]	; (801be08 <prvAddCurrentTaskToDelayedList+0xa4>)
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	68ba      	ldr	r2, [r7, #8]
 801bde2:	429a      	cmp	r2, r3
 801bde4:	d202      	bcs.n	801bdec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801bde6:	4a08      	ldr	r2, [pc, #32]	; (801be08 <prvAddCurrentTaskToDelayedList+0xa4>)
 801bde8:	68bb      	ldr	r3, [r7, #8]
 801bdea:	6013      	str	r3, [r2, #0]
}
 801bdec:	bf00      	nop
 801bdee:	3710      	adds	r7, #16
 801bdf0:	46bd      	mov	sp, r7
 801bdf2:	bd80      	pop	{r7, pc}
 801bdf4:	200022fc 	.word	0x200022fc
 801bdf8:	20001e24 	.word	0x20001e24
 801bdfc:	200022e4 	.word	0x200022e4
 801be00:	200022b4 	.word	0x200022b4
 801be04:	200022b0 	.word	0x200022b0
 801be08:	20002318 	.word	0x20002318

0801be0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801be0c:	b580      	push	{r7, lr}
 801be0e:	b08a      	sub	sp, #40	; 0x28
 801be10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801be12:	2300      	movs	r3, #0
 801be14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801be16:	f000 fb07 	bl	801c428 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801be1a:	4b1c      	ldr	r3, [pc, #112]	; (801be8c <xTimerCreateTimerTask+0x80>)
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d021      	beq.n	801be66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801be22:	2300      	movs	r3, #0
 801be24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801be26:	2300      	movs	r3, #0
 801be28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801be2a:	1d3a      	adds	r2, r7, #4
 801be2c:	f107 0108 	add.w	r1, r7, #8
 801be30:	f107 030c 	add.w	r3, r7, #12
 801be34:	4618      	mov	r0, r3
 801be36:	f7fd fe8d 	bl	8019b54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801be3a:	6879      	ldr	r1, [r7, #4]
 801be3c:	68bb      	ldr	r3, [r7, #8]
 801be3e:	68fa      	ldr	r2, [r7, #12]
 801be40:	9202      	str	r2, [sp, #8]
 801be42:	9301      	str	r3, [sp, #4]
 801be44:	2302      	movs	r3, #2
 801be46:	9300      	str	r3, [sp, #0]
 801be48:	2300      	movs	r3, #0
 801be4a:	460a      	mov	r2, r1
 801be4c:	4910      	ldr	r1, [pc, #64]	; (801be90 <xTimerCreateTimerTask+0x84>)
 801be4e:	4811      	ldr	r0, [pc, #68]	; (801be94 <xTimerCreateTimerTask+0x88>)
 801be50:	f7fe fece 	bl	801abf0 <xTaskCreateStatic>
 801be54:	4603      	mov	r3, r0
 801be56:	4a10      	ldr	r2, [pc, #64]	; (801be98 <xTimerCreateTimerTask+0x8c>)
 801be58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801be5a:	4b0f      	ldr	r3, [pc, #60]	; (801be98 <xTimerCreateTimerTask+0x8c>)
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d001      	beq.n	801be66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801be62:	2301      	movs	r3, #1
 801be64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	d10a      	bne.n	801be82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801be6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be70:	f383 8811 	msr	BASEPRI, r3
 801be74:	f3bf 8f6f 	isb	sy
 801be78:	f3bf 8f4f 	dsb	sy
 801be7c:	613b      	str	r3, [r7, #16]
}
 801be7e:	bf00      	nop
 801be80:	e7fe      	b.n	801be80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801be82:	697b      	ldr	r3, [r7, #20]
}
 801be84:	4618      	mov	r0, r3
 801be86:	3718      	adds	r7, #24
 801be88:	46bd      	mov	sp, r7
 801be8a:	bd80      	pop	{r7, pc}
 801be8c:	20002354 	.word	0x20002354
 801be90:	080202d0 	.word	0x080202d0
 801be94:	0801bfd1 	.word	0x0801bfd1
 801be98:	20002358 	.word	0x20002358

0801be9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b08a      	sub	sp, #40	; 0x28
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	60f8      	str	r0, [r7, #12]
 801bea4:	60b9      	str	r1, [r7, #8]
 801bea6:	607a      	str	r2, [r7, #4]
 801bea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801beaa:	2300      	movs	r3, #0
 801beac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d10a      	bne.n	801beca <xTimerGenericCommand+0x2e>
	__asm volatile
 801beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801beb8:	f383 8811 	msr	BASEPRI, r3
 801bebc:	f3bf 8f6f 	isb	sy
 801bec0:	f3bf 8f4f 	dsb	sy
 801bec4:	623b      	str	r3, [r7, #32]
}
 801bec6:	bf00      	nop
 801bec8:	e7fe      	b.n	801bec8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801beca:	4b1a      	ldr	r3, [pc, #104]	; (801bf34 <xTimerGenericCommand+0x98>)
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d02a      	beq.n	801bf28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801bed2:	68bb      	ldr	r3, [r7, #8]
 801bed4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801bede:	68bb      	ldr	r3, [r7, #8]
 801bee0:	2b05      	cmp	r3, #5
 801bee2:	dc18      	bgt.n	801bf16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801bee4:	f7ff fdb4 	bl	801ba50 <xTaskGetSchedulerState>
 801bee8:	4603      	mov	r3, r0
 801beea:	2b02      	cmp	r3, #2
 801beec:	d109      	bne.n	801bf02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801beee:	4b11      	ldr	r3, [pc, #68]	; (801bf34 <xTimerGenericCommand+0x98>)
 801bef0:	6818      	ldr	r0, [r3, #0]
 801bef2:	f107 0110 	add.w	r1, r7, #16
 801bef6:	2300      	movs	r3, #0
 801bef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801befa:	f7fe f8ed 	bl	801a0d8 <xQueueGenericSend>
 801befe:	6278      	str	r0, [r7, #36]	; 0x24
 801bf00:	e012      	b.n	801bf28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801bf02:	4b0c      	ldr	r3, [pc, #48]	; (801bf34 <xTimerGenericCommand+0x98>)
 801bf04:	6818      	ldr	r0, [r3, #0]
 801bf06:	f107 0110 	add.w	r1, r7, #16
 801bf0a:	2300      	movs	r3, #0
 801bf0c:	2200      	movs	r2, #0
 801bf0e:	f7fe f8e3 	bl	801a0d8 <xQueueGenericSend>
 801bf12:	6278      	str	r0, [r7, #36]	; 0x24
 801bf14:	e008      	b.n	801bf28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bf16:	4b07      	ldr	r3, [pc, #28]	; (801bf34 <xTimerGenericCommand+0x98>)
 801bf18:	6818      	ldr	r0, [r3, #0]
 801bf1a:	f107 0110 	add.w	r1, r7, #16
 801bf1e:	2300      	movs	r3, #0
 801bf20:	683a      	ldr	r2, [r7, #0]
 801bf22:	f7fe f9d7 	bl	801a2d4 <xQueueGenericSendFromISR>
 801bf26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	3728      	adds	r7, #40	; 0x28
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	bd80      	pop	{r7, pc}
 801bf32:	bf00      	nop
 801bf34:	20002354 	.word	0x20002354

0801bf38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b088      	sub	sp, #32
 801bf3c:	af02      	add	r7, sp, #8
 801bf3e:	6078      	str	r0, [r7, #4]
 801bf40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bf42:	4b22      	ldr	r3, [pc, #136]	; (801bfcc <prvProcessExpiredTimer+0x94>)
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	68db      	ldr	r3, [r3, #12]
 801bf48:	68db      	ldr	r3, [r3, #12]
 801bf4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bf4c:	697b      	ldr	r3, [r7, #20]
 801bf4e:	3304      	adds	r3, #4
 801bf50:	4618      	mov	r0, r3
 801bf52:	f7fd fea3 	bl	8019c9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bf56:	697b      	ldr	r3, [r7, #20]
 801bf58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bf5c:	f003 0304 	and.w	r3, r3, #4
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d022      	beq.n	801bfaa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801bf64:	697b      	ldr	r3, [r7, #20]
 801bf66:	699a      	ldr	r2, [r3, #24]
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	18d1      	adds	r1, r2, r3
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	683a      	ldr	r2, [r7, #0]
 801bf70:	6978      	ldr	r0, [r7, #20]
 801bf72:	f000 f8d1 	bl	801c118 <prvInsertTimerInActiveList>
 801bf76:	4603      	mov	r3, r0
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d01f      	beq.n	801bfbc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bf7c:	2300      	movs	r3, #0
 801bf7e:	9300      	str	r3, [sp, #0]
 801bf80:	2300      	movs	r3, #0
 801bf82:	687a      	ldr	r2, [r7, #4]
 801bf84:	2100      	movs	r1, #0
 801bf86:	6978      	ldr	r0, [r7, #20]
 801bf88:	f7ff ff88 	bl	801be9c <xTimerGenericCommand>
 801bf8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801bf8e:	693b      	ldr	r3, [r7, #16]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d113      	bne.n	801bfbc <prvProcessExpiredTimer+0x84>
	__asm volatile
 801bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf98:	f383 8811 	msr	BASEPRI, r3
 801bf9c:	f3bf 8f6f 	isb	sy
 801bfa0:	f3bf 8f4f 	dsb	sy
 801bfa4:	60fb      	str	r3, [r7, #12]
}
 801bfa6:	bf00      	nop
 801bfa8:	e7fe      	b.n	801bfa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bfaa:	697b      	ldr	r3, [r7, #20]
 801bfac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bfb0:	f023 0301 	bic.w	r3, r3, #1
 801bfb4:	b2da      	uxtb	r2, r3
 801bfb6:	697b      	ldr	r3, [r7, #20]
 801bfb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bfbc:	697b      	ldr	r3, [r7, #20]
 801bfbe:	6a1b      	ldr	r3, [r3, #32]
 801bfc0:	6978      	ldr	r0, [r7, #20]
 801bfc2:	4798      	blx	r3
}
 801bfc4:	bf00      	nop
 801bfc6:	3718      	adds	r7, #24
 801bfc8:	46bd      	mov	sp, r7
 801bfca:	bd80      	pop	{r7, pc}
 801bfcc:	2000234c 	.word	0x2000234c

0801bfd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801bfd0:	b580      	push	{r7, lr}
 801bfd2:	b084      	sub	sp, #16
 801bfd4:	af00      	add	r7, sp, #0
 801bfd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bfd8:	f107 0308 	add.w	r3, r7, #8
 801bfdc:	4618      	mov	r0, r3
 801bfde:	f000 f857 	bl	801c090 <prvGetNextExpireTime>
 801bfe2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bfe4:	68bb      	ldr	r3, [r7, #8]
 801bfe6:	4619      	mov	r1, r3
 801bfe8:	68f8      	ldr	r0, [r7, #12]
 801bfea:	f000 f803 	bl	801bff4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801bfee:	f000 f8d5 	bl	801c19c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bff2:	e7f1      	b.n	801bfd8 <prvTimerTask+0x8>

0801bff4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b084      	sub	sp, #16
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	6078      	str	r0, [r7, #4]
 801bffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801bffe:	f7ff f92b 	bl	801b258 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c002:	f107 0308 	add.w	r3, r7, #8
 801c006:	4618      	mov	r0, r3
 801c008:	f000 f866 	bl	801c0d8 <prvSampleTimeNow>
 801c00c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801c00e:	68bb      	ldr	r3, [r7, #8]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d130      	bne.n	801c076 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801c014:	683b      	ldr	r3, [r7, #0]
 801c016:	2b00      	cmp	r3, #0
 801c018:	d10a      	bne.n	801c030 <prvProcessTimerOrBlockTask+0x3c>
 801c01a:	687a      	ldr	r2, [r7, #4]
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	429a      	cmp	r2, r3
 801c020:	d806      	bhi.n	801c030 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801c022:	f7ff f927 	bl	801b274 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801c026:	68f9      	ldr	r1, [r7, #12]
 801c028:	6878      	ldr	r0, [r7, #4]
 801c02a:	f7ff ff85 	bl	801bf38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801c02e:	e024      	b.n	801c07a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801c030:	683b      	ldr	r3, [r7, #0]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d008      	beq.n	801c048 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801c036:	4b13      	ldr	r3, [pc, #76]	; (801c084 <prvProcessTimerOrBlockTask+0x90>)
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d101      	bne.n	801c044 <prvProcessTimerOrBlockTask+0x50>
 801c040:	2301      	movs	r3, #1
 801c042:	e000      	b.n	801c046 <prvProcessTimerOrBlockTask+0x52>
 801c044:	2300      	movs	r3, #0
 801c046:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801c048:	4b0f      	ldr	r3, [pc, #60]	; (801c088 <prvProcessTimerOrBlockTask+0x94>)
 801c04a:	6818      	ldr	r0, [r3, #0]
 801c04c:	687a      	ldr	r2, [r7, #4]
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	1ad3      	subs	r3, r2, r3
 801c052:	683a      	ldr	r2, [r7, #0]
 801c054:	4619      	mov	r1, r3
 801c056:	f7fe fd97 	bl	801ab88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801c05a:	f7ff f90b 	bl	801b274 <xTaskResumeAll>
 801c05e:	4603      	mov	r3, r0
 801c060:	2b00      	cmp	r3, #0
 801c062:	d10a      	bne.n	801c07a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801c064:	4b09      	ldr	r3, [pc, #36]	; (801c08c <prvProcessTimerOrBlockTask+0x98>)
 801c066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c06a:	601a      	str	r2, [r3, #0]
 801c06c:	f3bf 8f4f 	dsb	sy
 801c070:	f3bf 8f6f 	isb	sy
}
 801c074:	e001      	b.n	801c07a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801c076:	f7ff f8fd 	bl	801b274 <xTaskResumeAll>
}
 801c07a:	bf00      	nop
 801c07c:	3710      	adds	r7, #16
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}
 801c082:	bf00      	nop
 801c084:	20002350 	.word	0x20002350
 801c088:	20002354 	.word	0x20002354
 801c08c:	e000ed04 	.word	0xe000ed04

0801c090 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801c090:	b480      	push	{r7}
 801c092:	b085      	sub	sp, #20
 801c094:	af00      	add	r7, sp, #0
 801c096:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801c098:	4b0e      	ldr	r3, [pc, #56]	; (801c0d4 <prvGetNextExpireTime+0x44>)
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d101      	bne.n	801c0a6 <prvGetNextExpireTime+0x16>
 801c0a2:	2201      	movs	r2, #1
 801c0a4:	e000      	b.n	801c0a8 <prvGetNextExpireTime+0x18>
 801c0a6:	2200      	movs	r2, #0
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d105      	bne.n	801c0c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c0b4:	4b07      	ldr	r3, [pc, #28]	; (801c0d4 <prvGetNextExpireTime+0x44>)
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	68db      	ldr	r3, [r3, #12]
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	60fb      	str	r3, [r7, #12]
 801c0be:	e001      	b.n	801c0c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801c0c0:	2300      	movs	r3, #0
 801c0c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801c0c4:	68fb      	ldr	r3, [r7, #12]
}
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	3714      	adds	r7, #20
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d0:	4770      	bx	lr
 801c0d2:	bf00      	nop
 801c0d4:	2000234c 	.word	0x2000234c

0801c0d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801c0d8:	b580      	push	{r7, lr}
 801c0da:	b084      	sub	sp, #16
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801c0e0:	f7ff f966 	bl	801b3b0 <xTaskGetTickCount>
 801c0e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801c0e6:	4b0b      	ldr	r3, [pc, #44]	; (801c114 <prvSampleTimeNow+0x3c>)
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	68fa      	ldr	r2, [r7, #12]
 801c0ec:	429a      	cmp	r2, r3
 801c0ee:	d205      	bcs.n	801c0fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801c0f0:	f000 f936 	bl	801c360 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	2201      	movs	r2, #1
 801c0f8:	601a      	str	r2, [r3, #0]
 801c0fa:	e002      	b.n	801c102 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	2200      	movs	r2, #0
 801c100:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801c102:	4a04      	ldr	r2, [pc, #16]	; (801c114 <prvSampleTimeNow+0x3c>)
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801c108:	68fb      	ldr	r3, [r7, #12]
}
 801c10a:	4618      	mov	r0, r3
 801c10c:	3710      	adds	r7, #16
 801c10e:	46bd      	mov	sp, r7
 801c110:	bd80      	pop	{r7, pc}
 801c112:	bf00      	nop
 801c114:	2000235c 	.word	0x2000235c

0801c118 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801c118:	b580      	push	{r7, lr}
 801c11a:	b086      	sub	sp, #24
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	60f8      	str	r0, [r7, #12]
 801c120:	60b9      	str	r1, [r7, #8]
 801c122:	607a      	str	r2, [r7, #4]
 801c124:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801c126:	2300      	movs	r3, #0
 801c128:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	68ba      	ldr	r2, [r7, #8]
 801c12e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c130:	68fb      	ldr	r3, [r7, #12]
 801c132:	68fa      	ldr	r2, [r7, #12]
 801c134:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801c136:	68ba      	ldr	r2, [r7, #8]
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	429a      	cmp	r2, r3
 801c13c:	d812      	bhi.n	801c164 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c13e:	687a      	ldr	r2, [r7, #4]
 801c140:	683b      	ldr	r3, [r7, #0]
 801c142:	1ad2      	subs	r2, r2, r3
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	699b      	ldr	r3, [r3, #24]
 801c148:	429a      	cmp	r2, r3
 801c14a:	d302      	bcc.n	801c152 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801c14c:	2301      	movs	r3, #1
 801c14e:	617b      	str	r3, [r7, #20]
 801c150:	e01b      	b.n	801c18a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c152:	4b10      	ldr	r3, [pc, #64]	; (801c194 <prvInsertTimerInActiveList+0x7c>)
 801c154:	681a      	ldr	r2, [r3, #0]
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	3304      	adds	r3, #4
 801c15a:	4619      	mov	r1, r3
 801c15c:	4610      	mov	r0, r2
 801c15e:	f7fd fd64 	bl	8019c2a <vListInsert>
 801c162:	e012      	b.n	801c18a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c164:	687a      	ldr	r2, [r7, #4]
 801c166:	683b      	ldr	r3, [r7, #0]
 801c168:	429a      	cmp	r2, r3
 801c16a:	d206      	bcs.n	801c17a <prvInsertTimerInActiveList+0x62>
 801c16c:	68ba      	ldr	r2, [r7, #8]
 801c16e:	683b      	ldr	r3, [r7, #0]
 801c170:	429a      	cmp	r2, r3
 801c172:	d302      	bcc.n	801c17a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c174:	2301      	movs	r3, #1
 801c176:	617b      	str	r3, [r7, #20]
 801c178:	e007      	b.n	801c18a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c17a:	4b07      	ldr	r3, [pc, #28]	; (801c198 <prvInsertTimerInActiveList+0x80>)
 801c17c:	681a      	ldr	r2, [r3, #0]
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	3304      	adds	r3, #4
 801c182:	4619      	mov	r1, r3
 801c184:	4610      	mov	r0, r2
 801c186:	f7fd fd50 	bl	8019c2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c18a:	697b      	ldr	r3, [r7, #20]
}
 801c18c:	4618      	mov	r0, r3
 801c18e:	3718      	adds	r7, #24
 801c190:	46bd      	mov	sp, r7
 801c192:	bd80      	pop	{r7, pc}
 801c194:	20002350 	.word	0x20002350
 801c198:	2000234c 	.word	0x2000234c

0801c19c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c19c:	b580      	push	{r7, lr}
 801c19e:	b08e      	sub	sp, #56	; 0x38
 801c1a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c1a2:	e0ca      	b.n	801c33a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	da18      	bge.n	801c1dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801c1aa:	1d3b      	adds	r3, r7, #4
 801c1ac:	3304      	adds	r3, #4
 801c1ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801c1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d10a      	bne.n	801c1cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 801c1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c1ba:	f383 8811 	msr	BASEPRI, r3
 801c1be:	f3bf 8f6f 	isb	sy
 801c1c2:	f3bf 8f4f 	dsb	sy
 801c1c6:	61fb      	str	r3, [r7, #28]
}
 801c1c8:	bf00      	nop
 801c1ca:	e7fe      	b.n	801c1ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801c1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c1d2:	6850      	ldr	r0, [r2, #4]
 801c1d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c1d6:	6892      	ldr	r2, [r2, #8]
 801c1d8:	4611      	mov	r1, r2
 801c1da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	f2c0 80ab 	blt.w	801c33a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1ea:	695b      	ldr	r3, [r3, #20]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d004      	beq.n	801c1fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1f2:	3304      	adds	r3, #4
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	f7fd fd51 	bl	8019c9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c1fa:	463b      	mov	r3, r7
 801c1fc:	4618      	mov	r0, r3
 801c1fe:	f7ff ff6b 	bl	801c0d8 <prvSampleTimeNow>
 801c202:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	2b09      	cmp	r3, #9
 801c208:	f200 8096 	bhi.w	801c338 <prvProcessReceivedCommands+0x19c>
 801c20c:	a201      	add	r2, pc, #4	; (adr r2, 801c214 <prvProcessReceivedCommands+0x78>)
 801c20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c212:	bf00      	nop
 801c214:	0801c23d 	.word	0x0801c23d
 801c218:	0801c23d 	.word	0x0801c23d
 801c21c:	0801c23d 	.word	0x0801c23d
 801c220:	0801c2b1 	.word	0x0801c2b1
 801c224:	0801c2c5 	.word	0x0801c2c5
 801c228:	0801c30f 	.word	0x0801c30f
 801c22c:	0801c23d 	.word	0x0801c23d
 801c230:	0801c23d 	.word	0x0801c23d
 801c234:	0801c2b1 	.word	0x0801c2b1
 801c238:	0801c2c5 	.word	0x0801c2c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c23e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c242:	f043 0301 	orr.w	r3, r3, #1
 801c246:	b2da      	uxtb	r2, r3
 801c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c24a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c24e:	68ba      	ldr	r2, [r7, #8]
 801c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c252:	699b      	ldr	r3, [r3, #24]
 801c254:	18d1      	adds	r1, r2, r3
 801c256:	68bb      	ldr	r3, [r7, #8]
 801c258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c25c:	f7ff ff5c 	bl	801c118 <prvInsertTimerInActiveList>
 801c260:	4603      	mov	r3, r0
 801c262:	2b00      	cmp	r3, #0
 801c264:	d069      	beq.n	801c33a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c268:	6a1b      	ldr	r3, [r3, #32]
 801c26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c26c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c274:	f003 0304 	and.w	r3, r3, #4
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d05e      	beq.n	801c33a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c27c:	68ba      	ldr	r2, [r7, #8]
 801c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c280:	699b      	ldr	r3, [r3, #24]
 801c282:	441a      	add	r2, r3
 801c284:	2300      	movs	r3, #0
 801c286:	9300      	str	r3, [sp, #0]
 801c288:	2300      	movs	r3, #0
 801c28a:	2100      	movs	r1, #0
 801c28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c28e:	f7ff fe05 	bl	801be9c <xTimerGenericCommand>
 801c292:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801c294:	6a3b      	ldr	r3, [r7, #32]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d14f      	bne.n	801c33a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801c29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c29e:	f383 8811 	msr	BASEPRI, r3
 801c2a2:	f3bf 8f6f 	isb	sy
 801c2a6:	f3bf 8f4f 	dsb	sy
 801c2aa:	61bb      	str	r3, [r7, #24]
}
 801c2ac:	bf00      	nop
 801c2ae:	e7fe      	b.n	801c2ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c2b6:	f023 0301 	bic.w	r3, r3, #1
 801c2ba:	b2da      	uxtb	r2, r3
 801c2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801c2c2:	e03a      	b.n	801c33a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c2ca:	f043 0301 	orr.w	r3, r3, #1
 801c2ce:	b2da      	uxtb	r2, r3
 801c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c2d6:	68ba      	ldr	r2, [r7, #8]
 801c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2de:	699b      	ldr	r3, [r3, #24]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d10a      	bne.n	801c2fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2e8:	f383 8811 	msr	BASEPRI, r3
 801c2ec:	f3bf 8f6f 	isb	sy
 801c2f0:	f3bf 8f4f 	dsb	sy
 801c2f4:	617b      	str	r3, [r7, #20]
}
 801c2f6:	bf00      	nop
 801c2f8:	e7fe      	b.n	801c2f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2fc:	699a      	ldr	r2, [r3, #24]
 801c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c300:	18d1      	adds	r1, r2, r3
 801c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c308:	f7ff ff06 	bl	801c118 <prvInsertTimerInActiveList>
					break;
 801c30c:	e015      	b.n	801c33a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c314:	f003 0302 	and.w	r3, r3, #2
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d103      	bne.n	801c324 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801c31c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c31e:	f000 fbdf 	bl	801cae0 <vPortFree>
 801c322:	e00a      	b.n	801c33a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c32a:	f023 0301 	bic.w	r3, r3, #1
 801c32e:	b2da      	uxtb	r2, r3
 801c330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c336:	e000      	b.n	801c33a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801c338:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c33a:	4b08      	ldr	r3, [pc, #32]	; (801c35c <prvProcessReceivedCommands+0x1c0>)
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	1d39      	adds	r1, r7, #4
 801c340:	2200      	movs	r2, #0
 801c342:	4618      	mov	r0, r3
 801c344:	f7fe f862 	bl	801a40c <xQueueReceive>
 801c348:	4603      	mov	r3, r0
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	f47f af2a 	bne.w	801c1a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801c350:	bf00      	nop
 801c352:	bf00      	nop
 801c354:	3730      	adds	r7, #48	; 0x30
 801c356:	46bd      	mov	sp, r7
 801c358:	bd80      	pop	{r7, pc}
 801c35a:	bf00      	nop
 801c35c:	20002354 	.word	0x20002354

0801c360 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b088      	sub	sp, #32
 801c364:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c366:	e048      	b.n	801c3fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c368:	4b2d      	ldr	r3, [pc, #180]	; (801c420 <prvSwitchTimerLists+0xc0>)
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	68db      	ldr	r3, [r3, #12]
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c372:	4b2b      	ldr	r3, [pc, #172]	; (801c420 <prvSwitchTimerLists+0xc0>)
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	68db      	ldr	r3, [r3, #12]
 801c378:	68db      	ldr	r3, [r3, #12]
 801c37a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	3304      	adds	r3, #4
 801c380:	4618      	mov	r0, r3
 801c382:	f7fd fc8b 	bl	8019c9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	6a1b      	ldr	r3, [r3, #32]
 801c38a:	68f8      	ldr	r0, [r7, #12]
 801c38c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c394:	f003 0304 	and.w	r3, r3, #4
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d02e      	beq.n	801c3fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	699b      	ldr	r3, [r3, #24]
 801c3a0:	693a      	ldr	r2, [r7, #16]
 801c3a2:	4413      	add	r3, r2
 801c3a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c3a6:	68ba      	ldr	r2, [r7, #8]
 801c3a8:	693b      	ldr	r3, [r7, #16]
 801c3aa:	429a      	cmp	r2, r3
 801c3ac:	d90e      	bls.n	801c3cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	68ba      	ldr	r2, [r7, #8]
 801c3b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	68fa      	ldr	r2, [r7, #12]
 801c3b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c3ba:	4b19      	ldr	r3, [pc, #100]	; (801c420 <prvSwitchTimerLists+0xc0>)
 801c3bc:	681a      	ldr	r2, [r3, #0]
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	3304      	adds	r3, #4
 801c3c2:	4619      	mov	r1, r3
 801c3c4:	4610      	mov	r0, r2
 801c3c6:	f7fd fc30 	bl	8019c2a <vListInsert>
 801c3ca:	e016      	b.n	801c3fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c3cc:	2300      	movs	r3, #0
 801c3ce:	9300      	str	r3, [sp, #0]
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	693a      	ldr	r2, [r7, #16]
 801c3d4:	2100      	movs	r1, #0
 801c3d6:	68f8      	ldr	r0, [r7, #12]
 801c3d8:	f7ff fd60 	bl	801be9c <xTimerGenericCommand>
 801c3dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d10a      	bne.n	801c3fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 801c3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3e8:	f383 8811 	msr	BASEPRI, r3
 801c3ec:	f3bf 8f6f 	isb	sy
 801c3f0:	f3bf 8f4f 	dsb	sy
 801c3f4:	603b      	str	r3, [r7, #0]
}
 801c3f6:	bf00      	nop
 801c3f8:	e7fe      	b.n	801c3f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c3fa:	4b09      	ldr	r3, [pc, #36]	; (801c420 <prvSwitchTimerLists+0xc0>)
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	2b00      	cmp	r3, #0
 801c402:	d1b1      	bne.n	801c368 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c404:	4b06      	ldr	r3, [pc, #24]	; (801c420 <prvSwitchTimerLists+0xc0>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c40a:	4b06      	ldr	r3, [pc, #24]	; (801c424 <prvSwitchTimerLists+0xc4>)
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	4a04      	ldr	r2, [pc, #16]	; (801c420 <prvSwitchTimerLists+0xc0>)
 801c410:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c412:	4a04      	ldr	r2, [pc, #16]	; (801c424 <prvSwitchTimerLists+0xc4>)
 801c414:	697b      	ldr	r3, [r7, #20]
 801c416:	6013      	str	r3, [r2, #0]
}
 801c418:	bf00      	nop
 801c41a:	3718      	adds	r7, #24
 801c41c:	46bd      	mov	sp, r7
 801c41e:	bd80      	pop	{r7, pc}
 801c420:	2000234c 	.word	0x2000234c
 801c424:	20002350 	.word	0x20002350

0801c428 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c428:	b580      	push	{r7, lr}
 801c42a:	b082      	sub	sp, #8
 801c42c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c42e:	f000 f969 	bl	801c704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c432:	4b15      	ldr	r3, [pc, #84]	; (801c488 <prvCheckForValidListAndQueue+0x60>)
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	2b00      	cmp	r3, #0
 801c438:	d120      	bne.n	801c47c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c43a:	4814      	ldr	r0, [pc, #80]	; (801c48c <prvCheckForValidListAndQueue+0x64>)
 801c43c:	f7fd fba4 	bl	8019b88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c440:	4813      	ldr	r0, [pc, #76]	; (801c490 <prvCheckForValidListAndQueue+0x68>)
 801c442:	f7fd fba1 	bl	8019b88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c446:	4b13      	ldr	r3, [pc, #76]	; (801c494 <prvCheckForValidListAndQueue+0x6c>)
 801c448:	4a10      	ldr	r2, [pc, #64]	; (801c48c <prvCheckForValidListAndQueue+0x64>)
 801c44a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c44c:	4b12      	ldr	r3, [pc, #72]	; (801c498 <prvCheckForValidListAndQueue+0x70>)
 801c44e:	4a10      	ldr	r2, [pc, #64]	; (801c490 <prvCheckForValidListAndQueue+0x68>)
 801c450:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c452:	2300      	movs	r3, #0
 801c454:	9300      	str	r3, [sp, #0]
 801c456:	4b11      	ldr	r3, [pc, #68]	; (801c49c <prvCheckForValidListAndQueue+0x74>)
 801c458:	4a11      	ldr	r2, [pc, #68]	; (801c4a0 <prvCheckForValidListAndQueue+0x78>)
 801c45a:	2110      	movs	r1, #16
 801c45c:	200a      	movs	r0, #10
 801c45e:	f7fd fcaf 	bl	8019dc0 <xQueueGenericCreateStatic>
 801c462:	4603      	mov	r3, r0
 801c464:	4a08      	ldr	r2, [pc, #32]	; (801c488 <prvCheckForValidListAndQueue+0x60>)
 801c466:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c468:	4b07      	ldr	r3, [pc, #28]	; (801c488 <prvCheckForValidListAndQueue+0x60>)
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d005      	beq.n	801c47c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c470:	4b05      	ldr	r3, [pc, #20]	; (801c488 <prvCheckForValidListAndQueue+0x60>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	490b      	ldr	r1, [pc, #44]	; (801c4a4 <prvCheckForValidListAndQueue+0x7c>)
 801c476:	4618      	mov	r0, r3
 801c478:	f7fe fb5c 	bl	801ab34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c47c:	f000 f972 	bl	801c764 <vPortExitCritical>
}
 801c480:	bf00      	nop
 801c482:	46bd      	mov	sp, r7
 801c484:	bd80      	pop	{r7, pc}
 801c486:	bf00      	nop
 801c488:	20002354 	.word	0x20002354
 801c48c:	20002324 	.word	0x20002324
 801c490:	20002338 	.word	0x20002338
 801c494:	2000234c 	.word	0x2000234c
 801c498:	20002350 	.word	0x20002350
 801c49c:	20002400 	.word	0x20002400
 801c4a0:	20002360 	.word	0x20002360
 801c4a4:	080202d8 	.word	0x080202d8

0801c4a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c4a8:	b480      	push	{r7}
 801c4aa:	b085      	sub	sp, #20
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	60f8      	str	r0, [r7, #12]
 801c4b0:	60b9      	str	r1, [r7, #8]
 801c4b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	3b04      	subs	r3, #4
 801c4b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	3b04      	subs	r3, #4
 801c4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c4c8:	68bb      	ldr	r3, [r7, #8]
 801c4ca:	f023 0201 	bic.w	r2, r3, #1
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	3b04      	subs	r3, #4
 801c4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c4d8:	4a0c      	ldr	r2, [pc, #48]	; (801c50c <pxPortInitialiseStack+0x64>)
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	3b14      	subs	r3, #20
 801c4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c4e4:	687a      	ldr	r2, [r7, #4]
 801c4e6:	68fb      	ldr	r3, [r7, #12]
 801c4e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	3b04      	subs	r3, #4
 801c4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	f06f 0202 	mvn.w	r2, #2
 801c4f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	3b20      	subs	r3, #32
 801c4fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c4fe:	68fb      	ldr	r3, [r7, #12]
}
 801c500:	4618      	mov	r0, r3
 801c502:	3714      	adds	r7, #20
 801c504:	46bd      	mov	sp, r7
 801c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c50a:	4770      	bx	lr
 801c50c:	0801c511 	.word	0x0801c511

0801c510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c510:	b480      	push	{r7}
 801c512:	b085      	sub	sp, #20
 801c514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c516:	2300      	movs	r3, #0
 801c518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c51a:	4b12      	ldr	r3, [pc, #72]	; (801c564 <prvTaskExitError+0x54>)
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c522:	d00a      	beq.n	801c53a <prvTaskExitError+0x2a>
	__asm volatile
 801c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c528:	f383 8811 	msr	BASEPRI, r3
 801c52c:	f3bf 8f6f 	isb	sy
 801c530:	f3bf 8f4f 	dsb	sy
 801c534:	60fb      	str	r3, [r7, #12]
}
 801c536:	bf00      	nop
 801c538:	e7fe      	b.n	801c538 <prvTaskExitError+0x28>
	__asm volatile
 801c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c53e:	f383 8811 	msr	BASEPRI, r3
 801c542:	f3bf 8f6f 	isb	sy
 801c546:	f3bf 8f4f 	dsb	sy
 801c54a:	60bb      	str	r3, [r7, #8]
}
 801c54c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c54e:	bf00      	nop
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	2b00      	cmp	r3, #0
 801c554:	d0fc      	beq.n	801c550 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c556:	bf00      	nop
 801c558:	bf00      	nop
 801c55a:	3714      	adds	r7, #20
 801c55c:	46bd      	mov	sp, r7
 801c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c562:	4770      	bx	lr
 801c564:	20000124 	.word	0x20000124
	...

0801c570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c570:	4b07      	ldr	r3, [pc, #28]	; (801c590 <pxCurrentTCBConst2>)
 801c572:	6819      	ldr	r1, [r3, #0]
 801c574:	6808      	ldr	r0, [r1, #0]
 801c576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c57a:	f380 8809 	msr	PSP, r0
 801c57e:	f3bf 8f6f 	isb	sy
 801c582:	f04f 0000 	mov.w	r0, #0
 801c586:	f380 8811 	msr	BASEPRI, r0
 801c58a:	4770      	bx	lr
 801c58c:	f3af 8000 	nop.w

0801c590 <pxCurrentTCBConst2>:
 801c590:	20001e24 	.word	0x20001e24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c594:	bf00      	nop
 801c596:	bf00      	nop

0801c598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c598:	4808      	ldr	r0, [pc, #32]	; (801c5bc <prvPortStartFirstTask+0x24>)
 801c59a:	6800      	ldr	r0, [r0, #0]
 801c59c:	6800      	ldr	r0, [r0, #0]
 801c59e:	f380 8808 	msr	MSP, r0
 801c5a2:	f04f 0000 	mov.w	r0, #0
 801c5a6:	f380 8814 	msr	CONTROL, r0
 801c5aa:	b662      	cpsie	i
 801c5ac:	b661      	cpsie	f
 801c5ae:	f3bf 8f4f 	dsb	sy
 801c5b2:	f3bf 8f6f 	isb	sy
 801c5b6:	df00      	svc	0
 801c5b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c5ba:	bf00      	nop
 801c5bc:	e000ed08 	.word	0xe000ed08

0801c5c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c5c0:	b580      	push	{r7, lr}
 801c5c2:	b086      	sub	sp, #24
 801c5c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c5c6:	4b46      	ldr	r3, [pc, #280]	; (801c6e0 <xPortStartScheduler+0x120>)
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	4a46      	ldr	r2, [pc, #280]	; (801c6e4 <xPortStartScheduler+0x124>)
 801c5cc:	4293      	cmp	r3, r2
 801c5ce:	d10a      	bne.n	801c5e6 <xPortStartScheduler+0x26>
	__asm volatile
 801c5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5d4:	f383 8811 	msr	BASEPRI, r3
 801c5d8:	f3bf 8f6f 	isb	sy
 801c5dc:	f3bf 8f4f 	dsb	sy
 801c5e0:	613b      	str	r3, [r7, #16]
}
 801c5e2:	bf00      	nop
 801c5e4:	e7fe      	b.n	801c5e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c5e6:	4b3e      	ldr	r3, [pc, #248]	; (801c6e0 <xPortStartScheduler+0x120>)
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	4a3f      	ldr	r2, [pc, #252]	; (801c6e8 <xPortStartScheduler+0x128>)
 801c5ec:	4293      	cmp	r3, r2
 801c5ee:	d10a      	bne.n	801c606 <xPortStartScheduler+0x46>
	__asm volatile
 801c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5f4:	f383 8811 	msr	BASEPRI, r3
 801c5f8:	f3bf 8f6f 	isb	sy
 801c5fc:	f3bf 8f4f 	dsb	sy
 801c600:	60fb      	str	r3, [r7, #12]
}
 801c602:	bf00      	nop
 801c604:	e7fe      	b.n	801c604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c606:	4b39      	ldr	r3, [pc, #228]	; (801c6ec <xPortStartScheduler+0x12c>)
 801c608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c60a:	697b      	ldr	r3, [r7, #20]
 801c60c:	781b      	ldrb	r3, [r3, #0]
 801c60e:	b2db      	uxtb	r3, r3
 801c610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c612:	697b      	ldr	r3, [r7, #20]
 801c614:	22ff      	movs	r2, #255	; 0xff
 801c616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c618:	697b      	ldr	r3, [r7, #20]
 801c61a:	781b      	ldrb	r3, [r3, #0]
 801c61c:	b2db      	uxtb	r3, r3
 801c61e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c620:	78fb      	ldrb	r3, [r7, #3]
 801c622:	b2db      	uxtb	r3, r3
 801c624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c628:	b2da      	uxtb	r2, r3
 801c62a:	4b31      	ldr	r3, [pc, #196]	; (801c6f0 <xPortStartScheduler+0x130>)
 801c62c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c62e:	4b31      	ldr	r3, [pc, #196]	; (801c6f4 <xPortStartScheduler+0x134>)
 801c630:	2207      	movs	r2, #7
 801c632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c634:	e009      	b.n	801c64a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801c636:	4b2f      	ldr	r3, [pc, #188]	; (801c6f4 <xPortStartScheduler+0x134>)
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	3b01      	subs	r3, #1
 801c63c:	4a2d      	ldr	r2, [pc, #180]	; (801c6f4 <xPortStartScheduler+0x134>)
 801c63e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c640:	78fb      	ldrb	r3, [r7, #3]
 801c642:	b2db      	uxtb	r3, r3
 801c644:	005b      	lsls	r3, r3, #1
 801c646:	b2db      	uxtb	r3, r3
 801c648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c64a:	78fb      	ldrb	r3, [r7, #3]
 801c64c:	b2db      	uxtb	r3, r3
 801c64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c652:	2b80      	cmp	r3, #128	; 0x80
 801c654:	d0ef      	beq.n	801c636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c656:	4b27      	ldr	r3, [pc, #156]	; (801c6f4 <xPortStartScheduler+0x134>)
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	f1c3 0307 	rsb	r3, r3, #7
 801c65e:	2b04      	cmp	r3, #4
 801c660:	d00a      	beq.n	801c678 <xPortStartScheduler+0xb8>
	__asm volatile
 801c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c666:	f383 8811 	msr	BASEPRI, r3
 801c66a:	f3bf 8f6f 	isb	sy
 801c66e:	f3bf 8f4f 	dsb	sy
 801c672:	60bb      	str	r3, [r7, #8]
}
 801c674:	bf00      	nop
 801c676:	e7fe      	b.n	801c676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c678:	4b1e      	ldr	r3, [pc, #120]	; (801c6f4 <xPortStartScheduler+0x134>)
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	021b      	lsls	r3, r3, #8
 801c67e:	4a1d      	ldr	r2, [pc, #116]	; (801c6f4 <xPortStartScheduler+0x134>)
 801c680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c682:	4b1c      	ldr	r3, [pc, #112]	; (801c6f4 <xPortStartScheduler+0x134>)
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c68a:	4a1a      	ldr	r2, [pc, #104]	; (801c6f4 <xPortStartScheduler+0x134>)
 801c68c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	b2da      	uxtb	r2, r3
 801c692:	697b      	ldr	r3, [r7, #20]
 801c694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c696:	4b18      	ldr	r3, [pc, #96]	; (801c6f8 <xPortStartScheduler+0x138>)
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	4a17      	ldr	r2, [pc, #92]	; (801c6f8 <xPortStartScheduler+0x138>)
 801c69c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801c6a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c6a2:	4b15      	ldr	r3, [pc, #84]	; (801c6f8 <xPortStartScheduler+0x138>)
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	4a14      	ldr	r2, [pc, #80]	; (801c6f8 <xPortStartScheduler+0x138>)
 801c6a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801c6ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c6ae:	f000 f8dd 	bl	801c86c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c6b2:	4b12      	ldr	r3, [pc, #72]	; (801c6fc <xPortStartScheduler+0x13c>)
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c6b8:	f000 f8fc 	bl	801c8b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c6bc:	4b10      	ldr	r3, [pc, #64]	; (801c700 <xPortStartScheduler+0x140>)
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	4a0f      	ldr	r2, [pc, #60]	; (801c700 <xPortStartScheduler+0x140>)
 801c6c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801c6c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c6c8:	f7ff ff66 	bl	801c598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c6cc:	f7fe ff3a 	bl	801b544 <vTaskSwitchContext>
	prvTaskExitError();
 801c6d0:	f7ff ff1e 	bl	801c510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c6d4:	2300      	movs	r3, #0
}
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	3718      	adds	r7, #24
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	bd80      	pop	{r7, pc}
 801c6de:	bf00      	nop
 801c6e0:	e000ed00 	.word	0xe000ed00
 801c6e4:	410fc271 	.word	0x410fc271
 801c6e8:	410fc270 	.word	0x410fc270
 801c6ec:	e000e400 	.word	0xe000e400
 801c6f0:	20002450 	.word	0x20002450
 801c6f4:	20002454 	.word	0x20002454
 801c6f8:	e000ed20 	.word	0xe000ed20
 801c6fc:	20000124 	.word	0x20000124
 801c700:	e000ef34 	.word	0xe000ef34

0801c704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c704:	b480      	push	{r7}
 801c706:	b083      	sub	sp, #12
 801c708:	af00      	add	r7, sp, #0
	__asm volatile
 801c70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c70e:	f383 8811 	msr	BASEPRI, r3
 801c712:	f3bf 8f6f 	isb	sy
 801c716:	f3bf 8f4f 	dsb	sy
 801c71a:	607b      	str	r3, [r7, #4]
}
 801c71c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c71e:	4b0f      	ldr	r3, [pc, #60]	; (801c75c <vPortEnterCritical+0x58>)
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	3301      	adds	r3, #1
 801c724:	4a0d      	ldr	r2, [pc, #52]	; (801c75c <vPortEnterCritical+0x58>)
 801c726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c728:	4b0c      	ldr	r3, [pc, #48]	; (801c75c <vPortEnterCritical+0x58>)
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	2b01      	cmp	r3, #1
 801c72e:	d10f      	bne.n	801c750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c730:	4b0b      	ldr	r3, [pc, #44]	; (801c760 <vPortEnterCritical+0x5c>)
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	b2db      	uxtb	r3, r3
 801c736:	2b00      	cmp	r3, #0
 801c738:	d00a      	beq.n	801c750 <vPortEnterCritical+0x4c>
	__asm volatile
 801c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c73e:	f383 8811 	msr	BASEPRI, r3
 801c742:	f3bf 8f6f 	isb	sy
 801c746:	f3bf 8f4f 	dsb	sy
 801c74a:	603b      	str	r3, [r7, #0]
}
 801c74c:	bf00      	nop
 801c74e:	e7fe      	b.n	801c74e <vPortEnterCritical+0x4a>
	}
}
 801c750:	bf00      	nop
 801c752:	370c      	adds	r7, #12
 801c754:	46bd      	mov	sp, r7
 801c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c75a:	4770      	bx	lr
 801c75c:	20000124 	.word	0x20000124
 801c760:	e000ed04 	.word	0xe000ed04

0801c764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c764:	b480      	push	{r7}
 801c766:	b083      	sub	sp, #12
 801c768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c76a:	4b12      	ldr	r3, [pc, #72]	; (801c7b4 <vPortExitCritical+0x50>)
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d10a      	bne.n	801c788 <vPortExitCritical+0x24>
	__asm volatile
 801c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c776:	f383 8811 	msr	BASEPRI, r3
 801c77a:	f3bf 8f6f 	isb	sy
 801c77e:	f3bf 8f4f 	dsb	sy
 801c782:	607b      	str	r3, [r7, #4]
}
 801c784:	bf00      	nop
 801c786:	e7fe      	b.n	801c786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c788:	4b0a      	ldr	r3, [pc, #40]	; (801c7b4 <vPortExitCritical+0x50>)
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	3b01      	subs	r3, #1
 801c78e:	4a09      	ldr	r2, [pc, #36]	; (801c7b4 <vPortExitCritical+0x50>)
 801c790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c792:	4b08      	ldr	r3, [pc, #32]	; (801c7b4 <vPortExitCritical+0x50>)
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d105      	bne.n	801c7a6 <vPortExitCritical+0x42>
 801c79a:	2300      	movs	r3, #0
 801c79c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c79e:	683b      	ldr	r3, [r7, #0]
 801c7a0:	f383 8811 	msr	BASEPRI, r3
}
 801c7a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c7a6:	bf00      	nop
 801c7a8:	370c      	adds	r7, #12
 801c7aa:	46bd      	mov	sp, r7
 801c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7b0:	4770      	bx	lr
 801c7b2:	bf00      	nop
 801c7b4:	20000124 	.word	0x20000124
	...

0801c7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c7c0:	f3ef 8009 	mrs	r0, PSP
 801c7c4:	f3bf 8f6f 	isb	sy
 801c7c8:	4b15      	ldr	r3, [pc, #84]	; (801c820 <pxCurrentTCBConst>)
 801c7ca:	681a      	ldr	r2, [r3, #0]
 801c7cc:	f01e 0f10 	tst.w	lr, #16
 801c7d0:	bf08      	it	eq
 801c7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7da:	6010      	str	r0, [r2, #0]
 801c7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c7e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c7e4:	f380 8811 	msr	BASEPRI, r0
 801c7e8:	f3bf 8f4f 	dsb	sy
 801c7ec:	f3bf 8f6f 	isb	sy
 801c7f0:	f7fe fea8 	bl	801b544 <vTaskSwitchContext>
 801c7f4:	f04f 0000 	mov.w	r0, #0
 801c7f8:	f380 8811 	msr	BASEPRI, r0
 801c7fc:	bc09      	pop	{r0, r3}
 801c7fe:	6819      	ldr	r1, [r3, #0]
 801c800:	6808      	ldr	r0, [r1, #0]
 801c802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c806:	f01e 0f10 	tst.w	lr, #16
 801c80a:	bf08      	it	eq
 801c80c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c810:	f380 8809 	msr	PSP, r0
 801c814:	f3bf 8f6f 	isb	sy
 801c818:	4770      	bx	lr
 801c81a:	bf00      	nop
 801c81c:	f3af 8000 	nop.w

0801c820 <pxCurrentTCBConst>:
 801c820:	20001e24 	.word	0x20001e24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c824:	bf00      	nop
 801c826:	bf00      	nop

0801c828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c828:	b580      	push	{r7, lr}
 801c82a:	b082      	sub	sp, #8
 801c82c:	af00      	add	r7, sp, #0
	__asm volatile
 801c82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c832:	f383 8811 	msr	BASEPRI, r3
 801c836:	f3bf 8f6f 	isb	sy
 801c83a:	f3bf 8f4f 	dsb	sy
 801c83e:	607b      	str	r3, [r7, #4]
}
 801c840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c842:	f7fe fdc5 	bl	801b3d0 <xTaskIncrementTick>
 801c846:	4603      	mov	r3, r0
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d003      	beq.n	801c854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c84c:	4b06      	ldr	r3, [pc, #24]	; (801c868 <xPortSysTickHandler+0x40>)
 801c84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c852:	601a      	str	r2, [r3, #0]
 801c854:	2300      	movs	r3, #0
 801c856:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c858:	683b      	ldr	r3, [r7, #0]
 801c85a:	f383 8811 	msr	BASEPRI, r3
}
 801c85e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c860:	bf00      	nop
 801c862:	3708      	adds	r7, #8
 801c864:	46bd      	mov	sp, r7
 801c866:	bd80      	pop	{r7, pc}
 801c868:	e000ed04 	.word	0xe000ed04

0801c86c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c86c:	b480      	push	{r7}
 801c86e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c870:	4b0b      	ldr	r3, [pc, #44]	; (801c8a0 <vPortSetupTimerInterrupt+0x34>)
 801c872:	2200      	movs	r2, #0
 801c874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c876:	4b0b      	ldr	r3, [pc, #44]	; (801c8a4 <vPortSetupTimerInterrupt+0x38>)
 801c878:	2200      	movs	r2, #0
 801c87a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c87c:	4b0a      	ldr	r3, [pc, #40]	; (801c8a8 <vPortSetupTimerInterrupt+0x3c>)
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	4a0a      	ldr	r2, [pc, #40]	; (801c8ac <vPortSetupTimerInterrupt+0x40>)
 801c882:	fba2 2303 	umull	r2, r3, r2, r3
 801c886:	099b      	lsrs	r3, r3, #6
 801c888:	4a09      	ldr	r2, [pc, #36]	; (801c8b0 <vPortSetupTimerInterrupt+0x44>)
 801c88a:	3b01      	subs	r3, #1
 801c88c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c88e:	4b04      	ldr	r3, [pc, #16]	; (801c8a0 <vPortSetupTimerInterrupt+0x34>)
 801c890:	2207      	movs	r2, #7
 801c892:	601a      	str	r2, [r3, #0]
}
 801c894:	bf00      	nop
 801c896:	46bd      	mov	sp, r7
 801c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c89c:	4770      	bx	lr
 801c89e:	bf00      	nop
 801c8a0:	e000e010 	.word	0xe000e010
 801c8a4:	e000e018 	.word	0xe000e018
 801c8a8:	20000008 	.word	0x20000008
 801c8ac:	10624dd3 	.word	0x10624dd3
 801c8b0:	e000e014 	.word	0xe000e014

0801c8b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c8b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c8c4 <vPortEnableVFP+0x10>
 801c8b8:	6801      	ldr	r1, [r0, #0]
 801c8ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c8be:	6001      	str	r1, [r0, #0]
 801c8c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c8c2:	bf00      	nop
 801c8c4:	e000ed88 	.word	0xe000ed88

0801c8c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c8c8:	b480      	push	{r7}
 801c8ca:	b085      	sub	sp, #20
 801c8cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c8ce:	f3ef 8305 	mrs	r3, IPSR
 801c8d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	2b0f      	cmp	r3, #15
 801c8d8:	d914      	bls.n	801c904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c8da:	4a17      	ldr	r2, [pc, #92]	; (801c938 <vPortValidateInterruptPriority+0x70>)
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	4413      	add	r3, r2
 801c8e0:	781b      	ldrb	r3, [r3, #0]
 801c8e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c8e4:	4b15      	ldr	r3, [pc, #84]	; (801c93c <vPortValidateInterruptPriority+0x74>)
 801c8e6:	781b      	ldrb	r3, [r3, #0]
 801c8e8:	7afa      	ldrb	r2, [r7, #11]
 801c8ea:	429a      	cmp	r2, r3
 801c8ec:	d20a      	bcs.n	801c904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8f2:	f383 8811 	msr	BASEPRI, r3
 801c8f6:	f3bf 8f6f 	isb	sy
 801c8fa:	f3bf 8f4f 	dsb	sy
 801c8fe:	607b      	str	r3, [r7, #4]
}
 801c900:	bf00      	nop
 801c902:	e7fe      	b.n	801c902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c904:	4b0e      	ldr	r3, [pc, #56]	; (801c940 <vPortValidateInterruptPriority+0x78>)
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c90c:	4b0d      	ldr	r3, [pc, #52]	; (801c944 <vPortValidateInterruptPriority+0x7c>)
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	429a      	cmp	r2, r3
 801c912:	d90a      	bls.n	801c92a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c918:	f383 8811 	msr	BASEPRI, r3
 801c91c:	f3bf 8f6f 	isb	sy
 801c920:	f3bf 8f4f 	dsb	sy
 801c924:	603b      	str	r3, [r7, #0]
}
 801c926:	bf00      	nop
 801c928:	e7fe      	b.n	801c928 <vPortValidateInterruptPriority+0x60>
	}
 801c92a:	bf00      	nop
 801c92c:	3714      	adds	r7, #20
 801c92e:	46bd      	mov	sp, r7
 801c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c934:	4770      	bx	lr
 801c936:	bf00      	nop
 801c938:	e000e3f0 	.word	0xe000e3f0
 801c93c:	20002450 	.word	0x20002450
 801c940:	e000ed0c 	.word	0xe000ed0c
 801c944:	20002454 	.word	0x20002454

0801c948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	b08a      	sub	sp, #40	; 0x28
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c950:	2300      	movs	r3, #0
 801c952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c954:	f7fe fc80 	bl	801b258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c958:	4b5b      	ldr	r3, [pc, #364]	; (801cac8 <pvPortMalloc+0x180>)
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d101      	bne.n	801c964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c960:	f000 f920 	bl	801cba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c964:	4b59      	ldr	r3, [pc, #356]	; (801cacc <pvPortMalloc+0x184>)
 801c966:	681a      	ldr	r2, [r3, #0]
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	4013      	ands	r3, r2
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	f040 8093 	bne.w	801ca98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d01d      	beq.n	801c9b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801c978:	2208      	movs	r2, #8
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	4413      	add	r3, r2
 801c97e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	f003 0307 	and.w	r3, r3, #7
 801c986:	2b00      	cmp	r3, #0
 801c988:	d014      	beq.n	801c9b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	f023 0307 	bic.w	r3, r3, #7
 801c990:	3308      	adds	r3, #8
 801c992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	f003 0307 	and.w	r3, r3, #7
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d00a      	beq.n	801c9b4 <pvPortMalloc+0x6c>
	__asm volatile
 801c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c9a2:	f383 8811 	msr	BASEPRI, r3
 801c9a6:	f3bf 8f6f 	isb	sy
 801c9aa:	f3bf 8f4f 	dsb	sy
 801c9ae:	617b      	str	r3, [r7, #20]
}
 801c9b0:	bf00      	nop
 801c9b2:	e7fe      	b.n	801c9b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d06e      	beq.n	801ca98 <pvPortMalloc+0x150>
 801c9ba:	4b45      	ldr	r3, [pc, #276]	; (801cad0 <pvPortMalloc+0x188>)
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	687a      	ldr	r2, [r7, #4]
 801c9c0:	429a      	cmp	r2, r3
 801c9c2:	d869      	bhi.n	801ca98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c9c4:	4b43      	ldr	r3, [pc, #268]	; (801cad4 <pvPortMalloc+0x18c>)
 801c9c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c9c8:	4b42      	ldr	r3, [pc, #264]	; (801cad4 <pvPortMalloc+0x18c>)
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c9ce:	e004      	b.n	801c9da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9dc:	685b      	ldr	r3, [r3, #4]
 801c9de:	687a      	ldr	r2, [r7, #4]
 801c9e0:	429a      	cmp	r2, r3
 801c9e2:	d903      	bls.n	801c9ec <pvPortMalloc+0xa4>
 801c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d1f1      	bne.n	801c9d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c9ec:	4b36      	ldr	r3, [pc, #216]	; (801cac8 <pvPortMalloc+0x180>)
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c9f2:	429a      	cmp	r2, r3
 801c9f4:	d050      	beq.n	801ca98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c9f6:	6a3b      	ldr	r3, [r7, #32]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	2208      	movs	r2, #8
 801c9fc:	4413      	add	r3, r2
 801c9fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca02:	681a      	ldr	r2, [r3, #0]
 801ca04:	6a3b      	ldr	r3, [r7, #32]
 801ca06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801ca08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca0a:	685a      	ldr	r2, [r3, #4]
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	1ad2      	subs	r2, r2, r3
 801ca10:	2308      	movs	r3, #8
 801ca12:	005b      	lsls	r3, r3, #1
 801ca14:	429a      	cmp	r2, r3
 801ca16:	d91f      	bls.n	801ca58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801ca18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	4413      	add	r3, r2
 801ca1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801ca20:	69bb      	ldr	r3, [r7, #24]
 801ca22:	f003 0307 	and.w	r3, r3, #7
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d00a      	beq.n	801ca40 <pvPortMalloc+0xf8>
	__asm volatile
 801ca2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca2e:	f383 8811 	msr	BASEPRI, r3
 801ca32:	f3bf 8f6f 	isb	sy
 801ca36:	f3bf 8f4f 	dsb	sy
 801ca3a:	613b      	str	r3, [r7, #16]
}
 801ca3c:	bf00      	nop
 801ca3e:	e7fe      	b.n	801ca3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca42:	685a      	ldr	r2, [r3, #4]
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	1ad2      	subs	r2, r2, r3
 801ca48:	69bb      	ldr	r3, [r7, #24]
 801ca4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca4e:	687a      	ldr	r2, [r7, #4]
 801ca50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801ca52:	69b8      	ldr	r0, [r7, #24]
 801ca54:	f000 f908 	bl	801cc68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801ca58:	4b1d      	ldr	r3, [pc, #116]	; (801cad0 <pvPortMalloc+0x188>)
 801ca5a:	681a      	ldr	r2, [r3, #0]
 801ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca5e:	685b      	ldr	r3, [r3, #4]
 801ca60:	1ad3      	subs	r3, r2, r3
 801ca62:	4a1b      	ldr	r2, [pc, #108]	; (801cad0 <pvPortMalloc+0x188>)
 801ca64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801ca66:	4b1a      	ldr	r3, [pc, #104]	; (801cad0 <pvPortMalloc+0x188>)
 801ca68:	681a      	ldr	r2, [r3, #0]
 801ca6a:	4b1b      	ldr	r3, [pc, #108]	; (801cad8 <pvPortMalloc+0x190>)
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	429a      	cmp	r2, r3
 801ca70:	d203      	bcs.n	801ca7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801ca72:	4b17      	ldr	r3, [pc, #92]	; (801cad0 <pvPortMalloc+0x188>)
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	4a18      	ldr	r2, [pc, #96]	; (801cad8 <pvPortMalloc+0x190>)
 801ca78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca7c:	685a      	ldr	r2, [r3, #4]
 801ca7e:	4b13      	ldr	r3, [pc, #76]	; (801cacc <pvPortMalloc+0x184>)
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	431a      	orrs	r2, r3
 801ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca8a:	2200      	movs	r2, #0
 801ca8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801ca8e:	4b13      	ldr	r3, [pc, #76]	; (801cadc <pvPortMalloc+0x194>)
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	3301      	adds	r3, #1
 801ca94:	4a11      	ldr	r2, [pc, #68]	; (801cadc <pvPortMalloc+0x194>)
 801ca96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801ca98:	f7fe fbec 	bl	801b274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801ca9c:	69fb      	ldr	r3, [r7, #28]
 801ca9e:	f003 0307 	and.w	r3, r3, #7
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d00a      	beq.n	801cabc <pvPortMalloc+0x174>
	__asm volatile
 801caa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801caaa:	f383 8811 	msr	BASEPRI, r3
 801caae:	f3bf 8f6f 	isb	sy
 801cab2:	f3bf 8f4f 	dsb	sy
 801cab6:	60fb      	str	r3, [r7, #12]
}
 801cab8:	bf00      	nop
 801caba:	e7fe      	b.n	801caba <pvPortMalloc+0x172>
	return pvReturn;
 801cabc:	69fb      	ldr	r3, [r7, #28]
}
 801cabe:	4618      	mov	r0, r3
 801cac0:	3728      	adds	r7, #40	; 0x28
 801cac2:	46bd      	mov	sp, r7
 801cac4:	bd80      	pop	{r7, pc}
 801cac6:	bf00      	nop
 801cac8:	20012460 	.word	0x20012460
 801cacc:	20012474 	.word	0x20012474
 801cad0:	20012464 	.word	0x20012464
 801cad4:	20012458 	.word	0x20012458
 801cad8:	20012468 	.word	0x20012468
 801cadc:	2001246c 	.word	0x2001246c

0801cae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801cae0:	b580      	push	{r7, lr}
 801cae2:	b086      	sub	sp, #24
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d04d      	beq.n	801cb8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801caf2:	2308      	movs	r3, #8
 801caf4:	425b      	negs	r3, r3
 801caf6:	697a      	ldr	r2, [r7, #20]
 801caf8:	4413      	add	r3, r2
 801cafa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801cafc:	697b      	ldr	r3, [r7, #20]
 801cafe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801cb00:	693b      	ldr	r3, [r7, #16]
 801cb02:	685a      	ldr	r2, [r3, #4]
 801cb04:	4b24      	ldr	r3, [pc, #144]	; (801cb98 <vPortFree+0xb8>)
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	4013      	ands	r3, r2
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d10a      	bne.n	801cb24 <vPortFree+0x44>
	__asm volatile
 801cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb12:	f383 8811 	msr	BASEPRI, r3
 801cb16:	f3bf 8f6f 	isb	sy
 801cb1a:	f3bf 8f4f 	dsb	sy
 801cb1e:	60fb      	str	r3, [r7, #12]
}
 801cb20:	bf00      	nop
 801cb22:	e7fe      	b.n	801cb22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801cb24:	693b      	ldr	r3, [r7, #16]
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d00a      	beq.n	801cb42 <vPortFree+0x62>
	__asm volatile
 801cb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb30:	f383 8811 	msr	BASEPRI, r3
 801cb34:	f3bf 8f6f 	isb	sy
 801cb38:	f3bf 8f4f 	dsb	sy
 801cb3c:	60bb      	str	r3, [r7, #8]
}
 801cb3e:	bf00      	nop
 801cb40:	e7fe      	b.n	801cb40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801cb42:	693b      	ldr	r3, [r7, #16]
 801cb44:	685a      	ldr	r2, [r3, #4]
 801cb46:	4b14      	ldr	r3, [pc, #80]	; (801cb98 <vPortFree+0xb8>)
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	4013      	ands	r3, r2
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d01e      	beq.n	801cb8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801cb50:	693b      	ldr	r3, [r7, #16]
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d11a      	bne.n	801cb8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801cb58:	693b      	ldr	r3, [r7, #16]
 801cb5a:	685a      	ldr	r2, [r3, #4]
 801cb5c:	4b0e      	ldr	r3, [pc, #56]	; (801cb98 <vPortFree+0xb8>)
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	43db      	mvns	r3, r3
 801cb62:	401a      	ands	r2, r3
 801cb64:	693b      	ldr	r3, [r7, #16]
 801cb66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801cb68:	f7fe fb76 	bl	801b258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801cb6c:	693b      	ldr	r3, [r7, #16]
 801cb6e:	685a      	ldr	r2, [r3, #4]
 801cb70:	4b0a      	ldr	r3, [pc, #40]	; (801cb9c <vPortFree+0xbc>)
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	4413      	add	r3, r2
 801cb76:	4a09      	ldr	r2, [pc, #36]	; (801cb9c <vPortFree+0xbc>)
 801cb78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801cb7a:	6938      	ldr	r0, [r7, #16]
 801cb7c:	f000 f874 	bl	801cc68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801cb80:	4b07      	ldr	r3, [pc, #28]	; (801cba0 <vPortFree+0xc0>)
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	3301      	adds	r3, #1
 801cb86:	4a06      	ldr	r2, [pc, #24]	; (801cba0 <vPortFree+0xc0>)
 801cb88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801cb8a:	f7fe fb73 	bl	801b274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801cb8e:	bf00      	nop
 801cb90:	3718      	adds	r7, #24
 801cb92:	46bd      	mov	sp, r7
 801cb94:	bd80      	pop	{r7, pc}
 801cb96:	bf00      	nop
 801cb98:	20012474 	.word	0x20012474
 801cb9c:	20012464 	.word	0x20012464
 801cba0:	20012470 	.word	0x20012470

0801cba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801cba4:	b480      	push	{r7}
 801cba6:	b085      	sub	sp, #20
 801cba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801cbaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801cbae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801cbb0:	4b27      	ldr	r3, [pc, #156]	; (801cc50 <prvHeapInit+0xac>)
 801cbb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	f003 0307 	and.w	r3, r3, #7
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d00c      	beq.n	801cbd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	3307      	adds	r3, #7
 801cbc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cbc4:	68fb      	ldr	r3, [r7, #12]
 801cbc6:	f023 0307 	bic.w	r3, r3, #7
 801cbca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801cbcc:	68ba      	ldr	r2, [r7, #8]
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	1ad3      	subs	r3, r2, r3
 801cbd2:	4a1f      	ldr	r2, [pc, #124]	; (801cc50 <prvHeapInit+0xac>)
 801cbd4:	4413      	add	r3, r2
 801cbd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801cbdc:	4a1d      	ldr	r2, [pc, #116]	; (801cc54 <prvHeapInit+0xb0>)
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801cbe2:	4b1c      	ldr	r3, [pc, #112]	; (801cc54 <prvHeapInit+0xb0>)
 801cbe4:	2200      	movs	r2, #0
 801cbe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	68ba      	ldr	r2, [r7, #8]
 801cbec:	4413      	add	r3, r2
 801cbee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801cbf0:	2208      	movs	r2, #8
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	1a9b      	subs	r3, r3, r2
 801cbf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	f023 0307 	bic.w	r3, r3, #7
 801cbfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	4a15      	ldr	r2, [pc, #84]	; (801cc58 <prvHeapInit+0xb4>)
 801cc04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801cc06:	4b14      	ldr	r3, [pc, #80]	; (801cc58 <prvHeapInit+0xb4>)
 801cc08:	681b      	ldr	r3, [r3, #0]
 801cc0a:	2200      	movs	r2, #0
 801cc0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801cc0e:	4b12      	ldr	r3, [pc, #72]	; (801cc58 <prvHeapInit+0xb4>)
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	2200      	movs	r2, #0
 801cc14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801cc1a:	683b      	ldr	r3, [r7, #0]
 801cc1c:	68fa      	ldr	r2, [r7, #12]
 801cc1e:	1ad2      	subs	r2, r2, r3
 801cc20:	683b      	ldr	r3, [r7, #0]
 801cc22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801cc24:	4b0c      	ldr	r3, [pc, #48]	; (801cc58 <prvHeapInit+0xb4>)
 801cc26:	681a      	ldr	r2, [r3, #0]
 801cc28:	683b      	ldr	r3, [r7, #0]
 801cc2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cc2c:	683b      	ldr	r3, [r7, #0]
 801cc2e:	685b      	ldr	r3, [r3, #4]
 801cc30:	4a0a      	ldr	r2, [pc, #40]	; (801cc5c <prvHeapInit+0xb8>)
 801cc32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cc34:	683b      	ldr	r3, [r7, #0]
 801cc36:	685b      	ldr	r3, [r3, #4]
 801cc38:	4a09      	ldr	r2, [pc, #36]	; (801cc60 <prvHeapInit+0xbc>)
 801cc3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801cc3c:	4b09      	ldr	r3, [pc, #36]	; (801cc64 <prvHeapInit+0xc0>)
 801cc3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801cc42:	601a      	str	r2, [r3, #0]
}
 801cc44:	bf00      	nop
 801cc46:	3714      	adds	r7, #20
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc4e:	4770      	bx	lr
 801cc50:	20002458 	.word	0x20002458
 801cc54:	20012458 	.word	0x20012458
 801cc58:	20012460 	.word	0x20012460
 801cc5c:	20012468 	.word	0x20012468
 801cc60:	20012464 	.word	0x20012464
 801cc64:	20012474 	.word	0x20012474

0801cc68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801cc68:	b480      	push	{r7}
 801cc6a:	b085      	sub	sp, #20
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801cc70:	4b28      	ldr	r3, [pc, #160]	; (801cd14 <prvInsertBlockIntoFreeList+0xac>)
 801cc72:	60fb      	str	r3, [r7, #12]
 801cc74:	e002      	b.n	801cc7c <prvInsertBlockIntoFreeList+0x14>
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	60fb      	str	r3, [r7, #12]
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	687a      	ldr	r2, [r7, #4]
 801cc82:	429a      	cmp	r2, r3
 801cc84:	d8f7      	bhi.n	801cc76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801cc8a:	68fb      	ldr	r3, [r7, #12]
 801cc8c:	685b      	ldr	r3, [r3, #4]
 801cc8e:	68ba      	ldr	r2, [r7, #8]
 801cc90:	4413      	add	r3, r2
 801cc92:	687a      	ldr	r2, [r7, #4]
 801cc94:	429a      	cmp	r2, r3
 801cc96:	d108      	bne.n	801ccaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801cc98:	68fb      	ldr	r3, [r7, #12]
 801cc9a:	685a      	ldr	r2, [r3, #4]
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	685b      	ldr	r3, [r3, #4]
 801cca0:	441a      	add	r2, r3
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801cca6:	68fb      	ldr	r3, [r7, #12]
 801cca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	685b      	ldr	r3, [r3, #4]
 801ccb2:	68ba      	ldr	r2, [r7, #8]
 801ccb4:	441a      	add	r2, r3
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	429a      	cmp	r2, r3
 801ccbc:	d118      	bne.n	801ccf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	681a      	ldr	r2, [r3, #0]
 801ccc2:	4b15      	ldr	r3, [pc, #84]	; (801cd18 <prvInsertBlockIntoFreeList+0xb0>)
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	429a      	cmp	r2, r3
 801ccc8:	d00d      	beq.n	801cce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	685a      	ldr	r2, [r3, #4]
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	685b      	ldr	r3, [r3, #4]
 801ccd4:	441a      	add	r2, r3
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	681a      	ldr	r2, [r3, #0]
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	601a      	str	r2, [r3, #0]
 801cce4:	e008      	b.n	801ccf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801cce6:	4b0c      	ldr	r3, [pc, #48]	; (801cd18 <prvInsertBlockIntoFreeList+0xb0>)
 801cce8:	681a      	ldr	r2, [r3, #0]
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	601a      	str	r2, [r3, #0]
 801ccee:	e003      	b.n	801ccf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	681a      	ldr	r2, [r3, #0]
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ccf8:	68fa      	ldr	r2, [r7, #12]
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	429a      	cmp	r2, r3
 801ccfe:	d002      	beq.n	801cd06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	687a      	ldr	r2, [r7, #4]
 801cd04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801cd06:	bf00      	nop
 801cd08:	3714      	adds	r7, #20
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd10:	4770      	bx	lr
 801cd12:	bf00      	nop
 801cd14:	20012458 	.word	0x20012458
 801cd18:	20012460 	.word	0x20012460

0801cd1c <RS485_Init>:
#include "string.h"
#include "stm32g4xx_hal.h"

uint8_t RS485receiveFlag = 0;

void RS485_Init(RS485cfg_struct *RS485cfg){
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b082      	sub	sp, #8
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	6078      	str	r0, [r7, #4]
	HAL_RS485Ex_Init(RS485cfg->huart, UART_DE_POLARITY_HIGH, 2, 2);
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	6818      	ldr	r0, [r3, #0]
 801cd28:	2302      	movs	r3, #2
 801cd2a:	2202      	movs	r2, #2
 801cd2c:	2100      	movs	r1, #0
 801cd2e:	f7f5 f971 	bl	8012014 <HAL_RS485Ex_Init>
	RS485receiveFlag = 0;
 801cd32:	4b09      	ldr	r3, [pc, #36]	; (801cd58 <RS485_Init+0x3c>)
 801cd34:	2200      	movs	r2, #0
 801cd36:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(RS485cfg->huart, RS485cfg->RXbuffer, RS485cfg->RXbuffSize-1);
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	6818      	ldr	r0, [r3, #0]
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	68d9      	ldr	r1, [r3, #12]
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	8a1b      	ldrh	r3, [r3, #16]
 801cd44:	3b01      	subs	r3, #1
 801cd46:	b29b      	uxth	r3, r3
 801cd48:	461a      	mov	r2, r3
 801cd4a:	f7f5 fa9f 	bl	801228c <HAL_UARTEx_ReceiveToIdle_IT>
}
 801cd4e:	bf00      	nop
 801cd50:	3708      	adds	r7, #8
 801cd52:	46bd      	mov	sp, r7
 801cd54:	bd80      	pop	{r7, pc}
 801cd56:	bf00      	nop
 801cd58:	20012478 	.word	0x20012478

0801cd5c <RS485_Transmit_DMA>:

void RS485_Transmit_DMA(RS485cfg_struct *RS485cfg)
{
 801cd5c:	b590      	push	{r4, r7, lr}
 801cd5e:	b085      	sub	sp, #20
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	6078      	str	r0, [r7, #4]
	uint16_t msglength = strlen(RS485cfg->TXbuffer) + 2;
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	685b      	ldr	r3, [r3, #4]
 801cd68:	4618      	mov	r0, r3
 801cd6a:	f7e8 feb9 	bl	8005ae0 <strlen>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	b29b      	uxth	r3, r3
 801cd72:	3302      	adds	r3, #2
 801cd74:	81fb      	strh	r3, [r7, #14]
	if(msglength > RS485cfg->TXbuffSize) return;
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	891b      	ldrh	r3, [r3, #8]
 801cd7a:	89fa      	ldrh	r2, [r7, #14]
 801cd7c:	429a      	cmp	r2, r3
 801cd7e:	d829      	bhi.n	801cdd4 <RS485_Transmit_DMA+0x78>

	strcat(RS485cfg->TXbuffer, "\r\n");
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	685c      	ldr	r4, [r3, #4]
 801cd84:	4620      	mov	r0, r4
 801cd86:	f7e8 feab 	bl	8005ae0 <strlen>
 801cd8a:	4603      	mov	r3, r0
 801cd8c:	4423      	add	r3, r4
 801cd8e:	4a13      	ldr	r2, [pc, #76]	; (801cddc <RS485_Transmit_DMA+0x80>)
 801cd90:	8811      	ldrh	r1, [r2, #0]
 801cd92:	7892      	ldrb	r2, [r2, #2]
 801cd94:	8019      	strh	r1, [r3, #0]
 801cd96:	709a      	strb	r2, [r3, #2]

	HAL_StatusTypeDef RS485status = HAL_UART_Transmit_DMA(RS485cfg->huart, RS485cfg->TXbuffer, msglength);
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	6818      	ldr	r0, [r3, #0]
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	685b      	ldr	r3, [r3, #4]
 801cda0:	89fa      	ldrh	r2, [r7, #14]
 801cda2:	4619      	mov	r1, r3
 801cda4:	f7f3 f8e4 	bl	800ff70 <HAL_UART_Transmit_DMA>
 801cda8:	4603      	mov	r3, r0
 801cdaa:	737b      	strb	r3, [r7, #13]
	if (RS485status != HAL_OK) {
 801cdac:	7b7b      	ldrb	r3, [r7, #13]
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d001      	beq.n	801cdb6 <RS485_Transmit_DMA+0x5a>
	        Error_Handler();
 801cdb2:	f7eb fb3f 	bl	8008434 <Error_Handler>
	}

	RS485receiveFlag = 0;
 801cdb6:	4b0a      	ldr	r3, [pc, #40]	; (801cde0 <RS485_Transmit_DMA+0x84>)
 801cdb8:	2200      	movs	r2, #0
 801cdba:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(RS485cfg->huart, RS485cfg->RXbuffer, RS485cfg->RXbuffSize-1);
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	6818      	ldr	r0, [r3, #0]
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	68d9      	ldr	r1, [r3, #12]
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	8a1b      	ldrh	r3, [r3, #16]
 801cdc8:	3b01      	subs	r3, #1
 801cdca:	b29b      	uxth	r3, r3
 801cdcc:	461a      	mov	r2, r3
 801cdce:	f7f5 fa5d 	bl	801228c <HAL_UARTEx_ReceiveToIdle_IT>

	return;
 801cdd2:	e000      	b.n	801cdd6 <RS485_Transmit_DMA+0x7a>
	if(msglength > RS485cfg->TXbuffSize) return;
 801cdd4:	bf00      	nop
}
 801cdd6:	3714      	adds	r7, #20
 801cdd8:	46bd      	mov	sp, r7
 801cdda:	bd90      	pop	{r4, r7, pc}
 801cddc:	080202e0 	.word	0x080202e0
 801cde0:	20012478 	.word	0x20012478

0801cde4 <RS485_TransmitDone>:

uint8_t RS485_TransmitDone(RS485cfg_struct *RS485cfg)
{
 801cde4:	b580      	push	{r7, lr}
 801cde6:	b084      	sub	sp, #16
 801cde8:	af00      	add	r7, sp, #0
 801cdea:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef val = HAL_UART_GetError(RS485cfg->huart);
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	f7f3 fc89 	bl	8010708 <HAL_UART_GetError>
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	73fb      	strb	r3, [r7, #15]
	return (HAL_OK == val);
 801cdfa:	7bfb      	ldrb	r3, [r7, #15]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	bf0c      	ite	eq
 801ce00:	2301      	moveq	r3, #1
 801ce02:	2300      	movne	r3, #0
 801ce04:	b2db      	uxtb	r3, r3
}
 801ce06:	4618      	mov	r0, r3
 801ce08:	3710      	adds	r7, #16
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd80      	pop	{r7, pc}
	...

0801ce10 <RS485_IsReceived>:
	RS485receiveFlag = 0;
	HAL_UARTEx_ReceiveToIdle_IT(RS485cfg->huart, RS485cfg->RXbuffer, RS485cfg->RXbuffSize-1);
}

uint8_t RS485_IsReceived()
{
 801ce10:	b480      	push	{r7}
 801ce12:	af00      	add	r7, sp, #0
	return RS485receiveFlag;
 801ce14:	4b03      	ldr	r3, [pc, #12]	; (801ce24 <RS485_IsReceived+0x14>)
 801ce16:	781b      	ldrb	r3, [r3, #0]
}
 801ce18:	4618      	mov	r0, r3
 801ce1a:	46bd      	mov	sp, r7
 801ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce20:	4770      	bx	lr
 801ce22:	bf00      	nop
 801ce24:	20012478 	.word	0x20012478

0801ce28 <LED_init>:
RGB_struct actualRGB[3] = {0}; // stores data of actual RGB settings with added effects
RGB_struct transitionRGB[3] = {0}; // stores post-transition RGB data without effects
uint32_t period = 0;

void LED_init(uint32_t updatePeriod)
{
 801ce28:	b580      	push	{r7, lr}
 801ce2a:	b082      	sub	sp, #8
 801ce2c:	af00      	add	r7, sp, #0
 801ce2e:	6078      	str	r0, [r7, #4]
	period = updatePeriod;
 801ce30:	4a09      	ldr	r2, [pc, #36]	; (801ce58 <LED_init+0x30>)
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);	//R
 801ce36:	2100      	movs	r1, #0
 801ce38:	4808      	ldr	r0, [pc, #32]	; (801ce5c <LED_init+0x34>)
 801ce3a:	f7f1 fe19 	bl	800ea70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);	//G
 801ce3e:	210c      	movs	r1, #12
 801ce40:	4807      	ldr	r0, [pc, #28]	; (801ce60 <LED_init+0x38>)
 801ce42:	f7f1 fe15 	bl	800ea70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	//B
 801ce46:	2108      	movs	r1, #8
 801ce48:	4805      	ldr	r0, [pc, #20]	; (801ce60 <LED_init+0x38>)
 801ce4a:	f7f1 fe11 	bl	800ea70 <HAL_TIM_PWM_Start>
}
 801ce4e:	bf00      	nop
 801ce50:	3708      	adds	r7, #8
 801ce52:	46bd      	mov	sp, r7
 801ce54:	bd80      	pop	{r7, pc}
 801ce56:	bf00      	nop
 801ce58:	2001253c 	.word	0x2001253c
 801ce5c:	200005d4 	.word	0x200005d4
 801ce60:	20000588 	.word	0x20000588
 801ce64:	00000000 	.word	0x00000000

0801ce68 <LED_UpdateTransition>:
	HAL_GPIO_WritePin(LED2_OUT_GPIO_Port, LED2_OUT_Pin, channel==1);
	HAL_GPIO_WritePin(LED3_OUT_GPIO_Port, LED3_OUT_Pin, channel==2);
}

void LED_UpdateTransition()
{
 801ce68:	b580      	push	{r7, lr}
 801ce6a:	b086      	sub	sp, #24
 801ce6c:	af00      	add	r7, sp, #0
	for(uint8_t channel = 0; channel <= 2; channel++)
 801ce6e:	2300      	movs	r3, #0
 801ce70:	75fb      	strb	r3, [r7, #23]
 801ce72:	e122      	b.n	801d0ba <LED_UpdateTransition+0x252>
	{
		float newR = 0, newG = 0, newB = 0;
 801ce74:	f04f 0300 	mov.w	r3, #0
 801ce78:	613b      	str	r3, [r7, #16]
 801ce7a:	f04f 0300 	mov.w	r3, #0
 801ce7e:	60fb      	str	r3, [r7, #12]
 801ce80:	f04f 0300 	mov.w	r3, #0
 801ce84:	60bb      	str	r3, [r7, #8]
		if(leds[channel].effect.type != EFFECT_OFF)
 801ce86:	7dfa      	ldrb	r2, [r7, #23]
 801ce88:	4993      	ldr	r1, [pc, #588]	; (801d0d8 <LED_UpdateTransition+0x270>)
 801ce8a:	4613      	mov	r3, r2
 801ce8c:	005b      	lsls	r3, r3, #1
 801ce8e:	4413      	add	r3, r2
 801ce90:	00db      	lsls	r3, r3, #3
 801ce92:	440b      	add	r3, r1
 801ce94:	330c      	adds	r3, #12
 801ce96:	781b      	ldrb	r3, [r3, #0]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d060      	beq.n	801cf5e <LED_UpdateTransition+0xf6>
		{
			newR = leds[channel].R >= 0.01 ? leds[channel].R : 0.0;
 801ce9c:	7dfa      	ldrb	r2, [r7, #23]
 801ce9e:	498e      	ldr	r1, [pc, #568]	; (801d0d8 <LED_UpdateTransition+0x270>)
 801cea0:	4613      	mov	r3, r2
 801cea2:	005b      	lsls	r3, r3, #1
 801cea4:	4413      	add	r3, r2
 801cea6:	00db      	lsls	r3, r3, #3
 801cea8:	440b      	add	r3, r1
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	4618      	mov	r0, r3
 801ceae:	f7e8 ffd3 	bl	8005e58 <__aeabi_f2d>
 801ceb2:	a387      	add	r3, pc, #540	; (adr r3, 801d0d0 <LED_UpdateTransition+0x268>)
 801ceb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceb8:	f7e9 faac 	bl	8006414 <__aeabi_dcmpge>
 801cebc:	4603      	mov	r3, r0
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d008      	beq.n	801ced4 <LED_UpdateTransition+0x6c>
 801cec2:	7dfa      	ldrb	r2, [r7, #23]
 801cec4:	4984      	ldr	r1, [pc, #528]	; (801d0d8 <LED_UpdateTransition+0x270>)
 801cec6:	4613      	mov	r3, r2
 801cec8:	005b      	lsls	r3, r3, #1
 801ceca:	4413      	add	r3, r2
 801cecc:	00db      	lsls	r3, r3, #3
 801cece:	440b      	add	r3, r1
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	e001      	b.n	801ced8 <LED_UpdateTransition+0x70>
 801ced4:	f04f 0300 	mov.w	r3, #0
 801ced8:	613b      	str	r3, [r7, #16]
			newG = leds[channel].G >= 0.01 ? leds[channel].G : 0.0;
 801ceda:	7dfa      	ldrb	r2, [r7, #23]
 801cedc:	497e      	ldr	r1, [pc, #504]	; (801d0d8 <LED_UpdateTransition+0x270>)
 801cede:	4613      	mov	r3, r2
 801cee0:	005b      	lsls	r3, r3, #1
 801cee2:	4413      	add	r3, r2
 801cee4:	00db      	lsls	r3, r3, #3
 801cee6:	440b      	add	r3, r1
 801cee8:	3304      	adds	r3, #4
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	4618      	mov	r0, r3
 801ceee:	f7e8 ffb3 	bl	8005e58 <__aeabi_f2d>
 801cef2:	a377      	add	r3, pc, #476	; (adr r3, 801d0d0 <LED_UpdateTransition+0x268>)
 801cef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef8:	f7e9 fa8c 	bl	8006414 <__aeabi_dcmpge>
 801cefc:	4603      	mov	r3, r0
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d009      	beq.n	801cf16 <LED_UpdateTransition+0xae>
 801cf02:	7dfa      	ldrb	r2, [r7, #23]
 801cf04:	4974      	ldr	r1, [pc, #464]	; (801d0d8 <LED_UpdateTransition+0x270>)
 801cf06:	4613      	mov	r3, r2
 801cf08:	005b      	lsls	r3, r3, #1
 801cf0a:	4413      	add	r3, r2
 801cf0c:	00db      	lsls	r3, r3, #3
 801cf0e:	440b      	add	r3, r1
 801cf10:	3304      	adds	r3, #4
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	e001      	b.n	801cf1a <LED_UpdateTransition+0xb2>
 801cf16:	f04f 0300 	mov.w	r3, #0
 801cf1a:	60fb      	str	r3, [r7, #12]
			newB = leds[channel].B >= 0.01 ? leds[channel].B : 0.0;
 801cf1c:	7dfa      	ldrb	r2, [r7, #23]
 801cf1e:	496e      	ldr	r1, [pc, #440]	; (801d0d8 <LED_UpdateTransition+0x270>)
 801cf20:	4613      	mov	r3, r2
 801cf22:	005b      	lsls	r3, r3, #1
 801cf24:	4413      	add	r3, r2
 801cf26:	00db      	lsls	r3, r3, #3
 801cf28:	440b      	add	r3, r1
 801cf2a:	3308      	adds	r3, #8
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	4618      	mov	r0, r3
 801cf30:	f7e8 ff92 	bl	8005e58 <__aeabi_f2d>
 801cf34:	a366      	add	r3, pc, #408	; (adr r3, 801d0d0 <LED_UpdateTransition+0x268>)
 801cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf3a:	f7e9 fa6b 	bl	8006414 <__aeabi_dcmpge>
 801cf3e:	4603      	mov	r3, r0
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d009      	beq.n	801cf58 <LED_UpdateTransition+0xf0>
 801cf44:	7dfa      	ldrb	r2, [r7, #23]
 801cf46:	4964      	ldr	r1, [pc, #400]	; (801d0d8 <LED_UpdateTransition+0x270>)
 801cf48:	4613      	mov	r3, r2
 801cf4a:	005b      	lsls	r3, r3, #1
 801cf4c:	4413      	add	r3, r2
 801cf4e:	00db      	lsls	r3, r3, #3
 801cf50:	440b      	add	r3, r1
 801cf52:	3308      	adds	r3, #8
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	e001      	b.n	801cf5c <LED_UpdateTransition+0xf4>
 801cf58:	f04f 0300 	mov.w	r3, #0
 801cf5c:	60bb      	str	r3, [r7, #8]
		}

		switch (leds[channel].transition.type)
 801cf5e:	7dfa      	ldrb	r2, [r7, #23]
 801cf60:	495d      	ldr	r1, [pc, #372]	; (801d0d8 <LED_UpdateTransition+0x270>)
 801cf62:	4613      	mov	r3, r2
 801cf64:	005b      	lsls	r3, r3, #1
 801cf66:	4413      	add	r3, r2
 801cf68:	00db      	lsls	r3, r3, #3
 801cf6a:	440b      	add	r3, r1
 801cf6c:	3314      	adds	r3, #20
 801cf6e:	781b      	ldrb	r3, [r3, #0]
 801cf70:	2b02      	cmp	r3, #2
 801cf72:	d01d      	beq.n	801cfb0 <LED_UpdateTransition+0x148>
		{
			default: //TRANSITION_INSTANT
				transitionRGB[channel].R = newR;
 801cf74:	7dfa      	ldrb	r2, [r7, #23]
 801cf76:	4959      	ldr	r1, [pc, #356]	; (801d0dc <LED_UpdateTransition+0x274>)
 801cf78:	4613      	mov	r3, r2
 801cf7a:	009b      	lsls	r3, r3, #2
 801cf7c:	4413      	add	r3, r2
 801cf7e:	009b      	lsls	r3, r3, #2
 801cf80:	440b      	add	r3, r1
 801cf82:	693a      	ldr	r2, [r7, #16]
 801cf84:	601a      	str	r2, [r3, #0]
				transitionRGB[channel].G = newG;
 801cf86:	7dfa      	ldrb	r2, [r7, #23]
 801cf88:	4954      	ldr	r1, [pc, #336]	; (801d0dc <LED_UpdateTransition+0x274>)
 801cf8a:	4613      	mov	r3, r2
 801cf8c:	009b      	lsls	r3, r3, #2
 801cf8e:	4413      	add	r3, r2
 801cf90:	009b      	lsls	r3, r3, #2
 801cf92:	440b      	add	r3, r1
 801cf94:	3304      	adds	r3, #4
 801cf96:	68fa      	ldr	r2, [r7, #12]
 801cf98:	601a      	str	r2, [r3, #0]
				transitionRGB[channel].B = newB;
 801cf9a:	7dfa      	ldrb	r2, [r7, #23]
 801cf9c:	494f      	ldr	r1, [pc, #316]	; (801d0dc <LED_UpdateTransition+0x274>)
 801cf9e:	4613      	mov	r3, r2
 801cfa0:	009b      	lsls	r3, r3, #2
 801cfa2:	4413      	add	r3, r2
 801cfa4:	009b      	lsls	r3, r3, #2
 801cfa6:	440b      	add	r3, r1
 801cfa8:	3308      	adds	r3, #8
 801cfaa:	68ba      	ldr	r2, [r7, #8]
 801cfac:	601a      	str	r2, [r3, #0]
			break;
 801cfae:	e081      	b.n	801d0b4 <LED_UpdateTransition+0x24c>

			case TRANSITION_FADE:
				float val = period/(float)(leds[channel].transition.time);
 801cfb0:	4b4b      	ldr	r3, [pc, #300]	; (801d0e0 <LED_UpdateTransition+0x278>)
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	ee07 3a90 	vmov	s15, r3
 801cfb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cfbc:	7dfa      	ldrb	r2, [r7, #23]
 801cfbe:	4946      	ldr	r1, [pc, #280]	; (801d0d8 <LED_UpdateTransition+0x270>)
 801cfc0:	4613      	mov	r3, r2
 801cfc2:	005b      	lsls	r3, r3, #1
 801cfc4:	4413      	add	r3, r2
 801cfc6:	00db      	lsls	r3, r3, #3
 801cfc8:	440b      	add	r3, r1
 801cfca:	3316      	adds	r3, #22
 801cfcc:	881b      	ldrh	r3, [r3, #0]
 801cfce:	ee07 3a90 	vmov	s15, r3
 801cfd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801cfd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cfda:	edc7 7a01 	vstr	s15, [r7, #4]
				transitionRGB[channel].R = (1 - val) * transitionRGB[channel].R + val * newR;
 801cfde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cfe2:	edd7 7a01 	vldr	s15, [r7, #4]
 801cfe6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801cfea:	7dfa      	ldrb	r2, [r7, #23]
 801cfec:	493b      	ldr	r1, [pc, #236]	; (801d0dc <LED_UpdateTransition+0x274>)
 801cfee:	4613      	mov	r3, r2
 801cff0:	009b      	lsls	r3, r3, #2
 801cff2:	4413      	add	r3, r2
 801cff4:	009b      	lsls	r3, r3, #2
 801cff6:	440b      	add	r3, r1
 801cff8:	edd3 7a00 	vldr	s15, [r3]
 801cffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d000:	edd7 6a01 	vldr	s13, [r7, #4]
 801d004:	edd7 7a04 	vldr	s15, [r7, #16]
 801d008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d00c:	7dfa      	ldrb	r2, [r7, #23]
 801d00e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d012:	4932      	ldr	r1, [pc, #200]	; (801d0dc <LED_UpdateTransition+0x274>)
 801d014:	4613      	mov	r3, r2
 801d016:	009b      	lsls	r3, r3, #2
 801d018:	4413      	add	r3, r2
 801d01a:	009b      	lsls	r3, r3, #2
 801d01c:	440b      	add	r3, r1
 801d01e:	edc3 7a00 	vstr	s15, [r3]
				transitionRGB[channel].G = (1 - val) * transitionRGB[channel].G + val * newG;
 801d022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d026:	edd7 7a01 	vldr	s15, [r7, #4]
 801d02a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d02e:	7dfa      	ldrb	r2, [r7, #23]
 801d030:	492a      	ldr	r1, [pc, #168]	; (801d0dc <LED_UpdateTransition+0x274>)
 801d032:	4613      	mov	r3, r2
 801d034:	009b      	lsls	r3, r3, #2
 801d036:	4413      	add	r3, r2
 801d038:	009b      	lsls	r3, r3, #2
 801d03a:	440b      	add	r3, r1
 801d03c:	3304      	adds	r3, #4
 801d03e:	edd3 7a00 	vldr	s15, [r3]
 801d042:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d046:	edd7 6a01 	vldr	s13, [r7, #4]
 801d04a:	edd7 7a03 	vldr	s15, [r7, #12]
 801d04e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d052:	7dfa      	ldrb	r2, [r7, #23]
 801d054:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d058:	4920      	ldr	r1, [pc, #128]	; (801d0dc <LED_UpdateTransition+0x274>)
 801d05a:	4613      	mov	r3, r2
 801d05c:	009b      	lsls	r3, r3, #2
 801d05e:	4413      	add	r3, r2
 801d060:	009b      	lsls	r3, r3, #2
 801d062:	440b      	add	r3, r1
 801d064:	3304      	adds	r3, #4
 801d066:	edc3 7a00 	vstr	s15, [r3]
				transitionRGB[channel].B = (1 - val) * transitionRGB[channel].B + val * newB;
 801d06a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d06e:	edd7 7a01 	vldr	s15, [r7, #4]
 801d072:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d076:	7dfa      	ldrb	r2, [r7, #23]
 801d078:	4918      	ldr	r1, [pc, #96]	; (801d0dc <LED_UpdateTransition+0x274>)
 801d07a:	4613      	mov	r3, r2
 801d07c:	009b      	lsls	r3, r3, #2
 801d07e:	4413      	add	r3, r2
 801d080:	009b      	lsls	r3, r3, #2
 801d082:	440b      	add	r3, r1
 801d084:	3308      	adds	r3, #8
 801d086:	edd3 7a00 	vldr	s15, [r3]
 801d08a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d08e:	edd7 6a01 	vldr	s13, [r7, #4]
 801d092:	edd7 7a02 	vldr	s15, [r7, #8]
 801d096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d09a:	7dfa      	ldrb	r2, [r7, #23]
 801d09c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d0a0:	490e      	ldr	r1, [pc, #56]	; (801d0dc <LED_UpdateTransition+0x274>)
 801d0a2:	4613      	mov	r3, r2
 801d0a4:	009b      	lsls	r3, r3, #2
 801d0a6:	4413      	add	r3, r2
 801d0a8:	009b      	lsls	r3, r3, #2
 801d0aa:	440b      	add	r3, r1
 801d0ac:	3308      	adds	r3, #8
 801d0ae:	edc3 7a00 	vstr	s15, [r3]
			break;
 801d0b2:	bf00      	nop
	for(uint8_t channel = 0; channel <= 2; channel++)
 801d0b4:	7dfb      	ldrb	r3, [r7, #23]
 801d0b6:	3301      	adds	r3, #1
 801d0b8:	75fb      	strb	r3, [r7, #23]
 801d0ba:	7dfb      	ldrb	r3, [r7, #23]
 801d0bc:	2b02      	cmp	r3, #2
 801d0be:	f67f aed9 	bls.w	801ce74 <LED_UpdateTransition+0xc>
		}
	}
}
 801d0c2:	bf00      	nop
 801d0c4:	bf00      	nop
 801d0c6:	3718      	adds	r7, #24
 801d0c8:	46bd      	mov	sp, r7
 801d0ca:	bd80      	pop	{r7, pc}
 801d0cc:	f3af 8000 	nop.w
 801d0d0:	47ae147b 	.word	0x47ae147b
 801d0d4:	3f847ae1 	.word	0x3f847ae1
 801d0d8:	2001247c 	.word	0x2001247c
 801d0dc:	20012500 	.word	0x20012500
 801d0e0:	2001253c 	.word	0x2001253c
 801d0e4:	00000000 	.word	0x00000000

0801d0e8 <LED_UpdateEffect>:

void LED_UpdateEffect()
{
 801d0e8:	b5b0      	push	{r4, r5, r7, lr}
 801d0ea:	b082      	sub	sp, #8
 801d0ec:	af00      	add	r7, sp, #0
	for(uint8_t channel = 0; channel <= 2; channel++)
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	71fb      	strb	r3, [r7, #7]
 801d0f2:	e337      	b.n	801d764 <LED_UpdateEffect+0x67c>
	{
		switch (leds[channel].effect.type)
 801d0f4:	79fa      	ldrb	r2, [r7, #7]
 801d0f6:	49a9      	ldr	r1, [pc, #676]	; (801d39c <LED_UpdateEffect+0x2b4>)
 801d0f8:	4613      	mov	r3, r2
 801d0fa:	005b      	lsls	r3, r3, #1
 801d0fc:	4413      	add	r3, r2
 801d0fe:	00db      	lsls	r3, r3, #3
 801d100:	440b      	add	r3, r1
 801d102:	330c      	adds	r3, #12
 801d104:	781b      	ldrb	r3, [r3, #0]
 801d106:	3b02      	subs	r3, #2
 801d108:	2b03      	cmp	r3, #3
 801d10a:	d80b      	bhi.n	801d124 <LED_UpdateEffect+0x3c>
 801d10c:	a201      	add	r2, pc, #4	; (adr r2, 801d114 <LED_UpdateEffect+0x2c>)
 801d10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d112:	bf00      	nop
 801d114:	0801d18f 	.word	0x0801d18f
 801d118:	0801d271 	.word	0x0801d271
 801d11c:	0801d3a9 	.word	0x0801d3a9
 801d120:	0801d4bd 	.word	0x0801d4bd
		{
			default: //OFF
			case EFFECT_ON:
				actualRGB[channel].R = transitionRGB[channel].R;
 801d124:	79f9      	ldrb	r1, [r7, #7]
 801d126:	79fa      	ldrb	r2, [r7, #7]
 801d128:	489d      	ldr	r0, [pc, #628]	; (801d3a0 <LED_UpdateEffect+0x2b8>)
 801d12a:	460b      	mov	r3, r1
 801d12c:	009b      	lsls	r3, r3, #2
 801d12e:	440b      	add	r3, r1
 801d130:	009b      	lsls	r3, r3, #2
 801d132:	4403      	add	r3, r0
 801d134:	6819      	ldr	r1, [r3, #0]
 801d136:	489b      	ldr	r0, [pc, #620]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d138:	4613      	mov	r3, r2
 801d13a:	009b      	lsls	r3, r3, #2
 801d13c:	4413      	add	r3, r2
 801d13e:	009b      	lsls	r3, r3, #2
 801d140:	4403      	add	r3, r0
 801d142:	6019      	str	r1, [r3, #0]
				actualRGB[channel].G = transitionRGB[channel].G;
 801d144:	79f9      	ldrb	r1, [r7, #7]
 801d146:	79fa      	ldrb	r2, [r7, #7]
 801d148:	4895      	ldr	r0, [pc, #596]	; (801d3a0 <LED_UpdateEffect+0x2b8>)
 801d14a:	460b      	mov	r3, r1
 801d14c:	009b      	lsls	r3, r3, #2
 801d14e:	440b      	add	r3, r1
 801d150:	009b      	lsls	r3, r3, #2
 801d152:	4403      	add	r3, r0
 801d154:	3304      	adds	r3, #4
 801d156:	6819      	ldr	r1, [r3, #0]
 801d158:	4892      	ldr	r0, [pc, #584]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d15a:	4613      	mov	r3, r2
 801d15c:	009b      	lsls	r3, r3, #2
 801d15e:	4413      	add	r3, r2
 801d160:	009b      	lsls	r3, r3, #2
 801d162:	4403      	add	r3, r0
 801d164:	3304      	adds	r3, #4
 801d166:	6019      	str	r1, [r3, #0]
				actualRGB[channel].B = transitionRGB[channel].B;
 801d168:	79f9      	ldrb	r1, [r7, #7]
 801d16a:	79fa      	ldrb	r2, [r7, #7]
 801d16c:	488c      	ldr	r0, [pc, #560]	; (801d3a0 <LED_UpdateEffect+0x2b8>)
 801d16e:	460b      	mov	r3, r1
 801d170:	009b      	lsls	r3, r3, #2
 801d172:	440b      	add	r3, r1
 801d174:	009b      	lsls	r3, r3, #2
 801d176:	4403      	add	r3, r0
 801d178:	3308      	adds	r3, #8
 801d17a:	6819      	ldr	r1, [r3, #0]
 801d17c:	4889      	ldr	r0, [pc, #548]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d17e:	4613      	mov	r3, r2
 801d180:	009b      	lsls	r3, r3, #2
 801d182:	4413      	add	r3, r2
 801d184:	009b      	lsls	r3, r3, #2
 801d186:	4403      	add	r3, r0
 801d188:	3308      	adds	r3, #8
 801d18a:	6019      	str	r1, [r3, #0]
			break;
 801d18c:	e2a0      	b.n	801d6d0 <LED_UpdateEffect+0x5e8>

			case EFFECT_BLINK:
				actualRGB[channel].R = actualRGB[channel].phase > 0.5 ? transitionRGB[channel].R : 0;
 801d18e:	79fa      	ldrb	r2, [r7, #7]
 801d190:	4984      	ldr	r1, [pc, #528]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d192:	4613      	mov	r3, r2
 801d194:	009b      	lsls	r3, r3, #2
 801d196:	4413      	add	r3, r2
 801d198:	009b      	lsls	r3, r3, #2
 801d19a:	440b      	add	r3, r1
 801d19c:	330c      	adds	r3, #12
 801d19e:	edd3 7a00 	vldr	s15, [r3]
 801d1a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d1a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1ae:	dd08      	ble.n	801d1c2 <LED_UpdateEffect+0xda>
 801d1b0:	79fa      	ldrb	r2, [r7, #7]
 801d1b2:	497b      	ldr	r1, [pc, #492]	; (801d3a0 <LED_UpdateEffect+0x2b8>)
 801d1b4:	4613      	mov	r3, r2
 801d1b6:	009b      	lsls	r3, r3, #2
 801d1b8:	4413      	add	r3, r2
 801d1ba:	009b      	lsls	r3, r3, #2
 801d1bc:	440b      	add	r3, r1
 801d1be:	681a      	ldr	r2, [r3, #0]
 801d1c0:	e001      	b.n	801d1c6 <LED_UpdateEffect+0xde>
 801d1c2:	f04f 0200 	mov.w	r2, #0
 801d1c6:	79f9      	ldrb	r1, [r7, #7]
 801d1c8:	4876      	ldr	r0, [pc, #472]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d1ca:	460b      	mov	r3, r1
 801d1cc:	009b      	lsls	r3, r3, #2
 801d1ce:	440b      	add	r3, r1
 801d1d0:	009b      	lsls	r3, r3, #2
 801d1d2:	4403      	add	r3, r0
 801d1d4:	601a      	str	r2, [r3, #0]
				actualRGB[channel].G = actualRGB[channel].phase > 0.5 ? transitionRGB[channel].G : 0;
 801d1d6:	79fa      	ldrb	r2, [r7, #7]
 801d1d8:	4972      	ldr	r1, [pc, #456]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d1da:	4613      	mov	r3, r2
 801d1dc:	009b      	lsls	r3, r3, #2
 801d1de:	4413      	add	r3, r2
 801d1e0:	009b      	lsls	r3, r3, #2
 801d1e2:	440b      	add	r3, r1
 801d1e4:	330c      	adds	r3, #12
 801d1e6:	edd3 7a00 	vldr	s15, [r3]
 801d1ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d1ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1f6:	dd09      	ble.n	801d20c <LED_UpdateEffect+0x124>
 801d1f8:	79fa      	ldrb	r2, [r7, #7]
 801d1fa:	4969      	ldr	r1, [pc, #420]	; (801d3a0 <LED_UpdateEffect+0x2b8>)
 801d1fc:	4613      	mov	r3, r2
 801d1fe:	009b      	lsls	r3, r3, #2
 801d200:	4413      	add	r3, r2
 801d202:	009b      	lsls	r3, r3, #2
 801d204:	440b      	add	r3, r1
 801d206:	3304      	adds	r3, #4
 801d208:	681a      	ldr	r2, [r3, #0]
 801d20a:	e001      	b.n	801d210 <LED_UpdateEffect+0x128>
 801d20c:	f04f 0200 	mov.w	r2, #0
 801d210:	79f9      	ldrb	r1, [r7, #7]
 801d212:	4864      	ldr	r0, [pc, #400]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d214:	460b      	mov	r3, r1
 801d216:	009b      	lsls	r3, r3, #2
 801d218:	440b      	add	r3, r1
 801d21a:	009b      	lsls	r3, r3, #2
 801d21c:	4403      	add	r3, r0
 801d21e:	3304      	adds	r3, #4
 801d220:	601a      	str	r2, [r3, #0]
				actualRGB[channel].B = actualRGB[channel].phase > 0.5 ? transitionRGB[channel].B : 0;
 801d222:	79fa      	ldrb	r2, [r7, #7]
 801d224:	495f      	ldr	r1, [pc, #380]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d226:	4613      	mov	r3, r2
 801d228:	009b      	lsls	r3, r3, #2
 801d22a:	4413      	add	r3, r2
 801d22c:	009b      	lsls	r3, r3, #2
 801d22e:	440b      	add	r3, r1
 801d230:	330c      	adds	r3, #12
 801d232:	edd3 7a00 	vldr	s15, [r3]
 801d236:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d23a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d242:	dd09      	ble.n	801d258 <LED_UpdateEffect+0x170>
 801d244:	79fa      	ldrb	r2, [r7, #7]
 801d246:	4956      	ldr	r1, [pc, #344]	; (801d3a0 <LED_UpdateEffect+0x2b8>)
 801d248:	4613      	mov	r3, r2
 801d24a:	009b      	lsls	r3, r3, #2
 801d24c:	4413      	add	r3, r2
 801d24e:	009b      	lsls	r3, r3, #2
 801d250:	440b      	add	r3, r1
 801d252:	3308      	adds	r3, #8
 801d254:	681a      	ldr	r2, [r3, #0]
 801d256:	e001      	b.n	801d25c <LED_UpdateEffect+0x174>
 801d258:	f04f 0200 	mov.w	r2, #0
 801d25c:	79f9      	ldrb	r1, [r7, #7]
 801d25e:	4851      	ldr	r0, [pc, #324]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d260:	460b      	mov	r3, r1
 801d262:	009b      	lsls	r3, r3, #2
 801d264:	440b      	add	r3, r1
 801d266:	009b      	lsls	r3, r3, #2
 801d268:	4403      	add	r3, r0
 801d26a:	3308      	adds	r3, #8
 801d26c:	601a      	str	r2, [r3, #0]
			break;
 801d26e:	e22f      	b.n	801d6d0 <LED_UpdateEffect+0x5e8>

			case EFFECT_PULSE:
				actualRGB[channel].R = actualRGB[channel].phase > 1-leds[channel].effect.dutycycle ? transitionRGB[channel].R : 0;
 801d270:	79fa      	ldrb	r2, [r7, #7]
 801d272:	494c      	ldr	r1, [pc, #304]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d274:	4613      	mov	r3, r2
 801d276:	009b      	lsls	r3, r3, #2
 801d278:	4413      	add	r3, r2
 801d27a:	009b      	lsls	r3, r3, #2
 801d27c:	440b      	add	r3, r1
 801d27e:	330c      	adds	r3, #12
 801d280:	ed93 7a00 	vldr	s14, [r3]
 801d284:	79fa      	ldrb	r2, [r7, #7]
 801d286:	4945      	ldr	r1, [pc, #276]	; (801d39c <LED_UpdateEffect+0x2b4>)
 801d288:	4613      	mov	r3, r2
 801d28a:	005b      	lsls	r3, r3, #1
 801d28c:	4413      	add	r3, r2
 801d28e:	00db      	lsls	r3, r3, #3
 801d290:	440b      	add	r3, r1
 801d292:	3310      	adds	r3, #16
 801d294:	edd3 7a00 	vldr	s15, [r3]
 801d298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d29c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801d2a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2a8:	dd08      	ble.n	801d2bc <LED_UpdateEffect+0x1d4>
 801d2aa:	79fa      	ldrb	r2, [r7, #7]
 801d2ac:	493c      	ldr	r1, [pc, #240]	; (801d3a0 <LED_UpdateEffect+0x2b8>)
 801d2ae:	4613      	mov	r3, r2
 801d2b0:	009b      	lsls	r3, r3, #2
 801d2b2:	4413      	add	r3, r2
 801d2b4:	009b      	lsls	r3, r3, #2
 801d2b6:	440b      	add	r3, r1
 801d2b8:	681a      	ldr	r2, [r3, #0]
 801d2ba:	e001      	b.n	801d2c0 <LED_UpdateEffect+0x1d8>
 801d2bc:	f04f 0200 	mov.w	r2, #0
 801d2c0:	79f9      	ldrb	r1, [r7, #7]
 801d2c2:	4838      	ldr	r0, [pc, #224]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d2c4:	460b      	mov	r3, r1
 801d2c6:	009b      	lsls	r3, r3, #2
 801d2c8:	440b      	add	r3, r1
 801d2ca:	009b      	lsls	r3, r3, #2
 801d2cc:	4403      	add	r3, r0
 801d2ce:	601a      	str	r2, [r3, #0]
				actualRGB[channel].G = actualRGB[channel].phase > 1-leds[channel].effect.dutycycle ? transitionRGB[channel].G : 0;
 801d2d0:	79fa      	ldrb	r2, [r7, #7]
 801d2d2:	4934      	ldr	r1, [pc, #208]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d2d4:	4613      	mov	r3, r2
 801d2d6:	009b      	lsls	r3, r3, #2
 801d2d8:	4413      	add	r3, r2
 801d2da:	009b      	lsls	r3, r3, #2
 801d2dc:	440b      	add	r3, r1
 801d2de:	330c      	adds	r3, #12
 801d2e0:	ed93 7a00 	vldr	s14, [r3]
 801d2e4:	79fa      	ldrb	r2, [r7, #7]
 801d2e6:	492d      	ldr	r1, [pc, #180]	; (801d39c <LED_UpdateEffect+0x2b4>)
 801d2e8:	4613      	mov	r3, r2
 801d2ea:	005b      	lsls	r3, r3, #1
 801d2ec:	4413      	add	r3, r2
 801d2ee:	00db      	lsls	r3, r3, #3
 801d2f0:	440b      	add	r3, r1
 801d2f2:	3310      	adds	r3, #16
 801d2f4:	edd3 7a00 	vldr	s15, [r3]
 801d2f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801d300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d308:	dd09      	ble.n	801d31e <LED_UpdateEffect+0x236>
 801d30a:	79fa      	ldrb	r2, [r7, #7]
 801d30c:	4924      	ldr	r1, [pc, #144]	; (801d3a0 <LED_UpdateEffect+0x2b8>)
 801d30e:	4613      	mov	r3, r2
 801d310:	009b      	lsls	r3, r3, #2
 801d312:	4413      	add	r3, r2
 801d314:	009b      	lsls	r3, r3, #2
 801d316:	440b      	add	r3, r1
 801d318:	3304      	adds	r3, #4
 801d31a:	681a      	ldr	r2, [r3, #0]
 801d31c:	e001      	b.n	801d322 <LED_UpdateEffect+0x23a>
 801d31e:	f04f 0200 	mov.w	r2, #0
 801d322:	79f9      	ldrb	r1, [r7, #7]
 801d324:	481f      	ldr	r0, [pc, #124]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d326:	460b      	mov	r3, r1
 801d328:	009b      	lsls	r3, r3, #2
 801d32a:	440b      	add	r3, r1
 801d32c:	009b      	lsls	r3, r3, #2
 801d32e:	4403      	add	r3, r0
 801d330:	3304      	adds	r3, #4
 801d332:	601a      	str	r2, [r3, #0]
				actualRGB[channel].B = actualRGB[channel].phase > 1-leds[channel].effect.dutycycle ? transitionRGB[channel].B : 0;
 801d334:	79fa      	ldrb	r2, [r7, #7]
 801d336:	491b      	ldr	r1, [pc, #108]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d338:	4613      	mov	r3, r2
 801d33a:	009b      	lsls	r3, r3, #2
 801d33c:	4413      	add	r3, r2
 801d33e:	009b      	lsls	r3, r3, #2
 801d340:	440b      	add	r3, r1
 801d342:	330c      	adds	r3, #12
 801d344:	ed93 7a00 	vldr	s14, [r3]
 801d348:	79fa      	ldrb	r2, [r7, #7]
 801d34a:	4914      	ldr	r1, [pc, #80]	; (801d39c <LED_UpdateEffect+0x2b4>)
 801d34c:	4613      	mov	r3, r2
 801d34e:	005b      	lsls	r3, r3, #1
 801d350:	4413      	add	r3, r2
 801d352:	00db      	lsls	r3, r3, #3
 801d354:	440b      	add	r3, r1
 801d356:	3310      	adds	r3, #16
 801d358:	edd3 7a00 	vldr	s15, [r3]
 801d35c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d360:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801d364:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d36c:	dd09      	ble.n	801d382 <LED_UpdateEffect+0x29a>
 801d36e:	79fa      	ldrb	r2, [r7, #7]
 801d370:	490b      	ldr	r1, [pc, #44]	; (801d3a0 <LED_UpdateEffect+0x2b8>)
 801d372:	4613      	mov	r3, r2
 801d374:	009b      	lsls	r3, r3, #2
 801d376:	4413      	add	r3, r2
 801d378:	009b      	lsls	r3, r3, #2
 801d37a:	440b      	add	r3, r1
 801d37c:	3308      	adds	r3, #8
 801d37e:	681a      	ldr	r2, [r3, #0]
 801d380:	e001      	b.n	801d386 <LED_UpdateEffect+0x29e>
 801d382:	f04f 0200 	mov.w	r2, #0
 801d386:	79f9      	ldrb	r1, [r7, #7]
 801d388:	4806      	ldr	r0, [pc, #24]	; (801d3a4 <LED_UpdateEffect+0x2bc>)
 801d38a:	460b      	mov	r3, r1
 801d38c:	009b      	lsls	r3, r3, #2
 801d38e:	440b      	add	r3, r1
 801d390:	009b      	lsls	r3, r3, #2
 801d392:	4403      	add	r3, r0
 801d394:	3308      	adds	r3, #8
 801d396:	601a      	str	r2, [r3, #0]
			break;
 801d398:	e19a      	b.n	801d6d0 <LED_UpdateEffect+0x5e8>
 801d39a:	bf00      	nop
 801d39c:	2001247c 	.word	0x2001247c
 801d3a0:	20012500 	.word	0x20012500
 801d3a4:	200124c4 	.word	0x200124c4

			case EFFECT_BREATHE:
				float val = 0.5 + 0.5 * cosf(6.28 * actualRGB[channel].phase);
 801d3a8:	79fa      	ldrb	r2, [r7, #7]
 801d3aa:	4941      	ldr	r1, [pc, #260]	; (801d4b0 <LED_UpdateEffect+0x3c8>)
 801d3ac:	4613      	mov	r3, r2
 801d3ae:	009b      	lsls	r3, r3, #2
 801d3b0:	4413      	add	r3, r2
 801d3b2:	009b      	lsls	r3, r3, #2
 801d3b4:	440b      	add	r3, r1
 801d3b6:	330c      	adds	r3, #12
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	4618      	mov	r0, r3
 801d3bc:	f7e8 fd4c 	bl	8005e58 <__aeabi_f2d>
 801d3c0:	a339      	add	r3, pc, #228	; (adr r3, 801d4a8 <LED_UpdateEffect+0x3c0>)
 801d3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3c6:	f7e8 fd9f 	bl	8005f08 <__aeabi_dmul>
 801d3ca:	4602      	mov	r2, r0
 801d3cc:	460b      	mov	r3, r1
 801d3ce:	4610      	mov	r0, r2
 801d3d0:	4619      	mov	r1, r3
 801d3d2:	f7e9 f853 	bl	800647c <__aeabi_d2f>
 801d3d6:	4603      	mov	r3, r0
 801d3d8:	ee00 3a10 	vmov	s0, r3
 801d3dc:	f002 f9c6 	bl	801f76c <cosf>
 801d3e0:	ee10 3a10 	vmov	r3, s0
 801d3e4:	4618      	mov	r0, r3
 801d3e6:	f7e8 fd37 	bl	8005e58 <__aeabi_f2d>
 801d3ea:	f04f 0200 	mov.w	r2, #0
 801d3ee:	4b31      	ldr	r3, [pc, #196]	; (801d4b4 <LED_UpdateEffect+0x3cc>)
 801d3f0:	f7e8 fd8a 	bl	8005f08 <__aeabi_dmul>
 801d3f4:	4602      	mov	r2, r0
 801d3f6:	460b      	mov	r3, r1
 801d3f8:	4610      	mov	r0, r2
 801d3fa:	4619      	mov	r1, r3
 801d3fc:	f04f 0200 	mov.w	r2, #0
 801d400:	4b2c      	ldr	r3, [pc, #176]	; (801d4b4 <LED_UpdateEffect+0x3cc>)
 801d402:	f7e8 fbcb 	bl	8005b9c <__adddf3>
 801d406:	4602      	mov	r2, r0
 801d408:	460b      	mov	r3, r1
 801d40a:	4610      	mov	r0, r2
 801d40c:	4619      	mov	r1, r3
 801d40e:	f7e9 f835 	bl	800647c <__aeabi_d2f>
 801d412:	4603      	mov	r3, r0
 801d414:	603b      	str	r3, [r7, #0]
				actualRGB[channel].R = transitionRGB[channel].R * val;
 801d416:	79fa      	ldrb	r2, [r7, #7]
 801d418:	4927      	ldr	r1, [pc, #156]	; (801d4b8 <LED_UpdateEffect+0x3d0>)
 801d41a:	4613      	mov	r3, r2
 801d41c:	009b      	lsls	r3, r3, #2
 801d41e:	4413      	add	r3, r2
 801d420:	009b      	lsls	r3, r3, #2
 801d422:	440b      	add	r3, r1
 801d424:	ed93 7a00 	vldr	s14, [r3]
 801d428:	79fa      	ldrb	r2, [r7, #7]
 801d42a:	edd7 7a00 	vldr	s15, [r7]
 801d42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d432:	491f      	ldr	r1, [pc, #124]	; (801d4b0 <LED_UpdateEffect+0x3c8>)
 801d434:	4613      	mov	r3, r2
 801d436:	009b      	lsls	r3, r3, #2
 801d438:	4413      	add	r3, r2
 801d43a:	009b      	lsls	r3, r3, #2
 801d43c:	440b      	add	r3, r1
 801d43e:	edc3 7a00 	vstr	s15, [r3]
				actualRGB[channel].G = transitionRGB[channel].G * val;
 801d442:	79fa      	ldrb	r2, [r7, #7]
 801d444:	491c      	ldr	r1, [pc, #112]	; (801d4b8 <LED_UpdateEffect+0x3d0>)
 801d446:	4613      	mov	r3, r2
 801d448:	009b      	lsls	r3, r3, #2
 801d44a:	4413      	add	r3, r2
 801d44c:	009b      	lsls	r3, r3, #2
 801d44e:	440b      	add	r3, r1
 801d450:	3304      	adds	r3, #4
 801d452:	ed93 7a00 	vldr	s14, [r3]
 801d456:	79fa      	ldrb	r2, [r7, #7]
 801d458:	edd7 7a00 	vldr	s15, [r7]
 801d45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d460:	4913      	ldr	r1, [pc, #76]	; (801d4b0 <LED_UpdateEffect+0x3c8>)
 801d462:	4613      	mov	r3, r2
 801d464:	009b      	lsls	r3, r3, #2
 801d466:	4413      	add	r3, r2
 801d468:	009b      	lsls	r3, r3, #2
 801d46a:	440b      	add	r3, r1
 801d46c:	3304      	adds	r3, #4
 801d46e:	edc3 7a00 	vstr	s15, [r3]
				actualRGB[channel].B = transitionRGB[channel].B * val;
 801d472:	79fa      	ldrb	r2, [r7, #7]
 801d474:	4910      	ldr	r1, [pc, #64]	; (801d4b8 <LED_UpdateEffect+0x3d0>)
 801d476:	4613      	mov	r3, r2
 801d478:	009b      	lsls	r3, r3, #2
 801d47a:	4413      	add	r3, r2
 801d47c:	009b      	lsls	r3, r3, #2
 801d47e:	440b      	add	r3, r1
 801d480:	3308      	adds	r3, #8
 801d482:	ed93 7a00 	vldr	s14, [r3]
 801d486:	79fa      	ldrb	r2, [r7, #7]
 801d488:	edd7 7a00 	vldr	s15, [r7]
 801d48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d490:	4907      	ldr	r1, [pc, #28]	; (801d4b0 <LED_UpdateEffect+0x3c8>)
 801d492:	4613      	mov	r3, r2
 801d494:	009b      	lsls	r3, r3, #2
 801d496:	4413      	add	r3, r2
 801d498:	009b      	lsls	r3, r3, #2
 801d49a:	440b      	add	r3, r1
 801d49c:	3308      	adds	r3, #8
 801d49e:	edc3 7a00 	vstr	s15, [r3]
			break;
 801d4a2:	e115      	b.n	801d6d0 <LED_UpdateEffect+0x5e8>
 801d4a4:	f3af 8000 	nop.w
 801d4a8:	51eb851f 	.word	0x51eb851f
 801d4ac:	40191eb8 	.word	0x40191eb8
 801d4b0:	200124c4 	.word	0x200124c4
 801d4b4:	3fe00000 	.word	0x3fe00000
 801d4b8:	20012500 	.word	0x20012500

			case EFFECT_COLORSHIFT:
				actualRGB[channel].R = transitionRGB[channel].R * (0.55 + 0.45 * cosf(6.28 * actualRGB[channel].phase));
 801d4bc:	79fa      	ldrb	r2, [r7, #7]
 801d4be:	49b8      	ldr	r1, [pc, #736]	; (801d7a0 <LED_UpdateEffect+0x6b8>)
 801d4c0:	4613      	mov	r3, r2
 801d4c2:	009b      	lsls	r3, r3, #2
 801d4c4:	4413      	add	r3, r2
 801d4c6:	009b      	lsls	r3, r3, #2
 801d4c8:	440b      	add	r3, r1
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	f7e8 fcc3 	bl	8005e58 <__aeabi_f2d>
 801d4d2:	4604      	mov	r4, r0
 801d4d4:	460d      	mov	r5, r1
 801d4d6:	79fa      	ldrb	r2, [r7, #7]
 801d4d8:	49b2      	ldr	r1, [pc, #712]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d4da:	4613      	mov	r3, r2
 801d4dc:	009b      	lsls	r3, r3, #2
 801d4de:	4413      	add	r3, r2
 801d4e0:	009b      	lsls	r3, r3, #2
 801d4e2:	440b      	add	r3, r1
 801d4e4:	330c      	adds	r3, #12
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	4618      	mov	r0, r3
 801d4ea:	f7e8 fcb5 	bl	8005e58 <__aeabi_f2d>
 801d4ee:	a3a2      	add	r3, pc, #648	; (adr r3, 801d778 <LED_UpdateEffect+0x690>)
 801d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4f4:	f7e8 fd08 	bl	8005f08 <__aeabi_dmul>
 801d4f8:	4602      	mov	r2, r0
 801d4fa:	460b      	mov	r3, r1
 801d4fc:	4610      	mov	r0, r2
 801d4fe:	4619      	mov	r1, r3
 801d500:	f7e8 ffbc 	bl	800647c <__aeabi_d2f>
 801d504:	4603      	mov	r3, r0
 801d506:	ee00 3a10 	vmov	s0, r3
 801d50a:	f002 f92f 	bl	801f76c <cosf>
 801d50e:	ee10 3a10 	vmov	r3, s0
 801d512:	4618      	mov	r0, r3
 801d514:	f7e8 fca0 	bl	8005e58 <__aeabi_f2d>
 801d518:	a399      	add	r3, pc, #612	; (adr r3, 801d780 <LED_UpdateEffect+0x698>)
 801d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d51e:	f7e8 fcf3 	bl	8005f08 <__aeabi_dmul>
 801d522:	4602      	mov	r2, r0
 801d524:	460b      	mov	r3, r1
 801d526:	4610      	mov	r0, r2
 801d528:	4619      	mov	r1, r3
 801d52a:	a397      	add	r3, pc, #604	; (adr r3, 801d788 <LED_UpdateEffect+0x6a0>)
 801d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d530:	f7e8 fb34 	bl	8005b9c <__adddf3>
 801d534:	4602      	mov	r2, r0
 801d536:	460b      	mov	r3, r1
 801d538:	4620      	mov	r0, r4
 801d53a:	4629      	mov	r1, r5
 801d53c:	f7e8 fce4 	bl	8005f08 <__aeabi_dmul>
 801d540:	4602      	mov	r2, r0
 801d542:	460b      	mov	r3, r1
 801d544:	79fc      	ldrb	r4, [r7, #7]
 801d546:	4610      	mov	r0, r2
 801d548:	4619      	mov	r1, r3
 801d54a:	f7e8 ff97 	bl	800647c <__aeabi_d2f>
 801d54e:	4602      	mov	r2, r0
 801d550:	4994      	ldr	r1, [pc, #592]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d552:	4623      	mov	r3, r4
 801d554:	009b      	lsls	r3, r3, #2
 801d556:	4423      	add	r3, r4
 801d558:	009b      	lsls	r3, r3, #2
 801d55a:	440b      	add	r3, r1
 801d55c:	601a      	str	r2, [r3, #0]
				actualRGB[channel].G = transitionRGB[channel].G * (0.55 + 0.45 * cosf(6.28 * actualRGB[channel].phase + 2.1));
 801d55e:	79fa      	ldrb	r2, [r7, #7]
 801d560:	498f      	ldr	r1, [pc, #572]	; (801d7a0 <LED_UpdateEffect+0x6b8>)
 801d562:	4613      	mov	r3, r2
 801d564:	009b      	lsls	r3, r3, #2
 801d566:	4413      	add	r3, r2
 801d568:	009b      	lsls	r3, r3, #2
 801d56a:	440b      	add	r3, r1
 801d56c:	3304      	adds	r3, #4
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	4618      	mov	r0, r3
 801d572:	f7e8 fc71 	bl	8005e58 <__aeabi_f2d>
 801d576:	4604      	mov	r4, r0
 801d578:	460d      	mov	r5, r1
 801d57a:	79fa      	ldrb	r2, [r7, #7]
 801d57c:	4989      	ldr	r1, [pc, #548]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d57e:	4613      	mov	r3, r2
 801d580:	009b      	lsls	r3, r3, #2
 801d582:	4413      	add	r3, r2
 801d584:	009b      	lsls	r3, r3, #2
 801d586:	440b      	add	r3, r1
 801d588:	330c      	adds	r3, #12
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	4618      	mov	r0, r3
 801d58e:	f7e8 fc63 	bl	8005e58 <__aeabi_f2d>
 801d592:	a379      	add	r3, pc, #484	; (adr r3, 801d778 <LED_UpdateEffect+0x690>)
 801d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d598:	f7e8 fcb6 	bl	8005f08 <__aeabi_dmul>
 801d59c:	4602      	mov	r2, r0
 801d59e:	460b      	mov	r3, r1
 801d5a0:	4610      	mov	r0, r2
 801d5a2:	4619      	mov	r1, r3
 801d5a4:	a37a      	add	r3, pc, #488	; (adr r3, 801d790 <LED_UpdateEffect+0x6a8>)
 801d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5aa:	f7e8 faf7 	bl	8005b9c <__adddf3>
 801d5ae:	4602      	mov	r2, r0
 801d5b0:	460b      	mov	r3, r1
 801d5b2:	4610      	mov	r0, r2
 801d5b4:	4619      	mov	r1, r3
 801d5b6:	f7e8 ff61 	bl	800647c <__aeabi_d2f>
 801d5ba:	4603      	mov	r3, r0
 801d5bc:	ee00 3a10 	vmov	s0, r3
 801d5c0:	f002 f8d4 	bl	801f76c <cosf>
 801d5c4:	ee10 3a10 	vmov	r3, s0
 801d5c8:	4618      	mov	r0, r3
 801d5ca:	f7e8 fc45 	bl	8005e58 <__aeabi_f2d>
 801d5ce:	a36c      	add	r3, pc, #432	; (adr r3, 801d780 <LED_UpdateEffect+0x698>)
 801d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5d4:	f7e8 fc98 	bl	8005f08 <__aeabi_dmul>
 801d5d8:	4602      	mov	r2, r0
 801d5da:	460b      	mov	r3, r1
 801d5dc:	4610      	mov	r0, r2
 801d5de:	4619      	mov	r1, r3
 801d5e0:	a369      	add	r3, pc, #420	; (adr r3, 801d788 <LED_UpdateEffect+0x6a0>)
 801d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5e6:	f7e8 fad9 	bl	8005b9c <__adddf3>
 801d5ea:	4602      	mov	r2, r0
 801d5ec:	460b      	mov	r3, r1
 801d5ee:	4620      	mov	r0, r4
 801d5f0:	4629      	mov	r1, r5
 801d5f2:	f7e8 fc89 	bl	8005f08 <__aeabi_dmul>
 801d5f6:	4602      	mov	r2, r0
 801d5f8:	460b      	mov	r3, r1
 801d5fa:	79fc      	ldrb	r4, [r7, #7]
 801d5fc:	4610      	mov	r0, r2
 801d5fe:	4619      	mov	r1, r3
 801d600:	f7e8 ff3c 	bl	800647c <__aeabi_d2f>
 801d604:	4602      	mov	r2, r0
 801d606:	4967      	ldr	r1, [pc, #412]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d608:	4623      	mov	r3, r4
 801d60a:	009b      	lsls	r3, r3, #2
 801d60c:	4423      	add	r3, r4
 801d60e:	009b      	lsls	r3, r3, #2
 801d610:	440b      	add	r3, r1
 801d612:	3304      	adds	r3, #4
 801d614:	601a      	str	r2, [r3, #0]
				actualRGB[channel].B = transitionRGB[channel].B * (0.55 + 0.45 * cosf(6.28 * actualRGB[channel].phase + 4.2));
 801d616:	79fa      	ldrb	r2, [r7, #7]
 801d618:	4961      	ldr	r1, [pc, #388]	; (801d7a0 <LED_UpdateEffect+0x6b8>)
 801d61a:	4613      	mov	r3, r2
 801d61c:	009b      	lsls	r3, r3, #2
 801d61e:	4413      	add	r3, r2
 801d620:	009b      	lsls	r3, r3, #2
 801d622:	440b      	add	r3, r1
 801d624:	3308      	adds	r3, #8
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	4618      	mov	r0, r3
 801d62a:	f7e8 fc15 	bl	8005e58 <__aeabi_f2d>
 801d62e:	4604      	mov	r4, r0
 801d630:	460d      	mov	r5, r1
 801d632:	79fa      	ldrb	r2, [r7, #7]
 801d634:	495b      	ldr	r1, [pc, #364]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d636:	4613      	mov	r3, r2
 801d638:	009b      	lsls	r3, r3, #2
 801d63a:	4413      	add	r3, r2
 801d63c:	009b      	lsls	r3, r3, #2
 801d63e:	440b      	add	r3, r1
 801d640:	330c      	adds	r3, #12
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	4618      	mov	r0, r3
 801d646:	f7e8 fc07 	bl	8005e58 <__aeabi_f2d>
 801d64a:	a34b      	add	r3, pc, #300	; (adr r3, 801d778 <LED_UpdateEffect+0x690>)
 801d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d650:	f7e8 fc5a 	bl	8005f08 <__aeabi_dmul>
 801d654:	4602      	mov	r2, r0
 801d656:	460b      	mov	r3, r1
 801d658:	4610      	mov	r0, r2
 801d65a:	4619      	mov	r1, r3
 801d65c:	a34e      	add	r3, pc, #312	; (adr r3, 801d798 <LED_UpdateEffect+0x6b0>)
 801d65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d662:	f7e8 fa9b 	bl	8005b9c <__adddf3>
 801d666:	4602      	mov	r2, r0
 801d668:	460b      	mov	r3, r1
 801d66a:	4610      	mov	r0, r2
 801d66c:	4619      	mov	r1, r3
 801d66e:	f7e8 ff05 	bl	800647c <__aeabi_d2f>
 801d672:	4603      	mov	r3, r0
 801d674:	ee00 3a10 	vmov	s0, r3
 801d678:	f002 f878 	bl	801f76c <cosf>
 801d67c:	ee10 3a10 	vmov	r3, s0
 801d680:	4618      	mov	r0, r3
 801d682:	f7e8 fbe9 	bl	8005e58 <__aeabi_f2d>
 801d686:	a33e      	add	r3, pc, #248	; (adr r3, 801d780 <LED_UpdateEffect+0x698>)
 801d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d68c:	f7e8 fc3c 	bl	8005f08 <__aeabi_dmul>
 801d690:	4602      	mov	r2, r0
 801d692:	460b      	mov	r3, r1
 801d694:	4610      	mov	r0, r2
 801d696:	4619      	mov	r1, r3
 801d698:	a33b      	add	r3, pc, #236	; (adr r3, 801d788 <LED_UpdateEffect+0x6a0>)
 801d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d69e:	f7e8 fa7d 	bl	8005b9c <__adddf3>
 801d6a2:	4602      	mov	r2, r0
 801d6a4:	460b      	mov	r3, r1
 801d6a6:	4620      	mov	r0, r4
 801d6a8:	4629      	mov	r1, r5
 801d6aa:	f7e8 fc2d 	bl	8005f08 <__aeabi_dmul>
 801d6ae:	4602      	mov	r2, r0
 801d6b0:	460b      	mov	r3, r1
 801d6b2:	79fc      	ldrb	r4, [r7, #7]
 801d6b4:	4610      	mov	r0, r2
 801d6b6:	4619      	mov	r1, r3
 801d6b8:	f7e8 fee0 	bl	800647c <__aeabi_d2f>
 801d6bc:	4602      	mov	r2, r0
 801d6be:	4939      	ldr	r1, [pc, #228]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d6c0:	4623      	mov	r3, r4
 801d6c2:	009b      	lsls	r3, r3, #2
 801d6c4:	4423      	add	r3, r4
 801d6c6:	009b      	lsls	r3, r3, #2
 801d6c8:	440b      	add	r3, r1
 801d6ca:	3308      	adds	r3, #8
 801d6cc:	601a      	str	r2, [r3, #0]
			break;
 801d6ce:	bf00      	nop
		}
		actualRGB[channel].phase += period/(float)(leds[channel].effect.period);
 801d6d0:	79fa      	ldrb	r2, [r7, #7]
 801d6d2:	4934      	ldr	r1, [pc, #208]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d6d4:	4613      	mov	r3, r2
 801d6d6:	009b      	lsls	r3, r3, #2
 801d6d8:	4413      	add	r3, r2
 801d6da:	009b      	lsls	r3, r3, #2
 801d6dc:	440b      	add	r3, r1
 801d6de:	330c      	adds	r3, #12
 801d6e0:	ed93 7a00 	vldr	s14, [r3]
 801d6e4:	4b30      	ldr	r3, [pc, #192]	; (801d7a8 <LED_UpdateEffect+0x6c0>)
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	ee07 3a90 	vmov	s15, r3
 801d6ec:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801d6f0:	79fa      	ldrb	r2, [r7, #7]
 801d6f2:	492e      	ldr	r1, [pc, #184]	; (801d7ac <LED_UpdateEffect+0x6c4>)
 801d6f4:	4613      	mov	r3, r2
 801d6f6:	005b      	lsls	r3, r3, #1
 801d6f8:	4413      	add	r3, r2
 801d6fa:	00db      	lsls	r3, r3, #3
 801d6fc:	440b      	add	r3, r1
 801d6fe:	330e      	adds	r3, #14
 801d700:	881b      	ldrh	r3, [r3, #0]
 801d702:	ee07 3a90 	vmov	s15, r3
 801d706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d70a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801d70e:	79fa      	ldrb	r2, [r7, #7]
 801d710:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d714:	4923      	ldr	r1, [pc, #140]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d716:	4613      	mov	r3, r2
 801d718:	009b      	lsls	r3, r3, #2
 801d71a:	4413      	add	r3, r2
 801d71c:	009b      	lsls	r3, r3, #2
 801d71e:	440b      	add	r3, r1
 801d720:	330c      	adds	r3, #12
 801d722:	edc3 7a00 	vstr	s15, [r3]
		if(actualRGB[channel].phase > 1) actualRGB[channel].phase = 0;
 801d726:	79fa      	ldrb	r2, [r7, #7]
 801d728:	491e      	ldr	r1, [pc, #120]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d72a:	4613      	mov	r3, r2
 801d72c:	009b      	lsls	r3, r3, #2
 801d72e:	4413      	add	r3, r2
 801d730:	009b      	lsls	r3, r3, #2
 801d732:	440b      	add	r3, r1
 801d734:	330c      	adds	r3, #12
 801d736:	edd3 7a00 	vldr	s15, [r3]
 801d73a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d73e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d746:	dd0a      	ble.n	801d75e <LED_UpdateEffect+0x676>
 801d748:	79fa      	ldrb	r2, [r7, #7]
 801d74a:	4916      	ldr	r1, [pc, #88]	; (801d7a4 <LED_UpdateEffect+0x6bc>)
 801d74c:	4613      	mov	r3, r2
 801d74e:	009b      	lsls	r3, r3, #2
 801d750:	4413      	add	r3, r2
 801d752:	009b      	lsls	r3, r3, #2
 801d754:	440b      	add	r3, r1
 801d756:	330c      	adds	r3, #12
 801d758:	f04f 0200 	mov.w	r2, #0
 801d75c:	601a      	str	r2, [r3, #0]
	for(uint8_t channel = 0; channel <= 2; channel++)
 801d75e:	79fb      	ldrb	r3, [r7, #7]
 801d760:	3301      	adds	r3, #1
 801d762:	71fb      	strb	r3, [r7, #7]
 801d764:	79fb      	ldrb	r3, [r7, #7]
 801d766:	2b02      	cmp	r3, #2
 801d768:	f67f acc4 	bls.w	801d0f4 <LED_UpdateEffect+0xc>
	}
}
 801d76c:	bf00      	nop
 801d76e:	bf00      	nop
 801d770:	3708      	adds	r7, #8
 801d772:	46bd      	mov	sp, r7
 801d774:	bdb0      	pop	{r4, r5, r7, pc}
 801d776:	bf00      	nop
 801d778:	51eb851f 	.word	0x51eb851f
 801d77c:	40191eb8 	.word	0x40191eb8
 801d780:	cccccccd 	.word	0xcccccccd
 801d784:	3fdccccc 	.word	0x3fdccccc
 801d788:	9999999a 	.word	0x9999999a
 801d78c:	3fe19999 	.word	0x3fe19999
 801d790:	cccccccd 	.word	0xcccccccd
 801d794:	4000cccc 	.word	0x4000cccc
 801d798:	cccccccd 	.word	0xcccccccd
 801d79c:	4010cccc 	.word	0x4010cccc
 801d7a0:	20012500 	.word	0x20012500
 801d7a4:	200124c4 	.word	0x200124c4
 801d7a8:	2001253c 	.word	0x2001253c
 801d7ac:	2001247c 	.word	0x2001247c

0801d7b0 <LED_Iterate>:

void LED_Iterate()
{
 801d7b0:	b590      	push	{r4, r7, lr}
 801d7b2:	b083      	sub	sp, #12
 801d7b4:	af00      	add	r7, sp, #0
	LEDPosition++;
 801d7b6:	4b56      	ldr	r3, [pc, #344]	; (801d910 <LED_Iterate+0x160>)
 801d7b8:	781b      	ldrb	r3, [r3, #0]
 801d7ba:	3301      	adds	r3, #1
 801d7bc:	b2da      	uxtb	r2, r3
 801d7be:	4b54      	ldr	r3, [pc, #336]	; (801d910 <LED_Iterate+0x160>)
 801d7c0:	701a      	strb	r2, [r3, #0]
	if(LEDPosition > 2) LEDPosition = 0;
 801d7c2:	4b53      	ldr	r3, [pc, #332]	; (801d910 <LED_Iterate+0x160>)
 801d7c4:	781b      	ldrb	r3, [r3, #0]
 801d7c6:	2b02      	cmp	r3, #2
 801d7c8:	d902      	bls.n	801d7d0 <LED_Iterate+0x20>
 801d7ca:	4b51      	ldr	r3, [pc, #324]	; (801d910 <LED_Iterate+0x160>)
 801d7cc:	2200      	movs	r2, #0
 801d7ce:	701a      	strb	r2, [r3, #0]

	LED_PWMSET(actualRGB[LEDPosition].R, actualRGB[LEDPosition].G, actualRGB[LEDPosition].B);
 801d7d0:	4b4f      	ldr	r3, [pc, #316]	; (801d910 <LED_Iterate+0x160>)
 801d7d2:	781b      	ldrb	r3, [r3, #0]
 801d7d4:	4619      	mov	r1, r3
 801d7d6:	4a4f      	ldr	r2, [pc, #316]	; (801d914 <LED_Iterate+0x164>)
 801d7d8:	460b      	mov	r3, r1
 801d7da:	009b      	lsls	r3, r3, #2
 801d7dc:	440b      	add	r3, r1
 801d7de:	009b      	lsls	r3, r3, #2
 801d7e0:	4413      	add	r3, r2
 801d7e2:	edd3 7a00 	vldr	s15, [r3]
 801d7e6:	4b4a      	ldr	r3, [pc, #296]	; (801d910 <LED_Iterate+0x160>)
 801d7e8:	781b      	ldrb	r3, [r3, #0]
 801d7ea:	4619      	mov	r1, r3
 801d7ec:	4a49      	ldr	r2, [pc, #292]	; (801d914 <LED_Iterate+0x164>)
 801d7ee:	460b      	mov	r3, r1
 801d7f0:	009b      	lsls	r3, r3, #2
 801d7f2:	440b      	add	r3, r1
 801d7f4:	009b      	lsls	r3, r3, #2
 801d7f6:	4413      	add	r3, r2
 801d7f8:	3304      	adds	r3, #4
 801d7fa:	ed93 7a00 	vldr	s14, [r3]
 801d7fe:	4b44      	ldr	r3, [pc, #272]	; (801d910 <LED_Iterate+0x160>)
 801d800:	781b      	ldrb	r3, [r3, #0]
 801d802:	4619      	mov	r1, r3
 801d804:	4a43      	ldr	r2, [pc, #268]	; (801d914 <LED_Iterate+0x164>)
 801d806:	460b      	mov	r3, r1
 801d808:	009b      	lsls	r3, r3, #2
 801d80a:	440b      	add	r3, r1
 801d80c:	009b      	lsls	r3, r3, #2
 801d80e:	4413      	add	r3, r2
 801d810:	3308      	adds	r3, #8
 801d812:	edd3 6a00 	vldr	s13, [r3]
 801d816:	eeb0 1a66 	vmov.f32	s2, s13
 801d81a:	eef0 0a47 	vmov.f32	s1, s14
 801d81e:	eeb0 0a67 	vmov.f32	s0, s15
 801d822:	f000 f87b 	bl	801d91c <LED_PWMSET>

	uint8_t enabler = (actualRGB[LEDPosition].R + actualRGB[LEDPosition].G + actualRGB[LEDPosition].B) > 0.005 ? 1 : 0;
 801d826:	4b3a      	ldr	r3, [pc, #232]	; (801d910 <LED_Iterate+0x160>)
 801d828:	781b      	ldrb	r3, [r3, #0]
 801d82a:	4619      	mov	r1, r3
 801d82c:	4a39      	ldr	r2, [pc, #228]	; (801d914 <LED_Iterate+0x164>)
 801d82e:	460b      	mov	r3, r1
 801d830:	009b      	lsls	r3, r3, #2
 801d832:	440b      	add	r3, r1
 801d834:	009b      	lsls	r3, r3, #2
 801d836:	4413      	add	r3, r2
 801d838:	ed93 7a00 	vldr	s14, [r3]
 801d83c:	4b34      	ldr	r3, [pc, #208]	; (801d910 <LED_Iterate+0x160>)
 801d83e:	781b      	ldrb	r3, [r3, #0]
 801d840:	4619      	mov	r1, r3
 801d842:	4a34      	ldr	r2, [pc, #208]	; (801d914 <LED_Iterate+0x164>)
 801d844:	460b      	mov	r3, r1
 801d846:	009b      	lsls	r3, r3, #2
 801d848:	440b      	add	r3, r1
 801d84a:	009b      	lsls	r3, r3, #2
 801d84c:	4413      	add	r3, r2
 801d84e:	3304      	adds	r3, #4
 801d850:	edd3 7a00 	vldr	s15, [r3]
 801d854:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d858:	4b2d      	ldr	r3, [pc, #180]	; (801d910 <LED_Iterate+0x160>)
 801d85a:	781b      	ldrb	r3, [r3, #0]
 801d85c:	4619      	mov	r1, r3
 801d85e:	4a2d      	ldr	r2, [pc, #180]	; (801d914 <LED_Iterate+0x164>)
 801d860:	460b      	mov	r3, r1
 801d862:	009b      	lsls	r3, r3, #2
 801d864:	440b      	add	r3, r1
 801d866:	009b      	lsls	r3, r3, #2
 801d868:	4413      	add	r3, r2
 801d86a:	3308      	adds	r3, #8
 801d86c:	edd3 7a00 	vldr	s15, [r3]
 801d870:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d874:	ee17 0a90 	vmov	r0, s15
 801d878:	f7e8 faee 	bl	8005e58 <__aeabi_f2d>
 801d87c:	2301      	movs	r3, #1
 801d87e:	461c      	mov	r4, r3
 801d880:	a321      	add	r3, pc, #132	; (adr r3, 801d908 <LED_Iterate+0x158>)
 801d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d886:	f7e8 fdcf 	bl	8006428 <__aeabi_dcmpgt>
 801d88a:	4603      	mov	r3, r0
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	d101      	bne.n	801d894 <LED_Iterate+0xe4>
 801d890:	2300      	movs	r3, #0
 801d892:	461c      	mov	r4, r3
 801d894:	b2e3      	uxtb	r3, r4
 801d896:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED1_OUT_GPIO_Port, LED1_OUT_Pin, LEDPosition==0 && enabler);
 801d898:	4b1d      	ldr	r3, [pc, #116]	; (801d910 <LED_Iterate+0x160>)
 801d89a:	781b      	ldrb	r3, [r3, #0]
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d104      	bne.n	801d8aa <LED_Iterate+0xfa>
 801d8a0:	79fb      	ldrb	r3, [r7, #7]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d001      	beq.n	801d8aa <LED_Iterate+0xfa>
 801d8a6:	2301      	movs	r3, #1
 801d8a8:	e000      	b.n	801d8ac <LED_Iterate+0xfc>
 801d8aa:	2300      	movs	r3, #0
 801d8ac:	b2db      	uxtb	r3, r3
 801d8ae:	461a      	mov	r2, r3
 801d8b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d8b4:	4818      	ldr	r0, [pc, #96]	; (801d918 <LED_Iterate+0x168>)
 801d8b6:	f7ee f8c9 	bl	800ba4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_OUT_GPIO_Port, LED2_OUT_Pin, LEDPosition==1 && enabler);
 801d8ba:	4b15      	ldr	r3, [pc, #84]	; (801d910 <LED_Iterate+0x160>)
 801d8bc:	781b      	ldrb	r3, [r3, #0]
 801d8be:	2b01      	cmp	r3, #1
 801d8c0:	d104      	bne.n	801d8cc <LED_Iterate+0x11c>
 801d8c2:	79fb      	ldrb	r3, [r7, #7]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d001      	beq.n	801d8cc <LED_Iterate+0x11c>
 801d8c8:	2301      	movs	r3, #1
 801d8ca:	e000      	b.n	801d8ce <LED_Iterate+0x11e>
 801d8cc:	2300      	movs	r3, #0
 801d8ce:	b2db      	uxtb	r3, r3
 801d8d0:	461a      	mov	r2, r3
 801d8d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801d8d6:	4810      	ldr	r0, [pc, #64]	; (801d918 <LED_Iterate+0x168>)
 801d8d8:	f7ee f8b8 	bl	800ba4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_OUT_GPIO_Port, LED3_OUT_Pin, LEDPosition==2 && enabler);
 801d8dc:	4b0c      	ldr	r3, [pc, #48]	; (801d910 <LED_Iterate+0x160>)
 801d8de:	781b      	ldrb	r3, [r3, #0]
 801d8e0:	2b02      	cmp	r3, #2
 801d8e2:	d104      	bne.n	801d8ee <LED_Iterate+0x13e>
 801d8e4:	79fb      	ldrb	r3, [r7, #7]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d001      	beq.n	801d8ee <LED_Iterate+0x13e>
 801d8ea:	2301      	movs	r3, #1
 801d8ec:	e000      	b.n	801d8f0 <LED_Iterate+0x140>
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	b2db      	uxtb	r3, r3
 801d8f2:	461a      	mov	r2, r3
 801d8f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d8f8:	4807      	ldr	r0, [pc, #28]	; (801d918 <LED_Iterate+0x168>)
 801d8fa:	f7ee f8a7 	bl	800ba4c <HAL_GPIO_WritePin>
}
 801d8fe:	bf00      	nop
 801d900:	370c      	adds	r7, #12
 801d902:	46bd      	mov	sp, r7
 801d904:	bd90      	pop	{r4, r7, pc}
 801d906:	bf00      	nop
 801d908:	47ae147b 	.word	0x47ae147b
 801d90c:	3f747ae1 	.word	0x3f747ae1
 801d910:	20012479 	.word	0x20012479
 801d914:	200124c4 	.word	0x200124c4
 801d918:	48000400 	.word	0x48000400

0801d91c <LED_PWMSET>:

void LED_PWMSET(float R, float G, float B)
{
 801d91c:	b580      	push	{r7, lr}
 801d91e:	b084      	sub	sp, #16
 801d920:	af00      	add	r7, sp, #0
 801d922:	ed87 0a03 	vstr	s0, [r7, #12]
 801d926:	edc7 0a02 	vstr	s1, [r7, #8]
 801d92a:	ed87 1a01 	vstr	s2, [r7, #4]
	TIM5->CCR1 = 1000 - (uint16_t)(R * 1000.0);// set Red
 801d92e:	68f8      	ldr	r0, [r7, #12]
 801d930:	f7e8 fa92 	bl	8005e58 <__aeabi_f2d>
 801d934:	f04f 0200 	mov.w	r2, #0
 801d938:	4b1d      	ldr	r3, [pc, #116]	; (801d9b0 <LED_PWMSET+0x94>)
 801d93a:	f7e8 fae5 	bl	8005f08 <__aeabi_dmul>
 801d93e:	4602      	mov	r2, r0
 801d940:	460b      	mov	r3, r1
 801d942:	4610      	mov	r0, r2
 801d944:	4619      	mov	r1, r3
 801d946:	f7e8 fd79 	bl	800643c <__aeabi_d2uiz>
 801d94a:	4603      	mov	r3, r0
 801d94c:	b29b      	uxth	r3, r3
 801d94e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 801d952:	4b18      	ldr	r3, [pc, #96]	; (801d9b4 <LED_PWMSET+0x98>)
 801d954:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR4 = 1000 - (uint16_t)(G * 1000.0);// set Green
 801d956:	68b8      	ldr	r0, [r7, #8]
 801d958:	f7e8 fa7e 	bl	8005e58 <__aeabi_f2d>
 801d95c:	f04f 0200 	mov.w	r2, #0
 801d960:	4b13      	ldr	r3, [pc, #76]	; (801d9b0 <LED_PWMSET+0x94>)
 801d962:	f7e8 fad1 	bl	8005f08 <__aeabi_dmul>
 801d966:	4602      	mov	r2, r0
 801d968:	460b      	mov	r3, r1
 801d96a:	4610      	mov	r0, r2
 801d96c:	4619      	mov	r1, r3
 801d96e:	f7e8 fd65 	bl	800643c <__aeabi_d2uiz>
 801d972:	4603      	mov	r3, r0
 801d974:	b29b      	uxth	r3, r3
 801d976:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 801d97a:	4b0f      	ldr	r3, [pc, #60]	; (801d9b8 <LED_PWMSET+0x9c>)
 801d97c:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CCR3 = 1000 - (uint16_t)(B * 1000.0);// set Blue
 801d97e:	6878      	ldr	r0, [r7, #4]
 801d980:	f7e8 fa6a 	bl	8005e58 <__aeabi_f2d>
 801d984:	f04f 0200 	mov.w	r2, #0
 801d988:	4b09      	ldr	r3, [pc, #36]	; (801d9b0 <LED_PWMSET+0x94>)
 801d98a:	f7e8 fabd 	bl	8005f08 <__aeabi_dmul>
 801d98e:	4602      	mov	r2, r0
 801d990:	460b      	mov	r3, r1
 801d992:	4610      	mov	r0, r2
 801d994:	4619      	mov	r1, r3
 801d996:	f7e8 fd51 	bl	800643c <__aeabi_d2uiz>
 801d99a:	4603      	mov	r3, r0
 801d99c:	b29b      	uxth	r3, r3
 801d99e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 801d9a2:	4b05      	ldr	r3, [pc, #20]	; (801d9b8 <LED_PWMSET+0x9c>)
 801d9a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801d9a6:	bf00      	nop
 801d9a8:	3710      	adds	r7, #16
 801d9aa:	46bd      	mov	sp, r7
 801d9ac:	bd80      	pop	{r7, pc}
 801d9ae:	bf00      	nop
 801d9b0:	408f4000 	.word	0x408f4000
 801d9b4:	40000c00 	.word	0x40000c00
 801d9b8:	40000400 	.word	0x40000400

0801d9bc <LED_PWMCLEAR>:

void LED_PWMCLEAR()
{
 801d9bc:	b480      	push	{r7}
 801d9be:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 1000;// set Red
 801d9c0:	4b08      	ldr	r3, [pc, #32]	; (801d9e4 <LED_PWMCLEAR+0x28>)
 801d9c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d9c6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR4 = 1000;// set Green
 801d9c8:	4b07      	ldr	r3, [pc, #28]	; (801d9e8 <LED_PWMCLEAR+0x2c>)
 801d9ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d9ce:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CCR3 = 1000;// set Blue
 801d9d0:	4b05      	ldr	r3, [pc, #20]	; (801d9e8 <LED_PWMCLEAR+0x2c>)
 801d9d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d9d6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801d9d8:	bf00      	nop
 801d9da:	46bd      	mov	sp, r7
 801d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9e0:	4770      	bx	lr
 801d9e2:	bf00      	nop
 801d9e4:	40000c00 	.word	0x40000c00
 801d9e8:	40000400 	.word	0x40000400

0801d9ec <LED_Preset>:
 */

#include "UDEV1_LEDpresets.h"

RGBLEDS_struct LED_Preset(LEDpreset_enum LEDpreset)
{
 801d9ec:	b4b0      	push	{r4, r5, r7}
 801d9ee:	b089      	sub	sp, #36	; 0x24
 801d9f0:	af00      	add	r7, sp, #0
 801d9f2:	6078      	str	r0, [r7, #4]
 801d9f4:	460b      	mov	r3, r1
 801d9f6:	70fb      	strb	r3, [r7, #3]
	RGBLEDS_struct presetStruct;
	presetStruct.R = 0;
 801d9f8:	f04f 0300 	mov.w	r3, #0
 801d9fc:	60bb      	str	r3, [r7, #8]
	presetStruct.G = 0;
 801d9fe:	f04f 0300 	mov.w	r3, #0
 801da02:	60fb      	str	r3, [r7, #12]
	presetStruct.B = 0;
 801da04:	f04f 0300 	mov.w	r3, #0
 801da08:	613b      	str	r3, [r7, #16]
	presetStruct.effect.type = EFFECT_OFF;
 801da0a:	2300      	movs	r3, #0
 801da0c:	753b      	strb	r3, [r7, #20]
	presetStruct.effect.period = 1000;
 801da0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801da12:	82fb      	strh	r3, [r7, #22]
	presetStruct.effect.dutycycle = 0.5;
 801da14:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801da18:	61bb      	str	r3, [r7, #24]
	presetStruct.transition.type = TRANSITION_FADE;
 801da1a:	2302      	movs	r3, #2
 801da1c:	773b      	strb	r3, [r7, #28]
	presetStruct.transition.time = 25;
 801da1e:	2319      	movs	r3, #25
 801da20:	83fb      	strh	r3, [r7, #30]

	switch (LEDpreset)
 801da22:	78fb      	ldrb	r3, [r7, #3]
 801da24:	3b01      	subs	r3, #1
 801da26:	2b06      	cmp	r3, #6
 801da28:	d810      	bhi.n	801da4c <LED_Preset+0x60>
 801da2a:	a201      	add	r2, pc, #4	; (adr r2, 801da30 <LED_Preset+0x44>)
 801da2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da30:	0801da57 	.word	0x0801da57
 801da34:	0801da6b 	.word	0x0801da6b
 801da38:	0801da83 	.word	0x0801da83
 801da3c:	0801da8f 	.word	0x0801da8f
 801da40:	0801da9b 	.word	0x0801da9b
 801da44:	0801dab3 	.word	0x0801dab3
 801da48:	0801dacb 	.word	0x0801dacb
	{
		default: //OFF
			presetStruct.transition.type = TRANSITION_FADE;
 801da4c:	2302      	movs	r3, #2
 801da4e:	773b      	strb	r3, [r7, #28]
			presetStruct.transition.time = 50;
 801da50:	2332      	movs	r3, #50	; 0x32
 801da52:	83fb      	strh	r3, [r7, #30]
			break;
 801da54:	e045      	b.n	801dae2 <LED_Preset+0xf6>
		case PRESET_OVERCURRENT:
			presetStruct.R = 1;
 801da56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801da5a:	60bb      	str	r3, [r7, #8]
			presetStruct.effect.type = EFFECT_BLINK;
 801da5c:	2302      	movs	r3, #2
 801da5e:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 200;
 801da60:	23c8      	movs	r3, #200	; 0xc8
 801da62:	82fb      	strh	r3, [r7, #22]
			presetStruct.transition.type = TRANSITION_INSTANT;
 801da64:	2300      	movs	r3, #0
 801da66:	773b      	strb	r3, [r7, #28]
			break;
 801da68:	e03b      	b.n	801dae2 <LED_Preset+0xf6>
		case PRESET_NOTLINKEDWITHPC:
			presetStruct.R = 1;
 801da6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801da6e:	60bb      	str	r3, [r7, #8]
			presetStruct.G = 0.5;
 801da70:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801da74:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_BREATHE;
 801da76:	2304      	movs	r3, #4
 801da78:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 1400;
 801da7a:	f44f 63af 	mov.w	r3, #1400	; 0x578
 801da7e:	82fb      	strh	r3, [r7, #22]
			break;
 801da80:	e02f      	b.n	801dae2 <LED_Preset+0xf6>
		case PRESET_LINKEDTOPC:
			presetStruct.G = 0.5;
 801da82:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801da86:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_ON;
 801da88:	2301      	movs	r3, #1
 801da8a:	753b      	strb	r3, [r7, #20]
			break;
 801da8c:	e029      	b.n	801dae2 <LED_Preset+0xf6>
		case PRESET_CARDRECOGNISED:
			presetStruct.G = 1;
 801da8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801da92:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_ON;
 801da94:	2301      	movs	r3, #1
 801da96:	753b      	strb	r3, [r7, #20]
			break;
 801da98:	e023      	b.n	801dae2 <LED_Preset+0xf6>
		case PRESET_CARDNOTDETECTED:
			presetStruct.R = 1;
 801da9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801da9e:	60bb      	str	r3, [r7, #8]
			presetStruct.G = 0.5;
 801daa0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801daa4:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_BREATHE;
 801daa6:	2304      	movs	r3, #4
 801daa8:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 2000;
 801daaa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801daae:	82fb      	strh	r3, [r7, #22]
			break;
 801dab0:	e017      	b.n	801dae2 <LED_Preset+0xf6>
		case PRESET_CARDNOTRECOGNISED:
			presetStruct.R = 1;
 801dab2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801dab6:	60bb      	str	r3, [r7, #8]
			presetStruct.G = 0.5;
 801dab8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801dabc:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_COLORSHIFT;
 801dabe:	2305      	movs	r3, #5
 801dac0:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 400;
 801dac2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801dac6:	82fb      	strh	r3, [r7, #22]
			break;
 801dac8:	e00b      	b.n	801dae2 <LED_Preset+0xf6>
		case PRESET_CARDCOMFAIL:
			presetStruct.R = 1;
 801daca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801dace:	60bb      	str	r3, [r7, #8]
			presetStruct.B = 1;
 801dad0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801dad4:	613b      	str	r3, [r7, #16]
			presetStruct.effect.type = EFFECT_COLORSHIFT;
 801dad6:	2305      	movs	r3, #5
 801dad8:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 400;
 801dada:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801dade:	82fb      	strh	r3, [r7, #22]
			break;
 801dae0:	bf00      	nop
	}
	return presetStruct;
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	461d      	mov	r5, r3
 801dae6:	f107 0408 	add.w	r4, r7, #8
 801daea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801daec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801daee:	e894 0003 	ldmia.w	r4, {r0, r1}
 801daf2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 801daf6:	6878      	ldr	r0, [r7, #4]
 801daf8:	3724      	adds	r7, #36	; 0x24
 801dafa:	46bd      	mov	sp, r7
 801dafc:	bcb0      	pop	{r4, r5, r7}
 801dafe:	4770      	bx	lr

0801db00 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 801db00:	b580      	push	{r7, lr}
 801db02:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 801db04:	f7f8 ff2f 	bl	8016966 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 801db08:	f000 f814 	bl	801db34 <USBPD_DPM_InitCore>
 801db0c:	4603      	mov	r3, r0
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d000      	beq.n	801db14 <MX_USBPD_Init+0x14>
  {
    while(1);
 801db12:	e7fe      	b.n	801db12 <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 801db14:	f000 fa24 	bl	801df60 <USBPD_DPM_UserInit>
 801db18:	4603      	mov	r3, r0
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d000      	beq.n	801db20 <MX_USBPD_Init+0x20>
  {
    while(1);
 801db1e:	e7fe      	b.n	801db1e <MX_USBPD_Init+0x1e>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 801db20:	f000 f8b6 	bl	801dc90 <USBPD_DPM_InitOS>
 801db24:	4603      	mov	r3, r0
 801db26:	2b00      	cmp	r3, #0
 801db28:	d000      	beq.n	801db2c <MX_USBPD_Init+0x2c>
  {
    while(1);
 801db2a:	e7fe      	b.n	801db2a <MX_USBPD_Init+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 801db2c:	b662      	cpsie	i
}
 801db2e:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801db30:	bf00      	nop
 801db32:	bd80      	pop	{r7, pc}

0801db34 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 801db34:	b580      	push	{r7, lr}
 801db36:	b082      	sub	sp, #8
 801db38:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801db3a:	2300      	movs	r3, #0
 801db3c:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 801db3e:	484f      	ldr	r0, [pc, #316]	; (801dc7c <USBPD_DPM_InitCore+0x148>)
 801db40:	f7e3 fc7b 	bl	800143a <USBPD_PE_CheckLIB>
 801db44:	4603      	mov	r3, r0
 801db46:	2b01      	cmp	r3, #1
 801db48:	d001      	beq.n	801db4e <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 801db4a:	2302      	movs	r3, #2
 801db4c:	e092      	b.n	801dc74 <USBPD_DPM_InitCore+0x140>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801db4e:	f7e3 fc7f 	bl	8001450 <USBPD_PE_GetMemoryConsumption>
 801db52:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801db54:	2300      	movs	r3, #0
 801db56:	71bb      	strb	r3, [r7, #6]
 801db58:	e087      	b.n	801dc6a <USBPD_DPM_InitCore+0x136>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801db5a:	79bb      	ldrb	r3, [r7, #6]
 801db5c:	4a48      	ldr	r2, [pc, #288]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801db5e:	009b      	lsls	r3, r3, #2
 801db60:	4413      	add	r3, r2
 801db62:	785a      	ldrb	r2, [r3, #1]
 801db64:	f36f 02c3 	bfc	r2, #3, #1
 801db68:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801db6a:	79b9      	ldrb	r1, [r7, #6]
 801db6c:	79ba      	ldrb	r2, [r7, #6]
 801db6e:	4845      	ldr	r0, [pc, #276]	; (801dc84 <USBPD_DPM_InitCore+0x150>)
 801db70:	460b      	mov	r3, r1
 801db72:	005b      	lsls	r3, r3, #1
 801db74:	440b      	add	r3, r1
 801db76:	009b      	lsls	r3, r3, #2
 801db78:	4403      	add	r3, r0
 801db7a:	791b      	ldrb	r3, [r3, #4]
 801db7c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801db80:	b2d8      	uxtb	r0, r3
 801db82:	493f      	ldr	r1, [pc, #252]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801db84:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801db88:	f360 0301 	bfi	r3, r0, #0, #2
 801db8c:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801db90:	79b9      	ldrb	r1, [r7, #6]
 801db92:	79ba      	ldrb	r2, [r7, #6]
 801db94:	483b      	ldr	r0, [pc, #236]	; (801dc84 <USBPD_DPM_InitCore+0x150>)
 801db96:	460b      	mov	r3, r1
 801db98:	005b      	lsls	r3, r3, #1
 801db9a:	440b      	add	r3, r1
 801db9c:	009b      	lsls	r3, r3, #2
 801db9e:	4403      	add	r3, r0
 801dba0:	791b      	ldrb	r3, [r3, #4]
 801dba2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801dba6:	b2d8      	uxtb	r0, r3
 801dba8:	4935      	ldr	r1, [pc, #212]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801dbaa:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801dbae:	f360 0382 	bfi	r3, r0, #2, #1
 801dbb2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801dbb6:	79ba      	ldrb	r2, [r7, #6]
 801dbb8:	4931      	ldr	r1, [pc, #196]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801dbba:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801dbbe:	f36f 1304 	bfc	r3, #4, #1
 801dbc2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801dbc6:	79ba      	ldrb	r2, [r7, #6]
 801dbc8:	492d      	ldr	r1, [pc, #180]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801dbca:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801dbce:	f36f 1387 	bfc	r3, #6, #2
 801dbd2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801dbd6:	79bb      	ldrb	r3, [r7, #6]
 801dbd8:	4a29      	ldr	r2, [pc, #164]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801dbda:	009b      	lsls	r3, r3, #2
 801dbdc:	4413      	add	r3, r2
 801dbde:	785a      	ldrb	r2, [r3, #1]
 801dbe0:	f36f 1246 	bfc	r2, #5, #2
 801dbe4:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 801dbe6:	79bb      	ldrb	r3, [r7, #6]
 801dbe8:	4a25      	ldr	r2, [pc, #148]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801dbea:	009b      	lsls	r3, r3, #2
 801dbec:	4413      	add	r3, r2
 801dbee:	785a      	ldrb	r2, [r3, #1]
 801dbf0:	f36f 12c7 	bfc	r2, #7, #1
 801dbf4:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 801dbf6:	79ba      	ldrb	r2, [r7, #6]
 801dbf8:	4613      	mov	r3, r2
 801dbfa:	005b      	lsls	r3, r3, #1
 801dbfc:	4413      	add	r3, r2
 801dbfe:	009b      	lsls	r3, r3, #2
 801dc00:	4a20      	ldr	r2, [pc, #128]	; (801dc84 <USBPD_DPM_InitCore+0x150>)
 801dc02:	441a      	add	r2, r3
 801dc04:	79bb      	ldrb	r3, [r7, #6]
 801dc06:	009b      	lsls	r3, r3, #2
 801dc08:	491d      	ldr	r1, [pc, #116]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801dc0a:	440b      	add	r3, r1
 801dc0c:	79b8      	ldrb	r0, [r7, #6]
 801dc0e:	491e      	ldr	r1, [pc, #120]	; (801dc88 <USBPD_DPM_InitCore+0x154>)
 801dc10:	f7e2 fb06 	bl	8000220 <USBPD_CAD_Init>
 801dc14:	4603      	mov	r3, r0
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d001      	beq.n	801dc1e <USBPD_DPM_InitCore+0xea>
 801dc1a:	2302      	movs	r3, #2
 801dc1c:	e02a      	b.n	801dc74 <USBPD_DPM_InitCore+0x140>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 801dc1e:	79ba      	ldrb	r2, [r7, #6]
 801dc20:	4613      	mov	r3, r2
 801dc22:	005b      	lsls	r3, r3, #1
 801dc24:	4413      	add	r3, r2
 801dc26:	009b      	lsls	r3, r3, #2
 801dc28:	4a16      	ldr	r2, [pc, #88]	; (801dc84 <USBPD_DPM_InitCore+0x150>)
 801dc2a:	1899      	adds	r1, r3, r2
 801dc2c:	79bb      	ldrb	r3, [r7, #6]
 801dc2e:	009b      	lsls	r3, r3, #2
 801dc30:	4a13      	ldr	r2, [pc, #76]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801dc32:	441a      	add	r2, r3
 801dc34:	79b8      	ldrb	r0, [r7, #6]
 801dc36:	4b15      	ldr	r3, [pc, #84]	; (801dc8c <USBPD_DPM_InitCore+0x158>)
 801dc38:	f7e2 fbc0 	bl	80003bc <USBPD_PE_Init>
 801dc3c:	4603      	mov	r3, r0
 801dc3e:	71fb      	strb	r3, [r7, #7]
 801dc40:	79fb      	ldrb	r3, [r7, #7]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d001      	beq.n	801dc4a <USBPD_DPM_InitCore+0x116>
 801dc46:	79fb      	ldrb	r3, [r7, #7]
 801dc48:	e014      	b.n	801dc74 <USBPD_DPM_InitCore+0x140>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801dc4a:	79bb      	ldrb	r3, [r7, #6]
 801dc4c:	4a0c      	ldr	r2, [pc, #48]	; (801dc80 <USBPD_DPM_InitCore+0x14c>)
 801dc4e:	009b      	lsls	r3, r3, #2
 801dc50:	4413      	add	r3, r2
 801dc52:	785a      	ldrb	r2, [r3, #1]
 801dc54:	f042 0208 	orr.w	r2, r2, #8
 801dc58:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801dc5a:	79bb      	ldrb	r3, [r7, #6]
 801dc5c:	2101      	movs	r1, #1
 801dc5e:	4618      	mov	r0, r3
 801dc60:	f7e2 fb06 	bl	8000270 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801dc64:	79bb      	ldrb	r3, [r7, #6]
 801dc66:	3301      	adds	r3, #1
 801dc68:	71bb      	strb	r3, [r7, #6]
 801dc6a:	79bb      	ldrb	r3, [r7, #6]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	f43f af74 	beq.w	801db5a <USBPD_DPM_InitCore+0x26>
  }

  return _retr;
 801dc72:	79fb      	ldrb	r3, [r7, #7]
}
 801dc74:	4618      	mov	r0, r3
 801dc76:	3708      	adds	r7, #8
 801dc78:	46bd      	mov	sp, r7
 801dc7a:	bd80      	pop	{r7, pc}
 801dc7c:	30410000 	.word	0x30410000
 801dc80:	2001254c 	.word	0x2001254c
 801dc84:	20000128 	.word	0x20000128
 801dc88:	08020554 	.word	0x08020554
 801dc8c:	0802055c 	.word	0x0802055c

0801dc90 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 801dc90:	b580      	push	{r7, lr}
 801dc92:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
 801dc94:	2200      	movs	r2, #0
 801dc96:	2102      	movs	r1, #2
 801dc98:	2002      	movs	r0, #2
 801dc9a:	f7fb fe0f 	bl	80198bc <osMessageQueueNew>
 801dc9e:	4603      	mov	r3, r0
 801dca0:	4a0c      	ldr	r2, [pc, #48]	; (801dcd4 <USBPD_DPM_InitOS+0x44>)
 801dca2:	6013      	str	r3, [r2, #0]
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
 801dca4:	4a0c      	ldr	r2, [pc, #48]	; (801dcd8 <USBPD_DPM_InitOS+0x48>)
 801dca6:	490b      	ldr	r1, [pc, #44]	; (801dcd4 <USBPD_DPM_InitOS+0x44>)
 801dca8:	480c      	ldr	r0, [pc, #48]	; (801dcdc <USBPD_DPM_InitOS+0x4c>)
 801dcaa:	f7fb fc1f 	bl	80194ec <osThreadNew>
 801dcae:	4603      	mov	r3, r0
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d101      	bne.n	801dcb8 <USBPD_DPM_InitOS+0x28>
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 801dcb4:	2302      	movs	r3, #2
 801dcb6:	e00b      	b.n	801dcd0 <USBPD_DPM_InitOS+0x40>
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
#if USBPD_PORT_COUNT == 2
  PEQueueId[1] = osMessageCreate(osMessageQ(queuePE), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#else
  PEQueueId[0] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
 801dcb8:	2200      	movs	r2, #0
 801dcba:	2102      	movs	r1, #2
 801dcbc:	2001      	movs	r0, #1
 801dcbe:	f7fb fdfd 	bl	80198bc <osMessageQueueNew>
 801dcc2:	4603      	mov	r3, r0
 801dcc4:	4a06      	ldr	r2, [pc, #24]	; (801dce0 <USBPD_DPM_InitOS+0x50>)
 801dcc6:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 801dcc8:	4b06      	ldr	r3, [pc, #24]	; (801dce4 <USBPD_DPM_InitOS+0x54>)
 801dcca:	2200      	movs	r2, #0
 801dccc:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 801dcce:	2300      	movs	r3, #0
}
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	bd80      	pop	{r7, pc}
 801dcd4:	20012540 	.word	0x20012540
 801dcd8:	200001b4 	.word	0x200001b4
 801dcdc:	0801dd9d 	.word	0x0801dd9d
 801dce0:	20012548 	.word	0x20012548
 801dce4:	20012544 	.word	0x20012544

0801dce8 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801dce8:	b580      	push	{r7, lr}
 801dcea:	b084      	sub	sp, #16
 801dcec:	af00      	add	r7, sp, #0
 801dcee:	4603      	mov	r3, r0
 801dcf0:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 801dcf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dcf6:	60fb      	str	r3, [r7, #12]
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
 801dcf8:	79fb      	ldrb	r3, [r7, #7]
 801dcfa:	4a06      	ldr	r2, [pc, #24]	; (801dd14 <USBPD_PE_TaskWakeUp+0x2c>)
 801dcfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dd00:	f107 010c 	add.w	r1, r7, #12
 801dd04:	2300      	movs	r3, #0
 801dd06:	2200      	movs	r2, #0
 801dd08:	f7fb fe4c 	bl	80199a4 <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 801dd0c:	bf00      	nop
 801dd0e:	3710      	adds	r7, #16
 801dd10:	46bd      	mov	sp, r7
 801dd12:	bd80      	pop	{r7, pc}
 801dd14:	20012548 	.word	0x20012548

0801dd18 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801dd18:	b580      	push	{r7, lr}
 801dd1a:	b082      	sub	sp, #8
 801dd1c:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 801dd1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dd22:	607b      	str	r3, [r7, #4]
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
 801dd24:	4b05      	ldr	r3, [pc, #20]	; (801dd3c <USBPD_DPM_CADTaskWakeUp+0x24>)
 801dd26:	6818      	ldr	r0, [r3, #0]
 801dd28:	1d39      	adds	r1, r7, #4
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	2200      	movs	r2, #0
 801dd2e:	f7fb fe39 	bl	80199a4 <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 801dd32:	bf00      	nop
 801dd34:	3708      	adds	r7, #8
 801dd36:	46bd      	mov	sp, r7
 801dd38:	bd80      	pop	{r7, pc}
 801dd3a:	bf00      	nop
 801dd3c:	20012540 	.word	0x20012540

0801dd40 <USBPD_PE_Task_P0>:
  * @brief  Main task for PE layer on Port0
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P0(void *argument)
{
 801dd40:	b580      	push	{r7, lr}
 801dd42:	b082      	sub	sp, #8
 801dd44:	af00      	add	r7, sp, #0
 801dd46:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_0);
 801dd48:	2000      	movs	r0, #0
 801dd4a:	f000 f80f 	bl	801dd6c <PE_Task>
}
 801dd4e:	bf00      	nop
 801dd50:	3708      	adds	r7, #8
 801dd52:	46bd      	mov	sp, r7
 801dd54:	bd80      	pop	{r7, pc}

0801dd56 <USBPD_PE_Task_P1>:
  * @brief  Main task for PE layer on Port1
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P1(void *argument)
{
 801dd56:	b580      	push	{r7, lr}
 801dd58:	b082      	sub	sp, #8
 801dd5a:	af00      	add	r7, sp, #0
 801dd5c:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_1);
 801dd5e:	2001      	movs	r0, #1
 801dd60:	f000 f804 	bl	801dd6c <PE_Task>
}
 801dd64:	bf00      	nop
 801dd66:	3708      	adds	r7, #8
 801dd68:	46bd      	mov	sp, r7
 801dd6a:	bd80      	pop	{r7, pc}

0801dd6c <PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
static void PE_Task(uint32_t PortNum)
{
 801dd6c:	b590      	push	{r4, r7, lr}
 801dd6e:	b085      	sub	sp, #20
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    uint32_t event;
    (void)osMessageQueueGet(PEQueueId[PortNum], &event, NULL,
 801dd74:	4a08      	ldr	r2, [pc, #32]	; (801dd98 <PE_Task+0x2c>)
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	b2db      	uxtb	r3, r3
 801dd80:	4618      	mov	r0, r3
 801dd82:	f7e3 ffb5 	bl	8001cf0 <USBPD_PE_StateMachine_SNK>
 801dd86:	4603      	mov	r3, r0
 801dd88:	f107 010c 	add.w	r1, r7, #12
 801dd8c:	2200      	movs	r2, #0
 801dd8e:	4620      	mov	r0, r4
 801dd90:	f7fb fe68 	bl	8019a64 <osMessageQueueGet>
  {
 801dd94:	e7ee      	b.n	801dd74 <PE_Task+0x8>
 801dd96:	bf00      	nop
 801dd98:	20012548 	.word	0x20012548

0801dd9c <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 801dd9c:	b590      	push	{r4, r7, lr}
 801dd9e:	b085      	sub	sp, #20
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
#else
    uint32_t event;
    (void)osMessageQueueGet(CADQueueId, &event, NULL, USBPD_CAD_Process());
 801dda4:	4b05      	ldr	r3, [pc, #20]	; (801ddbc <USBPD_CAD_Task+0x20>)
 801dda6:	681c      	ldr	r4, [r3, #0]
 801dda8:	f7e2 fa69 	bl	800027e <USBPD_CAD_Process>
 801ddac:	4603      	mov	r3, r0
 801ddae:	f107 010c 	add.w	r1, r7, #12
 801ddb2:	2200      	movs	r2, #0
 801ddb4:	4620      	mov	r0, r4
 801ddb6:	f7fb fe55 	bl	8019a64 <osMessageQueueGet>
  {
 801ddba:	e7f3      	b.n	801dda4 <USBPD_CAD_Task+0x8>
 801ddbc:	20012540 	.word	0x20012540

0801ddc0 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801ddc0:	b580      	push	{r7, lr}
 801ddc2:	b084      	sub	sp, #16
 801ddc4:	af00      	add	r7, sp, #0
 801ddc6:	4603      	mov	r3, r0
 801ddc8:	603a      	str	r2, [r7, #0]
 801ddca:	71fb      	strb	r3, [r7, #7]
 801ddcc:	460b      	mov	r3, r1
 801ddce:	71bb      	strb	r3, [r7, #6]

  switch (State)
 801ddd0:	79bb      	ldrb	r3, [r7, #6]
 801ddd2:	3b01      	subs	r3, #1
 801ddd4:	2b03      	cmp	r3, #3
 801ddd6:	d867      	bhi.n	801dea8 <USBPD_DPM_CADCallback+0xe8>
 801ddd8:	a201      	add	r2, pc, #4	; (adr r2, 801dde0 <USBPD_DPM_CADCallback+0x20>)
 801ddda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ddde:	bf00      	nop
 801dde0:	0801de0d 	.word	0x0801de0d
 801dde4:	0801ddff 	.word	0x0801ddff
 801dde8:	0801de0d 	.word	0x0801de0d
 801ddec:	0801ddf1 	.word	0x0801ddf1
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 801ddf0:	79b9      	ldrb	r1, [r7, #6]
 801ddf2:	79fb      	ldrb	r3, [r7, #7]
 801ddf4:	683a      	ldr	r2, [r7, #0]
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	f000 f860 	bl	801debc <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 801ddfc:	e055      	b.n	801deaa <USBPD_DPM_CADCallback+0xea>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 801ddfe:	79b9      	ldrb	r1, [r7, #6]
 801de00:	79fb      	ldrb	r3, [r7, #7]
 801de02:	683a      	ldr	r2, [r7, #0]
 801de04:	4618      	mov	r0, r3
 801de06:	f000 f859 	bl	801debc <DPM_ManageAttachedState>
      break;
 801de0a:	e04e      	b.n	801deaa <USBPD_DPM_CADCallback+0xea>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 801de0c:	79fb      	ldrb	r3, [r7, #7]
 801de0e:	2100      	movs	r1, #0
 801de10:	4618      	mov	r0, r3
 801de12:	f7e2 fb7c 	bl	800050e <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 801de16:	79fb      	ldrb	r3, [r7, #7]
 801de18:	4a26      	ldr	r2, [pc, #152]	; (801deb4 <USBPD_DPM_CADCallback+0xf4>)
 801de1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d023      	beq.n	801de6a <USBPD_DPM_CADCallback+0xaa>
      {
        uint8_t _timeout = 0;
 801de22:	2300      	movs	r3, #0
 801de24:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 801de26:	e008      	b.n	801de3a <USBPD_DPM_CADCallback+0x7a>
        {
          osDelay(1);
 801de28:	2001      	movs	r0, #1
 801de2a:	f7fb fc1e 	bl	801966a <osDelay>
          _timeout++;
 801de2e:	7bfb      	ldrb	r3, [r7, #15]
 801de30:	3301      	adds	r3, #1
 801de32:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 801de34:	7bfb      	ldrb	r3, [r7, #15]
 801de36:	2b1e      	cmp	r3, #30
 801de38:	d80a      	bhi.n	801de50 <USBPD_DPM_CADCallback+0x90>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 801de3a:	79fb      	ldrb	r3, [r7, #7]
 801de3c:	4a1d      	ldr	r2, [pc, #116]	; (801deb4 <USBPD_DPM_CADCallback+0xf4>)
 801de3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de42:	4618      	mov	r0, r3
 801de44:	f7fd f932 	bl	801b0ac <eTaskGetState>
 801de48:	4603      	mov	r3, r0
 801de4a:	2b02      	cmp	r3, #2
 801de4c:	d1ec      	bne.n	801de28 <USBPD_DPM_CADCallback+0x68>
 801de4e:	e000      	b.n	801de52 <USBPD_DPM_CADCallback+0x92>
          {
            break;
 801de50:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 801de52:	79fb      	ldrb	r3, [r7, #7]
 801de54:	4a17      	ldr	r2, [pc, #92]	; (801deb4 <USBPD_DPM_CADCallback+0xf4>)
 801de56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de5a:	4618      	mov	r0, r3
 801de5c:	f7fb fbd8 	bl	8019610 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 801de60:	79fb      	ldrb	r3, [r7, #7]
 801de62:	4a14      	ldr	r2, [pc, #80]	; (801deb4 <USBPD_DPM_CADCallback+0xf4>)
 801de64:	2100      	movs	r1, #0
 801de66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801de6a:	79fa      	ldrb	r2, [r7, #7]
 801de6c:	4912      	ldr	r1, [pc, #72]	; (801deb8 <USBPD_DPM_CADCallback+0xf8>)
 801de6e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801de72:	f36f 1304 	bfc	r3, #4, #1
 801de76:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 801de7a:	79fa      	ldrb	r2, [r7, #7]
 801de7c:	490e      	ldr	r1, [pc, #56]	; (801deb8 <USBPD_DPM_CADCallback+0xf8>)
 801de7e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801de82:	f36f 1387 	bfc	r3, #6, #2
 801de86:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801de8a:	79fb      	ldrb	r3, [r7, #7]
 801de8c:	4a0a      	ldr	r2, [pc, #40]	; (801deb8 <USBPD_DPM_CADCallback+0xf8>)
 801de8e:	009b      	lsls	r3, r3, #2
 801de90:	4413      	add	r3, r2
 801de92:	785a      	ldrb	r2, [r3, #1]
 801de94:	f36f 0202 	bfc	r2, #0, #3
 801de98:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801de9a:	79ba      	ldrb	r2, [r7, #6]
 801de9c:	79fb      	ldrb	r3, [r7, #7]
 801de9e:	4611      	mov	r1, r2
 801dea0:	4618      	mov	r0, r3
 801dea2:	f000 f865 	bl	801df70 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 801dea6:	e000      	b.n	801deaa <USBPD_DPM_CADCallback+0xea>
    }
    default :
      /* nothing to do */
      break;
 801dea8:	bf00      	nop
  }
}
 801deaa:	bf00      	nop
 801deac:	3710      	adds	r7, #16
 801deae:	46bd      	mov	sp, r7
 801deb0:	bd80      	pop	{r7, pc}
 801deb2:	bf00      	nop
 801deb4:	20012544 	.word	0x20012544
 801deb8:	2001254c 	.word	0x2001254c

0801debc <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801debc:	b590      	push	{r4, r7, lr}
 801debe:	b083      	sub	sp, #12
 801dec0:	af00      	add	r7, sp, #0
 801dec2:	4603      	mov	r3, r0
 801dec4:	603a      	str	r2, [r7, #0]
 801dec6:	71fb      	strb	r3, [r7, #7]
 801dec8:	460b      	mov	r3, r1
 801deca:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 801decc:	79fa      	ldrb	r2, [r7, #7]
 801dece:	683b      	ldr	r3, [r7, #0]
 801ded0:	f003 0303 	and.w	r3, r3, #3
 801ded4:	b2d8      	uxtb	r0, r3
 801ded6:	491c      	ldr	r1, [pc, #112]	; (801df48 <DPM_ManageAttachedState+0x8c>)
 801ded8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801dedc:	f360 1387 	bfi	r3, r0, #6, #2
 801dee0:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 801dee4:	79fb      	ldrb	r3, [r7, #7]
 801dee6:	2101      	movs	r1, #1
 801dee8:	4618      	mov	r0, r3
 801deea:	f7e2 fb10 	bl	800050e <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 801deee:	79ba      	ldrb	r2, [r7, #6]
 801def0:	79fb      	ldrb	r3, [r7, #7]
 801def2:	4611      	mov	r1, r2
 801def4:	4618      	mov	r0, r3
 801def6:	f000 f83b 	bl	801df70 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 801defa:	79fb      	ldrb	r3, [r7, #7]
 801defc:	4a13      	ldr	r2, [pc, #76]	; (801df4c <DPM_ManageAttachedState+0x90>)
 801defe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801df02:	2b00      	cmp	r3, #0
 801df04:	d11b      	bne.n	801df3e <DPM_ManageAttachedState+0x82>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
 801df06:	79fb      	ldrb	r3, [r7, #7]
 801df08:	2b00      	cmp	r3, #0
 801df0a:	d101      	bne.n	801df10 <DPM_ManageAttachedState+0x54>
 801df0c:	4810      	ldr	r0, [pc, #64]	; (801df50 <DPM_ManageAttachedState+0x94>)
 801df0e:	e000      	b.n	801df12 <DPM_ManageAttachedState+0x56>
 801df10:	4810      	ldr	r0, [pc, #64]	; (801df54 <DPM_ManageAttachedState+0x98>)
 801df12:	79fb      	ldrb	r3, [r7, #7]
 801df14:	2b00      	cmp	r3, #0
 801df16:	d101      	bne.n	801df1c <DPM_ManageAttachedState+0x60>
 801df18:	4b0f      	ldr	r3, [pc, #60]	; (801df58 <DPM_ManageAttachedState+0x9c>)
 801df1a:	e000      	b.n	801df1e <DPM_ManageAttachedState+0x62>
 801df1c:	4b0f      	ldr	r3, [pc, #60]	; (801df5c <DPM_ManageAttachedState+0xa0>)
 801df1e:	79fc      	ldrb	r4, [r7, #7]
 801df20:	461a      	mov	r2, r3
 801df22:	2100      	movs	r1, #0
 801df24:	f7fb fae2 	bl	80194ec <osThreadNew>
 801df28:	4603      	mov	r3, r0
 801df2a:	4a08      	ldr	r2, [pc, #32]	; (801df4c <DPM_ManageAttachedState+0x90>)
 801df2c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 801df30:	79fb      	ldrb	r3, [r7, #7]
 801df32:	4a06      	ldr	r2, [pc, #24]	; (801df4c <DPM_ManageAttachedState+0x90>)
 801df34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d100      	bne.n	801df3e <DPM_ManageAttachedState+0x82>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 801df3c:	e7fe      	b.n	801df3c <DPM_ManageAttachedState+0x80>
    }
  }
}
 801df3e:	bf00      	nop
 801df40:	370c      	adds	r7, #12
 801df42:	46bd      	mov	sp, r7
 801df44:	bd90      	pop	{r4, r7, pc}
 801df46:	bf00      	nop
 801df48:	2001254c 	.word	0x2001254c
 801df4c:	20012544 	.word	0x20012544
 801df50:	0801dd41 	.word	0x0801dd41
 801df54:	0801dd57 	.word	0x0801dd57
 801df58:	2000016c 	.word	0x2000016c
 801df5c:	20000190 	.word	0x20000190

0801df60 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 801df60:	b480      	push	{r7}
 801df62:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 801df64:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801df66:	4618      	mov	r0, r3
 801df68:	46bd      	mov	sp, r7
 801df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df6e:	4770      	bx	lr

0801df70 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801df70:	b480      	push	{r7}
 801df72:	b083      	sub	sp, #12
 801df74:	af00      	add	r7, sp, #0
 801df76:	4603      	mov	r3, r0
 801df78:	460a      	mov	r2, r1
 801df7a:	71fb      	strb	r3, [r7, #7]
 801df7c:	4613      	mov	r3, r2
 801df7e:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801df80:	bf00      	nop
 801df82:	370c      	adds	r7, #12
 801df84:	46bd      	mov	sp, r7
 801df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df8a:	4770      	bx	lr

0801df8c <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801df8c:	b480      	push	{r7}
 801df8e:	b083      	sub	sp, #12
 801df90:	af00      	add	r7, sp, #0
 801df92:	4603      	mov	r3, r0
 801df94:	460a      	mov	r2, r1
 801df96:	71fb      	strb	r3, [r7, #7]
 801df98:	4613      	mov	r3, r2
 801df9a:	71bb      	strb	r3, [r7, #6]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 801df9c:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801df9e:	bf00      	nop
 801dfa0:	370c      	adds	r7, #12
 801dfa2:	46bd      	mov	sp, r7
 801dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfa8:	4770      	bx	lr

0801dfaa <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801dfaa:	b480      	push	{r7}
 801dfac:	b083      	sub	sp, #12
 801dfae:	af00      	add	r7, sp, #0
 801dfb0:	4603      	mov	r3, r0
 801dfb2:	6039      	str	r1, [r7, #0]
 801dfb4:	71fb      	strb	r3, [r7, #7]
 801dfb6:	4613      	mov	r3, r2
 801dfb8:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 801dfba:	bf00      	nop
 801dfbc:	370c      	adds	r7, #12
 801dfbe:	46bd      	mov	sp, r7
 801dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfc4:	4770      	bx	lr

0801dfc6 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801dfc6:	b480      	push	{r7}
 801dfc8:	b085      	sub	sp, #20
 801dfca:	af00      	add	r7, sp, #0
 801dfcc:	60ba      	str	r2, [r7, #8]
 801dfce:	607b      	str	r3, [r7, #4]
 801dfd0:	4603      	mov	r3, r0
 801dfd2:	73fb      	strb	r3, [r7, #15]
 801dfd4:	460b      	mov	r3, r1
 801dfd6:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 801dfd8:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801dfda:	bf00      	nop
 801dfdc:	3714      	adds	r7, #20
 801dfde:	46bd      	mov	sp, r7
 801dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfe4:	4770      	bx	lr

0801dfe6 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801dfe6:	b480      	push	{r7}
 801dfe8:	b085      	sub	sp, #20
 801dfea:	af00      	add	r7, sp, #0
 801dfec:	60ba      	str	r2, [r7, #8]
 801dfee:	607b      	str	r3, [r7, #4]
 801dff0:	4603      	mov	r3, r0
 801dff2:	73fb      	strb	r3, [r7, #15]
 801dff4:	460b      	mov	r3, r1
 801dff6:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 801dff8:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 801dffa:	bf00      	nop
 801dffc:	3714      	adds	r7, #20
 801dffe:	46bd      	mov	sp, r7
 801e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e004:	4770      	bx	lr

0801e006 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801e006:	b480      	push	{r7}
 801e008:	b085      	sub	sp, #20
 801e00a:	af00      	add	r7, sp, #0
 801e00c:	4603      	mov	r3, r0
 801e00e:	60b9      	str	r1, [r7, #8]
 801e010:	607a      	str	r2, [r7, #4]
 801e012:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801e014:	bf00      	nop
 801e016:	3714      	adds	r7, #20
 801e018:	46bd      	mov	sp, r7
 801e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e01e:	4770      	bx	lr

0801e020 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801e020:	b480      	push	{r7}
 801e022:	b083      	sub	sp, #12
 801e024:	af00      	add	r7, sp, #0
 801e026:	603a      	str	r2, [r7, #0]
 801e028:	461a      	mov	r2, r3
 801e02a:	4603      	mov	r3, r0
 801e02c:	71fb      	strb	r3, [r7, #7]
 801e02e:	460b      	mov	r3, r1
 801e030:	71bb      	strb	r3, [r7, #6]
 801e032:	4613      	mov	r3, r2
 801e034:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801e036:	bf00      	nop
 801e038:	370c      	adds	r7, #12
 801e03a:	46bd      	mov	sp, r7
 801e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e040:	4770      	bx	lr

0801e042 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801e042:	b580      	push	{r7, lr}
 801e044:	b082      	sub	sp, #8
 801e046:	af00      	add	r7, sp, #0
 801e048:	4603      	mov	r3, r0
 801e04a:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801e04c:	79fb      	ldrb	r3, [r7, #7]
 801e04e:	4618      	mov	r0, r3
 801e050:	f7e2 f9a6 	bl	80003a0 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801e054:	bf00      	nop
 801e056:	3708      	adds	r7, #8
 801e058:	46bd      	mov	sp, r7
 801e05a:	bd80      	pop	{r7, pc}

0801e05c <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801e05c:	b480      	push	{r7}
 801e05e:	b085      	sub	sp, #20
 801e060:	af00      	add	r7, sp, #0
 801e062:	4603      	mov	r3, r0
 801e064:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801e066:	230c      	movs	r3, #12
 801e068:	73fb      	strb	r3, [r7, #15]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801e06a:	79fa      	ldrb	r2, [r7, #7]
 801e06c:	492e      	ldr	r1, [pc, #184]	; (801e128 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e06e:	4613      	mov	r3, r2
 801e070:	00db      	lsls	r3, r3, #3
 801e072:	1a9b      	subs	r3, r3, r2
 801e074:	00db      	lsls	r3, r3, #3
 801e076:	440b      	add	r3, r1
 801e078:	781b      	ldrb	r3, [r3, #0]
 801e07a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e07e:	b2db      	uxtb	r3, r3
 801e080:	2b00      	cmp	r3, #0
 801e082:	d019      	beq.n	801e0b8 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801e084:	79fa      	ldrb	r2, [r7, #7]
 801e086:	4928      	ldr	r1, [pc, #160]	; (801e128 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e088:	4613      	mov	r3, r2
 801e08a:	00db      	lsls	r3, r3, #3
 801e08c:	1a9b      	subs	r3, r3, r2
 801e08e:	00db      	lsls	r3, r3, #3
 801e090:	440b      	add	r3, r1
 801e092:	781b      	ldrb	r3, [r3, #0]
 801e094:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e098:	b2db      	uxtb	r3, r3
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	d10f      	bne.n	801e0be <USBPD_DPM_EvaluateDataRoleSwap+0x62>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801e09e:	79fa      	ldrb	r2, [r7, #7]
 801e0a0:	4921      	ldr	r1, [pc, #132]	; (801e128 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e0a2:	4613      	mov	r3, r2
 801e0a4:	00db      	lsls	r3, r3, #3
 801e0a6:	1a9b      	subs	r3, r3, r2
 801e0a8:	00db      	lsls	r3, r3, #3
 801e0aa:	440b      	add	r3, r1
 801e0ac:	781b      	ldrb	r3, [r3, #0]
 801e0ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e0b2:	b2db      	uxtb	r3, r3
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d102      	bne.n	801e0be <USBPD_DPM_EvaluateDataRoleSwap+0x62>
  {
    status = USBPD_NOTSUPPORTED;
 801e0b8:	2301      	movs	r3, #1
 801e0ba:	73fb      	strb	r3, [r7, #15]
 801e0bc:	e02d      	b.n	801e11a <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801e0be:	79fa      	ldrb	r2, [r7, #7]
 801e0c0:	4919      	ldr	r1, [pc, #100]	; (801e128 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e0c2:	4613      	mov	r3, r2
 801e0c4:	00db      	lsls	r3, r3, #3
 801e0c6:	1a9b      	subs	r3, r3, r2
 801e0c8:	00db      	lsls	r3, r3, #3
 801e0ca:	440b      	add	r3, r1
 801e0cc:	781b      	ldrb	r3, [r3, #0]
 801e0ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e0d2:	b2db      	uxtb	r3, r3
 801e0d4:	2b01      	cmp	r3, #1
 801e0d6:	d108      	bne.n	801e0ea <USBPD_DPM_EvaluateDataRoleSwap+0x8e>
 801e0d8:	79fb      	ldrb	r3, [r7, #7]
 801e0da:	4a14      	ldr	r2, [pc, #80]	; (801e12c <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801e0dc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801e0e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e0e4:	b2db      	uxtb	r3, r3
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d015      	beq.n	801e116 <USBPD_DPM_EvaluateDataRoleSwap+0xba>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801e0ea:	79fa      	ldrb	r2, [r7, #7]
 801e0ec:	490e      	ldr	r1, [pc, #56]	; (801e128 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e0ee:	4613      	mov	r3, r2
 801e0f0:	00db      	lsls	r3, r3, #3
 801e0f2:	1a9b      	subs	r3, r3, r2
 801e0f4:	00db      	lsls	r3, r3, #3
 801e0f6:	440b      	add	r3, r1
 801e0f8:	781b      	ldrb	r3, [r3, #0]
 801e0fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e0fe:	b2db      	uxtb	r3, r3
 801e100:	2b01      	cmp	r3, #1
 801e102:	d10a      	bne.n	801e11a <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
 801e104:	79fb      	ldrb	r3, [r7, #7]
 801e106:	4a09      	ldr	r2, [pc, #36]	; (801e12c <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801e108:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801e10c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e110:	b2db      	uxtb	r3, r3
 801e112:	2b01      	cmp	r3, #1
 801e114:	d101      	bne.n	801e11a <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
    {
      status = USBPD_ACCEPT;
 801e116:	230a      	movs	r3, #10
 801e118:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 801e11a:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801e11c:	4618      	mov	r0, r3
 801e11e:	3714      	adds	r7, #20
 801e120:	46bd      	mov	sp, r7
 801e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e126:	4770      	bx	lr
 801e128:	20000134 	.word	0x20000134
 801e12c:	2001254c 	.word	0x2001254c

0801e130 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801e130:	b580      	push	{r7, lr}
 801e132:	b082      	sub	sp, #8
 801e134:	af00      	add	r7, sp, #0
 801e136:	4603      	mov	r3, r0
 801e138:	460a      	mov	r2, r1
 801e13a:	71fb      	strb	r3, [r7, #7]
 801e13c:	4613      	mov	r3, r2
 801e13e:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801e140:	79ba      	ldrb	r2, [r7, #6]
 801e142:	79fb      	ldrb	r3, [r7, #7]
 801e144:	4611      	mov	r1, r2
 801e146:	4618      	mov	r0, r3
 801e148:	f000 f80a 	bl	801e160 <USBPD_PWR_IF_SupplyReady>
 801e14c:	4603      	mov	r3, r0
 801e14e:	2b00      	cmp	r3, #0
 801e150:	bf0c      	ite	eq
 801e152:	2301      	moveq	r3, #1
 801e154:	2300      	movne	r3, #0
 801e156:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801e158:	4618      	mov	r0, r3
 801e15a:	3708      	adds	r7, #8
 801e15c:	46bd      	mov	sp, r7
 801e15e:	bd80      	pop	{r7, pc}

0801e160 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801e160:	b580      	push	{r7, lr}
 801e162:	b084      	sub	sp, #16
 801e164:	af00      	add	r7, sp, #0
 801e166:	4603      	mov	r3, r0
 801e168:	460a      	mov	r2, r1
 801e16a:	71fb      	strb	r3, [r7, #7]
 801e16c:	4613      	mov	r3, r2
 801e16e:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801e170:	2302      	movs	r3, #2
 801e172:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801e174:	79fb      	ldrb	r3, [r7, #7]
 801e176:	2b00      	cmp	r3, #0
 801e178:	d001      	beq.n	801e17e <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 801e17a:	2302      	movs	r3, #2
 801e17c:	e01c      	b.n	801e1b8 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801e17e:	79fb      	ldrb	r3, [r7, #7]
 801e180:	f107 0208 	add.w	r2, r7, #8
 801e184:	4611      	mov	r1, r2
 801e186:	4618      	mov	r0, r3
 801e188:	f000 f890 	bl	801e2ac <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 801e18c:	79bb      	ldrb	r3, [r7, #6]
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d109      	bne.n	801e1a6 <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801e192:	68bb      	ldr	r3, [r7, #8]
 801e194:	f240 22ed 	movw	r2, #749	; 0x2ed
 801e198:	4293      	cmp	r3, r2
 801e19a:	d801      	bhi.n	801e1a0 <USBPD_PWR_IF_SupplyReady+0x40>
 801e19c:	2300      	movs	r3, #0
 801e19e:	e000      	b.n	801e1a2 <USBPD_PWR_IF_SupplyReady+0x42>
 801e1a0:	2302      	movs	r3, #2
 801e1a2:	73fb      	strb	r3, [r7, #15]
 801e1a4:	e007      	b.n	801e1b6 <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801e1a6:	68bb      	ldr	r3, [r7, #8]
 801e1a8:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801e1ac:	d901      	bls.n	801e1b2 <USBPD_PWR_IF_SupplyReady+0x52>
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	e000      	b.n	801e1b4 <USBPD_PWR_IF_SupplyReady+0x54>
 801e1b2:	2302      	movs	r3, #2
 801e1b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801e1b6:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 801e1b8:	4618      	mov	r0, r3
 801e1ba:	3710      	adds	r7, #16
 801e1bc:	46bd      	mov	sp, r7
 801e1be:	bd80      	pop	{r7, pc}

0801e1c0 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801e1c0:	b580      	push	{r7, lr}
 801e1c2:	b084      	sub	sp, #16
 801e1c4:	af00      	add	r7, sp, #0
 801e1c6:	4603      	mov	r3, r0
 801e1c8:	460a      	mov	r2, r1
 801e1ca:	71fb      	strb	r3, [r7, #7]
 801e1cc:	4613      	mov	r3, r2
 801e1ce:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801e1d0:	2300      	movs	r3, #0
 801e1d2:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801e1d4:	79fb      	ldrb	r3, [r7, #7]
 801e1d6:	4618      	mov	r0, r3
 801e1d8:	f7f9 f972 	bl	80174c0 <HW_IF_PWR_GetVoltage>
 801e1dc:	4603      	mov	r3, r0
 801e1de:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 801e1e0:	79bb      	ldrb	r3, [r7, #6]
 801e1e2:	2b02      	cmp	r3, #2
 801e1e4:	d015      	beq.n	801e212 <USBPD_PWR_IF_GetVBUSStatus+0x52>
 801e1e6:	2b02      	cmp	r3, #2
 801e1e8:	dc1a      	bgt.n	801e220 <USBPD_PWR_IF_GetVBUSStatus+0x60>
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	d002      	beq.n	801e1f4 <USBPD_PWR_IF_GetVBUSStatus+0x34>
 801e1ee:	2b01      	cmp	r3, #1
 801e1f0:	d008      	beq.n	801e204 <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801e1f2:	e015      	b.n	801e220 <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801e1f4:	68bb      	ldr	r3, [r7, #8]
 801e1f6:	f240 22ed 	movw	r2, #749	; 0x2ed
 801e1fa:	4293      	cmp	r3, r2
 801e1fc:	d812      	bhi.n	801e224 <USBPD_PWR_IF_GetVBUSStatus+0x64>
 801e1fe:	2301      	movs	r3, #1
 801e200:	73fb      	strb	r3, [r7, #15]
    break;
 801e202:	e00f      	b.n	801e224 <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801e204:	68bb      	ldr	r3, [r7, #8]
 801e206:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801e20a:	d30d      	bcc.n	801e228 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 801e20c:	2301      	movs	r3, #1
 801e20e:	73fb      	strb	r3, [r7, #15]
    break;
 801e210:	e00a      	b.n	801e228 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801e212:	68bb      	ldr	r3, [r7, #8]
 801e214:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801e218:	d208      	bcs.n	801e22c <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 801e21a:	2301      	movs	r3, #1
 801e21c:	73fb      	strb	r3, [r7, #15]
    break;
 801e21e:	e005      	b.n	801e22c <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 801e220:	bf00      	nop
 801e222:	e004      	b.n	801e22e <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801e224:	bf00      	nop
 801e226:	e002      	b.n	801e22e <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801e228:	bf00      	nop
 801e22a:	e000      	b.n	801e22e <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801e22c:	bf00      	nop
  }
  return _status;
 801e22e:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801e230:	4618      	mov	r0, r3
 801e232:	3710      	adds	r7, #16
 801e234:	46bd      	mov	sp, r7
 801e236:	bd80      	pop	{r7, pc}

0801e238 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801e238:	b480      	push	{r7}
 801e23a:	b085      	sub	sp, #20
 801e23c:	af00      	add	r7, sp, #0
 801e23e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801e240:	2300      	movs	r3, #0
 801e242:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d002      	beq.n	801e250 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801e24a:	f06f 0301 	mvn.w	r3, #1
 801e24e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801e250:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801e252:	4618      	mov	r0, r3
 801e254:	3714      	adds	r7, #20
 801e256:	46bd      	mov	sp, r7
 801e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e25c:	4770      	bx	lr

0801e25e <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801e25e:	b480      	push	{r7}
 801e260:	b085      	sub	sp, #20
 801e262:	af00      	add	r7, sp, #0
 801e264:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801e266:	2300      	movs	r3, #0
 801e268:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d002      	beq.n	801e276 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801e270:	f06f 0301 	mvn.w	r3, #1
 801e274:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 801e276:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801e278:	4618      	mov	r0, r3
 801e27a:	3714      	adds	r7, #20
 801e27c:	46bd      	mov	sp, r7
 801e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e282:	4770      	bx	lr

0801e284 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801e284:	b480      	push	{r7}
 801e286:	b085      	sub	sp, #20
 801e288:	af00      	add	r7, sp, #0
 801e28a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801e28c:	f06f 030a 	mvn.w	r3, #10
 801e290:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	2b00      	cmp	r3, #0
 801e296:	d002      	beq.n	801e29e <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801e298:	f06f 0301 	mvn.w	r3, #1
 801e29c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801e29e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	3714      	adds	r7, #20
 801e2a4:	46bd      	mov	sp, r7
 801e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2aa:	4770      	bx	lr

0801e2ac <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801e2ac:	b480      	push	{r7}
 801e2ae:	b085      	sub	sp, #20
 801e2b0:	af00      	add	r7, sp, #0
 801e2b2:	6078      	str	r0, [r7, #4]
 801e2b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */

  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 801e2b6:	2300      	movs	r3, #0
 801e2b8:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d102      	bne.n	801e2c6 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801e2c0:	683b      	ldr	r3, [r7, #0]
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	d103      	bne.n	801e2ce <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801e2c6:	f06f 0301 	mvn.w	r3, #1
 801e2ca:	60fb      	str	r3, [r7, #12]
 801e2cc:	e002      	b.n	801e2d4 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801e2ce:	f06f 030a 	mvn.w	r3, #10
 801e2d2:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 801e2d4:	683b      	ldr	r3, [r7, #0]
 801e2d6:	68ba      	ldr	r2, [r7, #8]
 801e2d8:	601a      	str	r2, [r3, #0]
  return ret;
 801e2da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801e2dc:	4618      	mov	r0, r3
 801e2de:	3714      	adds	r7, #20
 801e2e0:	46bd      	mov	sp, r7
 801e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2e6:	4770      	bx	lr

0801e2e8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801e2e8:	b580      	push	{r7, lr}
 801e2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801e2ec:	2200      	movs	r2, #0
 801e2ee:	4912      	ldr	r1, [pc, #72]	; (801e338 <MX_USB_Device_Init+0x50>)
 801e2f0:	4812      	ldr	r0, [pc, #72]	; (801e33c <MX_USB_Device_Init+0x54>)
 801e2f2:	f7f9 ff4d 	bl	8018190 <USBD_Init>
 801e2f6:	4603      	mov	r3, r0
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d001      	beq.n	801e300 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801e2fc:	f7ea f89a 	bl	8008434 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801e300:	490f      	ldr	r1, [pc, #60]	; (801e340 <MX_USB_Device_Init+0x58>)
 801e302:	480e      	ldr	r0, [pc, #56]	; (801e33c <MX_USB_Device_Init+0x54>)
 801e304:	f7f9 ff74 	bl	80181f0 <USBD_RegisterClass>
 801e308:	4603      	mov	r3, r0
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d001      	beq.n	801e312 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801e30e:	f7ea f891 	bl	8008434 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801e312:	490c      	ldr	r1, [pc, #48]	; (801e344 <MX_USB_Device_Init+0x5c>)
 801e314:	4809      	ldr	r0, [pc, #36]	; (801e33c <MX_USB_Device_Init+0x54>)
 801e316:	f7f9 fe95 	bl	8018044 <USBD_CDC_RegisterInterface>
 801e31a:	4603      	mov	r3, r0
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d001      	beq.n	801e324 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801e320:	f7ea f888 	bl	8008434 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801e324:	4805      	ldr	r0, [pc, #20]	; (801e33c <MX_USB_Device_Init+0x54>)
 801e326:	f7f9 ff8a 	bl	801823e <USBD_Start>
 801e32a:	4603      	mov	r3, r0
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	d001      	beq.n	801e334 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801e330:	f7ea f880 	bl	8008434 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801e334:	bf00      	nop
 801e336:	bd80      	pop	{r7, pc}
 801e338:	200001ec 	.word	0x200001ec
 801e33c:	20012550 	.word	0x20012550
 801e340:	20000020 	.word	0x20000020
 801e344:	200001d8 	.word	0x200001d8

0801e348 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801e348:	b580      	push	{r7, lr}
 801e34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801e34c:	2200      	movs	r2, #0
 801e34e:	4905      	ldr	r1, [pc, #20]	; (801e364 <CDC_Init_FS+0x1c>)
 801e350:	4805      	ldr	r0, [pc, #20]	; (801e368 <CDC_Init_FS+0x20>)
 801e352:	f7f9 fe8c 	bl	801806e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801e356:	4905      	ldr	r1, [pc, #20]	; (801e36c <CDC_Init_FS+0x24>)
 801e358:	4803      	ldr	r0, [pc, #12]	; (801e368 <CDC_Init_FS+0x20>)
 801e35a:	f7f9 fea6 	bl	80180aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801e35e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801e360:	4618      	mov	r0, r3
 801e362:	bd80      	pop	{r7, pc}
 801e364:	20013020 	.word	0x20013020
 801e368:	20012550 	.word	0x20012550
 801e36c:	20012820 	.word	0x20012820

0801e370 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801e370:	b480      	push	{r7}
 801e372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801e374:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801e376:	4618      	mov	r0, r3
 801e378:	46bd      	mov	sp, r7
 801e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e37e:	4770      	bx	lr

0801e380 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801e380:	b480      	push	{r7}
 801e382:	b083      	sub	sp, #12
 801e384:	af00      	add	r7, sp, #0
 801e386:	4603      	mov	r3, r0
 801e388:	6039      	str	r1, [r7, #0]
 801e38a:	71fb      	strb	r3, [r7, #7]
 801e38c:	4613      	mov	r3, r2
 801e38e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801e390:	79fb      	ldrb	r3, [r7, #7]
 801e392:	2b23      	cmp	r3, #35	; 0x23
 801e394:	d84a      	bhi.n	801e42c <CDC_Control_FS+0xac>
 801e396:	a201      	add	r2, pc, #4	; (adr r2, 801e39c <CDC_Control_FS+0x1c>)
 801e398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e39c:	0801e42d 	.word	0x0801e42d
 801e3a0:	0801e42d 	.word	0x0801e42d
 801e3a4:	0801e42d 	.word	0x0801e42d
 801e3a8:	0801e42d 	.word	0x0801e42d
 801e3ac:	0801e42d 	.word	0x0801e42d
 801e3b0:	0801e42d 	.word	0x0801e42d
 801e3b4:	0801e42d 	.word	0x0801e42d
 801e3b8:	0801e42d 	.word	0x0801e42d
 801e3bc:	0801e42d 	.word	0x0801e42d
 801e3c0:	0801e42d 	.word	0x0801e42d
 801e3c4:	0801e42d 	.word	0x0801e42d
 801e3c8:	0801e42d 	.word	0x0801e42d
 801e3cc:	0801e42d 	.word	0x0801e42d
 801e3d0:	0801e42d 	.word	0x0801e42d
 801e3d4:	0801e42d 	.word	0x0801e42d
 801e3d8:	0801e42d 	.word	0x0801e42d
 801e3dc:	0801e42d 	.word	0x0801e42d
 801e3e0:	0801e42d 	.word	0x0801e42d
 801e3e4:	0801e42d 	.word	0x0801e42d
 801e3e8:	0801e42d 	.word	0x0801e42d
 801e3ec:	0801e42d 	.word	0x0801e42d
 801e3f0:	0801e42d 	.word	0x0801e42d
 801e3f4:	0801e42d 	.word	0x0801e42d
 801e3f8:	0801e42d 	.word	0x0801e42d
 801e3fc:	0801e42d 	.word	0x0801e42d
 801e400:	0801e42d 	.word	0x0801e42d
 801e404:	0801e42d 	.word	0x0801e42d
 801e408:	0801e42d 	.word	0x0801e42d
 801e40c:	0801e42d 	.word	0x0801e42d
 801e410:	0801e42d 	.word	0x0801e42d
 801e414:	0801e42d 	.word	0x0801e42d
 801e418:	0801e42d 	.word	0x0801e42d
 801e41c:	0801e42d 	.word	0x0801e42d
 801e420:	0801e42d 	.word	0x0801e42d
 801e424:	0801e42d 	.word	0x0801e42d
 801e428:	0801e42d 	.word	0x0801e42d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801e42c:	bf00      	nop
  }

  return (USBD_OK);
 801e42e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801e430:	4618      	mov	r0, r3
 801e432:	370c      	adds	r7, #12
 801e434:	46bd      	mov	sp, r7
 801e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e43a:	4770      	bx	lr

0801e43c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b082      	sub	sp, #8
 801e440:	af00      	add	r7, sp, #0
 801e442:	6078      	str	r0, [r7, #4]
 801e444:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801e446:	6879      	ldr	r1, [r7, #4]
 801e448:	480b      	ldr	r0, [pc, #44]	; (801e478 <CDC_Receive_FS+0x3c>)
 801e44a:	f7f9 fe2e 	bl	80180aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801e44e:	480a      	ldr	r0, [pc, #40]	; (801e478 <CDC_Receive_FS+0x3c>)
 801e450:	f7f9 fe74 	bl	801813c <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 801e454:	683b      	ldr	r3, [r7, #0]
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	4619      	mov	r1, r3
 801e45a:	4808      	ldr	r0, [pc, #32]	; (801e47c <CDC_Receive_FS+0x40>)
 801e45c:	f7e9 fbc4 	bl	8007be8 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 801e460:	683b      	ldr	r3, [r7, #0]
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	461a      	mov	r2, r3
 801e466:	2100      	movs	r1, #0
 801e468:	4804      	ldr	r0, [pc, #16]	; (801e47c <CDC_Receive_FS+0x40>)
 801e46a:	f000 fd31 	bl	801eed0 <memset>
  return (USBD_OK);
 801e46e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801e470:	4618      	mov	r0, r3
 801e472:	3708      	adds	r7, #8
 801e474:	46bd      	mov	sp, r7
 801e476:	bd80      	pop	{r7, pc}
 801e478:	20012550 	.word	0x20012550
 801e47c:	20012820 	.word	0x20012820

0801e480 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801e480:	b580      	push	{r7, lr}
 801e482:	b084      	sub	sp, #16
 801e484:	af00      	add	r7, sp, #0
 801e486:	6078      	str	r0, [r7, #4]
 801e488:	460b      	mov	r3, r1
 801e48a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801e48c:	2300      	movs	r3, #0
 801e48e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801e490:	4b0d      	ldr	r3, [pc, #52]	; (801e4c8 <CDC_Transmit_FS+0x48>)
 801e492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801e496:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801e498:	68bb      	ldr	r3, [r7, #8]
 801e49a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d001      	beq.n	801e4a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801e4a2:	2301      	movs	r3, #1
 801e4a4:	e00b      	b.n	801e4be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801e4a6:	887b      	ldrh	r3, [r7, #2]
 801e4a8:	461a      	mov	r2, r3
 801e4aa:	6879      	ldr	r1, [r7, #4]
 801e4ac:	4806      	ldr	r0, [pc, #24]	; (801e4c8 <CDC_Transmit_FS+0x48>)
 801e4ae:	f7f9 fdde 	bl	801806e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801e4b2:	4805      	ldr	r0, [pc, #20]	; (801e4c8 <CDC_Transmit_FS+0x48>)
 801e4b4:	f7f9 fe12 	bl	80180dc <USBD_CDC_TransmitPacket>
 801e4b8:	4603      	mov	r3, r0
 801e4ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801e4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 801e4be:	4618      	mov	r0, r3
 801e4c0:	3710      	adds	r7, #16
 801e4c2:	46bd      	mov	sp, r7
 801e4c4:	bd80      	pop	{r7, pc}
 801e4c6:	bf00      	nop
 801e4c8:	20012550 	.word	0x20012550

0801e4cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801e4cc:	b480      	push	{r7}
 801e4ce:	b087      	sub	sp, #28
 801e4d0:	af00      	add	r7, sp, #0
 801e4d2:	60f8      	str	r0, [r7, #12]
 801e4d4:	60b9      	str	r1, [r7, #8]
 801e4d6:	4613      	mov	r3, r2
 801e4d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801e4da:	2300      	movs	r3, #0
 801e4dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801e4de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e4e2:	4618      	mov	r0, r3
 801e4e4:	371c      	adds	r7, #28
 801e4e6:	46bd      	mov	sp, r7
 801e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ec:	4770      	bx	lr
	...

0801e4f0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e4f0:	b480      	push	{r7}
 801e4f2:	b083      	sub	sp, #12
 801e4f4:	af00      	add	r7, sp, #0
 801e4f6:	4603      	mov	r3, r0
 801e4f8:	6039      	str	r1, [r7, #0]
 801e4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801e4fc:	683b      	ldr	r3, [r7, #0]
 801e4fe:	2212      	movs	r2, #18
 801e500:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801e502:	4b03      	ldr	r3, [pc, #12]	; (801e510 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801e504:	4618      	mov	r0, r3
 801e506:	370c      	adds	r7, #12
 801e508:	46bd      	mov	sp, r7
 801e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e50e:	4770      	bx	lr
 801e510:	2000020c 	.word	0x2000020c

0801e514 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e514:	b480      	push	{r7}
 801e516:	b083      	sub	sp, #12
 801e518:	af00      	add	r7, sp, #0
 801e51a:	4603      	mov	r3, r0
 801e51c:	6039      	str	r1, [r7, #0]
 801e51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801e520:	683b      	ldr	r3, [r7, #0]
 801e522:	2204      	movs	r2, #4
 801e524:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801e526:	4b03      	ldr	r3, [pc, #12]	; (801e534 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801e528:	4618      	mov	r0, r3
 801e52a:	370c      	adds	r7, #12
 801e52c:	46bd      	mov	sp, r7
 801e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e532:	4770      	bx	lr
 801e534:	20000220 	.word	0x20000220

0801e538 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e538:	b580      	push	{r7, lr}
 801e53a:	b082      	sub	sp, #8
 801e53c:	af00      	add	r7, sp, #0
 801e53e:	4603      	mov	r3, r0
 801e540:	6039      	str	r1, [r7, #0]
 801e542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801e544:	79fb      	ldrb	r3, [r7, #7]
 801e546:	2b00      	cmp	r3, #0
 801e548:	d105      	bne.n	801e556 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801e54a:	683a      	ldr	r2, [r7, #0]
 801e54c:	4907      	ldr	r1, [pc, #28]	; (801e56c <USBD_CDC_ProductStrDescriptor+0x34>)
 801e54e:	4808      	ldr	r0, [pc, #32]	; (801e570 <USBD_CDC_ProductStrDescriptor+0x38>)
 801e550:	f7fa fe5d 	bl	801920e <USBD_GetString>
 801e554:	e004      	b.n	801e560 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801e556:	683a      	ldr	r2, [r7, #0]
 801e558:	4904      	ldr	r1, [pc, #16]	; (801e56c <USBD_CDC_ProductStrDescriptor+0x34>)
 801e55a:	4805      	ldr	r0, [pc, #20]	; (801e570 <USBD_CDC_ProductStrDescriptor+0x38>)
 801e55c:	f7fa fe57 	bl	801920e <USBD_GetString>
  }
  return USBD_StrDesc;
 801e560:	4b02      	ldr	r3, [pc, #8]	; (801e56c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801e562:	4618      	mov	r0, r3
 801e564:	3708      	adds	r7, #8
 801e566:	46bd      	mov	sp, r7
 801e568:	bd80      	pop	{r7, pc}
 801e56a:	bf00      	nop
 801e56c:	20013820 	.word	0x20013820
 801e570:	080202f8 	.word	0x080202f8

0801e574 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e574:	b580      	push	{r7, lr}
 801e576:	b082      	sub	sp, #8
 801e578:	af00      	add	r7, sp, #0
 801e57a:	4603      	mov	r3, r0
 801e57c:	6039      	str	r1, [r7, #0]
 801e57e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801e580:	683a      	ldr	r2, [r7, #0]
 801e582:	4904      	ldr	r1, [pc, #16]	; (801e594 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801e584:	4804      	ldr	r0, [pc, #16]	; (801e598 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801e586:	f7fa fe42 	bl	801920e <USBD_GetString>
  return USBD_StrDesc;
 801e58a:	4b02      	ldr	r3, [pc, #8]	; (801e594 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801e58c:	4618      	mov	r0, r3
 801e58e:	3708      	adds	r7, #8
 801e590:	46bd      	mov	sp, r7
 801e592:	bd80      	pop	{r7, pc}
 801e594:	20013820 	.word	0x20013820
 801e598:	08020300 	.word	0x08020300

0801e59c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e59c:	b580      	push	{r7, lr}
 801e59e:	b082      	sub	sp, #8
 801e5a0:	af00      	add	r7, sp, #0
 801e5a2:	4603      	mov	r3, r0
 801e5a4:	6039      	str	r1, [r7, #0]
 801e5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801e5a8:	683b      	ldr	r3, [r7, #0]
 801e5aa:	221a      	movs	r2, #26
 801e5ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801e5ae:	f000 f843 	bl	801e638 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801e5b2:	4b02      	ldr	r3, [pc, #8]	; (801e5bc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801e5b4:	4618      	mov	r0, r3
 801e5b6:	3708      	adds	r7, #8
 801e5b8:	46bd      	mov	sp, r7
 801e5ba:	bd80      	pop	{r7, pc}
 801e5bc:	20000224 	.word	0x20000224

0801e5c0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e5c0:	b580      	push	{r7, lr}
 801e5c2:	b082      	sub	sp, #8
 801e5c4:	af00      	add	r7, sp, #0
 801e5c6:	4603      	mov	r3, r0
 801e5c8:	6039      	str	r1, [r7, #0]
 801e5ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801e5cc:	79fb      	ldrb	r3, [r7, #7]
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d105      	bne.n	801e5de <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801e5d2:	683a      	ldr	r2, [r7, #0]
 801e5d4:	4907      	ldr	r1, [pc, #28]	; (801e5f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801e5d6:	4808      	ldr	r0, [pc, #32]	; (801e5f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801e5d8:	f7fa fe19 	bl	801920e <USBD_GetString>
 801e5dc:	e004      	b.n	801e5e8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801e5de:	683a      	ldr	r2, [r7, #0]
 801e5e0:	4904      	ldr	r1, [pc, #16]	; (801e5f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801e5e2:	4805      	ldr	r0, [pc, #20]	; (801e5f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801e5e4:	f7fa fe13 	bl	801920e <USBD_GetString>
  }
  return USBD_StrDesc;
 801e5e8:	4b02      	ldr	r3, [pc, #8]	; (801e5f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801e5ea:	4618      	mov	r0, r3
 801e5ec:	3708      	adds	r7, #8
 801e5ee:	46bd      	mov	sp, r7
 801e5f0:	bd80      	pop	{r7, pc}
 801e5f2:	bf00      	nop
 801e5f4:	20013820 	.word	0x20013820
 801e5f8:	08020314 	.word	0x08020314

0801e5fc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801e5fc:	b580      	push	{r7, lr}
 801e5fe:	b082      	sub	sp, #8
 801e600:	af00      	add	r7, sp, #0
 801e602:	4603      	mov	r3, r0
 801e604:	6039      	str	r1, [r7, #0]
 801e606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801e608:	79fb      	ldrb	r3, [r7, #7]
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d105      	bne.n	801e61a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801e60e:	683a      	ldr	r2, [r7, #0]
 801e610:	4907      	ldr	r1, [pc, #28]	; (801e630 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801e612:	4808      	ldr	r0, [pc, #32]	; (801e634 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801e614:	f7fa fdfb 	bl	801920e <USBD_GetString>
 801e618:	e004      	b.n	801e624 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801e61a:	683a      	ldr	r2, [r7, #0]
 801e61c:	4904      	ldr	r1, [pc, #16]	; (801e630 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801e61e:	4805      	ldr	r0, [pc, #20]	; (801e634 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801e620:	f7fa fdf5 	bl	801920e <USBD_GetString>
  }
  return USBD_StrDesc;
 801e624:	4b02      	ldr	r3, [pc, #8]	; (801e630 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801e626:	4618      	mov	r0, r3
 801e628:	3708      	adds	r7, #8
 801e62a:	46bd      	mov	sp, r7
 801e62c:	bd80      	pop	{r7, pc}
 801e62e:	bf00      	nop
 801e630:	20013820 	.word	0x20013820
 801e634:	08020320 	.word	0x08020320

0801e638 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801e638:	b580      	push	{r7, lr}
 801e63a:	b084      	sub	sp, #16
 801e63c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801e63e:	4b0f      	ldr	r3, [pc, #60]	; (801e67c <Get_SerialNum+0x44>)
 801e640:	681b      	ldr	r3, [r3, #0]
 801e642:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801e644:	4b0e      	ldr	r3, [pc, #56]	; (801e680 <Get_SerialNum+0x48>)
 801e646:	681b      	ldr	r3, [r3, #0]
 801e648:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801e64a:	4b0e      	ldr	r3, [pc, #56]	; (801e684 <Get_SerialNum+0x4c>)
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801e650:	68fa      	ldr	r2, [r7, #12]
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	4413      	add	r3, r2
 801e656:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801e658:	68fb      	ldr	r3, [r7, #12]
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d009      	beq.n	801e672 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801e65e:	2208      	movs	r2, #8
 801e660:	4909      	ldr	r1, [pc, #36]	; (801e688 <Get_SerialNum+0x50>)
 801e662:	68f8      	ldr	r0, [r7, #12]
 801e664:	f000 f814 	bl	801e690 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801e668:	2204      	movs	r2, #4
 801e66a:	4908      	ldr	r1, [pc, #32]	; (801e68c <Get_SerialNum+0x54>)
 801e66c:	68b8      	ldr	r0, [r7, #8]
 801e66e:	f000 f80f 	bl	801e690 <IntToUnicode>
  }
}
 801e672:	bf00      	nop
 801e674:	3710      	adds	r7, #16
 801e676:	46bd      	mov	sp, r7
 801e678:	bd80      	pop	{r7, pc}
 801e67a:	bf00      	nop
 801e67c:	1fff7590 	.word	0x1fff7590
 801e680:	1fff7594 	.word	0x1fff7594
 801e684:	1fff7598 	.word	0x1fff7598
 801e688:	20000226 	.word	0x20000226
 801e68c:	20000236 	.word	0x20000236

0801e690 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801e690:	b480      	push	{r7}
 801e692:	b087      	sub	sp, #28
 801e694:	af00      	add	r7, sp, #0
 801e696:	60f8      	str	r0, [r7, #12]
 801e698:	60b9      	str	r1, [r7, #8]
 801e69a:	4613      	mov	r3, r2
 801e69c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801e69e:	2300      	movs	r3, #0
 801e6a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801e6a2:	2300      	movs	r3, #0
 801e6a4:	75fb      	strb	r3, [r7, #23]
 801e6a6:	e027      	b.n	801e6f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801e6a8:	68fb      	ldr	r3, [r7, #12]
 801e6aa:	0f1b      	lsrs	r3, r3, #28
 801e6ac:	2b09      	cmp	r3, #9
 801e6ae:	d80b      	bhi.n	801e6c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801e6b0:	68fb      	ldr	r3, [r7, #12]
 801e6b2:	0f1b      	lsrs	r3, r3, #28
 801e6b4:	b2da      	uxtb	r2, r3
 801e6b6:	7dfb      	ldrb	r3, [r7, #23]
 801e6b8:	005b      	lsls	r3, r3, #1
 801e6ba:	4619      	mov	r1, r3
 801e6bc:	68bb      	ldr	r3, [r7, #8]
 801e6be:	440b      	add	r3, r1
 801e6c0:	3230      	adds	r2, #48	; 0x30
 801e6c2:	b2d2      	uxtb	r2, r2
 801e6c4:	701a      	strb	r2, [r3, #0]
 801e6c6:	e00a      	b.n	801e6de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801e6c8:	68fb      	ldr	r3, [r7, #12]
 801e6ca:	0f1b      	lsrs	r3, r3, #28
 801e6cc:	b2da      	uxtb	r2, r3
 801e6ce:	7dfb      	ldrb	r3, [r7, #23]
 801e6d0:	005b      	lsls	r3, r3, #1
 801e6d2:	4619      	mov	r1, r3
 801e6d4:	68bb      	ldr	r3, [r7, #8]
 801e6d6:	440b      	add	r3, r1
 801e6d8:	3237      	adds	r2, #55	; 0x37
 801e6da:	b2d2      	uxtb	r2, r2
 801e6dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	011b      	lsls	r3, r3, #4
 801e6e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801e6e4:	7dfb      	ldrb	r3, [r7, #23]
 801e6e6:	005b      	lsls	r3, r3, #1
 801e6e8:	3301      	adds	r3, #1
 801e6ea:	68ba      	ldr	r2, [r7, #8]
 801e6ec:	4413      	add	r3, r2
 801e6ee:	2200      	movs	r2, #0
 801e6f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801e6f2:	7dfb      	ldrb	r3, [r7, #23]
 801e6f4:	3301      	adds	r3, #1
 801e6f6:	75fb      	strb	r3, [r7, #23]
 801e6f8:	7dfa      	ldrb	r2, [r7, #23]
 801e6fa:	79fb      	ldrb	r3, [r7, #7]
 801e6fc:	429a      	cmp	r2, r3
 801e6fe:	d3d3      	bcc.n	801e6a8 <IntToUnicode+0x18>
  }
}
 801e700:	bf00      	nop
 801e702:	bf00      	nop
 801e704:	371c      	adds	r7, #28
 801e706:	46bd      	mov	sp, r7
 801e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e70c:	4770      	bx	lr
	...

0801e710 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e710:	b580      	push	{r7, lr}
 801e712:	b098      	sub	sp, #96	; 0x60
 801e714:	af00      	add	r7, sp, #0
 801e716:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801e718:	f107 030c 	add.w	r3, r7, #12
 801e71c:	2254      	movs	r2, #84	; 0x54
 801e71e:	2100      	movs	r1, #0
 801e720:	4618      	mov	r0, r3
 801e722:	f000 fbd5 	bl	801eed0 <memset>
  if(pcdHandle->Instance==USB)
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	4a19      	ldr	r2, [pc, #100]	; (801e790 <HAL_PCD_MspInit+0x80>)
 801e72c:	4293      	cmp	r3, r2
 801e72e:	d12b      	bne.n	801e788 <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801e730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801e734:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801e736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e73a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801e73c:	f107 030c 	add.w	r3, r7, #12
 801e740:	4618      	mov	r0, r3
 801e742:	f7ef fe15 	bl	800e370 <HAL_RCCEx_PeriphCLKConfig>
 801e746:	4603      	mov	r3, r0
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d001      	beq.n	801e750 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 801e74c:	f7e9 fe72 	bl	8008434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801e750:	4b10      	ldr	r3, [pc, #64]	; (801e794 <HAL_PCD_MspInit+0x84>)
 801e752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e754:	4a0f      	ldr	r2, [pc, #60]	; (801e794 <HAL_PCD_MspInit+0x84>)
 801e756:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801e75a:	6593      	str	r3, [r2, #88]	; 0x58
 801e75c:	4b0d      	ldr	r3, [pc, #52]	; (801e794 <HAL_PCD_MspInit+0x84>)
 801e75e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e764:	60bb      	str	r3, [r7, #8]
 801e766:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 801e768:	2200      	movs	r2, #0
 801e76a:	2105      	movs	r1, #5
 801e76c:	2013      	movs	r0, #19
 801e76e:	f7ec fc79 	bl	800b064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 801e772:	2013      	movs	r0, #19
 801e774:	f7ec fc90 	bl	800b098 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801e778:	2200      	movs	r2, #0
 801e77a:	2105      	movs	r1, #5
 801e77c:	2014      	movs	r0, #20
 801e77e:	f7ec fc71 	bl	800b064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801e782:	2014      	movs	r0, #20
 801e784:	f7ec fc88 	bl	800b098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801e788:	bf00      	nop
 801e78a:	3760      	adds	r7, #96	; 0x60
 801e78c:	46bd      	mov	sp, r7
 801e78e:	bd80      	pop	{r7, pc}
 801e790:	40005c00 	.word	0x40005c00
 801e794:	40021000 	.word	0x40021000

0801e798 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e798:	b580      	push	{r7, lr}
 801e79a:	b082      	sub	sp, #8
 801e79c:	af00      	add	r7, sp, #0
 801e79e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801e7ac:	4619      	mov	r1, r3
 801e7ae:	4610      	mov	r0, r2
 801e7b0:	f7f9 fd90 	bl	80182d4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801e7b4:	bf00      	nop
 801e7b6:	3708      	adds	r7, #8
 801e7b8:	46bd      	mov	sp, r7
 801e7ba:	bd80      	pop	{r7, pc}

0801e7bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e7bc:	b580      	push	{r7, lr}
 801e7be:	b082      	sub	sp, #8
 801e7c0:	af00      	add	r7, sp, #0
 801e7c2:	6078      	str	r0, [r7, #4]
 801e7c4:	460b      	mov	r3, r1
 801e7c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801e7ce:	78fa      	ldrb	r2, [r7, #3]
 801e7d0:	6879      	ldr	r1, [r7, #4]
 801e7d2:	4613      	mov	r3, r2
 801e7d4:	009b      	lsls	r3, r3, #2
 801e7d6:	4413      	add	r3, r2
 801e7d8:	00db      	lsls	r3, r3, #3
 801e7da:	440b      	add	r3, r1
 801e7dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801e7e0:	681a      	ldr	r2, [r3, #0]
 801e7e2:	78fb      	ldrb	r3, [r7, #3]
 801e7e4:	4619      	mov	r1, r3
 801e7e6:	f7f9 fdca 	bl	801837e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801e7ea:	bf00      	nop
 801e7ec:	3708      	adds	r7, #8
 801e7ee:	46bd      	mov	sp, r7
 801e7f0:	bd80      	pop	{r7, pc}

0801e7f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e7f2:	b580      	push	{r7, lr}
 801e7f4:	b082      	sub	sp, #8
 801e7f6:	af00      	add	r7, sp, #0
 801e7f8:	6078      	str	r0, [r7, #4]
 801e7fa:	460b      	mov	r3, r1
 801e7fc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801e804:	78fa      	ldrb	r2, [r7, #3]
 801e806:	6879      	ldr	r1, [r7, #4]
 801e808:	4613      	mov	r3, r2
 801e80a:	009b      	lsls	r3, r3, #2
 801e80c:	4413      	add	r3, r2
 801e80e:	00db      	lsls	r3, r3, #3
 801e810:	440b      	add	r3, r1
 801e812:	3324      	adds	r3, #36	; 0x24
 801e814:	681a      	ldr	r2, [r3, #0]
 801e816:	78fb      	ldrb	r3, [r7, #3]
 801e818:	4619      	mov	r1, r3
 801e81a:	f7f9 fe13 	bl	8018444 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801e81e:	bf00      	nop
 801e820:	3708      	adds	r7, #8
 801e822:	46bd      	mov	sp, r7
 801e824:	bd80      	pop	{r7, pc}

0801e826 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e826:	b580      	push	{r7, lr}
 801e828:	b082      	sub	sp, #8
 801e82a:	af00      	add	r7, sp, #0
 801e82c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801e82e:	687b      	ldr	r3, [r7, #4]
 801e830:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801e834:	4618      	mov	r0, r3
 801e836:	f7f9 ff27 	bl	8018688 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801e83a:	bf00      	nop
 801e83c:	3708      	adds	r7, #8
 801e83e:	46bd      	mov	sp, r7
 801e840:	bd80      	pop	{r7, pc}

0801e842 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e842:	b580      	push	{r7, lr}
 801e844:	b084      	sub	sp, #16
 801e846:	af00      	add	r7, sp, #0
 801e848:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801e84a:	2301      	movs	r3, #1
 801e84c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801e84e:	687b      	ldr	r3, [r7, #4]
 801e850:	795b      	ldrb	r3, [r3, #5]
 801e852:	2b02      	cmp	r3, #2
 801e854:	d001      	beq.n	801e85a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801e856:	f7e9 fded 	bl	8008434 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801e860:	7bfa      	ldrb	r2, [r7, #15]
 801e862:	4611      	mov	r1, r2
 801e864:	4618      	mov	r0, r3
 801e866:	f7f9 fed1 	bl	801860c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801e86a:	687b      	ldr	r3, [r7, #4]
 801e86c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801e870:	4618      	mov	r0, r3
 801e872:	f7f9 fe7d 	bl	8018570 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801e876:	bf00      	nop
 801e878:	3710      	adds	r7, #16
 801e87a:	46bd      	mov	sp, r7
 801e87c:	bd80      	pop	{r7, pc}
	...

0801e880 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e880:	b580      	push	{r7, lr}
 801e882:	b082      	sub	sp, #8
 801e884:	af00      	add	r7, sp, #0
 801e886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801e88e:	4618      	mov	r0, r3
 801e890:	f7f9 fecc 	bl	801862c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	7a5b      	ldrb	r3, [r3, #9]
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d005      	beq.n	801e8a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e89c:	4b04      	ldr	r3, [pc, #16]	; (801e8b0 <HAL_PCD_SuspendCallback+0x30>)
 801e89e:	691b      	ldr	r3, [r3, #16]
 801e8a0:	4a03      	ldr	r2, [pc, #12]	; (801e8b0 <HAL_PCD_SuspendCallback+0x30>)
 801e8a2:	f043 0306 	orr.w	r3, r3, #6
 801e8a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801e8a8:	bf00      	nop
 801e8aa:	3708      	adds	r7, #8
 801e8ac:	46bd      	mov	sp, r7
 801e8ae:	bd80      	pop	{r7, pc}
 801e8b0:	e000ed00 	.word	0xe000ed00

0801e8b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e8b4:	b580      	push	{r7, lr}
 801e8b6:	b082      	sub	sp, #8
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	7a5b      	ldrb	r3, [r3, #9]
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	d007      	beq.n	801e8d4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e8c4:	4b08      	ldr	r3, [pc, #32]	; (801e8e8 <HAL_PCD_ResumeCallback+0x34>)
 801e8c6:	691b      	ldr	r3, [r3, #16]
 801e8c8:	4a07      	ldr	r2, [pc, #28]	; (801e8e8 <HAL_PCD_ResumeCallback+0x34>)
 801e8ca:	f023 0306 	bic.w	r3, r3, #6
 801e8ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801e8d0:	f000 f9f8 	bl	801ecc4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801e8da:	4618      	mov	r0, r3
 801e8dc:	f7f9 febc 	bl	8018658 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801e8e0:	bf00      	nop
 801e8e2:	3708      	adds	r7, #8
 801e8e4:	46bd      	mov	sp, r7
 801e8e6:	bd80      	pop	{r7, pc}
 801e8e8:	e000ed00 	.word	0xe000ed00

0801e8ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801e8ec:	b580      	push	{r7, lr}
 801e8ee:	b082      	sub	sp, #8
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801e8f4:	4a2b      	ldr	r2, [pc, #172]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	4a29      	ldr	r2, [pc, #164]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e900:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 801e904:	4b27      	ldr	r3, [pc, #156]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e906:	4a28      	ldr	r2, [pc, #160]	; (801e9a8 <USBD_LL_Init+0xbc>)
 801e908:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801e90a:	4b26      	ldr	r3, [pc, #152]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e90c:	2208      	movs	r2, #8
 801e90e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801e910:	4b24      	ldr	r3, [pc, #144]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e912:	2202      	movs	r2, #2
 801e914:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801e916:	4b23      	ldr	r3, [pc, #140]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e918:	2202      	movs	r2, #2
 801e91a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801e91c:	4b21      	ldr	r3, [pc, #132]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e91e:	2200      	movs	r2, #0
 801e920:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801e922:	4b20      	ldr	r3, [pc, #128]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e924:	2200      	movs	r2, #0
 801e926:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801e928:	4b1e      	ldr	r3, [pc, #120]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e92a:	2200      	movs	r2, #0
 801e92c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801e92e:	4b1d      	ldr	r3, [pc, #116]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e930:	2200      	movs	r2, #0
 801e932:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801e934:	481b      	ldr	r0, [pc, #108]	; (801e9a4 <USBD_LL_Init+0xb8>)
 801e936:	f7ed f9d3 	bl	800bce0 <HAL_PCD_Init>
 801e93a:	4603      	mov	r3, r0
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d001      	beq.n	801e944 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801e940:	f7e9 fd78 	bl	8008434 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801e94a:	2318      	movs	r3, #24
 801e94c:	2200      	movs	r2, #0
 801e94e:	2100      	movs	r1, #0
 801e950:	f7ee fe8d 	bl	800d66e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801e95a:	2358      	movs	r3, #88	; 0x58
 801e95c:	2200      	movs	r2, #0
 801e95e:	2180      	movs	r1, #128	; 0x80
 801e960:	f7ee fe85 	bl	800d66e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801e96a:	23c0      	movs	r3, #192	; 0xc0
 801e96c:	2200      	movs	r2, #0
 801e96e:	2181      	movs	r1, #129	; 0x81
 801e970:	f7ee fe7d 	bl	800d66e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801e97a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801e97e:	2200      	movs	r2, #0
 801e980:	2101      	movs	r1, #1
 801e982:	f7ee fe74 	bl	800d66e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801e98c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e990:	2200      	movs	r2, #0
 801e992:	2182      	movs	r1, #130	; 0x82
 801e994:	f7ee fe6b 	bl	800d66e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801e998:	2300      	movs	r3, #0
}
 801e99a:	4618      	mov	r0, r3
 801e99c:	3708      	adds	r7, #8
 801e99e:	46bd      	mov	sp, r7
 801e9a0:	bd80      	pop	{r7, pc}
 801e9a2:	bf00      	nop
 801e9a4:	20013a20 	.word	0x20013a20
 801e9a8:	40005c00 	.word	0x40005c00

0801e9ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801e9ac:	b580      	push	{r7, lr}
 801e9ae:	b084      	sub	sp, #16
 801e9b0:	af00      	add	r7, sp, #0
 801e9b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e9b4:	2300      	movs	r3, #0
 801e9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e9b8:	2300      	movs	r3, #0
 801e9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801e9c2:	4618      	mov	r0, r3
 801e9c4:	f7ed fa5a 	bl	800be7c <HAL_PCD_Start>
 801e9c8:	4603      	mov	r3, r0
 801e9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e9cc:	7bfb      	ldrb	r3, [r7, #15]
 801e9ce:	4618      	mov	r0, r3
 801e9d0:	f000 f97e 	bl	801ecd0 <USBD_Get_USB_Status>
 801e9d4:	4603      	mov	r3, r0
 801e9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 801e9da:	4618      	mov	r0, r3
 801e9dc:	3710      	adds	r7, #16
 801e9de:	46bd      	mov	sp, r7
 801e9e0:	bd80      	pop	{r7, pc}

0801e9e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801e9e2:	b580      	push	{r7, lr}
 801e9e4:	b084      	sub	sp, #16
 801e9e6:	af00      	add	r7, sp, #0
 801e9e8:	6078      	str	r0, [r7, #4]
 801e9ea:	4608      	mov	r0, r1
 801e9ec:	4611      	mov	r1, r2
 801e9ee:	461a      	mov	r2, r3
 801e9f0:	4603      	mov	r3, r0
 801e9f2:	70fb      	strb	r3, [r7, #3]
 801e9f4:	460b      	mov	r3, r1
 801e9f6:	70bb      	strb	r3, [r7, #2]
 801e9f8:	4613      	mov	r3, r2
 801e9fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e9fc:	2300      	movs	r3, #0
 801e9fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ea00:	2300      	movs	r3, #0
 801ea02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ea0a:	78bb      	ldrb	r3, [r7, #2]
 801ea0c:	883a      	ldrh	r2, [r7, #0]
 801ea0e:	78f9      	ldrb	r1, [r7, #3]
 801ea10:	f7ed fba1 	bl	800c156 <HAL_PCD_EP_Open>
 801ea14:	4603      	mov	r3, r0
 801ea16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ea18:	7bfb      	ldrb	r3, [r7, #15]
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	f000 f958 	bl	801ecd0 <USBD_Get_USB_Status>
 801ea20:	4603      	mov	r3, r0
 801ea22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ea24:	7bbb      	ldrb	r3, [r7, #14]
}
 801ea26:	4618      	mov	r0, r3
 801ea28:	3710      	adds	r7, #16
 801ea2a:	46bd      	mov	sp, r7
 801ea2c:	bd80      	pop	{r7, pc}

0801ea2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ea2e:	b580      	push	{r7, lr}
 801ea30:	b084      	sub	sp, #16
 801ea32:	af00      	add	r7, sp, #0
 801ea34:	6078      	str	r0, [r7, #4]
 801ea36:	460b      	mov	r3, r1
 801ea38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ea3a:	2300      	movs	r3, #0
 801ea3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ea3e:	2300      	movs	r3, #0
 801ea40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ea48:	78fa      	ldrb	r2, [r7, #3]
 801ea4a:	4611      	mov	r1, r2
 801ea4c:	4618      	mov	r0, r3
 801ea4e:	f7ed fbdf 	bl	800c210 <HAL_PCD_EP_Close>
 801ea52:	4603      	mov	r3, r0
 801ea54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ea56:	7bfb      	ldrb	r3, [r7, #15]
 801ea58:	4618      	mov	r0, r3
 801ea5a:	f000 f939 	bl	801ecd0 <USBD_Get_USB_Status>
 801ea5e:	4603      	mov	r3, r0
 801ea60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ea62:	7bbb      	ldrb	r3, [r7, #14]
}
 801ea64:	4618      	mov	r0, r3
 801ea66:	3710      	adds	r7, #16
 801ea68:	46bd      	mov	sp, r7
 801ea6a:	bd80      	pop	{r7, pc}

0801ea6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ea6c:	b580      	push	{r7, lr}
 801ea6e:	b084      	sub	sp, #16
 801ea70:	af00      	add	r7, sp, #0
 801ea72:	6078      	str	r0, [r7, #4]
 801ea74:	460b      	mov	r3, r1
 801ea76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ea78:	2300      	movs	r3, #0
 801ea7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ea7c:	2300      	movs	r3, #0
 801ea7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ea86:	78fa      	ldrb	r2, [r7, #3]
 801ea88:	4611      	mov	r1, r2
 801ea8a:	4618      	mov	r0, r3
 801ea8c:	f7ed fc88 	bl	800c3a0 <HAL_PCD_EP_SetStall>
 801ea90:	4603      	mov	r3, r0
 801ea92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ea94:	7bfb      	ldrb	r3, [r7, #15]
 801ea96:	4618      	mov	r0, r3
 801ea98:	f000 f91a 	bl	801ecd0 <USBD_Get_USB_Status>
 801ea9c:	4603      	mov	r3, r0
 801ea9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801eaa0:	7bbb      	ldrb	r3, [r7, #14]
}
 801eaa2:	4618      	mov	r0, r3
 801eaa4:	3710      	adds	r7, #16
 801eaa6:	46bd      	mov	sp, r7
 801eaa8:	bd80      	pop	{r7, pc}

0801eaaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801eaaa:	b580      	push	{r7, lr}
 801eaac:	b084      	sub	sp, #16
 801eaae:	af00      	add	r7, sp, #0
 801eab0:	6078      	str	r0, [r7, #4]
 801eab2:	460b      	mov	r3, r1
 801eab4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eab6:	2300      	movs	r3, #0
 801eab8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801eaba:	2300      	movs	r3, #0
 801eabc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801eac4:	78fa      	ldrb	r2, [r7, #3]
 801eac6:	4611      	mov	r1, r2
 801eac8:	4618      	mov	r0, r3
 801eaca:	f7ed fcbb 	bl	800c444 <HAL_PCD_EP_ClrStall>
 801eace:	4603      	mov	r3, r0
 801ead0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ead2:	7bfb      	ldrb	r3, [r7, #15]
 801ead4:	4618      	mov	r0, r3
 801ead6:	f000 f8fb 	bl	801ecd0 <USBD_Get_USB_Status>
 801eada:	4603      	mov	r3, r0
 801eadc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801eade:	7bbb      	ldrb	r3, [r7, #14]
}
 801eae0:	4618      	mov	r0, r3
 801eae2:	3710      	adds	r7, #16
 801eae4:	46bd      	mov	sp, r7
 801eae6:	bd80      	pop	{r7, pc}

0801eae8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801eae8:	b480      	push	{r7}
 801eaea:	b085      	sub	sp, #20
 801eaec:	af00      	add	r7, sp, #0
 801eaee:	6078      	str	r0, [r7, #4]
 801eaf0:	460b      	mov	r3, r1
 801eaf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801eafa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801eafc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	da0b      	bge.n	801eb1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801eb04:	78fb      	ldrb	r3, [r7, #3]
 801eb06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801eb0a:	68f9      	ldr	r1, [r7, #12]
 801eb0c:	4613      	mov	r3, r2
 801eb0e:	009b      	lsls	r3, r3, #2
 801eb10:	4413      	add	r3, r2
 801eb12:	00db      	lsls	r3, r3, #3
 801eb14:	440b      	add	r3, r1
 801eb16:	3312      	adds	r3, #18
 801eb18:	781b      	ldrb	r3, [r3, #0]
 801eb1a:	e00b      	b.n	801eb34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801eb1c:	78fb      	ldrb	r3, [r7, #3]
 801eb1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801eb22:	68f9      	ldr	r1, [r7, #12]
 801eb24:	4613      	mov	r3, r2
 801eb26:	009b      	lsls	r3, r3, #2
 801eb28:	4413      	add	r3, r2
 801eb2a:	00db      	lsls	r3, r3, #3
 801eb2c:	440b      	add	r3, r1
 801eb2e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 801eb32:	781b      	ldrb	r3, [r3, #0]
  }
}
 801eb34:	4618      	mov	r0, r3
 801eb36:	3714      	adds	r7, #20
 801eb38:	46bd      	mov	sp, r7
 801eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb3e:	4770      	bx	lr

0801eb40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801eb40:	b580      	push	{r7, lr}
 801eb42:	b084      	sub	sp, #16
 801eb44:	af00      	add	r7, sp, #0
 801eb46:	6078      	str	r0, [r7, #4]
 801eb48:	460b      	mov	r3, r1
 801eb4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eb4c:	2300      	movs	r3, #0
 801eb4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801eb50:	2300      	movs	r3, #0
 801eb52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801eb5a:	78fa      	ldrb	r2, [r7, #3]
 801eb5c:	4611      	mov	r1, r2
 801eb5e:	4618      	mov	r0, r3
 801eb60:	f7ed fad5 	bl	800c10e <HAL_PCD_SetAddress>
 801eb64:	4603      	mov	r3, r0
 801eb66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801eb68:	7bfb      	ldrb	r3, [r7, #15]
 801eb6a:	4618      	mov	r0, r3
 801eb6c:	f000 f8b0 	bl	801ecd0 <USBD_Get_USB_Status>
 801eb70:	4603      	mov	r3, r0
 801eb72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801eb74:	7bbb      	ldrb	r3, [r7, #14]
}
 801eb76:	4618      	mov	r0, r3
 801eb78:	3710      	adds	r7, #16
 801eb7a:	46bd      	mov	sp, r7
 801eb7c:	bd80      	pop	{r7, pc}

0801eb7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801eb7e:	b580      	push	{r7, lr}
 801eb80:	b086      	sub	sp, #24
 801eb82:	af00      	add	r7, sp, #0
 801eb84:	60f8      	str	r0, [r7, #12]
 801eb86:	607a      	str	r2, [r7, #4]
 801eb88:	603b      	str	r3, [r7, #0]
 801eb8a:	460b      	mov	r3, r1
 801eb8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eb8e:	2300      	movs	r3, #0
 801eb90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801eb92:	2300      	movs	r3, #0
 801eb94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801eb96:	68fb      	ldr	r3, [r7, #12]
 801eb98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801eb9c:	7af9      	ldrb	r1, [r7, #11]
 801eb9e:	683b      	ldr	r3, [r7, #0]
 801eba0:	687a      	ldr	r2, [r7, #4]
 801eba2:	f7ed fbc6 	bl	800c332 <HAL_PCD_EP_Transmit>
 801eba6:	4603      	mov	r3, r0
 801eba8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ebaa:	7dfb      	ldrb	r3, [r7, #23]
 801ebac:	4618      	mov	r0, r3
 801ebae:	f000 f88f 	bl	801ecd0 <USBD_Get_USB_Status>
 801ebb2:	4603      	mov	r3, r0
 801ebb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ebb6:	7dbb      	ldrb	r3, [r7, #22]
}
 801ebb8:	4618      	mov	r0, r3
 801ebba:	3718      	adds	r7, #24
 801ebbc:	46bd      	mov	sp, r7
 801ebbe:	bd80      	pop	{r7, pc}

0801ebc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ebc0:	b580      	push	{r7, lr}
 801ebc2:	b086      	sub	sp, #24
 801ebc4:	af00      	add	r7, sp, #0
 801ebc6:	60f8      	str	r0, [r7, #12]
 801ebc8:	607a      	str	r2, [r7, #4]
 801ebca:	603b      	str	r3, [r7, #0]
 801ebcc:	460b      	mov	r3, r1
 801ebce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ebd8:	68fb      	ldr	r3, [r7, #12]
 801ebda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ebde:	7af9      	ldrb	r1, [r7, #11]
 801ebe0:	683b      	ldr	r3, [r7, #0]
 801ebe2:	687a      	ldr	r2, [r7, #4]
 801ebe4:	f7ed fb5c 	bl	800c2a0 <HAL_PCD_EP_Receive>
 801ebe8:	4603      	mov	r3, r0
 801ebea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ebec:	7dfb      	ldrb	r3, [r7, #23]
 801ebee:	4618      	mov	r0, r3
 801ebf0:	f000 f86e 	bl	801ecd0 <USBD_Get_USB_Status>
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ebf8:	7dbb      	ldrb	r3, [r7, #22]
}
 801ebfa:	4618      	mov	r0, r3
 801ebfc:	3718      	adds	r7, #24
 801ebfe:	46bd      	mov	sp, r7
 801ec00:	bd80      	pop	{r7, pc}

0801ec02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ec02:	b580      	push	{r7, lr}
 801ec04:	b082      	sub	sp, #8
 801ec06:	af00      	add	r7, sp, #0
 801ec08:	6078      	str	r0, [r7, #4]
 801ec0a:	460b      	mov	r3, r1
 801ec0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ec14:	78fa      	ldrb	r2, [r7, #3]
 801ec16:	4611      	mov	r1, r2
 801ec18:	4618      	mov	r0, r3
 801ec1a:	f7ed fb72 	bl	800c302 <HAL_PCD_EP_GetRxCount>
 801ec1e:	4603      	mov	r3, r0
}
 801ec20:	4618      	mov	r0, r3
 801ec22:	3708      	adds	r7, #8
 801ec24:	46bd      	mov	sp, r7
 801ec26:	bd80      	pop	{r7, pc}

0801ec28 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ec28:	b580      	push	{r7, lr}
 801ec2a:	b082      	sub	sp, #8
 801ec2c:	af00      	add	r7, sp, #0
 801ec2e:	6078      	str	r0, [r7, #4]
 801ec30:	460b      	mov	r3, r1
 801ec32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801ec34:	78fb      	ldrb	r3, [r7, #3]
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	d002      	beq.n	801ec40 <HAL_PCDEx_LPM_Callback+0x18>
 801ec3a:	2b01      	cmp	r3, #1
 801ec3c:	d013      	beq.n	801ec66 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801ec3e:	e023      	b.n	801ec88 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801ec40:	687b      	ldr	r3, [r7, #4]
 801ec42:	7a5b      	ldrb	r3, [r3, #9]
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	d007      	beq.n	801ec58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801ec48:	f000 f83c 	bl	801ecc4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ec4c:	4b10      	ldr	r3, [pc, #64]	; (801ec90 <HAL_PCDEx_LPM_Callback+0x68>)
 801ec4e:	691b      	ldr	r3, [r3, #16]
 801ec50:	4a0f      	ldr	r2, [pc, #60]	; (801ec90 <HAL_PCDEx_LPM_Callback+0x68>)
 801ec52:	f023 0306 	bic.w	r3, r3, #6
 801ec56:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801ec5e:	4618      	mov	r0, r3
 801ec60:	f7f9 fcfa 	bl	8018658 <USBD_LL_Resume>
    break;
 801ec64:	e010      	b.n	801ec88 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801ec6c:	4618      	mov	r0, r3
 801ec6e:	f7f9 fcdd 	bl	801862c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	7a5b      	ldrb	r3, [r3, #9]
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d005      	beq.n	801ec86 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ec7a:	4b05      	ldr	r3, [pc, #20]	; (801ec90 <HAL_PCDEx_LPM_Callback+0x68>)
 801ec7c:	691b      	ldr	r3, [r3, #16]
 801ec7e:	4a04      	ldr	r2, [pc, #16]	; (801ec90 <HAL_PCDEx_LPM_Callback+0x68>)
 801ec80:	f043 0306 	orr.w	r3, r3, #6
 801ec84:	6113      	str	r3, [r2, #16]
    break;
 801ec86:	bf00      	nop
}
 801ec88:	bf00      	nop
 801ec8a:	3708      	adds	r7, #8
 801ec8c:	46bd      	mov	sp, r7
 801ec8e:	bd80      	pop	{r7, pc}
 801ec90:	e000ed00 	.word	0xe000ed00

0801ec94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ec94:	b480      	push	{r7}
 801ec96:	b083      	sub	sp, #12
 801ec98:	af00      	add	r7, sp, #0
 801ec9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ec9c:	4b03      	ldr	r3, [pc, #12]	; (801ecac <USBD_static_malloc+0x18>)
}
 801ec9e:	4618      	mov	r0, r3
 801eca0:	370c      	adds	r7, #12
 801eca2:	46bd      	mov	sp, r7
 801eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca8:	4770      	bx	lr
 801ecaa:	bf00      	nop
 801ecac:	20013cfc 	.word	0x20013cfc

0801ecb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ecb0:	b480      	push	{r7}
 801ecb2:	b083      	sub	sp, #12
 801ecb4:	af00      	add	r7, sp, #0
 801ecb6:	6078      	str	r0, [r7, #4]

}
 801ecb8:	bf00      	nop
 801ecba:	370c      	adds	r7, #12
 801ecbc:	46bd      	mov	sp, r7
 801ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecc2:	4770      	bx	lr

0801ecc4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801ecc4:	b580      	push	{r7, lr}
 801ecc6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801ecc8:	f7e8 f89e 	bl	8006e08 <SystemClock_Config>
}
 801eccc:	bf00      	nop
 801ecce:	bd80      	pop	{r7, pc}

0801ecd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ecd0:	b480      	push	{r7}
 801ecd2:	b085      	sub	sp, #20
 801ecd4:	af00      	add	r7, sp, #0
 801ecd6:	4603      	mov	r3, r0
 801ecd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ecda:	2300      	movs	r3, #0
 801ecdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ecde:	79fb      	ldrb	r3, [r7, #7]
 801ece0:	2b03      	cmp	r3, #3
 801ece2:	d817      	bhi.n	801ed14 <USBD_Get_USB_Status+0x44>
 801ece4:	a201      	add	r2, pc, #4	; (adr r2, 801ecec <USBD_Get_USB_Status+0x1c>)
 801ece6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ecea:	bf00      	nop
 801ecec:	0801ecfd 	.word	0x0801ecfd
 801ecf0:	0801ed03 	.word	0x0801ed03
 801ecf4:	0801ed09 	.word	0x0801ed09
 801ecf8:	0801ed0f 	.word	0x0801ed0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	73fb      	strb	r3, [r7, #15]
    break;
 801ed00:	e00b      	b.n	801ed1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ed02:	2303      	movs	r3, #3
 801ed04:	73fb      	strb	r3, [r7, #15]
    break;
 801ed06:	e008      	b.n	801ed1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ed08:	2301      	movs	r3, #1
 801ed0a:	73fb      	strb	r3, [r7, #15]
    break;
 801ed0c:	e005      	b.n	801ed1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ed0e:	2303      	movs	r3, #3
 801ed10:	73fb      	strb	r3, [r7, #15]
    break;
 801ed12:	e002      	b.n	801ed1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ed14:	2303      	movs	r3, #3
 801ed16:	73fb      	strb	r3, [r7, #15]
    break;
 801ed18:	bf00      	nop
  }
  return usb_status;
 801ed1a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ed1c:	4618      	mov	r0, r3
 801ed1e:	3714      	adds	r7, #20
 801ed20:	46bd      	mov	sp, r7
 801ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed26:	4770      	bx	lr

0801ed28 <malloc>:
 801ed28:	4b02      	ldr	r3, [pc, #8]	; (801ed34 <malloc+0xc>)
 801ed2a:	4601      	mov	r1, r0
 801ed2c:	6818      	ldr	r0, [r3, #0]
 801ed2e:	f000 b823 	b.w	801ed78 <_malloc_r>
 801ed32:	bf00      	nop
 801ed34:	2000028c 	.word	0x2000028c

0801ed38 <sbrk_aligned>:
 801ed38:	b570      	push	{r4, r5, r6, lr}
 801ed3a:	4e0e      	ldr	r6, [pc, #56]	; (801ed74 <sbrk_aligned+0x3c>)
 801ed3c:	460c      	mov	r4, r1
 801ed3e:	6831      	ldr	r1, [r6, #0]
 801ed40:	4605      	mov	r5, r0
 801ed42:	b911      	cbnz	r1, 801ed4a <sbrk_aligned+0x12>
 801ed44:	f000 f934 	bl	801efb0 <_sbrk_r>
 801ed48:	6030      	str	r0, [r6, #0]
 801ed4a:	4621      	mov	r1, r4
 801ed4c:	4628      	mov	r0, r5
 801ed4e:	f000 f92f 	bl	801efb0 <_sbrk_r>
 801ed52:	1c43      	adds	r3, r0, #1
 801ed54:	d00a      	beq.n	801ed6c <sbrk_aligned+0x34>
 801ed56:	1cc4      	adds	r4, r0, #3
 801ed58:	f024 0403 	bic.w	r4, r4, #3
 801ed5c:	42a0      	cmp	r0, r4
 801ed5e:	d007      	beq.n	801ed70 <sbrk_aligned+0x38>
 801ed60:	1a21      	subs	r1, r4, r0
 801ed62:	4628      	mov	r0, r5
 801ed64:	f000 f924 	bl	801efb0 <_sbrk_r>
 801ed68:	3001      	adds	r0, #1
 801ed6a:	d101      	bne.n	801ed70 <sbrk_aligned+0x38>
 801ed6c:	f04f 34ff 	mov.w	r4, #4294967295
 801ed70:	4620      	mov	r0, r4
 801ed72:	bd70      	pop	{r4, r5, r6, pc}
 801ed74:	20013f20 	.word	0x20013f20

0801ed78 <_malloc_r>:
 801ed78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed7c:	1ccd      	adds	r5, r1, #3
 801ed7e:	f025 0503 	bic.w	r5, r5, #3
 801ed82:	3508      	adds	r5, #8
 801ed84:	2d0c      	cmp	r5, #12
 801ed86:	bf38      	it	cc
 801ed88:	250c      	movcc	r5, #12
 801ed8a:	2d00      	cmp	r5, #0
 801ed8c:	4607      	mov	r7, r0
 801ed8e:	db01      	blt.n	801ed94 <_malloc_r+0x1c>
 801ed90:	42a9      	cmp	r1, r5
 801ed92:	d905      	bls.n	801eda0 <_malloc_r+0x28>
 801ed94:	230c      	movs	r3, #12
 801ed96:	603b      	str	r3, [r7, #0]
 801ed98:	2600      	movs	r6, #0
 801ed9a:	4630      	mov	r0, r6
 801ed9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eda0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ee74 <_malloc_r+0xfc>
 801eda4:	f000 f868 	bl	801ee78 <__malloc_lock>
 801eda8:	f8d8 3000 	ldr.w	r3, [r8]
 801edac:	461c      	mov	r4, r3
 801edae:	bb5c      	cbnz	r4, 801ee08 <_malloc_r+0x90>
 801edb0:	4629      	mov	r1, r5
 801edb2:	4638      	mov	r0, r7
 801edb4:	f7ff ffc0 	bl	801ed38 <sbrk_aligned>
 801edb8:	1c43      	adds	r3, r0, #1
 801edba:	4604      	mov	r4, r0
 801edbc:	d155      	bne.n	801ee6a <_malloc_r+0xf2>
 801edbe:	f8d8 4000 	ldr.w	r4, [r8]
 801edc2:	4626      	mov	r6, r4
 801edc4:	2e00      	cmp	r6, #0
 801edc6:	d145      	bne.n	801ee54 <_malloc_r+0xdc>
 801edc8:	2c00      	cmp	r4, #0
 801edca:	d048      	beq.n	801ee5e <_malloc_r+0xe6>
 801edcc:	6823      	ldr	r3, [r4, #0]
 801edce:	4631      	mov	r1, r6
 801edd0:	4638      	mov	r0, r7
 801edd2:	eb04 0903 	add.w	r9, r4, r3
 801edd6:	f000 f8eb 	bl	801efb0 <_sbrk_r>
 801edda:	4581      	cmp	r9, r0
 801eddc:	d13f      	bne.n	801ee5e <_malloc_r+0xe6>
 801edde:	6821      	ldr	r1, [r4, #0]
 801ede0:	1a6d      	subs	r5, r5, r1
 801ede2:	4629      	mov	r1, r5
 801ede4:	4638      	mov	r0, r7
 801ede6:	f7ff ffa7 	bl	801ed38 <sbrk_aligned>
 801edea:	3001      	adds	r0, #1
 801edec:	d037      	beq.n	801ee5e <_malloc_r+0xe6>
 801edee:	6823      	ldr	r3, [r4, #0]
 801edf0:	442b      	add	r3, r5
 801edf2:	6023      	str	r3, [r4, #0]
 801edf4:	f8d8 3000 	ldr.w	r3, [r8]
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	d038      	beq.n	801ee6e <_malloc_r+0xf6>
 801edfc:	685a      	ldr	r2, [r3, #4]
 801edfe:	42a2      	cmp	r2, r4
 801ee00:	d12b      	bne.n	801ee5a <_malloc_r+0xe2>
 801ee02:	2200      	movs	r2, #0
 801ee04:	605a      	str	r2, [r3, #4]
 801ee06:	e00f      	b.n	801ee28 <_malloc_r+0xb0>
 801ee08:	6822      	ldr	r2, [r4, #0]
 801ee0a:	1b52      	subs	r2, r2, r5
 801ee0c:	d41f      	bmi.n	801ee4e <_malloc_r+0xd6>
 801ee0e:	2a0b      	cmp	r2, #11
 801ee10:	d917      	bls.n	801ee42 <_malloc_r+0xca>
 801ee12:	1961      	adds	r1, r4, r5
 801ee14:	42a3      	cmp	r3, r4
 801ee16:	6025      	str	r5, [r4, #0]
 801ee18:	bf18      	it	ne
 801ee1a:	6059      	strne	r1, [r3, #4]
 801ee1c:	6863      	ldr	r3, [r4, #4]
 801ee1e:	bf08      	it	eq
 801ee20:	f8c8 1000 	streq.w	r1, [r8]
 801ee24:	5162      	str	r2, [r4, r5]
 801ee26:	604b      	str	r3, [r1, #4]
 801ee28:	4638      	mov	r0, r7
 801ee2a:	f104 060b 	add.w	r6, r4, #11
 801ee2e:	f000 f829 	bl	801ee84 <__malloc_unlock>
 801ee32:	f026 0607 	bic.w	r6, r6, #7
 801ee36:	1d23      	adds	r3, r4, #4
 801ee38:	1af2      	subs	r2, r6, r3
 801ee3a:	d0ae      	beq.n	801ed9a <_malloc_r+0x22>
 801ee3c:	1b9b      	subs	r3, r3, r6
 801ee3e:	50a3      	str	r3, [r4, r2]
 801ee40:	e7ab      	b.n	801ed9a <_malloc_r+0x22>
 801ee42:	42a3      	cmp	r3, r4
 801ee44:	6862      	ldr	r2, [r4, #4]
 801ee46:	d1dd      	bne.n	801ee04 <_malloc_r+0x8c>
 801ee48:	f8c8 2000 	str.w	r2, [r8]
 801ee4c:	e7ec      	b.n	801ee28 <_malloc_r+0xb0>
 801ee4e:	4623      	mov	r3, r4
 801ee50:	6864      	ldr	r4, [r4, #4]
 801ee52:	e7ac      	b.n	801edae <_malloc_r+0x36>
 801ee54:	4634      	mov	r4, r6
 801ee56:	6876      	ldr	r6, [r6, #4]
 801ee58:	e7b4      	b.n	801edc4 <_malloc_r+0x4c>
 801ee5a:	4613      	mov	r3, r2
 801ee5c:	e7cc      	b.n	801edf8 <_malloc_r+0x80>
 801ee5e:	230c      	movs	r3, #12
 801ee60:	603b      	str	r3, [r7, #0]
 801ee62:	4638      	mov	r0, r7
 801ee64:	f000 f80e 	bl	801ee84 <__malloc_unlock>
 801ee68:	e797      	b.n	801ed9a <_malloc_r+0x22>
 801ee6a:	6025      	str	r5, [r4, #0]
 801ee6c:	e7dc      	b.n	801ee28 <_malloc_r+0xb0>
 801ee6e:	605b      	str	r3, [r3, #4]
 801ee70:	deff      	udf	#255	; 0xff
 801ee72:	bf00      	nop
 801ee74:	20013f1c 	.word	0x20013f1c

0801ee78 <__malloc_lock>:
 801ee78:	4801      	ldr	r0, [pc, #4]	; (801ee80 <__malloc_lock+0x8>)
 801ee7a:	f000 b8d3 	b.w	801f024 <__retarget_lock_acquire_recursive>
 801ee7e:	bf00      	nop
 801ee80:	20014060 	.word	0x20014060

0801ee84 <__malloc_unlock>:
 801ee84:	4801      	ldr	r0, [pc, #4]	; (801ee8c <__malloc_unlock+0x8>)
 801ee86:	f000 b8ce 	b.w	801f026 <__retarget_lock_release_recursive>
 801ee8a:	bf00      	nop
 801ee8c:	20014060 	.word	0x20014060

0801ee90 <siprintf>:
 801ee90:	b40e      	push	{r1, r2, r3}
 801ee92:	b500      	push	{lr}
 801ee94:	b09c      	sub	sp, #112	; 0x70
 801ee96:	ab1d      	add	r3, sp, #116	; 0x74
 801ee98:	9002      	str	r0, [sp, #8]
 801ee9a:	9006      	str	r0, [sp, #24]
 801ee9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801eea0:	4809      	ldr	r0, [pc, #36]	; (801eec8 <siprintf+0x38>)
 801eea2:	9107      	str	r1, [sp, #28]
 801eea4:	9104      	str	r1, [sp, #16]
 801eea6:	4909      	ldr	r1, [pc, #36]	; (801eecc <siprintf+0x3c>)
 801eea8:	f853 2b04 	ldr.w	r2, [r3], #4
 801eeac:	9105      	str	r1, [sp, #20]
 801eeae:	6800      	ldr	r0, [r0, #0]
 801eeb0:	9301      	str	r3, [sp, #4]
 801eeb2:	a902      	add	r1, sp, #8
 801eeb4:	f000 f97a 	bl	801f1ac <_svfiprintf_r>
 801eeb8:	9b02      	ldr	r3, [sp, #8]
 801eeba:	2200      	movs	r2, #0
 801eebc:	701a      	strb	r2, [r3, #0]
 801eebe:	b01c      	add	sp, #112	; 0x70
 801eec0:	f85d eb04 	ldr.w	lr, [sp], #4
 801eec4:	b003      	add	sp, #12
 801eec6:	4770      	bx	lr
 801eec8:	2000028c 	.word	0x2000028c
 801eecc:	ffff0208 	.word	0xffff0208

0801eed0 <memset>:
 801eed0:	4402      	add	r2, r0
 801eed2:	4603      	mov	r3, r0
 801eed4:	4293      	cmp	r3, r2
 801eed6:	d100      	bne.n	801eeda <memset+0xa>
 801eed8:	4770      	bx	lr
 801eeda:	f803 1b01 	strb.w	r1, [r3], #1
 801eede:	e7f9      	b.n	801eed4 <memset+0x4>

0801eee0 <strncmp>:
 801eee0:	b510      	push	{r4, lr}
 801eee2:	b16a      	cbz	r2, 801ef00 <strncmp+0x20>
 801eee4:	3901      	subs	r1, #1
 801eee6:	1884      	adds	r4, r0, r2
 801eee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eeec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801eef0:	429a      	cmp	r2, r3
 801eef2:	d103      	bne.n	801eefc <strncmp+0x1c>
 801eef4:	42a0      	cmp	r0, r4
 801eef6:	d001      	beq.n	801eefc <strncmp+0x1c>
 801eef8:	2a00      	cmp	r2, #0
 801eefa:	d1f5      	bne.n	801eee8 <strncmp+0x8>
 801eefc:	1ad0      	subs	r0, r2, r3
 801eefe:	bd10      	pop	{r4, pc}
 801ef00:	4610      	mov	r0, r2
 801ef02:	e7fc      	b.n	801eefe <strncmp+0x1e>

0801ef04 <_reclaim_reent>:
 801ef04:	4b29      	ldr	r3, [pc, #164]	; (801efac <_reclaim_reent+0xa8>)
 801ef06:	681b      	ldr	r3, [r3, #0]
 801ef08:	4283      	cmp	r3, r0
 801ef0a:	b570      	push	{r4, r5, r6, lr}
 801ef0c:	4604      	mov	r4, r0
 801ef0e:	d04b      	beq.n	801efa8 <_reclaim_reent+0xa4>
 801ef10:	69c3      	ldr	r3, [r0, #28]
 801ef12:	b143      	cbz	r3, 801ef26 <_reclaim_reent+0x22>
 801ef14:	68db      	ldr	r3, [r3, #12]
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d144      	bne.n	801efa4 <_reclaim_reent+0xa0>
 801ef1a:	69e3      	ldr	r3, [r4, #28]
 801ef1c:	6819      	ldr	r1, [r3, #0]
 801ef1e:	b111      	cbz	r1, 801ef26 <_reclaim_reent+0x22>
 801ef20:	4620      	mov	r0, r4
 801ef22:	f000 f89d 	bl	801f060 <_free_r>
 801ef26:	6961      	ldr	r1, [r4, #20]
 801ef28:	b111      	cbz	r1, 801ef30 <_reclaim_reent+0x2c>
 801ef2a:	4620      	mov	r0, r4
 801ef2c:	f000 f898 	bl	801f060 <_free_r>
 801ef30:	69e1      	ldr	r1, [r4, #28]
 801ef32:	b111      	cbz	r1, 801ef3a <_reclaim_reent+0x36>
 801ef34:	4620      	mov	r0, r4
 801ef36:	f000 f893 	bl	801f060 <_free_r>
 801ef3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ef3c:	b111      	cbz	r1, 801ef44 <_reclaim_reent+0x40>
 801ef3e:	4620      	mov	r0, r4
 801ef40:	f000 f88e 	bl	801f060 <_free_r>
 801ef44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ef46:	b111      	cbz	r1, 801ef4e <_reclaim_reent+0x4a>
 801ef48:	4620      	mov	r0, r4
 801ef4a:	f000 f889 	bl	801f060 <_free_r>
 801ef4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ef50:	b111      	cbz	r1, 801ef58 <_reclaim_reent+0x54>
 801ef52:	4620      	mov	r0, r4
 801ef54:	f000 f884 	bl	801f060 <_free_r>
 801ef58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ef5a:	b111      	cbz	r1, 801ef62 <_reclaim_reent+0x5e>
 801ef5c:	4620      	mov	r0, r4
 801ef5e:	f000 f87f 	bl	801f060 <_free_r>
 801ef62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801ef64:	b111      	cbz	r1, 801ef6c <_reclaim_reent+0x68>
 801ef66:	4620      	mov	r0, r4
 801ef68:	f000 f87a 	bl	801f060 <_free_r>
 801ef6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801ef6e:	b111      	cbz	r1, 801ef76 <_reclaim_reent+0x72>
 801ef70:	4620      	mov	r0, r4
 801ef72:	f000 f875 	bl	801f060 <_free_r>
 801ef76:	6a23      	ldr	r3, [r4, #32]
 801ef78:	b1b3      	cbz	r3, 801efa8 <_reclaim_reent+0xa4>
 801ef7a:	4620      	mov	r0, r4
 801ef7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ef80:	4718      	bx	r3
 801ef82:	5949      	ldr	r1, [r1, r5]
 801ef84:	b941      	cbnz	r1, 801ef98 <_reclaim_reent+0x94>
 801ef86:	3504      	adds	r5, #4
 801ef88:	69e3      	ldr	r3, [r4, #28]
 801ef8a:	2d80      	cmp	r5, #128	; 0x80
 801ef8c:	68d9      	ldr	r1, [r3, #12]
 801ef8e:	d1f8      	bne.n	801ef82 <_reclaim_reent+0x7e>
 801ef90:	4620      	mov	r0, r4
 801ef92:	f000 f865 	bl	801f060 <_free_r>
 801ef96:	e7c0      	b.n	801ef1a <_reclaim_reent+0x16>
 801ef98:	680e      	ldr	r6, [r1, #0]
 801ef9a:	4620      	mov	r0, r4
 801ef9c:	f000 f860 	bl	801f060 <_free_r>
 801efa0:	4631      	mov	r1, r6
 801efa2:	e7ef      	b.n	801ef84 <_reclaim_reent+0x80>
 801efa4:	2500      	movs	r5, #0
 801efa6:	e7ef      	b.n	801ef88 <_reclaim_reent+0x84>
 801efa8:	bd70      	pop	{r4, r5, r6, pc}
 801efaa:	bf00      	nop
 801efac:	2000028c 	.word	0x2000028c

0801efb0 <_sbrk_r>:
 801efb0:	b538      	push	{r3, r4, r5, lr}
 801efb2:	4d06      	ldr	r5, [pc, #24]	; (801efcc <_sbrk_r+0x1c>)
 801efb4:	2300      	movs	r3, #0
 801efb6:	4604      	mov	r4, r0
 801efb8:	4608      	mov	r0, r1
 801efba:	602b      	str	r3, [r5, #0]
 801efbc:	f7ea f86c 	bl	8009098 <_sbrk>
 801efc0:	1c43      	adds	r3, r0, #1
 801efc2:	d102      	bne.n	801efca <_sbrk_r+0x1a>
 801efc4:	682b      	ldr	r3, [r5, #0]
 801efc6:	b103      	cbz	r3, 801efca <_sbrk_r+0x1a>
 801efc8:	6023      	str	r3, [r4, #0]
 801efca:	bd38      	pop	{r3, r4, r5, pc}
 801efcc:	2001405c 	.word	0x2001405c

0801efd0 <__errno>:
 801efd0:	4b01      	ldr	r3, [pc, #4]	; (801efd8 <__errno+0x8>)
 801efd2:	6818      	ldr	r0, [r3, #0]
 801efd4:	4770      	bx	lr
 801efd6:	bf00      	nop
 801efd8:	2000028c 	.word	0x2000028c

0801efdc <__libc_init_array>:
 801efdc:	b570      	push	{r4, r5, r6, lr}
 801efde:	4d0d      	ldr	r5, [pc, #52]	; (801f014 <__libc_init_array+0x38>)
 801efe0:	4c0d      	ldr	r4, [pc, #52]	; (801f018 <__libc_init_array+0x3c>)
 801efe2:	1b64      	subs	r4, r4, r5
 801efe4:	10a4      	asrs	r4, r4, #2
 801efe6:	2600      	movs	r6, #0
 801efe8:	42a6      	cmp	r6, r4
 801efea:	d109      	bne.n	801f000 <__libc_init_array+0x24>
 801efec:	4d0b      	ldr	r5, [pc, #44]	; (801f01c <__libc_init_array+0x40>)
 801efee:	4c0c      	ldr	r4, [pc, #48]	; (801f020 <__libc_init_array+0x44>)
 801eff0:	f001 f8f4 	bl	80201dc <_init>
 801eff4:	1b64      	subs	r4, r4, r5
 801eff6:	10a4      	asrs	r4, r4, #2
 801eff8:	2600      	movs	r6, #0
 801effa:	42a6      	cmp	r6, r4
 801effc:	d105      	bne.n	801f00a <__libc_init_array+0x2e>
 801effe:	bd70      	pop	{r4, r5, r6, pc}
 801f000:	f855 3b04 	ldr.w	r3, [r5], #4
 801f004:	4798      	blx	r3
 801f006:	3601      	adds	r6, #1
 801f008:	e7ee      	b.n	801efe8 <__libc_init_array+0xc>
 801f00a:	f855 3b04 	ldr.w	r3, [r5], #4
 801f00e:	4798      	blx	r3
 801f010:	3601      	adds	r6, #1
 801f012:	e7f2      	b.n	801effa <__libc_init_array+0x1e>
 801f014:	080209a8 	.word	0x080209a8
 801f018:	080209a8 	.word	0x080209a8
 801f01c:	080209a8 	.word	0x080209a8
 801f020:	080209ac 	.word	0x080209ac

0801f024 <__retarget_lock_acquire_recursive>:
 801f024:	4770      	bx	lr

0801f026 <__retarget_lock_release_recursive>:
 801f026:	4770      	bx	lr

0801f028 <strcpy>:
 801f028:	4603      	mov	r3, r0
 801f02a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f02e:	f803 2b01 	strb.w	r2, [r3], #1
 801f032:	2a00      	cmp	r2, #0
 801f034:	d1f9      	bne.n	801f02a <strcpy+0x2>
 801f036:	4770      	bx	lr

0801f038 <__aeabi_memcpy>:
 801f038:	f000 b803 	b.w	801f042 <memcpy>

0801f03c <__aeabi_memclr>:
 801f03c:	2200      	movs	r2, #0
 801f03e:	f7e6 bd02 	b.w	8005a46 <__aeabi_memset>

0801f042 <memcpy>:
 801f042:	440a      	add	r2, r1
 801f044:	4291      	cmp	r1, r2
 801f046:	f100 33ff 	add.w	r3, r0, #4294967295
 801f04a:	d100      	bne.n	801f04e <memcpy+0xc>
 801f04c:	4770      	bx	lr
 801f04e:	b510      	push	{r4, lr}
 801f050:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f054:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f058:	4291      	cmp	r1, r2
 801f05a:	d1f9      	bne.n	801f050 <memcpy+0xe>
 801f05c:	bd10      	pop	{r4, pc}
	...

0801f060 <_free_r>:
 801f060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f062:	2900      	cmp	r1, #0
 801f064:	d044      	beq.n	801f0f0 <_free_r+0x90>
 801f066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f06a:	9001      	str	r0, [sp, #4]
 801f06c:	2b00      	cmp	r3, #0
 801f06e:	f1a1 0404 	sub.w	r4, r1, #4
 801f072:	bfb8      	it	lt
 801f074:	18e4      	addlt	r4, r4, r3
 801f076:	f7ff feff 	bl	801ee78 <__malloc_lock>
 801f07a:	4a1e      	ldr	r2, [pc, #120]	; (801f0f4 <_free_r+0x94>)
 801f07c:	9801      	ldr	r0, [sp, #4]
 801f07e:	6813      	ldr	r3, [r2, #0]
 801f080:	b933      	cbnz	r3, 801f090 <_free_r+0x30>
 801f082:	6063      	str	r3, [r4, #4]
 801f084:	6014      	str	r4, [r2, #0]
 801f086:	b003      	add	sp, #12
 801f088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f08c:	f7ff befa 	b.w	801ee84 <__malloc_unlock>
 801f090:	42a3      	cmp	r3, r4
 801f092:	d908      	bls.n	801f0a6 <_free_r+0x46>
 801f094:	6825      	ldr	r5, [r4, #0]
 801f096:	1961      	adds	r1, r4, r5
 801f098:	428b      	cmp	r3, r1
 801f09a:	bf01      	itttt	eq
 801f09c:	6819      	ldreq	r1, [r3, #0]
 801f09e:	685b      	ldreq	r3, [r3, #4]
 801f0a0:	1949      	addeq	r1, r1, r5
 801f0a2:	6021      	streq	r1, [r4, #0]
 801f0a4:	e7ed      	b.n	801f082 <_free_r+0x22>
 801f0a6:	461a      	mov	r2, r3
 801f0a8:	685b      	ldr	r3, [r3, #4]
 801f0aa:	b10b      	cbz	r3, 801f0b0 <_free_r+0x50>
 801f0ac:	42a3      	cmp	r3, r4
 801f0ae:	d9fa      	bls.n	801f0a6 <_free_r+0x46>
 801f0b0:	6811      	ldr	r1, [r2, #0]
 801f0b2:	1855      	adds	r5, r2, r1
 801f0b4:	42a5      	cmp	r5, r4
 801f0b6:	d10b      	bne.n	801f0d0 <_free_r+0x70>
 801f0b8:	6824      	ldr	r4, [r4, #0]
 801f0ba:	4421      	add	r1, r4
 801f0bc:	1854      	adds	r4, r2, r1
 801f0be:	42a3      	cmp	r3, r4
 801f0c0:	6011      	str	r1, [r2, #0]
 801f0c2:	d1e0      	bne.n	801f086 <_free_r+0x26>
 801f0c4:	681c      	ldr	r4, [r3, #0]
 801f0c6:	685b      	ldr	r3, [r3, #4]
 801f0c8:	6053      	str	r3, [r2, #4]
 801f0ca:	440c      	add	r4, r1
 801f0cc:	6014      	str	r4, [r2, #0]
 801f0ce:	e7da      	b.n	801f086 <_free_r+0x26>
 801f0d0:	d902      	bls.n	801f0d8 <_free_r+0x78>
 801f0d2:	230c      	movs	r3, #12
 801f0d4:	6003      	str	r3, [r0, #0]
 801f0d6:	e7d6      	b.n	801f086 <_free_r+0x26>
 801f0d8:	6825      	ldr	r5, [r4, #0]
 801f0da:	1961      	adds	r1, r4, r5
 801f0dc:	428b      	cmp	r3, r1
 801f0de:	bf04      	itt	eq
 801f0e0:	6819      	ldreq	r1, [r3, #0]
 801f0e2:	685b      	ldreq	r3, [r3, #4]
 801f0e4:	6063      	str	r3, [r4, #4]
 801f0e6:	bf04      	itt	eq
 801f0e8:	1949      	addeq	r1, r1, r5
 801f0ea:	6021      	streq	r1, [r4, #0]
 801f0ec:	6054      	str	r4, [r2, #4]
 801f0ee:	e7ca      	b.n	801f086 <_free_r+0x26>
 801f0f0:	b003      	add	sp, #12
 801f0f2:	bd30      	pop	{r4, r5, pc}
 801f0f4:	20013f1c 	.word	0x20013f1c

0801f0f8 <__ssputs_r>:
 801f0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0fc:	688e      	ldr	r6, [r1, #8]
 801f0fe:	461f      	mov	r7, r3
 801f100:	42be      	cmp	r6, r7
 801f102:	680b      	ldr	r3, [r1, #0]
 801f104:	4682      	mov	sl, r0
 801f106:	460c      	mov	r4, r1
 801f108:	4690      	mov	r8, r2
 801f10a:	d82c      	bhi.n	801f166 <__ssputs_r+0x6e>
 801f10c:	898a      	ldrh	r2, [r1, #12]
 801f10e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f112:	d026      	beq.n	801f162 <__ssputs_r+0x6a>
 801f114:	6965      	ldr	r5, [r4, #20]
 801f116:	6909      	ldr	r1, [r1, #16]
 801f118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f11c:	eba3 0901 	sub.w	r9, r3, r1
 801f120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f124:	1c7b      	adds	r3, r7, #1
 801f126:	444b      	add	r3, r9
 801f128:	106d      	asrs	r5, r5, #1
 801f12a:	429d      	cmp	r5, r3
 801f12c:	bf38      	it	cc
 801f12e:	461d      	movcc	r5, r3
 801f130:	0553      	lsls	r3, r2, #21
 801f132:	d527      	bpl.n	801f184 <__ssputs_r+0x8c>
 801f134:	4629      	mov	r1, r5
 801f136:	f7ff fe1f 	bl	801ed78 <_malloc_r>
 801f13a:	4606      	mov	r6, r0
 801f13c:	b360      	cbz	r0, 801f198 <__ssputs_r+0xa0>
 801f13e:	6921      	ldr	r1, [r4, #16]
 801f140:	464a      	mov	r2, r9
 801f142:	f7ff ff7e 	bl	801f042 <memcpy>
 801f146:	89a3      	ldrh	r3, [r4, #12]
 801f148:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f150:	81a3      	strh	r3, [r4, #12]
 801f152:	6126      	str	r6, [r4, #16]
 801f154:	6165      	str	r5, [r4, #20]
 801f156:	444e      	add	r6, r9
 801f158:	eba5 0509 	sub.w	r5, r5, r9
 801f15c:	6026      	str	r6, [r4, #0]
 801f15e:	60a5      	str	r5, [r4, #8]
 801f160:	463e      	mov	r6, r7
 801f162:	42be      	cmp	r6, r7
 801f164:	d900      	bls.n	801f168 <__ssputs_r+0x70>
 801f166:	463e      	mov	r6, r7
 801f168:	6820      	ldr	r0, [r4, #0]
 801f16a:	4632      	mov	r2, r6
 801f16c:	4641      	mov	r1, r8
 801f16e:	f000 faab 	bl	801f6c8 <memmove>
 801f172:	68a3      	ldr	r3, [r4, #8]
 801f174:	1b9b      	subs	r3, r3, r6
 801f176:	60a3      	str	r3, [r4, #8]
 801f178:	6823      	ldr	r3, [r4, #0]
 801f17a:	4433      	add	r3, r6
 801f17c:	6023      	str	r3, [r4, #0]
 801f17e:	2000      	movs	r0, #0
 801f180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f184:	462a      	mov	r2, r5
 801f186:	f000 fab9 	bl	801f6fc <_realloc_r>
 801f18a:	4606      	mov	r6, r0
 801f18c:	2800      	cmp	r0, #0
 801f18e:	d1e0      	bne.n	801f152 <__ssputs_r+0x5a>
 801f190:	6921      	ldr	r1, [r4, #16]
 801f192:	4650      	mov	r0, sl
 801f194:	f7ff ff64 	bl	801f060 <_free_r>
 801f198:	230c      	movs	r3, #12
 801f19a:	f8ca 3000 	str.w	r3, [sl]
 801f19e:	89a3      	ldrh	r3, [r4, #12]
 801f1a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f1a4:	81a3      	strh	r3, [r4, #12]
 801f1a6:	f04f 30ff 	mov.w	r0, #4294967295
 801f1aa:	e7e9      	b.n	801f180 <__ssputs_r+0x88>

0801f1ac <_svfiprintf_r>:
 801f1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1b0:	4698      	mov	r8, r3
 801f1b2:	898b      	ldrh	r3, [r1, #12]
 801f1b4:	061b      	lsls	r3, r3, #24
 801f1b6:	b09d      	sub	sp, #116	; 0x74
 801f1b8:	4607      	mov	r7, r0
 801f1ba:	460d      	mov	r5, r1
 801f1bc:	4614      	mov	r4, r2
 801f1be:	d50e      	bpl.n	801f1de <_svfiprintf_r+0x32>
 801f1c0:	690b      	ldr	r3, [r1, #16]
 801f1c2:	b963      	cbnz	r3, 801f1de <_svfiprintf_r+0x32>
 801f1c4:	2140      	movs	r1, #64	; 0x40
 801f1c6:	f7ff fdd7 	bl	801ed78 <_malloc_r>
 801f1ca:	6028      	str	r0, [r5, #0]
 801f1cc:	6128      	str	r0, [r5, #16]
 801f1ce:	b920      	cbnz	r0, 801f1da <_svfiprintf_r+0x2e>
 801f1d0:	230c      	movs	r3, #12
 801f1d2:	603b      	str	r3, [r7, #0]
 801f1d4:	f04f 30ff 	mov.w	r0, #4294967295
 801f1d8:	e0d0      	b.n	801f37c <_svfiprintf_r+0x1d0>
 801f1da:	2340      	movs	r3, #64	; 0x40
 801f1dc:	616b      	str	r3, [r5, #20]
 801f1de:	2300      	movs	r3, #0
 801f1e0:	9309      	str	r3, [sp, #36]	; 0x24
 801f1e2:	2320      	movs	r3, #32
 801f1e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 801f1ec:	2330      	movs	r3, #48	; 0x30
 801f1ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801f394 <_svfiprintf_r+0x1e8>
 801f1f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f1f6:	f04f 0901 	mov.w	r9, #1
 801f1fa:	4623      	mov	r3, r4
 801f1fc:	469a      	mov	sl, r3
 801f1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f202:	b10a      	cbz	r2, 801f208 <_svfiprintf_r+0x5c>
 801f204:	2a25      	cmp	r2, #37	; 0x25
 801f206:	d1f9      	bne.n	801f1fc <_svfiprintf_r+0x50>
 801f208:	ebba 0b04 	subs.w	fp, sl, r4
 801f20c:	d00b      	beq.n	801f226 <_svfiprintf_r+0x7a>
 801f20e:	465b      	mov	r3, fp
 801f210:	4622      	mov	r2, r4
 801f212:	4629      	mov	r1, r5
 801f214:	4638      	mov	r0, r7
 801f216:	f7ff ff6f 	bl	801f0f8 <__ssputs_r>
 801f21a:	3001      	adds	r0, #1
 801f21c:	f000 80a9 	beq.w	801f372 <_svfiprintf_r+0x1c6>
 801f220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f222:	445a      	add	r2, fp
 801f224:	9209      	str	r2, [sp, #36]	; 0x24
 801f226:	f89a 3000 	ldrb.w	r3, [sl]
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	f000 80a1 	beq.w	801f372 <_svfiprintf_r+0x1c6>
 801f230:	2300      	movs	r3, #0
 801f232:	f04f 32ff 	mov.w	r2, #4294967295
 801f236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f23a:	f10a 0a01 	add.w	sl, sl, #1
 801f23e:	9304      	str	r3, [sp, #16]
 801f240:	9307      	str	r3, [sp, #28]
 801f242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f246:	931a      	str	r3, [sp, #104]	; 0x68
 801f248:	4654      	mov	r4, sl
 801f24a:	2205      	movs	r2, #5
 801f24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f250:	4850      	ldr	r0, [pc, #320]	; (801f394 <_svfiprintf_r+0x1e8>)
 801f252:	f7e6 fc4d 	bl	8005af0 <memchr>
 801f256:	9a04      	ldr	r2, [sp, #16]
 801f258:	b9d8      	cbnz	r0, 801f292 <_svfiprintf_r+0xe6>
 801f25a:	06d0      	lsls	r0, r2, #27
 801f25c:	bf44      	itt	mi
 801f25e:	2320      	movmi	r3, #32
 801f260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f264:	0711      	lsls	r1, r2, #28
 801f266:	bf44      	itt	mi
 801f268:	232b      	movmi	r3, #43	; 0x2b
 801f26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f26e:	f89a 3000 	ldrb.w	r3, [sl]
 801f272:	2b2a      	cmp	r3, #42	; 0x2a
 801f274:	d015      	beq.n	801f2a2 <_svfiprintf_r+0xf6>
 801f276:	9a07      	ldr	r2, [sp, #28]
 801f278:	4654      	mov	r4, sl
 801f27a:	2000      	movs	r0, #0
 801f27c:	f04f 0c0a 	mov.w	ip, #10
 801f280:	4621      	mov	r1, r4
 801f282:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f286:	3b30      	subs	r3, #48	; 0x30
 801f288:	2b09      	cmp	r3, #9
 801f28a:	d94d      	bls.n	801f328 <_svfiprintf_r+0x17c>
 801f28c:	b1b0      	cbz	r0, 801f2bc <_svfiprintf_r+0x110>
 801f28e:	9207      	str	r2, [sp, #28]
 801f290:	e014      	b.n	801f2bc <_svfiprintf_r+0x110>
 801f292:	eba0 0308 	sub.w	r3, r0, r8
 801f296:	fa09 f303 	lsl.w	r3, r9, r3
 801f29a:	4313      	orrs	r3, r2
 801f29c:	9304      	str	r3, [sp, #16]
 801f29e:	46a2      	mov	sl, r4
 801f2a0:	e7d2      	b.n	801f248 <_svfiprintf_r+0x9c>
 801f2a2:	9b03      	ldr	r3, [sp, #12]
 801f2a4:	1d19      	adds	r1, r3, #4
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	9103      	str	r1, [sp, #12]
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	bfbb      	ittet	lt
 801f2ae:	425b      	neglt	r3, r3
 801f2b0:	f042 0202 	orrlt.w	r2, r2, #2
 801f2b4:	9307      	strge	r3, [sp, #28]
 801f2b6:	9307      	strlt	r3, [sp, #28]
 801f2b8:	bfb8      	it	lt
 801f2ba:	9204      	strlt	r2, [sp, #16]
 801f2bc:	7823      	ldrb	r3, [r4, #0]
 801f2be:	2b2e      	cmp	r3, #46	; 0x2e
 801f2c0:	d10c      	bne.n	801f2dc <_svfiprintf_r+0x130>
 801f2c2:	7863      	ldrb	r3, [r4, #1]
 801f2c4:	2b2a      	cmp	r3, #42	; 0x2a
 801f2c6:	d134      	bne.n	801f332 <_svfiprintf_r+0x186>
 801f2c8:	9b03      	ldr	r3, [sp, #12]
 801f2ca:	1d1a      	adds	r2, r3, #4
 801f2cc:	681b      	ldr	r3, [r3, #0]
 801f2ce:	9203      	str	r2, [sp, #12]
 801f2d0:	2b00      	cmp	r3, #0
 801f2d2:	bfb8      	it	lt
 801f2d4:	f04f 33ff 	movlt.w	r3, #4294967295
 801f2d8:	3402      	adds	r4, #2
 801f2da:	9305      	str	r3, [sp, #20]
 801f2dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801f3a4 <_svfiprintf_r+0x1f8>
 801f2e0:	7821      	ldrb	r1, [r4, #0]
 801f2e2:	2203      	movs	r2, #3
 801f2e4:	4650      	mov	r0, sl
 801f2e6:	f7e6 fc03 	bl	8005af0 <memchr>
 801f2ea:	b138      	cbz	r0, 801f2fc <_svfiprintf_r+0x150>
 801f2ec:	9b04      	ldr	r3, [sp, #16]
 801f2ee:	eba0 000a 	sub.w	r0, r0, sl
 801f2f2:	2240      	movs	r2, #64	; 0x40
 801f2f4:	4082      	lsls	r2, r0
 801f2f6:	4313      	orrs	r3, r2
 801f2f8:	3401      	adds	r4, #1
 801f2fa:	9304      	str	r3, [sp, #16]
 801f2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f300:	4825      	ldr	r0, [pc, #148]	; (801f398 <_svfiprintf_r+0x1ec>)
 801f302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f306:	2206      	movs	r2, #6
 801f308:	f7e6 fbf2 	bl	8005af0 <memchr>
 801f30c:	2800      	cmp	r0, #0
 801f30e:	d038      	beq.n	801f382 <_svfiprintf_r+0x1d6>
 801f310:	4b22      	ldr	r3, [pc, #136]	; (801f39c <_svfiprintf_r+0x1f0>)
 801f312:	bb1b      	cbnz	r3, 801f35c <_svfiprintf_r+0x1b0>
 801f314:	9b03      	ldr	r3, [sp, #12]
 801f316:	3307      	adds	r3, #7
 801f318:	f023 0307 	bic.w	r3, r3, #7
 801f31c:	3308      	adds	r3, #8
 801f31e:	9303      	str	r3, [sp, #12]
 801f320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f322:	4433      	add	r3, r6
 801f324:	9309      	str	r3, [sp, #36]	; 0x24
 801f326:	e768      	b.n	801f1fa <_svfiprintf_r+0x4e>
 801f328:	fb0c 3202 	mla	r2, ip, r2, r3
 801f32c:	460c      	mov	r4, r1
 801f32e:	2001      	movs	r0, #1
 801f330:	e7a6      	b.n	801f280 <_svfiprintf_r+0xd4>
 801f332:	2300      	movs	r3, #0
 801f334:	3401      	adds	r4, #1
 801f336:	9305      	str	r3, [sp, #20]
 801f338:	4619      	mov	r1, r3
 801f33a:	f04f 0c0a 	mov.w	ip, #10
 801f33e:	4620      	mov	r0, r4
 801f340:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f344:	3a30      	subs	r2, #48	; 0x30
 801f346:	2a09      	cmp	r2, #9
 801f348:	d903      	bls.n	801f352 <_svfiprintf_r+0x1a6>
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d0c6      	beq.n	801f2dc <_svfiprintf_r+0x130>
 801f34e:	9105      	str	r1, [sp, #20]
 801f350:	e7c4      	b.n	801f2dc <_svfiprintf_r+0x130>
 801f352:	fb0c 2101 	mla	r1, ip, r1, r2
 801f356:	4604      	mov	r4, r0
 801f358:	2301      	movs	r3, #1
 801f35a:	e7f0      	b.n	801f33e <_svfiprintf_r+0x192>
 801f35c:	ab03      	add	r3, sp, #12
 801f35e:	9300      	str	r3, [sp, #0]
 801f360:	462a      	mov	r2, r5
 801f362:	4b0f      	ldr	r3, [pc, #60]	; (801f3a0 <_svfiprintf_r+0x1f4>)
 801f364:	a904      	add	r1, sp, #16
 801f366:	4638      	mov	r0, r7
 801f368:	f3af 8000 	nop.w
 801f36c:	1c42      	adds	r2, r0, #1
 801f36e:	4606      	mov	r6, r0
 801f370:	d1d6      	bne.n	801f320 <_svfiprintf_r+0x174>
 801f372:	89ab      	ldrh	r3, [r5, #12]
 801f374:	065b      	lsls	r3, r3, #25
 801f376:	f53f af2d 	bmi.w	801f1d4 <_svfiprintf_r+0x28>
 801f37a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f37c:	b01d      	add	sp, #116	; 0x74
 801f37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f382:	ab03      	add	r3, sp, #12
 801f384:	9300      	str	r3, [sp, #0]
 801f386:	462a      	mov	r2, r5
 801f388:	4b05      	ldr	r3, [pc, #20]	; (801f3a0 <_svfiprintf_r+0x1f4>)
 801f38a:	a904      	add	r1, sp, #16
 801f38c:	4638      	mov	r0, r7
 801f38e:	f000 f879 	bl	801f484 <_printf_i>
 801f392:	e7eb      	b.n	801f36c <_svfiprintf_r+0x1c0>
 801f394:	0802059c 	.word	0x0802059c
 801f398:	080205a6 	.word	0x080205a6
 801f39c:	00000000 	.word	0x00000000
 801f3a0:	0801f0f9 	.word	0x0801f0f9
 801f3a4:	080205a2 	.word	0x080205a2

0801f3a8 <_printf_common>:
 801f3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3ac:	4616      	mov	r6, r2
 801f3ae:	4699      	mov	r9, r3
 801f3b0:	688a      	ldr	r2, [r1, #8]
 801f3b2:	690b      	ldr	r3, [r1, #16]
 801f3b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f3b8:	4293      	cmp	r3, r2
 801f3ba:	bfb8      	it	lt
 801f3bc:	4613      	movlt	r3, r2
 801f3be:	6033      	str	r3, [r6, #0]
 801f3c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f3c4:	4607      	mov	r7, r0
 801f3c6:	460c      	mov	r4, r1
 801f3c8:	b10a      	cbz	r2, 801f3ce <_printf_common+0x26>
 801f3ca:	3301      	adds	r3, #1
 801f3cc:	6033      	str	r3, [r6, #0]
 801f3ce:	6823      	ldr	r3, [r4, #0]
 801f3d0:	0699      	lsls	r1, r3, #26
 801f3d2:	bf42      	ittt	mi
 801f3d4:	6833      	ldrmi	r3, [r6, #0]
 801f3d6:	3302      	addmi	r3, #2
 801f3d8:	6033      	strmi	r3, [r6, #0]
 801f3da:	6825      	ldr	r5, [r4, #0]
 801f3dc:	f015 0506 	ands.w	r5, r5, #6
 801f3e0:	d106      	bne.n	801f3f0 <_printf_common+0x48>
 801f3e2:	f104 0a19 	add.w	sl, r4, #25
 801f3e6:	68e3      	ldr	r3, [r4, #12]
 801f3e8:	6832      	ldr	r2, [r6, #0]
 801f3ea:	1a9b      	subs	r3, r3, r2
 801f3ec:	42ab      	cmp	r3, r5
 801f3ee:	dc26      	bgt.n	801f43e <_printf_common+0x96>
 801f3f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f3f4:	1e13      	subs	r3, r2, #0
 801f3f6:	6822      	ldr	r2, [r4, #0]
 801f3f8:	bf18      	it	ne
 801f3fa:	2301      	movne	r3, #1
 801f3fc:	0692      	lsls	r2, r2, #26
 801f3fe:	d42b      	bmi.n	801f458 <_printf_common+0xb0>
 801f400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f404:	4649      	mov	r1, r9
 801f406:	4638      	mov	r0, r7
 801f408:	47c0      	blx	r8
 801f40a:	3001      	adds	r0, #1
 801f40c:	d01e      	beq.n	801f44c <_printf_common+0xa4>
 801f40e:	6823      	ldr	r3, [r4, #0]
 801f410:	6922      	ldr	r2, [r4, #16]
 801f412:	f003 0306 	and.w	r3, r3, #6
 801f416:	2b04      	cmp	r3, #4
 801f418:	bf02      	ittt	eq
 801f41a:	68e5      	ldreq	r5, [r4, #12]
 801f41c:	6833      	ldreq	r3, [r6, #0]
 801f41e:	1aed      	subeq	r5, r5, r3
 801f420:	68a3      	ldr	r3, [r4, #8]
 801f422:	bf0c      	ite	eq
 801f424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f428:	2500      	movne	r5, #0
 801f42a:	4293      	cmp	r3, r2
 801f42c:	bfc4      	itt	gt
 801f42e:	1a9b      	subgt	r3, r3, r2
 801f430:	18ed      	addgt	r5, r5, r3
 801f432:	2600      	movs	r6, #0
 801f434:	341a      	adds	r4, #26
 801f436:	42b5      	cmp	r5, r6
 801f438:	d11a      	bne.n	801f470 <_printf_common+0xc8>
 801f43a:	2000      	movs	r0, #0
 801f43c:	e008      	b.n	801f450 <_printf_common+0xa8>
 801f43e:	2301      	movs	r3, #1
 801f440:	4652      	mov	r2, sl
 801f442:	4649      	mov	r1, r9
 801f444:	4638      	mov	r0, r7
 801f446:	47c0      	blx	r8
 801f448:	3001      	adds	r0, #1
 801f44a:	d103      	bne.n	801f454 <_printf_common+0xac>
 801f44c:	f04f 30ff 	mov.w	r0, #4294967295
 801f450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f454:	3501      	adds	r5, #1
 801f456:	e7c6      	b.n	801f3e6 <_printf_common+0x3e>
 801f458:	18e1      	adds	r1, r4, r3
 801f45a:	1c5a      	adds	r2, r3, #1
 801f45c:	2030      	movs	r0, #48	; 0x30
 801f45e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f462:	4422      	add	r2, r4
 801f464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f46c:	3302      	adds	r3, #2
 801f46e:	e7c7      	b.n	801f400 <_printf_common+0x58>
 801f470:	2301      	movs	r3, #1
 801f472:	4622      	mov	r2, r4
 801f474:	4649      	mov	r1, r9
 801f476:	4638      	mov	r0, r7
 801f478:	47c0      	blx	r8
 801f47a:	3001      	adds	r0, #1
 801f47c:	d0e6      	beq.n	801f44c <_printf_common+0xa4>
 801f47e:	3601      	adds	r6, #1
 801f480:	e7d9      	b.n	801f436 <_printf_common+0x8e>
	...

0801f484 <_printf_i>:
 801f484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f488:	7e0f      	ldrb	r7, [r1, #24]
 801f48a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f48c:	2f78      	cmp	r7, #120	; 0x78
 801f48e:	4691      	mov	r9, r2
 801f490:	4680      	mov	r8, r0
 801f492:	460c      	mov	r4, r1
 801f494:	469a      	mov	sl, r3
 801f496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f49a:	d807      	bhi.n	801f4ac <_printf_i+0x28>
 801f49c:	2f62      	cmp	r7, #98	; 0x62
 801f49e:	d80a      	bhi.n	801f4b6 <_printf_i+0x32>
 801f4a0:	2f00      	cmp	r7, #0
 801f4a2:	f000 80d4 	beq.w	801f64e <_printf_i+0x1ca>
 801f4a6:	2f58      	cmp	r7, #88	; 0x58
 801f4a8:	f000 80c0 	beq.w	801f62c <_printf_i+0x1a8>
 801f4ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f4b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f4b4:	e03a      	b.n	801f52c <_printf_i+0xa8>
 801f4b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f4ba:	2b15      	cmp	r3, #21
 801f4bc:	d8f6      	bhi.n	801f4ac <_printf_i+0x28>
 801f4be:	a101      	add	r1, pc, #4	; (adr r1, 801f4c4 <_printf_i+0x40>)
 801f4c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f4c4:	0801f51d 	.word	0x0801f51d
 801f4c8:	0801f531 	.word	0x0801f531
 801f4cc:	0801f4ad 	.word	0x0801f4ad
 801f4d0:	0801f4ad 	.word	0x0801f4ad
 801f4d4:	0801f4ad 	.word	0x0801f4ad
 801f4d8:	0801f4ad 	.word	0x0801f4ad
 801f4dc:	0801f531 	.word	0x0801f531
 801f4e0:	0801f4ad 	.word	0x0801f4ad
 801f4e4:	0801f4ad 	.word	0x0801f4ad
 801f4e8:	0801f4ad 	.word	0x0801f4ad
 801f4ec:	0801f4ad 	.word	0x0801f4ad
 801f4f0:	0801f635 	.word	0x0801f635
 801f4f4:	0801f55d 	.word	0x0801f55d
 801f4f8:	0801f5ef 	.word	0x0801f5ef
 801f4fc:	0801f4ad 	.word	0x0801f4ad
 801f500:	0801f4ad 	.word	0x0801f4ad
 801f504:	0801f657 	.word	0x0801f657
 801f508:	0801f4ad 	.word	0x0801f4ad
 801f50c:	0801f55d 	.word	0x0801f55d
 801f510:	0801f4ad 	.word	0x0801f4ad
 801f514:	0801f4ad 	.word	0x0801f4ad
 801f518:	0801f5f7 	.word	0x0801f5f7
 801f51c:	682b      	ldr	r3, [r5, #0]
 801f51e:	1d1a      	adds	r2, r3, #4
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	602a      	str	r2, [r5, #0]
 801f524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f52c:	2301      	movs	r3, #1
 801f52e:	e09f      	b.n	801f670 <_printf_i+0x1ec>
 801f530:	6820      	ldr	r0, [r4, #0]
 801f532:	682b      	ldr	r3, [r5, #0]
 801f534:	0607      	lsls	r7, r0, #24
 801f536:	f103 0104 	add.w	r1, r3, #4
 801f53a:	6029      	str	r1, [r5, #0]
 801f53c:	d501      	bpl.n	801f542 <_printf_i+0xbe>
 801f53e:	681e      	ldr	r6, [r3, #0]
 801f540:	e003      	b.n	801f54a <_printf_i+0xc6>
 801f542:	0646      	lsls	r6, r0, #25
 801f544:	d5fb      	bpl.n	801f53e <_printf_i+0xba>
 801f546:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f54a:	2e00      	cmp	r6, #0
 801f54c:	da03      	bge.n	801f556 <_printf_i+0xd2>
 801f54e:	232d      	movs	r3, #45	; 0x2d
 801f550:	4276      	negs	r6, r6
 801f552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f556:	485a      	ldr	r0, [pc, #360]	; (801f6c0 <_printf_i+0x23c>)
 801f558:	230a      	movs	r3, #10
 801f55a:	e012      	b.n	801f582 <_printf_i+0xfe>
 801f55c:	682b      	ldr	r3, [r5, #0]
 801f55e:	6820      	ldr	r0, [r4, #0]
 801f560:	1d19      	adds	r1, r3, #4
 801f562:	6029      	str	r1, [r5, #0]
 801f564:	0605      	lsls	r5, r0, #24
 801f566:	d501      	bpl.n	801f56c <_printf_i+0xe8>
 801f568:	681e      	ldr	r6, [r3, #0]
 801f56a:	e002      	b.n	801f572 <_printf_i+0xee>
 801f56c:	0641      	lsls	r1, r0, #25
 801f56e:	d5fb      	bpl.n	801f568 <_printf_i+0xe4>
 801f570:	881e      	ldrh	r6, [r3, #0]
 801f572:	4853      	ldr	r0, [pc, #332]	; (801f6c0 <_printf_i+0x23c>)
 801f574:	2f6f      	cmp	r7, #111	; 0x6f
 801f576:	bf0c      	ite	eq
 801f578:	2308      	moveq	r3, #8
 801f57a:	230a      	movne	r3, #10
 801f57c:	2100      	movs	r1, #0
 801f57e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f582:	6865      	ldr	r5, [r4, #4]
 801f584:	60a5      	str	r5, [r4, #8]
 801f586:	2d00      	cmp	r5, #0
 801f588:	bfa2      	ittt	ge
 801f58a:	6821      	ldrge	r1, [r4, #0]
 801f58c:	f021 0104 	bicge.w	r1, r1, #4
 801f590:	6021      	strge	r1, [r4, #0]
 801f592:	b90e      	cbnz	r6, 801f598 <_printf_i+0x114>
 801f594:	2d00      	cmp	r5, #0
 801f596:	d04b      	beq.n	801f630 <_printf_i+0x1ac>
 801f598:	4615      	mov	r5, r2
 801f59a:	fbb6 f1f3 	udiv	r1, r6, r3
 801f59e:	fb03 6711 	mls	r7, r3, r1, r6
 801f5a2:	5dc7      	ldrb	r7, [r0, r7]
 801f5a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f5a8:	4637      	mov	r7, r6
 801f5aa:	42bb      	cmp	r3, r7
 801f5ac:	460e      	mov	r6, r1
 801f5ae:	d9f4      	bls.n	801f59a <_printf_i+0x116>
 801f5b0:	2b08      	cmp	r3, #8
 801f5b2:	d10b      	bne.n	801f5cc <_printf_i+0x148>
 801f5b4:	6823      	ldr	r3, [r4, #0]
 801f5b6:	07de      	lsls	r6, r3, #31
 801f5b8:	d508      	bpl.n	801f5cc <_printf_i+0x148>
 801f5ba:	6923      	ldr	r3, [r4, #16]
 801f5bc:	6861      	ldr	r1, [r4, #4]
 801f5be:	4299      	cmp	r1, r3
 801f5c0:	bfde      	ittt	le
 801f5c2:	2330      	movle	r3, #48	; 0x30
 801f5c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f5c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f5cc:	1b52      	subs	r2, r2, r5
 801f5ce:	6122      	str	r2, [r4, #16]
 801f5d0:	f8cd a000 	str.w	sl, [sp]
 801f5d4:	464b      	mov	r3, r9
 801f5d6:	aa03      	add	r2, sp, #12
 801f5d8:	4621      	mov	r1, r4
 801f5da:	4640      	mov	r0, r8
 801f5dc:	f7ff fee4 	bl	801f3a8 <_printf_common>
 801f5e0:	3001      	adds	r0, #1
 801f5e2:	d14a      	bne.n	801f67a <_printf_i+0x1f6>
 801f5e4:	f04f 30ff 	mov.w	r0, #4294967295
 801f5e8:	b004      	add	sp, #16
 801f5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5ee:	6823      	ldr	r3, [r4, #0]
 801f5f0:	f043 0320 	orr.w	r3, r3, #32
 801f5f4:	6023      	str	r3, [r4, #0]
 801f5f6:	4833      	ldr	r0, [pc, #204]	; (801f6c4 <_printf_i+0x240>)
 801f5f8:	2778      	movs	r7, #120	; 0x78
 801f5fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f5fe:	6823      	ldr	r3, [r4, #0]
 801f600:	6829      	ldr	r1, [r5, #0]
 801f602:	061f      	lsls	r7, r3, #24
 801f604:	f851 6b04 	ldr.w	r6, [r1], #4
 801f608:	d402      	bmi.n	801f610 <_printf_i+0x18c>
 801f60a:	065f      	lsls	r7, r3, #25
 801f60c:	bf48      	it	mi
 801f60e:	b2b6      	uxthmi	r6, r6
 801f610:	07df      	lsls	r7, r3, #31
 801f612:	bf48      	it	mi
 801f614:	f043 0320 	orrmi.w	r3, r3, #32
 801f618:	6029      	str	r1, [r5, #0]
 801f61a:	bf48      	it	mi
 801f61c:	6023      	strmi	r3, [r4, #0]
 801f61e:	b91e      	cbnz	r6, 801f628 <_printf_i+0x1a4>
 801f620:	6823      	ldr	r3, [r4, #0]
 801f622:	f023 0320 	bic.w	r3, r3, #32
 801f626:	6023      	str	r3, [r4, #0]
 801f628:	2310      	movs	r3, #16
 801f62a:	e7a7      	b.n	801f57c <_printf_i+0xf8>
 801f62c:	4824      	ldr	r0, [pc, #144]	; (801f6c0 <_printf_i+0x23c>)
 801f62e:	e7e4      	b.n	801f5fa <_printf_i+0x176>
 801f630:	4615      	mov	r5, r2
 801f632:	e7bd      	b.n	801f5b0 <_printf_i+0x12c>
 801f634:	682b      	ldr	r3, [r5, #0]
 801f636:	6826      	ldr	r6, [r4, #0]
 801f638:	6961      	ldr	r1, [r4, #20]
 801f63a:	1d18      	adds	r0, r3, #4
 801f63c:	6028      	str	r0, [r5, #0]
 801f63e:	0635      	lsls	r5, r6, #24
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	d501      	bpl.n	801f648 <_printf_i+0x1c4>
 801f644:	6019      	str	r1, [r3, #0]
 801f646:	e002      	b.n	801f64e <_printf_i+0x1ca>
 801f648:	0670      	lsls	r0, r6, #25
 801f64a:	d5fb      	bpl.n	801f644 <_printf_i+0x1c0>
 801f64c:	8019      	strh	r1, [r3, #0]
 801f64e:	2300      	movs	r3, #0
 801f650:	6123      	str	r3, [r4, #16]
 801f652:	4615      	mov	r5, r2
 801f654:	e7bc      	b.n	801f5d0 <_printf_i+0x14c>
 801f656:	682b      	ldr	r3, [r5, #0]
 801f658:	1d1a      	adds	r2, r3, #4
 801f65a:	602a      	str	r2, [r5, #0]
 801f65c:	681d      	ldr	r5, [r3, #0]
 801f65e:	6862      	ldr	r2, [r4, #4]
 801f660:	2100      	movs	r1, #0
 801f662:	4628      	mov	r0, r5
 801f664:	f7e6 fa44 	bl	8005af0 <memchr>
 801f668:	b108      	cbz	r0, 801f66e <_printf_i+0x1ea>
 801f66a:	1b40      	subs	r0, r0, r5
 801f66c:	6060      	str	r0, [r4, #4]
 801f66e:	6863      	ldr	r3, [r4, #4]
 801f670:	6123      	str	r3, [r4, #16]
 801f672:	2300      	movs	r3, #0
 801f674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f678:	e7aa      	b.n	801f5d0 <_printf_i+0x14c>
 801f67a:	6923      	ldr	r3, [r4, #16]
 801f67c:	462a      	mov	r2, r5
 801f67e:	4649      	mov	r1, r9
 801f680:	4640      	mov	r0, r8
 801f682:	47d0      	blx	sl
 801f684:	3001      	adds	r0, #1
 801f686:	d0ad      	beq.n	801f5e4 <_printf_i+0x160>
 801f688:	6823      	ldr	r3, [r4, #0]
 801f68a:	079b      	lsls	r3, r3, #30
 801f68c:	d413      	bmi.n	801f6b6 <_printf_i+0x232>
 801f68e:	68e0      	ldr	r0, [r4, #12]
 801f690:	9b03      	ldr	r3, [sp, #12]
 801f692:	4298      	cmp	r0, r3
 801f694:	bfb8      	it	lt
 801f696:	4618      	movlt	r0, r3
 801f698:	e7a6      	b.n	801f5e8 <_printf_i+0x164>
 801f69a:	2301      	movs	r3, #1
 801f69c:	4632      	mov	r2, r6
 801f69e:	4649      	mov	r1, r9
 801f6a0:	4640      	mov	r0, r8
 801f6a2:	47d0      	blx	sl
 801f6a4:	3001      	adds	r0, #1
 801f6a6:	d09d      	beq.n	801f5e4 <_printf_i+0x160>
 801f6a8:	3501      	adds	r5, #1
 801f6aa:	68e3      	ldr	r3, [r4, #12]
 801f6ac:	9903      	ldr	r1, [sp, #12]
 801f6ae:	1a5b      	subs	r3, r3, r1
 801f6b0:	42ab      	cmp	r3, r5
 801f6b2:	dcf2      	bgt.n	801f69a <_printf_i+0x216>
 801f6b4:	e7eb      	b.n	801f68e <_printf_i+0x20a>
 801f6b6:	2500      	movs	r5, #0
 801f6b8:	f104 0619 	add.w	r6, r4, #25
 801f6bc:	e7f5      	b.n	801f6aa <_printf_i+0x226>
 801f6be:	bf00      	nop
 801f6c0:	080205ad 	.word	0x080205ad
 801f6c4:	080205be 	.word	0x080205be

0801f6c8 <memmove>:
 801f6c8:	4288      	cmp	r0, r1
 801f6ca:	b510      	push	{r4, lr}
 801f6cc:	eb01 0402 	add.w	r4, r1, r2
 801f6d0:	d902      	bls.n	801f6d8 <memmove+0x10>
 801f6d2:	4284      	cmp	r4, r0
 801f6d4:	4623      	mov	r3, r4
 801f6d6:	d807      	bhi.n	801f6e8 <memmove+0x20>
 801f6d8:	1e43      	subs	r3, r0, #1
 801f6da:	42a1      	cmp	r1, r4
 801f6dc:	d008      	beq.n	801f6f0 <memmove+0x28>
 801f6de:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f6e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f6e6:	e7f8      	b.n	801f6da <memmove+0x12>
 801f6e8:	4402      	add	r2, r0
 801f6ea:	4601      	mov	r1, r0
 801f6ec:	428a      	cmp	r2, r1
 801f6ee:	d100      	bne.n	801f6f2 <memmove+0x2a>
 801f6f0:	bd10      	pop	{r4, pc}
 801f6f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f6f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f6fa:	e7f7      	b.n	801f6ec <memmove+0x24>

0801f6fc <_realloc_r>:
 801f6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f700:	4680      	mov	r8, r0
 801f702:	4614      	mov	r4, r2
 801f704:	460e      	mov	r6, r1
 801f706:	b921      	cbnz	r1, 801f712 <_realloc_r+0x16>
 801f708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f70c:	4611      	mov	r1, r2
 801f70e:	f7ff bb33 	b.w	801ed78 <_malloc_r>
 801f712:	b92a      	cbnz	r2, 801f720 <_realloc_r+0x24>
 801f714:	f7ff fca4 	bl	801f060 <_free_r>
 801f718:	4625      	mov	r5, r4
 801f71a:	4628      	mov	r0, r5
 801f71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f720:	f000 f81b 	bl	801f75a <_malloc_usable_size_r>
 801f724:	4284      	cmp	r4, r0
 801f726:	4607      	mov	r7, r0
 801f728:	d802      	bhi.n	801f730 <_realloc_r+0x34>
 801f72a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f72e:	d812      	bhi.n	801f756 <_realloc_r+0x5a>
 801f730:	4621      	mov	r1, r4
 801f732:	4640      	mov	r0, r8
 801f734:	f7ff fb20 	bl	801ed78 <_malloc_r>
 801f738:	4605      	mov	r5, r0
 801f73a:	2800      	cmp	r0, #0
 801f73c:	d0ed      	beq.n	801f71a <_realloc_r+0x1e>
 801f73e:	42bc      	cmp	r4, r7
 801f740:	4622      	mov	r2, r4
 801f742:	4631      	mov	r1, r6
 801f744:	bf28      	it	cs
 801f746:	463a      	movcs	r2, r7
 801f748:	f7ff fc7b 	bl	801f042 <memcpy>
 801f74c:	4631      	mov	r1, r6
 801f74e:	4640      	mov	r0, r8
 801f750:	f7ff fc86 	bl	801f060 <_free_r>
 801f754:	e7e1      	b.n	801f71a <_realloc_r+0x1e>
 801f756:	4635      	mov	r5, r6
 801f758:	e7df      	b.n	801f71a <_realloc_r+0x1e>

0801f75a <_malloc_usable_size_r>:
 801f75a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f75e:	1f18      	subs	r0, r3, #4
 801f760:	2b00      	cmp	r3, #0
 801f762:	bfbc      	itt	lt
 801f764:	580b      	ldrlt	r3, [r1, r0]
 801f766:	18c0      	addlt	r0, r0, r3
 801f768:	4770      	bx	lr
	...

0801f76c <cosf>:
 801f76c:	ee10 3a10 	vmov	r3, s0
 801f770:	b507      	push	{r0, r1, r2, lr}
 801f772:	4a1e      	ldr	r2, [pc, #120]	; (801f7ec <cosf+0x80>)
 801f774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f778:	4293      	cmp	r3, r2
 801f77a:	dc06      	bgt.n	801f78a <cosf+0x1e>
 801f77c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801f7f0 <cosf+0x84>
 801f780:	b003      	add	sp, #12
 801f782:	f85d eb04 	ldr.w	lr, [sp], #4
 801f786:	f000 b835 	b.w	801f7f4 <__kernel_cosf>
 801f78a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f78e:	db04      	blt.n	801f79a <cosf+0x2e>
 801f790:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f794:	b003      	add	sp, #12
 801f796:	f85d fb04 	ldr.w	pc, [sp], #4
 801f79a:	4668      	mov	r0, sp
 801f79c:	f000 f8d0 	bl	801f940 <__ieee754_rem_pio2f>
 801f7a0:	f000 0003 	and.w	r0, r0, #3
 801f7a4:	2801      	cmp	r0, #1
 801f7a6:	d009      	beq.n	801f7bc <cosf+0x50>
 801f7a8:	2802      	cmp	r0, #2
 801f7aa:	d010      	beq.n	801f7ce <cosf+0x62>
 801f7ac:	b9b0      	cbnz	r0, 801f7dc <cosf+0x70>
 801f7ae:	eddd 0a01 	vldr	s1, [sp, #4]
 801f7b2:	ed9d 0a00 	vldr	s0, [sp]
 801f7b6:	f000 f81d 	bl	801f7f4 <__kernel_cosf>
 801f7ba:	e7eb      	b.n	801f794 <cosf+0x28>
 801f7bc:	eddd 0a01 	vldr	s1, [sp, #4]
 801f7c0:	ed9d 0a00 	vldr	s0, [sp]
 801f7c4:	f000 f874 	bl	801f8b0 <__kernel_sinf>
 801f7c8:	eeb1 0a40 	vneg.f32	s0, s0
 801f7cc:	e7e2      	b.n	801f794 <cosf+0x28>
 801f7ce:	eddd 0a01 	vldr	s1, [sp, #4]
 801f7d2:	ed9d 0a00 	vldr	s0, [sp]
 801f7d6:	f000 f80d 	bl	801f7f4 <__kernel_cosf>
 801f7da:	e7f5      	b.n	801f7c8 <cosf+0x5c>
 801f7dc:	eddd 0a01 	vldr	s1, [sp, #4]
 801f7e0:	ed9d 0a00 	vldr	s0, [sp]
 801f7e4:	2001      	movs	r0, #1
 801f7e6:	f000 f863 	bl	801f8b0 <__kernel_sinf>
 801f7ea:	e7d3      	b.n	801f794 <cosf+0x28>
 801f7ec:	3f490fd8 	.word	0x3f490fd8
 801f7f0:	00000000 	.word	0x00000000

0801f7f4 <__kernel_cosf>:
 801f7f4:	ee10 3a10 	vmov	r3, s0
 801f7f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f7fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f804:	da05      	bge.n	801f812 <__kernel_cosf+0x1e>
 801f806:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f80a:	ee17 2a90 	vmov	r2, s15
 801f80e:	2a00      	cmp	r2, #0
 801f810:	d03b      	beq.n	801f88a <__kernel_cosf+0x96>
 801f812:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f816:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801f890 <__kernel_cosf+0x9c>
 801f81a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801f894 <__kernel_cosf+0xa0>
 801f81e:	4a1e      	ldr	r2, [pc, #120]	; (801f898 <__kernel_cosf+0xa4>)
 801f820:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f824:	4293      	cmp	r3, r2
 801f826:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801f89c <__kernel_cosf+0xa8>
 801f82a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f82e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801f8a0 <__kernel_cosf+0xac>
 801f832:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f836:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801f8a4 <__kernel_cosf+0xb0>
 801f83a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f83e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801f8a8 <__kernel_cosf+0xb4>
 801f842:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f846:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801f84a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801f84e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f852:	eee7 0a06 	vfma.f32	s1, s14, s12
 801f856:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f85a:	dc04      	bgt.n	801f866 <__kernel_cosf+0x72>
 801f85c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f860:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801f864:	4770      	bx	lr
 801f866:	4a11      	ldr	r2, [pc, #68]	; (801f8ac <__kernel_cosf+0xb8>)
 801f868:	4293      	cmp	r3, r2
 801f86a:	bfda      	itte	le
 801f86c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801f870:	ee07 3a10 	vmovle	s14, r3
 801f874:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801f878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f87c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801f880:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f884:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f888:	4770      	bx	lr
 801f88a:	eeb0 0a66 	vmov.f32	s0, s13
 801f88e:	4770      	bx	lr
 801f890:	ad47d74e 	.word	0xad47d74e
 801f894:	310f74f6 	.word	0x310f74f6
 801f898:	3e999999 	.word	0x3e999999
 801f89c:	b493f27c 	.word	0xb493f27c
 801f8a0:	37d00d01 	.word	0x37d00d01
 801f8a4:	bab60b61 	.word	0xbab60b61
 801f8a8:	3d2aaaab 	.word	0x3d2aaaab
 801f8ac:	3f480000 	.word	0x3f480000

0801f8b0 <__kernel_sinf>:
 801f8b0:	ee10 3a10 	vmov	r3, s0
 801f8b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f8b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f8bc:	da04      	bge.n	801f8c8 <__kernel_sinf+0x18>
 801f8be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f8c2:	ee17 3a90 	vmov	r3, s15
 801f8c6:	b35b      	cbz	r3, 801f920 <__kernel_sinf+0x70>
 801f8c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f8cc:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f924 <__kernel_sinf+0x74>
 801f8d0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801f928 <__kernel_sinf+0x78>
 801f8d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f8d8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801f92c <__kernel_sinf+0x7c>
 801f8dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f8e0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801f930 <__kernel_sinf+0x80>
 801f8e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f8e8:	eddf 7a12 	vldr	s15, [pc, #72]	; 801f934 <__kernel_sinf+0x84>
 801f8ec:	ee60 6a07 	vmul.f32	s13, s0, s14
 801f8f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f8f4:	b930      	cbnz	r0, 801f904 <__kernel_sinf+0x54>
 801f8f6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801f938 <__kernel_sinf+0x88>
 801f8fa:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f8fe:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f902:	4770      	bx	lr
 801f904:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801f908:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f90c:	eee0 7a86 	vfma.f32	s15, s1, s12
 801f910:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801f914:	eddf 7a09 	vldr	s15, [pc, #36]	; 801f93c <__kernel_sinf+0x8c>
 801f918:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801f91c:	ee30 0a60 	vsub.f32	s0, s0, s1
 801f920:	4770      	bx	lr
 801f922:	bf00      	nop
 801f924:	2f2ec9d3 	.word	0x2f2ec9d3
 801f928:	b2d72f34 	.word	0xb2d72f34
 801f92c:	3638ef1b 	.word	0x3638ef1b
 801f930:	b9500d01 	.word	0xb9500d01
 801f934:	3c088889 	.word	0x3c088889
 801f938:	be2aaaab 	.word	0xbe2aaaab
 801f93c:	3e2aaaab 	.word	0x3e2aaaab

0801f940 <__ieee754_rem_pio2f>:
 801f940:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f942:	ee10 6a10 	vmov	r6, s0
 801f946:	4b86      	ldr	r3, [pc, #536]	; (801fb60 <__ieee754_rem_pio2f+0x220>)
 801f948:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801f94c:	429d      	cmp	r5, r3
 801f94e:	b087      	sub	sp, #28
 801f950:	4604      	mov	r4, r0
 801f952:	dc05      	bgt.n	801f960 <__ieee754_rem_pio2f+0x20>
 801f954:	2300      	movs	r3, #0
 801f956:	ed80 0a00 	vstr	s0, [r0]
 801f95a:	6043      	str	r3, [r0, #4]
 801f95c:	2000      	movs	r0, #0
 801f95e:	e020      	b.n	801f9a2 <__ieee754_rem_pio2f+0x62>
 801f960:	4b80      	ldr	r3, [pc, #512]	; (801fb64 <__ieee754_rem_pio2f+0x224>)
 801f962:	429d      	cmp	r5, r3
 801f964:	dc38      	bgt.n	801f9d8 <__ieee754_rem_pio2f+0x98>
 801f966:	2e00      	cmp	r6, #0
 801f968:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801fb68 <__ieee754_rem_pio2f+0x228>
 801f96c:	4b7f      	ldr	r3, [pc, #508]	; (801fb6c <__ieee754_rem_pio2f+0x22c>)
 801f96e:	f025 050f 	bic.w	r5, r5, #15
 801f972:	dd18      	ble.n	801f9a6 <__ieee754_rem_pio2f+0x66>
 801f974:	429d      	cmp	r5, r3
 801f976:	ee70 7a47 	vsub.f32	s15, s0, s14
 801f97a:	bf09      	itett	eq
 801f97c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801fb70 <__ieee754_rem_pio2f+0x230>
 801f980:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801fb74 <__ieee754_rem_pio2f+0x234>
 801f984:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801f988:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801fb78 <__ieee754_rem_pio2f+0x238>
 801f98c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801f990:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f994:	edc0 6a00 	vstr	s13, [r0]
 801f998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f99c:	edc0 7a01 	vstr	s15, [r0, #4]
 801f9a0:	2001      	movs	r0, #1
 801f9a2:	b007      	add	sp, #28
 801f9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f9a6:	429d      	cmp	r5, r3
 801f9a8:	ee70 7a07 	vadd.f32	s15, s0, s14
 801f9ac:	bf09      	itett	eq
 801f9ae:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801fb70 <__ieee754_rem_pio2f+0x230>
 801f9b2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801fb74 <__ieee754_rem_pio2f+0x234>
 801f9b6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801f9ba:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801fb78 <__ieee754_rem_pio2f+0x238>
 801f9be:	ee77 6a87 	vadd.f32	s13, s15, s14
 801f9c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f9c6:	edc0 6a00 	vstr	s13, [r0]
 801f9ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f9ce:	edc0 7a01 	vstr	s15, [r0, #4]
 801f9d2:	f04f 30ff 	mov.w	r0, #4294967295
 801f9d6:	e7e4      	b.n	801f9a2 <__ieee754_rem_pio2f+0x62>
 801f9d8:	4b68      	ldr	r3, [pc, #416]	; (801fb7c <__ieee754_rem_pio2f+0x23c>)
 801f9da:	429d      	cmp	r5, r3
 801f9dc:	dc71      	bgt.n	801fac2 <__ieee754_rem_pio2f+0x182>
 801f9de:	f000 f8db 	bl	801fb98 <fabsf>
 801f9e2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801fb80 <__ieee754_rem_pio2f+0x240>
 801f9e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f9ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f9ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f9f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f9f6:	ee17 0a90 	vmov	r0, s15
 801f9fa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801fb68 <__ieee754_rem_pio2f+0x228>
 801f9fe:	eea7 0a67 	vfms.f32	s0, s14, s15
 801fa02:	281f      	cmp	r0, #31
 801fa04:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801fb74 <__ieee754_rem_pio2f+0x234>
 801fa08:	ee67 7a27 	vmul.f32	s15, s14, s15
 801fa0c:	eeb1 6a47 	vneg.f32	s12, s14
 801fa10:	ee70 6a67 	vsub.f32	s13, s0, s15
 801fa14:	ee16 2a90 	vmov	r2, s13
 801fa18:	dc1c      	bgt.n	801fa54 <__ieee754_rem_pio2f+0x114>
 801fa1a:	495a      	ldr	r1, [pc, #360]	; (801fb84 <__ieee754_rem_pio2f+0x244>)
 801fa1c:	1e47      	subs	r7, r0, #1
 801fa1e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801fa22:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801fa26:	428b      	cmp	r3, r1
 801fa28:	d014      	beq.n	801fa54 <__ieee754_rem_pio2f+0x114>
 801fa2a:	6022      	str	r2, [r4, #0]
 801fa2c:	ed94 7a00 	vldr	s14, [r4]
 801fa30:	ee30 0a47 	vsub.f32	s0, s0, s14
 801fa34:	2e00      	cmp	r6, #0
 801fa36:	ee30 0a67 	vsub.f32	s0, s0, s15
 801fa3a:	ed84 0a01 	vstr	s0, [r4, #4]
 801fa3e:	dab0      	bge.n	801f9a2 <__ieee754_rem_pio2f+0x62>
 801fa40:	eeb1 7a47 	vneg.f32	s14, s14
 801fa44:	eeb1 0a40 	vneg.f32	s0, s0
 801fa48:	ed84 7a00 	vstr	s14, [r4]
 801fa4c:	ed84 0a01 	vstr	s0, [r4, #4]
 801fa50:	4240      	negs	r0, r0
 801fa52:	e7a6      	b.n	801f9a2 <__ieee754_rem_pio2f+0x62>
 801fa54:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801fa58:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801fa5c:	2908      	cmp	r1, #8
 801fa5e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801fa62:	dde2      	ble.n	801fa2a <__ieee754_rem_pio2f+0xea>
 801fa64:	eddf 5a42 	vldr	s11, [pc, #264]	; 801fb70 <__ieee754_rem_pio2f+0x230>
 801fa68:	eef0 6a40 	vmov.f32	s13, s0
 801fa6c:	eee6 6a25 	vfma.f32	s13, s12, s11
 801fa70:	ee70 7a66 	vsub.f32	s15, s0, s13
 801fa74:	eee6 7a25 	vfma.f32	s15, s12, s11
 801fa78:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801fb78 <__ieee754_rem_pio2f+0x238>
 801fa7c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801fa80:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801fa84:	ee15 2a90 	vmov	r2, s11
 801fa88:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801fa8c:	1a5b      	subs	r3, r3, r1
 801fa8e:	2b19      	cmp	r3, #25
 801fa90:	dc04      	bgt.n	801fa9c <__ieee754_rem_pio2f+0x15c>
 801fa92:	edc4 5a00 	vstr	s11, [r4]
 801fa96:	eeb0 0a66 	vmov.f32	s0, s13
 801fa9a:	e7c7      	b.n	801fa2c <__ieee754_rem_pio2f+0xec>
 801fa9c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801fb88 <__ieee754_rem_pio2f+0x248>
 801faa0:	eeb0 0a66 	vmov.f32	s0, s13
 801faa4:	eea6 0a25 	vfma.f32	s0, s12, s11
 801faa8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801faac:	eddf 6a37 	vldr	s13, [pc, #220]	; 801fb8c <__ieee754_rem_pio2f+0x24c>
 801fab0:	eee6 7a25 	vfma.f32	s15, s12, s11
 801fab4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801fab8:	ee30 7a67 	vsub.f32	s14, s0, s15
 801fabc:	ed84 7a00 	vstr	s14, [r4]
 801fac0:	e7b4      	b.n	801fa2c <__ieee754_rem_pio2f+0xec>
 801fac2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801fac6:	db06      	blt.n	801fad6 <__ieee754_rem_pio2f+0x196>
 801fac8:	ee70 7a40 	vsub.f32	s15, s0, s0
 801facc:	edc0 7a01 	vstr	s15, [r0, #4]
 801fad0:	edc0 7a00 	vstr	s15, [r0]
 801fad4:	e742      	b.n	801f95c <__ieee754_rem_pio2f+0x1c>
 801fad6:	15ea      	asrs	r2, r5, #23
 801fad8:	3a86      	subs	r2, #134	; 0x86
 801fada:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801fade:	ee07 3a90 	vmov	s15, r3
 801fae2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801fae6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801fb90 <__ieee754_rem_pio2f+0x250>
 801faea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801faee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801faf2:	ed8d 7a03 	vstr	s14, [sp, #12]
 801faf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fafa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801fafe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fb02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fb06:	ed8d 7a04 	vstr	s14, [sp, #16]
 801fb0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fb0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801fb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb16:	edcd 7a05 	vstr	s15, [sp, #20]
 801fb1a:	d11e      	bne.n	801fb5a <__ieee754_rem_pio2f+0x21a>
 801fb1c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801fb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb24:	bf14      	ite	ne
 801fb26:	2302      	movne	r3, #2
 801fb28:	2301      	moveq	r3, #1
 801fb2a:	491a      	ldr	r1, [pc, #104]	; (801fb94 <__ieee754_rem_pio2f+0x254>)
 801fb2c:	9101      	str	r1, [sp, #4]
 801fb2e:	2102      	movs	r1, #2
 801fb30:	9100      	str	r1, [sp, #0]
 801fb32:	a803      	add	r0, sp, #12
 801fb34:	4621      	mov	r1, r4
 801fb36:	f000 f837 	bl	801fba8 <__kernel_rem_pio2f>
 801fb3a:	2e00      	cmp	r6, #0
 801fb3c:	f6bf af31 	bge.w	801f9a2 <__ieee754_rem_pio2f+0x62>
 801fb40:	edd4 7a00 	vldr	s15, [r4]
 801fb44:	eef1 7a67 	vneg.f32	s15, s15
 801fb48:	edc4 7a00 	vstr	s15, [r4]
 801fb4c:	edd4 7a01 	vldr	s15, [r4, #4]
 801fb50:	eef1 7a67 	vneg.f32	s15, s15
 801fb54:	edc4 7a01 	vstr	s15, [r4, #4]
 801fb58:	e77a      	b.n	801fa50 <__ieee754_rem_pio2f+0x110>
 801fb5a:	2303      	movs	r3, #3
 801fb5c:	e7e5      	b.n	801fb2a <__ieee754_rem_pio2f+0x1ea>
 801fb5e:	bf00      	nop
 801fb60:	3f490fd8 	.word	0x3f490fd8
 801fb64:	4016cbe3 	.word	0x4016cbe3
 801fb68:	3fc90f80 	.word	0x3fc90f80
 801fb6c:	3fc90fd0 	.word	0x3fc90fd0
 801fb70:	37354400 	.word	0x37354400
 801fb74:	37354443 	.word	0x37354443
 801fb78:	2e85a308 	.word	0x2e85a308
 801fb7c:	43490f80 	.word	0x43490f80
 801fb80:	3f22f984 	.word	0x3f22f984
 801fb84:	080205d0 	.word	0x080205d0
 801fb88:	2e85a300 	.word	0x2e85a300
 801fb8c:	248d3132 	.word	0x248d3132
 801fb90:	43800000 	.word	0x43800000
 801fb94:	08020650 	.word	0x08020650

0801fb98 <fabsf>:
 801fb98:	ee10 3a10 	vmov	r3, s0
 801fb9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fba0:	ee00 3a10 	vmov	s0, r3
 801fba4:	4770      	bx	lr
	...

0801fba8 <__kernel_rem_pio2f>:
 801fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbac:	ed2d 8b04 	vpush	{d8-d9}
 801fbb0:	b0d9      	sub	sp, #356	; 0x164
 801fbb2:	4688      	mov	r8, r1
 801fbb4:	9002      	str	r0, [sp, #8]
 801fbb6:	49b8      	ldr	r1, [pc, #736]	; (801fe98 <__kernel_rem_pio2f+0x2f0>)
 801fbb8:	9866      	ldr	r0, [sp, #408]	; 0x198
 801fbba:	9301      	str	r3, [sp, #4]
 801fbbc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801fbc0:	9901      	ldr	r1, [sp, #4]
 801fbc2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801fbc4:	f101 3bff 	add.w	fp, r1, #4294967295
 801fbc8:	1d11      	adds	r1, r2, #4
 801fbca:	db25      	blt.n	801fc18 <__kernel_rem_pio2f+0x70>
 801fbcc:	1ed0      	subs	r0, r2, #3
 801fbce:	bf48      	it	mi
 801fbd0:	1d10      	addmi	r0, r2, #4
 801fbd2:	10c0      	asrs	r0, r0, #3
 801fbd4:	1c45      	adds	r5, r0, #1
 801fbd6:	00e9      	lsls	r1, r5, #3
 801fbd8:	eba0 070b 	sub.w	r7, r0, fp
 801fbdc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801fea8 <__kernel_rem_pio2f+0x300>
 801fbe0:	9103      	str	r1, [sp, #12]
 801fbe2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801fbe6:	eb0a 0c0b 	add.w	ip, sl, fp
 801fbea:	ae1c      	add	r6, sp, #112	; 0x70
 801fbec:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801fbf0:	2400      	movs	r4, #0
 801fbf2:	4564      	cmp	r4, ip
 801fbf4:	dd12      	ble.n	801fc1c <__kernel_rem_pio2f+0x74>
 801fbf6:	9901      	ldr	r1, [sp, #4]
 801fbf8:	ac1c      	add	r4, sp, #112	; 0x70
 801fbfa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fbfe:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801fc02:	f04f 0c00 	mov.w	ip, #0
 801fc06:	45d4      	cmp	ip, sl
 801fc08:	dc27      	bgt.n	801fc5a <__kernel_rem_pio2f+0xb2>
 801fc0a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801fc0e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801fea8 <__kernel_rem_pio2f+0x300>
 801fc12:	4627      	mov	r7, r4
 801fc14:	2600      	movs	r6, #0
 801fc16:	e016      	b.n	801fc46 <__kernel_rem_pio2f+0x9e>
 801fc18:	2000      	movs	r0, #0
 801fc1a:	e7db      	b.n	801fbd4 <__kernel_rem_pio2f+0x2c>
 801fc1c:	42e7      	cmn	r7, r4
 801fc1e:	bf5d      	ittte	pl
 801fc20:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801fc24:	ee07 1a90 	vmovpl	s15, r1
 801fc28:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801fc2c:	eef0 7a47 	vmovmi.f32	s15, s14
 801fc30:	ece6 7a01 	vstmia	r6!, {s15}
 801fc34:	3401      	adds	r4, #1
 801fc36:	e7dc      	b.n	801fbf2 <__kernel_rem_pio2f+0x4a>
 801fc38:	ecfe 6a01 	vldmia	lr!, {s13}
 801fc3c:	ed97 7a00 	vldr	s14, [r7]
 801fc40:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fc44:	3601      	adds	r6, #1
 801fc46:	455e      	cmp	r6, fp
 801fc48:	f1a7 0704 	sub.w	r7, r7, #4
 801fc4c:	ddf4      	ble.n	801fc38 <__kernel_rem_pio2f+0x90>
 801fc4e:	ece9 7a01 	vstmia	r9!, {s15}
 801fc52:	f10c 0c01 	add.w	ip, ip, #1
 801fc56:	3404      	adds	r4, #4
 801fc58:	e7d5      	b.n	801fc06 <__kernel_rem_pio2f+0x5e>
 801fc5a:	a908      	add	r1, sp, #32
 801fc5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fc60:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801fc64:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801fea4 <__kernel_rem_pio2f+0x2fc>
 801fc68:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801fea0 <__kernel_rem_pio2f+0x2f8>
 801fc6c:	9105      	str	r1, [sp, #20]
 801fc6e:	9304      	str	r3, [sp, #16]
 801fc70:	4656      	mov	r6, sl
 801fc72:	00b3      	lsls	r3, r6, #2
 801fc74:	9306      	str	r3, [sp, #24]
 801fc76:	ab58      	add	r3, sp, #352	; 0x160
 801fc78:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801fc7c:	ac08      	add	r4, sp, #32
 801fc7e:	ab44      	add	r3, sp, #272	; 0x110
 801fc80:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801fc84:	46a4      	mov	ip, r4
 801fc86:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801fc8a:	4637      	mov	r7, r6
 801fc8c:	2f00      	cmp	r7, #0
 801fc8e:	f1a0 0004 	sub.w	r0, r0, #4
 801fc92:	dc4a      	bgt.n	801fd2a <__kernel_rem_pio2f+0x182>
 801fc94:	4628      	mov	r0, r5
 801fc96:	9207      	str	r2, [sp, #28]
 801fc98:	f000 f9f8 	bl	802008c <scalbnf>
 801fc9c:	eeb0 8a40 	vmov.f32	s16, s0
 801fca0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801fca4:	ee28 0a00 	vmul.f32	s0, s16, s0
 801fca8:	f000 fa56 	bl	8020158 <floorf>
 801fcac:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801fcb0:	eea0 8a67 	vfms.f32	s16, s0, s15
 801fcb4:	2d00      	cmp	r5, #0
 801fcb6:	9a07      	ldr	r2, [sp, #28]
 801fcb8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801fcbc:	ee17 9a90 	vmov	r9, s15
 801fcc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fcc4:	ee38 8a67 	vsub.f32	s16, s16, s15
 801fcc8:	dd41      	ble.n	801fd4e <__kernel_rem_pio2f+0x1a6>
 801fcca:	f106 3cff 	add.w	ip, r6, #4294967295
 801fcce:	ab08      	add	r3, sp, #32
 801fcd0:	f1c5 0e08 	rsb	lr, r5, #8
 801fcd4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801fcd8:	fa47 f00e 	asr.w	r0, r7, lr
 801fcdc:	4481      	add	r9, r0
 801fcde:	fa00 f00e 	lsl.w	r0, r0, lr
 801fce2:	1a3f      	subs	r7, r7, r0
 801fce4:	f1c5 0007 	rsb	r0, r5, #7
 801fce8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801fcec:	4107      	asrs	r7, r0
 801fcee:	2f00      	cmp	r7, #0
 801fcf0:	dd3c      	ble.n	801fd6c <__kernel_rem_pio2f+0x1c4>
 801fcf2:	f04f 0e00 	mov.w	lr, #0
 801fcf6:	f109 0901 	add.w	r9, r9, #1
 801fcfa:	4671      	mov	r1, lr
 801fcfc:	4576      	cmp	r6, lr
 801fcfe:	dc67      	bgt.n	801fdd0 <__kernel_rem_pio2f+0x228>
 801fd00:	2d00      	cmp	r5, #0
 801fd02:	dd03      	ble.n	801fd0c <__kernel_rem_pio2f+0x164>
 801fd04:	2d01      	cmp	r5, #1
 801fd06:	d074      	beq.n	801fdf2 <__kernel_rem_pio2f+0x24a>
 801fd08:	2d02      	cmp	r5, #2
 801fd0a:	d07b      	beq.n	801fe04 <__kernel_rem_pio2f+0x25c>
 801fd0c:	2f02      	cmp	r7, #2
 801fd0e:	d12d      	bne.n	801fd6c <__kernel_rem_pio2f+0x1c4>
 801fd10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fd14:	ee30 8a48 	vsub.f32	s16, s0, s16
 801fd18:	b341      	cbz	r1, 801fd6c <__kernel_rem_pio2f+0x1c4>
 801fd1a:	4628      	mov	r0, r5
 801fd1c:	9207      	str	r2, [sp, #28]
 801fd1e:	f000 f9b5 	bl	802008c <scalbnf>
 801fd22:	9a07      	ldr	r2, [sp, #28]
 801fd24:	ee38 8a40 	vsub.f32	s16, s16, s0
 801fd28:	e020      	b.n	801fd6c <__kernel_rem_pio2f+0x1c4>
 801fd2a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801fd2e:	3f01      	subs	r7, #1
 801fd30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fd34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fd38:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801fd3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fd40:	ecac 0a01 	vstmia	ip!, {s0}
 801fd44:	ed90 0a00 	vldr	s0, [r0]
 801fd48:	ee37 0a80 	vadd.f32	s0, s15, s0
 801fd4c:	e79e      	b.n	801fc8c <__kernel_rem_pio2f+0xe4>
 801fd4e:	d105      	bne.n	801fd5c <__kernel_rem_pio2f+0x1b4>
 801fd50:	1e70      	subs	r0, r6, #1
 801fd52:	ab08      	add	r3, sp, #32
 801fd54:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801fd58:	11ff      	asrs	r7, r7, #7
 801fd5a:	e7c8      	b.n	801fcee <__kernel_rem_pio2f+0x146>
 801fd5c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801fd60:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801fd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd68:	da30      	bge.n	801fdcc <__kernel_rem_pio2f+0x224>
 801fd6a:	2700      	movs	r7, #0
 801fd6c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801fd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd74:	f040 809a 	bne.w	801feac <__kernel_rem_pio2f+0x304>
 801fd78:	1e74      	subs	r4, r6, #1
 801fd7a:	46a4      	mov	ip, r4
 801fd7c:	2100      	movs	r1, #0
 801fd7e:	45d4      	cmp	ip, sl
 801fd80:	da47      	bge.n	801fe12 <__kernel_rem_pio2f+0x26a>
 801fd82:	2900      	cmp	r1, #0
 801fd84:	d063      	beq.n	801fe4e <__kernel_rem_pio2f+0x2a6>
 801fd86:	ab08      	add	r3, sp, #32
 801fd88:	3d08      	subs	r5, #8
 801fd8a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d07f      	beq.n	801fe92 <__kernel_rem_pio2f+0x2ea>
 801fd92:	4628      	mov	r0, r5
 801fd94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fd98:	f000 f978 	bl	802008c <scalbnf>
 801fd9c:	1c63      	adds	r3, r4, #1
 801fd9e:	aa44      	add	r2, sp, #272	; 0x110
 801fda0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801fea4 <__kernel_rem_pio2f+0x2fc>
 801fda4:	0099      	lsls	r1, r3, #2
 801fda6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801fdaa:	4623      	mov	r3, r4
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	f280 80ad 	bge.w	801ff0c <__kernel_rem_pio2f+0x364>
 801fdb2:	4623      	mov	r3, r4
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	f2c0 80cb 	blt.w	801ff50 <__kernel_rem_pio2f+0x3a8>
 801fdba:	aa44      	add	r2, sp, #272	; 0x110
 801fdbc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801fdc0:	4e36      	ldr	r6, [pc, #216]	; (801fe9c <__kernel_rem_pio2f+0x2f4>)
 801fdc2:	eddf 7a39 	vldr	s15, [pc, #228]	; 801fea8 <__kernel_rem_pio2f+0x300>
 801fdc6:	2000      	movs	r0, #0
 801fdc8:	1ae2      	subs	r2, r4, r3
 801fdca:	e0b6      	b.n	801ff3a <__kernel_rem_pio2f+0x392>
 801fdcc:	2702      	movs	r7, #2
 801fdce:	e790      	b.n	801fcf2 <__kernel_rem_pio2f+0x14a>
 801fdd0:	6820      	ldr	r0, [r4, #0]
 801fdd2:	b949      	cbnz	r1, 801fde8 <__kernel_rem_pio2f+0x240>
 801fdd4:	b118      	cbz	r0, 801fdde <__kernel_rem_pio2f+0x236>
 801fdd6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801fdda:	6020      	str	r0, [r4, #0]
 801fddc:	2001      	movs	r0, #1
 801fdde:	f10e 0e01 	add.w	lr, lr, #1
 801fde2:	3404      	adds	r4, #4
 801fde4:	4601      	mov	r1, r0
 801fde6:	e789      	b.n	801fcfc <__kernel_rem_pio2f+0x154>
 801fde8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801fdec:	6020      	str	r0, [r4, #0]
 801fdee:	4608      	mov	r0, r1
 801fdf0:	e7f5      	b.n	801fdde <__kernel_rem_pio2f+0x236>
 801fdf2:	1e74      	subs	r4, r6, #1
 801fdf4:	ab08      	add	r3, sp, #32
 801fdf6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801fdfa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801fdfe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801fe02:	e783      	b.n	801fd0c <__kernel_rem_pio2f+0x164>
 801fe04:	1e74      	subs	r4, r6, #1
 801fe06:	ab08      	add	r3, sp, #32
 801fe08:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801fe0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801fe10:	e7f5      	b.n	801fdfe <__kernel_rem_pio2f+0x256>
 801fe12:	ab08      	add	r3, sp, #32
 801fe14:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801fe18:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fe1c:	4301      	orrs	r1, r0
 801fe1e:	e7ae      	b.n	801fd7e <__kernel_rem_pio2f+0x1d6>
 801fe20:	3001      	adds	r0, #1
 801fe22:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801fe26:	2f00      	cmp	r7, #0
 801fe28:	d0fa      	beq.n	801fe20 <__kernel_rem_pio2f+0x278>
 801fe2a:	9b06      	ldr	r3, [sp, #24]
 801fe2c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801fe30:	eb0d 0403 	add.w	r4, sp, r3
 801fe34:	9b01      	ldr	r3, [sp, #4]
 801fe36:	18f7      	adds	r7, r6, r3
 801fe38:	ab1c      	add	r3, sp, #112	; 0x70
 801fe3a:	f106 0c01 	add.w	ip, r6, #1
 801fe3e:	3c4c      	subs	r4, #76	; 0x4c
 801fe40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801fe44:	4430      	add	r0, r6
 801fe46:	4560      	cmp	r0, ip
 801fe48:	da04      	bge.n	801fe54 <__kernel_rem_pio2f+0x2ac>
 801fe4a:	4606      	mov	r6, r0
 801fe4c:	e711      	b.n	801fc72 <__kernel_rem_pio2f+0xca>
 801fe4e:	9c05      	ldr	r4, [sp, #20]
 801fe50:	2001      	movs	r0, #1
 801fe52:	e7e6      	b.n	801fe22 <__kernel_rem_pio2f+0x27a>
 801fe54:	9b04      	ldr	r3, [sp, #16]
 801fe56:	f8dd e008 	ldr.w	lr, [sp, #8]
 801fe5a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fe5e:	9306      	str	r3, [sp, #24]
 801fe60:	ee07 3a90 	vmov	s15, r3
 801fe64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fe68:	2600      	movs	r6, #0
 801fe6a:	ece7 7a01 	vstmia	r7!, {s15}
 801fe6e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801fea8 <__kernel_rem_pio2f+0x300>
 801fe72:	46b9      	mov	r9, r7
 801fe74:	455e      	cmp	r6, fp
 801fe76:	dd04      	ble.n	801fe82 <__kernel_rem_pio2f+0x2da>
 801fe78:	ece4 7a01 	vstmia	r4!, {s15}
 801fe7c:	f10c 0c01 	add.w	ip, ip, #1
 801fe80:	e7e1      	b.n	801fe46 <__kernel_rem_pio2f+0x29e>
 801fe82:	ecfe 6a01 	vldmia	lr!, {s13}
 801fe86:	ed39 7a01 	vldmdb	r9!, {s14}
 801fe8a:	3601      	adds	r6, #1
 801fe8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fe90:	e7f0      	b.n	801fe74 <__kernel_rem_pio2f+0x2cc>
 801fe92:	3c01      	subs	r4, #1
 801fe94:	e777      	b.n	801fd86 <__kernel_rem_pio2f+0x1de>
 801fe96:	bf00      	nop
 801fe98:	08020994 	.word	0x08020994
 801fe9c:	08020968 	.word	0x08020968
 801fea0:	43800000 	.word	0x43800000
 801fea4:	3b800000 	.word	0x3b800000
 801fea8:	00000000 	.word	0x00000000
 801feac:	9b03      	ldr	r3, [sp, #12]
 801feae:	eeb0 0a48 	vmov.f32	s0, s16
 801feb2:	1a98      	subs	r0, r3, r2
 801feb4:	f000 f8ea 	bl	802008c <scalbnf>
 801feb8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801fea0 <__kernel_rem_pio2f+0x2f8>
 801febc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801fec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fec4:	db19      	blt.n	801fefa <__kernel_rem_pio2f+0x352>
 801fec6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801fea4 <__kernel_rem_pio2f+0x2fc>
 801feca:	ee60 7a27 	vmul.f32	s15, s0, s15
 801fece:	aa08      	add	r2, sp, #32
 801fed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fed4:	1c74      	adds	r4, r6, #1
 801fed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801feda:	3508      	adds	r5, #8
 801fedc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801fee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fee4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fee8:	ee10 3a10 	vmov	r3, s0
 801feec:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801fef0:	ee17 3a90 	vmov	r3, s15
 801fef4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801fef8:	e74b      	b.n	801fd92 <__kernel_rem_pio2f+0x1ea>
 801fefa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fefe:	aa08      	add	r2, sp, #32
 801ff00:	ee10 3a10 	vmov	r3, s0
 801ff04:	4634      	mov	r4, r6
 801ff06:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801ff0a:	e742      	b.n	801fd92 <__kernel_rem_pio2f+0x1ea>
 801ff0c:	a808      	add	r0, sp, #32
 801ff0e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801ff12:	9001      	str	r0, [sp, #4]
 801ff14:	ee07 0a90 	vmov	s15, r0
 801ff18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ff1c:	3b01      	subs	r3, #1
 801ff1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ff22:	ee20 0a07 	vmul.f32	s0, s0, s14
 801ff26:	ed62 7a01 	vstmdb	r2!, {s15}
 801ff2a:	e73f      	b.n	801fdac <__kernel_rem_pio2f+0x204>
 801ff2c:	ecf6 6a01 	vldmia	r6!, {s13}
 801ff30:	ecb5 7a01 	vldmia	r5!, {s14}
 801ff34:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ff38:	3001      	adds	r0, #1
 801ff3a:	4550      	cmp	r0, sl
 801ff3c:	dc01      	bgt.n	801ff42 <__kernel_rem_pio2f+0x39a>
 801ff3e:	4290      	cmp	r0, r2
 801ff40:	ddf4      	ble.n	801ff2c <__kernel_rem_pio2f+0x384>
 801ff42:	a858      	add	r0, sp, #352	; 0x160
 801ff44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801ff48:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801ff4c:	3b01      	subs	r3, #1
 801ff4e:	e731      	b.n	801fdb4 <__kernel_rem_pio2f+0x20c>
 801ff50:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801ff52:	2b02      	cmp	r3, #2
 801ff54:	dc09      	bgt.n	801ff6a <__kernel_rem_pio2f+0x3c2>
 801ff56:	2b00      	cmp	r3, #0
 801ff58:	dc2b      	bgt.n	801ffb2 <__kernel_rem_pio2f+0x40a>
 801ff5a:	d044      	beq.n	801ffe6 <__kernel_rem_pio2f+0x43e>
 801ff5c:	f009 0007 	and.w	r0, r9, #7
 801ff60:	b059      	add	sp, #356	; 0x164
 801ff62:	ecbd 8b04 	vpop	{d8-d9}
 801ff66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff6a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801ff6c:	2b03      	cmp	r3, #3
 801ff6e:	d1f5      	bne.n	801ff5c <__kernel_rem_pio2f+0x3b4>
 801ff70:	aa30      	add	r2, sp, #192	; 0xc0
 801ff72:	1f0b      	subs	r3, r1, #4
 801ff74:	4413      	add	r3, r2
 801ff76:	461a      	mov	r2, r3
 801ff78:	4620      	mov	r0, r4
 801ff7a:	2800      	cmp	r0, #0
 801ff7c:	f1a2 0204 	sub.w	r2, r2, #4
 801ff80:	dc52      	bgt.n	8020028 <__kernel_rem_pio2f+0x480>
 801ff82:	4622      	mov	r2, r4
 801ff84:	2a01      	cmp	r2, #1
 801ff86:	f1a3 0304 	sub.w	r3, r3, #4
 801ff8a:	dc5d      	bgt.n	8020048 <__kernel_rem_pio2f+0x4a0>
 801ff8c:	ab30      	add	r3, sp, #192	; 0xc0
 801ff8e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801fea8 <__kernel_rem_pio2f+0x300>
 801ff92:	440b      	add	r3, r1
 801ff94:	2c01      	cmp	r4, #1
 801ff96:	dc67      	bgt.n	8020068 <__kernel_rem_pio2f+0x4c0>
 801ff98:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ff9c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801ffa0:	2f00      	cmp	r7, #0
 801ffa2:	d167      	bne.n	8020074 <__kernel_rem_pio2f+0x4cc>
 801ffa4:	edc8 6a00 	vstr	s13, [r8]
 801ffa8:	ed88 7a01 	vstr	s14, [r8, #4]
 801ffac:	edc8 7a02 	vstr	s15, [r8, #8]
 801ffb0:	e7d4      	b.n	801ff5c <__kernel_rem_pio2f+0x3b4>
 801ffb2:	ab30      	add	r3, sp, #192	; 0xc0
 801ffb4:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801fea8 <__kernel_rem_pio2f+0x300>
 801ffb8:	440b      	add	r3, r1
 801ffba:	4622      	mov	r2, r4
 801ffbc:	2a00      	cmp	r2, #0
 801ffbe:	da24      	bge.n	802000a <__kernel_rem_pio2f+0x462>
 801ffc0:	b34f      	cbz	r7, 8020016 <__kernel_rem_pio2f+0x46e>
 801ffc2:	eef1 7a47 	vneg.f32	s15, s14
 801ffc6:	edc8 7a00 	vstr	s15, [r8]
 801ffca:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801ffce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ffd2:	aa31      	add	r2, sp, #196	; 0xc4
 801ffd4:	2301      	movs	r3, #1
 801ffd6:	429c      	cmp	r4, r3
 801ffd8:	da20      	bge.n	802001c <__kernel_rem_pio2f+0x474>
 801ffda:	b10f      	cbz	r7, 801ffe0 <__kernel_rem_pio2f+0x438>
 801ffdc:	eef1 7a67 	vneg.f32	s15, s15
 801ffe0:	edc8 7a01 	vstr	s15, [r8, #4]
 801ffe4:	e7ba      	b.n	801ff5c <__kernel_rem_pio2f+0x3b4>
 801ffe6:	ab30      	add	r3, sp, #192	; 0xc0
 801ffe8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801fea8 <__kernel_rem_pio2f+0x300>
 801ffec:	440b      	add	r3, r1
 801ffee:	2c00      	cmp	r4, #0
 801fff0:	da05      	bge.n	801fffe <__kernel_rem_pio2f+0x456>
 801fff2:	b10f      	cbz	r7, 801fff8 <__kernel_rem_pio2f+0x450>
 801fff4:	eef1 7a67 	vneg.f32	s15, s15
 801fff8:	edc8 7a00 	vstr	s15, [r8]
 801fffc:	e7ae      	b.n	801ff5c <__kernel_rem_pio2f+0x3b4>
 801fffe:	ed33 7a01 	vldmdb	r3!, {s14}
 8020002:	3c01      	subs	r4, #1
 8020004:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020008:	e7f1      	b.n	801ffee <__kernel_rem_pio2f+0x446>
 802000a:	ed73 7a01 	vldmdb	r3!, {s15}
 802000e:	3a01      	subs	r2, #1
 8020010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020014:	e7d2      	b.n	801ffbc <__kernel_rem_pio2f+0x414>
 8020016:	eef0 7a47 	vmov.f32	s15, s14
 802001a:	e7d4      	b.n	801ffc6 <__kernel_rem_pio2f+0x41e>
 802001c:	ecb2 7a01 	vldmia	r2!, {s14}
 8020020:	3301      	adds	r3, #1
 8020022:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020026:	e7d6      	b.n	801ffd6 <__kernel_rem_pio2f+0x42e>
 8020028:	edd2 7a00 	vldr	s15, [r2]
 802002c:	edd2 6a01 	vldr	s13, [r2, #4]
 8020030:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020034:	3801      	subs	r0, #1
 8020036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802003a:	ed82 7a00 	vstr	s14, [r2]
 802003e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020042:	edc2 7a01 	vstr	s15, [r2, #4]
 8020046:	e798      	b.n	801ff7a <__kernel_rem_pio2f+0x3d2>
 8020048:	edd3 7a00 	vldr	s15, [r3]
 802004c:	edd3 6a01 	vldr	s13, [r3, #4]
 8020050:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020054:	3a01      	subs	r2, #1
 8020056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802005a:	ed83 7a00 	vstr	s14, [r3]
 802005e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020062:	edc3 7a01 	vstr	s15, [r3, #4]
 8020066:	e78d      	b.n	801ff84 <__kernel_rem_pio2f+0x3dc>
 8020068:	ed33 7a01 	vldmdb	r3!, {s14}
 802006c:	3c01      	subs	r4, #1
 802006e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020072:	e78f      	b.n	801ff94 <__kernel_rem_pio2f+0x3ec>
 8020074:	eef1 6a66 	vneg.f32	s13, s13
 8020078:	eeb1 7a47 	vneg.f32	s14, s14
 802007c:	edc8 6a00 	vstr	s13, [r8]
 8020080:	ed88 7a01 	vstr	s14, [r8, #4]
 8020084:	eef1 7a67 	vneg.f32	s15, s15
 8020088:	e790      	b.n	801ffac <__kernel_rem_pio2f+0x404>
 802008a:	bf00      	nop

0802008c <scalbnf>:
 802008c:	ee10 3a10 	vmov	r3, s0
 8020090:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8020094:	d02b      	beq.n	80200ee <scalbnf+0x62>
 8020096:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802009a:	d302      	bcc.n	80200a2 <scalbnf+0x16>
 802009c:	ee30 0a00 	vadd.f32	s0, s0, s0
 80200a0:	4770      	bx	lr
 80200a2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80200a6:	d123      	bne.n	80200f0 <scalbnf+0x64>
 80200a8:	4b24      	ldr	r3, [pc, #144]	; (802013c <scalbnf+0xb0>)
 80200aa:	eddf 7a25 	vldr	s15, [pc, #148]	; 8020140 <scalbnf+0xb4>
 80200ae:	4298      	cmp	r0, r3
 80200b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80200b4:	db17      	blt.n	80200e6 <scalbnf+0x5a>
 80200b6:	ee10 3a10 	vmov	r3, s0
 80200ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80200be:	3a19      	subs	r2, #25
 80200c0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80200c4:	4288      	cmp	r0, r1
 80200c6:	dd15      	ble.n	80200f4 <scalbnf+0x68>
 80200c8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8020144 <scalbnf+0xb8>
 80200cc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8020148 <scalbnf+0xbc>
 80200d0:	ee10 3a10 	vmov	r3, s0
 80200d4:	eeb0 7a67 	vmov.f32	s14, s15
 80200d8:	2b00      	cmp	r3, #0
 80200da:	bfb8      	it	lt
 80200dc:	eef0 7a66 	vmovlt.f32	s15, s13
 80200e0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80200e4:	4770      	bx	lr
 80200e6:	eddf 7a19 	vldr	s15, [pc, #100]	; 802014c <scalbnf+0xc0>
 80200ea:	ee27 0a80 	vmul.f32	s0, s15, s0
 80200ee:	4770      	bx	lr
 80200f0:	0dd2      	lsrs	r2, r2, #23
 80200f2:	e7e5      	b.n	80200c0 <scalbnf+0x34>
 80200f4:	4410      	add	r0, r2
 80200f6:	28fe      	cmp	r0, #254	; 0xfe
 80200f8:	dce6      	bgt.n	80200c8 <scalbnf+0x3c>
 80200fa:	2800      	cmp	r0, #0
 80200fc:	dd06      	ble.n	802010c <scalbnf+0x80>
 80200fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020102:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8020106:	ee00 3a10 	vmov	s0, r3
 802010a:	4770      	bx	lr
 802010c:	f110 0f16 	cmn.w	r0, #22
 8020110:	da09      	bge.n	8020126 <scalbnf+0x9a>
 8020112:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802014c <scalbnf+0xc0>
 8020116:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8020150 <scalbnf+0xc4>
 802011a:	ee10 3a10 	vmov	r3, s0
 802011e:	eeb0 7a67 	vmov.f32	s14, s15
 8020122:	2b00      	cmp	r3, #0
 8020124:	e7d9      	b.n	80200da <scalbnf+0x4e>
 8020126:	3019      	adds	r0, #25
 8020128:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802012c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8020130:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8020154 <scalbnf+0xc8>
 8020134:	ee07 3a90 	vmov	s15, r3
 8020138:	e7d7      	b.n	80200ea <scalbnf+0x5e>
 802013a:	bf00      	nop
 802013c:	ffff3cb0 	.word	0xffff3cb0
 8020140:	4c000000 	.word	0x4c000000
 8020144:	7149f2ca 	.word	0x7149f2ca
 8020148:	f149f2ca 	.word	0xf149f2ca
 802014c:	0da24260 	.word	0x0da24260
 8020150:	8da24260 	.word	0x8da24260
 8020154:	33000000 	.word	0x33000000

08020158 <floorf>:
 8020158:	ee10 3a10 	vmov	r3, s0
 802015c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8020160:	3a7f      	subs	r2, #127	; 0x7f
 8020162:	2a16      	cmp	r2, #22
 8020164:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020168:	dc2a      	bgt.n	80201c0 <floorf+0x68>
 802016a:	2a00      	cmp	r2, #0
 802016c:	da11      	bge.n	8020192 <floorf+0x3a>
 802016e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80201d0 <floorf+0x78>
 8020172:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020176:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802017a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802017e:	dd05      	ble.n	802018c <floorf+0x34>
 8020180:	2b00      	cmp	r3, #0
 8020182:	da23      	bge.n	80201cc <floorf+0x74>
 8020184:	4a13      	ldr	r2, [pc, #76]	; (80201d4 <floorf+0x7c>)
 8020186:	2900      	cmp	r1, #0
 8020188:	bf18      	it	ne
 802018a:	4613      	movne	r3, r2
 802018c:	ee00 3a10 	vmov	s0, r3
 8020190:	4770      	bx	lr
 8020192:	4911      	ldr	r1, [pc, #68]	; (80201d8 <floorf+0x80>)
 8020194:	4111      	asrs	r1, r2
 8020196:	420b      	tst	r3, r1
 8020198:	d0fa      	beq.n	8020190 <floorf+0x38>
 802019a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80201d0 <floorf+0x78>
 802019e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80201a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80201a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201aa:	ddef      	ble.n	802018c <floorf+0x34>
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	bfbe      	ittt	lt
 80201b0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80201b4:	fa40 f202 	asrlt.w	r2, r0, r2
 80201b8:	189b      	addlt	r3, r3, r2
 80201ba:	ea23 0301 	bic.w	r3, r3, r1
 80201be:	e7e5      	b.n	802018c <floorf+0x34>
 80201c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80201c4:	d3e4      	bcc.n	8020190 <floorf+0x38>
 80201c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80201ca:	4770      	bx	lr
 80201cc:	2300      	movs	r3, #0
 80201ce:	e7dd      	b.n	802018c <floorf+0x34>
 80201d0:	7149f2ca 	.word	0x7149f2ca
 80201d4:	bf800000 	.word	0xbf800000
 80201d8:	007fffff 	.word	0x007fffff

080201dc <_init>:
 80201dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201de:	bf00      	nop
 80201e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80201e2:	bc08      	pop	{r3}
 80201e4:	469e      	mov	lr, r3
 80201e6:	4770      	bx	lr

080201e8 <_fini>:
 80201e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201ea:	bf00      	nop
 80201ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80201ee:	bc08      	pop	{r3}
 80201f0:	469e      	mov	lr, r3
 80201f2:	4770      	bx	lr
