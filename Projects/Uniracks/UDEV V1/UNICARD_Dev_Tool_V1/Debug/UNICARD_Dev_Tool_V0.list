
UNICARD_Dev_Tool_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023180  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  08023360  08023360  00033360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023efc  08023efc  0004041c  2**0
                  CONTENTS
  4 .ARM          00000008  08023efc  08023efc  00033efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023f04  08023f04  0004041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023f04  08023f04  00033f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023f08  08023f08  00033f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000041c  20000000  08023f0c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000143bc  2000041c  08024328  0004041c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200147d8  08024328  000447d8  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0004041c  2**0
                  CONTENTS, READONLY
 12 .comment      0000351b  00000000  00000000  00040450  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  0004396b  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  00043ca8  2**2
                  CONTENTS, READONLY
 15 .iar.debug_frame 000003bf  00000000  00000000  00043ccc  2**0
                  CONTENTS, READONLY
 16 .debug_info   00040984  00000000  00000000  0004408b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008f1e  00000000  00000000  00084a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003358  00000000  00000000  0008d930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002734  00000000  00000000  00090c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000f741  00000000  00000000  000933bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00040e98  00000000  00000000  000a2afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00149b7f  00000000  00000000  000e3995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00010840  00000000  00000000  0022d514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000080  00000000  00000000  0023dd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000041c 	.word	0x2000041c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08023348 	.word	0x08023348

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000420 	.word	0x20000420
 800021c:	08023348 	.word	0x08023348

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f01f fa57 	bl	801f6f0 <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f020 fc2b 	bl	8020aa6 <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4947      	ldr	r1, [pc, #284]	; (8000378 <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f015 fc45 	bl	8015af4 <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a40      	ldr	r2, [pc, #256]	; (8000378 <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295
 800028c:	2600      	movs	r6, #0
 800028e:	4c3a      	ldr	r4, [pc, #232]	; (8000378 <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d069      	beq.n	800036c <USBPD_CAD_Process+0xee>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d166      	bne.n	800036c <USBPD_CAD_Process+0xee>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f015 fdb2 	bl	8015e0c <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e03e      	b.n	800033e <USBPD_CAD_Process+0xc0>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e02f      	b.n	8000344 <USBPD_CAD_Process+0xc6>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6802      	ldr	r2, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	2901      	cmp	r1, #1
 80002f0:	bf0c      	ite	eq
 80002f2:	2102      	moveq	r1, #2
 80002f4:	2101      	movne	r1, #1
 80002f6:	f361 334e 	bfi	r3, r1, #13, #2
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	6800      	ldr	r0, [r0, #0]
 80002fe:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8000302:	9a01      	ldr	r2, [sp, #4]
 8000304:	6803      	ldr	r3, [r0, #0]
 8000306:	f362 1387 	bfi	r3, r2, #6, #2
 800030a:	680a      	ldr	r2, [r1, #0]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	6808      	ldr	r0, [r1, #0]
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000316:	6003      	str	r3, [r0, #0]
 8000318:	6808      	ldr	r0, [r1, #0]
 800031a:	6801      	ldr	r1, [r0, #0]
 800031c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000320:	2800      	cmp	r0, #0
 8000322:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000326:	6800      	ldr	r0, [r0, #0]
 8000328:	6801      	ldr	r1, [r0, #0]
 800032a:	bf0c      	ite	eq
 800032c:	f021 0108 	biceq.w	r1, r1, #8
 8000330:	f041 0108 	orrne.w	r1, r1, #8
 8000334:	6001      	str	r1, [r0, #0]
 8000336:	b2f0      	uxtb	r0, r6
 8000338:	2168      	movs	r1, #104	; 0x68
 800033a:	f000 f90c 	bl	8000556 <USBPD_PE_Notification>
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	b198      	cbz	r0, 800036c <USBPD_CAD_Process+0xee>
 8000344:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8000348:	685f      	ldr	r7, [r3, #4]
 800034a:	9a01      	ldr	r2, [sp, #4]
 800034c:	f89d 1000 	ldrb.w	r1, [sp]
 8000350:	f8d7 c000 	ldr.w	ip, [r7]
 8000354:	b2f0      	uxtb	r0, r6
 8000356:	47e0      	blx	ip
 8000358:	f89d 0000 	ldrb.w	r0, [sp]
 800035c:	2801      	cmp	r0, #1
 800035e:	bf18      	it	ne
 8000360:	2803      	cmpne	r0, #3
 8000362:	d103      	bne.n	800036c <USBPD_CAD_Process+0xee>
 8000364:	2169      	movs	r1, #105	; 0x69
 8000366:	b2f0      	uxtb	r0, r6
 8000368:	f000 f8f5 	bl	8000556 <USBPD_PE_Notification>
 800036c:	1c76      	adds	r6, r6, #1
 800036e:	2e02      	cmp	r6, #2
 8000370:	d98e      	bls.n	8000290 <USBPD_CAD_Process+0x12>
 8000372:	4628      	mov	r0, r5
 8000374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000378 <.text_6>:
 8000378:	20000438 	.word	0x20000438

0800037c <USBPD_CAD_AssertRd>:
 800037c:	b510      	push	{r4, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	f017 f8d0 	bl	8017524 <USBPDM1_DeAssertRp>
 8000384:	4620      	mov	r0, r4
 8000386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800038a:	f017 b8d7 	b.w	801753c <USBPDM1_AssertRd>

0800038e <USBPD_CAD_AssertRp>:
 800038e:	b510      	push	{r4, lr}
 8000390:	4604      	mov	r4, r0
 8000392:	f017 f959 	bl	8017648 <USBPDM1_DeAssertRd>
 8000396:	4620      	mov	r0, r4
 8000398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800039c:	f017 b82c 	b.w	80173f8 <USBPDM1_AssertRp>

080003a0 <USBPD_CAD_EnterErrorRecovery>:
 80003a0:	f015 bc8a 	b.w	8015cb8 <CAD_Enter_ErrorRecovery>

080003a4 <USBPD_CAD_SRC_SetRpResistor>:
 80003a4:	b510      	push	{r4, lr}
 80003a6:	f015 fce3 	bl	8015d70 <CAD_Set_ResistorRp>
 80003aa:	2404      	movs	r4, #4
 80003ac:	b900      	cbnz	r0, 80003b0 <USBPD_CAD_SRC_SetRpResistor+0xc>
 80003ae:	2400      	movs	r4, #0
 80003b0:	4620      	mov	r0, r4
 80003b2:	bd10      	pop	{r4, pc}

080003b4 <USBPD_CAD_SetRpResistor>:
 80003b4:	e7f6      	b.n	80003a4 <USBPD_CAD_SRC_SetRpResistor>

080003b6 <USBPD_CAD_GetMemoryConsumption>:
 80003b6:	2024      	movs	r0, #36	; 0x24
 80003b8:	4770      	bx	lr
	...

080003bc <USBPD_PE_Init>:
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c0:	460e      	mov	r6, r1
 80003c2:	4680      	mov	r8, r0
 80003c4:	6870      	ldr	r0, [r6, #4]
 80003c6:	4617      	mov	r7, r2
 80003c8:	461d      	mov	r5, r3
 80003ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80003ce:	b108      	cbz	r0, 80003d4 <USBPD_PE_Init+0x18>
 80003d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80003d2:	b108      	cbz	r0, 80003d8 <USBPD_PE_Init+0x1c>
 80003d4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80003d6:	b908      	cbnz	r0, 80003dc <USBPD_PE_Init+0x20>
 80003d8:	271b      	movs	r7, #27
 80003da:	e042      	b.n	8000462 <USBPD_PE_Init+0xa6>
 80003dc:	f1b8 0f03 	cmp.w	r8, #3
 80003e0:	bf28      	it	cs
 80003e2:	2717      	movcs	r7, #23
 80003e4:	d23d      	bcs.n	8000462 <USBPD_PE_Init+0xa6>
 80003e6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80003ea:	f01f f981 	bl	801f6f0 <malloc>
 80003ee:	0004      	movs	r4, r0
 80003f0:	bf08      	it	eq
 80003f2:	2716      	moveq	r7, #22
 80003f4:	d035      	beq.n	8000462 <USBPD_PE_Init+0xa6>
 80003f6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80003fa:	f020 fb54 	bl	8020aa6 <__aeabi_memclr>
 80003fe:	f8df 09ac 	ldr.w	r0, [pc, #2476]	; 8000dac <.text_47>
 8000402:	4641      	mov	r1, r8
 8000404:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8000408:	6026      	str	r6, [r4, #0]
 800040a:	6067      	str	r7, [r4, #4]
 800040c:	f884 8010 	strb.w	r8, [r4, #16]
 8000410:	60a5      	str	r5, [r4, #8]
 8000412:	f204 438e 	addw	r3, r4, #1166	; 0x48e
 8000416:	f204 2281 	addw	r2, r4, #641	; 0x281
 800041a:	4631      	mov	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f004 fd92 	bl	8004f46 <USBPD_PRL_Init>
 8000422:	0007      	movs	r7, r0
 8000424:	d11d      	bne.n	8000462 <USBPD_PE_Init+0xa6>
 8000426:	6820      	ldr	r0, [r4, #0]
 8000428:	6841      	ldr	r1, [r0, #4]
 800042a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800042e:	2800      	cmp	r0, #0
 8000430:	6860      	ldr	r0, [r4, #4]
 8000432:	6801      	ldr	r1, [r0, #0]
 8000434:	d004      	beq.n	8000440 <USBPD_PE_Init+0x84>
 8000436:	f041 0108 	orr.w	r1, r1, #8
 800043a:	6001      	str	r1, [r0, #0]
 800043c:	2201      	movs	r2, #1
 800043e:	e003      	b.n	8000448 <USBPD_PE_Init+0x8c>
 8000440:	f021 0108 	bic.w	r1, r1, #8
 8000444:	6001      	str	r1, [r0, #0]
 8000446:	2200      	movs	r2, #0
 8000448:	7933      	ldrb	r3, [r6, #4]
 800044a:	f003 0303 	and.w	r3, r3, #3
 800044e:	4611      	mov	r1, r2
 8000450:	4640      	mov	r0, r8
 8000452:	f004 fda6 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000456:	7931      	ldrb	r1, [r6, #4]
 8000458:	f001 0103 	and.w	r1, r1, #3
 800045c:	4640      	mov	r0, r8
 800045e:	f004 fdd1 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000462:	4638      	mov	r0, r7
 8000464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000468 <USBPD_PE_TimerCounter>:
 8000468:	f8df 1940 	ldr.w	r1, [pc, #2368]	; 8000dac <.text_47>
 800046c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000470:	8bc1      	ldrh	r1, [r0, #30]
 8000472:	044a      	lsls	r2, r1, #17
 8000474:	d002      	beq.n	800047c <USBPD_PE_TimerCounter+0x14>
 8000476:	8bc1      	ldrh	r1, [r0, #30]
 8000478:	1e4a      	subs	r2, r1, #1
 800047a:	83c2      	strh	r2, [r0, #30]
 800047c:	8c01      	ldrh	r1, [r0, #32]
 800047e:	044a      	lsls	r2, r1, #17
 8000480:	d002      	beq.n	8000488 <USBPD_PE_TimerCounter+0x20>
 8000482:	8c01      	ldrh	r1, [r0, #32]
 8000484:	1e4a      	subs	r2, r1, #1
 8000486:	8402      	strh	r2, [r0, #32]
 8000488:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 800048a:	044a      	lsls	r2, r1, #17
 800048c:	d002      	beq.n	8000494 <USBPD_PE_TimerCounter+0x2c>
 800048e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 8000490:	1e4a      	subs	r2, r1, #1
 8000492:	84c2      	strh	r2, [r0, #38]	; 0x26
 8000494:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 8000496:	044a      	lsls	r2, r1, #17
 8000498:	d002      	beq.n	80004a0 <USBPD_PE_TimerCounter+0x38>
 800049a:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 800049c:	1e4a      	subs	r2, r1, #1
 800049e:	8442      	strh	r2, [r0, #34]	; 0x22
 80004a0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80004a2:	044a      	lsls	r2, r1, #17
 80004a4:	d002      	beq.n	80004ac <USBPD_PE_TimerCounter+0x44>
 80004a6:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80004a8:	1e4a      	subs	r2, r1, #1
 80004aa:	8482      	strh	r2, [r0, #36]	; 0x24
 80004ac:	4770      	bx	lr

080004ae <USBPD_PE_TimerCounteUpdate>:
 80004ae:	b538      	push	{r3, r4, r5, lr}
 80004b0:	460c      	mov	r4, r1
 80004b2:	f8df 18f8 	ldr.w	r1, [pc, #2296]	; 8000dac <.text_47>
 80004b6:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 80004ba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80004be:	da22      	bge.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004c0:	8be8      	ldrh	r0, [r5, #30]
 80004c2:	0441      	lsls	r1, r0, #17
 80004c4:	d003      	beq.n	80004ce <USBPD_PE_TimerCounteUpdate+0x20>
 80004c6:	8be8      	ldrh	r0, [r5, #30]
 80004c8:	f000 f81e 	bl	8000508 <.text_8>
 80004cc:	83e8      	strh	r0, [r5, #30]
 80004ce:	8c28      	ldrh	r0, [r5, #32]
 80004d0:	0441      	lsls	r1, r0, #17
 80004d2:	d003      	beq.n	80004dc <USBPD_PE_TimerCounteUpdate+0x2e>
 80004d4:	8c28      	ldrh	r0, [r5, #32]
 80004d6:	f000 f817 	bl	8000508 <.text_8>
 80004da:	8428      	strh	r0, [r5, #32]
 80004dc:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80004de:	0441      	lsls	r1, r0, #17
 80004e0:	d003      	beq.n	80004ea <USBPD_PE_TimerCounteUpdate+0x3c>
 80004e2:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80004e4:	f000 f810 	bl	8000508 <.text_8>
 80004e8:	84e8      	strh	r0, [r5, #38]	; 0x26
 80004ea:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80004ec:	0441      	lsls	r1, r0, #17
 80004ee:	d003      	beq.n	80004f8 <USBPD_PE_TimerCounteUpdate+0x4a>
 80004f0:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80004f2:	f000 f809 	bl	8000508 <.text_8>
 80004f6:	8468      	strh	r0, [r5, #34]	; 0x22
 80004f8:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 80004fa:	0441      	lsls	r1, r0, #17
 80004fc:	d003      	beq.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004fe:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8000500:	f000 f802 	bl	8000508 <.text_8>
 8000504:	84a8      	strh	r0, [r5, #36]	; 0x24
 8000506:	bd31      	pop	{r0, r4, r5, pc}

08000508 <.text_8>:
 8000508:	4621      	mov	r1, r4
 800050a:	f000 bef9 	b.w	8001300 <PE_UpdateTimer>

0800050e <USBPD_PE_IsCableConnected>:
 800050e:	f8df 289c 	ldr.w	r2, [pc, #2204]	; 8000dac <.text_47>
 8000512:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000516:	6842      	ldr	r2, [r0, #4]
 8000518:	6813      	ldr	r3, [r2, #0]
 800051a:	f361 330c 	bfi	r3, r1, #12, #1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	2248      	movs	r2, #72	; 0x48
 8000522:	7442      	strb	r2, [r0, #17]
 8000524:	4770      	bx	lr

08000526 <USBPD_PE_StateMachine_Reset>:
 8000526:	f8df 2884 	ldr.w	r2, [pc, #2180]	; 8000dac <.text_47>
 800052a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800052e:	2148      	movs	r1, #72	; 0x48
 8000530:	7441      	strb	r1, [r0, #17]
 8000532:	4770      	bx	lr

08000534 <USBPD_PE_StateMachine_Stop>:
 8000534:	f005 b81f 	b.w	8005576 <USBPD_PRL_Stop>

08000538 <USBPD_PE_StateMachine_DRP>:
 8000538:	f8df 1870 	ldr.w	r1, [pc, #2160]	; 8000dac <.text_47>
 800053c:	4602      	mov	r2, r0
 800053e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	680a      	ldr	r2, [r1, #0]
 8000546:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800054a:	2900      	cmp	r1, #0
 800054c:	bf18      	it	ne
 800054e:	f002 b9ed 	bne.w	800292c <USBPD_PE_StateMachine_SRC>
 8000552:	f001 bbcd 	b.w	8001cf0 <USBPD_PE_StateMachine_SNK>

08000556 <USBPD_PE_Notification>:
 8000556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000558:	2803      	cmp	r0, #3
 800055a:	4604      	mov	r4, r0
 800055c:	460d      	mov	r5, r1
 800055e:	d214      	bcs.n	800058a <__iar_annotation$$tailcall+0x2>
 8000560:	2600      	movs	r6, #0
 8000562:	9600      	str	r6, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	f8df 7848 	ldr.w	r7, [pc, #2120]	; 8000db0 <.text_48>
 800056a:	683e      	ldr	r6, [r7, #0]
 800056c:	462a      	mov	r2, r5
 800056e:	4621      	mov	r1, r4
 8000570:	2009      	movs	r0, #9
 8000572:	47b0      	blx	r6
 8000574:	f8df 2834 	ldr.w	r2, [pc, #2100]	; 8000dac <.text_47>
 8000578:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800057c:	689a      	ldr	r2, [r3, #8]
 800057e:	68d3      	ldr	r3, [r2, #12]
 8000580:	4629      	mov	r1, r5
 8000582:	4620      	mov	r0, r4
 8000584:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

08000588 <__iar_annotation$$tailcall>:
 8000588:	4718      	bx	r3
 800058a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800058c <USBPD_PE_InitVDM_Callback>:
 800058c:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 8000dac <.text_47>
 8000590:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000594:	60c1      	str	r1, [r0, #12]
 8000596:	4770      	bx	lr

08000598 <USBPD_PE_Request_HardReset>:
 8000598:	b580      	push	{r7, lr}
 800059a:	f8df 1810 	ldr.w	r1, [pc, #2064]	; 8000dac <.text_47>
 800059e:	4602      	mov	r2, r0
 80005a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80005a4:	230f      	movs	r3, #15
 80005a6:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
 80005aa:	6889      	ldr	r1, [r1, #8]
 80005ac:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80005ae:	4790      	blx	r2
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd02      	pop	{r1, pc}

080005b4 <USBPD_PE_Request_CableReset>:
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	f000 fbe8 	bl	8000d8a <.text_45>
 80005ba:	6853      	ldr	r3, [r2, #4]
 80005bc:	681c      	ldr	r4, [r3, #0]
 80005be:	f248 7108 	movw	r1, #34568	; 0x8708
 80005c2:	400c      	ands	r4, r1
 80005c4:	f248 3508 	movw	r5, #33544	; 0x8308
 80005c8:	42ac      	cmp	r4, r5
 80005ca:	d105      	bne.n	80005d8 <USBPD_PE_Request_CableReset+0x24>
 80005cc:	6891      	ldr	r1, [r2, #8]
 80005ce:	2399      	movs	r3, #153	; 0x99
 80005d0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 80005d4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80005d6:	4790      	blx	r2
 80005d8:	2010      	movs	r0, #16
 80005da:	bd32      	pop	{r1, r4, r5, pc}

080005dc <USBPD_PE_Request_CtrlMessage>:
 80005dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e0:	4680      	mov	r8, r0
 80005e2:	460c      	mov	r4, r1
 80005e4:	f8df 07c4 	ldr.w	r0, [pc, #1988]	; 8000dac <.text_47>
 80005e8:	b093      	sub	sp, #76	; 0x4c
 80005ea:	4641      	mov	r1, r8
 80005ec:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80005f0:	f8df 17c0 	ldr.w	r1, [pc, #1984]	; 8000db4 <.text_49>
 80005f4:	4617      	mov	r7, r2
 80005f6:	4668      	mov	r0, sp
 80005f8:	224c      	movs	r2, #76	; 0x4c
 80005fa:	f020 fa52 	bl	8020aa2 <__aeabi_memcpy>
 80005fe:	f105 0132 	add.w	r1, r5, #50	; 0x32
 8000602:	2600      	movs	r6, #0
 8000604:	7808      	ldrb	r0, [r1, #0]
 8000606:	b920      	cbnz	r0, 8000612 <USBPD_PE_Request_CtrlMessage+0x36>
 8000608:	6868      	ldr	r0, [r5, #4]
 800060a:	6802      	ldr	r2, [r0, #0]
 800060c:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8000610:	b908      	cbnz	r0, 8000616 <USBPD_PE_Request_CtrlMessage+0x3a>
 8000612:	2603      	movs	r6, #3
 8000614:	e07f      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 8000616:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800061a:	6828      	ldr	r0, [r5, #0]
 800061c:	f8dc e000 	ldr.w	lr, [ip]
 8000620:	6842      	ldr	r2, [r0, #4]
 8000622:	6868      	ldr	r0, [r5, #4]
 8000624:	6803      	ldr	r3, [r0, #0]
 8000626:	f3c3 0080 	ubfx	r0, r3, #2, #1
 800062a:	f3ce 2c02 	ubfx	ip, lr, #8, #3
 800062e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8000632:	f89e 9000 	ldrb.w	r9, [lr]
 8000636:	f009 0903 	and.w	r9, r9, #3
 800063a:	08d2      	lsrs	r2, r2, #3
 800063c:	2800      	cmp	r0, #0
 800063e:	bf07      	ittee	eq
 8000640:	2002      	moveq	r0, #2
 8000642:	2300      	moveq	r3, #0
 8000644:	2000      	movne	r0, #0
 8000646:	2304      	movne	r3, #4
 8000648:	f1bc 0f03 	cmp.w	ip, #3
 800064c:	bf0c      	ite	eq
 800064e:	f04f 0c08 	moveq.w	ip, #8
 8000652:	46b4      	movne	ip, r6
 8000654:	f1b9 0f02 	cmp.w	r9, #2
 8000658:	f002 0201 	and.w	r2, r2, #1
 800065c:	bf0c      	ite	eq
 800065e:	f04f 0e40 	moveq.w	lr, #64	; 0x40
 8000662:	46b6      	movne	lr, r6
 8000664:	4302      	orrs	r2, r0
 8000666:	431a      	orrs	r2, r3
 8000668:	ea4c 0202 	orr.w	r2, ip, r2
 800066c:	ea4e 0202 	orr.w	r2, lr, r2
 8000670:	f012 0f03 	tst.w	r2, #3
 8000674:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000678:	bf18      	it	ne
 800067a:	f042 0210 	orrne.w	r2, r2, #16
 800067e:	f012 0f05 	tst.w	r2, #5
 8000682:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8000686:	bf18      	it	ne
 8000688:	f042 0220 	orrne.w	r2, r2, #32
 800068c:	4002      	ands	r2, r0
 800068e:	4282      	cmp	r2, r0
 8000690:	d118      	bne.n	80006c4 <USBPD_PE_Request_CtrlMessage+0xe8>
 8000692:	2c05      	cmp	r4, #5
 8000694:	704e      	strb	r6, [r1, #1]
 8000696:	f205 225e 	addw	r2, r5, #606	; 0x25e
 800069a:	d02e      	beq.n	80006fa <USBPD_PE_Request_CtrlMessage+0x11e>
 800069c:	2c0b      	cmp	r4, #11
 800069e:	d00e      	beq.n	80006be <USBPD_PE_Request_CtrlMessage+0xe2>
 80006a0:	2c0d      	cmp	r4, #13
 80006a2:	d028      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006a4:	2c11      	cmp	r4, #17
 80006a6:	d00f      	beq.n	80006c8 <USBPD_PE_Request_CtrlMessage+0xec>
 80006a8:	2c12      	cmp	r4, #18
 80006aa:	d012      	beq.n	80006d2 <USBPD_PE_Request_CtrlMessage+0xf6>
 80006ac:	2c14      	cmp	r4, #20
 80006ae:	d012      	beq.n	80006d6 <USBPD_PE_Request_CtrlMessage+0xfa>
 80006b0:	2c15      	cmp	r4, #21
 80006b2:	d017      	beq.n	80006e4 <USBPD_PE_Request_CtrlMessage+0x108>
 80006b4:	2c16      	cmp	r4, #22
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_CtrlMessage+0xf0>
 80006b8:	2c18      	cmp	r4, #24
 80006ba:	d01c      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006bc:	e01f      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006be:	68af      	ldr	r7, [r5, #8]
 80006c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006c2:	b9e0      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006c4:	2602      	movs	r6, #2
 80006c6:	e026      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006c8:	2011      	movs	r0, #17
 80006ca:	e017      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006cc:	2716      	movs	r7, #22
 80006ce:	7017      	strb	r7, [r2, #0]
 80006d0:	e015      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006d2:	2012      	movs	r0, #18
 80006d4:	e012      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006d6:	6828      	ldr	r0, [r5, #0]
 80006d8:	8907      	ldrh	r7, [r0, #8]
 80006da:	f3c7 0080 	ubfx	r0, r7, #2, #1
 80006de:	b970      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006e0:	2610      	movs	r6, #16
 80006e2:	e018      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006e4:	6828      	ldr	r0, [r5, #0]
 80006e6:	8907      	ldrh	r7, [r0, #8]
 80006e8:	f3c7 10c0 	ubfx	r0, r7, #7, #1
 80006ec:	b908      	cbnz	r0, 80006f2 <USBPD_PE_Request_CtrlMessage+0x116>
 80006ee:	2010      	movs	r0, #16
 80006f0:	e012      	b.n	8000718 <USBPD_PE_Request_CtrlMessage+0x13c>
 80006f2:	2015      	movs	r0, #21
 80006f4:	e002      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006f6:	704f      	strb	r7, [r1, #1]
 80006f8:	e001      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006fa:	2005      	movs	r0, #5
 80006fc:	7010      	strb	r0, [r2, #0]
 80006fe:	eb0d 0703 	add.w	r7, sp, r3
 8000702:	7878      	ldrb	r0, [r7, #1]
 8000704:	7050      	strb	r0, [r2, #1]
 8000706:	eb0d 0203 	add.w	r2, sp, r3
 800070a:	7890      	ldrb	r0, [r2, #2]
 800070c:	7008      	strb	r0, [r1, #0]
 800070e:	4640      	mov	r0, r8
 8000710:	68a9      	ldr	r1, [r5, #8]
 8000712:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000714:	4790      	blx	r2
 8000716:	4630      	mov	r0, r6
 8000718:	b013      	add	sp, #76	; 0x4c
 800071a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800071e <USBPD_PE_Request_DataMessage>:
 800071e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000720:	f000 f85f 	bl	80007e2 <.text_20>
 8000724:	b923      	cbnz	r3, 8000730 <USBPD_PE_Request_DataMessage+0x12>
 8000726:	686b      	ldr	r3, [r5, #4]
 8000728:	681f      	ldr	r7, [r3, #0]
 800072a:	f3c7 3300 	ubfx	r3, r7, #12, #1
 800072e:	b90b      	cbnz	r3, 8000734 <USBPD_PE_Request_DataMessage+0x16>
 8000730:	2403      	movs	r4, #3
 8000732:	e01a      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000734:	2300      	movs	r3, #0
 8000736:	7073      	strb	r3, [r6, #1]
 8000738:	2901      	cmp	r1, #1
 800073a:	f240 3302 	movw	r3, #770	; 0x302
 800073e:	f240 7703 	movw	r7, #1795	; 0x703
 8000742:	d004      	beq.n	800074e <USBPD_PE_Request_DataMessage+0x30>
 8000744:	2906      	cmp	r1, #6
 8000746:	d012      	beq.n	800076e <USBPD_PE_Request_DataMessage+0x50>
 8000748:	2907      	cmp	r1, #7
 800074a:	d01a      	beq.n	8000782 <USBPD_PE_Request_DataMessage+0x64>
 800074c:	e025      	b.n	800079a <USBPD_PE_Request_DataMessage+0x7c>
 800074e:	6869      	ldr	r1, [r5, #4]
 8000750:	680a      	ldr	r2, [r1, #0]
 8000752:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8000756:	b141      	cbz	r1, 800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000758:	2101      	movs	r1, #1
 800075a:	f885 125f 	strb.w	r1, [r5, #607]	; 0x25f
 800075e:	2207      	movs	r2, #7
 8000760:	7032      	strb	r2, [r6, #0]
 8000762:	68a9      	ldr	r1, [r5, #8]
 8000764:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000766:	4790      	blx	r2
 8000768:	2400      	movs	r4, #0
 800076a:	4620      	mov	r0, r4
 800076c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800076e:	6869      	ldr	r1, [r5, #4]
 8000770:	6809      	ldr	r1, [r1, #0]
 8000772:	400f      	ands	r7, r1
 8000774:	429f      	cmp	r7, r3
 8000776:	d1f8      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	62aa      	str	r2, [r5, #40]	; 0x28
 800077c:	212b      	movs	r1, #43	; 0x2b
 800077e:	7031      	strb	r1, [r6, #0]
 8000780:	e7ef      	b.n	8000762 <USBPD_PE_Request_DataMessage+0x44>
 8000782:	6869      	ldr	r1, [r5, #4]
 8000784:	6809      	ldr	r1, [r1, #0]
 8000786:	400f      	ands	r7, r1
 8000788:	429f      	cmp	r7, r3
 800078a:	d1ee      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 800078c:	6812      	ldr	r2, [r2, #0]
 800078e:	62aa      	str	r2, [r5, #40]	; 0x28
 8000790:	215d      	movs	r1, #93	; 0x5d
 8000792:	f885 125f 	strb.w	r1, [r5, #607]	; 0x25f
 8000796:	2262      	movs	r2, #98	; 0x62
 8000798:	e7e2      	b.n	8000760 <USBPD_PE_Request_DataMessage+0x42>
 800079a:	2410      	movs	r4, #16
 800079c:	e7e5      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>

0800079e <USBPD_PE_Send_Request>:
 800079e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a0:	f000 f81f 	bl	80007e2 <.text_20>
 80007a4:	b923      	cbnz	r3, 80007b0 <USBPD_PE_Send_Request+0x12>
 80007a6:	686b      	ldr	r3, [r5, #4]
 80007a8:	681f      	ldr	r7, [r3, #0]
 80007aa:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80007ae:	b90b      	cbnz	r3, 80007b4 <USBPD_PE_Send_Request+0x16>
 80007b0:	2403      	movs	r4, #3
 80007b2:	e014      	b.n	80007de <USBPD_PE_Send_Request+0x40>
 80007b4:	686f      	ldr	r7, [r5, #4]
 80007b6:	683f      	ldr	r7, [r7, #0]
 80007b8:	f240 7304 	movw	r3, #1796	; 0x704
 80007bc:	403b      	ands	r3, r7
 80007be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80007c2:	d10c      	bne.n	80007de <USBPD_PE_Send_Request+0x40>
 80007c4:	2445      	movs	r4, #69	; 0x45
 80007c6:	7034      	strb	r4, [r6, #0]
 80007c8:	61a9      	str	r1, [r5, #24]
 80007ca:	2400      	movs	r4, #0
 80007cc:	6969      	ldr	r1, [r5, #20]
 80007ce:	f362 01c4 	bfi	r1, r2, #3, #2
 80007d2:	6169      	str	r1, [r5, #20]
 80007d4:	2200      	movs	r2, #0
 80007d6:	7072      	strb	r2, [r6, #1]
 80007d8:	68a9      	ldr	r1, [r5, #8]
 80007da:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80007dc:	4790      	blx	r2
 80007de:	4620      	mov	r0, r4
 80007e0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080007e2 <.text_20>:
 80007e2:	f8df 3be4 	ldr.w	r3, [pc, #3044]	; 80013c8 <.text_70>
 80007e6:	4604      	mov	r4, r0
 80007e8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80007ec:	f105 0632 	add.w	r6, r5, #50	; 0x32
 80007f0:	2402      	movs	r4, #2
 80007f2:	7833      	ldrb	r3, [r6, #0]
 80007f4:	4770      	bx	lr

080007f6 <USBPD_PE_SendExtendedMessage>:
 80007f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007fa:	4681      	mov	r9, r0
 80007fc:	468a      	mov	sl, r1
 80007fe:	f8df 0bc8 	ldr.w	r0, [pc, #3016]	; 80013c8 <.text_70>
 8000802:	4649      	mov	r1, r9
 8000804:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8000808:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800080c:	469b      	mov	fp, r3
 800080e:	2500      	movs	r5, #0
 8000810:	b920      	cbnz	r0, 800081c <USBPD_PE_SendExtendedMessage+0x26>
 8000812:	6860      	ldr	r0, [r4, #4]
 8000814:	6801      	ldr	r1, [r0, #0]
 8000816:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800081a:	b908      	cbnz	r0, 8000820 <USBPD_PE_SendExtendedMessage+0x2a>
 800081c:	2503      	movs	r5, #3
 800081e:	e066      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000820:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8000824:	2803      	cmp	r0, #3
 8000826:	d10d      	bne.n	8000844 <USBPD_PE_SendExtendedMessage+0x4e>
 8000828:	6860      	ldr	r0, [r4, #4]
 800082a:	7801      	ldrb	r1, [r0, #0]
 800082c:	f001 0103 	and.w	r1, r1, #3
 8000830:	2901      	cmp	r1, #1
 8000832:	bf98      	it	ls
 8000834:	2501      	movls	r5, #1
 8000836:	d95a      	bls.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000838:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800083c:	f240 1105 	movw	r1, #261	; 0x105
 8000840:	4588      	cmp	r8, r1
 8000842:	d301      	bcc.n	8000848 <USBPD_PE_SendExtendedMessage+0x52>
 8000844:	2502      	movs	r5, #2
 8000846:	e052      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000848:	f88d 2000 	strb.w	r2, [sp]
 800084c:	f204 265d 	addw	r6, r4, #605	; 0x25d
 8000850:	6960      	ldr	r0, [r4, #20]
 8000852:	f020 0020 	bic.w	r0, r0, #32
 8000856:	6160      	str	r0, [r4, #20]
 8000858:	f89d 0000 	ldrb.w	r0, [sp]
 800085c:	2803      	cmp	r0, #3
 800085e:	d008      	beq.n	8000872 <USBPD_PE_SendExtendedMessage+0x7c>
 8000860:	2804      	cmp	r0, #4
 8000862:	d018      	beq.n	8000896 <USBPD_PE_SendExtendedMessage+0xa0>
 8000864:	2806      	cmp	r0, #6
 8000866:	d01d      	beq.n	80008a4 <USBPD_PE_SendExtendedMessage+0xae>
 8000868:	2808      	cmp	r0, #8
 800086a:	d01d      	beq.n	80008a8 <USBPD_PE_SendExtendedMessage+0xb2>
 800086c:	280a      	cmp	r0, #10
 800086e:	d01e      	beq.n	80008ae <USBPD_PE_SendExtendedMessage+0xb8>
 8000870:	e020      	b.n	80008b4 <USBPD_PE_SendExtendedMessage+0xbe>
 8000872:	210c      	movs	r1, #12
 8000874:	70b1      	strb	r1, [r6, #2]
 8000876:	6960      	ldr	r0, [r4, #20]
 8000878:	f040 0020 	orr.w	r0, r0, #32
 800087c:	6160      	str	r0, [r4, #20]
 800087e:	ea5f 0008 	movs.w	r0, r8
 8000882:	d025      	beq.n	80008d0 <USBPD_PE_SendExtendedMessage+0xda>
 8000884:	4648      	mov	r0, r9
 8000886:	f000 fa86 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800088a:	2700      	movs	r7, #0
 800088c:	2801      	cmp	r0, #1
 800088e:	bf08      	it	eq
 8000890:	2704      	moveq	r7, #4
 8000892:	2000      	movs	r0, #0
 8000894:	e017      	b.n	80008c6 <USBPD_PE_SendExtendedMessage+0xd0>
 8000896:	200d      	movs	r0, #13
 8000898:	70b0      	strb	r0, [r6, #2]
 800089a:	6961      	ldr	r1, [r4, #20]
 800089c:	f041 0120 	orr.w	r1, r1, #32
 80008a0:	6161      	str	r1, [r4, #20]
 80008a2:	e7ec      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008a4:	200e      	movs	r0, #14
 80008a6:	e7f7      	b.n	8000898 <USBPD_PE_SendExtendedMessage+0xa2>
 80008a8:	205b      	movs	r0, #91	; 0x5b
 80008aa:	70b0      	strb	r0, [r6, #2]
 80008ac:	e7e7      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008ae:	215c      	movs	r1, #92	; 0x5c
 80008b0:	70b1      	strb	r1, [r6, #2]
 80008b2:	e7e4      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008b4:	2510      	movs	r5, #16
 80008b6:	e01a      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 80008b8:	183a      	adds	r2, r7, r0
 80008ba:	f81b 1000 	ldrb.w	r1, [fp, r0]
 80008be:	4422      	add	r2, r4
 80008c0:	1c40      	adds	r0, r0, #1
 80008c2:	f882 1385 	strb.w	r1, [r2, #901]	; 0x385
 80008c6:	4540      	cmp	r0, r8
 80008c8:	d3f6      	bcc.n	80008b8 <USBPD_PE_SendExtendedMessage+0xc2>
 80008ca:	f8a4 8490 	strh.w	r8, [r4, #1168]	; 0x490
 80008ce:	e001      	b.n	80008d4 <USBPD_PE_SendExtendedMessage+0xde>
 80008d0:	f8a4 5490 	strh.w	r5, [r4, #1168]	; 0x490
 80008d4:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80008d8:	2231      	movs	r2, #49	; 0x31
 80008da:	f880 a001 	strb.w	sl, [r0, #1]
 80008de:	f89d 1000 	ldrb.w	r1, [sp]
 80008e2:	7031      	strb	r1, [r6, #0]
 80008e4:	7002      	strb	r2, [r0, #0]
 80008e6:	4648      	mov	r0, r9
 80008e8:	68a3      	ldr	r3, [r4, #8]
 80008ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80008ec:	4788      	blx	r1
 80008ee:	4628      	mov	r0, r5
 80008f0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008f4 <PE_Send_RESET>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	460d      	mov	r5, r1
 80008fa:	2d05      	cmp	r5, #5
 80008fc:	7c20      	ldrb	r0, [r4, #16]
 80008fe:	bf0c      	ite	eq
 8000900:	211f      	moveq	r1, #31
 8000902:	215e      	movne	r1, #94	; 0x5e
 8000904:	f7ff fe27 	bl	8000556 <USBPD_PE_Notification>
 8000908:	7c20      	ldrb	r0, [r4, #16]
 800090a:	4629      	mov	r1, r5
 800090c:	f004 fdd9 	bl	80054c2 <USBPD_PRL_ResetRequestProcess>
 8000910:	f3ef 8010 	mrs	r0, PRIMASK
 8000914:	b672      	cpsid	i
 8000916:	2100      	movs	r1, #0
 8000918:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 800091c:	f380 8810 	msr	PRIMASK, r0
 8000920:	bd31      	pop	{r0, r4, r5, pc}

08000922 <PE_Get_SpecRevision>:
 8000922:	f8df 1aa4 	ldr.w	r1, [pc, #2724]	; 80013c8 <.text_70>
 8000926:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800092a:	6841      	ldr	r1, [r0, #4]
 800092c:	7808      	ldrb	r0, [r1, #0]
 800092e:	f000 0003 	and.w	r0, r0, #3
 8000932:	4770      	bx	lr

08000934 <PE_ChangePowerRole>:
 8000934:	6842      	ldr	r2, [r0, #4]
 8000936:	6813      	ldr	r3, [r2, #0]
 8000938:	f361 0382 	bfi	r3, r1, #2, #1
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	7c00      	ldrb	r0, [r0, #16]
 8000940:	f004 bb45 	b.w	8004fce <USBPD_PRL_SetHeaderPowerRole>

08000944 <PE_Get_RxEvent>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	2114      	movs	r1, #20
 8000948:	f3ef 8410 	mrs	r4, PRIMASK
 800094c:	b672      	cpsid	i
 800094e:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8000952:	7b2a      	ldrb	r2, [r5, #12]
 8000954:	b332      	cbz	r2, 80009a4 <PE_Get_RxEvent+0x60>
 8000956:	f500 7613 	add.w	r6, r0, #588	; 0x24c
 800095a:	5cb3      	ldrb	r3, [r6, r2]
 800095c:	065f      	lsls	r7, r3, #25
 800095e:	bf58      	it	pl
 8000960:	2103      	movpl	r1, #3
 8000962:	d51f      	bpl.n	80009a4 <PE_Get_RxEvent+0x60>
 8000964:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000968:	435a      	muls	r2, r3
 800096a:	4410      	add	r0, r2
 800096c:	38cb      	subs	r0, #203	; 0xcb
 800096e:	60a8      	str	r0, [r5, #8]
 8000970:	7802      	ldrb	r2, [r0, #0]
 8000972:	7840      	ldrb	r0, [r0, #1]
 8000974:	eb02 2300 	add.w	r3, r2, r0, lsl #8
 8000978:	7b28      	ldrb	r0, [r5, #12]
 800097a:	80ab      	strh	r3, [r5, #4]
 800097c:	5c32      	ldrb	r2, [r6, r0]
 800097e:	f002 021f 	and.w	r2, r2, #31
 8000982:	2a01      	cmp	r2, #1
 8000984:	d004      	beq.n	8000990 <PE_Get_RxEvent+0x4c>
 8000986:	2a02      	cmp	r2, #2
 8000988:	d005      	beq.n	8000996 <PE_Get_RxEvent+0x52>
 800098a:	2a04      	cmp	r2, #4
 800098c:	d007      	beq.n	800099e <PE_Get_RxEvent+0x5a>
 800098e:	e009      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 8000990:	2111      	movs	r1, #17
 8000992:	2000      	movs	r0, #0
 8000994:	e005      	b.n	80009a2 <PE_Get_RxEvent+0x5e>
 8000996:	2201      	movs	r2, #1
 8000998:	2112      	movs	r1, #18
 800099a:	702a      	strb	r2, [r5, #0]
 800099c:	e002      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 800099e:	2113      	movs	r1, #19
 80009a0:	2002      	movs	r0, #2
 80009a2:	7028      	strb	r0, [r5, #0]
 80009a4:	f384 8810 	msr	PRIMASK, r4
 80009a8:	4608      	mov	r0, r1
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009ac <PE_Clear_RxEvent>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	4601      	mov	r1, r0
 80009b0:	f3ef 8210 	mrs	r2, PRIMASK
 80009b4:	b672      	cpsid	i
 80009b6:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
 80009ba:	b1c8      	cbz	r0, 80009f0 <__iar_annotation$$tailcall+0x8>
 80009bc:	1e40      	subs	r0, r0, #1
 80009be:	b2c0      	uxtb	r0, r0
 80009c0:	f201 234d 	addw	r3, r1, #589	; 0x24d
 80009c4:	2400      	movs	r4, #0
 80009c6:	541c      	strb	r4, [r3, r0]
 80009c8:	1e40      	subs	r0, r0, #1
 80009ca:	4180      	sbcs	r0, r0
 80009cc:	0fc0      	lsrs	r0, r0, #31
 80009ce:	5c1b      	ldrb	r3, [r3, r0]
 80009d0:	065c      	lsls	r4, r3, #25
 80009d2:	d50a      	bpl.n	80009ea <__iar_annotation$$tailcall+0x2>
 80009d4:	1c40      	adds	r0, r0, #1
 80009d6:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80009da:	f382 8810 	msr	PRIMASK, r2
 80009de:	7c08      	ldrb	r0, [r1, #16]
 80009e0:	6889      	ldr	r1, [r1, #8]
 80009e2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80009e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

080009e8 <__iar_annotation$$tailcall>:
 80009e8:	4710      	bx	r2
 80009ea:	2000      	movs	r0, #0
 80009ec:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80009f0:	f382 8810 	msr	PRIMASK, r2
 80009f4:	bd10      	pop	{r4, pc}

080009f6 <PE_PRL_Control_RxEvent>:
 80009f6:	f8df 19d0 	ldr.w	r1, [pc, #2512]	; 80013c8 <.text_70>
 80009fa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80009fe:	2000      	movs	r0, #0
 8000a00:	f3ef 8210 	mrs	r2, PRIMASK
 8000a04:	b672      	cpsid	i
 8000a06:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 8000a0a:	b101      	cbz	r1, 8000a0e <PE_PRL_Control_RxEvent+0x18>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f382 8810 	msr	PRIMASK, r2
 8000a12:	4770      	bx	lr

08000a14 <PE_Convert_SOPRxEvent>:
 8000a14:	b118      	cbz	r0, 8000a1e <PE_Convert_SOPRxEvent+0xa>
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d005      	beq.n	8000a26 <PE_Convert_SOPRxEvent+0x12>
 8000a1a:	d302      	bcc.n	8000a22 <PE_Convert_SOPRxEvent+0xe>
 8000a1c:	e005      	b.n	8000a2a <PE_Convert_SOPRxEvent+0x16>
 8000a1e:	2011      	movs	r0, #17
 8000a20:	4770      	bx	lr
 8000a22:	2012      	movs	r0, #18
 8000a24:	4770      	bx	lr
 8000a26:	2013      	movs	r0, #19
 8000a28:	4770      	bx	lr
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	4770      	bx	lr

08000a2e <PE_Check_AMSConflict>:
 8000a2e:	b538      	push	{r3, r4, r5, lr}
 8000a30:	4605      	mov	r5, r0
 8000a32:	f24f 001f 	movw	r0, #61471	; 0xf01f
 8000a36:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8000a38:	2400      	movs	r4, #0
 8000a3a:	4001      	ands	r1, r0
 8000a3c:	290d      	cmp	r1, #13
 8000a3e:	d102      	bne.n	8000a46 <PE_Check_AMSConflict+0x18>
 8000a40:	2110      	movs	r1, #16
 8000a42:	7469      	strb	r1, [r5, #17]
 8000a44:	e02c      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a46:	7f28      	ldrb	r0, [r5, #28]
 8000a48:	b188      	cbz	r0, 8000a6e <PE_Check_AMSConflict+0x40>
 8000a4a:	1e40      	subs	r0, r0, #1
 8000a4c:	2801      	cmp	r0, #1
 8000a4e:	d914      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a50:	1e80      	subs	r0, r0, #2
 8000a52:	d014      	beq.n	8000a7e <PE_Check_AMSConflict+0x50>
 8000a54:	1e40      	subs	r0, r0, #1
 8000a56:	d023      	beq.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a58:	1e40      	subs	r0, r0, #1
 8000a5a:	2809      	cmp	r0, #9
 8000a5c:	bf84      	itt	hi
 8000a5e:	380b      	subhi	r0, #11
 8000a60:	2801      	cmphi	r0, #1
 8000a62:	d90a      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a64:	1e80      	subs	r0, r0, #2
 8000a66:	d005      	beq.n	8000a74 <PE_Check_AMSConflict+0x46>
 8000a68:	384d      	subs	r0, #77	; 0x4d
 8000a6a:	d006      	beq.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a6c:	e00a      	b.n	8000a84 <PE_Check_AMSConflict+0x56>
 8000a6e:	2203      	movs	r2, #3
 8000a70:	746a      	strb	r2, [r5, #17]
 8000a72:	e016      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a74:	200f      	movs	r0, #15
 8000a76:	7468      	strb	r0, [r5, #17]
 8000a78:	e013      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a7a:	2011      	movs	r0, #17
 8000a7c:	e000      	b.n	8000a80 <PE_Check_AMSConflict+0x52>
 8000a7e:	200f      	movs	r0, #15
 8000a80:	7468      	strb	r0, [r5, #17]
 8000a82:	e00d      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a84:	7c28      	ldrb	r0, [r5, #16]
 8000a86:	215c      	movs	r1, #92	; 0x5c
 8000a88:	f7ff fd65 	bl	8000556 <USBPD_PE_Notification>
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	686a      	ldr	r2, [r5, #4]
 8000a90:	7469      	strb	r1, [r5, #17]
 8000a92:	f240 7004 	movw	r0, #1796	; 0x704
 8000a96:	6811      	ldr	r1, [r2, #0]
 8000a98:	4001      	ands	r1, r0
 8000a9a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000a9e:	d000      	beq.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000aa0:	2415      	movs	r4, #21
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	bd32      	pop	{r1, r4, r5, pc}

08000aa6 <PE_PRL_ResetReceived>:
 8000aa6:	b538      	push	{r3, r4, r5, lr}
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	f8df 091c 	ldr.w	r0, [pc, #2332]	; 80013c8 <.text_70>
 8000aae:	4622      	mov	r2, r4
 8000ab0:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000ab4:	2905      	cmp	r1, #5
 8000ab6:	d114      	bne.n	8000ae2 <PE_PRL_ResetReceived+0x3c>
 8000ab8:	6868      	ldr	r0, [r5, #4]
 8000aba:	6801      	ldr	r1, [r0, #0]
 8000abc:	f021 0110 	bic.w	r1, r1, #16
 8000ac0:	6001      	str	r1, [r0, #0]
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	6969      	ldr	r1, [r5, #20]
 8000ac6:	f360 214a 	bfi	r1, r0, #9, #2
 8000aca:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8000ace:	6169      	str	r1, [r5, #20]
 8000ad0:	2214      	movs	r2, #20
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	7002      	strb	r2, [r0, #0]
 8000ad6:	7283      	strb	r3, [r0, #10]
 8000ad8:	211e      	movs	r1, #30
 8000ada:	7c28      	ldrb	r0, [r5, #16]
 8000adc:	f7ff fd3b 	bl	8000556 <USBPD_PE_Notification>
 8000ae0:	e003      	b.n	8000aea <PE_PRL_ResetReceived+0x44>
 8000ae2:	6968      	ldr	r0, [r5, #20]
 8000ae4:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8000ae8:	6168      	str	r0, [r5, #20]
 8000aea:	4620      	mov	r0, r4
 8000aec:	68a9      	ldr	r1, [r5, #8]
 8000aee:	e148      	b.n	8000d82 <.text_44>

08000af0 <PE_PRL_BistCompleted>:
 8000af0:	4770      	bx	lr

08000af2 <PE_Reset_HardReset>:
 8000af2:	b510      	push	{r4, lr}
 8000af4:	4604      	mov	r4, r0
 8000af6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8000afa:	b118      	cbz	r0, 8000b04 <PE_Reset_HardReset+0x12>
 8000afc:	7c20      	ldrb	r0, [r4, #16]
 8000afe:	215b      	movs	r1, #91	; 0x5b
 8000b00:	f7ff fd29 	bl	8000556 <USBPD_PE_Notification>
 8000b04:	4620      	mov	r0, r4
 8000b06:	f000 f82a 	bl	8000b5e <PE_Reset_ZI>
 8000b0a:	f000 f88e 	bl	8000c2a <.text_37>
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	7903      	ldrb	r3, [r0, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	d009      	beq.n	8000b2c <PE_Reset_HardReset+0x3a>
 8000b18:	7c20      	ldrb	r0, [r4, #16]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	f004 fa40 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b22:	6860      	ldr	r0, [r4, #4]
 8000b24:	6801      	ldr	r1, [r0, #0]
 8000b26:	f041 0108 	orr.w	r1, r1, #8
 8000b2a:	e008      	b.n	8000b3e <PE_Reset_HardReset+0x4c>
 8000b2c:	7c20      	ldrb	r0, [r4, #16]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	f004 fa36 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b36:	6860      	ldr	r0, [r4, #4]
 8000b38:	6801      	ldr	r1, [r0, #0]
 8000b3a:	f021 0108 	bic.w	r1, r1, #8
 8000b3e:	6001      	str	r1, [r0, #0]
 8000b40:	f000 f840 	bl	8000bc4 <.text_34>
 8000b44:	0892      	lsrs	r2, r2, #2
 8000b46:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 8000b4a:	6008      	str	r0, [r1, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	7c20      	ldrb	r0, [r4, #16]
 8000b50:	f004 fa7e 	bl	8005050 <USBPD_PRL_SOPCapability>
 8000b54:	7c20      	ldrb	r0, [r4, #16]
 8000b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b5a:	f004 bcee 	b.w	800553a <USBPD_PRL_Reset>

08000b5e <PE_Reset_ZI>:
 8000b5e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	2000      	movs	r0, #0
 8000b64:	9001      	str	r0, [sp, #4]
 8000b66:	2100      	movs	r1, #0
 8000b68:	6860      	ldr	r0, [r4, #4]
 8000b6a:	6802      	ldr	r2, [r0, #0]
 8000b6c:	f022 0210 	bic.w	r2, r2, #16
 8000b70:	6002      	str	r2, [r0, #0]
 8000b72:	4620      	mov	r0, r4
 8000b74:	f000 fbd6 	bl	8001324 <PE_SetPowerNegotiation>
 8000b78:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8000b7c:	f104 0014 	add.w	r0, r4, #20
 8000b80:	f01f ff91 	bl	8020aa6 <__aeabi_memclr>
 8000b84:	68a5      	ldr	r5, [r4, #8]
 8000b86:	7c20      	ldrb	r0, [r4, #16]
 8000b88:	69ae      	ldr	r6, [r5, #24]
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	aa01      	add	r2, sp, #4
 8000b8e:	2102      	movs	r1, #2
 8000b90:	47b0      	blx	r6
 8000b92:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000b96:	9000      	str	r0, [sp, #0]
 8000b98:	2304      	movs	r3, #4
 8000b9a:	68a5      	ldr	r5, [r4, #8]
 8000b9c:	7c20      	ldrb	r0, [r4, #16]
 8000b9e:	69ae      	ldr	r6, [r5, #24]
 8000ba0:	466a      	mov	r2, sp
 8000ba2:	2106      	movs	r1, #6
 8000ba4:	47b0      	blx	r6
 8000ba6:	6820      	ldr	r0, [r4, #0]
 8000ba8:	7901      	ldrb	r1, [r0, #4]
 8000baa:	7c20      	ldrb	r0, [r4, #16]
 8000bac:	f001 0103 	and.w	r1, r1, #3
 8000bb0:	f004 fa28 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000bb4:	f000 f806 	bl	8000bc4 <.text_34>
 8000bb8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8000bbc:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000bc0:	600a      	str	r2, [r1, #0]
 8000bc2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000bc4 <.text_34>:
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	6861      	ldr	r1, [r4, #4]
 8000bc8:	7900      	ldrb	r0, [r0, #4]
 8000bca:	680a      	ldr	r2, [r1, #0]
 8000bcc:	f000 0003 	and.w	r0, r0, #3
 8000bd0:	4770      	bx	lr

08000bd2 <PE_Reset_Counter>:
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8000bd8:	f01f bf65 	b.w	8020aa6 <__aeabi_memclr>

08000bdc <PE_Reset_StateMachine>:
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4604      	mov	r4, r0
 8000be0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8000be4:	b118      	cbz	r0, 8000bee <PE_Reset_StateMachine+0x12>
 8000be6:	7c20      	ldrb	r0, [r4, #16]
 8000be8:	215b      	movs	r1, #91	; 0x5b
 8000bea:	f7ff fcb4 	bl	8000556 <USBPD_PE_Notification>
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff ffb5 	bl	8000b5e <PE_Reset_ZI>
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f000 fb94 	bl	8001324 <PE_SetPowerNegotiation>
 8000bfc:	7c20      	ldrb	r0, [r4, #16]
 8000bfe:	f004 fc9c 	bl	800553a <USBPD_PRL_Reset>
 8000c02:	f000 f812 	bl	8000c2a <.text_37>
 8000c06:	f001 0303 	and.w	r3, r1, #3
 8000c0a:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8000c0e:	d005      	beq.n	8000c1c <PE_Reset_StateMachine+0x40>
 8000c10:	7c20      	ldrb	r0, [r4, #16]
 8000c12:	2101      	movs	r1, #1
 8000c14:	f004 f9c5 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c18:	2002      	movs	r0, #2
 8000c1a:	e004      	b.n	8000c26 <PE_Reset_StateMachine+0x4a>
 8000c1c:	7c20      	ldrb	r0, [r4, #16]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f004 f9bf 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c24:	203e      	movs	r0, #62	; 0x3e
 8000c26:	7460      	strb	r0, [r4, #17]
 8000c28:	bd10      	pop	{r4, pc}

08000c2a <.text_37>:
 8000c2a:	6860      	ldr	r0, [r4, #4]
 8000c2c:	6801      	ldr	r1, [r0, #0]
 8000c2e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000c32:	2800      	cmp	r0, #0
 8000c34:	4770      	bx	lr

08000c36 <PE_ExtRevisionInteroperability>:
 8000c36:	b538      	push	{r3, r4, r5, lr}
 8000c38:	f8df 378c 	ldr.w	r3, [pc, #1932]	; 80013c8 <.text_70>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000c42:	6865      	ldr	r5, [r4, #4]
 8000c44:	682c      	ldr	r4, [r5, #0]
 8000c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c4a:	f004 0503 	and.w	r5, r4, #3
 8000c4e:	42a9      	cmp	r1, r5
 8000c50:	bfa8      	it	ge
 8000c52:	4629      	movge	r1, r5
 8000c54:	f361 0401 	bfi	r4, r1, #0, #2
 8000c58:	6851      	ldr	r1, [r2, #4]
 8000c5a:	600c      	str	r4, [r1, #0]
 8000c5c:	6851      	ldr	r1, [r2, #4]
 8000c5e:	680b      	ldr	r3, [r1, #0]
 8000c60:	f003 0403 	and.w	r4, r3, #3
 8000c64:	2c01      	cmp	r4, #1
 8000c66:	bf0c      	ite	eq
 8000c68:	2400      	moveq	r4, #0
 8000c6a:	2420      	movne	r4, #32
 8000c6c:	f023 0320 	bic.w	r3, r3, #32
 8000c70:	4323      	orrs	r3, r4
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	6852      	ldr	r2, [r2, #4]
 8000c76:	7811      	ldrb	r1, [r2, #0]
 8000c78:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 8000c7c:	f001 0103 	and.w	r1, r1, #3
 8000c80:	f004 b9b9 	b.w	8004ff6 <USBPD_PRL_SetHeaderSpecification>

08000c84 <PE_PRL_FastRoleSwapReception>:
 8000c84:	f8df 1740 	ldr.w	r1, [pc, #1856]	; 80013c8 <.text_70>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000c8e:	7f0a      	ldrb	r2, [r1, #28]
 8000c90:	2a09      	cmp	r2, #9
 8000c92:	d005      	beq.n	8000ca0 <PE_PRL_FastRoleSwapReception+0x1c>
 8000c94:	684a      	ldr	r2, [r1, #4]
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e354      	b.n	800134a <.text_66>
 8000ca0:	4770      	bx	lr

08000ca2 <PE_PRL_PostReceiveEvent>:
 8000ca2:	b570      	push	{r4, r5, r6, lr}
 8000ca4:	f8df 2720 	ldr.w	r2, [pc, #1824]	; 80013c8 <.text_70>
 8000ca8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8000cac:	2000      	movs	r0, #0
 8000cae:	2400      	movs	r4, #0
 8000cb0:	191a      	adds	r2, r3, r4
 8000cb2:	f892 224d 	ldrb.w	r2, [r2, #589]	; 0x24d
 8000cb6:	b122      	cbz	r2, 8000cc2 <PE_PRL_PostReceiveEvent+0x20>
 8000cb8:	1c64      	adds	r4, r4, #1
 8000cba:	b2e4      	uxtb	r4, r4
 8000cbc:	2c01      	cmp	r4, #1
 8000cbe:	d9f7      	bls.n	8000cb0 <PE_PRL_PostReceiveEvent+0xe>
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
 8000cc2:	191a      	adds	r2, r3, r4
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	191d      	adds	r5, r3, r4
 8000cc8:	f882 024d 	strb.w	r0, [r2, #589]	; 0x24d
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f895 624d 	ldrb.w	r6, [r5, #589]	; 0x24d
 8000cd2:	fa00 f101 	lsl.w	r1, r0, r1
 8000cd6:	1918      	adds	r0, r3, r4
 8000cd8:	4331      	orrs	r1, r6
 8000cda:	f880 124d 	strb.w	r1, [r0, #589]	; 0x24d
 8000cde:	2001      	movs	r0, #1
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}

08000ce2 <PE_PRL_PostReceiveEventError>:
 8000ce2:	f8df 16e4 	ldr.w	r1, [pc, #1764]	; 80013c8 <.text_70>
 8000ce6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000cea:	2100      	movs	r1, #0
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	4402      	add	r2, r0
 8000cf0:	f892 324d 	ldrb.w	r3, [r2, #589]	; 0x24d
 8000cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d004      	beq.n	8000d06 <PE_PRL_PostReceiveEventError+0x24>
 8000cfc:	1c49      	adds	r1, r1, #1
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	2a02      	cmp	r2, #2
 8000d02:	d3f3      	bcc.n	8000cec <PE_PRL_PostReceiveEventError+0xa>
 8000d04:	4770      	bx	lr
 8000d06:	2000      	movs	r0, #0
 8000d08:	f882 024d 	strb.w	r0, [r2, #589]	; 0x24d
 8000d0c:	4770      	bx	lr

08000d0e <PE_PRL_PostReceiveEventCopy>:
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	f8df 26b4 	ldr.w	r2, [pc, #1716]	; 80013c8 <.text_70>
 8000d14:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	b2d3      	uxtb	r3, r2
 8000d1c:	18c4      	adds	r4, r0, r3
 8000d1e:	f894 424d 	ldrb.w	r4, [r4, #589]	; 0x24d
 8000d22:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8000d26:	2c20      	cmp	r4, #32
 8000d28:	d004      	beq.n	8000d34 <PE_PRL_PostReceiveEventCopy+0x26>
 8000d2a:	1c52      	adds	r2, r2, #1
 8000d2c:	b2d3      	uxtb	r3, r2
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d3f3      	bcc.n	8000d1a <PE_PRL_PostReceiveEventCopy+0xc>
 8000d32:	bd10      	pop	{r4, pc}
 8000d34:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d38:	4353      	muls	r3, r2
 8000d3a:	18c4      	adds	r4, r0, r3
 8000d3c:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8000d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d44:	f01f bead 	b.w	8020aa2 <__aeabi_memcpy>

08000d48 <PE_PRL_PostReceiveEventComplete>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	f000 f81e 	bl	8000d8a <.text_45>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	1854      	adds	r4, r2, r1
 8000d52:	1c4b      	adds	r3, r1, #1
 8000d54:	f894 524d 	ldrb.w	r5, [r4, #589]	; 0x24d
 8000d58:	f005 0560 	and.w	r5, r5, #96	; 0x60
 8000d5c:	2d20      	cmp	r5, #32
 8000d5e:	d003      	beq.n	8000d68 <PE_PRL_PostReceiveEventComplete+0x20>
 8000d60:	b2d9      	uxtb	r1, r3
 8000d62:	2902      	cmp	r1, #2
 8000d64:	d3f4      	bcc.n	8000d50 <PE_PRL_PostReceiveEventComplete+0x8>
 8000d66:	bd31      	pop	{r0, r4, r5, pc}
 8000d68:	f894 424d 	ldrb.w	r4, [r4, #589]	; 0x24d
 8000d6c:	1855      	adds	r5, r2, r1
 8000d6e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8000d72:	f885 424d 	strb.w	r4, [r5, #589]	; 0x24d
 8000d76:	f892 103c 	ldrb.w	r1, [r2, #60]	; 0x3c
 8000d7a:	b909      	cbnz	r1, 8000d80 <PE_PRL_PostReceiveEventComplete+0x38>
 8000d7c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 8000d80:	6891      	ldr	r1, [r2, #8]

08000d82 <.text_44>:
 8000d82:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000d84:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

08000d88 <__iar_annotation$$tailcall>:
 8000d88:	4710      	bx	r2

08000d8a <.text_45>:
 8000d8a:	f8df 163c 	ldr.w	r1, [pc, #1596]	; 80013c8 <.text_70>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d94:	4770      	bx	lr

08000d96 <PE_Get_UnchunkedSupport>:
 8000d96:	f8df 1630 	ldr.w	r1, [pc, #1584]	; 80013c8 <.text_70>
 8000d9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000d9e:	6841      	ldr	r1, [r0, #4]
 8000da0:	6808      	ldr	r0, [r1, #0]
 8000da2:	0e40      	lsrs	r0, r0, #25
 8000da4:	f000 0001 	and.w	r0, r0, #1
 8000da8:	4770      	bx	lr
	...

08000dac <.text_47>:
 8000dac:	20000444 	.word	0x20000444

08000db0 <.text_48>:
 8000db0:	20000000 	.word	0x20000000

08000db4 <.text_49>:
 8000db4:	08023504 	.word	0x08023504

08000db8 <PE_SubStateMachine_Generic>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	b08c      	sub	sp, #48	; 0x30
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	9003      	str	r0, [sp, #12]
 8000dc4:	460e      	mov	r6, r1
 8000dc6:	7c63      	ldrb	r3, [r4, #17]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	f04f 0a02 	mov.w	sl, #2
 8000dce:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8000dd2:	f204 2963 	addw	r9, r4, #611	; 0x263
 8000dd6:	f204 2565 	addw	r5, r4, #613	; 0x265
 8000dda:	f204 2267 	addw	r2, r4, #615	; 0x267
 8000dde:	f248 081b 	movw	r8, #32795	; 0x801b
 8000de2:	f000 8163 	beq.w	80010ac <PE_SubStateMachine_Generic+0x2f4>
 8000de6:	2b18      	cmp	r3, #24
 8000de8:	d03f      	beq.n	8000e6a <PE_SubStateMachine_Generic+0xb2>
 8000dea:	2b19      	cmp	r3, #25
 8000dec:	d04e      	beq.n	8000e8c <PE_SubStateMachine_Generic+0xd4>
 8000dee:	2b1d      	cmp	r3, #29
 8000df0:	f000 808e 	beq.w	8000f10 <PE_SubStateMachine_Generic+0x158>
 8000df4:	2b27      	cmp	r3, #39	; 0x27
 8000df6:	f000 80aa 	beq.w	8000f4e <PE_SubStateMachine_Generic+0x196>
 8000dfa:	2b28      	cmp	r3, #40	; 0x28
 8000dfc:	f000 80b5 	beq.w	8000f6a <PE_SubStateMachine_Generic+0x1b2>
 8000e00:	2b29      	cmp	r3, #41	; 0x29
 8000e02:	f000 80bc 	beq.w	8000f7e <PE_SubStateMachine_Generic+0x1c6>
 8000e06:	2b2c      	cmp	r3, #44	; 0x2c
 8000e08:	f000 8205 	beq.w	8001216 <PE_SubStateMachine_Generic+0x45e>
 8000e0c:	2b30      	cmp	r3, #48	; 0x30
 8000e0e:	f000 8179 	beq.w	8001104 <PE_SubStateMachine_Generic+0x34c>
 8000e12:	2b3a      	cmp	r3, #58	; 0x3a
 8000e14:	f000 81ee 	beq.w	80011f4 <PE_SubStateMachine_Generic+0x43c>
 8000e18:	2b3b      	cmp	r3, #59	; 0x3b
 8000e1a:	f000 81d1 	beq.w	80011c0 <PE_SubStateMachine_Generic+0x408>
 8000e1e:	2b3c      	cmp	r3, #60	; 0x3c
 8000e20:	f000 81be 	beq.w	80011a0 <PE_SubStateMachine_Generic+0x3e8>
 8000e24:	2b4b      	cmp	r3, #75	; 0x4b
 8000e26:	f000 80f8 	beq.w	800101a <PE_SubStateMachine_Generic+0x262>
 8000e2a:	2b63      	cmp	r3, #99	; 0x63
 8000e2c:	f000 8144 	beq.w	80010b8 <PE_SubStateMachine_Generic+0x300>
 8000e30:	2b64      	cmp	r3, #100	; 0x64
 8000e32:	f000 8154 	beq.w	80010de <PE_SubStateMachine_Generic+0x326>
 8000e36:	2b67      	cmp	r3, #103	; 0x67
 8000e38:	f000 8102 	beq.w	8001040 <PE_SubStateMachine_Generic+0x288>
 8000e3c:	2b68      	cmp	r3, #104	; 0x68
 8000e3e:	f000 8111 	beq.w	8001064 <PE_SubStateMachine_Generic+0x2ac>
 8000e42:	2b74      	cmp	r3, #116	; 0x74
 8000e44:	f000 8174 	beq.w	8001130 <PE_SubStateMachine_Generic+0x378>
 8000e48:	2b93      	cmp	r3, #147	; 0x93
 8000e4a:	f000 809e 	beq.w	8000f8a <PE_SubStateMachine_Generic+0x1d2>
 8000e4e:	2b94      	cmp	r3, #148	; 0x94
 8000e50:	f000 809f 	beq.w	8000f92 <PE_SubStateMachine_Generic+0x1da>
 8000e54:	2b95      	cmp	r3, #149	; 0x95
 8000e56:	f000 80b0 	beq.w	8000fba <PE_SubStateMachine_Generic+0x202>
 8000e5a:	2b99      	cmp	r3, #153	; 0x99
 8000e5c:	f040 81e0 	bne.w	8001220 <PE_SubStateMachine_Generic+0x468>
 8000e60:	2106      	movs	r1, #6
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fd46 	bl	80008f4 <PE_Send_RESET>
 8000e68:	e195      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000e6a:	f7ff fede 	bl	8000c2a <.text_37>
 8000e6e:	bf1d      	ittte	ne
 8000e70:	6960      	ldrne	r0, [r4, #20]
 8000e72:	0880      	lsrne	r0, r0, #2
 8000e74:	f000 0001 	andne.w	r0, r0, #1
 8000e78:	2002      	moveq	r0, #2
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	2319      	movs	r3, #25
 8000e7e:	2208      	movs	r2, #8
 8000e80:	f000 fa3a 	bl	80012f8 <.text_61>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d16f      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000e88:	2007      	movs	r0, #7
 8000e8a:	e0e8      	b.n	800105e <PE_SubStateMachine_Generic+0x2a6>
 8000e8c:	7830      	ldrb	r0, [r6, #0]
 8000e8e:	2811      	cmp	r0, #17
 8000e90:	d13d      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000e92:	88b9      	ldrh	r1, [r7, #4]
 8000e94:	0bc8      	lsrs	r0, r1, #15
 8000e96:	d121      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000e98:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000e9c:	b1f0      	cbz	r0, 8000edc <PE_SubStateMachine_Generic+0x124>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	f000 011f 	and.w	r1, r0, #31
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d119      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000ea8:	68a5      	ldr	r5, [r4, #8]
 8000eaa:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000eae:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000eb2:	68b8      	ldr	r0, [r7, #8]
 8000eb4:	1c82      	adds	r2, r0, #2
 8000eb6:	7c20      	ldrb	r0, [r4, #16]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	2105      	movs	r1, #5
 8000ebc:	47e0      	blx	ip
 8000ebe:	7830      	ldrb	r0, [r6, #0]
 8000ec0:	2814      	cmp	r0, #20
 8000ec2:	d003      	beq.n	8000ecc <PE_SubStateMachine_Generic+0x114>
 8000ec4:	2114      	movs	r1, #20
 8000ec6:	7031      	strb	r1, [r6, #0]
 8000ec8:	f000 f9d1 	bl	800126e <.text_57+0x4>
 8000ecc:	2003      	movs	r0, #3
 8000ece:	7460      	strb	r0, [r4, #17]
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	7c20      	ldrb	r0, [r4, #16]
 8000ed4:	f7ff fb3f 	bl	8000556 <USBPD_PE_Notification>
 8000ed8:	f04f 0a00 	mov.w	sl, #0
 8000edc:	88b8      	ldrh	r0, [r7, #4]
 8000ede:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8000ee2:	d114      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ee4:	f000 001f 	and.w	r0, r0, #31
 8000ee8:	2804      	cmp	r0, #4
 8000eea:	bf18      	it	ne
 8000eec:	2810      	cmpne	r0, #16
 8000eee:	d10e      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ef0:	7830      	ldrb	r0, [r6, #0]
 8000ef2:	2814      	cmp	r0, #20
 8000ef4:	d003      	beq.n	8000efe <PE_SubStateMachine_Generic+0x146>
 8000ef6:	2114      	movs	r1, #20
 8000ef8:	7031      	strb	r1, [r6, #0]
 8000efa:	f000 f9b8 	bl	800126e <.text_57+0x4>
 8000efe:	2003      	movs	r0, #3
 8000f00:	7460      	strb	r0, [r4, #17]
 8000f02:	2108      	movs	r1, #8
 8000f04:	7c20      	ldrb	r0, [r4, #16]
 8000f06:	f7ff fb26 	bl	8000556 <USBPD_PE_Notification>
 8000f0a:	f04f 0a00 	mov.w	sl, #0
 8000f0e:	e080      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000f10:	9004      	str	r0, [sp, #16]
 8000f12:	ab04      	add	r3, sp, #16
 8000f14:	68a6      	ldr	r6, [r4, #8]
 8000f16:	7c20      	ldrb	r0, [r4, #16]
 8000f18:	6977      	ldr	r7, [r6, #20]
 8000f1a:	aa05      	add	r2, sp, #20
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	47b8      	blx	r7
 8000f20:	9804      	ldr	r0, [sp, #16]
 8000f22:	2104      	movs	r1, #4
 8000f24:	f000 fa40 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8000f28:	b108      	cbz	r0, 8000f2e <PE_SubStateMachine_Generic+0x176>
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	e179      	b.n	8001222 <PE_SubStateMachine_Generic+0x46a>
 8000f2e:	9a04      	ldr	r2, [sp, #16]
 8000f30:	2003      	movs	r0, #3
 8000f32:	0892      	lsrs	r2, r2, #2
 8000f34:	2100      	movs	r1, #0
 8000f36:	9001      	str	r0, [sp, #4]
 8000f38:	9200      	str	r2, [sp, #0]
 8000f3a:	9102      	str	r1, [sp, #8]
 8000f3c:	ab05      	add	r3, sp, #20
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4620      	mov	r0, r4
 8000f42:	f000 fabe 	bl	80014c2 <PE_Send_DataMessage>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d10e      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	e0ec      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000f4e:	2012      	movs	r0, #18
 8000f50:	7720      	strb	r0, [r4, #28]
 8000f52:	2105      	movs	r1, #5
 8000f54:	7c20      	ldrb	r0, [r4, #16]
 8000f56:	f004 fae3 	bl	8005520 <USBDPD_PRL_BistCarrierEyeMode>
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	7460      	strb	r0, [r4, #17]
 8000f5e:	f248 012d 	movw	r1, #32813	; 0x802d
 8000f62:	83e1      	strh	r1, [r4, #30]
 8000f64:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8000f68:	e15c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f6a:	f000 f95f 	bl	800122c <.text_51>
 8000f6e:	d1fb      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f70:	7c20      	ldrb	r0, [r4, #16]
 8000f72:	2105      	movs	r1, #5
 8000f74:	f004 fada 	bl	800552c <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	83e0      	strh	r0, [r4, #30]
 8000f7c:	e10b      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000f7e:	7831      	ldrb	r1, [r6, #0]
 8000f80:	2914      	cmp	r1, #20
 8000f82:	d001      	beq.n	8000f88 <PE_SubStateMachine_Generic+0x1d0>
 8000f84:	f000 f971 	bl	800126a <.text_57>
 8000f88:	e14c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 f990 	bl	80012b0 <PE_SubStateMachine_ReceiveDRS>
 8000f90:	e148      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f92:	f7ff fe4a 	bl	8000c2a <.text_37>
 8000f96:	bf1d      	ittte	ne
 8000f98:	6960      	ldrne	r0, [r4, #20]
 8000f9a:	0880      	lsrne	r0, r0, #2
 8000f9c:	f000 0001 	andne.w	r0, r0, #1
 8000fa0:	2002      	moveq	r0, #2
 8000fa2:	9000      	str	r0, [sp, #0]
 8000fa4:	2395      	movs	r3, #149	; 0x95
 8000fa6:	2209      	movs	r2, #9
 8000fa8:	f000 f9a6 	bl	80012f8 <.text_61>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d1ef      	bne.n	8000f90 <PE_SubStateMachine_Generic+0x1d8>
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f000 f93f 	bl	8001234 <.text_52>
 8000fb6:	2122      	movs	r1, #34	; 0x22
 8000fb8:	e0b6      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000fba:	7830      	ldrb	r0, [r6, #0]
 8000fbc:	2814      	cmp	r0, #20
 8000fbe:	d028      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc0:	88b8      	ldrh	r0, [r7, #4]
 8000fc2:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8000fc6:	d124      	bne.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc8:	f000 011f 	and.w	r1, r0, #31
 8000fcc:	2903      	cmp	r1, #3
 8000fce:	d006      	beq.n	8000fde <PE_SubStateMachine_Generic+0x226>
 8000fd0:	2904      	cmp	r1, #4
 8000fd2:	bf18      	it	ne
 8000fd4:	290c      	cmpne	r1, #12
 8000fd6:	d006      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x22e>
 8000fd8:	2910      	cmp	r1, #16
 8000fda:	d011      	beq.n	8001000 <PE_SubStateMachine_Generic+0x248>
 8000fdc:	e019      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f000 f9f6 	bl	80013d0 <PE_SwitchDataRole>
 8000fe4:	e008      	b.n	8000ff8 <PE_SubStateMachine_Generic+0x240>
 8000fe6:	f000 001f 	and.w	r0, r0, #31
 8000fea:	280c      	cmp	r0, #12
 8000fec:	7c20      	ldrb	r0, [r4, #16]
 8000fee:	bf0c      	ite	eq
 8000ff0:	2126      	moveq	r1, #38	; 0x26
 8000ff2:	2127      	movne	r1, #39	; 0x27
 8000ff4:	f7ff faaf 	bl	8000556 <USBPD_PE_Notification>
 8000ff8:	f000 f922 	bl	8001240 <.text_53>
 8000ffc:	d107      	bne.n	800100e <PE_SubStateMachine_Generic+0x256>
 8000ffe:	e008      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8001000:	7c20      	ldrb	r0, [r4, #16]
 8001002:	2128      	movs	r1, #40	; 0x28
 8001004:	f7ff faa7 	bl	8000556 <USBPD_PE_Notification>
 8001008:	f000 f91a 	bl	8001240 <.text_53>
 800100c:	d001      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 800100e:	f000 f92c 	bl	800126a <.text_57>
 8001012:	f000 f90b 	bl	800122c <.text_51>
 8001016:	d124      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 8001018:	e0bd      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 800101a:	f000 f918 	bl	800124e <.text_54>
 800101e:	aa04      	add	r2, sp, #16
 8001020:	2114      	movs	r1, #20
 8001022:	47b8      	blx	r7
 8001024:	9803      	ldr	r0, [sp, #12]
 8001026:	2800      	cmp	r0, #0
 8001028:	f000 80fa 	beq.w	8001220 <PE_SubStateMachine_Generic+0x468>
 800102c:	9a03      	ldr	r2, [sp, #12]
 800102e:	0892      	lsrs	r2, r2, #2
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	2100      	movs	r1, #0
 8001034:	2003      	movs	r0, #3
 8001036:	9102      	str	r1, [sp, #8]
 8001038:	9001      	str	r0, [sp, #4]
 800103a:	ab04      	add	r3, sp, #16
 800103c:	220c      	movs	r2, #12
 800103e:	e0d5      	b.n	80011ec <PE_SubStateMachine_Generic+0x434>
 8001040:	6860      	ldr	r0, [r4, #4]
 8001042:	6801      	ldr	r1, [r0, #0]
 8001044:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001048:	b900      	cbnz	r0, 800104c <PE_SubStateMachine_Generic+0x294>
 800104a:	2002      	movs	r0, #2
 800104c:	9000      	str	r0, [sp, #0]
 800104e:	2368      	movs	r3, #104	; 0x68
 8001050:	7879      	ldrb	r1, [r7, #1]
 8001052:	2218      	movs	r2, #24
 8001054:	f000 f951 	bl	80012fa <.text_61+0x2>
 8001058:	2800      	cmp	r0, #0
 800105a:	d102      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 800105c:	200f      	movs	r0, #15
 800105e:	f000 f8e9 	bl	8001234 <.text_52>
 8001062:	e0df      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001064:	7830      	ldrb	r0, [r6, #0]
 8001066:	2814      	cmp	r0, #20
 8001068:	d01b      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800106a:	7839      	ldrb	r1, [r7, #0]
 800106c:	7878      	ldrb	r0, [r7, #1]
 800106e:	4281      	cmp	r1, r0
 8001070:	d117      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001072:	88b9      	ldrh	r1, [r7, #4]
 8001074:	0bc8      	lsrs	r0, r1, #15
 8001076:	d114      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001078:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800107c:	b188      	cbz	r0, 80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800107e:	7938      	ldrb	r0, [r7, #4]
 8001080:	f000 001f 	and.w	r0, r0, #31
 8001084:	280c      	cmp	r0, #12
 8001086:	d10c      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	68a5      	ldr	r5, [r4, #8]
 800108c:	69af      	ldr	r7, [r5, #24]
 800108e:	1c82      	adds	r2, r0, #2
 8001090:	7c20      	ldrb	r0, [r4, #16]
 8001092:	2304      	movs	r3, #4
 8001094:	2114      	movs	r1, #20
 8001096:	47b8      	blx	r7
 8001098:	f000 f8d2 	bl	8001240 <.text_53>
 800109c:	d001      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800109e:	f000 f8e4 	bl	800126a <.text_57>
 80010a2:	f000 f8c3 	bl	800122c <.text_51>
 80010a6:	d106      	bne.n	80010b6 <PE_SubStateMachine_Generic+0x2fe>
 80010a8:	2111      	movs	r1, #17
 80010aa:	e075      	b.n	8001198 <PE_SubStateMachine_Generic+0x3e0>
 80010ac:	9000      	str	r0, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	2210      	movs	r2, #16
 80010b2:	f000 f921 	bl	80012f8 <.text_61>
 80010b6:	e0b5      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80010b8:	f000 f8c9 	bl	800124e <.text_54>
 80010bc:	2108      	movs	r1, #8
 80010be:	47b8      	blx	r7
 80010c0:	9803      	ldr	r0, [sp, #12]
 80010c2:	2119      	movs	r1, #25
 80010c4:	f000 f970 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d172      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010cc:	f000 f8c4 	bl	8001258 <.text_55>
 80010d0:	f000 f8df 	bl	8001292 <.text_59>
 80010d4:	2201      	movs	r2, #1
 80010d6:	f000 f8c4 	bl	8001262 <.text_56>
 80010da:	2148      	movs	r1, #72	; 0x48
 80010dc:	e024      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 80010de:	f000 f8b6 	bl	800124e <.text_54>
 80010e2:	2113      	movs	r1, #19
 80010e4:	47b8      	blx	r7
 80010e6:	9803      	ldr	r0, [sp, #12]
 80010e8:	2118      	movs	r1, #24
 80010ea:	f000 f95d 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d15f      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010f2:	f000 f8b1 	bl	8001258 <.text_55>
 80010f6:	f000 f8cc 	bl	8001292 <.text_59>
 80010fa:	220f      	movs	r2, #15
 80010fc:	f000 f8b1 	bl	8001262 <.text_56>
 8001100:	2161      	movs	r1, #97	; 0x61
 8001102:	e011      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8001104:	f000 f8a3 	bl	800124e <.text_54>
 8001108:	2109      	movs	r1, #9
 800110a:	47b8      	blx	r7
 800110c:	9803      	ldr	r0, [sp, #12]
 800110e:	2107      	movs	r1, #7
 8001110:	f000 f94a 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001114:	2800      	cmp	r0, #0
 8001116:	d14c      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 8001118:	f000 f89e 	bl	8001258 <.text_55>
 800111c:	f000 f8b9 	bl	8001292 <.text_59>
 8001120:	2202      	movs	r2, #2
 8001122:	f000 f89e 	bl	8001262 <.text_56>
 8001126:	214f      	movs	r1, #79	; 0x4f
 8001128:	7c20      	ldrb	r0, [r4, #16]
 800112a:	f7ff fa14 	bl	8000556 <USBPD_PE_Notification>
 800112e:	e079      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001130:	7831      	ldrb	r1, [r6, #0]
 8001132:	2914      	cmp	r1, #20
 8001134:	d02c      	beq.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001136:	88b9      	ldrh	r1, [r7, #4]
 8001138:	0bc8      	lsrs	r0, r1, #15
 800113a:	d115      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800113c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001140:	b190      	cbz	r0, 8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001142:	7938      	ldrb	r0, [r7, #4]
 8001144:	f000 001f 	and.w	r0, r0, #31
 8001148:	2805      	cmp	r0, #5
 800114a:	d10d      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	68a5      	ldr	r5, [r4, #8]
 8001150:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8001154:	1d02      	adds	r2, r0, #4
 8001156:	7c20      	ldrb	r0, [r4, #16]
 8001158:	2304      	movs	r3, #4
 800115a:	210f      	movs	r1, #15
 800115c:	47e0      	blx	ip
 800115e:	f000 f86f 	bl	8001240 <.text_53>
 8001162:	d001      	beq.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001164:	f000 f881 	bl	800126a <.text_57>
 8001168:	7938      	ldrb	r0, [r7, #4]
 800116a:	f000 001f 	and.w	r0, r0, #31
 800116e:	2810      	cmp	r0, #16
 8001170:	d10e      	bne.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001172:	7c20      	ldrb	r0, [r4, #16]
 8001174:	2159      	movs	r1, #89	; 0x59
 8001176:	f7ff f9ee 	bl	8000556 <USBPD_PE_Notification>
 800117a:	2000      	movs	r0, #0
 800117c:	83e0      	strh	r0, [r4, #30]
 800117e:	7831      	ldrb	r1, [r6, #0]
 8001180:	2914      	cmp	r1, #20
 8001182:	d001      	beq.n	8001188 <PE_SubStateMachine_Generic+0x3d0>
 8001184:	f000 f871 	bl	800126a <.text_57>
 8001188:	2103      	movs	r1, #3
 800118a:	7461      	strb	r1, [r4, #17]
 800118c:	f04f 0a00 	mov.w	sl, #0
 8001190:	f000 f84c 	bl	800122c <.text_51>
 8001194:	d146      	bne.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001196:	2103      	movs	r1, #3
 8001198:	7461      	strb	r1, [r4, #17]
 800119a:	f04f 0a00 	mov.w	sl, #0
 800119e:	e041      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011a0:	f000 f855 	bl	800124e <.text_54>
 80011a4:	210d      	movs	r1, #13
 80011a6:	47b8      	blx	r7
 80011a8:	9803      	ldr	r0, [sp, #12]
 80011aa:	2104      	movs	r1, #4
 80011ac:	f000 f8fc 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d135      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011b4:	f000 f850 	bl	8001258 <.text_55>
 80011b8:	f000 f85c 	bl	8001274 <.text_58>
 80011bc:	2207      	movs	r2, #7
 80011be:	e027      	b.n	8001210 <PE_SubStateMachine_Generic+0x458>
 80011c0:	9004      	str	r0, [sp, #16]
 80011c2:	ab03      	add	r3, sp, #12
 80011c4:	68a6      	ldr	r6, [r4, #8]
 80011c6:	7c20      	ldrb	r0, [r4, #16]
 80011c8:	6977      	ldr	r7, [r6, #20]
 80011ca:	aa04      	add	r2, sp, #16
 80011cc:	210f      	movs	r1, #15
 80011ce:	47b8      	blx	r7
 80011d0:	9803      	ldr	r0, [sp, #12]
 80011d2:	2104      	movs	r1, #4
 80011d4:	f000 f8e8 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d121      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011dc:	2103      	movs	r1, #3
 80011de:	2201      	movs	r2, #1
 80011e0:	9101      	str	r1, [sp, #4]
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	9002      	str	r0, [sp, #8]
 80011e6:	ab04      	add	r3, sp, #16
 80011e8:	2205      	movs	r2, #5
 80011ea:	2100      	movs	r1, #0
 80011ec:	4620      	mov	r0, r4
 80011ee:	f000 f968 	bl	80014c2 <PE_Send_DataMessage>
 80011f2:	e017      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011f4:	f000 f82b 	bl	800124e <.text_54>
 80011f8:	2111      	movs	r1, #17
 80011fa:	47b8      	blx	r7
 80011fc:	9803      	ldr	r0, [sp, #12]
 80011fe:	2109      	movs	r1, #9
 8001200:	f000 f8d2 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001204:	b960      	cbnz	r0, 8001220 <PE_SubStateMachine_Generic+0x468>
 8001206:	f000 f827 	bl	8001258 <.text_55>
 800120a:	f000 f833 	bl	8001274 <.text_58>
 800120e:	2205      	movs	r2, #5
 8001210:	f000 f827 	bl	8001262 <.text_56>
 8001214:	e006      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001216:	7c20      	ldrb	r0, [r4, #16]
 8001218:	2150      	movs	r1, #80	; 0x50
 800121a:	f7ff f99c 	bl	8000556 <USBPD_PE_Notification>
 800121e:	e7ba      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8001220:	2001      	movs	r0, #1
 8001222:	7460      	strb	r0, [r4, #17]
 8001224:	4650      	mov	r0, sl
 8001226:	b00c      	add	sp, #48	; 0x30
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800122c <.text_51>:
 800122c:	8be0      	ldrh	r0, [r4, #30]
 800122e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001232:	4770      	bx	lr

08001234 <.text_52>:
 8001234:	7720      	strb	r0, [r4, #28]
 8001236:	f8a4 801e 	strh.w	r8, [r4, #30]
 800123a:	f04f 0a1b 	mov.w	sl, #27
 800123e:	4770      	bx	lr

08001240 <.text_53>:
 8001240:	2003      	movs	r0, #3
 8001242:	7460      	strb	r0, [r4, #17]
 8001244:	f04f 0a00 	mov.w	sl, #0
 8001248:	7831      	ldrb	r1, [r6, #0]
 800124a:	2914      	cmp	r1, #20
 800124c:	4770      	bx	lr

0800124e <.text_54>:
 800124e:	68a6      	ldr	r6, [r4, #8]
 8001250:	7c20      	ldrb	r0, [r4, #16]
 8001252:	6977      	ldr	r7, [r6, #20]
 8001254:	ab03      	add	r3, sp, #12
 8001256:	4770      	bx	lr

08001258 <.text_55>:
 8001258:	7028      	strb	r0, [r5, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	7069      	strb	r1, [r5, #1]
 800125e:	7c20      	ldrb	r0, [r4, #16]
 8001260:	e599      	b.n	8000d96 <PE_Get_UnchunkedSupport>

08001262 <.text_56>:
 8001262:	2100      	movs	r1, #0
 8001264:	4620      	mov	r0, r4
 8001266:	f000 ba4b 	b.w	8001700 <PE_Send_ExtendedMessage>

0800126a <.text_57>:
 800126a:	2014      	movs	r0, #20
 800126c:	7030      	strb	r0, [r6, #0]
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff bb9c 	b.w	80009ac <PE_Clear_RxEvent>

08001274 <.text_58>:
 8001274:	b918      	cbnz	r0, 800127e <.text_58+0xa>
 8001276:	7868      	ldrb	r0, [r5, #1]
 8001278:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800127c:	7068      	strb	r0, [r5, #1]
 800127e:	2000      	movs	r0, #0
 8001280:	9a03      	ldr	r2, [sp, #12]
 8001282:	9002      	str	r0, [sp, #8]
 8001284:	1d12      	adds	r2, r2, #4
 8001286:	b292      	uxth	r2, r2
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	2103      	movs	r1, #3
 800128c:	9101      	str	r1, [sp, #4]
 800128e:	464b      	mov	r3, r9
 8001290:	4770      	bx	lr

08001292 <.text_59>:
 8001292:	b918      	cbnz	r0, 800129c <.text_59+0xa>
 8001294:	7868      	ldrb	r0, [r5, #1]
 8001296:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800129a:	7068      	strb	r0, [r5, #1]
 800129c:	2000      	movs	r0, #0
 800129e:	9a03      	ldr	r2, [sp, #12]
 80012a0:	9002      	str	r0, [sp, #8]
 80012a2:	1d12      	adds	r2, r2, #4
 80012a4:	2103      	movs	r1, #3
 80012a6:	b292      	uxth	r2, r2
 80012a8:	9101      	str	r1, [sp, #4]
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	464b      	mov	r3, r9
 80012ae:	4770      	bx	lr

080012b0 <PE_SubStateMachine_ReceiveDRS>:
 80012b0:	b51c      	push	{r2, r3, r4, lr}
 80012b2:	4604      	mov	r4, r0
 80012b4:	68a1      	ldr	r1, [r4, #8]
 80012b6:	7c20      	ldrb	r0, [r4, #16]
 80012b8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80012ba:	4790      	blx	r2
 80012bc:	280a      	cmp	r0, #10
 80012be:	d002      	beq.n	80012c6 <PE_SubStateMachine_ReceiveDRS+0x16>
 80012c0:	280c      	cmp	r0, #12
 80012c2:	d00b      	beq.n	80012dc <PE_SubStateMachine_ReceiveDRS+0x2c>
 80012c4:	e00c      	b.n	80012e0 <PE_SubStateMachine_ReceiveDRS+0x30>
 80012c6:	2000      	movs	r0, #0
 80012c8:	9000      	str	r0, [sp, #0]
 80012ca:	2303      	movs	r3, #3
 80012cc:	2203      	movs	r2, #3
 80012ce:	f000 f813 	bl	80012f8 <.text_61>
 80012d2:	b980      	cbnz	r0, 80012f6 <PE_SubStateMachine_ReceiveDRS+0x46>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e8bd 4016 	ldmia.w	sp!, {r1, r2, r4, lr}
 80012da:	e079      	b.n	80013d0 <PE_SwitchDataRole>
 80012dc:	202a      	movs	r0, #42	; 0x2a
 80012de:	e006      	b.n	80012ee <PE_SubStateMachine_ReceiveDRS+0x3e>
 80012e0:	6860      	ldr	r0, [r4, #4]
 80012e2:	7801      	ldrb	r1, [r0, #0]
 80012e4:	f001 0103 	and.w	r1, r1, #3
 80012e8:	2902      	cmp	r1, #2
 80012ea:	d102      	bne.n	80012f2 <PE_SubStateMachine_ReceiveDRS+0x42>
 80012ec:	2001      	movs	r0, #1
 80012ee:	7460      	strb	r0, [r4, #17]
 80012f0:	bd13      	pop	{r0, r1, r4, pc}
 80012f2:	212a      	movs	r1, #42	; 0x2a
 80012f4:	7461      	strb	r1, [r4, #17]
 80012f6:	bd13      	pop	{r0, r1, r4, pc}

080012f8 <.text_61>:
 80012f8:	2100      	movs	r1, #0
 80012fa:	4620      	mov	r0, r4
 80012fc:	f000 b8b4 	b.w	8001468 <PE_Send_CtrlMessage>

08001300 <PE_UpdateTimer>:
 8001300:	b510      	push	{r4, lr}
 8001302:	4602      	mov	r2, r0
 8001304:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8001308:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800130c:	42a1      	cmp	r1, r4
 800130e:	bfb8      	it	lt
 8001310:	1a50      	sublt	r0, r2, r1
 8001312:	b280      	uxth	r0, r0
 8001314:	bd10      	pop	{r4, pc}

08001316 <PE_CallHardResetCallback>:
 8001316:	6883      	ldr	r3, [r0, #8]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf1c      	itt	ne
 800131e:	7c00      	ldrbne	r0, [r0, #16]

08001320 <__iar_annotation$$tailcall>:
 8001320:	4718      	bxne	r3
 8001322:	4770      	bx	lr

08001324 <PE_SetPowerNegotiation>:
 8001324:	6842      	ldr	r2, [r0, #4]
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f3c3 2202 	ubfx	r2, r3, #8, #3
 800132c:	4291      	cmp	r1, r2
 800132e:	d007      	beq.n	8001340 <PE_SetPowerNegotiation+0x1c>
 8001330:	6842      	ldr	r2, [r0, #4]
 8001332:	f361 230a 	bfi	r3, r1, #8, #3
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	215a      	movs	r1, #90	; 0x5a
 800133a:	7c00      	ldrb	r0, [r0, #16]
 800133c:	f7ff b90b 	b.w	8000556 <USBPD_PE_Notification>
 8001340:	4770      	bx	lr

08001342 <USBPD_PE_ExecFastRoleSwapSignalling>:
 8001342:	4921      	ldr	r1, [pc, #132]	; (80013c8 <.text_70>)
 8001344:	4602      	mov	r2, r0
 8001346:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]

0800134a <.text_66>:
 800134a:	694a      	ldr	r2, [r1, #20]
 800134c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001350:	614a      	str	r2, [r1, #20]
 8001352:	6889      	ldr	r1, [r1, #8]
 8001354:	6a8a      	ldr	r2, [r1, #40]	; 0x28

08001356 <__iar_annotation$$tailcall>:
 8001356:	4710      	bx	r2

08001358 <PE_CalculateMinTiming>:
 8001358:	4601      	mov	r1, r0
 800135a:	f04f 30ff 	mov.w	r0, #4294967295
 800135e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
 8001360:	0453      	lsls	r3, r2, #17
 8001362:	bf1c      	itt	ne
 8001364:	8c88      	ldrhne	r0, [r1, #36]	; 0x24
 8001366:	f3c0 000e 	ubfxne	r0, r0, #0, #15
 800136a:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 800136c:	0453      	lsls	r3, r2, #17
 800136e:	d007      	beq.n	8001380 <PE_CalculateMinTiming+0x28>
 8001370:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8001372:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001376:	4290      	cmp	r0, r2
 8001378:	bf24      	itt	cs
 800137a:	8c48      	ldrhcs	r0, [r1, #34]	; 0x22
 800137c:	f3c0 000e 	ubfxcs	r0, r0, #0, #15
 8001380:	4770      	bx	lr

08001382 <PE_SetPowerNegociation>:
 8001382:	b538      	push	{r3, r4, r5, lr}
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	6860      	ldr	r0, [r4, #4]
 800138a:	6802      	ldr	r2, [r0, #0]
 800138c:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8001390:	4285      	cmp	r5, r0
 8001392:	d003      	beq.n	800139c <PE_SetPowerNegociation+0x1a>
 8001394:	7c20      	ldrb	r0, [r4, #16]
 8001396:	215a      	movs	r1, #90	; 0x5a
 8001398:	f7ff f8dd 	bl	8000556 <USBPD_PE_Notification>
 800139c:	6860      	ldr	r0, [r4, #4]
 800139e:	6801      	ldr	r1, [r0, #0]
 80013a0:	f365 210a 	bfi	r1, r5, #8, #3
 80013a4:	6001      	str	r1, [r0, #0]
 80013a6:	bd31      	pop	{r0, r4, r5, pc}

080013a8 <PE_CheckDataSizeFromGetDataInfo>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	2200      	movs	r2, #0
 80013ac:	4288      	cmp	r0, r1
 80013ae:	d208      	bcs.n	80013c2 <PE_CheckDataSizeFromGetDataInfo+0x1a>
 80013b0:	2018      	movs	r0, #24
 80013b2:	4c06      	ldr	r4, [pc, #24]	; (80013cc <.text_71>)
 80013b4:	a316      	add	r3, pc, #88	; (adr r3, 8001410 <.text_73>)
 80013b6:	6825      	ldr	r5, [r4, #0]
 80013b8:	9000      	str	r0, [sp, #0]
 80013ba:	2100      	movs	r1, #0
 80013bc:	2006      	movs	r0, #6
 80013be:	47a8      	blx	r5
 80013c0:	2202      	movs	r2, #2
 80013c2:	4610      	mov	r0, r2
 80013c4:	bd32      	pop	{r1, r4, r5, pc}
	...

080013c8 <.text_70>:
 80013c8:	20000444 	.word	0x20000444

080013cc <.text_71>:
 80013cc:	20000000 	.word	0x20000000

080013d0 <PE_SwitchDataRole>:
 80013d0:	b510      	push	{r4, lr}
 80013d2:	4604      	mov	r4, r0
 80013d4:	6860      	ldr	r0, [r4, #4]
 80013d6:	6801      	ldr	r1, [r0, #0]
 80013d8:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80013dc:	2800      	cmp	r0, #0
 80013de:	6860      	ldr	r0, [r4, #4]
 80013e0:	d109      	bne.n	80013f6 <PE_SwitchDataRole+0x26>
 80013e2:	f041 0108 	orr.w	r1, r1, #8
 80013e6:	6001      	str	r1, [r0, #0]
 80013e8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80013ec:	7c20      	ldrb	r0, [r4, #16]
 80013ee:	f003 fdf5 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 80013f2:	2125      	movs	r1, #37	; 0x25
 80013f4:	e007      	b.n	8001406 <PE_SwitchDataRole+0x36>
 80013f6:	f021 0108 	bic.w	r1, r1, #8
 80013fa:	6001      	str	r1, [r0, #0]
 80013fc:	2100      	movs	r1, #0
 80013fe:	7c20      	ldrb	r0, [r4, #16]
 8001400:	f003 fdec 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 8001404:	2124      	movs	r1, #36	; 0x24
 8001406:	7c20      	ldrb	r0, [r4, #16]
 8001408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140c:	f7ff b8a3 	b.w	8000556 <USBPD_PE_Notification>

08001410 <.text_73>:
 8001410:	61746144 	.word	0x61746144
 8001414:	7a695320 	.word	0x7a695320
 8001418:	73692065 	.word	0x73692065
 800141c:	746f6e20 	.word	0x746f6e20
 8001420:	726f6320 	.word	0x726f6320
 8001424:	74636572 	.word	0x74636572
 8001428:	00          	.byte	0x00
 8001429:	00          	.byte	0x00
	...

0800142c <USBPD_PE_SetTrace>:
 800142c:	0001      	movs	r1, r0
 800142e:	4906      	ldr	r1, [pc, #24]	; (8001448 <.text_5>)
 8001430:	bf08      	it	eq
 8001432:	f20f 0031 	addweq	r0, pc, #49	; 0x31
 8001436:	6008      	str	r0, [r1, #0]
 8001438:	4770      	bx	lr

0800143a <USBPD_PE_CheckLIB>:
 800143a:	4601      	mov	r1, r0
 800143c:	2000      	movs	r0, #0
 800143e:	4a03      	ldr	r2, [pc, #12]	; (800144c <.text_6>)
 8001440:	4291      	cmp	r1, r2
 8001442:	bf08      	it	eq
 8001444:	2001      	moveq	r0, #1
 8001446:	4770      	bx	lr

08001448 <.text_5>:
 8001448:	20000000 	.word	0x20000000

0800144c <.text_6>:
 800144c:	30410000 	.word	0x30410000

08001450 <USBPD_PE_GetMemoryConsumption>:
 8001450:	b510      	push	{r4, lr}
 8001452:	f003 fda3 	bl	8004f9c <USBPD_PRL_GetMemoryConsumption>
 8001456:	4604      	mov	r4, r0
 8001458:	f7fe ffad 	bl	80003b6 <USBPD_CAD_GetMemoryConsumption>
 800145c:	1904      	adds	r4, r0, r4
 800145e:	f504 6061 	add.w	r0, r4, #3600	; 0xe10
 8001462:	bd10      	pop	{r4, pc}

08001464 <PE_Trace_Empty>:
 8001464:	4770      	bx	lr
	...

08001468 <PE_Send_CtrlMessage>:
 8001468:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800146c:	9c08      	ldr	r4, [sp, #32]
 800146e:	4606      	mov	r6, r0
 8001470:	4688      	mov	r8, r1
 8001472:	4617      	mov	r7, r2
 8001474:	461d      	mov	r5, r3
 8001476:	f000 f81f 	bl	80014b8 <.text_3>
 800147a:	b190      	cbz	r0, 80014a2 <PE_Send_CtrlMessage+0x3a>
 800147c:	9401      	str	r4, [sp, #4]
 800147e:	2002      	movs	r0, #2
 8001480:	9000      	str	r0, [sp, #0]
 8001482:	f206 2363 	addw	r3, r6, #611	; 0x263
 8001486:	7c30      	ldrb	r0, [r6, #16]
 8001488:	463a      	mov	r2, r7
 800148a:	4641      	mov	r1, r8
 800148c:	f003 fde2 	bl	8005054 <USBPD_PRL_SendMessage>
 8001490:	2803      	cmp	r0, #3
 8001492:	d0f0      	beq.n	8001476 <PE_Send_CtrlMessage+0xe>
 8001494:	2810      	cmp	r0, #16
 8001496:	d00d      	beq.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 8001498:	2f0d      	cmp	r7, #13
 800149a:	bf0c      	ite	eq
 800149c:	2201      	moveq	r2, #1
 800149e:	2200      	movne	r2, #0
 80014a0:	e002      	b.n	80014a8 <PE_Send_CtrlMessage+0x40>
 80014a2:	7470      	strb	r0, [r6, #17]
 80014a4:	2010      	movs	r0, #16
 80014a6:	e005      	b.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 80014a8:	4603      	mov	r3, r0
 80014aa:	9500      	str	r5, [sp, #0]
 80014ac:	4641      	mov	r1, r8
 80014ae:	4630      	mov	r0, r6
 80014b0:	f000 fbe8 	bl	8001c84 <PE_CheckSendMessageStatus>
 80014b4:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080014b8 <.text_3>:
 80014b8:	6870      	ldr	r0, [r6, #4]
 80014ba:	6801      	ldr	r1, [r0, #0]
 80014bc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80014c0:	4770      	bx	lr

080014c2 <PE_Send_DataMessage>:
 80014c2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80014c4:	4604      	mov	r4, r0
 80014c6:	9f08      	ldr	r7, [sp, #32]
 80014c8:	460d      	mov	r5, r1
 80014ca:	4616      	mov	r6, r2
 80014cc:	2000      	movs	r0, #0
 80014ce:	e010      	b.n	80014f2 <PE_Send_DataMessage+0x30>
 80014d0:	2100      	movs	r1, #0
 80014d2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80014d6:	f8d3 c000 	ldr.w	ip, [r3]
 80014da:	440a      	add	r2, r1
 80014dc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80014e0:	1c49      	adds	r1, r1, #1
 80014e2:	fa2c fc0e 	lsr.w	ip, ip, lr
 80014e6:	2904      	cmp	r1, #4
 80014e8:	f882 c265 	strb.w	ip, [r2, #613]	; 0x265
 80014ec:	d3f1      	bcc.n	80014d2 <PE_Send_DataMessage+0x10>
 80014ee:	1d1b      	adds	r3, r3, #4
 80014f0:	1c40      	adds	r0, r0, #1
 80014f2:	42b8      	cmp	r0, r7
 80014f4:	d3ec      	bcc.n	80014d0 <PE_Send_DataMessage+0xe>
 80014f6:	6860      	ldr	r0, [r4, #4]
 80014f8:	f7ff ffdf 	bl	80014ba <.text_3+0x2>
 80014fc:	b1d8      	cbz	r0, 8001536 <PE_Send_DataMessage+0x74>
 80014fe:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8001502:	9001      	str	r0, [sp, #4]
 8001504:	f204 2363 	addw	r3, r4, #611	; 0x263
 8001508:	00b8      	lsls	r0, r7, #2
 800150a:	1c80      	adds	r0, r0, #2
 800150c:	b280      	uxth	r0, r0
 800150e:	9000      	str	r0, [sp, #0]
 8001510:	4632      	mov	r2, r6
 8001512:	7c20      	ldrb	r0, [r4, #16]
 8001514:	4629      	mov	r1, r5
 8001516:	f003 fd9d 	bl	8005054 <USBPD_PRL_SendMessage>
 800151a:	2803      	cmp	r0, #3
 800151c:	d0eb      	beq.n	80014f6 <PE_Send_DataMessage+0x34>
 800151e:	2810      	cmp	r0, #16
 8001520:	d008      	beq.n	8001534 <PE_Send_DataMessage+0x72>
 8001522:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8001526:	9100      	str	r1, [sp, #0]
 8001528:	4603      	mov	r3, r0
 800152a:	2200      	movs	r2, #0
 800152c:	4629      	mov	r1, r5
 800152e:	4620      	mov	r0, r4
 8001530:	f000 fba8 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001534:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001536:	2010      	movs	r0, #16
 8001538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0800153c <PE_Check_ExtendedMessage>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	f204 265a 	addw	r6, r4, #602	; 0x25a
 8001544:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001546:	7881      	ldrb	r1, [r0, #2]
 8001548:	78c0      	ldrb	r0, [r0, #3]
 800154a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800154e:	8031      	strh	r1, [r6, #0]
 8001550:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001554:	f000 001f 	and.w	r0, r0, #31
 8001558:	70b0      	strb	r0, [r6, #2]
 800155a:	f3c1 20c3 	ubfx	r0, r1, #11, #4
 800155e:	2800      	cmp	r0, #0
 8001560:	bf1e      	ittt	ne
 8001562:	f3c1 2080 	ubfxne	r0, r1, #10, #1
 8001566:	2800      	cmpne	r0, #0
 8001568:	2034      	movne	r0, #52	; 0x34
 800156a:	d126      	bne.n	80015ba <PE_Check_ExtendedMessage+0x7e>
 800156c:	0408      	lsls	r0, r1, #16
 800156e:	0fc0      	lsrs	r0, r0, #31
 8001570:	f204 2281 	addw	r2, r4, #641	; 0x281
 8001574:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8001578:	d10b      	bne.n	8001592 <PE_Check_ExtendedMessage+0x56>
 800157a:	f8a4 348e 	strh.w	r3, [r4, #1166]	; 0x48e
 800157e:	f8b4 148e 	ldrh.w	r1, [r4, #1166]	; 0x48e
 8001582:	4288      	cmp	r0, r1
 8001584:	d21a      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 8001586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001588:	1d19      	adds	r1, r3, #4
 800158a:	5c0d      	ldrb	r5, [r1, r0]
 800158c:	5415      	strb	r5, [r2, r0]
 800158e:	1c40      	adds	r0, r0, #1
 8001590:	e7f5      	b.n	800157e <PE_Check_ExtendedMessage+0x42>
 8001592:	f411 4ff8 	tst.w	r1, #31744	; 0x7c00
 8001596:	d106      	bne.n	80015a6 <PE_Check_ExtendedMessage+0x6a>
 8001598:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800159a:	f3c0 3002 	ubfx	r0, r0, #12, #3
 800159e:	2807      	cmp	r0, #7
 80015a0:	d30c      	bcc.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a2:	2b1a      	cmp	r3, #26
 80015a4:	d90a      	bls.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a6:	f3c1 2080 	ubfx	r0, r1, #10, #1
 80015aa:	b938      	cbnz	r0, 80015bc <PE_Check_ExtendedMessage+0x80>
 80015ac:	f8b4 048e 	ldrh.w	r0, [r4, #1166]	; 0x48e
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d203      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015b4:	2100      	movs	r1, #0
 80015b6:	83e1      	strh	r1, [r4, #30]
 80015b8:	2037      	movs	r0, #55	; 0x37
 80015ba:	e089      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 80015bc:	7f20      	ldrb	r0, [r4, #28]
 80015be:	78b1      	ldrb	r1, [r6, #2]
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d034      	beq.n	800162e <PE_Check_ExtendedMessage+0xf2>
 80015c4:	2901      	cmp	r1, #1
 80015c6:	d008      	beq.n	80015da <PE_Check_ExtendedMessage+0x9e>
 80015c8:	2902      	cmp	r1, #2
 80015ca:	d018      	beq.n	80015fe <PE_Check_ExtendedMessage+0xc2>
 80015cc:	2905      	cmp	r1, #5
 80015ce:	d028      	beq.n	8001622 <PE_Check_ExtendedMessage+0xe6>
 80015d0:	2907      	cmp	r1, #7
 80015d2:	d021      	beq.n	8001618 <PE_Check_ExtendedMessage+0xdc>
 80015d4:	290f      	cmp	r1, #15
 80015d6:	d009      	beq.n	80015ec <PE_Check_ExtendedMessage+0xb0>
 80015d8:	e07c      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80015da:	f000 f884 	bl	80016e6 <.text_7>
 80015de:	2319      	movs	r3, #25
 80015e0:	2108      	movs	r1, #8
 80015e2:	47b8      	blx	r7
 80015e4:	2003      	movs	r0, #3
 80015e6:	7460      	strb	r0, [r4, #17]
 80015e8:	2147      	movs	r1, #71	; 0x47
 80015ea:	e010      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015ec:	f000 f87b 	bl	80016e6 <.text_7>
 80015f0:	2318      	movs	r3, #24
 80015f2:	2113      	movs	r1, #19
 80015f4:	47b8      	blx	r7
 80015f6:	2003      	movs	r0, #3
 80015f8:	7460      	strb	r0, [r4, #17]
 80015fa:	2162      	movs	r1, #98	; 0x62
 80015fc:	e007      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015fe:	f000 f872 	bl	80016e6 <.text_7>
 8001602:	2307      	movs	r3, #7
 8001604:	2109      	movs	r1, #9
 8001606:	47b8      	blx	r7
 8001608:	2003      	movs	r0, #3
 800160a:	7460      	strb	r0, [r4, #17]
 800160c:	214e      	movs	r1, #78	; 0x4e
 800160e:	7c20      	ldrb	r0, [r4, #16]
 8001610:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}
 8001614:	f7fe bf9f 	b.w	8000556 <USBPD_PE_Notification>
 8001618:	f000 f865 	bl	80016e6 <.text_7>
 800161c:	231a      	movs	r3, #26
 800161e:	210d      	movs	r1, #13
 8001620:	e003      	b.n	800162a <PE_Check_ExtendedMessage+0xee>
 8001622:	f000 f860 	bl	80016e6 <.text_7>
 8001626:	2309      	movs	r3, #9
 8001628:	2111      	movs	r1, #17
 800162a:	47b8      	blx	r7
 800162c:	e04f      	b.n	80016ce <PE_Check_ExtendedMessage+0x192>
 800162e:	1ecb      	subs	r3, r1, #3
 8001630:	2b08      	cmp	r3, #8
 8001632:	d84f      	bhi.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001634:	e8df f003 	tbb	[pc, r3]
 8001638:	174e0e05 	.word	0x174e0e05
 800163c:	243a314e 	.word	0x243a314e
 8001640:	0029      	.short	0x0029
 8001642:	f000 f84a 	bl	80016da <.text_6>
 8001646:	d045      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001648:	f000 f853 	bl	80016f2 <.text_8>
 800164c:	2110      	movs	r1, #16
 800164e:	47b8      	blx	r7
 8001650:	203a      	movs	r0, #58	; 0x3a
 8001652:	e03d      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001654:	f000 f841 	bl	80016da <.text_6>
 8001658:	d03c      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 800165a:	f000 f84a 	bl	80016f2 <.text_8>
 800165e:	210e      	movs	r1, #14
 8001660:	47b8      	blx	r7
 8001662:	203b      	movs	r0, #59	; 0x3b
 8001664:	e034      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	8901      	ldrh	r1, [r0, #8]
 800166a:	f3c1 1080 	ubfx	r0, r1, #6, #1
 800166e:	2800      	cmp	r0, #0
 8001670:	d030      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001672:	f000 f838 	bl	80016e6 <.text_7>
 8001676:	2302      	movs	r3, #2
 8001678:	210c      	movs	r1, #12
 800167a:	47b8      	blx	r7
 800167c:	203c      	movs	r0, #60	; 0x3c
 800167e:	e027      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001680:	6820      	ldr	r0, [r4, #0]
 8001682:	8901      	ldrh	r1, [r0, #8]
 8001684:	f3c1 2080 	ubfx	r0, r1, #10, #1
 8001688:	e00b      	b.n	80016a2 <PE_Check_ExtendedMessage+0x166>
 800168a:	68a0      	ldr	r0, [r4, #8]
 800168c:	6905      	ldr	r5, [r0, #16]
 800168e:	b31d      	cbz	r5, 80016d8 <PE_Check_ExtendedMessage+0x19c>
 8001690:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	; 0x48e
 8001694:	7c20      	ldrb	r0, [r4, #16]
 8001696:	47a8      	blx	r5
 8001698:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800169a:	6820      	ldr	r0, [r4, #0]
 800169c:	8901      	ldrh	r1, [r0, #8]
 800169e:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016a2:	b1b8      	cbz	r0, 80016d4 <PE_Check_ExtendedMessage+0x198>
 80016a4:	68a1      	ldr	r1, [r4, #8]
 80016a6:	6908      	ldr	r0, [r1, #16]
 80016a8:	b950      	cbnz	r0, 80016c0 <PE_Check_ExtendedMessage+0x184>
 80016aa:	e013      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80016ac:	6820      	ldr	r0, [r4, #0]
 80016ae:	8901      	ldrh	r1, [r0, #8]
 80016b0:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016b4:	2800      	cmp	r0, #0
 80016b6:	bf1e      	ittt	ne
 80016b8:	68a1      	ldrne	r1, [r4, #8]
 80016ba:	6908      	ldrne	r0, [r1, #16]
 80016bc:	2800      	cmpne	r0, #0
 80016be:	d00b      	beq.n	80016d8 <PE_Check_ExtendedMessage+0x19c>
 80016c0:	68a5      	ldr	r5, [r4, #8]
 80016c2:	78b1      	ldrb	r1, [r6, #2]
 80016c4:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	; 0x48e
 80016c8:	7c20      	ldrb	r0, [r4, #16]
 80016ca:	692e      	ldr	r6, [r5, #16]
 80016cc:	47b0      	blx	r6
 80016ce:	2003      	movs	r0, #3
 80016d0:	7460      	strb	r0, [r4, #17]
 80016d2:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80016d4:	2101      	movs	r1, #1
 80016d6:	7461      	strb	r1, [r4, #17]
 80016d8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080016da <.text_6>:
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	8901      	ldrh	r1, [r0, #8]
 80016de:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80016e2:	2800      	cmp	r0, #0
 80016e4:	4770      	bx	lr

080016e6 <.text_7>:
 80016e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016e8:	68a5      	ldr	r5, [r4, #8]
 80016ea:	69af      	ldr	r7, [r5, #24]
 80016ec:	1d02      	adds	r2, r0, #4
 80016ee:	7c20      	ldrb	r0, [r4, #16]
 80016f0:	4770      	bx	lr

080016f2 <.text_8>:
 80016f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016f4:	68a5      	ldr	r5, [r4, #8]
 80016f6:	69af      	ldr	r7, [r5, #24]
 80016f8:	1d02      	adds	r2, r0, #4
 80016fa:	7c20      	ldrb	r0, [r4, #16]
 80016fc:	2301      	movs	r3, #1
 80016fe:	4770      	bx	lr

08001700 <PE_Send_ExtendedMessage>:
 8001700:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8001704:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001708:	4606      	mov	r6, r0
 800170a:	460f      	mov	r7, r1
 800170c:	4690      	mov	r8, r2
 800170e:	4699      	mov	r9, r3
 8001710:	f7ff fed2 	bl	80014b8 <.text_3>
 8001714:	b1b8      	cbz	r0, 8001746 <PE_Send_ExtendedMessage+0x46>
 8001716:	9501      	str	r5, [sp, #4]
 8001718:	9400      	str	r4, [sp, #0]
 800171a:	464b      	mov	r3, r9
 800171c:	7c30      	ldrb	r0, [r6, #16]
 800171e:	f048 0280 	orr.w	r2, r8, #128	; 0x80
 8001722:	4639      	mov	r1, r7
 8001724:	f003 fc96 	bl	8005054 <USBPD_PRL_SendMessage>
 8001728:	2803      	cmp	r0, #3
 800172a:	d0f1      	beq.n	8001710 <PE_Send_ExtendedMessage+0x10>
 800172c:	2810      	cmp	r0, #16
 800172e:	d008      	beq.n	8001742 <PE_Send_ExtendedMessage+0x42>
 8001730:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8001734:	9100      	str	r1, [sp, #0]
 8001736:	4603      	mov	r3, r0
 8001738:	2200      	movs	r2, #0
 800173a:	4639      	mov	r1, r7
 800173c:	4630      	mov	r0, r6
 800173e:	f000 faa1 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001742:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8001746:	2011      	movs	r0, #17
 8001748:	7470      	strb	r0, [r6, #17]
 800174a:	2010      	movs	r0, #16
 800174c:	e7f9      	b.n	8001742 <PE_Send_ExtendedMessage+0x42>

0800174e <PE_SubStateMachine_ExtendedMessages>:
 800174e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	4604      	mov	r4, r0
 8001756:	f04f 0802 	mov.w	r8, #2
 800175a:	7c61      	ldrb	r1, [r4, #17]
 800175c:	2931      	cmp	r1, #49	; 0x31
 800175e:	f204 2a67 	addw	sl, r4, #615	; 0x267
 8001762:	f204 3b85 	addw	fp, r4, #901	; 0x385
 8001766:	f204 265a 	addw	r6, r4, #602	; 0x25a
 800176a:	f104 0930 	add.w	r9, r4, #48	; 0x30
 800176e:	f204 2563 	addw	r5, r4, #611	; 0x263
 8001772:	f204 478e 	addw	r7, r4, #1166	; 0x48e
 8001776:	f248 001b 	movw	r0, #32795	; 0x801b
 800177a:	d015      	beq.n	80017a8 <PE_SubStateMachine_ExtendedMessages+0x5a>
 800177c:	2933      	cmp	r1, #51	; 0x33
 800177e:	d058      	beq.n	8001832 <PE_SubStateMachine_ExtendedMessages+0xe4>
 8001780:	2934      	cmp	r1, #52	; 0x34
 8001782:	d05f      	beq.n	8001844 <PE_SubStateMachine_ExtendedMessages+0xf6>
 8001784:	2935      	cmp	r1, #53	; 0x35
 8001786:	f000 808a 	beq.w	800189e <PE_SubStateMachine_ExtendedMessages+0x150>
 800178a:	2936      	cmp	r1, #54	; 0x36
 800178c:	f000 809d 	beq.w	80018ca <PE_SubStateMachine_ExtendedMessages+0x17c>
 8001790:	2937      	cmp	r1, #55	; 0x37
 8001792:	f000 809f 	beq.w	80018d4 <PE_SubStateMachine_ExtendedMessages+0x186>
 8001796:	2938      	cmp	r1, #56	; 0x38
 8001798:	bf01      	itttt	eq
 800179a:	2003      	moveq	r0, #3
 800179c:	7460      	strbeq	r0, [r4, #17]
 800179e:	f04f 0800 	moveq.w	r8, #0
 80017a2:	f8a7 8000 	strheq.w	r8, [r7]
 80017a6:	e0c3      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80017a8:	9503      	str	r5, [sp, #12]
 80017aa:	2500      	movs	r5, #0
 80017ac:	803d      	strh	r5, [r7, #0]
 80017ae:	7c20      	ldrb	r0, [r4, #16]
 80017b0:	f7ff faf1 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017b4:	2801      	cmp	r0, #1
 80017b6:	d106      	bne.n	80017c6 <PE_SubStateMachine_ExtendedMessages+0x78>
 80017b8:	f204 3087 	addw	r0, r4, #903	; 0x387
 80017bc:	7005      	strb	r5, [r0, #0]
 80017be:	7045      	strb	r5, [r0, #1]
 80017c0:	f8cd b00c 	str.w	fp, [sp, #12]
 80017c4:	e017      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017c6:	72f5      	strb	r5, [r6, #11]
 80017c8:	7335      	strb	r5, [r6, #12]
 80017ca:	7c20      	ldrb	r0, [r4, #16]
 80017cc:	f7ff fae3 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017d0:	b918      	cbnz	r0, 80017da <PE_SubStateMachine_ExtendedMessages+0x8c>
 80017d2:	7b30      	ldrb	r0, [r6, #12]
 80017d4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80017d8:	7330      	strb	r0, [r6, #12]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	281b      	cmp	r0, #27
 80017de:	4628      	mov	r0, r5
 80017e0:	d306      	bcc.n	80017f0 <PE_SubStateMachine_ExtendedMessages+0xa2>
 80017e2:	f000 f8a9 	bl	8001938 <.text_11>
 80017e6:	281a      	cmp	r0, #26
 80017e8:	d3fb      	bcc.n	80017e2 <PE_SubStateMachine_ExtendedMessages+0x94>
 80017ea:	e004      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017ec:	f000 f8a4 	bl	8001938 <.text_11>
 80017f0:	8879      	ldrh	r1, [r7, #2]
 80017f2:	4288      	cmp	r0, r1
 80017f4:	d3fa      	bcc.n	80017ec <PE_SubStateMachine_ExtendedMessages+0x9e>
 80017f6:	6960      	ldr	r0, [r4, #20]
 80017f8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80017fc:	b130      	cbz	r0, 800180c <PE_SubStateMachine_ExtendedMessages+0xbe>
 80017fe:	f000 f98f 	bl	8001b20 <.text_16>
 8001802:	bf14      	ite	ne
 8001804:	2501      	movne	r5, #1
 8001806:	2502      	moveq	r5, #2
 8001808:	2033      	movs	r0, #51	; 0x33
 800180a:	e000      	b.n	800180e <PE_SubStateMachine_ExtendedMessages+0xc0>
 800180c:	2003      	movs	r0, #3
 800180e:	9502      	str	r5, [sp, #8]
 8001810:	9001      	str	r0, [sp, #4]
 8001812:	8878      	ldrh	r0, [r7, #2]
 8001814:	9b03      	ldr	r3, [sp, #12]
 8001816:	1d00      	adds	r0, r0, #4
 8001818:	b280      	uxth	r0, r0
 800181a:	9000      	str	r0, [sp, #0]
 800181c:	78f2      	ldrb	r2, [r6, #3]
 800181e:	f899 1003 	ldrb.w	r1, [r9, #3]
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff ff6c 	bl	8001700 <PE_Send_ExtendedMessage>
 8001828:	2800      	cmp	r0, #0
 800182a:	d101      	bne.n	8001830 <PE_SubStateMachine_ExtendedMessages+0xe2>
 800182c:	7970      	ldrb	r0, [r6, #5]
 800182e:	7720      	strb	r0, [r4, #28]
 8001830:	e07e      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001832:	83e0      	strh	r0, [r4, #30]
 8001834:	f04f 081b 	mov.w	r8, #27
 8001838:	78f0      	ldrb	r0, [r6, #3]
 800183a:	2804      	cmp	r0, #4
 800183c:	d148      	bne.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0x182>
 800183e:	2174      	movs	r1, #116	; 0x74
 8001840:	7461      	strb	r1, [r4, #17]
 8001842:	e075      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001844:	8831      	ldrh	r1, [r6, #0]
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	f3c1 21c3 	ubfx	r1, r1, #11, #4
 800184c:	201a      	movs	r0, #26
 800184e:	4341      	muls	r1, r0
 8001850:	4291      	cmp	r1, r2
 8001852:	da04      	bge.n	800185e <PE_SubStateMachine_ExtendedMessages+0x110>
 8001854:	8830      	ldrh	r0, [r6, #0]
 8001856:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800185a:	280a      	cmp	r0, #10
 800185c:	d301      	bcc.n	8001862 <PE_SubStateMachine_ExtendedMessages+0x114>
 800185e:	2003      	movs	r0, #3
 8001860:	e019      	b.n	8001896 <PE_SubStateMachine_ExtendedMessages+0x148>
 8001862:	1a50      	subs	r0, r2, r1
 8001864:	281a      	cmp	r0, #26
 8001866:	bf3a      	itte	cc
 8001868:	1a52      	subcc	r2, r2, r1
 800186a:	b2d2      	uxtbcc	r2, r2
 800186c:	221a      	movcs	r2, #26
 800186e:	2000      	movs	r0, #0
 8001870:	e005      	b.n	800187e <PE_SubStateMachine_ExtendedMessages+0x130>
 8001872:	1843      	adds	r3, r0, r1
 8001874:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8001878:	f80a 3000 	strb.w	r3, [sl, r0]
 800187c:	1c40      	adds	r0, r0, #1
 800187e:	4290      	cmp	r0, r2
 8001880:	d3f7      	bcc.n	8001872 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001882:	8831      	ldrh	r1, [r6, #0]
 8001884:	887a      	ldrh	r2, [r7, #2]
 8001886:	7c20      	ldrb	r0, [r4, #16]
 8001888:	0ac9      	lsrs	r1, r1, #11
 800188a:	462b      	mov	r3, r5
 800188c:	f001 010f 	and.w	r1, r1, #15
 8001890:	f004 f86d 	bl	800596e <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001894:	2035      	movs	r0, #53	; 0x35
 8001896:	7460      	strb	r0, [r4, #17]
 8001898:	f04f 0800 	mov.w	r8, #0
 800189c:	e048      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 800189e:	6960      	ldr	r0, [r4, #20]
 80018a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80018a4:	2800      	cmp	r0, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2036      	movne	r0, #54	; 0x36
 80018aa:	2003      	moveq	r0, #3
 80018ac:	2100      	movs	r1, #0
 80018ae:	9001      	str	r0, [sp, #4]
 80018b0:	9102      	str	r1, [sp, #8]
 80018b2:	462b      	mov	r3, r5
 80018b4:	8878      	ldrh	r0, [r7, #2]
 80018b6:	9000      	str	r0, [sp, #0]
 80018b8:	78f2      	ldrb	r2, [r6, #3]
 80018ba:	f899 1000 	ldrb.w	r1, [r9]
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff ff1e 	bl	8001700 <PE_Send_ExtendedMessage>
 80018c4:	2000      	movs	r0, #0
 80018c6:	8038      	strh	r0, [r7, #0]
 80018c8:	e032      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018ca:	83e0      	strh	r0, [r4, #30]
 80018cc:	f04f 081b 	mov.w	r8, #27
 80018d0:	2039      	movs	r0, #57	; 0x39
 80018d2:	e004      	b.n	80018de <PE_SubStateMachine_ExtendedMessages+0x190>
 80018d4:	8be1      	ldrh	r1, [r4, #30]
 80018d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018da:	d102      	bne.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0x194>
 80018dc:	200f      	movs	r0, #15
 80018de:	7460      	strb	r0, [r4, #17]
 80018e0:	e026      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018e2:	83e0      	strh	r0, [r4, #30]
 80018e4:	4629      	mov	r1, r5
 80018e6:	7c20      	ldrb	r0, [r4, #16]
 80018e8:	f004 f86a 	bl	80059c0 <USBPD_PRL_PrepareChunkRequest>
 80018ec:	f04f 081b 	mov.w	r8, #27
 80018f0:	6860      	ldr	r0, [r4, #4]
 80018f2:	f7ff fde2 	bl	80014ba <.text_3+0x2>
 80018f6:	b180      	cbz	r0, 800191a <PE_SubStateMachine_ExtendedMessages+0x1cc>
 80018f8:	2000      	movs	r0, #0
 80018fa:	2106      	movs	r1, #6
 80018fc:	9001      	str	r0, [sp, #4]
 80018fe:	9100      	str	r1, [sp, #0]
 8001900:	462b      	mov	r3, r5
 8001902:	78b2      	ldrb	r2, [r6, #2]
 8001904:	f899 1000 	ldrb.w	r1, [r9]
 8001908:	7c20      	ldrb	r0, [r4, #16]
 800190a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800190e:	f003 fba1 	bl	8005054 <USBPD_PRL_SendMessage>
 8001912:	2803      	cmp	r0, #3
 8001914:	4603      	mov	r3, r0
 8001916:	d0eb      	beq.n	80018f0 <PE_SubStateMachine_ExtendedMessages+0x1a2>
 8001918:	e002      	b.n	8001920 <PE_SubStateMachine_ExtendedMessages+0x1d2>
 800191a:	2011      	movs	r0, #17
 800191c:	7460      	strb	r0, [r4, #17]
 800191e:	2310      	movs	r3, #16
 8001920:	2039      	movs	r0, #57	; 0x39
 8001922:	9000      	str	r0, [sp, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	f899 1000 	ldrb.w	r1, [r9]
 800192a:	4620      	mov	r0, r4
 800192c:	f000 f9aa 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001930:	4640      	mov	r0, r8
 8001932:	b005      	add	sp, #20
 8001934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001938 <.text_11>:
 8001938:	f81b 1000 	ldrb.w	r1, [fp, r0]
 800193c:	f80a 1000 	strb.w	r1, [sl, r0]
 8001940:	1c40      	adds	r0, r0, #1
 8001942:	4770      	bx	lr

08001944 <PE_ManageRXEvent>:
 8001944:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001948:	780a      	ldrb	r2, [r1, #0]
 800194a:	704a      	strb	r2, [r1, #1]
 800194c:	888a      	ldrh	r2, [r1, #4]
 800194e:	0bd1      	lsrs	r1, r2, #15
 8001950:	bf18      	it	ne
 8001952:	f7ff bdf3 	bne.w	800153c <PE_Check_ExtendedMessage>
 8001956:	f412 4f70 	tst.w	r2, #61440	; 0xf000
 800195a:	bf08      	it	eq
 800195c:	f000 b802 	beq.w	8001964 <PE_Check_ControlMessage>
 8001960:	e0e4      	b.n	8001b2c <PE_Check_DataMessage>
	...

08001964 <PE_Check_ControlMessage>:
 8001964:	b510      	push	{r4, lr}
 8001966:	f000 f987 	bl	8001c78 <.text_18>
 800196a:	1e40      	subs	r0, r0, #1
 800196c:	2817      	cmp	r0, #23
 800196e:	d85b      	bhi.n	8001a28 <PE_Check_ControlMessage+0xc4>
 8001970:	e8df f000 	tbb	[pc, r0]
 8001974:	bfbf0ccc 	.word	0xbfbf0ccc
 8001978:	5520bf1e 	.word	0x5520bf1e
 800197c:	bf3b3143 	.word	0xbf3b3143
 8001980:	b9c1c117 	.word	0xb9c1c117
 8001984:	96b18a67 	.word	0x96b18a67
 8001988:	b5c17caa 	.word	0xb5c17caa
 800198c:	f000 f8c8 	bl	8001b20 <.text_16>
 8001990:	f040 80bc 	bne.w	8001b0c <PE_Check_ControlMessage+0x1a8>
 8001994:	2002      	movs	r0, #2
 8001996:	7720      	strb	r0, [r4, #28]
 8001998:	212b      	movs	r1, #43	; 0x2b
 800199a:	f000 f8be 	bl	8001b1a <.text_15>
 800199e:	2198      	movs	r1, #152	; 0x98
 80019a0:	e0b3      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 80019a2:	2003      	movs	r0, #3
 80019a4:	7720      	strb	r0, [r4, #28]
 80019a6:	2132      	movs	r1, #50	; 0x32
 80019a8:	f000 f8b7 	bl	8001b1a <.text_15>
 80019ac:	2010      	movs	r0, #16
 80019ae:	e0a9      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019b0:	2133      	movs	r1, #51	; 0x33
 80019b2:	e099      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 80019b4:	2006      	movs	r0, #6
 80019b6:	7720      	strb	r0, [r4, #28]
 80019b8:	f000 f8b2 	bl	8001b20 <.text_16>
 80019bc:	bf01      	itttt	eq
 80019be:	6820      	ldreq	r0, [r4, #0]
 80019c0:	6841      	ldreq	r1, [r0, #4]
 80019c2:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 80019c6:	2800      	cmpeq	r0, #0
 80019c8:	d024      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019ca:	7c20      	ldrb	r0, [r4, #16]
 80019cc:	210c      	movs	r1, #12
 80019ce:	f7fe fdc2 	bl	8000556 <USBPD_PE_Notification>
 80019d2:	204c      	movs	r0, #76	; 0x4c
 80019d4:	e096      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019d6:	f000 f89a 	bl	8001b0e <.text_14>
 80019da:	d01b      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019dc:	2008      	movs	r0, #8
 80019de:	7720      	strb	r0, [r4, #28]
 80019e0:	213c      	movs	r1, #60	; 0x3c
 80019e2:	f000 f89a 	bl	8001b1a <.text_15>
 80019e6:	2022      	movs	r0, #34	; 0x22
 80019e8:	e08c      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019ea:	68a1      	ldr	r1, [r4, #8]
 80019ec:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d010      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019f2:	2111      	movs	r1, #17
 80019f4:	7721      	strb	r1, [r4, #28]
 80019f6:	209d      	movs	r0, #157	; 0x9d
 80019f8:	e084      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019fa:	7c20      	ldrb	r0, [r4, #16]
 80019fc:	2123      	movs	r1, #35	; 0x23
 80019fe:	f7fe fdaa 	bl	8000556 <USBPD_PE_Notification>
 8001a02:	6960      	ldr	r0, [r4, #20]
 8001a04:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001a08:	b108      	cbz	r0, 8001a0e <PE_Check_ControlMessage+0xaa>
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	e07a      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001a0e:	68a1      	ldr	r1, [r4, #8]
 8001a10:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d06f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a16:	2010      	movs	r0, #16
 8001a18:	7720      	strb	r0, [r4, #28]
 8001a1a:	2193      	movs	r1, #147	; 0x93
 8001a1c:	e075      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001a1e:	6860      	ldr	r0, [r4, #4]
 8001a20:	6801      	ldr	r1, [r0, #0]
 8001a22:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d165      	bne.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a2a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a2e:	b110      	cbz	r0, 8001a36 <PE_Check_ControlMessage+0xd2>
 8001a30:	f000 f86d 	bl	8001b0e <.text_14>
 8001a34:	d05f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a36:	211d      	movs	r1, #29
 8001a38:	7461      	strb	r1, [r4, #17]
 8001a3a:	2007      	movs	r0, #7
 8001a3c:	7720      	strb	r0, [r4, #28]
 8001a3e:	2106      	movs	r1, #6
 8001a40:	e052      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a42:	6820      	ldr	r0, [r4, #0]
 8001a44:	8901      	ldrh	r1, [r0, #8]
 8001a46:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d059      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a4e:	f000 f867 	bl	8001b20 <.text_16>
 8001a52:	bf01      	itttt	eq
 8001a54:	6820      	ldreq	r0, [r4, #0]
 8001a56:	6841      	ldreq	r1, [r0, #4]
 8001a58:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 8001a5c:	2800      	cmpeq	r0, #0
 8001a5e:	d050      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a60:	2163      	movs	r1, #99	; 0x63
 8001a62:	7461      	strb	r1, [r4, #17]
 8001a64:	200a      	movs	r0, #10
 8001a66:	7720      	strb	r0, [r4, #28]
 8001a68:	2146      	movs	r1, #70	; 0x46
 8001a6a:	e03d      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a6c:	6860      	ldr	r0, [r4, #4]
 8001a6e:	6801      	ldr	r1, [r0, #0]
 8001a70:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a74:	b110      	cbz	r0, 8001a7c <PE_Check_ControlMessage+0x118>
 8001a76:	f000 f84a 	bl	8001b0e <.text_14>
 8001a7a:	d042      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a7c:	2164      	movs	r1, #100	; 0x64
 8001a7e:	7461      	strb	r1, [r4, #17]
 8001a80:	205f      	movs	r0, #95	; 0x5f
 8001a82:	7720      	strb	r0, [r4, #28]
 8001a84:	2160      	movs	r1, #96	; 0x60
 8001a86:	e02f      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	8901      	ldrh	r1, [r0, #8]
 8001a8c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001a90:	b318      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001a92:	200b      	movs	r0, #11
 8001a94:	7720      	strb	r0, [r4, #28]
 8001a96:	214d      	movs	r1, #77	; 0x4d
 8001a98:	f000 f83f 	bl	8001b1a <.text_15>
 8001a9c:	2030      	movs	r0, #48	; 0x30
 8001a9e:	e031      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001aa0:	6820      	ldr	r0, [r4, #0]
 8001aa2:	8901      	ldrh	r1, [r0, #8]
 8001aa4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d02a      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001aac:	200b      	movs	r0, #11
 8001aae:	7720      	strb	r0, [r4, #28]
 8001ab0:	2149      	movs	r1, #73	; 0x49
 8001ab2:	f000 f832 	bl	8001b1a <.text_15>
 8001ab6:	6860      	ldr	r0, [r4, #4]
 8001ab8:	6801      	ldr	r1, [r0, #0]
 8001aba:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001abe:	b108      	cbz	r0, 8001ac4 <PE_Check_ControlMessage+0x160>
 8001ac0:	202d      	movs	r0, #45	; 0x2d
 8001ac2:	e01f      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ac4:	2111      	movs	r1, #17
 8001ac6:	e020      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	8901      	ldrh	r1, [r0, #8]
 8001acc:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8001ad0:	b118      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001ad2:	202f      	movs	r0, #47	; 0x2f
 8001ad4:	e016      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ad6:	2009      	movs	r0, #9
 8001ad8:	7720      	strb	r0, [r4, #28]
 8001ada:	2101      	movs	r1, #1
 8001adc:	e015      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ade:	200f      	movs	r0, #15
 8001ae0:	7720      	strb	r0, [r4, #28]
 8001ae2:	214b      	movs	r1, #75	; 0x4b
 8001ae4:	e011      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ae6:	2159      	movs	r1, #89	; 0x59
 8001ae8:	7c20      	ldrb	r0, [r4, #16]
 8001aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aee:	f7fe bd32 	b.w	8000556 <USBPD_PE_Notification>
 8001af2:	2011      	movs	r0, #17
 8001af4:	e006      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001af6:	6860      	ldr	r0, [r4, #4]
 8001af8:	7801      	ldrb	r1, [r0, #0]
 8001afa:	f001 0103 	and.w	r1, r1, #3
 8001afe:	2902      	cmp	r1, #2
 8001b00:	d102      	bne.n	8001b08 <PE_Check_ControlMessage+0x1a4>
 8001b02:	2001      	movs	r0, #1
 8001b04:	7460      	strb	r0, [r4, #17]
 8001b06:	bd10      	pop	{r4, pc}
 8001b08:	212a      	movs	r1, #42	; 0x2a
 8001b0a:	7461      	strb	r1, [r4, #17]
 8001b0c:	bd10      	pop	{r4, pc}

08001b0e <.text_14>:
 8001b0e:	6820      	ldr	r0, [r4, #0]
 8001b10:	6841      	ldr	r1, [r0, #4]
 8001b12:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001b16:	2800      	cmp	r0, #0
 8001b18:	4770      	bx	lr

08001b1a <.text_15>:
 8001b1a:	7c20      	ldrb	r0, [r4, #16]
 8001b1c:	f7fe bd1b 	b.w	8000556 <USBPD_PE_Notification>

08001b20 <.text_16>:
 8001b20:	6860      	ldr	r0, [r4, #4]
 8001b22:	6801      	ldr	r1, [r0, #0]
 8001b24:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	4770      	bx	lr

08001b2c <PE_Check_DataMessage>:
 8001b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001b2e:	f000 f8a3 	bl	8001c78 <.text_18>
 8001b32:	2801      	cmp	r0, #1
 8001b34:	d02a      	beq.n	8001b8c <PE_Check_DataMessage+0x60>
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d00c      	beq.n	8001b54 <PE_Check_DataMessage+0x28>
 8001b3a:	2803      	cmp	r0, #3
 8001b3c:	d03c      	beq.n	8001bb8 <PE_Check_DataMessage+0x8c>
 8001b3e:	2806      	cmp	r0, #6
 8001b40:	d07c      	beq.n	8001c3c <PE_Check_DataMessage+0x110>
 8001b42:	2807      	cmp	r0, #7
 8001b44:	f000 8089 	beq.w	8001c5a <PE_Check_DataMessage+0x12e>
 8001b48:	280a      	cmp	r0, #10
 8001b4a:	f000 808f 	beq.w	8001c6c <PE_Check_DataMessage+0x140>
 8001b4e:	280f      	cmp	r0, #15
 8001b50:	d070      	beq.n	8001c34 <PE_Check_DataMessage+0x108>
 8001b52:	e08e      	b.n	8001c72 <PE_Check_DataMessage+0x146>
 8001b54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b56:	7881      	ldrb	r1, [r0, #2]
 8001b58:	78c2      	ldrb	r2, [r0, #3]
 8001b5a:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8001b5e:	7901      	ldrb	r1, [r0, #4]
 8001b60:	7940      	ldrb	r0, [r0, #5]
 8001b62:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001b66:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f7ff ffd8 	bl	8001b20 <.text_16>
 8001b70:	d063      	beq.n	8001c3a <PE_Check_DataMessage+0x10e>
 8001b72:	68a5      	ldr	r5, [r4, #8]
 8001b74:	7c20      	ldrb	r0, [r4, #16]
 8001b76:	69ae      	ldr	r6, [r5, #24]
 8001b78:	2304      	movs	r3, #4
 8001b7a:	466a      	mov	r2, sp
 8001b7c:	2106      	movs	r1, #6
 8001b7e:	47b0      	blx	r6
 8001b80:	2001      	movs	r0, #1
 8001b82:	7720      	strb	r0, [r4, #28]
 8001b84:	2100      	movs	r1, #0
 8001b86:	84a1      	strh	r1, [r4, #36]	; 0x24
 8001b88:	2009      	movs	r0, #9
 8001b8a:	e070      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001b8c:	f7ff ffc8 	bl	8001b20 <.text_16>
 8001b90:	d171      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001b92:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001b94:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8001b98:	7c20      	ldrb	r0, [r4, #16]
 8001b9a:	f7ff f84c 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8001b9e:	68a5      	ldr	r5, [r4, #8]
 8001ba0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001ba2:	69ae      	ldr	r6, [r5, #24]
 8001ba4:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001ba8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001baa:	1c82      	adds	r2, r0, #2
 8001bac:	7c20      	ldrb	r0, [r4, #16]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	47b0      	blx	r6
 8001bb4:	2044      	movs	r0, #68	; 0x44
 8001bb6:	e05a      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001bb8:	2100      	movs	r1, #0
 8001bba:	9101      	str	r1, [sp, #4]
 8001bbc:	9100      	str	r1, [sp, #0]
 8001bbe:	466b      	mov	r3, sp
 8001bc0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bc2:	7881      	ldrb	r1, [r0, #2]
 8001bc4:	78c2      	ldrb	r2, [r0, #3]
 8001bc6:	68a6      	ldr	r6, [r4, #8]
 8001bc8:	6977      	ldr	r7, [r6, #20]
 8001bca:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 8001bce:	7901      	ldrb	r1, [r0, #4]
 8001bd0:	7940      	ldrb	r0, [r0, #5]
 8001bd2:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001bd6:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8001bda:	7c20      	ldrb	r0, [r4, #16]
 8001bdc:	aa01      	add	r2, sp, #4
 8001bde:	2103      	movs	r1, #3
 8001be0:	47b8      	blx	r7
 8001be2:	9800      	ldr	r0, [sp, #0]
 8001be4:	2104      	movs	r1, #4
 8001be6:	f7ff fbdf 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	bf01      	itttt	eq
 8001bee:	6860      	ldreq	r0, [r4, #4]
 8001bf0:	6801      	ldreq	r1, [r0, #0]
 8001bf2:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001bf6:	2803      	cmpeq	r0, #3
 8001bf8:	d11a      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001bfa:	9801      	ldr	r0, [sp, #4]
 8001bfc:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c00:	4288      	cmp	r0, r1
 8001c02:	d115      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001c04:	0f2d      	lsrs	r5, r5, #28
 8001c06:	2d05      	cmp	r5, #5
 8001c08:	d010      	beq.n	8001c2c <PE_Check_DataMessage+0x100>
 8001c0a:	2d08      	cmp	r5, #8
 8001c0c:	d00c      	beq.n	8001c28 <PE_Check_DataMessage+0xfc>
 8001c0e:	2d09      	cmp	r5, #9
 8001c10:	d004      	beq.n	8001c1c <PE_Check_DataMessage+0xf0>
 8001c12:	2d0a      	cmp	r5, #10
 8001c14:	d12f      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001c16:	7c20      	ldrb	r0, [r4, #16]
 8001c18:	2166      	movs	r1, #102	; 0x66
 8001c1a:	e001      	b.n	8001c20 <PE_Check_DataMessage+0xf4>
 8001c1c:	7c20      	ldrb	r0, [r4, #16]
 8001c1e:	2165      	movs	r1, #101	; 0x65
 8001c20:	f7fe fc99 	bl	8000556 <USBPD_PE_Notification>
 8001c24:	2003      	movs	r0, #3
 8001c26:	e022      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c28:	2129      	movs	r1, #41	; 0x29
 8001c2a:	e023      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c2c:	2027      	movs	r0, #39	; 0x27
 8001c2e:	e01e      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c30:	2103      	movs	r1, #3
 8001c32:	e01f      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c34:	4620      	mov	r0, r4
 8001c36:	f003 f816 	bl	8004c66 <PE_Check_DataMessageVDM>
 8001c3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	8901      	ldrh	r1, [r0, #8]
 8001c40:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8001c44:	b180      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c48:	68a5      	ldr	r5, [r4, #8]
 8001c4a:	69ae      	ldr	r6, [r5, #24]
 8001c4c:	1c82      	adds	r2, r0, #2
 8001c4e:	7c20      	ldrb	r0, [r4, #16]
 8001c50:	2304      	movs	r3, #4
 8001c52:	210b      	movs	r1, #11
 8001c54:	47b0      	blx	r6
 8001c56:	202c      	movs	r0, #44	; 0x2c
 8001c58:	e009      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c5a:	6820      	ldr	r0, [r4, #0]
 8001c5c:	8901      	ldrh	r1, [r0, #8]
 8001c5e:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8001c62:	b108      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c64:	203d      	movs	r0, #61	; 0x3d
 8001c66:	e002      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c68:	2101      	movs	r1, #1
 8001c6a:	e003      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	7460      	strb	r0, [r4, #17]
 8001c70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c72:	2111      	movs	r1, #17
 8001c74:	7461      	strb	r1, [r4, #17]
 8001c76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001c78 <.text_18>:
 8001c78:	4604      	mov	r4, r0
 8001c7a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001c7e:	f000 001f 	and.w	r0, r0, #31
 8001c82:	4770      	bx	lr

08001c84 <PE_CheckSendMessageStatus>:
 8001c84:	b510      	push	{r4, lr}
 8001c86:	2410      	movs	r4, #16
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d007      	beq.n	8001c9c <PE_CheckSendMessageStatus+0x18>
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d00c      	beq.n	8001caa <PE_CheckSendMessageStatus+0x26>
 8001c90:	2b07      	cmp	r3, #7
 8001c92:	d00f      	beq.n	8001cb4 <PE_CheckSendMessageStatus+0x30>
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	bf08      	it	eq
 8001c98:	2409      	moveq	r4, #9
 8001c9a:	e027      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001c9c:	9902      	ldr	r1, [sp, #8]
 8001c9e:	7441      	strb	r1, [r0, #17]
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	6941      	ldr	r1, [r0, #20]
 8001ca4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001ca8:	e002      	b.n	8001cb0 <PE_CheckSendMessageStatus+0x2c>
 8001caa:	6941      	ldr	r1, [r0, #20]
 8001cac:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001cb0:	6141      	str	r1, [r0, #20]
 8001cb2:	e01b      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cb4:	b129      	cbz	r1, 8001cc2 <PE_CheckSendMessageStatus+0x3e>
 8001cb6:	2a01      	cmp	r2, #1
 8001cb8:	bf08      	it	eq
 8001cba:	2199      	moveq	r1, #153	; 0x99
 8001cbc:	d015      	beq.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cbe:	2407      	movs	r4, #7
 8001cc0:	e014      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cc2:	6841      	ldr	r1, [r0, #4]
 8001cc4:	680b      	ldr	r3, [r1, #0]
 8001cc6:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8001cca:	2904      	cmp	r1, #4
 8001ccc:	d003      	beq.n	8001cd6 <PE_CheckSendMessageStatus+0x52>
 8001cce:	2a01      	cmp	r2, #1
 8001cd0:	d10a      	bne.n	8001ce8 <PE_CheckSendMessageStatus+0x64>
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	e009      	b.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	d1fb      	bne.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001cda:	6882      	ldr	r2, [r0, #8]
 8001cdc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001cde:	2900      	cmp	r1, #0
 8001ce0:	d0f7      	beq.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001ce2:	2292      	movs	r2, #146	; 0x92
 8001ce4:	7442      	strb	r2, [r0, #17]
 8001ce6:	e001      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001ce8:	2111      	movs	r1, #17
 8001cea:	7441      	strb	r1, [r0, #17]
 8001cec:	4620      	mov	r0, r4
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <USBPD_PE_StateMachine_SNK>:
 8001cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	f8df 0c2c 	ldr.w	r0, [pc, #3116]	; 8002924 <.text_22>
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001d02:	7c68      	ldrb	r0, [r5, #17]
 8001d04:	2848      	cmp	r0, #72	; 0x48
 8001d06:	d12c      	bne.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f7fe ff28 	bl	8000b5e <PE_Reset_ZI>
 8001d0e:	4628      	mov	r0, r5
 8001d10:	f7fe ff5f 	bl	8000bd2 <PE_Reset_Counter>
 8001d14:	6828      	ldr	r0, [r5, #0]
 8001d16:	7903      	ldrb	r3, [r0, #4]
 8001d18:	7c28      	ldrb	r0, [r5, #16]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	f003 f93e 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8001d26:	6868      	ldr	r0, [r5, #4]
 8001d28:	6801      	ldr	r1, [r0, #0]
 8001d2a:	f021 0108 	bic.w	r1, r1, #8
 8001d2e:	6001      	str	r1, [r0, #0]
 8001d30:	6828      	ldr	r0, [r5, #0]
 8001d32:	6841      	ldr	r1, [r0, #4]
 8001d34:	6868      	ldr	r0, [r5, #4]
 8001d36:	6802      	ldr	r2, [r0, #0]
 8001d38:	f361 0201 	bfi	r2, r1, #0, #2
 8001d3c:	6002      	str	r2, [r0, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	7c28      	ldrb	r0, [r5, #16]
 8001d42:	f003 f985 	bl	8005050 <USBPD_PRL_SOPCapability>
 8001d46:	7c28      	ldrb	r0, [r5, #16]
 8001d48:	f003 fbf7 	bl	800553a <USBPD_PRL_Reset>
 8001d4c:	7ca9      	ldrb	r1, [r5, #18]
 8001d4e:	203e      	movs	r0, #62	; 0x3e
 8001d50:	293e      	cmp	r1, #62	; 0x3e
 8001d52:	7468      	strb	r0, [r5, #17]
 8001d54:	d005      	beq.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d56:	74a8      	strb	r0, [r5, #18]
 8001d58:	f000 fd25 	bl	80027a6 <.text_12>
 8001d5c:	223e      	movs	r2, #62	; 0x3e
 8001d5e:	2004      	movs	r0, #4
 8001d60:	47b8      	blx	r7
 8001d62:	6968      	ldr	r0, [r5, #20]
 8001d64:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001d68:	b130      	cbz	r0, 8001d78 <USBPD_PE_StateMachine_SNK+0x88>
 8001d6a:	6968      	ldr	r0, [r5, #20]
 8001d6c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001d70:	6168      	str	r0, [r5, #20]
 8001d72:	2164      	movs	r1, #100	; 0x64
 8001d74:	f000 fd3b 	bl	80027ee <.text_18>
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f7fe fde3 	bl	8000944 <PE_Get_RxEvent>
 8001d7e:	2803      	cmp	r0, #3
 8001d80:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d84:	d103      	bne.n	8001d8e <USBPD_PE_StateMachine_SNK+0x9e>
 8001d86:	2001      	movs	r0, #1
 8001d88:	b00d      	add	sp, #52	; 0x34
 8001d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d8e:	f88d 400d 	strb.w	r4, [sp, #13]
 8001d92:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 8001d96:	f248 19f4 	movw	r9, #33268	; 0x81f4
 8001d9a:	f248 0b1b 	movw	fp, #32795	; 0x801b
 8001d9e:	6868      	ldr	r0, [r5, #4]
 8001da0:	6801      	ldr	r1, [r0, #0]
 8001da2:	2402      	movs	r4, #2
 8001da4:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f000 8110 	beq.w	8001fce <USBPD_PE_StateMachine_SNK+0x2de>
 8001dae:	6968      	ldr	r0, [r5, #20]
 8001db0:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8001db4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001db8:	b180      	cbz	r0, 8001ddc <USBPD_PE_StateMachine_SNK+0xec>
 8001dba:	20a7      	movs	r0, #167	; 0xa7
 8001dbc:	6969      	ldr	r1, [r5, #20]
 8001dbe:	7468      	strb	r0, [r5, #17]
 8001dc0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8001dc4:	6169      	str	r1, [r5, #20]
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	70b0      	strb	r0, [r6, #2]
 8001dca:	7ca9      	ldrb	r1, [r5, #18]
 8001dcc:	29a7      	cmp	r1, #167	; 0xa7
 8001dce:	d020      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dd0:	20a7      	movs	r0, #167	; 0xa7
 8001dd2:	f000 fcef 	bl	80027b4 <.text_13>
 8001dd6:	22a7      	movs	r2, #167	; 0xa7
 8001dd8:	2004      	movs	r0, #4
 8001dda:	47e0      	blx	ip
 8001ddc:	78b0      	ldrb	r0, [r6, #2]
 8001dde:	280f      	cmp	r0, #15
 8001de0:	bf18      	it	ne
 8001de2:	2814      	cmpne	r0, #20
 8001de4:	d115      	bne.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001de6:	f000 fcce 	bl	8002786 <.text_9+0x2>
 8001dea:	d001      	beq.n	8001df0 <USBPD_PE_StateMachine_SNK+0x100>
 8001dec:	f000 fd06 	bl	80027fc <.text_20>
 8001df0:	78b2      	ldrb	r2, [r6, #2]
 8001df2:	746a      	strb	r2, [r5, #17]
 8001df4:	2000      	movs	r0, #0
 8001df6:	70b0      	strb	r0, [r6, #2]
 8001df8:	7ca9      	ldrb	r1, [r5, #18]
 8001dfa:	4291      	cmp	r1, r2
 8001dfc:	d009      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dfe:	74aa      	strb	r2, [r5, #18]
 8001e00:	9000      	str	r0, [sp, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8df 7b20 	ldr.w	r7, [pc, #2848]	; 8002928 <.text_23>
 8001e08:	7c29      	ldrb	r1, [r5, #16]
 8001e0a:	f8d7 c000 	ldr.w	ip, [r7]
 8001e0e:	2004      	movs	r0, #4
 8001e10:	47e0      	blx	ip
 8001e12:	f000 fcb3 	bl	800277c <.text_8>
 8001e16:	d117      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e18:	6868      	ldr	r0, [r5, #4]
 8001e1a:	6801      	ldr	r1, [r0, #0]
 8001e1c:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001e20:	88b1      	ldrh	r1, [r6, #4]
 8001e22:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001e26:	4288      	cmp	r0, r1
 8001e28:	d10e      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e2a:	f000 fca3 	bl	8002774 <.text_7>
 8001e2e:	f000 fce8 	bl	8002802 <.text_20+0x6>
 8001e32:	7ca9      	ldrb	r1, [r5, #18]
 8001e34:	2092      	movs	r0, #146	; 0x92
 8001e36:	2992      	cmp	r1, #146	; 0x92
 8001e38:	7468      	strb	r0, [r5, #17]
 8001e3a:	f000 80d4 	beq.w	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001e3e:	f000 fcb9 	bl	80027b4 <.text_13>
 8001e42:	2292      	movs	r2, #146	; 0x92
 8001e44:	2004      	movs	r0, #4
 8001e46:	47e0      	blx	ip
 8001e48:	7c68      	ldrb	r0, [r5, #17]
 8001e4a:	0001      	movs	r1, r0
 8001e4c:	f205 275e 	addw	r7, r5, #606	; 0x25e
 8001e50:	f24f 0a1f 	movw	sl, #61471	; 0xf01f
 8001e54:	f000 80bf 	beq.w	8001fd6 <USBPD_PE_StateMachine_SNK+0x2e6>
 8001e58:	1e41      	subs	r1, r0, #1
 8001e5a:	d070      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e5c:	1e89      	subs	r1, r1, #2
 8001e5e:	2901      	cmp	r1, #1
 8001e60:	f240 82aa 	bls.w	80023b8 <USBPD_PE_StateMachine_SNK+0x6c8>
 8001e64:	1e89      	subs	r1, r1, #2
 8001e66:	f000 81bb 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001e6a:	390a      	subs	r1, #10
 8001e6c:	f000 81bd 	beq.w	80021ea <USBPD_PE_StateMachine_SNK+0x4fa>
 8001e70:	1e49      	subs	r1, r1, #1
 8001e72:	f000 8242 	beq.w	80022fa <USBPD_PE_StateMachine_SNK+0x60a>
 8001e76:	1e49      	subs	r1, r1, #1
 8001e78:	f000 8248 	beq.w	800230c <USBPD_PE_StateMachine_SNK+0x61c>
 8001e7c:	1ec9      	subs	r1, r1, #3
 8001e7e:	f000 81e0 	beq.w	8002242 <USBPD_PE_StateMachine_SNK+0x552>
 8001e82:	1f09      	subs	r1, r1, #4
 8001e84:	2901      	cmp	r1, #1
 8001e86:	d95a      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e88:	1e89      	subs	r1, r1, #2
 8001e8a:	f000 826e 	beq.w	800236a <USBPD_PE_StateMachine_SNK+0x67a>
 8001e8e:	1ec9      	subs	r1, r1, #3
 8001e90:	d055      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e92:	1e49      	subs	r1, r1, #1
 8001e94:	f000 8333 	beq.w	80024fe <USBPD_PE_StateMachine_SNK+0x80e>
 8001e98:	1f09      	subs	r1, r1, #4
 8001e9a:	f000 829b 	beq.w	80023d4 <USBPD_PE_StateMachine_SNK+0x6e4>
 8001e9e:	1f49      	subs	r1, r1, #5
 8001ea0:	2902      	cmp	r1, #2
 8001ea2:	d94c      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ea4:	1ec9      	subs	r1, r1, #3
 8001ea6:	f000 8280 	beq.w	80023aa <USBPD_PE_StateMachine_SNK+0x6ba>
 8001eaa:	1e49      	subs	r1, r1, #1
 8001eac:	f000 838f 	beq.w	80025ce <USBPD_PE_StateMachine_SNK+0x8de>
 8001eb0:	1e49      	subs	r1, r1, #1
 8001eb2:	d044      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001eb4:	1e89      	subs	r1, r1, #2
 8001eb6:	f000 83cd 	beq.w	8002654 <USBPD_PE_StateMachine_SNK+0x964>
 8001eba:	1e49      	subs	r1, r1, #1
 8001ebc:	2901      	cmp	r1, #1
 8001ebe:	d93e      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ec0:	1e89      	subs	r1, r1, #2
 8001ec2:	d001      	beq.n	8001ec8 <USBPD_PE_StateMachine_SNK+0x1d8>
 8001ec4:	1e89      	subs	r1, r1, #2
 8001ec6:	2905      	cmp	r1, #5
 8001ec8:	f240 83f3 	bls.w	80026b2 <USBPD_PE_StateMachine_SNK+0x9c2>
 8001ecc:	1f89      	subs	r1, r1, #6
 8001ece:	f000 83ce 	beq.w	800266e <USBPD_PE_StateMachine_SNK+0x97e>
 8001ed2:	1e49      	subs	r1, r1, #1
 8001ed4:	2903      	cmp	r1, #3
 8001ed6:	d932      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ed8:	1f09      	subs	r1, r1, #4
 8001eda:	f000 808d 	beq.w	8001ff8 <USBPD_PE_StateMachine_SNK+0x308>
 8001ede:	1e89      	subs	r1, r1, #2
 8001ee0:	f000 81da 	beq.w	8002298 <USBPD_PE_StateMachine_SNK+0x5a8>
 8001ee4:	1ec9      	subs	r1, r1, #3
 8001ee6:	f000 80a0 	beq.w	800202a <USBPD_PE_StateMachine_SNK+0x33a>
 8001eea:	1e49      	subs	r1, r1, #1
 8001eec:	f000 80d7 	beq.w	800209e <USBPD_PE_StateMachine_SNK+0x3ae>
 8001ef0:	1e49      	subs	r1, r1, #1
 8001ef2:	f000 80e3 	beq.w	80020bc <USBPD_PE_StateMachine_SNK+0x3cc>
 8001ef6:	1e49      	subs	r1, r1, #1
 8001ef8:	f000 80fb 	beq.w	80020f2 <USBPD_PE_StateMachine_SNK+0x402>
 8001efc:	1e49      	subs	r1, r1, #1
 8001efe:	f000 8146 	beq.w	800218e <USBPD_PE_StateMachine_SNK+0x49e>
 8001f02:	1e89      	subs	r1, r1, #2
 8001f04:	d0ac      	beq.n	8001e60 <USBPD_PE_StateMachine_SNK+0x170>
 8001f06:	1e89      	subs	r1, r1, #2
 8001f08:	d019      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f0a:	1e49      	subs	r1, r1, #1
 8001f0c:	f000 8343 	beq.w	8002596 <USBPD_PE_StateMachine_SNK+0x8a6>
 8001f10:	1f09      	subs	r1, r1, #4
 8001f12:	f000 8212 	beq.w	800233a <USBPD_PE_StateMachine_SNK+0x64a>
 8001f16:	1ec9      	subs	r1, r1, #3
 8001f18:	f000 82b2 	beq.w	8002480 <USBPD_PE_StateMachine_SNK+0x790>
 8001f1c:	1f49      	subs	r1, r1, #5
 8001f1e:	f000 82fb 	beq.w	8002518 <USBPD_PE_StateMachine_SNK+0x828>
 8001f22:	1e49      	subs	r1, r1, #1
 8001f24:	f000 8283 	beq.w	800242e <USBPD_PE_StateMachine_SNK+0x73e>
 8001f28:	3909      	subs	r1, #9
 8001f2a:	2902      	cmp	r1, #2
 8001f2c:	d907      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f2e:	1ec9      	subs	r1, r1, #3
 8001f30:	f000 835e 	beq.w	80025f0 <USBPD_PE_StateMachine_SNK+0x900>
 8001f34:	1e49      	subs	r1, r1, #1
 8001f36:	f000 836b 	beq.w	8002610 <USBPD_PE_StateMachine_SNK+0x920>
 8001f3a:	1e49      	subs	r1, r1, #1
 8001f3c:	2901      	cmp	r1, #1
 8001f3e:	f240 83bc 	bls.w	80026ba <USBPD_PE_StateMachine_SNK+0x9ca>
 8001f42:	390d      	subs	r1, #13
 8001f44:	d0fb      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f46:	3912      	subs	r1, #18
 8001f48:	f000 83cc 	beq.w	80026e4 <USBPD_PE_StateMachine_SNK+0x9f4>
 8001f4c:	390c      	subs	r1, #12
 8001f4e:	d04a      	beq.n	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001f50:	1e49      	subs	r1, r1, #1
 8001f52:	2902      	cmp	r1, #2
 8001f54:	d9f3      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f56:	1f49      	subs	r1, r1, #5
 8001f58:	f000 8213 	beq.w	8002382 <USBPD_PE_StateMachine_SNK+0x692>
 8001f5c:	1e49      	subs	r1, r1, #1
 8001f5e:	d0ee      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f60:	1e49      	subs	r1, r1, #1
 8001f62:	f000 813d 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001f66:	1e49      	subs	r1, r1, #1
 8001f68:	f000 817d 	beq.w	8002266 <USBPD_PE_StateMachine_SNK+0x576>
 8001f6c:	1e49      	subs	r1, r1, #1
 8001f6e:	2908      	cmp	r1, #8
 8001f70:	f240 83a8 	bls.w	80026c4 <USBPD_PE_StateMachine_SNK+0x9d4>
 8001f74:	390b      	subs	r1, #11
 8001f76:	f000 83bb 	beq.w	80026f0 <USBPD_PE_StateMachine_SNK+0xa00>
 8001f7a:	a903      	add	r1, sp, #12
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f002 f859 	bl	8004034 <PE_StateMachine_VDM>
 8001f82:	4604      	mov	r4, r0
 8001f84:	7c6a      	ldrb	r2, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	4290      	cmp	r0, r2
 8001f8a:	d004      	beq.n	8001f96 <USBPD_PE_StateMachine_SNK+0x2a6>
 8001f8c:	74aa      	strb	r2, [r5, #18]
 8001f8e:	f000 fc0a 	bl	80027a6 <.text_12>
 8001f92:	2004      	movs	r0, #4
 8001f94:	47b8      	blx	r7
 8001f96:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001f9a:	f8df 698c 	ldr.w	r6, [pc, #2444]	; 8002928 <.text_23>
 8001f9e:	2814      	cmp	r0, #20
 8001fa0:	f000 83b1 	beq.w	8002706 <USBPD_PE_StateMachine_SNK+0xa16>
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f7fe fd42 	bl	8000a2e <PE_Check_AMSConflict>
 8001faa:	2815      	cmp	r0, #21
 8001fac:	d104      	bne.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fae:	f000 fbea 	bl	8002786 <.text_9+0x2>
 8001fb2:	d001      	beq.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fb4:	f000 fc22 	bl	80027fc <.text_20>
 8001fb8:	7c6a      	ldrb	r2, [r5, #17]
 8001fba:	7ca8      	ldrb	r0, [r5, #18]
 8001fbc:	4290      	cmp	r0, r2
 8001fbe:	d004      	beq.n	8001fca <USBPD_PE_StateMachine_SNK+0x2da>
 8001fc0:	74aa      	strb	r2, [r5, #18]
 8001fc2:	f000 fbea 	bl	800279a <.text_11>
 8001fc6:	2004      	movs	r0, #4
 8001fc8:	47a0      	blx	r4
 8001fca:	2400      	movs	r4, #0
 8001fcc:	e3b7      	b.n	800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 8001fce:	f04f 34ff 	mov.w	r4, #4294967295
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	e6d8      	b.n	8001d88 <USBPD_PE_StateMachine_SNK+0x98>
 8001fd6:	f000 fbfc 	bl	80027d2 <.text_15>
 8001fda:	215f      	movs	r1, #95	; 0x5f
 8001fdc:	f000 fc07 	bl	80027ee <.text_18>
 8001fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8001fe4:	e7ce      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8001fe6:	f000 fbf4 	bl	80027d2 <.text_15>
 8001fea:	68a8      	ldr	r0, [r5, #8]
 8001fec:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001fee:	2900      	cmp	r1, #0
 8001ff0:	d0f6      	beq.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff2:	7c28      	ldrb	r0, [r5, #16]
 8001ff4:	4788      	blx	r1
 8001ff6:	e7f3      	b.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff8:	6868      	ldr	r0, [r5, #4]
 8001ffa:	6801      	ldr	r1, [r0, #0]
 8001ffc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002000:	2800      	cmp	r0, #0
 8002002:	d0bf      	beq.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002004:	f001 0203 	and.w	r2, r1, #3
 8002008:	6868      	ldr	r0, [r5, #4]
 800200a:	2a01      	cmp	r2, #1
 800200c:	bf0c      	ite	eq
 800200e:	2200      	moveq	r2, #0
 8002010:	2220      	movne	r2, #32
 8002012:	f021 0120 	bic.w	r1, r1, #32
 8002016:	4311      	orrs	r1, r2
 8002018:	6001      	str	r1, [r0, #0]
 800201a:	2001      	movs	r0, #1
 800201c:	7728      	strb	r0, [r5, #28]
 800201e:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002022:	4644      	mov	r4, r8
 8002024:	2143      	movs	r1, #67	; 0x43
 8002026:	7469      	strb	r1, [r5, #17]
 8002028:	e7ac      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800202a:	f000 fba7 	bl	800277c <.text_8>
 800202e:	d12f      	bne.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002030:	88b1      	ldrh	r1, [r6, #4]
 8002032:	0bc8      	lsrs	r0, r1, #15
 8002034:	d128      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002036:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800203a:	b328      	cbz	r0, 8002088 <USBPD_PE_StateMachine_SNK+0x398>
 800203c:	4608      	mov	r0, r1
 800203e:	f000 011f 	and.w	r1, r0, #31
 8002042:	2901      	cmp	r1, #1
 8002044:	d120      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002046:	2200      	movs	r2, #0
 8002048:	70ba      	strb	r2, [r7, #2]
 800204a:	6969      	ldr	r1, [r5, #20]
 800204c:	f041 0104 	orr.w	r1, r1, #4
 8002050:	6169      	str	r1, [r5, #20]
 8002052:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002056:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800205a:	f7fe fdec 	bl	8000c36 <PE_ExtRevisionInteroperability>
 800205e:	88b0      	ldrh	r0, [r6, #4]
 8002060:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8002064:	68b0      	ldr	r0, [r6, #8]
 8002066:	68ae      	ldr	r6, [r5, #8]
 8002068:	69b7      	ldr	r7, [r6, #24]
 800206a:	1c82      	adds	r2, r0, #2
 800206c:	7c28      	ldrb	r0, [r5, #16]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	2104      	movs	r1, #4
 8002072:	47b8      	blx	r7
 8002074:	2001      	movs	r0, #1
 8002076:	7728      	strb	r0, [r5, #28]
 8002078:	f000 fbab 	bl	80027d2 <.text_15>
 800207c:	2044      	movs	r0, #68	; 0x44
 800207e:	7468      	strb	r0, [r5, #17]
 8002080:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002084:	2914      	cmp	r1, #20
 8002086:	d003      	beq.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002088:	f000 fb74 	bl	8002774 <.text_7>
 800208c:	f000 fbb9 	bl	8002802 <.text_20+0x6>
 8002090:	f000 fb6c 	bl	800276c <.text_6>
 8002094:	d102      	bne.n	800209c <USBPD_PE_StateMachine_SNK+0x3ac>
 8002096:	210f      	movs	r1, #15
 8002098:	7469      	strb	r1, [r5, #17]
 800209a:	2400      	movs	r4, #0
 800209c:	e772      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800209e:	68ab      	ldr	r3, [r5, #8]
 80020a0:	7c28      	ldrb	r0, [r5, #16]
 80020a2:	6a1c      	ldr	r4, [r3, #32]
 80020a4:	466a      	mov	r2, sp
 80020a6:	f105 0118 	add.w	r1, r5, #24
 80020aa:	47a0      	blx	r4
 80020ac:	9800      	ldr	r0, [sp, #0]
 80020ae:	6969      	ldr	r1, [r5, #20]
 80020b0:	f360 01c4 	bfi	r1, r0, #3, #2
 80020b4:	2045      	movs	r0, #69	; 0x45
 80020b6:	6169      	str	r1, [r5, #20]
 80020b8:	7468      	strb	r0, [r5, #17]
 80020ba:	e7ee      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80020bc:	6968      	ldr	r0, [r5, #20]
 80020be:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80020c2:	b100      	cbz	r0, 80020c6 <USBPD_PE_StateMachine_SNK+0x3d6>
 80020c4:	2002      	movs	r0, #2
 80020c6:	9002      	str	r0, [sp, #8]
 80020c8:	2101      	movs	r1, #1
 80020ca:	2046      	movs	r0, #70	; 0x46
 80020cc:	9001      	str	r0, [sp, #4]
 80020ce:	9100      	str	r1, [sp, #0]
 80020d0:	f105 0318 	add.w	r3, r5, #24
 80020d4:	2202      	movs	r2, #2
 80020d6:	2100      	movs	r1, #0
 80020d8:	4628      	mov	r0, r5
 80020da:	f7ff f9f2 	bl	80014c2 <PE_Send_DataMessage>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d106      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 80020e2:	6968      	ldr	r0, [r5, #20]
 80020e4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80020e8:	6168      	str	r0, [r5, #20]
 80020ea:	f8a5 b01e 	strh.w	fp, [r5, #30]
 80020ee:	241b      	movs	r4, #27
 80020f0:	e748      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80020f2:	f000 fb43 	bl	800277c <.text_8>
 80020f6:	bf04      	itt	eq
 80020f8:	88b0      	ldrheq	r0, [r6, #4]
 80020fa:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 80020fe:	d142      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002100:	f000 001f 	and.w	r0, r0, #31
 8002104:	2802      	cmp	r0, #2
 8002106:	bf18      	it	ne
 8002108:	2803      	cmpne	r0, #3
 800210a:	d019      	beq.n	8002140 <USBPD_PE_StateMachine_SNK+0x450>
 800210c:	2804      	cmp	r0, #4
 800210e:	bf18      	it	ne
 8002110:	280c      	cmpne	r0, #12
 8002112:	d124      	bne.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002114:	6868      	ldr	r0, [r5, #4]
 8002116:	6801      	ldr	r1, [r0, #0]
 8002118:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800211c:	2803      	cmp	r0, #3
 800211e:	d005      	beq.n	800212c <USBPD_PE_StateMachine_SNK+0x43c>
 8002120:	2043      	movs	r0, #67	; 0x43
 8002122:	7468      	strb	r0, [r5, #17]
 8002124:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002128:	4644      	mov	r4, r8
 800212a:	e014      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 800212c:	7930      	ldrb	r0, [r6, #4]
 800212e:	f000 001f 	and.w	r0, r0, #31
 8002132:	280c      	cmp	r0, #12
 8002134:	bf0c      	ite	eq
 8002136:	2049      	moveq	r0, #73	; 0x49
 8002138:	2003      	movne	r0, #3
 800213a:	7468      	strb	r0, [r5, #17]
 800213c:	2400      	movs	r4, #0
 800213e:	e00a      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 8002140:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002144:	f000 fb4f 	bl	80027e6 <.text_17>
 8002148:	2047      	movs	r0, #71	; 0x47
 800214a:	7468      	strb	r0, [r5, #17]
 800214c:	4644      	mov	r4, r8
 800214e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002152:	2914      	cmp	r1, #20
 8002154:	d003      	beq.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002156:	f000 fb0d 	bl	8002774 <.text_7>
 800215a:	f000 fb52 	bl	8002802 <.text_20+0x6>
 800215e:	7930      	ldrb	r0, [r6, #4]
 8002160:	f000 001f 	and.w	r0, r0, #31
 8002164:	2802      	cmp	r0, #2
 8002166:	d009      	beq.n	800217c <USBPD_PE_StateMachine_SNK+0x48c>
 8002168:	2803      	cmp	r0, #3
 800216a:	d009      	beq.n	8002180 <USBPD_PE_StateMachine_SNK+0x490>
 800216c:	2804      	cmp	r0, #4
 800216e:	d003      	beq.n	8002178 <USBPD_PE_StateMachine_SNK+0x488>
 8002170:	280c      	cmp	r0, #12
 8002172:	d108      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002174:	2103      	movs	r1, #3
 8002176:	e004      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002178:	2102      	movs	r1, #2
 800217a:	e002      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 800217c:	2104      	movs	r1, #4
 800217e:	e000      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002180:	2101      	movs	r1, #1
 8002182:	f000 fb34 	bl	80027ee <.text_18>
 8002186:	f000 faf1 	bl	800276c <.text_6>
 800218a:	d1b1      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 800218c:	e783      	b.n	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800218e:	f000 faf5 	bl	800277c <.text_8>
 8002192:	bf02      	ittt	eq
 8002194:	88b0      	ldrheq	r0, [r6, #4]
 8002196:	ea0a 0000 	andeq.w	r0, sl, r0
 800219a:	2806      	cmpeq	r0, #6
 800219c:	d1f3      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800219e:	f000 fb2d 	bl	80027fc <.text_20>
 80021a2:	2103      	movs	r1, #3
 80021a4:	f000 fb20 	bl	80027e8 <.text_17+0x2>
 80021a8:	7c28      	ldrb	r0, [r5, #16]
 80021aa:	2110      	movs	r1, #16
 80021ac:	f7fe f9d3 	bl	8000556 <USBPD_PE_Notification>
 80021b0:	f000 fb09 	bl	80027c6 <.text_14>
 80021b4:	bf1a      	itte	ne
 80021b6:	6828      	ldrne	r0, [r5, #0]
 80021b8:	6801      	ldrne	r1, [r0, #0]
 80021ba:	2101      	moveq	r1, #1
 80021bc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80021c0:	f002 ff46 	bl	8005050 <USBPD_PRL_SOPCapability>
 80021c4:	2000      	movs	r0, #0
 80021c6:	84a8      	strh	r0, [r5, #36]	; 0x24
 80021c8:	6968      	ldr	r0, [r5, #20]
 80021ca:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80021ce:	2803      	cmp	r0, #3
 80021d0:	bf04      	itt	eq
 80021d2:	f24a 3028 	movweq	r0, #41768	; 0xa328
 80021d6:	84a8      	strheq	r0, [r5, #36]	; 0x24
 80021d8:	2103      	movs	r1, #3
 80021da:	7469      	strb	r1, [r5, #17]
 80021dc:	2400      	movs	r4, #0
 80021de:	e7d2      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 80021e0:	a903      	add	r1, sp, #12
 80021e2:	4628      	mov	r0, r5
 80021e4:	f001 fadc 	bl	80037a0 <PE_StateMachine_VDMCable>
 80021e8:	e6cb      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80021ea:	f000 faec 	bl	80027c6 <.text_14>
 80021ee:	bf1e      	ittt	ne
 80021f0:	68a8      	ldrne	r0, [r5, #8]
 80021f2:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 80021f4:	2a00      	cmpne	r2, #0
 80021f6:	d002      	beq.n	80021fe <USBPD_PE_StateMachine_SNK+0x50e>
 80021f8:	7c28      	ldrb	r0, [r5, #16]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4790      	blx	r2
 80021fe:	f000 fae8 	bl	80027d2 <.text_15>
 8002202:	4628      	mov	r0, r5
 8002204:	2101      	movs	r1, #1
 8002206:	f7ff f88d 	bl	8001324 <PE_SetPowerNegotiation>
 800220a:	78b8      	ldrb	r0, [r7, #2]
 800220c:	2803      	cmp	r0, #3
 800220e:	d30a      	bcc.n	8002226 <USBPD_PE_StateMachine_SNK+0x536>
 8002210:	6968      	ldr	r0, [r5, #20]
 8002212:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002216:	2800      	cmp	r0, #0
 8002218:	bf1e      	ittt	ne
 800221a:	68a9      	ldrne	r1, [r5, #8]
 800221c:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 800221e:	2800      	cmpne	r0, #0
 8002220:	d166      	bne.n	80022f0 <USBPD_PE_StateMachine_SNK+0x600>
 8002222:	2100      	movs	r1, #0
 8002224:	e6ff      	b.n	8002026 <USBPD_PE_StateMachine_SNK+0x336>
 8002226:	1c40      	adds	r0, r0, #1
 8002228:	70b8      	strb	r0, [r7, #2]
 800222a:	2105      	movs	r1, #5
 800222c:	4628      	mov	r0, r5
 800222e:	f7fe fb61 	bl	80008f4 <PE_Send_RESET>
 8002232:	f248 30e8 	movw	r0, #33768	; 0x83e8
 8002236:	83e8      	strh	r0, [r5, #30]
 8002238:	2201      	movs	r2, #1
 800223a:	f000 fad0 	bl	80027de <.text_16>
 800223e:	209b      	movs	r0, #155	; 0x9b
 8002240:	e73a      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 8002242:	f000 fac0 	bl	80027c6 <.text_14>
 8002246:	bf1e      	ittt	ne
 8002248:	68a8      	ldrne	r0, [r5, #8]
 800224a:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 800224c:	2a00      	cmpne	r2, #0
 800224e:	d002      	beq.n	8002256 <USBPD_PE_StateMachine_SNK+0x566>
 8002250:	7c28      	ldrb	r0, [r5, #16]
 8002252:	2100      	movs	r1, #0
 8002254:	4790      	blx	r2
 8002256:	2200      	movs	r2, #0
 8002258:	f000 fac1 	bl	80027de <.text_16>
 800225c:	f248 30e8 	movw	r0, #33768	; 0x83e8
 8002260:	83e8      	strh	r0, [r5, #30]
 8002262:	219b      	movs	r1, #155	; 0x9b
 8002264:	e718      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002266:	68aa      	ldr	r2, [r5, #8]
 8002268:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800226c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800226e:	4798      	blx	r3
 8002270:	2801      	cmp	r0, #1
 8002272:	d10d      	bne.n	8002290 <USBPD_PE_StateMachine_SNK+0x5a0>
 8002274:	f648 00e3 	movw	r0, #35043	; 0x88e3
 8002278:	83e8      	strh	r0, [r5, #30]
 800227a:	2169      	movs	r1, #105	; 0x69
 800227c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002280:	f7fe f969 	bl	8000556 <USBPD_PE_Notification>
 8002284:	2040      	movs	r0, #64	; 0x40
 8002286:	7468      	strb	r0, [r5, #17]
 8002288:	2113      	movs	r1, #19
 800228a:	f000 fab0 	bl	80027ee <.text_18>
 800228e:	2400      	movs	r4, #0
 8002290:	f000 fa6c 	bl	800276c <.text_6>
 8002294:	d150      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 8002296:	e01b      	b.n	80022d0 <USBPD_PE_StateMachine_SNK+0x5e0>
 8002298:	68aa      	ldr	r2, [r5, #8]
 800229a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800229e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80022a0:	2101      	movs	r1, #1
 80022a2:	4798      	blx	r3
 80022a4:	2801      	cmp	r0, #1
 80022a6:	d110      	bne.n	80022ca <USBPD_PE_StateMachine_SNK+0x5da>
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7fe fc22 	bl	8000af2 <PE_Reset_HardReset>
 80022ae:	2205      	movs	r2, #5
 80022b0:	2100      	movs	r1, #0
 80022b2:	f000 fa95 	bl	80027e0 <.text_16+0x2>
 80022b6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80022ba:	2168      	movs	r1, #104	; 0x68
 80022bc:	f7fe f94b 	bl	8000556 <USBPD_PE_Notification>
 80022c0:	f8a5 901e 	strh.w	r9, [r5, #30]
 80022c4:	2043      	movs	r0, #67	; 0x43
 80022c6:	4644      	mov	r4, r8
 80022c8:	7468      	strb	r0, [r5, #17]
 80022ca:	f000 fa4f 	bl	800276c <.text_6>
 80022ce:	d133      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 80022d0:	2206      	movs	r2, #6
 80022d2:	2100      	movs	r1, #0
 80022d4:	f000 fa84 	bl	80027e0 <.text_16+0x2>
 80022d8:	78b8      	ldrb	r0, [r7, #2]
 80022da:	2803      	cmp	r0, #3
 80022dc:	f4ff aedb 	bcc.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 80022e0:	6968      	ldr	r0, [r5, #20]
 80022e2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80022e6:	2800      	cmp	r0, #0
 80022e8:	bf1e      	ittt	ne
 80022ea:	68a9      	ldrne	r1, [r5, #8]
 80022ec:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 80022ee:	2800      	cmpne	r0, #0
 80022f0:	f040 80c4 	bne.w	800247c <USBPD_PE_StateMachine_SNK+0x78c>
 80022f4:	2100      	movs	r1, #0
 80022f6:	7469      	strb	r1, [r5, #17]
 80022f8:	e6cf      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80022fa:	2000      	movs	r0, #0
 80022fc:	9000      	str	r0, [sp, #0]
 80022fe:	2303      	movs	r3, #3
 8002300:	2203      	movs	r2, #3
 8002302:	f000 fa78 	bl	80027f6 <.text_19+0x2>
 8002306:	2800      	cmp	r0, #0
 8002308:	d116      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800230a:	e686      	b.n	800201a <USBPD_PE_StateMachine_SNK+0x32a>
 800230c:	6868      	ldr	r0, [r5, #4]
 800230e:	6801      	ldr	r1, [r0, #0]
 8002310:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002314:	2804      	cmp	r0, #4
 8002316:	f43f aebe 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800231a:	2000      	movs	r0, #0
 800231c:	9000      	str	r0, [sp, #0]
 800231e:	2350      	movs	r3, #80	; 0x50
 8002320:	7871      	ldrb	r1, [r6, #1]
 8002322:	220d      	movs	r2, #13
 8002324:	f000 fa67 	bl	80027f6 <.text_19+0x2>
 8002328:	2800      	cmp	r0, #0
 800232a:	d105      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fa18 	bl	8002762 <.text_5>
 8002332:	2130      	movs	r1, #48	; 0x30
 8002334:	f000 fa5b 	bl	80027ee <.text_18>
 8002338:	e624      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800233a:	f000 fa24 	bl	8002786 <.text_9+0x2>
 800233e:	d013      	beq.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002340:	7831      	ldrb	r1, [r6, #0]
 8002342:	7870      	ldrb	r0, [r6, #1]
 8002344:	4281      	cmp	r1, r0
 8002346:	bf02      	ittt	eq
 8002348:	88b1      	ldrheq	r1, [r6, #4]
 800234a:	ea0a 0001 	andeq.w	r0, sl, r1
 800234e:	2803      	cmpeq	r0, #3
 8002350:	d10a      	bne.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002352:	2001      	movs	r0, #1
 8002354:	7728      	strb	r0, [r5, #28]
 8002356:	f8a5 901e 	strh.w	r9, [r5, #30]
 800235a:	2143      	movs	r1, #67	; 0x43
 800235c:	7469      	strb	r1, [r5, #17]
 800235e:	f000 fa09 	bl	8002774 <.text_7>
 8002362:	4644      	mov	r4, r8
 8002364:	f000 fa4d 	bl	8002802 <.text_20+0x6>
 8002368:	e70d      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800236a:	9400      	str	r4, [sp, #0]
 800236c:	2343      	movs	r3, #67	; 0x43
 800236e:	2207      	movs	r2, #7
 8002370:	f000 fa40 	bl	80027f4 <.text_19>
 8002374:	2800      	cmp	r0, #0
 8002376:	d117      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002378:	2006      	movs	r0, #6
 800237a:	f000 f9f2 	bl	8002762 <.text_5>
 800237e:	210b      	movs	r1, #11
 8002380:	e7d8      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 8002382:	f000 f9fb 	bl	800277c <.text_8>
 8002386:	bf02      	ittt	eq
 8002388:	88b0      	ldrheq	r0, [r6, #4]
 800238a:	ea0a 0000 	andeq.w	r0, sl, r0
 800238e:	2806      	cmpeq	r0, #6
 8002390:	d10a      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002392:	7c28      	ldrb	r0, [r5, #16]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	f7fe f8de 	bl	8000556 <USBPD_PE_Notification>
 800239a:	2003      	movs	r0, #3
 800239c:	7468      	strb	r0, [r5, #17]
 800239e:	f000 f9f1 	bl	8002784 <.text_9>
 80023a2:	d001      	beq.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 80023a4:	f000 fa2a 	bl	80027fc <.text_20>
 80023a8:	e5ec      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023aa:	2000      	movs	r0, #0
 80023ac:	9000      	str	r0, [sp, #0]
 80023ae:	2303      	movs	r3, #3
 80023b0:	2204      	movs	r2, #4
 80023b2:	f000 fa20 	bl	80027f6 <.text_19+0x2>
 80023b6:	e5e5      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023b8:	2804      	cmp	r0, #4
 80023ba:	d006      	beq.n	80023ca <USBPD_PE_StateMachine_SNK+0x6da>
 80023bc:	2000      	movs	r0, #0
 80023be:	7728      	strb	r0, [r5, #28]
 80023c0:	2104      	movs	r1, #4
 80023c2:	7469      	strb	r1, [r5, #17]
 80023c4:	2120      	movs	r1, #32
 80023c6:	f000 fa12 	bl	80027ee <.text_18>
 80023ca:	a903      	add	r1, sp, #12
 80023cc:	4628      	mov	r0, r5
 80023ce:	f000 fa1b 	bl	8002808 <PE_StateMachine_SNK_ReadyWait>
 80023d2:	e5d6      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80023d4:	68a8      	ldr	r0, [r5, #8]
 80023d6:	6881      	ldr	r1, [r0, #8]
 80023d8:	b339      	cbz	r1, 800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80023de:	4788      	blx	r1
 80023e0:	280a      	cmp	r0, #10
 80023e2:	d002      	beq.n	80023ea <USBPD_PE_StateMachine_SNK+0x6fa>
 80023e4:	280d      	cmp	r0, #13
 80023e6:	d01a      	beq.n	800241e <USBPD_PE_StateMachine_SNK+0x72e>
 80023e8:	e01f      	b.n	800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023ea:	f000 f9b6 	bl	800275a <.text_4>
 80023ee:	2201      	movs	r2, #1
 80023f0:	2100      	movs	r1, #0
 80023f2:	47b0      	blx	r6
 80023f4:	2000      	movs	r0, #0
 80023f6:	9000      	str	r0, [sp, #0]
 80023f8:	2359      	movs	r3, #89	; 0x59
 80023fa:	2203      	movs	r2, #3
 80023fc:	f000 f9fa 	bl	80027f4 <.text_19>
 8002400:	2800      	cmp	r0, #0
 8002402:	d10b      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002404:	2008      	movs	r0, #8
 8002406:	7728      	strb	r0, [r5, #28]
 8002408:	2206      	movs	r2, #6
 800240a:	f000 f9c0 	bl	800278e <.text_10>
 800240e:	2100      	movs	r1, #0
 8002410:	68ab      	ldr	r3, [r5, #8]
 8002412:	7c28      	ldrb	r0, [r5, #16]
 8002414:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002416:	47a0      	blx	r4
 8002418:	f000 f999 	bl	800274e <.text_3>
 800241c:	e5b2      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800241e:	2000      	movs	r0, #0
 8002420:	9000      	str	r0, [sp, #0]
 8002422:	2303      	movs	r3, #3
 8002424:	220c      	movs	r2, #12
 8002426:	2100      	movs	r1, #0
 8002428:	e7c3      	b.n	80023b2 <USBPD_PE_StateMachine_SNK+0x6c2>
 800242a:	202a      	movs	r0, #42	; 0x2a
 800242c:	e644      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 800242e:	f000 f9a5 	bl	800277c <.text_8>
 8002432:	bf02      	ittt	eq
 8002434:	88b0      	ldrheq	r0, [r6, #4]
 8002436:	ea0a 0000 	andeq.w	r0, sl, r0
 800243a:	2806      	cmpeq	r0, #6
 800243c:	d110      	bne.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 800243e:	7f28      	ldrb	r0, [r5, #28]
 8002440:	2809      	cmp	r0, #9
 8002442:	d003      	beq.n	800244c <USBPD_PE_StateMachine_SNK+0x75c>
 8002444:	f000 f989 	bl	800275a <.text_4>
 8002448:	2209      	movs	r2, #9
 800244a:	47b0      	blx	r6
 800244c:	2053      	movs	r0, #83	; 0x53
 800244e:	7468      	strb	r0, [r5, #17]
 8002450:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002454:	2914      	cmp	r1, #20
 8002456:	d003      	beq.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 8002458:	f000 f98c 	bl	8002774 <.text_7>
 800245c:	f000 f9d1 	bl	8002802 <.text_20+0x6>
 8002460:	f000 f984 	bl	800276c <.text_6>
 8002464:	d1da      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002466:	68ab      	ldr	r3, [r5, #8]
 8002468:	7c28      	ldrb	r0, [r5, #16]
 800246a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800246c:	220f      	movs	r2, #15
 800246e:	2100      	movs	r1, #0
 8002470:	47a0      	blx	r4
 8002472:	68a9      	ldr	r1, [r5, #8]
 8002474:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002476:	2800      	cmp	r0, #0
 8002478:	f43f ae0d 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800247c:	2192      	movs	r1, #146	; 0x92
 800247e:	e60b      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002480:	f000 f9b1 	bl	80027e6 <.text_17>
 8002484:	f000 f969 	bl	800275a <.text_4>
 8002488:	220a      	movs	r2, #10
 800248a:	2100      	movs	r1, #0
 800248c:	47b0      	blx	r6
 800248e:	6868      	ldr	r0, [r5, #4]
 8002490:	7801      	ldrb	r1, [r0, #0]
 8002492:	f001 0103 	and.w	r1, r1, #3
 8002496:	2902      	cmp	r1, #2
 8002498:	bf04      	itt	eq
 800249a:	7c28      	ldrbeq	r0, [r5, #16]
 800249c:	f002 fdc5 	bleq	800502a <USBPD_PRL_SRCSetSinkNG>
 80024a0:	2101      	movs	r1, #1
 80024a2:	4628      	mov	r0, r5
 80024a4:	f7fe fa46 	bl	8000934 <PE_ChangePowerRole>
 80024a8:	7f28      	ldrb	r0, [r5, #28]
 80024aa:	2809      	cmp	r0, #9
 80024ac:	d004      	beq.n	80024b8 <USBPD_PE_StateMachine_SNK+0x7c8>
 80024ae:	f000 f954 	bl	800275a <.text_4>
 80024b2:	220b      	movs	r2, #11
 80024b4:	2101      	movs	r1, #1
 80024b6:	47b0      	blx	r6
 80024b8:	2000      	movs	r0, #0
 80024ba:	9000      	str	r0, [sp, #0]
 80024bc:	235b      	movs	r3, #91	; 0x5b
 80024be:	2206      	movs	r2, #6
 80024c0:	f000 f998 	bl	80027f4 <.text_19>
 80024c4:	b948      	cbnz	r0, 80024da <USBPD_PE_StateMachine_SNK+0x7ea>
 80024c6:	68ab      	ldr	r3, [r5, #8]
 80024c8:	7c28      	ldrb	r0, [r5, #16]
 80024ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80024cc:	220c      	movs	r2, #12
 80024ce:	2100      	movs	r1, #0
 80024d0:	47a0      	blx	r4
 80024d2:	f248 0014 	movw	r0, #32788	; 0x8014
 80024d6:	83e8      	strh	r0, [r5, #30]
 80024d8:	2414      	movs	r4, #20
 80024da:	7c68      	ldrb	r0, [r5, #17]
 80024dc:	285b      	cmp	r0, #91	; 0x5b
 80024de:	d00d      	beq.n	80024fc <USBPD_PE_StateMachine_SNK+0x80c>
 80024e0:	2100      	movs	r1, #0
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7fe fa26 	bl	8000934 <PE_ChangePowerRole>
 80024e8:	f000 f937 	bl	800275a <.text_4>
 80024ec:	2206      	movs	r2, #6
 80024ee:	2101      	movs	r1, #1
 80024f0:	47b0      	blx	r6
 80024f2:	2207      	movs	r2, #7
 80024f4:	f000 f931 	bl	800275a <.text_4>
 80024f8:	2100      	movs	r1, #0
 80024fa:	47b0      	blx	r6
 80024fc:	e542      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80024fe:	9400      	str	r4, [sp, #0]
 8002500:	2358      	movs	r3, #88	; 0x58
 8002502:	220a      	movs	r2, #10
 8002504:	f000 f977 	bl	80027f6 <.text_19+0x2>
 8002508:	b920      	cbnz	r0, 8002514 <USBPD_PE_StateMachine_SNK+0x824>
 800250a:	2008      	movs	r0, #8
 800250c:	f000 f929 	bl	8002762 <.text_5>
 8002510:	2202      	movs	r2, #2
 8002512:	e7ef      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002514:	220f      	movs	r2, #15
 8002516:	e7ed      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002518:	f000 f930 	bl	800277c <.text_8>
 800251c:	bf04      	itt	eq
 800251e:	88b0      	ldrheq	r0, [r6, #4]
 8002520:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8002524:	d109      	bne.n	800253a <USBPD_PE_StateMachine_SNK+0x84a>
 8002526:	f000 001f 	and.w	r0, r0, #31
 800252a:	2803      	cmp	r0, #3
 800252c:	d006      	beq.n	800253c <USBPD_PE_StateMachine_SNK+0x84c>
 800252e:	2804      	cmp	r0, #4
 8002530:	d020      	beq.n	8002574 <USBPD_PE_StateMachine_SNK+0x884>
 8002532:	280c      	cmp	r0, #12
 8002534:	d01c      	beq.n	8002570 <USBPD_PE_StateMachine_SNK+0x880>
 8002536:	2810      	cmp	r0, #16
 8002538:	d023      	beq.n	8002582 <USBPD_PE_StateMachine_SNK+0x892>
 800253a:	e087      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800253c:	f000 f927 	bl	800278e <.text_10>
 8002540:	f000 f905 	bl	800274e <.text_3>
 8002544:	7f28      	ldrb	r0, [r5, #28]
 8002546:	2809      	cmp	r0, #9
 8002548:	d004      	beq.n	8002554 <USBPD_PE_StateMachine_SNK+0x864>
 800254a:	f000 f906 	bl	800275a <.text_4>
 800254e:	2206      	movs	r2, #6
 8002550:	2100      	movs	r1, #0
 8002552:	47b0      	blx	r6
 8002554:	f000 f947 	bl	80027e6 <.text_17>
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	213a      	movs	r1, #58	; 0x3a
 800255c:	f7fd fffb 	bl	8000556 <USBPD_PE_Notification>
 8002560:	f000 f911 	bl	8002786 <.text_9+0x2>
 8002564:	d001      	beq.n	800256a <USBPD_PE_StateMachine_SNK+0x87a>
 8002566:	f000 f949 	bl	80027fc <.text_20>
 800256a:	2059      	movs	r0, #89	; 0x59
 800256c:	7468      	strb	r0, [r5, #17]
 800256e:	e06d      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002570:	213b      	movs	r1, #59	; 0x3b
 8002572:	e000      	b.n	8002576 <USBPD_PE_StateMachine_SNK+0x886>
 8002574:	2116      	movs	r1, #22
 8002576:	f000 f93a 	bl	80027ee <.text_18>
 800257a:	f000 f904 	bl	8002786 <.text_9+0x2>
 800257e:	d107      	bne.n	8002590 <USBPD_PE_StateMachine_SNK+0x8a0>
 8002580:	e061      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002582:	7c28      	ldrb	r0, [r5, #16]
 8002584:	2117      	movs	r1, #23
 8002586:	f7fd ffe6 	bl	8000556 <USBPD_PE_Notification>
 800258a:	f000 f8fc 	bl	8002786 <.text_9+0x2>
 800258e:	d05a      	beq.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002590:	f000 f934 	bl	80027fc <.text_20>
 8002594:	e057      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002596:	9104      	str	r1, [sp, #16]
 8002598:	ab04      	add	r3, sp, #16
 800259a:	68ae      	ldr	r6, [r5, #8]
 800259c:	7c28      	ldrb	r0, [r5, #16]
 800259e:	6977      	ldr	r7, [r6, #20]
 80025a0:	aa05      	add	r2, sp, #20
 80025a2:	47b8      	blx	r7
 80025a4:	9804      	ldr	r0, [sp, #16]
 80025a6:	2104      	movs	r1, #4
 80025a8:	f7fe fefe 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80025ac:	b110      	cbz	r0, 80025b4 <USBPD_PE_StateMachine_SNK+0x8c4>
 80025ae:	2003      	movs	r0, #3
 80025b0:	7468      	strb	r0, [r5, #17]
 80025b2:	e4e7      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025b4:	9a04      	ldr	r2, [sp, #16]
 80025b6:	2003      	movs	r0, #3
 80025b8:	0892      	lsrs	r2, r2, #2
 80025ba:	2100      	movs	r1, #0
 80025bc:	9001      	str	r0, [sp, #4]
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	9102      	str	r1, [sp, #8]
 80025c2:	ab05      	add	r3, sp, #20
 80025c4:	2201      	movs	r2, #1
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7fe ff7b 	bl	80014c2 <PE_Send_DataMessage>
 80025cc:	e4da      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025ce:	2000      	movs	r0, #0
 80025d0:	2103      	movs	r1, #3
 80025d2:	2201      	movs	r2, #1
 80025d4:	9002      	str	r0, [sp, #8]
 80025d6:	9101      	str	r1, [sp, #4]
 80025d8:	9200      	str	r2, [sp, #0]
 80025da:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 80025de:	2206      	movs	r2, #6
 80025e0:	2100      	movs	r1, #0
 80025e2:	4628      	mov	r0, r5
 80025e4:	f7fe ff6d 	bl	80014c2 <PE_Send_DataMessage>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d1ef      	bne.n	80025cc <USBPD_PE_StateMachine_SNK+0x8dc>
 80025ec:	215d      	movs	r1, #93	; 0x5d
 80025ee:	e6a1      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 80025f0:	9400      	str	r4, [sp, #0]
 80025f2:	2366      	movs	r3, #102	; 0x66
 80025f4:	2214      	movs	r2, #20
 80025f6:	f000 f8fe 	bl	80027f6 <.text_19+0x2>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d107      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 80025fe:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002602:	214a      	movs	r1, #74	; 0x4a
 8002604:	f000 f8f3 	bl	80027ee <.text_18>
 8002608:	200b      	movs	r0, #11
 800260a:	241b      	movs	r4, #27
 800260c:	7728      	strb	r0, [r5, #28]
 800260e:	e4b9      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002610:	f000 f8b4 	bl	800277c <.text_8>
 8002614:	d11a      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002616:	88b1      	ldrh	r1, [r6, #4]
 8002618:	0bc8      	lsrs	r0, r1, #15
 800261a:	d017      	beq.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800261c:	f001 011f 	and.w	r1, r1, #31
 8002620:	290c      	cmp	r1, #12
 8002622:	d113      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002624:	68b0      	ldr	r0, [r6, #8]
 8002626:	68ac      	ldr	r4, [r5, #8]
 8002628:	69a6      	ldr	r6, [r4, #24]
 800262a:	1d02      	adds	r2, r0, #4
 800262c:	7c28      	ldrb	r0, [r5, #16]
 800262e:	2304      	movs	r3, #4
 8002630:	210a      	movs	r1, #10
 8002632:	47b0      	blx	r6
 8002634:	f000 f8a7 	bl	8002786 <.text_9+0x2>
 8002638:	d001      	beq.n	800263e <USBPD_PE_StateMachine_SNK+0x94e>
 800263a:	f000 f8df 	bl	80027fc <.text_20>
 800263e:	7c28      	ldrb	r0, [r5, #16]
 8002640:	214b      	movs	r1, #75	; 0x4b
 8002642:	f7fd ff88 	bl	8000556 <USBPD_PE_Notification>
 8002646:	2003      	movs	r0, #3
 8002648:	7468      	strb	r0, [r5, #17]
 800264a:	2400      	movs	r4, #0
 800264c:	f000 f88e 	bl	800276c <.text_6>
 8002650:	d1dd      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002652:	e02c      	b.n	80026ae <USBPD_PE_StateMachine_SNK+0x9be>
 8002654:	9400      	str	r4, [sp, #0]
 8002656:	2339      	movs	r3, #57	; 0x39
 8002658:	783a      	ldrb	r2, [r7, #0]
 800265a:	f000 f8cb 	bl	80027f4 <.text_19>
 800265e:	2800      	cmp	r0, #0
 8002660:	d1d5      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002662:	7878      	ldrb	r0, [r7, #1]
 8002664:	7728      	strb	r0, [r5, #28]
 8002666:	2144      	movs	r1, #68	; 0x44
 8002668:	f000 f8c1 	bl	80027ee <.text_18>
 800266c:	e53d      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 800266e:	f000 f88a 	bl	8002786 <.text_9+0x2>
 8002672:	d019      	beq.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002674:	88b0      	ldrh	r0, [r6, #4]
 8002676:	0bc0      	lsrs	r0, r0, #15
 8002678:	d009      	beq.n	800268e <USBPD_PE_StateMachine_SNK+0x99e>
 800267a:	4628      	mov	r0, r5
 800267c:	f7fe ff5e 	bl	800153c <PE_Check_ExtendedMessage>
 8002680:	f000 f881 	bl	8002786 <.text_9+0x2>
 8002684:	d001      	beq.n	800268a <USBPD_PE_StateMachine_SNK+0x99a>
 8002686:	f000 f8b9 	bl	80027fc <.text_20>
 800268a:	2000      	movs	r0, #0
 800268c:	83e8      	strh	r0, [r5, #30]
 800268e:	88b0      	ldrh	r0, [r6, #4]
 8002690:	ea0a 0000 	and.w	r0, sl, r0
 8002694:	2810      	cmp	r0, #16
 8002696:	d107      	bne.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002698:	2103      	movs	r1, #3
 800269a:	7469      	strb	r1, [r5, #17]
 800269c:	f000 f872 	bl	8002784 <.text_9>
 80026a0:	d001      	beq.n	80026a6 <USBPD_PE_StateMachine_SNK+0x9b6>
 80026a2:	f000 f8ab 	bl	80027fc <.text_20>
 80026a6:	83ec      	strh	r4, [r5, #30]
 80026a8:	f000 f860 	bl	800276c <.text_6>
 80026ac:	d119      	bne.n	80026e2 <USBPD_PE_StateMachine_SNK+0x9f2>
 80026ae:	2103      	movs	r1, #3
 80026b0:	e4f2      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7ff f84b 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80026b8:	e463      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026ba:	a903      	add	r1, sp, #12
 80026bc:	4628      	mov	r0, r5
 80026be:	f7fe fb7b 	bl	8000db8 <PE_SubStateMachine_Generic>
 80026c2:	e45e      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026c4:	a903      	add	r1, sp, #12
 80026c6:	4628      	mov	r0, r5
 80026c8:	f001 f98b 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80026cc:	4604      	mov	r4, r0
 80026ce:	f000 f87a 	bl	80027c6 <.text_14>
 80026d2:	bf0e      	itee	eq
 80026d4:	2101      	moveq	r1, #1
 80026d6:	6828      	ldrne	r0, [r5, #0]
 80026d8:	6801      	ldrne	r1, [r0, #0]
 80026da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80026de:	f002 fcb7 	bl	8005050 <USBPD_PRL_SOPCapability>
 80026e2:	e44f      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026e4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80026e8:	4628      	mov	r0, r5
 80026ea:	f002 fa6e 	bl	8004bca <PE_StateMachine_UVDM>
 80026ee:	e449      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026f0:	2000      	movs	r0, #0
 80026f2:	9000      	str	r0, [sp, #0]
 80026f4:	2358      	movs	r3, #88	; 0x58
 80026f6:	2213      	movs	r2, #19
 80026f8:	f000 f87d 	bl	80027f6 <.text_19+0x2>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d1f6      	bne.n	80026ee <USBPD_PE_StateMachine_SNK+0x9fe>
 8002700:	2009      	movs	r0, #9
 8002702:	7728      	strb	r0, [r5, #28]
 8002704:	e4f1      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 8002706:	6968      	ldr	r0, [r5, #20]
 8002708:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800270c:	b1b8      	cbz	r0, 800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 800270e:	6968      	ldr	r0, [r5, #20]
 8002710:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002714:	b138      	cbz	r0, 8002726 <USBPD_PE_StateMachine_SNK+0xa36>
 8002716:	7c28      	ldrb	r0, [r5, #16]
 8002718:	215b      	movs	r1, #91	; 0x5b
 800271a:	f7fd ff1c 	bl	8000556 <USBPD_PE_Notification>
 800271e:	6968      	ldr	r0, [r5, #20]
 8002720:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8002724:	6168      	str	r0, [r5, #20]
 8002726:	2003      	movs	r0, #3
 8002728:	7ca9      	ldrb	r1, [r5, #18]
 800272a:	7468      	strb	r0, [r5, #17]
 800272c:	2903      	cmp	r1, #3
 800272e:	d005      	beq.n	800273c <USBPD_PE_StateMachine_SNK+0xa4c>
 8002730:	74a8      	strb	r0, [r5, #18]
 8002732:	f000 f832 	bl	800279a <.text_11>
 8002736:	2203      	movs	r2, #3
 8002738:	2004      	movs	r0, #4
 800273a:	47a0      	blx	r4
 800273c:	2401      	movs	r4, #1
 800273e:	6968      	ldr	r0, [r5, #20]
 8002740:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8002744:	2c00      	cmp	r4, #0
 8002746:	6168      	str	r0, [r5, #20]
 8002748:	f43f ab29 	beq.w	8001d9e <USBPD_PE_StateMachine_SNK+0xae>
 800274c:	e441      	b.n	8001fd2 <USBPD_PE_StateMachine_SNK+0x2e2>

0800274e <.text_3>:
 800274e:	f248 3084 	movw	r0, #33668	; 0x8384
 8002752:	83e8      	strh	r0, [r5, #30]
 8002754:	f44f 7461 	mov.w	r4, #900	; 0x384
 8002758:	4770      	bx	lr

0800275a <.text_4>:
 800275a:	68ab      	ldr	r3, [r5, #8]
 800275c:	7c28      	ldrb	r0, [r5, #16]
 800275e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8002760:	4770      	bx	lr

08002762 <.text_5>:
 8002762:	7728      	strb	r0, [r5, #28]
 8002764:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002768:	241b      	movs	r4, #27
 800276a:	4770      	bx	lr

0800276c <.text_6>:
 800276c:	8be8      	ldrh	r0, [r5, #30]
 800276e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002772:	4770      	bx	lr

08002774 <.text_7>:
 8002774:	2014      	movs	r0, #20
 8002776:	f88d 000c 	strb.w	r0, [sp, #12]
 800277a:	4770      	bx	lr

0800277c <.text_8>:
 800277c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002780:	2811      	cmp	r0, #17
 8002782:	4770      	bx	lr

08002784 <.text_9>:
 8002784:	2400      	movs	r4, #0
 8002786:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800278a:	2814      	cmp	r0, #20
 800278c:	4770      	bx	lr

0800278e <.text_10>:
 800278e:	6868      	ldr	r0, [r5, #4]
 8002790:	6801      	ldr	r1, [r0, #0]
 8002792:	f041 0110 	orr.w	r1, r1, #16
 8002796:	6001      	str	r1, [r0, #0]
 8002798:	4770      	bx	lr

0800279a <.text_11>:
 800279a:	2100      	movs	r1, #0
 800279c:	9100      	str	r1, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	7c29      	ldrb	r1, [r5, #16]
 80027a2:	6834      	ldr	r4, [r6, #0]
 80027a4:	4770      	bx	lr

080027a6 <.text_12>:
 80027a6:	2100      	movs	r1, #0
 80027a8:	9100      	str	r1, [sp, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	4e5e      	ldr	r6, [pc, #376]	; (8002928 <.text_23>)
 80027ae:	7c29      	ldrb	r1, [r5, #16]
 80027b0:	6837      	ldr	r7, [r6, #0]
 80027b2:	4770      	bx	lr

080027b4 <.text_13>:
 80027b4:	74a8      	strb	r0, [r5, #18]
 80027b6:	2100      	movs	r1, #0
 80027b8:	9100      	str	r1, [sp, #0]
 80027ba:	2300      	movs	r3, #0
 80027bc:	4f5a      	ldr	r7, [pc, #360]	; (8002928 <.text_23>)
 80027be:	7c29      	ldrb	r1, [r5, #16]
 80027c0:	f8d7 c000 	ldr.w	ip, [r7]
 80027c4:	4770      	bx	lr

080027c6 <.text_14>:
 80027c6:	6868      	ldr	r0, [r5, #4]
 80027c8:	6801      	ldr	r1, [r0, #0]
 80027ca:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80027ce:	2800      	cmp	r0, #0
 80027d0:	4770      	bx	lr

080027d2 <.text_15>:
 80027d2:	6868      	ldr	r0, [r5, #4]
 80027d4:	6801      	ldr	r1, [r0, #0]
 80027d6:	f021 0110 	bic.w	r1, r1, #16
 80027da:	6001      	str	r1, [r0, #0]
 80027dc:	4770      	bx	lr

080027de <.text_16>:
 80027de:	2101      	movs	r1, #1
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7fe bd98 	b.w	8001316 <PE_CallHardResetCallback>

080027e6 <.text_17>:
 80027e6:	2104      	movs	r1, #4
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe bd9b 	b.w	8001324 <PE_SetPowerNegotiation>

080027ee <.text_18>:
 80027ee:	7c28      	ldrb	r0, [r5, #16]
 80027f0:	f7fd beb1 	b.w	8000556 <USBPD_PE_Notification>

080027f4 <.text_19>:
 80027f4:	2100      	movs	r1, #0
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7fe be36 	b.w	8001468 <PE_Send_CtrlMessage>

080027fc <.text_20>:
 80027fc:	2114      	movs	r1, #20
 80027fe:	f88d 100c 	strb.w	r1, [sp, #12]
 8002802:	4628      	mov	r0, r5
 8002804:	f7fe b8d2 	b.w	80009ac <PE_Clear_RxEvent>

08002808 <PE_StateMachine_SNK_ReadyWait>:
 8002808:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800280a:	460e      	mov	r6, r1
 800280c:	4604      	mov	r4, r0
 800280e:	7830      	ldrb	r0, [r6, #0]
 8002810:	2502      	movs	r5, #2
 8002812:	2814      	cmp	r0, #20
 8002814:	d00b      	beq.n	800282e <PE_StateMachine_SNK_ReadyWait+0x26>
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff f894 	bl	8001944 <PE_ManageRXEvent>
 800281c:	7830      	ldrb	r0, [r6, #0]
 800281e:	2814      	cmp	r0, #20
 8002820:	d07d      	beq.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002822:	2114      	movs	r1, #20
 8002824:	7031      	strb	r1, [r6, #0]
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe f8c0 	bl	80009ac <PE_Clear_RxEvent>
 800282c:	e077      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800282e:	6961      	ldr	r1, [r4, #20]
 8002830:	0cc8      	lsrs	r0, r1, #19
 8002832:	f504 7518 	add.w	r5, r4, #608	; 0x260
 8002836:	d027      	beq.n	8002888 <PE_StateMachine_SNK_ReadyWait+0x80>
 8002838:	8c20      	ldrh	r0, [r4, #32]
 800283a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800283e:	d10e      	bne.n	800285e <PE_StateMachine_SNK_ReadyWait+0x56>
 8002840:	210f      	movs	r1, #15
 8002842:	7461      	strb	r1, [r4, #17]
 8002844:	2000      	movs	r0, #0
 8002846:	9000      	str	r0, [sp, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	7c21      	ldrb	r1, [r4, #16]
 800284c:	4c36      	ldr	r4, [pc, #216]	; (8002928 <.text_23>)
 800284e:	6826      	ldr	r6, [r4, #0]
 8002850:	2270      	movs	r2, #112	; 0x70
 8002852:	2009      	movs	r0, #9
 8002854:	47b0      	blx	r6
 8002856:	7828      	ldrb	r0, [r5, #0]
 8002858:	1c40      	adds	r0, r0, #1
 800285a:	7028      	strb	r0, [r5, #0]
 800285c:	e054      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 800285e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002860:	6962      	ldr	r2, [r4, #20]
 8002862:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8002866:	2033      	movs	r0, #51	; 0x33
 8002868:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 800286c:	fb11 f100 	smulbb	r1, r1, r0
 8002870:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002874:	8421      	strh	r1, [r4, #32]
 8002876:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002878:	6962      	ldr	r2, [r4, #20]
 800287a:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800287e:	eb01 45d2 	add.w	r5, r1, r2, lsr #19
 8002882:	4345      	muls	r5, r0
 8002884:	b2ad      	uxth	r5, r5
 8002886:	e04a      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002888:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800288a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800288e:	d106      	bne.n	800289e <PE_StateMachine_SNK_ReadyWait+0x96>
 8002890:	2245      	movs	r2, #69	; 0x45
 8002892:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002896:	7462      	strb	r2, [r4, #17]
 8002898:	2500      	movs	r5, #0
 800289a:	6161      	str	r1, [r4, #20]
 800289c:	e03f      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800289e:	7c20      	ldrb	r0, [r4, #16]
 80028a0:	f7fe f8a9 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80028a4:	f104 0631 	add.w	r6, r4, #49	; 0x31
 80028a8:	bb18      	cbnz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028aa:	7870      	ldrb	r0, [r6, #1]
 80028ac:	b308      	cbz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028ae:	6860      	ldr	r0, [r4, #4]
 80028b0:	6800      	ldr	r0, [r0, #0]
 80028b2:	f000 0103 	and.w	r1, r0, #3
 80028b6:	2901      	cmp	r1, #1
 80028b8:	d008      	beq.n	80028cc <PE_StateMachine_SNK_ReadyWait+0xc4>
 80028ba:	f000 0003 	and.w	r0, r0, #3
 80028be:	2802      	cmp	r0, #2
 80028c0:	d117      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028c2:	7c20      	ldrb	r0, [r4, #16]
 80028c4:	f002 fbbe 	bl	8005044 <USBPD_PRL_IsResistor_SinkTxOK>
 80028c8:	2801      	cmp	r0, #1
 80028ca:	d112      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028cc:	78b0      	ldrb	r0, [r6, #2]
 80028ce:	7030      	strb	r0, [r6, #0]
 80028d0:	7870      	ldrb	r0, [r6, #1]
 80028d2:	7460      	strb	r0, [r4, #17]
 80028d4:	2845      	cmp	r0, #69	; 0x45
 80028d6:	d103      	bne.n	80028e0 <PE_StateMachine_SNK_ReadyWait+0xd8>
 80028d8:	6960      	ldr	r0, [r4, #20]
 80028da:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80028de:	6160      	str	r0, [r4, #20]
 80028e0:	2000      	movs	r0, #0
 80028e2:	7070      	strb	r0, [r6, #1]
 80028e4:	6960      	ldr	r0, [r4, #20]
 80028e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028e8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80028ea:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 80028ee:	6160      	str	r0, [r4, #20]
 80028f0:	e00a      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 80028f2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80028f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80028f8:	d108      	bne.n	800290c <PE_StateMachine_SNK_ReadyWait+0x104>
 80028fa:	2100      	movs	r1, #0
 80028fc:	8461      	strh	r1, [r4, #34]	; 0x22
 80028fe:	2105      	movs	r1, #5
 8002900:	78a8      	ldrb	r0, [r5, #2]
 8002902:	1c40      	adds	r0, r0, #1
 8002904:	70a8      	strb	r0, [r5, #2]
 8002906:	7461      	strb	r1, [r4, #17]
 8002908:	2500      	movs	r5, #0
 800290a:	e008      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800290c:	4620      	mov	r0, r4
 800290e:	f7fe fd23 	bl	8001358 <PE_CalculateMinTiming>
 8002912:	4605      	mov	r5, r0
 8002914:	7870      	ldrb	r0, [r6, #1]
 8002916:	b110      	cbz	r0, 800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002918:	2d02      	cmp	r5, #2
 800291a:	bf28      	it	cs
 800291c:	2502      	movcs	r5, #2
 800291e:	4628      	mov	r0, r5
 8002920:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08002924 <.text_22>:
 8002924:	20000444 	.word	0x20000444

08002928 <.text_23>:
 8002928:	20000000 	.word	0x20000000

0800292c <USBPD_PE_StateMachine_SRC>:
 800292c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002930:	4680      	mov	r8, r0
 8002932:	481a      	ldr	r0, [pc, #104]	; (800299c <USBPD_PE_StateMachine_SRC+0x70>)
 8002934:	b086      	sub	sp, #24
 8002936:	4641      	mov	r1, r8
 8002938:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
 800293c:	7c70      	ldrb	r0, [r6, #17]
 800293e:	2848      	cmp	r0, #72	; 0x48
 8002940:	d136      	bne.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002942:	4630      	mov	r0, r6
 8002944:	f7fe f90b 	bl	8000b5e <PE_Reset_ZI>
 8002948:	4630      	mov	r0, r6
 800294a:	f7fe f942 	bl	8000bd2 <PE_Reset_Counter>
 800294e:	6830      	ldr	r0, [r6, #0]
 8002950:	7903      	ldrb	r3, [r0, #4]
 8002952:	7c30      	ldrb	r0, [r6, #16]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2201      	movs	r2, #1
 800295a:	2101      	movs	r1, #1
 800295c:	f002 fb21 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8002960:	6870      	ldr	r0, [r6, #4]
 8002962:	6801      	ldr	r1, [r0, #0]
 8002964:	f041 0108 	orr.w	r1, r1, #8
 8002968:	6001      	str	r1, [r0, #0]
 800296a:	6830      	ldr	r0, [r6, #0]
 800296c:	6841      	ldr	r1, [r0, #4]
 800296e:	6870      	ldr	r0, [r6, #4]
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	f361 0201 	bfi	r2, r1, #0, #2
 8002976:	6002      	str	r2, [r0, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	7c30      	ldrb	r0, [r6, #16]
 800297c:	f002 fb68 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002980:	7c30      	ldrb	r0, [r6, #16]
 8002982:	f002 fdda 	bl	800553a <USBPD_PRL_Reset>
 8002986:	7cb1      	ldrb	r1, [r6, #18]
 8002988:	2002      	movs	r0, #2
 800298a:	2902      	cmp	r1, #2
 800298c:	7470      	strb	r0, [r6, #17]
 800298e:	d00f      	beq.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002990:	74b0      	strb	r0, [r6, #18]
 8002992:	2100      	movs	r1, #0
 8002994:	9100      	str	r1, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	4c01      	ldr	r4, [pc, #4]	; (80029a0 <USBPD_PE_StateMachine_SRC+0x74>)
 800299a:	e003      	b.n	80029a4 <USBPD_PE_StateMachine_SRC+0x78>
 800299c:	20000444 	.word	0x20000444
 80029a0:	20000000 	.word	0x20000000
 80029a4:	7c31      	ldrb	r1, [r6, #16]
 80029a6:	f8d4 9000 	ldr.w	r9, [r4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	2004      	movs	r0, #4
 80029ae:	47c8      	blx	r9
 80029b0:	6970      	ldr	r0, [r6, #20]
 80029b2:	f3c0 4080 	ubfx	r0, r0, #18, #1
 80029b6:	b130      	cbz	r0, 80029c6 <USBPD_PE_StateMachine_SRC+0x9a>
 80029b8:	6970      	ldr	r0, [r6, #20]
 80029ba:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80029be:	6170      	str	r0, [r6, #20]
 80029c0:	2164      	movs	r1, #100	; 0x64
 80029c2:	f000 feab 	bl	800371c <.text_17>
 80029c6:	4630      	mov	r0, r6
 80029c8:	f7fd ffbc 	bl	8000944 <PE_Get_RxEvent>
 80029cc:	2803      	cmp	r0, #3
 80029ce:	f88d 000c 	strb.w	r0, [sp, #12]
 80029d2:	f206 255e 	addw	r5, r6, #606	; 0x25e
 80029d6:	f8df 9ca8 	ldr.w	r9, [pc, #3240]	; 8003680 <.text_3>
 80029da:	f248 0a1b 	movw	sl, #32795	; 0x801b
 80029de:	f248 0b1e 	movw	fp, #32798	; 0x801e
 80029e2:	d103      	bne.n	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 80029e4:	2001      	movs	r0, #1
 80029e6:	b007      	add	sp, #28
 80029e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ec:	6870      	ldr	r0, [r6, #4]
 80029ee:	6801      	ldr	r1, [r0, #0]
 80029f0:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80029f4:	2800      	cmp	r0, #0
 80029f6:	f000 8117 	beq.w	8002c28 <USBPD_PE_StateMachine_SRC+0x2fc>
 80029fa:	6970      	ldr	r0, [r6, #20]
 80029fc:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f106 0730 	add.w	r7, r6, #48	; 0x30
 8002a06:	f000 8119 	beq.w	8002c3c <USBPD_PE_StateMachine_SRC+0x310>
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f002 fb1c 	bl	8005048 <USBPD_PRL_FastRoleSwapSignalling>
 8002a10:	20a6      	movs	r0, #166	; 0xa6
 8002a12:	7470      	strb	r0, [r6, #17]
 8002a14:	2109      	movs	r1, #9
 8002a16:	7731      	strb	r1, [r6, #28]
 8002a18:	2000      	movs	r0, #0
 8002a1a:	70b8      	strb	r0, [r7, #2]
 8002a1c:	f248 0011 	movw	r0, #32785	; 0x8011
 8002a20:	6971      	ldr	r1, [r6, #20]
 8002a22:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8002a26:	6171      	str	r1, [r6, #20]
 8002a28:	84f0      	strh	r0, [r6, #38]	; 0x26
 8002a2a:	7cb1      	ldrb	r1, [r6, #18]
 8002a2c:	29a6      	cmp	r1, #166	; 0xa6
 8002a2e:	f040 80ff 	bne.w	8002c30 <USBPD_PE_StateMachine_SRC+0x304>
 8002a32:	2402      	movs	r4, #2
 8002a34:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a38:	2811      	cmp	r0, #17
 8002a3a:	d11c      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a3c:	6870      	ldr	r0, [r6, #4]
 8002a3e:	6801      	ldr	r1, [r0, #0]
 8002a40:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8002a44:	88b9      	ldrh	r1, [r7, #4]
 8002a46:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8002a4a:	4288      	cmp	r0, r1
 8002a4c:	d113      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a4e:	f000 fe26 	bl	800369e <.text_7>
 8002a52:	f000 fe72 	bl	800373a <.text_20+0x6>
 8002a56:	7cb1      	ldrb	r1, [r6, #18]
 8002a58:	2092      	movs	r0, #146	; 0x92
 8002a5a:	2992      	cmp	r1, #146	; 0x92
 8002a5c:	7470      	strb	r0, [r6, #17]
 8002a5e:	f000 810e 	beq.w	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002a62:	74b0      	strb	r0, [r6, #18]
 8002a64:	2100      	movs	r1, #0
 8002a66:	9100      	str	r1, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	7c31      	ldrb	r1, [r6, #16]
 8002a6c:	f8d9 c000 	ldr.w	ip, [r9]
 8002a70:	2292      	movs	r2, #146	; 0x92
 8002a72:	2004      	movs	r0, #4
 8002a74:	47e0      	blx	ip
 8002a76:	7c71      	ldrb	r1, [r6, #17]
 8002a78:	000a      	movs	r2, r1
 8002a7a:	f24f 001f 	movw	r0, #61471	; 0xf01f
 8002a7e:	f000 80f6 	beq.w	8002c6e <USBPD_PE_StateMachine_SRC+0x342>
 8002a82:	1e4a      	subs	r2, r1, #1
 8002a84:	d06f      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002a86:	1e52      	subs	r2, r2, #1
 8002a88:	f000 8105 	beq.w	8002c96 <USBPD_PE_StateMachine_SRC+0x36a>
 8002a8c:	1e52      	subs	r2, r2, #1
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	f240 84b2 	bls.w	80033f8 <USBPD_PE_StateMachine_SRC+0xacc>
 8002a94:	1e92      	subs	r2, r2, #2
 8002a96:	f000 8143 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002a9a:	1e52      	subs	r2, r2, #1
 8002a9c:	f000 8145 	beq.w	8002d2a <USBPD_PE_StateMachine_SRC+0x3fe>
 8002aa0:	1e52      	subs	r2, r2, #1
 8002aa2:	f000 814a 	beq.w	8002d3a <USBPD_PE_StateMachine_SRC+0x40e>
 8002aa6:	1e52      	subs	r2, r2, #1
 8002aa8:	f000 819d 	beq.w	8002de6 <USBPD_PE_StateMachine_SRC+0x4ba>
 8002aac:	1e52      	subs	r2, r2, #1
 8002aae:	f000 81e3 	beq.w	8002e78 <USBPD_PE_StateMachine_SRC+0x54c>
 8002ab2:	1ed2      	subs	r2, r2, #3
 8002ab4:	f000 8226 	beq.w	8002f04 <USBPD_PE_StateMachine_SRC+0x5d8>
 8002ab8:	1e52      	subs	r2, r2, #1
 8002aba:	f000 8234 	beq.w	8002f26 <USBPD_PE_StateMachine_SRC+0x5fa>
 8002abe:	1e52      	subs	r2, r2, #1
 8002ac0:	f000 80da 	beq.w	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002ac4:	1e52      	subs	r2, r2, #1
 8002ac6:	f000 82a3 	beq.w	8003010 <USBPD_PE_StateMachine_SRC+0x6e4>
 8002aca:	1e52      	subs	r2, r2, #1
 8002acc:	f000 826a 	beq.w	8002fa4 <USBPD_PE_StateMachine_SRC+0x678>
 8002ad0:	1e52      	subs	r2, r2, #1
 8002ad2:	f000 826c 	beq.w	8002fae <USBPD_PE_StateMachine_SRC+0x682>
 8002ad6:	1e52      	subs	r2, r2, #1
 8002ad8:	f000 8277 	beq.w	8002fca <USBPD_PE_StateMachine_SRC+0x69e>
 8002adc:	1e52      	subs	r2, r2, #1
 8002ade:	f000 8303 	beq.w	80030e8 <USBPD_PE_StateMachine_SRC+0x7bc>
 8002ae2:	1e52      	subs	r2, r2, #1
 8002ae4:	f000 82bb 	beq.w	800305e <USBPD_PE_StateMachine_SRC+0x732>
 8002ae8:	1e52      	subs	r2, r2, #1
 8002aea:	f000 82c2 	beq.w	8003072 <USBPD_PE_StateMachine_SRC+0x746>
 8002aee:	1e52      	subs	r2, r2, #1
 8002af0:	f000 8192 	beq.w	8002e18 <USBPD_PE_StateMachine_SRC+0x4ec>
 8002af4:	1e52      	subs	r2, r2, #1
 8002af6:	f000 82d9 	beq.w	80030ac <USBPD_PE_StateMachine_SRC+0x780>
 8002afa:	1e52      	subs	r2, r2, #1
 8002afc:	2a01      	cmp	r2, #1
 8002afe:	d932      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b00:	1e92      	subs	r2, r2, #2
 8002b02:	f000 8314 	beq.w	800312e <USBPD_PE_StateMachine_SRC+0x802>
 8002b06:	1e52      	subs	r2, r2, #1
 8002b08:	f000 831f 	beq.w	800314a <USBPD_PE_StateMachine_SRC+0x81e>
 8002b0c:	1e92      	subs	r2, r2, #2
 8002b0e:	d02a      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b10:	1e52      	subs	r2, r2, #1
 8002b12:	f000 83ce 	beq.w	80032b2 <USBPD_PE_StateMachine_SRC+0x986>
 8002b16:	1e52      	subs	r2, r2, #1
 8002b18:	f000 83dc 	beq.w	80032d4 <USBPD_PE_StateMachine_SRC+0x9a8>
 8002b1c:	1e52      	subs	r2, r2, #1
 8002b1e:	f000 841a 	beq.w	8003356 <USBPD_PE_StateMachine_SRC+0xa2a>
 8002b22:	1e52      	subs	r2, r2, #1
 8002b24:	f000 843a 	beq.w	800339c <USBPD_PE_StateMachine_SRC+0xa70>
 8002b28:	1e52      	subs	r2, r2, #1
 8002b2a:	f000 834a 	beq.w	80031c2 <USBPD_PE_StateMachine_SRC+0x896>
 8002b2e:	1e92      	subs	r2, r2, #2
 8002b30:	f000 8369 	beq.w	8003206 <USBPD_PE_StateMachine_SRC+0x8da>
 8002b34:	1e52      	subs	r2, r2, #1
 8002b36:	f000 8380 	beq.w	800323a <USBPD_PE_StateMachine_SRC+0x90e>
 8002b3a:	1e52      	subs	r2, r2, #1
 8002b3c:	f000 839a 	beq.w	8003274 <USBPD_PE_StateMachine_SRC+0x948>
 8002b40:	1e52      	subs	r2, r2, #1
 8002b42:	2a02      	cmp	r2, #2
 8002b44:	d90f      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b46:	1ed2      	subs	r2, r2, #3
 8002b48:	f000 8359 	beq.w	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 8002b4c:	1e52      	subs	r2, r2, #1
 8002b4e:	f000 84c5 	beq.w	80034dc <USBPD_PE_StateMachine_SRC+0xbb0>
 8002b52:	1e52      	subs	r2, r2, #1
 8002b54:	d007      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b56:	1e52      	subs	r2, r2, #1
 8002b58:	f000 84d1 	beq.w	80034fe <USBPD_PE_StateMachine_SRC+0xbd2>
 8002b5c:	1e52      	subs	r2, r2, #1
 8002b5e:	f000 8500 	beq.w	8003562 <USBPD_PE_StateMachine_SRC+0xc36>
 8002b62:	1e52      	subs	r2, r2, #1
 8002b64:	2a01      	cmp	r2, #1
 8002b66:	f240 8535 	bls.w	80035d4 <USBPD_PE_StateMachine_SRC+0xca8>
 8002b6a:	1e92      	subs	r2, r2, #2
 8002b6c:	d001      	beq.n	8002b72 <USBPD_PE_StateMachine_SRC+0x246>
 8002b6e:	1e92      	subs	r2, r2, #2
 8002b70:	2a05      	cmp	r2, #5
 8002b72:	f240 852b 	bls.w	80035cc <USBPD_PE_StateMachine_SRC+0xca0>
 8002b76:	1f92      	subs	r2, r2, #6
 8002b78:	f000 8503 	beq.w	8003582 <USBPD_PE_StateMachine_SRC+0xc56>
 8002b7c:	1e52      	subs	r2, r2, #1
 8002b7e:	2a03      	cmp	r2, #3
 8002b80:	d9f1      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b82:	3a11      	subs	r2, #17
 8002b84:	d0ef      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b86:	1e52      	subs	r2, r2, #1
 8002b88:	f000 811b 	beq.w	8002dc2 <USBPD_PE_StateMachine_SRC+0x496>
 8002b8c:	3a0f      	subs	r2, #15
 8002b8e:	f000 841c 	beq.w	80033ca <USBPD_PE_StateMachine_SRC+0xa9e>
 8002b92:	1fd2      	subs	r2, r2, #7
 8002b94:	2a01      	cmp	r2, #1
 8002b96:	bf84      	itt	hi
 8002b98:	1f52      	subhi	r2, r2, #5
 8002b9a:	2a01      	cmphi	r2, #1
 8002b9c:	d9e3      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b9e:	3a0d      	subs	r2, #13
 8002ba0:	d0e1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002ba2:	3a12      	subs	r2, #18
 8002ba4:	f000 8542 	beq.w	800362c <USBPD_PE_StateMachine_SRC+0xd00>
 8002ba8:	3a0c      	subs	r2, #12
 8002baa:	d068      	beq.n	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002bac:	1e52      	subs	r2, r2, #1
 8002bae:	2a02      	cmp	r2, #2
 8002bb0:	d9d9      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bb2:	1ed2      	subs	r2, r2, #3
 8002bb4:	f000 81d1 	beq.w	8002f5a <USBPD_PE_StateMachine_SRC+0x62e>
 8002bb8:	1e52      	subs	r2, r2, #1
 8002bba:	f000 81e1 	beq.w	8002f80 <USBPD_PE_StateMachine_SRC+0x654>
 8002bbe:	1e92      	subs	r2, r2, #2
 8002bc0:	d0d1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bc2:	1e52      	subs	r2, r2, #1
 8002bc4:	f000 80ac 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002bc8:	1e92      	subs	r2, r2, #2
 8002bca:	2a08      	cmp	r2, #8
 8002bcc:	f240 8508 	bls.w	80035e0 <USBPD_PE_StateMachine_SRC+0xcb4>
 8002bd0:	3a0a      	subs	r2, #10
 8002bd2:	f000 8514 	beq.w	80035fe <USBPD_PE_StateMachine_SRC+0xcd2>
 8002bd6:	a903      	add	r1, sp, #12
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f001 fa2b 	bl	8004034 <PE_StateMachine_VDM>
 8002bde:	4604      	mov	r4, r0
 8002be0:	7c72      	ldrb	r2, [r6, #17]
 8002be2:	7cb0      	ldrb	r0, [r6, #18]
 8002be4:	4290      	cmp	r0, r2
 8002be6:	d003      	beq.n	8002bf0 <USBPD_PE_StateMachine_SRC+0x2c4>
 8002be8:	74b2      	strb	r2, [r6, #18]
 8002bea:	2100      	movs	r1, #0
 8002bec:	f000 fd62 	bl	80036b4 <.text_9>
 8002bf0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002bf4:	2814      	cmp	r0, #20
 8002bf6:	f000 851f 	beq.w	8003638 <USBPD_PE_StateMachine_SRC+0xd0c>
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f7fd ff17 	bl	8000a2e <PE_Check_AMSConflict>
 8002c00:	2815      	cmp	r0, #21
 8002c02:	d105      	bne.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c04:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c08:	2814      	cmp	r0, #20
 8002c0a:	d001      	beq.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c0c:	f000 fd92 	bl	8003734 <.text_20>
 8002c10:	7c72      	ldrb	r2, [r6, #17]
 8002c12:	7cb0      	ldrb	r0, [r6, #18]
 8002c14:	4290      	cmp	r0, r2
 8002c16:	d004      	beq.n	8002c22 <USBPD_PE_StateMachine_SRC+0x2f6>
 8002c18:	74b2      	strb	r2, [r6, #18]
 8002c1a:	f000 fd53 	bl	80036c4 <.text_10+0x2>
 8002c1e:	2004      	movs	r0, #4
 8002c20:	47a0      	blx	r4
 8002c22:	2400      	movs	r4, #0
 8002c24:	f000 bd23 	b.w	800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8002c28:	f04f 34ff 	mov.w	r4, #4294967295
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	e6da      	b.n	80029e6 <USBPD_PE_StateMachine_SRC+0xba>
 8002c30:	20a6      	movs	r0, #166	; 0xa6
 8002c32:	f000 fd46 	bl	80036c2 <.text_10>
 8002c36:	22a6      	movs	r2, #166	; 0xa6
 8002c38:	2004      	movs	r0, #4
 8002c3a:	47a0      	blx	r4
 8002c3c:	78b8      	ldrb	r0, [r7, #2]
 8002c3e:	2402      	movs	r4, #2
 8002c40:	280f      	cmp	r0, #15
 8002c42:	bf18      	it	ne
 8002c44:	2814      	cmpne	r0, #20
 8002c46:	d111      	bne.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c48:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c4c:	2814      	cmp	r0, #20
 8002c4e:	d001      	beq.n	8002c54 <USBPD_PE_StateMachine_SRC+0x328>
 8002c50:	f000 fd70 	bl	8003734 <.text_20>
 8002c54:	78ba      	ldrb	r2, [r7, #2]
 8002c56:	7472      	strb	r2, [r6, #17]
 8002c58:	2000      	movs	r0, #0
 8002c5a:	70b8      	strb	r0, [r7, #2]
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	7cb0      	ldrb	r0, [r6, #18]
 8002c60:	62f1      	str	r1, [r6, #44]	; 0x2c
 8002c62:	4290      	cmp	r0, r2
 8002c64:	d002      	beq.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c66:	74b2      	strb	r2, [r6, #18]
 8002c68:	f000 fd24 	bl	80036b4 <.text_9>
 8002c6c:	e6e2      	b.n	8002a34 <USBPD_PE_StateMachine_SRC+0x108>
 8002c6e:	f000 fd3c 	bl	80036ea <.text_13>
 8002c72:	215f      	movs	r1, #95	; 0x5f
 8002c74:	f000 fd52 	bl	800371c <.text_17>
 8002c78:	f04f 34ff 	mov.w	r4, #4294967295
 8002c7c:	e7b0      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002c7e:	6870      	ldr	r0, [r6, #4]
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	f021 0110 	bic.w	r1, r1, #16
 8002c86:	6001      	str	r1, [r0, #0]
 8002c88:	68b0      	ldr	r0, [r6, #8]
 8002c8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d0f3      	beq.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c90:	7c30      	ldrb	r0, [r6, #16]
 8002c92:	4788      	blx	r1
 8002c94:	e7f0      	b.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c96:	f000 fd22 	bl	80036de <.text_12>
 8002c9a:	bf1a      	itte	ne
 8002c9c:	6830      	ldrne	r0, [r6, #0]
 8002c9e:	6801      	ldrne	r1, [r0, #0]
 8002ca0:	2101      	moveq	r1, #1
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	f002 f9d4 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002ca8:	6870      	ldr	r0, [r6, #4]
 8002caa:	6801      	ldr	r1, [r0, #0]
 8002cac:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002cb0:	b388      	cbz	r0, 8002d16 <USBPD_PE_StateMachine_SRC+0x3ea>
 8002cb2:	f001 0203 	and.w	r2, r1, #3
 8002cb6:	6870      	ldr	r0, [r6, #4]
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	bf0c      	ite	eq
 8002cbc:	2200      	moveq	r2, #0
 8002cbe:	2220      	movne	r2, #32
 8002cc0:	f021 0120 	bic.w	r1, r1, #32
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	6001      	str	r1, [r0, #0]
 8002cc8:	2000      	movs	r0, #0
 8002cca:	70e8      	strb	r0, [r5, #3]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	f000 fd29 	bl	8003724 <.text_18+0x2>
 8002cd2:	6870      	ldr	r0, [r6, #4]
 8002cd4:	6801      	ldr	r1, [r0, #0]
 8002cd6:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8002cda:	b130      	cbz	r0, 8002cea <USBPD_PE_StateMachine_SRC+0x3be>
 8002cdc:	f248 0014 	movw	r0, #32788	; 0x8014
 8002ce0:	83f0      	strh	r0, [r6, #30]
 8002ce2:	2414      	movs	r4, #20
 8002ce4:	2106      	movs	r1, #6
 8002ce6:	7471      	strb	r1, [r6, #17]
 8002ce8:	e77a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002cea:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d00a      	beq.n	8002d08 <USBPD_PE_StateMachine_SRC+0x3dc>
 8002cf2:	6830      	ldr	r0, [r6, #0]
 8002cf4:	7801      	ldrb	r1, [r0, #0]
 8002cf6:	078a      	lsls	r2, r1, #30
 8002cf8:	f140 808c 	bpl.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002cfc:	7929      	ldrb	r1, [r5, #4]
 8002cfe:	2914      	cmp	r1, #20
 8002d00:	f080 8088 	bcs.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d04:	68f0      	ldr	r0, [r6, #12]
 8002d06:	2800      	cmp	r0, #0
 8002d08:	f000 8084 	beq.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d0c:	1c49      	adds	r1, r1, #1
 8002d0e:	7129      	strb	r1, [r5, #4]
 8002d10:	2005      	movs	r0, #5
 8002d12:	7470      	strb	r0, [r6, #17]
 8002d14:	e764      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d16:	7c30      	ldrb	r0, [r6, #16]
 8002d18:	2121      	movs	r1, #33	; 0x21
 8002d1a:	f7fd fc1c 	bl	8000556 <USBPD_PE_Notification>
 8002d1e:	e1e1      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 8002d20:	a903      	add	r1, sp, #12
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 fd3c 	bl	80037a0 <PE_StateMachine_VDMCable>
 8002d28:	e759      	b.n	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 8002d2a:	8bf0      	ldrh	r0, [r6, #30]
 8002d2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d30:	d102      	bne.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d32:	2107      	movs	r1, #7
 8002d34:	7471      	strb	r1, [r6, #17]
 8002d36:	2400      	movs	r4, #0
 8002d38:	e752      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d3a:	6971      	ldr	r1, [r6, #20]
 8002d3c:	0889      	lsrs	r1, r1, #2
 8002d3e:	f001 0101 	and.w	r1, r1, #1
 8002d42:	4630      	mov	r0, r6
 8002d44:	f000 fd01 	bl	800374a <PE_Send_SRCCapabilities>
 8002d48:	2805      	cmp	r0, #5
 8002d4a:	d002      	beq.n	8002d52 <USBPD_PE_StateMachine_SRC+0x426>
 8002d4c:	2809      	cmp	r0, #9
 8002d4e:	d0f3      	beq.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d50:	e011      	b.n	8002d76 <USBPD_PE_StateMachine_SRC+0x44a>
 8002d52:	2001      	movs	r0, #1
 8002d54:	6971      	ldr	r1, [r6, #20]
 8002d56:	7730      	strb	r0, [r6, #28]
 8002d58:	f041 0104 	orr.w	r1, r1, #4
 8002d5c:	6171      	str	r1, [r6, #20]
 8002d5e:	2000      	movs	r0, #0
 8002d60:	70e8      	strb	r0, [r5, #3]
 8002d62:	70a8      	strb	r0, [r5, #2]
 8002d64:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002d68:	2016      	movs	r0, #22
 8002d6a:	241b      	movs	r4, #27
 8002d6c:	7470      	strb	r0, [r6, #17]
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f000 fcd4 	bl	800371c <.text_17>
 8002d74:	e734      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d76:	6970      	ldr	r0, [r6, #20]
 8002d78:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002d7c:	b978      	cbnz	r0, 8002d9e <USBPD_PE_StateMachine_SRC+0x472>
 8002d7e:	78e8      	ldrb	r0, [r5, #3]
 8002d80:	2833      	cmp	r0, #51	; 0x33
 8002d82:	d218      	bcs.n	8002db6 <USBPD_PE_StateMachine_SRC+0x48a>
 8002d84:	f248 0196 	movw	r1, #32918	; 0x8096
 8002d88:	83f1      	strh	r1, [r6, #30]
 8002d8a:	2008      	movs	r0, #8
 8002d8c:	7470      	strb	r0, [r6, #17]
 8002d8e:	2496      	movs	r4, #150	; 0x96
 8002d90:	8c71      	ldrh	r1, [r6, #34]	; 0x22
 8002d92:	0448      	lsls	r0, r1, #17
 8002d94:	d002      	beq.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002d96:	8c74      	ldrh	r4, [r6, #34]	; 0x22
 8002d98:	f3c4 040e 	ubfx	r4, r4, #0, #15
 8002d9c:	e720      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d9e:	6870      	ldr	r0, [r6, #4]
 8002da0:	7801      	ldrb	r1, [r0, #0]
 8002da2:	f001 0103 	and.w	r1, r1, #3
 8002da6:	2902      	cmp	r1, #2
 8002da8:	bf04      	itt	eq
 8002daa:	7c30      	ldrbeq	r0, [r6, #16]
 8002dac:	f002 f93f 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8002db0:	2011      	movs	r0, #17
 8002db2:	7470      	strb	r0, [r6, #17]
 8002db4:	e7bf      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8002db6:	7c30      	ldrb	r0, [r6, #16]
 8002db8:	2121      	movs	r1, #33	; 0x21
 8002dba:	f7fd fbcc 	bl	8000556 <USBPD_PE_Notification>
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	e7a7      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f000 fcc0 	bl	800374a <PE_Send_SRCCapabilities>
 8002dca:	2805      	cmp	r0, #5
 8002dcc:	d107      	bne.n	8002dde <USBPD_PE_StateMachine_SRC+0x4b2>
 8002dce:	f000 fca8 	bl	8003722 <.text_18>
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 fc5f 	bl	8003696 <.text_6>
 8002dd8:	2116      	movs	r1, #22
 8002dda:	7471      	strb	r1, [r6, #17]
 8002ddc:	e7c7      	b.n	8002d6e <USBPD_PE_StateMachine_SRC+0x442>
 8002dde:	2000      	movs	r0, #0
 8002de0:	7730      	strb	r0, [r6, #28]
 8002de2:	2111      	movs	r1, #17
 8002de4:	e77f      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 8002de6:	8c70      	ldrh	r0, [r6, #34]	; 0x22
 8002de8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002dec:	d106      	bne.n	8002dfc <USBPD_PE_StateMachine_SRC+0x4d0>
 8002dee:	2100      	movs	r1, #0
 8002df0:	8471      	strh	r1, [r6, #34]	; 0x22
 8002df2:	2105      	movs	r1, #5
 8002df4:	7928      	ldrb	r0, [r5, #4]
 8002df6:	1c40      	adds	r0, r0, #1
 8002df8:	7128      	strb	r0, [r5, #4]
 8002dfa:	7471      	strb	r1, [r6, #17]
 8002dfc:	8bf0      	ldrh	r0, [r6, #30]
 8002dfe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e02:	d1cb      	bne.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002e04:	6830      	ldr	r0, [r6, #0]
 8002e06:	6841      	ldr	r1, [r0, #4]
 8002e08:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8002e0c:	b110      	cbz	r0, 8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002e0e:	78e8      	ldrb	r0, [r5, #3]
 8002e10:	1c40      	adds	r0, r0, #1
 8002e12:	70e8      	strb	r0, [r5, #3]
 8002e14:	2007      	movs	r0, #7
 8002e16:	e77c      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002e18:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002e1c:	2811      	cmp	r0, #17
 8002e1e:	d10b      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e20:	88b9      	ldrh	r1, [r7, #4]
 8002e22:	0bc8      	lsrs	r0, r1, #15
 8002e24:	d108      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e26:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	f000 80eb 	beq.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e30:	7938      	ldrb	r0, [r7, #4]
 8002e32:	f000 001f 	and.w	r0, r0, #31
 8002e36:	2802      	cmp	r0, #2
 8002e38:	f040 80e5 	bne.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	7881      	ldrb	r1, [r0, #2]
 8002e40:	78c2      	ldrb	r2, [r0, #3]
 8002e42:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8002e46:	7901      	ldrb	r1, [r0, #4]
 8002e48:	7940      	ldrb	r0, [r0, #5]
 8002e4a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8002e4e:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	88b8      	ldrh	r0, [r7, #4]
 8002e56:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002e5a:	7c30      	ldrb	r0, [r6, #16]
 8002e5c:	f7fd feeb 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8002e60:	68b4      	ldr	r4, [r6, #8]
 8002e62:	7c30      	ldrb	r0, [r6, #16]
 8002e64:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002e68:	2304      	movs	r3, #4
 8002e6a:	466a      	mov	r2, sp
 8002e6c:	2106      	movs	r1, #6
 8002e6e:	47e0      	blx	ip
 8002e70:	2009      	movs	r0, #9
 8002e72:	7470      	strb	r0, [r6, #17]
 8002e74:	2400      	movs	r4, #0
 8002e76:	e0c0      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002e78:	68b2      	ldr	r2, [r6, #8]
 8002e7a:	7c30      	ldrb	r0, [r6, #16]
 8002e7c:	69d3      	ldr	r3, [r2, #28]
 8002e7e:	a901      	add	r1, sp, #4
 8002e80:	4798      	blx	r3
 8002e82:	280a      	cmp	r0, #10
 8002e84:	d011      	beq.n	8002eaa <USBPD_PE_StateMachine_SRC+0x57e>
 8002e86:	280b      	cmp	r0, #11
 8002e88:	d02f      	beq.n	8002eea <USBPD_PE_StateMachine_SRC+0x5be>
 8002e8a:	280d      	cmp	r0, #13
 8002e8c:	6870      	ldr	r0, [r6, #4]
 8002e8e:	6801      	ldr	r1, [r0, #0]
 8002e90:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002e94:	d12e      	bne.n	8002ef4 <USBPD_PE_StateMachine_SRC+0x5c8>
 8002e96:	2803      	cmp	r0, #3
 8002e98:	bf0c      	ite	eq
 8002e9a:	2303      	moveq	r3, #3
 8002e9c:	230e      	movne	r3, #14
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	9000      	str	r0, [sp, #0]
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	f000 fc4d 	bl	8003742 <.text_21+0x2>
 8002ea8:	e69a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eaa:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8002eae:	241e      	movs	r4, #30
 8002eb0:	6870      	ldr	r0, [r6, #4]
 8002eb2:	6801      	ldr	r1, [r0, #0]
 8002eb4:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002eb8:	2801      	cmp	r0, #1
 8002eba:	d00b      	beq.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ebc:	9801      	ldr	r0, [sp, #4]
 8002ebe:	2803      	cmp	r0, #3
 8002ec0:	bf02      	ittt	eq
 8002ec2:	6970      	ldreq	r0, [r6, #20]
 8002ec4:	f3c0 00c1 	ubfxeq	r0, r0, #3, #2
 8002ec8:	2803      	cmpeq	r0, #3
 8002eca:	d103      	bne.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ecc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ed0:	83f0      	strh	r0, [r6, #30]
 8002ed2:	2400      	movs	r4, #0
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	9000      	str	r0, [sp, #0]
 8002ed8:	230c      	movs	r3, #12
 8002eda:	f000 fc31 	bl	8003740 <.text_21>
 8002ede:	9801      	ldr	r0, [sp, #4]
 8002ee0:	6971      	ldr	r1, [r6, #20]
 8002ee2:	f360 01c4 	bfi	r1, r0, #3, #2
 8002ee6:	6171      	str	r1, [r6, #20]
 8002ee8:	e67a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eea:	2000      	movs	r0, #0
 8002eec:	9000      	str	r0, [sp, #0]
 8002eee:	230c      	movs	r3, #12
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	e7d7      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002ef4:	2803      	cmp	r0, #3
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2303      	moveq	r3, #3
 8002efa:	230e      	movne	r3, #14
 8002efc:	2000      	movs	r0, #0
 8002efe:	9000      	str	r0, [sp, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	e7cf      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002f04:	8bf0      	ldrh	r0, [r6, #30]
 8002f06:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f0a:	d1ed      	bne.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f0c:	f000 fc09 	bl	8003722 <.text_18>
 8002f10:	68b0      	ldr	r0, [r6, #8]
 8002f12:	6801      	ldr	r1, [r0, #0]
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d0e7      	beq.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f18:	7c30      	ldrb	r0, [r6, #16]
 8002f1a:	4788      	blx	r1
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f040 8252 	bne.w	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8002f22:	200d      	movs	r0, #13
 8002f24:	e6f5      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002f26:	2100      	movs	r1, #0
 8002f28:	9100      	str	r1, [sp, #0]
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	f000 fc09 	bl	8003744 <.text_21+0x4>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d110      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f36:	2103      	movs	r1, #3
 8002f38:	f000 fbf4 	bl	8003724 <.text_18+0x2>
 8002f3c:	7c30      	ldrb	r0, [r6, #16]
 8002f3e:	2110      	movs	r1, #16
 8002f40:	f7fd fb09 	bl	8000556 <USBPD_PE_Notification>
 8002f44:	2000      	movs	r0, #0
 8002f46:	84b0      	strh	r0, [r6, #36]	; 0x24
 8002f48:	6970      	ldr	r0, [r6, #20]
 8002f4a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002f4e:	2803      	cmp	r0, #3
 8002f50:	d102      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f52:	f24b 60b0 	movw	r0, #46768	; 0xb6b0
 8002f56:	84b0      	strh	r0, [r6, #36]	; 0x24
 8002f58:	e642      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	9100      	str	r1, [sp, #0]
 8002f5e:	2397      	movs	r3, #151	; 0x97
 8002f60:	2202      	movs	r2, #2
 8002f62:	f000 fbee 	bl	8003742 <.text_21+0x2>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d1f6      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f6a:	7c30      	ldrb	r0, [r6, #16]
 8002f6c:	7734      	strb	r4, [r6, #28]
 8002f6e:	2129      	movs	r1, #41	; 0x29
 8002f70:	f7fd faf1 	bl	8000556 <USBPD_PE_Notification>
 8002f74:	f248 2026 	movw	r0, #33318	; 0x8226
 8002f78:	83f0      	strh	r0, [r6, #30]
 8002f7a:	f240 2426 	movw	r4, #550	; 0x226
 8002f7e:	e62f      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f80:	8bf0      	ldrh	r0, [r6, #30]
 8002f82:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f86:	d1fa      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002f88:	7c30      	ldrb	r0, [r6, #16]
 8002f8a:	212a      	movs	r1, #42	; 0x2a
 8002f8c:	f7fd fae3 	bl	8000556 <USBPD_PE_Notification>
 8002f90:	2000      	movs	r0, #0
 8002f92:	9000      	str	r0, [sp, #0]
 8002f94:	2303      	movs	r3, #3
 8002f96:	2206      	movs	r2, #6
 8002f98:	f000 fbd3 	bl	8003742 <.text_21+0x2>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d1ee      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fa0:	212e      	movs	r1, #46	; 0x2e
 8002fa2:	e6e5      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	9000      	str	r0, [sp, #0]
 8002fa8:	2307      	movs	r3, #7
 8002faa:	2203      	movs	r2, #3
 8002fac:	e77a      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	9000      	str	r0, [sp, #0]
 8002fb2:	2312      	movs	r3, #18
 8002fb4:	7879      	ldrb	r1, [r7, #1]
 8002fb6:	220d      	movs	r2, #13
 8002fb8:	f000 fbc4 	bl	8003744 <.text_21+0x4>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1de      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fc0:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002fc4:	241b      	movs	r4, #27
 8002fc6:	2130      	movs	r1, #48	; 0x30
 8002fc8:	e6d2      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002fce:	2914      	cmp	r1, #20
 8002fd0:	d019      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fd2:	783a      	ldrb	r2, [r7, #0]
 8002fd4:	7879      	ldrb	r1, [r7, #1]
 8002fd6:	428a      	cmp	r2, r1
 8002fd8:	bf02      	ittt	eq
 8002fda:	88ba      	ldrheq	r2, [r7, #4]
 8002fdc:	4010      	andeq	r0, r2
 8002fde:	2803      	cmpeq	r0, #3
 8002fe0:	d111      	bne.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fe2:	7c30      	ldrb	r0, [r6, #16]
 8002fe4:	2131      	movs	r1, #49	; 0x31
 8002fe6:	f7fd fab6 	bl	8000556 <USBPD_PE_Notification>
 8002fea:	7838      	ldrb	r0, [r7, #0]
 8002fec:	b910      	cbnz	r0, 8002ff4 <USBPD_PE_StateMachine_SRC+0x6c8>
 8002fee:	2107      	movs	r1, #7
 8002ff0:	7471      	strb	r1, [r6, #17]
 8002ff2:	e002      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	7470      	strb	r0, [r6, #17]
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002ffe:	2814      	cmp	r0, #20
 8003000:	d001      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8003002:	f000 fb97 	bl	8003734 <.text_20>
 8003006:	8bf0      	ldrh	r0, [r6, #30]
 8003008:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800300c:	d1b7      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 800300e:	e1da      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003010:	6870      	ldr	r0, [r6, #4]
 8003012:	7801      	ldrb	r1, [r0, #0]
 8003014:	f001 0103 	and.w	r1, r1, #3
 8003018:	2902      	cmp	r1, #2
 800301a:	bf04      	itt	eq
 800301c:	7c30      	ldrbeq	r0, [r6, #16]
 800301e:	f002 f806 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003022:	2105      	movs	r1, #5
 8003024:	4630      	mov	r0, r6
 8003026:	f7fd fc65 	bl	80008f4 <PE_Send_RESET>
 800302a:	f000 fb5e 	bl	80036ea <.text_13>
 800302e:	2100      	movs	r1, #0
 8003030:	78a8      	ldrb	r0, [r5, #2]
 8003032:	1c40      	adds	r0, r0, #1
 8003034:	70a8      	strb	r0, [r5, #2]
 8003036:	2202      	movs	r2, #2
 8003038:	6970      	ldr	r0, [r6, #20]
 800303a:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
 800303e:	6170      	str	r0, [r6, #20]
 8003040:	70b9      	strb	r1, [r7, #2]
 8003042:	f420 70e0 	bic.w	r0, r0, #448	; 0x1c0
 8003046:	6170      	str	r0, [r6, #20]
 8003048:	f000 fb70 	bl	800372c <.text_19+0x2>
 800304c:	2169      	movs	r1, #105	; 0x69
 800304e:	4640      	mov	r0, r8
 8003050:	f7fd fa81 	bl	8000556 <USBPD_PE_Notification>
 8003054:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8003058:	241b      	movs	r4, #27
 800305a:	2015      	movs	r0, #21
 800305c:	e659      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 800305e:	6870      	ldr	r0, [r6, #4]
 8003060:	7801      	ldrb	r1, [r0, #0]
 8003062:	f001 0103 	and.w	r1, r1, #3
 8003066:	2902      	cmp	r1, #2
 8003068:	bf04      	itt	eq
 800306a:	7c30      	ldrbeq	r0, [r6, #16]
 800306c:	f001 ffdf 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003070:	e7ec      	b.n	800304c <USBPD_PE_StateMachine_SRC+0x720>
 8003072:	8bf0      	ldrh	r0, [r6, #30]
 8003074:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003078:	d117      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800307a:	78a9      	ldrb	r1, [r5, #2]
 800307c:	6970      	ldr	r0, [r6, #20]
 800307e:	2903      	cmp	r1, #3
 8003080:	d303      	bcc.n	800308a <USBPD_PE_StateMachine_SRC+0x75e>
 8003082:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003086:	bb48      	cbnz	r0, 80030dc <USBPD_PE_StateMachine_SRC+0x7b0>
 8003088:	e02c      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 800308a:	f248 218a 	movw	r1, #33418	; 0x828a
 800308e:	83f1      	strh	r1, [r6, #30]
 8003090:	2217      	movs	r2, #23
 8003092:	7472      	strb	r2, [r6, #17]
 8003094:	2400      	movs	r4, #0
 8003096:	f3c0 2041 	ubfx	r0, r0, #9, #2
 800309a:	1e42      	subs	r2, r0, #1
 800309c:	4192      	sbcs	r2, r2
 800309e:	0fd2      	lsrs	r2, r2, #31
 80030a0:	f000 fb44 	bl	800372c <.text_19+0x2>
 80030a4:	2203      	movs	r2, #3
 80030a6:	f000 fb41 	bl	800372c <.text_19+0x2>
 80030aa:	e599      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80030ac:	68b2      	ldr	r2, [r6, #8]
 80030ae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80030b0:	2100      	movs	r1, #0
 80030b2:	4640      	mov	r0, r8
 80030b4:	4798      	blx	r3
 80030b6:	2801      	cmp	r0, #1
 80030b8:	d106      	bne.n	80030c8 <USBPD_PE_StateMachine_SRC+0x79c>
 80030ba:	f248 3020 	movw	r0, #33568	; 0x8320
 80030be:	83f0      	strh	r0, [r6, #30]
 80030c0:	2113      	movs	r1, #19
 80030c2:	f44f 7448 	mov.w	r4, #800	; 0x320
 80030c6:	7471      	strb	r1, [r6, #17]
 80030c8:	8bf0      	ldrh	r0, [r6, #30]
 80030ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80030ce:	d1ec      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030d0:	f000 fb2b 	bl	800372a <.text_19>
 80030d4:	6970      	ldr	r0, [r6, #20]
 80030d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030da:	b118      	cbz	r0, 80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 80030dc:	68b1      	ldr	r1, [r6, #8]
 80030de:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d11f      	bne.n	8003124 <USBPD_PE_StateMachine_SRC+0x7f8>
 80030e4:	2100      	movs	r1, #0
 80030e6:	e5fe      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 80030e8:	8bf0      	ldrh	r0, [r6, #30]
 80030ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80030ee:	d1dc      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030f0:	2204      	movs	r2, #4
 80030f2:	f000 fb1b 	bl	800372c <.text_19+0x2>
 80030f6:	68b2      	ldr	r2, [r6, #8]
 80030f8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80030fa:	2101      	movs	r1, #1
 80030fc:	4640      	mov	r0, r8
 80030fe:	4798      	blx	r3
 8003100:	2801      	cmp	r0, #1
 8003102:	d10a      	bne.n	800311a <USBPD_PE_StateMachine_SRC+0x7ee>
 8003104:	4630      	mov	r0, r6
 8003106:	f7fd fcf4 	bl	8000af2 <PE_Reset_HardReset>
 800310a:	2168      	movs	r1, #104	; 0x68
 800310c:	4640      	mov	r0, r8
 800310e:	f7fd fa22 	bl	8000556 <USBPD_PE_Notification>
 8003112:	2205      	movs	r2, #5
 8003114:	f000 fb0a 	bl	800372c <.text_19+0x2>
 8003118:	e67c      	b.n	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 800311a:	f000 fb06 	bl	800372a <.text_19>
 800311e:	68b1      	ldr	r1, [r6, #8]
 8003120:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003122:	2800      	cmp	r0, #0
 8003124:	f040 8280 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003128:	2100      	movs	r1, #0
 800312a:	7471      	strb	r1, [r6, #17]
 800312c:	e603      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 800312e:	2001      	movs	r0, #1
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	231b      	movs	r3, #27
 8003134:	2207      	movs	r2, #7
 8003136:	f000 fb04 	bl	8003742 <.text_21+0x2>
 800313a:	2800      	cmp	r0, #0
 800313c:	d1b5      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800313e:	2006      	movs	r0, #6
 8003140:	f000 faa9 	bl	8003696 <.text_6>
 8003144:	241b      	movs	r4, #27
 8003146:	210b      	movs	r1, #11
 8003148:	e612      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 800314a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800314e:	2811      	cmp	r0, #17
 8003150:	d131      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003152:	88b9      	ldrh	r1, [r7, #4]
 8003154:	0bc8      	lsrs	r0, r1, #15
 8003156:	d11b      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003158:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800315c:	b1c0      	cbz	r0, 8003190 <USBPD_PE_StateMachine_SRC+0x864>
 800315e:	4608      	mov	r0, r1
 8003160:	f000 011f 	and.w	r1, r0, #31
 8003164:	2901      	cmp	r1, #1
 8003166:	d113      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003168:	68b4      	ldr	r4, [r6, #8]
 800316a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800316e:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	1c82      	adds	r2, r0, #2
 8003176:	7c30      	ldrb	r0, [r6, #16]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	2104      	movs	r1, #4
 800317c:	47e0      	blx	ip
 800317e:	f000 fa92 	bl	80036a6 <.text_8>
 8003182:	d001      	beq.n	8003188 <USBPD_PE_StateMachine_SRC+0x85c>
 8003184:	f000 fad6 	bl	8003734 <.text_20>
 8003188:	7c30      	ldrb	r0, [r6, #16]
 800318a:	210d      	movs	r1, #13
 800318c:	f7fd f9e3 	bl	8000556 <USBPD_PE_Notification>
 8003190:	88b8      	ldrh	r0, [r7, #4]
 8003192:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8003196:	d10e      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003198:	f000 001f 	and.w	r0, r0, #31
 800319c:	2804      	cmp	r0, #4
 800319e:	bf18      	it	ne
 80031a0:	2810      	cmpne	r0, #16
 80031a2:	d108      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 80031a4:	f000 fa7f 	bl	80036a6 <.text_8>
 80031a8:	d001      	beq.n	80031ae <USBPD_PE_StateMachine_SRC+0x882>
 80031aa:	f000 fac3 	bl	8003734 <.text_20>
 80031ae:	7c30      	ldrb	r0, [r6, #16]
 80031b0:	210e      	movs	r1, #14
 80031b2:	f7fd f9d0 	bl	8000556 <USBPD_PE_Notification>
 80031b6:	8bf0      	ldrh	r0, [r6, #30]
 80031b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80031bc:	d11a      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031be:	2103      	movs	r1, #3
 80031c0:	e5b8      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80031c2:	68b0      	ldr	r0, [r6, #8]
 80031c4:	6881      	ldr	r1, [r0, #8]
 80031c6:	b1d1      	cbz	r1, 80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031c8:	7c30      	ldrb	r0, [r6, #16]
 80031ca:	4788      	blx	r1
 80031cc:	280a      	cmp	r0, #10
 80031ce:	d002      	beq.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8aa>
 80031d0:	280d      	cmp	r0, #13
 80031d2:	d010      	beq.n	80031f6 <USBPD_PE_StateMachine_SRC+0x8ca>
 80031d4:	e013      	b.n	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031d6:	f8a6 b01e 	strh.w	fp, [r6, #30]
 80031da:	2000      	movs	r0, #0
 80031dc:	9000      	str	r0, [sp, #0]
 80031de:	2324      	movs	r3, #36	; 0x24
 80031e0:	f000 faae 	bl	8003740 <.text_21>
 80031e4:	241e      	movs	r4, #30
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d104      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031ea:	f000 fa4f 	bl	800368c <.text_5>
 80031ee:	2201      	movs	r2, #1
 80031f0:	2101      	movs	r1, #1
 80031f2:	47e0      	blx	ip
 80031f4:	e4f4      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80031f6:	2000      	movs	r0, #0
 80031f8:	9000      	str	r0, [sp, #0]
 80031fa:	2303      	movs	r3, #3
 80031fc:	e651      	b.n	8002ea2 <USBPD_PE_StateMachine_SRC+0x576>
 80031fe:	2000      	movs	r0, #0
 8003200:	9000      	str	r0, [sp, #0]
 8003202:	2303      	movs	r3, #3
 8003204:	e67c      	b.n	8002f00 <USBPD_PE_StateMachine_SRC+0x5d4>
 8003206:	8bf0      	ldrh	r0, [r6, #30]
 8003208:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800320c:	d1f2      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800320e:	f000 fa88 	bl	8003722 <.text_18>
 8003212:	f000 fa5e 	bl	80036d2 <.text_11>
 8003216:	2206      	movs	r2, #6
 8003218:	f000 fa73 	bl	8003702 <.text_15>
 800321c:	f000 fa77 	bl	800370e <.text_16>
 8003220:	7c30      	ldrb	r0, [r6, #16]
 8003222:	2100      	movs	r1, #0
 8003224:	f001 fed3 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003228:	2000      	movs	r0, #0
 800322a:	9000      	str	r0, [sp, #0]
 800322c:	2325      	movs	r3, #37	; 0x25
 800322e:	2206      	movs	r2, #6
 8003230:	f000 fa87 	bl	8003742 <.text_21+0x2>
 8003234:	2800      	cmp	r0, #0
 8003236:	d1dd      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 8003238:	e0a5      	b.n	8003386 <USBPD_PE_StateMachine_SRC+0xa5a>
 800323a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800323e:	2911      	cmp	r1, #17
 8003240:	bf02      	ittt	eq
 8003242:	88b9      	ldrheq	r1, [r7, #4]
 8003244:	4008      	andeq	r0, r1
 8003246:	2806      	cmpeq	r0, #6
 8003248:	d105      	bne.n	8003256 <USBPD_PE_StateMachine_SRC+0x92a>
 800324a:	f000 fa28 	bl	800369e <.text_7>
 800324e:	f000 fa74 	bl	800373a <.text_20+0x6>
 8003252:	2026      	movs	r0, #38	; 0x26
 8003254:	7470      	strb	r0, [r6, #17]
 8003256:	8bf0      	ldrh	r0, [r6, #30]
 8003258:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800325c:	d1ca      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800325e:	68b3      	ldr	r3, [r6, #8]
 8003260:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003262:	2800      	cmp	r0, #0
 8003264:	f040 81e0 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003268:	7c30      	ldrb	r0, [r6, #16]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	220a      	movs	r2, #10
 800326e:	2101      	movs	r1, #1
 8003270:	4798      	blx	r3
 8003272:	e0a8      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003274:	2100      	movs	r1, #0
 8003276:	4630      	mov	r0, r6
 8003278:	f7fd fb5c 	bl	8000934 <PE_ChangePowerRole>
 800327c:	f000 fa02 	bl	8003684 <.text_4>
 8003280:	220d      	movs	r2, #13
 8003282:	2100      	movs	r1, #0
 8003284:	47a0      	blx	r4
 8003286:	7c30      	ldrb	r0, [r6, #16]
 8003288:	2114      	movs	r1, #20
 800328a:	f7fd f964 	bl	8000556 <USBPD_PE_Notification>
 800328e:	f000 f9f9 	bl	8003684 <.text_4>
 8003292:	220e      	movs	r2, #14
 8003294:	2100      	movs	r1, #0
 8003296:	47a0      	blx	r4
 8003298:	6870      	ldr	r0, [r6, #4]
 800329a:	7801      	ldrb	r1, [r0, #0]
 800329c:	f001 0103 	and.w	r1, r1, #3
 80032a0:	2901      	cmp	r1, #1
 80032a2:	bf04      	itt	eq
 80032a4:	4640      	moveq	r0, r8
 80032a6:	f001 fed3 	bleq	8005050 <USBPD_PRL_SOPCapability>
 80032aa:	4630      	mov	r0, r6
 80032ac:	f7fd fc96 	bl	8000bdc <PE_Reset_StateMachine>
 80032b0:	e541      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80032b2:	2001      	movs	r0, #1
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	231f      	movs	r3, #31
 80032b8:	220a      	movs	r2, #10
 80032ba:	f000 fa42 	bl	8003742 <.text_21+0x2>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d198      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80032c2:	2008      	movs	r0, #8
 80032c4:	f000 f9e7 	bl	8003696 <.text_6>
 80032c8:	2202      	movs	r2, #2
 80032ca:	f000 fa1a 	bl	8003702 <.text_15>
 80032ce:	241b      	movs	r4, #27
 80032d0:	2139      	movs	r1, #57	; 0x39
 80032d2:	e54d      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80032d4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80032d8:	2811      	cmp	r0, #17
 80032da:	bf04      	itt	eq
 80032dc:	88b8      	ldrheq	r0, [r7, #4]
 80032de:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 80032e2:	d133      	bne.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032e4:	f000 001f 	and.w	r0, r0, #31
 80032e8:	2803      	cmp	r0, #3
 80032ea:	d006      	beq.n	80032fa <USBPD_PE_StateMachine_SRC+0x9ce>
 80032ec:	2804      	cmp	r0, #4
 80032ee:	d011      	beq.n	8003314 <USBPD_PE_StateMachine_SRC+0x9e8>
 80032f0:	280c      	cmp	r0, #12
 80032f2:	d008      	beq.n	8003306 <USBPD_PE_StateMachine_SRC+0x9da>
 80032f4:	2810      	cmp	r0, #16
 80032f6:	d01a      	beq.n	800332e <USBPD_PE_StateMachine_SRC+0xa02>
 80032f8:	e028      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032fa:	7c30      	ldrb	r0, [r6, #16]
 80032fc:	213a      	movs	r1, #58	; 0x3a
 80032fe:	f7fd f92a 	bl	8000556 <USBPD_PE_Notification>
 8003302:	2020      	movs	r0, #32
 8003304:	e00c      	b.n	8003320 <USBPD_PE_StateMachine_SRC+0x9f4>
 8003306:	f000 f9bd 	bl	8003684 <.text_4>
 800330a:	2205      	movs	r2, #5
 800330c:	2101      	movs	r1, #1
 800330e:	47a0      	blx	r4
 8003310:	213b      	movs	r1, #59	; 0x3b
 8003312:	e002      	b.n	800331a <USBPD_PE_StateMachine_SRC+0x9ee>
 8003314:	f000 f9ef 	bl	80036f6 <.text_14>
 8003318:	2116      	movs	r1, #22
 800331a:	f000 f9ff 	bl	800371c <.text_17>
 800331e:	2003      	movs	r0, #3
 8003320:	7470      	strb	r0, [r6, #17]
 8003322:	2400      	movs	r4, #0
 8003324:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003328:	2814      	cmp	r0, #20
 800332a:	d10d      	bne.n	8003348 <USBPD_PE_StateMachine_SRC+0xa1c>
 800332c:	e00e      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 800332e:	f000 f9e2 	bl	80036f6 <.text_14>
 8003332:	7c30      	ldrb	r0, [r6, #16]
 8003334:	2117      	movs	r1, #23
 8003336:	f7fd f90e 	bl	8000556 <USBPD_PE_Notification>
 800333a:	2003      	movs	r0, #3
 800333c:	7470      	strb	r0, [r6, #17]
 800333e:	2400      	movs	r4, #0
 8003340:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003344:	2814      	cmp	r0, #20
 8003346:	d001      	beq.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 8003348:	f000 f9f4 	bl	8003734 <.text_20>
 800334c:	8bf0      	ldrh	r0, [r6, #30]
 800334e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003352:	d122      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003354:	e733      	b.n	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003356:	f000 f9bc 	bl	80036d2 <.text_11>
 800335a:	7f30      	ldrb	r0, [r6, #28]
 800335c:	2809      	cmp	r0, #9
 800335e:	d004      	beq.n	800336a <USBPD_PE_StateMachine_SRC+0xa3e>
 8003360:	f000 f994 	bl	800368c <.text_5>
 8003364:	2206      	movs	r2, #6
 8003366:	2101      	movs	r1, #1
 8003368:	47e0      	blx	ip
 800336a:	f000 f9d0 	bl	800370e <.text_16>
 800336e:	7c30      	ldrb	r0, [r6, #16]
 8003370:	2100      	movs	r1, #0
 8003372:	f001 fe2c 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003376:	2000      	movs	r0, #0
 8003378:	9000      	str	r0, [sp, #0]
 800337a:	2321      	movs	r3, #33	; 0x21
 800337c:	2206      	movs	r2, #6
 800337e:	f000 f9e0 	bl	8003742 <.text_21+0x2>
 8003382:	2800      	cmp	r0, #0
 8003384:	d109      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003386:	f000 f97d 	bl	8003684 <.text_4>
 800338a:	2208      	movs	r2, #8
 800338c:	2101      	movs	r1, #1
 800338e:	47a0      	blx	r4
 8003390:	f248 10d6 	movw	r0, #33238	; 0x81d6
 8003394:	83f0      	strh	r0, [r6, #30]
 8003396:	f44f 74eb 	mov.w	r4, #470	; 0x1d6
 800339a:	e421      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800339c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80033a0:	2911      	cmp	r1, #17
 80033a2:	bf02      	ittt	eq
 80033a4:	88b9      	ldrheq	r1, [r7, #4]
 80033a6:	4008      	andeq	r0, r1
 80033a8:	2806      	cmpeq	r0, #6
 80033aa:	d103      	bne.n	80033b4 <USBPD_PE_StateMachine_SRC+0xa88>
 80033ac:	2026      	movs	r0, #38	; 0x26
 80033ae:	7470      	strb	r0, [r6, #17]
 80033b0:	f000 f9c0 	bl	8003734 <.text_20>
 80033b4:	8bf0      	ldrh	r0, [r6, #30]
 80033b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80033ba:	d1ee      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033bc:	68b1      	ldr	r1, [r6, #8]
 80033be:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f040 8131 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 80033c6:	210f      	movs	r1, #15
 80033c8:	e4b4      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80033ca:	8bf0      	ldrh	r0, [r6, #30]
 80033cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80033d0:	d1e3      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033d2:	f000 f95b 	bl	800368c <.text_5>
 80033d6:	220e      	movs	r2, #14
 80033d8:	2101      	movs	r1, #1
 80033da:	47e0      	blx	ip
 80033dc:	6870      	ldr	r0, [r6, #4]
 80033de:	7801      	ldrb	r1, [r0, #0]
 80033e0:	f001 0103 	and.w	r1, r1, #3
 80033e4:	2902      	cmp	r1, #2
 80033e6:	bf04      	itt	eq
 80033e8:	7c30      	ldrbeq	r0, [r6, #16]
 80033ea:	f001 fe20 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 80033ee:	4630      	mov	r0, r6
 80033f0:	f7fd fbf4 	bl	8000bdc <PE_Reset_StateMachine>
 80033f4:	2115      	movs	r1, #21
 80033f6:	e4bb      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80033f8:	2903      	cmp	r1, #3
 80033fa:	d10f      	bne.n	800341c <USBPD_PE_StateMachine_SRC+0xaf0>
 80033fc:	2000      	movs	r0, #0
 80033fe:	6871      	ldr	r1, [r6, #4]
 8003400:	7730      	strb	r0, [r6, #28]
 8003402:	7808      	ldrb	r0, [r1, #0]
 8003404:	f000 0003 	and.w	r0, r0, #3
 8003408:	2802      	cmp	r0, #2
 800340a:	bf04      	itt	eq
 800340c:	7c30      	ldrbeq	r0, [r6, #16]
 800340e:	f001 fe0e 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003412:	2004      	movs	r0, #4
 8003414:	7470      	strb	r0, [r6, #17]
 8003416:	2167      	movs	r1, #103	; 0x67
 8003418:	f000 f980 	bl	800371c <.text_17>
 800341c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003420:	2814      	cmp	r0, #20
 8003422:	d009      	beq.n	8003438 <USBPD_PE_StateMachine_SRC+0xb0c>
 8003424:	4630      	mov	r0, r6
 8003426:	f7fe fa8d 	bl	8001944 <PE_ManageRXEvent>
 800342a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800342e:	2814      	cmp	r0, #20
 8003430:	d0b3      	beq.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003432:	f000 f97f 	bl	8003734 <.text_20>
 8003436:	e7b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003438:	6970      	ldr	r0, [r6, #20]
 800343a:	0cc0      	lsrs	r0, r0, #19
 800343c:	d027      	beq.n	800348e <USBPD_PE_StateMachine_SRC+0xb62>
 800343e:	8c30      	ldrh	r0, [r6, #32]
 8003440:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003444:	d10e      	bne.n	8003464 <USBPD_PE_StateMachine_SRC+0xb38>
 8003446:	210f      	movs	r1, #15
 8003448:	7471      	strb	r1, [r6, #17]
 800344a:	2000      	movs	r0, #0
 800344c:	9000      	str	r0, [sp, #0]
 800344e:	7c31      	ldrb	r1, [r6, #16]
 8003450:	f8d9 4000 	ldr.w	r4, [r9]
 8003454:	2300      	movs	r3, #0
 8003456:	2270      	movs	r2, #112	; 0x70
 8003458:	2009      	movs	r0, #9
 800345a:	47a0      	blx	r4
 800345c:	78a8      	ldrb	r0, [r5, #2]
 800345e:	1c40      	adds	r0, r0, #1
 8003460:	70a8      	strb	r0, [r5, #2]
 8003462:	e468      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8003464:	88b9      	ldrh	r1, [r7, #4]
 8003466:	6972      	ldr	r2, [r6, #20]
 8003468:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800346c:	2033      	movs	r0, #51	; 0x33
 800346e:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8003472:	fb11 f100 	smulbb	r1, r1, r0
 8003476:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800347a:	8431      	strh	r1, [r6, #32]
 800347c:	88b9      	ldrh	r1, [r7, #4]
 800347e:	6972      	ldr	r2, [r6, #20]
 8003480:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8003484:	eb01 44d2 	add.w	r4, r1, r2, lsr #19
 8003488:	4344      	muls	r4, r0
 800348a:	b2a4      	uxth	r4, r4
 800348c:	e785      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 800348e:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
 8003490:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003494:	bf08      	it	eq
 8003496:	210f      	moveq	r1, #15
 8003498:	d01b      	beq.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800349a:	7c30      	ldrb	r0, [r6, #16]
 800349c:	f7fd faab 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80034a0:	b968      	cbnz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a2:	78b8      	ldrb	r0, [r7, #2]
 80034a4:	b158      	cbz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a6:	78f9      	ldrb	r1, [r7, #3]
 80034a8:	7079      	strb	r1, [r7, #1]
 80034aa:	7470      	strb	r0, [r6, #17]
 80034ac:	2000      	movs	r0, #0
 80034ae:	70b8      	strb	r0, [r7, #2]
 80034b0:	6970      	ldr	r0, [r6, #20]
 80034b2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80034b4:	62f1      	str	r1, [r6, #44]	; 0x2c
 80034b6:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 80034ba:	6170      	str	r0, [r6, #20]
 80034bc:	e43b      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80034be:	8c70      	ldrh	r0, [r6, #34]	; 0x22
 80034c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80034c4:	d106      	bne.n	80034d4 <USBPD_PE_StateMachine_SRC+0xba8>
 80034c6:	2100      	movs	r1, #0
 80034c8:	8471      	strh	r1, [r6, #34]	; 0x22
 80034ca:	2105      	movs	r1, #5
 80034cc:	7928      	ldrb	r0, [r5, #4]
 80034ce:	1c40      	adds	r0, r0, #1
 80034d0:	7128      	strb	r0, [r5, #4]
 80034d2:	e42f      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7fd ff3f 	bl	8001358 <PE_CalculateMinTiming>
 80034da:	e425      	b.n	8002d28 <USBPD_PE_StateMachine_SRC+0x3fc>
 80034dc:	2000      	movs	r0, #0
 80034de:	2103      	movs	r1, #3
 80034e0:	2201      	movs	r2, #1
 80034e2:	9002      	str	r0, [sp, #8]
 80034e4:	9101      	str	r1, [sp, #4]
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 80034ec:	2206      	movs	r2, #6
 80034ee:	2100      	movs	r1, #0
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7fd ffe6 	bl	80014c2 <PE_Send_DataMessage>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d13b      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 80034fa:	215d      	movs	r1, #93	; 0x5d
 80034fc:	e438      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80034fe:	2000      	movs	r0, #0
 8003500:	9004      	str	r0, [sp, #16]
 8003502:	ab04      	add	r3, sp, #16
 8003504:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8003508:	f8dc 7014 	ldr.w	r7, [ip, #20]
 800350c:	aa05      	add	r2, sp, #20
 800350e:	210a      	movs	r1, #10
 8003510:	4640      	mov	r0, r8
 8003512:	47b8      	blx	r7
 8003514:	9804      	ldr	r0, [sp, #16]
 8003516:	2104      	movs	r1, #4
 8003518:	f7fd ff46 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 800351c:	b9f8      	cbnz	r0, 800355e <USBPD_PE_StateMachine_SRC+0xc32>
 800351e:	71e8      	strb	r0, [r5, #7]
 8003520:	2100      	movs	r1, #0
 8003522:	7229      	strb	r1, [r5, #8]
 8003524:	7c30      	ldrb	r0, [r6, #16]
 8003526:	f7fd fc36 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800352a:	b918      	cbnz	r0, 8003534 <USBPD_PE_StateMachine_SRC+0xc08>
 800352c:	7a28      	ldrb	r0, [r5, #8]
 800352e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003532:	7228      	strb	r0, [r5, #8]
 8003534:	a905      	add	r1, sp, #20
 8003536:	9a04      	ldr	r2, [sp, #16]
 8003538:	f206 2067 	addw	r0, r6, #615	; 0x267
 800353c:	f01d fab1 	bl	8020aa2 <__aeabi_memcpy>
 8003540:	2000      	movs	r0, #0
 8003542:	2103      	movs	r1, #3
 8003544:	2208      	movs	r2, #8
 8003546:	9002      	str	r0, [sp, #8]
 8003548:	9101      	str	r1, [sp, #4]
 800354a:	9200      	str	r2, [sp, #0]
 800354c:	f206 2363 	addw	r3, r6, #611	; 0x263
 8003550:	220c      	movs	r2, #12
 8003552:	2100      	movs	r1, #0
 8003554:	4630      	mov	r0, r6
 8003556:	f7fe f8d3 	bl	8001700 <PE_Send_ExtendedMessage>
 800355a:	214c      	movs	r1, #76	; 0x4c
 800355c:	e7ce      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 800355e:	2001      	movs	r0, #1
 8003560:	e57c      	b.n	800305c <USBPD_PE_StateMachine_SRC+0x730>
 8003562:	2101      	movs	r1, #1
 8003564:	9100      	str	r1, [sp, #0]
 8003566:	2339      	movs	r3, #57	; 0x39
 8003568:	782a      	ldrb	r2, [r5, #0]
 800356a:	78f9      	ldrb	r1, [r7, #3]
 800356c:	f000 f8ea 	bl	8003744 <.text_21+0x4>
 8003570:	2800      	cmp	r0, #0
 8003572:	f47f ab35 	bne.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8003576:	7868      	ldrb	r0, [r5, #1]
 8003578:	f000 f88d 	bl	8003696 <.text_6>
 800357c:	241b      	movs	r4, #27
 800357e:	2144      	movs	r1, #68	; 0x44
 8003580:	e7bc      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 8003582:	8bf0      	ldrh	r0, [r6, #30]
 8003584:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003588:	bf04      	itt	eq
 800358a:	f89d 000c 	ldrbeq.w	r0, [sp, #12]
 800358e:	2814      	cmpeq	r0, #20
 8003590:	f43f ae15 	beq.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003594:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003598:	2814      	cmp	r0, #20
 800359a:	f43f ab21 	beq.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800359e:	88b9      	ldrh	r1, [r7, #4]
 80035a0:	0bc8      	lsrs	r0, r1, #15
 80035a2:	d003      	beq.n	80035ac <USBPD_PE_StateMachine_SRC+0xc80>
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7fd ffc9 	bl	800153c <PE_Check_ExtendedMessage>
 80035aa:	e73e      	b.n	800342a <USBPD_PE_StateMachine_SRC+0xafe>
 80035ac:	f001 011f 	and.w	r1, r1, #31
 80035b0:	2910      	cmp	r1, #16
 80035b2:	f47f ae04 	bne.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 80035b6:	f000 f872 	bl	800369e <.text_7>
 80035ba:	2400      	movs	r4, #0
 80035bc:	f000 f8bd 	bl	800373a <.text_20+0x6>
 80035c0:	2000      	movs	r0, #0
 80035c2:	83f0      	strh	r0, [r6, #30]
 80035c4:	2103      	movs	r1, #3
 80035c6:	7471      	strb	r1, [r6, #17]
 80035c8:	2159      	movs	r1, #89	; 0x59
 80035ca:	e797      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 80035cc:	4630      	mov	r0, r6
 80035ce:	f7fe f8be 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80035d2:	e003      	b.n	80035dc <USBPD_PE_StateMachine_SRC+0xcb0>
 80035d4:	a903      	add	r1, sp, #12
 80035d6:	4630      	mov	r0, r6
 80035d8:	f7fd fbee 	bl	8000db8 <PE_SubStateMachine_Generic>
 80035dc:	f7ff baff 	b.w	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 80035e0:	a903      	add	r1, sp, #12
 80035e2:	4630      	mov	r0, r6
 80035e4:	f000 f9fd 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80035e8:	4604      	mov	r4, r0
 80035ea:	f000 f878 	bl	80036de <.text_12>
 80035ee:	bf0e      	itee	eq
 80035f0:	2101      	moveq	r1, #1
 80035f2:	6830      	ldrne	r0, [r6, #0]
 80035f4:	6801      	ldrne	r1, [r0, #0]
 80035f6:	4640      	mov	r0, r8
 80035f8:	f001 fd2a 	bl	8005050 <USBPD_PRL_SOPCapability>
 80035fc:	e6cd      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80035fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003602:	2911      	cmp	r1, #17
 8003604:	bf02      	ittt	eq
 8003606:	88b9      	ldrheq	r1, [r7, #4]
 8003608:	4008      	andeq	r0, r1
 800360a:	2813      	cmpeq	r0, #19
 800360c:	d108      	bne.n	8003620 <USBPD_PE_StateMachine_SRC+0xcf4>
 800360e:	f000 f846 	bl	800369e <.text_7>
 8003612:	f000 f892 	bl	800373a <.text_20+0x6>
 8003616:	2000      	movs	r0, #0
 8003618:	9000      	str	r0, [sp, #0]
 800361a:	2320      	movs	r3, #32
 800361c:	f000 f890 	bl	8003740 <.text_21>
 8003620:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
 8003622:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003626:	d1a4      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 8003628:	2192      	movs	r1, #146	; 0x92
 800362a:	e752      	b.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800362c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003630:	4630      	mov	r0, r6
 8003632:	f001 faca 	bl	8004bca <PE_StateMachine_UVDM>
 8003636:	e6b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003638:	6970      	ldr	r0, [r6, #20]
 800363a:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800363e:	b1b0      	cbz	r0, 800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8003640:	6970      	ldr	r0, [r6, #20]
 8003642:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8003646:	b138      	cbz	r0, 8003658 <USBPD_PE_StateMachine_SRC+0xd2c>
 8003648:	7c30      	ldrb	r0, [r6, #16]
 800364a:	215b      	movs	r1, #91	; 0x5b
 800364c:	f7fc ff83 	bl	8000556 <USBPD_PE_Notification>
 8003650:	6970      	ldr	r0, [r6, #20]
 8003652:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8003656:	6170      	str	r0, [r6, #20]
 8003658:	2003      	movs	r0, #3
 800365a:	7cb1      	ldrb	r1, [r6, #18]
 800365c:	7470      	strb	r0, [r6, #17]
 800365e:	2903      	cmp	r1, #3
 8003660:	d004      	beq.n	800366c <USBPD_PE_StateMachine_SRC+0xd40>
 8003662:	f000 f82e 	bl	80036c2 <.text_10>
 8003666:	2203      	movs	r2, #3
 8003668:	2004      	movs	r0, #4
 800366a:	47a0      	blx	r4
 800366c:	2401      	movs	r4, #1
 800366e:	6970      	ldr	r0, [r6, #20]
 8003670:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8003674:	2c00      	cmp	r4, #0
 8003676:	6170      	str	r0, [r6, #20]
 8003678:	f43f a9b8 	beq.w	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 800367c:	f7ff bad6 	b.w	8002c2c <USBPD_PE_StateMachine_SRC+0x300>

08003680 <.text_3>:
 8003680:	20000000 	.word	0x20000000

08003684 <.text_4>:
 8003684:	68b3      	ldr	r3, [r6, #8]
 8003686:	7c30      	ldrb	r0, [r6, #16]
 8003688:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800368a:	4770      	bx	lr

0800368c <.text_5>:
 800368c:	68b3      	ldr	r3, [r6, #8]
 800368e:	7c30      	ldrb	r0, [r6, #16]
 8003690:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8003694:	4770      	bx	lr

08003696 <.text_6>:
 8003696:	7730      	strb	r0, [r6, #28]
 8003698:	f8a6 a01e 	strh.w	sl, [r6, #30]
 800369c:	4770      	bx	lr

0800369e <.text_7>:
 800369e:	2014      	movs	r0, #20
 80036a0:	f88d 000c 	strb.w	r0, [sp, #12]
 80036a4:	4770      	bx	lr

080036a6 <.text_8>:
 80036a6:	2003      	movs	r0, #3
 80036a8:	7470      	strb	r0, [r6, #17]
 80036aa:	2400      	movs	r4, #0
 80036ac:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80036b0:	2814      	cmp	r0, #20
 80036b2:	4770      	bx	lr

080036b4 <.text_9>:
 80036b4:	9100      	str	r1, [sp, #0]
 80036b6:	2300      	movs	r3, #0
 80036b8:	7c31      	ldrb	r1, [r6, #16]
 80036ba:	f8d9 c000 	ldr.w	ip, [r9]
 80036be:	2004      	movs	r0, #4

080036c0 <__iar_annotation$$tailcall>:
 80036c0:	4760      	bx	ip

080036c2 <.text_10>:
 80036c2:	74b0      	strb	r0, [r6, #18]
 80036c4:	2100      	movs	r1, #0
 80036c6:	9100      	str	r1, [sp, #0]
 80036c8:	2300      	movs	r3, #0
 80036ca:	7c31      	ldrb	r1, [r6, #16]
 80036cc:	f8d9 4000 	ldr.w	r4, [r9]
 80036d0:	4770      	bx	lr

080036d2 <.text_11>:
 80036d2:	6870      	ldr	r0, [r6, #4]
 80036d4:	6801      	ldr	r1, [r0, #0]
 80036d6:	f041 0110 	orr.w	r1, r1, #16
 80036da:	6001      	str	r1, [r0, #0]
 80036dc:	4770      	bx	lr

080036de <.text_12>:
 80036de:	6870      	ldr	r0, [r6, #4]
 80036e0:	6801      	ldr	r1, [r0, #0]
 80036e2:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80036e6:	2800      	cmp	r0, #0
 80036e8:	4770      	bx	lr

080036ea <.text_13>:
 80036ea:	6870      	ldr	r0, [r6, #4]
 80036ec:	6801      	ldr	r1, [r0, #0]
 80036ee:	f021 0110 	bic.w	r1, r1, #16
 80036f2:	6001      	str	r1, [r0, #0]
 80036f4:	4770      	bx	lr

080036f6 <.text_14>:
 80036f6:	68b3      	ldr	r3, [r6, #8]
 80036f8:	7c30      	ldrb	r0, [r6, #16]
 80036fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80036fc:	2204      	movs	r2, #4
 80036fe:	2101      	movs	r1, #1

08003700 <__iar_annotation$$tailcall>:
 8003700:	4720      	bx	r4

08003702 <.text_15>:
 8003702:	68b3      	ldr	r3, [r6, #8]
 8003704:	7c30      	ldrb	r0, [r6, #16]
 8003706:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 800370a:	2101      	movs	r1, #1

0800370c <__iar_annotation$$tailcall>:
 800370c:	4760      	bx	ip

0800370e <.text_16>:
 800370e:	68b3      	ldr	r3, [r6, #8]
 8003710:	7c30      	ldrb	r0, [r6, #16]
 8003712:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8003716:	2207      	movs	r2, #7
 8003718:	2101      	movs	r1, #1

0800371a <__iar_annotation$$tailcall>:
 800371a:	4760      	bx	ip

0800371c <.text_17>:
 800371c:	7c30      	ldrb	r0, [r6, #16]
 800371e:	f7fc bf1a 	b.w	8000556 <USBPD_PE_Notification>

08003722 <.text_18>:
 8003722:	2104      	movs	r1, #4
 8003724:	4630      	mov	r0, r6
 8003726:	f7fd bdfd 	b.w	8001324 <PE_SetPowerNegotiation>

0800372a <.text_19>:
 800372a:	2206      	movs	r2, #6
 800372c:	2101      	movs	r1, #1
 800372e:	4630      	mov	r0, r6
 8003730:	f7fd bdf1 	b.w	8001316 <PE_CallHardResetCallback>

08003734 <.text_20>:
 8003734:	2114      	movs	r1, #20
 8003736:	f88d 100c 	strb.w	r1, [sp, #12]
 800373a:	4630      	mov	r0, r6
 800373c:	f7fd b936 	b.w	80009ac <PE_Clear_RxEvent>

08003740 <.text_21>:
 8003740:	2203      	movs	r2, #3
 8003742:	2100      	movs	r1, #0
 8003744:	4630      	mov	r0, r6
 8003746:	f7fd be8f 	b.w	8001468 <PE_Send_CtrlMessage>

0800374a <PE_Send_SRCCapabilities>:
 800374a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800374c:	4604      	mov	r4, r0
 800374e:	2000      	movs	r0, #0
 8003750:	9002      	str	r0, [sp, #8]
 8003752:	460d      	mov	r5, r1
 8003754:	68a6      	ldr	r6, [r4, #8]
 8003756:	7c20      	ldrb	r0, [r4, #16]
 8003758:	6977      	ldr	r7, [r6, #20]
 800375a:	ab02      	add	r3, sp, #8
 800375c:	f204 2265 	addw	r2, r4, #613	; 0x265
 8003760:	2100      	movs	r1, #0
 8003762:	47b8      	blx	r7
 8003764:	9802      	ldr	r0, [sp, #8]
 8003766:	1c80      	adds	r0, r0, #2
 8003768:	9002      	str	r0, [sp, #8]
 800376a:	9802      	ldr	r0, [sp, #8]
 800376c:	2104      	movs	r1, #4
 800376e:	f7fd fe1b 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8003772:	b998      	cbnz	r0, 800379c <PE_Send_SRCCapabilities+0x52>
 8003774:	6860      	ldr	r0, [r4, #4]
 8003776:	6801      	ldr	r1, [r0, #0]
 8003778:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800377c:	2800      	cmp	r0, #0
 800377e:	d00d      	beq.n	800379c <PE_Send_SRCCapabilities+0x52>
 8003780:	9802      	ldr	r0, [sp, #8]
 8003782:	9501      	str	r5, [sp, #4]
 8003784:	b280      	uxth	r0, r0
 8003786:	9000      	str	r0, [sp, #0]
 8003788:	f204 2363 	addw	r3, r4, #611	; 0x263
 800378c:	7c20      	ldrb	r0, [r4, #16]
 800378e:	2201      	movs	r2, #1
 8003790:	2100      	movs	r1, #0
 8003792:	f001 fc5f 	bl	8005054 <USBPD_PRL_SendMessage>
 8003796:	2803      	cmp	r0, #3
 8003798:	d0e7      	beq.n	800376a <PE_Send_SRCCapabilities+0x20>
 800379a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800379c:	2010      	movs	r0, #16
 800379e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080037a0 <PE_StateMachine_VDMCable>:
 80037a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a4:	b08c      	sub	sp, #48	; 0x30
 80037a6:	2602      	movs	r6, #2
 80037a8:	4605      	mov	r5, r0
 80037aa:	4688      	mov	r8, r1
 80037ac:	7c68      	ldrb	r0, [r5, #17]
 80037ae:	2805      	cmp	r0, #5
 80037b0:	f505 7414 	add.w	r4, r5, #592	; 0x250
 80037b4:	f248 072d 	movw	r7, #32813	; 0x802d
 80037b8:	d002      	beq.n	80037c0 <PE_StateMachine_VDMCable+0x20>
 80037ba:	289a      	cmp	r0, #154	; 0x9a
 80037bc:	d061      	beq.n	8003882 <PE_StateMachine_VDMCable+0xe2>
 80037be:	e0f1      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 80037c0:	686a      	ldr	r2, [r5, #4]
 80037c2:	7811      	ldrb	r1, [r2, #0]
 80037c4:	f001 0103 	and.w	r1, r1, #3
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 fa36 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	0952      	lsrs	r2, r2, #5
 80037d2:	0152      	lsls	r2, r2, #5
 80037d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	6022      	str	r2, [r4, #0]
 80037de:	4623      	mov	r3, r4
 80037e0:	6868      	ldr	r0, [r5, #4]
 80037e2:	6801      	ldr	r1, [r0, #0]
 80037e4:	f649 003f 	movw	r0, #38975	; 0x983f
 80037e8:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80037ec:	4002      	ands	r2, r0
 80037ee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80037f2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80037f6:	6022      	str	r2, [r4, #0]
 80037f8:	6868      	ldr	r0, [r5, #4]
 80037fa:	6801      	ldr	r1, [r0, #0]
 80037fc:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8003800:	2800      	cmp	r0, #0
 8003802:	bf1d      	ittte	ne
 8003804:	6968      	ldrne	r0, [r5, #20]
 8003806:	0880      	lsrne	r0, r0, #2
 8003808:	f000 0001 	andne.w	r0, r0, #1
 800380c:	2002      	moveq	r0, #2
 800380e:	9002      	str	r0, [sp, #8]
 8003810:	2101      	movs	r1, #1
 8003812:	209a      	movs	r0, #154	; 0x9a
 8003814:	9001      	str	r0, [sp, #4]
 8003816:	9100      	str	r1, [sp, #0]
 8003818:	220f      	movs	r2, #15
 800381a:	4628      	mov	r0, r5
 800381c:	f7fd fe51 	bl	80014c2 <PE_Send_DataMessage>
 8003820:	b950      	cbnz	r0, 8003838 <PE_StateMachine_VDMCable+0x98>
 8003822:	6968      	ldr	r0, [r5, #20]
 8003824:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003828:	6168      	str	r0, [r5, #20]
 800382a:	2151      	movs	r1, #81	; 0x51
 800382c:	7729      	strb	r1, [r5, #28]
 800382e:	f248 001e 	movw	r0, #32798	; 0x801e
 8003832:	8468      	strh	r0, [r5, #34]	; 0x22
 8003834:	261e      	movs	r6, #30
 8003836:	e0b5      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003838:	2809      	cmp	r0, #9
 800383a:	d0fc      	beq.n	8003836 <PE_StateMachine_VDMCable+0x96>
 800383c:	7ca0      	ldrb	r0, [r4, #18]
 800383e:	2815      	cmp	r0, #21
 8003840:	bf38      	it	cc
 8003842:	846f      	strhcc	r7, [r5, #34]	; 0x22
 8003844:	d307      	bcc.n	8003856 <PE_StateMachine_VDMCable+0xb6>
 8003846:	68e8      	ldr	r0, [r5, #12]
 8003848:	6944      	ldr	r4, [r0, #20]
 800384a:	b124      	cbz	r4, 8003856 <PE_StateMachine_VDMCable+0xb6>
 800384c:	7c28      	ldrb	r0, [r5, #16]
 800384e:	2300      	movs	r3, #0
 8003850:	2205      	movs	r2, #5
 8003852:	2101      	movs	r1, #1
 8003854:	47a0      	blx	r4
 8003856:	f000 f8ae 	bl	80039b6 <.text_4>
 800385a:	f000 8080 	beq.w	800395e <PE_StateMachine_VDMCable+0x1be>
 800385e:	8be8      	ldrh	r0, [r5, #30]
 8003860:	0441      	lsls	r1, r0, #17
 8003862:	d00b      	beq.n	800387c <PE_StateMachine_VDMCable+0xdc>
 8003864:	2008      	movs	r0, #8
 8003866:	7468      	strb	r0, [r5, #17]
 8003868:	8be9      	ldrh	r1, [r5, #30]
 800386a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800386e:	292d      	cmp	r1, #45	; 0x2d
 8003870:	bf2e      	itee	cs
 8003872:	262d      	movcs	r6, #45	; 0x2d
 8003874:	8bee      	ldrhcc	r6, [r5, #30]
 8003876:	f3c6 060e 	ubfxcc	r6, r6, #0, #15
 800387a:	e093      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800387c:	2007      	movs	r0, #7
 800387e:	7468      	strb	r0, [r5, #17]
 8003880:	e090      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003882:	2001      	movs	r0, #1
 8003884:	f7fd f8c6 	bl	8000a14 <PE_Convert_SOPRxEvent>
 8003888:	f898 2000 	ldrb.w	r2, [r8]
 800388c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800388e:	4282      	cmp	r2, r0
 8003890:	d142      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003892:	0bc8      	lsrs	r0, r1, #15
 8003894:	d140      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003896:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800389a:	2800      	cmp	r0, #0
 800389c:	d03c      	beq.n	8003918 <PE_StateMachine_VDMCable+0x178>
 800389e:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80038a2:	f000 001f 	and.w	r0, r0, #31
 80038a6:	280f      	cmp	r0, #15
 80038a8:	d136      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 80038aa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80038ac:	7887      	ldrb	r7, [r0, #2]
 80038ae:	f007 011f 	and.w	r1, r7, #31
 80038b2:	2901      	cmp	r1, #1
 80038b4:	d12b      	bne.n	800390e <PE_StateMachine_VDMCable+0x16e>
 80038b6:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038ba:	b340      	cbz	r0, 800390e <PE_StateMachine_VDMCable+0x16e>
 80038bc:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80038be:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 f9b9 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80038c8:	68e9      	ldr	r1, [r5, #12]
 80038ca:	6948      	ldr	r0, [r1, #20]
 80038cc:	b1e8      	cbz	r0, 800390a <PE_StateMachine_VDMCable+0x16a>
 80038ce:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038d2:	2801      	cmp	r0, #1
 80038d4:	d119      	bne.n	800390a <PE_StateMachine_VDMCable+0x16a>
 80038d6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80038d8:	1d81      	adds	r1, r0, #6
 80038da:	7c28      	ldrb	r0, [r5, #16]
 80038dc:	aa03      	add	r2, sp, #12
 80038de:	f001 fa25 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80038e2:	b970      	cbnz	r0, 8003902 <PE_StateMachine_VDMCable+0x162>
 80038e4:	68ee      	ldr	r6, [r5, #12]
 80038e6:	7c28      	ldrb	r0, [r5, #16]
 80038e8:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80038ec:	6977      	ldr	r7, [r6, #20]
 80038ee:	ab03      	add	r3, sp, #12
 80038f0:	2101      	movs	r1, #1
 80038f2:	47b8      	blx	r7
 80038f4:	7c28      	ldrb	r0, [r5, #16]
 80038f6:	2152      	movs	r1, #82	; 0x52
 80038f8:	f7fc fe2d 	bl	8000556 <USBPD_PE_Notification>
 80038fc:	2014      	movs	r0, #20
 80038fe:	74a0      	strb	r0, [r4, #18]
 8003900:	e003      	b.n	800390a <PE_StateMachine_VDMCable+0x16a>
 8003902:	7c28      	ldrb	r0, [r5, #16]
 8003904:	211b      	movs	r1, #27
 8003906:	f7fc fe26 	bl	8000556 <USBPD_PE_Notification>
 800390a:	f000 f85a 	bl	80039c2 <.text_5>
 800390e:	f898 0000 	ldrb.w	r0, [r8]
 8003912:	2814      	cmp	r0, #20
 8003914:	d10e      	bne.n	8003934 <PE_StateMachine_VDMCable+0x194>
 8003916:	e045      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003918:	f001 011f 	and.w	r1, r1, #31
 800391c:	2910      	cmp	r1, #16
 800391e:	d110      	bne.n	8003942 <PE_StateMachine_VDMCable+0x1a2>
 8003920:	f000 f84f 	bl	80039c2 <.text_5>
 8003924:	2159      	movs	r1, #89	; 0x59
 8003926:	7c28      	ldrb	r0, [r5, #16]
 8003928:	f7fc fe15 	bl	8000556 <USBPD_PE_Notification>
 800392c:	f898 0000 	ldrb.w	r0, [r8]
 8003930:	2814      	cmp	r0, #20
 8003932:	d037      	beq.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003934:	2114      	movs	r1, #20
 8003936:	f888 1000 	strb.w	r1, [r8]
 800393a:	4628      	mov	r0, r5
 800393c:	f7fd f836 	bl	80009ac <PE_Clear_RxEvent>
 8003940:	e030      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003942:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8003944:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003948:	d12c      	bne.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800394a:	2100      	movs	r1, #0
 800394c:	8469      	strh	r1, [r5, #34]	; 0x22
 800394e:	f000 f832 	bl	80039b6 <.text_4>
 8003952:	d108      	bne.n	8003966 <PE_StateMachine_VDMCable+0x1c6>
 8003954:	68e8      	ldr	r0, [r5, #12]
 8003956:	6944      	ldr	r4, [r0, #20]
 8003958:	b10c      	cbz	r4, 800395e <PE_StateMachine_VDMCable+0x1be>
 800395a:	f000 f827 	bl	80039ac <.text_3>
 800395e:	2003      	movs	r0, #3
 8003960:	7468      	strb	r0, [r5, #17]
 8003962:	2600      	movs	r6, #0
 8003964:	e01e      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003966:	6868      	ldr	r0, [r5, #4]
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f3c1 6081 	ubfx	r0, r1, #26, #2
 800396e:	2802      	cmp	r0, #2
 8003970:	d10e      	bne.n	8003990 <PE_StateMachine_VDMCable+0x1f0>
 8003972:	6869      	ldr	r1, [r5, #4]
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	2001      	movs	r0, #1
 8003978:	f360 629b 	bfi	r2, r0, #26, #2
 800397c:	600a      	str	r2, [r1, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	7c28      	ldrb	r0, [r5, #16]
 8003982:	f001 fb3f 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003986:	846f      	strh	r7, [r5, #34]	; 0x22
 8003988:	2008      	movs	r0, #8
 800398a:	262d      	movs	r6, #45	; 0x2d
 800398c:	7468      	strb	r0, [r5, #17]
 800398e:	e007      	b.n	80039a0 <PE_StateMachine_VDMCable+0x200>
 8003990:	68e8      	ldr	r0, [r5, #12]
 8003992:	6944      	ldr	r4, [r0, #20]
 8003994:	b10c      	cbz	r4, 800399a <PE_StateMachine_VDMCable+0x1fa>
 8003996:	f000 f809 	bl	80039ac <.text_3>
 800399a:	2007      	movs	r0, #7
 800399c:	7468      	strb	r0, [r5, #17]
 800399e:	2600      	movs	r6, #0
 80039a0:	2000      	movs	r0, #0
 80039a2:	7728      	strb	r0, [r5, #28]
 80039a4:	4630      	mov	r0, r6
 80039a6:	b00c      	add	sp, #48	; 0x30
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039ac <.text_3>:
 80039ac:	7c28      	ldrb	r0, [r5, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	2204      	movs	r2, #4
 80039b2:	2101      	movs	r1, #1

080039b4 <__iar_annotation$$tailcall>:
 80039b4:	4720      	bx	r4

080039b6 <.text_4>:
 80039b6:	6868      	ldr	r0, [r5, #4]
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039be:	2803      	cmp	r0, #3
 80039c0:	4770      	bx	lr

080039c2 <.text_5>:
 80039c2:	2000      	movs	r0, #0
 80039c4:	8468      	strh	r0, [r5, #34]	; 0x22
 80039c6:	6868      	ldr	r0, [r5, #4]
 80039c8:	6801      	ldr	r1, [r0, #0]
 80039ca:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039ce:	2803      	cmp	r0, #3
 80039d0:	d102      	bne.n	80039d8 <.text_5+0x16>
 80039d2:	7468      	strb	r0, [r5, #17]
 80039d4:	2600      	movs	r6, #0
 80039d6:	4770      	bx	lr
 80039d8:	2007      	movs	r0, #7
 80039da:	2600      	movs	r6, #0
 80039dc:	7468      	strb	r0, [r5, #17]
 80039de:	772e      	strb	r6, [r5, #28]
 80039e0:	4770      	bx	lr

080039e2 <PE_SubStateMachine_VconnSwap>:
 80039e2:	b538      	push	{r3, r4, r5, lr}
 80039e4:	4604      	mov	r4, r0
 80039e6:	2502      	movs	r5, #2
 80039e8:	7c60      	ldrb	r0, [r4, #17]
 80039ea:	289d      	cmp	r0, #157	; 0x9d
 80039ec:	d010      	beq.n	8003a10 <PE_SubStateMachine_VconnSwap+0x2e>
 80039ee:	d30e      	bcc.n	8003a0e <PE_SubStateMachine_VconnSwap+0x2c>
 80039f0:	289f      	cmp	r0, #159	; 0x9f
 80039f2:	d054      	beq.n	8003a9e <PE_SubStateMachine_VconnSwap+0xbc>
 80039f4:	d33b      	bcc.n	8003a6e <PE_SubStateMachine_VconnSwap+0x8c>
 80039f6:	28a1      	cmp	r0, #161	; 0xa1
 80039f8:	f000 807e 	beq.w	8003af8 <PE_SubStateMachine_VconnSwap+0x116>
 80039fc:	d370      	bcc.n	8003ae0 <PE_SubStateMachine_VconnSwap+0xfe>
 80039fe:	28a3      	cmp	r0, #163	; 0xa3
 8003a00:	f000 809a 	beq.w	8003b38 <PE_SubStateMachine_VconnSwap+0x156>
 8003a04:	f0c0 8086 	bcc.w	8003b14 <PE_SubStateMachine_VconnSwap+0x132>
 8003a08:	28a4      	cmp	r0, #164	; 0xa4
 8003a0a:	f000 80ee 	beq.w	8003bea <PE_SubStateMachine_VconnSwap+0x208>
 8003a0e:	e0f8      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a10:	6861      	ldr	r1, [r4, #4]
 8003a12:	6808      	ldr	r0, [r1, #0]
 8003a14:	f400 50b8 	and.w	r0, r0, #5888	; 0x1700
 8003a18:	f5b0 5f98 	cmp.w	r0, #4864	; 0x1300
 8003a1c:	d11f      	bne.n	8003a5e <PE_SubStateMachine_VconnSwap+0x7c>
 8003a1e:	68a1      	ldr	r1, [r4, #8]
 8003a20:	7c20      	ldrb	r0, [r4, #16]
 8003a22:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003a24:	4790      	blx	r2
 8003a26:	280a      	cmp	r0, #10
 8003a28:	d002      	beq.n	8003a30 <PE_SubStateMachine_VconnSwap+0x4e>
 8003a2a:	280d      	cmp	r0, #13
 8003a2c:	d007      	beq.n	8003a3e <PE_SubStateMachine_VconnSwap+0x5c>
 8003a2e:	e00d      	b.n	8003a4c <PE_SubStateMachine_VconnSwap+0x6a>
 8003a30:	6961      	ldr	r1, [r4, #20]
 8003a32:	209e      	movs	r0, #158	; 0x9e
 8003a34:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003a38:	7460      	strb	r0, [r4, #17]
 8003a3a:	6161      	str	r1, [r4, #20]
 8003a3c:	e0e1      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	9000      	str	r0, [sp, #0]
 8003a42:	2303      	movs	r3, #3
 8003a44:	220c      	movs	r2, #12
 8003a46:	f000 f8f4 	bl	8003c32 <.text_10>
 8003a4a:	e0da      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	9000      	str	r0, [sp, #0]
 8003a50:	2303      	movs	r3, #3
 8003a52:	2204      	movs	r2, #4
 8003a54:	f000 f8ed 	bl	8003c32 <.text_10>
 8003a58:	2003      	movs	r0, #3
 8003a5a:	7460      	strb	r0, [r4, #17]
 8003a5c:	e005      	b.n	8003a6a <PE_SubStateMachine_VconnSwap+0x88>
 8003a5e:	6960      	ldr	r0, [r4, #20]
 8003a60:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003a64:	2103      	movs	r1, #3
 8003a66:	6160      	str	r0, [r4, #20]
 8003a68:	7461      	strb	r1, [r4, #17]
 8003a6a:	2500      	movs	r5, #0
 8003a6c:	e0c9      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	239e      	movs	r3, #158	; 0x9e
 8003a74:	2203      	movs	r2, #3
 8003a76:	f000 f8dc 	bl	8003c32 <.text_10>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d1f6      	bne.n	8003a6c <PE_SubStateMachine_VconnSwap+0x8a>
 8003a7e:	6860      	ldr	r0, [r4, #4]
 8003a80:	6801      	ldr	r1, [r0, #0]
 8003a82:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003a86:	b130      	cbz	r0, 8003a96 <PE_SubStateMachine_VconnSwap+0xb4>
 8003a88:	209f      	movs	r0, #159	; 0x9f
 8003a8a:	7460      	strb	r0, [r4, #17]
 8003a8c:	f248 0196 	movw	r1, #32918	; 0x8096
 8003a90:	83e1      	strh	r1, [r4, #30]
 8003a92:	2596      	movs	r5, #150	; 0x96
 8003a94:	e001      	b.n	8003a9a <PE_SubStateMachine_VconnSwap+0xb8>
 8003a96:	20a0      	movs	r0, #160	; 0xa0
 8003a98:	7460      	strb	r0, [r4, #17]
 8003a9a:	213f      	movs	r1, #63	; 0x3f
 8003a9c:	e0a1      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003a9e:	8be0      	ldrh	r0, [r4, #30]
 8003aa0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003aa4:	f000 8095 	beq.w	8003bd2 <PE_SubStateMachine_VconnSwap+0x1f0>
 8003aa8:	780a      	ldrb	r2, [r1, #0]
 8003aaa:	2a11      	cmp	r2, #17
 8003aac:	bf01      	itttt	eq
 8003aae:	8ea2      	ldrheq	r2, [r4, #52]	; 0x34
 8003ab0:	f24f 001f 	movweq	r0, #61471	; 0xf01f
 8003ab4:	4002      	andeq	r2, r0
 8003ab6:	2a06      	cmpeq	r2, #6
 8003ab8:	d111      	bne.n	8003ade <PE_SubStateMachine_VconnSwap+0xfc>
 8003aba:	f000 f8ab 	bl	8003c14 <.text_8>
 8003abe:	68a0      	ldr	r0, [r4, #8]
 8003ac0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ac2:	b112      	cbz	r2, 8003aca <PE_SubStateMachine_VconnSwap+0xe8>
 8003ac4:	7c20      	ldrb	r0, [r4, #16]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4790      	blx	r2
 8003aca:	f000 f89c 	bl	8003c06 <.text_7>
 8003ace:	2142      	movs	r1, #66	; 0x42
 8003ad0:	7c20      	ldrb	r0, [r4, #16]
 8003ad2:	f7fc fd40 	bl	8000556 <USBPD_PE_Notification>
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	8465      	strh	r5, [r4, #34]	; 0x22
 8003ada:	f884 5262 	strb.w	r5, [r4, #610]	; 0x262
 8003ade:	e090      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003ae0:	68a0      	ldr	r0, [r4, #8]
 8003ae2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ae4:	b112      	cbz	r2, 8003aec <PE_SubStateMachine_VconnSwap+0x10a>
 8003ae6:	7c20      	ldrb	r0, [r4, #16]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4790      	blx	r2
 8003aec:	20a1      	movs	r0, #161	; 0xa1
 8003aee:	2100      	movs	r1, #0
 8003af0:	7460      	strb	r0, [r4, #17]
 8003af2:	f884 1262 	strb.w	r1, [r4, #610]	; 0x262
 8003af6:	e084      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003af8:	2000      	movs	r0, #0
 8003afa:	9000      	str	r0, [sp, #0]
 8003afc:	2303      	movs	r3, #3
 8003afe:	2206      	movs	r2, #6
 8003b00:	f000 f897 	bl	8003c32 <.text_10>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d17c      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b08:	6960      	ldr	r0, [r4, #20]
 8003b0a:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003b0e:	6160      	str	r0, [r4, #20]
 8003b10:	2142      	movs	r1, #66	; 0x42
 8003b12:	e066      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b14:	2000      	movs	r0, #0
 8003b16:	9000      	str	r0, [sp, #0]
 8003b18:	23a3      	movs	r3, #163	; 0xa3
 8003b1a:	220b      	movs	r2, #11
 8003b1c:	f000 f889 	bl	8003c32 <.text_10>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d16e      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b24:	6960      	ldr	r0, [r4, #20]
 8003b26:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8003b2a:	6160      	str	r0, [r4, #20]
 8003b2c:	f248 011b 	movw	r1, #32795	; 0x801b
 8003b30:	83e1      	strh	r1, [r4, #30]
 8003b32:	251b      	movs	r5, #27
 8003b34:	213e      	movs	r1, #62	; 0x3e
 8003b36:	e054      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b38:	7808      	ldrb	r0, [r1, #0]
 8003b3a:	2811      	cmp	r0, #17
 8003b3c:	bf04      	itt	eq
 8003b3e:	8ea0      	ldrheq	r0, [r4, #52]	; 0x34
 8003b40:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8003b44:	d141      	bne.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b46:	f000 001f 	and.w	r0, r0, #31
 8003b4a:	2803      	cmp	r0, #3
 8003b4c:	d006      	beq.n	8003b5c <PE_SubStateMachine_VconnSwap+0x17a>
 8003b4e:	2804      	cmp	r0, #4
 8003b50:	d01c      	beq.n	8003b8c <PE_SubStateMachine_VconnSwap+0x1aa>
 8003b52:	280c      	cmp	r0, #12
 8003b54:	d013      	beq.n	8003b7e <PE_SubStateMachine_VconnSwap+0x19c>
 8003b56:	2810      	cmp	r0, #16
 8003b58:	d01f      	beq.n	8003b9a <PE_SubStateMachine_VconnSwap+0x1b8>
 8003b5a:	e036      	b.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b5c:	6860      	ldr	r0, [r4, #4]
 8003b5e:	6802      	ldr	r2, [r0, #0]
 8003b60:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003b64:	2800      	cmp	r0, #0
 8003b66:	bf19      	ittee	ne
 8003b68:	209f      	movne	r0, #159	; 0x9f
 8003b6a:	7460      	strbne	r0, [r4, #17]
 8003b6c:	22a0      	moveq	r2, #160	; 0xa0
 8003b6e:	7462      	strbeq	r2, [r4, #17]
 8003b70:	7808      	ldrb	r0, [r1, #0]
 8003b72:	2814      	cmp	r0, #20
 8003b74:	d001      	beq.n	8003b7a <PE_SubStateMachine_VconnSwap+0x198>
 8003b76:	f000 f84d 	bl	8003c14 <.text_8>
 8003b7a:	213f      	movs	r1, #63	; 0x3f
 8003b7c:	e022      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b7e:	f000 f84e 	bl	8003c1e <.text_9>
 8003b82:	d001      	beq.n	8003b88 <PE_SubStateMachine_VconnSwap+0x1a6>
 8003b84:	f000 f846 	bl	8003c14 <.text_8>
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	e01b      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b8c:	f000 f847 	bl	8003c1e <.text_9>
 8003b90:	d001      	beq.n	8003b96 <PE_SubStateMachine_VconnSwap+0x1b4>
 8003b92:	f000 f83f 	bl	8003c14 <.text_8>
 8003b96:	2141      	movs	r1, #65	; 0x41
 8003b98:	e014      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b9a:	6860      	ldr	r0, [r4, #4]
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003ba2:	b910      	cbnz	r0, 8003baa <PE_SubStateMachine_VconnSwap+0x1c8>
 8003ba4:	20a4      	movs	r0, #164	; 0xa4
 8003ba6:	7460      	strb	r0, [r4, #17]
 8003ba8:	e006      	b.n	8003bb8 <PE_SubStateMachine_VconnSwap+0x1d6>
 8003baa:	6960      	ldr	r0, [r4, #20]
 8003bac:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	6160      	str	r0, [r4, #20]
 8003bb4:	7462      	strb	r2, [r4, #17]
 8003bb6:	2500      	movs	r5, #0
 8003bb8:	7808      	ldrb	r0, [r1, #0]
 8003bba:	2814      	cmp	r0, #20
 8003bbc:	d001      	beq.n	8003bc2 <PE_SubStateMachine_VconnSwap+0x1e0>
 8003bbe:	f000 f829 	bl	8003c14 <.text_8>
 8003bc2:	2143      	movs	r1, #67	; 0x43
 8003bc4:	7c20      	ldrb	r0, [r4, #16]
 8003bc6:	f7fc fcc6 	bl	8000556 <USBPD_PE_Notification>
 8003bca:	8be0      	ldrh	r0, [r4, #30]
 8003bcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003bd0:	d117      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bd2:	6960      	ldr	r0, [r4, #20]
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	7461      	strb	r1, [r4, #17]
 8003bd8:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003bdc:	6160      	str	r0, [r4, #20]
 8003bde:	2500      	movs	r5, #0
 8003be0:	211c      	movs	r1, #28
 8003be2:	7c20      	ldrb	r0, [r4, #16]
 8003be4:	f7fc fcb7 	bl	8000556 <USBPD_PE_Notification>
 8003be8:	e00b      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bea:	68a0      	ldr	r0, [r4, #8]
 8003bec:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003bee:	b112      	cbz	r2, 8003bf6 <PE_SubStateMachine_VconnSwap+0x214>
 8003bf0:	7c20      	ldrb	r0, [r4, #16]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4790      	blx	r2
 8003bf6:	f000 f806 	bl	8003c06 <.text_7>
 8003bfa:	f248 002d 	movw	r0, #32813	; 0x802d
 8003bfe:	2500      	movs	r5, #0
 8003c00:	8460      	strh	r0, [r4, #34]	; 0x22
 8003c02:	4628      	mov	r0, r5
 8003c04:	bd32      	pop	{r1, r4, r5, pc}

08003c06 <.text_7>:
 8003c06:	6960      	ldr	r0, [r4, #20]
 8003c08:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003c0c:	6160      	str	r0, [r4, #20]
 8003c0e:	2103      	movs	r1, #3
 8003c10:	7461      	strb	r1, [r4, #17]
 8003c12:	4770      	bx	lr

08003c14 <.text_8>:
 8003c14:	2214      	movs	r2, #20
 8003c16:	700a      	strb	r2, [r1, #0]
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7fc bec7 	b.w	80009ac <PE_Clear_RxEvent>

08003c1e <.text_9>:
 8003c1e:	6960      	ldr	r0, [r4, #20]
 8003c20:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003c24:	6160      	str	r0, [r4, #20]
 8003c26:	2203      	movs	r2, #3
 8003c28:	7462      	strb	r2, [r4, #17]
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	7808      	ldrb	r0, [r1, #0]
 8003c2e:	2814      	cmp	r0, #20
 8003c30:	4770      	bx	lr

08003c32 <.text_10>:
 8003c32:	2100      	movs	r1, #0
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7fd bc17 	b.w	8001468 <PE_Send_CtrlMessage>

08003c3a <PE_ExtRevisionInteroperability_Cable>:
 8003c3a:	6842      	ldr	r2, [r0, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	f002 0303 	and.w	r3, r2, #3
 8003c42:	4299      	cmp	r1, r3
 8003c44:	bf28      	it	cs
 8003c46:	4619      	movcs	r1, r3
 8003c48:	f361 629b 	bfi	r2, r1, #26, #2
 8003c4c:	6841      	ldr	r1, [r0, #4]
 8003c4e:	600a      	str	r2, [r1, #0]
 8003c50:	f3c2 6181 	ubfx	r1, r2, #26, #2
 8003c54:	7c00      	ldrb	r0, [r0, #16]
 8003c56:	f001 b9d5 	b.w	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
	...

08003c5c <USBPD_PE_SVDM_RequestIdentity>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4ab4      	ldr	r2, [pc, #720]	; (8003f30 <.text_16>)
 8003c60:	4603      	mov	r3, r0
 8003c62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	685d      	ldr	r5, [r3, #4]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	f3c5 2340 	ubfx	r3, r5, #9, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf1e      	ittt	ne
 8003c74:	68e3      	ldrne	r3, [r4, #12]
 8003c76:	2b00      	cmpne	r3, #0
 8003c78:	2902      	cmpne	r1, #2
 8003c7a:	d101      	bne.n	8003c80 <USBPD_PE_SVDM_RequestIdentity+0x24>
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	e027      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c80:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003c84:	782b      	ldrb	r3, [r5, #0]
 8003c86:	b913      	cbnz	r3, 8003c8e <USBPD_PE_SVDM_RequestIdentity+0x32>
 8003c88:	f000 f849 	bl	8003d1e <.text_4>
 8003c8c:	b90b      	cbnz	r3, 8003c92 <USBPD_PE_SVDM_RequestIdentity+0x36>
 8003c8e:	2203      	movs	r2, #3
 8003c90:	e01e      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c92:	7069      	strb	r1, [r5, #1]
 8003c94:	b111      	cbz	r1, 8003c9c <USBPD_PE_SVDM_RequestIdentity+0x40>
 8003c96:	2901      	cmp	r1, #1
 8003c98:	d008      	beq.n	8003cac <USBPD_PE_SVDM_RequestIdentity+0x50>
 8003c9a:	e019      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c9c:	6861      	ldr	r1, [r4, #4]
 8003c9e:	680b      	ldr	r3, [r1, #0]
 8003ca0:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8003ca4:	2903      	cmp	r1, #3
 8003ca6:	d113      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003ca8:	217d      	movs	r1, #125	; 0x7d
 8003caa:	e00c      	b.n	8003cc6 <USBPD_PE_SVDM_RequestIdentity+0x6a>
 8003cac:	6861      	ldr	r1, [r4, #4]
 8003cae:	6809      	ldr	r1, [r1, #0]
 8003cb0:	f240 7304 	movw	r3, #1796	; 0x704
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cba:	bf1c      	itt	ne
 8003cbc:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 8003cc0:	2903      	cmpne	r1, #3
 8003cc2:	d105      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003cc4:	2105      	movs	r1, #5
 8003cc6:	7029      	strb	r1, [r5, #0]
 8003cc8:	68a2      	ldr	r2, [r4, #8]
 8003cca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ccc:	4788      	blx	r1
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}

08003cd4 <USBPD_PE_SVDM_RequestSVID>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	f000 f923 	bl	8003f20 <.text_15>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2902      	cmpne	r1, #2
 8003ce0:	2202      	moveq	r2, #2
 8003ce2:	d01a      	beq.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003ce4:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003ce8:	782b      	ldrb	r3, [r5, #0]
 8003cea:	b913      	cbnz	r3, 8003cf2 <USBPD_PE_SVDM_RequestSVID+0x1e>
 8003cec:	f000 f817 	bl	8003d1e <.text_4>
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <USBPD_PE_SVDM_RequestSVID+0x22>
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	e011      	b.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cf6:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d10d      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cfe:	237f      	movs	r3, #127	; 0x7f
 8003d00:	7069      	strb	r1, [r5, #1]
 8003d02:	702b      	strb	r3, [r5, #0]
 8003d04:	b129      	cbz	r1, 8003d12 <USBPD_PE_SVDM_RequestSVID+0x3e>
 8003d06:	2901      	cmp	r1, #1
 8003d08:	d107      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d0a:	6961      	ldr	r1, [r4, #20]
 8003d0c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d10:	b119      	cbz	r1, 8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d12:	68a1      	ldr	r1, [r4, #8]
 8003d14:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d16:	4790      	blx	r2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}

08003d1e <.text_4>:
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	681e      	ldr	r6, [r3, #0]
 8003d22:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8003d26:	4770      	bx	lr

08003d28 <USBPD_PE_SVDM_RequestMode>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	f000 f8d3 	bl	8003ed4 <.text_13>
 8003d2e:	68ec      	ldr	r4, [r5, #12]
 8003d30:	2310      	movs	r3, #16
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2902      	cmpne	r1, #2
 8003d38:	2302      	moveq	r3, #2
 8003d3a:	d01e      	beq.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d3c:	f105 0632 	add.w	r6, r5, #50	; 0x32
 8003d40:	7834      	ldrb	r4, [r6, #0]
 8003d42:	b924      	cbnz	r4, 8003d4e <USBPD_PE_SVDM_RequestMode+0x26>
 8003d44:	686c      	ldr	r4, [r5, #4]
 8003d46:	6827      	ldr	r7, [r4, #0]
 8003d48:	f3c7 3400 	ubfx	r4, r7, #12, #1
 8003d4c:	b90c      	cbnz	r4, 8003d52 <USBPD_PE_SVDM_RequestMode+0x2a>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e013      	b.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d52:	f3c7 2402 	ubfx	r4, r7, #8, #3
 8003d56:	2c03      	cmp	r4, #3
 8003d58:	d10f      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d5a:	2481      	movs	r4, #129	; 0x81
 8003d5c:	7071      	strb	r1, [r6, #1]
 8003d5e:	7034      	strb	r4, [r6, #0]
 8003d60:	f8a5 2258 	strh.w	r2, [r5, #600]	; 0x258
 8003d64:	b129      	cbz	r1, 8003d72 <USBPD_PE_SVDM_RequestMode+0x4a>
 8003d66:	2901      	cmp	r1, #1
 8003d68:	d107      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d6a:	6969      	ldr	r1, [r5, #20]
 8003d6c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d70:	b119      	cbz	r1, 8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d72:	68a9      	ldr	r1, [r5, #8]
 8003d74:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d76:	4790      	blx	r2
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003d7e <USBPD_PE_SVDM_RequestModeEnter>:
 8003d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d80:	f000 f854 	bl	8003e2c <.text_10>
 8003d84:	b90d      	cbnz	r5, 8003d8a <USBPD_PE_SVDM_RequestModeEnter+0xc>
 8003d86:	2402      	movs	r4, #2
 8003d88:	e01b      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d8a:	f106 0732 	add.w	r7, r6, #50	; 0x32
 8003d8e:	783d      	ldrb	r5, [r7, #0]
 8003d90:	b915      	cbnz	r5, 8003d98 <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8003d92:	f000 f845 	bl	8003e20 <.text_9>
 8003d96:	b90d      	cbnz	r5, 8003d9c <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 8003d98:	2403      	movs	r4, #3
 8003d9a:	e012      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d9c:	f40c 65e1 	and.w	r5, ip, #1800	; 0x708
 8003da0:	f5b5 7f42 	cmp.w	r5, #776	; 0x308
 8003da4:	d10d      	bne.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003da6:	2582      	movs	r5, #130	; 0x82
 8003da8:	f000 f831 	bl	8003e0e <.text_8>
 8003dac:	b129      	cbz	r1, 8003dba <USBPD_PE_SVDM_RequestModeEnter+0x3c>
 8003dae:	2902      	cmp	r1, #2
 8003db0:	d000      	beq.n	8003db4 <USBPD_PE_SVDM_RequestModeEnter+0x36>
 8003db2:	d206      	bcs.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003db4:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003db8:	b119      	cbz	r1, 8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003dba:	68b1      	ldr	r1, [r6, #8]
 8003dbc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003dbe:	4790      	blx	r2
 8003dc0:	2400      	movs	r4, #0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003dc6 <USBPD_PE_SVDM_RequestModeExit>:
 8003dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc8:	f000 f830 	bl	8003e2c <.text_10>
 8003dcc:	b90d      	cbnz	r5, 8003dd2 <USBPD_PE_SVDM_RequestModeExit+0xc>
 8003dce:	2402      	movs	r4, #2
 8003dd0:	e01b      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dd2:	f106 0732 	add.w	r7, r6, #50	; 0x32
 8003dd6:	783d      	ldrb	r5, [r7, #0]
 8003dd8:	b915      	cbnz	r5, 8003de0 <USBPD_PE_SVDM_RequestModeExit+0x1a>
 8003dda:	f000 f821 	bl	8003e20 <.text_9>
 8003dde:	b90d      	cbnz	r5, 8003de4 <USBPD_PE_SVDM_RequestModeExit+0x1e>
 8003de0:	2403      	movs	r4, #3
 8003de2:	e012      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003de4:	f40c 65e1 	and.w	r5, ip, #1800	; 0x708
 8003de8:	f5b5 7f42 	cmp.w	r5, #776	; 0x308
 8003dec:	d10d      	bne.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dee:	2583      	movs	r5, #131	; 0x83
 8003df0:	f000 f80d 	bl	8003e0e <.text_8>
 8003df4:	b129      	cbz	r1, 8003e02 <USBPD_PE_SVDM_RequestModeExit+0x3c>
 8003df6:	2902      	cmp	r1, #2
 8003df8:	d000      	beq.n	8003dfc <USBPD_PE_SVDM_RequestModeExit+0x36>
 8003dfa:	d206      	bcs.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dfc:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003e00:	b119      	cbz	r1, 8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003e02:	68b1      	ldr	r1, [r6, #8]
 8003e04:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e06:	4790      	blx	r2
 8003e08:	2400      	movs	r4, #0
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e0e <.text_8>:
 8003e0e:	7079      	strb	r1, [r7, #1]
 8003e10:	703d      	strb	r5, [r7, #0]
 8003e12:	f8a6 2258 	strh.w	r2, [r6, #600]	; 0x258
 8003e16:	6972      	ldr	r2, [r6, #20]
 8003e18:	f363 1288 	bfi	r2, r3, #6, #3
 8003e1c:	6172      	str	r2, [r6, #20]
 8003e1e:	4770      	bx	lr

08003e20 <.text_9>:
 8003e20:	6875      	ldr	r5, [r6, #4]
 8003e22:	f8d5 c000 	ldr.w	ip, [r5]
 8003e26:	f3cc 3500 	ubfx	r5, ip, #12, #1
 8003e2a:	4770      	bx	lr

08003e2c <.text_10>:
 8003e2c:	4c40      	ldr	r4, [pc, #256]	; (8003f30 <.text_16>)
 8003e2e:	4605      	mov	r5, r0
 8003e30:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8003e34:	68f5      	ldr	r5, [r6, #12]
 8003e36:	2410      	movs	r4, #16
 8003e38:	4770      	bx	lr

08003e3a <USBPD_PE_SVDM_RequestSpecific>:
 8003e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3c:	f7ff fff6 	bl	8003e2c <.text_10>
 8003e40:	b90d      	cbnz	r5, 8003e46 <USBPD_PE_SVDM_RequestSpecific+0xc>
 8003e42:	2402      	movs	r4, #2
 8003e44:	e01d      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e46:	f106 0732 	add.w	r7, r6, #50	; 0x32
 8003e4a:	783d      	ldrb	r5, [r7, #0]
 8003e4c:	b915      	cbnz	r5, 8003e54 <USBPD_PE_SVDM_RequestSpecific+0x1a>
 8003e4e:	f7ff ffe7 	bl	8003e20 <.text_9>
 8003e52:	b90d      	cbnz	r5, 8003e58 <USBPD_PE_SVDM_RequestSpecific+0x1e>
 8003e54:	2403      	movs	r4, #3
 8003e56:	e014      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e58:	6975      	ldr	r5, [r6, #20]
 8003e5a:	f3c5 4500 	ubfx	r5, r5, #16, #1
 8003e5e:	b90d      	cbnz	r5, 8003e64 <USBPD_PE_SVDM_RequestSpecific+0x2a>
 8003e60:	000d      	movs	r5, r1
 8003e62:	d10e      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e64:	f3cc 2502 	ubfx	r5, ip, #8, #3
 8003e68:	2d03      	cmp	r5, #3
 8003e6a:	d10a      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e6c:	7079      	strb	r1, [r7, #1]
 8003e6e:	2400      	movs	r4, #0
 8003e70:	2185      	movs	r1, #133	; 0x85
 8003e72:	7039      	strb	r1, [r7, #0]
 8003e74:	f506 7115 	add.w	r1, r6, #596	; 0x254
 8003e78:	600a      	str	r2, [r1, #0]
 8003e7a:	808b      	strh	r3, [r1, #4]
 8003e7c:	68b1      	ldr	r1, [r6, #8]
 8003e7e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e80:	4790      	blx	r2
 8003e82:	4620      	mov	r0, r4
 8003e84:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e86 <USBPD_PE_SVDM_RequestAttention>:
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	f000 f824 	bl	8003ed4 <.text_13>
 8003e8c:	68eb      	ldr	r3, [r5, #12]
 8003e8e:	2410      	movs	r4, #16
 8003e90:	b103      	cbz	r3, 8003e94 <USBPD_PE_SVDM_RequestAttention+0xe>
 8003e92:	b109      	cbz	r1, 8003e98 <USBPD_PE_SVDM_RequestAttention+0x12>
 8003e94:	2402      	movs	r4, #2
 8003e96:	e01b      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003e98:	f105 0332 	add.w	r3, r5, #50	; 0x32
 8003e9c:	7819      	ldrb	r1, [r3, #0]
 8003e9e:	b921      	cbnz	r1, 8003eaa <USBPD_PE_SVDM_RequestAttention+0x24>
 8003ea0:	6869      	ldr	r1, [r5, #4]
 8003ea2:	680e      	ldr	r6, [r1, #0]
 8003ea4:	f3c6 3100 	ubfx	r1, r6, #12, #1
 8003ea8:	b909      	cbnz	r1, 8003eae <USBPD_PE_SVDM_RequestAttention+0x28>
 8003eaa:	2403      	movs	r4, #3
 8003eac:	e010      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eae:	f3c6 2102 	ubfx	r1, r6, #8, #3
 8003eb2:	2903      	cmp	r1, #3
 8003eb4:	d10c      	bne.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	7059      	strb	r1, [r3, #1]
 8003eba:	2484      	movs	r4, #132	; 0x84
 8003ebc:	701c      	strb	r4, [r3, #0]
 8003ebe:	f505 7115 	add.w	r1, r5, #596	; 0x254
 8003ec2:	2306      	movs	r3, #6
 8003ec4:	600b      	str	r3, [r1, #0]
 8003ec6:	808a      	strh	r2, [r1, #4]
 8003ec8:	2400      	movs	r4, #0
 8003eca:	68a9      	ldr	r1, [r5, #8]
 8003ecc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003ece:	4790      	blx	r2
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}

08003ed4 <.text_13>:
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <.text_16>)
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003edc:	4770      	bx	lr

08003ede <USBPD_PE_UVDM_RequestMessage>:
 8003ede:	b570      	push	{r4, r5, r6, lr}
 8003ee0:	f000 f81e 	bl	8003f20 <.text_15>
 8003ee4:	b90b      	cbnz	r3, 8003eea <USBPD_PE_UVDM_RequestMessage+0xc>
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	e018      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003eea:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003eee:	782b      	ldrb	r3, [r5, #0]
 8003ef0:	b913      	cbnz	r3, 8003ef8 <USBPD_PE_UVDM_RequestMessage+0x1a>
 8003ef2:	f7ff ff14 	bl	8003d1e <.text_4>
 8003ef6:	b90b      	cbnz	r3, 8003efc <USBPD_PE_UVDM_RequestMessage+0x1e>
 8003ef8:	2203      	movs	r2, #3
 8003efa:	e00f      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003efc:	f3c6 33c0 	ubfx	r3, r6, #15, #1
 8003f00:	b90b      	cbnz	r3, 8003f06 <USBPD_PE_UVDM_RequestMessage+0x28>
 8003f02:	000b      	movs	r3, r1
 8003f04:	d10a      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f06:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d106      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f0e:	7069      	strb	r1, [r5, #1]
 8003f10:	2186      	movs	r1, #134	; 0x86
 8003f12:	7029      	strb	r1, [r5, #0]
 8003f14:	68a2      	ldr	r2, [r4, #8]
 8003f16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f18:	4788      	blx	r1
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}

08003f20 <.text_15>:
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <.text_16>)
 8003f22:	4603      	mov	r3, r0
 8003f24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003f28:	68e3      	ldr	r3, [r4, #12]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	4770      	bx	lr
	...

08003f30 <.text_16>:
 8003f30:	20000444 	.word	0x20000444

08003f34 <PE_Receive_SVDM>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8003f3c:	f204 4294 	addw	r2, r4, #1172	; 0x494
 8003f40:	8808      	ldrh	r0, [r1, #0]
 8003f42:	0b00      	lsrs	r0, r0, #12
 8003f44:	f000 0007 	and.w	r0, r0, #7
 8003f48:	1e43      	subs	r3, r0, #1
 8003f4a:	7613      	strb	r3, [r2, #24]
 8003f4c:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d16e      	bne.n	8004032 <PE_Receive_SVDM+0xfe>
 8003f54:	e010      	b.n	8003f78 <PE_Receive_SVDM+0x44>
 8003f56:	684b      	ldr	r3, [r1, #4]
 8003f58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003f5c:	799d      	ldrb	r5, [r3, #6]
 8003f5e:	79de      	ldrb	r6, [r3, #7]
 8003f60:	eb05 2706 	add.w	r7, r5, r6, lsl #8
 8003f64:	7a1d      	ldrb	r5, [r3, #8]
 8003f66:	7a5b      	ldrb	r3, [r3, #9]
 8003f68:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8003f6c:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 8003f70:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 8003f74:	1c40      	adds	r0, r0, #1
 8003f76:	b2c0      	uxtb	r0, r0
 8003f78:	7e15      	ldrb	r5, [r2, #24]
 8003f7a:	42a8      	cmp	r0, r5
 8003f7c:	dbeb      	blt.n	8003f56 <PE_Receive_SVDM+0x22>
 8003f7e:	f894 3250 	ldrb.w	r3, [r4, #592]	; 0x250
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	1e5b      	subs	r3, r3, #1
 8003f88:	f248 0119 	movw	r1, #32793	; 0x8019
 8003f8c:	f248 000f 	movw	r0, #32783	; 0x800f
 8003f90:	d00d      	beq.n	8003fae <PE_Receive_SVDM+0x7a>
 8003f92:	1e5b      	subs	r3, r3, #1
 8003f94:	d028      	beq.n	8003fe8 <PE_Receive_SVDM+0xb4>
 8003f96:	1e5b      	subs	r3, r3, #1
 8003f98:	d02b      	beq.n	8003ff2 <PE_Receive_SVDM+0xbe>
 8003f9a:	1e5b      	subs	r3, r3, #1
 8003f9c:	d02e      	beq.n	8003ffc <PE_Receive_SVDM+0xc8>
 8003f9e:	1e5b      	subs	r3, r3, #1
 8003fa0:	d031      	beq.n	8004006 <PE_Receive_SVDM+0xd2>
 8003fa2:	1e5b      	subs	r3, r3, #1
 8003fa4:	d034      	beq.n	8004010 <PE_Receive_SVDM+0xdc>
 8003fa6:	3b0a      	subs	r3, #10
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d93d      	bls.n	8004028 <PE_Receive_SVDM+0xf4>
 8003fac:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8003fae:	2150      	movs	r1, #80	; 0x50
 8003fb0:	6862      	ldr	r2, [r4, #4]
 8003fb2:	7721      	strb	r1, [r4, #28]
 8003fb4:	6813      	ldr	r3, [r2, #0]
 8003fb6:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
 8003fba:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fbe:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8003fc2:	4291      	cmp	r1, r2
 8003fc4:	da04      	bge.n	8003fd0 <PE_Receive_SVDM+0x9c>
 8003fc6:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
 8003fca:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fce:	e003      	b.n	8003fd8 <PE_Receive_SVDM+0xa4>
 8003fd0:	6861      	ldr	r1, [r4, #4]
 8003fd2:	680a      	ldr	r2, [r1, #0]
 8003fd4:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8003fd8:	6862      	ldr	r2, [r4, #4]
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	f361 1345 	bfi	r3, r1, #5, #1
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	83e0      	strh	r0, [r4, #30]
 8003fe4:	2075      	movs	r0, #117	; 0x75
 8003fe6:	e023      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003fe8:	2152      	movs	r1, #82	; 0x52
 8003fea:	7721      	strb	r1, [r4, #28]
 8003fec:	83e0      	strh	r0, [r4, #30]
 8003fee:	2076      	movs	r0, #118	; 0x76
 8003ff0:	e01e      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ff2:	2153      	movs	r1, #83	; 0x53
 8003ff4:	7721      	strb	r1, [r4, #28]
 8003ff6:	83e0      	strh	r0, [r4, #30]
 8003ff8:	2078      	movs	r0, #120	; 0x78
 8003ffa:	e019      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ffc:	2254      	movs	r2, #84	; 0x54
 8003ffe:	7722      	strb	r2, [r4, #28]
 8004000:	83e1      	strh	r1, [r4, #30]
 8004002:	2079      	movs	r0, #121	; 0x79
 8004004:	e014      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004006:	2255      	movs	r2, #85	; 0x55
 8004008:	7722      	strb	r2, [r4, #28]
 800400a:	83e1      	strh	r1, [r4, #30]
 800400c:	207a      	movs	r0, #122	; 0x7a
 800400e:	e00f      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004010:	68e0      	ldr	r0, [r4, #12]
 8004012:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004014:	b12b      	cbz	r3, 8004022 <PE_Receive_SVDM+0xee>
 8004016:	0029      	movs	r1, r5
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	7c20      	ldrb	r0, [r4, #16]
 800401c:	bf18      	it	ne
 800401e:	2101      	movne	r1, #1
 8004020:	4798      	blx	r3
 8004022:	2103      	movs	r1, #3
 8004024:	7461      	strb	r1, [r4, #17]
 8004026:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8004028:	225a      	movs	r2, #90	; 0x5a
 800402a:	7722      	strb	r2, [r4, #28]
 800402c:	83e0      	strh	r0, [r4, #30]
 800402e:	207b      	movs	r0, #123	; 0x7b
 8004030:	7460      	strb	r0, [r4, #17]
 8004032:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004034 <PE_StateMachine_VDM>:
 8004034:	e92d 47fb 	stmdb	sp!, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4604      	mov	r4, r0
 800403a:	b099      	sub	sp, #100	; 0x64
 800403c:	f894 c011 	ldrb.w	ip, [r4, #17]
 8004040:	f1ac 0075 	sub.w	r0, ip, #117	; 0x75
 8004044:	2807      	cmp	r0, #7
 8004046:	f04f 0802 	mov.w	r8, #2
 800404a:	d203      	bcs.n	8004054 <PE_StateMachine_VDM+0x20>
 800404c:	7809      	ldrb	r1, [r1, #0]
 800404e:	2914      	cmp	r1, #20
 8004050:	f040 84ea 	bne.w	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004054:	2305      	movs	r3, #5
 8004056:	2003      	movs	r0, #3
 8004058:	2204      	movs	r2, #4
 800405a:	f1bc 0f75 	cmp.w	ip, #117	; 0x75
 800405e:	f104 0534 	add.w	r5, r4, #52	; 0x34
 8004062:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8004066:	f504 7614 	add.w	r6, r4, #592	; 0x250
 800406a:	f04f 0a01 	mov.w	sl, #1
 800406e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8004072:	f248 091e 	movw	r9, #32798	; 0x801e
 8004076:	d04c      	beq.n	8004112 <PE_StateMachine_VDM+0xde>
 8004078:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 800407c:	f000 80a4 	beq.w	80041c8 <PE_StateMachine_VDM+0x194>
 8004080:	f1bc 0f77 	cmp.w	ip, #119	; 0x77
 8004084:	f000 811c 	beq.w	80042c0 <PE_StateMachine_VDM+0x28c>
 8004088:	f1bc 0f78 	cmp.w	ip, #120	; 0x78
 800408c:	f000 8172 	beq.w	8004374 <PE_StateMachine_VDM+0x340>
 8004090:	f1bc 0f79 	cmp.w	ip, #121	; 0x79
 8004094:	f000 81b3 	beq.w	80043fe <PE_StateMachine_VDM+0x3ca>
 8004098:	f1bc 0f7a 	cmp.w	ip, #122	; 0x7a
 800409c:	f000 81cf 	beq.w	800443e <PE_StateMachine_VDM+0x40a>
 80040a0:	f1bc 0f7b 	cmp.w	ip, #123	; 0x7b
 80040a4:	f000 81f9 	beq.w	800449a <PE_StateMachine_VDM+0x466>
 80040a8:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80040ac:	f000 8231 	beq.w	8004512 <PE_StateMachine_VDM+0x4de>
 80040b0:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
 80040b4:	f000 8293 	beq.w	80045de <PE_StateMachine_VDM+0x5aa>
 80040b8:	f1bc 0f81 	cmp.w	ip, #129	; 0x81
 80040bc:	f000 82da 	beq.w	8004674 <PE_StateMachine_VDM+0x640>
 80040c0:	f1bc 0f82 	cmp.w	ip, #130	; 0x82
 80040c4:	f000 8331 	beq.w	800472a <PE_StateMachine_VDM+0x6f6>
 80040c8:	f1bc 0f83 	cmp.w	ip, #131	; 0x83
 80040cc:	f000 8393 	beq.w	80047f6 <PE_StateMachine_VDM+0x7c2>
 80040d0:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
 80040d4:	f000 848c 	beq.w	80049f0 <PE_StateMachine_VDM+0x9bc>
 80040d8:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
 80040dc:	f000 83f9 	beq.w	80048d2 <PE_StateMachine_VDM+0x89e>
 80040e0:	f1bc 0f87 	cmp.w	ip, #135	; 0x87
 80040e4:	f000 8241 	beq.w	800456a <PE_StateMachine_VDM+0x536>
 80040e8:	f1bc 0f89 	cmp.w	ip, #137	; 0x89
 80040ec:	f000 828f 	beq.w	800460e <PE_StateMachine_VDM+0x5da>
 80040f0:	f1bc 0f8b 	cmp.w	ip, #139	; 0x8b
 80040f4:	f000 82de 	beq.w	80046b4 <PE_StateMachine_VDM+0x680>
 80040f8:	f1bc 0f8c 	cmp.w	ip, #140	; 0x8c
 80040fc:	f000 832d 	beq.w	800475a <PE_StateMachine_VDM+0x726>
 8004100:	f1bc 0f8d 	cmp.w	ip, #141	; 0x8d
 8004104:	f000 839a 	beq.w	800483c <PE_StateMachine_VDM+0x808>
 8004108:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 800410c:	f000 8403 	beq.w	8004916 <PE_StateMachine_VDM+0x8e2>
 8004110:	e125      	b.n	800435e <PE_StateMachine_VDM+0x32a>
 8004112:	f000 fd12 	bl	8004b3a <.text_34>
 8004116:	f000 8466 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 800411a:	6830      	ldr	r0, [r6, #0]
 800411c:	f36a 0004 	bfi	r0, sl, #0, #5
 8004120:	f000 fcca 	bl	8004ab8 <.text_28+0x4>
 8004124:	f000 fc9e 	bl	8004a64 <.text_25>
 8004128:	bf1f      	itttt	ne
 800412a:	68e0      	ldrne	r0, [r4, #12]
 800412c:	2800      	cmpne	r0, #0
 800412e:	6802      	ldrne	r2, [r0, #0]
 8004130:	2a00      	cmpne	r2, #0
 8004132:	d03d      	beq.n	80041b0 <PE_StateMachine_VDM+0x17c>
 8004134:	0c09      	lsrs	r1, r1, #16
 8004136:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 800413a:	d139      	bne.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800413c:	7c20      	ldrb	r0, [r4, #16]
 800413e:	a908      	add	r1, sp, #32
 8004140:	4790      	blx	r2
 8004142:	2803      	cmp	r0, #3
 8004144:	d002      	beq.n	800414c <PE_StateMachine_VDM+0x118>
 8004146:	280f      	cmp	r0, #15
 8004148:	d003      	beq.n	8004152 <PE_StateMachine_VDM+0x11e>
 800414a:	e031      	b.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800414c:	f000 fce9 	bl	8004b22 <.text_31>
 8004150:	e030      	b.n	80041b4 <PE_StateMachine_VDM+0x180>
 8004152:	f000 fcf7 	bl	8004b44 <.text_35>
 8004156:	a811      	add	r0, sp, #68	; 0x44
 8004158:	9908      	ldr	r1, [sp, #32]
 800415a:	6041      	str	r1, [r0, #4]
 800415c:	2504      	movs	r5, #4
 800415e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004160:	6081      	str	r1, [r0, #8]
 8004162:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004164:	60c1      	str	r1, [r0, #12]
 8004166:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800416a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800416e:	b111      	cbz	r1, 8004176 <PE_StateMachine_VDM+0x142>
 8004170:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004172:	6101      	str	r1, [r0, #16]
 8004174:	2505      	movs	r5, #5
 8004176:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800417a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800417e:	b121      	cbz	r1, 800418a <PE_StateMachine_VDM+0x156>
 8004180:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004182:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8004186:	1c6d      	adds	r5, r5, #1
 8004188:	b2ed      	uxtb	r5, r5
 800418a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800418e:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8004192:	b181      	cbz	r1, 80041b6 <PE_StateMachine_VDM+0x182>
 8004194:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8004198:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800419c:	b119      	cbz	r1, 80041a6 <PE_StateMachine_VDM+0x172>
 800419e:	2100      	movs	r1, #0
 80041a0:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041a4:	1c6d      	adds	r5, r5, #1
 80041a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80041a8:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041ac:	1c6d      	adds	r5, r5, #1
 80041ae:	e002      	b.n	80041b6 <PE_StateMachine_VDM+0x182>
 80041b0:	f000 fcbb 	bl	8004b2a <.text_32>
 80041b4:	6030      	str	r0, [r6, #0]
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	2000      	movs	r0, #0
 80041ba:	2203      	movs	r2, #3
 80041bc:	9111      	str	r1, [sp, #68]	; 0x44
 80041be:	9002      	str	r0, [sp, #8]
 80041c0:	9201      	str	r2, [sp, #4]
 80041c2:	9500      	str	r5, [sp, #0]
 80041c4:	ab11      	add	r3, sp, #68	; 0x44
 80041c6:	e19f      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80041c8:	f000 fcb7 	bl	8004b3a <.text_34>
 80041cc:	d07a      	beq.n	80042c4 <PE_StateMachine_VDM+0x290>
 80041ce:	6830      	ldr	r0, [r6, #0]
 80041d0:	f368 0004 	bfi	r0, r8, #0, #5
 80041d4:	6030      	str	r0, [r6, #0]
 80041d6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80041da:	6030      	str	r0, [r6, #0]
 80041dc:	6860      	ldr	r0, [r4, #4]
 80041de:	6801      	ldr	r1, [r0, #0]
 80041e0:	6830      	ldr	r0, [r6, #0]
 80041e2:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80041e6:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 80041ea:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 80041ee:	6030      	str	r0, [r6, #0]
 80041f0:	6861      	ldr	r1, [r4, #4]
 80041f2:	780a      	ldrb	r2, [r1, #0]
 80041f4:	f002 020b 	and.w	r2, r2, #11
 80041f8:	2a09      	cmp	r2, #9
 80041fa:	bf1e      	ittt	ne
 80041fc:	68e1      	ldrne	r1, [r4, #12]
 80041fe:	684b      	ldrne	r3, [r1, #4]
 8004200:	2b00      	cmpne	r3, #0
 8004202:	d051      	beq.n	80042a8 <PE_StateMachine_VDM+0x274>
 8004204:	0c00      	lsrs	r0, r0, #16
 8004206:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 800420a:	d14d      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800420c:	7c20      	ldrb	r0, [r4, #16]
 800420e:	f204 42ad 	addw	r2, r4, #1197	; 0x4ad
 8004212:	a903      	add	r1, sp, #12
 8004214:	4798      	blx	r3
 8004216:	2803      	cmp	r0, #3
 8004218:	d043      	beq.n	80042a2 <PE_StateMachine_VDM+0x26e>
 800421a:	280f      	cmp	r0, #15
 800421c:	d144      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800421e:	f000 fc91 	bl	8004b44 <.text_35>
 8004222:	211c      	movs	r1, #28
 8004224:	a804      	add	r0, sp, #16
 8004226:	f01c fc3e 	bl	8020aa6 <__aeabi_memclr>
 800422a:	2500      	movs	r5, #0
 800422c:	2300      	movs	r3, #0
 800422e:	f204 42ac 	addw	r2, r4, #1196	; 0x4ac
 8004232:	e01b      	b.n	800426c <PE_StateMachine_VDM+0x238>
 8004234:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8004238:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800423c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004240:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8004244:	f841 c020 	str.w	ip, [r1, r0, lsl #2]
 8004248:	e00f      	b.n	800426a <PE_StateMachine_VDM+0x236>
 800424a:	1c6d      	adds	r5, r5, #1
 800424c:	0858      	lsrs	r0, r3, #1
 800424e:	ea5f 7cc3 	movs.w	ip, r3, lsl #31
 8004252:	a905      	add	r1, sp, #20
 8004254:	d5ee      	bpl.n	8004234 <PE_StateMachine_VDM+0x200>
 8004256:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800425a:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800425e:	f83c 9013 	ldrh.w	r9, [ip, r3, lsl #1]
 8004262:	ea49 0e0e 	orr.w	lr, r9, lr
 8004266:	f841 e020 	str.w	lr, [r1, r0, lsl #2]
 800426a:	1c5b      	adds	r3, r3, #1
 800426c:	7850      	ldrb	r0, [r2, #1]
 800426e:	4283      	cmp	r3, r0
 8004270:	bf38      	it	cc
 8004272:	2b0c      	cmpcc	r3, #12
 8004274:	d3e9      	bcc.n	800424a <PE_StateMachine_VDM+0x216>
 8004276:	f204 41ac 	addw	r1, r4, #1196	; 0x4ac
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	7048      	strb	r0, [r1, #1]
 800427e:	b2e8      	uxtb	r0, r5
 8004280:	280c      	cmp	r0, #12
 8004282:	d109      	bne.n	8004298 <PE_StateMachine_VDM+0x264>
 8004284:	6831      	ldr	r1, [r6, #0]
 8004286:	9104      	str	r1, [sp, #16]
 8004288:	2000      	movs	r0, #0
 800428a:	2277      	movs	r2, #119	; 0x77
 800428c:	2107      	movs	r1, #7
 800428e:	9002      	str	r0, [sp, #8]
 8004290:	9201      	str	r2, [sp, #4]
 8004292:	9100      	str	r1, [sp, #0]
 8004294:	ab04      	add	r3, sp, #16
 8004296:	e05b      	b.n	8004350 <PE_StateMachine_VDM+0x31c>
 8004298:	062d      	lsls	r5, r5, #24
 800429a:	0e6d      	lsrs	r5, r5, #25
 800429c:	6830      	ldr	r0, [r6, #0]
 800429e:	1cad      	adds	r5, r5, #2
 80042a0:	e005      	b.n	80042ae <PE_StateMachine_VDM+0x27a>
 80042a2:	f000 fc3e 	bl	8004b22 <.text_31>
 80042a6:	e001      	b.n	80042ac <PE_StateMachine_VDM+0x278>
 80042a8:	f000 fc3f 	bl	8004b2a <.text_32>
 80042ac:	6030      	str	r0, [r6, #0]
 80042ae:	9004      	str	r0, [sp, #16]
 80042b0:	2103      	movs	r1, #3
 80042b2:	2000      	movs	r0, #0
 80042b4:	b2ed      	uxtb	r5, r5
 80042b6:	9002      	str	r0, [sp, #8]
 80042b8:	9101      	str	r1, [sp, #4]
 80042ba:	9500      	str	r5, [sp, #0]
 80042bc:	ab04      	add	r3, sp, #16
 80042be:	e123      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80042c0:	f000 fc37 	bl	8004b32 <.text_33>
 80042c4:	f000 838f 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 80042c8:	6830      	ldr	r0, [r6, #0]
 80042ca:	f368 0004 	bfi	r0, r8, #0, #5
 80042ce:	6030      	str	r0, [r6, #0]
 80042d0:	aa03      	add	r2, sp, #12
 80042d2:	f000 fbef 	bl	8004ab4 <.text_28>
 80042d6:	f36a 1187 	bfi	r1, sl, #6, #2
 80042da:	6031      	str	r1, [r6, #0]
 80042dc:	a904      	add	r1, sp, #16
 80042de:	68e3      	ldr	r3, [r4, #12]
 80042e0:	7c20      	ldrb	r0, [r4, #16]
 80042e2:	685d      	ldr	r5, [r3, #4]
 80042e4:	47a8      	blx	r5
 80042e6:	211c      	movs	r1, #28
 80042e8:	a805      	add	r0, sp, #20
 80042ea:	f01c fbdc 	bl	8020aa6 <__aeabi_memclr>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2500      	movs	r5, #0
 80042f2:	f204 42ac 	addw	r2, r4, #1196	; 0x4ac
 80042f6:	e018      	b.n	800432a <PE_StateMachine_VDM+0x2f6>
 80042f8:	f8dd e010 	ldr.w	lr, [sp, #16]
 80042fc:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8004300:	f83e 6015 	ldrh.w	r6, [lr, r5, lsl #1]
 8004304:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 8004308:	e00c      	b.n	8004324 <PE_StateMachine_VDM+0x2f0>
 800430a:	1c5b      	adds	r3, r3, #1
 800430c:	0868      	lsrs	r0, r5, #1
 800430e:	07ee      	lsls	r6, r5, #31
 8004310:	a906      	add	r1, sp, #24
 8004312:	d5f1      	bpl.n	80042f8 <PE_StateMachine_VDM+0x2c4>
 8004314:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004318:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800431c:	f83c 6015 	ldrh.w	r6, [ip, r5, lsl #1]
 8004320:	ea46 060e 	orr.w	r6, r6, lr
 8004324:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
 8004328:	1c6d      	adds	r5, r5, #1
 800432a:	7850      	ldrb	r0, [r2, #1]
 800432c:	4285      	cmp	r5, r0
 800432e:	bf38      	it	cc
 8004330:	2d0c      	cmpcc	r5, #12
 8004332:	d3ea      	bcc.n	800430a <PE_StateMachine_VDM+0x2d6>
 8004334:	f204 41ac 	addw	r1, r4, #1196	; 0x4ac
 8004338:	1ac0      	subs	r0, r0, r3
 800433a:	7048      	strb	r0, [r1, #1]
 800433c:	b2d8      	uxtb	r0, r3
 800433e:	280c      	cmp	r0, #12
 8004340:	d10e      	bne.n	8004360 <PE_StateMachine_VDM+0x32c>
 8004342:	2100      	movs	r1, #0
 8004344:	2077      	movs	r0, #119	; 0x77
 8004346:	2207      	movs	r2, #7
 8004348:	9102      	str	r1, [sp, #8]
 800434a:	9001      	str	r0, [sp, #4]
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	ab05      	add	r3, sp, #20
 8004350:	7839      	ldrb	r1, [r7, #0]
 8004352:	220f      	movs	r2, #15
 8004354:	f000 fc84 	bl	8004c60 <.text_44>
 8004358:	f248 000f 	movw	r0, #32783	; 0x800f
 800435c:	83e0      	strh	r0, [r4, #30]
 800435e:	e363      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	0e5b      	lsrs	r3, r3, #25
 8004364:	1c9b      	adds	r3, r3, #2
 8004366:	b2db      	uxtb	r3, r3
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	2003      	movs	r0, #3
 800436e:	9102      	str	r1, [sp, #8]
 8004370:	9001      	str	r0, [sp, #4]
 8004372:	e042      	b.n	80043fa <PE_StateMachine_VDM+0x3c6>
 8004374:	8be1      	ldrh	r1, [r4, #30]
 8004376:	2501      	movs	r5, #1
 8004378:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800437c:	d061      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	f360 0104 	bfi	r1, r0, #0, #5
 8004384:	f000 fb74 	bl	8004a70 <.text_26>
 8004388:	f000 fb6c 	bl	8004a64 <.text_25>
 800438c:	bf1e      	ittt	ne
 800438e:	68e0      	ldrne	r0, [r4, #12]
 8004390:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8004394:	f1bc 0f00 	cmpne.w	ip, #0
 8004398:	d025      	beq.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 800439a:	7c20      	ldrb	r0, [r4, #16]
 800439c:	ab03      	add	r3, sp, #12
 800439e:	aa04      	add	r2, sp, #16
 80043a0:	0c09      	lsrs	r1, r1, #16
 80043a2:	47e0      	blx	ip
 80043a4:	2803      	cmp	r0, #3
 80043a6:	d002      	beq.n	80043ae <PE_StateMachine_VDM+0x37a>
 80043a8:	280f      	cmp	r0, #15
 80043aa:	d005      	beq.n	80043b8 <PE_StateMachine_VDM+0x384>
 80043ac:	e01b      	b.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043ae:	6832      	ldr	r2, [r6, #0]
 80043b0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80043b4:	6032      	str	r2, [r6, #0]
 80043b6:	e019      	b.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80043bc:	b198      	cbz	r0, 80043e6 <PE_StateMachine_VDM+0x3b2>
 80043be:	2807      	cmp	r0, #7
 80043c0:	d211      	bcs.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043c2:	f000 fbbf 	bl	8004b44 <.text_35>
 80043c6:	ab06      	add	r3, sp, #24
 80043c8:	2000      	movs	r0, #0
 80043ca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80043ce:	4288      	cmp	r0, r1
 80043d0:	d20c      	bcs.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043d2:	9a04      	ldr	r2, [sp, #16]
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80043da:	1c6d      	adds	r5, r5, #1
 80043dc:	9904      	ldr	r1, [sp, #16]
 80043de:	1d0a      	adds	r2, r1, #4
 80043e0:	9204      	str	r2, [sp, #16]
 80043e2:	1c40      	adds	r0, r0, #1
 80043e4:	e7f1      	b.n	80043ca <PE_StateMachine_VDM+0x396>
 80043e6:	f000 fba0 	bl	8004b2a <.text_32>
 80043ea:	6030      	str	r0, [r6, #0]
 80043ec:	2000      	movs	r0, #0
 80043ee:	6831      	ldr	r1, [r6, #0]
 80043f0:	9105      	str	r1, [sp, #20]
 80043f2:	2203      	movs	r2, #3
 80043f4:	9002      	str	r0, [sp, #8]
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	9500      	str	r5, [sp, #0]
 80043fa:	ab05      	add	r3, sp, #20
 80043fc:	e084      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80043fe:	f000 fb98 	bl	8004b32 <.text_33>
 8004402:	d01e      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 8004404:	6830      	ldr	r0, [r6, #0]
 8004406:	f362 0004 	bfi	r0, r2, #0, #5
 800440a:	f000 fb40 	bl	8004a8e <.text_27>
 800440e:	2800      	cmp	r0, #0
 8004410:	d134      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004412:	68e1      	ldr	r1, [r4, #12]
 8004414:	68c8      	ldr	r0, [r1, #12]
 8004416:	2800      	cmp	r0, #0
 8004418:	d030      	beq.n	800447c <PE_StateMachine_VDM+0x448>
 800441a:	f000 fbcf 	bl	8004bbc <.text_40>
 800441e:	68dd      	ldr	r5, [r3, #12]
 8004420:	47a8      	blx	r5
 8004422:	2803      	cmp	r0, #3
 8004424:	d027      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004426:	280f      	cmp	r0, #15
 8004428:	d128      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 800442a:	f000 fb8b 	bl	8004b44 <.text_35>
 800442e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004432:	6961      	ldr	r1, [r4, #20]
 8004434:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8004438:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
 800443c:	e019      	b.n	8004472 <PE_StateMachine_VDM+0x43e>
 800443e:	f000 fb78 	bl	8004b32 <.text_33>
 8004442:	f000 82d0 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 8004446:	6830      	ldr	r0, [r6, #0]
 8004448:	f363 0004 	bfi	r0, r3, #0, #5
 800444c:	f000 fb1f 	bl	8004a8e <.text_27>
 8004450:	b9a0      	cbnz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004452:	68e1      	ldr	r1, [r4, #12]
 8004454:	6908      	ldr	r0, [r1, #16]
 8004456:	b188      	cbz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004458:	f000 fbb0 	bl	8004bbc <.text_40>
 800445c:	691d      	ldr	r5, [r3, #16]
 800445e:	47a8      	blx	r5
 8004460:	2803      	cmp	r0, #3
 8004462:	d008      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004464:	280f      	cmp	r0, #15
 8004466:	d109      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004468:	f000 fb6c 	bl	8004b44 <.text_35>
 800446c:	6961      	ldr	r1, [r4, #20]
 800446e:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8004472:	6161      	str	r1, [r4, #20]
 8004474:	e005      	b.n	8004482 <PE_StateMachine_VDM+0x44e>
 8004476:	f000 fb54 	bl	8004b22 <.text_31>
 800447a:	e001      	b.n	8004480 <PE_StateMachine_VDM+0x44c>
 800447c:	f000 fb55 	bl	8004b2a <.text_32>
 8004480:	6030      	str	r0, [r6, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	9102      	str	r1, [sp, #8]
 8004486:	2203      	movs	r2, #3
 8004488:	9201      	str	r2, [sp, #4]
 800448a:	f8cd a000 	str.w	sl, [sp]
 800448e:	4633      	mov	r3, r6
 8004490:	7839      	ldrb	r1, [r7, #0]
 8004492:	220f      	movs	r2, #15
 8004494:	f000 fb89 	bl	8004baa <.text_38+0x6>
 8004498:	e2c6      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800449a:	f000 fb4e 	bl	8004b3a <.text_34>
 800449e:	d0d0      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
 80044a6:	f1bc 0f00 	cmp.w	ip, #0
 80044aa:	d021      	beq.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044ac:	7831      	ldrb	r1, [r6, #0]
 80044ae:	7c20      	ldrb	r0, [r4, #16]
 80044b0:	f204 49ac 	addw	r9, r4, #1196	; 0x4ac
 80044b4:	f204 4394 	addw	r3, r4, #1172	; 0x494
 80044b8:	464a      	mov	r2, r9
 80044ba:	f001 011f 	and.w	r1, r1, #31
 80044be:	47e0      	blx	ip
 80044c0:	2803      	cmp	r0, #3
 80044c2:	d012      	beq.n	80044ea <PE_StateMachine_VDM+0x4b6>
 80044c4:	280f      	cmp	r0, #15
 80044c6:	d113      	bne.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044c8:	f000 fb3c 	bl	8004b44 <.text_35>
 80044cc:	2000      	movs	r0, #0
 80044ce:	f899 1000 	ldrb.w	r1, [r9]
 80044d2:	4288      	cmp	r0, r1
 80044d4:	d20f      	bcs.n	80044f6 <PE_StateMachine_VDM+0x4c2>
 80044d6:	f204 4294 	addw	r2, r4, #1172	; 0x494
 80044da:	1c6d      	adds	r5, r5, #1
 80044dc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80044e0:	aa04      	add	r2, sp, #16
 80044e2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 80044e6:	1c40      	adds	r0, r0, #1
 80044e8:	e7f1      	b.n	80044ce <PE_StateMachine_VDM+0x49a>
 80044ea:	f000 fb1a 	bl	8004b22 <.text_31>
 80044ee:	e001      	b.n	80044f4 <PE_StateMachine_VDM+0x4c0>
 80044f0:	f000 fb1b 	bl	8004b2a <.text_32>
 80044f4:	6030      	str	r0, [r6, #0]
 80044f6:	6831      	ldr	r1, [r6, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	2203      	movs	r2, #3
 80044fc:	b2ed      	uxtb	r5, r5
 80044fe:	9103      	str	r1, [sp, #12]
 8004500:	9002      	str	r0, [sp, #8]
 8004502:	9201      	str	r2, [sp, #4]
 8004504:	9500      	str	r5, [sp, #0]
 8004506:	ab03      	add	r3, sp, #12
 8004508:	7839      	ldrb	r1, [r7, #0]
 800450a:	220f      	movs	r2, #15
 800450c:	f000 fba8 	bl	8004c60 <.text_44>
 8004510:	e28a      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004512:	6830      	ldr	r0, [r6, #0]
 8004514:	f36a 0004 	bfi	r0, sl, #0, #5
 8004518:	6030      	str	r0, [r6, #0]
 800451a:	4633      	mov	r3, r6
 800451c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004520:	6030      	str	r0, [r6, #0]
 8004522:	6860      	ldr	r0, [r4, #4]
 8004524:	6802      	ldr	r2, [r0, #0]
 8004526:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800452a:	6832      	ldr	r2, [r6, #0]
 800452c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004530:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004534:	6032      	str	r2, [r6, #0]
 8004536:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004540:	6032      	str	r2, [r6, #0]
 8004542:	f361 421f 	bfi	r2, r1, #16, #16
 8004546:	6032      	str	r2, [r6, #0]
 8004548:	f000 fb7e 	bl	8004c48 <.text_42+0x6>
 800454c:	bf1d      	ittte	ne
 800454e:	6960      	ldrne	r0, [r4, #20]
 8004550:	0880      	lsrne	r0, r0, #2
 8004552:	f000 0001 	andne.w	r0, r0, #1
 8004556:	2002      	moveq	r0, #2
 8004558:	f000 fa80 	bl	8004a5c <.text_24>
 800455c:	2087      	movs	r0, #135	; 0x87
 800455e:	f000 fb21 	bl	8004ba4 <.text_38>
 8004562:	2800      	cmp	r0, #0
 8004564:	d1d4      	bne.n	8004510 <PE_StateMachine_VDM+0x4dc>
 8004566:	2050      	movs	r0, #80	; 0x50
 8004568:	e0a1      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800456a:	f000 fa6f 	bl	8004a4c <.text_22>
 800456e:	f000 fa69 	bl	8004a44 <.text_21>
 8004572:	d163      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004574:	8829      	ldrh	r1, [r5, #0]
 8004576:	0bc8      	lsrs	r0, r1, #15
 8004578:	d160      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800457a:	f000 fa5f 	bl	8004a3c <.text_20>
 800457e:	d062      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004580:	f000 fa67 	bl	8004a52 <.text_23>
 8004584:	d15a      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004586:	2a14      	cmp	r2, #20
 8004588:	d001      	beq.n	800458e <PE_StateMachine_VDM+0x55a>
 800458a:	f000 fb11 	bl	8004bb0 <.text_39>
 800458e:	6868      	ldr	r0, [r5, #4]
 8004590:	7887      	ldrb	r7, [r0, #2]
 8004592:	f007 011f 	and.w	r1, r7, #31
 8004596:	2901      	cmp	r1, #1
 8004598:	d150      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800459a:	f3c7 1081 	ubfx	r0, r7, #6, #2
 800459e:	2800      	cmp	r0, #0
 80045a0:	d051      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80045a2:	68e1      	ldr	r1, [r4, #12]
 80045a4:	6948      	ldr	r0, [r1, #20]
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f000 8202 	beq.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045ac:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80045b0:	2801      	cmp	r0, #1
 80045b2:	f040 81fd 	bne.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045b6:	6868      	ldr	r0, [r5, #4]
 80045b8:	1d81      	adds	r1, r0, #6
 80045ba:	7c20      	ldrb	r0, [r4, #16]
 80045bc:	aa08      	add	r2, sp, #32
 80045be:	f000 fbb5 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80045c2:	b950      	cbnz	r0, 80045da <PE_StateMachine_VDM+0x5a6>
 80045c4:	68e5      	ldr	r5, [r4, #12]
 80045c6:	7c20      	ldrb	r0, [r4, #16]
 80045c8:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80045cc:	ab08      	add	r3, sp, #32
 80045ce:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80045d2:	2100      	movs	r1, #0
 80045d4:	47c0      	blx	r8
 80045d6:	2151      	movs	r1, #81	; 0x51
 80045d8:	e0a3      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045da:	211b      	movs	r1, #27
 80045dc:	e0a1      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045de:	f000 fa9a 	bl	8004b16 <.text_30>
 80045e2:	f368 0004 	bfi	r0, r8, #0, #5
 80045e6:	6030      	str	r0, [r6, #0]
 80045e8:	f000 fa64 	bl	8004ab4 <.text_28>
 80045ec:	f000 fb29 	bl	8004c42 <.text_42>
 80045f0:	bf1d      	ittte	ne
 80045f2:	6960      	ldrne	r0, [r4, #20]
 80045f4:	0880      	lsrne	r0, r0, #2
 80045f6:	f000 0001 	andne.w	r0, r0, #1
 80045fa:	2002      	moveq	r0, #2
 80045fc:	f000 fa2e 	bl	8004a5c <.text_24>
 8004600:	2089      	movs	r0, #137	; 0x89
 8004602:	f000 facf 	bl	8004ba4 <.text_38>
 8004606:	2800      	cmp	r0, #0
 8004608:	d153      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 800460a:	2052      	movs	r0, #82	; 0x52
 800460c:	e04f      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800460e:	f000 fa1d 	bl	8004a4c <.text_22>
 8004612:	f000 fa17 	bl	8004a44 <.text_21>
 8004616:	d111      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004618:	8829      	ldrh	r1, [r5, #0]
 800461a:	0bc8      	lsrs	r0, r1, #15
 800461c:	d10e      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800461e:	f000 fa0d 	bl	8004a3c <.text_20>
 8004622:	d010      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004624:	f000 fa15 	bl	8004a52 <.text_23>
 8004628:	d108      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800462a:	2a14      	cmp	r2, #20
 800462c:	d001      	beq.n	8004632 <PE_StateMachine_VDM+0x5fe>
 800462e:	f000 fabf 	bl	8004bb0 <.text_39>
 8004632:	6868      	ldr	r0, [r5, #4]
 8004634:	7886      	ldrb	r6, [r0, #2]
 8004636:	f006 011f 	and.w	r1, r6, #31
 800463a:	2902      	cmp	r1, #2
 800463c:	f040 8140 	bne.w	80048c0 <PE_StateMachine_VDM+0x88c>
 8004640:	f3c6 1081 	ubfx	r0, r6, #6, #2
 8004644:	2800      	cmp	r0, #0
 8004646:	f000 813b 	beq.w	80048c0 <PE_StateMachine_VDM+0x88c>
 800464a:	68e1      	ldr	r1, [r4, #12]
 800464c:	6988      	ldr	r0, [r1, #24]
 800464e:	2800      	cmp	r0, #0
 8004650:	d06a      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004652:	6868      	ldr	r0, [r5, #4]
 8004654:	1d81      	adds	r1, r0, #6
 8004656:	7c20      	ldrb	r0, [r4, #16]
 8004658:	aa08      	add	r2, sp, #32
 800465a:	f000 fc05 	bl	8004e68 <PE_SVDM_CheckSVIDs>
 800465e:	68e5      	ldr	r5, [r4, #12]
 8004660:	7839      	ldrb	r1, [r7, #0]
 8004662:	7c20      	ldrb	r0, [r4, #16]
 8004664:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8004668:	ab08      	add	r3, sp, #32
 800466a:	f3c6 1281 	ubfx	r2, r6, #6, #2
 800466e:	47c0      	blx	r8
 8004670:	2153      	movs	r1, #83	; 0x53
 8004672:	e056      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 8004674:	6831      	ldr	r1, [r6, #0]
 8004676:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800467a:	6031      	str	r1, [r6, #0]
 800467c:	4633      	mov	r3, r6
 800467e:	f360 0104 	bfi	r1, r0, #0, #5
 8004682:	6031      	str	r1, [r6, #0]
 8004684:	8930      	ldrh	r0, [r6, #8]
 8004686:	f360 411f 	bfi	r1, r0, #16, #16
 800468a:	f000 f9f1 	bl	8004a70 <.text_26>
 800468e:	f000 fad8 	bl	8004c42 <.text_42>
 8004692:	bf1d      	ittte	ne
 8004694:	6960      	ldrne	r0, [r4, #20]
 8004696:	0880      	lsrne	r0, r0, #2
 8004698:	f000 0001 	andne.w	r0, r0, #1
 800469c:	2002      	moveq	r0, #2
 800469e:	f000 f9dd 	bl	8004a5c <.text_24>
 80046a2:	208b      	movs	r0, #139	; 0x8b
 80046a4:	f000 fa7e 	bl	8004ba4 <.text_38>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d102      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 80046ac:	2053      	movs	r0, #83	; 0x53
 80046ae:	f000 f9bf 	bl	8004a30 <.text_19>
 80046b2:	e1b9      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80046b4:	f000 f9ca 	bl	8004a4c <.text_22>
 80046b8:	f000 f9c4 	bl	8004a44 <.text_21>
 80046bc:	d1be      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046be:	8829      	ldrh	r1, [r5, #0]
 80046c0:	0bc8      	lsrs	r0, r1, #15
 80046c2:	d1bb      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046c4:	f000 f9ba 	bl	8004a3c <.text_20>
 80046c8:	d0bd      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ca:	f000 f9c2 	bl	8004a52 <.text_23>
 80046ce:	d1b5      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046d0:	2a14      	cmp	r2, #20
 80046d2:	d001      	beq.n	80046d8 <PE_StateMachine_VDM+0x6a4>
 80046d4:	f000 fa6c 	bl	8004bb0 <.text_39>
 80046d8:	6868      	ldr	r0, [r5, #4]
 80046da:	f890 9002 	ldrb.w	r9, [r0, #2]
 80046de:	f009 011f 	and.w	r1, r9, #31
 80046e2:	2903      	cmp	r1, #3
 80046e4:	d1aa      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046e6:	f3c9 1081 	ubfx	r0, r9, #6, #2
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d0ab      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ee:	68e1      	ldr	r1, [r4, #12]
 80046f0:	69c8      	ldr	r0, [r1, #28]
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d018      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 80046f6:	6868      	ldr	r0, [r5, #4]
 80046f8:	6831      	ldr	r1, [r6, #0]
 80046fa:	1d82      	adds	r2, r0, #6
 80046fc:	7c20      	ldrb	r0, [r4, #16]
 80046fe:	ab08      	add	r3, sp, #32
 8004700:	0c09      	lsrs	r1, r1, #16
 8004702:	f000 fbe5 	bl	8004ed0 <PE_SVDM_CheckModes>
 8004706:	68e5      	ldr	r5, [r4, #12]
 8004708:	7839      	ldrb	r1, [r7, #0]
 800470a:	7c20      	ldrb	r0, [r4, #16]
 800470c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8004710:	ab08      	add	r3, sp, #32
 8004712:	f3c9 1281 	ubfx	r2, r9, #6, #2
 8004716:	47c0      	blx	r8
 8004718:	f3c9 1081 	ubfx	r0, r9, #6, #2
 800471c:	2801      	cmp	r0, #1
 800471e:	d103      	bne.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004720:	2154      	movs	r1, #84	; 0x54
 8004722:	7c20      	ldrb	r0, [r4, #16]
 8004724:	f7fb ff17 	bl	8000556 <USBPD_PE_Notification>
 8004728:	e142      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 800472a:	f000 f9f4 	bl	8004b16 <.text_30>
 800472e:	f362 0004 	bfi	r0, r2, #0, #5
 8004732:	6030      	str	r0, [r6, #0]
 8004734:	f000 f9cf 	bl	8004ad6 <.text_29>
 8004738:	bf1d      	ittte	ne
 800473a:	6960      	ldrne	r0, [r4, #20]
 800473c:	0880      	lsrne	r0, r0, #2
 800473e:	f000 0001 	andne.w	r0, r0, #1
 8004742:	2002      	moveq	r0, #2
 8004744:	f000 f98a 	bl	8004a5c <.text_24>
 8004748:	208c      	movs	r0, #140	; 0x8c
 800474a:	f000 fa2b 	bl	8004ba4 <.text_38>
 800474e:	2800      	cmp	r0, #0
 8004750:	d1af      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 8004752:	2054      	movs	r0, #84	; 0x54
 8004754:	7720      	strb	r0, [r4, #28]
 8004756:	2134      	movs	r1, #52	; 0x34
 8004758:	e067      	b.n	800482a <PE_StateMachine_VDM+0x7f6>
 800475a:	f000 f977 	bl	8004a4c <.text_22>
 800475e:	f000 f971 	bl	8004a44 <.text_21>
 8004762:	f04f 0934 	mov.w	r9, #52	; 0x34
 8004766:	d16d      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004768:	8829      	ldrh	r1, [r5, #0]
 800476a:	0bc8      	lsrs	r0, r1, #15
 800476c:	d16a      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800476e:	f000 f965 	bl	8004a3c <.text_20>
 8004772:	d06d      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 8004774:	f000 f96d 	bl	8004a52 <.text_23>
 8004778:	d164      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800477a:	2a14      	cmp	r2, #20
 800477c:	d001      	beq.n	8004782 <PE_StateMachine_VDM+0x74e>
 800477e:	f000 fa17 	bl	8004bb0 <.text_39>
 8004782:	2000      	movs	r0, #0
 8004784:	7720      	strb	r0, [r4, #28]
 8004786:	6869      	ldr	r1, [r5, #4]
 8004788:	f891 a002 	ldrb.w	sl, [r1, #2]
 800478c:	f00a 001f 	and.w	r0, sl, #31
 8004790:	2804      	cmp	r0, #4
 8004792:	d157      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004794:	f3ca 1081 	ubfx	r0, sl, #6, #2
 8004798:	2800      	cmp	r0, #0
 800479a:	d059      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 800479c:	2801      	cmp	r0, #1
 800479e:	d00a      	beq.n	80047b6 <PE_StateMachine_VDM+0x782>
 80047a0:	d312      	bcc.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047a2:	2803      	cmp	r0, #3
 80047a4:	d00a      	beq.n	80047bc <PE_StateMachine_VDM+0x788>
 80047a6:	bf3f      	itttt	cc
 80047a8:	6960      	ldrcc	r0, [r4, #20]
 80047aa:	f420 70e0 	biccc.w	r0, r0, #448	; 0x1c0
 80047ae:	6160      	strcc	r0, [r4, #20]
 80047b0:	f04f 0936 	movcc.w	r9, #54	; 0x36
 80047b4:	e008      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047b6:	f04f 0935 	mov.w	r9, #53	; 0x35
 80047ba:	e005      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047bc:	6960      	ldr	r0, [r4, #20]
 80047be:	f420 70e0 	bic.w	r0, r0, #448	; 0x1c0
 80047c2:	6160      	str	r0, [r4, #20]
 80047c4:	f04f 0937 	mov.w	r9, #55	; 0x37
 80047c8:	7c20      	ldrb	r0, [r4, #16]
 80047ca:	4649      	mov	r1, r9
 80047cc:	f7fb fec3 	bl	8000556 <USBPD_PE_Notification>
 80047d0:	68e1      	ldr	r1, [r4, #12]
 80047d2:	6a08      	ldr	r0, [r1, #32]
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d00d      	beq.n	80047f4 <PE_StateMachine_VDM+0x7c0>
 80047d8:	6830      	ldr	r0, [r6, #0]
 80047da:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80047de:	9000      	str	r0, [sp, #0]
 80047e0:	f3ca 1281 	ubfx	r2, sl, #6, #2
 80047e4:	68e5      	ldr	r5, [r4, #12]
 80047e6:	6833      	ldr	r3, [r6, #0]
 80047e8:	7839      	ldrb	r1, [r7, #0]
 80047ea:	7c20      	ldrb	r0, [r4, #16]
 80047ec:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	47c0      	blx	r8
 80047f4:	e0dc      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80047f6:	6830      	ldr	r0, [r6, #0]
 80047f8:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80047fc:	6030      	str	r0, [r6, #0]
 80047fe:	f363 0004 	bfi	r0, r3, #0, #5
 8004802:	6030      	str	r0, [r6, #0]
 8004804:	4633      	mov	r3, r6
 8004806:	f000 f966 	bl	8004ad6 <.text_29>
 800480a:	bf1d      	ittte	ne
 800480c:	6960      	ldrne	r0, [r4, #20]
 800480e:	0880      	lsrne	r0, r0, #2
 8004810:	f000 0001 	andne.w	r0, r0, #1
 8004814:	2002      	moveq	r0, #2
 8004816:	f000 f921 	bl	8004a5c <.text_24>
 800481a:	208d      	movs	r0, #141	; 0x8d
 800481c:	f000 f9c2 	bl	8004ba4 <.text_38>
 8004820:	2800      	cmp	r0, #0
 8004822:	d10a      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 8004824:	2055      	movs	r0, #85	; 0x55
 8004826:	7720      	strb	r0, [r4, #28]
 8004828:	2155      	movs	r1, #85	; 0x55
 800482a:	7c20      	ldrb	r0, [r4, #16]
 800482c:	f7fb fe93 	bl	8000556 <USBPD_PE_Notification>
 8004830:	f248 0032 	movw	r0, #32818	; 0x8032
 8004834:	83e0      	strh	r0, [r4, #30]
 8004836:	f04f 0832 	mov.w	r8, #50	; 0x32
 800483a:	e0f5      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800483c:	f000 f906 	bl	8004a4c <.text_22>
 8004840:	f000 f900 	bl	8004a44 <.text_21>
 8004844:	d13c      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004846:	8829      	ldrh	r1, [r5, #0]
 8004848:	0bc8      	lsrs	r0, r1, #15
 800484a:	d139      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 800484c:	f000 f8f6 	bl	8004a3c <.text_20>
 8004850:	d036      	beq.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004852:	f000 f8fe 	bl	8004a52 <.text_23>
 8004856:	d133      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004858:	2a14      	cmp	r2, #20
 800485a:	d001      	beq.n	8004860 <PE_StateMachine_VDM+0x82c>
 800485c:	f000 f9a8 	bl	8004bb0 <.text_39>
 8004860:	2000      	movs	r0, #0
 8004862:	7720      	strb	r0, [r4, #28]
 8004864:	6869      	ldr	r1, [r5, #4]
 8004866:	f891 9002 	ldrb.w	r9, [r1, #2]
 800486a:	f009 001f 	and.w	r0, r9, #31
 800486e:	2805      	cmp	r0, #5
 8004870:	d126      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004872:	f3c9 1081 	ubfx	r0, r9, #6, #2
 8004876:	b318      	cbz	r0, 80048c0 <PE_StateMachine_VDM+0x88c>
 8004878:	2801      	cmp	r0, #1
 800487a:	d004      	beq.n	8004886 <PE_StateMachine_VDM+0x852>
 800487c:	d309      	bcc.n	8004892 <PE_StateMachine_VDM+0x85e>
 800487e:	2803      	cmp	r0, #3
 8004880:	d005      	beq.n	800488e <PE_StateMachine_VDM+0x85a>
 8004882:	d302      	bcc.n	800488a <PE_StateMachine_VDM+0x856>
 8004884:	e005      	b.n	8004892 <PE_StateMachine_VDM+0x85e>
 8004886:	2156      	movs	r1, #86	; 0x56
 8004888:	e004      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488a:	2157      	movs	r1, #87	; 0x57
 800488c:	e002      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488e:	2158      	movs	r1, #88	; 0x58
 8004890:	e000      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 8004892:	2155      	movs	r1, #85	; 0x55
 8004894:	7c20      	ldrb	r0, [r4, #16]
 8004896:	f7fb fe5e 	bl	8000556 <USBPD_PE_Notification>
 800489a:	68e1      	ldr	r1, [r4, #12]
 800489c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800489e:	2800      	cmp	r0, #0
 80048a0:	d00d      	beq.n	80048be <PE_StateMachine_VDM+0x88a>
 80048a2:	6830      	ldr	r0, [r6, #0]
 80048a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80048a8:	9000      	str	r0, [sp, #0]
 80048aa:	f3c9 1281 	ubfx	r2, r9, #6, #2
 80048ae:	68e5      	ldr	r5, [r4, #12]
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	7839      	ldrb	r1, [r7, #0]
 80048b4:	7c20      	ldrb	r0, [r4, #16]
 80048b6:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	47c0      	blx	r8
 80048be:	e077      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80048c0:	7828      	ldrb	r0, [r5, #0]
 80048c2:	f000 001f 	and.w	r0, r0, #31
 80048c6:	2810      	cmp	r0, #16
 80048c8:	d07a      	beq.n	80049c0 <PE_StateMachine_VDM+0x98c>
 80048ca:	f000 f932 	bl	8004b32 <.text_33>
 80048ce:	d1b4      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 80048d0:	e089      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80048d2:	2100      	movs	r1, #0
 80048d4:	f88d 100c 	strb.w	r1, [sp, #12]
 80048d8:	f000 f939 	bl	8004b4e <.text_36>
 80048dc:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80048de:	b145      	cbz	r5, 80048f2 <PE_StateMachine_VDM+0x8be>
 80048e0:	a805      	add	r0, sp, #20
 80048e2:	9000      	str	r0, [sp, #0]
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	7832      	ldrb	r2, [r6, #0]
 80048e8:	7839      	ldrb	r1, [r7, #0]
 80048ea:	7c20      	ldrb	r0, [r4, #16]
 80048ec:	f002 021f 	and.w	r2, r2, #31
 80048f0:	47a8      	blx	r5
 80048f2:	f000 f94b 	bl	8004b8c <.text_37>
 80048f6:	bf1d      	ittte	ne
 80048f8:	6960      	ldrne	r0, [r4, #20]
 80048fa:	0880      	lsrne	r0, r0, #2
 80048fc:	f000 0001 	andne.w	r0, r0, #1
 8004900:	2002      	moveq	r0, #2
 8004902:	9002      	str	r0, [sp, #8]
 8004904:	208f      	movs	r0, #143	; 0x8f
 8004906:	f000 f9a5 	bl	8004c54 <.text_43>
 800490a:	2800      	cmp	r0, #0
 800490c:	d102      	bne.n	8004914 <PE_StateMachine_VDM+0x8e0>
 800490e:	205a      	movs	r0, #90	; 0x5a
 8004910:	f000 f88e 	bl	8004a30 <.text_19>
 8004914:	e086      	b.n	8004a24 <PE_StateMachine_VDM+0x9f0>
 8004916:	8828      	ldrh	r0, [r5, #0]
 8004918:	0b00      	lsrs	r0, r0, #12
 800491a:	f000 0007 	and.w	r0, r0, #7
 800491e:	1e41      	subs	r1, r0, #1
 8004920:	f88d 1004 	strb.w	r1, [sp, #4]
 8004924:	f000 f892 	bl	8004a4c <.text_22>
 8004928:	f000 f88c 	bl	8004a44 <.text_21>
 800492c:	d143      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 800492e:	8829      	ldrh	r1, [r5, #0]
 8004930:	0bc8      	lsrs	r0, r1, #15
 8004932:	d140      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004934:	f000 f882 	bl	8004a3c <.text_20>
 8004938:	d03d      	beq.n	80049b6 <PE_StateMachine_VDM+0x982>
 800493a:	f000 f88a 	bl	8004a52 <.text_23>
 800493e:	d13a      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004940:	2a14      	cmp	r2, #20
 8004942:	d001      	beq.n	8004948 <PE_StateMachine_VDM+0x914>
 8004944:	f000 f934 	bl	8004bb0 <.text_39>
 8004948:	6868      	ldr	r0, [r5, #4]
 800494a:	7882      	ldrb	r2, [r0, #2]
 800494c:	6870      	ldr	r0, [r6, #4]
 800494e:	f002 011f 	and.w	r1, r2, #31
 8004952:	4281      	cmp	r1, r0
 8004954:	d12f      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004956:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800495a:	b360      	cbz	r0, 80049b6 <PE_StateMachine_VDM+0x982>
 800495c:	68e1      	ldr	r1, [r4, #12]
 800495e:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8004960:	b330      	cbz	r0, 80049b0 <PE_StateMachine_VDM+0x97c>
 8004962:	2000      	movs	r0, #0
 8004964:	e015      	b.n	8004992 <PE_StateMachine_VDM+0x95e>
 8004966:	6869      	ldr	r1, [r5, #4]
 8004968:	0083      	lsls	r3, r0, #2
 800496a:	eb01 0803 	add.w	r8, r1, r3
 800496e:	3108      	adds	r1, #8
 8004970:	f898 c006 	ldrb.w	ip, [r8, #6]
 8004974:	f898 e007 	ldrb.w	lr, [r8, #7]
 8004978:	5ccb      	ldrb	r3, [r1, r3]
 800497a:	f898 1009 	ldrb.w	r1, [r8, #9]
 800497e:	eb0c 260e 	add.w	r6, ip, lr, lsl #8
 8004982:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8004986:	ab02      	add	r3, sp, #8
 8004988:	eb06 6601 	add.w	r6, r6, r1, lsl #24
 800498c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8004990:	1c40      	adds	r0, r0, #1
 8004992:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004996:	4288      	cmp	r0, r1
 8004998:	d3e5      	bcc.n	8004966 <PE_StateMachine_VDM+0x932>
 800499a:	a802      	add	r0, sp, #8
 800499c:	9000      	str	r0, [sp, #0]
 800499e:	ab01      	add	r3, sp, #4
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	7839      	ldrb	r1, [r7, #0]
 80049a4:	7c20      	ldrb	r0, [r4, #16]
 80049a6:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 80049aa:	f002 021f 	and.w	r2, r2, #31
 80049ae:	47c0      	blx	r8
 80049b0:	2000      	movs	r0, #0
 80049b2:	83e0      	strh	r0, [r4, #30]
 80049b4:	e017      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80049b6:	7829      	ldrb	r1, [r5, #0]
 80049b8:	f001 011f 	and.w	r1, r1, #31
 80049bc:	2910      	cmp	r1, #16
 80049be:	d10f      	bne.n	80049e0 <PE_StateMachine_VDM+0x9ac>
 80049c0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80049c2:	7801      	ldrb	r1, [r0, #0]
 80049c4:	2914      	cmp	r1, #20
 80049c6:	d001      	beq.n	80049cc <PE_StateMachine_VDM+0x998>
 80049c8:	f000 f8f2 	bl	8004bb0 <.text_39>
 80049cc:	2000      	movs	r0, #0
 80049ce:	83e0      	strh	r0, [r4, #30]
 80049d0:	2103      	movs	r1, #3
 80049d2:	7461      	strb	r1, [r4, #17]
 80049d4:	4680      	mov	r8, r0
 80049d6:	7c20      	ldrb	r0, [r4, #16]
 80049d8:	2159      	movs	r1, #89	; 0x59
 80049da:	f7fb fdbc 	bl	8000556 <USBPD_PE_Notification>
 80049de:	e023      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e0:	f000 f8a7 	bl	8004b32 <.text_33>
 80049e4:	d120      	bne.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e6:	2103      	movs	r1, #3
 80049e8:	7461      	strb	r1, [r4, #17]
 80049ea:	f04f 0800 	mov.w	r8, #0
 80049ee:	e01b      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049f0:	2000      	movs	r0, #0
 80049f2:	f88d 000c 	strb.w	r0, [sp, #12]
 80049f6:	f000 f8aa 	bl	8004b4e <.text_36>
 80049fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80049fc:	b11b      	cbz	r3, 8004a06 <PE_StateMachine_VDM+0x9d2>
 80049fe:	7c20      	ldrb	r0, [r4, #16]
 8004a00:	aa05      	add	r2, sp, #20
 8004a02:	a903      	add	r1, sp, #12
 8004a04:	4798      	blx	r3
 8004a06:	f000 f8c1 	bl	8004b8c <.text_37>
 8004a0a:	bf1d      	ittte	ne
 8004a0c:	6960      	ldrne	r0, [r4, #20]
 8004a0e:	0880      	lsrne	r0, r0, #2
 8004a10:	f000 0001 	andne.w	r0, r0, #1
 8004a14:	2002      	moveq	r0, #2
 8004a16:	9002      	str	r0, [sp, #8]
 8004a18:	2003      	movs	r0, #3
 8004a1a:	f000 f91b 	bl	8004c54 <.text_43>
 8004a1e:	b908      	cbnz	r0, 8004a24 <PE_StateMachine_VDM+0x9f0>
 8004a20:	205a      	movs	r0, #90	; 0x5a
 8004a22:	7720      	strb	r0, [r4, #28]
 8004a24:	2100      	movs	r1, #0
 8004a26:	7079      	strb	r1, [r7, #1]
 8004a28:	4640      	mov	r0, r8
 8004a2a:	b01c      	add	sp, #112	; 0x70
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a30 <.text_19>:
 8004a30:	7720      	strb	r0, [r4, #28]
 8004a32:	f8a4 901e 	strh.w	r9, [r4, #30]
 8004a36:	f04f 081e 	mov.w	r8, #30
 8004a3a:	4770      	bx	lr

08004a3c <.text_20>:
 8004a3c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8004a40:	2800      	cmp	r0, #0
 8004a42:	4770      	bx	lr

08004a44 <.text_21>:
 8004a44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a46:	780a      	ldrb	r2, [r1, #0]
 8004a48:	4282      	cmp	r2, r0
 8004a4a:	4770      	bx	lr

08004a4c <.text_22>:
 8004a4c:	7838      	ldrb	r0, [r7, #0]
 8004a4e:	f7fb bfe1 	b.w	8000a14 <PE_Convert_SOPRxEvent>

08004a52 <.text_23>:
 8004a52:	7828      	ldrb	r0, [r5, #0]
 8004a54:	f000 001f 	and.w	r0, r0, #31
 8004a58:	280f      	cmp	r0, #15
 8004a5a:	4770      	bx	lr

08004a5c <.text_24>:
 8004a5c:	9002      	str	r0, [sp, #8]
 8004a5e:	f8cd a000 	str.w	sl, [sp]
 8004a62:	4770      	bx	lr

08004a64 <.text_25>:
 8004a64:	6860      	ldr	r0, [r4, #4]
 8004a66:	7802      	ldrb	r2, [r0, #0]
 8004a68:	f002 020b 	and.w	r2, r2, #11
 8004a6c:	2a09      	cmp	r2, #9
 8004a6e:	4770      	bx	lr

08004a70 <.text_26>:
 8004a70:	6031      	str	r1, [r6, #0]
 8004a72:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	6860      	ldr	r0, [r4, #4]
 8004a7a:	6801      	ldr	r1, [r0, #0]
 8004a7c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004a80:	6831      	ldr	r1, [r6, #0]
 8004a82:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004a86:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004a8a:	6031      	str	r1, [r6, #0]
 8004a8c:	4770      	bx	lr

08004a8e <.text_27>:
 8004a8e:	6030      	str	r0, [r6, #0]
 8004a90:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004a94:	6030      	str	r0, [r6, #0]
 8004a96:	6860      	ldr	r0, [r4, #4]
 8004a98:	6832      	ldr	r2, [r6, #0]
 8004a9a:	6801      	ldr	r1, [r0, #0]
 8004a9c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aa0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004aa4:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004aa8:	6032      	str	r2, [r6, #0]
 8004aaa:	6860      	ldr	r0, [r4, #4]
 8004aac:	6801      	ldr	r1, [r0, #0]
 8004aae:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8004ab2:	4770      	bx	lr

08004ab4 <.text_28>:
 8004ab4:	f361 401f 	bfi	r0, r1, #16, #16
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004abe:	6030      	str	r0, [r6, #0]
 8004ac0:	6860      	ldr	r0, [r4, #4]
 8004ac2:	6801      	ldr	r1, [r0, #0]
 8004ac4:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004ac8:	6831      	ldr	r1, [r6, #0]
 8004aca:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004ace:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004ad2:	6031      	str	r1, [r6, #0]
 8004ad4:	4770      	bx	lr

08004ad6 <.text_29>:
 8004ad6:	8931      	ldrh	r1, [r6, #8]
 8004ad8:	f361 401f 	bfi	r0, r1, #16, #16
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004ae2:	6030      	str	r0, [r6, #0]
 8004ae4:	6860      	ldr	r0, [r4, #4]
 8004ae6:	6832      	ldr	r2, [r6, #0]
 8004ae8:	6801      	ldr	r1, [r0, #0]
 8004aea:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aee:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004af2:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004af6:	6032      	str	r2, [r6, #0]
 8004af8:	6960      	ldr	r0, [r4, #20]
 8004afa:	6831      	ldr	r1, [r6, #0]
 8004afc:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8004b00:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004b04:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8004b08:	6031      	str	r1, [r6, #0]
 8004b0a:	6860      	ldr	r0, [r4, #4]
 8004b0c:	6801      	ldr	r1, [r0, #0]
 8004b0e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004b12:	2800      	cmp	r0, #0
 8004b14:	4770      	bx	lr

08004b16 <.text_30>:
 8004b16:	6830      	ldr	r0, [r6, #0]
 8004b18:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004b1c:	6030      	str	r0, [r6, #0]
 8004b1e:	4633      	mov	r3, r6
 8004b20:	4770      	bx	lr

08004b22 <.text_31>:
 8004b22:	6830      	ldr	r0, [r6, #0]
 8004b24:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8004b28:	4770      	bx	lr

08004b2a <.text_32>:
 8004b2a:	6830      	ldr	r0, [r6, #0]
 8004b2c:	f368 1087 	bfi	r0, r8, #6, #2
 8004b30:	4770      	bx	lr

08004b32 <.text_33>:
 8004b32:	8be0      	ldrh	r0, [r4, #30]
 8004b34:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b38:	4770      	bx	lr

08004b3a <.text_34>:
 8004b3a:	8be0      	ldrh	r0, [r4, #30]
 8004b3c:	2501      	movs	r5, #1
 8004b3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b42:	4770      	bx	lr

08004b44 <.text_35>:
 8004b44:	6830      	ldr	r0, [r6, #0]
 8004b46:	f36a 1087 	bfi	r0, sl, #6, #2
 8004b4a:	6030      	str	r0, [r6, #0]
 8004b4c:	4770      	bx	lr

08004b4e <.text_36>:
 8004b4e:	6830      	ldr	r0, [r6, #0]
 8004b50:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004b54:	6030      	str	r0, [r6, #0]
 8004b56:	6871      	ldr	r1, [r6, #4]
 8004b58:	f361 0004 	bfi	r0, r1, #0, #5
 8004b5c:	6030      	str	r0, [r6, #0]
 8004b5e:	8931      	ldrh	r1, [r6, #8]
 8004b60:	f361 401f 	bfi	r0, r1, #16, #16
 8004b64:	6030      	str	r0, [r6, #0]
 8004b66:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004b6a:	6030      	str	r0, [r6, #0]
 8004b6c:	6860      	ldr	r0, [r4, #4]
 8004b6e:	6801      	ldr	r1, [r0, #0]
 8004b70:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004b74:	6831      	ldr	r1, [r6, #0]
 8004b76:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004b7a:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004b7e:	6031      	str	r1, [r6, #0]
 8004b80:	f36a 210a 	bfi	r1, sl, #8, #3
 8004b84:	6031      	str	r1, [r6, #0]
 8004b86:	9104      	str	r1, [sp, #16]
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	4770      	bx	lr

08004b8c <.text_37>:
 8004b8c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004b90:	1c40      	adds	r0, r0, #1
 8004b92:	f88d 000c 	strb.w	r0, [sp, #12]
 8004b96:	ab04      	add	r3, sp, #16
 8004b98:	6860      	ldr	r0, [r4, #4]
 8004b9a:	6801      	ldr	r1, [r0, #0]
 8004b9c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	4770      	bx	lr

08004ba4 <.text_38>:
 8004ba4:	9001      	str	r0, [sp, #4]
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	7839      	ldrb	r1, [r7, #0]
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7fc bc89 	b.w	80014c2 <PE_Send_DataMessage>

08004bb0 <.text_39>:
 8004bb0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bb2:	2014      	movs	r0, #20
 8004bb4:	7008      	strb	r0, [r1, #0]
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fb bef8 	b.w	80009ac <PE_Clear_RxEvent>

08004bbc <.text_40>:
 8004bbc:	6830      	ldr	r0, [r6, #0]
 8004bbe:	68e3      	ldr	r3, [r4, #12]
 8004bc0:	f3c0 2202 	ubfx	r2, r0, #8, #3
 8004bc4:	0c01      	lsrs	r1, r0, #16
 8004bc6:	7c20      	ldrb	r0, [r4, #16]
 8004bc8:	4770      	bx	lr

08004bca <PE_StateMachine_UVDM>:
 8004bca:	b570      	push	{r4, r5, r6, lr}
 8004bcc:	2914      	cmp	r1, #20
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	d134      	bne.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004bd4:	68e0      	ldr	r0, [r4, #12]
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	bf1c      	itt	ne
 8004bda:	6bc0      	ldrne	r0, [r0, #60]	; 0x3c
 8004bdc:	2800      	cmpne	r0, #0
 8004bde:	d02e      	beq.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004be0:	2100      	movs	r1, #0
 8004be2:	f88d 100c 	strb.w	r1, [sp, #12]
 8004be6:	ab06      	add	r3, sp, #24
 8004be8:	68e5      	ldr	r5, [r4, #12]
 8004bea:	7c20      	ldrb	r0, [r4, #16]
 8004bec:	6bee      	ldr	r6, [r5, #60]	; 0x3c
 8004bee:	aa03      	add	r2, sp, #12
 8004bf0:	a904      	add	r1, sp, #16
 8004bf2:	47b0      	blx	r6
 8004bf4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004bf8:	9804      	ldr	r0, [sp, #16]
 8004bfa:	1c49      	adds	r1, r1, #1
 8004bfc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004c00:	f88d 100c 	strb.w	r1, [sp, #12]
 8004c04:	9004      	str	r0, [sp, #16]
 8004c06:	f104 0531 	add.w	r5, r4, #49	; 0x31
 8004c0a:	9904      	ldr	r1, [sp, #16]
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	ab05      	add	r3, sp, #20
 8004c10:	f000 f81a 	bl	8004c48 <.text_42+0x6>
 8004c14:	bf1d      	ittte	ne
 8004c16:	6960      	ldrne	r0, [r4, #20]
 8004c18:	0880      	lsrne	r0, r0, #2
 8004c1a:	f000 0001 	andne.w	r0, r0, #1
 8004c1e:	2002      	moveq	r0, #2
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	2003      	movs	r0, #3
 8004c24:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c28:	9100      	str	r1, [sp, #0]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	7829      	ldrb	r1, [r5, #0]
 8004c30:	f000 f816 	bl	8004c60 <.text_44>
 8004c34:	b908      	cbnz	r0, 8004c3a <PE_StateMachine_UVDM+0x70>
 8004c36:	2059      	movs	r0, #89	; 0x59
 8004c38:	7720      	strb	r0, [r4, #28]
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	7069      	strb	r1, [r5, #1]
 8004c3e:	b00c      	add	sp, #48	; 0x30
 8004c40:	bd70      	pop	{r4, r5, r6, pc}

08004c42 <.text_42>:
 8004c42:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004c46:	6031      	str	r1, [r6, #0]
 8004c48:	6860      	ldr	r0, [r4, #4]
 8004c4a:	6801      	ldr	r1, [r0, #0]
 8004c4c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004c50:	2800      	cmp	r0, #0
 8004c52:	4770      	bx	lr

08004c54 <.text_43>:
 8004c54:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c58:	9100      	str	r1, [sp, #0]
 8004c5a:	9001      	str	r0, [sp, #4]
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	7839      	ldrb	r1, [r7, #0]

08004c60 <.text_44>:
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7fc bc2e 	b.w	80014c2 <PE_Send_DataMessage>

08004c66 <PE_Check_DataMessageVDM>:
 8004c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c68:	4605      	mov	r5, r0
 8004c6a:	6828      	ldr	r0, [r5, #0]
 8004c6c:	6841      	ldr	r1, [r0, #4]
 8004c6e:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004c72:	2800      	cmp	r0, #0
 8004c74:	bf1c      	itt	ne
 8004c76:	68e8      	ldrne	r0, [r5, #12]
 8004c78:	2800      	cmpne	r0, #0
 8004c7a:	d04e      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004c7c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004c7e:	7888      	ldrb	r0, [r1, #2]
 8004c80:	78ca      	ldrb	r2, [r1, #3]
 8004c82:	790b      	ldrb	r3, [r1, #4]
 8004c84:	7949      	ldrb	r1, [r1, #5]
 8004c86:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8004c8a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 8004c8e:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8004c92:	4601      	mov	r1, r0
 8004c94:	0bca      	lsrs	r2, r1, #15
 8004c96:	f012 0201 	ands.w	r2, r2, #1
 8004c9a:	d012      	beq.n	8004cc2 <PE_Check_DataMessageVDM+0x5c>
 8004c9c:	2a01      	cmp	r2, #1
 8004c9e:	bf02      	ittt	eq
 8004ca0:	f8c5 1250 	streq.w	r1, [r5, #592]	; 0x250
 8004ca4:	f3c0 1081 	ubfxeq	r0, r0, #6, #2
 8004ca8:	2800      	cmpeq	r0, #0
 8004caa:	d136      	bne.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cac:	6828      	ldr	r0, [r5, #0]
 8004cae:	6841      	ldr	r1, [r0, #4]
 8004cb0:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d030      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	e8bd 40f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, lr}
 8004cbe:	f7ff b939 	b.w	8003f34 <PE_Receive_SVDM>
 8004cc2:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004cc4:	0b00      	lsrs	r0, r0, #12
 8004cc6:	f000 0007 	and.w	r0, r0, #7
 8004cca:	1e42      	subs	r2, r0, #1
 8004ccc:	f885 24ac 	strb.w	r2, [r5, #1196]	; 0x4ac
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f205 4394 	addw	r3, r5, #1172	; 0x494
 8004cd6:	e00f      	b.n	8004cf8 <PE_Check_DataMessageVDM+0x92>
 8004cd8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004cda:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004cde:	7994      	ldrb	r4, [r2, #6]
 8004ce0:	79d6      	ldrb	r6, [r2, #7]
 8004ce2:	eb04 2706 	add.w	r7, r4, r6, lsl #8
 8004ce6:	7a14      	ldrb	r4, [r2, #8]
 8004ce8:	7a52      	ldrb	r2, [r2, #9]
 8004cea:	eb07 4704 	add.w	r7, r7, r4, lsl #16
 8004cee:	eb07 6702 	add.w	r7, r7, r2, lsl #24
 8004cf2:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8004cf6:	1c40      	adds	r0, r0, #1
 8004cf8:	f895 24ac 	ldrb.w	r2, [r5, #1196]	; 0x4ac
 8004cfc:	4290      	cmp	r0, r2
 8004cfe:	d3eb      	bcc.n	8004cd8 <PE_Check_DataMessageVDM+0x72>
 8004d00:	68e8      	ldr	r0, [r5, #12]
 8004d02:	2800      	cmp	r0, #0
 8004d04:	bf1c      	itt	ne
 8004d06:	6c04      	ldrne	r4, [r0, #64]	; 0x40
 8004d08:	2c00      	cmpne	r4, #0
 8004d0a:	d006      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d0c:	7c28      	ldrb	r0, [r5, #16]
 8004d0e:	f205 42ac 	addw	r2, r5, #1196	; 0x4ac
 8004d12:	47a0      	blx	r4
 8004d14:	b908      	cbnz	r0, 8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d16:	2003      	movs	r0, #3
 8004d18:	e006      	b.n	8004d28 <PE_Check_DataMessageVDM+0xc2>
 8004d1a:	6868      	ldr	r0, [r5, #4]
 8004d1c:	7801      	ldrb	r1, [r0, #0]
 8004d1e:	f001 0103 	and.w	r1, r1, #3
 8004d22:	2902      	cmp	r1, #2
 8004d24:	d101      	bne.n	8004d2a <PE_Check_DataMessageVDM+0xc4>
 8004d26:	2001      	movs	r0, #1
 8004d28:	7468      	strb	r0, [r5, #17]
 8004d2a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004d2c <PE_SVDM_CheckIdentity>:
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	f000 f8f3 	bl	8004f18 <.text_51>
 8004d32:	0b24      	lsrs	r4, r4, #12
 8004d34:	f004 0407 	and.w	r4, r4, #7
 8004d38:	1e65      	subs	r5, r4, #1
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	b2ee      	uxtb	r6, r5
 8004d3e:	2e03      	cmp	r6, #3
 8004d40:	f0c0 8081 	bcc.w	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004d44:	780c      	ldrb	r4, [r1, #0]
 8004d46:	784e      	ldrb	r6, [r1, #1]
 8004d48:	788f      	ldrb	r7, [r1, #2]
 8004d4a:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8004d4e:	78ce      	ldrb	r6, [r1, #3]
 8004d50:	eb04 4407 	add.w	r4, r4, r7, lsl #16
 8004d54:	eb04 6406 	add.w	r4, r4, r6, lsl #24
 8004d58:	6014      	str	r4, [r2, #0]
 8004d5a:	790f      	ldrb	r7, [r1, #4]
 8004d5c:	794e      	ldrb	r6, [r1, #5]
 8004d5e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004d62:	798f      	ldrb	r7, [r1, #6]
 8004d64:	eb06 4707 	add.w	r7, r6, r7, lsl #16
 8004d68:	79ce      	ldrb	r6, [r1, #7]
 8004d6a:	eb07 6606 	add.w	r6, r7, r6, lsl #24
 8004d6e:	6056      	str	r6, [r2, #4]
 8004d70:	7a0f      	ldrb	r7, [r1, #8]
 8004d72:	f891 c009 	ldrb.w	ip, [r1, #9]
 8004d76:	eb07 2e0c 	add.w	lr, r7, ip, lsl #8
 8004d7a:	7a8f      	ldrb	r7, [r1, #10]
 8004d7c:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8004d80:	eb0e 4707 	add.w	r7, lr, r7, lsl #16
 8004d84:	eb07 670c 	add.w	r7, r7, ip, lsl #24
 8004d88:	6097      	str	r7, [r2, #8]
 8004d8a:	2608      	movs	r6, #8
 8004d8c:	1eef      	subs	r7, r5, #3
 8004d8e:	f892 5020 	ldrb.w	r5, [r2, #32]
 8004d92:	f005 0ee0 	and.w	lr, r5, #224	; 0xe0
 8004d96:	b2fd      	uxtb	r5, r7
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	f882 e020 	strb.w	lr, [r2, #32]
 8004d9e:	d053      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004da0:	0ee4      	lsrs	r4, r4, #27
 8004da2:	1e7d      	subs	r5, r7, #1
 8004da4:	f004 0407 	and.w	r4, r4, #7
 8004da8:	2c05      	cmp	r4, #5
 8004daa:	d84c      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004dac:	e8df f004 	tbb	[pc, r4]
 8004db0:	2303030c 	.word	0x2303030c
 8004db4:	2f29      	.short	0x2f29
 8004db6:	f04e 0408 	orr.w	r4, lr, #8
 8004dba:	f000 f847 	bl	8004e4c <.text_47>
 8004dbe:	6194      	str	r4, [r2, #24]
 8004dc0:	462f      	mov	r7, r5
 8004dc2:	b2fc      	uxtb	r4, r7
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	d03f      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dc8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8004dca:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	d33a      	bcc.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dd2:	6810      	ldr	r0, [r2, #0]
 8004dd4:	0dc0      	lsrs	r0, r0, #23
 8004dd6:	f010 0007 	ands.w	r0, r0, #7
 8004dda:	d035      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004ddc:	1e40      	subs	r0, r0, #1
 8004dde:	2802      	cmp	r0, #2
 8004de0:	d831      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004de2:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004de6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004dea:	2800      	cmp	r0, #0
 8004dec:	bf1a      	itte	ne
 8004dee:	3608      	addne	r6, #8
 8004df0:	1e7f      	subne	r7, r7, #1
 8004df2:	1d36      	addeq	r6, r6, #4
 8004df4:	e011      	b.n	8004e1a <PE_SVDM_CheckIdentity+0xee>
 8004df6:	f04e 0401 	orr.w	r4, lr, #1
 8004dfa:	f000 f827 	bl	8004e4c <.text_47>
 8004dfe:	60d4      	str	r4, [r2, #12]
 8004e00:	e7de      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e02:	f04e 0404 	orr.w	r4, lr, #4
 8004e06:	f000 f821 	bl	8004e4c <.text_47>
 8004e0a:	6154      	str	r4, [r2, #20]
 8004e0c:	e7d8      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e0e:	f04e 0402 	orr.w	r4, lr, #2
 8004e12:	f000 f81b 	bl	8004e4c <.text_47>
 8004e16:	6114      	str	r4, [r2, #16]
 8004e18:	e7d2      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e1a:	b2ff      	uxtb	r7, r7
 8004e1c:	2f01      	cmp	r7, #1
 8004e1e:	d112      	bne.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004e20:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004e24:	f040 0010 	orr.w	r0, r0, #16
 8004e28:	f882 0020 	strb.w	r0, [r2, #32]
 8004e2c:	1988      	adds	r0, r1, r6
 8004e2e:	7801      	ldrb	r1, [r0, #0]
 8004e30:	7844      	ldrb	r4, [r0, #1]
 8004e32:	eb01 2504 	add.w	r5, r1, r4, lsl #8
 8004e36:	7881      	ldrb	r1, [r0, #2]
 8004e38:	78c0      	ldrb	r0, [r0, #3]
 8004e3a:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8004e3e:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8004e42:	61d5      	str	r5, [r2, #28]
 8004e44:	e000      	b.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004e46:	2302      	movs	r3, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e4c <.text_47>:
 8004e4c:	f882 4020 	strb.w	r4, [r2, #32]
 8004e50:	260c      	movs	r6, #12
 8004e52:	7b0c      	ldrb	r4, [r1, #12]
 8004e54:	7b4f      	ldrb	r7, [r1, #13]
 8004e56:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 8004e5a:	7b8c      	ldrb	r4, [r1, #14]
 8004e5c:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 8004e60:	7bcf      	ldrb	r7, [r1, #15]
 8004e62:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8004e66:	4770      	bx	lr

08004e68 <PE_SVDM_CheckSVIDs>:
 8004e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <.text_52>)
 8004e6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004e70:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8004e72:	0b1b      	lsrs	r3, r3, #12
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	1e5b      	subs	r3, r3, #1
 8004e7a:	2400      	movs	r4, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2500      	movs	r5, #0
 8004e80:	7614      	strb	r4, [r2, #24]
 8004e82:	7654      	strb	r4, [r2, #25]
 8004e84:	f000 f816 	bl	8004eb4 <.text_49>
 8004e88:	bf19      	ittee	ne
 8004e8a:	1c76      	addne	r6, r6, #1
 8004e8c:	7616      	strbne	r6, [r2, #24]
 8004e8e:	2501      	moveq	r5, #1
 8004e90:	7655      	strbeq	r5, [r2, #25]
 8004e92:	1ca4      	adds	r4, r4, #2
 8004e94:	b2e4      	uxtb	r4, r4
 8004e96:	f000 f80d 	bl	8004eb4 <.text_49>
 8004e9a:	bf19      	ittee	ne
 8004e9c:	1c76      	addne	r6, r6, #1
 8004e9e:	7616      	strbne	r6, [r2, #24]
 8004ea0:	2501      	moveq	r5, #1
 8004ea2:	7655      	strbeq	r5, [r2, #25]
 8004ea4:	1ca4      	adds	r4, r4, #2
 8004ea6:	b2e4      	uxtb	r4, r4
 8004ea8:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004eac:	d201      	bcs.n	8004eb2 <PE_SVDM_CheckSVIDs+0x4a>
 8004eae:	0028      	movs	r0, r5
 8004eb0:	d0e8      	beq.n	8004e84 <PE_SVDM_CheckSVIDs+0x1c>
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eb4 <.text_49>:
 8004eb4:	1c4e      	adds	r6, r1, #1
 8004eb6:	5d08      	ldrb	r0, [r1, r4]
 8004eb8:	5d37      	ldrb	r7, [r6, r4]
 8004eba:	eb00 2607 	add.w	r6, r0, r7, lsl #8
 8004ebe:	7e10      	ldrb	r0, [r2, #24]
 8004ec0:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
 8004ec4:	7e16      	ldrb	r6, [r2, #24]
 8004ec6:	4637      	mov	r7, r6
 8004ec8:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <PE_SVDM_CheckModes>:
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	f000 f821 	bl	8004f18 <.text_51>
 8004ed6:	8399      	strh	r1, [r3, #28]
 8004ed8:	0b24      	lsrs	r4, r4, #12
 8004eda:	f004 0407 	and.w	r4, r4, #7
 8004ede:	1e60      	subs	r0, r4, #1
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	b2c0      	uxtb	r0, r0
 8004ee4:	601c      	str	r4, [r3, #0]
 8004ee6:	1916      	adds	r6, r2, r4
 8004ee8:	5d15      	ldrb	r5, [r2, r4]
 8004eea:	7871      	ldrb	r1, [r6, #1]
 8004eec:	eb05 2701 	add.w	r7, r5, r1, lsl #8
 8004ef0:	1911      	adds	r1, r2, r4
 8004ef2:	1d24      	adds	r4, r4, #4
 8004ef4:	788d      	ldrb	r5, [r1, #2]
 8004ef6:	78ce      	ldrb	r6, [r1, #3]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8004efe:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8004f02:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 8004f06:	606f      	str	r7, [r5, #4]
 8004f08:	b2e4      	uxtb	r4, r4
 8004f0a:	681e      	ldr	r6, [r3, #0]
 8004f0c:	1c76      	adds	r6, r6, #1
 8004f0e:	ebb4 0f80 	cmp.w	r4, r0, lsl #2
 8004f12:	601e      	str	r6, [r3, #0]
 8004f14:	d3e7      	bcc.n	8004ee6 <PE_SVDM_CheckModes+0x16>
 8004f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f18 <.text_51>:
 8004f18:	4c02      	ldr	r4, [pc, #8]	; (8004f24 <.text_52>)
 8004f1a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004f1e:	8e84      	ldrh	r4, [r0, #52]	; 0x34
 8004f20:	4770      	bx	lr
	...

08004f24 <.text_52>:
 8004f24:	20000444 	.word	0x20000444

08004f28 <USBPD_PRL_TimerCounter>:
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	f000 f879 	bl	8005020 <.text_12>
 8004f2e:	7919      	ldrb	r1, [r3, #4]
 8004f30:	b111      	cbz	r1, 8004f38 <USBPD_PRL_TimerCounter+0x10>
 8004f32:	7919      	ldrb	r1, [r3, #4]
 8004f34:	1e4c      	subs	r4, r1, #1
 8004f36:	711c      	strb	r4, [r3, #4]
 8004f38:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8004f3c:	7848      	ldrb	r0, [r1, #1]
 8004f3e:	b108      	cbz	r0, 8004f44 <USBPD_PRL_TimerCounter+0x1c>
 8004f40:	1e40      	subs	r0, r0, #1
 8004f42:	7048      	strb	r0, [r1, #1]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <USBPD_PRL_Init>:
 8004f46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	4617      	mov	r7, r2
 8004f50:	461d      	mov	r5, r3
 8004f52:	f44f 709c 	mov.w	r0, #312	; 0x138
 8004f56:	f01a fbcb 	bl	801f6f0 <malloc>
 8004f5a:	0004      	movs	r4, r0
 8004f5c:	f04f 0916 	mov.w	r9, #22
 8004f60:	d019      	beq.n	8004f96 <USBPD_PRL_Init+0x50>
 8004f62:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004f66:	f01b fd9e 	bl	8020aa6 <__aeabi_memclr>
 8004f6a:	f000 fca8 	bl	80058be <.text_34>
 8004f6e:	f8df 0a48 	ldr.w	r0, [pc, #2632]	; 80059b8 <.text_40>
 8004f72:	4641      	mov	r1, r8
 8004f74:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8004f78:	62a7      	str	r7, [r4, #40]	; 0x28
 8004f7a:	62e5      	str	r5, [r4, #44]	; 0x2c
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	9000      	str	r0, [sp, #0]
 8004f80:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8004f84:	6870      	ldr	r0, [r6, #4]
 8004f86:	f60f 21a4 	addw	r1, pc, #2724	; 0xaa4
 8004f8a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f011 fd0c 	bl	80169ac <USBPD_PHY_Init>
 8004f94:	4681      	mov	r9, r0
 8004f96:	4648      	mov	r0, r9
 8004f98:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08004f9c <USBPD_PRL_GetMemoryConsumption>:
 8004f9c:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 8004fa0:	4770      	bx	lr

08004fa2 <USBPD_PRL_SetHeader>:
 8004fa2:	b530      	push	{r4, r5, lr}
 8004fa4:	f8df 4a10 	ldr.w	r4, [pc, #2576]	; 80059b8 <.text_40>
 8004fa8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8004fac:	8a6d      	ldrh	r5, [r5, #18]
 8004fae:	f361 2508 	bfi	r5, r1, #8, #1
 8004fb2:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fb6:	824d      	strh	r5, [r1, #18]
 8004fb8:	f362 1545 	bfi	r5, r2, #5, #1
 8004fbc:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fc0:	824d      	strh	r5, [r1, #18]
 8004fc2:	f363 1587 	bfi	r5, r3, #6, #2
 8004fc6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004fca:	8245      	strh	r5, [r0, #18]
 8004fcc:	bd30      	pop	{r4, r5, pc}

08004fce <USBPD_PRL_SetHeaderPowerRole>:
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	f000 f80b 	bl	8004fea <.text_9>
 8004fd4:	f361 2408 	bfi	r4, r1, #8, #1
 8004fd8:	825c      	strh	r4, [r3, #18]
 8004fda:	bd10      	pop	{r4, pc}

08004fdc <USBPD_PRL_SetHeaderDataRole>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	f000 f804 	bl	8004fea <.text_9>
 8004fe2:	f361 1445 	bfi	r4, r1, #5, #1
 8004fe6:	825c      	strh	r4, [r3, #18]
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <.text_9>:
 8004fea:	f8df 29cc 	ldr.w	r2, [pc, #2508]	; 80059b8 <.text_40>
 8004fee:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8004ff2:	8a5c      	ldrh	r4, [r3, #18]
 8004ff4:	4770      	bx	lr

08004ff6 <USBPD_PRL_SetHeaderSpecification>:
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	f7ff fff7 	bl	8004fea <.text_9>
 8004ffc:	f361 1487 	bfi	r4, r1, #6, #2
 8005000:	825c      	strh	r4, [r3, #18]
 8005002:	bd10      	pop	{r4, pc}

08005004 <USBPD_PRL_CBL_SetHeaderSpecification>:
 8005004:	b540      	push	{r6, lr}
 8005006:	f000 f80b 	bl	8005020 <.text_12>
 800500a:	8a9e      	ldrh	r6, [r3, #20]
 800500c:	f361 1687 	bfi	r6, r1, #6, #2
 8005010:	829e      	strh	r6, [r3, #20]
 8005012:	8adb      	ldrh	r3, [r3, #22]
 8005014:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005018:	f361 1387 	bfi	r3, r1, #6, #2
 800501c:	82c3      	strh	r3, [r0, #22]
 800501e:	bd40      	pop	{r6, pc}

08005020 <.text_12>:
 8005020:	f8df 2994 	ldr.w	r2, [pc, #2452]	; 80059b8 <.text_40>
 8005024:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8005028:	4770      	bx	lr

0800502a <USBPD_PRL_SRCSetSinkNG>:
 800502a:	f011 bd9a 	b.w	8016b62 <USBPD_PHY_SetResistor_SinkTxNG>

0800502e <USBPD_PRL_SRCReleaseSinkNG>:
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
 8005032:	f011 fda3 	bl	8016b7c <USBPD_PHY_SetResistor_SinkTxOK>
 8005036:	f8df 1980 	ldr.w	r1, [pc, #2432]	; 80059b8 <.text_40>
 800503a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 800503e:	2000      	movs	r0, #0
 8005040:	7150      	strb	r0, [r2, #5]
 8005042:	bd10      	pop	{r4, pc}

08005044 <USBPD_PRL_IsResistor_SinkTxOK>:
 8005044:	f011 bdbc 	b.w	8016bc0 <USBPD_PHY_IsResistor_SinkTxOk>

08005048 <USBPD_PRL_FastRoleSwapSignalling>:
 8005048:	f011 bdc8 	b.w	8016bdc <USBPD_PHY_FastRoleSwapSignalling>

0800504c <PRL_FastRoleSwapReception>:
 800504c:	f7fb be1a 	b.w	8000c84 <PE_PRL_FastRoleSwapReception>

08005050 <USBPD_PRL_SOPCapability>:
 8005050:	f011 bda2 	b.w	8016b98 <USBPD_PHY_SOPSupported>

08005054 <USBPD_PRL_SendMessage>:
 8005054:	e92d 4dfd 	stmdb	sp!, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
 8005058:	f8df a95c 	ldr.w	sl, [pc, #2396]	; 80059b8 <.text_40>
 800505c:	b083      	sub	sp, #12
 800505e:	4680      	mov	r8, r0
 8005060:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005064:	4694      	mov	ip, r2
 8005066:	f10c 0701 	add.w	r7, ip, #1
 800506a:	2403      	movs	r4, #3
 800506c:	7938      	ldrb	r0, [r7, #4]
 800506e:	b118      	cbz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005070:	7a38      	ldrb	r0, [r7, #8]
 8005072:	b908      	cbnz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005074:	200f      	movs	r0, #15
 8005076:	7150      	strb	r0, [r2, #5]
 8005078:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005080:	f88d 0005 	strb.w	r0, [sp, #5]
 8005084:	f88d 1004 	strb.w	r1, [sp, #4]
 8005088:	9302      	str	r3, [sp, #8]
 800508a:	eb0c 0e01 	add.w	lr, ip, r1
 800508e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005090:	f897 b004 	ldrb.w	fp, [r7, #4]
 8005094:	f1bb 0f10 	cmp.w	fp, #16
 8005098:	f10c 050e 	add.w	r5, ip, #14
 800509c:	f200 81fb 	bhi.w	8005496 <USBPD_PRL_SendMessage+0x442>
 80050a0:	e8df f01b 	tbh	[pc, fp, lsl #1]
 80050a4:	00250011 	.word	0x00250011
 80050a8:	01f90030 	.word	0x01f90030
 80050ac:	00550037 	.word	0x00550037
 80050b0:	00b60045 	.word	0x00b60045
 80050b4:	01f901f9 	.word	0x01f901f9
 80050b8:	0182016d 	.word	0x0182016d
 80050bc:	01b1019b 	.word	0x01b1019b
 80050c0:	01f501f9 	.word	0x01f501f9
 80050c4:	01e0      	.short	0x01e0
 80050c6:	f3ef 8510 	mrs	r5, PRIMASK
 80050ca:	b672      	cpsid	i
 80050cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050d0:	f7fb fc91 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	bf04      	itt	eq
 80050d8:	7a78      	ldrbeq	r0, [r7, #9]
 80050da:	2800      	cmpeq	r0, #0
 80050dc:	bf07      	ittee	eq
 80050de:	21ff      	moveq	r1, #255	; 0xff
 80050e0:	7239      	strbeq	r1, [r7, #8]
 80050e2:	2000      	movne	r0, #0
 80050e4:	7238      	strbne	r0, [r7, #8]
 80050e6:	f385 8810 	msr	PRIMASK, r5
 80050ea:	2106      	movs	r1, #6
 80050ec:	e1a9      	b.n	8005442 <USBPD_PRL_SendMessage+0x3ee>
 80050ee:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050f2:	f011 fd36 	bl	8016b62 <USBPD_PHY_SetResistor_SinkTxNG>
 80050f6:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80050fa:	2002      	movs	r0, #2
 80050fc:	7148      	strb	r0, [r1, #5]
 80050fe:	2013      	movs	r0, #19
 8005100:	7038      	strb	r0, [r7, #0]
 8005102:	e1cb      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005104:	2801      	cmp	r0, #1
 8005106:	d110      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005108:	7838      	ldrb	r0, [r7, #0]
 800510a:	b960      	cbnz	r0, 8005126 <USBPD_PRL_SendMessage+0xd2>
 800510c:	2105      	movs	r1, #5
 800510e:	7151      	strb	r1, [r2, #5]
 8005110:	e1c4      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005112:	2802      	cmp	r0, #2
 8005114:	d109      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005116:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800511a:	f011 fd51 	bl	8016bc0 <USBPD_PHY_IsResistor_SinkTxOk>
 800511e:	2801      	cmp	r0, #1
 8005120:	bf08      	it	eq
 8005122:	2005      	moveq	r0, #5
 8005124:	d070      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005126:	2409      	movs	r4, #9
 8005128:	e1b8      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800512a:	2006      	movs	r0, #6
 800512c:	e153      	b.n	80053d6 <USBPD_PRL_SendMessage+0x382>
 800512e:	f10c 0212 	add.w	r2, ip, #18
 8005132:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8005136:	f3c1 1181 	ubfx	r1, r1, #6, #2
 800513a:	2902      	cmp	r1, #2
 800513c:	d105      	bne.n	800514a <USBPD_PRL_SendMessage+0xf6>
 800513e:	2801      	cmp	r0, #1
 8005140:	d062      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005142:	2802      	cmp	r0, #2
 8005144:	bf08      	it	eq
 8005146:	2004      	moveq	r0, #4
 8005148:	d05e      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514a:	2005      	movs	r0, #5
 800514c:	e05c      	b.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514e:	f10c 0012 	add.w	r0, ip, #18
 8005152:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005156:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800515a:	f10c 0312 	add.w	r3, ip, #18
 800515e:	f362 0004 	bfi	r0, r2, #0, #5
 8005162:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005166:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 800516a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800516e:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8005172:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005176:	2000      	movs	r0, #0
 8005178:	7078      	strb	r0, [r7, #1]
 800517a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800517e:	0bd8      	lsrs	r0, r3, #15
 8005180:	d025      	beq.n	80051ce <USBPD_PRL_SendMessage+0x17a>
 8005182:	9802      	ldr	r0, [sp, #8]
 8005184:	7883      	ldrb	r3, [r0, #2]
 8005186:	78c7      	ldrb	r7, [r0, #3]
 8005188:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800518c:	81eb      	strh	r3, [r5, #14]
 800518e:	89e8      	ldrh	r0, [r5, #14]
 8005190:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005194:	b968      	cbnz	r0, 80051b2 <USBPD_PRL_SendMessage+0x15e>
 8005196:	89e8      	ldrh	r0, [r5, #14]
 8005198:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800519c:	bb08      	cbnz	r0, 80051e2 <USBPD_PRL_SendMessage+0x18e>
 800519e:	1f30      	subs	r0, r6, #4
 80051a0:	82a8      	strh	r0, [r5, #20]
 80051a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80051a6:	89eb      	ldrh	r3, [r5, #14]
 80051a8:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80051ac:	4318      	orrs	r0, r3
 80051ae:	81e8      	strh	r0, [r5, #14]
 80051b0:	e017      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051b2:	2000      	movs	r0, #0
 80051b4:	f10c 0312 	add.w	r3, ip, #18
 80051b8:	82a8      	strh	r0, [r5, #20]
 80051ba:	2001      	movs	r0, #1
 80051bc:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 80051c0:	f360 370e 	bfi	r7, r0, #12, #3
 80051c4:	f10c 0012 	add.w	r0, ip, #18
 80051c8:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 80051cc:	e009      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051ce:	1eb0      	subs	r0, r6, #2
 80051d0:	0880      	lsrs	r0, r0, #2
 80051d2:	f360 330e 	bfi	r3, r0, #12, #3
 80051d6:	f10c 0012 	add.w	r0, ip, #18
 80051da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80051de:	2300      	movs	r3, #0
 80051e0:	82ab      	strh	r3, [r5, #20]
 80051e2:	2a0d      	cmp	r2, #13
 80051e4:	bf02      	ittt	eq
 80051e6:	f10c 0012 	addeq.w	r0, ip, #18
 80051ea:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 80051ee:	f411 4f70 	tsteq.w	r1, #61440	; 0xf000
 80051f2:	d108      	bne.n	8005206 <USBPD_PRL_SendMessage+0x1b2>
 80051f4:	2000      	movs	r0, #0
 80051f6:	f88e 000b 	strb.w	r0, [lr, #11]
 80051fa:	220f      	movs	r2, #15
 80051fc:	2103      	movs	r1, #3
 80051fe:	f10c 0006 	add.w	r0, ip, #6
 8005202:	f000 fc20 	bl	8005a46 <__aeabi_memset>
 8005206:	2007      	movs	r0, #7
 8005208:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800520c:	7148      	strb	r0, [r1, #5]
 800520e:	e145      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005210:	f102 0312 	add.w	r3, r2, #18
 8005214:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005218:	0bc0      	lsrs	r0, r0, #15
 800521a:	d07c      	beq.n	8005316 <USBPD_PRL_SendMessage+0x2c2>
 800521c:	8b90      	ldrh	r0, [r2, #28]
 800521e:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005222:	2800      	cmp	r0, #0
 8005224:	d16c      	bne.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005226:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800522a:	8c57      	ldrh	r7, [r2, #34]	; 0x22
 800522c:	8b93      	ldrh	r3, [r2, #28]
 800522e:	2f1b      	cmp	r7, #27
 8005230:	d30f      	bcc.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005232:	0bd8      	lsrs	r0, r3, #15
 8005234:	d00d      	beq.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005236:	f102 0312 	add.w	r3, r2, #18
 800523a:	261e      	movs	r6, #30
 800523c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005240:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
 8005244:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005248:	8c50      	ldrh	r0, [r2, #34]	; 0x22
 800524a:	f1a0 031a 	sub.w	r3, r0, #26
 800524e:	8453      	strh	r3, [r2, #34]	; 0x22
 8005250:	e056      	b.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005252:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8005256:	b918      	cbnz	r0, 8005260 <USBPD_PRL_SendMessage+0x20c>
 8005258:	4618      	mov	r0, r3
 800525a:	f367 0008 	bfi	r0, r7, #0, #9
 800525e:	8390      	strh	r0, [r2, #28]
 8005260:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8005264:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005268:	f102 0312 	add.w	r3, r2, #18
 800526c:	f102 0712 	add.w	r7, r2, #18
 8005270:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005274:	4003      	ands	r3, r0
 8005276:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 800527a:	8b90      	ldrh	r0, [r2, #28]
 800527c:	0bc0      	lsrs	r0, r0, #15
 800527e:	d03b      	beq.n	80052f8 <USBPD_PRL_SendMessage+0x2a4>
 8005280:	8c50      	ldrh	r0, [r2, #34]	; 0x22
 8005282:	1c80      	adds	r0, r0, #2
 8005284:	0880      	lsrs	r0, r0, #2
 8005286:	0307      	lsls	r7, r0, #12
 8005288:	f407 47e0 	and.w	r7, r7, #28672	; 0x7000
 800528c:	f102 0012 	add.w	r0, r2, #18
 8005290:	433b      	orrs	r3, r7
 8005292:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005296:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8005298:	1c92      	adds	r2, r2, #2
 800529a:	f012 0203 	ands.w	r2, r2, #3
 800529e:	d021      	beq.n	80052e4 <USBPD_PRL_SendMessage+0x290>
 80052a0:	9802      	ldr	r0, [sp, #8]
 80052a2:	2300      	movs	r3, #0
 80052a4:	e005      	b.n	80052b2 <USBPD_PRL_SendMessage+0x25e>
 80052a6:	8c7f      	ldrh	r7, [r7, #34]	; 0x22
 80052a8:	442f      	add	r7, r5
 80052aa:	4407      	add	r7, r0
 80052ac:	2500      	movs	r5, #0
 80052ae:	713d      	strb	r5, [r7, #4]
 80052b0:	1c5b      	adds	r3, r3, #1
 80052b2:	b2dd      	uxtb	r5, r3
 80052b4:	f1c2 0e04 	rsb	lr, r2, #4
 80052b8:	f85a 7028 	ldr.w	r7, [sl, r8, lsl #2]
 80052bc:	4575      	cmp	r5, lr
 80052be:	d3f2      	bcc.n	80052a6 <USBPD_PRL_SendMessage+0x252>
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	f648 72ff 	movw	r2, #36863	; 0x8fff
 80052c6:	f107 0012 	add.w	r0, r7, #18
 80052ca:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80052ce:	4002      	ands	r2, r0
 80052d0:	0b00      	lsrs	r0, r0, #12
 80052d2:	1c40      	adds	r0, r0, #1
 80052d4:	0300      	lsls	r0, r0, #12
 80052d6:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
 80052da:	4310      	orrs	r0, r2
 80052dc:	f107 0212 	add.w	r2, r7, #18
 80052e0:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 80052e4:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 80052e8:	f100 0212 	add.w	r2, r0, #18
 80052ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80052f0:	f3c3 3602 	ubfx	r6, r3, #12, #3
 80052f4:	00b6      	lsls	r6, r6, #2
 80052f6:	1cb6      	adds	r6, r6, #2
 80052f8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 80052fc:	2000      	movs	r0, #0
 80052fe:	8450      	strh	r0, [r2, #34]	; 0x22
 8005300:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005304:	8b82      	ldrh	r2, [r0, #28]
 8005306:	9802      	ldr	r0, [sp, #8]
 8005308:	7082      	strb	r2, [r0, #2]
 800530a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800530e:	8b90      	ldrh	r0, [r2, #28]
 8005310:	9a02      	ldr	r2, [sp, #8]
 8005312:	0a00      	lsrs	r0, r0, #8
 8005314:	70d0      	strb	r0, [r2, #3]
 8005316:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800531a:	f8df 56a0 	ldr.w	r5, [pc, #1696]	; 80059bc <.text_41>
 800531e:	f100 020b 	add.w	r2, r0, #11
 8005322:	3012      	adds	r0, #18
 8005324:	5c53      	ldrb	r3, [r2, r1]
 8005326:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800532a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800532e:	f363 204b 	bfi	r0, r3, #9, #3
 8005332:	f102 0312 	add.w	r3, r2, #18
 8005336:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 800533a:	9a02      	ldr	r2, [sp, #8]
 800533c:	7010      	strb	r0, [r2, #0]
 800533e:	2202      	movs	r2, #2
 8005340:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005344:	f100 0312 	add.w	r3, r0, #18
 8005348:	9802      	ldr	r0, [sp, #8]
 800534a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800534e:	0a09      	lsrs	r1, r1, #8
 8005350:	7041      	strb	r1, [r0, #1]
 8005352:	210a      	movs	r1, #10
 8005354:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005358:	81c6      	strh	r6, [r0, #14]
 800535a:	7141      	strb	r1, [r0, #5]
 800535c:	7402      	strb	r2, [r0, #16]
 800535e:	b2b0      	uxth	r0, r6
 8005360:	9000      	str	r0, [sp, #0]
 8005362:	f000 f8a5 	bl	80054b0 <.text_21>
 8005366:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800536a:	f242 7110 	movw	r1, #10000	; 0x2710
 800536e:	f012 fee1 	bl	8018134 <USBPD_TIM_Start>
 8005372:	f000 f897 	bl	80054a4 <.text_20>
 8005376:	b2b3      	uxth	r3, r6
 8005378:	f011 fbbb 	bl	8016af2 <USBPD_PHY_SendMessage>
 800537c:	e08e      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800537e:	f3ef 8710 	mrs	r7, PRIMASK
 8005382:	b672      	cpsid	i
 8005384:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005388:	7941      	ldrb	r1, [r0, #5]
 800538a:	290a      	cmp	r1, #10
 800538c:	d109      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800538e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005392:	f012 ff41 	bl	8018218 <USBPD_TIM_IsExpired>
 8005396:	2801      	cmp	r0, #1
 8005398:	d103      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800539a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800539e:	200d      	movs	r0, #13
 80053a0:	7148      	strb	r0, [r1, #5]
 80053a2:	f387 8810 	msr	PRIMASK, r7
 80053a6:	e079      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053a8:	89a8      	ldrh	r0, [r5, #12]
 80053aa:	f89e 100b 	ldrb.w	r1, [lr, #11]
 80053ae:	0a43      	lsrs	r3, r0, #9
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4299      	cmp	r1, r3
 80053b6:	bf04      	itt	eq
 80053b8:	f000 001f 	andeq.w	r0, r0, #31
 80053bc:	2801      	cmpeq	r0, #1
 80053be:	d109      	bne.n	80053d4 <USBPD_PRL_SendMessage+0x380>
 80053c0:	1c49      	adds	r1, r1, #1
 80053c2:	f001 0107 	and.w	r1, r1, #7
 80053c6:	f88e 100b 	strb.w	r1, [lr, #11]
 80053ca:	2000      	movs	r0, #0
 80053cc:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053d0:	7148      	strb	r0, [r1, #5]
 80053d2:	e016      	b.n	8005402 <USBPD_PRL_SendMessage+0x3ae>
 80053d4:	200d      	movs	r0, #13
 80053d6:	7150      	strb	r0, [r2, #5]
 80053d8:	e060      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053da:	f89e 000b 	ldrb.w	r0, [lr, #11]
 80053de:	1c40      	adds	r0, r0, #1
 80053e0:	f000 0007 	and.w	r0, r0, #7
 80053e4:	f88e 000b 	strb.w	r0, [lr, #11]
 80053e8:	2000      	movs	r0, #0
 80053ea:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053ee:	7148      	strb	r0, [r1, #5]
 80053f0:	f248 71ff 	movw	r1, #34815	; 0x87ff
 80053f4:	89ea      	ldrh	r2, [r5, #14]
 80053f6:	400a      	ands	r2, r1
 80053f8:	81ea      	strh	r2, [r5, #14]
 80053fa:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 80053fe:	4002      	ands	r2, r0
 8005400:	81ea      	strh	r2, [r5, #14]
 8005402:	2405      	movs	r4, #5
 8005404:	e04a      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005406:	7878      	ldrb	r0, [r7, #1]
 8005408:	1c40      	adds	r0, r0, #1
 800540a:	7078      	strb	r0, [r7, #1]
 800540c:	f10c 0312 	add.w	r3, ip, #18
 8005410:	f10c 0012 	add.w	r0, ip, #18
 8005414:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8005418:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800541c:	2801      	cmp	r0, #1
 800541e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005422:	bf0c      	ite	eq
 8005424:	2203      	moveq	r2, #3
 8005426:	2202      	movne	r2, #2
 8005428:	0bc0      	lsrs	r0, r0, #15
 800542a:	d006      	beq.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 800542c:	89e9      	ldrh	r1, [r5, #14]
 800542e:	0bc8      	lsrs	r0, r1, #15
 8005430:	d103      	bne.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 8005432:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005436:	291b      	cmp	r1, #27
 8005438:	d207      	bcs.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 800543a:	7878      	ldrb	r0, [r7, #1]
 800543c:	4282      	cmp	r2, r0
 800543e:	d304      	bcc.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 8005440:	2110      	movs	r1, #16
 8005442:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005446:	7141      	strb	r1, [r0, #5]
 8005448:	e028      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800544a:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800544e:	2100      	movs	r1, #0
 8005450:	7141      	strb	r1, [r0, #5]
 8005452:	2407      	movs	r4, #7
 8005454:	f89e 100b 	ldrb.w	r1, [lr, #11]
 8005458:	1c49      	adds	r1, r1, #1
 800545a:	f001 0107 	and.w	r1, r1, #7
 800545e:	f88e 100b 	strb.w	r1, [lr, #11]
 8005462:	e01b      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005464:	200a      	movs	r0, #10
 8005466:	7150      	strb	r0, [r2, #5]
 8005468:	2102      	movs	r1, #2
 800546a:	70a9      	strb	r1, [r5, #2]
 800546c:	f242 7110 	movw	r1, #10000	; 0x2710
 8005470:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005474:	f012 fe5e 	bl	8018134 <USBPD_TIM_Start>
 8005478:	882b      	ldrh	r3, [r5, #0]
 800547a:	f000 f813 	bl	80054a4 <.text_20>
 800547e:	f8df 553c 	ldr.w	r5, [pc, #1340]	; 80059bc <.text_41>
 8005482:	f011 fb36 	bl	8016af2 <USBPD_PHY_SendMessage>
 8005486:	9600      	str	r6, [sp, #0]
 8005488:	f000 f812 	bl	80054b0 <.text_21>
 800548c:	e006      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800548e:	2000      	movs	r0, #0
 8005490:	7150      	strb	r0, [r2, #5]
 8005492:	2406      	movs	r4, #6
 8005494:	e002      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005496:	2000      	movs	r0, #0
 8005498:	7150      	strb	r0, [r2, #5]
 800549a:	2410      	movs	r4, #16
 800549c:	4620      	mov	r0, r4
 800549e:	b006      	add	sp, #24
 80054a0:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

080054a4 <.text_20>:
 80054a4:	9a02      	ldr	r2, [sp, #8]
 80054a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80054aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80054ae:	4770      	bx	lr

080054b0 <.text_21>:
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80054b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80054ba:	f8d5 a000 	ldr.w	sl, [r5]
 80054be:	2002      	movs	r0, #2

080054c0 <__iar_annotation$$tailcall>:
 80054c0:	4750      	bx	sl

080054c2 <USBPD_PRL_ResetRequestProcess>:
 80054c2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	f8df 84ec 	ldr.w	r8, [pc, #1260]	; 80059b8 <.text_40>
 80054cc:	462f      	mov	r7, r5
 80054ce:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 80054d2:	2000      	movs	r0, #0
 80054d4:	70e0      	strb	r0, [r4, #3]
 80054d6:	72e0      	strb	r0, [r4, #11]
 80054d8:	7320      	strb	r0, [r4, #12]
 80054da:	7360      	strb	r0, [r4, #13]
 80054dc:	460e      	mov	r6, r1
 80054de:	f000 f9ee 	bl	80058be <.text_34>
 80054e2:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 80054e6:	f8df 74d4 	ldr.w	r7, [pc, #1236]	; 80059bc <.text_41>
 80054ea:	2200      	movs	r2, #0
 80054ec:	7142      	strb	r2, [r0, #5]
 80054ee:	9200      	str	r2, [sp, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8d7 c000 	ldr.w	ip, [r7]
 80054f6:	4632      	mov	r2, r6
 80054f8:	4629      	mov	r1, r5
 80054fa:	2002      	movs	r0, #2
 80054fc:	47e0      	blx	ip
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f83c 	bl	800557c <PRL_DisableRX>
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	f011 fae0 	bl	8016acc <USBPD_PHY_ResetRequest>
 800550c:	2005      	movs	r0, #5
 800550e:	7120      	strb	r0, [r4, #4]
 8005510:	78e0      	ldrb	r0, [r4, #3]
 8005512:	2801      	cmp	r0, #1
 8005514:	bf1c      	itt	ne
 8005516:	7920      	ldrbne	r0, [r4, #4]
 8005518:	2800      	cmpne	r0, #0
 800551a:	d1f9      	bne.n	8005510 <USBPD_PRL_ResetRequestProcess+0x4e>
 800551c:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08005520 <USBDPD_PRL_BistCarrierEyeMode>:
 8005520:	2905      	cmp	r1, #5
 8005522:	bf08      	it	eq
 8005524:	f011 bafb 	beq.w	8016b1e <USBPD_PHY_Send_BIST_Pattern>
 8005528:	2010      	movs	r0, #16
 800552a:	4770      	bx	lr

0800552c <USBDPD_PRL_BistCarrierEyeModeExit>:
 800552c:	2905      	cmp	r1, #5
 800552e:	bf04      	itt	eq
 8005530:	2107      	moveq	r1, #7
 8005532:	f011 bb02 	beq.w	8016b3a <USBPD_PHY_ExitTransmit>
 8005536:	2010      	movs	r0, #16
 8005538:	4770      	bx	lr

0800553a <USBPD_PRL_Reset>:
 800553a:	b538      	push	{r3, r4, r5, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 80059b8 <.text_40>
 8005542:	4621      	mov	r1, r4
 8005544:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8005548:	2200      	movs	r2, #0
 800554a:	716a      	strb	r2, [r5, #5]
 800554c:	702a      	strb	r2, [r5, #0]
 800554e:	712a      	strb	r2, [r5, #4]
 8005550:	72ea      	strb	r2, [r5, #11]
 8005552:	732a      	strb	r2, [r5, #12]
 8005554:	736a      	strb	r2, [r5, #13]
 8005556:	2103      	movs	r1, #3
 8005558:	220f      	movs	r2, #15
 800555a:	1da8      	adds	r0, r5, #6
 800555c:	f000 fa73 	bl	8005a46 <__aeabi_memset>
 8005560:	2200      	movs	r2, #0
 8005562:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 8005566:	4620      	mov	r0, r4
 8005568:	f011 faa5 	bl	8016ab6 <USBPD_PHY_Reset>
 800556c:	4620      	mov	r0, r4
 800556e:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8005572:	f011 bb40 	b.w	8016bf6 <USBPD_PHY_EnableRX>

08005576 <USBPD_PRL_Stop>:
 8005576:	f011 bb4b 	b.w	8016c10 <USBPD_PHY_DisableRX>

0800557a <USBPD_PRL_DeInit>:
 800557a:	4770      	bx	lr

0800557c <PRL_DisableRX>:
 800557c:	f011 bb48 	b.w	8016c10 <USBPD_PHY_DisableRX>

08005580 <PRL_Received>:
 8005580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	4682      	mov	sl, r0
 8005586:	f8df 9430 	ldr.w	r9, [pc, #1072]	; 80059b8 <.text_40>
 800558a:	b084      	sub	sp, #16
 800558c:	4655      	mov	r5, sl
 800558e:	f859 4025 	ldr.w	r4, [r9, r5, lsl #2]
 8005592:	f8df b428 	ldr.w	fp, [pc, #1064]	; 80059bc <.text_41>
 8005596:	4688      	mov	r8, r1
 8005598:	f011 fa81 	bl	8016a9e <USBPD_PHY_GetMinGOODCRCTimerValue>
 800559c:	4601      	mov	r1, r0
 800559e:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80055a2:	b2c0      	uxtb	r0, r0
 80055a4:	f012 fdc6 	bl	8018134 <USBPD_TIM_Start>
 80055a8:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80055ac:	7a30      	ldrb	r0, [r6, #8]
 80055ae:	7a71      	ldrb	r1, [r6, #9]
 80055b0:	eb00 2701 	add.w	r7, r0, r1, lsl #8
 80055b4:	f24f 001f 	movw	r0, #61471	; 0xf01f
 80055b8:	4038      	ands	r0, r7
 80055ba:	2801      	cmp	r0, #1
 80055bc:	d113      	bne.n	80055e6 <PRL_Received+0x66>
 80055be:	0069      	lsls	r1, r5, #1
 80055c0:	1c49      	adds	r1, r1, #1
 80055c2:	b2c8      	uxtb	r0, r1
 80055c4:	f012 fe28 	bl	8018218 <USBPD_TIM_IsExpired>
 80055c8:	2801      	cmp	r0, #1
 80055ca:	d040      	beq.n	800564e <PRL_Received+0xce>
 80055cc:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 80055d0:	200b      	movs	r0, #11
 80055d2:	7148      	strb	r0, [r1, #5]
 80055d4:	8367      	strh	r7, [r4, #26]
 80055d6:	f000 f96c 	bl	80058b2 <.text_33>
 80055da:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80055de:	4642      	mov	r2, r8
 80055e0:	4651      	mov	r1, sl
 80055e2:	2001      	movs	r0, #1
 80055e4:	e14d      	b.n	8005882 <PRL_Received+0x302>
 80055e6:	f20f 405c 	addw	r0, pc, #1116	; 0x45c
 80055ea:	8805      	ldrh	r5, [r0, #0]
 80055ec:	f24f 001f 	movw	r0, #61471	; 0xf01f
 80055f0:	2101      	movs	r1, #1
 80055f2:	4038      	ands	r0, r7
 80055f4:	72a1      	strb	r1, [r4, #10]
 80055f6:	eb04 0208 	add.w	r2, r4, r8
 80055fa:	280d      	cmp	r0, #13
 80055fc:	9202      	str	r2, [sp, #8]
 80055fe:	d103      	bne.n	8005608 <PRL_Received+0x88>
 8005600:	2100      	movs	r1, #0
 8005602:	72d1      	strb	r1, [r2, #11]
 8005604:	f000 f95b 	bl	80058be <.text_34>
 8005608:	ea5f 0008 	movs.w	r0, r8
 800560c:	d10c      	bne.n	8005628 <PRL_Received+0xa8>
 800560e:	8a60      	ldrh	r0, [r4, #18]
 8005610:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8005614:	f3c0 2200 	ubfx	r2, r0, #8, #1
 8005618:	f64f 60df 	movw	r0, #65247	; 0xfedf
 800561c:	4005      	ands	r5, r0
 800561e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 8005622:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8005626:	e002      	b.n	800562e <PRL_Received+0xae>
 8005628:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800562c:	4015      	ands	r5, r2
 800562e:	f24f 113f 	movw	r1, #61759	; 0xf13f
 8005632:	400d      	ands	r5, r1
 8005634:	f407 6060 	and.w	r0, r7, #3584	; 0xe00
 8005638:	4305      	orrs	r5, r0
 800563a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800563e:	7625      	strb	r5, [r4, #24]
 8005640:	4641      	mov	r1, r8
 8005642:	0a2d      	lsrs	r5, r5, #8
 8005644:	7665      	strb	r5, [r4, #25]
 8005646:	4650      	mov	r0, sl
 8005648:	f7fb fb2b 	bl	8000ca2 <PE_PRL_PostReceiveEvent>
 800564c:	2800      	cmp	r0, #0
 800564e:	f000 811b 	beq.w	8005888 <PRL_Received+0x308>
 8005652:	2001      	movs	r0, #1
 8005654:	7420      	strb	r0, [r4, #16]
 8005656:	ea4f 004a 	mov.w	r0, sl, lsl #1
 800565a:	b2c0      	uxtb	r0, r0
 800565c:	f012 fddc 	bl	8018218 <USBPD_TIM_IsExpired>
 8005660:	2800      	cmp	r0, #0
 8005662:	d0f8      	beq.n	8005656 <PRL_Received+0xd6>
 8005664:	2302      	movs	r3, #2
 8005666:	f104 0218 	add.w	r2, r4, #24
 800566a:	4641      	mov	r1, r8
 800566c:	4650      	mov	r0, sl
 800566e:	f011 fa40 	bl	8016af2 <USBPD_PHY_SendMessage>
 8005672:	9003      	str	r0, [sp, #12]
 8005674:	f884 8009 	strb.w	r8, [r4, #9]
 8005678:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800567c:	4650      	mov	r0, sl
 800567e:	f7fb fb46 	bl	8000d0e <PE_PRL_PostReceiveEventCopy>
 8005682:	7ab0      	ldrb	r0, [r6, #10]
 8005684:	7af1      	ldrb	r1, [r6, #11]
 8005686:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 800568a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800568e:	0438      	lsls	r0, r7, #16
 8005690:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005694:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8005698:	0bc9      	lsrs	r1, r1, #15
 800569a:	0fc0      	lsrs	r0, r0, #31
 800569c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80056a0:	f8ad 1006 	strh.w	r1, [sp, #6]
 80056a4:	d004      	beq.n	80056b0 <PRL_Received+0x130>
 80056a6:	0008      	movs	r0, r1
 80056a8:	d102      	bne.n	80056b0 <PRL_Received+0x130>
 80056aa:	1d29      	adds	r1, r5, #4
 80056ac:	9100      	str	r1, [sp, #0]
 80056ae:	e019      	b.n	80056e4 <PRL_Received+0x164>
 80056b0:	7821      	ldrb	r1, [r4, #0]
 80056b2:	b9a9      	cbnz	r1, 80056e0 <PRL_Received+0x160>
 80056b4:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80056b8:	b190      	cbz	r0, 80056e0 <PRL_Received+0x160>
 80056ba:	f007 001f 	and.w	r0, r7, #31
 80056be:	2803      	cmp	r0, #3
 80056c0:	d10e      	bne.n	80056e0 <PRL_Received+0x160>
 80056c2:	7ab0      	ldrb	r0, [r6, #10]
 80056c4:	7af1      	ldrb	r1, [r6, #11]
 80056c6:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80056ca:	7b30      	ldrb	r0, [r6, #12]
 80056cc:	7b71      	ldrb	r1, [r6, #13]
 80056ce:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 80056d2:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 80056d6:	0f12      	lsrs	r2, r2, #28
 80056d8:	2a08      	cmp	r2, #8
 80056da:	bf04      	itt	eq
 80056dc:	2001      	moveq	r0, #1
 80056de:	7020      	strbeq	r0, [r4, #0]
 80056e0:	f000 f8e7 	bl	80058b2 <.text_33>
 80056e4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80056e8:	f8db c000 	ldr.w	ip, [fp]
 80056ec:	4642      	mov	r2, r8
 80056ee:	4651      	mov	r1, sl
 80056f0:	2001      	movs	r0, #1
 80056f2:	47e0      	blx	ip
 80056f4:	9803      	ldr	r0, [sp, #12]
 80056f6:	b948      	cbnz	r0, 800570c <PRL_Received+0x18c>
 80056f8:	2102      	movs	r1, #2
 80056fa:	9100      	str	r1, [sp, #0]
 80056fc:	f104 0318 	add.w	r3, r4, #24
 8005700:	f8db c000 	ldr.w	ip, [fp]
 8005704:	4642      	mov	r2, r8
 8005706:	4651      	mov	r1, sl
 8005708:	2002      	movs	r0, #2
 800570a:	47e0      	blx	ip
 800570c:	9802      	ldr	r0, [sp, #8]
 800570e:	7981      	ldrb	r1, [r0, #6]
 8005710:	f3c7 2042 	ubfx	r0, r7, #9, #3
 8005714:	4281      	cmp	r1, r0
 8005716:	bf04      	itt	eq
 8005718:	9803      	ldreq	r0, [sp, #12]
 800571a:	2800      	cmpeq	r0, #0
 800571c:	f000 80a2 	beq.w	8005864 <PRL_Received+0x2e4>
 8005720:	0439      	lsls	r1, r7, #16
 8005722:	9a02      	ldr	r2, [sp, #8]
 8005724:	0e49      	lsrs	r1, r1, #25
 8005726:	f001 0107 	and.w	r1, r1, #7
 800572a:	7191      	strb	r1, [r2, #6]
 800572c:	0438      	lsls	r0, r7, #16
 800572e:	8427      	strh	r7, [r4, #32]
 8005730:	0fc0      	lsrs	r0, r0, #31
 8005732:	bf1c      	itt	ne
 8005734:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 8005738:	2800      	cmpne	r0, #0
 800573a:	d06e      	beq.n	800581a <PRL_Received+0x29a>
 800573c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005740:	83e0      	strh	r0, [r4, #30]
 8005742:	201a      	movs	r0, #26
 8005744:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005748:	f411 4ff8 	tst.w	r1, #31744	; 0x7c00
 800574c:	d13c      	bne.n	80057c8 <PRL_Received+0x248>
 800574e:	f3c7 3102 	ubfx	r1, r7, #12, #3
 8005752:	2907      	cmp	r1, #7
 8005754:	d301      	bcc.n	800575a <PRL_Received+0x1da>
 8005756:	2d1a      	cmp	r5, #26
 8005758:	d820      	bhi.n	800579c <PRL_Received+0x21c>
 800575a:	2100      	movs	r1, #0
 800575c:	3434      	adds	r4, #52	; 0x34
 800575e:	e00c      	b.n	800577a <PRL_Received+0x1fa>
 8005760:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005764:	6832      	ldr	r2, [r6, #0]
 8005766:	f814 e001 	ldrb.w	lr, [r4, r1]
 800576a:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 800576e:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005772:	1c49      	adds	r1, r1, #1
 8005774:	f802 e003 	strb.w	lr, [r2, r3]
 8005778:	b289      	uxth	r1, r1
 800577a:	f000 f894 	bl	80058a6 <.text_32>
 800577e:	d3ef      	bcc.n	8005760 <PRL_Received+0x1e0>
 8005780:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005784:	0080      	lsls	r0, r0, #2
 8005786:	1e80      	subs	r0, r0, #2
 8005788:	42a8      	cmp	r0, r5
 800578a:	d204      	bcs.n	8005796 <PRL_Received+0x216>
 800578c:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005790:	0080      	lsls	r0, r0, #2
 8005792:	1e80      	subs	r0, r0, #2
 8005794:	e00f      	b.n	80057b6 <PRL_Received+0x236>
 8005796:	6870      	ldr	r0, [r6, #4]
 8005798:	8005      	strh	r5, [r0, #0]
 800579a:	e00e      	b.n	80057ba <PRL_Received+0x23a>
 800579c:	2101      	movs	r1, #1
 800579e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 80057a2:	2000      	movs	r0, #0
 80057a4:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80057a8:	6833      	ldr	r3, [r6, #0]
 80057aa:	5c0a      	ldrb	r2, [r1, r0]
 80057ac:	541a      	strb	r2, [r3, r0]
 80057ae:	1c40      	adds	r0, r0, #1
 80057b0:	281a      	cmp	r0, #26
 80057b2:	d3f9      	bcc.n	80057a8 <PRL_Received+0x228>
 80057b4:	201a      	movs	r0, #26
 80057b6:	6871      	ldr	r1, [r6, #4]
 80057b8:	8008      	strh	r0, [r1, #0]
 80057ba:	4641      	mov	r1, r8
 80057bc:	4650      	mov	r0, sl
 80057be:	b005      	add	sp, #20
 80057c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	f7fb ba6d 	b.w	8000ca2 <PE_PRL_PostReceiveEvent>
 80057c8:	6871      	ldr	r1, [r6, #4]
 80057ca:	8809      	ldrh	r1, [r1, #0]
 80057cc:	f240 1205 	movw	r2, #261	; 0x105
 80057d0:	f101 031a 	add.w	r3, r1, #26
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bf3f      	itttt	cc
 80057d8:	f3c7 3302 	ubfxcc	r3, r7, #12, #3
 80057dc:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 80057e0:	1e89      	subcc	r1, r1, #2
 80057e2:	42a9      	cmpcc	r1, r5
 80057e4:	d21a      	bcs.n	800581c <PRL_Received+0x29c>
 80057e6:	2101      	movs	r1, #1
 80057e8:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 80057ec:	3434      	adds	r4, #52	; 0x34
 80057ee:	2100      	movs	r1, #0
 80057f0:	e007      	b.n	8005802 <PRL_Received+0x282>
 80057f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80057f6:	6832      	ldr	r2, [r6, #0]
 80057f8:	5c65      	ldrb	r5, [r4, r1]
 80057fa:	f000 f848 	bl	800588e <.text_30>
 80057fe:	54d5      	strb	r5, [r2, r3]
 8005800:	b289      	uxth	r1, r1
 8005802:	f000 f850 	bl	80058a6 <.text_32>
 8005806:	d3f4      	bcc.n	80057f2 <PRL_Received+0x272>
 8005808:	6871      	ldr	r1, [r6, #4]
 800580a:	880a      	ldrh	r2, [r1, #0]
 800580c:	043f      	lsls	r7, r7, #16
 800580e:	0ebf      	lsrs	r7, r7, #26
 8005810:	f007 071c 	and.w	r7, r7, #28
 8005814:	1eb8      	subs	r0, r7, #2
 8005816:	1882      	adds	r2, r0, r2
 8005818:	800a      	strh	r2, [r1, #0]
 800581a:	e035      	b.n	8005888 <PRL_Received+0x308>
 800581c:	6871      	ldr	r1, [r6, #4]
 800581e:	880b      	ldrh	r3, [r1, #0]
 8005820:	f000 f83b 	bl	800589a <.text_31>
 8005824:	4291      	cmp	r1, r2
 8005826:	d219      	bcs.n	800585c <PRL_Received+0x2dc>
 8005828:	f000 f837 	bl	800589a <.text_31>
 800582c:	42a9      	cmp	r1, r5
 800582e:	d315      	bcc.n	800585c <PRL_Received+0x2dc>
 8005830:	2201      	movs	r2, #1
 8005832:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8005836:	2100      	movs	r1, #0
 8005838:	3434      	adds	r4, #52	; 0x34
 800583a:	e009      	b.n	8005850 <PRL_Received+0x2d0>
 800583c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005840:	6832      	ldr	r2, [r6, #0]
 8005842:	f814 a001 	ldrb.w	sl, [r4, r1]
 8005846:	f000 f822 	bl	800588e <.text_30>
 800584a:	f802 a003 	strb.w	sl, [r2, r3]
 800584e:	b289      	uxth	r1, r1
 8005850:	f000 f829 	bl	80058a6 <.text_32>
 8005854:	d3f2      	bcc.n	800583c <PRL_Received+0x2bc>
 8005856:	6870      	ldr	r0, [r6, #4]
 8005858:	8005      	strh	r5, [r0, #0]
 800585a:	e015      	b.n	8005888 <PRL_Received+0x308>
 800585c:	2100      	movs	r1, #0
 800585e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 8005862:	e011      	b.n	8005888 <PRL_Received+0x308>
 8005864:	20ff      	movs	r0, #255	; 0xff
 8005866:	7260      	strb	r0, [r4, #9]
 8005868:	2100      	movs	r1, #0
 800586a:	7421      	strb	r1, [r4, #16]
 800586c:	4650      	mov	r0, sl
 800586e:	f7fb fa38 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005872:	2000      	movs	r0, #0
 8005874:	72a0      	strb	r0, [r4, #10]
 8005876:	2117      	movs	r1, #23
 8005878:	9100      	str	r1, [sp, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	a365      	add	r3, pc, #404	; (adr r3, 8005a14 <.text_43>)
 800587e:	4651      	mov	r1, sl
 8005880:	2006      	movs	r0, #6
 8005882:	f8db 4000 	ldr.w	r4, [fp]
 8005886:	47a0      	blx	r4
 8005888:	b005      	add	sp, #20
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800588e <.text_30>:
 800588e:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 8005892:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005896:	1c49      	adds	r1, r1, #1
 8005898:	4770      	bx	lr

0800589a <.text_31>:
 800589a:	f3c7 3102 	ubfx	r1, r7, #12, #3
 800589e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80058a2:	1e89      	subs	r1, r1, #2
 80058a4:	4770      	bx	lr

080058a6 <.text_32>:
 80058a6:	f3c7 3202 	ubfx	r2, r7, #12, #3
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	1e92      	subs	r2, r2, #2
 80058ae:	4291      	cmp	r1, r2
 80058b0:	4770      	bx	lr

080058b2 <.text_33>:
 80058b2:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80058b6:	0080      	lsls	r0, r0, #2
 80058b8:	1c80      	adds	r0, r0, #2
 80058ba:	9000      	str	r0, [sp, #0]
 80058bc:	4770      	bx	lr

080058be <.text_34>:
 80058be:	220f      	movs	r2, #15
 80058c0:	2103      	movs	r1, #3
 80058c2:	1da0      	adds	r0, r4, #6
 80058c4:	f000 b8bf 	b.w	8005a46 <__aeabi_memset>

080058c8 <PRL_ResetIndicate>:
 80058c8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80058cc:	460d      	mov	r5, r1
 80058ce:	2d05      	cmp	r5, #5
 80058d0:	4680      	mov	r8, r0
 80058d2:	d116      	bne.n	8005902 <PRL_ResetIndicate+0x3a>
 80058d4:	4f38      	ldr	r7, [pc, #224]	; (80059b8 <.text_40>)
 80058d6:	4646      	mov	r6, r8
 80058d8:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 80058dc:	2000      	movs	r0, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	b2c2      	uxtb	r2, r0
 80058e2:	1c40      	adds	r0, r0, #1
 80058e4:	18a2      	adds	r2, r4, r2
 80058e6:	b2c3      	uxtb	r3, r0
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	72d1      	strb	r1, [r2, #11]
 80058ec:	d3f8      	bcc.n	80058e0 <PRL_ResetIndicate+0x18>
 80058ee:	f7ff ffe6 	bl	80058be <.text_34>
 80058f2:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80058f6:	2200      	movs	r2, #0
 80058f8:	7142      	strb	r2, [r0, #5]
 80058fa:	7022      	strb	r2, [r4, #0]
 80058fc:	4640      	mov	r0, r8
 80058fe:	f7ff fe3d 	bl	800557c <PRL_DisableRX>
 8005902:	2000      	movs	r0, #0
 8005904:	4e2d      	ldr	r6, [pc, #180]	; (80059bc <.text_41>)
 8005906:	6837      	ldr	r7, [r6, #0]
 8005908:	9000      	str	r0, [sp, #0]
 800590a:	2300      	movs	r3, #0
 800590c:	462a      	mov	r2, r5
 800590e:	4641      	mov	r1, r8
 8005910:	2001      	movs	r0, #1
 8005912:	47b8      	blx	r7
 8005914:	4629      	mov	r1, r5
 8005916:	4640      	mov	r0, r8
 8005918:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800591c:	f7fb b8c3 	b.w	8000aa6 <PE_PRL_ResetReceived>

08005920 <PRL_ResetCompleted>:
 8005920:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <.text_40>)
 8005922:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005926:	2101      	movs	r1, #1
 8005928:	70c1      	strb	r1, [r0, #3]
 800592a:	4770      	bx	lr

0800592c <PRL_BistCompleted>:
 800592c:	f7fb b8e0 	b.w	8000af0 <PE_PRL_BistCompleted>

08005930 <PRL_TxCompleted>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <.text_40>)
 8005934:	4604      	mov	r4, r0
 8005936:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800593a:	7c2a      	ldrb	r2, [r5, #16]
 800593c:	2a01      	cmp	r2, #1
 800593e:	d002      	beq.n	8005946 <PRL_TxCompleted+0x16>
 8005940:	2a02      	cmp	r2, #2
 8005942:	d009      	beq.n	8005958 <PRL_TxCompleted+0x28>
 8005944:	e010      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005946:	b911      	cbnz	r1, 800594e <PRL_TxCompleted+0x1e>
 8005948:	f7fb f9fe 	bl	8000d48 <PE_PRL_PostReceiveEventComplete>
 800594c:	e001      	b.n	8005952 <PRL_TxCompleted+0x22>
 800594e:	f7fb f9c8 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005952:	2000      	movs	r0, #0
 8005954:	72a8      	strb	r0, [r5, #10]
 8005956:	e007      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005958:	f011 f894 	bl	8016a84 <USBPD_PHY_GetRetryTimerValue>
 800595c:	0064      	lsls	r4, r4, #1
 800595e:	4601      	mov	r1, r0
 8005960:	1c64      	adds	r4, r4, #1
 8005962:	b2e0      	uxtb	r0, r4
 8005964:	f012 fbe6 	bl	8018134 <USBPD_TIM_Start>
 8005968:	2000      	movs	r0, #0
 800596a:	7428      	strb	r0, [r5, #16]
 800596c:	bd31      	pop	{r0, r4, r5, pc}

0800596e <USBPD_PRL_PrepareExtendedTxChunkSending>:
 800596e:	b530      	push	{r4, r5, lr}
 8005970:	4c11      	ldr	r4, [pc, #68]	; (80059b8 <.text_40>)
 8005972:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8005976:	8ba5      	ldrh	r5, [r4, #28]
 8005978:	f248 30ff 	movw	r0, #33791	; 0x83ff
 800597c:	4005      	ands	r5, r0
 800597e:	8a60      	ldrh	r0, [r4, #18]
 8005980:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 8005984:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005988:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
 800598c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005990:	8260      	strh	r0, [r4, #18]
 8005992:	432a      	orrs	r2, r5
 8005994:	8c21      	ldrh	r1, [r4, #32]
 8005996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800599a:	f361 0004 	bfi	r0, r1, #0, #5
 800599e:	83a2      	strh	r2, [r4, #28]
 80059a0:	8260      	strh	r0, [r4, #18]
 80059a2:	7018      	strb	r0, [r3, #0]
 80059a4:	8a60      	ldrh	r0, [r4, #18]
 80059a6:	0a00      	lsrs	r0, r0, #8
 80059a8:	7058      	strb	r0, [r3, #1]
 80059aa:	8ba0      	ldrh	r0, [r4, #28]
 80059ac:	7098      	strb	r0, [r3, #2]
 80059ae:	8ba1      	ldrh	r1, [r4, #28]
 80059b0:	0a09      	lsrs	r1, r1, #8
 80059b2:	70d9      	strb	r1, [r3, #3]
 80059b4:	bd30      	pop	{r4, r5, pc}
	...

080059b8 <.text_40>:
 80059b8:	20000450 	.word	0x20000450

080059bc <.text_41>:
 80059bc:	20000000 	.word	0x20000000

080059c0 <USBPD_PRL_PrepareChunkRequest>:
 80059c0:	b530      	push	{r4, r5, lr}
 80059c2:	f7ff fb2d 	bl	8005020 <.text_12>
 80059c6:	8b9c      	ldrh	r4, [r3, #28]
 80059c8:	8bdd      	ldrh	r5, [r3, #30]
 80059ca:	f444 4404 	orr.w	r4, r4, #33792	; 0x8400
 80059ce:	0aed      	lsrs	r5, r5, #11
 80059d0:	839c      	strh	r4, [r3, #28]
 80059d2:	1c6d      	adds	r5, r5, #1
 80059d4:	02ed      	lsls	r5, r5, #11
 80059d6:	f404 4406 	and.w	r4, r4, #34304	; 0x8600
 80059da:	f405 45f0 	and.w	r5, r5, #30720	; 0x7800
 80059de:	432c      	orrs	r4, r5
 80059e0:	839c      	strh	r4, [r3, #28]
 80059e2:	8a5c      	ldrh	r4, [r3, #18]
 80059e4:	8c1d      	ldrh	r5, [r3, #32]
 80059e6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80059ea:	825c      	strh	r4, [r3, #18]
 80059ec:	f365 0404 	bfi	r4, r5, #0, #5
 80059f0:	825c      	strh	r4, [r3, #18]
 80059f2:	2400      	movs	r4, #0
 80059f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80059f8:	7144      	strb	r4, [r0, #5]
 80059fa:	8a5a      	ldrh	r2, [r3, #18]
 80059fc:	700a      	strb	r2, [r1, #0]
 80059fe:	8a58      	ldrh	r0, [r3, #18]
 8005a00:	0a00      	lsrs	r0, r0, #8
 8005a02:	7048      	strb	r0, [r1, #1]
 8005a04:	8b98      	ldrh	r0, [r3, #28]
 8005a06:	7088      	strb	r0, [r1, #2]
 8005a08:	8b9a      	ldrh	r2, [r3, #28]
 8005a0a:	710c      	strb	r4, [r1, #4]
 8005a0c:	0a12      	lsrs	r2, r2, #8
 8005a0e:	714c      	strb	r4, [r1, #5]
 8005a10:	70ca      	strb	r2, [r1, #3]
 8005a12:	bd30      	pop	{r4, r5, pc}

08005a14 <.text_43>:
 8005a14:	5f4c5250 	.word	0x5f4c5250
 8005a18:	4e455645 	.word	0x4e455645
 8005a1c:	58525f54 	.word	0x58525f54
 8005a20:	5349445f 	.word	0x5349445f
 8005a24:	44524143 	.word	0x44524143
 8005a28:	00004445 	.word	0x00004445

08005a2c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8005a2c:	08005581 080058c9 08005921 0800592d     .U...X..!Y..-Y..
 8005a3c:	08005931 0800504d                       1Y..MP..

08005a44 <.text_45>:
 8005a44:	0001      	.short	0x0001

08005a46 <__aeabi_memset>:
 8005a46:	b470      	push	{r4, r5, r6}
 8005a48:	0784      	lsls	r4, r0, #30
 8005a4a:	d046      	beq.n	8005ada <__aeabi_memset+0x94>
 8005a4c:	1e4c      	subs	r4, r1, #1
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d041      	beq.n	8005ad6 <__aeabi_memset+0x90>
 8005a52:	b2d5      	uxtb	r5, r2
 8005a54:	4603      	mov	r3, r0
 8005a56:	e002      	b.n	8005a5e <__aeabi_memset+0x18>
 8005a58:	1e61      	subs	r1, r4, #1
 8005a5a:	b3e4      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	f803 5b01 	strb.w	r5, [r3], #1
 8005a62:	0799      	lsls	r1, r3, #30
 8005a64:	d1f8      	bne.n	8005a58 <__aeabi_memset+0x12>
 8005a66:	2c03      	cmp	r4, #3
 8005a68:	d92e      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005a6a:	b2d5      	uxtb	r5, r2
 8005a6c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005a70:	2c0f      	cmp	r4, #15
 8005a72:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005a76:	d919      	bls.n	8005aac <__aeabi_memset+0x66>
 8005a78:	4626      	mov	r6, r4
 8005a7a:	f103 0110 	add.w	r1, r3, #16
 8005a7e:	3e10      	subs	r6, #16
 8005a80:	2e0f      	cmp	r6, #15
 8005a82:	f841 5c10 	str.w	r5, [r1, #-16]
 8005a86:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005a8a:	f841 5c08 	str.w	r5, [r1, #-8]
 8005a8e:	f841 5c04 	str.w	r5, [r1, #-4]
 8005a92:	f101 0110 	add.w	r1, r1, #16
 8005a96:	d8f2      	bhi.n	8005a7e <__aeabi_memset+0x38>
 8005a98:	f1a4 0110 	sub.w	r1, r4, #16
 8005a9c:	f021 010f 	bic.w	r1, r1, #15
 8005aa0:	f004 040f 	and.w	r4, r4, #15
 8005aa4:	3110      	adds	r1, #16
 8005aa6:	2c03      	cmp	r4, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	d90d      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005aac:	461e      	mov	r6, r3
 8005aae:	4621      	mov	r1, r4
 8005ab0:	3904      	subs	r1, #4
 8005ab2:	2903      	cmp	r1, #3
 8005ab4:	f846 5b04 	str.w	r5, [r6], #4
 8005ab8:	d8fa      	bhi.n	8005ab0 <__aeabi_memset+0x6a>
 8005aba:	1f21      	subs	r1, r4, #4
 8005abc:	f021 0103 	bic.w	r1, r1, #3
 8005ac0:	3104      	adds	r1, #4
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f004 0403 	and.w	r4, r4, #3
 8005ac8:	b12c      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	441c      	add	r4, r3
 8005ace:	f803 2b01 	strb.w	r2, [r3], #1
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	d1fb      	bne.n	8005ace <__aeabi_memset+0x88>
 8005ad6:	bc70      	pop	{r4, r5, r6}
 8005ad8:	4770      	bx	lr
 8005ada:	460c      	mov	r4, r1
 8005adc:	4603      	mov	r3, r0
 8005ade:	e7c2      	b.n	8005a66 <__aeabi_memset+0x20>

08005ae0 <strlen>:
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	d1fb      	bne.n	8005ae2 <strlen+0x2>
 8005aea:	1a18      	subs	r0, r3, r0
 8005aec:	3801      	subs	r0, #1
 8005aee:	4770      	bx	lr

08005af0 <memchr>:
 8005af0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005af4:	2a10      	cmp	r2, #16
 8005af6:	db2b      	blt.n	8005b50 <memchr+0x60>
 8005af8:	f010 0f07 	tst.w	r0, #7
 8005afc:	d008      	beq.n	8005b10 <memchr+0x20>
 8005afe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b02:	3a01      	subs	r2, #1
 8005b04:	428b      	cmp	r3, r1
 8005b06:	d02d      	beq.n	8005b64 <memchr+0x74>
 8005b08:	f010 0f07 	tst.w	r0, #7
 8005b0c:	b342      	cbz	r2, 8005b60 <memchr+0x70>
 8005b0e:	d1f6      	bne.n	8005afe <memchr+0xe>
 8005b10:	b4f0      	push	{r4, r5, r6, r7}
 8005b12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005b16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005b1a:	f022 0407 	bic.w	r4, r2, #7
 8005b1e:	f07f 0700 	mvns.w	r7, #0
 8005b22:	2300      	movs	r3, #0
 8005b24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005b28:	3c08      	subs	r4, #8
 8005b2a:	ea85 0501 	eor.w	r5, r5, r1
 8005b2e:	ea86 0601 	eor.w	r6, r6, r1
 8005b32:	fa85 f547 	uadd8	r5, r5, r7
 8005b36:	faa3 f587 	sel	r5, r3, r7
 8005b3a:	fa86 f647 	uadd8	r6, r6, r7
 8005b3e:	faa5 f687 	sel	r6, r5, r7
 8005b42:	b98e      	cbnz	r6, 8005b68 <memchr+0x78>
 8005b44:	d1ee      	bne.n	8005b24 <memchr+0x34>
 8005b46:	bcf0      	pop	{r4, r5, r6, r7}
 8005b48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005b4c:	f002 0207 	and.w	r2, r2, #7
 8005b50:	b132      	cbz	r2, 8005b60 <memchr+0x70>
 8005b52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b56:	3a01      	subs	r2, #1
 8005b58:	ea83 0301 	eor.w	r3, r3, r1
 8005b5c:	b113      	cbz	r3, 8005b64 <memchr+0x74>
 8005b5e:	d1f8      	bne.n	8005b52 <memchr+0x62>
 8005b60:	2000      	movs	r0, #0
 8005b62:	4770      	bx	lr
 8005b64:	3801      	subs	r0, #1
 8005b66:	4770      	bx	lr
 8005b68:	2d00      	cmp	r5, #0
 8005b6a:	bf06      	itte	eq
 8005b6c:	4635      	moveq	r5, r6
 8005b6e:	3803      	subeq	r0, #3
 8005b70:	3807      	subne	r0, #7
 8005b72:	f015 0f01 	tst.w	r5, #1
 8005b76:	d107      	bne.n	8005b88 <memchr+0x98>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005b7e:	bf02      	ittt	eq
 8005b80:	3001      	addeq	r0, #1
 8005b82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005b86:	3001      	addeq	r0, #1
 8005b88:	bcf0      	pop	{r4, r5, r6, r7}
 8005b8a:	3801      	subs	r0, #1
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop

08005b90 <__aeabi_drsub>:
 8005b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005b94:	e002      	b.n	8005b9c <__adddf3>
 8005b96:	bf00      	nop

08005b98 <__aeabi_dsub>:
 8005b98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005b9c <__adddf3>:
 8005b9c:	b530      	push	{r4, r5, lr}
 8005b9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005ba2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005ba6:	ea94 0f05 	teq	r4, r5
 8005baa:	bf08      	it	eq
 8005bac:	ea90 0f02 	teqeq	r0, r2
 8005bb0:	bf1f      	itttt	ne
 8005bb2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005bb6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005bba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005bbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005bc2:	f000 80e2 	beq.w	8005d8a <__adddf3+0x1ee>
 8005bc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005bca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005bce:	bfb8      	it	lt
 8005bd0:	426d      	neglt	r5, r5
 8005bd2:	dd0c      	ble.n	8005bee <__adddf3+0x52>
 8005bd4:	442c      	add	r4, r5
 8005bd6:	ea80 0202 	eor.w	r2, r0, r2
 8005bda:	ea81 0303 	eor.w	r3, r1, r3
 8005bde:	ea82 0000 	eor.w	r0, r2, r0
 8005be2:	ea83 0101 	eor.w	r1, r3, r1
 8005be6:	ea80 0202 	eor.w	r2, r0, r2
 8005bea:	ea81 0303 	eor.w	r3, r1, r3
 8005bee:	2d36      	cmp	r5, #54	; 0x36
 8005bf0:	bf88      	it	hi
 8005bf2:	bd30      	pophi	{r4, r5, pc}
 8005bf4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005bf8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005bfc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005c00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005c04:	d002      	beq.n	8005c0c <__adddf3+0x70>
 8005c06:	4240      	negs	r0, r0
 8005c08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005c10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005c14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005c18:	d002      	beq.n	8005c20 <__adddf3+0x84>
 8005c1a:	4252      	negs	r2, r2
 8005c1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005c20:	ea94 0f05 	teq	r4, r5
 8005c24:	f000 80a7 	beq.w	8005d76 <__adddf3+0x1da>
 8005c28:	f1a4 0401 	sub.w	r4, r4, #1
 8005c2c:	f1d5 0e20 	rsbs	lr, r5, #32
 8005c30:	db0d      	blt.n	8005c4e <__adddf3+0xb2>
 8005c32:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005c36:	fa22 f205 	lsr.w	r2, r2, r5
 8005c3a:	1880      	adds	r0, r0, r2
 8005c3c:	f141 0100 	adc.w	r1, r1, #0
 8005c40:	fa03 f20e 	lsl.w	r2, r3, lr
 8005c44:	1880      	adds	r0, r0, r2
 8005c46:	fa43 f305 	asr.w	r3, r3, r5
 8005c4a:	4159      	adcs	r1, r3
 8005c4c:	e00e      	b.n	8005c6c <__adddf3+0xd0>
 8005c4e:	f1a5 0520 	sub.w	r5, r5, #32
 8005c52:	f10e 0e20 	add.w	lr, lr, #32
 8005c56:	2a01      	cmp	r2, #1
 8005c58:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005c5c:	bf28      	it	cs
 8005c5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005c62:	fa43 f305 	asr.w	r3, r3, r5
 8005c66:	18c0      	adds	r0, r0, r3
 8005c68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005c6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005c70:	d507      	bpl.n	8005c82 <__adddf3+0xe6>
 8005c72:	f04f 0e00 	mov.w	lr, #0
 8005c76:	f1dc 0c00 	rsbs	ip, ip, #0
 8005c7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005c7e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005c82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005c86:	d31b      	bcc.n	8005cc0 <__adddf3+0x124>
 8005c88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005c8c:	d30c      	bcc.n	8005ca8 <__adddf3+0x10c>
 8005c8e:	0849      	lsrs	r1, r1, #1
 8005c90:	ea5f 0030 	movs.w	r0, r0, rrx
 8005c94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005c98:	f104 0401 	add.w	r4, r4, #1
 8005c9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005ca0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005ca4:	f080 809a 	bcs.w	8005ddc <__adddf3+0x240>
 8005ca8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005cac:	bf08      	it	eq
 8005cae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005cb2:	f150 0000 	adcs.w	r0, r0, #0
 8005cb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005cba:	ea41 0105 	orr.w	r1, r1, r5
 8005cbe:	bd30      	pop	{r4, r5, pc}
 8005cc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005cc4:	4140      	adcs	r0, r0
 8005cc6:	eb41 0101 	adc.w	r1, r1, r1
 8005cca:	3c01      	subs	r4, #1
 8005ccc:	bf28      	it	cs
 8005cce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005cd2:	d2e9      	bcs.n	8005ca8 <__adddf3+0x10c>
 8005cd4:	f091 0f00 	teq	r1, #0
 8005cd8:	bf04      	itt	eq
 8005cda:	4601      	moveq	r1, r0
 8005cdc:	2000      	moveq	r0, #0
 8005cde:	fab1 f381 	clz	r3, r1
 8005ce2:	bf08      	it	eq
 8005ce4:	3320      	addeq	r3, #32
 8005ce6:	f1a3 030b 	sub.w	r3, r3, #11
 8005cea:	f1b3 0220 	subs.w	r2, r3, #32
 8005cee:	da0c      	bge.n	8005d0a <__adddf3+0x16e>
 8005cf0:	320c      	adds	r2, #12
 8005cf2:	dd08      	ble.n	8005d06 <__adddf3+0x16a>
 8005cf4:	f102 0c14 	add.w	ip, r2, #20
 8005cf8:	f1c2 020c 	rsb	r2, r2, #12
 8005cfc:	fa01 f00c 	lsl.w	r0, r1, ip
 8005d00:	fa21 f102 	lsr.w	r1, r1, r2
 8005d04:	e00c      	b.n	8005d20 <__adddf3+0x184>
 8005d06:	f102 0214 	add.w	r2, r2, #20
 8005d0a:	bfd8      	it	le
 8005d0c:	f1c2 0c20 	rsble	ip, r2, #32
 8005d10:	fa01 f102 	lsl.w	r1, r1, r2
 8005d14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005d18:	bfdc      	itt	le
 8005d1a:	ea41 010c 	orrle.w	r1, r1, ip
 8005d1e:	4090      	lslle	r0, r2
 8005d20:	1ae4      	subs	r4, r4, r3
 8005d22:	bfa2      	ittt	ge
 8005d24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005d28:	4329      	orrge	r1, r5
 8005d2a:	bd30      	popge	{r4, r5, pc}
 8005d2c:	ea6f 0404 	mvn.w	r4, r4
 8005d30:	3c1f      	subs	r4, #31
 8005d32:	da1c      	bge.n	8005d6e <__adddf3+0x1d2>
 8005d34:	340c      	adds	r4, #12
 8005d36:	dc0e      	bgt.n	8005d56 <__adddf3+0x1ba>
 8005d38:	f104 0414 	add.w	r4, r4, #20
 8005d3c:	f1c4 0220 	rsb	r2, r4, #32
 8005d40:	fa20 f004 	lsr.w	r0, r0, r4
 8005d44:	fa01 f302 	lsl.w	r3, r1, r2
 8005d48:	ea40 0003 	orr.w	r0, r0, r3
 8005d4c:	fa21 f304 	lsr.w	r3, r1, r4
 8005d50:	ea45 0103 	orr.w	r1, r5, r3
 8005d54:	bd30      	pop	{r4, r5, pc}
 8005d56:	f1c4 040c 	rsb	r4, r4, #12
 8005d5a:	f1c4 0220 	rsb	r2, r4, #32
 8005d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8005d62:	fa01 f304 	lsl.w	r3, r1, r4
 8005d66:	ea40 0003 	orr.w	r0, r0, r3
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	bd30      	pop	{r4, r5, pc}
 8005d6e:	fa21 f004 	lsr.w	r0, r1, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	bd30      	pop	{r4, r5, pc}
 8005d76:	f094 0f00 	teq	r4, #0
 8005d7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005d7e:	bf06      	itte	eq
 8005d80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005d84:	3401      	addeq	r4, #1
 8005d86:	3d01      	subne	r5, #1
 8005d88:	e74e      	b.n	8005c28 <__adddf3+0x8c>
 8005d8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005d8e:	bf18      	it	ne
 8005d90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005d94:	d029      	beq.n	8005dea <__adddf3+0x24e>
 8005d96:	ea94 0f05 	teq	r4, r5
 8005d9a:	bf08      	it	eq
 8005d9c:	ea90 0f02 	teqeq	r0, r2
 8005da0:	d005      	beq.n	8005dae <__adddf3+0x212>
 8005da2:	ea54 0c00 	orrs.w	ip, r4, r0
 8005da6:	bf04      	itt	eq
 8005da8:	4619      	moveq	r1, r3
 8005daa:	4610      	moveq	r0, r2
 8005dac:	bd30      	pop	{r4, r5, pc}
 8005dae:	ea91 0f03 	teq	r1, r3
 8005db2:	bf1e      	ittt	ne
 8005db4:	2100      	movne	r1, #0
 8005db6:	2000      	movne	r0, #0
 8005db8:	bd30      	popne	{r4, r5, pc}
 8005dba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005dbe:	d105      	bne.n	8005dcc <__adddf3+0x230>
 8005dc0:	0040      	lsls	r0, r0, #1
 8005dc2:	4149      	adcs	r1, r1
 8005dc4:	bf28      	it	cs
 8005dc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005dca:	bd30      	pop	{r4, r5, pc}
 8005dcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005dd0:	bf3c      	itt	cc
 8005dd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005dd6:	bd30      	popcc	{r4, r5, pc}
 8005dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ddc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005de0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005de4:	f04f 0000 	mov.w	r0, #0
 8005de8:	bd30      	pop	{r4, r5, pc}
 8005dea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005dee:	bf1a      	itte	ne
 8005df0:	4619      	movne	r1, r3
 8005df2:	4610      	movne	r0, r2
 8005df4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005df8:	bf1c      	itt	ne
 8005dfa:	460b      	movne	r3, r1
 8005dfc:	4602      	movne	r2, r0
 8005dfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005e02:	bf06      	itte	eq
 8005e04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005e08:	ea91 0f03 	teqeq	r1, r3
 8005e0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005e10:	bd30      	pop	{r4, r5, pc}
 8005e12:	bf00      	nop

08005e14 <__aeabi_ui2d>:
 8005e14:	f090 0f00 	teq	r0, #0
 8005e18:	bf04      	itt	eq
 8005e1a:	2100      	moveq	r1, #0
 8005e1c:	4770      	bxeq	lr
 8005e1e:	b530      	push	{r4, r5, lr}
 8005e20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005e24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005e28:	f04f 0500 	mov.w	r5, #0
 8005e2c:	f04f 0100 	mov.w	r1, #0
 8005e30:	e750      	b.n	8005cd4 <__adddf3+0x138>
 8005e32:	bf00      	nop

08005e34 <__aeabi_i2d>:
 8005e34:	f090 0f00 	teq	r0, #0
 8005e38:	bf04      	itt	eq
 8005e3a:	2100      	moveq	r1, #0
 8005e3c:	4770      	bxeq	lr
 8005e3e:	b530      	push	{r4, r5, lr}
 8005e40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005e44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005e48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005e4c:	bf48      	it	mi
 8005e4e:	4240      	negmi	r0, r0
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	e73e      	b.n	8005cd4 <__adddf3+0x138>
 8005e56:	bf00      	nop

08005e58 <__aeabi_f2d>:
 8005e58:	0042      	lsls	r2, r0, #1
 8005e5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005e5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005e62:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005e66:	bf1f      	itttt	ne
 8005e68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005e6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005e70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005e74:	4770      	bxne	lr
 8005e76:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005e7a:	bf08      	it	eq
 8005e7c:	4770      	bxeq	lr
 8005e7e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005e82:	bf04      	itt	eq
 8005e84:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005e88:	4770      	bxeq	lr
 8005e8a:	b530      	push	{r4, r5, lr}
 8005e8c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005e90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005e94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e98:	e71c      	b.n	8005cd4 <__adddf3+0x138>
 8005e9a:	bf00      	nop

08005e9c <__aeabi_ul2d>:
 8005e9c:	ea50 0201 	orrs.w	r2, r0, r1
 8005ea0:	bf08      	it	eq
 8005ea2:	4770      	bxeq	lr
 8005ea4:	b530      	push	{r4, r5, lr}
 8005ea6:	f04f 0500 	mov.w	r5, #0
 8005eaa:	e00a      	b.n	8005ec2 <__aeabi_l2d+0x16>

08005eac <__aeabi_l2d>:
 8005eac:	ea50 0201 	orrs.w	r2, r0, r1
 8005eb0:	bf08      	it	eq
 8005eb2:	4770      	bxeq	lr
 8005eb4:	b530      	push	{r4, r5, lr}
 8005eb6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005eba:	d502      	bpl.n	8005ec2 <__aeabi_l2d+0x16>
 8005ebc:	4240      	negs	r0, r0
 8005ebe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005ec2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005ec6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005eca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005ece:	f43f aed8 	beq.w	8005c82 <__adddf3+0xe6>
 8005ed2:	f04f 0203 	mov.w	r2, #3
 8005ed6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005eda:	bf18      	it	ne
 8005edc:	3203      	addne	r2, #3
 8005ede:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005ee2:	bf18      	it	ne
 8005ee4:	3203      	addne	r2, #3
 8005ee6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005eea:	f1c2 0320 	rsb	r3, r2, #32
 8005eee:	fa00 fc03 	lsl.w	ip, r0, r3
 8005ef2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ef6:	fa01 fe03 	lsl.w	lr, r1, r3
 8005efa:	ea40 000e 	orr.w	r0, r0, lr
 8005efe:	fa21 f102 	lsr.w	r1, r1, r2
 8005f02:	4414      	add	r4, r2
 8005f04:	e6bd      	b.n	8005c82 <__adddf3+0xe6>
 8005f06:	bf00      	nop

08005f08 <__aeabi_dmul>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005f0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005f12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005f16:	bf1d      	ittte	ne
 8005f18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005f1c:	ea94 0f0c 	teqne	r4, ip
 8005f20:	ea95 0f0c 	teqne	r5, ip
 8005f24:	f000 f8de 	bleq	80060e4 <__aeabi_dmul+0x1dc>
 8005f28:	442c      	add	r4, r5
 8005f2a:	ea81 0603 	eor.w	r6, r1, r3
 8005f2e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005f32:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005f36:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005f3a:	bf18      	it	ne
 8005f3c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005f40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f48:	d038      	beq.n	8005fbc <__aeabi_dmul+0xb4>
 8005f4a:	fba0 ce02 	umull	ip, lr, r0, r2
 8005f4e:	f04f 0500 	mov.w	r5, #0
 8005f52:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005f56:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005f5a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005f5e:	f04f 0600 	mov.w	r6, #0
 8005f62:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005f66:	f09c 0f00 	teq	ip, #0
 8005f6a:	bf18      	it	ne
 8005f6c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005f70:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005f74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005f78:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005f7c:	d204      	bcs.n	8005f88 <__aeabi_dmul+0x80>
 8005f7e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005f82:	416d      	adcs	r5, r5
 8005f84:	eb46 0606 	adc.w	r6, r6, r6
 8005f88:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005f8c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005f90:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005f94:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005f98:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005f9c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005fa0:	bf88      	it	hi
 8005fa2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005fa6:	d81e      	bhi.n	8005fe6 <__aeabi_dmul+0xde>
 8005fa8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005fac:	bf08      	it	eq
 8005fae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005fb2:	f150 0000 	adcs.w	r0, r0, #0
 8005fb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005fc0:	ea46 0101 	orr.w	r1, r6, r1
 8005fc4:	ea40 0002 	orr.w	r0, r0, r2
 8005fc8:	ea81 0103 	eor.w	r1, r1, r3
 8005fcc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005fd0:	bfc2      	ittt	gt
 8005fd2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005fd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005fda:	bd70      	popgt	{r4, r5, r6, pc}
 8005fdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005fe0:	f04f 0e00 	mov.w	lr, #0
 8005fe4:	3c01      	subs	r4, #1
 8005fe6:	f300 80ab 	bgt.w	8006140 <__aeabi_dmul+0x238>
 8005fea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005fee:	bfde      	ittt	le
 8005ff0:	2000      	movle	r0, #0
 8005ff2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005ff6:	bd70      	pople	{r4, r5, r6, pc}
 8005ff8:	f1c4 0400 	rsb	r4, r4, #0
 8005ffc:	3c20      	subs	r4, #32
 8005ffe:	da35      	bge.n	800606c <__aeabi_dmul+0x164>
 8006000:	340c      	adds	r4, #12
 8006002:	dc1b      	bgt.n	800603c <__aeabi_dmul+0x134>
 8006004:	f104 0414 	add.w	r4, r4, #20
 8006008:	f1c4 0520 	rsb	r5, r4, #32
 800600c:	fa00 f305 	lsl.w	r3, r0, r5
 8006010:	fa20 f004 	lsr.w	r0, r0, r4
 8006014:	fa01 f205 	lsl.w	r2, r1, r5
 8006018:	ea40 0002 	orr.w	r0, r0, r2
 800601c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006020:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006024:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006028:	fa21 f604 	lsr.w	r6, r1, r4
 800602c:	eb42 0106 	adc.w	r1, r2, r6
 8006030:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006034:	bf08      	it	eq
 8006036:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f1c4 040c 	rsb	r4, r4, #12
 8006040:	f1c4 0520 	rsb	r5, r4, #32
 8006044:	fa00 f304 	lsl.w	r3, r0, r4
 8006048:	fa20 f005 	lsr.w	r0, r0, r5
 800604c:	fa01 f204 	lsl.w	r2, r1, r4
 8006050:	ea40 0002 	orr.w	r0, r0, r2
 8006054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006058:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800605c:	f141 0100 	adc.w	r1, r1, #0
 8006060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006064:	bf08      	it	eq
 8006066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f1c4 0520 	rsb	r5, r4, #32
 8006070:	fa00 f205 	lsl.w	r2, r0, r5
 8006074:	ea4e 0e02 	orr.w	lr, lr, r2
 8006078:	fa20 f304 	lsr.w	r3, r0, r4
 800607c:	fa01 f205 	lsl.w	r2, r1, r5
 8006080:	ea43 0302 	orr.w	r3, r3, r2
 8006084:	fa21 f004 	lsr.w	r0, r1, r4
 8006088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800608c:	fa21 f204 	lsr.w	r2, r1, r4
 8006090:	ea20 0002 	bic.w	r0, r0, r2
 8006094:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006098:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800609c:	bf08      	it	eq
 800609e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	f094 0f00 	teq	r4, #0
 80060a8:	d10f      	bne.n	80060ca <__aeabi_dmul+0x1c2>
 80060aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80060ae:	0040      	lsls	r0, r0, #1
 80060b0:	eb41 0101 	adc.w	r1, r1, r1
 80060b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80060b8:	bf08      	it	eq
 80060ba:	3c01      	subeq	r4, #1
 80060bc:	d0f7      	beq.n	80060ae <__aeabi_dmul+0x1a6>
 80060be:	ea41 0106 	orr.w	r1, r1, r6
 80060c2:	f095 0f00 	teq	r5, #0
 80060c6:	bf18      	it	ne
 80060c8:	4770      	bxne	lr
 80060ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80060ce:	0052      	lsls	r2, r2, #1
 80060d0:	eb43 0303 	adc.w	r3, r3, r3
 80060d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80060d8:	bf08      	it	eq
 80060da:	3d01      	subeq	r5, #1
 80060dc:	d0f7      	beq.n	80060ce <__aeabi_dmul+0x1c6>
 80060de:	ea43 0306 	orr.w	r3, r3, r6
 80060e2:	4770      	bx	lr
 80060e4:	ea94 0f0c 	teq	r4, ip
 80060e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80060ec:	bf18      	it	ne
 80060ee:	ea95 0f0c 	teqne	r5, ip
 80060f2:	d00c      	beq.n	800610e <__aeabi_dmul+0x206>
 80060f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80060f8:	bf18      	it	ne
 80060fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80060fe:	d1d1      	bne.n	80060a4 <__aeabi_dmul+0x19c>
 8006100:	ea81 0103 	eor.w	r1, r1, r3
 8006104:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006108:	f04f 0000 	mov.w	r0, #0
 800610c:	bd70      	pop	{r4, r5, r6, pc}
 800610e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006112:	bf06      	itte	eq
 8006114:	4610      	moveq	r0, r2
 8006116:	4619      	moveq	r1, r3
 8006118:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800611c:	d019      	beq.n	8006152 <__aeabi_dmul+0x24a>
 800611e:	ea94 0f0c 	teq	r4, ip
 8006122:	d102      	bne.n	800612a <__aeabi_dmul+0x222>
 8006124:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006128:	d113      	bne.n	8006152 <__aeabi_dmul+0x24a>
 800612a:	ea95 0f0c 	teq	r5, ip
 800612e:	d105      	bne.n	800613c <__aeabi_dmul+0x234>
 8006130:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006134:	bf1c      	itt	ne
 8006136:	4610      	movne	r0, r2
 8006138:	4619      	movne	r1, r3
 800613a:	d10a      	bne.n	8006152 <__aeabi_dmul+0x24a>
 800613c:	ea81 0103 	eor.w	r1, r1, r3
 8006140:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006144:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006148:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800614c:	f04f 0000 	mov.w	r0, #0
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006156:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800615a:	bd70      	pop	{r4, r5, r6, pc}

0800615c <__aeabi_ddiv>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800616a:	bf1d      	ittte	ne
 800616c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006170:	ea94 0f0c 	teqne	r4, ip
 8006174:	ea95 0f0c 	teqne	r5, ip
 8006178:	f000 f8a7 	bleq	80062ca <__aeabi_ddiv+0x16e>
 800617c:	eba4 0405 	sub.w	r4, r4, r5
 8006180:	ea81 0e03 	eor.w	lr, r1, r3
 8006184:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006188:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800618c:	f000 8088 	beq.w	80062a0 <__aeabi_ddiv+0x144>
 8006190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006194:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006198:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800619c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80061a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80061a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80061a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80061ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80061b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80061b4:	429d      	cmp	r5, r3
 80061b6:	bf08      	it	eq
 80061b8:	4296      	cmpeq	r6, r2
 80061ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80061be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80061c2:	d202      	bcs.n	80061ca <__aeabi_ddiv+0x6e>
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80061ca:	1ab6      	subs	r6, r6, r2
 80061cc:	eb65 0503 	sbc.w	r5, r5, r3
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80061d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80061da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80061de:	ebb6 0e02 	subs.w	lr, r6, r2
 80061e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80061e6:	bf22      	ittt	cs
 80061e8:	1ab6      	subcs	r6, r6, r2
 80061ea:	4675      	movcs	r5, lr
 80061ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80061f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80061fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80061fe:	bf22      	ittt	cs
 8006200:	1ab6      	subcs	r6, r6, r2
 8006202:	4675      	movcs	r5, lr
 8006204:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	ea4f 0232 	mov.w	r2, r2, rrx
 800620e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006212:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006216:	bf22      	ittt	cs
 8006218:	1ab6      	subcs	r6, r6, r2
 800621a:	4675      	movcs	r5, lr
 800621c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	ea4f 0232 	mov.w	r2, r2, rrx
 8006226:	ebb6 0e02 	subs.w	lr, r6, r2
 800622a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800622e:	bf22      	ittt	cs
 8006230:	1ab6      	subcs	r6, r6, r2
 8006232:	4675      	movcs	r5, lr
 8006234:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006238:	ea55 0e06 	orrs.w	lr, r5, r6
 800623c:	d018      	beq.n	8006270 <__aeabi_ddiv+0x114>
 800623e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006242:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006246:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800624a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800624e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006252:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006256:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800625a:	d1c0      	bne.n	80061de <__aeabi_ddiv+0x82>
 800625c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006260:	d10b      	bne.n	800627a <__aeabi_ddiv+0x11e>
 8006262:	ea41 0100 	orr.w	r1, r1, r0
 8006266:	f04f 0000 	mov.w	r0, #0
 800626a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800626e:	e7b6      	b.n	80061de <__aeabi_ddiv+0x82>
 8006270:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006274:	bf04      	itt	eq
 8006276:	4301      	orreq	r1, r0
 8006278:	2000      	moveq	r0, #0
 800627a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800627e:	bf88      	it	hi
 8006280:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006284:	f63f aeaf 	bhi.w	8005fe6 <__aeabi_dmul+0xde>
 8006288:	ebb5 0c03 	subs.w	ip, r5, r3
 800628c:	bf04      	itt	eq
 800628e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006296:	f150 0000 	adcs.w	r0, r0, #0
 800629a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80062a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80062a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80062ac:	bfc2      	ittt	gt
 80062ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80062b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80062b6:	bd70      	popgt	{r4, r5, r6, pc}
 80062b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80062bc:	f04f 0e00 	mov.w	lr, #0
 80062c0:	3c01      	subs	r4, #1
 80062c2:	e690      	b.n	8005fe6 <__aeabi_dmul+0xde>
 80062c4:	ea45 0e06 	orr.w	lr, r5, r6
 80062c8:	e68d      	b.n	8005fe6 <__aeabi_dmul+0xde>
 80062ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80062ce:	ea94 0f0c 	teq	r4, ip
 80062d2:	bf08      	it	eq
 80062d4:	ea95 0f0c 	teqeq	r5, ip
 80062d8:	f43f af3b 	beq.w	8006152 <__aeabi_dmul+0x24a>
 80062dc:	ea94 0f0c 	teq	r4, ip
 80062e0:	d10a      	bne.n	80062f8 <__aeabi_ddiv+0x19c>
 80062e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80062e6:	f47f af34 	bne.w	8006152 <__aeabi_dmul+0x24a>
 80062ea:	ea95 0f0c 	teq	r5, ip
 80062ee:	f47f af25 	bne.w	800613c <__aeabi_dmul+0x234>
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	e72c      	b.n	8006152 <__aeabi_dmul+0x24a>
 80062f8:	ea95 0f0c 	teq	r5, ip
 80062fc:	d106      	bne.n	800630c <__aeabi_ddiv+0x1b0>
 80062fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006302:	f43f aefd 	beq.w	8006100 <__aeabi_dmul+0x1f8>
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	e722      	b.n	8006152 <__aeabi_dmul+0x24a>
 800630c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006310:	bf18      	it	ne
 8006312:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006316:	f47f aec5 	bne.w	80060a4 <__aeabi_dmul+0x19c>
 800631a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800631e:	f47f af0d 	bne.w	800613c <__aeabi_dmul+0x234>
 8006322:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006326:	f47f aeeb 	bne.w	8006100 <__aeabi_dmul+0x1f8>
 800632a:	e712      	b.n	8006152 <__aeabi_dmul+0x24a>

0800632c <__gedf2>:
 800632c:	f04f 3cff 	mov.w	ip, #4294967295
 8006330:	e006      	b.n	8006340 <__cmpdf2+0x4>
 8006332:	bf00      	nop

08006334 <__ledf2>:
 8006334:	f04f 0c01 	mov.w	ip, #1
 8006338:	e002      	b.n	8006340 <__cmpdf2+0x4>
 800633a:	bf00      	nop

0800633c <__cmpdf2>:
 800633c:	f04f 0c01 	mov.w	ip, #1
 8006340:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006344:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800634c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006350:	bf18      	it	ne
 8006352:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006356:	d01b      	beq.n	8006390 <__cmpdf2+0x54>
 8006358:	b001      	add	sp, #4
 800635a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800635e:	bf0c      	ite	eq
 8006360:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006364:	ea91 0f03 	teqne	r1, r3
 8006368:	bf02      	ittt	eq
 800636a:	ea90 0f02 	teqeq	r0, r2
 800636e:	2000      	moveq	r0, #0
 8006370:	4770      	bxeq	lr
 8006372:	f110 0f00 	cmn.w	r0, #0
 8006376:	ea91 0f03 	teq	r1, r3
 800637a:	bf58      	it	pl
 800637c:	4299      	cmppl	r1, r3
 800637e:	bf08      	it	eq
 8006380:	4290      	cmpeq	r0, r2
 8006382:	bf2c      	ite	cs
 8006384:	17d8      	asrcs	r0, r3, #31
 8006386:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800638a:	f040 0001 	orr.w	r0, r0, #1
 800638e:	4770      	bx	lr
 8006390:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006394:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006398:	d102      	bne.n	80063a0 <__cmpdf2+0x64>
 800639a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800639e:	d107      	bne.n	80063b0 <__cmpdf2+0x74>
 80063a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80063a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80063a8:	d1d6      	bne.n	8006358 <__cmpdf2+0x1c>
 80063aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80063ae:	d0d3      	beq.n	8006358 <__cmpdf2+0x1c>
 80063b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop

080063b8 <__aeabi_cdrcmple>:
 80063b8:	4684      	mov	ip, r0
 80063ba:	4610      	mov	r0, r2
 80063bc:	4662      	mov	r2, ip
 80063be:	468c      	mov	ip, r1
 80063c0:	4619      	mov	r1, r3
 80063c2:	4663      	mov	r3, ip
 80063c4:	e000      	b.n	80063c8 <__aeabi_cdcmpeq>
 80063c6:	bf00      	nop

080063c8 <__aeabi_cdcmpeq>:
 80063c8:	b501      	push	{r0, lr}
 80063ca:	f7ff ffb7 	bl	800633c <__cmpdf2>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	bf48      	it	mi
 80063d2:	f110 0f00 	cmnmi.w	r0, #0
 80063d6:	bd01      	pop	{r0, pc}

080063d8 <__aeabi_dcmpeq>:
 80063d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80063dc:	f7ff fff4 	bl	80063c8 <__aeabi_cdcmpeq>
 80063e0:	bf0c      	ite	eq
 80063e2:	2001      	moveq	r0, #1
 80063e4:	2000      	movne	r0, #0
 80063e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80063ea:	bf00      	nop

080063ec <__aeabi_dcmplt>:
 80063ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80063f0:	f7ff ffea 	bl	80063c8 <__aeabi_cdcmpeq>
 80063f4:	bf34      	ite	cc
 80063f6:	2001      	movcc	r0, #1
 80063f8:	2000      	movcs	r0, #0
 80063fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80063fe:	bf00      	nop

08006400 <__aeabi_dcmple>:
 8006400:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006404:	f7ff ffe0 	bl	80063c8 <__aeabi_cdcmpeq>
 8006408:	bf94      	ite	ls
 800640a:	2001      	movls	r0, #1
 800640c:	2000      	movhi	r0, #0
 800640e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006412:	bf00      	nop

08006414 <__aeabi_dcmpge>:
 8006414:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006418:	f7ff ffce 	bl	80063b8 <__aeabi_cdrcmple>
 800641c:	bf94      	ite	ls
 800641e:	2001      	movls	r0, #1
 8006420:	2000      	movhi	r0, #0
 8006422:	f85d fb08 	ldr.w	pc, [sp], #8
 8006426:	bf00      	nop

08006428 <__aeabi_dcmpgt>:
 8006428:	f84d ed08 	str.w	lr, [sp, #-8]!
 800642c:	f7ff ffc4 	bl	80063b8 <__aeabi_cdrcmple>
 8006430:	bf34      	ite	cc
 8006432:	2001      	movcc	r0, #1
 8006434:	2000      	movcs	r0, #0
 8006436:	f85d fb08 	ldr.w	pc, [sp], #8
 800643a:	bf00      	nop

0800643c <__aeabi_d2uiz>:
 800643c:	004a      	lsls	r2, r1, #1
 800643e:	d211      	bcs.n	8006464 <__aeabi_d2uiz+0x28>
 8006440:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006444:	d211      	bcs.n	800646a <__aeabi_d2uiz+0x2e>
 8006446:	d50d      	bpl.n	8006464 <__aeabi_d2uiz+0x28>
 8006448:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800644c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006450:	d40e      	bmi.n	8006470 <__aeabi_d2uiz+0x34>
 8006452:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800645a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800645e:	fa23 f002 	lsr.w	r0, r3, r2
 8006462:	4770      	bx	lr
 8006464:	f04f 0000 	mov.w	r0, #0
 8006468:	4770      	bx	lr
 800646a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800646e:	d102      	bne.n	8006476 <__aeabi_d2uiz+0x3a>
 8006470:	f04f 30ff 	mov.w	r0, #4294967295
 8006474:	4770      	bx	lr
 8006476:	f04f 0000 	mov.w	r0, #0
 800647a:	4770      	bx	lr

0800647c <__aeabi_d2f>:
 800647c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006480:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006484:	bf24      	itt	cs
 8006486:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800648a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800648e:	d90d      	bls.n	80064ac <__aeabi_d2f+0x30>
 8006490:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006494:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006498:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800649c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80064a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80064a4:	bf08      	it	eq
 80064a6:	f020 0001 	biceq.w	r0, r0, #1
 80064aa:	4770      	bx	lr
 80064ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80064b0:	d121      	bne.n	80064f6 <__aeabi_d2f+0x7a>
 80064b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80064b6:	bfbc      	itt	lt
 80064b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80064bc:	4770      	bxlt	lr
 80064be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80064c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80064c6:	f1c2 0218 	rsb	r2, r2, #24
 80064ca:	f1c2 0c20 	rsb	ip, r2, #32
 80064ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80064d2:	fa20 f002 	lsr.w	r0, r0, r2
 80064d6:	bf18      	it	ne
 80064d8:	f040 0001 	orrne.w	r0, r0, #1
 80064dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80064e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80064e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80064e8:	ea40 000c 	orr.w	r0, r0, ip
 80064ec:	fa23 f302 	lsr.w	r3, r3, r2
 80064f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064f4:	e7cc      	b.n	8006490 <__aeabi_d2f+0x14>
 80064f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80064fa:	d107      	bne.n	800650c <__aeabi_d2f+0x90>
 80064fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006500:	bf1e      	ittt	ne
 8006502:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006506:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800650a:	4770      	bxne	lr
 800650c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006510:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <__aeabi_uldivmod>:
 800651c:	b953      	cbnz	r3, 8006534 <__aeabi_uldivmod+0x18>
 800651e:	b94a      	cbnz	r2, 8006534 <__aeabi_uldivmod+0x18>
 8006520:	2900      	cmp	r1, #0
 8006522:	bf08      	it	eq
 8006524:	2800      	cmpeq	r0, #0
 8006526:	bf1c      	itt	ne
 8006528:	f04f 31ff 	movne.w	r1, #4294967295
 800652c:	f04f 30ff 	movne.w	r0, #4294967295
 8006530:	f000 b9a6 	b.w	8006880 <__aeabi_idiv0>
 8006534:	f1ad 0c08 	sub.w	ip, sp, #8
 8006538:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800653c:	f000 f83c 	bl	80065b8 <__udivmoddi4>
 8006540:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006548:	b004      	add	sp, #16
 800654a:	4770      	bx	lr

0800654c <__aeabi_d2lz>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	2200      	movs	r2, #0
 8006550:	2300      	movs	r3, #0
 8006552:	4604      	mov	r4, r0
 8006554:	460d      	mov	r5, r1
 8006556:	f7ff ff49 	bl	80063ec <__aeabi_dcmplt>
 800655a:	b928      	cbnz	r0, 8006568 <__aeabi_d2lz+0x1c>
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006564:	f000 b80a 	b.w	800657c <__aeabi_d2ulz>
 8006568:	4620      	mov	r0, r4
 800656a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800656e:	f000 f805 	bl	800657c <__aeabi_d2ulz>
 8006572:	4240      	negs	r0, r0
 8006574:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006578:	bd38      	pop	{r3, r4, r5, pc}
 800657a:	bf00      	nop

0800657c <__aeabi_d2ulz>:
 800657c:	b5d0      	push	{r4, r6, r7, lr}
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <__aeabi_d2ulz+0x34>)
 8006580:	2200      	movs	r2, #0
 8006582:	4606      	mov	r6, r0
 8006584:	460f      	mov	r7, r1
 8006586:	f7ff fcbf 	bl	8005f08 <__aeabi_dmul>
 800658a:	f7ff ff57 	bl	800643c <__aeabi_d2uiz>
 800658e:	4604      	mov	r4, r0
 8006590:	f7ff fc40 	bl	8005e14 <__aeabi_ui2d>
 8006594:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <__aeabi_d2ulz+0x38>)
 8006596:	2200      	movs	r2, #0
 8006598:	f7ff fcb6 	bl	8005f08 <__aeabi_dmul>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7ff faf8 	bl	8005b98 <__aeabi_dsub>
 80065a8:	f7ff ff48 	bl	800643c <__aeabi_d2uiz>
 80065ac:	4621      	mov	r1, r4
 80065ae:	bdd0      	pop	{r4, r6, r7, pc}
 80065b0:	3df00000 	.word	0x3df00000
 80065b4:	41f00000 	.word	0x41f00000

080065b8 <__udivmoddi4>:
 80065b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065bc:	9e08      	ldr	r6, [sp, #32]
 80065be:	460d      	mov	r5, r1
 80065c0:	4604      	mov	r4, r0
 80065c2:	460f      	mov	r7, r1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d14a      	bne.n	800665e <__udivmoddi4+0xa6>
 80065c8:	428a      	cmp	r2, r1
 80065ca:	4694      	mov	ip, r2
 80065cc:	d965      	bls.n	800669a <__udivmoddi4+0xe2>
 80065ce:	fab2 f382 	clz	r3, r2
 80065d2:	b143      	cbz	r3, 80065e6 <__udivmoddi4+0x2e>
 80065d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80065d8:	f1c3 0220 	rsb	r2, r3, #32
 80065dc:	409f      	lsls	r7, r3
 80065de:	fa20 f202 	lsr.w	r2, r0, r2
 80065e2:	4317      	orrs	r7, r2
 80065e4:	409c      	lsls	r4, r3
 80065e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80065ea:	fa1f f58c 	uxth.w	r5, ip
 80065ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80065f2:	0c22      	lsrs	r2, r4, #16
 80065f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80065f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80065fc:	fb01 f005 	mul.w	r0, r1, r5
 8006600:	4290      	cmp	r0, r2
 8006602:	d90a      	bls.n	800661a <__udivmoddi4+0x62>
 8006604:	eb1c 0202 	adds.w	r2, ip, r2
 8006608:	f101 37ff 	add.w	r7, r1, #4294967295
 800660c:	f080 811c 	bcs.w	8006848 <__udivmoddi4+0x290>
 8006610:	4290      	cmp	r0, r2
 8006612:	f240 8119 	bls.w	8006848 <__udivmoddi4+0x290>
 8006616:	3902      	subs	r1, #2
 8006618:	4462      	add	r2, ip
 800661a:	1a12      	subs	r2, r2, r0
 800661c:	b2a4      	uxth	r4, r4
 800661e:	fbb2 f0fe 	udiv	r0, r2, lr
 8006622:	fb0e 2210 	mls	r2, lr, r0, r2
 8006626:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800662a:	fb00 f505 	mul.w	r5, r0, r5
 800662e:	42a5      	cmp	r5, r4
 8006630:	d90a      	bls.n	8006648 <__udivmoddi4+0x90>
 8006632:	eb1c 0404 	adds.w	r4, ip, r4
 8006636:	f100 32ff 	add.w	r2, r0, #4294967295
 800663a:	f080 8107 	bcs.w	800684c <__udivmoddi4+0x294>
 800663e:	42a5      	cmp	r5, r4
 8006640:	f240 8104 	bls.w	800684c <__udivmoddi4+0x294>
 8006644:	4464      	add	r4, ip
 8006646:	3802      	subs	r0, #2
 8006648:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800664c:	1b64      	subs	r4, r4, r5
 800664e:	2100      	movs	r1, #0
 8006650:	b11e      	cbz	r6, 800665a <__udivmoddi4+0xa2>
 8006652:	40dc      	lsrs	r4, r3
 8006654:	2300      	movs	r3, #0
 8006656:	e9c6 4300 	strd	r4, r3, [r6]
 800665a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665e:	428b      	cmp	r3, r1
 8006660:	d908      	bls.n	8006674 <__udivmoddi4+0xbc>
 8006662:	2e00      	cmp	r6, #0
 8006664:	f000 80ed 	beq.w	8006842 <__udivmoddi4+0x28a>
 8006668:	2100      	movs	r1, #0
 800666a:	e9c6 0500 	strd	r0, r5, [r6]
 800666e:	4608      	mov	r0, r1
 8006670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006674:	fab3 f183 	clz	r1, r3
 8006678:	2900      	cmp	r1, #0
 800667a:	d149      	bne.n	8006710 <__udivmoddi4+0x158>
 800667c:	42ab      	cmp	r3, r5
 800667e:	d302      	bcc.n	8006686 <__udivmoddi4+0xce>
 8006680:	4282      	cmp	r2, r0
 8006682:	f200 80f8 	bhi.w	8006876 <__udivmoddi4+0x2be>
 8006686:	1a84      	subs	r4, r0, r2
 8006688:	eb65 0203 	sbc.w	r2, r5, r3
 800668c:	2001      	movs	r0, #1
 800668e:	4617      	mov	r7, r2
 8006690:	2e00      	cmp	r6, #0
 8006692:	d0e2      	beq.n	800665a <__udivmoddi4+0xa2>
 8006694:	e9c6 4700 	strd	r4, r7, [r6]
 8006698:	e7df      	b.n	800665a <__udivmoddi4+0xa2>
 800669a:	b902      	cbnz	r2, 800669e <__udivmoddi4+0xe6>
 800669c:	deff      	udf	#255	; 0xff
 800669e:	fab2 f382 	clz	r3, r2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 8090 	bne.w	80067c8 <__udivmoddi4+0x210>
 80066a8:	1a8a      	subs	r2, r1, r2
 80066aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80066ae:	fa1f fe8c 	uxth.w	lr, ip
 80066b2:	2101      	movs	r1, #1
 80066b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80066b8:	fb07 2015 	mls	r0, r7, r5, r2
 80066bc:	0c22      	lsrs	r2, r4, #16
 80066be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80066c2:	fb0e f005 	mul.w	r0, lr, r5
 80066c6:	4290      	cmp	r0, r2
 80066c8:	d908      	bls.n	80066dc <__udivmoddi4+0x124>
 80066ca:	eb1c 0202 	adds.w	r2, ip, r2
 80066ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80066d2:	d202      	bcs.n	80066da <__udivmoddi4+0x122>
 80066d4:	4290      	cmp	r0, r2
 80066d6:	f200 80cb 	bhi.w	8006870 <__udivmoddi4+0x2b8>
 80066da:	4645      	mov	r5, r8
 80066dc:	1a12      	subs	r2, r2, r0
 80066de:	b2a4      	uxth	r4, r4
 80066e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80066e4:	fb07 2210 	mls	r2, r7, r0, r2
 80066e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80066ec:	fb0e fe00 	mul.w	lr, lr, r0
 80066f0:	45a6      	cmp	lr, r4
 80066f2:	d908      	bls.n	8006706 <__udivmoddi4+0x14e>
 80066f4:	eb1c 0404 	adds.w	r4, ip, r4
 80066f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80066fc:	d202      	bcs.n	8006704 <__udivmoddi4+0x14c>
 80066fe:	45a6      	cmp	lr, r4
 8006700:	f200 80bb 	bhi.w	800687a <__udivmoddi4+0x2c2>
 8006704:	4610      	mov	r0, r2
 8006706:	eba4 040e 	sub.w	r4, r4, lr
 800670a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800670e:	e79f      	b.n	8006650 <__udivmoddi4+0x98>
 8006710:	f1c1 0720 	rsb	r7, r1, #32
 8006714:	408b      	lsls	r3, r1
 8006716:	fa22 fc07 	lsr.w	ip, r2, r7
 800671a:	ea4c 0c03 	orr.w	ip, ip, r3
 800671e:	fa05 f401 	lsl.w	r4, r5, r1
 8006722:	fa20 f307 	lsr.w	r3, r0, r7
 8006726:	40fd      	lsrs	r5, r7
 8006728:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800672c:	4323      	orrs	r3, r4
 800672e:	fbb5 f8f9 	udiv	r8, r5, r9
 8006732:	fa1f fe8c 	uxth.w	lr, ip
 8006736:	fb09 5518 	mls	r5, r9, r8, r5
 800673a:	0c1c      	lsrs	r4, r3, #16
 800673c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006740:	fb08 f50e 	mul.w	r5, r8, lr
 8006744:	42a5      	cmp	r5, r4
 8006746:	fa02 f201 	lsl.w	r2, r2, r1
 800674a:	fa00 f001 	lsl.w	r0, r0, r1
 800674e:	d90b      	bls.n	8006768 <__udivmoddi4+0x1b0>
 8006750:	eb1c 0404 	adds.w	r4, ip, r4
 8006754:	f108 3aff 	add.w	sl, r8, #4294967295
 8006758:	f080 8088 	bcs.w	800686c <__udivmoddi4+0x2b4>
 800675c:	42a5      	cmp	r5, r4
 800675e:	f240 8085 	bls.w	800686c <__udivmoddi4+0x2b4>
 8006762:	f1a8 0802 	sub.w	r8, r8, #2
 8006766:	4464      	add	r4, ip
 8006768:	1b64      	subs	r4, r4, r5
 800676a:	b29d      	uxth	r5, r3
 800676c:	fbb4 f3f9 	udiv	r3, r4, r9
 8006770:	fb09 4413 	mls	r4, r9, r3, r4
 8006774:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006778:	fb03 fe0e 	mul.w	lr, r3, lr
 800677c:	45a6      	cmp	lr, r4
 800677e:	d908      	bls.n	8006792 <__udivmoddi4+0x1da>
 8006780:	eb1c 0404 	adds.w	r4, ip, r4
 8006784:	f103 35ff 	add.w	r5, r3, #4294967295
 8006788:	d26c      	bcs.n	8006864 <__udivmoddi4+0x2ac>
 800678a:	45a6      	cmp	lr, r4
 800678c:	d96a      	bls.n	8006864 <__udivmoddi4+0x2ac>
 800678e:	3b02      	subs	r3, #2
 8006790:	4464      	add	r4, ip
 8006792:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006796:	fba3 9502 	umull	r9, r5, r3, r2
 800679a:	eba4 040e 	sub.w	r4, r4, lr
 800679e:	42ac      	cmp	r4, r5
 80067a0:	46c8      	mov	r8, r9
 80067a2:	46ae      	mov	lr, r5
 80067a4:	d356      	bcc.n	8006854 <__udivmoddi4+0x29c>
 80067a6:	d053      	beq.n	8006850 <__udivmoddi4+0x298>
 80067a8:	b156      	cbz	r6, 80067c0 <__udivmoddi4+0x208>
 80067aa:	ebb0 0208 	subs.w	r2, r0, r8
 80067ae:	eb64 040e 	sbc.w	r4, r4, lr
 80067b2:	fa04 f707 	lsl.w	r7, r4, r7
 80067b6:	40ca      	lsrs	r2, r1
 80067b8:	40cc      	lsrs	r4, r1
 80067ba:	4317      	orrs	r7, r2
 80067bc:	e9c6 7400 	strd	r7, r4, [r6]
 80067c0:	4618      	mov	r0, r3
 80067c2:	2100      	movs	r1, #0
 80067c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c8:	f1c3 0120 	rsb	r1, r3, #32
 80067cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80067d0:	fa20 f201 	lsr.w	r2, r0, r1
 80067d4:	fa25 f101 	lsr.w	r1, r5, r1
 80067d8:	409d      	lsls	r5, r3
 80067da:	432a      	orrs	r2, r5
 80067dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80067e0:	fa1f fe8c 	uxth.w	lr, ip
 80067e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80067e8:	fb07 1510 	mls	r5, r7, r0, r1
 80067ec:	0c11      	lsrs	r1, r2, #16
 80067ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80067f2:	fb00 f50e 	mul.w	r5, r0, lr
 80067f6:	428d      	cmp	r5, r1
 80067f8:	fa04 f403 	lsl.w	r4, r4, r3
 80067fc:	d908      	bls.n	8006810 <__udivmoddi4+0x258>
 80067fe:	eb1c 0101 	adds.w	r1, ip, r1
 8006802:	f100 38ff 	add.w	r8, r0, #4294967295
 8006806:	d22f      	bcs.n	8006868 <__udivmoddi4+0x2b0>
 8006808:	428d      	cmp	r5, r1
 800680a:	d92d      	bls.n	8006868 <__udivmoddi4+0x2b0>
 800680c:	3802      	subs	r0, #2
 800680e:	4461      	add	r1, ip
 8006810:	1b49      	subs	r1, r1, r5
 8006812:	b292      	uxth	r2, r2
 8006814:	fbb1 f5f7 	udiv	r5, r1, r7
 8006818:	fb07 1115 	mls	r1, r7, r5, r1
 800681c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006820:	fb05 f10e 	mul.w	r1, r5, lr
 8006824:	4291      	cmp	r1, r2
 8006826:	d908      	bls.n	800683a <__udivmoddi4+0x282>
 8006828:	eb1c 0202 	adds.w	r2, ip, r2
 800682c:	f105 38ff 	add.w	r8, r5, #4294967295
 8006830:	d216      	bcs.n	8006860 <__udivmoddi4+0x2a8>
 8006832:	4291      	cmp	r1, r2
 8006834:	d914      	bls.n	8006860 <__udivmoddi4+0x2a8>
 8006836:	3d02      	subs	r5, #2
 8006838:	4462      	add	r2, ip
 800683a:	1a52      	subs	r2, r2, r1
 800683c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8006840:	e738      	b.n	80066b4 <__udivmoddi4+0xfc>
 8006842:	4631      	mov	r1, r6
 8006844:	4630      	mov	r0, r6
 8006846:	e708      	b.n	800665a <__udivmoddi4+0xa2>
 8006848:	4639      	mov	r1, r7
 800684a:	e6e6      	b.n	800661a <__udivmoddi4+0x62>
 800684c:	4610      	mov	r0, r2
 800684e:	e6fb      	b.n	8006648 <__udivmoddi4+0x90>
 8006850:	4548      	cmp	r0, r9
 8006852:	d2a9      	bcs.n	80067a8 <__udivmoddi4+0x1f0>
 8006854:	ebb9 0802 	subs.w	r8, r9, r2
 8006858:	eb65 0e0c 	sbc.w	lr, r5, ip
 800685c:	3b01      	subs	r3, #1
 800685e:	e7a3      	b.n	80067a8 <__udivmoddi4+0x1f0>
 8006860:	4645      	mov	r5, r8
 8006862:	e7ea      	b.n	800683a <__udivmoddi4+0x282>
 8006864:	462b      	mov	r3, r5
 8006866:	e794      	b.n	8006792 <__udivmoddi4+0x1da>
 8006868:	4640      	mov	r0, r8
 800686a:	e7d1      	b.n	8006810 <__udivmoddi4+0x258>
 800686c:	46d0      	mov	r8, sl
 800686e:	e77b      	b.n	8006768 <__udivmoddi4+0x1b0>
 8006870:	3d02      	subs	r5, #2
 8006872:	4462      	add	r2, ip
 8006874:	e732      	b.n	80066dc <__udivmoddi4+0x124>
 8006876:	4608      	mov	r0, r1
 8006878:	e70a      	b.n	8006690 <__udivmoddi4+0xd8>
 800687a:	4464      	add	r4, ip
 800687c:	3802      	subs	r0, #2
 800687e:	e742      	b.n	8006706 <__udivmoddi4+0x14e>

08006880 <__aeabi_idiv0>:
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <__NVIC_GetPriorityGrouping+0x18>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	0a1b      	lsrs	r3, r3, #8
 800688e:	f003 0307 	and.w	r3, r3, #7
}
 8006892:	4618      	mov	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	e000ed00 	.word	0xe000ed00

080068a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	db0b      	blt.n	80068ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	f003 021f 	and.w	r2, r3, #31
 80068b8:	4907      	ldr	r1, [pc, #28]	; (80068d8 <__NVIC_EnableIRQ+0x38>)
 80068ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	2001      	movs	r0, #1
 80068c2:	fa00 f202 	lsl.w	r2, r0, r2
 80068c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	e000e100 	.word	0xe000e100

080068dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	6039      	str	r1, [r7, #0]
 80068e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	db0a      	blt.n	8006906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	490c      	ldr	r1, [pc, #48]	; (8006928 <__NVIC_SetPriority+0x4c>)
 80068f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fa:	0112      	lsls	r2, r2, #4
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	440b      	add	r3, r1
 8006900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006904:	e00a      	b.n	800691c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4908      	ldr	r1, [pc, #32]	; (800692c <__NVIC_SetPriority+0x50>)
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	3b04      	subs	r3, #4
 8006914:	0112      	lsls	r2, r2, #4
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	440b      	add	r3, r1
 800691a:	761a      	strb	r2, [r3, #24]
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	e000e100 	.word	0xe000e100
 800692c:	e000ed00 	.word	0xe000ed00

08006930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006930:	b480      	push	{r7}
 8006932:	b089      	sub	sp, #36	; 0x24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f1c3 0307 	rsb	r3, r3, #7
 800694a:	2b04      	cmp	r3, #4
 800694c:	bf28      	it	cs
 800694e:	2304      	movcs	r3, #4
 8006950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	3304      	adds	r3, #4
 8006956:	2b06      	cmp	r3, #6
 8006958:	d902      	bls.n	8006960 <NVIC_EncodePriority+0x30>
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	3b03      	subs	r3, #3
 800695e:	e000      	b.n	8006962 <NVIC_EncodePriority+0x32>
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006964:	f04f 32ff 	mov.w	r2, #4294967295
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	43da      	mvns	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	401a      	ands	r2, r3
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006978:	f04f 31ff 	mov.w	r1, #4294967295
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	fa01 f303 	lsl.w	r3, r1, r3
 8006982:	43d9      	mvns	r1, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006988:	4313      	orrs	r3, r2
         );
}
 800698a:	4618      	mov	r0, r3
 800698c:	3724      	adds	r7, #36	; 0x24
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
	...

08006998 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800699c:	f3bf 8f4f 	dsb	sy
}
 80069a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80069a2:	4b06      	ldr	r3, [pc, #24]	; (80069bc <__NVIC_SystemReset+0x24>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80069aa:	4904      	ldr	r1, [pc, #16]	; (80069bc <__NVIC_SystemReset+0x24>)
 80069ac:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <__NVIC_SystemReset+0x28>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80069b2:	f3bf 8f4f 	dsb	sy
}
 80069b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80069b8:	bf00      	nop
 80069ba:	e7fd      	b.n	80069b8 <__NVIC_SystemReset+0x20>
 80069bc:	e000ed00 	.word	0xe000ed00
 80069c0:	05fa0004 	.word	0x05fa0004

080069c4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80069cc:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80069ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069d0:	4907      	ldr	r1, [pc, #28]	; (80069f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80069da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4013      	ands	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069e2:	68fb      	ldr	r3, [r7, #12]
}
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	40021000 	.word	0x40021000

080069f4 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80069fc:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <LL_APB1_GRP2_EnableClock+0x2c>)
 80069fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a00:	4907      	ldr	r1, [pc, #28]	; (8006a20 <LL_APB1_GRP2_EnableClock+0x2c>)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006a08:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <LL_APB1_GRP2_EnableClock+0x2c>)
 8006a0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a12:	68fb      	ldr	r3, [r7, #12]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	40021000 	.word	0x40021000

08006a24 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8006a34:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <LL_DMA_SetDataTransferDirection+0x4c>)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4413      	add	r3, r2
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	4413      	add	r3, r2
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a48:	f023 0310 	bic.w	r3, r3, #16
 8006a4c:	4908      	ldr	r1, [pc, #32]	; (8006a70 <LL_DMA_SetDataTransferDirection+0x4c>)
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	440a      	add	r2, r1
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	4611      	mov	r1, r2
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	440a      	add	r2, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	08023550 	.word	0x08023550

08006a74 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8006a84:	4a0d      	ldr	r2, [pc, #52]	; (8006abc <LL_DMA_SetMode+0x48>)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	4413      	add	r3, r2
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f023 0220 	bic.w	r2, r3, #32
 8006a98:	4908      	ldr	r1, [pc, #32]	; (8006abc <LL_DMA_SetMode+0x48>)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	440b      	add	r3, r1
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	440b      	add	r3, r1
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]
             Mode);
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	08023550 	.word	0x08023550

08006ac0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8006ad0:	4a0d      	ldr	r2, [pc, #52]	; (8006b08 <LL_DMA_SetPeriphIncMode+0x48>)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	4413      	add	r3, r2
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006ae4:	4908      	ldr	r1, [pc, #32]	; (8006b08 <LL_DMA_SetPeriphIncMode+0x48>)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	440b      	add	r3, r1
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	4619      	mov	r1, r3
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	440b      	add	r3, r1
 8006af2:	4619      	mov	r1, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	08023550 	.word	0x08023550

08006b0c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8006b1c:	4a0d      	ldr	r2, [pc, #52]	; (8006b54 <LL_DMA_SetMemoryIncMode+0x48>)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4413      	add	r3, r2
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	4413      	add	r3, r2
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b30:	4908      	ldr	r1, [pc, #32]	; (8006b54 <LL_DMA_SetMemoryIncMode+0x48>)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	440b      	add	r3, r1
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	440b      	add	r3, r1
 8006b3e:	4619      	mov	r1, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	08023550 	.word	0x08023550

08006b58 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8006b68:	4a0d      	ldr	r2, [pc, #52]	; (8006ba0 <LL_DMA_SetPeriphSize+0x48>)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	4413      	add	r3, r2
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b7c:	4908      	ldr	r1, [pc, #32]	; (8006ba0 <LL_DMA_SetPeriphSize+0x48>)
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	440b      	add	r3, r1
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	4619      	mov	r1, r3
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	440b      	add	r3, r1
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	08023550 	.word	0x08023550

08006ba4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8006bb4:	4a0d      	ldr	r2, [pc, #52]	; (8006bec <LL_DMA_SetMemorySize+0x48>)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4413      	add	r3, r2
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bc8:	4908      	ldr	r1, [pc, #32]	; (8006bec <LL_DMA_SetMemorySize+0x48>)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	440b      	add	r3, r1
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	440b      	add	r3, r1
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	08023550 	.word	0x08023550

08006bf0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8006c00:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	4413      	add	r3, r2
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c14:	4908      	ldr	r1, [pc, #32]	; (8006c38 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	440b      	add	r3, r1
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	440b      	add	r3, r1
 8006c22:	4619      	mov	r1, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	600b      	str	r3, [r1, #0]
             Priority);
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	08023550 	.word	0x08023550

08006c3c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	0a9b      	lsrs	r3, r3, #10
 8006c4c:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006c50:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c64:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c7a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	601a      	str	r2, [r3, #0]
}
 8006c84:	bf00      	nop
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c94:	f002 fb39 	bl	800930a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c98:	f000 f8ee 	bl	8006e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c9c:	f000 fdca 	bl	8007834 <MX_GPIO_Init>
  MX_DMA_Init();
 8006ca0:	f000 fd42 	bl	8007728 <MX_DMA_Init>
  MX_UART4_Init();
 8006ca4:	f000 fbc2 	bl	800742c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8006ca8:	f000 fc0c 	bl	80074c4 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 8006cac:	f000 fcac 	bl	8007608 <MX_UCPD1_Init>
  MX_ADC1_Init();
 8006cb0:	f000 f92e 	bl	8006f10 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006cb4:	f000 f9b4 	bl	8007020 <MX_ADC2_Init>
  MX_ADC5_Init();
 8006cb8:	f000 fa18 	bl	80070ec <MX_ADC5_Init>
  MX_I2C4_Init();
 8006cbc:	f000 fa7c 	bl	80071b8 <MX_I2C4_Init>
  MX_TIM3_Init();
 8006cc0:	f000 faba 	bl	8007238 <MX_TIM3_Init>
  MX_TIM5_Init();
 8006cc4:	f000 fb3a 	bl	800733c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8006cc8:	f000 fc4e 	bl	8007568 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8006ccc:	f017 ffca 	bl	801ec64 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  //------------------------------------------------------------------------------------- INIT

  while(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin)){}
 8006cd0:	bf00      	nop
 8006cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006cd6:	4843      	ldr	r0, [pc, #268]	; (8006de4 <main+0x154>)
 8006cd8:	f004 ff68 	bl	800bbac <HAL_GPIO_ReadPin>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f7      	bne.n	8006cd2 <main+0x42>

  LED_init(4);
 8006ce2:	2004      	movs	r0, #4
 8006ce4:	f016 fc38 	bl	801d558 <LED_init>

  UNICARD1data.OCR = UC1OCR_manual;
 8006ce8:	4b3f      	ldr	r3, [pc, #252]	; (8006de8 <main+0x158>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  UNICARD1data.OCRrecoveryTime_ms = 1000;
 8006cf0:	4b3d      	ldr	r3, [pc, #244]	; (8006de8 <main+0x158>)
 8006cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cf6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  RS485cfg.huart = &huart2;
 8006cfa:	4b3c      	ldr	r3, [pc, #240]	; (8006dec <main+0x15c>)
 8006cfc:	4a3c      	ldr	r2, [pc, #240]	; (8006df0 <main+0x160>)
 8006cfe:	601a      	str	r2, [r3, #0]
  RS485cfg.TXbuffSize = TXbuffSIZE;
 8006d00:	4b3a      	ldr	r3, [pc, #232]	; (8006dec <main+0x15c>)
 8006d02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d06:	811a      	strh	r2, [r3, #8]
  RS485cfg.TXbuffer = RS485TXbuffer;
 8006d08:	4b38      	ldr	r3, [pc, #224]	; (8006dec <main+0x15c>)
 8006d0a:	4a3a      	ldr	r2, [pc, #232]	; (8006df4 <main+0x164>)
 8006d0c:	605a      	str	r2, [r3, #4]
  RS485cfg.RXbuffSize = RXbuffSIZE;
 8006d0e:	4b37      	ldr	r3, [pc, #220]	; (8006dec <main+0x15c>)
 8006d10:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d14:	821a      	strh	r2, [r3, #16]
  RS485cfg.RXbuffer = RS485RXbuffer;
 8006d16:	4b35      	ldr	r3, [pc, #212]	; (8006dec <main+0x15c>)
 8006d18:	4a37      	ldr	r2, [pc, #220]	; (8006df8 <main+0x168>)
 8006d1a:	60da      	str	r2, [r3, #12]

  RS485_Init(&RS485cfg);
 8006d1c:	4833      	ldr	r0, [pc, #204]	; (8006dec <main+0x15c>)
 8006d1e:	f016 fb95 	bl	801d44c <RS485_Init>

  UDEV1SCPI_init();
 8006d22:	f017 fb8d 	bl	801e440 <UDEV1SCPI_init>
  //HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&adc2_data, 1);

  //HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
  //HAL_ADC_Start_DMA(&hadc5, (uint32_t *)&adc5_data, 1);

  HAL_Delay(500);
 8006d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d2a:	f002 fb25 	bl	8009378 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006d2e:	f012 ff2f 	bl	8019b90 <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8006d32:	f017 fba3 	bl	801e47c <MX_USBPD_Init>
  /* Create the mutex(es) */
  /* creation of mutex_RS485 */
  mutex_RS485Handle = osMutexNew(&mutex_RS485_attributes);
 8006d36:	4831      	ldr	r0, [pc, #196]	; (8006dfc <main+0x16c>)
 8006d38:	f013 f84e 	bl	8019dd8 <osMutexNew>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4a30      	ldr	r2, [pc, #192]	; (8006e00 <main+0x170>)
 8006d40:	6013      	str	r3, [r2, #0]

  /* creation of mutex_USB */
  mutex_USBHandle = osMutexNew(&mutex_USB_attributes);
 8006d42:	4830      	ldr	r0, [pc, #192]	; (8006e04 <main+0x174>)
 8006d44:	f013 f848 	bl	8019dd8 <osMutexNew>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	4a2f      	ldr	r2, [pc, #188]	; (8006e08 <main+0x178>)
 8006d4c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_USBcom */
  task_USBcomHandle = osThreadNew(StartDefaultTask, NULL, &task_USBcom_attributes);
 8006d4e:	4a2f      	ldr	r2, [pc, #188]	; (8006e0c <main+0x17c>)
 8006d50:	2100      	movs	r1, #0
 8006d52:	482f      	ldr	r0, [pc, #188]	; (8006e10 <main+0x180>)
 8006d54:	f012 ff66 	bl	8019c24 <osThreadNew>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4a2e      	ldr	r2, [pc, #184]	; (8006e14 <main+0x184>)
 8006d5c:	6013      	str	r3, [r2, #0]

  /* creation of LEDcontrol */
  LEDcontrolHandle = osThreadNew(task_LEDcontrol, NULL, &LEDcontrol_attributes);
 8006d5e:	4a2e      	ldr	r2, [pc, #184]	; (8006e18 <main+0x188>)
 8006d60:	2100      	movs	r1, #0
 8006d62:	482e      	ldr	r0, [pc, #184]	; (8006e1c <main+0x18c>)
 8006d64:	f012 ff5e 	bl	8019c24 <osThreadNew>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	4a2d      	ldr	r2, [pc, #180]	; (8006e20 <main+0x190>)
 8006d6c:	6013      	str	r3, [r2, #0]

  /* creation of Current_Check */
  Current_CheckHandle = osThreadNew(task_Current_Check, NULL, &Current_Check_attributes);
 8006d6e:	4a2d      	ldr	r2, [pc, #180]	; (8006e24 <main+0x194>)
 8006d70:	2100      	movs	r1, #0
 8006d72:	482d      	ldr	r0, [pc, #180]	; (8006e28 <main+0x198>)
 8006d74:	f012 ff56 	bl	8019c24 <osThreadNew>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	4a2c      	ldr	r2, [pc, #176]	; (8006e2c <main+0x19c>)
 8006d7c:	6013      	str	r3, [r2, #0]

  /* creation of BUTTON */
  BUTTONHandle = osThreadNew(task_BUTTON, NULL, &BUTTON_attributes);
 8006d7e:	4a2c      	ldr	r2, [pc, #176]	; (8006e30 <main+0x1a0>)
 8006d80:	2100      	movs	r1, #0
 8006d82:	482c      	ldr	r0, [pc, #176]	; (8006e34 <main+0x1a4>)
 8006d84:	f012 ff4e 	bl	8019c24 <osThreadNew>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	4a2b      	ldr	r2, [pc, #172]	; (8006e38 <main+0x1a8>)
 8006d8c:	6013      	str	r3, [r2, #0]

  /* creation of StateMachine */
  StateMachineHandle = osThreadNew(task_StateMachine, NULL, &StateMachine_attributes);
 8006d8e:	4a2b      	ldr	r2, [pc, #172]	; (8006e3c <main+0x1ac>)
 8006d90:	2100      	movs	r1, #0
 8006d92:	482b      	ldr	r0, [pc, #172]	; (8006e40 <main+0x1b0>)
 8006d94:	f012 ff46 	bl	8019c24 <osThreadNew>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	4a2a      	ldr	r2, [pc, #168]	; (8006e44 <main+0x1b4>)
 8006d9c:	6013      	str	r3, [r2, #0]

  /* creation of PCconnectionWat */
  PCconnectionWatHandle = osThreadNew(task_PCconnectionWatchDog, NULL, &PCconnectionWat_attributes);
 8006d9e:	4a2a      	ldr	r2, [pc, #168]	; (8006e48 <main+0x1b8>)
 8006da0:	2100      	movs	r1, #0
 8006da2:	482a      	ldr	r0, [pc, #168]	; (8006e4c <main+0x1bc>)
 8006da4:	f012 ff3e 	bl	8019c24 <osThreadNew>
 8006da8:	4603      	mov	r3, r0
 8006daa:	4a29      	ldr	r2, [pc, #164]	; (8006e50 <main+0x1c0>)
 8006dac:	6013      	str	r3, [r2, #0]

  /* creation of CardConnectionW */
  CardConnectionWHandle = osThreadNew(taks_CardConnectionWatchDog, NULL, &CardConnectionW_attributes);
 8006dae:	4a29      	ldr	r2, [pc, #164]	; (8006e54 <main+0x1c4>)
 8006db0:	2100      	movs	r1, #0
 8006db2:	4829      	ldr	r0, [pc, #164]	; (8006e58 <main+0x1c8>)
 8006db4:	f012 ff36 	bl	8019c24 <osThreadNew>
 8006db8:	4603      	mov	r3, r0
 8006dba:	4a28      	ldr	r2, [pc, #160]	; (8006e5c <main+0x1cc>)
 8006dbc:	6013      	str	r3, [r2, #0]

  /* creation of CardConnectionC */
  CardConnectionCHandle = osThreadNew(task_CardConnectionCheck, NULL, &CardConnectionC_attributes);
 8006dbe:	4a28      	ldr	r2, [pc, #160]	; (8006e60 <main+0x1d0>)
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4828      	ldr	r0, [pc, #160]	; (8006e64 <main+0x1d4>)
 8006dc4:	f012 ff2e 	bl	8019c24 <osThreadNew>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	4a27      	ldr	r2, [pc, #156]	; (8006e68 <main+0x1d8>)
 8006dcc:	6013      	str	r3, [r2, #0]

  /* creation of CardUpdateStatu */
  CardUpdateStatuHandle = osThreadNew(task_CardUpdateStatus, NULL, &CardUpdateStatu_attributes);
 8006dce:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <main+0x1dc>)
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4827      	ldr	r0, [pc, #156]	; (8006e70 <main+0x1e0>)
 8006dd4:	f012 ff26 	bl	8019c24 <osThreadNew>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	4a26      	ldr	r2, [pc, #152]	; (8006e74 <main+0x1e4>)
 8006ddc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8006dde:	f012 fefb 	bl	8019bd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006de2:	e7fe      	b.n	8006de2 <main+0x152>
 8006de4:	48000800 	.word	0x48000800
 8006de8:	20000b40 	.word	0x20000b40
 8006dec:	20000b94 	.word	0x20000b94
 8006df0:	200008d4 	.word	0x200008d4
 8006df4:	20000ba8 	.word	0x20000ba8
 8006df8:	20001184 	.word	0x20001184
 8006dfc:	0802369c 	.word	0x0802369c
 8006e00:	20000b0c 	.word	0x20000b0c
 8006e04:	080236ac 	.word	0x080236ac
 8006e08:	20000b10 	.word	0x20000b10
 8006e0c:	08023558 	.word	0x08023558
 8006e10:	08007c89 	.word	0x08007c89
 8006e14:	20000ae8 	.word	0x20000ae8
 8006e18:	0802357c 	.word	0x0802357c
 8006e1c:	08007c9b 	.word	0x08007c9b
 8006e20:	20000aec 	.word	0x20000aec
 8006e24:	080235a0 	.word	0x080235a0
 8006e28:	08007cc9 	.word	0x08007cc9
 8006e2c:	20000af0 	.word	0x20000af0
 8006e30:	080235c4 	.word	0x080235c4
 8006e34:	08007db9 	.word	0x08007db9
 8006e38:	20000af4 	.word	0x20000af4
 8006e3c:	080235e8 	.word	0x080235e8
 8006e40:	08007e1d 	.word	0x08007e1d
 8006e44:	20000af8 	.word	0x20000af8
 8006e48:	0802360c 	.word	0x0802360c
 8006e4c:	08008109 	.word	0x08008109
 8006e50:	20000afc 	.word	0x20000afc
 8006e54:	08023630 	.word	0x08023630
 8006e58:	0800814d 	.word	0x0800814d
 8006e5c:	20000b00 	.word	0x20000b00
 8006e60:	08023654 	.word	0x08023654
 8006e64:	0800819d 	.word	0x0800819d
 8006e68:	20000b04 	.word	0x20000b04
 8006e6c:	08023678 	.word	0x08023678
 8006e70:	080082e9 	.word	0x080082e9
 8006e74:	20000b08 	.word	0x20000b08

08006e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b094      	sub	sp, #80	; 0x50
 8006e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e7e:	f107 0318 	add.w	r3, r7, #24
 8006e82:	2238      	movs	r2, #56	; 0x38
 8006e84:	2100      	movs	r1, #0
 8006e86:	4618      	mov	r0, r3
 8006e88:	f019 fcef 	bl	802086a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e8c:	1d3b      	adds	r3, r7, #4
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	605a      	str	r2, [r3, #4]
 8006e94:	609a      	str	r2, [r3, #8]
 8006e96:	60da      	str	r2, [r3, #12]
 8006e98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e9e:	f006 fd1b 	bl	800d8d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8006ebc:	2312      	movs	r3, #18
 8006ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8006ec4:	2306      	movs	r3, #6
 8006ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ecc:	f107 0318 	add.w	r3, r7, #24
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f006 fdb5 	bl	800da40 <HAL_RCC_OscConfig>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8006edc:	f001 fae2 	bl	80084a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006ee0:	230f      	movs	r3, #15
 8006ee2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006eec:	2300      	movs	r3, #0
 8006eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006ef4:	1d3b      	adds	r3, r7, #4
 8006ef6:	2104      	movs	r1, #4
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f007 f8b3 	bl	800e064 <HAL_RCC_ClockConfig>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8006f04:	f001 face 	bl	80084a4 <Error_Handler>
  }
}
 8006f08:	bf00      	nop
 8006f0a:	3750      	adds	r7, #80	; 0x50
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08c      	sub	sp, #48	; 0x30
 8006f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8006f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	605a      	str	r2, [r3, #4]
 8006f20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006f22:	1d3b      	adds	r3, r7, #4
 8006f24:	2220      	movs	r2, #32
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f019 fc9e 	bl	802086a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8006f2e:	4b39      	ldr	r3, [pc, #228]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8006f36:	4b37      	ldr	r3, [pc, #220]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f38:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8006f3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006f3e:	4b35      	ldr	r3, [pc, #212]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006f44:	4b33      	ldr	r3, [pc, #204]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006f4a:	4b32      	ldr	r3, [pc, #200]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006f50:	4b30      	ldr	r3, [pc, #192]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006f56:	4b2f      	ldr	r3, [pc, #188]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f58:	2204      	movs	r2, #4
 8006f5a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006f5c:	4b2d      	ldr	r3, [pc, #180]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006f62:	4b2c      	ldr	r3, [pc, #176]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8006f68:	4b2a      	ldr	r3, [pc, #168]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006f6e:	4b29      	ldr	r3, [pc, #164]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006f76:	4b27      	ldr	r3, [pc, #156]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006f7c:	4b25      	ldr	r3, [pc, #148]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006f82:	4b24      	ldr	r3, [pc, #144]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006f90:	4b20      	ldr	r3, [pc, #128]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006f98:	481e      	ldr	r0, [pc, #120]	; (8007014 <MX_ADC1_Init+0x104>)
 8006f9a:	f002 fc9b 	bl	80098d4 <HAL_ADC_Init>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8006fa4:	f001 fa7e 	bl	80084a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4818      	ldr	r0, [pc, #96]	; (8007014 <MX_ADC1_Init+0x104>)
 8006fb4:	f003 ff5e 	bl	800ae74 <HAL_ADCEx_MultiModeConfigChannel>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8006fbe:	f001 fa71 	bl	80084a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <MX_ADC1_Init+0x108>)
 8006fc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006fc6:	2306      	movs	r3, #6
 8006fc8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8006fca:	2302      	movs	r3, #2
 8006fcc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006fce:	237f      	movs	r3, #127	; 0x7f
 8006fd0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006fd2:	2304      	movs	r3, #4
 8006fd4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006fda:	1d3b      	adds	r3, r7, #4
 8006fdc:	4619      	mov	r1, r3
 8006fde:	480d      	ldr	r0, [pc, #52]	; (8007014 <MX_ADC1_Init+0x104>)
 8006fe0:	f003 f986 	bl	800a2f0 <HAL_ADC_ConfigChannel>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8006fea:	f001 fa5b 	bl	80084a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006fee:	4b0b      	ldr	r3, [pc, #44]	; (800701c <MX_ADC1_Init+0x10c>)
 8006ff0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006ff6:	1d3b      	adds	r3, r7, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4806      	ldr	r0, [pc, #24]	; (8007014 <MX_ADC1_Init+0x104>)
 8006ffc:	f003 f978 	bl	800a2f0 <HAL_ADC_ConfigChannel>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8007006:	f001 fa4d 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800700a:	bf00      	nop
 800700c:	3730      	adds	r7, #48	; 0x30
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	2000045c 	.word	0x2000045c
 8007018:	2e300800 	.word	0x2e300800
 800701c:	2a000400 	.word	0x2a000400

08007020 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007026:	463b      	mov	r3, r7
 8007028:	2220      	movs	r2, #32
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f019 fc1c 	bl	802086a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8007032:	4b2b      	ldr	r3, [pc, #172]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007034:	4a2b      	ldr	r2, [pc, #172]	; (80070e4 <MX_ADC2_Init+0xc4>)
 8007036:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8007038:	4b29      	ldr	r3, [pc, #164]	; (80070e0 <MX_ADC2_Init+0xc0>)
 800703a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800703e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007040:	4b27      	ldr	r3, [pc, #156]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007042:	2200      	movs	r2, #0
 8007044:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007046:	4b26      	ldr	r3, [pc, #152]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007048:	2200      	movs	r2, #0
 800704a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800704c:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <MX_ADC2_Init+0xc0>)
 800704e:	2200      	movs	r2, #0
 8007050:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007052:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007054:	2200      	movs	r2, #0
 8007056:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007058:	4b21      	ldr	r3, [pc, #132]	; (80070e0 <MX_ADC2_Init+0xc0>)
 800705a:	2204      	movs	r2, #4
 800705c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800705e:	4b20      	ldr	r3, [pc, #128]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007060:	2200      	movs	r2, #0
 8007062:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8007064:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007066:	2200      	movs	r2, #0
 8007068:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800706a:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <MX_ADC2_Init+0xc0>)
 800706c:	2201      	movs	r2, #1
 800706e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007070:	4b1b      	ldr	r3, [pc, #108]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007078:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <MX_ADC2_Init+0xc0>)
 800707a:	2200      	movs	r2, #0
 800707c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800707e:	4b18      	ldr	r3, [pc, #96]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8007084:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800708c:	4b14      	ldr	r3, [pc, #80]	; (80070e0 <MX_ADC2_Init+0xc0>)
 800708e:	2200      	movs	r2, #0
 8007090:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8007092:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <MX_ADC2_Init+0xc0>)
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800709a:	4811      	ldr	r0, [pc, #68]	; (80070e0 <MX_ADC2_Init+0xc0>)
 800709c:	f002 fc1a 	bl	80098d4 <HAL_ADC_Init>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80070a6:	f001 f9fd 	bl	80084a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80070aa:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <MX_ADC2_Init+0xc8>)
 80070ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80070ae:	2306      	movs	r3, #6
 80070b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80070b2:	2302      	movs	r3, #2
 80070b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80070b6:	237f      	movs	r3, #127	; 0x7f
 80070b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80070ba:	2304      	movs	r3, #4
 80070bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80070c2:	463b      	mov	r3, r7
 80070c4:	4619      	mov	r1, r3
 80070c6:	4806      	ldr	r0, [pc, #24]	; (80070e0 <MX_ADC2_Init+0xc0>)
 80070c8:	f003 f912 	bl	800a2f0 <HAL_ADC_ConfigChannel>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80070d2:	f001 f9e7 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80070d6:	bf00      	nop
 80070d8:	3720      	adds	r7, #32
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	200004c8 	.word	0x200004c8
 80070e4:	50000100 	.word	0x50000100
 80070e8:	47520000 	.word	0x47520000

080070ec <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80070f2:	463b      	mov	r3, r7
 80070f4:	2220      	movs	r2, #32
 80070f6:	2100      	movs	r1, #0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f019 fbb6 	bl	802086a <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80070fe:	4b2b      	ldr	r3, [pc, #172]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007100:	4a2b      	ldr	r2, [pc, #172]	; (80071b0 <MX_ADC5_Init+0xc4>)
 8007102:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8007104:	4b29      	ldr	r3, [pc, #164]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007106:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800710a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800710c:	4b27      	ldr	r3, [pc, #156]	; (80071ac <MX_ADC5_Init+0xc0>)
 800710e:	2200      	movs	r2, #0
 8007110:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007112:	4b26      	ldr	r3, [pc, #152]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007114:	2200      	movs	r2, #0
 8007116:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8007118:	4b24      	ldr	r3, [pc, #144]	; (80071ac <MX_ADC5_Init+0xc0>)
 800711a:	2200      	movs	r2, #0
 800711c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800711e:	4b23      	ldr	r3, [pc, #140]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007120:	2200      	movs	r2, #0
 8007122:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007124:	4b21      	ldr	r3, [pc, #132]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007126:	2204      	movs	r2, #4
 8007128:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800712a:	4b20      	ldr	r3, [pc, #128]	; (80071ac <MX_ADC5_Init+0xc0>)
 800712c:	2200      	movs	r2, #0
 800712e:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8007130:	4b1e      	ldr	r3, [pc, #120]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007132:	2200      	movs	r2, #0
 8007134:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8007136:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007138:	2201      	movs	r2, #1
 800713a:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800713c:	4b1b      	ldr	r3, [pc, #108]	; (80071ac <MX_ADC5_Init+0xc0>)
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007144:	4b19      	ldr	r3, [pc, #100]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007146:	2200      	movs	r2, #0
 8007148:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800714a:	4b18      	ldr	r3, [pc, #96]	; (80071ac <MX_ADC5_Init+0xc0>)
 800714c:	2200      	movs	r2, #0
 800714e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8007150:	4b16      	ldr	r3, [pc, #88]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007158:	4b14      	ldr	r3, [pc, #80]	; (80071ac <MX_ADC5_Init+0xc0>)
 800715a:	2200      	movs	r2, #0
 800715c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800715e:	4b13      	ldr	r3, [pc, #76]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8007166:	4811      	ldr	r0, [pc, #68]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007168:	f002 fbb4 	bl	80098d4 <HAL_ADC_Init>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8007172:	f001 f997 	bl	80084a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007176:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <MX_ADC5_Init+0xc8>)
 8007178:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800717a:	2306      	movs	r3, #6
 800717c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800717e:	2302      	movs	r3, #2
 8007180:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007182:	237f      	movs	r3, #127	; 0x7f
 8007184:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007186:	2304      	movs	r3, #4
 8007188:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800718e:	463b      	mov	r3, r7
 8007190:	4619      	mov	r1, r3
 8007192:	4806      	ldr	r0, [pc, #24]	; (80071ac <MX_ADC5_Init+0xc0>)
 8007194:	f003 f8ac 	bl	800a2f0 <HAL_ADC_ConfigChannel>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800719e:	f001 f981 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80071a2:	bf00      	nop
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000534 	.word	0x20000534
 80071b0:	50000600 	.word	0x50000600
 80071b4:	04300002 	.word	0x04300002

080071b8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80071bc:	4b1b      	ldr	r3, [pc, #108]	; (800722c <MX_I2C4_Init+0x74>)
 80071be:	4a1c      	ldr	r2, [pc, #112]	; (8007230 <MX_I2C4_Init+0x78>)
 80071c0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0D9FF;
 80071c2:	4b1a      	ldr	r3, [pc, #104]	; (800722c <MX_I2C4_Init+0x74>)
 80071c4:	4a1b      	ldr	r2, [pc, #108]	; (8007234 <MX_I2C4_Init+0x7c>)
 80071c6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80071c8:	4b18      	ldr	r3, [pc, #96]	; (800722c <MX_I2C4_Init+0x74>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80071ce:	4b17      	ldr	r3, [pc, #92]	; (800722c <MX_I2C4_Init+0x74>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80071d4:	4b15      	ldr	r3, [pc, #84]	; (800722c <MX_I2C4_Init+0x74>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80071da:	4b14      	ldr	r3, [pc, #80]	; (800722c <MX_I2C4_Init+0x74>)
 80071dc:	2200      	movs	r2, #0
 80071de:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80071e0:	4b12      	ldr	r3, [pc, #72]	; (800722c <MX_I2C4_Init+0x74>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <MX_I2C4_Init+0x74>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80071ec:	4b0f      	ldr	r3, [pc, #60]	; (800722c <MX_I2C4_Init+0x74>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80071f2:	480e      	ldr	r0, [pc, #56]	; (800722c <MX_I2C4_Init+0x74>)
 80071f4:	f004 fd0a 	bl	800bc0c <HAL_I2C_Init>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80071fe:	f001 f951 	bl	80084a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007202:	2100      	movs	r1, #0
 8007204:	4809      	ldr	r0, [pc, #36]	; (800722c <MX_I2C4_Init+0x74>)
 8007206:	f004 fd9c 	bl	800bd42 <HAL_I2CEx_ConfigAnalogFilter>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8007210:	f001 f948 	bl	80084a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8007214:	2100      	movs	r1, #0
 8007216:	4805      	ldr	r0, [pc, #20]	; (800722c <MX_I2C4_Init+0x74>)
 8007218:	f004 fdde 	bl	800bdd8 <HAL_I2CEx_ConfigDigitalFilter>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8007222:	f001 f93f 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8007226:	bf00      	nop
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	200006c0 	.word	0x200006c0
 8007230:	40008400 	.word	0x40008400
 8007234:	20b0d9ff 	.word	0x20b0d9ff

08007238 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08e      	sub	sp, #56	; 0x38
 800723c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800723e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	605a      	str	r2, [r3, #4]
 8007248:	609a      	str	r2, [r3, #8]
 800724a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800724c:	f107 031c 	add.w	r3, r7, #28
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	605a      	str	r2, [r3, #4]
 8007256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007258:	463b      	mov	r3, r7
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	605a      	str	r2, [r3, #4]
 8007260:	609a      	str	r2, [r3, #8]
 8007262:	60da      	str	r2, [r3, #12]
 8007264:	611a      	str	r2, [r3, #16]
 8007266:	615a      	str	r2, [r3, #20]
 8007268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800726a:	4b32      	ldr	r3, [pc, #200]	; (8007334 <MX_TIM3_Init+0xfc>)
 800726c:	4a32      	ldr	r2, [pc, #200]	; (8007338 <MX_TIM3_Init+0x100>)
 800726e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8007270:	4b30      	ldr	r3, [pc, #192]	; (8007334 <MX_TIM3_Init+0xfc>)
 8007272:	2209      	movs	r2, #9
 8007274:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007276:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <MX_TIM3_Init+0xfc>)
 8007278:	2200      	movs	r2, #0
 800727a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800727c:	4b2d      	ldr	r3, [pc, #180]	; (8007334 <MX_TIM3_Init+0xfc>)
 800727e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007284:	4b2b      	ldr	r3, [pc, #172]	; (8007334 <MX_TIM3_Init+0xfc>)
 8007286:	2200      	movs	r2, #0
 8007288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800728a:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <MX_TIM3_Init+0xfc>)
 800728c:	2280      	movs	r2, #128	; 0x80
 800728e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007290:	4828      	ldr	r0, [pc, #160]	; (8007334 <MX_TIM3_Init+0xfc>)
 8007292:	f007 fb83 	bl	800e99c <HAL_TIM_Base_Init>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800729c:	f001 f902 	bl	80084a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80072a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80072a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072aa:	4619      	mov	r1, r3
 80072ac:	4821      	ldr	r0, [pc, #132]	; (8007334 <MX_TIM3_Init+0xfc>)
 80072ae:	f008 f81d 	bl	800f2ec <HAL_TIM_ConfigClockSource>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80072b8:	f001 f8f4 	bl	80084a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80072bc:	481d      	ldr	r0, [pc, #116]	; (8007334 <MX_TIM3_Init+0xfc>)
 80072be:	f007 fc3d 	bl	800eb3c <HAL_TIM_PWM_Init>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80072c8:	f001 f8ec 	bl	80084a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072d0:	2300      	movs	r3, #0
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80072d4:	f107 031c 	add.w	r3, r7, #28
 80072d8:	4619      	mov	r1, r3
 80072da:	4816      	ldr	r0, [pc, #88]	; (8007334 <MX_TIM3_Init+0xfc>)
 80072dc:	f008 fde4 	bl	800fea8 <HAL_TIMEx_MasterConfigSynchronization>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80072e6:	f001 f8dd 	bl	80084a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072ea:	2360      	movs	r3, #96	; 0x60
 80072ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80072f2:	2300      	movs	r3, #0
 80072f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80072f6:	2300      	movs	r3, #0
 80072f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80072fa:	463b      	mov	r3, r7
 80072fc:	2208      	movs	r2, #8
 80072fe:	4619      	mov	r1, r3
 8007300:	480c      	ldr	r0, [pc, #48]	; (8007334 <MX_TIM3_Init+0xfc>)
 8007302:	f007 fedf 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800730c:	f001 f8ca 	bl	80084a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007310:	463b      	mov	r3, r7
 8007312:	220c      	movs	r2, #12
 8007314:	4619      	mov	r1, r3
 8007316:	4807      	ldr	r0, [pc, #28]	; (8007334 <MX_TIM3_Init+0xfc>)
 8007318:	f007 fed4 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8007322:	f001 f8bf 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007326:	4803      	ldr	r0, [pc, #12]	; (8007334 <MX_TIM3_Init+0xfc>)
 8007328:	f001 fb9c 	bl	8008a64 <HAL_TIM_MspPostInit>

}
 800732c:	bf00      	nop
 800732e:	3738      	adds	r7, #56	; 0x38
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000714 	.word	0x20000714
 8007338:	40000400 	.word	0x40000400

0800733c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08e      	sub	sp, #56	; 0x38
 8007340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	605a      	str	r2, [r3, #4]
 800734c:	609a      	str	r2, [r3, #8]
 800734e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007350:	f107 031c 	add.w	r3, r7, #28
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	605a      	str	r2, [r3, #4]
 800735a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800735c:	463b      	mov	r3, r7
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	605a      	str	r2, [r3, #4]
 8007364:	609a      	str	r2, [r3, #8]
 8007366:	60da      	str	r2, [r3, #12]
 8007368:	611a      	str	r2, [r3, #16]
 800736a:	615a      	str	r2, [r3, #20]
 800736c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800736e:	4b2d      	ldr	r3, [pc, #180]	; (8007424 <MX_TIM5_Init+0xe8>)
 8007370:	4a2d      	ldr	r2, [pc, #180]	; (8007428 <MX_TIM5_Init+0xec>)
 8007372:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10-1;
 8007374:	4b2b      	ldr	r3, [pc, #172]	; (8007424 <MX_TIM5_Init+0xe8>)
 8007376:	2209      	movs	r2, #9
 8007378:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800737a:	4b2a      	ldr	r3, [pc, #168]	; (8007424 <MX_TIM5_Init+0xe8>)
 800737c:	2200      	movs	r2, #0
 800737e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8007380:	4b28      	ldr	r3, [pc, #160]	; (8007424 <MX_TIM5_Init+0xe8>)
 8007382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007386:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007388:	4b26      	ldr	r3, [pc, #152]	; (8007424 <MX_TIM5_Init+0xe8>)
 800738a:	2200      	movs	r2, #0
 800738c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800738e:	4b25      	ldr	r3, [pc, #148]	; (8007424 <MX_TIM5_Init+0xe8>)
 8007390:	2280      	movs	r2, #128	; 0x80
 8007392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007394:	4823      	ldr	r0, [pc, #140]	; (8007424 <MX_TIM5_Init+0xe8>)
 8007396:	f007 fb01 	bl	800e99c <HAL_TIM_Base_Init>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80073a0:	f001 f880 	bl	80084a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80073aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073ae:	4619      	mov	r1, r3
 80073b0:	481c      	ldr	r0, [pc, #112]	; (8007424 <MX_TIM5_Init+0xe8>)
 80073b2:	f007 ff9b 	bl	800f2ec <HAL_TIM_ConfigClockSource>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80073bc:	f001 f872 	bl	80084a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80073c0:	4818      	ldr	r0, [pc, #96]	; (8007424 <MX_TIM5_Init+0xe8>)
 80073c2:	f007 fbbb 	bl	800eb3c <HAL_TIM_PWM_Init>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80073cc:	f001 f86a 	bl	80084a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80073d8:	f107 031c 	add.w	r3, r7, #28
 80073dc:	4619      	mov	r1, r3
 80073de:	4811      	ldr	r0, [pc, #68]	; (8007424 <MX_TIM5_Init+0xe8>)
 80073e0:	f008 fd62 	bl	800fea8 <HAL_TIMEx_MasterConfigSynchronization>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80073ea:	f001 f85b 	bl	80084a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80073ee:	2360      	movs	r3, #96	; 0x60
 80073f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80073fe:	463b      	mov	r3, r7
 8007400:	2200      	movs	r2, #0
 8007402:	4619      	mov	r1, r3
 8007404:	4807      	ldr	r0, [pc, #28]	; (8007424 <MX_TIM5_Init+0xe8>)
 8007406:	f007 fe5d 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8007410:	f001 f848 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8007414:	4803      	ldr	r0, [pc, #12]	; (8007424 <MX_TIM5_Init+0xe8>)
 8007416:	f001 fb25 	bl	8008a64 <HAL_TIM_MspPostInit>

}
 800741a:	bf00      	nop
 800741c:	3738      	adds	r7, #56	; 0x38
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20000760 	.word	0x20000760
 8007428:	40000c00 	.word	0x40000c00

0800742c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007430:	4b22      	ldr	r3, [pc, #136]	; (80074bc <MX_UART4_Init+0x90>)
 8007432:	4a23      	ldr	r2, [pc, #140]	; (80074c0 <MX_UART4_Init+0x94>)
 8007434:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007436:	4b21      	ldr	r3, [pc, #132]	; (80074bc <MX_UART4_Init+0x90>)
 8007438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800743c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800743e:	4b1f      	ldr	r3, [pc, #124]	; (80074bc <MX_UART4_Init+0x90>)
 8007440:	2200      	movs	r2, #0
 8007442:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007444:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <MX_UART4_Init+0x90>)
 8007446:	2200      	movs	r2, #0
 8007448:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800744a:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <MX_UART4_Init+0x90>)
 800744c:	2200      	movs	r2, #0
 800744e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007450:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <MX_UART4_Init+0x90>)
 8007452:	220c      	movs	r2, #12
 8007454:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007456:	4b19      	ldr	r3, [pc, #100]	; (80074bc <MX_UART4_Init+0x90>)
 8007458:	2200      	movs	r2, #0
 800745a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800745c:	4b17      	ldr	r3, [pc, #92]	; (80074bc <MX_UART4_Init+0x90>)
 800745e:	2200      	movs	r2, #0
 8007460:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007462:	4b16      	ldr	r3, [pc, #88]	; (80074bc <MX_UART4_Init+0x90>)
 8007464:	2200      	movs	r2, #0
 8007466:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007468:	4b14      	ldr	r3, [pc, #80]	; (80074bc <MX_UART4_Init+0x90>)
 800746a:	2200      	movs	r2, #0
 800746c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800746e:	4b13      	ldr	r3, [pc, #76]	; (80074bc <MX_UART4_Init+0x90>)
 8007470:	2200      	movs	r2, #0
 8007472:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007474:	4811      	ldr	r0, [pc, #68]	; (80074bc <MX_UART4_Init+0x90>)
 8007476:	f008 fdf3 	bl	8010060 <HAL_UART_Init>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8007480:	f001 f810 	bl	80084a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007484:	2100      	movs	r1, #0
 8007486:	480d      	ldr	r0, [pc, #52]	; (80074bc <MX_UART4_Init+0x90>)
 8007488:	f00a ff4c 	bl	8012324 <HAL_UARTEx_SetTxFifoThreshold>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8007492:	f001 f807 	bl	80084a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007496:	2100      	movs	r1, #0
 8007498:	4808      	ldr	r0, [pc, #32]	; (80074bc <MX_UART4_Init+0x90>)
 800749a:	f00a ff81 	bl	80123a0 <HAL_UARTEx_SetRxFifoThreshold>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80074a4:	f000 fffe 	bl	80084a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80074a8:	4804      	ldr	r0, [pc, #16]	; (80074bc <MX_UART4_Init+0x90>)
 80074aa:	f00a ff02 	bl	80122b2 <HAL_UARTEx_DisableFifoMode>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80074b4:	f000 fff6 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80074b8:	bf00      	nop
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200007ac 	.word	0x200007ac
 80074c0:	40004c00 	.word	0x40004c00

080074c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80074c8:	4b24      	ldr	r3, [pc, #144]	; (800755c <MX_USART1_UART_Init+0x98>)
 80074ca:	4a25      	ldr	r2, [pc, #148]	; (8007560 <MX_USART1_UART_Init+0x9c>)
 80074cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 18000000;
 80074ce:	4b23      	ldr	r3, [pc, #140]	; (800755c <MX_USART1_UART_Init+0x98>)
 80074d0:	4a24      	ldr	r2, [pc, #144]	; (8007564 <MX_USART1_UART_Init+0xa0>)
 80074d2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80074d4:	4b21      	ldr	r3, [pc, #132]	; (800755c <MX_USART1_UART_Init+0x98>)
 80074d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80074dc:	4b1f      	ldr	r3, [pc, #124]	; (800755c <MX_USART1_UART_Init+0x98>)
 80074de:	2200      	movs	r2, #0
 80074e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80074e2:	4b1e      	ldr	r3, [pc, #120]	; (800755c <MX_USART1_UART_Init+0x98>)
 80074e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074e8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80074ea:	4b1c      	ldr	r3, [pc, #112]	; (800755c <MX_USART1_UART_Init+0x98>)
 80074ec:	220c      	movs	r2, #12
 80074ee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074f0:	4b1a      	ldr	r3, [pc, #104]	; (800755c <MX_USART1_UART_Init+0x98>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80074f6:	4b19      	ldr	r3, [pc, #100]	; (800755c <MX_USART1_UART_Init+0x98>)
 80074f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80074fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80074fe:	4b17      	ldr	r3, [pc, #92]	; (800755c <MX_USART1_UART_Init+0x98>)
 8007500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007504:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007506:	4b15      	ldr	r3, [pc, #84]	; (800755c <MX_USART1_UART_Init+0x98>)
 8007508:	2200      	movs	r2, #0
 800750a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800750c:	4b13      	ldr	r3, [pc, #76]	; (800755c <MX_USART1_UART_Init+0x98>)
 800750e:	2200      	movs	r2, #0
 8007510:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007512:	4812      	ldr	r0, [pc, #72]	; (800755c <MX_USART1_UART_Init+0x98>)
 8007514:	f008 fda4 	bl	8010060 <HAL_UART_Init>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800751e:	f000 ffc1 	bl	80084a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007522:	2100      	movs	r1, #0
 8007524:	480d      	ldr	r0, [pc, #52]	; (800755c <MX_USART1_UART_Init+0x98>)
 8007526:	f00a fefd 	bl	8012324 <HAL_UARTEx_SetTxFifoThreshold>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8007530:	f000 ffb8 	bl	80084a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007534:	2100      	movs	r1, #0
 8007536:	4809      	ldr	r0, [pc, #36]	; (800755c <MX_USART1_UART_Init+0x98>)
 8007538:	f00a ff32 	bl	80123a0 <HAL_UARTEx_SetRxFifoThreshold>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8007542:	f000 ffaf 	bl	80084a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007546:	4805      	ldr	r0, [pc, #20]	; (800755c <MX_USART1_UART_Init+0x98>)
 8007548:	f00a feb3 	bl	80122b2 <HAL_UARTEx_DisableFifoMode>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8007552:	f000 ffa7 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007556:	bf00      	nop
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000840 	.word	0x20000840
 8007560:	40013800 	.word	0x40013800
 8007564:	0112a880 	.word	0x0112a880

08007568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800756c:	4b24      	ldr	r3, [pc, #144]	; (8007600 <MX_USART2_UART_Init+0x98>)
 800756e:	4a25      	ldr	r2, [pc, #148]	; (8007604 <MX_USART2_UART_Init+0x9c>)
 8007570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007572:	4b23      	ldr	r3, [pc, #140]	; (8007600 <MX_USART2_UART_Init+0x98>)
 8007574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800757a:	4b21      	ldr	r3, [pc, #132]	; (8007600 <MX_USART2_UART_Init+0x98>)
 800757c:	2200      	movs	r2, #0
 800757e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007580:	4b1f      	ldr	r3, [pc, #124]	; (8007600 <MX_USART2_UART_Init+0x98>)
 8007582:	2200      	movs	r2, #0
 8007584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007586:	4b1e      	ldr	r3, [pc, #120]	; (8007600 <MX_USART2_UART_Init+0x98>)
 8007588:	2200      	movs	r2, #0
 800758a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800758c:	4b1c      	ldr	r3, [pc, #112]	; (8007600 <MX_USART2_UART_Init+0x98>)
 800758e:	220c      	movs	r2, #12
 8007590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007592:	4b1b      	ldr	r3, [pc, #108]	; (8007600 <MX_USART2_UART_Init+0x98>)
 8007594:	2200      	movs	r2, #0
 8007596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007598:	4b19      	ldr	r3, [pc, #100]	; (8007600 <MX_USART2_UART_Init+0x98>)
 800759a:	2200      	movs	r2, #0
 800759c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800759e:	4b18      	ldr	r3, [pc, #96]	; (8007600 <MX_USART2_UART_Init+0x98>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80075a4:	4b16      	ldr	r3, [pc, #88]	; (8007600 <MX_USART2_UART_Init+0x98>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80075aa:	4b15      	ldr	r3, [pc, #84]	; (8007600 <MX_USART2_UART_Init+0x98>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80075b0:	2300      	movs	r3, #0
 80075b2:	2200      	movs	r2, #0
 80075b4:	2100      	movs	r1, #0
 80075b6:	4812      	ldr	r0, [pc, #72]	; (8007600 <MX_USART2_UART_Init+0x98>)
 80075b8:	f00a fdf4 	bl	80121a4 <HAL_RS485Ex_Init>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 80075c2:	f000 ff6f 	bl	80084a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075c6:	2100      	movs	r1, #0
 80075c8:	480d      	ldr	r0, [pc, #52]	; (8007600 <MX_USART2_UART_Init+0x98>)
 80075ca:	f00a feab 	bl	8012324 <HAL_UARTEx_SetTxFifoThreshold>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 80075d4:	f000 ff66 	bl	80084a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075d8:	2100      	movs	r1, #0
 80075da:	4809      	ldr	r0, [pc, #36]	; (8007600 <MX_USART2_UART_Init+0x98>)
 80075dc:	f00a fee0 	bl	80123a0 <HAL_UARTEx_SetRxFifoThreshold>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 80075e6:	f000 ff5d 	bl	80084a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80075ea:	4805      	ldr	r0, [pc, #20]	; (8007600 <MX_USART2_UART_Init+0x98>)
 80075ec:	f00a fe61 	bl	80122b2 <HAL_UARTEx_DisableFifoMode>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 80075f6:	f000 ff55 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80075fa:	bf00      	nop
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200008d4 	.word	0x200008d4
 8007604:	40004400 	.word	0x40004400

08007608 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800760e:	463b      	mov	r3, r7
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	609a      	str	r2, [r3, #8]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	611a      	str	r2, [r3, #16]
 800761c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800761e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007622:	f7ff f9e7 	bl	80069f4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007626:	2002      	movs	r0, #2
 8007628:	f7ff f9cc 	bl	80069c4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800762c:	2310      	movs	r3, #16
 800762e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007630:	2303      	movs	r3, #3
 8007632:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007638:	463b      	mov	r3, r7
 800763a:	4619      	mov	r1, r3
 800763c:	4838      	ldr	r0, [pc, #224]	; (8007720 <MX_UCPD1_Init+0x118>)
 800763e:	f00b f9ed 	bl	8012a1c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8007642:	2340      	movs	r3, #64	; 0x40
 8007644:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007646:	2303      	movs	r3, #3
 8007648:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800764e:	463b      	mov	r3, r7
 8007650:	4619      	mov	r1, r3
 8007652:	4833      	ldr	r0, [pc, #204]	; (8007720 <MX_UCPD1_Init+0x118>)
 8007654:	f00b f9e2 	bl	8012a1c <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_UCPD1_RX);
 8007658:	2272      	movs	r2, #114	; 0x72
 800765a:	2102      	movs	r1, #2
 800765c:	4831      	ldr	r0, [pc, #196]	; (8007724 <MX_UCPD1_Init+0x11c>)
 800765e:	f7ff faed 	bl	8006c3c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8007662:	2200      	movs	r2, #0
 8007664:	2102      	movs	r1, #2
 8007666:	482f      	ldr	r0, [pc, #188]	; (8007724 <MX_UCPD1_Init+0x11c>)
 8007668:	f7ff f9dc 	bl	8006a24 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800766c:	2200      	movs	r2, #0
 800766e:	2102      	movs	r1, #2
 8007670:	482c      	ldr	r0, [pc, #176]	; (8007724 <MX_UCPD1_Init+0x11c>)
 8007672:	f7ff fabd 	bl	8006bf0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8007676:	2200      	movs	r2, #0
 8007678:	2102      	movs	r1, #2
 800767a:	482a      	ldr	r0, [pc, #168]	; (8007724 <MX_UCPD1_Init+0x11c>)
 800767c:	f7ff f9fa 	bl	8006a74 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8007680:	2200      	movs	r2, #0
 8007682:	2102      	movs	r1, #2
 8007684:	4827      	ldr	r0, [pc, #156]	; (8007724 <MX_UCPD1_Init+0x11c>)
 8007686:	f7ff fa1b 	bl	8006ac0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800768a:	2280      	movs	r2, #128	; 0x80
 800768c:	2102      	movs	r1, #2
 800768e:	4825      	ldr	r0, [pc, #148]	; (8007724 <MX_UCPD1_Init+0x11c>)
 8007690:	f7ff fa3c 	bl	8006b0c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8007694:	2200      	movs	r2, #0
 8007696:	2102      	movs	r1, #2
 8007698:	4822      	ldr	r0, [pc, #136]	; (8007724 <MX_UCPD1_Init+0x11c>)
 800769a:	f7ff fa5d 	bl	8006b58 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 800769e:	2200      	movs	r2, #0
 80076a0:	2102      	movs	r1, #2
 80076a2:	4820      	ldr	r0, [pc, #128]	; (8007724 <MX_UCPD1_Init+0x11c>)
 80076a4:	f7ff fa7e 	bl	8006ba4 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD1_TX);
 80076a8:	2273      	movs	r2, #115	; 0x73
 80076aa:	2103      	movs	r1, #3
 80076ac:	481d      	ldr	r0, [pc, #116]	; (8007724 <MX_UCPD1_Init+0x11c>)
 80076ae:	f7ff fac5 	bl	8006c3c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80076b2:	2210      	movs	r2, #16
 80076b4:	2103      	movs	r1, #3
 80076b6:	481b      	ldr	r0, [pc, #108]	; (8007724 <MX_UCPD1_Init+0x11c>)
 80076b8:	f7ff f9b4 	bl	8006a24 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 80076bc:	2200      	movs	r2, #0
 80076be:	2103      	movs	r1, #3
 80076c0:	4818      	ldr	r0, [pc, #96]	; (8007724 <MX_UCPD1_Init+0x11c>)
 80076c2:	f7ff fa95 	bl	8006bf0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80076c6:	2200      	movs	r2, #0
 80076c8:	2103      	movs	r1, #3
 80076ca:	4816      	ldr	r0, [pc, #88]	; (8007724 <MX_UCPD1_Init+0x11c>)
 80076cc:	f7ff f9d2 	bl	8006a74 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80076d0:	2200      	movs	r2, #0
 80076d2:	2103      	movs	r1, #3
 80076d4:	4813      	ldr	r0, [pc, #76]	; (8007724 <MX_UCPD1_Init+0x11c>)
 80076d6:	f7ff f9f3 	bl	8006ac0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80076da:	2280      	movs	r2, #128	; 0x80
 80076dc:	2103      	movs	r1, #3
 80076de:	4811      	ldr	r0, [pc, #68]	; (8007724 <MX_UCPD1_Init+0x11c>)
 80076e0:	f7ff fa14 	bl	8006b0c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 80076e4:	2200      	movs	r2, #0
 80076e6:	2103      	movs	r1, #3
 80076e8:	480e      	ldr	r0, [pc, #56]	; (8007724 <MX_UCPD1_Init+0x11c>)
 80076ea:	f7ff fa35 	bl	8006b58 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 80076ee:	2200      	movs	r2, #0
 80076f0:	2103      	movs	r1, #3
 80076f2:	480c      	ldr	r0, [pc, #48]	; (8007724 <MX_UCPD1_Init+0x11c>)
 80076f4:	f7ff fa56 	bl	8006ba4 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80076f8:	f7ff f8c4 	bl	8006884 <__NVIC_GetPriorityGrouping>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2200      	movs	r2, #0
 8007700:	2105      	movs	r1, #5
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff f914 	bl	8006930 <NVIC_EncodePriority>
 8007708:	4603      	mov	r3, r0
 800770a:	4619      	mov	r1, r3
 800770c:	203f      	movs	r0, #63	; 0x3f
 800770e:	f7ff f8e5 	bl	80068dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 8007712:	203f      	movs	r0, #63	; 0x3f
 8007714:	f7ff f8c4 	bl	80068a0 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8007718:	bf00      	nop
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	48000400 	.word	0x48000400
 8007724:	40020000 	.word	0x40020000

08007728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800772e:	4b40      	ldr	r3, [pc, #256]	; (8007830 <MX_DMA_Init+0x108>)
 8007730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007732:	4a3f      	ldr	r2, [pc, #252]	; (8007830 <MX_DMA_Init+0x108>)
 8007734:	f043 0304 	orr.w	r3, r3, #4
 8007738:	6493      	str	r3, [r2, #72]	; 0x48
 800773a:	4b3d      	ldr	r3, [pc, #244]	; (8007830 <MX_DMA_Init+0x108>)
 800773c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007746:	4b3a      	ldr	r3, [pc, #232]	; (8007830 <MX_DMA_Init+0x108>)
 8007748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800774a:	4a39      	ldr	r2, [pc, #228]	; (8007830 <MX_DMA_Init+0x108>)
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	6493      	str	r3, [r2, #72]	; 0x48
 8007752:	4b37      	ldr	r3, [pc, #220]	; (8007830 <MX_DMA_Init+0x108>)
 8007754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	60bb      	str	r3, [r7, #8]
 800775c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800775e:	4b34      	ldr	r3, [pc, #208]	; (8007830 <MX_DMA_Init+0x108>)
 8007760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007762:	4a33      	ldr	r2, [pc, #204]	; (8007830 <MX_DMA_Init+0x108>)
 8007764:	f043 0302 	orr.w	r3, r3, #2
 8007768:	6493      	str	r3, [r2, #72]	; 0x48
 800776a:	4b31      	ldr	r3, [pc, #196]	; (8007830 <MX_DMA_Init+0x108>)
 800776c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8007776:	2200      	movs	r2, #0
 8007778:	2105      	movs	r1, #5
 800777a:	200b      	movs	r0, #11
 800777c:	f003 fd3a 	bl	800b1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007780:	200b      	movs	r0, #11
 8007782:	f003 fd51 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8007786:	2200      	movs	r2, #0
 8007788:	2105      	movs	r1, #5
 800778a:	200c      	movs	r0, #12
 800778c:	f003 fd32 	bl	800b1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007790:	200c      	movs	r0, #12
 8007792:	f003 fd49 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8007796:	f7ff f875 	bl	8006884 <__NVIC_GetPriorityGrouping>
 800779a:	4603      	mov	r3, r0
 800779c:	2200      	movs	r2, #0
 800779e:	2105      	movs	r1, #5
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff f8c5 	bl	8006930 <NVIC_EncodePriority>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4619      	mov	r1, r3
 80077aa:	200d      	movs	r0, #13
 80077ac:	f7ff f896 	bl	80068dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80077b0:	200d      	movs	r0, #13
 80077b2:	f7ff f875 	bl	80068a0 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80077b6:	f7ff f865 	bl	8006884 <__NVIC_GetPriorityGrouping>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2200      	movs	r2, #0
 80077be:	2105      	movs	r1, #5
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff f8b5 	bl	8006930 <NVIC_EncodePriority>
 80077c6:	4603      	mov	r3, r0
 80077c8:	4619      	mov	r1, r3
 80077ca:	200e      	movs	r0, #14
 80077cc:	f7ff f886 	bl	80068dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80077d0:	200e      	movs	r0, #14
 80077d2:	f7ff f865 	bl	80068a0 <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80077d6:	2200      	movs	r2, #0
 80077d8:	2105      	movs	r1, #5
 80077da:	200f      	movs	r0, #15
 80077dc:	f003 fd0a 	bl	800b1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80077e0:	200f      	movs	r0, #15
 80077e2:	f003 fd21 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80077e6:	2200      	movs	r2, #0
 80077e8:	2105      	movs	r1, #5
 80077ea:	2010      	movs	r0, #16
 80077ec:	f003 fd02 	bl	800b1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80077f0:	2010      	movs	r0, #16
 80077f2:	f003 fd19 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80077f6:	2200      	movs	r2, #0
 80077f8:	2105      	movs	r1, #5
 80077fa:	2011      	movs	r0, #17
 80077fc:	f003 fcfa 	bl	800b1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8007800:	2011      	movs	r0, #17
 8007802:	f003 fd11 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8007806:	2200      	movs	r2, #0
 8007808:	2105      	movs	r1, #5
 800780a:	2038      	movs	r0, #56	; 0x38
 800780c:	f003 fcf2 	bl	800b1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8007810:	2038      	movs	r0, #56	; 0x38
 8007812:	f003 fd09 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 5, 0);
 8007816:	2200      	movs	r2, #0
 8007818:	2105      	movs	r1, #5
 800781a:	2060      	movs	r0, #96	; 0x60
 800781c:	f003 fcea 	bl	800b1f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 8007820:	2060      	movs	r0, #96	; 0x60
 8007822:	f003 fd01 	bl	800b228 <HAL_NVIC_EnableIRQ>

}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	40021000 	.word	0x40021000

08007834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800783a:	f107 0314 	add.w	r3, r7, #20
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	605a      	str	r2, [r3, #4]
 8007844:	609a      	str	r2, [r3, #8]
 8007846:	60da      	str	r2, [r3, #12]
 8007848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800784a:	4b67      	ldr	r3, [pc, #412]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 800784c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784e:	4a66      	ldr	r2, [pc, #408]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 8007850:	f043 0304 	orr.w	r3, r3, #4
 8007854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007856:	4b64      	ldr	r3, [pc, #400]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 8007858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007862:	4b61      	ldr	r3, [pc, #388]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 8007864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007866:	4a60      	ldr	r2, [pc, #384]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 8007868:	f043 0320 	orr.w	r3, r3, #32
 800786c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800786e:	4b5e      	ldr	r3, [pc, #376]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 8007870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800787a:	4b5b      	ldr	r3, [pc, #364]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 800787c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787e:	4a5a      	ldr	r2, [pc, #360]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 8007880:	f043 0301 	orr.w	r3, r3, #1
 8007884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007886:	4b58      	ldr	r3, [pc, #352]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 8007888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	60bb      	str	r3, [r7, #8]
 8007890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007892:	4b55      	ldr	r3, [pc, #340]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 8007894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007896:	4a54      	ldr	r2, [pc, #336]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 8007898:	f043 0302 	orr.w	r3, r3, #2
 800789c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800789e:	4b52      	ldr	r3, [pc, #328]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 80078a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80078aa:	4b4f      	ldr	r3, [pc, #316]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 80078ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ae:	4a4e      	ldr	r2, [pc, #312]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 80078b0:	f043 0308 	orr.w	r3, r3, #8
 80078b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078b6:	4b4c      	ldr	r3, [pc, #304]	; (80079e8 <MX_GPIO_Init+0x1b4>)
 80078b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ba:	f003 0308 	and.w	r3, r3, #8
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RLANESEL1_OUT_Pin|RLANEEN_OUT_Pin|TDI_OUT_Pin|TCK_OUT_Pin
 80078c2:	2200      	movs	r2, #0
 80078c4:	f24d 211d 	movw	r1, #53789	; 0xd21d
 80078c8:	4848      	ldr	r0, [pc, #288]	; (80079ec <MX_GPIO_Init+0x1b8>)
 80078ca:	f004 f987 	bl	800bbdc <HAL_GPIO_WritePin>
                          |TMS_OUT_Pin|PWR5VEN_OUT_Pin|PWR3V3_EN_OUT_Pin|DEN_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RLANESEL2_OUT_GPIO_Port, RLANESEL2_OUT_Pin, GPIO_PIN_RESET);
 80078ce:	2200      	movs	r2, #0
 80078d0:	2102      	movs	r1, #2
 80078d2:	4847      	ldr	r0, [pc, #284]	; (80079f0 <MX_GPIO_Init+0x1bc>)
 80078d4:	f004 f982 	bl	800bbdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TLANESEL0_OUT_Pin|TLANEEN_OUT_Pin|TLANESEL2_OUT_Pin|TLANESEL1_OUT_Pin
 80078d8:	2200      	movs	r2, #0
 80078da:	f248 41e1 	movw	r1, #34017	; 0x84e1
 80078de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078e2:	f004 f97b 	bl	800bbdc <HAL_GPIO_WritePin>
                          |DFUEN_OUT_Pin|ESP32_EN_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_OUT_Pin|LED2_OUT_Pin|LED3_OUT_Pin, GPIO_PIN_RESET);
 80078e6:	2200      	movs	r2, #0
 80078e8:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80078ec:	4841      	ldr	r0, [pc, #260]	; (80079f4 <MX_GPIO_Init+0x1c0>)
 80078ee:	f004 f975 	bl	800bbdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRVCC_EN_OUT_GPIO_Port, PWRVCC_EN_OUT_Pin, GPIO_PIN_RESET);
 80078f2:	2200      	movs	r2, #0
 80078f4:	2104      	movs	r1, #4
 80078f6:	4840      	ldr	r0, [pc, #256]	; (80079f8 <MX_GPIO_Init+0x1c4>)
 80078f8:	f004 f970 	bl	800bbdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEST_BUTTON_Pin TDO_IN_Pin */
  GPIO_InitStruct.Pin = TEST_BUTTON_Pin|TDO_IN_Pin;
 80078fc:	f242 0302 	movw	r3, #8194	; 0x2002
 8007900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007902:	2300      	movs	r3, #0
 8007904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007906:	2300      	movs	r3, #0
 8007908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800790a:	f107 0314 	add.w	r3, r7, #20
 800790e:	4619      	mov	r1, r3
 8007910:	4836      	ldr	r0, [pc, #216]	; (80079ec <MX_GPIO_Init+0x1b8>)
 8007912:	f003 ffc9 	bl	800b8a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RLANESEL1_OUT_Pin RLANEEN_OUT_Pin TDI_OUT_Pin TCK_OUT_Pin
                           TMS_OUT_Pin PWR5VEN_OUT_Pin PWR3V3_EN_OUT_Pin DEN_OUT_Pin */
  GPIO_InitStruct.Pin = RLANESEL1_OUT_Pin|RLANEEN_OUT_Pin|TDI_OUT_Pin|TCK_OUT_Pin
 8007916:	f24d 231d 	movw	r3, #53789	; 0xd21d
 800791a:	617b      	str	r3, [r7, #20]
                          |TMS_OUT_Pin|PWR5VEN_OUT_Pin|PWR3V3_EN_OUT_Pin|DEN_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800791c:	2301      	movs	r3, #1
 800791e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007924:	2300      	movs	r3, #0
 8007926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007928:	f107 0314 	add.w	r3, r7, #20
 800792c:	4619      	mov	r1, r3
 800792e:	482f      	ldr	r0, [pc, #188]	; (80079ec <MX_GPIO_Init+0x1b8>)
 8007930:	f003 ffba 	bl	800b8a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RLANESEL2_OUT_Pin */
  GPIO_InitStruct.Pin = RLANESEL2_OUT_Pin;
 8007934:	2302      	movs	r3, #2
 8007936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007938:	2301      	movs	r3, #1
 800793a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800793c:	2300      	movs	r3, #0
 800793e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007940:	2300      	movs	r3, #0
 8007942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RLANESEL2_OUT_GPIO_Port, &GPIO_InitStruct);
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	4619      	mov	r1, r3
 800794a:	4829      	ldr	r0, [pc, #164]	; (80079f0 <MX_GPIO_Init+0x1bc>)
 800794c:	f003 ffac 	bl	800b8a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TLANESEL0_OUT_Pin TLANEEN_OUT_Pin TLANESEL2_OUT_Pin TLANESEL1_OUT_Pin
                           DFUEN_OUT_Pin ESP32_EN_OUT_Pin */
  GPIO_InitStruct.Pin = TLANESEL0_OUT_Pin|TLANEEN_OUT_Pin|TLANESEL2_OUT_Pin|TLANESEL1_OUT_Pin
 8007950:	f248 43e1 	movw	r3, #34017	; 0x84e1
 8007954:	617b      	str	r3, [r7, #20]
                          |DFUEN_OUT_Pin|ESP32_EN_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007956:	2301      	movs	r3, #1
 8007958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800795a:	2300      	movs	r3, #0
 800795c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800795e:	2300      	movs	r3, #0
 8007960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007962:	f107 0314 	add.w	r3, r7, #20
 8007966:	4619      	mov	r1, r3
 8007968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800796c:	f003 ff9c 	bl	800b8a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_OUT_Pin LED2_OUT_Pin LED3_OUT_Pin */
  GPIO_InitStruct.Pin = LED1_OUT_Pin|LED2_OUT_Pin|LED3_OUT_Pin;
 8007970:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8007974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007976:	2301      	movs	r3, #1
 8007978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800797e:	2300      	movs	r3, #0
 8007980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007982:	f107 0314 	add.w	r3, r7, #20
 8007986:	4619      	mov	r1, r3
 8007988:	481a      	ldr	r0, [pc, #104]	; (80079f4 <MX_GPIO_Init+0x1c0>)
 800798a:	f003 ff8d 	bl	800b8a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_IN_Pin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 800798e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007994:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799a:	2300      	movs	r3, #0
 800799c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 800799e:	f107 0314 	add.w	r3, r7, #20
 80079a2:	4619      	mov	r1, r3
 80079a4:	4811      	ldr	r0, [pc, #68]	; (80079ec <MX_GPIO_Init+0x1b8>)
 80079a6:	f003 ff7f 	bl	800b8a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRVCC_EN_OUT_Pin */
  GPIO_InitStruct.Pin = PWRVCC_EN_OUT_Pin;
 80079aa:	2304      	movs	r3, #4
 80079ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079ae:	2301      	movs	r3, #1
 80079b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079b6:	2300      	movs	r3, #0
 80079b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWRVCC_EN_OUT_GPIO_Port, &GPIO_InitStruct);
 80079ba:	f107 0314 	add.w	r3, r7, #20
 80079be:	4619      	mov	r1, r3
 80079c0:	480d      	ldr	r0, [pc, #52]	; (80079f8 <MX_GPIO_Init+0x1c4>)
 80079c2:	f003 ff71 	bl	800b8a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CardDetect_IN_Pin */
  GPIO_InitStruct.Pin = CardDetect_IN_Pin;
 80079c6:	2320      	movs	r3, #32
 80079c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80079ce:	2301      	movs	r3, #1
 80079d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CardDetect_IN_GPIO_Port, &GPIO_InitStruct);
 80079d2:	f107 0314 	add.w	r3, r7, #20
 80079d6:	4619      	mov	r1, r3
 80079d8:	4806      	ldr	r0, [pc, #24]	; (80079f4 <MX_GPIO_Init+0x1c0>)
 80079da:	f003 ff65 	bl	800b8a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80079de:	bf00      	nop
 80079e0:	3728      	adds	r7, #40	; 0x28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	40021000 	.word	0x40021000
 80079ec:	48000800 	.word	0x48000800
 80079f0:	48001400 	.word	0x48001400
 80079f4:	48000400 	.word	0x48000400
 80079f8:	48000c00 	.word	0x48000c00

080079fc <delay>:

/* USER CODE BEGIN 4 */

//---------------------------------- a delay that can be used without irq enabled
void delay(uint32_t delay_ms) {
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
    // Configure the SysTick timer
    SysTick->LOAD = (SystemCoreClock / 1000) * delay_ms - 1; // 50 ms delay
 8007a04:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <delay+0x4c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a10      	ldr	r2, [pc, #64]	; (8007a4c <delay+0x50>)
 8007a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0e:	099b      	lsrs	r3, r3, #6
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	fb02 f303 	mul.w	r3, r2, r3
 8007a16:	4a0e      	ldr	r2, [pc, #56]	; (8007a50 <delay+0x54>)
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                   // Clear current value
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <delay+0x54>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8007a22:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <delay+0x54>)
 8007a24:	2205      	movs	r2, #5
 8007a26:	601a      	str	r2, [r3, #0]

    // Wait until the COUNTFLAG is set
    while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
 8007a28:	bf00      	nop
 8007a2a:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <delay+0x54>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0f9      	beq.n	8007a2a <delay+0x2e>

    // Disable the SysTick timer
    SysTick->CTRL = 0;
 8007a36:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <delay+0x54>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	20000008 	.word	0x20000008
 8007a4c:	10624dd3 	.word	0x10624dd3
 8007a50:	e000e010 	.word	0xe000e010

08007a54 <HAL_UARTEx_RxEventCallback>:
{
    CDC_Transmit_FS(Buf, Len);
}*/

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	807b      	strh	r3, [r7, #2]
	if(huart == RS485cfg.huart)
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <HAL_UARTEx_RxEventCallback+0x28>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d102      	bne.n	8007a70 <HAL_UARTEx_RxEventCallback+0x1c>
	{
		RS485receiveFlag = 1;
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <HAL_UARTEx_RxEventCallback+0x2c>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	701a      	strb	r2, [r3, #0]
		//RS485_Receive(&RS485cfg);
	}
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	20000b94 	.word	0x20000b94
 8007a80:	20012be8 	.word	0x20012be8
 8007a84:	00000000 	.word	0x00000000

08007a88 <HAL_ADC_ConvCpltCallback>:
//----------------------------------------------------------------------------------------- adc conversion
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	// convert units
	I_3V3 = I_3V3_GAIN * Vref * adc1_data[0]/(float)(1 << 12);
 8007a90:	4b63      	ldr	r3, [pc, #396]	; (8007c20 <HAL_ADC_ConvCpltCallback+0x198>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe f9bd 	bl	8005e14 <__aeabi_ui2d>
 8007a9a:	a35b      	add	r3, pc, #364	; (adr r3, 8007c08 <HAL_ADC_ConvCpltCallback+0x180>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f7fe fa32 	bl	8005f08 <__aeabi_dmul>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	4b5c      	ldr	r3, [pc, #368]	; (8007c24 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007ab2:	f7fe fb53 	bl	800615c <__aeabi_ddiv>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4610      	mov	r0, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	f7fe fcdd 	bl	800647c <__aeabi_d2f>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4a58      	ldr	r2, [pc, #352]	; (8007c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007ac6:	6013      	str	r3, [r2, #0]
	V_IN = V_IN_GAIN * Vref * adc1_data[1]/(float)(1 << 12);
 8007ac8:	4b55      	ldr	r3, [pc, #340]	; (8007c20 <HAL_ADC_ConvCpltCallback+0x198>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe f9a1 	bl	8005e14 <__aeabi_ui2d>
 8007ad2:	a34f      	add	r3, pc, #316	; (adr r3, 8007c10 <HAL_ADC_ConvCpltCallback+0x188>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7fe fa16 	bl	8005f08 <__aeabi_dmul>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	4b4e      	ldr	r3, [pc, #312]	; (8007c24 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007aea:	f7fe fb37 	bl	800615c <__aeabi_ddiv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4610      	mov	r0, r2
 8007af4:	4619      	mov	r1, r3
 8007af6:	f7fe fcc1 	bl	800647c <__aeabi_d2f>
 8007afa:	4603      	mov	r3, r0
 8007afc:	4a4b      	ldr	r2, [pc, #300]	; (8007c2c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8007afe:	6013      	str	r3, [r2, #0]
	I_5V = I_5V_GAIN * Vref * adc2_data/(float)(1 << 12);
 8007b00:	4b4b      	ldr	r3, [pc, #300]	; (8007c30 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe f985 	bl	8005e14 <__aeabi_ui2d>
 8007b0a:	a33f      	add	r3, pc, #252	; (adr r3, 8007c08 <HAL_ADC_ConvCpltCallback+0x180>)
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f7fe f9fa 	bl	8005f08 <__aeabi_dmul>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	4b40      	ldr	r3, [pc, #256]	; (8007c24 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007b22:	f7fe fb1b 	bl	800615c <__aeabi_ddiv>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f7fe fca5 	bl	800647c <__aeabi_d2f>
 8007b32:	4603      	mov	r3, r0
 8007b34:	4a3f      	ldr	r2, [pc, #252]	; (8007c34 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8007b36:	6013      	str	r3, [r2, #0]
	I_VP = I_VP_GAIN * Vref * adc5_data/(float)(1 << 12);
 8007b38:	4b3f      	ldr	r3, [pc, #252]	; (8007c38 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe f969 	bl	8005e14 <__aeabi_ui2d>
 8007b42:	a335      	add	r3, pc, #212	; (adr r3, 8007c18 <HAL_ADC_ConvCpltCallback+0x190>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f7fe f9de 	bl	8005f08 <__aeabi_dmul>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4610      	mov	r0, r2
 8007b52:	4619      	mov	r1, r3
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	4b32      	ldr	r3, [pc, #200]	; (8007c24 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007b5a:	f7fe faff 	bl	800615c <__aeabi_ddiv>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4610      	mov	r0, r2
 8007b64:	4619      	mov	r1, r3
 8007b66:	f7fe fc89 	bl	800647c <__aeabi_d2f>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	4a33      	ldr	r2, [pc, #204]	; (8007c3c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8007b6e:	6013      	str	r3, [r2, #0]

	I_3V3_fault = (I_3V3 > I_3V3_MAX) ? 1 : 0;
 8007b70:	4b2d      	ldr	r3, [pc, #180]	; (8007c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007b72:	edd3 7a00 	vldr	s15, [r3]
 8007b76:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8007b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b82:	bfcc      	ite	gt
 8007b84:	2301      	movgt	r3, #1
 8007b86:	2300      	movle	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4b2c      	ldr	r3, [pc, #176]	; (8007c40 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007b8e:	701a      	strb	r2, [r3, #0]
	I_5V_fault = (I_5V > I_5V_MAX) ? 1 : 0;
 8007b90:	4b28      	ldr	r3, [pc, #160]	; (8007c34 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8007b92:	edd3 7a00 	vldr	s15, [r3]
 8007b96:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8007b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba2:	bfcc      	ite	gt
 8007ba4:	2301      	movgt	r3, #1
 8007ba6:	2300      	movle	r3, #0
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8007bae:	701a      	strb	r2, [r3, #0]
	//I_VP_fault = (I_VP > I_VP_MAX) || (I_VP > (UNICARD1data.VPmaxCurrent_mA * 1000.0)) ? 1 : 0;
	I_VP_fault = (I_VP > I_VP_MAX) ? 1 : 0;
 8007bb0:	4b22      	ldr	r3, [pc, #136]	; (8007c3c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8007bb2:	edd3 7a00 	vldr	s15, [r3]
 8007bb6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc2:	bfcc      	ite	gt
 8007bc4:	2301      	movgt	r3, #1
 8007bc6:	2300      	movle	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4b1e      	ldr	r3, [pc, #120]	; (8007c48 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8007bce:	701a      	strb	r2, [r3, #0]

	if(I_VP_fault + I_5V_fault + I_3V3_fault > 0)
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	; (8007c48 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4b1b      	ldr	r3, [pc, #108]	; (8007c44 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	4413      	add	r3, r2
 8007bdc:	4a18      	ldr	r2, [pc, #96]	; (8007c40 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	4413      	add	r3, r2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dd09      	ble.n	8007bfa <HAL_ADC_ConvCpltCallback+0x172>
	{
		CardState = UDEV1CARD_OVERCURRENT;
 8007be6:	4b19      	ldr	r3, [pc, #100]	; (8007c4c <HAL_ADC_ConvCpltCallback+0x1c4>)
 8007be8:	2204      	movs	r2, #4
 8007bea:	701a      	strb	r2, [r3, #0]
		OCRtimer = UNICARD1data.OCRrecoveryTime_ms + 1;
 8007bec:	4b18      	ldr	r3, [pc, #96]	; (8007c50 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8007bee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	4b17      	ldr	r3, [pc, #92]	; (8007c54 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8007bf8:	801a      	strh	r2, [r3, #0]
	}
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	f3af 8000 	nop.w
 8007c08:	a4a8c155 	.word	0xa4a8c155
 8007c0c:	4013404e 	.word	0x4013404e
 8007c10:	29cfdd23 	.word	0x29cfdd23
 8007c14:	4046cfc8 	.word	0x4046cfc8
 8007c18:	5fd8adac 	.word	0x5fd8adac
 8007c1c:	401e4f76 	.word	0x401e4f76
 8007c20:	20000b14 	.word	0x20000b14
 8007c24:	40b00000 	.word	0x40b00000
 8007c28:	20000b30 	.word	0x20000b30
 8007c2c:	20000b24 	.word	0x20000b24
 8007c30:	20000b1c 	.word	0x20000b1c
 8007c34:	20000b2c 	.word	0x20000b2c
 8007c38:	20000b20 	.word	0x20000b20
 8007c3c:	20000b28 	.word	0x20000b28
 8007c40:	20000b36 	.word	0x20000b36
 8007c44:	20000b37 	.word	0x20000b37
 8007c48:	20000b38 	.word	0x20000b38
 8007c4c:	20000b3c 	.word	0x20000b3c
 8007c50:	20000b40 	.word	0x20000b40
 8007c54:	20000b34 	.word	0x20000b34

08007c58 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	// add SCPI

	SCPI_EXECUTE((char*)Buf, Len);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f00d fb2f 	bl	80152c8 <SCPI_EXECUTE>
	/*const char* response = "Hello, World!\r\n";
	uint32_t response_len = strlen(response);*/

	CDC_Transmit_FS(USBTXbuffer, strlen(USBTXbuffer));
 8007c6a:	4806      	ldr	r0, [pc, #24]	; (8007c84 <USB_CDC_RxHandler+0x2c>)
 8007c6c:	f7fd ff38 	bl	8005ae0 <strlen>
 8007c70:	4603      	mov	r3, r0
 8007c72:	4619      	mov	r1, r3
 8007c74:	4803      	ldr	r0, [pc, #12]	; (8007c84 <USB_CDC_RxHandler+0x2c>)
 8007c76:	f017 f8c1 	bl	801edfc <CDC_Transmit_FS>
}
 8007c7a:	bf00      	nop
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20001760 	.word	0x20001760

08007c88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_Delay(1000);
 8007c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c94:	f001 fb70 	bl	8009378 <HAL_Delay>
 8007c98:	e7fa      	b.n	8007c90 <StartDefaultTask+0x8>

08007c9a <task_LEDcontrol>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_LEDcontrol */
void task_LEDcontrol(void *argument)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_LEDcontrol */
  osDelay(500);
 8007ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ca6:	f012 f87c 	bl	8019da2 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  LED_Iterate();
 8007caa:	f016 f919 	bl	801dee0 <LED_Iterate>
	  LED_UpdateEffect();
 8007cae:	f015 fdb3 	bl	801d818 <LED_UpdateEffect>
	  LED_UpdateTransition();
 8007cb2:	f015 fc71 	bl	801d598 <LED_UpdateTransition>
	  osDelay(3);
 8007cb6:	2003      	movs	r0, #3
 8007cb8:	f012 f873 	bl	8019da2 <osDelay>
	  LED_PWMCLEAR();
 8007cbc:	f016 fa16 	bl	801e0ec <LED_PWMCLEAR>
	  osDelay(1);
 8007cc0:	2001      	movs	r0, #1
 8007cc2:	f012 f86e 	bl	8019da2 <osDelay>
	  LED_Iterate();
 8007cc6:	e7f0      	b.n	8007caa <task_LEDcontrol+0x10>

08007cc8 <task_Current_Check>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_Current_Check */
void task_Current_Check(void *argument)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_Current_Check */
	uint8_t outEN = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  // this function only triggers adc sampling, check void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
	  HAL_ADC_Start_DMA(&hadc1, adc1_data, 2);
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	492c      	ldr	r1, [pc, #176]	; (8007d88 <task_Current_Check+0xc0>)
 8007cd8:	482c      	ldr	r0, [pc, #176]	; (8007d8c <task_Current_Check+0xc4>)
 8007cda:	f001 ffb7 	bl	8009c4c <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, &adc2_data, 1);
 8007cde:	2201      	movs	r2, #1
 8007ce0:	492b      	ldr	r1, [pc, #172]	; (8007d90 <task_Current_Check+0xc8>)
 8007ce2:	482c      	ldr	r0, [pc, #176]	; (8007d94 <task_Current_Check+0xcc>)
 8007ce4:	f001 ffb2 	bl	8009c4c <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc5, &adc5_data, 1);
 8007ce8:	2201      	movs	r2, #1
 8007cea:	492b      	ldr	r1, [pc, #172]	; (8007d98 <task_Current_Check+0xd0>)
 8007cec:	482b      	ldr	r0, [pc, #172]	; (8007d9c <task_Current_Check+0xd4>)
 8007cee:	f001 ffad 	bl	8009c4c <HAL_ADC_Start_DMA>

	  // overcurrent recovery handling
	  if(OCRtimer > 0)
 8007cf2:	4b2b      	ldr	r3, [pc, #172]	; (8007da0 <task_Current_Check+0xd8>)
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d022      	beq.n	8007d40 <task_Current_Check+0x78>
	  {
		  if(OCRtimer == 1 && !I_VP_fault)
 8007cfa:	4b29      	ldr	r3, [pc, #164]	; (8007da0 <task_Current_Check+0xd8>)
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d118      	bne.n	8007d34 <task_Current_Check+0x6c>
 8007d02:	4b28      	ldr	r3, [pc, #160]	; (8007da4 <task_Current_Check+0xdc>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d114      	bne.n	8007d34 <task_Current_Check+0x6c>
		  {
			  switch (UNICARD1data.OCR)
 8007d0a:	4b27      	ldr	r3, [pc, #156]	; (8007da8 <task_Current_Check+0xe0>)
 8007d0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d002      	beq.n	8007d1a <task_Current_Check+0x52>
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d008      	beq.n	8007d2a <task_Current_Check+0x62>
			  {
			  	  default: /*UC1OCR_manual*/
			  		  //CardState = UDEV1CARD_OFF;
			  		  break;
 8007d18:	e00c      	b.n	8007d34 <task_Current_Check+0x6c>
			  	  case UC1OCR_automatic:
			  		  if(CardState != UDEV1CARD_OFF) CardState = UDEV1CARD_CON;
 8007d1a:	4b24      	ldr	r3, [pc, #144]	; (8007dac <task_Current_Check+0xe4>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <task_Current_Check+0x6a>
 8007d22:	4b22      	ldr	r3, [pc, #136]	; (8007dac <task_Current_Check+0xe4>)
 8007d24:	2203      	movs	r2, #3
 8007d26:	701a      	strb	r2, [r3, #0]
			  		  break;
 8007d28:	e003      	b.n	8007d32 <task_Current_Check+0x6a>
			  	  case UC1OCR_shutdown:
			  		  CardState = UDEV1CARD_OFF;
 8007d2a:	4b20      	ldr	r3, [pc, #128]	; (8007dac <task_Current_Check+0xe4>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
			  		  break;
 8007d30:	e000      	b.n	8007d34 <task_Current_Check+0x6c>
			  		  break;
 8007d32:	bf00      	nop
			  }
		  }
		  OCRtimer--;
 8007d34:	4b1a      	ldr	r3, [pc, #104]	; (8007da0 <task_Current_Check+0xd8>)
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	4b18      	ldr	r3, [pc, #96]	; (8007da0 <task_Current_Check+0xd8>)
 8007d3e:	801a      	strh	r2, [r3, #0]
	  }

	  outEN = !((CardState == UDEV1CARD_OFF) || (CardState == UDEV1CARD_OVERCURRENT));
 8007d40:	4b1a      	ldr	r3, [pc, #104]	; (8007dac <task_Current_Check+0xe4>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <task_Current_Check+0x8c>
 8007d48:	4b18      	ldr	r3, [pc, #96]	; (8007dac <task_Current_Check+0xe4>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d001      	beq.n	8007d54 <task_Current_Check+0x8c>
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <task_Current_Check+0x8e>
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]

	  HAL_GPIO_WritePin(PWR3V3_EN_OUT_GPIO_Port, PWR3V3_EN_OUT_Pin, outEN);
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d60:	4813      	ldr	r0, [pc, #76]	; (8007db0 <task_Current_Check+0xe8>)
 8007d62:	f003 ff3b 	bl	800bbdc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWR5VEN_OUT_GPIO_Port, PWR5VEN_OUT_Pin, outEN);
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2110      	movs	r1, #16
 8007d6c:	4810      	ldr	r0, [pc, #64]	; (8007db0 <task_Current_Check+0xe8>)
 8007d6e:	f003 ff35 	bl	800bbdc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWRVCC_EN_OUT_GPIO_Port, PWRVCC_EN_OUT_Pin, outEN);
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	461a      	mov	r2, r3
 8007d76:	2104      	movs	r1, #4
 8007d78:	480e      	ldr	r0, [pc, #56]	; (8007db4 <task_Current_Check+0xec>)
 8007d7a:	f003 ff2f 	bl	800bbdc <HAL_GPIO_WritePin>

	  osDelay(1);
 8007d7e:	2001      	movs	r0, #1
 8007d80:	f012 f80f 	bl	8019da2 <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, adc1_data, 2);
 8007d84:	e7a6      	b.n	8007cd4 <task_Current_Check+0xc>
 8007d86:	bf00      	nop
 8007d88:	20000b14 	.word	0x20000b14
 8007d8c:	2000045c 	.word	0x2000045c
 8007d90:	20000b1c 	.word	0x20000b1c
 8007d94:	200004c8 	.word	0x200004c8
 8007d98:	20000b20 	.word	0x20000b20
 8007d9c:	20000534 	.word	0x20000534
 8007da0:	20000b34 	.word	0x20000b34
 8007da4:	20000b38 	.word	0x20000b38
 8007da8:	20000b40 	.word	0x20000b40
 8007dac:	20000b3c 	.word	0x20000b3c
 8007db0:	48000800 	.word	0x48000800
 8007db4:	48000c00 	.word	0x48000c00

08007db8 <task_BUTTON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_BUTTON */
void task_BUTTON(void *argument)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_BUTTON */
	uint16_t ButtonTimer = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	81fb      	strh	r3, [r7, #14]
	uint8_t WaitingForRelease = 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	737b      	strb	r3, [r7, #13]
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin))
 8007dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007dcc:	4811      	ldr	r0, [pc, #68]	; (8007e14 <task_BUTTON+0x5c>)
 8007dce:	f003 feed 	bl	800bbac <HAL_GPIO_ReadPin>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d011      	beq.n	8007dfc <task_BUTTON+0x44>
	{
		if(ButtonTimer <= 20 && !WaitingForRelease)
 8007dd8:	89fb      	ldrh	r3, [r7, #14]
 8007dda:	2b14      	cmp	r3, #20
 8007ddc:	d806      	bhi.n	8007dec <task_BUTTON+0x34>
 8007dde:	7b7b      	ldrb	r3, [r7, #13]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <task_BUTTON+0x34>
			ButtonTimer++;
 8007de4:	89fb      	ldrh	r3, [r7, #14]
 8007de6:	3301      	adds	r3, #1
 8007de8:	81fb      	strh	r3, [r7, #14]
 8007dea:	e00e      	b.n	8007e0a <task_BUTTON+0x52>
		else
		{
			WaitingForRelease = 1;
 8007dec:	2301      	movs	r3, #1
 8007dee:	737b      	strb	r3, [r7, #13]
			lastButtonPressTime = ButtonTimer;
 8007df0:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <task_BUTTON+0x60>)
 8007df2:	89fb      	ldrh	r3, [r7, #14]
 8007df4:	8013      	strh	r3, [r2, #0]
			ButtonTimer = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	81fb      	strh	r3, [r7, #14]
 8007dfa:	e006      	b.n	8007e0a <task_BUTTON+0x52>
		}
	}
	else
	{
		WaitingForRelease = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	737b      	strb	r3, [r7, #13]
		lastButtonPressTime = ButtonTimer;
 8007e00:	4a05      	ldr	r2, [pc, #20]	; (8007e18 <task_BUTTON+0x60>)
 8007e02:	89fb      	ldrh	r3, [r7, #14]
 8007e04:	8013      	strh	r3, [r2, #0]
		ButtonTimer = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	81fb      	strh	r3, [r7, #14]
	}

    osDelay(50);
 8007e0a:	2032      	movs	r0, #50	; 0x32
 8007e0c:	f011 ffc9 	bl	8019da2 <osDelay>
	if(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin))
 8007e10:	e7da      	b.n	8007dc8 <task_BUTTON+0x10>
 8007e12:	bf00      	nop
 8007e14:	48000800 	.word	0x48000800
 8007e18:	20000b3a 	.word	0x20000b3a

08007e1c <task_StateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_StateMachine */
void task_StateMachine(void *argument)
{
 8007e1c:	b5b0      	push	{r4, r5, r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN task_StateMachine */
  /* Infinite loop */
  for(;;)
  {
	  //---------------------------------------------- Device state machine
	  switch (MainState)
 8007e24:	4bb0      	ldr	r3, [pc, #704]	; (80080e8 <task_StateMachine+0x2cc>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d023      	beq.n	8007e74 <task_StateMachine+0x58>
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d04c      	beq.n	8007eca <task_StateMachine+0xae>
	  {
	  	  default: //OFF
	  		  leds[0] = LED_Preset(PRESET_OFF);
 8007e30:	4cae      	ldr	r4, [pc, #696]	; (80080ec <task_StateMachine+0x2d0>)
 8007e32:	463b      	mov	r3, r7
 8007e34:	2100      	movs	r1, #0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f016 f970 	bl	801e11c <LED_Preset>
 8007e3c:	4625      	mov	r5, r4
 8007e3e:	463c      	mov	r4, r7
 8007e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e48:	e885 0003 	stmia.w	r5, {r0, r1}
	  		  leds[1] = leds[0];
 8007e4c:	4ba7      	ldr	r3, [pc, #668]	; (80080ec <task_StateMachine+0x2d0>)
 8007e4e:	4aa7      	ldr	r2, [pc, #668]	; (80080ec <task_StateMachine+0x2d0>)
 8007e50:	f103 0418 	add.w	r4, r3, #24
 8007e54:	4615      	mov	r5, r2
 8007e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e5e:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  CardState = UDEV1CARD_OFF;
 8007e62:	4ba3      	ldr	r3, [pc, #652]	; (80080f0 <task_StateMachine+0x2d4>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]
	  		  if(lastButtonPressTime >= 1)
 8007e68:	4ba2      	ldr	r3, [pc, #648]	; (80080f4 <task_StateMachine+0x2d8>)
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d050      	beq.n	8007f12 <task_StateMachine+0xf6>
	  		  {
	  			/*lastButtonPressTime = 0;
	  			MainState = UDEV1_ON_CON;
	  			CardState = UDEV1CARD_CON;*/
	  			NVIC_SystemReset();
 8007e70:	f7fe fd92 	bl	8006998 <__NVIC_SystemReset>
	  		  }
	  		  break;
	  	  case UDEV1_ON_NC:
	  		  leds[0] = LED_Preset(PRESET_NOTLINKEDWITHPC);
 8007e74:	4c9d      	ldr	r4, [pc, #628]	; (80080ec <task_StateMachine+0x2d0>)
 8007e76:	463b      	mov	r3, r7
 8007e78:	2102      	movs	r1, #2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f016 f94e 	bl	801e11c <LED_Preset>
 8007e80:	4625      	mov	r5, r4
 8007e82:	463c      	mov	r4, r7
 8007e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e8c:	e885 0003 	stmia.w	r5, {r0, r1}
	  		  leds[1] = leds[0];
 8007e90:	4b96      	ldr	r3, [pc, #600]	; (80080ec <task_StateMachine+0x2d0>)
 8007e92:	4a96      	ldr	r2, [pc, #600]	; (80080ec <task_StateMachine+0x2d0>)
 8007e94:	f103 0418 	add.w	r4, r3, #24
 8007e98:	4615      	mov	r5, r2
 8007e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007ea2:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(PCcon_Watchdog > 0) MainState = UDEV1_ON_CON;
 8007ea6:	4b94      	ldr	r3, [pc, #592]	; (80080f8 <task_StateMachine+0x2dc>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	dd02      	ble.n	8007eb4 <task_StateMachine+0x98>
 8007eae:	4b8e      	ldr	r3, [pc, #568]	; (80080e8 <task_StateMachine+0x2cc>)
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	701a      	strb	r2, [r3, #0]

	  		  if(lastButtonPressTime >= 10)
 8007eb4:	4b8f      	ldr	r3, [pc, #572]	; (80080f4 <task_StateMachine+0x2d8>)
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	2b09      	cmp	r3, #9
 8007eba:	d92c      	bls.n	8007f16 <task_StateMachine+0xfa>
	  		  {
	  			lastButtonPressTime = 0;
 8007ebc:	4b8d      	ldr	r3, [pc, #564]	; (80080f4 <task_StateMachine+0x2d8>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	801a      	strh	r2, [r3, #0]
	  			MainState = UDEV1_OFF;
 8007ec2:	4b89      	ldr	r3, [pc, #548]	; (80080e8 <task_StateMachine+0x2cc>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007ec8:	e025      	b.n	8007f16 <task_StateMachine+0xfa>
	  	  case UDEV1_ON_CON:
	  		  leds[0] = LED_Preset(PRESET_LINKEDTOPC);
 8007eca:	4c88      	ldr	r4, [pc, #544]	; (80080ec <task_StateMachine+0x2d0>)
 8007ecc:	463b      	mov	r3, r7
 8007ece:	2103      	movs	r1, #3
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f016 f923 	bl	801e11c <LED_Preset>
 8007ed6:	4625      	mov	r5, r4
 8007ed8:	463c      	mov	r4, r7
 8007eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ede:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ee2:	e885 0003 	stmia.w	r5, {r0, r1}
	  		  leds[1] = leds[0];
 8007ee6:	4b81      	ldr	r3, [pc, #516]	; (80080ec <task_StateMachine+0x2d0>)
 8007ee8:	4a80      	ldr	r2, [pc, #512]	; (80080ec <task_StateMachine+0x2d0>)
 8007eea:	f103 0418 	add.w	r4, r3, #24
 8007eee:	4615      	mov	r5, r2
 8007ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007ef8:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 10)
 8007efc:	4b7d      	ldr	r3, [pc, #500]	; (80080f4 <task_StateMachine+0x2d8>)
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d90a      	bls.n	8007f1a <task_StateMachine+0xfe>
	  		  {
	  			lastButtonPressTime = 0;
 8007f04:	4b7b      	ldr	r3, [pc, #492]	; (80080f4 <task_StateMachine+0x2d8>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	801a      	strh	r2, [r3, #0]
	  			MainState = UDEV1_OFF;
 8007f0a:	4b77      	ldr	r3, [pc, #476]	; (80080e8 <task_StateMachine+0x2cc>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007f10:	e003      	b.n	8007f1a <task_StateMachine+0xfe>
	  		  break;
 8007f12:	bf00      	nop
 8007f14:	e002      	b.n	8007f1c <task_StateMachine+0x100>
	  		  break;
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <task_StateMachine+0x100>
	  		  break;
 8007f1a:	bf00      	nop
	  }
	  //---------------------------------------------- Card state machine
	  switch (CardState)
 8007f1c:	4b74      	ldr	r3, [pc, #464]	; (80080f0 <task_StateMachine+0x2d4>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d80c      	bhi.n	8007f40 <task_StateMachine+0x124>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <task_StateMachine+0x110>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f9b 	.word	0x08007f9b
 8007f30:	08007fcf 	.word	0x08007fcf
 8007f34:	08008001 	.word	0x08008001
 8007f38:	0800804d 	.word	0x0800804d
 8007f3c:	0800807f 	.word	0x0800807f
	  {
	  	  default: //UDEV1CARD_OFF
	  		  leds[2] = LED_Preset(PRESET_OFF);
 8007f40:	4c6a      	ldr	r4, [pc, #424]	; (80080ec <task_StateMachine+0x2d0>)
 8007f42:	463b      	mov	r3, r7
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f016 f8e8 	bl	801e11c <LED_Preset>
 8007f4c:	3430      	adds	r4, #48	; 0x30
 8007f4e:	463d      	mov	r5, r7
 8007f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007f58:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1 && MainState != UDEV1_OFF && OCRtimer <= 1)
 8007f5c:	4b65      	ldr	r3, [pc, #404]	; (80080f4 <task_StateMachine+0x2d8>)
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 80b2 	beq.w	80080ca <task_StateMachine+0x2ae>
 8007f66:	4b60      	ldr	r3, [pc, #384]	; (80080e8 <task_StateMachine+0x2cc>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 80ad 	beq.w	80080ca <task_StateMachine+0x2ae>
 8007f70:	4b62      	ldr	r3, [pc, #392]	; (80080fc <task_StateMachine+0x2e0>)
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	f200 80a8 	bhi.w	80080ca <task_StateMachine+0x2ae>
	  		  {
	  			  lastButtonPressTime = 0;
 8007f7a:	4b5e      	ldr	r3, [pc, #376]	; (80080f4 <task_StateMachine+0x2d8>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	801a      	strh	r2, [r3, #0]
	  			  CardState = !HAL_GPIO_ReadPin(CardDetect_IN_GPIO_Port, CardDetect_IN_Pin) ? UDEV1CARD_CON : UDEV1CARD_NC;
 8007f80:	2120      	movs	r1, #32
 8007f82:	485f      	ldr	r0, [pc, #380]	; (8008100 <task_StateMachine+0x2e4>)
 8007f84:	f003 fe12 	bl	800bbac <HAL_GPIO_ReadPin>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <task_StateMachine+0x176>
 8007f8e:	2203      	movs	r2, #3
 8007f90:	e000      	b.n	8007f94 <task_StateMachine+0x178>
 8007f92:	2201      	movs	r2, #1
 8007f94:	4b56      	ldr	r3, [pc, #344]	; (80080f0 <task_StateMachine+0x2d4>)
 8007f96:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007f98:	e097      	b.n	80080ca <task_StateMachine+0x2ae>
	  	  case UDEV1CARD_NC:
	  		  leds[2] = LED_Preset(PRESET_CARDNOTDETECTED);
 8007f9a:	4c54      	ldr	r4, [pc, #336]	; (80080ec <task_StateMachine+0x2d0>)
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	2105      	movs	r1, #5
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f016 f8bb 	bl	801e11c <LED_Preset>
 8007fa6:	3430      	adds	r4, #48	; 0x30
 8007fa8:	463d      	mov	r5, r7
 8007faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007fb2:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1)
 8007fb6:	4b4f      	ldr	r3, [pc, #316]	; (80080f4 <task_StateMachine+0x2d8>)
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 8087 	beq.w	80080ce <task_StateMachine+0x2b2>
	  		  {
	  			  lastButtonPressTime = 0;
 8007fc0:	4b4c      	ldr	r3, [pc, #304]	; (80080f4 <task_StateMachine+0x2d8>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 8007fc6:	4b4a      	ldr	r3, [pc, #296]	; (80080f0 <task_StateMachine+0x2d4>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007fcc:	e07f      	b.n	80080ce <task_StateMachine+0x2b2>
	  	  case UDEV1CARD_NOTRECOGNISED:
	  		  leds[2] = LED_Preset(PRESET_CARDNOTRECOGNISED);
 8007fce:	4c47      	ldr	r4, [pc, #284]	; (80080ec <task_StateMachine+0x2d0>)
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	2106      	movs	r1, #6
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f016 f8a1 	bl	801e11c <LED_Preset>
 8007fda:	3430      	adds	r4, #48	; 0x30
 8007fdc:	463d      	mov	r5, r7
 8007fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fe2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007fe6:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1)
 8007fea:	4b42      	ldr	r3, [pc, #264]	; (80080f4 <task_StateMachine+0x2d8>)
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d06f      	beq.n	80080d2 <task_StateMachine+0x2b6>
	  		  {
	  			  lastButtonPressTime = 0;
 8007ff2:	4b40      	ldr	r3, [pc, #256]	; (80080f4 <task_StateMachine+0x2d8>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 8007ff8:	4b3d      	ldr	r3, [pc, #244]	; (80080f0 <task_StateMachine+0x2d4>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
	  		  }
		  	  break;
 8007ffe:	e068      	b.n	80080d2 <task_StateMachine+0x2b6>

	  	case UDEV1CARD_CON:
	  		  leds[2] = LED_Preset(PRESET_CARDRECOGNISED);
 8008000:	4c3a      	ldr	r4, [pc, #232]	; (80080ec <task_StateMachine+0x2d0>)
 8008002:	463b      	mov	r3, r7
 8008004:	2104      	movs	r1, #4
 8008006:	4618      	mov	r0, r3
 8008008:	f016 f888 	bl	801e11c <LED_Preset>
 800800c:	3430      	adds	r4, #48	; 0x30
 800800e:	463d      	mov	r5, r7
 8008010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008014:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008018:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(ComFailCounter > 5) CardState = UDEV1CARD_COMFAIL;
 800801c:	4b39      	ldr	r3, [pc, #228]	; (8008104 <task_StateMachine+0x2e8>)
 800801e:	edd3 7a00 	vldr	s15, [r3]
 8008022:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8008026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800802a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800802e:	dd02      	ble.n	8008036 <task_StateMachine+0x21a>
 8008030:	4b2f      	ldr	r3, [pc, #188]	; (80080f0 <task_StateMachine+0x2d4>)
 8008032:	2205      	movs	r2, #5
 8008034:	701a      	strb	r2, [r3, #0]

	  		  if(lastButtonPressTime >= 1)
 8008036:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <task_StateMachine+0x2d8>)
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d04b      	beq.n	80080d6 <task_StateMachine+0x2ba>
	  		  {
	  			  lastButtonPressTime = 0;
 800803e:	4b2d      	ldr	r3, [pc, #180]	; (80080f4 <task_StateMachine+0x2d8>)
 8008040:	2200      	movs	r2, #0
 8008042:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 8008044:	4b2a      	ldr	r3, [pc, #168]	; (80080f0 <task_StateMachine+0x2d4>)
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 800804a:	e044      	b.n	80080d6 <task_StateMachine+0x2ba>
	  	case UDEV1CARD_OVERCURRENT:
	  		  leds[2] = LED_Preset(PRESET_OVERCURRENT);
 800804c:	4c27      	ldr	r4, [pc, #156]	; (80080ec <task_StateMachine+0x2d0>)
 800804e:	463b      	mov	r3, r7
 8008050:	2101      	movs	r1, #1
 8008052:	4618      	mov	r0, r3
 8008054:	f016 f862 	bl	801e11c <LED_Preset>
 8008058:	3430      	adds	r4, #48	; 0x30
 800805a:	463d      	mov	r5, r7
 800805c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800805e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008060:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008064:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1)
 8008068:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <task_StateMachine+0x2d8>)
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d034      	beq.n	80080da <task_StateMachine+0x2be>
	  		  {
	  			  lastButtonPressTime = 0;
 8008070:	4b20      	ldr	r3, [pc, #128]	; (80080f4 <task_StateMachine+0x2d8>)
 8008072:	2200      	movs	r2, #0
 8008074:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 8008076:	4b1e      	ldr	r3, [pc, #120]	; (80080f0 <task_StateMachine+0x2d4>)
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 800807c:	e02d      	b.n	80080da <task_StateMachine+0x2be>

		case UDEV1CARD_COMFAIL:
		  	leds[2] = LED_Preset(PRESET_CARDCOMFAIL);
 800807e:	4c1b      	ldr	r4, [pc, #108]	; (80080ec <task_StateMachine+0x2d0>)
 8008080:	463b      	mov	r3, r7
 8008082:	2107      	movs	r1, #7
 8008084:	4618      	mov	r0, r3
 8008086:	f016 f849 	bl	801e11c <LED_Preset>
 800808a:	3430      	adds	r4, #48	; 0x30
 800808c:	463d      	mov	r5, r7
 800808e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008092:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008096:	e884 0003 	stmia.w	r4, {r0, r1}

		  	if(ComFailCounter < 3)  CardState = UDEV1CARD_CON;
 800809a:	4b1a      	ldr	r3, [pc, #104]	; (8008104 <task_StateMachine+0x2e8>)
 800809c:	edd3 7a00 	vldr	s15, [r3]
 80080a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80080a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ac:	d502      	bpl.n	80080b4 <task_StateMachine+0x298>
 80080ae:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <task_StateMachine+0x2d4>)
 80080b0:	2203      	movs	r2, #3
 80080b2:	701a      	strb	r2, [r3, #0]

		  	if(lastButtonPressTime >= 1)
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <task_StateMachine+0x2d8>)
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d010      	beq.n	80080de <task_StateMachine+0x2c2>
		  	{
		  		lastButtonPressTime = 0;
 80080bc:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <task_StateMachine+0x2d8>)
 80080be:	2200      	movs	r2, #0
 80080c0:	801a      	strh	r2, [r3, #0]
		  		CardState = UDEV1CARD_OFF;
 80080c2:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <task_StateMachine+0x2d4>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
		  	}
		  	break;
 80080c8:	e009      	b.n	80080de <task_StateMachine+0x2c2>
	  		  break;
 80080ca:	bf00      	nop
 80080cc:	e008      	b.n	80080e0 <task_StateMachine+0x2c4>
	  		  break;
 80080ce:	bf00      	nop
 80080d0:	e006      	b.n	80080e0 <task_StateMachine+0x2c4>
		  	  break;
 80080d2:	bf00      	nop
 80080d4:	e004      	b.n	80080e0 <task_StateMachine+0x2c4>
	  		  break;
 80080d6:	bf00      	nop
 80080d8:	e002      	b.n	80080e0 <task_StateMachine+0x2c4>
	  		  break;
 80080da:	bf00      	nop
 80080dc:	e000      	b.n	80080e0 <task_StateMachine+0x2c4>
		  	break;
 80080de:	bf00      	nop
	  }
	  osDelay(10);
 80080e0:	200a      	movs	r0, #10
 80080e2:	f011 fe5e 	bl	8019da2 <osDelay>
	  switch (MainState)
 80080e6:	e69d      	b.n	8007e24 <task_StateMachine+0x8>
 80080e8:	20000004 	.word	0x20000004
 80080ec:	20012bec 	.word	0x20012bec
 80080f0:	20000b3c 	.word	0x20000b3c
 80080f4:	20000b3a 	.word	0x20000b3a
 80080f8:	20001d3c 	.word	0x20001d3c
 80080fc:	20000b34 	.word	0x20000b34
 8008100:	48000400 	.word	0x48000400
 8008104:	20001d44 	.word	0x20001d44

08008108 <task_PCconnectionWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_PCconnectionWatchDog */
void task_PCconnectionWatchDog(void *argument)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_PCconnectionWatchDog */
  /* Infinite loop */
  for(;;)
  {
	if(MainState != UDEV1_OFF)
 8008110:	4b0c      	ldr	r3, [pc, #48]	; (8008144 <task_PCconnectionWatchDog+0x3c>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00d      	beq.n	8008134 <task_PCconnectionWatchDog+0x2c>
	{
		if(PCcon_Watchdog > 0)	PCcon_Watchdog--;
 8008118:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <task_PCconnectionWatchDog+0x40>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dd05      	ble.n	800812c <task_PCconnectionWatchDog+0x24>
 8008120:	4b09      	ldr	r3, [pc, #36]	; (8008148 <task_PCconnectionWatchDog+0x40>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3b01      	subs	r3, #1
 8008126:	4a08      	ldr	r2, [pc, #32]	; (8008148 <task_PCconnectionWatchDog+0x40>)
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	e006      	b.n	800813a <task_PCconnectionWatchDog+0x32>
		else 					MainState = UDEV1_ON_NC;
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <task_PCconnectionWatchDog+0x3c>)
 800812e:	2201      	movs	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e002      	b.n	800813a <task_PCconnectionWatchDog+0x32>
	}
	else PCcon_Watchdog = PCcon_Watchdog_TIME;
 8008134:	4b04      	ldr	r3, [pc, #16]	; (8008148 <task_PCconnectionWatchDog+0x40>)
 8008136:	220a      	movs	r2, #10
 8008138:	601a      	str	r2, [r3, #0]
    osDelay(100);
 800813a:	2064      	movs	r0, #100	; 0x64
 800813c:	f011 fe31 	bl	8019da2 <osDelay>
	if(MainState != UDEV1_OFF)
 8008140:	e7e6      	b.n	8008110 <task_PCconnectionWatchDog+0x8>
 8008142:	bf00      	nop
 8008144:	20000004 	.word	0x20000004
 8008148:	20001d3c 	.word	0x20001d3c

0800814c <taks_CardConnectionWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taks_CardConnectionWatchDog */
void taks_CardConnectionWatchDog(void *argument)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taks_CardConnectionWatchDog */
  /* Infinite loop */
  for(;;)
  {
	if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NC)
 8008154:	4b0e      	ldr	r3, [pc, #56]	; (8008190 <taks_CardConnectionWatchDog+0x44>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d011      	beq.n	8008180 <taks_CardConnectionWatchDog+0x34>
 800815c:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <taks_CardConnectionWatchDog+0x48>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d90d      	bls.n	8008180 <taks_CardConnectionWatchDog+0x34>
	{
		if(CardCon_Watchdog > 0)	CardCon_Watchdog--;
 8008164:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <taks_CardConnectionWatchDog+0x4c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	dd05      	ble.n	8008178 <taks_CardConnectionWatchDog+0x2c>
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <taks_CardConnectionWatchDog+0x4c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3b01      	subs	r3, #1
 8008172:	4a09      	ldr	r2, [pc, #36]	; (8008198 <taks_CardConnectionWatchDog+0x4c>)
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	e006      	b.n	8008186 <taks_CardConnectionWatchDog+0x3a>
		else 						CardState = UDEV1CARD_NOTRECOGNISED;
 8008178:	4b06      	ldr	r3, [pc, #24]	; (8008194 <taks_CardConnectionWatchDog+0x48>)
 800817a:	2202      	movs	r2, #2
 800817c:	701a      	strb	r2, [r3, #0]
		if(CardCon_Watchdog > 0)	CardCon_Watchdog--;
 800817e:	e002      	b.n	8008186 <taks_CardConnectionWatchDog+0x3a>
	}
	else CardCon_Watchdog = 0;
 8008180:	4b05      	ldr	r3, [pc, #20]	; (8008198 <taks_CardConnectionWatchDog+0x4c>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
    osDelay(100);
 8008186:	2064      	movs	r0, #100	; 0x64
 8008188:	f011 fe0b 	bl	8019da2 <osDelay>
	if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NC)
 800818c:	e7e2      	b.n	8008154 <taks_CardConnectionWatchDog+0x8>
 800818e:	bf00      	nop
 8008190:	20000004 	.word	0x20000004
 8008194:	20000b3c 	.word	0x20000b3c
 8008198:	20001d40 	.word	0x20001d40

0800819c <task_CardConnectionCheck>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_CardConnectionCheck */
void task_CardConnectionCheck(void *argument)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_CardConnectionCheck */

	uint8_t task_CardConnectionCheck_DONE = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if(!HAL_GPIO_ReadPin(CardDetect_IN_GPIO_Port, CardDetect_IN_Pin))
 80081a8:	2120      	movs	r1, #32
 80081aa:	4843      	ldr	r0, [pc, #268]	; (80082b8 <task_CardConnectionCheck+0x11c>)
 80081ac:	f003 fcfe 	bl	800bbac <HAL_GPIO_ReadPin>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d107      	bne.n	80081c6 <task_CardConnectionCheck+0x2a>
	  {
		  if(CardState == UDEV1CARD_NC) CardState = UDEV1CARD_CON;
 80081b6:	4b41      	ldr	r3, [pc, #260]	; (80082bc <task_CardConnectionCheck+0x120>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d10a      	bne.n	80081d4 <task_CardConnectionCheck+0x38>
 80081be:	4b3f      	ldr	r3, [pc, #252]	; (80082bc <task_CardConnectionCheck+0x120>)
 80081c0:	2203      	movs	r2, #3
 80081c2:	701a      	strb	r2, [r3, #0]
 80081c4:	e006      	b.n	80081d4 <task_CardConnectionCheck+0x38>
	  }
	  else if(CardState != UDEV1CARD_OFF) CardState = UDEV1CARD_NC;
 80081c6:	4b3d      	ldr	r3, [pc, #244]	; (80082bc <task_CardConnectionCheck+0x120>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <task_CardConnectionCheck+0x38>
 80081ce:	4b3b      	ldr	r3, [pc, #236]	; (80082bc <task_CardConnectionCheck+0x120>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	701a      	strb	r2, [r3, #0]

	  task_CardConnectionCheck_DONE = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]

	  if(MainState != UDEV1_OFF && (CardState == UDEV1CARD_NOTRECOGNISED || CardState == UDEV1CARD_CON))
 80081d8:	4b39      	ldr	r3, [pc, #228]	; (80082c0 <task_CardConnectionCheck+0x124>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d067      	beq.n	80082b0 <task_CardConnectionCheck+0x114>
 80081e0:	4b36      	ldr	r3, [pc, #216]	; (80082bc <task_CardConnectionCheck+0x120>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d003      	beq.n	80081f0 <task_CardConnectionCheck+0x54>
 80081e8:	4b34      	ldr	r3, [pc, #208]	; (80082bc <task_CardConnectionCheck+0x120>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d15f      	bne.n	80082b0 <task_CardConnectionCheck+0x114>
	  {
	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardConnectionCheck_DONE; i++)
 80081f0:	2300      	movs	r3, #0
 80081f2:	73bb      	strb	r3, [r7, #14]
 80081f4:	e053      	b.n	800829e <task_CardConnectionCheck+0x102>
	  	  {
			  if(osMutexAcquire(mutex_RS485Handle, osWaitForever) == osOK)
 80081f6:	4b33      	ldr	r3, [pc, #204]	; (80082c4 <task_CardConnectionCheck+0x128>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f04f 31ff 	mov.w	r1, #4294967295
 80081fe:	4618      	mov	r0, r3
 8008200:	f011 fe70 	bl	8019ee4 <osMutexAcquire>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d146      	bne.n	8008298 <task_CardConnectionCheck+0xfc>
			  {
				  sprintf(RS485TXbuffer, "SYS:CON?");
 800820a:	492f      	ldr	r1, [pc, #188]	; (80082c8 <task_CardConnectionCheck+0x12c>)
 800820c:	482f      	ldr	r0, [pc, #188]	; (80082cc <task_CardConnectionCheck+0x130>)
 800820e:	f018 fac9 	bl	80207a4 <siprintf>
				  RS485_Transmit_DMA(&RS485cfg);
 8008212:	482f      	ldr	r0, [pc, #188]	; (80082d0 <task_CardConnectionCheck+0x134>)
 8008214:	f015 f93a 	bl	801d48c <RS485_Transmit_DMA>

				  for(uint16_t timer = RS485maxTimeToTransmit_ms; timer > 0 && !RS485_TransmitDone(&RS485cfg); timer--) osDelay(1);
 8008218:	230a      	movs	r3, #10
 800821a:	81bb      	strh	r3, [r7, #12]
 800821c:	e005      	b.n	800822a <task_CardConnectionCheck+0x8e>
 800821e:	2001      	movs	r0, #1
 8008220:	f011 fdbf 	bl	8019da2 <osDelay>
 8008224:	89bb      	ldrh	r3, [r7, #12]
 8008226:	3b01      	subs	r3, #1
 8008228:	81bb      	strh	r3, [r7, #12]
 800822a:	89bb      	ldrh	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d005      	beq.n	800823c <task_CardConnectionCheck+0xa0>
 8008230:	4827      	ldr	r0, [pc, #156]	; (80082d0 <task_CardConnectionCheck+0x134>)
 8008232:	f015 f96f 	bl	801d514 <RS485_TransmitDone>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0f0      	beq.n	800821e <task_CardConnectionCheck+0x82>

				  for(uint16_t timer = RS485maxTimeToReceive_ms; timer > 0 && !RS485_IsReceived(); timer--) osDelay(1);
 800823c:	2364      	movs	r3, #100	; 0x64
 800823e:	817b      	strh	r3, [r7, #10]
 8008240:	e005      	b.n	800824e <task_CardConnectionCheck+0xb2>
 8008242:	2001      	movs	r0, #1
 8008244:	f011 fdad 	bl	8019da2 <osDelay>
 8008248:	897b      	ldrh	r3, [r7, #10]
 800824a:	3b01      	subs	r3, #1
 800824c:	817b      	strh	r3, [r7, #10]
 800824e:	897b      	ldrh	r3, [r7, #10]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <task_CardConnectionCheck+0xc2>
 8008254:	f015 f974 	bl	801d540 <RS485_IsReceived>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0f1      	beq.n	8008242 <task_CardConnectionCheck+0xa6>

				  if(RS485_IsReceived())// && UC1_CheckCardValidity(&UNICARD1data))
 800825e:	f015 f96f 	bl	801d540 <RS485_IsReceived>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d010      	beq.n	800828a <task_CardConnectionCheck+0xee>
				  {
					  if(!strncmp(RS485RXbuffer, "OK\r\n", 2))
 8008268:	2202      	movs	r2, #2
 800826a:	491a      	ldr	r1, [pc, #104]	; (80082d4 <task_CardConnectionCheck+0x138>)
 800826c:	481a      	ldr	r0, [pc, #104]	; (80082d8 <task_CardConnectionCheck+0x13c>)
 800826e:	f018 fb11 	bl	8020894 <strncmp>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d105      	bne.n	8008284 <task_CardConnectionCheck+0xe8>
					  {
						  CardCon_Watchdog = CardCon_Watchdog_TIME;
 8008278:	4b18      	ldr	r3, [pc, #96]	; (80082dc <task_CardConnectionCheck+0x140>)
 800827a:	220a      	movs	r2, #10
 800827c:	601a      	str	r2, [r3, #0]
						  CardState = UDEV1CARD_CON;
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <task_CardConnectionCheck+0x120>)
 8008280:	2203      	movs	r2, #3
 8008282:	701a      	strb	r2, [r3, #0]
					  }
					  RS485receiveFlag = 0;
 8008284:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <task_CardConnectionCheck+0x144>)
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]
				  }
				  task_CardConnectionCheck_DONE = 1;
 800828a:	2301      	movs	r3, #1
 800828c:	73fb      	strb	r3, [r7, #15]
				  osMutexRelease(mutex_RS485Handle);
 800828e:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <task_CardConnectionCheck+0x128>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f011 fe71 	bl	8019f7a <osMutexRelease>
	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardConnectionCheck_DONE; i++)
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	3301      	adds	r3, #1
 800829c:	73bb      	strb	r3, [r7, #14]
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d802      	bhi.n	80082aa <task_CardConnectionCheck+0x10e>
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0a5      	beq.n	80081f6 <task_CardConnectionCheck+0x5a>
			  }
		  }
		  osDelay(1);
 80082aa:	2001      	movs	r0, #1
 80082ac:	f011 fd79 	bl	8019da2 <osDelay>
	  }
	  osDelay(Card_ConnectionCheckPeriod_ms);
 80082b0:	20c8      	movs	r0, #200	; 0xc8
 80082b2:	f011 fd76 	bl	8019da2 <osDelay>
	  if(!HAL_GPIO_ReadPin(CardDetect_IN_GPIO_Port, CardDetect_IN_Pin))
 80082b6:	e777      	b.n	80081a8 <task_CardConnectionCheck+0xc>
 80082b8:	48000400 	.word	0x48000400
 80082bc:	20000b3c 	.word	0x20000b3c
 80082c0:	20000004 	.word	0x20000004
 80082c4:	20000b0c 	.word	0x20000b0c
 80082c8:	080233f8 	.word	0x080233f8
 80082cc:	20000ba8 	.word	0x20000ba8
 80082d0:	20000b94 	.word	0x20000b94
 80082d4:	08023404 	.word	0x08023404
 80082d8:	20001184 	.word	0x20001184
 80082dc:	20001d40 	.word	0x20001d40
 80082e0:	20012be8 	.word	0x20012be8
 80082e4:	00000000 	.word	0x00000000

080082e8 <task_CardUpdateStatus>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_CardUpdateStatus */
void task_CardUpdateStatus(void *argument)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_CardUpdateStatus */
	uint8_t task_CardUpdateStatus_DONE = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  	  task_CardUpdateStatus_DONE = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
	  	  if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NOTRECOGNISED)
 80082f8:	4b57      	ldr	r3, [pc, #348]	; (8008458 <task_CardUpdateStatus+0x170>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 809c 	beq.w	800843a <task_CardUpdateStatus+0x152>
 8008302:	4b56      	ldr	r3, [pc, #344]	; (800845c <task_CardUpdateStatus+0x174>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b02      	cmp	r3, #2
 8008308:	f240 8097 	bls.w	800843a <task_CardUpdateStatus+0x152>
	  	  {
	  	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardUpdateStatus_DONE; i++)
 800830c:	2300      	movs	r3, #0
 800830e:	73bb      	strb	r3, [r7, #14]
 8008310:	e089      	b.n	8008426 <task_CardUpdateStatus+0x13e>
	  	  	  {
	  			  if(osMutexAcquire(mutex_RS485Handle, osWaitForever) == osOK)
 8008312:	4b53      	ldr	r3, [pc, #332]	; (8008460 <task_CardUpdateStatus+0x178>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f04f 31ff 	mov.w	r1, #4294967295
 800831a:	4618      	mov	r0, r3
 800831c:	f011 fde2 	bl	8019ee4 <osMutexAcquire>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d17c      	bne.n	8008420 <task_CardUpdateStatus+0x138>
	  			  {
	  				  sprintf(RS485TXbuffer, "SYS:STATUS:%d",(uint8_t)CardState);
 8008326:	4b4d      	ldr	r3, [pc, #308]	; (800845c <task_CardUpdateStatus+0x174>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	494d      	ldr	r1, [pc, #308]	; (8008464 <task_CardUpdateStatus+0x17c>)
 800832e:	484e      	ldr	r0, [pc, #312]	; (8008468 <task_CardUpdateStatus+0x180>)
 8008330:	f018 fa38 	bl	80207a4 <siprintf>
	  				  RS485_Transmit_DMA(&RS485cfg);
 8008334:	484d      	ldr	r0, [pc, #308]	; (800846c <task_CardUpdateStatus+0x184>)
 8008336:	f015 f8a9 	bl	801d48c <RS485_Transmit_DMA>

	  				  for(uint16_t timer = RS485maxTimeToTransmit_ms; timer > 0 && !RS485_TransmitDone(&RS485cfg); timer--) osDelay(1);
 800833a:	230a      	movs	r3, #10
 800833c:	81bb      	strh	r3, [r7, #12]
 800833e:	e005      	b.n	800834c <task_CardUpdateStatus+0x64>
 8008340:	2001      	movs	r0, #1
 8008342:	f011 fd2e 	bl	8019da2 <osDelay>
 8008346:	89bb      	ldrh	r3, [r7, #12]
 8008348:	3b01      	subs	r3, #1
 800834a:	81bb      	strh	r3, [r7, #12]
 800834c:	89bb      	ldrh	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <task_CardUpdateStatus+0x76>
 8008352:	4846      	ldr	r0, [pc, #280]	; (800846c <task_CardUpdateStatus+0x184>)
 8008354:	f015 f8de 	bl	801d514 <RS485_TransmitDone>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0f0      	beq.n	8008340 <task_CardUpdateStatus+0x58>

	  				  for(uint16_t timer = RS485maxTimeToReceive_ms; timer > 0 && !RS485_IsReceived(); timer--) osDelay(1);
 800835e:	2364      	movs	r3, #100	; 0x64
 8008360:	817b      	strh	r3, [r7, #10]
 8008362:	e005      	b.n	8008370 <task_CardUpdateStatus+0x88>
 8008364:	2001      	movs	r0, #1
 8008366:	f011 fd1c 	bl	8019da2 <osDelay>
 800836a:	897b      	ldrh	r3, [r7, #10]
 800836c:	3b01      	subs	r3, #1
 800836e:	817b      	strh	r3, [r7, #10]
 8008370:	897b      	ldrh	r3, [r7, #10]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d004      	beq.n	8008380 <task_CardUpdateStatus+0x98>
 8008376:	f015 f8e3 	bl	801d540 <RS485_IsReceived>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0f1      	beq.n	8008364 <task_CardUpdateStatus+0x7c>

	  				  if(RS485_IsReceived() && !strncmp(RS485RXbuffer, "OK\r\n", 2))// && UC1_CheckCardValidity(&UNICARD1data))
 8008380:	f015 f8de 	bl	801d540 <RS485_IsReceived>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d025      	beq.n	80083d6 <task_CardUpdateStatus+0xee>
 800838a:	2202      	movs	r2, #2
 800838c:	4938      	ldr	r1, [pc, #224]	; (8008470 <task_CardUpdateStatus+0x188>)
 800838e:	4839      	ldr	r0, [pc, #228]	; (8008474 <task_CardUpdateStatus+0x18c>)
 8008390:	f018 fa80 	bl	8020894 <strncmp>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d11d      	bne.n	80083d6 <task_CardUpdateStatus+0xee>
	  				  {
	  						if(ComFailCounter > 0) ComFailCounter -= Card_acceptableFailedComRatio;
 800839a:	4b37      	ldr	r3, [pc, #220]	; (8008478 <task_CardUpdateStatus+0x190>)
 800839c:	edd3 7a00 	vldr	s15, [r3]
 80083a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a8:	dd12      	ble.n	80083d0 <task_CardUpdateStatus+0xe8>
 80083aa:	4b33      	ldr	r3, [pc, #204]	; (8008478 <task_CardUpdateStatus+0x190>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fd fd52 	bl	8005e58 <__aeabi_f2d>
 80083b4:	a324      	add	r3, pc, #144	; (adr r3, 8008448 <task_CardUpdateStatus+0x160>)
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	f7fd fbed 	bl	8005b98 <__aeabi_dsub>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4610      	mov	r0, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	f7fe f859 	bl	800647c <__aeabi_d2f>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4a2a      	ldr	r2, [pc, #168]	; (8008478 <task_CardUpdateStatus+0x190>)
 80083ce:	6013      	str	r3, [r2, #0]
	  						task_CardUpdateStatus_DONE = 1;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]
 80083d4:	e01c      	b.n	8008410 <task_CardUpdateStatus+0x128>
	  				  }
	  				  else if(ComFailCounter < 10) ComFailCounter += (1-Card_acceptableFailedComRatio);
 80083d6:	4b28      	ldr	r3, [pc, #160]	; (8008478 <task_CardUpdateStatus+0x190>)
 80083d8:	edd3 7a00 	vldr	s15, [r3]
 80083dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80083e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e8:	d512      	bpl.n	8008410 <task_CardUpdateStatus+0x128>
 80083ea:	4b23      	ldr	r3, [pc, #140]	; (8008478 <task_CardUpdateStatus+0x190>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fd fd32 	bl	8005e58 <__aeabi_f2d>
 80083f4:	a316      	add	r3, pc, #88	; (adr r3, 8008450 <task_CardUpdateStatus+0x168>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f7fd fbcf 	bl	8005b9c <__adddf3>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4610      	mov	r0, r2
 8008404:	4619      	mov	r1, r3
 8008406:	f7fe f839 	bl	800647c <__aeabi_d2f>
 800840a:	4603      	mov	r3, r0
 800840c:	4a1a      	ldr	r2, [pc, #104]	; (8008478 <task_CardUpdateStatus+0x190>)
 800840e:	6013      	str	r3, [r2, #0]

	  				  RS485receiveFlag = 0;
 8008410:	4b1a      	ldr	r3, [pc, #104]	; (800847c <task_CardUpdateStatus+0x194>)
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]

	  				  osMutexRelease(mutex_RS485Handle);
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <task_CardUpdateStatus+0x178>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f011 fdad 	bl	8019f7a <osMutexRelease>
	  	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardUpdateStatus_DONE; i++)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	3301      	adds	r3, #1
 8008424:	73bb      	strb	r3, [r7, #14]
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b04      	cmp	r3, #4
 800842a:	d803      	bhi.n	8008434 <task_CardUpdateStatus+0x14c>
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f43f af6f 	beq.w	8008312 <task_CardUpdateStatus+0x2a>
	  			  }
	  		  }
	  		  osDelay(1);
 8008434:	2001      	movs	r0, #1
 8008436:	f011 fcb4 	bl	8019da2 <osDelay>
	  	  }
    osDelay(Card_StatusUpdatePeriod_ms);
 800843a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800843e:	f011 fcb0 	bl	8019da2 <osDelay>
	  	  task_CardUpdateStatus_DONE = 0;
 8008442:	e757      	b.n	80082f4 <task_CardUpdateStatus+0xc>
 8008444:	f3af 8000 	nop.w
 8008448:	9999999a 	.word	0x9999999a
 800844c:	3fb99999 	.word	0x3fb99999
 8008450:	cccccccd 	.word	0xcccccccd
 8008454:	3feccccc 	.word	0x3feccccc
 8008458:	20000004 	.word	0x20000004
 800845c:	20000b3c 	.word	0x20000b3c
 8008460:	20000b0c 	.word	0x20000b0c
 8008464:	0802340c 	.word	0x0802340c
 8008468:	20000ba8 	.word	0x20000ba8
 800846c:	20000b94 	.word	0x20000b94
 8008470:	08023404 	.word	0x08023404
 8008474:	20001184 	.word	0x20001184
 8008478:	20001d44 	.word	0x20001d44
 800847c:	20012be8 	.word	0x20012be8

08008480 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM20) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a04      	ldr	r2, [pc, #16]	; (80084a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d101      	bne.n	8008496 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008492:	f000 ff53 	bl	800933c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	40015000 	.word	0x40015000

080084a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80084aa:	b672      	cpsid	i
}
 80084ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t toggler = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	71fb      	strb	r3, [r7, #7]
  int rstTimer = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  HAL_GPIO_WritePin(PWR3V3_EN_OUT_GPIO_Port, PWR3V3_EN_OUT_Pin, 0);
 80084b6:	2200      	movs	r2, #0
 80084b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084bc:	482d      	ldr	r0, [pc, #180]	; (8008574 <Error_Handler+0xd0>)
 80084be:	f003 fb8d 	bl	800bbdc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWR5VEN_OUT_GPIO_Port, PWR5VEN_OUT_Pin, 0);
 80084c2:	2200      	movs	r2, #0
 80084c4:	2110      	movs	r1, #16
 80084c6:	482b      	ldr	r0, [pc, #172]	; (8008574 <Error_Handler+0xd0>)
 80084c8:	f003 fb88 	bl	800bbdc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWRVCC_EN_OUT_GPIO_Port, PWRVCC_EN_OUT_Pin, 0);
 80084cc:	2200      	movs	r2, #0
 80084ce:	2104      	movs	r1, #4
 80084d0:	4829      	ldr	r0, [pc, #164]	; (8008578 <Error_Handler+0xd4>)
 80084d2:	f003 fb83 	bl	800bbdc <HAL_GPIO_WritePin>

	  LED_PWMSET(1, 0, 0);
 80084d6:	ed9f 1a29 	vldr	s2, [pc, #164]	; 800857c <Error_Handler+0xd8>
 80084da:	eddf 0a28 	vldr	s1, [pc, #160]	; 800857c <Error_Handler+0xd8>
 80084de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80084e2:	f015 fdb3 	bl	801e04c <LED_PWMSET>
	  HAL_GPIO_WritePin(LED1_OUT_GPIO_Port, LED1_OUT_Pin, !toggler);
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	bf0c      	ite	eq
 80084ec:	2301      	moveq	r3, #1
 80084ee:	2300      	movne	r3, #0
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	461a      	mov	r2, r3
 80084f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80084f8:	4821      	ldr	r0, [pc, #132]	; (8008580 <Error_Handler+0xdc>)
 80084fa:	f003 fb6f 	bl	800bbdc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_OUT_GPIO_Port, LED2_OUT_Pin, toggler);
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	461a      	mov	r2, r3
 8008502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008506:	481e      	ldr	r0, [pc, #120]	; (8008580 <Error_Handler+0xdc>)
 8008508:	f003 fb68 	bl	800bbdc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_OUT_GPIO_Port, LED3_OUT_Pin, 0);
 800850c:	2200      	movs	r2, #0
 800850e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008512:	481b      	ldr	r0, [pc, #108]	; (8008580 <Error_Handler+0xdc>)
 8008514:	f003 fb62 	bl	800bbdc <HAL_GPIO_WritePin>
	  toggler = !toggler;
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	2b00      	cmp	r3, #0
 800851c:	bf0c      	ite	eq
 800851e:	2301      	moveq	r3, #1
 8008520:	2300      	movne	r3, #0
 8008522:	b2db      	uxtb	r3, r3
 8008524:	71fb      	strb	r3, [r7, #7]

	  if(rstTimer >= 1 && !HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin)) NVIC_SystemReset();
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	dd09      	ble.n	8008540 <Error_Handler+0x9c>
 800852c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008530:	4810      	ldr	r0, [pc, #64]	; (8008574 <Error_Handler+0xd0>)
 8008532:	f003 fb3b 	bl	800bbac <HAL_GPIO_ReadPin>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <Error_Handler+0x9c>
 800853c:	f7fe fa2c 	bl	8006998 <__NVIC_SystemReset>

	  if(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin)) rstTimer++;
 8008540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008544:	480b      	ldr	r0, [pc, #44]	; (8008574 <Error_Handler+0xd0>)
 8008546:	f003 fb31 	bl	800bbac <HAL_GPIO_ReadPin>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <Error_Handler+0xb4>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	3301      	adds	r3, #1
 8008554:	603b      	str	r3, [r7, #0]
 8008556:	e008      	b.n	800856a <Error_Handler+0xc6>
	  else if(rstTimer > 0) rstTimer--;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	dd03      	ble.n	8008566 <Error_Handler+0xc2>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	3b01      	subs	r3, #1
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	e001      	b.n	800856a <Error_Handler+0xc6>
	  else rstTimer = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	603b      	str	r3, [r7, #0]

	  delay(200);
 800856a:	20c8      	movs	r0, #200	; 0xc8
 800856c:	f7ff fa46 	bl	80079fc <delay>
	  HAL_GPIO_WritePin(PWR3V3_EN_OUT_GPIO_Port, PWR3V3_EN_OUT_Pin, 0);
 8008570:	e7a1      	b.n	80084b6 <Error_Handler+0x12>
 8008572:	bf00      	nop
 8008574:	48000800 	.word	0x48000800
 8008578:	48000c00 	.word	0x48000c00
 800857c:	00000000 	.word	0x00000000
 8008580:	48000400 	.word	0x48000400

08008584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800858a:	4b16      	ldr	r3, [pc, #88]	; (80085e4 <HAL_MspInit+0x60>)
 800858c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800858e:	4a15      	ldr	r2, [pc, #84]	; (80085e4 <HAL_MspInit+0x60>)
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	6613      	str	r3, [r2, #96]	; 0x60
 8008596:	4b13      	ldr	r3, [pc, #76]	; (80085e4 <HAL_MspInit+0x60>)
 8008598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	607b      	str	r3, [r7, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085a2:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <HAL_MspInit+0x60>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	4a0f      	ldr	r2, [pc, #60]	; (80085e4 <HAL_MspInit+0x60>)
 80085a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ac:	6593      	str	r3, [r2, #88]	; 0x58
 80085ae:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <HAL_MspInit+0x60>)
 80085b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80085ba:	2200      	movs	r2, #0
 80085bc:	210f      	movs	r1, #15
 80085be:	f06f 0001 	mvn.w	r0, #1
 80085c2:	f002 fe17 	bl	800b1f4 <HAL_NVIC_SetPriority>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80085c6:	2000      	movs	r0, #0
 80085c8:	f000 fef8 	bl	80093bc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80085cc:	f000 ff1e 	bl	800940c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80085d0:	2000      	movs	r0, #0
 80085d2:	f000 ff07 	bl	80093e4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80085d6:	f005 fa23 	bl	800da20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	40021000 	.word	0x40021000

080085e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b0a4      	sub	sp, #144	; 0x90
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	605a      	str	r2, [r3, #4]
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008604:	2254      	movs	r2, #84	; 0x54
 8008606:	2100      	movs	r1, #0
 8008608:	4618      	mov	r0, r3
 800860a:	f018 f92e 	bl	802086a <memset>
  if(hadc->Instance==ADC1)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008616:	f040 808e 	bne.w	8008736 <HAL_ADC_MspInit+0x14e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800861a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008620:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008624:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800862a:	4618      	mov	r0, r3
 800862c:	f005 ff68 	bl	800e500 <HAL_RCCEx_PeriphCLKConfig>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8008636:	f7ff ff35 	bl	80084a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800863a:	4b7c      	ldr	r3, [pc, #496]	; (800882c <HAL_ADC_MspInit+0x244>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3301      	adds	r3, #1
 8008640:	4a7a      	ldr	r2, [pc, #488]	; (800882c <HAL_ADC_MspInit+0x244>)
 8008642:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8008644:	4b79      	ldr	r3, [pc, #484]	; (800882c <HAL_ADC_MspInit+0x244>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d10b      	bne.n	8008664 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800864c:	4b78      	ldr	r3, [pc, #480]	; (8008830 <HAL_ADC_MspInit+0x248>)
 800864e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008650:	4a77      	ldr	r2, [pc, #476]	; (8008830 <HAL_ADC_MspInit+0x248>)
 8008652:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008656:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008658:	4b75      	ldr	r3, [pc, #468]	; (8008830 <HAL_ADC_MspInit+0x248>)
 800865a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800865c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008664:	4b72      	ldr	r3, [pc, #456]	; (8008830 <HAL_ADC_MspInit+0x248>)
 8008666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008668:	4a71      	ldr	r2, [pc, #452]	; (8008830 <HAL_ADC_MspInit+0x248>)
 800866a:	f043 0320 	orr.w	r3, r3, #32
 800866e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008670:	4b6f      	ldr	r3, [pc, #444]	; (8008830 <HAL_ADC_MspInit+0x248>)
 8008672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008674:	f003 0320 	and.w	r3, r3, #32
 8008678:	623b      	str	r3, [r7, #32]
 800867a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800867c:	4b6c      	ldr	r3, [pc, #432]	; (8008830 <HAL_ADC_MspInit+0x248>)
 800867e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008680:	4a6b      	ldr	r2, [pc, #428]	; (8008830 <HAL_ADC_MspInit+0x248>)
 8008682:	f043 0302 	orr.w	r3, r3, #2
 8008686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008688:	4b69      	ldr	r3, [pc, #420]	; (8008830 <HAL_ADC_MspInit+0x248>)
 800868a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868c:	f003 0302 	and.w	r3, r3, #2
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = PWR3V3_ISENSE_ADC1IN10_Pin;
 8008694:	2301      	movs	r3, #1
 8008696:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008698:	2303      	movs	r3, #3
 800869a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(PWR3V3_ISENSE_ADC1IN10_GPIO_Port, &GPIO_InitStruct);
 80086a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80086a8:	4619      	mov	r1, r3
 80086aa:	4862      	ldr	r0, [pc, #392]	; (8008834 <HAL_ADC_MspInit+0x24c>)
 80086ac:	f003 f8fc 	bl	800b8a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VIN_SENSE_ADC1_IN11_Pin;
 80086b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086b6:	2303      	movs	r3, #3
 80086b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(VIN_SENSE_ADC1_IN11_GPIO_Port, &GPIO_InitStruct);
 80086c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80086c6:	4619      	mov	r1, r3
 80086c8:	485b      	ldr	r0, [pc, #364]	; (8008838 <HAL_ADC_MspInit+0x250>)
 80086ca:	f003 f8ed 	bl	800b8a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 80086ce:	4b5b      	ldr	r3, [pc, #364]	; (800883c <HAL_ADC_MspInit+0x254>)
 80086d0:	4a5b      	ldr	r2, [pc, #364]	; (8008840 <HAL_ADC_MspInit+0x258>)
 80086d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80086d4:	4b59      	ldr	r3, [pc, #356]	; (800883c <HAL_ADC_MspInit+0x254>)
 80086d6:	2205      	movs	r2, #5
 80086d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086da:	4b58      	ldr	r3, [pc, #352]	; (800883c <HAL_ADC_MspInit+0x254>)
 80086dc:	2200      	movs	r2, #0
 80086de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80086e0:	4b56      	ldr	r3, [pc, #344]	; (800883c <HAL_ADC_MspInit+0x254>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80086e6:	4b55      	ldr	r3, [pc, #340]	; (800883c <HAL_ADC_MspInit+0x254>)
 80086e8:	2280      	movs	r2, #128	; 0x80
 80086ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80086ec:	4b53      	ldr	r3, [pc, #332]	; (800883c <HAL_ADC_MspInit+0x254>)
 80086ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80086f4:	4b51      	ldr	r3, [pc, #324]	; (800883c <HAL_ADC_MspInit+0x254>)
 80086f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80086fc:	4b4f      	ldr	r3, [pc, #316]	; (800883c <HAL_ADC_MspInit+0x254>)
 80086fe:	2220      	movs	r2, #32
 8008700:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008702:	4b4e      	ldr	r3, [pc, #312]	; (800883c <HAL_ADC_MspInit+0x254>)
 8008704:	2200      	movs	r2, #0
 8008706:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008708:	484c      	ldr	r0, [pc, #304]	; (800883c <HAL_ADC_MspInit+0x254>)
 800870a:	f002 fd9b 	bl	800b244 <HAL_DMA_Init>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8008714:	f7ff fec6 	bl	80084a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a48      	ldr	r2, [pc, #288]	; (800883c <HAL_ADC_MspInit+0x254>)
 800871c:	655a      	str	r2, [r3, #84]	; 0x54
 800871e:	4a47      	ldr	r2, [pc, #284]	; (800883c <HAL_ADC_MspInit+0x254>)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8008724:	2200      	movs	r2, #0
 8008726:	2105      	movs	r1, #5
 8008728:	2012      	movs	r0, #18
 800872a:	f002 fd63 	bl	800b1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800872e:	2012      	movs	r0, #18
 8008730:	f002 fd7a 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8008734:	e0fc      	b.n	8008930 <HAL_ADC_MspInit+0x348>
  else if(hadc->Instance==ADC2)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a42      	ldr	r2, [pc, #264]	; (8008844 <HAL_ADC_MspInit+0x25c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	f040 8087 	bne.w	8008850 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008746:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008748:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800874c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800874e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008752:	4618      	mov	r0, r3
 8008754:	f005 fed4 	bl	800e500 <HAL_RCCEx_PeriphCLKConfig>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 800875e:	f7ff fea1 	bl	80084a4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8008762:	4b32      	ldr	r3, [pc, #200]	; (800882c <HAL_ADC_MspInit+0x244>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3301      	adds	r3, #1
 8008768:	4a30      	ldr	r2, [pc, #192]	; (800882c <HAL_ADC_MspInit+0x244>)
 800876a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800876c:	4b2f      	ldr	r3, [pc, #188]	; (800882c <HAL_ADC_MspInit+0x244>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d10b      	bne.n	800878c <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8008774:	4b2e      	ldr	r3, [pc, #184]	; (8008830 <HAL_ADC_MspInit+0x248>)
 8008776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008778:	4a2d      	ldr	r2, [pc, #180]	; (8008830 <HAL_ADC_MspInit+0x248>)
 800877a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800877e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008780:	4b2b      	ldr	r3, [pc, #172]	; (8008830 <HAL_ADC_MspInit+0x248>)
 8008782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008788:	61bb      	str	r3, [r7, #24]
 800878a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800878c:	4b28      	ldr	r3, [pc, #160]	; (8008830 <HAL_ADC_MspInit+0x248>)
 800878e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008790:	4a27      	ldr	r2, [pc, #156]	; (8008830 <HAL_ADC_MspInit+0x248>)
 8008792:	f043 0301 	orr.w	r3, r3, #1
 8008796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008798:	4b25      	ldr	r3, [pc, #148]	; (8008830 <HAL_ADC_MspInit+0x248>)
 800879a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	617b      	str	r3, [r7, #20]
 80087a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWR5VISENSE_ADC2IN17_Pin;
 80087a4:	2310      	movs	r3, #16
 80087a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087a8:	2303      	movs	r3, #3
 80087aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(PWR5VISENSE_ADC2IN17_GPIO_Port, &GPIO_InitStruct);
 80087b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80087b8:	4619      	mov	r1, r3
 80087ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087be:	f003 f873 	bl	800b8a8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 80087c2:	4b21      	ldr	r3, [pc, #132]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087c4:	4a21      	ldr	r2, [pc, #132]	; (800884c <HAL_ADC_MspInit+0x264>)
 80087c6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80087c8:	4b1f      	ldr	r3, [pc, #124]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087ca:	2224      	movs	r2, #36	; 0x24
 80087cc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087ce:	4b1e      	ldr	r3, [pc, #120]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80087d4:	4b1c      	ldr	r3, [pc, #112]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80087da:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087dc:	2280      	movs	r2, #128	; 0x80
 80087de:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80087e0:	4b19      	ldr	r3, [pc, #100]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087e6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80087e8:	4b17      	ldr	r3, [pc, #92]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087ee:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80087f0:	4b15      	ldr	r3, [pc, #84]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087f2:	2220      	movs	r2, #32
 80087f4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80087fc:	4812      	ldr	r0, [pc, #72]	; (8008848 <HAL_ADC_MspInit+0x260>)
 80087fe:	f002 fd21 	bl	800b244 <HAL_DMA_Init>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <HAL_ADC_MspInit+0x224>
      Error_Handler();
 8008808:	f7ff fe4c 	bl	80084a4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a0e      	ldr	r2, [pc, #56]	; (8008848 <HAL_ADC_MspInit+0x260>)
 8008810:	655a      	str	r2, [r3, #84]	; 0x54
 8008812:	4a0d      	ldr	r2, [pc, #52]	; (8008848 <HAL_ADC_MspInit+0x260>)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8008818:	2200      	movs	r2, #0
 800881a:	2105      	movs	r1, #5
 800881c:	2012      	movs	r0, #18
 800881e:	f002 fce9 	bl	800b1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008822:	2012      	movs	r0, #18
 8008824:	f002 fd00 	bl	800b228 <HAL_NVIC_EnableIRQ>
}
 8008828:	e082      	b.n	8008930 <HAL_ADC_MspInit+0x348>
 800882a:	bf00      	nop
 800882c:	20001d48 	.word	0x20001d48
 8008830:	40021000 	.word	0x40021000
 8008834:	48001400 	.word	0x48001400
 8008838:	48000400 	.word	0x48000400
 800883c:	200005a0 	.word	0x200005a0
 8008840:	40020058 	.word	0x40020058
 8008844:	50000100 	.word	0x50000100
 8008848:	20000600 	.word	0x20000600
 800884c:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC5)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a38      	ldr	r2, [pc, #224]	; (8008938 <HAL_ADC_MspInit+0x350>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d16a      	bne.n	8008930 <HAL_ADC_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800885a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800885e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8008860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008864:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800886a:	4618      	mov	r0, r3
 800886c:	f005 fe48 	bl	800e500 <HAL_RCCEx_PeriphCLKConfig>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <HAL_ADC_MspInit+0x292>
      Error_Handler();
 8008876:	f7ff fe15 	bl	80084a4 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800887a:	4b30      	ldr	r3, [pc, #192]	; (800893c <HAL_ADC_MspInit+0x354>)
 800887c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887e:	4a2f      	ldr	r2, [pc, #188]	; (800893c <HAL_ADC_MspInit+0x354>)
 8008880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008886:	4b2d      	ldr	r3, [pc, #180]	; (800893c <HAL_ADC_MspInit+0x354>)
 8008888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800888e:	613b      	str	r3, [r7, #16]
 8008890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008892:	4b2a      	ldr	r3, [pc, #168]	; (800893c <HAL_ADC_MspInit+0x354>)
 8008894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008896:	4a29      	ldr	r2, [pc, #164]	; (800893c <HAL_ADC_MspInit+0x354>)
 8008898:	f043 0301 	orr.w	r3, r3, #1
 800889c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800889e:	4b27      	ldr	r3, [pc, #156]	; (800893c <HAL_ADC_MspInit+0x354>)
 80088a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCC_ISENSE_ADC5_IN1_Pin;
 80088aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088b0:	2303      	movs	r3, #3
 80088b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(VCC_ISENSE_ADC5_IN1_GPIO_Port, &GPIO_InitStruct);
 80088bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80088c0:	4619      	mov	r1, r3
 80088c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088c6:	f002 ffef 	bl	800b8a8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel7;
 80088ca:	4b1d      	ldr	r3, [pc, #116]	; (8008940 <HAL_ADC_MspInit+0x358>)
 80088cc:	4a1d      	ldr	r2, [pc, #116]	; (8008944 <HAL_ADC_MspInit+0x35c>)
 80088ce:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80088d0:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <HAL_ADC_MspInit+0x358>)
 80088d2:	2227      	movs	r2, #39	; 0x27
 80088d4:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088d6:	4b1a      	ldr	r3, [pc, #104]	; (8008940 <HAL_ADC_MspInit+0x358>)
 80088d8:	2200      	movs	r2, #0
 80088da:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80088dc:	4b18      	ldr	r3, [pc, #96]	; (8008940 <HAL_ADC_MspInit+0x358>)
 80088de:	2200      	movs	r2, #0
 80088e0:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80088e2:	4b17      	ldr	r3, [pc, #92]	; (8008940 <HAL_ADC_MspInit+0x358>)
 80088e4:	2280      	movs	r2, #128	; 0x80
 80088e6:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80088e8:	4b15      	ldr	r3, [pc, #84]	; (8008940 <HAL_ADC_MspInit+0x358>)
 80088ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ee:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80088f0:	4b13      	ldr	r3, [pc, #76]	; (8008940 <HAL_ADC_MspInit+0x358>)
 80088f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088f6:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80088f8:	4b11      	ldr	r3, [pc, #68]	; (8008940 <HAL_ADC_MspInit+0x358>)
 80088fa:	2220      	movs	r2, #32
 80088fc:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80088fe:	4b10      	ldr	r3, [pc, #64]	; (8008940 <HAL_ADC_MspInit+0x358>)
 8008900:	2200      	movs	r2, #0
 8008902:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8008904:	480e      	ldr	r0, [pc, #56]	; (8008940 <HAL_ADC_MspInit+0x358>)
 8008906:	f002 fc9d 	bl	800b244 <HAL_DMA_Init>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <HAL_ADC_MspInit+0x32c>
      Error_Handler();
 8008910:	f7ff fdc8 	bl	80084a4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a0a      	ldr	r2, [pc, #40]	; (8008940 <HAL_ADC_MspInit+0x358>)
 8008918:	655a      	str	r2, [r3, #84]	; 0x54
 800891a:	4a09      	ldr	r2, [pc, #36]	; (8008940 <HAL_ADC_MspInit+0x358>)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC5_IRQn, 5, 0);
 8008920:	2200      	movs	r2, #0
 8008922:	2105      	movs	r1, #5
 8008924:	203e      	movs	r0, #62	; 0x3e
 8008926:	f002 fc65 	bl	800b1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 800892a:	203e      	movs	r0, #62	; 0x3e
 800892c:	f002 fc7c 	bl	800b228 <HAL_NVIC_EnableIRQ>
}
 8008930:	bf00      	nop
 8008932:	3790      	adds	r7, #144	; 0x90
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	50000600 	.word	0x50000600
 800893c:	40021000 	.word	0x40021000
 8008940:	20000660 	.word	0x20000660
 8008944:	40020080 	.word	0x40020080

08008948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b09e      	sub	sp, #120	; 0x78
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008950:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	605a      	str	r2, [r3, #4]
 800895a:	609a      	str	r2, [r3, #8]
 800895c:	60da      	str	r2, [r3, #12]
 800895e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008960:	f107 0310 	add.w	r3, r7, #16
 8008964:	2254      	movs	r2, #84	; 0x54
 8008966:	2100      	movs	r1, #0
 8008968:	4618      	mov	r0, r3
 800896a:	f017 ff7e 	bl	802086a <memset>
  if(hi2c->Instance==I2C4)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a1f      	ldr	r2, [pc, #124]	; (80089f0 <HAL_I2C_MspInit+0xa8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d136      	bne.n	80089e6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8008978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800897c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800897e:	2300      	movs	r3, #0
 8008980:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008982:	f107 0310 	add.w	r3, r7, #16
 8008986:	4618      	mov	r0, r3
 8008988:	f005 fdba 	bl	800e500 <HAL_RCCEx_PeriphCLKConfig>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8008992:	f7ff fd87 	bl	80084a4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008996:	4b17      	ldr	r3, [pc, #92]	; (80089f4 <HAL_I2C_MspInit+0xac>)
 8008998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800899a:	4a16      	ldr	r2, [pc, #88]	; (80089f4 <HAL_I2C_MspInit+0xac>)
 800899c:	f043 0304 	orr.w	r3, r3, #4
 80089a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089a2:	4b14      	ldr	r3, [pc, #80]	; (80089f4 <HAL_I2C_MspInit+0xac>)
 80089a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PC7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80089ae:	23c0      	movs	r3, #192	; 0xc0
 80089b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80089b2:	2312      	movs	r3, #18
 80089b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089ba:	2300      	movs	r3, #0
 80089bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80089be:	2308      	movs	r3, #8
 80089c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80089c6:	4619      	mov	r1, r3
 80089c8:	480b      	ldr	r0, [pc, #44]	; (80089f8 <HAL_I2C_MspInit+0xb0>)
 80089ca:	f002 ff6d 	bl	800b8a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80089ce:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <HAL_I2C_MspInit+0xac>)
 80089d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d2:	4a08      	ldr	r2, [pc, #32]	; (80089f4 <HAL_I2C_MspInit+0xac>)
 80089d4:	f043 0302 	orr.w	r3, r3, #2
 80089d8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80089da:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <HAL_I2C_MspInit+0xac>)
 80089dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	60bb      	str	r3, [r7, #8]
 80089e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80089e6:	bf00      	nop
 80089e8:	3778      	adds	r7, #120	; 0x78
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	40008400 	.word	0x40008400
 80089f4:	40021000 	.word	0x40021000
 80089f8:	48000800 	.word	0x48000800

080089fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a13      	ldr	r2, [pc, #76]	; (8008a58 <HAL_TIM_Base_MspInit+0x5c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d10c      	bne.n	8008a28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008a0e:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <HAL_TIM_Base_MspInit+0x60>)
 8008a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a12:	4a12      	ldr	r2, [pc, #72]	; (8008a5c <HAL_TIM_Base_MspInit+0x60>)
 8008a14:	f043 0302 	orr.w	r3, r3, #2
 8008a18:	6593      	str	r3, [r2, #88]	; 0x58
 8008a1a:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <HAL_TIM_Base_MspInit+0x60>)
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8008a26:	e010      	b.n	8008a4a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a0c      	ldr	r2, [pc, #48]	; (8008a60 <HAL_TIM_Base_MspInit+0x64>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d10b      	bne.n	8008a4a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008a32:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <HAL_TIM_Base_MspInit+0x60>)
 8008a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a36:	4a09      	ldr	r2, [pc, #36]	; (8008a5c <HAL_TIM_Base_MspInit+0x60>)
 8008a38:	f043 0308 	orr.w	r3, r3, #8
 8008a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a3e:	4b07      	ldr	r3, [pc, #28]	; (8008a5c <HAL_TIM_Base_MspInit+0x60>)
 8008a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	60bb      	str	r3, [r7, #8]
 8008a48:	68bb      	ldr	r3, [r7, #8]
}
 8008a4a:	bf00      	nop
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	40000400 	.word	0x40000400
 8008a5c:	40021000 	.word	0x40021000
 8008a60:	40000c00 	.word	0x40000c00

08008a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	; 0x28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a6c:	f107 0314 	add.w	r3, r7, #20
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	605a      	str	r2, [r3, #4]
 8008a76:	609a      	str	r2, [r3, #8]
 8008a78:	60da      	str	r2, [r3, #12]
 8008a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a22      	ldr	r2, [pc, #136]	; (8008b0c <HAL_TIM_MspPostInit+0xa8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d11c      	bne.n	8008ac0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a86:	4b22      	ldr	r3, [pc, #136]	; (8008b10 <HAL_TIM_MspPostInit+0xac>)
 8008a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a8a:	4a21      	ldr	r2, [pc, #132]	; (8008b10 <HAL_TIM_MspPostInit+0xac>)
 8008a8c:	f043 0302 	orr.w	r3, r3, #2
 8008a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a92:	4b1f      	ldr	r3, [pc, #124]	; (8008b10 <HAL_TIM_MspPostInit+0xac>)
 8008a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	613b      	str	r3, [r7, #16]
 8008a9c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = LEDB_TIM3CH3_Pin|LEDG_TIM3CH4_Pin;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ab2:	f107 0314 	add.w	r3, r7, #20
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4816      	ldr	r0, [pc, #88]	; (8008b14 <HAL_TIM_MspPostInit+0xb0>)
 8008aba:	f002 fef5 	bl	800b8a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008abe:	e020      	b.n	8008b02 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM5)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a14      	ldr	r2, [pc, #80]	; (8008b18 <HAL_TIM_MspPostInit+0xb4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d11b      	bne.n	8008b02 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008aca:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <HAL_TIM_MspPostInit+0xac>)
 8008acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ace:	4a10      	ldr	r2, [pc, #64]	; (8008b10 <HAL_TIM_MspPostInit+0xac>)
 8008ad0:	f043 0302 	orr.w	r3, r3, #2
 8008ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ad6:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <HAL_TIM_MspPostInit+0xac>)
 8008ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDR_TIM5CH1_Pin;
 8008ae2:	2304      	movs	r3, #4
 8008ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aee:	2300      	movs	r3, #0
 8008af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008af2:	2302      	movs	r3, #2
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDR_TIM5CH1_GPIO_Port, &GPIO_InitStruct);
 8008af6:	f107 0314 	add.w	r3, r7, #20
 8008afa:	4619      	mov	r1, r3
 8008afc:	4805      	ldr	r0, [pc, #20]	; (8008b14 <HAL_TIM_MspPostInit+0xb0>)
 8008afe:	f002 fed3 	bl	800b8a8 <HAL_GPIO_Init>
}
 8008b02:	bf00      	nop
 8008b04:	3728      	adds	r7, #40	; 0x28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	40000400 	.word	0x40000400
 8008b10:	40021000 	.word	0x40021000
 8008b14:	48000400 	.word	0x48000400
 8008b18:	40000c00 	.word	0x40000c00

08008b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b0a4      	sub	sp, #144	; 0x90
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b24:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	605a      	str	r2, [r3, #4]
 8008b2e:	609a      	str	r2, [r3, #8]
 8008b30:	60da      	str	r2, [r3, #12]
 8008b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b38:	2254      	movs	r2, #84	; 0x54
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f017 fe94 	bl	802086a <memset>
  if(huart->Instance==UART4)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a7e      	ldr	r2, [pc, #504]	; (8008d40 <HAL_UART_MspInit+0x224>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	f040 8097 	bne.w	8008c7c <HAL_UART_MspInit+0x160>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008b4e:	2308      	movs	r3, #8
 8008b50:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008b52:	2300      	movs	r3, #0
 8008b54:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f005 fcd0 	bl	800e500 <HAL_RCCEx_PeriphCLKConfig>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008b66:	f7ff fc9d 	bl	80084a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008b6a:	4b76      	ldr	r3, [pc, #472]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6e:	4a75      	ldr	r2, [pc, #468]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b74:	6593      	str	r3, [r2, #88]	; 0x58
 8008b76:	4b73      	ldr	r3, [pc, #460]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b82:	4b70      	ldr	r3, [pc, #448]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b86:	4a6f      	ldr	r2, [pc, #444]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008b88:	f043 0304 	orr.w	r3, r3, #4
 8008b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b8e:	4b6d      	ldr	r3, [pc, #436]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b92:	f003 0304 	and.w	r3, r3, #4
 8008b96:	623b      	str	r3, [r7, #32]
 8008b98:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ESP32_TX_UART4_Pin|ESP32_RX_UART4_Pin;
 8008b9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bac:	2300      	movs	r3, #0
 8008bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8008bb2:	2305      	movs	r3, #5
 8008bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4862      	ldr	r0, [pc, #392]	; (8008d48 <HAL_UART_MspInit+0x22c>)
 8008bc0:	f002 fe72 	bl	800b8a8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel8;
 8008bc4:	4b61      	ldr	r3, [pc, #388]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008bc6:	4a62      	ldr	r2, [pc, #392]	; (8008d50 <HAL_UART_MspInit+0x234>)
 8008bc8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8008bca:	4b60      	ldr	r3, [pc, #384]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008bcc:	221e      	movs	r2, #30
 8008bce:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008bd0:	4b5e      	ldr	r3, [pc, #376]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008bd6:	4b5d      	ldr	r3, [pc, #372]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008bdc:	4b5b      	ldr	r3, [pc, #364]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008bde:	2280      	movs	r2, #128	; 0x80
 8008be0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008be2:	4b5a      	ldr	r3, [pc, #360]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008be8:	4b58      	ldr	r3, [pc, #352]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8008bee:	4b57      	ldr	r3, [pc, #348]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008bf4:	4b55      	ldr	r3, [pc, #340]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008bfa:	4854      	ldr	r0, [pc, #336]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008bfc:	f002 fb22 	bl	800b244 <HAL_DMA_Init>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8008c06:	f7ff fc4d 	bl	80084a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a4f      	ldr	r2, [pc, #316]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008c12:	4a4e      	ldr	r2, [pc, #312]	; (8008d4c <HAL_UART_MspInit+0x230>)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel1;
 8008c18:	4b4e      	ldr	r3, [pc, #312]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c1a:	4a4f      	ldr	r2, [pc, #316]	; (8008d58 <HAL_UART_MspInit+0x23c>)
 8008c1c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8008c1e:	4b4d      	ldr	r3, [pc, #308]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c20:	221f      	movs	r2, #31
 8008c22:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c24:	4b4b      	ldr	r3, [pc, #300]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c26:	2210      	movs	r2, #16
 8008c28:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c2a:	4b4a      	ldr	r3, [pc, #296]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008c30:	4b48      	ldr	r3, [pc, #288]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c32:	2280      	movs	r2, #128	; 0x80
 8008c34:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c36:	4b47      	ldr	r3, [pc, #284]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c3c:	4b45      	ldr	r3, [pc, #276]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8008c42:	4b44      	ldr	r3, [pc, #272]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008c48:	4b42      	ldr	r3, [pc, #264]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008c4e:	4841      	ldr	r0, [pc, #260]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c50:	f002 faf8 	bl	800b244 <HAL_DMA_Init>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8008c5a:	f7ff fc23 	bl	80084a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a3c      	ldr	r2, [pc, #240]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c62:	67da      	str	r2, [r3, #124]	; 0x7c
 8008c64:	4a3b      	ldr	r2, [pc, #236]	; (8008d54 <HAL_UART_MspInit+0x238>)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2105      	movs	r1, #5
 8008c6e:	2034      	movs	r0, #52	; 0x34
 8008c70:	f002 fac0 	bl	800b1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008c74:	2034      	movs	r0, #52	; 0x34
 8008c76:	f002 fad7 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008c7a:	e10f      	b.n	8008e9c <HAL_UART_MspInit+0x380>
  else if(huart->Instance==USART1)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a36      	ldr	r2, [pc, #216]	; (8008d5c <HAL_UART_MspInit+0x240>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d16c      	bne.n	8008d60 <HAL_UART_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008c86:	2301      	movs	r3, #1
 8008c88:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c92:	4618      	mov	r0, r3
 8008c94:	f005 fc34 	bl	800e500 <HAL_RCCEx_PeriphCLKConfig>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <HAL_UART_MspInit+0x186>
      Error_Handler();
 8008c9e:	f7ff fc01 	bl	80084a4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ca2:	4b28      	ldr	r3, [pc, #160]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca6:	4a27      	ldr	r2, [pc, #156]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cac:	6613      	str	r3, [r2, #96]	; 0x60
 8008cae:	4b25      	ldr	r3, [pc, #148]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cb6:	61fb      	str	r3, [r7, #28]
 8008cb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008cba:	4b22      	ldr	r3, [pc, #136]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cbe:	4a21      	ldr	r2, [pc, #132]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008cc0:	f043 0304 	orr.w	r3, r3, #4
 8008cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cc6:	4b1f      	ldr	r3, [pc, #124]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cca:	f003 0304 	and.w	r3, r3, #4
 8008cce:	61bb      	str	r3, [r7, #24]
 8008cd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd6:	4a1b      	ldr	r2, [pc, #108]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008cd8:	f043 0301 	orr.w	r3, r3, #1
 8008cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cde:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <HAL_UART_MspInit+0x228>)
 8008ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = FLR_USART1RX_Pin;
 8008cea:	2320      	movs	r3, #32
 8008cec:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008d00:	2307      	movs	r3, #7
 8008d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(FLR_USART1RX_GPIO_Port, &GPIO_InitStruct);
 8008d06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	480e      	ldr	r0, [pc, #56]	; (8008d48 <HAL_UART_MspInit+0x22c>)
 8008d0e:	f002 fdcb 	bl	800b8a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FLT_USART1TX_Pin;
 8008d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d16:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d24:	2303      	movs	r3, #3
 8008d26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008d2a:	2307      	movs	r3, #7
 8008d2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(FLT_USART1TX_GPIO_Port, &GPIO_InitStruct);
 8008d30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008d34:	4619      	mov	r1, r3
 8008d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d3a:	f002 fdb5 	bl	800b8a8 <HAL_GPIO_Init>
}
 8008d3e:	e0ad      	b.n	8008e9c <HAL_UART_MspInit+0x380>
 8008d40:	40004c00 	.word	0x40004c00
 8008d44:	40021000 	.word	0x40021000
 8008d48:	48000800 	.word	0x48000800
 8008d4c:	20000968 	.word	0x20000968
 8008d50:	40020094 	.word	0x40020094
 8008d54:	200009c8 	.word	0x200009c8
 8008d58:	40020408 	.word	0x40020408
 8008d5c:	40013800 	.word	0x40013800
  else if(huart->Instance==USART2)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a4f      	ldr	r2, [pc, #316]	; (8008ea4 <HAL_UART_MspInit+0x388>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	f040 8098 	bne.w	8008e9c <HAL_UART_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008d70:	2300      	movs	r3, #0
 8008d72:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f005 fbc1 	bl	800e500 <HAL_RCCEx_PeriphCLKConfig>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8008d84:	f7ff fb8e 	bl	80084a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008d88:	4b47      	ldr	r3, [pc, #284]	; (8008ea8 <HAL_UART_MspInit+0x38c>)
 8008d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8c:	4a46      	ldr	r2, [pc, #280]	; (8008ea8 <HAL_UART_MspInit+0x38c>)
 8008d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d92:	6593      	str	r3, [r2, #88]	; 0x58
 8008d94:	4b44      	ldr	r3, [pc, #272]	; (8008ea8 <HAL_UART_MspInit+0x38c>)
 8008d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9c:	613b      	str	r3, [r7, #16]
 8008d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008da0:	4b41      	ldr	r3, [pc, #260]	; (8008ea8 <HAL_UART_MspInit+0x38c>)
 8008da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008da4:	4a40      	ldr	r2, [pc, #256]	; (8008ea8 <HAL_UART_MspInit+0x38c>)
 8008da6:	f043 0301 	orr.w	r3, r3, #1
 8008daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dac:	4b3e      	ldr	r3, [pc, #248]	; (8008ea8 <HAL_UART_MspInit+0x38c>)
 8008dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_USART2DE_Pin|RS485_USART2TX_Pin|RS485_USART2RX_Pin;
 8008db8:	230e      	movs	r3, #14
 8008dba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008dce:	2307      	movs	r3, #7
 8008dd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dd4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008dd8:	4619      	mov	r1, r3
 8008dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008dde:	f002 fd63 	bl	800b8a8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8008de2:	4b32      	ldr	r3, [pc, #200]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008de4:	4a32      	ldr	r2, [pc, #200]	; (8008eb0 <HAL_UART_MspInit+0x394>)
 8008de6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8008de8:	4b30      	ldr	r3, [pc, #192]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008dea:	221b      	movs	r2, #27
 8008dec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008dee:	4b2f      	ldr	r3, [pc, #188]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008df0:	2210      	movs	r2, #16
 8008df2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008df4:	4b2d      	ldr	r3, [pc, #180]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008dfa:	4b2c      	ldr	r3, [pc, #176]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008dfc:	2280      	movs	r2, #128	; 0x80
 8008dfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e00:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e06:	4b29      	ldr	r3, [pc, #164]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008e0c:	4b27      	ldr	r3, [pc, #156]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008e12:	4b26      	ldr	r3, [pc, #152]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008e14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008e1a:	4824      	ldr	r0, [pc, #144]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008e1c:	f002 fa12 	bl	800b244 <HAL_DMA_Init>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_UART_MspInit+0x30e>
      Error_Handler();
 8008e26:	f7ff fb3d 	bl	80084a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a1f      	ldr	r2, [pc, #124]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008e2e:	67da      	str	r2, [r3, #124]	; 0x7c
 8008e30:	4a1e      	ldr	r2, [pc, #120]	; (8008eac <HAL_UART_MspInit+0x390>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8008e36:	4b1f      	ldr	r3, [pc, #124]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e38:	4a1f      	ldr	r2, [pc, #124]	; (8008eb8 <HAL_UART_MspInit+0x39c>)
 8008e3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008e3c:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e3e:	221a      	movs	r2, #26
 8008e40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e42:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e48:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e4e:	4b19      	ldr	r3, [pc, #100]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e50:	2280      	movs	r2, #128	; 0x80
 8008e52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e54:	4b17      	ldr	r3, [pc, #92]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e5a:	4b16      	ldr	r3, [pc, #88]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008e60:	4b14      	ldr	r3, [pc, #80]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008e66:	4b13      	ldr	r3, [pc, #76]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008e6e:	4811      	ldr	r0, [pc, #68]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e70:	f002 f9e8 	bl	800b244 <HAL_DMA_Init>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <HAL_UART_MspInit+0x362>
      Error_Handler();
 8008e7a:	f7ff fb13 	bl	80084a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a0c      	ldr	r2, [pc, #48]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008e86:	4a0b      	ldr	r2, [pc, #44]	; (8008eb4 <HAL_UART_MspInit+0x398>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2105      	movs	r1, #5
 8008e90:	2026      	movs	r0, #38	; 0x26
 8008e92:	f002 f9af 	bl	800b1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008e96:	2026      	movs	r0, #38	; 0x26
 8008e98:	f002 f9c6 	bl	800b228 <HAL_NVIC_EnableIRQ>
}
 8008e9c:	bf00      	nop
 8008e9e:	3790      	adds	r7, #144	; 0x90
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40004400 	.word	0x40004400
 8008ea8:	40021000 	.word	0x40021000
 8008eac:	20000a28 	.word	0x20000a28
 8008eb0:	40020008 	.word	0x40020008
 8008eb4:	20000a88 	.word	0x20000a88
 8008eb8:	4002001c 	.word	0x4002001c

08008ebc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08c      	sub	sp, #48	; 0x30
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM20 clock */
  __HAL_RCC_TIM20_CLK_ENABLE();
 8008ecc:	4b2c      	ldr	r3, [pc, #176]	; (8008f80 <HAL_InitTick+0xc4>)
 8008ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ed0:	4a2b      	ldr	r2, [pc, #172]	; (8008f80 <HAL_InitTick+0xc4>)
 8008ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8008ed8:	4b29      	ldr	r3, [pc, #164]	; (8008f80 <HAL_InitTick+0xc4>)
 8008eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ee0:	60bb      	str	r3, [r7, #8]
 8008ee2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008ee4:	f107 020c 	add.w	r2, r7, #12
 8008ee8:	f107 0310 	add.w	r3, r7, #16
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f005 fa8e 	bl	800e410 <HAL_RCC_GetClockConfig>

  /* Compute TIM20 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008ef4:	f005 fa76 	bl	800e3e4 <HAL_RCC_GetPCLK2Freq>
 8008ef8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM20 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	4a21      	ldr	r2, [pc, #132]	; (8008f84 <HAL_InitTick+0xc8>)
 8008efe:	fba2 2303 	umull	r2, r3, r2, r3
 8008f02:	0c9b      	lsrs	r3, r3, #18
 8008f04:	3b01      	subs	r3, #1
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM20 */
  htim20.Instance = TIM20;
 8008f08:	4b1f      	ldr	r3, [pc, #124]	; (8008f88 <HAL_InitTick+0xcc>)
 8008f0a:	4a20      	ldr	r2, [pc, #128]	; (8008f8c <HAL_InitTick+0xd0>)
 8008f0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM20CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim20.Init.Period = (1000000U / 1000U) - 1U;
 8008f0e:	4b1e      	ldr	r3, [pc, #120]	; (8008f88 <HAL_InitTick+0xcc>)
 8008f10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008f14:	60da      	str	r2, [r3, #12]
  htim20.Init.Prescaler = uwPrescalerValue;
 8008f16:	4a1c      	ldr	r2, [pc, #112]	; (8008f88 <HAL_InitTick+0xcc>)
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	6053      	str	r3, [r2, #4]
  htim20.Init.ClockDivision = 0;
 8008f1c:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <HAL_InitTick+0xcc>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	611a      	str	r2, [r3, #16]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f22:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <HAL_InitTick+0xcc>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim20);
 8008f28:	4817      	ldr	r0, [pc, #92]	; (8008f88 <HAL_InitTick+0xcc>)
 8008f2a:	f005 fd37 	bl	800e99c <HAL_TIM_Base_Init>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8008f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d11b      	bne.n	8008f74 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim20);
 8008f3c:	4812      	ldr	r0, [pc, #72]	; (8008f88 <HAL_InitTick+0xcc>)
 8008f3e:	f005 fd85 	bl	800ea4c <HAL_TIM_Base_Start_IT>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8008f48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d111      	bne.n	8008f74 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM20 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM20_UP_IRQn);
 8008f50:	204e      	movs	r0, #78	; 0x4e
 8008f52:	f002 f969 	bl	800b228 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b0f      	cmp	r3, #15
 8008f5a:	d808      	bhi.n	8008f6e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM20_UP_IRQn, TickPriority, 0U);
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	204e      	movs	r0, #78	; 0x4e
 8008f62:	f002 f947 	bl	800b1f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008f66:	4a0a      	ldr	r2, [pc, #40]	; (8008f90 <HAL_InitTick+0xd4>)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	e002      	b.n	8008f74 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8008f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3730      	adds	r7, #48	; 0x30
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	40021000 	.word	0x40021000
 8008f84:	431bde83 	.word	0x431bde83
 8008f88:	20001d4c 	.word	0x20001d4c
 8008f8c:	40015000 	.word	0x40015000
 8008f90:	2000000c 	.word	0x2000000c

08008f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008f98:	e7fe      	b.n	8008f98 <NMI_Handler+0x4>

08008f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f9e:	e7fe      	b.n	8008f9e <HardFault_Handler+0x4>

08008fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fa4:	e7fe      	b.n	8008fa4 <MemManage_Handler+0x4>

08008fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008faa:	e7fe      	b.n	8008faa <BusFault_Handler+0x4>

08008fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fb0:	e7fe      	b.n	8008fb0 <UsageFault_Handler+0x4>

08008fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008fb6:	bf00      	nop
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008fc4:	4802      	ldr	r0, [pc, #8]	; (8008fd0 <DMA1_Channel1_IRQHandler+0x10>)
 8008fc6:	f002 fb20 	bl	800b60a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008fca:	bf00      	nop
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000a28 	.word	0x20000a28

08008fd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008fd8:	4802      	ldr	r0, [pc, #8]	; (8008fe4 <DMA1_Channel2_IRQHandler+0x10>)
 8008fda:	f002 fb16 	bl	800b60a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008fde:	bf00      	nop
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000a88 	.word	0x20000a88

08008fe8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008fec:	bf00      	nop
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008ffa:	bf00      	nop
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009008:	4802      	ldr	r0, [pc, #8]	; (8009014 <DMA1_Channel5_IRQHandler+0x10>)
 800900a:	f002 fafe 	bl	800b60a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800900e:	bf00      	nop
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	200005a0 	.word	0x200005a0

08009018 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800901c:	4802      	ldr	r0, [pc, #8]	; (8009028 <DMA1_Channel6_IRQHandler+0x10>)
 800901e:	f002 faf4 	bl	800b60a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8009022:	bf00      	nop
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000600 	.word	0x20000600

0800902c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8009030:	4802      	ldr	r0, [pc, #8]	; (800903c <DMA1_Channel7_IRQHandler+0x10>)
 8009032:	f002 faea 	bl	800b60a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8009036:	bf00      	nop
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000660 	.word	0x20000660

08009040 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8009044:	4803      	ldr	r0, [pc, #12]	; (8009054 <ADC1_2_IRQHandler+0x14>)
 8009046:	f000 fed5 	bl	8009df4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800904a:	4803      	ldr	r0, [pc, #12]	; (8009058 <ADC1_2_IRQHandler+0x18>)
 800904c:	f000 fed2 	bl	8009df4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8009050:	bf00      	nop
 8009052:	bd80      	pop	{r7, pc}
 8009054:	2000045c 	.word	0x2000045c
 8009058:	200004c8 	.word	0x200004c8

0800905c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009060:	4802      	ldr	r0, [pc, #8]	; (800906c <USB_HP_IRQHandler+0x10>)
 8009062:	f002 fff5 	bl	800c050 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8009066:	bf00      	nop
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20014190 	.word	0x20014190

08009070 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009074:	4802      	ldr	r0, [pc, #8]	; (8009080 <USB_LP_IRQHandler+0x10>)
 8009076:	f002 ffeb 	bl	800c050 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800907a:	bf00      	nop
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20014190 	.word	0x20014190

08009084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009088:	4802      	ldr	r0, [pc, #8]	; (8009094 <USART2_IRQHandler+0x10>)
 800908a:	f007 f8b9 	bl	8010200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800908e:	bf00      	nop
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	200008d4 	.word	0x200008d4

08009098 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800909c:	4802      	ldr	r0, [pc, #8]	; (80090a8 <UART4_IRQHandler+0x10>)
 800909e:	f007 f8af 	bl	8010200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80090a2:	bf00      	nop
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	200007ac 	.word	0x200007ac

080090ac <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80090b0:	4802      	ldr	r0, [pc, #8]	; (80090bc <DMA2_Channel1_IRQHandler+0x10>)
 80090b2:	f002 faaa 	bl	800b60a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80090b6:	bf00      	nop
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	200009c8 	.word	0x200009c8

080090c0 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 80090c4:	4802      	ldr	r0, [pc, #8]	; (80090d0 <ADC5_IRQHandler+0x10>)
 80090c6:	f000 fe95 	bl	8009df4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 80090ca:	bf00      	nop
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000534 	.word	0x20000534

080090d4 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 80090d8:	f00d fa77 	bl	80165ca <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 80090dc:	bf00      	nop
 80090de:	bd80      	pop	{r7, pc}

080090e0 <TIM20_UP_IRQHandler>:

/**
  * @brief This function handles TIM20 update interrupt.
  */
void TIM20_UP_IRQHandler(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_UP_IRQn 0 */

  /* USER CODE END TIM20_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 80090e4:	4802      	ldr	r0, [pc, #8]	; (80090f0 <TIM20_UP_IRQHandler+0x10>)
 80090e6:	f005 fe9d 	bl	800ee24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_UP_IRQn 1 */

  /* USER CODE END TIM20_UP_IRQn 1 */
}
 80090ea:	bf00      	nop
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20001d4c 	.word	0x20001d4c

080090f4 <DMA1_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA1 channel8 global interrupt.
  */
void DMA1_Channel8_IRQHandler(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80090f8:	4802      	ldr	r0, [pc, #8]	; (8009104 <DMA1_Channel8_IRQHandler+0x10>)
 80090fa:	f002 fa86 	bl	800b60a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel8_IRQn 1 */

  /* USER CODE END DMA1_Channel8_IRQn 1 */
}
 80090fe:	bf00      	nop
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20000968 	.word	0x20000968

08009108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0
  return 1;
 800910c:	2301      	movs	r3, #1
}
 800910e:	4618      	mov	r0, r3
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <_kill>:

int _kill(int pid, int sig)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009122:	f017 fc89 	bl	8020a38 <__errno>
 8009126:	4603      	mov	r3, r0
 8009128:	2216      	movs	r2, #22
 800912a:	601a      	str	r2, [r3, #0]
  return -1;
 800912c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <_exit>:

void _exit (int status)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009140:	f04f 31ff 	mov.w	r1, #4294967295
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ffe7 	bl	8009118 <_kill>
  while (1) {}    /* Make sure we hang here */
 800914a:	e7fe      	b.n	800914a <_exit+0x12>

0800914c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009158:	2300      	movs	r3, #0
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e00a      	b.n	8009174 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800915e:	f3af 8000 	nop.w
 8009162:	4601      	mov	r1, r0
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	60ba      	str	r2, [r7, #8]
 800916a:	b2ca      	uxtb	r2, r1
 800916c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	3301      	adds	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	429a      	cmp	r2, r3
 800917a:	dbf0      	blt.n	800915e <_read+0x12>
  }

  return len;
 800917c:	687b      	ldr	r3, [r7, #4]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b086      	sub	sp, #24
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009192:	2300      	movs	r3, #0
 8009194:	617b      	str	r3, [r7, #20]
 8009196:	e009      	b.n	80091ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	60ba      	str	r2, [r7, #8]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	3301      	adds	r3, #1
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	dbf1      	blt.n	8009198 <_write+0x12>
  }
  return len;
 80091b4:	687b      	ldr	r3, [r7, #4]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <_close>:

int _close(int file)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80091c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091e6:	605a      	str	r2, [r3, #4]
  return 0;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <_isatty>:

int _isatty(int file)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80091fe:	2301      	movs	r3, #1
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
	...

08009228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009230:	4a14      	ldr	r2, [pc, #80]	; (8009284 <_sbrk+0x5c>)
 8009232:	4b15      	ldr	r3, [pc, #84]	; (8009288 <_sbrk+0x60>)
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800923c:	4b13      	ldr	r3, [pc, #76]	; (800928c <_sbrk+0x64>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009244:	4b11      	ldr	r3, [pc, #68]	; (800928c <_sbrk+0x64>)
 8009246:	4a12      	ldr	r2, [pc, #72]	; (8009290 <_sbrk+0x68>)
 8009248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800924a:	4b10      	ldr	r3, [pc, #64]	; (800928c <_sbrk+0x64>)
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4413      	add	r3, r2
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	429a      	cmp	r2, r3
 8009256:	d207      	bcs.n	8009268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009258:	f017 fbee 	bl	8020a38 <__errno>
 800925c:	4603      	mov	r3, r0
 800925e:	220c      	movs	r2, #12
 8009260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009262:	f04f 33ff 	mov.w	r3, #4294967295
 8009266:	e009      	b.n	800927c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009268:	4b08      	ldr	r3, [pc, #32]	; (800928c <_sbrk+0x64>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800926e:	4b07      	ldr	r3, [pc, #28]	; (800928c <_sbrk+0x64>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4413      	add	r3, r2
 8009276:	4a05      	ldr	r2, [pc, #20]	; (800928c <_sbrk+0x64>)
 8009278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800927a:	68fb      	ldr	r3, [r7, #12]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20020000 	.word	0x20020000
 8009288:	00000400 	.word	0x00000400
 800928c:	20001d98 	.word	0x20001d98
 8009290:	200147d8 	.word	0x200147d8

08009294 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009298:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <SystemInit+0x20>)
 800929a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929e:	4a05      	ldr	r2, [pc, #20]	; (80092b4 <SystemInit+0x20>)
 80092a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80092a8:	bf00      	nop
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	e000ed00 	.word	0xe000ed00

080092b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80092b8:	480d      	ldr	r0, [pc, #52]	; (80092f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80092ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80092bc:	f7ff ffea 	bl	8009294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80092c0:	480c      	ldr	r0, [pc, #48]	; (80092f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80092c2:	490d      	ldr	r1, [pc, #52]	; (80092f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80092c4:	4a0d      	ldr	r2, [pc, #52]	; (80092fc <LoopForever+0xe>)
  movs r3, #0
 80092c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80092c8:	e002      	b.n	80092d0 <LoopCopyDataInit>

080092ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80092ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80092cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80092ce:	3304      	adds	r3, #4

080092d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80092d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80092d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80092d4:	d3f9      	bcc.n	80092ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80092d6:	4a0a      	ldr	r2, [pc, #40]	; (8009300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80092d8:	4c0a      	ldr	r4, [pc, #40]	; (8009304 <LoopForever+0x16>)
  movs r3, #0
 80092da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80092dc:	e001      	b.n	80092e2 <LoopFillZerobss>

080092de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80092de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80092e0:	3204      	adds	r2, #4

080092e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80092e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80092e4:	d3fb      	bcc.n	80092de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80092e6:	f017 fbad 	bl	8020a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80092ea:	f7fd fcd1 	bl	8006c90 <main>

080092ee <LoopForever>:

LoopForever:
    b LoopForever
 80092ee:	e7fe      	b.n	80092ee <LoopForever>
  ldr   r0, =_estack
 80092f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80092f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80092f8:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 80092fc:	08023f0c 	.word	0x08023f0c
  ldr r2, =_sbss
 8009300:	2000041c 	.word	0x2000041c
  ldr r4, =_ebss
 8009304:	200147d8 	.word	0x200147d8

08009308 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009308:	e7fe      	b.n	8009308 <ADC3_IRQHandler>

0800930a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009314:	2003      	movs	r0, #3
 8009316:	f001 ff62 	bl	800b1de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800931a:	200f      	movs	r0, #15
 800931c:	f7ff fdce 	bl	8008ebc <HAL_InitTick>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	71fb      	strb	r3, [r7, #7]
 800932a:	e001      	b.n	8009330 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800932c:	f7ff f92a 	bl	8008584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009330:	79fb      	ldrb	r3, [r7, #7]

}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
	...

0800933c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009340:	4b05      	ldr	r3, [pc, #20]	; (8009358 <HAL_IncTick+0x1c>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <HAL_IncTick+0x20>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4413      	add	r3, r2
 800934a:	4a03      	ldr	r2, [pc, #12]	; (8009358 <HAL_IncTick+0x1c>)
 800934c:	6013      	str	r3, [r2, #0]
}
 800934e:	bf00      	nop
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	20001d9c 	.word	0x20001d9c
 800935c:	20000010 	.word	0x20000010

08009360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009360:	b480      	push	{r7}
 8009362:	af00      	add	r7, sp, #0
  return uwTick;
 8009364:	4b03      	ldr	r3, [pc, #12]	; (8009374 <HAL_GetTick+0x14>)
 8009366:	681b      	ldr	r3, [r3, #0]
}
 8009368:	4618      	mov	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	20001d9c 	.word	0x20001d9c

08009378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009380:	f7ff ffee 	bl	8009360 <HAL_GetTick>
 8009384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009390:	d004      	beq.n	800939c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <HAL_Delay+0x40>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	4413      	add	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800939c:	bf00      	nop
 800939e:	f7ff ffdf 	bl	8009360 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d8f7      	bhi.n	800939e <HAL_Delay+0x26>
  {
  }
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000010 	.word	0x20000010

080093bc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80093c4:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093cc:	4904      	ldr	r1, [pc, #16]	; (80093e0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	600b      	str	r3, [r1, #0]
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	40010030 	.word	0x40010030

080093e4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80093ec:	4b06      	ldr	r3, [pc, #24]	; (8009408 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f023 0202 	bic.w	r2, r3, #2
 80093f4:	4904      	ldr	r1, [pc, #16]	; (8009408 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	600b      	str	r3, [r1, #0]
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	40010030 	.word	0x40010030

0800940c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8009412:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a0e      	ldr	r2, [pc, #56]	; (8009450 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8009418:	f043 0301 	orr.w	r3, r3, #1
 800941c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800941e:	f7ff ff9f 	bl	8009360 <HAL_GetTick>
 8009422:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8009424:	e008      	b.n	8009438 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8009426:	f7ff ff9b 	bl	8009360 <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	2b0a      	cmp	r3, #10
 8009432:	d901      	bls.n	8009438 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e006      	b.n	8009446 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8009438:	4b05      	ldr	r3, [pc, #20]	; (8009450 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0308 	and.w	r3, r3, #8
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0f0      	beq.n	8009426 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	40010030 	.word	0x40010030

08009454 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	609a      	str	r2, [r3, #8]
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	431a      	orrs	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	609a      	str	r2, [r3, #8]
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3360      	adds	r3, #96	; 0x60
 80094ce:	461a      	mov	r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	4b08      	ldr	r3, [pc, #32]	; (8009500 <LL_ADC_SetOffset+0x44>)
 80094de:	4013      	ands	r3, r2
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	4313      	orrs	r3, r2
 80094ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	03fff000 	.word	0x03fff000

08009504 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3360      	adds	r3, #96	; 0x60
 8009512:	461a      	mov	r2, r3
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	3360      	adds	r3, #96	; 0x60
 8009540:	461a      	mov	r2, r3
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	431a      	orrs	r2, r3
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800955a:	bf00      	nop
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009566:	b480      	push	{r7}
 8009568:	b087      	sub	sp, #28
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3360      	adds	r3, #96	; 0x60
 8009576:	461a      	mov	r2, r3
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	431a      	orrs	r2, r3
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009590:	bf00      	nop
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3360      	adds	r3, #96	; 0x60
 80095ac:	461a      	mov	r2, r3
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	431a      	orrs	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	431a      	orrs	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	615a      	str	r2, [r3, #20]
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800961e:	b480      	push	{r7}
 8009620:	b087      	sub	sp, #28
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3330      	adds	r3, #48	; 0x30
 800962e:	461a      	mov	r2, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	0a1b      	lsrs	r3, r3, #8
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	f003 030c 	and.w	r3, r3, #12
 800963a:	4413      	add	r3, r2
 800963c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	f003 031f 	and.w	r3, r3, #31
 8009648:	211f      	movs	r1, #31
 800964a:	fa01 f303 	lsl.w	r3, r1, r3
 800964e:	43db      	mvns	r3, r3
 8009650:	401a      	ands	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	0e9b      	lsrs	r3, r3, #26
 8009656:	f003 011f 	and.w	r1, r3, #31
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f003 031f 	and.w	r3, r3, #31
 8009660:	fa01 f303 	lsl.w	r3, r1, r3
 8009664:	431a      	orrs	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009682:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800968a:	2301      	movs	r3, #1
 800968c:	e000      	b.n	8009690 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3314      	adds	r3, #20
 80096ac:	461a      	mov	r2, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	0e5b      	lsrs	r3, r3, #25
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	4413      	add	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	0d1b      	lsrs	r3, r3, #20
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	2107      	movs	r1, #7
 80096ca:	fa01 f303 	lsl.w	r3, r1, r3
 80096ce:	43db      	mvns	r3, r3
 80096d0:	401a      	ands	r2, r3
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	0d1b      	lsrs	r3, r3, #20
 80096d6:	f003 031f 	and.w	r3, r3, #31
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	fa01 f303 	lsl.w	r3, r1, r3
 80096e0:	431a      	orrs	r2, r3
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80096e6:	bf00      	nop
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
	...

080096f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800970c:	43db      	mvns	r3, r3
 800970e:	401a      	ands	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f003 0318 	and.w	r3, r3, #24
 8009716:	4908      	ldr	r1, [pc, #32]	; (8009738 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009718:	40d9      	lsrs	r1, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	400b      	ands	r3, r1
 800971e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009722:	431a      	orrs	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	0007ffff 	.word	0x0007ffff

0800973c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f003 031f 	and.w	r3, r3, #31
}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8009784:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	6093      	str	r3, [r2, #8]
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ac:	d101      	bne.n	80097b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e000      	b.n	80097b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80097d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80097d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097fc:	d101      	bne.n	8009802 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80097fe:	2301      	movs	r3, #1
 8009800:	e000      	b.n	8009804 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009824:	f043 0201 	orr.w	r2, r3, #1
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b01      	cmp	r3, #1
 800984a:	d101      	bne.n	8009850 <LL_ADC_IsEnabled+0x18>
 800984c:	2301      	movs	r3, #1
 800984e:	e000      	b.n	8009852 <LL_ADC_IsEnabled+0x1a>
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800986e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009872:	f043 0204 	orr.w	r2, r3, #4
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800987a:	bf00      	nop
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f003 0304 	and.w	r3, r3, #4
 8009896:	2b04      	cmp	r3, #4
 8009898:	d101      	bne.n	800989e <LL_ADC_REG_IsConversionOngoing+0x18>
 800989a:	2301      	movs	r3, #1
 800989c:	e000      	b.n	80098a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d101      	bne.n	80098c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80098c0:	2301      	movs	r3, #1
 80098c2:	e000      	b.n	80098c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
	...

080098d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80098d4:	b590      	push	{r4, r7, lr}
 80098d6:	b089      	sub	sp, #36	; 0x24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e1a9      	b.n	8009c42 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d109      	bne.n	8009910 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7fe fe73 	bl	80085e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff ff3f 	bl	8009798 <LL_ADC_IsDeepPowerDownEnabled>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff ff25 	bl	8009774 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff ff5a 	bl	80097e8 <LL_ADC_IsInternalRegulatorEnabled>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d115      	bne.n	8009966 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff ff3e 	bl	80097c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009944:	4b9c      	ldr	r3, [pc, #624]	; (8009bb8 <HAL_ADC_Init+0x2e4>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	099b      	lsrs	r3, r3, #6
 800994a:	4a9c      	ldr	r2, [pc, #624]	; (8009bbc <HAL_ADC_Init+0x2e8>)
 800994c:	fba2 2303 	umull	r2, r3, r2, r3
 8009950:	099b      	lsrs	r3, r3, #6
 8009952:	3301      	adds	r3, #1
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009958:	e002      	b.n	8009960 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3b01      	subs	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1f9      	bne.n	800995a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff ff3c 	bl	80097e8 <LL_ADC_IsInternalRegulatorEnabled>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10d      	bne.n	8009992 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800997a:	f043 0210 	orr.w	r2, r3, #16
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009986:	f043 0201 	orr.w	r2, r3, #1
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff ff75 	bl	8009886 <LL_ADC_REG_IsConversionOngoing>
 800999c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a2:	f003 0310 	and.w	r3, r3, #16
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f040 8142 	bne.w	8009c30 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f040 813e 	bne.w	8009c30 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80099bc:	f043 0202 	orr.w	r2, r3, #2
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff ff35 	bl	8009838 <LL_ADC_IsEnabled>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d141      	bne.n	8009a58 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099dc:	d004      	beq.n	80099e8 <HAL_ADC_Init+0x114>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a77      	ldr	r2, [pc, #476]	; (8009bc0 <HAL_ADC_Init+0x2ec>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d10f      	bne.n	8009a08 <HAL_ADC_Init+0x134>
 80099e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80099ec:	f7ff ff24 	bl	8009838 <LL_ADC_IsEnabled>
 80099f0:	4604      	mov	r4, r0
 80099f2:	4873      	ldr	r0, [pc, #460]	; (8009bc0 <HAL_ADC_Init+0x2ec>)
 80099f4:	f7ff ff20 	bl	8009838 <LL_ADC_IsEnabled>
 80099f8:	4603      	mov	r3, r0
 80099fa:	4323      	orrs	r3, r4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	bf0c      	ite	eq
 8009a00:	2301      	moveq	r3, #1
 8009a02:	2300      	movne	r3, #0
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	e012      	b.n	8009a2e <HAL_ADC_Init+0x15a>
 8009a08:	486e      	ldr	r0, [pc, #440]	; (8009bc4 <HAL_ADC_Init+0x2f0>)
 8009a0a:	f7ff ff15 	bl	8009838 <LL_ADC_IsEnabled>
 8009a0e:	4604      	mov	r4, r0
 8009a10:	486d      	ldr	r0, [pc, #436]	; (8009bc8 <HAL_ADC_Init+0x2f4>)
 8009a12:	f7ff ff11 	bl	8009838 <LL_ADC_IsEnabled>
 8009a16:	4603      	mov	r3, r0
 8009a18:	431c      	orrs	r4, r3
 8009a1a:	486c      	ldr	r0, [pc, #432]	; (8009bcc <HAL_ADC_Init+0x2f8>)
 8009a1c:	f7ff ff0c 	bl	8009838 <LL_ADC_IsEnabled>
 8009a20:	4603      	mov	r3, r0
 8009a22:	4323      	orrs	r3, r4
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bf0c      	ite	eq
 8009a28:	2301      	moveq	r3, #1
 8009a2a:	2300      	movne	r3, #0
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d012      	beq.n	8009a58 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a3a:	d004      	beq.n	8009a46 <HAL_ADC_Init+0x172>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a5f      	ldr	r2, [pc, #380]	; (8009bc0 <HAL_ADC_Init+0x2ec>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d101      	bne.n	8009a4a <HAL_ADC_Init+0x176>
 8009a46:	4a62      	ldr	r2, [pc, #392]	; (8009bd0 <HAL_ADC_Init+0x2fc>)
 8009a48:	e000      	b.n	8009a4c <HAL_ADC_Init+0x178>
 8009a4a:	4a62      	ldr	r2, [pc, #392]	; (8009bd4 <HAL_ADC_Init+0x300>)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	4619      	mov	r1, r3
 8009a52:	4610      	mov	r0, r2
 8009a54:	f7ff fcfe 	bl	8009454 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	7f5b      	ldrb	r3, [r3, #29]
 8009a5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009a62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009a68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009a6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d106      	bne.n	8009a94 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	045b      	lsls	r3, r3, #17
 8009a8e:	69ba      	ldr	r2, [r7, #24]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d009      	beq.n	8009ab0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68da      	ldr	r2, [r3, #12]
 8009ab6:	4b48      	ldr	r3, [pc, #288]	; (8009bd8 <HAL_ADC_Init+0x304>)
 8009ab8:	4013      	ands	r3, r2
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6812      	ldr	r2, [r2, #0]
 8009abe:	69b9      	ldr	r1, [r7, #24]
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff fee4 	bl	80098ac <LL_ADC_INJ_IsConversionOngoing>
 8009ae4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d17f      	bne.n	8009bec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d17c      	bne.n	8009bec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009af6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009afe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009b00:	4313      	orrs	r3, r2
 8009b02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b0e:	f023 0302 	bic.w	r3, r3, #2
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	6812      	ldr	r2, [r2, #0]
 8009b16:	69b9      	ldr	r1, [r7, #24]
 8009b18:	430b      	orrs	r3, r1
 8009b1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d017      	beq.n	8009b54 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	691a      	ldr	r2, [r3, #16]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009b32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009b3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	6911      	ldr	r1, [r2, #16]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	6812      	ldr	r2, [r2, #0]
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8009b52:	e013      	b.n	8009b7c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	691a      	ldr	r2, [r3, #16]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009b62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	6812      	ldr	r2, [r2, #0]
 8009b70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009b74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009b78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d12a      	bne.n	8009bdc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b90:	f023 0304 	bic.w	r3, r3, #4
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009b9c:	4311      	orrs	r1, r2
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009ba2:	4311      	orrs	r1, r2
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0201 	orr.w	r2, r2, #1
 8009bb4:	611a      	str	r2, [r3, #16]
 8009bb6:	e019      	b.n	8009bec <HAL_ADC_Init+0x318>
 8009bb8:	20000008 	.word	0x20000008
 8009bbc:	053e2d63 	.word	0x053e2d63
 8009bc0:	50000100 	.word	0x50000100
 8009bc4:	50000400 	.word	0x50000400
 8009bc8:	50000500 	.word	0x50000500
 8009bcc:	50000600 	.word	0x50000600
 8009bd0:	50000300 	.word	0x50000300
 8009bd4:	50000700 	.word	0x50000700
 8009bd8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 0201 	bic.w	r2, r2, #1
 8009bea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d10c      	bne.n	8009c0e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfa:	f023 010f 	bic.w	r1, r3, #15
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	1e5a      	subs	r2, r3, #1
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8009c0c:	e007      	b.n	8009c1e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 020f 	bic.w	r2, r2, #15
 8009c1c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	f043 0201 	orr.w	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c2e:	e007      	b.n	8009c40 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c34:	f043 0210 	orr.w	r2, r3, #16
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3724      	adds	r7, #36	; 0x24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd90      	pop	{r4, r7, pc}
 8009c4a:	bf00      	nop

08009c4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c60:	d004      	beq.n	8009c6c <HAL_ADC_Start_DMA+0x20>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a5a      	ldr	r2, [pc, #360]	; (8009dd0 <HAL_ADC_Start_DMA+0x184>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d101      	bne.n	8009c70 <HAL_ADC_Start_DMA+0x24>
 8009c6c:	4b59      	ldr	r3, [pc, #356]	; (8009dd4 <HAL_ADC_Start_DMA+0x188>)
 8009c6e:	e000      	b.n	8009c72 <HAL_ADC_Start_DMA+0x26>
 8009c70:	4b59      	ldr	r3, [pc, #356]	; (8009dd8 <HAL_ADC_Start_DMA+0x18c>)
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff fd62 	bl	800973c <LL_ADC_GetMultimode>
 8009c78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff fe01 	bl	8009886 <LL_ADC_REG_IsConversionOngoing>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f040 809b 	bne.w	8009dc2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d101      	bne.n	8009c9a <HAL_ADC_Start_DMA+0x4e>
 8009c96:	2302      	movs	r3, #2
 8009c98:	e096      	b.n	8009dc8 <HAL_ADC_Start_DMA+0x17c>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a4d      	ldr	r2, [pc, #308]	; (8009ddc <HAL_ADC_Start_DMA+0x190>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d008      	beq.n	8009cbe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d005      	beq.n	8009cbe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b05      	cmp	r3, #5
 8009cb6:	d002      	beq.n	8009cbe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	d17a      	bne.n	8009db4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 ff56 	bl	800ab70 <ADC_Enable>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d16d      	bne.n	8009daa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009cd6:	f023 0301 	bic.w	r3, r3, #1
 8009cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a3a      	ldr	r2, [pc, #232]	; (8009dd0 <HAL_ADC_Start_DMA+0x184>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d009      	beq.n	8009d00 <HAL_ADC_Start_DMA+0xb4>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a3b      	ldr	r2, [pc, #236]	; (8009de0 <HAL_ADC_Start_DMA+0x194>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d002      	beq.n	8009cfc <HAL_ADC_Start_DMA+0xb0>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	e003      	b.n	8009d04 <HAL_ADC_Start_DMA+0xb8>
 8009cfc:	4b39      	ldr	r3, [pc, #228]	; (8009de4 <HAL_ADC_Start_DMA+0x198>)
 8009cfe:	e001      	b.n	8009d04 <HAL_ADC_Start_DMA+0xb8>
 8009d00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d002      	beq.n	8009d12 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d105      	bne.n	8009d1e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d006      	beq.n	8009d38 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d2e:	f023 0206 	bic.w	r2, r3, #6
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	661a      	str	r2, [r3, #96]	; 0x60
 8009d36:	e002      	b.n	8009d3e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d42:	4a29      	ldr	r2, [pc, #164]	; (8009de8 <HAL_ADC_Start_DMA+0x19c>)
 8009d44:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4a:	4a28      	ldr	r2, [pc, #160]	; (8009dec <HAL_ADC_Start_DMA+0x1a0>)
 8009d4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d52:	4a27      	ldr	r2, [pc, #156]	; (8009df0 <HAL_ADC_Start_DMA+0x1a4>)
 8009d54:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	221c      	movs	r2, #28
 8009d5c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f042 0210 	orr.w	r2, r2, #16
 8009d74:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f042 0201 	orr.w	r2, r2, #1
 8009d84:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3340      	adds	r3, #64	; 0x40
 8009d90:	4619      	mov	r1, r3
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f001 fafd 	bl	800b394 <HAL_DMA_Start_IT>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff fd5b 	bl	800985e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009da8:	e00d      	b.n	8009dc6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009db2:	e008      	b.n	8009dc6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009dc0:	e001      	b.n	8009dc6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	50000100 	.word	0x50000100
 8009dd4:	50000300 	.word	0x50000300
 8009dd8:	50000700 	.word	0x50000700
 8009ddc:	50000600 	.word	0x50000600
 8009de0:	50000500 	.word	0x50000500
 8009de4:	50000400 	.word	0x50000400
 8009de8:	0800ac9d 	.word	0x0800ac9d
 8009dec:	0800ad75 	.word	0x0800ad75
 8009df0:	0800ad91 	.word	0x0800ad91

08009df4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b08a      	sub	sp, #40	; 0x28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e18:	d004      	beq.n	8009e24 <HAL_ADC_IRQHandler+0x30>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a8e      	ldr	r2, [pc, #568]	; (800a058 <HAL_ADC_IRQHandler+0x264>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d101      	bne.n	8009e28 <HAL_ADC_IRQHandler+0x34>
 8009e24:	4b8d      	ldr	r3, [pc, #564]	; (800a05c <HAL_ADC_IRQHandler+0x268>)
 8009e26:	e000      	b.n	8009e2a <HAL_ADC_IRQHandler+0x36>
 8009e28:	4b8d      	ldr	r3, [pc, #564]	; (800a060 <HAL_ADC_IRQHandler+0x26c>)
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7ff fc86 	bl	800973c <LL_ADC_GetMultimode>
 8009e30:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d017      	beq.n	8009e6c <HAL_ADC_IRQHandler+0x78>
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	f003 0302 	and.w	r3, r3, #2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d012      	beq.n	8009e6c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e4a:	f003 0310 	and.w	r3, r3, #16
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d105      	bne.n	8009e5e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e56:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fffe 	bl	800ae60 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	f003 0304 	and.w	r3, r3, #4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <HAL_ADC_IRQHandler+0x8c>
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10b      	bne.n	8009e98 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 8094 	beq.w	8009fb4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	f003 0308 	and.w	r3, r3, #8
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 808e 	beq.w	8009fb4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9c:	f003 0310 	and.w	r3, r3, #16
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d105      	bne.n	8009eb0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ea8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7ff fb9f 	bl	80095f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d072      	beq.n	8009fa6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a64      	ldr	r2, [pc, #400]	; (800a058 <HAL_ADC_IRQHandler+0x264>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d009      	beq.n	8009ede <HAL_ADC_IRQHandler+0xea>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a65      	ldr	r2, [pc, #404]	; (800a064 <HAL_ADC_IRQHandler+0x270>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d002      	beq.n	8009eda <HAL_ADC_IRQHandler+0xe6>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	e003      	b.n	8009ee2 <HAL_ADC_IRQHandler+0xee>
 8009eda:	4b63      	ldr	r3, [pc, #396]	; (800a068 <HAL_ADC_IRQHandler+0x274>)
 8009edc:	e001      	b.n	8009ee2 <HAL_ADC_IRQHandler+0xee>
 8009ede:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6812      	ldr	r2, [r2, #0]
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d008      	beq.n	8009efc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d005      	beq.n	8009efc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	2b05      	cmp	r3, #5
 8009ef4:	d002      	beq.n	8009efc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2b09      	cmp	r3, #9
 8009efa:	d104      	bne.n	8009f06 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	623b      	str	r3, [r7, #32]
 8009f04:	e014      	b.n	8009f30 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a53      	ldr	r2, [pc, #332]	; (800a058 <HAL_ADC_IRQHandler+0x264>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d009      	beq.n	8009f24 <HAL_ADC_IRQHandler+0x130>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a53      	ldr	r2, [pc, #332]	; (800a064 <HAL_ADC_IRQHandler+0x270>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d002      	beq.n	8009f20 <HAL_ADC_IRQHandler+0x12c>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	e003      	b.n	8009f28 <HAL_ADC_IRQHandler+0x134>
 8009f20:	4b51      	ldr	r3, [pc, #324]	; (800a068 <HAL_ADC_IRQHandler+0x274>)
 8009f22:	e001      	b.n	8009f28 <HAL_ADC_IRQHandler+0x134>
 8009f24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009f28:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d135      	bne.n	8009fa6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0308 	and.w	r3, r3, #8
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d12e      	bne.n	8009fa6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff fc9a 	bl	8009886 <LL_ADC_REG_IsConversionOngoing>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d11a      	bne.n	8009f8e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 020c 	bic.w	r2, r2, #12
 8009f66:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d112      	bne.n	8009fa6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f84:	f043 0201 	orr.w	r2, r3, #1
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f8c:	e00b      	b.n	8009fa6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f92:	f043 0210 	orr.w	r2, r3, #16
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f9e:	f043 0201 	orr.w	r2, r3, #1
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7fd fd6e 	bl	8007a88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	220c      	movs	r2, #12
 8009fb2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f003 0320 	and.w	r3, r3, #32
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <HAL_ADC_IRQHandler+0x1d4>
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	f003 0320 	and.w	r3, r3, #32
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10b      	bne.n	8009fe0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 80b3 	beq.w	800a13a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 80ad 	beq.w	800a13a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe4:	f003 0310 	and.w	r3, r3, #16
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d105      	bne.n	8009ff8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff fb3a 	bl	8009676 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a002:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7ff faf5 	bl	80095f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a00e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a10      	ldr	r2, [pc, #64]	; (800a058 <HAL_ADC_IRQHandler+0x264>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d009      	beq.n	800a02e <HAL_ADC_IRQHandler+0x23a>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a11      	ldr	r2, [pc, #68]	; (800a064 <HAL_ADC_IRQHandler+0x270>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d002      	beq.n	800a02a <HAL_ADC_IRQHandler+0x236>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	e003      	b.n	800a032 <HAL_ADC_IRQHandler+0x23e>
 800a02a:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <HAL_ADC_IRQHandler+0x274>)
 800a02c:	e001      	b.n	800a032 <HAL_ADC_IRQHandler+0x23e>
 800a02e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6812      	ldr	r2, [r2, #0]
 800a036:	4293      	cmp	r3, r2
 800a038:	d008      	beq.n	800a04c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	2b06      	cmp	r3, #6
 800a044:	d002      	beq.n	800a04c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b07      	cmp	r3, #7
 800a04a:	d10f      	bne.n	800a06c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	623b      	str	r3, [r7, #32]
 800a054:	e01f      	b.n	800a096 <HAL_ADC_IRQHandler+0x2a2>
 800a056:	bf00      	nop
 800a058:	50000100 	.word	0x50000100
 800a05c:	50000300 	.word	0x50000300
 800a060:	50000700 	.word	0x50000700
 800a064:	50000500 	.word	0x50000500
 800a068:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a8b      	ldr	r2, [pc, #556]	; (800a2a0 <HAL_ADC_IRQHandler+0x4ac>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d009      	beq.n	800a08a <HAL_ADC_IRQHandler+0x296>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a8a      	ldr	r2, [pc, #552]	; (800a2a4 <HAL_ADC_IRQHandler+0x4b0>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d002      	beq.n	800a086 <HAL_ADC_IRQHandler+0x292>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	e003      	b.n	800a08e <HAL_ADC_IRQHandler+0x29a>
 800a086:	4b88      	ldr	r3, [pc, #544]	; (800a2a8 <HAL_ADC_IRQHandler+0x4b4>)
 800a088:	e001      	b.n	800a08e <HAL_ADC_IRQHandler+0x29a>
 800a08a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800a08e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d047      	beq.n	800a12c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d007      	beq.n	800a0b6 <HAL_ADC_IRQHandler+0x2c2>
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d03f      	beq.n	800a12c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d13a      	bne.n	800a12c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c0:	2b40      	cmp	r3, #64	; 0x40
 800a0c2:	d133      	bne.n	800a12c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d12e      	bne.n	800a12c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff fbea 	bl	80098ac <LL_ADC_INJ_IsConversionOngoing>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d11a      	bne.n	800a114 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a0ec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a102:	2b00      	cmp	r3, #0
 800a104:	d112      	bne.n	800a12c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a10a:	f043 0201 	orr.w	r2, r3, #1
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	65da      	str	r2, [r3, #92]	; 0x5c
 800a112:	e00b      	b.n	800a12c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a118:	f043 0210 	orr.w	r2, r3, #16
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a124:	f043 0201 	orr.w	r2, r3, #1
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fe6f 	bl	800ae10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2260      	movs	r2, #96	; 0x60
 800a138:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a140:	2b00      	cmp	r3, #0
 800a142:	d011      	beq.n	800a168 <HAL_ADC_IRQHandler+0x374>
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00c      	beq.n	800a168 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a152:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f8b4 	bl	800a2c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2280      	movs	r2, #128	; 0x80
 800a166:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d012      	beq.n	800a198 <HAL_ADC_IRQHandler+0x3a4>
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00d      	beq.n	800a198 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a180:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fe55 	bl	800ae38 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a196:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d012      	beq.n	800a1c8 <HAL_ADC_IRQHandler+0x3d4>
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00d      	beq.n	800a1c8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fe47 	bl	800ae4c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	f003 0310 	and.w	r3, r3, #16
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d043      	beq.n	800a25a <HAL_ADC_IRQHandler+0x466>
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f003 0310 	and.w	r3, r3, #16
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d03e      	beq.n	800a25a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d102      	bne.n	800a1ea <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a1e8:	e021      	b.n	800a22e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d015      	beq.n	800a21c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1f8:	d004      	beq.n	800a204 <HAL_ADC_IRQHandler+0x410>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a28      	ldr	r2, [pc, #160]	; (800a2a0 <HAL_ADC_IRQHandler+0x4ac>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d101      	bne.n	800a208 <HAL_ADC_IRQHandler+0x414>
 800a204:	4b29      	ldr	r3, [pc, #164]	; (800a2ac <HAL_ADC_IRQHandler+0x4b8>)
 800a206:	e000      	b.n	800a20a <HAL_ADC_IRQHandler+0x416>
 800a208:	4b29      	ldr	r3, [pc, #164]	; (800a2b0 <HAL_ADC_IRQHandler+0x4bc>)
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff faa4 	bl	8009758 <LL_ADC_GetMultiDMATransfer>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800a216:	2301      	movs	r3, #1
 800a218:	627b      	str	r3, [r7, #36]	; 0x24
 800a21a:	e008      	b.n	800a22e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800a22a:	2301      	movs	r3, #1
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	2b01      	cmp	r3, #1
 800a232:	d10e      	bne.n	800a252 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a238:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a244:	f043 0202 	orr.w	r2, r3, #2
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f845 	bl	800a2dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2210      	movs	r2, #16
 800a258:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a260:	2b00      	cmp	r3, #0
 800a262:	d018      	beq.n	800a296 <HAL_ADC_IRQHandler+0x4a2>
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d013      	beq.n	800a296 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a272:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a27e:	f043 0208 	orr.w	r2, r3, #8
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a28e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fdc7 	bl	800ae24 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a296:	bf00      	nop
 800a298:	3728      	adds	r7, #40	; 0x28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	50000100 	.word	0x50000100
 800a2a4:	50000500 	.word	0x50000500
 800a2a8:	50000400 	.word	0x50000400
 800a2ac:	50000300 	.word	0x50000300
 800a2b0:	50000700 	.word	0x50000700

0800a2b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b0b6      	sub	sp, #216	; 0xd8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a300:	2300      	movs	r3, #0
 800a302:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d102      	bne.n	800a314 <HAL_ADC_ConfigChannel+0x24>
 800a30e:	2302      	movs	r3, #2
 800a310:	f000 bc13 	b.w	800ab3a <HAL_ADC_ConfigChannel+0x84a>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff fab0 	bl	8009886 <LL_ADC_REG_IsConversionOngoing>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f040 83f3 	bne.w	800ab14 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	6859      	ldr	r1, [r3, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	461a      	mov	r2, r3
 800a33c:	f7ff f96f 	bl	800961e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4618      	mov	r0, r3
 800a346:	f7ff fa9e 	bl	8009886 <LL_ADC_REG_IsConversionOngoing>
 800a34a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff faaa 	bl	80098ac <LL_ADC_INJ_IsConversionOngoing>
 800a358:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a35c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a360:	2b00      	cmp	r3, #0
 800a362:	f040 81d9 	bne.w	800a718 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a366:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f040 81d4 	bne.w	800a718 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a378:	d10f      	bne.n	800a39a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2200      	movs	r2, #0
 800a384:	4619      	mov	r1, r3
 800a386:	f7ff f989 	bl	800969c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff f91d 	bl	80095d2 <LL_ADC_SetSamplingTimeCommonConfig>
 800a398:	e00e      	b.n	800a3b8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6818      	ldr	r0, [r3, #0]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	6819      	ldr	r1, [r3, #0]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f7ff f978 	bl	800969c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff f90d 	bl	80095d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	695a      	ldr	r2, [r3, #20]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	08db      	lsrs	r3, r3, #3
 800a3c4:	f003 0303 	and.w	r3, r3, #3
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d022      	beq.n	800a420 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6818      	ldr	r0, [r3, #0]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	6919      	ldr	r1, [r3, #16]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3ea:	f7ff f867 	bl	80094bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6818      	ldr	r0, [r3, #0]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	6919      	ldr	r1, [r3, #16]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f7ff f8b3 	bl	8009566 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6818      	ldr	r0, [r3, #0]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d102      	bne.n	800a416 <HAL_ADC_ConfigChannel+0x126>
 800a410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a414:	e000      	b.n	800a418 <HAL_ADC_ConfigChannel+0x128>
 800a416:	2300      	movs	r3, #0
 800a418:	461a      	mov	r2, r3
 800a41a:	f7ff f8bf 	bl	800959c <LL_ADC_SetOffsetSaturation>
 800a41e:	e17b      	b.n	800a718 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2100      	movs	r1, #0
 800a426:	4618      	mov	r0, r3
 800a428:	f7ff f86c 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a42c:	4603      	mov	r3, r0
 800a42e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10a      	bne.n	800a44c <HAL_ADC_ConfigChannel+0x15c>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2100      	movs	r1, #0
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff f861 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a442:	4603      	mov	r3, r0
 800a444:	0e9b      	lsrs	r3, r3, #26
 800a446:	f003 021f 	and.w	r2, r3, #31
 800a44a:	e01e      	b.n	800a48a <HAL_ADC_ConfigChannel+0x19a>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2100      	movs	r1, #0
 800a452:	4618      	mov	r0, r3
 800a454:	f7ff f856 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a458:	4603      	mov	r3, r0
 800a45a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a45e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a462:	fa93 f3a3 	rbit	r3, r3
 800a466:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a46a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a46e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800a47a:	2320      	movs	r3, #32
 800a47c:	e004      	b.n	800a488 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800a47e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a482:	fab3 f383 	clz	r3, r3
 800a486:	b2db      	uxtb	r3, r3
 800a488:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a492:	2b00      	cmp	r3, #0
 800a494:	d105      	bne.n	800a4a2 <HAL_ADC_ConfigChannel+0x1b2>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	0e9b      	lsrs	r3, r3, #26
 800a49c:	f003 031f 	and.w	r3, r3, #31
 800a4a0:	e018      	b.n	800a4d4 <HAL_ADC_ConfigChannel+0x1e4>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a4ae:	fa93 f3a3 	rbit	r3, r3
 800a4b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800a4b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800a4be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800a4c6:	2320      	movs	r3, #32
 800a4c8:	e004      	b.n	800a4d4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800a4ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4ce:	fab3 f383 	clz	r3, r3
 800a4d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d106      	bne.n	800a4e6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2100      	movs	r1, #0
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff f825 	bl	8009530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff f809 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10a      	bne.n	800a512 <HAL_ADC_ConfigChannel+0x222>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2101      	movs	r1, #1
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe fffe 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a508:	4603      	mov	r3, r0
 800a50a:	0e9b      	lsrs	r3, r3, #26
 800a50c:	f003 021f 	and.w	r2, r3, #31
 800a510:	e01e      	b.n	800a550 <HAL_ADC_ConfigChannel+0x260>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2101      	movs	r1, #1
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fe fff3 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a51e:	4603      	mov	r3, r0
 800a520:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a524:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a528:	fa93 f3a3 	rbit	r3, r3
 800a52c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800a530:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800a538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800a540:	2320      	movs	r3, #32
 800a542:	e004      	b.n	800a54e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800a544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a548:	fab3 f383 	clz	r3, r3
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d105      	bne.n	800a568 <HAL_ADC_ConfigChannel+0x278>
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	0e9b      	lsrs	r3, r3, #26
 800a562:	f003 031f 	and.w	r3, r3, #31
 800a566:	e018      	b.n	800a59a <HAL_ADC_ConfigChannel+0x2aa>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a574:	fa93 f3a3 	rbit	r3, r3
 800a578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800a57c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800a584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800a58c:	2320      	movs	r3, #32
 800a58e:	e004      	b.n	800a59a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800a590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a594:	fab3 f383 	clz	r3, r3
 800a598:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d106      	bne.n	800a5ac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe ffc2 	bl	8009530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2102      	movs	r1, #2
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe ffa6 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <HAL_ADC_ConfigChannel+0x2e8>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2102      	movs	r1, #2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe ff9b 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	0e9b      	lsrs	r3, r3, #26
 800a5d2:	f003 021f 	and.w	r2, r3, #31
 800a5d6:	e01e      	b.n	800a616 <HAL_ADC_ConfigChannel+0x326>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2102      	movs	r1, #2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe ff90 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ee:	fa93 f3a3 	rbit	r3, r3
 800a5f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800a5f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800a5fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800a606:	2320      	movs	r3, #32
 800a608:	e004      	b.n	800a614 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800a60a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a60e:	fab3 f383 	clz	r3, r3
 800a612:	b2db      	uxtb	r3, r3
 800a614:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d105      	bne.n	800a62e <HAL_ADC_ConfigChannel+0x33e>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	0e9b      	lsrs	r3, r3, #26
 800a628:	f003 031f 	and.w	r3, r3, #31
 800a62c:	e016      	b.n	800a65c <HAL_ADC_ConfigChannel+0x36c>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a63a:	fa93 f3a3 	rbit	r3, r3
 800a63e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800a640:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800a646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800a64e:	2320      	movs	r3, #32
 800a650:	e004      	b.n	800a65c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800a652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a656:	fab3 f383 	clz	r3, r3
 800a65a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d106      	bne.n	800a66e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2200      	movs	r2, #0
 800a666:	2102      	movs	r1, #2
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe ff61 	bl	8009530 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2103      	movs	r1, #3
 800a674:	4618      	mov	r0, r3
 800a676:	f7fe ff45 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <HAL_ADC_ConfigChannel+0x3aa>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2103      	movs	r1, #3
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fe ff3a 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a690:	4603      	mov	r3, r0
 800a692:	0e9b      	lsrs	r3, r3, #26
 800a694:	f003 021f 	and.w	r2, r3, #31
 800a698:	e017      	b.n	800a6ca <HAL_ADC_ConfigChannel+0x3da>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2103      	movs	r1, #3
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe ff2f 	bl	8009504 <LL_ADC_GetOffsetChannel>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6ac:	fa93 f3a3 	rbit	r3, r3
 800a6b0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800a6b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6b4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800a6b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800a6bc:	2320      	movs	r3, #32
 800a6be:	e003      	b.n	800a6c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800a6c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6c2:	fab3 f383 	clz	r3, r3
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d105      	bne.n	800a6e2 <HAL_ADC_ConfigChannel+0x3f2>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	0e9b      	lsrs	r3, r3, #26
 800a6dc:	f003 031f 	and.w	r3, r3, #31
 800a6e0:	e011      	b.n	800a706 <HAL_ADC_ConfigChannel+0x416>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6ea:	fa93 f3a3 	rbit	r3, r3
 800a6ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800a6f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800a6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800a6fa:	2320      	movs	r3, #32
 800a6fc:	e003      	b.n	800a706 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800a6fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a700:	fab3 f383 	clz	r3, r3
 800a704:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a706:	429a      	cmp	r2, r3
 800a708:	d106      	bne.n	800a718 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2200      	movs	r2, #0
 800a710:	2103      	movs	r1, #3
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe ff0c 	bl	8009530 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff f88b 	bl	8009838 <LL_ADC_IsEnabled>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	f040 813d 	bne.w	800a9a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	6819      	ldr	r1, [r3, #0]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	461a      	mov	r2, r3
 800a738:	f7fe ffdc 	bl	80096f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	4aa2      	ldr	r2, [pc, #648]	; (800a9cc <HAL_ADC_ConfigChannel+0x6dc>)
 800a742:	4293      	cmp	r3, r2
 800a744:	f040 812e 	bne.w	800a9a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10b      	bne.n	800a770 <HAL_ADC_ConfigChannel+0x480>
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	0e9b      	lsrs	r3, r3, #26
 800a75e:	3301      	adds	r3, #1
 800a760:	f003 031f 	and.w	r3, r3, #31
 800a764:	2b09      	cmp	r3, #9
 800a766:	bf94      	ite	ls
 800a768:	2301      	movls	r3, #1
 800a76a:	2300      	movhi	r3, #0
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	e019      	b.n	800a7a4 <HAL_ADC_ConfigChannel+0x4b4>
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a778:	fa93 f3a3 	rbit	r3, r3
 800a77c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800a77e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a780:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800a782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800a788:	2320      	movs	r3, #32
 800a78a:	e003      	b.n	800a794 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800a78c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a78e:	fab3 f383 	clz	r3, r3
 800a792:	b2db      	uxtb	r3, r3
 800a794:	3301      	adds	r3, #1
 800a796:	f003 031f 	and.w	r3, r3, #31
 800a79a:	2b09      	cmp	r3, #9
 800a79c:	bf94      	ite	ls
 800a79e:	2301      	movls	r3, #1
 800a7a0:	2300      	movhi	r3, #0
 800a7a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d079      	beq.n	800a89c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d107      	bne.n	800a7c4 <HAL_ADC_ConfigChannel+0x4d4>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	0e9b      	lsrs	r3, r3, #26
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	069b      	lsls	r3, r3, #26
 800a7be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a7c2:	e015      	b.n	800a7f0 <HAL_ADC_ConfigChannel+0x500>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7cc:	fa93 f3a3 	rbit	r3, r3
 800a7d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800a7d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800a7dc:	2320      	movs	r3, #32
 800a7de:	e003      	b.n	800a7e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800a7e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7e2:	fab3 f383 	clz	r3, r3
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	069b      	lsls	r3, r3, #26
 800a7ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d109      	bne.n	800a810 <HAL_ADC_ConfigChannel+0x520>
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	0e9b      	lsrs	r3, r3, #26
 800a802:	3301      	adds	r3, #1
 800a804:	f003 031f 	and.w	r3, r3, #31
 800a808:	2101      	movs	r1, #1
 800a80a:	fa01 f303 	lsl.w	r3, r1, r3
 800a80e:	e017      	b.n	800a840 <HAL_ADC_ConfigChannel+0x550>
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a818:	fa93 f3a3 	rbit	r3, r3
 800a81c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800a81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a820:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800a822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800a828:	2320      	movs	r3, #32
 800a82a:	e003      	b.n	800a834 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800a82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a82e:	fab3 f383 	clz	r3, r3
 800a832:	b2db      	uxtb	r3, r3
 800a834:	3301      	adds	r3, #1
 800a836:	f003 031f 	and.w	r3, r3, #31
 800a83a:	2101      	movs	r1, #1
 800a83c:	fa01 f303 	lsl.w	r3, r1, r3
 800a840:	ea42 0103 	orr.w	r1, r2, r3
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <HAL_ADC_ConfigChannel+0x576>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	0e9b      	lsrs	r3, r3, #26
 800a856:	3301      	adds	r3, #1
 800a858:	f003 021f 	and.w	r2, r3, #31
 800a85c:	4613      	mov	r3, r2
 800a85e:	005b      	lsls	r3, r3, #1
 800a860:	4413      	add	r3, r2
 800a862:	051b      	lsls	r3, r3, #20
 800a864:	e018      	b.n	800a898 <HAL_ADC_ConfigChannel+0x5a8>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	fa93 f3a3 	rbit	r3, r3
 800a872:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800a878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800a87e:	2320      	movs	r3, #32
 800a880:	e003      	b.n	800a88a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800a882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a884:	fab3 f383 	clz	r3, r3
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	3301      	adds	r3, #1
 800a88c:	f003 021f 	and.w	r2, r3, #31
 800a890:	4613      	mov	r3, r2
 800a892:	005b      	lsls	r3, r3, #1
 800a894:	4413      	add	r3, r2
 800a896:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a898:	430b      	orrs	r3, r1
 800a89a:	e07e      	b.n	800a99a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d107      	bne.n	800a8b8 <HAL_ADC_ConfigChannel+0x5c8>
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	0e9b      	lsrs	r3, r3, #26
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	069b      	lsls	r3, r3, #26
 800a8b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a8b6:	e015      	b.n	800a8e4 <HAL_ADC_ConfigChannel+0x5f4>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	fa93 f3a3 	rbit	r3, r3
 800a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800a8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800a8d0:	2320      	movs	r3, #32
 800a8d2:	e003      	b.n	800a8dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	fab3 f383 	clz	r3, r3
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	3301      	adds	r3, #1
 800a8de:	069b      	lsls	r3, r3, #26
 800a8e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d109      	bne.n	800a904 <HAL_ADC_ConfigChannel+0x614>
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	0e9b      	lsrs	r3, r3, #26
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	f003 031f 	and.w	r3, r3, #31
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a902:	e017      	b.n	800a934 <HAL_ADC_ConfigChannel+0x644>
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	fa93 f3a3 	rbit	r3, r3
 800a910:	61fb      	str	r3, [r7, #28]
  return result;
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800a91c:	2320      	movs	r3, #32
 800a91e:	e003      	b.n	800a928 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	fab3 f383 	clz	r3, r3
 800a926:	b2db      	uxtb	r3, r3
 800a928:	3301      	adds	r3, #1
 800a92a:	f003 031f 	and.w	r3, r3, #31
 800a92e:	2101      	movs	r1, #1
 800a930:	fa01 f303 	lsl.w	r3, r1, r3
 800a934:	ea42 0103 	orr.w	r1, r2, r3
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10d      	bne.n	800a960 <HAL_ADC_ConfigChannel+0x670>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	0e9b      	lsrs	r3, r3, #26
 800a94a:	3301      	adds	r3, #1
 800a94c:	f003 021f 	and.w	r2, r3, #31
 800a950:	4613      	mov	r3, r2
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	4413      	add	r3, r2
 800a956:	3b1e      	subs	r3, #30
 800a958:	051b      	lsls	r3, r3, #20
 800a95a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a95e:	e01b      	b.n	800a998 <HAL_ADC_ConfigChannel+0x6a8>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	fa93 f3a3 	rbit	r3, r3
 800a96c:	613b      	str	r3, [r7, #16]
  return result;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800a978:	2320      	movs	r3, #32
 800a97a:	e003      	b.n	800a984 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	fab3 f383 	clz	r3, r3
 800a982:	b2db      	uxtb	r3, r3
 800a984:	3301      	adds	r3, #1
 800a986:	f003 021f 	and.w	r2, r3, #31
 800a98a:	4613      	mov	r3, r2
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4413      	add	r3, r2
 800a990:	3b1e      	subs	r3, #30
 800a992:	051b      	lsls	r3, r3, #20
 800a994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a998:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a99e:	4619      	mov	r1, r3
 800a9a0:	f7fe fe7c 	bl	800969c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	4b09      	ldr	r3, [pc, #36]	; (800a9d0 <HAL_ADC_ConfigChannel+0x6e0>)
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 80be 	beq.w	800ab2e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9ba:	d004      	beq.n	800a9c6 <HAL_ADC_ConfigChannel+0x6d6>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a04      	ldr	r2, [pc, #16]	; (800a9d4 <HAL_ADC_ConfigChannel+0x6e4>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d10a      	bne.n	800a9dc <HAL_ADC_ConfigChannel+0x6ec>
 800a9c6:	4b04      	ldr	r3, [pc, #16]	; (800a9d8 <HAL_ADC_ConfigChannel+0x6e8>)
 800a9c8:	e009      	b.n	800a9de <HAL_ADC_ConfigChannel+0x6ee>
 800a9ca:	bf00      	nop
 800a9cc:	407f0000 	.word	0x407f0000
 800a9d0:	80080000 	.word	0x80080000
 800a9d4:	50000100 	.word	0x50000100
 800a9d8:	50000300 	.word	0x50000300
 800a9dc:	4b59      	ldr	r3, [pc, #356]	; (800ab44 <HAL_ADC_ConfigChannel+0x854>)
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe fd5e 	bl	80094a0 <LL_ADC_GetCommonPathInternalCh>
 800a9e4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a56      	ldr	r2, [pc, #344]	; (800ab48 <HAL_ADC_ConfigChannel+0x858>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d004      	beq.n	800a9fc <HAL_ADC_ConfigChannel+0x70c>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a55      	ldr	r2, [pc, #340]	; (800ab4c <HAL_ADC_ConfigChannel+0x85c>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d13a      	bne.n	800aa72 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a9fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d134      	bne.n	800aa72 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa10:	d005      	beq.n	800aa1e <HAL_ADC_ConfigChannel+0x72e>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a4e      	ldr	r2, [pc, #312]	; (800ab50 <HAL_ADC_ConfigChannel+0x860>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	f040 8085 	bne.w	800ab28 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa26:	d004      	beq.n	800aa32 <HAL_ADC_ConfigChannel+0x742>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a49      	ldr	r2, [pc, #292]	; (800ab54 <HAL_ADC_ConfigChannel+0x864>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d101      	bne.n	800aa36 <HAL_ADC_ConfigChannel+0x746>
 800aa32:	4a49      	ldr	r2, [pc, #292]	; (800ab58 <HAL_ADC_ConfigChannel+0x868>)
 800aa34:	e000      	b.n	800aa38 <HAL_ADC_ConfigChannel+0x748>
 800aa36:	4a43      	ldr	r2, [pc, #268]	; (800ab44 <HAL_ADC_ConfigChannel+0x854>)
 800aa38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f7fe fd19 	bl	800947a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aa48:	4b44      	ldr	r3, [pc, #272]	; (800ab5c <HAL_ADC_ConfigChannel+0x86c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	099b      	lsrs	r3, r3, #6
 800aa4e:	4a44      	ldr	r2, [pc, #272]	; (800ab60 <HAL_ADC_ConfigChannel+0x870>)
 800aa50:	fba2 2303 	umull	r2, r3, r2, r3
 800aa54:	099b      	lsrs	r3, r3, #6
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	4613      	mov	r3, r2
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	4413      	add	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800aa62:	e002      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1f9      	bne.n	800aa64 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aa70:	e05a      	b.n	800ab28 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a3b      	ldr	r2, [pc, #236]	; (800ab64 <HAL_ADC_ConfigChannel+0x874>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d125      	bne.n	800aac8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800aa7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d11f      	bne.n	800aac8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a31      	ldr	r2, [pc, #196]	; (800ab54 <HAL_ADC_ConfigChannel+0x864>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d104      	bne.n	800aa9c <HAL_ADC_ConfigChannel+0x7ac>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a34      	ldr	r2, [pc, #208]	; (800ab68 <HAL_ADC_ConfigChannel+0x878>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d047      	beq.n	800ab2c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aaa4:	d004      	beq.n	800aab0 <HAL_ADC_ConfigChannel+0x7c0>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a2a      	ldr	r2, [pc, #168]	; (800ab54 <HAL_ADC_ConfigChannel+0x864>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d101      	bne.n	800aab4 <HAL_ADC_ConfigChannel+0x7c4>
 800aab0:	4a29      	ldr	r2, [pc, #164]	; (800ab58 <HAL_ADC_ConfigChannel+0x868>)
 800aab2:	e000      	b.n	800aab6 <HAL_ADC_ConfigChannel+0x7c6>
 800aab4:	4a23      	ldr	r2, [pc, #140]	; (800ab44 <HAL_ADC_ConfigChannel+0x854>)
 800aab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aaba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aabe:	4619      	mov	r1, r3
 800aac0:	4610      	mov	r0, r2
 800aac2:	f7fe fcda 	bl	800947a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aac6:	e031      	b.n	800ab2c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a27      	ldr	r2, [pc, #156]	; (800ab6c <HAL_ADC_ConfigChannel+0x87c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d12d      	bne.n	800ab2e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800aad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d127      	bne.n	800ab2e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a1c      	ldr	r2, [pc, #112]	; (800ab54 <HAL_ADC_ConfigChannel+0x864>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d022      	beq.n	800ab2e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aaf0:	d004      	beq.n	800aafc <HAL_ADC_ConfigChannel+0x80c>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a17      	ldr	r2, [pc, #92]	; (800ab54 <HAL_ADC_ConfigChannel+0x864>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d101      	bne.n	800ab00 <HAL_ADC_ConfigChannel+0x810>
 800aafc:	4a16      	ldr	r2, [pc, #88]	; (800ab58 <HAL_ADC_ConfigChannel+0x868>)
 800aafe:	e000      	b.n	800ab02 <HAL_ADC_ConfigChannel+0x812>
 800ab00:	4a10      	ldr	r2, [pc, #64]	; (800ab44 <HAL_ADC_ConfigChannel+0x854>)
 800ab02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	f7fe fcb4 	bl	800947a <LL_ADC_SetCommonPathInternalCh>
 800ab12:	e00c      	b.n	800ab2e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab18:	f043 0220 	orr.w	r2, r3, #32
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800ab26:	e002      	b.n	800ab2e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ab28:	bf00      	nop
 800ab2a:	e000      	b.n	800ab2e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ab2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800ab36:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	37d8      	adds	r7, #216	; 0xd8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	50000700 	.word	0x50000700
 800ab48:	c3210000 	.word	0xc3210000
 800ab4c:	90c00010 	.word	0x90c00010
 800ab50:	50000600 	.word	0x50000600
 800ab54:	50000100 	.word	0x50000100
 800ab58:	50000300 	.word	0x50000300
 800ab5c:	20000008 	.word	0x20000008
 800ab60:	053e2d63 	.word	0x053e2d63
 800ab64:	c7520000 	.word	0xc7520000
 800ab68:	50000500 	.word	0x50000500
 800ab6c:	cb840000 	.word	0xcb840000

0800ab70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7fe fe59 	bl	8009838 <LL_ADC_IsEnabled>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d176      	bne.n	800ac7a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	4b3c      	ldr	r3, [pc, #240]	; (800ac84 <ADC_Enable+0x114>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00d      	beq.n	800abb6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab9e:	f043 0210 	orr.w	r2, r3, #16
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abaa:	f043 0201 	orr.w	r2, r3, #1
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e062      	b.n	800ac7c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe fe28 	bl	8009810 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abc8:	d004      	beq.n	800abd4 <ADC_Enable+0x64>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a2e      	ldr	r2, [pc, #184]	; (800ac88 <ADC_Enable+0x118>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d101      	bne.n	800abd8 <ADC_Enable+0x68>
 800abd4:	4b2d      	ldr	r3, [pc, #180]	; (800ac8c <ADC_Enable+0x11c>)
 800abd6:	e000      	b.n	800abda <ADC_Enable+0x6a>
 800abd8:	4b2d      	ldr	r3, [pc, #180]	; (800ac90 <ADC_Enable+0x120>)
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fc60 	bl	80094a0 <LL_ADC_GetCommonPathInternalCh>
 800abe0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800abe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d013      	beq.n	800ac12 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800abea:	4b2a      	ldr	r3, [pc, #168]	; (800ac94 <ADC_Enable+0x124>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	099b      	lsrs	r3, r3, #6
 800abf0:	4a29      	ldr	r2, [pc, #164]	; (800ac98 <ADC_Enable+0x128>)
 800abf2:	fba2 2303 	umull	r2, r3, r2, r3
 800abf6:	099b      	lsrs	r3, r3, #6
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	4613      	mov	r3, r2
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	4413      	add	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ac04:	e002      	b.n	800ac0c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1f9      	bne.n	800ac06 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ac12:	f7fe fba5 	bl	8009360 <HAL_GetTick>
 800ac16:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ac18:	e028      	b.n	800ac6c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fe fe0a 	bl	8009838 <LL_ADC_IsEnabled>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d104      	bne.n	800ac34 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe fdee 	bl	8009810 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ac34:	f7fe fb94 	bl	8009360 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d914      	bls.n	800ac6c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d00d      	beq.n	800ac6c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac54:	f043 0210 	orr.w	r2, r3, #16
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac60:	f043 0201 	orr.w	r2, r3, #1
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e007      	b.n	800ac7c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d1cf      	bne.n	800ac1a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	8000003f 	.word	0x8000003f
 800ac88:	50000100 	.word	0x50000100
 800ac8c:	50000300 	.word	0x50000300
 800ac90:	50000700 	.word	0x50000700
 800ac94:	20000008 	.word	0x20000008
 800ac98:	053e2d63 	.word	0x053e2d63

0800ac9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d14b      	bne.n	800ad4e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0308 	and.w	r3, r3, #8
 800accc:	2b00      	cmp	r3, #0
 800acce:	d021      	beq.n	800ad14 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fe fc8f 	bl	80095f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d032      	beq.n	800ad46 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d12b      	bne.n	800ad46 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d11f      	bne.n	800ad46 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad0a:	f043 0201 	orr.w	r2, r3, #1
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad12:	e018      	b.n	800ad46 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d111      	bne.n	800ad46 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d105      	bne.n	800ad46 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad3e:	f043 0201 	orr.w	r2, r3, #1
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7fc fe9e 	bl	8007a88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ad4c:	e00e      	b.n	800ad6c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad52:	f003 0310 	and.w	r3, r3, #16
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d003      	beq.n	800ad62 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7ff fabe 	bl	800a2dc <HAL_ADC_ErrorCallback>
}
 800ad60:	e004      	b.n	800ad6c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	4798      	blx	r3
}
 800ad6c:	bf00      	nop
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad80:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f7ff fa96 	bl	800a2b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ad88:	bf00      	nop
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ada2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adae:	f043 0204 	orr.w	r2, r3, #4
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7ff fa90 	bl	800a2dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800adbc:	bf00      	nop
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <LL_ADC_IsEnabled>:
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b01      	cmp	r3, #1
 800add6:	d101      	bne.n	800addc <LL_ADC_IsEnabled+0x18>
 800add8:	2301      	movs	r3, #1
 800adda:	e000      	b.n	800adde <LL_ADC_IsEnabled+0x1a>
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <LL_ADC_REG_IsConversionOngoing>:
{
 800adea:	b480      	push	{r7}
 800adec:	b083      	sub	sp, #12
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	f003 0304 	and.w	r3, r3, #4
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d101      	bne.n	800ae02 <LL_ADC_REG_IsConversionOngoing+0x18>
 800adfe:	2301      	movs	r3, #1
 800ae00:	e000      	b.n	800ae04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800ae18:	bf00      	nop
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800ae74:	b590      	push	{r4, r7, lr}
 800ae76:	b0a1      	sub	sp, #132	; 0x84
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d101      	bne.n	800ae92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e0e7      	b.n	800b062 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800ae9e:	2300      	movs	r3, #0
 800aea0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeaa:	d102      	bne.n	800aeb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800aeac:	4b6f      	ldr	r3, [pc, #444]	; (800b06c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800aeae:	60bb      	str	r3, [r7, #8]
 800aeb0:	e009      	b.n	800aec6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a6e      	ldr	r2, [pc, #440]	; (800b070 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d102      	bne.n	800aec2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800aebc:	4b6d      	ldr	r3, [pc, #436]	; (800b074 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800aebe:	60bb      	str	r3, [r7, #8]
 800aec0:	e001      	b.n	800aec6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800aec2:	2300      	movs	r3, #0
 800aec4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10b      	bne.n	800aee4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aed0:	f043 0220 	orr.w	r2, r3, #32
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e0be      	b.n	800b062 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff ff7f 	bl	800adea <LL_ADC_REG_IsConversionOngoing>
 800aeec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff ff79 	bl	800adea <LL_ADC_REG_IsConversionOngoing>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f040 80a0 	bne.w	800b040 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800af00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af02:	2b00      	cmp	r3, #0
 800af04:	f040 809c 	bne.w	800b040 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af10:	d004      	beq.n	800af1c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a55      	ldr	r2, [pc, #340]	; (800b06c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d101      	bne.n	800af20 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800af1c:	4b56      	ldr	r3, [pc, #344]	; (800b078 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800af1e:	e000      	b.n	800af22 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800af20:	4b56      	ldr	r3, [pc, #344]	; (800b07c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800af22:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d04b      	beq.n	800afc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800af2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	6859      	ldr	r1, [r3, #4]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af3e:	035b      	lsls	r3, r3, #13
 800af40:	430b      	orrs	r3, r1
 800af42:	431a      	orrs	r2, r3
 800af44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af50:	d004      	beq.n	800af5c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a45      	ldr	r2, [pc, #276]	; (800b06c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d10f      	bne.n	800af7c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800af5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800af60:	f7ff ff30 	bl	800adc4 <LL_ADC_IsEnabled>
 800af64:	4604      	mov	r4, r0
 800af66:	4841      	ldr	r0, [pc, #260]	; (800b06c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800af68:	f7ff ff2c 	bl	800adc4 <LL_ADC_IsEnabled>
 800af6c:	4603      	mov	r3, r0
 800af6e:	4323      	orrs	r3, r4
 800af70:	2b00      	cmp	r3, #0
 800af72:	bf0c      	ite	eq
 800af74:	2301      	moveq	r3, #1
 800af76:	2300      	movne	r3, #0
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	e012      	b.n	800afa2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800af7c:	483c      	ldr	r0, [pc, #240]	; (800b070 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800af7e:	f7ff ff21 	bl	800adc4 <LL_ADC_IsEnabled>
 800af82:	4604      	mov	r4, r0
 800af84:	483b      	ldr	r0, [pc, #236]	; (800b074 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800af86:	f7ff ff1d 	bl	800adc4 <LL_ADC_IsEnabled>
 800af8a:	4603      	mov	r3, r0
 800af8c:	431c      	orrs	r4, r3
 800af8e:	483c      	ldr	r0, [pc, #240]	; (800b080 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800af90:	f7ff ff18 	bl	800adc4 <LL_ADC_IsEnabled>
 800af94:	4603      	mov	r3, r0
 800af96:	4323      	orrs	r3, r4
 800af98:	2b00      	cmp	r3, #0
 800af9a:	bf0c      	ite	eq
 800af9c:	2301      	moveq	r3, #1
 800af9e:	2300      	movne	r3, #0
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d056      	beq.n	800b054 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800afa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800afae:	f023 030f 	bic.w	r3, r3, #15
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	6811      	ldr	r1, [r2, #0]
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	6892      	ldr	r2, [r2, #8]
 800afba:	430a      	orrs	r2, r1
 800afbc:	431a      	orrs	r2, r3
 800afbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afc0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800afc2:	e047      	b.n	800b054 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800afc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800afcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afd8:	d004      	beq.n	800afe4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a23      	ldr	r2, [pc, #140]	; (800b06c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d10f      	bne.n	800b004 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800afe4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800afe8:	f7ff feec 	bl	800adc4 <LL_ADC_IsEnabled>
 800afec:	4604      	mov	r4, r0
 800afee:	481f      	ldr	r0, [pc, #124]	; (800b06c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800aff0:	f7ff fee8 	bl	800adc4 <LL_ADC_IsEnabled>
 800aff4:	4603      	mov	r3, r0
 800aff6:	4323      	orrs	r3, r4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	bf0c      	ite	eq
 800affc:	2301      	moveq	r3, #1
 800affe:	2300      	movne	r3, #0
 800b000:	b2db      	uxtb	r3, r3
 800b002:	e012      	b.n	800b02a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800b004:	481a      	ldr	r0, [pc, #104]	; (800b070 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b006:	f7ff fedd 	bl	800adc4 <LL_ADC_IsEnabled>
 800b00a:	4604      	mov	r4, r0
 800b00c:	4819      	ldr	r0, [pc, #100]	; (800b074 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b00e:	f7ff fed9 	bl	800adc4 <LL_ADC_IsEnabled>
 800b012:	4603      	mov	r3, r0
 800b014:	431c      	orrs	r4, r3
 800b016:	481a      	ldr	r0, [pc, #104]	; (800b080 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b018:	f7ff fed4 	bl	800adc4 <LL_ADC_IsEnabled>
 800b01c:	4603      	mov	r3, r0
 800b01e:	4323      	orrs	r3, r4
 800b020:	2b00      	cmp	r3, #0
 800b022:	bf0c      	ite	eq
 800b024:	2301      	moveq	r3, #1
 800b026:	2300      	movne	r3, #0
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d012      	beq.n	800b054 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b02e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800b036:	f023 030f 	bic.w	r3, r3, #15
 800b03a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b03c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b03e:	e009      	b.n	800b054 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b044:	f043 0220 	orr.w	r2, r3, #32
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b052:	e000      	b.n	800b056 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b054:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800b05e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b062:	4618      	mov	r0, r3
 800b064:	3784      	adds	r7, #132	; 0x84
 800b066:	46bd      	mov	sp, r7
 800b068:	bd90      	pop	{r4, r7, pc}
 800b06a:	bf00      	nop
 800b06c:	50000100 	.word	0x50000100
 800b070:	50000400 	.word	0x50000400
 800b074:	50000500 	.word	0x50000500
 800b078:	50000300 	.word	0x50000300
 800b07c:	50000700 	.word	0x50000700
 800b080:	50000600 	.word	0x50000600

0800b084 <__NVIC_SetPriorityGrouping>:
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f003 0307 	and.w	r3, r3, #7
 800b092:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b094:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <__NVIC_SetPriorityGrouping+0x44>)
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b0ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b0b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b0b6:	4a04      	ldr	r2, [pc, #16]	; (800b0c8 <__NVIC_SetPriorityGrouping+0x44>)
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	60d3      	str	r3, [r2, #12]
}
 800b0bc:	bf00      	nop
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	e000ed00 	.word	0xe000ed00

0800b0cc <__NVIC_GetPriorityGrouping>:
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b0d0:	4b04      	ldr	r3, [pc, #16]	; (800b0e4 <__NVIC_GetPriorityGrouping+0x18>)
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	0a1b      	lsrs	r3, r3, #8
 800b0d6:	f003 0307 	and.w	r3, r3, #7
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	e000ed00 	.word	0xe000ed00

0800b0e8 <__NVIC_EnableIRQ>:
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	db0b      	blt.n	800b112 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	f003 021f 	and.w	r2, r3, #31
 800b100:	4907      	ldr	r1, [pc, #28]	; (800b120 <__NVIC_EnableIRQ+0x38>)
 800b102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b106:	095b      	lsrs	r3, r3, #5
 800b108:	2001      	movs	r0, #1
 800b10a:	fa00 f202 	lsl.w	r2, r0, r2
 800b10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b112:	bf00      	nop
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	e000e100 	.word	0xe000e100

0800b124 <__NVIC_SetPriority>:
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b134:	2b00      	cmp	r3, #0
 800b136:	db0a      	blt.n	800b14e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	490c      	ldr	r1, [pc, #48]	; (800b170 <__NVIC_SetPriority+0x4c>)
 800b13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b142:	0112      	lsls	r2, r2, #4
 800b144:	b2d2      	uxtb	r2, r2
 800b146:	440b      	add	r3, r1
 800b148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b14c:	e00a      	b.n	800b164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	b2da      	uxtb	r2, r3
 800b152:	4908      	ldr	r1, [pc, #32]	; (800b174 <__NVIC_SetPriority+0x50>)
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	f003 030f 	and.w	r3, r3, #15
 800b15a:	3b04      	subs	r3, #4
 800b15c:	0112      	lsls	r2, r2, #4
 800b15e:	b2d2      	uxtb	r2, r2
 800b160:	440b      	add	r3, r1
 800b162:	761a      	strb	r2, [r3, #24]
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	e000e100 	.word	0xe000e100
 800b174:	e000ed00 	.word	0xe000ed00

0800b178 <NVIC_EncodePriority>:
{
 800b178:	b480      	push	{r7}
 800b17a:	b089      	sub	sp, #36	; 0x24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	f1c3 0307 	rsb	r3, r3, #7
 800b192:	2b04      	cmp	r3, #4
 800b194:	bf28      	it	cs
 800b196:	2304      	movcs	r3, #4
 800b198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	3304      	adds	r3, #4
 800b19e:	2b06      	cmp	r3, #6
 800b1a0:	d902      	bls.n	800b1a8 <NVIC_EncodePriority+0x30>
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	3b03      	subs	r3, #3
 800b1a6:	e000      	b.n	800b1aa <NVIC_EncodePriority+0x32>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b6:	43da      	mvns	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	401a      	ands	r2, r3
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1c0:	f04f 31ff 	mov.w	r1, #4294967295
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ca:	43d9      	mvns	r1, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1d0:	4313      	orrs	r3, r2
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3724      	adds	r7, #36	; 0x24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b082      	sub	sp, #8
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff ff4c 	bl	800b084 <__NVIC_SetPriorityGrouping>
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b202:	f7ff ff63 	bl	800b0cc <__NVIC_GetPriorityGrouping>
 800b206:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	6978      	ldr	r0, [r7, #20]
 800b20e:	f7ff ffb3 	bl	800b178 <NVIC_EncodePriority>
 800b212:	4602      	mov	r2, r0
 800b214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff ff82 	bl	800b124 <__NVIC_SetPriority>
}
 800b220:	bf00      	nop
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	4603      	mov	r3, r0
 800b230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff ff56 	bl	800b0e8 <__NVIC_EnableIRQ>
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	e08d      	b.n	800b372 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	461a      	mov	r2, r3
 800b25c:	4b47      	ldr	r3, [pc, #284]	; (800b37c <HAL_DMA_Init+0x138>)
 800b25e:	429a      	cmp	r2, r3
 800b260:	d80f      	bhi.n	800b282 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	4b45      	ldr	r3, [pc, #276]	; (800b380 <HAL_DMA_Init+0x13c>)
 800b26a:	4413      	add	r3, r2
 800b26c:	4a45      	ldr	r2, [pc, #276]	; (800b384 <HAL_DMA_Init+0x140>)
 800b26e:	fba2 2303 	umull	r2, r3, r2, r3
 800b272:	091b      	lsrs	r3, r3, #4
 800b274:	009a      	lsls	r2, r3, #2
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a42      	ldr	r2, [pc, #264]	; (800b388 <HAL_DMA_Init+0x144>)
 800b27e:	641a      	str	r2, [r3, #64]	; 0x40
 800b280:	e00e      	b.n	800b2a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	4b40      	ldr	r3, [pc, #256]	; (800b38c <HAL_DMA_Init+0x148>)
 800b28a:	4413      	add	r3, r2
 800b28c:	4a3d      	ldr	r2, [pc, #244]	; (800b384 <HAL_DMA_Init+0x140>)
 800b28e:	fba2 2303 	umull	r2, r3, r2, r3
 800b292:	091b      	lsrs	r3, r3, #4
 800b294:	009a      	lsls	r2, r3, #2
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a3c      	ldr	r2, [pc, #240]	; (800b390 <HAL_DMA_Init+0x14c>)
 800b29e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b2c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fa76 	bl	800b7e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b300:	d102      	bne.n	800b308 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b310:	b2d2      	uxtb	r2, r2
 800b312:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b31c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d010      	beq.n	800b348 <HAL_DMA_Init+0x104>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	d80c      	bhi.n	800b348 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fa96 	bl	800b860 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b344:	605a      	str	r2, [r3, #4]
 800b346:	e008      	b.n	800b35a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	40020407 	.word	0x40020407
 800b380:	bffdfff8 	.word	0xbffdfff8
 800b384:	cccccccd 	.word	0xcccccccd
 800b388:	40020000 	.word	0x40020000
 800b38c:	bffdfbf8 	.word	0xbffdfbf8
 800b390:	40020400 	.word	0x40020400

0800b394 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_DMA_Start_IT+0x20>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e066      	b.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d155      	bne.n	800b474 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f022 0201 	bic.w	r2, r2, #1
 800b3e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	68b9      	ldr	r1, [r7, #8]
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 f9bb 	bl	800b768 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d008      	beq.n	800b40c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f042 020e 	orr.w	r2, r2, #14
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	e00f      	b.n	800b42c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0204 	bic.w	r2, r2, #4
 800b41a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f042 020a 	orr.w	r2, r2, #10
 800b42a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d007      	beq.n	800b44a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b448:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d007      	beq.n	800b462 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b460:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f042 0201 	orr.w	r2, r2, #1
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	e005      	b.n	800b480 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b47c:	2302      	movs	r3, #2
 800b47e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b480:	7dfb      	ldrb	r3, [r7, #23]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d005      	beq.n	800b4ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2204      	movs	r2, #4
 800b4a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	73fb      	strb	r3, [r7, #15]
 800b4ac:	e037      	b.n	800b51e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f022 020e 	bic.w	r2, r2, #14
 800b4bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f022 0201 	bic.w	r2, r2, #1
 800b4dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4e2:	f003 021f 	and.w	r2, r3, #31
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	fa01 f202 	lsl.w	r2, r1, r2
 800b4f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b4fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00c      	beq.n	800b51e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b512:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b51c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b02      	cmp	r3, #2
 800b552:	d00d      	beq.n	800b570 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2204      	movs	r2, #4
 800b558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	73fb      	strb	r3, [r7, #15]
 800b56e:	e047      	b.n	800b600 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f022 020e 	bic.w	r2, r2, #14
 800b57e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 0201 	bic.w	r2, r2, #1
 800b58e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b59a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b59e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5a4:	f003 021f 	and.w	r2, r3, #31
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	fa01 f202 	lsl.w	r2, r1, r2
 800b5b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b5bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00c      	beq.n	800b5e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b5de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d003      	beq.n	800b600 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	4798      	blx	r3
    }
  }
  return status;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b626:	f003 031f 	and.w	r3, r3, #31
 800b62a:	2204      	movs	r2, #4
 800b62c:	409a      	lsls	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	4013      	ands	r3, r2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d026      	beq.n	800b684 <HAL_DMA_IRQHandler+0x7a>
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f003 0304 	and.w	r3, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d021      	beq.n	800b684 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0320 	and.w	r3, r3, #32
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d107      	bne.n	800b65e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f022 0204 	bic.w	r2, r2, #4
 800b65c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b662:	f003 021f 	and.w	r2, r3, #31
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	2104      	movs	r1, #4
 800b66c:	fa01 f202 	lsl.w	r2, r1, r2
 800b670:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b676:	2b00      	cmp	r3, #0
 800b678:	d071      	beq.n	800b75e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b682:	e06c      	b.n	800b75e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b688:	f003 031f 	and.w	r3, r3, #31
 800b68c:	2202      	movs	r2, #2
 800b68e:	409a      	lsls	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4013      	ands	r3, r2
 800b694:	2b00      	cmp	r3, #0
 800b696:	d02e      	beq.n	800b6f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	f003 0302 	and.w	r3, r3, #2
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d029      	beq.n	800b6f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0320 	and.w	r3, r3, #32
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10b      	bne.n	800b6c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f022 020a 	bic.w	r2, r2, #10
 800b6be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6cc:	f003 021f 	and.w	r2, r3, #31
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d4:	2102      	movs	r1, #2
 800b6d6:	fa01 f202 	lsl.w	r2, r1, r2
 800b6da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d038      	beq.n	800b75e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b6f4:	e033      	b.n	800b75e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6fa:	f003 031f 	and.w	r3, r3, #31
 800b6fe:	2208      	movs	r2, #8
 800b700:	409a      	lsls	r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4013      	ands	r3, r2
 800b706:	2b00      	cmp	r3, #0
 800b708:	d02a      	beq.n	800b760 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f003 0308 	and.w	r3, r3, #8
 800b710:	2b00      	cmp	r3, #0
 800b712:	d025      	beq.n	800b760 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f022 020e 	bic.w	r2, r2, #14
 800b722:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b728:	f003 021f 	and.w	r2, r3, #31
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b730:	2101      	movs	r1, #1
 800b732:	fa01 f202 	lsl.w	r2, r1, r2
 800b736:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b752:	2b00      	cmp	r3, #0
 800b754:	d004      	beq.n	800b760 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b75e:	bf00      	nop
 800b760:	bf00      	nop
}
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b77e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b784:	2b00      	cmp	r3, #0
 800b786:	d004      	beq.n	800b792 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b790:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b796:	f003 021f 	and.w	r2, r3, #31
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	2101      	movs	r1, #1
 800b7a0:	fa01 f202 	lsl.w	r2, r1, r2
 800b7a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	2b10      	cmp	r3, #16
 800b7b4:	d108      	bne.n	800b7c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b7c6:	e007      	b.n	800b7d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	60da      	str	r2, [r3, #12]
}
 800b7d8:	bf00      	nop
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b087      	sub	sp, #28
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	4b16      	ldr	r3, [pc, #88]	; (800b84c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d802      	bhi.n	800b7fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b7f8:	4b15      	ldr	r3, [pc, #84]	; (800b850 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b7fa:	617b      	str	r3, [r7, #20]
 800b7fc:	e001      	b.n	800b802 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b7fe:	4b15      	ldr	r3, [pc, #84]	; (800b854 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b800:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	3b08      	subs	r3, #8
 800b80e:	4a12      	ldr	r2, [pc, #72]	; (800b858 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b810:	fba2 2303 	umull	r2, r3, r2, r3
 800b814:	091b      	lsrs	r3, r3, #4
 800b816:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81c:	089b      	lsrs	r3, r3, #2
 800b81e:	009a      	lsls	r2, r3, #2
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	4413      	add	r3, r2
 800b824:	461a      	mov	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a0b      	ldr	r2, [pc, #44]	; (800b85c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b82e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f003 031f 	and.w	r3, r3, #31
 800b836:	2201      	movs	r2, #1
 800b838:	409a      	lsls	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b83e:	bf00      	nop
 800b840:	371c      	adds	r7, #28
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	40020407 	.word	0x40020407
 800b850:	40020800 	.word	0x40020800
 800b854:	40020820 	.word	0x40020820
 800b858:	cccccccd 	.word	0xcccccccd
 800b85c:	40020880 	.word	0x40020880

0800b860 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	4b0b      	ldr	r3, [pc, #44]	; (800b8a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b874:	4413      	add	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	461a      	mov	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a08      	ldr	r2, [pc, #32]	; (800b8a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b882:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3b01      	subs	r3, #1
 800b888:	f003 031f 	and.w	r3, r3, #31
 800b88c:	2201      	movs	r2, #1
 800b88e:	409a      	lsls	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b894:	bf00      	nop
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	1000823f 	.word	0x1000823f
 800b8a4:	40020940 	.word	0x40020940

0800b8a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b8b6:	e15a      	b.n	800bb6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	2101      	movs	r1, #1
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f000 814c 	beq.w	800bb68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	f003 0303 	and.w	r3, r3, #3
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d005      	beq.n	800b8e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d130      	bne.n	800b94a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f8:	43db      	mvns	r3, r3
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	005b      	lsls	r3, r3, #1
 800b908:	fa02 f303 	lsl.w	r3, r2, r3
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	4313      	orrs	r3, r2
 800b910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b91e:	2201      	movs	r2, #1
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	fa02 f303 	lsl.w	r3, r2, r3
 800b926:	43db      	mvns	r3, r3
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	4013      	ands	r3, r2
 800b92c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	091b      	lsrs	r3, r3, #4
 800b934:	f003 0201 	and.w	r2, r3, #1
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	fa02 f303 	lsl.w	r3, r2, r3
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	4313      	orrs	r3, r2
 800b942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	2b03      	cmp	r3, #3
 800b954:	d017      	beq.n	800b986 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	2203      	movs	r2, #3
 800b962:	fa02 f303 	lsl.w	r3, r2, r3
 800b966:	43db      	mvns	r3, r3
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	4013      	ands	r3, r2
 800b96c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	689a      	ldr	r2, [r3, #8]
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	fa02 f303 	lsl.w	r3, r2, r3
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d123      	bne.n	800b9da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	08da      	lsrs	r2, r3, #3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	3208      	adds	r2, #8
 800b99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f003 0307 	and.w	r3, r3, #7
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	220f      	movs	r2, #15
 800b9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ae:	43db      	mvns	r3, r3
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	691a      	ldr	r2, [r3, #16]
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f003 0307 	and.w	r3, r3, #7
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	08da      	lsrs	r2, r3, #3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3208      	adds	r2, #8
 800b9d4:	6939      	ldr	r1, [r7, #16]
 800b9d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	2203      	movs	r2, #3
 800b9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ea:	43db      	mvns	r3, r3
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f003 0203 	and.w	r2, r3, #3
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	693a      	ldr	r2, [r7, #16]
 800ba0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 80a6 	beq.w	800bb68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba1c:	4b5b      	ldr	r3, [pc, #364]	; (800bb8c <HAL_GPIO_Init+0x2e4>)
 800ba1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba20:	4a5a      	ldr	r2, [pc, #360]	; (800bb8c <HAL_GPIO_Init+0x2e4>)
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	6613      	str	r3, [r2, #96]	; 0x60
 800ba28:	4b58      	ldr	r3, [pc, #352]	; (800bb8c <HAL_GPIO_Init+0x2e4>)
 800ba2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	60bb      	str	r3, [r7, #8]
 800ba32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ba34:	4a56      	ldr	r2, [pc, #344]	; (800bb90 <HAL_GPIO_Init+0x2e8>)
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	089b      	lsrs	r3, r3, #2
 800ba3a:	3302      	adds	r3, #2
 800ba3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f003 0303 	and.w	r3, r3, #3
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	220f      	movs	r2, #15
 800ba4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba50:	43db      	mvns	r3, r3
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	4013      	ands	r3, r2
 800ba56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ba5e:	d01f      	beq.n	800baa0 <HAL_GPIO_Init+0x1f8>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a4c      	ldr	r2, [pc, #304]	; (800bb94 <HAL_GPIO_Init+0x2ec>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d019      	beq.n	800ba9c <HAL_GPIO_Init+0x1f4>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a4b      	ldr	r2, [pc, #300]	; (800bb98 <HAL_GPIO_Init+0x2f0>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d013      	beq.n	800ba98 <HAL_GPIO_Init+0x1f0>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a4a      	ldr	r2, [pc, #296]	; (800bb9c <HAL_GPIO_Init+0x2f4>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d00d      	beq.n	800ba94 <HAL_GPIO_Init+0x1ec>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a49      	ldr	r2, [pc, #292]	; (800bba0 <HAL_GPIO_Init+0x2f8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d007      	beq.n	800ba90 <HAL_GPIO_Init+0x1e8>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a48      	ldr	r2, [pc, #288]	; (800bba4 <HAL_GPIO_Init+0x2fc>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d101      	bne.n	800ba8c <HAL_GPIO_Init+0x1e4>
 800ba88:	2305      	movs	r3, #5
 800ba8a:	e00a      	b.n	800baa2 <HAL_GPIO_Init+0x1fa>
 800ba8c:	2306      	movs	r3, #6
 800ba8e:	e008      	b.n	800baa2 <HAL_GPIO_Init+0x1fa>
 800ba90:	2304      	movs	r3, #4
 800ba92:	e006      	b.n	800baa2 <HAL_GPIO_Init+0x1fa>
 800ba94:	2303      	movs	r3, #3
 800ba96:	e004      	b.n	800baa2 <HAL_GPIO_Init+0x1fa>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	e002      	b.n	800baa2 <HAL_GPIO_Init+0x1fa>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e000      	b.n	800baa2 <HAL_GPIO_Init+0x1fa>
 800baa0:	2300      	movs	r3, #0
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	f002 0203 	and.w	r2, r2, #3
 800baa8:	0092      	lsls	r2, r2, #2
 800baaa:	4093      	lsls	r3, r2
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	4313      	orrs	r3, r2
 800bab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bab2:	4937      	ldr	r1, [pc, #220]	; (800bb90 <HAL_GPIO_Init+0x2e8>)
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	089b      	lsrs	r3, r3, #2
 800bab8:	3302      	adds	r3, #2
 800baba:	693a      	ldr	r2, [r7, #16]
 800babc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bac0:	4b39      	ldr	r3, [pc, #228]	; (800bba8 <HAL_GPIO_Init+0x300>)
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	43db      	mvns	r3, r3
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	4013      	ands	r3, r2
 800bace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bae4:	4a30      	ldr	r2, [pc, #192]	; (800bba8 <HAL_GPIO_Init+0x300>)
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800baea:	4b2f      	ldr	r3, [pc, #188]	; (800bba8 <HAL_GPIO_Init+0x300>)
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	43db      	mvns	r3, r3
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	4013      	ands	r3, r2
 800baf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bb0e:	4a26      	ldr	r2, [pc, #152]	; (800bba8 <HAL_GPIO_Init+0x300>)
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800bb14:	4b24      	ldr	r3, [pc, #144]	; (800bba8 <HAL_GPIO_Init+0x300>)
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	43db      	mvns	r3, r3
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	4013      	ands	r3, r2
 800bb22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bb38:	4a1b      	ldr	r2, [pc, #108]	; (800bba8 <HAL_GPIO_Init+0x300>)
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bb3e:	4b1a      	ldr	r3, [pc, #104]	; (800bba8 <HAL_GPIO_Init+0x300>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	43db      	mvns	r3, r3
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bb62:	4a11      	ldr	r2, [pc, #68]	; (800bba8 <HAL_GPIO_Init+0x300>)
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	fa22 f303 	lsr.w	r3, r2, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f47f ae9d 	bne.w	800b8b8 <HAL_GPIO_Init+0x10>
  }
}
 800bb7e:	bf00      	nop
 800bb80:	bf00      	nop
 800bb82:	371c      	adds	r7, #28
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	40021000 	.word	0x40021000
 800bb90:	40010000 	.word	0x40010000
 800bb94:	48000400 	.word	0x48000400
 800bb98:	48000800 	.word	0x48000800
 800bb9c:	48000c00 	.word	0x48000c00
 800bba0:	48001000 	.word	0x48001000
 800bba4:	48001400 	.word	0x48001400
 800bba8:	40010400 	.word	0x40010400

0800bbac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	691a      	ldr	r2, [r3, #16]
 800bbbc:	887b      	ldrh	r3, [r7, #2]
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	73fb      	strb	r3, [r7, #15]
 800bbc8:	e001      	b.n	800bbce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bbce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	807b      	strh	r3, [r7, #2]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bbec:	787b      	ldrb	r3, [r7, #1]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d003      	beq.n	800bbfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bbf2:	887a      	ldrh	r2, [r7, #2]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bbf8:	e002      	b.n	800bc00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bbfa:	887a      	ldrh	r2, [r7, #2]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d101      	bne.n	800bc1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e08d      	b.n	800bd3a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d106      	bne.n	800bc38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7fc fe88 	bl	8008948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2224      	movs	r2, #36	; 0x24
 800bc3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f022 0201 	bic.w	r2, r2, #1
 800bc4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685a      	ldr	r2, [r3, #4]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bc5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	689a      	ldr	r2, [r3, #8]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d107      	bne.n	800bc86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	689a      	ldr	r2, [r3, #8]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc82:	609a      	str	r2, [r3, #8]
 800bc84:	e006      	b.n	800bc94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	689a      	ldr	r2, [r3, #8]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bc92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d108      	bne.n	800bcae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcaa:	605a      	str	r2, [r3, #4]
 800bcac:	e007      	b.n	800bcbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	685a      	ldr	r2, [r3, #4]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	6812      	ldr	r2, [r2, #0]
 800bcc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68da      	ldr	r2, [r3, #12]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bce0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691a      	ldr	r2, [r3, #16]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	699b      	ldr	r3, [r3, #24]
 800bcf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	69d9      	ldr	r1, [r3, #28]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a1a      	ldr	r2, [r3, #32]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f042 0201 	orr.w	r2, r2, #1
 800bd1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2220      	movs	r2, #32
 800bd26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b083      	sub	sp, #12
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b20      	cmp	r3, #32
 800bd56:	d138      	bne.n	800bdca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d101      	bne.n	800bd66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bd62:	2302      	movs	r3, #2
 800bd64:	e032      	b.n	800bdcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2224      	movs	r2, #36	; 0x24
 800bd72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f022 0201 	bic.w	r2, r2, #1
 800bd84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bd94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6819      	ldr	r1, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	430a      	orrs	r2, r1
 800bda4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f042 0201 	orr.w	r2, r2, #1
 800bdb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2220      	movs	r2, #32
 800bdba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e000      	b.n	800bdcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bdca:	2302      	movs	r3, #2
  }
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b20      	cmp	r3, #32
 800bdec:	d139      	bne.n	800be62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d101      	bne.n	800bdfc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	e033      	b.n	800be64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2224      	movs	r2, #36	; 0x24
 800be08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f022 0201 	bic.w	r2, r2, #1
 800be1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800be2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	021b      	lsls	r3, r3, #8
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	4313      	orrs	r3, r2
 800be34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f042 0201 	orr.w	r2, r2, #1
 800be4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2220      	movs	r2, #32
 800be52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	e000      	b.n	800be64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800be62:	2302      	movs	r3, #2
  }
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e0c0      	b.n	800c004 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d106      	bne.n	800be9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f013 f8f8 	bl	801f08c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2203      	movs	r2, #3
 800bea0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f006 fea9 	bl	8012c00 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800beae:	2300      	movs	r3, #0
 800beb0:	73fb      	strb	r3, [r7, #15]
 800beb2:	e03e      	b.n	800bf32 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800beb4:	7bfa      	ldrb	r2, [r7, #15]
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	440b      	add	r3, r1
 800bec2:	3311      	adds	r3, #17
 800bec4:	2201      	movs	r2, #1
 800bec6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bec8:	7bfa      	ldrb	r2, [r7, #15]
 800beca:	6879      	ldr	r1, [r7, #4]
 800becc:	4613      	mov	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	00db      	lsls	r3, r3, #3
 800bed4:	440b      	add	r3, r1
 800bed6:	3310      	adds	r3, #16
 800bed8:	7bfa      	ldrb	r2, [r7, #15]
 800beda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bedc:	7bfa      	ldrb	r2, [r7, #15]
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	440b      	add	r3, r1
 800beea:	3313      	adds	r3, #19
 800beec:	2200      	movs	r2, #0
 800beee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bef0:	7bfa      	ldrb	r2, [r7, #15]
 800bef2:	6879      	ldr	r1, [r7, #4]
 800bef4:	4613      	mov	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	440b      	add	r3, r1
 800befe:	3320      	adds	r3, #32
 800bf00:	2200      	movs	r2, #0
 800bf02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bf04:	7bfa      	ldrb	r2, [r7, #15]
 800bf06:	6879      	ldr	r1, [r7, #4]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	00db      	lsls	r3, r3, #3
 800bf10:	440b      	add	r3, r1
 800bf12:	3324      	adds	r3, #36	; 0x24
 800bf14:	2200      	movs	r2, #0
 800bf16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	00db      	lsls	r3, r3, #3
 800bf26:	440b      	add	r3, r1
 800bf28:	2200      	movs	r2, #0
 800bf2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	73fb      	strb	r3, [r7, #15]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	791b      	ldrb	r3, [r3, #4]
 800bf36:	7bfa      	ldrb	r2, [r7, #15]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d3bb      	bcc.n	800beb4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73fb      	strb	r3, [r7, #15]
 800bf40:	e044      	b.n	800bfcc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bf42:	7bfa      	ldrb	r2, [r7, #15]
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	00db      	lsls	r3, r3, #3
 800bf4e:	440b      	add	r3, r1
 800bf50:	f203 1351 	addw	r3, r3, #337	; 0x151
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bf58:	7bfa      	ldrb	r2, [r7, #15]
 800bf5a:	6879      	ldr	r1, [r7, #4]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	440b      	add	r3, r1
 800bf66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf6a:	7bfa      	ldrb	r2, [r7, #15]
 800bf6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bf6e:	7bfa      	ldrb	r2, [r7, #15]
 800bf70:	6879      	ldr	r1, [r7, #4]
 800bf72:	4613      	mov	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4413      	add	r3, r2
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	440b      	add	r3, r1
 800bf7c:	f203 1353 	addw	r3, r3, #339	; 0x153
 800bf80:	2200      	movs	r2, #0
 800bf82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bf84:	7bfa      	ldrb	r2, [r7, #15]
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	4613      	mov	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4413      	add	r3, r2
 800bf8e:	00db      	lsls	r3, r3, #3
 800bf90:	440b      	add	r3, r1
 800bf92:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800bf96:	2200      	movs	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bf9a:	7bfa      	ldrb	r2, [r7, #15]
 800bf9c:	6879      	ldr	r1, [r7, #4]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	440b      	add	r3, r1
 800bfa8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfac:	2200      	movs	r2, #0
 800bfae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bfb0:	7bfa      	ldrb	r2, [r7, #15]
 800bfb2:	6879      	ldr	r1, [r7, #4]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4413      	add	r3, r2
 800bfba:	00db      	lsls	r3, r3, #3
 800bfbc:	440b      	add	r3, r1
 800bfbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	73fb      	strb	r3, [r7, #15]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	791b      	ldrb	r3, [r3, #4]
 800bfd0:	7bfa      	ldrb	r2, [r7, #15]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d3b5      	bcc.n	800bf42 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bfe2:	f006 fe28 	bl	8012c36 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	7a9b      	ldrb	r3, [r3, #10]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d102      	bne.n	800c002 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 fc41 	bl	800d884 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d101      	bne.n	800c022 <HAL_PCD_Start+0x16>
 800c01e:	2302      	movs	r3, #2
 800c020:	e012      	b.n	800c048 <HAL_PCD_Start+0x3c>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4618      	mov	r0, r3
 800c030:	f006 fdcf 	bl	8012bd2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4618      	mov	r0, r3
 800c03a:	f009 f890 	bl	801515e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f009 f895 	bl	801518c <USB_ReadInterrupts>
 800c062:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d003      	beq.n	800c076 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 fb04 	bl	800c67c <PCD_EP_ISR_Handler>

    return;
 800c074:	e110      	b.n	800c298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d013      	beq.n	800c0a8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c088:	b29a      	uxth	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c092:	b292      	uxth	r2, r2
 800c094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f013 f890 	bl	801f1be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800c09e:	2100      	movs	r1, #0
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f8fc 	bl	800c29e <HAL_PCD_SetAddress>

    return;
 800c0a6:	e0f7      	b.n	800c298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00c      	beq.n	800c0cc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c0c4:	b292      	uxth	r2, r2
 800c0c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c0ca:	e0e5      	b.n	800c298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00c      	beq.n	800c0f0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0e8:	b292      	uxth	r2, r2
 800c0ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c0ee:	e0d3      	b.n	800c298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d034      	beq.n	800c164 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c102:	b29a      	uxth	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f022 0204 	bic.w	r2, r2, #4
 800c10c:	b292      	uxth	r2, r2
 800c10e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f022 0208 	bic.w	r2, r2, #8
 800c124:	b292      	uxth	r2, r2
 800c126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800c130:	2b01      	cmp	r3, #1
 800c132:	d107      	bne.n	800c144 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c13c:	2100      	movs	r1, #0
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f013 fa30 	bl	801f5a4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f013 f873 	bl	801f230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c152:	b29a      	uxth	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c15c:	b292      	uxth	r2, r2
 800c15e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c162:	e099      	b.n	800c298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d027      	beq.n	800c1be <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c176:	b29a      	uxth	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f042 0208 	orr.w	r2, r2, #8
 800c180:	b292      	uxth	r2, r2
 800c182:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c18e:	b29a      	uxth	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c198:	b292      	uxth	r2, r2
 800c19a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f042 0204 	orr.w	r2, r2, #4
 800c1b0:	b292      	uxth	r2, r2
 800c1b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f013 f820 	bl	801f1fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c1bc:	e06c      	b.n	800c298 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d040      	beq.n	800c24a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1da:	b292      	uxth	r2, r2
 800c1dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d12b      	bne.n	800c242 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f042 0204 	orr.w	r2, r2, #4
 800c1fc:	b292      	uxth	r2, r2
 800c1fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f042 0208 	orr.w	r2, r2, #8
 800c214:	b292      	uxth	r2, r2
 800c216:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2201      	movs	r2, #1
 800c21e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	089b      	lsrs	r3, r3, #2
 800c22e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c238:	2101      	movs	r1, #1
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f013 f9b2 	bl	801f5a4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800c240:	e02a      	b.n	800c298 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f012 ffda 	bl	801f1fc <HAL_PCD_SuspendCallback>
    return;
 800c248:	e026      	b.n	800c298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00f      	beq.n	800c274 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c266:	b292      	uxth	r2, r2
 800c268:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f012 ff98 	bl	801f1a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c272:	e011      	b.n	800c298 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00c      	beq.n	800c298 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c286:	b29a      	uxth	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c290:	b292      	uxth	r2, r2
 800c292:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c296:	bf00      	nop
  }
}
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b082      	sub	sp, #8
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d101      	bne.n	800c2b8 <HAL_PCD_SetAddress+0x1a>
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	e012      	b.n	800c2de <HAL_PCD_SetAddress+0x40>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	78fa      	ldrb	r2, [r7, #3]
 800c2c4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	78fa      	ldrb	r2, [r7, #3]
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f008 ff31 	bl	8015136 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b084      	sub	sp, #16
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	70fb      	strb	r3, [r7, #3]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	803b      	strh	r3, [r7, #0]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	da0e      	bge.n	800c32a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c30c:	78fb      	ldrb	r3, [r7, #3]
 800c30e:	f003 0207 	and.w	r2, r3, #7
 800c312:	4613      	mov	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4413      	add	r3, r2
 800c318:	00db      	lsls	r3, r3, #3
 800c31a:	3310      	adds	r3, #16
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	4413      	add	r3, r2
 800c320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2201      	movs	r2, #1
 800c326:	705a      	strb	r2, [r3, #1]
 800c328:	e00e      	b.n	800c348 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c32a:	78fb      	ldrb	r3, [r7, #3]
 800c32c:	f003 0207 	and.w	r2, r3, #7
 800c330:	4613      	mov	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	00db      	lsls	r3, r3, #3
 800c338:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	4413      	add	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c348:	78fb      	ldrb	r3, [r7, #3]
 800c34a:	f003 0307 	and.w	r3, r3, #7
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c354:	883a      	ldrh	r2, [r7, #0]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	78ba      	ldrb	r2, [r7, #2]
 800c35e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c360:	78bb      	ldrb	r3, [r7, #2]
 800c362:	2b02      	cmp	r3, #2
 800c364:	d102      	bne.n	800c36c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c372:	2b01      	cmp	r3, #1
 800c374:	d101      	bne.n	800c37a <HAL_PCD_EP_Open+0x94>
 800c376:	2302      	movs	r3, #2
 800c378:	e00e      	b.n	800c398 <HAL_PCD_EP_Open+0xb2>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2201      	movs	r2, #1
 800c37e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68f9      	ldr	r1, [r7, #12]
 800c388:	4618      	mov	r0, r3
 800c38a:	f006 fc73 	bl	8012c74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800c396:	7afb      	ldrb	r3, [r7, #11]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c3ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	da0e      	bge.n	800c3d2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	f003 0207 	and.w	r2, r3, #7
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	00db      	lsls	r3, r3, #3
 800c3c2:	3310      	adds	r3, #16
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	705a      	strb	r2, [r3, #1]
 800c3d0:	e00e      	b.n	800c3f0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c3d2:	78fb      	ldrb	r3, [r7, #3]
 800c3d4:	f003 0207 	and.w	r2, r3, #7
 800c3d8:	4613      	mov	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	b2da      	uxtb	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c402:	2b01      	cmp	r3, #1
 800c404:	d101      	bne.n	800c40a <HAL_PCD_EP_Close+0x6a>
 800c406:	2302      	movs	r3, #2
 800c408:	e00e      	b.n	800c428 <HAL_PCD_EP_Close+0x88>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68f9      	ldr	r1, [r7, #12]
 800c418:	4618      	mov	r0, r3
 800c41a:	f006 ffef 	bl	80133fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	607a      	str	r2, [r7, #4]
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	460b      	mov	r3, r1
 800c43e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	f003 0207 	and.w	r2, r3, #7
 800c446:	4613      	mov	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	4413      	add	r3, r2
 800c456:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2200      	movs	r2, #0
 800c468:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	2200      	movs	r2, #0
 800c46e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c470:	7afb      	ldrb	r3, [r7, #11]
 800c472:	f003 0307 	and.w	r3, r3, #7
 800c476:	b2da      	uxtb	r2, r3
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6979      	ldr	r1, [r7, #20]
 800c482:	4618      	mov	r0, r3
 800c484:	f007 f9a7 	bl	80137d6 <USB_EPStartXfer>

  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3718      	adds	r7, #24
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c492:	b480      	push	{r7}
 800c494:	b083      	sub	sp, #12
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	460b      	mov	r3, r1
 800c49c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c49e:	78fb      	ldrb	r3, [r7, #3]
 800c4a0:	f003 0207 	and.w	r2, r3, #7
 800c4a4:	6879      	ldr	r1, [r7, #4]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4413      	add	r3, r2
 800c4ac:	00db      	lsls	r3, r3, #3
 800c4ae:	440b      	add	r3, r1
 800c4b0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c4b4:	681b      	ldr	r3, [r3, #0]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr

0800c4c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b086      	sub	sp, #24
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	60f8      	str	r0, [r7, #12]
 800c4ca:	607a      	str	r2, [r7, #4]
 800c4cc:	603b      	str	r3, [r7, #0]
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4d2:	7afb      	ldrb	r3, [r7, #11]
 800c4d4:	f003 0207 	and.w	r2, r3, #7
 800c4d8:	4613      	mov	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4413      	add	r3, r2
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	3310      	adds	r3, #16
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	683a      	ldr	r2, [r7, #0]
 800c500:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2200      	movs	r2, #0
 800c506:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2201      	movs	r2, #1
 800c50c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c50e:	7afb      	ldrb	r3, [r7, #11]
 800c510:	f003 0307 	and.w	r3, r3, #7
 800c514:	b2da      	uxtb	r2, r3
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	6979      	ldr	r1, [r7, #20]
 800c520:	4618      	mov	r0, r3
 800c522:	f007 f958 	bl	80137d6 <USB_EPStartXfer>

  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3718      	adds	r7, #24
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	460b      	mov	r3, r1
 800c53a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c53c:	78fb      	ldrb	r3, [r7, #3]
 800c53e:	f003 0307 	and.w	r3, r3, #7
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	7912      	ldrb	r2, [r2, #4]
 800c546:	4293      	cmp	r3, r2
 800c548:	d901      	bls.n	800c54e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e03e      	b.n	800c5cc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c54e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c552:	2b00      	cmp	r3, #0
 800c554:	da0e      	bge.n	800c574 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c556:	78fb      	ldrb	r3, [r7, #3]
 800c558:	f003 0207 	and.w	r2, r3, #7
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	3310      	adds	r3, #16
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	4413      	add	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2201      	movs	r2, #1
 800c570:	705a      	strb	r2, [r3, #1]
 800c572:	e00c      	b.n	800c58e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c574:	78fa      	ldrb	r2, [r7, #3]
 800c576:	4613      	mov	r3, r2
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	4413      	add	r3, r2
 800c57c:	00db      	lsls	r3, r3, #3
 800c57e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	4413      	add	r3, r2
 800c586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2200      	movs	r2, #0
 800c58c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2201      	movs	r2, #1
 800c592:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c594:	78fb      	ldrb	r3, [r7, #3]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d101      	bne.n	800c5ae <HAL_PCD_EP_SetStall+0x7e>
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	e00e      	b.n	800c5cc <HAL_PCD_EP_SetStall+0x9c>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	68f9      	ldr	r1, [r7, #12]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f008 fcbb 	bl	8014f38 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c5e0:	78fb      	ldrb	r3, [r7, #3]
 800c5e2:	f003 030f 	and.w	r3, r3, #15
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	7912      	ldrb	r2, [r2, #4]
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d901      	bls.n	800c5f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e040      	b.n	800c674 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c5f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	da0e      	bge.n	800c618 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c5fa:	78fb      	ldrb	r3, [r7, #3]
 800c5fc:	f003 0207 	and.w	r2, r3, #7
 800c600:	4613      	mov	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	3310      	adds	r3, #16
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	4413      	add	r3, r2
 800c60e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2201      	movs	r2, #1
 800c614:	705a      	strb	r2, [r3, #1]
 800c616:	e00e      	b.n	800c636 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c618:	78fb      	ldrb	r3, [r7, #3]
 800c61a:	f003 0207 	and.w	r2, r3, #7
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	4413      	add	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c63c:	78fb      	ldrb	r3, [r7, #3]
 800c63e:	f003 0307 	and.w	r3, r3, #7
 800c642:	b2da      	uxtb	r2, r3
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d101      	bne.n	800c656 <HAL_PCD_EP_ClrStall+0x82>
 800c652:	2302      	movs	r3, #2
 800c654:	e00e      	b.n	800c674 <HAL_PCD_EP_ClrStall+0xa0>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68f9      	ldr	r1, [r7, #12]
 800c664:	4618      	mov	r0, r3
 800c666:	f008 fcb8 	bl	8014fda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b096      	sub	sp, #88	; 0x58
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c684:	e3ae      	b.n	800cde4 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c68e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800c692:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c696:	b2db      	uxtb	r3, r3
 800c698:	f003 030f 	and.w	r3, r3, #15
 800c69c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800c6a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f040 8170 	bne.w	800c98a <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800c6aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c6ae:	f003 0310 	and.w	r3, r3, #16
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d14d      	bne.n	800c752 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	881b      	ldrh	r3, [r3, #0]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c6:	81fb      	strh	r3, [r7, #14]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	89fb      	ldrh	r3, [r7, #14]
 800c6ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3310      	adds	r3, #16
 800c6de:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	4413      	add	r3, r2
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	6812      	ldr	r2, [r2, #0]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c706:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800c708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c70a:	695a      	ldr	r2, [r3, #20]
 800c70c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c70e:	69db      	ldr	r3, [r3, #28]
 800c710:	441a      	add	r2, r3
 800c712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c714:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800c716:	2100      	movs	r1, #0
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f012 fd28 	bl	801f16e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	7b1b      	ldrb	r3, [r3, #12]
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	f000 835d 	beq.w	800cde4 <PCD_EP_ISR_Handler+0x768>
 800c72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f040 8358 	bne.w	800cde4 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	7b1b      	ldrb	r3, [r3, #12]
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	b292      	uxth	r2, r2
 800c746:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	731a      	strb	r2, [r3, #12]
 800c750:	e348      	b.n	800cde4 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c758:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800c764:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d032      	beq.n	800c7d6 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c778:	b29b      	uxth	r3, r3
 800c77a:	461a      	mov	r2, r3
 800c77c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	4413      	add	r3, r2
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	6812      	ldr	r2, [r2, #0]
 800c788:	4413      	add	r3, r2
 800c78a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c796:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6818      	ldr	r0, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800c7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800c7a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	f008 fd40 	bl	8015230 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c7bc:	4013      	ands	r3, r2
 800c7be:	823b      	strh	r3, [r7, #16]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	8a3a      	ldrh	r2, [r7, #16]
 800c7c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7ca:	b292      	uxth	r2, r2
 800c7cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f012 fca0 	bl	801f114 <HAL_PCD_SetupStageCallback>
 800c7d4:	e306      	b.n	800cde4 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c7d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f280 8302 	bge.w	800cde4 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	83fb      	strh	r3, [r7, #30]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	8bfa      	ldrh	r2, [r7, #30]
 800c7f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7fa:	b292      	uxth	r2, r2
 800c7fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c806:	b29b      	uxth	r3, r3
 800c808:	461a      	mov	r2, r3
 800c80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	00db      	lsls	r3, r3, #3
 800c810:	4413      	add	r3, r2
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	6812      	ldr	r2, [r2, #0]
 800c816:	4413      	add	r3, r2
 800c818:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c81c:	881b      	ldrh	r3, [r3, #0]
 800c81e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c824:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800c826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d019      	beq.n	800c862 <PCD_EP_ISR_Handler+0x1e6>
 800c82e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d015      	beq.n	800c862 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6818      	ldr	r0, [r3, #0]
 800c83a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c83c:	6959      	ldr	r1, [r3, #20]
 800c83e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c840:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800c842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c844:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c846:	b29b      	uxth	r3, r3
 800c848:	f008 fcf2 	bl	8015230 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800c84c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c84e:	695a      	ldr	r2, [r3, #20]
 800c850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	441a      	add	r2, r3
 800c856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c858:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800c85a:	2100      	movs	r1, #0
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f012 fc6b 	bl	801f138 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	881b      	ldrh	r3, [r3, #0]
 800c868:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800c86c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c874:	2b00      	cmp	r3, #0
 800c876:	f040 82b5 	bne.w	800cde4 <PCD_EP_ISR_Handler+0x768>
 800c87a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c87e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c882:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c886:	f000 82ad 	beq.w	800cde4 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	61bb      	str	r3, [r7, #24]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c898:	b29b      	uxth	r3, r3
 800c89a:	461a      	mov	r2, r3
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	4413      	add	r3, r2
 800c8a0:	61bb      	str	r3, [r7, #24]
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8a8:	617b      	str	r3, [r7, #20]
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	801a      	strh	r2, [r3, #0]
 800c8ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	2b3e      	cmp	r3, #62	; 0x3e
 800c8c0:	d91d      	bls.n	800c8fe <PCD_EP_ISR_Handler+0x282>
 800c8c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	095b      	lsrs	r3, r3, #5
 800c8c8:	647b      	str	r3, [r7, #68]	; 0x44
 800c8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	f003 031f 	and.w	r3, r3, #31
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d102      	bne.n	800c8dc <PCD_EP_ISR_Handler+0x260>
 800c8d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	647b      	str	r3, [r7, #68]	; 0x44
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	029b      	lsls	r3, r3, #10
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	801a      	strh	r2, [r3, #0]
 800c8fc:	e026      	b.n	800c94c <PCD_EP_ISR_Handler+0x2d0>
 800c8fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10a      	bne.n	800c91c <PCD_EP_ISR_Handler+0x2a0>
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c914:	b29a      	uxth	r2, r3
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	801a      	strh	r2, [r3, #0]
 800c91a:	e017      	b.n	800c94c <PCD_EP_ISR_Handler+0x2d0>
 800c91c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	085b      	lsrs	r3, r3, #1
 800c922:	647b      	str	r3, [r7, #68]	; 0x44
 800c924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <PCD_EP_ISR_Handler+0x2ba>
 800c930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c932:	3301      	adds	r3, #1
 800c934:	647b      	str	r3, [r7, #68]	; 0x44
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93e:	b29b      	uxth	r3, r3
 800c940:	029b      	lsls	r3, r3, #10
 800c942:	b29b      	uxth	r3, r3
 800c944:	4313      	orrs	r3, r2
 800c946:	b29a      	uxth	r2, r3
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	881b      	ldrh	r3, [r3, #0]
 800c952:	b29b      	uxth	r3, r3
 800c954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c95c:	827b      	strh	r3, [r7, #18]
 800c95e:	8a7b      	ldrh	r3, [r7, #18]
 800c960:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c964:	827b      	strh	r3, [r7, #18]
 800c966:	8a7b      	ldrh	r3, [r7, #18]
 800c968:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c96c:	827b      	strh	r3, [r7, #18]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	8a7b      	ldrh	r3, [r7, #18]
 800c974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c97c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c984:	b29b      	uxth	r3, r3
 800c986:	8013      	strh	r3, [r2, #0]
 800c988:	e22c      	b.n	800cde4 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c99e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f280 80f6 	bge.w	800cb94 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	4413      	add	r3, r2
 800c9b6:	881b      	ldrh	r3, [r3, #0]
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c9be:	4013      	ands	r3, r2
 800c9c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800c9d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c9da:	b292      	uxth	r2, r2
 800c9dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800c9de:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	4413      	add	r3, r2
 800c9e8:	00db      	lsls	r3, r3, #3
 800c9ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800c9f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9f6:	7b1b      	ldrb	r3, [r3, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d123      	bne.n	800ca44 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	461a      	mov	r2, r3
 800ca08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	00db      	lsls	r3, r3, #3
 800ca0e:	4413      	add	r3, r2
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	6812      	ldr	r2, [r2, #0]
 800ca14:	4413      	add	r3, r2
 800ca16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca1a:	881b      	ldrh	r3, [r3, #0]
 800ca1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800ca24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f000 808e 	beq.w	800cb4a <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6818      	ldr	r0, [r3, #0]
 800ca32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca34:	6959      	ldr	r1, [r3, #20]
 800ca36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca38:	88da      	ldrh	r2, [r3, #6]
 800ca3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ca3e:	f008 fbf7 	bl	8015230 <USB_ReadPMA>
 800ca42:	e082      	b.n	800cb4a <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ca44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca46:	78db      	ldrb	r3, [r3, #3]
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	d10a      	bne.n	800ca62 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ca4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ca50:	461a      	mov	r2, r3
 800ca52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f9d3 	bl	800ce00 <HAL_PCD_EP_DB_Receive>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800ca60:	e073      	b.n	800cb4a <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	881b      	ldrh	r3, [r3, #0]
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca7c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	461a      	mov	r2, r3
 800ca86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	441a      	add	r2, r3
 800ca8e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ca92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d022      	beq.n	800cb06 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cac8:	b29b      	uxth	r3, r3
 800caca:	461a      	mov	r2, r3
 800cacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	4413      	add	r3, r2
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	6812      	ldr	r2, [r2, #0]
 800cad8:	4413      	add	r3, r2
 800cada:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cae4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800cae8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800caec:	2b00      	cmp	r3, #0
 800caee:	d02c      	beq.n	800cb4a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6818      	ldr	r0, [r3, #0]
 800caf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caf6:	6959      	ldr	r1, [r3, #20]
 800caf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cafa:	891a      	ldrh	r2, [r3, #8]
 800cafc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cb00:	f008 fb96 	bl	8015230 <USB_ReadPMA>
 800cb04:	e021      	b.n	800cb4a <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	461a      	mov	r2, r3
 800cb12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	4413      	add	r3, r2
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	6812      	ldr	r2, [r2, #0]
 800cb1e:	4413      	add	r3, r2
 800cb20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb24:	881b      	ldrh	r3, [r3, #0]
 800cb26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800cb2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d009      	beq.n	800cb4a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6818      	ldr	r0, [r3, #0]
 800cb3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb3c:	6959      	ldr	r1, [r3, #20]
 800cb3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb40:	895a      	ldrh	r2, [r3, #10]
 800cb42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cb46:	f008 fb73 	bl	8015230 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800cb4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb4c:	69da      	ldr	r2, [r3, #28]
 800cb4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cb52:	441a      	add	r2, r3
 800cb54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800cb58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb5a:	695a      	ldr	r2, [r3, #20]
 800cb5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cb60:	441a      	add	r2, r3
 800cb62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb64:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800cb66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb68:	699b      	ldr	r3, [r3, #24]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d005      	beq.n	800cb7a <PCD_EP_ISR_Handler+0x4fe>
 800cb6e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800cb72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d206      	bcs.n	800cb88 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800cb7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f012 fad9 	bl	801f138 <HAL_PCD_DataOutStageCallback>
 800cb86:	e005      	b.n	800cb94 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f006 fe21 	bl	80137d6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800cb94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cb98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 8121 	beq.w	800cde4 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800cba2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800cba6:	4613      	mov	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	4413      	add	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	3310      	adds	r3, #16
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	461a      	mov	r2, r3
 800cbbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	881b      	ldrh	r3, [r3, #0]
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800cbcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	441a      	add	r2, r3
 800cbe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cbe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800cbf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf4:	78db      	ldrb	r3, [r3, #3]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	f040 80a2 	bne.w	800cd40 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800cbfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbfe:	2200      	movs	r2, #0
 800cc00:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800cc02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc04:	7b1b      	ldrb	r3, [r3, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f000 8093 	beq.w	800cd32 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cc0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d046      	beq.n	800cca6 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cc18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc1a:	785b      	ldrb	r3, [r3, #1]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d126      	bne.n	800cc6e <PCD_EP_ISR_Handler+0x5f2>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	627b      	str	r3, [r7, #36]	; 0x24
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	461a      	mov	r2, r3
 800cc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc34:	4413      	add	r3, r2
 800cc36:	627b      	str	r3, [r7, #36]	; 0x24
 800cc38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	00da      	lsls	r2, r3, #3
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	4413      	add	r3, r2
 800cc42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc46:	623b      	str	r3, [r7, #32]
 800cc48:	6a3b      	ldr	r3, [r7, #32]
 800cc4a:	881b      	ldrh	r3, [r3, #0]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	801a      	strh	r2, [r3, #0]
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	881b      	ldrh	r3, [r3, #0]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	801a      	strh	r2, [r3, #0]
 800cc6c:	e061      	b.n	800cd32 <PCD_EP_ISR_Handler+0x6b6>
 800cc6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc70:	785b      	ldrb	r3, [r3, #1]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d15d      	bne.n	800cd32 <PCD_EP_ISR_Handler+0x6b6>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	461a      	mov	r2, r3
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	4413      	add	r3, r2
 800cc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	00da      	lsls	r2, r3, #3
 800cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc96:	4413      	add	r3, r2
 800cc98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	2200      	movs	r2, #0
 800cca2:	801a      	strh	r2, [r3, #0]
 800cca4:	e045      	b.n	800cd32 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccae:	785b      	ldrb	r3, [r3, #1]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d126      	bne.n	800cd02 <PCD_EP_ISR_Handler+0x686>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	637b      	str	r3, [r7, #52]	; 0x34
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc8:	4413      	add	r3, r2
 800ccca:	637b      	str	r3, [r7, #52]	; 0x34
 800cccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	00da      	lsls	r2, r3, #3
 800ccd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd4:	4413      	add	r3, r2
 800ccd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ccda:	633b      	str	r3, [r7, #48]	; 0x30
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	881b      	ldrh	r3, [r3, #0]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccea:	801a      	strh	r2, [r3, #0]
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	801a      	strh	r2, [r3, #0]
 800cd00:	e017      	b.n	800cd32 <PCD_EP_ISR_Handler+0x6b6>
 800cd02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd04:	785b      	ldrb	r3, [r3, #1]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d113      	bne.n	800cd32 <PCD_EP_ISR_Handler+0x6b6>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	461a      	mov	r2, r3
 800cd16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd18:	4413      	add	r3, r2
 800cd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	00da      	lsls	r2, r3, #3
 800cd22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd24:	4413      	add	r3, r2
 800cd26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cd2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	2200      	movs	r2, #0
 800cd30:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cd32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f012 fa18 	bl	801f16e <HAL_PCD_DataInStageCallback>
 800cd3e:	e051      	b.n	800cde4 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800cd40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cd44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d144      	bne.n	800cdd6 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	461a      	mov	r2, r3
 800cd58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	00db      	lsls	r3, r3, #3
 800cd5e:	4413      	add	r3, r2
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	6812      	ldr	r2, [r2, #0]
 800cd64:	4413      	add	r3, r2
 800cd66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cd6a:	881b      	ldrh	r3, [r3, #0]
 800cd6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800cd74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd76:	699a      	ldr	r2, [r3, #24]
 800cd78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d907      	bls.n	800cd90 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800cd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd82:	699a      	ldr	r2, [r3, #24]
 800cd84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cd88:	1ad2      	subs	r2, r2, r3
 800cd8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd8c:	619a      	str	r2, [r3, #24]
 800cd8e:	e002      	b.n	800cd96 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800cd90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd92:	2200      	movs	r2, #0
 800cd94:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800cd96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d106      	bne.n	800cdac <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cd9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f012 f9e2 	bl	801f16e <HAL_PCD_DataInStageCallback>
 800cdaa:	e01b      	b.n	800cde4 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800cdac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdae:	695a      	ldr	r2, [r3, #20]
 800cdb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cdb4:	441a      	add	r2, r3
 800cdb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdb8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800cdba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdbc:	69da      	ldr	r2, [r3, #28]
 800cdbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cdc2:	441a      	add	r2, r3
 800cdc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f006 fd01 	bl	80137d6 <USB_EPStartXfer>
 800cdd4:	e006      	b.n	800cde4 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800cdd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cdda:	461a      	mov	r2, r3
 800cddc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f917 	bl	800d012 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	b21b      	sxth	r3, r3
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f6ff ac48 	blt.w	800c686 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3758      	adds	r7, #88	; 0x58
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b088      	sub	sp, #32
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ce0e:	88fb      	ldrh	r3, [r7, #6]
 800ce10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d07c      	beq.n	800cf12 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	461a      	mov	r2, r3
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	4413      	add	r3, r2
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	6812      	ldr	r2, [r2, #0]
 800ce30:	4413      	add	r3, r2
 800ce32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	699a      	ldr	r2, [r3, #24]
 800ce42:	8b7b      	ldrh	r3, [r7, #26]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d306      	bcc.n	800ce56 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	699a      	ldr	r2, [r3, #24]
 800ce4c:	8b7b      	ldrh	r3, [r7, #26]
 800ce4e:	1ad2      	subs	r2, r2, r3
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	619a      	str	r2, [r3, #24]
 800ce54:	e002      	b.n	800ce5c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	699b      	ldr	r3, [r3, #24]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d123      	bne.n	800ceac <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce7e:	833b      	strh	r3, [r7, #24]
 800ce80:	8b3b      	ldrh	r3, [r7, #24]
 800ce82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ce86:	833b      	strh	r3, [r7, #24]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	441a      	add	r2, r3
 800ce96:	8b3b      	ldrh	r3, [r7, #24]
 800ce98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ceac:	88fb      	ldrh	r3, [r7, #6]
 800ceae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d01f      	beq.n	800cef6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ced0:	82fb      	strh	r3, [r7, #22]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	441a      	add	r2, r3
 800cee0:	8afb      	ldrh	r3, [r7, #22]
 800cee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ceea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ceee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800cef6:	8b7b      	ldrh	r3, [r7, #26]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 8085 	beq.w	800d008 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6818      	ldr	r0, [r3, #0]
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	6959      	ldr	r1, [r3, #20]
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	891a      	ldrh	r2, [r3, #8]
 800cf0a:	8b7b      	ldrh	r3, [r7, #26]
 800cf0c:	f008 f990 	bl	8015230 <USB_ReadPMA>
 800cf10:	e07a      	b.n	800d008 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	00db      	lsls	r3, r3, #3
 800cf24:	4413      	add	r3, r2
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	6812      	ldr	r2, [r2, #0]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cf30:	881b      	ldrh	r3, [r3, #0]
 800cf32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	699a      	ldr	r2, [r3, #24]
 800cf3c:	8b7b      	ldrh	r3, [r7, #26]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d306      	bcc.n	800cf50 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	699a      	ldr	r2, [r3, #24]
 800cf46:	8b7b      	ldrh	r3, [r7, #26]
 800cf48:	1ad2      	subs	r2, r2, r3
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	619a      	str	r2, [r3, #24]
 800cf4e:	e002      	b.n	800cf56 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	2200      	movs	r2, #0
 800cf54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d123      	bne.n	800cfa6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf78:	83fb      	strh	r3, [r7, #30]
 800cf7a:	8bfb      	ldrh	r3, [r7, #30]
 800cf7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cf80:	83fb      	strh	r3, [r7, #30]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	441a      	add	r2, r3
 800cf90:	8bfb      	ldrh	r3, [r7, #30]
 800cf92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800cfa6:	88fb      	ldrh	r3, [r7, #6]
 800cfa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d11f      	bne.n	800cff0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	4413      	add	r3, r2
 800cfbe:	881b      	ldrh	r3, [r3, #0]
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfca:	83bb      	strh	r3, [r7, #28]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	441a      	add	r2, r3
 800cfda:	8bbb      	ldrh	r3, [r7, #28]
 800cfdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800cff0:	8b7b      	ldrh	r3, [r7, #26]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d008      	beq.n	800d008 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	6959      	ldr	r1, [r3, #20]
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	895a      	ldrh	r2, [r3, #10]
 800d002:	8b7b      	ldrh	r3, [r7, #26]
 800d004:	f008 f914 	bl	8015230 <USB_ReadPMA>
    }
  }

  return count;
 800d008:	8b7b      	ldrh	r3, [r7, #26]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3720      	adds	r7, #32
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b0a4      	sub	sp, #144	; 0x90
 800d016:	af00      	add	r7, sp, #0
 800d018:	60f8      	str	r0, [r7, #12]
 800d01a:	60b9      	str	r1, [r7, #8]
 800d01c:	4613      	mov	r3, r2
 800d01e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d020:	88fb      	ldrh	r3, [r7, #6]
 800d022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 81db 	beq.w	800d3e2 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d034:	b29b      	uxth	r3, r3
 800d036:	461a      	mov	r2, r3
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	00db      	lsls	r3, r3, #3
 800d03e:	4413      	add	r3, r2
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	6812      	ldr	r2, [r2, #0]
 800d044:	4413      	add	r3, r2
 800d046:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d04a:	881b      	ldrh	r3, [r3, #0]
 800d04c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d050:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	699a      	ldr	r2, [r3, #24]
 800d058:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d907      	bls.n	800d070 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	699a      	ldr	r2, [r3, #24]
 800d064:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d068:	1ad2      	subs	r2, r2, r3
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	619a      	str	r2, [r3, #24]
 800d06e:	e002      	b.n	800d076 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	2200      	movs	r2, #0
 800d074:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	699b      	ldr	r3, [r3, #24]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f040 80b9 	bne.w	800d1f2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	785b      	ldrb	r3, [r3, #1]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d126      	bne.n	800d0d6 <HAL_PCD_EP_DB_Transmit+0xc4>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d096:	b29b      	uxth	r3, r3
 800d098:	461a      	mov	r2, r3
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	4413      	add	r3, r2
 800d09e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	00da      	lsls	r2, r3, #3
 800d0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a8:	4413      	add	r3, r2
 800d0aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d0ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	881b      	ldrh	r3, [r3, #0]
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	801a      	strh	r2, [r3, #0]
 800d0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	801a      	strh	r2, [r3, #0]
 800d0d4:	e01a      	b.n	800d10c <HAL_PCD_EP_DB_Transmit+0xfa>
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	785b      	ldrb	r3, [r3, #1]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d116      	bne.n	800d10c <HAL_PCD_EP_DB_Transmit+0xfa>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f2:	4413      	add	r3, r2
 800d0f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	00da      	lsls	r2, r3, #3
 800d0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fe:	4413      	add	r3, r2
 800d100:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d104:	633b      	str	r3, [r7, #48]	; 0x30
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	2200      	movs	r2, #0
 800d10a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	627b      	str	r3, [r7, #36]	; 0x24
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	785b      	ldrb	r3, [r3, #1]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d126      	bne.n	800d168 <HAL_PCD_EP_DB_Transmit+0x156>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	61fb      	str	r3, [r7, #28]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d128:	b29b      	uxth	r3, r3
 800d12a:	461a      	mov	r2, r3
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	4413      	add	r3, r2
 800d130:	61fb      	str	r3, [r7, #28]
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	00da      	lsls	r2, r3, #3
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	4413      	add	r3, r2
 800d13c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d140:	61bb      	str	r3, [r7, #24]
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	881b      	ldrh	r3, [r3, #0]
 800d146:	b29b      	uxth	r3, r3
 800d148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	801a      	strh	r2, [r3, #0]
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	881b      	ldrh	r3, [r3, #0]
 800d156:	b29b      	uxth	r3, r3
 800d158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d15c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d160:	b29a      	uxth	r2, r3
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	801a      	strh	r2, [r3, #0]
 800d166:	e017      	b.n	800d198 <HAL_PCD_EP_DB_Transmit+0x186>
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	785b      	ldrb	r3, [r3, #1]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d113      	bne.n	800d198 <HAL_PCD_EP_DB_Transmit+0x186>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d178:	b29b      	uxth	r3, r3
 800d17a:	461a      	mov	r2, r3
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17e:	4413      	add	r3, r2
 800d180:	627b      	str	r3, [r7, #36]	; 0x24
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	00da      	lsls	r2, r3, #3
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	4413      	add	r3, r2
 800d18c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d190:	623b      	str	r3, [r7, #32]
 800d192:	6a3b      	ldr	r3, [r7, #32]
 800d194:	2200      	movs	r2, #0
 800d196:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	4619      	mov	r1, r3
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f011 ffe5 	bl	801f16e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d1a4:	88fb      	ldrh	r3, [r7, #6]
 800d1a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f000 82fa 	beq.w	800d7a4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1ca:	82fb      	strh	r3, [r7, #22]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	441a      	add	r2, r3
 800d1da:	8afb      	ldrh	r3, [r7, #22]
 800d1dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	8013      	strh	r3, [r2, #0]
 800d1f0:	e2d8      	b.n	800d7a4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d1f2:	88fb      	ldrh	r3, [r7, #6]
 800d1f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d021      	beq.n	800d240 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	461a      	mov	r2, r3
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	4413      	add	r3, r2
 800d20a:	881b      	ldrh	r3, [r3, #0]
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d216:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	441a      	add	r2, r3
 800d228:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d22c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d246:	2b01      	cmp	r3, #1
 800d248:	f040 82ac 	bne.w	800d7a4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	695a      	ldr	r2, [r3, #20]
 800d250:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d254:	441a      	add	r2, r3
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	69da      	ldr	r2, [r3, #28]
 800d25e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d262:	441a      	add	r2, r3
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	6a1a      	ldr	r2, [r3, #32]
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	429a      	cmp	r2, r3
 800d272:	d30b      	bcc.n	800d28c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	6a1a      	ldr	r2, [r3, #32]
 800d280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d284:	1ad2      	subs	r2, r2, r3
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	621a      	str	r2, [r3, #32]
 800d28a:	e017      	b.n	800d2bc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	6a1b      	ldr	r3, [r3, #32]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d108      	bne.n	800d2a6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800d294:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d2a4:	e00a      	b.n	800d2bc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	785b      	ldrb	r3, [r3, #1]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d165      	bne.n	800d390 <HAL_PCD_EP_DB_Transmit+0x37e>
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d8:	4413      	add	r3, r2
 800d2da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	00da      	lsls	r2, r3, #3
 800d2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e4:	4413      	add	r3, r2
 800d2e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d2ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fa:	801a      	strh	r2, [r3, #0]
 800d2fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d300:	2b3e      	cmp	r3, #62	; 0x3e
 800d302:	d91d      	bls.n	800d340 <HAL_PCD_EP_DB_Transmit+0x32e>
 800d304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d308:	095b      	lsrs	r3, r3, #5
 800d30a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d30c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d310:	f003 031f 	and.w	r3, r3, #31
 800d314:	2b00      	cmp	r3, #0
 800d316:	d102      	bne.n	800d31e <HAL_PCD_EP_DB_Transmit+0x30c>
 800d318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d31a:	3b01      	subs	r3, #1
 800d31c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	b29a      	uxth	r2, r3
 800d324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d326:	b29b      	uxth	r3, r3
 800d328:	029b      	lsls	r3, r3, #10
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	4313      	orrs	r3, r2
 800d32e:	b29b      	uxth	r3, r3
 800d330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d338:	b29a      	uxth	r2, r3
 800d33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33c:	801a      	strh	r2, [r3, #0]
 800d33e:	e044      	b.n	800d3ca <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10a      	bne.n	800d35e <HAL_PCD_EP_DB_Transmit+0x34c>
 800d348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34a:	881b      	ldrh	r3, [r3, #0]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d356:	b29a      	uxth	r2, r3
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	801a      	strh	r2, [r3, #0]
 800d35c:	e035      	b.n	800d3ca <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d35e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d362:	085b      	lsrs	r3, r3, #1
 800d364:	64bb      	str	r3, [r7, #72]	; 0x48
 800d366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d002      	beq.n	800d378 <HAL_PCD_EP_DB_Transmit+0x366>
 800d372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d374:	3301      	adds	r3, #1
 800d376:	64bb      	str	r3, [r7, #72]	; 0x48
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d380:	b29b      	uxth	r3, r3
 800d382:	029b      	lsls	r3, r3, #10
 800d384:	b29b      	uxth	r3, r3
 800d386:	4313      	orrs	r3, r2
 800d388:	b29a      	uxth	r2, r3
 800d38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38c:	801a      	strh	r2, [r3, #0]
 800d38e:	e01c      	b.n	800d3ca <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	785b      	ldrb	r3, [r3, #1]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d118      	bne.n	800d3ca <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	647b      	str	r3, [r7, #68]	; 0x44
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3ac:	4413      	add	r3, r2
 800d3ae:	647b      	str	r3, [r7, #68]	; 0x44
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	00da      	lsls	r2, r3, #3
 800d3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b8:	4413      	add	r3, r2
 800d3ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d3be:	643b      	str	r3, [r7, #64]	; 0x40
 800d3c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	6959      	ldr	r1, [r3, #20]
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	891a      	ldrh	r2, [r3, #8]
 800d3d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	f007 fee6 	bl	80151ac <USB_WritePMA>
 800d3e0:	e1e0      	b.n	800d7a4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	4413      	add	r3, r2
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	6812      	ldr	r2, [r2, #0]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d406:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	699a      	ldr	r2, [r3, #24]
 800d40e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d412:	429a      	cmp	r2, r3
 800d414:	d307      	bcc.n	800d426 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	699a      	ldr	r2, [r3, #24]
 800d41a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d41e:	1ad2      	subs	r2, r2, r3
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	619a      	str	r2, [r3, #24]
 800d424:	e002      	b.n	800d42c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	2200      	movs	r2, #0
 800d42a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	699b      	ldr	r3, [r3, #24]
 800d430:	2b00      	cmp	r3, #0
 800d432:	f040 80c0 	bne.w	800d5b6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	785b      	ldrb	r3, [r3, #1]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d126      	bne.n	800d48c <HAL_PCD_EP_DB_Transmit+0x47a>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	461a      	mov	r2, r3
 800d450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d452:	4413      	add	r3, r2
 800d454:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	00da      	lsls	r2, r3, #3
 800d45c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d45e:	4413      	add	r3, r2
 800d460:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d464:	67bb      	str	r3, [r7, #120]	; 0x78
 800d466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d468:	881b      	ldrh	r3, [r3, #0]
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d470:	b29a      	uxth	r2, r3
 800d472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d474:	801a      	strh	r2, [r3, #0]
 800d476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d484:	b29a      	uxth	r2, r3
 800d486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d488:	801a      	strh	r2, [r3, #0]
 800d48a:	e01a      	b.n	800d4c2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	785b      	ldrb	r3, [r3, #1]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d116      	bne.n	800d4c2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	667b      	str	r3, [r7, #100]	; 0x64
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4a8:	4413      	add	r3, r2
 800d4aa:	667b      	str	r3, [r7, #100]	; 0x64
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	00da      	lsls	r2, r3, #3
 800d4b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d4ba:	663b      	str	r3, [r7, #96]	; 0x60
 800d4bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4be:	2200      	movs	r2, #0
 800d4c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	677b      	str	r3, [r7, #116]	; 0x74
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	785b      	ldrb	r3, [r3, #1]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d12b      	bne.n	800d528 <HAL_PCD_EP_DB_Transmit+0x516>
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e4:	4413      	add	r3, r2
 800d4e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	00da      	lsls	r2, r3, #3
 800d4ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4f0:	4413      	add	r3, r2
 800d4f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d4f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d4fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4fe:	881b      	ldrh	r3, [r3, #0]
 800d500:	b29b      	uxth	r3, r3
 800d502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d506:	b29a      	uxth	r2, r3
 800d508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d50c:	801a      	strh	r2, [r3, #0]
 800d50e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d512:	881b      	ldrh	r3, [r3, #0]
 800d514:	b29b      	uxth	r3, r3
 800d516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d51a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d51e:	b29a      	uxth	r2, r3
 800d520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d524:	801a      	strh	r2, [r3, #0]
 800d526:	e017      	b.n	800d558 <HAL_PCD_EP_DB_Transmit+0x546>
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	785b      	ldrb	r3, [r3, #1]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d113      	bne.n	800d558 <HAL_PCD_EP_DB_Transmit+0x546>
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d538:	b29b      	uxth	r3, r3
 800d53a:	461a      	mov	r2, r3
 800d53c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d53e:	4413      	add	r3, r2
 800d540:	677b      	str	r3, [r7, #116]	; 0x74
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	00da      	lsls	r2, r3, #3
 800d548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d54a:	4413      	add	r3, r2
 800d54c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d550:	673b      	str	r3, [r7, #112]	; 0x70
 800d552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d554:	2200      	movs	r2, #0
 800d556:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	4619      	mov	r1, r3
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f011 fe05 	bl	801f16e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d564:	88fb      	ldrh	r3, [r7, #6]
 800d566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f040 811a 	bne.w	800d7a4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	461a      	mov	r2, r3
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	881b      	ldrh	r3, [r3, #0]
 800d580:	b29b      	uxth	r3, r3
 800d582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d58a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	461a      	mov	r2, r3
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	441a      	add	r2, r3
 800d59c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800d5a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	8013      	strh	r3, [r2, #0]
 800d5b4:	e0f6      	b.n	800d7a4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d5b6:	88fb      	ldrh	r3, [r7, #6]
 800d5b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d121      	bne.n	800d604 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	881b      	ldrh	r3, [r3, #0]
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	441a      	add	r2, r3
 800d5ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d5f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d600:	b29b      	uxth	r3, r3
 800d602:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	f040 80ca 	bne.w	800d7a4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	695a      	ldr	r2, [r3, #20]
 800d614:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d618:	441a      	add	r2, r3
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	69da      	ldr	r2, [r3, #28]
 800d622:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d626:	441a      	add	r2, r3
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	6a1a      	ldr	r2, [r3, #32]
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	691b      	ldr	r3, [r3, #16]
 800d634:	429a      	cmp	r2, r3
 800d636:	d30b      	bcc.n	800d650 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	6a1a      	ldr	r2, [r3, #32]
 800d644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d648:	1ad2      	subs	r2, r2, r3
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	621a      	str	r2, [r3, #32]
 800d64e:	e017      	b.n	800d680 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	6a1b      	ldr	r3, [r3, #32]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d108      	bne.n	800d66a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800d658:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d65c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2200      	movs	r2, #0
 800d664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d668:	e00a      	b.n	800d680 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	6a1b      	ldr	r3, [r3, #32]
 800d66e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2200      	movs	r2, #0
 800d676:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	657b      	str	r3, [r7, #84]	; 0x54
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	785b      	ldrb	r3, [r3, #1]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d165      	bne.n	800d75a <HAL_PCD_EP_DB_Transmit+0x748>
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	461a      	mov	r2, r3
 800d6a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6a2:	4413      	add	r3, r2
 800d6a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	00da      	lsls	r2, r3, #3
 800d6ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ae:	4413      	add	r3, r2
 800d6b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d6b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6b8:	881b      	ldrh	r3, [r3, #0]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6c4:	801a      	strh	r2, [r3, #0]
 800d6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6ca:	2b3e      	cmp	r3, #62	; 0x3e
 800d6cc:	d91d      	bls.n	800d70a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800d6ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6d2:	095b      	lsrs	r3, r3, #5
 800d6d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d6d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6da:	f003 031f 	and.w	r3, r3, #31
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d102      	bne.n	800d6e8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800d6e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d6e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	029b      	lsls	r3, r3, #10
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d702:	b29a      	uxth	r2, r3
 800d704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d706:	801a      	strh	r2, [r3, #0]
 800d708:	e041      	b.n	800d78e <HAL_PCD_EP_DB_Transmit+0x77c>
 800d70a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10a      	bne.n	800d728 <HAL_PCD_EP_DB_Transmit+0x716>
 800d712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d714:	881b      	ldrh	r3, [r3, #0]
 800d716:	b29b      	uxth	r3, r3
 800d718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d71c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d720:	b29a      	uxth	r2, r3
 800d722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d724:	801a      	strh	r2, [r3, #0]
 800d726:	e032      	b.n	800d78e <HAL_PCD_EP_DB_Transmit+0x77c>
 800d728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d72c:	085b      	lsrs	r3, r3, #1
 800d72e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <HAL_PCD_EP_DB_Transmit+0x730>
 800d73c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d73e:	3301      	adds	r3, #1
 800d740:	66bb      	str	r3, [r7, #104]	; 0x68
 800d742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d744:	881b      	ldrh	r3, [r3, #0]
 800d746:	b29a      	uxth	r2, r3
 800d748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	029b      	lsls	r3, r3, #10
 800d74e:	b29b      	uxth	r3, r3
 800d750:	4313      	orrs	r3, r2
 800d752:	b29a      	uxth	r2, r3
 800d754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d756:	801a      	strh	r2, [r3, #0]
 800d758:	e019      	b.n	800d78e <HAL_PCD_EP_DB_Transmit+0x77c>
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	785b      	ldrb	r3, [r3, #1]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d115      	bne.n	800d78e <HAL_PCD_EP_DB_Transmit+0x77c>
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	461a      	mov	r2, r3
 800d76e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d770:	4413      	add	r3, r2
 800d772:	657b      	str	r3, [r7, #84]	; 0x54
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	00da      	lsls	r2, r3, #3
 800d77a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d77c:	4413      	add	r3, r2
 800d77e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d782:	653b      	str	r3, [r7, #80]	; 0x50
 800d784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d788:	b29a      	uxth	r2, r3
 800d78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6818      	ldr	r0, [r3, #0]
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	6959      	ldr	r1, [r3, #20]
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	895a      	ldrh	r2, [r3, #10]
 800d79a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	f007 fd04 	bl	80151ac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4413      	add	r3, r2
 800d7b2:	881b      	ldrh	r3, [r3, #0]
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7be:	82bb      	strh	r3, [r7, #20]
 800d7c0:	8abb      	ldrh	r3, [r7, #20]
 800d7c2:	f083 0310 	eor.w	r3, r3, #16
 800d7c6:	82bb      	strh	r3, [r7, #20]
 800d7c8:	8abb      	ldrh	r3, [r7, #20]
 800d7ca:	f083 0320 	eor.w	r3, r3, #32
 800d7ce:	82bb      	strh	r3, [r7, #20]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	441a      	add	r2, r3
 800d7de:	8abb      	ldrh	r3, [r7, #20]
 800d7e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3790      	adds	r7, #144	; 0x90
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b087      	sub	sp, #28
 800d802:	af00      	add	r7, sp, #0
 800d804:	60f8      	str	r0, [r7, #12]
 800d806:	607b      	str	r3, [r7, #4]
 800d808:	460b      	mov	r3, r1
 800d80a:	817b      	strh	r3, [r7, #10]
 800d80c:	4613      	mov	r3, r2
 800d80e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800d810:	897b      	ldrh	r3, [r7, #10]
 800d812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d816:	b29b      	uxth	r3, r3
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00b      	beq.n	800d834 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d81c:	897b      	ldrh	r3, [r7, #10]
 800d81e:	f003 0207 	and.w	r2, r3, #7
 800d822:	4613      	mov	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4413      	add	r3, r2
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	3310      	adds	r3, #16
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	4413      	add	r3, r2
 800d830:	617b      	str	r3, [r7, #20]
 800d832:	e009      	b.n	800d848 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d834:	897a      	ldrh	r2, [r7, #10]
 800d836:	4613      	mov	r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4413      	add	r3, r2
 800d83c:	00db      	lsls	r3, r3, #3
 800d83e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	4413      	add	r3, r2
 800d846:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800d848:	893b      	ldrh	r3, [r7, #8]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d107      	bne.n	800d85e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	2200      	movs	r2, #0
 800d852:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	b29a      	uxth	r2, r3
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	80da      	strh	r2, [r3, #6]
 800d85c:	e00b      	b.n	800d876 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2201      	movs	r2, #1
 800d862:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	b29a      	uxth	r2, r3
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	0c1b      	lsrs	r3, r3, #16
 800d870:	b29a      	uxth	r2, r3
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	371c      	adds	r7, #28
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2201      	movs	r2, #1
 800d896:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	f043 0301 	orr.w	r3, r3, #1
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	f043 0302 	orr.w	r3, r3, #2
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d141      	bne.n	800d96a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d8e6:	4b4b      	ldr	r3, [pc, #300]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d8ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8f2:	d131      	bne.n	800d958 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d8f4:	4b47      	ldr	r3, [pc, #284]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8fa:	4a46      	ldr	r2, [pc, #280]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d900:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d904:	4b43      	ldr	r3, [pc, #268]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d90c:	4a41      	ldr	r2, [pc, #260]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d90e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d914:	4b40      	ldr	r3, [pc, #256]	; (800da18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2232      	movs	r2, #50	; 0x32
 800d91a:	fb02 f303 	mul.w	r3, r2, r3
 800d91e:	4a3f      	ldr	r2, [pc, #252]	; (800da1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d920:	fba2 2303 	umull	r2, r3, r2, r3
 800d924:	0c9b      	lsrs	r3, r3, #18
 800d926:	3301      	adds	r3, #1
 800d928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d92a:	e002      	b.n	800d932 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	3b01      	subs	r3, #1
 800d930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d932:	4b38      	ldr	r3, [pc, #224]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d93a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d93e:	d102      	bne.n	800d946 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1f2      	bne.n	800d92c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d946:	4b33      	ldr	r3, [pc, #204]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d94e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d952:	d158      	bne.n	800da06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d954:	2303      	movs	r3, #3
 800d956:	e057      	b.n	800da08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d958:	4b2e      	ldr	r3, [pc, #184]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d95e:	4a2d      	ldr	r2, [pc, #180]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d968:	e04d      	b.n	800da06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d970:	d141      	bne.n	800d9f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d972:	4b28      	ldr	r3, [pc, #160]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d97a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d97e:	d131      	bne.n	800d9e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d980:	4b24      	ldr	r3, [pc, #144]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d986:	4a23      	ldr	r2, [pc, #140]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d98c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d990:	4b20      	ldr	r3, [pc, #128]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d998:	4a1e      	ldr	r2, [pc, #120]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d99a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d99e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d9a0:	4b1d      	ldr	r3, [pc, #116]	; (800da18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2232      	movs	r2, #50	; 0x32
 800d9a6:	fb02 f303 	mul.w	r3, r2, r3
 800d9aa:	4a1c      	ldr	r2, [pc, #112]	; (800da1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d9ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d9b0:	0c9b      	lsrs	r3, r3, #18
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d9b6:	e002      	b.n	800d9be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d9be:	4b15      	ldr	r3, [pc, #84]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9c0:	695b      	ldr	r3, [r3, #20]
 800d9c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9ca:	d102      	bne.n	800d9d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1f2      	bne.n	800d9b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d9d2:	4b10      	ldr	r3, [pc, #64]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9de:	d112      	bne.n	800da06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	e011      	b.n	800da08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d9e4:	4b0b      	ldr	r3, [pc, #44]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9ea:	4a0a      	ldr	r2, [pc, #40]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d9f4:	e007      	b.n	800da06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d9f6:	4b07      	ldr	r3, [pc, #28]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d9fe:	4a05      	ldr	r2, [pc, #20]	; (800da14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800da00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800da04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr
 800da14:	40007000 	.word	0x40007000
 800da18:	20000008 	.word	0x20000008
 800da1c:	431bde83 	.word	0x431bde83

0800da20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800da20:	b480      	push	{r7}
 800da22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800da24:	4b05      	ldr	r3, [pc, #20]	; (800da3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	4a04      	ldr	r2, [pc, #16]	; (800da3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800da2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da2e:	6093      	str	r3, [r2, #8]
}
 800da30:	bf00      	nop
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	40007000 	.word	0x40007000

0800da40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b088      	sub	sp, #32
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d101      	bne.n	800da52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	e2fe      	b.n	800e050 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f003 0301 	and.w	r3, r3, #1
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d075      	beq.n	800db4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da5e:	4b97      	ldr	r3, [pc, #604]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	f003 030c 	and.w	r3, r3, #12
 800da66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800da68:	4b94      	ldr	r3, [pc, #592]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	f003 0303 	and.w	r3, r3, #3
 800da70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	2b0c      	cmp	r3, #12
 800da76:	d102      	bne.n	800da7e <HAL_RCC_OscConfig+0x3e>
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	d002      	beq.n	800da84 <HAL_RCC_OscConfig+0x44>
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	2b08      	cmp	r3, #8
 800da82:	d10b      	bne.n	800da9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da84:	4b8d      	ldr	r3, [pc, #564]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d05b      	beq.n	800db48 <HAL_RCC_OscConfig+0x108>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d157      	bne.n	800db48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	e2d9      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daa4:	d106      	bne.n	800dab4 <HAL_RCC_OscConfig+0x74>
 800daa6:	4b85      	ldr	r3, [pc, #532]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a84      	ldr	r2, [pc, #528]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800daac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dab0:	6013      	str	r3, [r2, #0]
 800dab2:	e01d      	b.n	800daf0 <HAL_RCC_OscConfig+0xb0>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dabc:	d10c      	bne.n	800dad8 <HAL_RCC_OscConfig+0x98>
 800dabe:	4b7f      	ldr	r3, [pc, #508]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a7e      	ldr	r2, [pc, #504]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dac8:	6013      	str	r3, [r2, #0]
 800daca:	4b7c      	ldr	r3, [pc, #496]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a7b      	ldr	r2, [pc, #492]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	e00b      	b.n	800daf0 <HAL_RCC_OscConfig+0xb0>
 800dad8:	4b78      	ldr	r3, [pc, #480]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a77      	ldr	r2, [pc, #476]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dae2:	6013      	str	r3, [r2, #0]
 800dae4:	4b75      	ldr	r3, [pc, #468]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a74      	ldr	r2, [pc, #464]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800daea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800daee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d013      	beq.n	800db20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800daf8:	f7fb fc32 	bl	8009360 <HAL_GetTick>
 800dafc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dafe:	e008      	b.n	800db12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db00:	f7fb fc2e 	bl	8009360 <HAL_GetTick>
 800db04:	4602      	mov	r2, r0
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	2b64      	cmp	r3, #100	; 0x64
 800db0c:	d901      	bls.n	800db12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800db0e:	2303      	movs	r3, #3
 800db10:	e29e      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800db12:	4b6a      	ldr	r3, [pc, #424]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d0f0      	beq.n	800db00 <HAL_RCC_OscConfig+0xc0>
 800db1e:	e014      	b.n	800db4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db20:	f7fb fc1e 	bl	8009360 <HAL_GetTick>
 800db24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800db26:	e008      	b.n	800db3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db28:	f7fb fc1a 	bl	8009360 <HAL_GetTick>
 800db2c:	4602      	mov	r2, r0
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	2b64      	cmp	r3, #100	; 0x64
 800db34:	d901      	bls.n	800db3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db36:	2303      	movs	r3, #3
 800db38:	e28a      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800db3a:	4b60      	ldr	r3, [pc, #384]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1f0      	bne.n	800db28 <HAL_RCC_OscConfig+0xe8>
 800db46:	e000      	b.n	800db4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f003 0302 	and.w	r3, r3, #2
 800db52:	2b00      	cmp	r3, #0
 800db54:	d075      	beq.n	800dc42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800db56:	4b59      	ldr	r3, [pc, #356]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	f003 030c 	and.w	r3, r3, #12
 800db5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800db60:	4b56      	ldr	r3, [pc, #344]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	f003 0303 	and.w	r3, r3, #3
 800db68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	2b0c      	cmp	r3, #12
 800db6e:	d102      	bne.n	800db76 <HAL_RCC_OscConfig+0x136>
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	2b02      	cmp	r3, #2
 800db74:	d002      	beq.n	800db7c <HAL_RCC_OscConfig+0x13c>
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	2b04      	cmp	r3, #4
 800db7a:	d11f      	bne.n	800dbbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db7c:	4b4f      	ldr	r3, [pc, #316]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db84:	2b00      	cmp	r3, #0
 800db86:	d005      	beq.n	800db94 <HAL_RCC_OscConfig+0x154>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	e25d      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db94:	4b49      	ldr	r3, [pc, #292]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	691b      	ldr	r3, [r3, #16]
 800dba0:	061b      	lsls	r3, r3, #24
 800dba2:	4946      	ldr	r1, [pc, #280]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dba4:	4313      	orrs	r3, r2
 800dba6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800dba8:	4b45      	ldr	r3, [pc, #276]	; (800dcc0 <HAL_RCC_OscConfig+0x280>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fb f985 	bl	8008ebc <HAL_InitTick>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d043      	beq.n	800dc40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e249      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d023      	beq.n	800dc0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dbc4:	4b3d      	ldr	r3, [pc, #244]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a3c      	ldr	r2, [pc, #240]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dbca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbd0:	f7fb fbc6 	bl	8009360 <HAL_GetTick>
 800dbd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dbd6:	e008      	b.n	800dbea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dbd8:	f7fb fbc2 	bl	8009360 <HAL_GetTick>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	1ad3      	subs	r3, r2, r3
 800dbe2:	2b02      	cmp	r3, #2
 800dbe4:	d901      	bls.n	800dbea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800dbe6:	2303      	movs	r3, #3
 800dbe8:	e232      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dbea:	4b34      	ldr	r3, [pc, #208]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d0f0      	beq.n	800dbd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbf6:	4b31      	ldr	r3, [pc, #196]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	061b      	lsls	r3, r3, #24
 800dc04:	492d      	ldr	r1, [pc, #180]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dc06:	4313      	orrs	r3, r2
 800dc08:	604b      	str	r3, [r1, #4]
 800dc0a:	e01a      	b.n	800dc42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dc0c:	4b2b      	ldr	r3, [pc, #172]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a2a      	ldr	r2, [pc, #168]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dc12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc18:	f7fb fba2 	bl	8009360 <HAL_GetTick>
 800dc1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800dc1e:	e008      	b.n	800dc32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc20:	f7fb fb9e 	bl	8009360 <HAL_GetTick>
 800dc24:	4602      	mov	r2, r0
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	d901      	bls.n	800dc32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	e20e      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800dc32:	4b22      	ldr	r3, [pc, #136]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1f0      	bne.n	800dc20 <HAL_RCC_OscConfig+0x1e0>
 800dc3e:	e000      	b.n	800dc42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f003 0308 	and.w	r3, r3, #8
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d041      	beq.n	800dcd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	695b      	ldr	r3, [r3, #20]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d01c      	beq.n	800dc90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc56:	4b19      	ldr	r3, [pc, #100]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dc58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc5c:	4a17      	ldr	r2, [pc, #92]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dc5e:	f043 0301 	orr.w	r3, r3, #1
 800dc62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc66:	f7fb fb7b 	bl	8009360 <HAL_GetTick>
 800dc6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dc6c:	e008      	b.n	800dc80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dc6e:	f7fb fb77 	bl	8009360 <HAL_GetTick>
 800dc72:	4602      	mov	r2, r0
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	1ad3      	subs	r3, r2, r3
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d901      	bls.n	800dc80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dc7c:	2303      	movs	r3, #3
 800dc7e:	e1e7      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dc80:	4b0e      	ldr	r3, [pc, #56]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dc82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc86:	f003 0302 	and.w	r3, r3, #2
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d0ef      	beq.n	800dc6e <HAL_RCC_OscConfig+0x22e>
 800dc8e:	e020      	b.n	800dcd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dc90:	4b0a      	ldr	r3, [pc, #40]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dc92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc96:	4a09      	ldr	r2, [pc, #36]	; (800dcbc <HAL_RCC_OscConfig+0x27c>)
 800dc98:	f023 0301 	bic.w	r3, r3, #1
 800dc9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dca0:	f7fb fb5e 	bl	8009360 <HAL_GetTick>
 800dca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800dca6:	e00d      	b.n	800dcc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dca8:	f7fb fb5a 	bl	8009360 <HAL_GetTick>
 800dcac:	4602      	mov	r2, r0
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	2b02      	cmp	r3, #2
 800dcb4:	d906      	bls.n	800dcc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800dcb6:	2303      	movs	r3, #3
 800dcb8:	e1ca      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
 800dcba:	bf00      	nop
 800dcbc:	40021000 	.word	0x40021000
 800dcc0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800dcc4:	4b8c      	ldr	r3, [pc, #560]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dcc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dcca:	f003 0302 	and.w	r3, r3, #2
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1ea      	bne.n	800dca8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f003 0304 	and.w	r3, r3, #4
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f000 80a6 	beq.w	800de2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dce0:	2300      	movs	r3, #0
 800dce2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800dce4:	4b84      	ldr	r3, [pc, #528]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d101      	bne.n	800dcf4 <HAL_RCC_OscConfig+0x2b4>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e000      	b.n	800dcf6 <HAL_RCC_OscConfig+0x2b6>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00d      	beq.n	800dd16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dcfa:	4b7f      	ldr	r3, [pc, #508]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dcfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcfe:	4a7e      	ldr	r2, [pc, #504]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dd00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd04:	6593      	str	r3, [r2, #88]	; 0x58
 800dd06:	4b7c      	ldr	r3, [pc, #496]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dd08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd0e:	60fb      	str	r3, [r7, #12]
 800dd10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800dd12:	2301      	movs	r3, #1
 800dd14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd16:	4b79      	ldr	r3, [pc, #484]	; (800defc <HAL_RCC_OscConfig+0x4bc>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d118      	bne.n	800dd54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dd22:	4b76      	ldr	r3, [pc, #472]	; (800defc <HAL_RCC_OscConfig+0x4bc>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a75      	ldr	r2, [pc, #468]	; (800defc <HAL_RCC_OscConfig+0x4bc>)
 800dd28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dd2e:	f7fb fb17 	bl	8009360 <HAL_GetTick>
 800dd32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd34:	e008      	b.n	800dd48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd36:	f7fb fb13 	bl	8009360 <HAL_GetTick>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d901      	bls.n	800dd48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800dd44:	2303      	movs	r3, #3
 800dd46:	e183      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd48:	4b6c      	ldr	r3, [pc, #432]	; (800defc <HAL_RCC_OscConfig+0x4bc>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d0f0      	beq.n	800dd36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d108      	bne.n	800dd6e <HAL_RCC_OscConfig+0x32e>
 800dd5c:	4b66      	ldr	r3, [pc, #408]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dd5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd62:	4a65      	ldr	r2, [pc, #404]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dd64:	f043 0301 	orr.w	r3, r3, #1
 800dd68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dd6c:	e024      	b.n	800ddb8 <HAL_RCC_OscConfig+0x378>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	2b05      	cmp	r3, #5
 800dd74:	d110      	bne.n	800dd98 <HAL_RCC_OscConfig+0x358>
 800dd76:	4b60      	ldr	r3, [pc, #384]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd7c:	4a5e      	ldr	r2, [pc, #376]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dd7e:	f043 0304 	orr.w	r3, r3, #4
 800dd82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dd86:	4b5c      	ldr	r3, [pc, #368]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd8c:	4a5a      	ldr	r2, [pc, #360]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dd8e:	f043 0301 	orr.w	r3, r3, #1
 800dd92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dd96:	e00f      	b.n	800ddb8 <HAL_RCC_OscConfig+0x378>
 800dd98:	4b57      	ldr	r3, [pc, #348]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dd9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd9e:	4a56      	ldr	r2, [pc, #344]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dda0:	f023 0301 	bic.w	r3, r3, #1
 800dda4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dda8:	4b53      	ldr	r3, [pc, #332]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800ddaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddae:	4a52      	ldr	r2, [pc, #328]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800ddb0:	f023 0304 	bic.w	r3, r3, #4
 800ddb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d016      	beq.n	800ddee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddc0:	f7fb face 	bl	8009360 <HAL_GetTick>
 800ddc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ddc6:	e00a      	b.n	800ddde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddc8:	f7fb faca 	bl	8009360 <HAL_GetTick>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d901      	bls.n	800ddde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ddda:	2303      	movs	r3, #3
 800dddc:	e138      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ddde:	4b46      	ldr	r3, [pc, #280]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dde0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dde4:	f003 0302 	and.w	r3, r3, #2
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d0ed      	beq.n	800ddc8 <HAL_RCC_OscConfig+0x388>
 800ddec:	e015      	b.n	800de1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddee:	f7fb fab7 	bl	8009360 <HAL_GetTick>
 800ddf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ddf4:	e00a      	b.n	800de0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddf6:	f7fb fab3 	bl	8009360 <HAL_GetTick>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	f241 3288 	movw	r2, #5000	; 0x1388
 800de04:	4293      	cmp	r3, r2
 800de06:	d901      	bls.n	800de0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800de08:	2303      	movs	r3, #3
 800de0a:	e121      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800de0c:	4b3a      	ldr	r3, [pc, #232]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800de0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de12:	f003 0302 	and.w	r3, r3, #2
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1ed      	bne.n	800ddf6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800de1a:	7ffb      	ldrb	r3, [r7, #31]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d105      	bne.n	800de2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800de20:	4b35      	ldr	r3, [pc, #212]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800de22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de24:	4a34      	ldr	r2, [pc, #208]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800de26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f003 0320 	and.w	r3, r3, #32
 800de34:	2b00      	cmp	r3, #0
 800de36:	d03c      	beq.n	800deb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d01c      	beq.n	800de7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800de40:	4b2d      	ldr	r3, [pc, #180]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800de42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800de46:	4a2c      	ldr	r2, [pc, #176]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800de48:	f043 0301 	orr.w	r3, r3, #1
 800de4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de50:	f7fb fa86 	bl	8009360 <HAL_GetTick>
 800de54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800de56:	e008      	b.n	800de6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de58:	f7fb fa82 	bl	8009360 <HAL_GetTick>
 800de5c:	4602      	mov	r2, r0
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	2b02      	cmp	r3, #2
 800de64:	d901      	bls.n	800de6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800de66:	2303      	movs	r3, #3
 800de68:	e0f2      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800de6a:	4b23      	ldr	r3, [pc, #140]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800de6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800de70:	f003 0302 	and.w	r3, r3, #2
 800de74:	2b00      	cmp	r3, #0
 800de76:	d0ef      	beq.n	800de58 <HAL_RCC_OscConfig+0x418>
 800de78:	e01b      	b.n	800deb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800de7a:	4b1f      	ldr	r3, [pc, #124]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800de7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800de80:	4a1d      	ldr	r2, [pc, #116]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800de82:	f023 0301 	bic.w	r3, r3, #1
 800de86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de8a:	f7fb fa69 	bl	8009360 <HAL_GetTick>
 800de8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800de90:	e008      	b.n	800dea4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de92:	f7fb fa65 	bl	8009360 <HAL_GetTick>
 800de96:	4602      	mov	r2, r0
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d901      	bls.n	800dea4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800dea0:	2303      	movs	r3, #3
 800dea2:	e0d5      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dea4:	4b14      	ldr	r3, [pc, #80]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800dea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800deaa:	f003 0302 	and.w	r3, r3, #2
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1ef      	bne.n	800de92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	69db      	ldr	r3, [r3, #28]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f000 80c9 	beq.w	800e04e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800debc:	4b0e      	ldr	r3, [pc, #56]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f003 030c 	and.w	r3, r3, #12
 800dec4:	2b0c      	cmp	r3, #12
 800dec6:	f000 8083 	beq.w	800dfd0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	69db      	ldr	r3, [r3, #28]
 800dece:	2b02      	cmp	r3, #2
 800ded0:	d15e      	bne.n	800df90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ded2:	4b09      	ldr	r3, [pc, #36]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a08      	ldr	r2, [pc, #32]	; (800def8 <HAL_RCC_OscConfig+0x4b8>)
 800ded8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dedc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dede:	f7fb fa3f 	bl	8009360 <HAL_GetTick>
 800dee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dee4:	e00c      	b.n	800df00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dee6:	f7fb fa3b 	bl	8009360 <HAL_GetTick>
 800deea:	4602      	mov	r2, r0
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	2b02      	cmp	r3, #2
 800def2:	d905      	bls.n	800df00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800def4:	2303      	movs	r3, #3
 800def6:	e0ab      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
 800def8:	40021000 	.word	0x40021000
 800defc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800df00:	4b55      	ldr	r3, [pc, #340]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1ec      	bne.n	800dee6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800df0c:	4b52      	ldr	r3, [pc, #328]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df0e:	68da      	ldr	r2, [r3, #12]
 800df10:	4b52      	ldr	r3, [pc, #328]	; (800e05c <HAL_RCC_OscConfig+0x61c>)
 800df12:	4013      	ands	r3, r2
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	6a11      	ldr	r1, [r2, #32]
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800df1c:	3a01      	subs	r2, #1
 800df1e:	0112      	lsls	r2, r2, #4
 800df20:	4311      	orrs	r1, r2
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800df26:	0212      	lsls	r2, r2, #8
 800df28:	4311      	orrs	r1, r2
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800df2e:	0852      	lsrs	r2, r2, #1
 800df30:	3a01      	subs	r2, #1
 800df32:	0552      	lsls	r2, r2, #21
 800df34:	4311      	orrs	r1, r2
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800df3a:	0852      	lsrs	r2, r2, #1
 800df3c:	3a01      	subs	r2, #1
 800df3e:	0652      	lsls	r2, r2, #25
 800df40:	4311      	orrs	r1, r2
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800df46:	06d2      	lsls	r2, r2, #27
 800df48:	430a      	orrs	r2, r1
 800df4a:	4943      	ldr	r1, [pc, #268]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df4c:	4313      	orrs	r3, r2
 800df4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800df50:	4b41      	ldr	r3, [pc, #260]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a40      	ldr	r2, [pc, #256]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800df5c:	4b3e      	ldr	r3, [pc, #248]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	4a3d      	ldr	r2, [pc, #244]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df68:	f7fb f9fa 	bl	8009360 <HAL_GetTick>
 800df6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df6e:	e008      	b.n	800df82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df70:	f7fb f9f6 	bl	8009360 <HAL_GetTick>
 800df74:	4602      	mov	r2, r0
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d901      	bls.n	800df82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800df7e:	2303      	movs	r3, #3
 800df80:	e066      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df82:	4b35      	ldr	r3, [pc, #212]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d0f0      	beq.n	800df70 <HAL_RCC_OscConfig+0x530>
 800df8e:	e05e      	b.n	800e04e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df90:	4b31      	ldr	r3, [pc, #196]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a30      	ldr	r2, [pc, #192]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800df96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df9c:	f7fb f9e0 	bl	8009360 <HAL_GetTick>
 800dfa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dfa2:	e008      	b.n	800dfb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dfa4:	f7fb f9dc 	bl	8009360 <HAL_GetTick>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	d901      	bls.n	800dfb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	e04c      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dfb6:	4b28      	ldr	r3, [pc, #160]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1f0      	bne.n	800dfa4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800dfc2:	4b25      	ldr	r3, [pc, #148]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800dfc4:	68da      	ldr	r2, [r3, #12]
 800dfc6:	4924      	ldr	r1, [pc, #144]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800dfc8:	4b25      	ldr	r3, [pc, #148]	; (800e060 <HAL_RCC_OscConfig+0x620>)
 800dfca:	4013      	ands	r3, r2
 800dfcc:	60cb      	str	r3, [r1, #12]
 800dfce:	e03e      	b.n	800e04e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	69db      	ldr	r3, [r3, #28]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d101      	bne.n	800dfdc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e039      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800dfdc:	4b1e      	ldr	r3, [pc, #120]	; (800e058 <HAL_RCC_OscConfig+0x618>)
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	f003 0203 	and.w	r2, r3, #3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6a1b      	ldr	r3, [r3, #32]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d12c      	bne.n	800e04a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffa:	3b01      	subs	r3, #1
 800dffc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dffe:	429a      	cmp	r2, r3
 800e000:	d123      	bne.n	800e04a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e00e:	429a      	cmp	r2, r3
 800e010:	d11b      	bne.n	800e04a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800e01e:	429a      	cmp	r2, r3
 800e020:	d113      	bne.n	800e04a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e02c:	085b      	lsrs	r3, r3, #1
 800e02e:	3b01      	subs	r3, #1
 800e030:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e032:	429a      	cmp	r2, r3
 800e034:	d109      	bne.n	800e04a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e040:	085b      	lsrs	r3, r3, #1
 800e042:	3b01      	subs	r3, #1
 800e044:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e046:	429a      	cmp	r2, r3
 800e048:	d001      	beq.n	800e04e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800e04a:	2301      	movs	r3, #1
 800e04c:	e000      	b.n	800e050 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800e04e:	2300      	movs	r3, #0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3720      	adds	r7, #32
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	40021000 	.word	0x40021000
 800e05c:	019f800c 	.word	0x019f800c
 800e060:	feeefffc 	.word	0xfeeefffc

0800e064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800e06e:	2300      	movs	r3, #0
 800e070:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d101      	bne.n	800e07c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	e11e      	b.n	800e2ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e07c:	4b91      	ldr	r3, [pc, #580]	; (800e2c4 <HAL_RCC_ClockConfig+0x260>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f003 030f 	and.w	r3, r3, #15
 800e084:	683a      	ldr	r2, [r7, #0]
 800e086:	429a      	cmp	r2, r3
 800e088:	d910      	bls.n	800e0ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e08a:	4b8e      	ldr	r3, [pc, #568]	; (800e2c4 <HAL_RCC_ClockConfig+0x260>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f023 020f 	bic.w	r2, r3, #15
 800e092:	498c      	ldr	r1, [pc, #560]	; (800e2c4 <HAL_RCC_ClockConfig+0x260>)
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	4313      	orrs	r3, r2
 800e098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e09a:	4b8a      	ldr	r3, [pc, #552]	; (800e2c4 <HAL_RCC_ClockConfig+0x260>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f003 030f 	and.w	r3, r3, #15
 800e0a2:	683a      	ldr	r2, [r7, #0]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d001      	beq.n	800e0ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e106      	b.n	800e2ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f003 0301 	and.w	r3, r3, #1
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d073      	beq.n	800e1a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	2b03      	cmp	r3, #3
 800e0be:	d129      	bne.n	800e114 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e0c0:	4b81      	ldr	r3, [pc, #516]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d101      	bne.n	800e0d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e0f4      	b.n	800e2ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800e0d0:	f000 f9d0 	bl	800e474 <RCC_GetSysClockFreqFromPLLSource>
 800e0d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	4a7c      	ldr	r2, [pc, #496]	; (800e2cc <HAL_RCC_ClockConfig+0x268>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d93f      	bls.n	800e15e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800e0de:	4b7a      	ldr	r3, [pc, #488]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d009      	beq.n	800e0fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d033      	beq.n	800e15e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d12f      	bne.n	800e15e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e0fe:	4b72      	ldr	r3, [pc, #456]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e106:	4a70      	ldr	r2, [pc, #448]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e10c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800e10e:	2380      	movs	r3, #128	; 0x80
 800e110:	617b      	str	r3, [r7, #20]
 800e112:	e024      	b.n	800e15e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	2b02      	cmp	r3, #2
 800e11a:	d107      	bne.n	800e12c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e11c:	4b6a      	ldr	r3, [pc, #424]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e124:	2b00      	cmp	r3, #0
 800e126:	d109      	bne.n	800e13c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	e0c6      	b.n	800e2ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e12c:	4b66      	ldr	r3, [pc, #408]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e134:	2b00      	cmp	r3, #0
 800e136:	d101      	bne.n	800e13c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	e0be      	b.n	800e2ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800e13c:	f000 f8ce 	bl	800e2dc <HAL_RCC_GetSysClockFreq>
 800e140:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	4a61      	ldr	r2, [pc, #388]	; (800e2cc <HAL_RCC_ClockConfig+0x268>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d909      	bls.n	800e15e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e14a:	4b5f      	ldr	r3, [pc, #380]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e152:	4a5d      	ldr	r2, [pc, #372]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e158:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800e15a:	2380      	movs	r3, #128	; 0x80
 800e15c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e15e:	4b5a      	ldr	r3, [pc, #360]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	f023 0203 	bic.w	r2, r3, #3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	4957      	ldr	r1, [pc, #348]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e16c:	4313      	orrs	r3, r2
 800e16e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e170:	f7fb f8f6 	bl	8009360 <HAL_GetTick>
 800e174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e176:	e00a      	b.n	800e18e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e178:	f7fb f8f2 	bl	8009360 <HAL_GetTick>
 800e17c:	4602      	mov	r2, r0
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	f241 3288 	movw	r2, #5000	; 0x1388
 800e186:	4293      	cmp	r3, r2
 800e188:	d901      	bls.n	800e18e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800e18a:	2303      	movs	r3, #3
 800e18c:	e095      	b.n	800e2ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e18e:	4b4e      	ldr	r3, [pc, #312]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	f003 020c 	and.w	r2, r3, #12
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d1eb      	bne.n	800e178 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f003 0302 	and.w	r3, r3, #2
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d023      	beq.n	800e1f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f003 0304 	and.w	r3, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d005      	beq.n	800e1c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e1b8:	4b43      	ldr	r3, [pc, #268]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	4a42      	ldr	r2, [pc, #264]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e1be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e1c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f003 0308 	and.w	r3, r3, #8
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d007      	beq.n	800e1e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800e1d0:	4b3d      	ldr	r3, [pc, #244]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e1d8:	4a3b      	ldr	r2, [pc, #236]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e1da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e1de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1e0:	4b39      	ldr	r3, [pc, #228]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	4936      	ldr	r1, [pc, #216]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	608b      	str	r3, [r1, #8]
 800e1f2:	e008      	b.n	800e206 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	2b80      	cmp	r3, #128	; 0x80
 800e1f8:	d105      	bne.n	800e206 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800e1fa:	4b33      	ldr	r3, [pc, #204]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	4a32      	ldr	r2, [pc, #200]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e204:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e206:	4b2f      	ldr	r3, [pc, #188]	; (800e2c4 <HAL_RCC_ClockConfig+0x260>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f003 030f 	and.w	r3, r3, #15
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	429a      	cmp	r2, r3
 800e212:	d21d      	bcs.n	800e250 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e214:	4b2b      	ldr	r3, [pc, #172]	; (800e2c4 <HAL_RCC_ClockConfig+0x260>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f023 020f 	bic.w	r2, r3, #15
 800e21c:	4929      	ldr	r1, [pc, #164]	; (800e2c4 <HAL_RCC_ClockConfig+0x260>)
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	4313      	orrs	r3, r2
 800e222:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e224:	f7fb f89c 	bl	8009360 <HAL_GetTick>
 800e228:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e22a:	e00a      	b.n	800e242 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e22c:	f7fb f898 	bl	8009360 <HAL_GetTick>
 800e230:	4602      	mov	r2, r0
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	1ad3      	subs	r3, r2, r3
 800e236:	f241 3288 	movw	r2, #5000	; 0x1388
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d901      	bls.n	800e242 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800e23e:	2303      	movs	r3, #3
 800e240:	e03b      	b.n	800e2ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e242:	4b20      	ldr	r3, [pc, #128]	; (800e2c4 <HAL_RCC_ClockConfig+0x260>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f003 030f 	and.w	r3, r3, #15
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d1ed      	bne.n	800e22c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f003 0304 	and.w	r3, r3, #4
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d008      	beq.n	800e26e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e25c:	4b1a      	ldr	r3, [pc, #104]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	4917      	ldr	r1, [pc, #92]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e26a:	4313      	orrs	r3, r2
 800e26c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f003 0308 	and.w	r3, r3, #8
 800e276:	2b00      	cmp	r3, #0
 800e278:	d009      	beq.n	800e28e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e27a:	4b13      	ldr	r3, [pc, #76]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	00db      	lsls	r3, r3, #3
 800e288:	490f      	ldr	r1, [pc, #60]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e28a:	4313      	orrs	r3, r2
 800e28c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e28e:	f000 f825 	bl	800e2dc <HAL_RCC_GetSysClockFreq>
 800e292:	4602      	mov	r2, r0
 800e294:	4b0c      	ldr	r3, [pc, #48]	; (800e2c8 <HAL_RCC_ClockConfig+0x264>)
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	091b      	lsrs	r3, r3, #4
 800e29a:	f003 030f 	and.w	r3, r3, #15
 800e29e:	490c      	ldr	r1, [pc, #48]	; (800e2d0 <HAL_RCC_ClockConfig+0x26c>)
 800e2a0:	5ccb      	ldrb	r3, [r1, r3]
 800e2a2:	f003 031f 	and.w	r3, r3, #31
 800e2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800e2aa:	4a0a      	ldr	r2, [pc, #40]	; (800e2d4 <HAL_RCC_ClockConfig+0x270>)
 800e2ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e2ae:	4b0a      	ldr	r3, [pc, #40]	; (800e2d8 <HAL_RCC_ClockConfig+0x274>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fa fe02 	bl	8008ebc <HAL_InitTick>
 800e2b8:	4603      	mov	r3, r0
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3718      	adds	r7, #24
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	40022000 	.word	0x40022000
 800e2c8:	40021000 	.word	0x40021000
 800e2cc:	04c4b400 	.word	0x04c4b400
 800e2d0:	080236bc 	.word	0x080236bc
 800e2d4:	20000008 	.word	0x20000008
 800e2d8:	2000000c 	.word	0x2000000c

0800e2dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b087      	sub	sp, #28
 800e2e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e2e2:	4b2c      	ldr	r3, [pc, #176]	; (800e394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	f003 030c 	and.w	r3, r3, #12
 800e2ea:	2b04      	cmp	r3, #4
 800e2ec:	d102      	bne.n	800e2f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e2ee:	4b2a      	ldr	r3, [pc, #168]	; (800e398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e2f0:	613b      	str	r3, [r7, #16]
 800e2f2:	e047      	b.n	800e384 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e2f4:	4b27      	ldr	r3, [pc, #156]	; (800e394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	f003 030c 	and.w	r3, r3, #12
 800e2fc:	2b08      	cmp	r3, #8
 800e2fe:	d102      	bne.n	800e306 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e300:	4b26      	ldr	r3, [pc, #152]	; (800e39c <HAL_RCC_GetSysClockFreq+0xc0>)
 800e302:	613b      	str	r3, [r7, #16]
 800e304:	e03e      	b.n	800e384 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800e306:	4b23      	ldr	r3, [pc, #140]	; (800e394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e308:	689b      	ldr	r3, [r3, #8]
 800e30a:	f003 030c 	and.w	r3, r3, #12
 800e30e:	2b0c      	cmp	r3, #12
 800e310:	d136      	bne.n	800e380 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e312:	4b20      	ldr	r3, [pc, #128]	; (800e394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	f003 0303 	and.w	r3, r3, #3
 800e31a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e31c:	4b1d      	ldr	r3, [pc, #116]	; (800e394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	091b      	lsrs	r3, r3, #4
 800e322:	f003 030f 	and.w	r3, r3, #15
 800e326:	3301      	adds	r3, #1
 800e328:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b03      	cmp	r3, #3
 800e32e:	d10c      	bne.n	800e34a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e330:	4a1a      	ldr	r2, [pc, #104]	; (800e39c <HAL_RCC_GetSysClockFreq+0xc0>)
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	fbb2 f3f3 	udiv	r3, r2, r3
 800e338:	4a16      	ldr	r2, [pc, #88]	; (800e394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e33a:	68d2      	ldr	r2, [r2, #12]
 800e33c:	0a12      	lsrs	r2, r2, #8
 800e33e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e342:	fb02 f303 	mul.w	r3, r2, r3
 800e346:	617b      	str	r3, [r7, #20]
      break;
 800e348:	e00c      	b.n	800e364 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e34a:	4a13      	ldr	r2, [pc, #76]	; (800e398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e352:	4a10      	ldr	r2, [pc, #64]	; (800e394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e354:	68d2      	ldr	r2, [r2, #12]
 800e356:	0a12      	lsrs	r2, r2, #8
 800e358:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e35c:	fb02 f303 	mul.w	r3, r2, r3
 800e360:	617b      	str	r3, [r7, #20]
      break;
 800e362:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e364:	4b0b      	ldr	r3, [pc, #44]	; (800e394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	0e5b      	lsrs	r3, r3, #25
 800e36a:	f003 0303 	and.w	r3, r3, #3
 800e36e:	3301      	adds	r3, #1
 800e370:	005b      	lsls	r3, r3, #1
 800e372:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800e374:	697a      	ldr	r2, [r7, #20]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	fbb2 f3f3 	udiv	r3, r2, r3
 800e37c:	613b      	str	r3, [r7, #16]
 800e37e:	e001      	b.n	800e384 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800e380:	2300      	movs	r3, #0
 800e382:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e384:	693b      	ldr	r3, [r7, #16]
}
 800e386:	4618      	mov	r0, r3
 800e388:	371c      	adds	r7, #28
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	40021000 	.word	0x40021000
 800e398:	00f42400 	.word	0x00f42400
 800e39c:	007a1200 	.word	0x007a1200

0800e3a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e3a4:	4b03      	ldr	r3, [pc, #12]	; (800e3b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	20000008 	.word	0x20000008

0800e3b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e3bc:	f7ff fff0 	bl	800e3a0 <HAL_RCC_GetHCLKFreq>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	4b06      	ldr	r3, [pc, #24]	; (800e3dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	0a1b      	lsrs	r3, r3, #8
 800e3c8:	f003 0307 	and.w	r3, r3, #7
 800e3cc:	4904      	ldr	r1, [pc, #16]	; (800e3e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e3ce:	5ccb      	ldrb	r3, [r1, r3]
 800e3d0:	f003 031f 	and.w	r3, r3, #31
 800e3d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	40021000 	.word	0x40021000
 800e3e0:	080236cc 	.word	0x080236cc

0800e3e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e3e8:	f7ff ffda 	bl	800e3a0 <HAL_RCC_GetHCLKFreq>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	4b06      	ldr	r3, [pc, #24]	; (800e408 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	0adb      	lsrs	r3, r3, #11
 800e3f4:	f003 0307 	and.w	r3, r3, #7
 800e3f8:	4904      	ldr	r1, [pc, #16]	; (800e40c <HAL_RCC_GetPCLK2Freq+0x28>)
 800e3fa:	5ccb      	ldrb	r3, [r1, r3]
 800e3fc:	f003 031f 	and.w	r3, r3, #31
 800e400:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e404:	4618      	mov	r0, r3
 800e406:	bd80      	pop	{r7, pc}
 800e408:	40021000 	.word	0x40021000
 800e40c:	080236cc 	.word	0x080236cc

0800e410 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	220f      	movs	r2, #15
 800e41e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800e420:	4b12      	ldr	r3, [pc, #72]	; (800e46c <HAL_RCC_GetClockConfig+0x5c>)
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	f003 0203 	and.w	r2, r3, #3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800e42c:	4b0f      	ldr	r3, [pc, #60]	; (800e46c <HAL_RCC_GetClockConfig+0x5c>)
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800e438:	4b0c      	ldr	r3, [pc, #48]	; (800e46c <HAL_RCC_GetClockConfig+0x5c>)
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800e444:	4b09      	ldr	r3, [pc, #36]	; (800e46c <HAL_RCC_GetClockConfig+0x5c>)
 800e446:	689b      	ldr	r3, [r3, #8]
 800e448:	08db      	lsrs	r3, r3, #3
 800e44a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800e452:	4b07      	ldr	r3, [pc, #28]	; (800e470 <HAL_RCC_GetClockConfig+0x60>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f003 020f 	and.w	r2, r3, #15
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	601a      	str	r2, [r3, #0]
}
 800e45e:	bf00      	nop
 800e460:	370c      	adds	r7, #12
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	40021000 	.word	0x40021000
 800e470:	40022000 	.word	0x40022000

0800e474 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e474:	b480      	push	{r7}
 800e476:	b087      	sub	sp, #28
 800e478:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e47a:	4b1e      	ldr	r3, [pc, #120]	; (800e4f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	f003 0303 	and.w	r3, r3, #3
 800e482:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e484:	4b1b      	ldr	r3, [pc, #108]	; (800e4f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	091b      	lsrs	r3, r3, #4
 800e48a:	f003 030f 	and.w	r3, r3, #15
 800e48e:	3301      	adds	r3, #1
 800e490:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	2b03      	cmp	r3, #3
 800e496:	d10c      	bne.n	800e4b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e498:	4a17      	ldr	r2, [pc, #92]	; (800e4f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a0:	4a14      	ldr	r2, [pc, #80]	; (800e4f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e4a2:	68d2      	ldr	r2, [r2, #12]
 800e4a4:	0a12      	lsrs	r2, r2, #8
 800e4a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e4aa:	fb02 f303 	mul.w	r3, r2, r3
 800e4ae:	617b      	str	r3, [r7, #20]
    break;
 800e4b0:	e00c      	b.n	800e4cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e4b2:	4a12      	ldr	r2, [pc, #72]	; (800e4fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ba:	4a0e      	ldr	r2, [pc, #56]	; (800e4f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e4bc:	68d2      	ldr	r2, [r2, #12]
 800e4be:	0a12      	lsrs	r2, r2, #8
 800e4c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e4c4:	fb02 f303 	mul.w	r3, r2, r3
 800e4c8:	617b      	str	r3, [r7, #20]
    break;
 800e4ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e4cc:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	0e5b      	lsrs	r3, r3, #25
 800e4d2:	f003 0303 	and.w	r3, r3, #3
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e4e6:	687b      	ldr	r3, [r7, #4]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	371c      	adds	r7, #28
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr
 800e4f4:	40021000 	.word	0x40021000
 800e4f8:	007a1200 	.word	0x007a1200
 800e4fc:	00f42400 	.word	0x00f42400

0800e500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b086      	sub	sp, #24
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e508:	2300      	movs	r3, #0
 800e50a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e50c:	2300      	movs	r3, #0
 800e50e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f000 8098 	beq.w	800e64e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e51e:	2300      	movs	r3, #0
 800e520:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e522:	4b43      	ldr	r3, [pc, #268]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10d      	bne.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e52e:	4b40      	ldr	r3, [pc, #256]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e532:	4a3f      	ldr	r2, [pc, #252]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e538:	6593      	str	r3, [r2, #88]	; 0x58
 800e53a:	4b3d      	ldr	r3, [pc, #244]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e542:	60bb      	str	r3, [r7, #8]
 800e544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e546:	2301      	movs	r3, #1
 800e548:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e54a:	4b3a      	ldr	r3, [pc, #232]	; (800e634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a39      	ldr	r2, [pc, #228]	; (800e634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e554:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e556:	f7fa ff03 	bl	8009360 <HAL_GetTick>
 800e55a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e55c:	e009      	b.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e55e:	f7fa feff 	bl	8009360 <HAL_GetTick>
 800e562:	4602      	mov	r2, r0
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	2b02      	cmp	r3, #2
 800e56a:	d902      	bls.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e56c:	2303      	movs	r3, #3
 800e56e:	74fb      	strb	r3, [r7, #19]
        break;
 800e570:	e005      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e572:	4b30      	ldr	r3, [pc, #192]	; (800e634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d0ef      	beq.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e57e:	7cfb      	ldrb	r3, [r7, #19]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d159      	bne.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e584:	4b2a      	ldr	r3, [pc, #168]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e58a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e58e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d01e      	beq.n	800e5d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e59a:	697a      	ldr	r2, [r7, #20]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d019      	beq.n	800e5d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e5a0:	4b23      	ldr	r3, [pc, #140]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e5ac:	4b20      	ldr	r3, [pc, #128]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5b2:	4a1f      	ldr	r2, [pc, #124]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e5b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e5b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e5bc:	4b1c      	ldr	r3, [pc, #112]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c2:	4a1b      	ldr	r2, [pc, #108]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e5c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e5cc:	4a18      	ldr	r2, [pc, #96]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	f003 0301 	and.w	r3, r3, #1
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d016      	beq.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5de:	f7fa febf 	bl	8009360 <HAL_GetTick>
 800e5e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e5e4:	e00b      	b.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5e6:	f7fa febb 	bl	8009360 <HAL_GetTick>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	1ad3      	subs	r3, r2, r3
 800e5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d902      	bls.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	74fb      	strb	r3, [r7, #19]
            break;
 800e5fc:	e006      	b.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e5fe:	4b0c      	ldr	r3, [pc, #48]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e604:	f003 0302 	and.w	r3, r3, #2
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d0ec      	beq.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e60c:	7cfb      	ldrb	r3, [r7, #19]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10b      	bne.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e612:	4b07      	ldr	r3, [pc, #28]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e620:	4903      	ldr	r1, [pc, #12]	; (800e630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e622:	4313      	orrs	r3, r2
 800e624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e628:	e008      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e62a:	7cfb      	ldrb	r3, [r7, #19]
 800e62c:	74bb      	strb	r3, [r7, #18]
 800e62e:	e005      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e630:	40021000 	.word	0x40021000
 800e634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e638:	7cfb      	ldrb	r3, [r7, #19]
 800e63a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e63c:	7c7b      	ldrb	r3, [r7, #17]
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d105      	bne.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e642:	4ba7      	ldr	r3, [pc, #668]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e646:	4aa6      	ldr	r2, [pc, #664]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e64c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f003 0301 	and.w	r3, r3, #1
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00a      	beq.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e65a:	4ba1      	ldr	r3, [pc, #644]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e660:	f023 0203 	bic.w	r2, r3, #3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	499d      	ldr	r1, [pc, #628]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e66a:	4313      	orrs	r3, r2
 800e66c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f003 0302 	and.w	r3, r3, #2
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00a      	beq.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e67c:	4b98      	ldr	r3, [pc, #608]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e682:	f023 020c 	bic.w	r2, r3, #12
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	4995      	ldr	r1, [pc, #596]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e68c:	4313      	orrs	r3, r2
 800e68e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f003 0304 	and.w	r3, r3, #4
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00a      	beq.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e69e:	4b90      	ldr	r3, [pc, #576]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	498c      	ldr	r1, [pc, #560]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f003 0308 	and.w	r3, r3, #8
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00a      	beq.n	800e6d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e6c0:	4b87      	ldr	r3, [pc, #540]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	691b      	ldr	r3, [r3, #16]
 800e6ce:	4984      	ldr	r1, [pc, #528]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f003 0310 	and.w	r3, r3, #16
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00a      	beq.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e6e2:	4b7f      	ldr	r3, [pc, #508]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	695b      	ldr	r3, [r3, #20]
 800e6f0:	497b      	ldr	r1, [pc, #492]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f003 0320 	and.w	r3, r3, #32
 800e700:	2b00      	cmp	r3, #0
 800e702:	d00a      	beq.n	800e71a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e704:	4b76      	ldr	r3, [pc, #472]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e70a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	699b      	ldr	r3, [r3, #24]
 800e712:	4973      	ldr	r1, [pc, #460]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e714:	4313      	orrs	r3, r2
 800e716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00a      	beq.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e726:	4b6e      	ldr	r3, [pc, #440]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e72c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	69db      	ldr	r3, [r3, #28]
 800e734:	496a      	ldr	r1, [pc, #424]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e736:	4313      	orrs	r3, r2
 800e738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00a      	beq.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e748:	4b65      	ldr	r3, [pc, #404]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e74e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6a1b      	ldr	r3, [r3, #32]
 800e756:	4962      	ldr	r1, [pc, #392]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e758:	4313      	orrs	r3, r2
 800e75a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00a      	beq.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e76a:	4b5d      	ldr	r3, [pc, #372]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e778:	4959      	ldr	r1, [pc, #356]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e77a:	4313      	orrs	r3, r2
 800e77c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00a      	beq.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e78c:	4b54      	ldr	r3, [pc, #336]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e78e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e792:	f023 0203 	bic.w	r2, r3, #3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e79a:	4951      	ldr	r1, [pc, #324]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e79c:	4313      	orrs	r3, r2
 800e79e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00a      	beq.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e7ae:	4b4c      	ldr	r3, [pc, #304]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7bc:	4948      	ldr	r1, [pc, #288]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7be:	4313      	orrs	r3, r2
 800e7c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d015      	beq.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e7d0:	4b43      	ldr	r3, [pc, #268]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7de:	4940      	ldr	r1, [pc, #256]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7ee:	d105      	bne.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e7f0:	4b3b      	ldr	r3, [pc, #236]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	4a3a      	ldr	r2, [pc, #232]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e804:	2b00      	cmp	r3, #0
 800e806:	d015      	beq.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e808:	4b35      	ldr	r3, [pc, #212]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e80e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e816:	4932      	ldr	r1, [pc, #200]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e818:	4313      	orrs	r3, r2
 800e81a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e826:	d105      	bne.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e828:	4b2d      	ldr	r3, [pc, #180]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	4a2c      	ldr	r2, [pc, #176]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e82e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e832:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d015      	beq.n	800e86c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e840:	4b27      	ldr	r3, [pc, #156]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e846:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e84e:	4924      	ldr	r1, [pc, #144]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e850:	4313      	orrs	r3, r2
 800e852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e85a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e85e:	d105      	bne.n	800e86c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e860:	4b1f      	ldr	r3, [pc, #124]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	4a1e      	ldr	r2, [pc, #120]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e86a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e874:	2b00      	cmp	r3, #0
 800e876:	d015      	beq.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e878:	4b19      	ldr	r3, [pc, #100]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e87e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e886:	4916      	ldr	r1, [pc, #88]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e888:	4313      	orrs	r3, r2
 800e88a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e896:	d105      	bne.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e898:	4b11      	ldr	r3, [pc, #68]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	4a10      	ldr	r2, [pc, #64]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e89e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d019      	beq.n	800e8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e8b0:	4b0b      	ldr	r3, [pc, #44]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8be:	4908      	ldr	r1, [pc, #32]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e8ce:	d109      	bne.n	800e8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e8d0:	4b03      	ldr	r3, [pc, #12]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	4a02      	ldr	r2, [pc, #8]	; (800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e8d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8da:	60d3      	str	r3, [r2, #12]
 800e8dc:	e002      	b.n	800e8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e8de:	bf00      	nop
 800e8e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d015      	beq.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e8f0:	4b29      	ldr	r3, [pc, #164]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8fe:	4926      	ldr	r1, [pc, #152]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e900:	4313      	orrs	r3, r2
 800e902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e90a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e90e:	d105      	bne.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e910:	4b21      	ldr	r3, [pc, #132]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	4a20      	ldr	r2, [pc, #128]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e91a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e924:	2b00      	cmp	r3, #0
 800e926:	d015      	beq.n	800e954 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e928:	4b1b      	ldr	r3, [pc, #108]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e92e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e936:	4918      	ldr	r1, [pc, #96]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e938:	4313      	orrs	r3, r2
 800e93a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e946:	d105      	bne.n	800e954 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e948:	4b13      	ldr	r3, [pc, #76]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	4a12      	ldr	r2, [pc, #72]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e94e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e952:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d015      	beq.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e960:	4b0d      	ldr	r3, [pc, #52]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e96e:	490a      	ldr	r1, [pc, #40]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e970:	4313      	orrs	r3, r2
 800e972:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e97a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e97e:	d105      	bne.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e980:	4b05      	ldr	r3, [pc, #20]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	4a04      	ldr	r2, [pc, #16]	; (800e998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e98a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e98c:	7cbb      	ldrb	r3, [r7, #18]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	40021000 	.word	0x40021000

0800e99c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e049      	b.n	800ea42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d106      	bne.n	800e9c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f7fa f81a 	bl	80089fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2202      	movs	r2, #2
 800e9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3304      	adds	r3, #4
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	f000 fdc4 	bl	800f568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
	...

0800ea4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d001      	beq.n	800ea64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ea60:	2301      	movs	r3, #1
 800ea62:	e054      	b.n	800eb0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2202      	movs	r2, #2
 800ea68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	68da      	ldr	r2, [r3, #12]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f042 0201 	orr.w	r2, r2, #1
 800ea7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a26      	ldr	r2, [pc, #152]	; (800eb1c <HAL_TIM_Base_Start_IT+0xd0>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d022      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea8e:	d01d      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a22      	ldr	r2, [pc, #136]	; (800eb20 <HAL_TIM_Base_Start_IT+0xd4>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d018      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4a21      	ldr	r2, [pc, #132]	; (800eb24 <HAL_TIM_Base_Start_IT+0xd8>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d013      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a1f      	ldr	r2, [pc, #124]	; (800eb28 <HAL_TIM_Base_Start_IT+0xdc>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d00e      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4a1e      	ldr	r2, [pc, #120]	; (800eb2c <HAL_TIM_Base_Start_IT+0xe0>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d009      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a1c      	ldr	r2, [pc, #112]	; (800eb30 <HAL_TIM_Base_Start_IT+0xe4>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d004      	beq.n	800eacc <HAL_TIM_Base_Start_IT+0x80>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	4a1b      	ldr	r2, [pc, #108]	; (800eb34 <HAL_TIM_Base_Start_IT+0xe8>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d115      	bne.n	800eaf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	689a      	ldr	r2, [r3, #8]
 800ead2:	4b19      	ldr	r3, [pc, #100]	; (800eb38 <HAL_TIM_Base_Start_IT+0xec>)
 800ead4:	4013      	ands	r3, r2
 800ead6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2b06      	cmp	r3, #6
 800eadc:	d015      	beq.n	800eb0a <HAL_TIM_Base_Start_IT+0xbe>
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eae4:	d011      	beq.n	800eb0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f042 0201 	orr.w	r2, r2, #1
 800eaf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaf6:	e008      	b.n	800eb0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f042 0201 	orr.w	r2, r2, #1
 800eb06:	601a      	str	r2, [r3, #0]
 800eb08:	e000      	b.n	800eb0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3714      	adds	r7, #20
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop
 800eb1c:	40012c00 	.word	0x40012c00
 800eb20:	40000400 	.word	0x40000400
 800eb24:	40000800 	.word	0x40000800
 800eb28:	40000c00 	.word	0x40000c00
 800eb2c:	40013400 	.word	0x40013400
 800eb30:	40014000 	.word	0x40014000
 800eb34:	40015000 	.word	0x40015000
 800eb38:	00010007 	.word	0x00010007

0800eb3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d101      	bne.n	800eb4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e049      	b.n	800ebe2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d106      	bne.n	800eb68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 f841 	bl	800ebea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4610      	mov	r0, r2
 800eb7c:	f000 fcf4 	bl	800f568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2201      	movs	r2, #1
 800eba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ebea:	b480      	push	{r7}
 800ebec:	b083      	sub	sp, #12
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ebf2:	bf00      	nop
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
	...

0800ec00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d109      	bne.n	800ec24 <HAL_TIM_PWM_Start+0x24>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	bf14      	ite	ne
 800ec1c:	2301      	movne	r3, #1
 800ec1e:	2300      	moveq	r3, #0
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	e03c      	b.n	800ec9e <HAL_TIM_PWM_Start+0x9e>
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	2b04      	cmp	r3, #4
 800ec28:	d109      	bne.n	800ec3e <HAL_TIM_PWM_Start+0x3e>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	bf14      	ite	ne
 800ec36:	2301      	movne	r3, #1
 800ec38:	2300      	moveq	r3, #0
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	e02f      	b.n	800ec9e <HAL_TIM_PWM_Start+0x9e>
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	2b08      	cmp	r3, #8
 800ec42:	d109      	bne.n	800ec58 <HAL_TIM_PWM_Start+0x58>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	bf14      	ite	ne
 800ec50:	2301      	movne	r3, #1
 800ec52:	2300      	moveq	r3, #0
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	e022      	b.n	800ec9e <HAL_TIM_PWM_Start+0x9e>
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	2b0c      	cmp	r3, #12
 800ec5c:	d109      	bne.n	800ec72 <HAL_TIM_PWM_Start+0x72>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	bf14      	ite	ne
 800ec6a:	2301      	movne	r3, #1
 800ec6c:	2300      	moveq	r3, #0
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	e015      	b.n	800ec9e <HAL_TIM_PWM_Start+0x9e>
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	2b10      	cmp	r3, #16
 800ec76:	d109      	bne.n	800ec8c <HAL_TIM_PWM_Start+0x8c>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	bf14      	ite	ne
 800ec84:	2301      	movne	r3, #1
 800ec86:	2300      	moveq	r3, #0
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	e008      	b.n	800ec9e <HAL_TIM_PWM_Start+0x9e>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	bf14      	ite	ne
 800ec98:	2301      	movne	r3, #1
 800ec9a:	2300      	moveq	r3, #0
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d001      	beq.n	800eca6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800eca2:	2301      	movs	r3, #1
 800eca4:	e0a6      	b.n	800edf4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d104      	bne.n	800ecb6 <HAL_TIM_PWM_Start+0xb6>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2202      	movs	r2, #2
 800ecb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecb4:	e023      	b.n	800ecfe <HAL_TIM_PWM_Start+0xfe>
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b04      	cmp	r3, #4
 800ecba:	d104      	bne.n	800ecc6 <HAL_TIM_PWM_Start+0xc6>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2202      	movs	r2, #2
 800ecc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecc4:	e01b      	b.n	800ecfe <HAL_TIM_PWM_Start+0xfe>
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	2b08      	cmp	r3, #8
 800ecca:	d104      	bne.n	800ecd6 <HAL_TIM_PWM_Start+0xd6>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2202      	movs	r2, #2
 800ecd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecd4:	e013      	b.n	800ecfe <HAL_TIM_PWM_Start+0xfe>
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	2b0c      	cmp	r3, #12
 800ecda:	d104      	bne.n	800ece6 <HAL_TIM_PWM_Start+0xe6>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2202      	movs	r2, #2
 800ece0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ece4:	e00b      	b.n	800ecfe <HAL_TIM_PWM_Start+0xfe>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	2b10      	cmp	r3, #16
 800ecea:	d104      	bne.n	800ecf6 <HAL_TIM_PWM_Start+0xf6>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2202      	movs	r2, #2
 800ecf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ecf4:	e003      	b.n	800ecfe <HAL_TIM_PWM_Start+0xfe>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2202      	movs	r2, #2
 800ecfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2201      	movs	r2, #1
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f001 f8a8 	bl	800fe5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a3a      	ldr	r2, [pc, #232]	; (800edfc <HAL_TIM_PWM_Start+0x1fc>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d018      	beq.n	800ed48 <HAL_TIM_PWM_Start+0x148>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4a39      	ldr	r2, [pc, #228]	; (800ee00 <HAL_TIM_PWM_Start+0x200>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d013      	beq.n	800ed48 <HAL_TIM_PWM_Start+0x148>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a37      	ldr	r2, [pc, #220]	; (800ee04 <HAL_TIM_PWM_Start+0x204>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d00e      	beq.n	800ed48 <HAL_TIM_PWM_Start+0x148>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4a36      	ldr	r2, [pc, #216]	; (800ee08 <HAL_TIM_PWM_Start+0x208>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d009      	beq.n	800ed48 <HAL_TIM_PWM_Start+0x148>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a34      	ldr	r2, [pc, #208]	; (800ee0c <HAL_TIM_PWM_Start+0x20c>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d004      	beq.n	800ed48 <HAL_TIM_PWM_Start+0x148>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4a33      	ldr	r2, [pc, #204]	; (800ee10 <HAL_TIM_PWM_Start+0x210>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d101      	bne.n	800ed4c <HAL_TIM_PWM_Start+0x14c>
 800ed48:	2301      	movs	r3, #1
 800ed4a:	e000      	b.n	800ed4e <HAL_TIM_PWM_Start+0x14e>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d007      	beq.n	800ed62 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a25      	ldr	r2, [pc, #148]	; (800edfc <HAL_TIM_PWM_Start+0x1fc>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d022      	beq.n	800edb2 <HAL_TIM_PWM_Start+0x1b2>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed74:	d01d      	beq.n	800edb2 <HAL_TIM_PWM_Start+0x1b2>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a26      	ldr	r2, [pc, #152]	; (800ee14 <HAL_TIM_PWM_Start+0x214>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d018      	beq.n	800edb2 <HAL_TIM_PWM_Start+0x1b2>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a24      	ldr	r2, [pc, #144]	; (800ee18 <HAL_TIM_PWM_Start+0x218>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d013      	beq.n	800edb2 <HAL_TIM_PWM_Start+0x1b2>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a23      	ldr	r2, [pc, #140]	; (800ee1c <HAL_TIM_PWM_Start+0x21c>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d00e      	beq.n	800edb2 <HAL_TIM_PWM_Start+0x1b2>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a19      	ldr	r2, [pc, #100]	; (800ee00 <HAL_TIM_PWM_Start+0x200>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d009      	beq.n	800edb2 <HAL_TIM_PWM_Start+0x1b2>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4a18      	ldr	r2, [pc, #96]	; (800ee04 <HAL_TIM_PWM_Start+0x204>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d004      	beq.n	800edb2 <HAL_TIM_PWM_Start+0x1b2>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a18      	ldr	r2, [pc, #96]	; (800ee10 <HAL_TIM_PWM_Start+0x210>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d115      	bne.n	800edde <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	689a      	ldr	r2, [r3, #8]
 800edb8:	4b19      	ldr	r3, [pc, #100]	; (800ee20 <HAL_TIM_PWM_Start+0x220>)
 800edba:	4013      	ands	r3, r2
 800edbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b06      	cmp	r3, #6
 800edc2:	d015      	beq.n	800edf0 <HAL_TIM_PWM_Start+0x1f0>
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edca:	d011      	beq.n	800edf0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f042 0201 	orr.w	r2, r2, #1
 800edda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eddc:	e008      	b.n	800edf0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f042 0201 	orr.w	r2, r2, #1
 800edec:	601a      	str	r2, [r3, #0]
 800edee:	e000      	b.n	800edf2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3710      	adds	r7, #16
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	40012c00 	.word	0x40012c00
 800ee00:	40013400 	.word	0x40013400
 800ee04:	40014000 	.word	0x40014000
 800ee08:	40014400 	.word	0x40014400
 800ee0c:	40014800 	.word	0x40014800
 800ee10:	40015000 	.word	0x40015000
 800ee14:	40000400 	.word	0x40000400
 800ee18:	40000800 	.word	0x40000800
 800ee1c:	40000c00 	.word	0x40000c00
 800ee20:	00010007 	.word	0x00010007

0800ee24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	691b      	ldr	r3, [r3, #16]
 800ee3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	f003 0302 	and.w	r3, r3, #2
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d020      	beq.n	800ee88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f003 0302 	and.w	r3, r3, #2
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d01b      	beq.n	800ee88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f06f 0202 	mvn.w	r2, #2
 800ee58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	699b      	ldr	r3, [r3, #24]
 800ee66:	f003 0303 	and.w	r3, r3, #3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d003      	beq.n	800ee76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 fb5c 	bl	800f52c <HAL_TIM_IC_CaptureCallback>
 800ee74:	e005      	b.n	800ee82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 fb4e 	bl	800f518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 fb5f 	bl	800f540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	f003 0304 	and.w	r3, r3, #4
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d020      	beq.n	800eed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f003 0304 	and.w	r3, r3, #4
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d01b      	beq.n	800eed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f06f 0204 	mvn.w	r2, #4
 800eea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2202      	movs	r2, #2
 800eeaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d003      	beq.n	800eec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 fb36 	bl	800f52c <HAL_TIM_IC_CaptureCallback>
 800eec0:	e005      	b.n	800eece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 fb28 	bl	800f518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 fb39 	bl	800f540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	f003 0308 	and.w	r3, r3, #8
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d020      	beq.n	800ef20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	f003 0308 	and.w	r3, r3, #8
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d01b      	beq.n	800ef20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f06f 0208 	mvn.w	r2, #8
 800eef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2204      	movs	r2, #4
 800eef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	69db      	ldr	r3, [r3, #28]
 800eefe:	f003 0303 	and.w	r3, r3, #3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d003      	beq.n	800ef0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fb10 	bl	800f52c <HAL_TIM_IC_CaptureCallback>
 800ef0c:	e005      	b.n	800ef1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 fb02 	bl	800f518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fb13 	bl	800f540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	f003 0310 	and.w	r3, r3, #16
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d020      	beq.n	800ef6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f003 0310 	and.w	r3, r3, #16
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d01b      	beq.n	800ef6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f06f 0210 	mvn.w	r2, #16
 800ef3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2208      	movs	r2, #8
 800ef42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	69db      	ldr	r3, [r3, #28]
 800ef4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d003      	beq.n	800ef5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 faea 	bl	800f52c <HAL_TIM_IC_CaptureCallback>
 800ef58:	e005      	b.n	800ef66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 fadc 	bl	800f518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 faed 	bl	800f540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	f003 0301 	and.w	r3, r3, #1
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00c      	beq.n	800ef90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f003 0301 	and.w	r3, r3, #1
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d007      	beq.n	800ef90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f06f 0201 	mvn.w	r2, #1
 800ef88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f7f9 fa78 	bl	8008480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d104      	bne.n	800efa4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00c      	beq.n	800efbe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d007      	beq.n	800efbe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800efb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f001 f815 	bl	800ffe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00c      	beq.n	800efe2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d007      	beq.n	800efe2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800efda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f001 f80d 	bl	800fffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00c      	beq.n	800f006 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d007      	beq.n	800f006 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800effe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 faa7 	bl	800f554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	f003 0320 	and.w	r3, r3, #32
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00c      	beq.n	800f02a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f003 0320 	and.w	r3, r3, #32
 800f016:	2b00      	cmp	r3, #0
 800f018:	d007      	beq.n	800f02a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f06f 0220 	mvn.w	r2, #32
 800f022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 ffd5 	bl	800ffd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f030:	2b00      	cmp	r3, #0
 800f032:	d00c      	beq.n	800f04e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d007      	beq.n	800f04e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800f046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 ffe1 	bl	8010010 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f054:	2b00      	cmp	r3, #0
 800f056:	d00c      	beq.n	800f072 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d007      	beq.n	800f072 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800f06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 ffd9 	bl	8010024 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d00c      	beq.n	800f096 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f082:	2b00      	cmp	r3, #0
 800f084:	d007      	beq.n	800f096 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800f08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 ffd1 	bl	8010038 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00c      	beq.n	800f0ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d007      	beq.n	800f0ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800f0b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 ffc9 	bl	801004c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f0ba:	bf00      	nop
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
	...

0800f0c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b086      	sub	sp, #24
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d101      	bne.n	800f0e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f0de:	2302      	movs	r3, #2
 800f0e0:	e0ff      	b.n	800f2e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b14      	cmp	r3, #20
 800f0ee:	f200 80f0 	bhi.w	800f2d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f0f2:	a201      	add	r2, pc, #4	; (adr r2, 800f0f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f8:	0800f14d 	.word	0x0800f14d
 800f0fc:	0800f2d3 	.word	0x0800f2d3
 800f100:	0800f2d3 	.word	0x0800f2d3
 800f104:	0800f2d3 	.word	0x0800f2d3
 800f108:	0800f18d 	.word	0x0800f18d
 800f10c:	0800f2d3 	.word	0x0800f2d3
 800f110:	0800f2d3 	.word	0x0800f2d3
 800f114:	0800f2d3 	.word	0x0800f2d3
 800f118:	0800f1cf 	.word	0x0800f1cf
 800f11c:	0800f2d3 	.word	0x0800f2d3
 800f120:	0800f2d3 	.word	0x0800f2d3
 800f124:	0800f2d3 	.word	0x0800f2d3
 800f128:	0800f20f 	.word	0x0800f20f
 800f12c:	0800f2d3 	.word	0x0800f2d3
 800f130:	0800f2d3 	.word	0x0800f2d3
 800f134:	0800f2d3 	.word	0x0800f2d3
 800f138:	0800f251 	.word	0x0800f251
 800f13c:	0800f2d3 	.word	0x0800f2d3
 800f140:	0800f2d3 	.word	0x0800f2d3
 800f144:	0800f2d3 	.word	0x0800f2d3
 800f148:	0800f291 	.word	0x0800f291
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68b9      	ldr	r1, [r7, #8]
 800f152:	4618      	mov	r0, r3
 800f154:	f000 fabc 	bl	800f6d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	699a      	ldr	r2, [r3, #24]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f042 0208 	orr.w	r2, r2, #8
 800f166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	699a      	ldr	r2, [r3, #24]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f022 0204 	bic.w	r2, r2, #4
 800f176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	6999      	ldr	r1, [r3, #24]
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	691a      	ldr	r2, [r3, #16]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	430a      	orrs	r2, r1
 800f188:	619a      	str	r2, [r3, #24]
      break;
 800f18a:	e0a5      	b.n	800f2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	68b9      	ldr	r1, [r7, #8]
 800f192:	4618      	mov	r0, r3
 800f194:	f000 fb36 	bl	800f804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	699a      	ldr	r2, [r3, #24]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	699a      	ldr	r2, [r3, #24]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	6999      	ldr	r1, [r3, #24]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	021a      	lsls	r2, r3, #8
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	430a      	orrs	r2, r1
 800f1ca:	619a      	str	r2, [r3, #24]
      break;
 800f1cc:	e084      	b.n	800f2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	68b9      	ldr	r1, [r7, #8]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 fba9 	bl	800f92c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	69da      	ldr	r2, [r3, #28]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f042 0208 	orr.w	r2, r2, #8
 800f1e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	69da      	ldr	r2, [r3, #28]
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f022 0204 	bic.w	r2, r2, #4
 800f1f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	69d9      	ldr	r1, [r3, #28]
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	691a      	ldr	r2, [r3, #16]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	430a      	orrs	r2, r1
 800f20a:	61da      	str	r2, [r3, #28]
      break;
 800f20c:	e064      	b.n	800f2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68b9      	ldr	r1, [r7, #8]
 800f214:	4618      	mov	r0, r3
 800f216:	f000 fc1b 	bl	800fa50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	69da      	ldr	r2, [r3, #28]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	69da      	ldr	r2, [r3, #28]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	69d9      	ldr	r1, [r3, #28]
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	691b      	ldr	r3, [r3, #16]
 800f244:	021a      	lsls	r2, r3, #8
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	430a      	orrs	r2, r1
 800f24c:	61da      	str	r2, [r3, #28]
      break;
 800f24e:	e043      	b.n	800f2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68b9      	ldr	r1, [r7, #8]
 800f256:	4618      	mov	r0, r3
 800f258:	f000 fc8e 	bl	800fb78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f042 0208 	orr.w	r2, r2, #8
 800f26a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f022 0204 	bic.w	r2, r2, #4
 800f27a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	691a      	ldr	r2, [r3, #16]
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	430a      	orrs	r2, r1
 800f28c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800f28e:	e023      	b.n	800f2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	68b9      	ldr	r1, [r7, #8]
 800f296:	4618      	mov	r0, r3
 800f298:	f000 fcd8 	bl	800fc4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	021a      	lsls	r2, r3, #8
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	430a      	orrs	r2, r1
 800f2ce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800f2d0:	e002      	b.n	800f2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	75fb      	strb	r3, [r7, #23]
      break;
 800f2d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3718      	adds	r7, #24
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop

0800f2ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f300:	2b01      	cmp	r3, #1
 800f302:	d101      	bne.n	800f308 <HAL_TIM_ConfigClockSource+0x1c>
 800f304:	2302      	movs	r3, #2
 800f306:	e0f6      	b.n	800f4f6 <HAL_TIM_ConfigClockSource+0x20a>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2201      	movs	r2, #1
 800f30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2202      	movs	r2, #2
 800f314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	689b      	ldr	r3, [r3, #8]
 800f31e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800f326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f32a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	68ba      	ldr	r2, [r7, #8]
 800f33a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a6f      	ldr	r2, [pc, #444]	; (800f500 <HAL_TIM_ConfigClockSource+0x214>)
 800f342:	4293      	cmp	r3, r2
 800f344:	f000 80c1 	beq.w	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f348:	4a6d      	ldr	r2, [pc, #436]	; (800f500 <HAL_TIM_ConfigClockSource+0x214>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	f200 80c6 	bhi.w	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f350:	4a6c      	ldr	r2, [pc, #432]	; (800f504 <HAL_TIM_ConfigClockSource+0x218>)
 800f352:	4293      	cmp	r3, r2
 800f354:	f000 80b9 	beq.w	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f358:	4a6a      	ldr	r2, [pc, #424]	; (800f504 <HAL_TIM_ConfigClockSource+0x218>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	f200 80be 	bhi.w	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f360:	4a69      	ldr	r2, [pc, #420]	; (800f508 <HAL_TIM_ConfigClockSource+0x21c>)
 800f362:	4293      	cmp	r3, r2
 800f364:	f000 80b1 	beq.w	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f368:	4a67      	ldr	r2, [pc, #412]	; (800f508 <HAL_TIM_ConfigClockSource+0x21c>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	f200 80b6 	bhi.w	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f370:	4a66      	ldr	r2, [pc, #408]	; (800f50c <HAL_TIM_ConfigClockSource+0x220>)
 800f372:	4293      	cmp	r3, r2
 800f374:	f000 80a9 	beq.w	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f378:	4a64      	ldr	r2, [pc, #400]	; (800f50c <HAL_TIM_ConfigClockSource+0x220>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	f200 80ae 	bhi.w	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f380:	4a63      	ldr	r2, [pc, #396]	; (800f510 <HAL_TIM_ConfigClockSource+0x224>)
 800f382:	4293      	cmp	r3, r2
 800f384:	f000 80a1 	beq.w	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f388:	4a61      	ldr	r2, [pc, #388]	; (800f510 <HAL_TIM_ConfigClockSource+0x224>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	f200 80a6 	bhi.w	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f390:	4a60      	ldr	r2, [pc, #384]	; (800f514 <HAL_TIM_ConfigClockSource+0x228>)
 800f392:	4293      	cmp	r3, r2
 800f394:	f000 8099 	beq.w	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f398:	4a5e      	ldr	r2, [pc, #376]	; (800f514 <HAL_TIM_ConfigClockSource+0x228>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	f200 809e 	bhi.w	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f3a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3a4:	f000 8091 	beq.w	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f3a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3ac:	f200 8096 	bhi.w	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f3b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3b4:	f000 8089 	beq.w	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f3b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3bc:	f200 808e 	bhi.w	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f3c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3c4:	d03e      	beq.n	800f444 <HAL_TIM_ConfigClockSource+0x158>
 800f3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3ca:	f200 8087 	bhi.w	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3d2:	f000 8086 	beq.w	800f4e2 <HAL_TIM_ConfigClockSource+0x1f6>
 800f3d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3da:	d87f      	bhi.n	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f3dc:	2b70      	cmp	r3, #112	; 0x70
 800f3de:	d01a      	beq.n	800f416 <HAL_TIM_ConfigClockSource+0x12a>
 800f3e0:	2b70      	cmp	r3, #112	; 0x70
 800f3e2:	d87b      	bhi.n	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f3e4:	2b60      	cmp	r3, #96	; 0x60
 800f3e6:	d050      	beq.n	800f48a <HAL_TIM_ConfigClockSource+0x19e>
 800f3e8:	2b60      	cmp	r3, #96	; 0x60
 800f3ea:	d877      	bhi.n	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f3ec:	2b50      	cmp	r3, #80	; 0x50
 800f3ee:	d03c      	beq.n	800f46a <HAL_TIM_ConfigClockSource+0x17e>
 800f3f0:	2b50      	cmp	r3, #80	; 0x50
 800f3f2:	d873      	bhi.n	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f3f4:	2b40      	cmp	r3, #64	; 0x40
 800f3f6:	d058      	beq.n	800f4aa <HAL_TIM_ConfigClockSource+0x1be>
 800f3f8:	2b40      	cmp	r3, #64	; 0x40
 800f3fa:	d86f      	bhi.n	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f3fc:	2b30      	cmp	r3, #48	; 0x30
 800f3fe:	d064      	beq.n	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f400:	2b30      	cmp	r3, #48	; 0x30
 800f402:	d86b      	bhi.n	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f404:	2b20      	cmp	r3, #32
 800f406:	d060      	beq.n	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f408:	2b20      	cmp	r3, #32
 800f40a:	d867      	bhi.n	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d05c      	beq.n	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f410:	2b10      	cmp	r3, #16
 800f412:	d05a      	beq.n	800f4ca <HAL_TIM_ConfigClockSource+0x1de>
 800f414:	e062      	b.n	800f4dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f426:	f000 fcf9 	bl	800fe1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	68ba      	ldr	r2, [r7, #8]
 800f440:	609a      	str	r2, [r3, #8]
      break;
 800f442:	e04f      	b.n	800f4e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f454:	f000 fce2 	bl	800fe1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	689a      	ldr	r2, [r3, #8]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f466:	609a      	str	r2, [r3, #8]
      break;
 800f468:	e03c      	b.n	800f4e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f476:	461a      	mov	r2, r3
 800f478:	f000 fc54 	bl	800fd24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	2150      	movs	r1, #80	; 0x50
 800f482:	4618      	mov	r0, r3
 800f484:	f000 fcad 	bl	800fde2 <TIM_ITRx_SetConfig>
      break;
 800f488:	e02c      	b.n	800f4e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f496:	461a      	mov	r2, r3
 800f498:	f000 fc73 	bl	800fd82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2160      	movs	r1, #96	; 0x60
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 fc9d 	bl	800fde2 <TIM_ITRx_SetConfig>
      break;
 800f4a8:	e01c      	b.n	800f4e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	f000 fc34 	bl	800fd24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2140      	movs	r1, #64	; 0x40
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 fc8d 	bl	800fde2 <TIM_ITRx_SetConfig>
      break;
 800f4c8:	e00c      	b.n	800f4e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	4610      	mov	r0, r2
 800f4d6:	f000 fc84 	bl	800fde2 <TIM_ITRx_SetConfig>
      break;
 800f4da:	e003      	b.n	800f4e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	73fb      	strb	r3, [r7, #15]
      break;
 800f4e0:	e000      	b.n	800f4e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800f4e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	00100070 	.word	0x00100070
 800f504:	00100060 	.word	0x00100060
 800f508:	00100050 	.word	0x00100050
 800f50c:	00100040 	.word	0x00100040
 800f510:	00100030 	.word	0x00100030
 800f514:	00100020 	.word	0x00100020

0800f518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f520:	bf00      	nop
 800f522:	370c      	adds	r7, #12
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f534:	bf00      	nop
 800f536:	370c      	adds	r7, #12
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f548:	bf00      	nop
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f55c:	bf00      	nop
 800f55e:	370c      	adds	r7, #12
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr

0800f568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a4c      	ldr	r2, [pc, #304]	; (800f6ac <TIM_Base_SetConfig+0x144>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d017      	beq.n	800f5b0 <TIM_Base_SetConfig+0x48>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f586:	d013      	beq.n	800f5b0 <TIM_Base_SetConfig+0x48>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a49      	ldr	r2, [pc, #292]	; (800f6b0 <TIM_Base_SetConfig+0x148>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d00f      	beq.n	800f5b0 <TIM_Base_SetConfig+0x48>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a48      	ldr	r2, [pc, #288]	; (800f6b4 <TIM_Base_SetConfig+0x14c>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d00b      	beq.n	800f5b0 <TIM_Base_SetConfig+0x48>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a47      	ldr	r2, [pc, #284]	; (800f6b8 <TIM_Base_SetConfig+0x150>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d007      	beq.n	800f5b0 <TIM_Base_SetConfig+0x48>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a46      	ldr	r2, [pc, #280]	; (800f6bc <TIM_Base_SetConfig+0x154>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d003      	beq.n	800f5b0 <TIM_Base_SetConfig+0x48>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a45      	ldr	r2, [pc, #276]	; (800f6c0 <TIM_Base_SetConfig+0x158>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d108      	bne.n	800f5c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a39      	ldr	r2, [pc, #228]	; (800f6ac <TIM_Base_SetConfig+0x144>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d023      	beq.n	800f612 <TIM_Base_SetConfig+0xaa>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5d0:	d01f      	beq.n	800f612 <TIM_Base_SetConfig+0xaa>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4a36      	ldr	r2, [pc, #216]	; (800f6b0 <TIM_Base_SetConfig+0x148>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d01b      	beq.n	800f612 <TIM_Base_SetConfig+0xaa>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a35      	ldr	r2, [pc, #212]	; (800f6b4 <TIM_Base_SetConfig+0x14c>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d017      	beq.n	800f612 <TIM_Base_SetConfig+0xaa>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4a34      	ldr	r2, [pc, #208]	; (800f6b8 <TIM_Base_SetConfig+0x150>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d013      	beq.n	800f612 <TIM_Base_SetConfig+0xaa>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a33      	ldr	r2, [pc, #204]	; (800f6bc <TIM_Base_SetConfig+0x154>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d00f      	beq.n	800f612 <TIM_Base_SetConfig+0xaa>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4a33      	ldr	r2, [pc, #204]	; (800f6c4 <TIM_Base_SetConfig+0x15c>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d00b      	beq.n	800f612 <TIM_Base_SetConfig+0xaa>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a32      	ldr	r2, [pc, #200]	; (800f6c8 <TIM_Base_SetConfig+0x160>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d007      	beq.n	800f612 <TIM_Base_SetConfig+0xaa>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a31      	ldr	r2, [pc, #196]	; (800f6cc <TIM_Base_SetConfig+0x164>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d003      	beq.n	800f612 <TIM_Base_SetConfig+0xaa>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a2c      	ldr	r2, [pc, #176]	; (800f6c0 <TIM_Base_SetConfig+0x158>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d108      	bne.n	800f624 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	68fa      	ldr	r2, [r7, #12]
 800f620:	4313      	orrs	r3, r2
 800f622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	4313      	orrs	r3, r2
 800f630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	689a      	ldr	r2, [r3, #8]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4a18      	ldr	r2, [pc, #96]	; (800f6ac <TIM_Base_SetConfig+0x144>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d013      	beq.n	800f678 <TIM_Base_SetConfig+0x110>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a1a      	ldr	r2, [pc, #104]	; (800f6bc <TIM_Base_SetConfig+0x154>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d00f      	beq.n	800f678 <TIM_Base_SetConfig+0x110>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a1a      	ldr	r2, [pc, #104]	; (800f6c4 <TIM_Base_SetConfig+0x15c>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d00b      	beq.n	800f678 <TIM_Base_SetConfig+0x110>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a19      	ldr	r2, [pc, #100]	; (800f6c8 <TIM_Base_SetConfig+0x160>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d007      	beq.n	800f678 <TIM_Base_SetConfig+0x110>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4a18      	ldr	r2, [pc, #96]	; (800f6cc <TIM_Base_SetConfig+0x164>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d003      	beq.n	800f678 <TIM_Base_SetConfig+0x110>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a13      	ldr	r2, [pc, #76]	; (800f6c0 <TIM_Base_SetConfig+0x158>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d103      	bne.n	800f680 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	691a      	ldr	r2, [r3, #16]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2201      	movs	r2, #1
 800f684:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	f003 0301 	and.w	r3, r3, #1
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d105      	bne.n	800f69e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	691b      	ldr	r3, [r3, #16]
 800f696:	f023 0201 	bic.w	r2, r3, #1
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	611a      	str	r2, [r3, #16]
  }
}
 800f69e:	bf00      	nop
 800f6a0:	3714      	adds	r7, #20
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	40012c00 	.word	0x40012c00
 800f6b0:	40000400 	.word	0x40000400
 800f6b4:	40000800 	.word	0x40000800
 800f6b8:	40000c00 	.word	0x40000c00
 800f6bc:	40013400 	.word	0x40013400
 800f6c0:	40015000 	.word	0x40015000
 800f6c4:	40014000 	.word	0x40014000
 800f6c8:	40014400 	.word	0x40014400
 800f6cc:	40014800 	.word	0x40014800

0800f6d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b087      	sub	sp, #28
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6a1b      	ldr	r3, [r3, #32]
 800f6de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a1b      	ldr	r3, [r3, #32]
 800f6e4:	f023 0201 	bic.w	r2, r3, #1
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	699b      	ldr	r3, [r3, #24]
 800f6f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f6fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f023 0303 	bic.w	r3, r3, #3
 800f70a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	4313      	orrs	r3, r2
 800f714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f023 0302 	bic.w	r3, r3, #2
 800f71c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	4313      	orrs	r3, r2
 800f726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a30      	ldr	r2, [pc, #192]	; (800f7ec <TIM_OC1_SetConfig+0x11c>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d013      	beq.n	800f758 <TIM_OC1_SetConfig+0x88>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	4a2f      	ldr	r2, [pc, #188]	; (800f7f0 <TIM_OC1_SetConfig+0x120>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d00f      	beq.n	800f758 <TIM_OC1_SetConfig+0x88>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a2e      	ldr	r2, [pc, #184]	; (800f7f4 <TIM_OC1_SetConfig+0x124>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d00b      	beq.n	800f758 <TIM_OC1_SetConfig+0x88>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4a2d      	ldr	r2, [pc, #180]	; (800f7f8 <TIM_OC1_SetConfig+0x128>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d007      	beq.n	800f758 <TIM_OC1_SetConfig+0x88>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4a2c      	ldr	r2, [pc, #176]	; (800f7fc <TIM_OC1_SetConfig+0x12c>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d003      	beq.n	800f758 <TIM_OC1_SetConfig+0x88>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a2b      	ldr	r2, [pc, #172]	; (800f800 <TIM_OC1_SetConfig+0x130>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d10c      	bne.n	800f772 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	f023 0308 	bic.w	r3, r3, #8
 800f75e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	697a      	ldr	r2, [r7, #20]
 800f766:	4313      	orrs	r3, r2
 800f768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	f023 0304 	bic.w	r3, r3, #4
 800f770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4a1d      	ldr	r2, [pc, #116]	; (800f7ec <TIM_OC1_SetConfig+0x11c>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d013      	beq.n	800f7a2 <TIM_OC1_SetConfig+0xd2>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a1c      	ldr	r2, [pc, #112]	; (800f7f0 <TIM_OC1_SetConfig+0x120>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d00f      	beq.n	800f7a2 <TIM_OC1_SetConfig+0xd2>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4a1b      	ldr	r2, [pc, #108]	; (800f7f4 <TIM_OC1_SetConfig+0x124>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d00b      	beq.n	800f7a2 <TIM_OC1_SetConfig+0xd2>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4a1a      	ldr	r2, [pc, #104]	; (800f7f8 <TIM_OC1_SetConfig+0x128>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d007      	beq.n	800f7a2 <TIM_OC1_SetConfig+0xd2>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a19      	ldr	r2, [pc, #100]	; (800f7fc <TIM_OC1_SetConfig+0x12c>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d003      	beq.n	800f7a2 <TIM_OC1_SetConfig+0xd2>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a18      	ldr	r2, [pc, #96]	; (800f800 <TIM_OC1_SetConfig+0x130>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d111      	bne.n	800f7c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f7b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	695b      	ldr	r3, [r3, #20]
 800f7b6:	693a      	ldr	r2, [r7, #16]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	699b      	ldr	r3, [r3, #24]
 800f7c0:	693a      	ldr	r2, [r7, #16]
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	693a      	ldr	r2, [r7, #16]
 800f7ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	685a      	ldr	r2, [r3, #4]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	697a      	ldr	r2, [r7, #20]
 800f7de:	621a      	str	r2, [r3, #32]
}
 800f7e0:	bf00      	nop
 800f7e2:	371c      	adds	r7, #28
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	40012c00 	.word	0x40012c00
 800f7f0:	40013400 	.word	0x40013400
 800f7f4:	40014000 	.word	0x40014000
 800f7f8:	40014400 	.word	0x40014400
 800f7fc:	40014800 	.word	0x40014800
 800f800:	40015000 	.word	0x40015000

0800f804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f804:	b480      	push	{r7}
 800f806:	b087      	sub	sp, #28
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6a1b      	ldr	r3, [r3, #32]
 800f812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6a1b      	ldr	r3, [r3, #32]
 800f818:	f023 0210 	bic.w	r2, r3, #16
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	699b      	ldr	r3, [r3, #24]
 800f82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f83e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	021b      	lsls	r3, r3, #8
 800f846:	68fa      	ldr	r2, [r7, #12]
 800f848:	4313      	orrs	r3, r2
 800f84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	f023 0320 	bic.w	r3, r3, #32
 800f852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	011b      	lsls	r3, r3, #4
 800f85a:	697a      	ldr	r2, [r7, #20]
 800f85c:	4313      	orrs	r3, r2
 800f85e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a2c      	ldr	r2, [pc, #176]	; (800f914 <TIM_OC2_SetConfig+0x110>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d007      	beq.n	800f878 <TIM_OC2_SetConfig+0x74>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a2b      	ldr	r2, [pc, #172]	; (800f918 <TIM_OC2_SetConfig+0x114>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d003      	beq.n	800f878 <TIM_OC2_SetConfig+0x74>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a2a      	ldr	r2, [pc, #168]	; (800f91c <TIM_OC2_SetConfig+0x118>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d10d      	bne.n	800f894 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f87e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	011b      	lsls	r3, r3, #4
 800f886:	697a      	ldr	r2, [r7, #20]
 800f888:	4313      	orrs	r3, r2
 800f88a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f892:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a1f      	ldr	r2, [pc, #124]	; (800f914 <TIM_OC2_SetConfig+0x110>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d013      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xc0>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4a1e      	ldr	r2, [pc, #120]	; (800f918 <TIM_OC2_SetConfig+0x114>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d00f      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xc0>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a1e      	ldr	r2, [pc, #120]	; (800f920 <TIM_OC2_SetConfig+0x11c>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d00b      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xc0>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a1d      	ldr	r2, [pc, #116]	; (800f924 <TIM_OC2_SetConfig+0x120>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d007      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xc0>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a1c      	ldr	r2, [pc, #112]	; (800f928 <TIM_OC2_SetConfig+0x124>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d003      	beq.n	800f8c4 <TIM_OC2_SetConfig+0xc0>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a17      	ldr	r2, [pc, #92]	; (800f91c <TIM_OC2_SetConfig+0x118>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d113      	bne.n	800f8ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	695b      	ldr	r3, [r3, #20]
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	693a      	ldr	r2, [r7, #16]
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	699b      	ldr	r3, [r3, #24]
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	693a      	ldr	r2, [r7, #16]
 800f8f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	697a      	ldr	r2, [r7, #20]
 800f904:	621a      	str	r2, [r3, #32]
}
 800f906:	bf00      	nop
 800f908:	371c      	adds	r7, #28
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	40012c00 	.word	0x40012c00
 800f918:	40013400 	.word	0x40013400
 800f91c:	40015000 	.word	0x40015000
 800f920:	40014000 	.word	0x40014000
 800f924:	40014400 	.word	0x40014400
 800f928:	40014800 	.word	0x40014800

0800f92c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b087      	sub	sp, #28
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6a1b      	ldr	r3, [r3, #32]
 800f93a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6a1b      	ldr	r3, [r3, #32]
 800f940:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	69db      	ldr	r3, [r3, #28]
 800f952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f023 0303 	bic.w	r3, r3, #3
 800f966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	68fa      	ldr	r2, [r7, #12]
 800f96e:	4313      	orrs	r3, r2
 800f970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	021b      	lsls	r3, r3, #8
 800f980:	697a      	ldr	r2, [r7, #20]
 800f982:	4313      	orrs	r3, r2
 800f984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4a2b      	ldr	r2, [pc, #172]	; (800fa38 <TIM_OC3_SetConfig+0x10c>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d007      	beq.n	800f99e <TIM_OC3_SetConfig+0x72>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a2a      	ldr	r2, [pc, #168]	; (800fa3c <TIM_OC3_SetConfig+0x110>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d003      	beq.n	800f99e <TIM_OC3_SetConfig+0x72>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4a29      	ldr	r2, [pc, #164]	; (800fa40 <TIM_OC3_SetConfig+0x114>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d10d      	bne.n	800f9ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	021b      	lsls	r3, r3, #8
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4a1e      	ldr	r2, [pc, #120]	; (800fa38 <TIM_OC3_SetConfig+0x10c>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d013      	beq.n	800f9ea <TIM_OC3_SetConfig+0xbe>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4a1d      	ldr	r2, [pc, #116]	; (800fa3c <TIM_OC3_SetConfig+0x110>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d00f      	beq.n	800f9ea <TIM_OC3_SetConfig+0xbe>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4a1d      	ldr	r2, [pc, #116]	; (800fa44 <TIM_OC3_SetConfig+0x118>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d00b      	beq.n	800f9ea <TIM_OC3_SetConfig+0xbe>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a1c      	ldr	r2, [pc, #112]	; (800fa48 <TIM_OC3_SetConfig+0x11c>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d007      	beq.n	800f9ea <TIM_OC3_SetConfig+0xbe>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a1b      	ldr	r2, [pc, #108]	; (800fa4c <TIM_OC3_SetConfig+0x120>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d003      	beq.n	800f9ea <TIM_OC3_SetConfig+0xbe>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a16      	ldr	r2, [pc, #88]	; (800fa40 <TIM_OC3_SetConfig+0x114>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d113      	bne.n	800fa12 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	695b      	ldr	r3, [r3, #20]
 800f9fe:	011b      	lsls	r3, r3, #4
 800fa00:	693a      	ldr	r2, [r7, #16]
 800fa02:	4313      	orrs	r3, r2
 800fa04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	699b      	ldr	r3, [r3, #24]
 800fa0a:	011b      	lsls	r3, r3, #4
 800fa0c:	693a      	ldr	r2, [r7, #16]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	693a      	ldr	r2, [r7, #16]
 800fa16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	685a      	ldr	r2, [r3, #4]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	697a      	ldr	r2, [r7, #20]
 800fa2a:	621a      	str	r2, [r3, #32]
}
 800fa2c:	bf00      	nop
 800fa2e:	371c      	adds	r7, #28
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr
 800fa38:	40012c00 	.word	0x40012c00
 800fa3c:	40013400 	.word	0x40013400
 800fa40:	40015000 	.word	0x40015000
 800fa44:	40014000 	.word	0x40014000
 800fa48:	40014400 	.word	0x40014400
 800fa4c:	40014800 	.word	0x40014800

0800fa50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b087      	sub	sp, #28
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6a1b      	ldr	r3, [r3, #32]
 800fa5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6a1b      	ldr	r3, [r3, #32]
 800fa64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	69db      	ldr	r3, [r3, #28]
 800fa76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fa7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	021b      	lsls	r3, r3, #8
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	4313      	orrs	r3, r2
 800fa96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	689b      	ldr	r3, [r3, #8]
 800faa4:	031b      	lsls	r3, r3, #12
 800faa6:	697a      	ldr	r2, [r7, #20]
 800faa8:	4313      	orrs	r3, r2
 800faaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4a2c      	ldr	r2, [pc, #176]	; (800fb60 <TIM_OC4_SetConfig+0x110>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d007      	beq.n	800fac4 <TIM_OC4_SetConfig+0x74>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4a2b      	ldr	r2, [pc, #172]	; (800fb64 <TIM_OC4_SetConfig+0x114>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d003      	beq.n	800fac4 <TIM_OC4_SetConfig+0x74>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4a2a      	ldr	r2, [pc, #168]	; (800fb68 <TIM_OC4_SetConfig+0x118>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d10d      	bne.n	800fae0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800faca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	031b      	lsls	r3, r3, #12
 800fad2:	697a      	ldr	r2, [r7, #20]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a1f      	ldr	r2, [pc, #124]	; (800fb60 <TIM_OC4_SetConfig+0x110>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d013      	beq.n	800fb10 <TIM_OC4_SetConfig+0xc0>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a1e      	ldr	r2, [pc, #120]	; (800fb64 <TIM_OC4_SetConfig+0x114>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d00f      	beq.n	800fb10 <TIM_OC4_SetConfig+0xc0>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4a1e      	ldr	r2, [pc, #120]	; (800fb6c <TIM_OC4_SetConfig+0x11c>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d00b      	beq.n	800fb10 <TIM_OC4_SetConfig+0xc0>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4a1d      	ldr	r2, [pc, #116]	; (800fb70 <TIM_OC4_SetConfig+0x120>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d007      	beq.n	800fb10 <TIM_OC4_SetConfig+0xc0>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4a1c      	ldr	r2, [pc, #112]	; (800fb74 <TIM_OC4_SetConfig+0x124>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d003      	beq.n	800fb10 <TIM_OC4_SetConfig+0xc0>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4a17      	ldr	r2, [pc, #92]	; (800fb68 <TIM_OC4_SetConfig+0x118>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d113      	bne.n	800fb38 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fb1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	695b      	ldr	r3, [r3, #20]
 800fb24:	019b      	lsls	r3, r3, #6
 800fb26:	693a      	ldr	r2, [r7, #16]
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	019b      	lsls	r3, r3, #6
 800fb32:	693a      	ldr	r2, [r7, #16]
 800fb34:	4313      	orrs	r3, r2
 800fb36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	693a      	ldr	r2, [r7, #16]
 800fb3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	685a      	ldr	r2, [r3, #4]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	621a      	str	r2, [r3, #32]
}
 800fb52:	bf00      	nop
 800fb54:	371c      	adds	r7, #28
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop
 800fb60:	40012c00 	.word	0x40012c00
 800fb64:	40013400 	.word	0x40013400
 800fb68:	40015000 	.word	0x40015000
 800fb6c:	40014000 	.word	0x40014000
 800fb70:	40014400 	.word	0x40014400
 800fb74:	40014800 	.word	0x40014800

0800fb78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b087      	sub	sp, #28
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a1b      	ldr	r3, [r3, #32]
 800fb86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6a1b      	ldr	r3, [r3, #32]
 800fb8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fbbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	689b      	ldr	r3, [r3, #8]
 800fbc2:	041b      	lsls	r3, r3, #16
 800fbc4:	693a      	ldr	r2, [r7, #16]
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4a19      	ldr	r2, [pc, #100]	; (800fc34 <TIM_OC5_SetConfig+0xbc>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d013      	beq.n	800fbfa <TIM_OC5_SetConfig+0x82>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a18      	ldr	r2, [pc, #96]	; (800fc38 <TIM_OC5_SetConfig+0xc0>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d00f      	beq.n	800fbfa <TIM_OC5_SetConfig+0x82>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4a17      	ldr	r2, [pc, #92]	; (800fc3c <TIM_OC5_SetConfig+0xc4>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d00b      	beq.n	800fbfa <TIM_OC5_SetConfig+0x82>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4a16      	ldr	r2, [pc, #88]	; (800fc40 <TIM_OC5_SetConfig+0xc8>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d007      	beq.n	800fbfa <TIM_OC5_SetConfig+0x82>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4a15      	ldr	r2, [pc, #84]	; (800fc44 <TIM_OC5_SetConfig+0xcc>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d003      	beq.n	800fbfa <TIM_OC5_SetConfig+0x82>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4a14      	ldr	r2, [pc, #80]	; (800fc48 <TIM_OC5_SetConfig+0xd0>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d109      	bne.n	800fc0e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	695b      	ldr	r3, [r3, #20]
 800fc06:	021b      	lsls	r3, r3, #8
 800fc08:	697a      	ldr	r2, [r7, #20]
 800fc0a:	4313      	orrs	r3, r2
 800fc0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	697a      	ldr	r2, [r7, #20]
 800fc12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	68fa      	ldr	r2, [r7, #12]
 800fc18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	685a      	ldr	r2, [r3, #4]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	693a      	ldr	r2, [r7, #16]
 800fc26:	621a      	str	r2, [r3, #32]
}
 800fc28:	bf00      	nop
 800fc2a:	371c      	adds	r7, #28
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr
 800fc34:	40012c00 	.word	0x40012c00
 800fc38:	40013400 	.word	0x40013400
 800fc3c:	40014000 	.word	0x40014000
 800fc40:	40014400 	.word	0x40014400
 800fc44:	40014800 	.word	0x40014800
 800fc48:	40015000 	.word	0x40015000

0800fc4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b087      	sub	sp, #28
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a1b      	ldr	r3, [r3, #32]
 800fc5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6a1b      	ldr	r3, [r3, #32]
 800fc60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fc7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	021b      	lsls	r3, r3, #8
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	689b      	ldr	r3, [r3, #8]
 800fc98:	051b      	lsls	r3, r3, #20
 800fc9a:	693a      	ldr	r2, [r7, #16]
 800fc9c:	4313      	orrs	r3, r2
 800fc9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4a1a      	ldr	r2, [pc, #104]	; (800fd0c <TIM_OC6_SetConfig+0xc0>)
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d013      	beq.n	800fcd0 <TIM_OC6_SetConfig+0x84>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4a19      	ldr	r2, [pc, #100]	; (800fd10 <TIM_OC6_SetConfig+0xc4>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d00f      	beq.n	800fcd0 <TIM_OC6_SetConfig+0x84>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4a18      	ldr	r2, [pc, #96]	; (800fd14 <TIM_OC6_SetConfig+0xc8>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d00b      	beq.n	800fcd0 <TIM_OC6_SetConfig+0x84>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	4a17      	ldr	r2, [pc, #92]	; (800fd18 <TIM_OC6_SetConfig+0xcc>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d007      	beq.n	800fcd0 <TIM_OC6_SetConfig+0x84>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4a16      	ldr	r2, [pc, #88]	; (800fd1c <TIM_OC6_SetConfig+0xd0>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d003      	beq.n	800fcd0 <TIM_OC6_SetConfig+0x84>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4a15      	ldr	r2, [pc, #84]	; (800fd20 <TIM_OC6_SetConfig+0xd4>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d109      	bne.n	800fce4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fcd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	695b      	ldr	r3, [r3, #20]
 800fcdc:	029b      	lsls	r3, r3, #10
 800fcde:	697a      	ldr	r2, [r7, #20]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	685a      	ldr	r2, [r3, #4]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	693a      	ldr	r2, [r7, #16]
 800fcfc:	621a      	str	r2, [r3, #32]
}
 800fcfe:	bf00      	nop
 800fd00:	371c      	adds	r7, #28
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	40012c00 	.word	0x40012c00
 800fd10:	40013400 	.word	0x40013400
 800fd14:	40014000 	.word	0x40014000
 800fd18:	40014400 	.word	0x40014400
 800fd1c:	40014800 	.word	0x40014800
 800fd20:	40015000 	.word	0x40015000

0800fd24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b087      	sub	sp, #28
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	6a1b      	ldr	r3, [r3, #32]
 800fd34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	f023 0201 	bic.w	r2, r3, #1
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	699b      	ldr	r3, [r3, #24]
 800fd46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	011b      	lsls	r3, r3, #4
 800fd54:	693a      	ldr	r2, [r7, #16]
 800fd56:	4313      	orrs	r3, r2
 800fd58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	f023 030a 	bic.w	r3, r3, #10
 800fd60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd62:	697a      	ldr	r2, [r7, #20]
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	693a      	ldr	r2, [r7, #16]
 800fd6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	697a      	ldr	r2, [r7, #20]
 800fd74:	621a      	str	r2, [r3, #32]
}
 800fd76:	bf00      	nop
 800fd78:	371c      	adds	r7, #28
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr

0800fd82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd82:	b480      	push	{r7}
 800fd84:	b087      	sub	sp, #28
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	60f8      	str	r0, [r7, #12]
 800fd8a:	60b9      	str	r1, [r7, #8]
 800fd8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	6a1b      	ldr	r3, [r3, #32]
 800fd92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6a1b      	ldr	r3, [r3, #32]
 800fd98:	f023 0210 	bic.w	r2, r3, #16
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	699b      	ldr	r3, [r3, #24]
 800fda4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fdac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	031b      	lsls	r3, r3, #12
 800fdb2:	693a      	ldr	r2, [r7, #16]
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fdbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	011b      	lsls	r3, r3, #4
 800fdc4:	697a      	ldr	r2, [r7, #20]
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	693a      	ldr	r2, [r7, #16]
 800fdce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	697a      	ldr	r2, [r7, #20]
 800fdd4:	621a      	str	r2, [r3, #32]
}
 800fdd6:	bf00      	nop
 800fdd8:	371c      	adds	r7, #28
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr

0800fde2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fde2:	b480      	push	{r7}
 800fde4:	b085      	sub	sp, #20
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
 800fdea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fdf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fdfe:	683a      	ldr	r2, [r7, #0]
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	f043 0307 	orr.w	r3, r3, #7
 800fe08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	68fa      	ldr	r2, [r7, #12]
 800fe0e:	609a      	str	r2, [r3, #8]
}
 800fe10:	bf00      	nop
 800fe12:	3714      	adds	r7, #20
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b087      	sub	sp, #28
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	60b9      	str	r1, [r7, #8]
 800fe26:	607a      	str	r2, [r7, #4]
 800fe28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	689b      	ldr	r3, [r3, #8]
 800fe2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fe36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	021a      	lsls	r2, r3, #8
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	431a      	orrs	r2, r3
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	697a      	ldr	r2, [r7, #20]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	697a      	ldr	r2, [r7, #20]
 800fe4e:	609a      	str	r2, [r3, #8]
}
 800fe50:	bf00      	nop
 800fe52:	371c      	adds	r7, #28
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b087      	sub	sp, #28
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	f003 031f 	and.w	r3, r3, #31
 800fe6e:	2201      	movs	r2, #1
 800fe70:	fa02 f303 	lsl.w	r3, r2, r3
 800fe74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6a1a      	ldr	r2, [r3, #32]
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	43db      	mvns	r3, r3
 800fe7e:	401a      	ands	r2, r3
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	6a1a      	ldr	r2, [r3, #32]
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	f003 031f 	and.w	r3, r3, #31
 800fe8e:	6879      	ldr	r1, [r7, #4]
 800fe90:	fa01 f303 	lsl.w	r3, r1, r3
 800fe94:	431a      	orrs	r2, r3
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	621a      	str	r2, [r3, #32]
}
 800fe9a:	bf00      	nop
 800fe9c:	371c      	adds	r7, #28
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
	...

0800fea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b085      	sub	sp, #20
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d101      	bne.n	800fec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800febc:	2302      	movs	r3, #2
 800febe:	e074      	b.n	800ffaa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2201      	movs	r2, #1
 800fec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2202      	movs	r2, #2
 800fecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	689b      	ldr	r3, [r3, #8]
 800fede:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4a34      	ldr	r2, [pc, #208]	; (800ffb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d009      	beq.n	800fefe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4a33      	ldr	r2, [pc, #204]	; (800ffbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d004      	beq.n	800fefe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4a31      	ldr	r2, [pc, #196]	; (800ffc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d108      	bne.n	800ff10 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ff04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	68fa      	ldr	r2, [r7, #12]
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ff16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	68fa      	ldr	r2, [r7, #12]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4a21      	ldr	r2, [pc, #132]	; (800ffb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d022      	beq.n	800ff7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff40:	d01d      	beq.n	800ff7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	4a1f      	ldr	r2, [pc, #124]	; (800ffc4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d018      	beq.n	800ff7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	4a1d      	ldr	r2, [pc, #116]	; (800ffc8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ff52:	4293      	cmp	r3, r2
 800ff54:	d013      	beq.n	800ff7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	4a1c      	ldr	r2, [pc, #112]	; (800ffcc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d00e      	beq.n	800ff7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a15      	ldr	r2, [pc, #84]	; (800ffbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d009      	beq.n	800ff7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	4a18      	ldr	r2, [pc, #96]	; (800ffd0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d004      	beq.n	800ff7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4a11      	ldr	r2, [pc, #68]	; (800ffc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d10c      	bne.n	800ff98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	689b      	ldr	r3, [r3, #8]
 800ff8a:	68ba      	ldr	r2, [r7, #8]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	68ba      	ldr	r2, [r7, #8]
 800ff96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3714      	adds	r7, #20
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	40012c00 	.word	0x40012c00
 800ffbc:	40013400 	.word	0x40013400
 800ffc0:	40015000 	.word	0x40015000
 800ffc4:	40000400 	.word	0x40000400
 800ffc8:	40000800 	.word	0x40000800
 800ffcc:	40000c00 	.word	0x40000c00
 800ffd0:	40014000 	.word	0x40014000

0800ffd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr

0800ffe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fff0:	bf00      	nop
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010004:	bf00      	nop
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8010018:	bf00      	nop
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801002c:	bf00      	nop
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d101      	bne.n	8010072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801006e:	2301      	movs	r3, #1
 8010070:	e042      	b.n	80100f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010078:	2b00      	cmp	r3, #0
 801007a:	d106      	bne.n	801008a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7f8 fd49 	bl	8008b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2224      	movs	r2, #36	; 0x24
 801008e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f022 0201 	bic.w	r2, r2, #1
 80100a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d002      	beq.n	80100b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 fefe 	bl	8010eac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 fbff 	bl	80108b4 <UART_SetConfig>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d101      	bne.n	80100c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80100bc:	2301      	movs	r3, #1
 80100be:	e01b      	b.n	80100f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	685a      	ldr	r2, [r3, #4]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80100ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	689a      	ldr	r2, [r3, #8]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80100de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f042 0201 	orr.w	r2, r2, #1
 80100ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f000 ff7d 	bl	8010ff0 <UART_CheckIdleState>
 80100f6:	4603      	mov	r3, r0
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b08a      	sub	sp, #40	; 0x28
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	4613      	mov	r3, r2
 801010c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010114:	2b20      	cmp	r3, #32
 8010116:	d167      	bne.n	80101e8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d002      	beq.n	8010124 <HAL_UART_Transmit_DMA+0x24>
 801011e:	88fb      	ldrh	r3, [r7, #6]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d101      	bne.n	8010128 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010124:	2301      	movs	r3, #1
 8010126:	e060      	b.n	80101ea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	68ba      	ldr	r2, [r7, #8]
 801012c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	88fa      	ldrh	r2, [r7, #6]
 8010132:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	88fa      	ldrh	r2, [r7, #6]
 801013a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2200      	movs	r2, #0
 8010142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2221      	movs	r2, #33	; 0x21
 801014a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010152:	2b00      	cmp	r3, #0
 8010154:	d028      	beq.n	80101a8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801015a:	4a26      	ldr	r2, [pc, #152]	; (80101f4 <HAL_UART_Transmit_DMA+0xf4>)
 801015c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010162:	4a25      	ldr	r2, [pc, #148]	; (80101f8 <HAL_UART_Transmit_DMA+0xf8>)
 8010164:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801016a:	4a24      	ldr	r2, [pc, #144]	; (80101fc <HAL_UART_Transmit_DMA+0xfc>)
 801016c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010172:	2200      	movs	r2, #0
 8010174:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801017e:	4619      	mov	r1, r3
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	3328      	adds	r3, #40	; 0x28
 8010186:	461a      	mov	r2, r3
 8010188:	88fb      	ldrh	r3, [r7, #6]
 801018a:	f7fb f903 	bl	800b394 <HAL_DMA_Start_IT>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d009      	beq.n	80101a8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2210      	movs	r2, #16
 8010198:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	2220      	movs	r2, #32
 80101a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80101a4:	2301      	movs	r3, #1
 80101a6:	e020      	b.n	80101ea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	2240      	movs	r2, #64	; 0x40
 80101ae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	3308      	adds	r3, #8
 80101b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	e853 3f00 	ldrex	r3, [r3]
 80101be:	613b      	str	r3, [r7, #16]
   return(result);
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101c6:	627b      	str	r3, [r7, #36]	; 0x24
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	3308      	adds	r3, #8
 80101ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101d0:	623a      	str	r2, [r7, #32]
 80101d2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d4:	69f9      	ldr	r1, [r7, #28]
 80101d6:	6a3a      	ldr	r2, [r7, #32]
 80101d8:	e841 2300 	strex	r3, r2, [r1]
 80101dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1e5      	bne.n	80101b0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80101e4:	2300      	movs	r3, #0
 80101e6:	e000      	b.n	80101ea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80101e8:	2302      	movs	r3, #2
  }
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3728      	adds	r7, #40	; 0x28
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	080115b3 	.word	0x080115b3
 80101f8:	0801164d 	.word	0x0801164d
 80101fc:	08011669 	.word	0x08011669

08010200 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b0ba      	sub	sp, #232	; 0xe8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	69db      	ldr	r3, [r3, #28]
 801020e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010226:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801022a:	f640 030f 	movw	r3, #2063	; 0x80f
 801022e:	4013      	ands	r3, r2
 8010230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010238:	2b00      	cmp	r3, #0
 801023a:	d11b      	bne.n	8010274 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801023c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010240:	f003 0320 	and.w	r3, r3, #32
 8010244:	2b00      	cmp	r3, #0
 8010246:	d015      	beq.n	8010274 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801024c:	f003 0320 	and.w	r3, r3, #32
 8010250:	2b00      	cmp	r3, #0
 8010252:	d105      	bne.n	8010260 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801025c:	2b00      	cmp	r3, #0
 801025e:	d009      	beq.n	8010274 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 82e3 	beq.w	8010830 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	4798      	blx	r3
      }
      return;
 8010272:	e2dd      	b.n	8010830 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010278:	2b00      	cmp	r3, #0
 801027a:	f000 8123 	beq.w	80104c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801027e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010282:	4b8d      	ldr	r3, [pc, #564]	; (80104b8 <HAL_UART_IRQHandler+0x2b8>)
 8010284:	4013      	ands	r3, r2
 8010286:	2b00      	cmp	r3, #0
 8010288:	d106      	bne.n	8010298 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801028a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801028e:	4b8b      	ldr	r3, [pc, #556]	; (80104bc <HAL_UART_IRQHandler+0x2bc>)
 8010290:	4013      	ands	r3, r2
 8010292:	2b00      	cmp	r3, #0
 8010294:	f000 8116 	beq.w	80104c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801029c:	f003 0301 	and.w	r3, r3, #1
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d011      	beq.n	80102c8 <HAL_UART_IRQHandler+0xc8>
 80102a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d00b      	beq.n	80102c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	2201      	movs	r2, #1
 80102b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102be:	f043 0201 	orr.w	r2, r3, #1
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102cc:	f003 0302 	and.w	r3, r3, #2
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d011      	beq.n	80102f8 <HAL_UART_IRQHandler+0xf8>
 80102d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102d8:	f003 0301 	and.w	r3, r3, #1
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00b      	beq.n	80102f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2202      	movs	r2, #2
 80102e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ee:	f043 0204 	orr.w	r2, r3, #4
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102fc:	f003 0304 	and.w	r3, r3, #4
 8010300:	2b00      	cmp	r3, #0
 8010302:	d011      	beq.n	8010328 <HAL_UART_IRQHandler+0x128>
 8010304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010308:	f003 0301 	and.w	r3, r3, #1
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00b      	beq.n	8010328 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2204      	movs	r2, #4
 8010316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801031e:	f043 0202 	orr.w	r2, r3, #2
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801032c:	f003 0308 	and.w	r3, r3, #8
 8010330:	2b00      	cmp	r3, #0
 8010332:	d017      	beq.n	8010364 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010338:	f003 0320 	and.w	r3, r3, #32
 801033c:	2b00      	cmp	r3, #0
 801033e:	d105      	bne.n	801034c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010340:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010344:	4b5c      	ldr	r3, [pc, #368]	; (80104b8 <HAL_UART_IRQHandler+0x2b8>)
 8010346:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00b      	beq.n	8010364 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2208      	movs	r2, #8
 8010352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801035a:	f043 0208 	orr.w	r2, r3, #8
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801036c:	2b00      	cmp	r3, #0
 801036e:	d012      	beq.n	8010396 <HAL_UART_IRQHandler+0x196>
 8010370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00c      	beq.n	8010396 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801038c:	f043 0220 	orr.w	r2, r3, #32
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801039c:	2b00      	cmp	r3, #0
 801039e:	f000 8249 	beq.w	8010834 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80103a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103a6:	f003 0320 	and.w	r3, r3, #32
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d013      	beq.n	80103d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103b2:	f003 0320 	and.w	r3, r3, #32
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d105      	bne.n	80103c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d007      	beq.n	80103d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d003      	beq.n	80103d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103ea:	2b40      	cmp	r3, #64	; 0x40
 80103ec:	d005      	beq.n	80103fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80103ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80103f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d054      	beq.n	80104a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f001 f873 	bl	80114e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801040a:	2b40      	cmp	r3, #64	; 0x40
 801040c:	d146      	bne.n	801049c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	3308      	adds	r3, #8
 8010414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801041c:	e853 3f00 	ldrex	r3, [r3]
 8010420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801042c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	3308      	adds	r3, #8
 8010436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801043a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801043e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801044a:	e841 2300 	strex	r3, r2, [r1]
 801044e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d1d9      	bne.n	801040e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010460:	2b00      	cmp	r3, #0
 8010462:	d017      	beq.n	8010494 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801046a:	4a15      	ldr	r2, [pc, #84]	; (80104c0 <HAL_UART_IRQHandler+0x2c0>)
 801046c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010474:	4618      	mov	r0, r3
 8010476:	f7fb f861 	bl	800b53c <HAL_DMA_Abort_IT>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d019      	beq.n	80104b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801048e:	4610      	mov	r0, r2
 8010490:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010492:	e00f      	b.n	80104b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f000 f9f5 	bl	8010884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801049a:	e00b      	b.n	80104b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 f9f1 	bl	8010884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104a2:	e007      	b.n	80104b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f000 f9ed 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80104b2:	e1bf      	b.n	8010834 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104b4:	bf00      	nop
    return;
 80104b6:	e1bd      	b.n	8010834 <HAL_UART_IRQHandler+0x634>
 80104b8:	10000001 	.word	0x10000001
 80104bc:	04000120 	.word	0x04000120
 80104c0:	080116e9 	.word	0x080116e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	f040 8153 	bne.w	8010774 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80104ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104d2:	f003 0310 	and.w	r3, r3, #16
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f000 814c 	beq.w	8010774 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80104dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104e0:	f003 0310 	and.w	r3, r3, #16
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f000 8145 	beq.w	8010774 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	2210      	movs	r2, #16
 80104f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	689b      	ldr	r3, [r3, #8]
 80104f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104fc:	2b40      	cmp	r3, #64	; 0x40
 80104fe:	f040 80bb 	bne.w	8010678 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010514:	2b00      	cmp	r3, #0
 8010516:	f000 818f 	beq.w	8010838 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010520:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010524:	429a      	cmp	r2, r3
 8010526:	f080 8187 	bcs.w	8010838 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010530:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f003 0320 	and.w	r3, r3, #32
 8010542:	2b00      	cmp	r3, #0
 8010544:	f040 8087 	bne.w	8010656 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010554:	e853 3f00 	ldrex	r3, [r3]
 8010558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801055c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	461a      	mov	r2, r3
 801056e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010576:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801057a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801057e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010582:	e841 2300 	strex	r3, r2, [r1]
 8010586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801058a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1da      	bne.n	8010548 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	3308      	adds	r3, #8
 8010598:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801059a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801059c:	e853 3f00 	ldrex	r3, [r3]
 80105a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80105a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105a4:	f023 0301 	bic.w	r3, r3, #1
 80105a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	3308      	adds	r3, #8
 80105b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80105b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80105ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80105be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80105c2:	e841 2300 	strex	r3, r2, [r1]
 80105c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80105c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d1e1      	bne.n	8010592 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	3308      	adds	r3, #8
 80105d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105d8:	e853 3f00 	ldrex	r3, [r3]
 80105dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80105de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	3308      	adds	r3, #8
 80105ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80105f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80105f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80105f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80105fa:	e841 2300 	strex	r3, r2, [r1]
 80105fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1e3      	bne.n	80105ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2220      	movs	r2, #32
 801060a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2200      	movs	r2, #0
 8010612:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801061a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801061c:	e853 3f00 	ldrex	r3, [r3]
 8010620:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010624:	f023 0310 	bic.w	r3, r3, #16
 8010628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	461a      	mov	r2, r3
 8010632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010636:	65bb      	str	r3, [r7, #88]	; 0x58
 8010638:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801063a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801063c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801063e:	e841 2300 	strex	r3, r2, [r1]
 8010642:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010646:	2b00      	cmp	r3, #0
 8010648:	d1e4      	bne.n	8010614 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010650:	4618      	mov	r0, r3
 8010652:	f7fa ff1a 	bl	800b48a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2202      	movs	r2, #2
 801065a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010668:	b29b      	uxth	r3, r3
 801066a:	1ad3      	subs	r3, r2, r3
 801066c:	b29b      	uxth	r3, r3
 801066e:	4619      	mov	r1, r3
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7f7 f9ef 	bl	8007a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010676:	e0df      	b.n	8010838 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010684:	b29b      	uxth	r3, r3
 8010686:	1ad3      	subs	r3, r2, r3
 8010688:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010692:	b29b      	uxth	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	f000 80d1 	beq.w	801083c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801069a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f000 80cc 	beq.w	801083c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ac:	e853 3f00 	ldrex	r3, [r3]
 80106b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	461a      	mov	r2, r3
 80106c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80106c6:	647b      	str	r3, [r7, #68]	; 0x44
 80106c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106ce:	e841 2300 	strex	r3, r2, [r1]
 80106d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d1e4      	bne.n	80106a4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	3308      	adds	r3, #8
 80106e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e4:	e853 3f00 	ldrex	r3, [r3]
 80106e8:	623b      	str	r3, [r7, #32]
   return(result);
 80106ea:	6a3b      	ldr	r3, [r7, #32]
 80106ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80106f0:	f023 0301 	bic.w	r3, r3, #1
 80106f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	3308      	adds	r3, #8
 80106fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010702:	633a      	str	r2, [r7, #48]	; 0x30
 8010704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801070a:	e841 2300 	strex	r3, r2, [r1]
 801070e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	2b00      	cmp	r3, #0
 8010714:	d1e1      	bne.n	80106da <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2220      	movs	r2, #32
 801071a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2200      	movs	r2, #0
 8010722:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	e853 3f00 	ldrex	r3, [r3]
 8010736:	60fb      	str	r3, [r7, #12]
   return(result);
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f023 0310 	bic.w	r3, r3, #16
 801073e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	461a      	mov	r2, r3
 8010748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801074c:	61fb      	str	r3, [r7, #28]
 801074e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010750:	69b9      	ldr	r1, [r7, #24]
 8010752:	69fa      	ldr	r2, [r7, #28]
 8010754:	e841 2300 	strex	r3, r2, [r1]
 8010758:	617b      	str	r3, [r7, #20]
   return(result);
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d1e4      	bne.n	801072a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2202      	movs	r2, #2
 8010764:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010766:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801076a:	4619      	mov	r1, r3
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f7f7 f971 	bl	8007a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010772:	e063      	b.n	801083c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801077c:	2b00      	cmp	r3, #0
 801077e:	d00e      	beq.n	801079e <HAL_UART_IRQHandler+0x59e>
 8010780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010788:	2b00      	cmp	r3, #0
 801078a:	d008      	beq.n	801079e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f001 fd6d 	bl	8012276 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801079c:	e051      	b.n	8010842 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801079e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d014      	beq.n	80107d4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80107aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d105      	bne.n	80107c2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80107b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d008      	beq.n	80107d4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d03a      	beq.n	8010840 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	4798      	blx	r3
    }
    return;
 80107d2:	e035      	b.n	8010840 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80107d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d009      	beq.n	80107f4 <HAL_UART_IRQHandler+0x5f4>
 80107e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d003      	beq.n	80107f4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f000 ff91 	bl	8011714 <UART_EndTransmit_IT>
    return;
 80107f2:	e026      	b.n	8010842 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80107f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d009      	beq.n	8010814 <HAL_UART_IRQHandler+0x614>
 8010800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010808:	2b00      	cmp	r3, #0
 801080a:	d003      	beq.n	8010814 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f001 fd46 	bl	801229e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010812:	e016      	b.n	8010842 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801081c:	2b00      	cmp	r3, #0
 801081e:	d010      	beq.n	8010842 <HAL_UART_IRQHandler+0x642>
 8010820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010824:	2b00      	cmp	r3, #0
 8010826:	da0c      	bge.n	8010842 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f001 fd2e 	bl	801228a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801082e:	e008      	b.n	8010842 <HAL_UART_IRQHandler+0x642>
      return;
 8010830:	bf00      	nop
 8010832:	e006      	b.n	8010842 <HAL_UART_IRQHandler+0x642>
    return;
 8010834:	bf00      	nop
 8010836:	e004      	b.n	8010842 <HAL_UART_IRQHandler+0x642>
      return;
 8010838:	bf00      	nop
 801083a:	e002      	b.n	8010842 <HAL_UART_IRQHandler+0x642>
      return;
 801083c:	bf00      	nop
 801083e:	e000      	b.n	8010842 <HAL_UART_IRQHandler+0x642>
    return;
 8010840:	bf00      	nop
  }
}
 8010842:	37e8      	adds	r7, #232	; 0xe8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010850:	bf00      	nop
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr

0801085c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010864:	bf00      	nop
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801088c:	bf00      	nop
 801088e:	370c      	adds	r7, #12
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr

08010898 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	370c      	adds	r7, #12
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
	...

080108b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80108b8:	b08c      	sub	sp, #48	; 0x30
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	689a      	ldr	r2, [r3, #8]
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	691b      	ldr	r3, [r3, #16]
 80108cc:	431a      	orrs	r2, r3
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	695b      	ldr	r3, [r3, #20]
 80108d2:	431a      	orrs	r2, r3
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	69db      	ldr	r3, [r3, #28]
 80108d8:	4313      	orrs	r3, r2
 80108da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	4baa      	ldr	r3, [pc, #680]	; (8010b8c <UART_SetConfig+0x2d8>)
 80108e4:	4013      	ands	r3, r2
 80108e6:	697a      	ldr	r2, [r7, #20]
 80108e8:	6812      	ldr	r2, [r2, #0]
 80108ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108ec:	430b      	orrs	r3, r1
 80108ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	68da      	ldr	r2, [r3, #12]
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	430a      	orrs	r2, r1
 8010904:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	699b      	ldr	r3, [r3, #24]
 801090a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a9f      	ldr	r2, [pc, #636]	; (8010b90 <UART_SetConfig+0x2dc>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d004      	beq.n	8010920 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	6a1b      	ldr	r3, [r3, #32]
 801091a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801091c:	4313      	orrs	r3, r2
 801091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	689b      	ldr	r3, [r3, #8]
 8010926:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801092a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801092e:	697a      	ldr	r2, [r7, #20]
 8010930:	6812      	ldr	r2, [r2, #0]
 8010932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010934:	430b      	orrs	r3, r1
 8010936:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801093e:	f023 010f 	bic.w	r1, r3, #15
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	430a      	orrs	r2, r1
 801094c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4a90      	ldr	r2, [pc, #576]	; (8010b94 <UART_SetConfig+0x2e0>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d125      	bne.n	80109a4 <UART_SetConfig+0xf0>
 8010958:	4b8f      	ldr	r3, [pc, #572]	; (8010b98 <UART_SetConfig+0x2e4>)
 801095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801095e:	f003 0303 	and.w	r3, r3, #3
 8010962:	2b03      	cmp	r3, #3
 8010964:	d81a      	bhi.n	801099c <UART_SetConfig+0xe8>
 8010966:	a201      	add	r2, pc, #4	; (adr r2, 801096c <UART_SetConfig+0xb8>)
 8010968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096c:	0801097d 	.word	0x0801097d
 8010970:	0801098d 	.word	0x0801098d
 8010974:	08010985 	.word	0x08010985
 8010978:	08010995 	.word	0x08010995
 801097c:	2301      	movs	r3, #1
 801097e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010982:	e116      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010984:	2302      	movs	r3, #2
 8010986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801098a:	e112      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 801098c:	2304      	movs	r3, #4
 801098e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010992:	e10e      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010994:	2308      	movs	r3, #8
 8010996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801099a:	e10a      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 801099c:	2310      	movs	r3, #16
 801099e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109a2:	e106      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a7c      	ldr	r2, [pc, #496]	; (8010b9c <UART_SetConfig+0x2e8>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d138      	bne.n	8010a20 <UART_SetConfig+0x16c>
 80109ae:	4b7a      	ldr	r3, [pc, #488]	; (8010b98 <UART_SetConfig+0x2e4>)
 80109b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109b4:	f003 030c 	and.w	r3, r3, #12
 80109b8:	2b0c      	cmp	r3, #12
 80109ba:	d82d      	bhi.n	8010a18 <UART_SetConfig+0x164>
 80109bc:	a201      	add	r2, pc, #4	; (adr r2, 80109c4 <UART_SetConfig+0x110>)
 80109be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c2:	bf00      	nop
 80109c4:	080109f9 	.word	0x080109f9
 80109c8:	08010a19 	.word	0x08010a19
 80109cc:	08010a19 	.word	0x08010a19
 80109d0:	08010a19 	.word	0x08010a19
 80109d4:	08010a09 	.word	0x08010a09
 80109d8:	08010a19 	.word	0x08010a19
 80109dc:	08010a19 	.word	0x08010a19
 80109e0:	08010a19 	.word	0x08010a19
 80109e4:	08010a01 	.word	0x08010a01
 80109e8:	08010a19 	.word	0x08010a19
 80109ec:	08010a19 	.word	0x08010a19
 80109f0:	08010a19 	.word	0x08010a19
 80109f4:	08010a11 	.word	0x08010a11
 80109f8:	2300      	movs	r3, #0
 80109fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109fe:	e0d8      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a00:	2302      	movs	r3, #2
 8010a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a06:	e0d4      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a08:	2304      	movs	r3, #4
 8010a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a0e:	e0d0      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a10:	2308      	movs	r3, #8
 8010a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a16:	e0cc      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a18:	2310      	movs	r3, #16
 8010a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a1e:	e0c8      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a5e      	ldr	r2, [pc, #376]	; (8010ba0 <UART_SetConfig+0x2ec>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d125      	bne.n	8010a76 <UART_SetConfig+0x1c2>
 8010a2a:	4b5b      	ldr	r3, [pc, #364]	; (8010b98 <UART_SetConfig+0x2e4>)
 8010a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010a34:	2b30      	cmp	r3, #48	; 0x30
 8010a36:	d016      	beq.n	8010a66 <UART_SetConfig+0x1b2>
 8010a38:	2b30      	cmp	r3, #48	; 0x30
 8010a3a:	d818      	bhi.n	8010a6e <UART_SetConfig+0x1ba>
 8010a3c:	2b20      	cmp	r3, #32
 8010a3e:	d00a      	beq.n	8010a56 <UART_SetConfig+0x1a2>
 8010a40:	2b20      	cmp	r3, #32
 8010a42:	d814      	bhi.n	8010a6e <UART_SetConfig+0x1ba>
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d002      	beq.n	8010a4e <UART_SetConfig+0x19a>
 8010a48:	2b10      	cmp	r3, #16
 8010a4a:	d008      	beq.n	8010a5e <UART_SetConfig+0x1aa>
 8010a4c:	e00f      	b.n	8010a6e <UART_SetConfig+0x1ba>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a54:	e0ad      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a56:	2302      	movs	r3, #2
 8010a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a5c:	e0a9      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a5e:	2304      	movs	r3, #4
 8010a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a64:	e0a5      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a66:	2308      	movs	r3, #8
 8010a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a6c:	e0a1      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a6e:	2310      	movs	r3, #16
 8010a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a74:	e09d      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a4a      	ldr	r2, [pc, #296]	; (8010ba4 <UART_SetConfig+0x2f0>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d125      	bne.n	8010acc <UART_SetConfig+0x218>
 8010a80:	4b45      	ldr	r3, [pc, #276]	; (8010b98 <UART_SetConfig+0x2e4>)
 8010a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8010a8c:	d016      	beq.n	8010abc <UART_SetConfig+0x208>
 8010a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8010a90:	d818      	bhi.n	8010ac4 <UART_SetConfig+0x210>
 8010a92:	2b80      	cmp	r3, #128	; 0x80
 8010a94:	d00a      	beq.n	8010aac <UART_SetConfig+0x1f8>
 8010a96:	2b80      	cmp	r3, #128	; 0x80
 8010a98:	d814      	bhi.n	8010ac4 <UART_SetConfig+0x210>
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d002      	beq.n	8010aa4 <UART_SetConfig+0x1f0>
 8010a9e:	2b40      	cmp	r3, #64	; 0x40
 8010aa0:	d008      	beq.n	8010ab4 <UART_SetConfig+0x200>
 8010aa2:	e00f      	b.n	8010ac4 <UART_SetConfig+0x210>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010aaa:	e082      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010aac:	2302      	movs	r3, #2
 8010aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ab2:	e07e      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010ab4:	2304      	movs	r3, #4
 8010ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010aba:	e07a      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010abc:	2308      	movs	r3, #8
 8010abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ac2:	e076      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010ac4:	2310      	movs	r3, #16
 8010ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010aca:	e072      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a35      	ldr	r2, [pc, #212]	; (8010ba8 <UART_SetConfig+0x2f4>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d12a      	bne.n	8010b2c <UART_SetConfig+0x278>
 8010ad6:	4b30      	ldr	r3, [pc, #192]	; (8010b98 <UART_SetConfig+0x2e4>)
 8010ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ae4:	d01a      	beq.n	8010b1c <UART_SetConfig+0x268>
 8010ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010aea:	d81b      	bhi.n	8010b24 <UART_SetConfig+0x270>
 8010aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010af0:	d00c      	beq.n	8010b0c <UART_SetConfig+0x258>
 8010af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010af6:	d815      	bhi.n	8010b24 <UART_SetConfig+0x270>
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d003      	beq.n	8010b04 <UART_SetConfig+0x250>
 8010afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b00:	d008      	beq.n	8010b14 <UART_SetConfig+0x260>
 8010b02:	e00f      	b.n	8010b24 <UART_SetConfig+0x270>
 8010b04:	2300      	movs	r3, #0
 8010b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b0a:	e052      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b12:	e04e      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b14:	2304      	movs	r3, #4
 8010b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b1a:	e04a      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b1c:	2308      	movs	r3, #8
 8010b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b22:	e046      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b24:	2310      	movs	r3, #16
 8010b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b2a:	e042      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a17      	ldr	r2, [pc, #92]	; (8010b90 <UART_SetConfig+0x2dc>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d13a      	bne.n	8010bac <UART_SetConfig+0x2f8>
 8010b36:	4b18      	ldr	r3, [pc, #96]	; (8010b98 <UART_SetConfig+0x2e4>)
 8010b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010b44:	d01a      	beq.n	8010b7c <UART_SetConfig+0x2c8>
 8010b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010b4a:	d81b      	bhi.n	8010b84 <UART_SetConfig+0x2d0>
 8010b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b50:	d00c      	beq.n	8010b6c <UART_SetConfig+0x2b8>
 8010b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b56:	d815      	bhi.n	8010b84 <UART_SetConfig+0x2d0>
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d003      	beq.n	8010b64 <UART_SetConfig+0x2b0>
 8010b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b60:	d008      	beq.n	8010b74 <UART_SetConfig+0x2c0>
 8010b62:	e00f      	b.n	8010b84 <UART_SetConfig+0x2d0>
 8010b64:	2300      	movs	r3, #0
 8010b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b6a:	e022      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b6c:	2302      	movs	r3, #2
 8010b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b72:	e01e      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b74:	2304      	movs	r3, #4
 8010b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b7a:	e01a      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b7c:	2308      	movs	r3, #8
 8010b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b82:	e016      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b84:	2310      	movs	r3, #16
 8010b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b8a:	e012      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b8c:	cfff69f3 	.word	0xcfff69f3
 8010b90:	40008000 	.word	0x40008000
 8010b94:	40013800 	.word	0x40013800
 8010b98:	40021000 	.word	0x40021000
 8010b9c:	40004400 	.word	0x40004400
 8010ba0:	40004800 	.word	0x40004800
 8010ba4:	40004c00 	.word	0x40004c00
 8010ba8:	40005000 	.word	0x40005000
 8010bac:	2310      	movs	r3, #16
 8010bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4aae      	ldr	r2, [pc, #696]	; (8010e70 <UART_SetConfig+0x5bc>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	f040 8097 	bne.w	8010cec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010bbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010bc2:	2b08      	cmp	r3, #8
 8010bc4:	d823      	bhi.n	8010c0e <UART_SetConfig+0x35a>
 8010bc6:	a201      	add	r2, pc, #4	; (adr r2, 8010bcc <UART_SetConfig+0x318>)
 8010bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bcc:	08010bf1 	.word	0x08010bf1
 8010bd0:	08010c0f 	.word	0x08010c0f
 8010bd4:	08010bf9 	.word	0x08010bf9
 8010bd8:	08010c0f 	.word	0x08010c0f
 8010bdc:	08010bff 	.word	0x08010bff
 8010be0:	08010c0f 	.word	0x08010c0f
 8010be4:	08010c0f 	.word	0x08010c0f
 8010be8:	08010c0f 	.word	0x08010c0f
 8010bec:	08010c07 	.word	0x08010c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010bf0:	f7fd fbe2 	bl	800e3b8 <HAL_RCC_GetPCLK1Freq>
 8010bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010bf6:	e010      	b.n	8010c1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010bf8:	4b9e      	ldr	r3, [pc, #632]	; (8010e74 <UART_SetConfig+0x5c0>)
 8010bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010bfc:	e00d      	b.n	8010c1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010bfe:	f7fd fb6d 	bl	800e2dc <HAL_RCC_GetSysClockFreq>
 8010c02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010c04:	e009      	b.n	8010c1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010c0c:	e005      	b.n	8010c1a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010c12:	2301      	movs	r3, #1
 8010c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	f000 8130 	beq.w	8010e82 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c26:	4a94      	ldr	r2, [pc, #592]	; (8010e78 <UART_SetConfig+0x5c4>)
 8010c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	685a      	ldr	r2, [r3, #4]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	005b      	lsls	r3, r3, #1
 8010c3e:	4413      	add	r3, r2
 8010c40:	69ba      	ldr	r2, [r7, #24]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d305      	bcc.n	8010c52 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c4c:	69ba      	ldr	r2, [r7, #24]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d903      	bls.n	8010c5a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010c52:	2301      	movs	r3, #1
 8010c54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010c58:	e113      	b.n	8010e82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	60bb      	str	r3, [r7, #8]
 8010c60:	60fa      	str	r2, [r7, #12]
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c66:	4a84      	ldr	r2, [pc, #528]	; (8010e78 <UART_SetConfig+0x5c4>)
 8010c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	2200      	movs	r2, #0
 8010c70:	603b      	str	r3, [r7, #0]
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010c7c:	f7f5 fc4e 	bl	800651c <__aeabi_uldivmod>
 8010c80:	4602      	mov	r2, r0
 8010c82:	460b      	mov	r3, r1
 8010c84:	4610      	mov	r0, r2
 8010c86:	4619      	mov	r1, r3
 8010c88:	f04f 0200 	mov.w	r2, #0
 8010c8c:	f04f 0300 	mov.w	r3, #0
 8010c90:	020b      	lsls	r3, r1, #8
 8010c92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c96:	0202      	lsls	r2, r0, #8
 8010c98:	6979      	ldr	r1, [r7, #20]
 8010c9a:	6849      	ldr	r1, [r1, #4]
 8010c9c:	0849      	lsrs	r1, r1, #1
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	eb12 0804 	adds.w	r8, r2, r4
 8010ca8:	eb43 0905 	adc.w	r9, r3, r5
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	469a      	mov	sl, r3
 8010cb4:	4693      	mov	fp, r2
 8010cb6:	4652      	mov	r2, sl
 8010cb8:	465b      	mov	r3, fp
 8010cba:	4640      	mov	r0, r8
 8010cbc:	4649      	mov	r1, r9
 8010cbe:	f7f5 fc2d 	bl	800651c <__aeabi_uldivmod>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	4613      	mov	r3, r2
 8010cc8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010cca:	6a3b      	ldr	r3, [r7, #32]
 8010ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010cd0:	d308      	bcc.n	8010ce4 <UART_SetConfig+0x430>
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cd8:	d204      	bcs.n	8010ce4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	6a3a      	ldr	r2, [r7, #32]
 8010ce0:	60da      	str	r2, [r3, #12]
 8010ce2:	e0ce      	b.n	8010e82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010cea:	e0ca      	b.n	8010e82 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	69db      	ldr	r3, [r3, #28]
 8010cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cf4:	d166      	bne.n	8010dc4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010cfa:	2b08      	cmp	r3, #8
 8010cfc:	d827      	bhi.n	8010d4e <UART_SetConfig+0x49a>
 8010cfe:	a201      	add	r2, pc, #4	; (adr r2, 8010d04 <UART_SetConfig+0x450>)
 8010d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d04:	08010d29 	.word	0x08010d29
 8010d08:	08010d31 	.word	0x08010d31
 8010d0c:	08010d39 	.word	0x08010d39
 8010d10:	08010d4f 	.word	0x08010d4f
 8010d14:	08010d3f 	.word	0x08010d3f
 8010d18:	08010d4f 	.word	0x08010d4f
 8010d1c:	08010d4f 	.word	0x08010d4f
 8010d20:	08010d4f 	.word	0x08010d4f
 8010d24:	08010d47 	.word	0x08010d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d28:	f7fd fb46 	bl	800e3b8 <HAL_RCC_GetPCLK1Freq>
 8010d2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010d2e:	e014      	b.n	8010d5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d30:	f7fd fb58 	bl	800e3e4 <HAL_RCC_GetPCLK2Freq>
 8010d34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010d36:	e010      	b.n	8010d5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d38:	4b4e      	ldr	r3, [pc, #312]	; (8010e74 <UART_SetConfig+0x5c0>)
 8010d3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010d3c:	e00d      	b.n	8010d5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d3e:	f7fd facd 	bl	800e2dc <HAL_RCC_GetSysClockFreq>
 8010d42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010d44:	e009      	b.n	8010d5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010d4c:	e005      	b.n	8010d5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010d52:	2301      	movs	r3, #1
 8010d54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010d58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f000 8090 	beq.w	8010e82 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d66:	4a44      	ldr	r2, [pc, #272]	; (8010e78 <UART_SetConfig+0x5c4>)
 8010d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d74:	005a      	lsls	r2, r3, #1
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	085b      	lsrs	r3, r3, #1
 8010d7c:	441a      	add	r2, r3
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d88:	6a3b      	ldr	r3, [r7, #32]
 8010d8a:	2b0f      	cmp	r3, #15
 8010d8c:	d916      	bls.n	8010dbc <UART_SetConfig+0x508>
 8010d8e:	6a3b      	ldr	r3, [r7, #32]
 8010d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d94:	d212      	bcs.n	8010dbc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	f023 030f 	bic.w	r3, r3, #15
 8010d9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010da0:	6a3b      	ldr	r3, [r7, #32]
 8010da2:	085b      	lsrs	r3, r3, #1
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	f003 0307 	and.w	r3, r3, #7
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	8bfb      	ldrh	r3, [r7, #30]
 8010dae:	4313      	orrs	r3, r2
 8010db0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	8bfa      	ldrh	r2, [r7, #30]
 8010db8:	60da      	str	r2, [r3, #12]
 8010dba:	e062      	b.n	8010e82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010dc2:	e05e      	b.n	8010e82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010dc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010dc8:	2b08      	cmp	r3, #8
 8010dca:	d828      	bhi.n	8010e1e <UART_SetConfig+0x56a>
 8010dcc:	a201      	add	r2, pc, #4	; (adr r2, 8010dd4 <UART_SetConfig+0x520>)
 8010dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dd2:	bf00      	nop
 8010dd4:	08010df9 	.word	0x08010df9
 8010dd8:	08010e01 	.word	0x08010e01
 8010ddc:	08010e09 	.word	0x08010e09
 8010de0:	08010e1f 	.word	0x08010e1f
 8010de4:	08010e0f 	.word	0x08010e0f
 8010de8:	08010e1f 	.word	0x08010e1f
 8010dec:	08010e1f 	.word	0x08010e1f
 8010df0:	08010e1f 	.word	0x08010e1f
 8010df4:	08010e17 	.word	0x08010e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010df8:	f7fd fade 	bl	800e3b8 <HAL_RCC_GetPCLK1Freq>
 8010dfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010dfe:	e014      	b.n	8010e2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e00:	f7fd faf0 	bl	800e3e4 <HAL_RCC_GetPCLK2Freq>
 8010e04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010e06:	e010      	b.n	8010e2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010e08:	4b1a      	ldr	r3, [pc, #104]	; (8010e74 <UART_SetConfig+0x5c0>)
 8010e0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010e0c:	e00d      	b.n	8010e2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e0e:	f7fd fa65 	bl	800e2dc <HAL_RCC_GetSysClockFreq>
 8010e12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010e14:	e009      	b.n	8010e2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010e1c:	e005      	b.n	8010e2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010e22:	2301      	movs	r3, #1
 8010e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010e28:	bf00      	nop
    }

    if (pclk != 0U)
 8010e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d028      	beq.n	8010e82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e34:	4a10      	ldr	r2, [pc, #64]	; (8010e78 <UART_SetConfig+0x5c4>)
 8010e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e3a:	461a      	mov	r2, r3
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	085b      	lsrs	r3, r3, #1
 8010e48:	441a      	add	r2, r3
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e54:	6a3b      	ldr	r3, [r7, #32]
 8010e56:	2b0f      	cmp	r3, #15
 8010e58:	d910      	bls.n	8010e7c <UART_SetConfig+0x5c8>
 8010e5a:	6a3b      	ldr	r3, [r7, #32]
 8010e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e60:	d20c      	bcs.n	8010e7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010e62:	6a3b      	ldr	r3, [r7, #32]
 8010e64:	b29a      	uxth	r2, r3
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	60da      	str	r2, [r3, #12]
 8010e6c:	e009      	b.n	8010e82 <UART_SetConfig+0x5ce>
 8010e6e:	bf00      	nop
 8010e70:	40008000 	.word	0x40008000
 8010e74:	00f42400 	.word	0x00f42400
 8010e78:	080236d4 	.word	0x080236d4
      }
      else
      {
        ret = HAL_ERROR;
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	2201      	movs	r2, #1
 8010e86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	2200      	movs	r2, #0
 8010e96:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010e9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3730      	adds	r7, #48	; 0x30
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb8:	f003 0308 	and.w	r3, r3, #8
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d00a      	beq.n	8010ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	430a      	orrs	r2, r1
 8010ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eda:	f003 0301 	and.w	r3, r3, #1
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00a      	beq.n	8010ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	430a      	orrs	r2, r1
 8010ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010efc:	f003 0302 	and.w	r3, r3, #2
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d00a      	beq.n	8010f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	430a      	orrs	r2, r1
 8010f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f1e:	f003 0304 	and.w	r3, r3, #4
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00a      	beq.n	8010f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	430a      	orrs	r2, r1
 8010f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f40:	f003 0310 	and.w	r3, r3, #16
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d00a      	beq.n	8010f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	689b      	ldr	r3, [r3, #8]
 8010f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	430a      	orrs	r2, r1
 8010f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f62:	f003 0320 	and.w	r3, r3, #32
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00a      	beq.n	8010f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	430a      	orrs	r2, r1
 8010f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d01a      	beq.n	8010fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	430a      	orrs	r2, r1
 8010fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010faa:	d10a      	bne.n	8010fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	430a      	orrs	r2, r1
 8010fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00a      	beq.n	8010fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	430a      	orrs	r2, r1
 8010fe2:	605a      	str	r2, [r3, #4]
  }
}
 8010fe4:	bf00      	nop
 8010fe6:	370c      	adds	r7, #12
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b098      	sub	sp, #96	; 0x60
 8010ff4:	af02      	add	r7, sp, #8
 8010ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011000:	f7f8 f9ae 	bl	8009360 <HAL_GetTick>
 8011004:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f003 0308 	and.w	r3, r3, #8
 8011010:	2b08      	cmp	r3, #8
 8011012:	d12f      	bne.n	8011074 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801101c:	2200      	movs	r2, #0
 801101e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 f88e 	bl	8011144 <UART_WaitOnFlagUntilTimeout>
 8011028:	4603      	mov	r3, r0
 801102a:	2b00      	cmp	r3, #0
 801102c:	d022      	beq.n	8011074 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011036:	e853 3f00 	ldrex	r3, [r3]
 801103a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801103c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801103e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011042:	653b      	str	r3, [r7, #80]	; 0x50
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	461a      	mov	r2, r3
 801104a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801104c:	647b      	str	r3, [r7, #68]	; 0x44
 801104e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011054:	e841 2300 	strex	r3, r2, [r1]
 8011058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801105a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801105c:	2b00      	cmp	r3, #0
 801105e:	d1e6      	bne.n	801102e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2220      	movs	r2, #32
 8011064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011070:	2303      	movs	r3, #3
 8011072:	e063      	b.n	801113c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f003 0304 	and.w	r3, r3, #4
 801107e:	2b04      	cmp	r3, #4
 8011080:	d149      	bne.n	8011116 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011082:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011086:	9300      	str	r3, [sp, #0]
 8011088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801108a:	2200      	movs	r2, #0
 801108c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 f857 	bl	8011144 <UART_WaitOnFlagUntilTimeout>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d03c      	beq.n	8011116 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a4:	e853 3f00 	ldrex	r3, [r3]
 80110a8:	623b      	str	r3, [r7, #32]
   return(result);
 80110aa:	6a3b      	ldr	r3, [r7, #32]
 80110ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80110b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	461a      	mov	r2, r3
 80110b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ba:	633b      	str	r3, [r7, #48]	; 0x30
 80110bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110c2:	e841 2300 	strex	r3, r2, [r1]
 80110c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80110c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d1e6      	bne.n	801109c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	3308      	adds	r3, #8
 80110d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	e853 3f00 	ldrex	r3, [r3]
 80110dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f023 0301 	bic.w	r3, r3, #1
 80110e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	3308      	adds	r3, #8
 80110ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110ee:	61fa      	str	r2, [r7, #28]
 80110f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f2:	69b9      	ldr	r1, [r7, #24]
 80110f4:	69fa      	ldr	r2, [r7, #28]
 80110f6:	e841 2300 	strex	r3, r2, [r1]
 80110fa:	617b      	str	r3, [r7, #20]
   return(result);
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d1e5      	bne.n	80110ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2220      	movs	r2, #32
 8011106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2200      	movs	r2, #0
 801110e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011112:	2303      	movs	r3, #3
 8011114:	e012      	b.n	801113c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2220      	movs	r2, #32
 801111a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2220      	movs	r2, #32
 8011122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2200      	movs	r2, #0
 801112a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801113a:	2300      	movs	r3, #0
}
 801113c:	4618      	mov	r0, r3
 801113e:	3758      	adds	r7, #88	; 0x58
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	603b      	str	r3, [r7, #0]
 8011150:	4613      	mov	r3, r2
 8011152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011154:	e04f      	b.n	80111f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011156:	69bb      	ldr	r3, [r7, #24]
 8011158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801115c:	d04b      	beq.n	80111f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801115e:	f7f8 f8ff 	bl	8009360 <HAL_GetTick>
 8011162:	4602      	mov	r2, r0
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	1ad3      	subs	r3, r2, r3
 8011168:	69ba      	ldr	r2, [r7, #24]
 801116a:	429a      	cmp	r2, r3
 801116c:	d302      	bcc.n	8011174 <UART_WaitOnFlagUntilTimeout+0x30>
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d101      	bne.n	8011178 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011174:	2303      	movs	r3, #3
 8011176:	e04e      	b.n	8011216 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	f003 0304 	and.w	r3, r3, #4
 8011182:	2b00      	cmp	r3, #0
 8011184:	d037      	beq.n	80111f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	2b80      	cmp	r3, #128	; 0x80
 801118a:	d034      	beq.n	80111f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	2b40      	cmp	r3, #64	; 0x40
 8011190:	d031      	beq.n	80111f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	69db      	ldr	r3, [r3, #28]
 8011198:	f003 0308 	and.w	r3, r3, #8
 801119c:	2b08      	cmp	r3, #8
 801119e:	d110      	bne.n	80111c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2208      	movs	r2, #8
 80111a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80111a8:	68f8      	ldr	r0, [r7, #12]
 80111aa:	f000 f99c 	bl	80114e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2208      	movs	r2, #8
 80111b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2200      	movs	r2, #0
 80111ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80111be:	2301      	movs	r3, #1
 80111c0:	e029      	b.n	8011216 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	69db      	ldr	r3, [r3, #28]
 80111c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80111d0:	d111      	bne.n	80111f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 f982 	bl	80114e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2220      	movs	r2, #32
 80111e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2200      	movs	r2, #0
 80111ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80111f2:	2303      	movs	r3, #3
 80111f4:	e00f      	b.n	8011216 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	69da      	ldr	r2, [r3, #28]
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	4013      	ands	r3, r2
 8011200:	68ba      	ldr	r2, [r7, #8]
 8011202:	429a      	cmp	r2, r3
 8011204:	bf0c      	ite	eq
 8011206:	2301      	moveq	r3, #1
 8011208:	2300      	movne	r3, #0
 801120a:	b2db      	uxtb	r3, r3
 801120c:	461a      	mov	r2, r3
 801120e:	79fb      	ldrb	r3, [r7, #7]
 8011210:	429a      	cmp	r2, r3
 8011212:	d0a0      	beq.n	8011156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011214:	2300      	movs	r3, #0
}
 8011216:	4618      	mov	r0, r3
 8011218:	3710      	adds	r7, #16
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
	...

08011220 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011220:	b480      	push	{r7}
 8011222:	b0a3      	sub	sp, #140	; 0x8c
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	4613      	mov	r3, r2
 801122c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	68ba      	ldr	r2, [r7, #8]
 8011232:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	88fa      	ldrh	r2, [r7, #6]
 8011238:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	88fa      	ldrh	r2, [r7, #6]
 8011240:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2200      	movs	r2, #0
 8011248:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	689b      	ldr	r3, [r3, #8]
 801124e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011252:	d10e      	bne.n	8011272 <UART_Start_Receive_IT+0x52>
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	691b      	ldr	r3, [r3, #16]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d105      	bne.n	8011268 <UART_Start_Receive_IT+0x48>
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011262:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011266:	e02d      	b.n	80112c4 <UART_Start_Receive_IT+0xa4>
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	22ff      	movs	r2, #255	; 0xff
 801126c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011270:	e028      	b.n	80112c4 <UART_Start_Receive_IT+0xa4>
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	689b      	ldr	r3, [r3, #8]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d10d      	bne.n	8011296 <UART_Start_Receive_IT+0x76>
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	691b      	ldr	r3, [r3, #16]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d104      	bne.n	801128c <UART_Start_Receive_IT+0x6c>
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	22ff      	movs	r2, #255	; 0xff
 8011286:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801128a:	e01b      	b.n	80112c4 <UART_Start_Receive_IT+0xa4>
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	227f      	movs	r2, #127	; 0x7f
 8011290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011294:	e016      	b.n	80112c4 <UART_Start_Receive_IT+0xa4>
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	689b      	ldr	r3, [r3, #8]
 801129a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801129e:	d10d      	bne.n	80112bc <UART_Start_Receive_IT+0x9c>
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	691b      	ldr	r3, [r3, #16]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d104      	bne.n	80112b2 <UART_Start_Receive_IT+0x92>
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	227f      	movs	r2, #127	; 0x7f
 80112ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80112b0:	e008      	b.n	80112c4 <UART_Start_Receive_IT+0xa4>
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	223f      	movs	r2, #63	; 0x3f
 80112b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80112ba:	e003      	b.n	80112c4 <UART_Start_Receive_IT+0xa4>
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2200      	movs	r2, #0
 80112c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2200      	movs	r2, #0
 80112c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2222      	movs	r2, #34	; 0x22
 80112d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	3308      	adds	r3, #8
 80112da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80112de:	e853 3f00 	ldrex	r3, [r3]
 80112e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80112e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80112e6:	f043 0301 	orr.w	r3, r3, #1
 80112ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	3308      	adds	r3, #8
 80112f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80112f8:	673a      	str	r2, [r7, #112]	; 0x70
 80112fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80112fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011300:	e841 2300 	strex	r3, r2, [r1]
 8011304:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011308:	2b00      	cmp	r3, #0
 801130a:	d1e3      	bne.n	80112d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011314:	d14f      	bne.n	80113b6 <UART_Start_Receive_IT+0x196>
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801131c:	88fa      	ldrh	r2, [r7, #6]
 801131e:	429a      	cmp	r2, r3
 8011320:	d349      	bcc.n	80113b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801132a:	d107      	bne.n	801133c <UART_Start_Receive_IT+0x11c>
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	691b      	ldr	r3, [r3, #16]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d103      	bne.n	801133c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	4a47      	ldr	r2, [pc, #284]	; (8011454 <UART_Start_Receive_IT+0x234>)
 8011338:	675a      	str	r2, [r3, #116]	; 0x74
 801133a:	e002      	b.n	8011342 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	4a46      	ldr	r2, [pc, #280]	; (8011458 <UART_Start_Receive_IT+0x238>)
 8011340:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	691b      	ldr	r3, [r3, #16]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d01a      	beq.n	8011380 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011352:	e853 3f00 	ldrex	r3, [r3]
 8011356:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801135e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	461a      	mov	r2, r3
 8011368:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801136c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801136e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011370:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011372:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011374:	e841 2300 	strex	r3, r2, [r1]
 8011378:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801137a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801137c:	2b00      	cmp	r3, #0
 801137e:	d1e4      	bne.n	801134a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	3308      	adds	r3, #8
 8011386:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801138a:	e853 3f00 	ldrex	r3, [r3]
 801138e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011396:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	3308      	adds	r3, #8
 801139e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80113a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80113a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80113a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113a8:	e841 2300 	strex	r3, r2, [r1]
 80113ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80113ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d1e5      	bne.n	8011380 <UART_Start_Receive_IT+0x160>
 80113b4:	e046      	b.n	8011444 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113be:	d107      	bne.n	80113d0 <UART_Start_Receive_IT+0x1b0>
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	691b      	ldr	r3, [r3, #16]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d103      	bne.n	80113d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	4a24      	ldr	r2, [pc, #144]	; (801145c <UART_Start_Receive_IT+0x23c>)
 80113cc:	675a      	str	r2, [r3, #116]	; 0x74
 80113ce:	e002      	b.n	80113d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	4a23      	ldr	r2, [pc, #140]	; (8011460 <UART_Start_Receive_IT+0x240>)
 80113d4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	691b      	ldr	r3, [r3, #16]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d019      	beq.n	8011412 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e6:	e853 3f00 	ldrex	r3, [r3]
 80113ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80113ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80113f2:	677b      	str	r3, [r7, #116]	; 0x74
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	461a      	mov	r2, r3
 80113fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80113fc:	637b      	str	r3, [r7, #52]	; 0x34
 80113fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011404:	e841 2300 	strex	r3, r2, [r1]
 8011408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140c:	2b00      	cmp	r3, #0
 801140e:	d1e6      	bne.n	80113de <UART_Start_Receive_IT+0x1be>
 8011410:	e018      	b.n	8011444 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	e853 3f00 	ldrex	r3, [r3]
 801141e:	613b      	str	r3, [r7, #16]
   return(result);
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	f043 0320 	orr.w	r3, r3, #32
 8011426:	67bb      	str	r3, [r7, #120]	; 0x78
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	461a      	mov	r2, r3
 801142e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011430:	623b      	str	r3, [r7, #32]
 8011432:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011434:	69f9      	ldr	r1, [r7, #28]
 8011436:	6a3a      	ldr	r2, [r7, #32]
 8011438:	e841 2300 	strex	r3, r2, [r1]
 801143c:	61bb      	str	r3, [r7, #24]
   return(result);
 801143e:	69bb      	ldr	r3, [r7, #24]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d1e6      	bne.n	8011412 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011444:	2300      	movs	r3, #0
}
 8011446:	4618      	mov	r0, r3
 8011448:	378c      	adds	r7, #140	; 0x8c
 801144a:	46bd      	mov	sp, r7
 801144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	08011e3d 	.word	0x08011e3d
 8011458:	08011add 	.word	0x08011add
 801145c:	08011925 	.word	0x08011925
 8011460:	0801176d 	.word	0x0801176d

08011464 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011464:	b480      	push	{r7}
 8011466:	b08f      	sub	sp, #60	; 0x3c
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011472:	6a3b      	ldr	r3, [r7, #32]
 8011474:	e853 3f00 	ldrex	r3, [r3]
 8011478:	61fb      	str	r3, [r7, #28]
   return(result);
 801147a:	69fb      	ldr	r3, [r7, #28]
 801147c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011480:	637b      	str	r3, [r7, #52]	; 0x34
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	461a      	mov	r2, r3
 8011488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801148a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801148c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801148e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011492:	e841 2300 	strex	r3, r2, [r1]
 8011496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149a:	2b00      	cmp	r3, #0
 801149c:	d1e6      	bne.n	801146c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	3308      	adds	r3, #8
 80114a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	e853 3f00 	ldrex	r3, [r3]
 80114ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80114b4:	633b      	str	r3, [r7, #48]	; 0x30
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	3308      	adds	r3, #8
 80114bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114be:	61ba      	str	r2, [r7, #24]
 80114c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c2:	6979      	ldr	r1, [r7, #20]
 80114c4:	69ba      	ldr	r2, [r7, #24]
 80114c6:	e841 2300 	strex	r3, r2, [r1]
 80114ca:	613b      	str	r3, [r7, #16]
   return(result);
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d1e5      	bne.n	801149e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2220      	movs	r2, #32
 80114d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80114da:	bf00      	nop
 80114dc:	373c      	adds	r7, #60	; 0x3c
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr

080114e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114e6:	b480      	push	{r7}
 80114e8:	b095      	sub	sp, #84	; 0x54
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f6:	e853 3f00 	ldrex	r3, [r3]
 80114fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80114fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	461a      	mov	r2, r3
 801150a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801150c:	643b      	str	r3, [r7, #64]	; 0x40
 801150e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011514:	e841 2300 	strex	r3, r2, [r1]
 8011518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151c:	2b00      	cmp	r3, #0
 801151e:	d1e6      	bne.n	80114ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	3308      	adds	r3, #8
 8011526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011528:	6a3b      	ldr	r3, [r7, #32]
 801152a:	e853 3f00 	ldrex	r3, [r3]
 801152e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011536:	f023 0301 	bic.w	r3, r3, #1
 801153a:	64bb      	str	r3, [r7, #72]	; 0x48
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	3308      	adds	r3, #8
 8011542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801154a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801154c:	e841 2300 	strex	r3, r2, [r1]
 8011550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011554:	2b00      	cmp	r3, #0
 8011556:	d1e3      	bne.n	8011520 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801155c:	2b01      	cmp	r3, #1
 801155e:	d118      	bne.n	8011592 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	e853 3f00 	ldrex	r3, [r3]
 801156c:	60bb      	str	r3, [r7, #8]
   return(result);
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	f023 0310 	bic.w	r3, r3, #16
 8011574:	647b      	str	r3, [r7, #68]	; 0x44
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	461a      	mov	r2, r3
 801157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801157e:	61bb      	str	r3, [r7, #24]
 8011580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011582:	6979      	ldr	r1, [r7, #20]
 8011584:	69ba      	ldr	r2, [r7, #24]
 8011586:	e841 2300 	strex	r3, r2, [r1]
 801158a:	613b      	str	r3, [r7, #16]
   return(result);
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1e6      	bne.n	8011560 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2220      	movs	r2, #32
 8011596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80115a6:	bf00      	nop
 80115a8:	3754      	adds	r7, #84	; 0x54
 80115aa:	46bd      	mov	sp, r7
 80115ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b0:	4770      	bx	lr

080115b2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b090      	sub	sp, #64	; 0x40
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f003 0320 	and.w	r3, r3, #32
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d137      	bne.n	801163e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80115ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d0:	2200      	movs	r2, #0
 80115d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80115d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	3308      	adds	r3, #8
 80115dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e0:	e853 3f00 	ldrex	r3, [r3]
 80115e4:	623b      	str	r3, [r7, #32]
   return(result);
 80115e6:	6a3b      	ldr	r3, [r7, #32]
 80115e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80115ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	3308      	adds	r3, #8
 80115f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115f6:	633a      	str	r2, [r7, #48]	; 0x30
 80115f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115fe:	e841 2300 	strex	r3, r2, [r1]
 8011602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011606:	2b00      	cmp	r3, #0
 8011608:	d1e5      	bne.n	80115d6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801160a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	e853 3f00 	ldrex	r3, [r3]
 8011616:	60fb      	str	r3, [r7, #12]
   return(result);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801161e:	637b      	str	r3, [r7, #52]	; 0x34
 8011620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	461a      	mov	r2, r3
 8011626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011628:	61fb      	str	r3, [r7, #28]
 801162a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801162c:	69b9      	ldr	r1, [r7, #24]
 801162e:	69fa      	ldr	r2, [r7, #28]
 8011630:	e841 2300 	strex	r3, r2, [r1]
 8011634:	617b      	str	r3, [r7, #20]
   return(result);
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1e6      	bne.n	801160a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801163c:	e002      	b.n	8011644 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801163e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011640:	f7ff f902 	bl	8010848 <HAL_UART_TxCpltCallback>
}
 8011644:	bf00      	nop
 8011646:	3740      	adds	r7, #64	; 0x40
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b084      	sub	sp, #16
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011658:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f7ff f8fe 	bl	801085c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011660:	bf00      	nop
 8011662:	3710      	adds	r7, #16
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011674:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801167c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011684:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	689b      	ldr	r3, [r3, #8]
 801168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011690:	2b80      	cmp	r3, #128	; 0x80
 8011692:	d109      	bne.n	80116a8 <UART_DMAError+0x40>
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	2b21      	cmp	r3, #33	; 0x21
 8011698:	d106      	bne.n	80116a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	2200      	movs	r2, #0
 801169e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80116a2:	6978      	ldr	r0, [r7, #20]
 80116a4:	f7ff fede 	bl	8011464 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116b2:	2b40      	cmp	r3, #64	; 0x40
 80116b4:	d109      	bne.n	80116ca <UART_DMAError+0x62>
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2b22      	cmp	r3, #34	; 0x22
 80116ba:	d106      	bne.n	80116ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	2200      	movs	r2, #0
 80116c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80116c4:	6978      	ldr	r0, [r7, #20]
 80116c6:	f7ff ff0e 	bl	80114e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116d0:	f043 0210 	orr.w	r2, r3, #16
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80116da:	6978      	ldr	r0, [r7, #20]
 80116dc:	f7ff f8d2 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116e0:	bf00      	nop
 80116e2:	3718      	adds	r7, #24
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	2200      	movs	r2, #0
 80116fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2200      	movs	r2, #0
 8011702:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f7ff f8bc 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801170c:	bf00      	nop
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b088      	sub	sp, #32
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	e853 3f00 	ldrex	r3, [r3]
 8011728:	60bb      	str	r3, [r7, #8]
   return(result);
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011730:	61fb      	str	r3, [r7, #28]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	461a      	mov	r2, r3
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	61bb      	str	r3, [r7, #24]
 801173c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801173e:	6979      	ldr	r1, [r7, #20]
 8011740:	69ba      	ldr	r2, [r7, #24]
 8011742:	e841 2300 	strex	r3, r2, [r1]
 8011746:	613b      	str	r3, [r7, #16]
   return(result);
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d1e6      	bne.n	801171c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2220      	movs	r2, #32
 8011752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2200      	movs	r2, #0
 801175a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f7ff f873 	bl	8010848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011762:	bf00      	nop
 8011764:	3720      	adds	r7, #32
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
	...

0801176c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b09c      	sub	sp, #112	; 0x70
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801177a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011784:	2b22      	cmp	r3, #34	; 0x22
 8011786:	f040 80be 	bne.w	8011906 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011790:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011794:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011798:	b2d9      	uxtb	r1, r3
 801179a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801179e:	b2da      	uxtb	r2, r3
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117a4:	400a      	ands	r2, r1
 80117a6:	b2d2      	uxtb	r2, r2
 80117a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117ae:	1c5a      	adds	r2, r3, #1
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	3b01      	subs	r3, #1
 80117be:	b29a      	uxth	r2, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f040 80a1 	bne.w	8011916 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117dc:	e853 3f00 	ldrex	r3, [r3]
 80117e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80117e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80117e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	461a      	mov	r2, r3
 80117f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80117f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80117f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80117fa:	e841 2300 	strex	r3, r2, [r1]
 80117fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011802:	2b00      	cmp	r3, #0
 8011804:	d1e6      	bne.n	80117d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	3308      	adds	r3, #8
 801180c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011810:	e853 3f00 	ldrex	r3, [r3]
 8011814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011818:	f023 0301 	bic.w	r3, r3, #1
 801181c:	667b      	str	r3, [r7, #100]	; 0x64
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	3308      	adds	r3, #8
 8011824:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011826:	647a      	str	r2, [r7, #68]	; 0x44
 8011828:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801182a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801182c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801182e:	e841 2300 	strex	r3, r2, [r1]
 8011832:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011836:	2b00      	cmp	r3, #0
 8011838:	d1e5      	bne.n	8011806 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2220      	movs	r2, #32
 801183e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2200      	movs	r2, #0
 8011846:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2200      	movs	r2, #0
 801184c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	4a33      	ldr	r2, [pc, #204]	; (8011920 <UART_RxISR_8BIT+0x1b4>)
 8011854:	4293      	cmp	r3, r2
 8011856:	d01f      	beq.n	8011898 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011862:	2b00      	cmp	r3, #0
 8011864:	d018      	beq.n	8011898 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186e:	e853 3f00 	ldrex	r3, [r3]
 8011872:	623b      	str	r3, [r7, #32]
   return(result);
 8011874:	6a3b      	ldr	r3, [r7, #32]
 8011876:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801187a:	663b      	str	r3, [r7, #96]	; 0x60
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	461a      	mov	r2, r3
 8011882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011884:	633b      	str	r3, [r7, #48]	; 0x30
 8011886:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801188a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801188c:	e841 2300 	strex	r3, r2, [r1]
 8011890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011894:	2b00      	cmp	r3, #0
 8011896:	d1e6      	bne.n	8011866 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801189c:	2b01      	cmp	r3, #1
 801189e:	d12e      	bne.n	80118fe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	e853 3f00 	ldrex	r3, [r3]
 80118b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f023 0310 	bic.w	r3, r3, #16
 80118ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	461a      	mov	r2, r3
 80118c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118c4:	61fb      	str	r3, [r7, #28]
 80118c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118c8:	69b9      	ldr	r1, [r7, #24]
 80118ca:	69fa      	ldr	r2, [r7, #28]
 80118cc:	e841 2300 	strex	r3, r2, [r1]
 80118d0:	617b      	str	r3, [r7, #20]
   return(result);
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1e6      	bne.n	80118a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	69db      	ldr	r3, [r3, #28]
 80118de:	f003 0310 	and.w	r3, r3, #16
 80118e2:	2b10      	cmp	r3, #16
 80118e4:	d103      	bne.n	80118ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2210      	movs	r2, #16
 80118ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80118f4:	4619      	mov	r1, r3
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7f6 f8ac 	bl	8007a54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80118fc:	e00b      	b.n	8011916 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f7fe ffb6 	bl	8010870 <HAL_UART_RxCpltCallback>
}
 8011904:	e007      	b.n	8011916 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	699a      	ldr	r2, [r3, #24]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f042 0208 	orr.w	r2, r2, #8
 8011914:	619a      	str	r2, [r3, #24]
}
 8011916:	bf00      	nop
 8011918:	3770      	adds	r7, #112	; 0x70
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	40008000 	.word	0x40008000

08011924 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b09c      	sub	sp, #112	; 0x70
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011932:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801193c:	2b22      	cmp	r3, #34	; 0x22
 801193e:	f040 80be 	bne.w	8011abe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011948:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011950:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011952:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011956:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801195a:	4013      	ands	r3, r2
 801195c:	b29a      	uxth	r2, r3
 801195e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011960:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011966:	1c9a      	adds	r2, r3, #2
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011972:	b29b      	uxth	r3, r3
 8011974:	3b01      	subs	r3, #1
 8011976:	b29a      	uxth	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011984:	b29b      	uxth	r3, r3
 8011986:	2b00      	cmp	r3, #0
 8011988:	f040 80a1 	bne.w	8011ace <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011994:	e853 3f00 	ldrex	r3, [r3]
 8011998:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801199a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801199c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119a0:	667b      	str	r3, [r7, #100]	; 0x64
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	461a      	mov	r2, r3
 80119a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119aa:	657b      	str	r3, [r7, #84]	; 0x54
 80119ac:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80119b2:	e841 2300 	strex	r3, r2, [r1]
 80119b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80119b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d1e6      	bne.n	801198c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	3308      	adds	r3, #8
 80119c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119c8:	e853 3f00 	ldrex	r3, [r3]
 80119cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80119ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d0:	f023 0301 	bic.w	r3, r3, #1
 80119d4:	663b      	str	r3, [r7, #96]	; 0x60
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	3308      	adds	r3, #8
 80119dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80119de:	643a      	str	r2, [r7, #64]	; 0x40
 80119e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80119e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80119e6:	e841 2300 	strex	r3, r2, [r1]
 80119ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80119ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d1e5      	bne.n	80119be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2220      	movs	r2, #32
 80119f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2200      	movs	r2, #0
 80119fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2200      	movs	r2, #0
 8011a04:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4a33      	ldr	r2, [pc, #204]	; (8011ad8 <UART_RxISR_16BIT+0x1b4>)
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d01f      	beq.n	8011a50 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d018      	beq.n	8011a50 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a24:	6a3b      	ldr	r3, [r7, #32]
 8011a26:	e853 3f00 	ldrex	r3, [r3]
 8011a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a2c:	69fb      	ldr	r3, [r7, #28]
 8011a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	461a      	mov	r2, r3
 8011a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a3e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a44:	e841 2300 	strex	r3, r2, [r1]
 8011a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1e6      	bne.n	8011a1e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d12e      	bne.n	8011ab6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	e853 3f00 	ldrex	r3, [r3]
 8011a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	f023 0310 	bic.w	r3, r3, #16
 8011a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	461a      	mov	r2, r3
 8011a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011a7c:	61bb      	str	r3, [r7, #24]
 8011a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a80:	6979      	ldr	r1, [r7, #20]
 8011a82:	69ba      	ldr	r2, [r7, #24]
 8011a84:	e841 2300 	strex	r3, r2, [r1]
 8011a88:	613b      	str	r3, [r7, #16]
   return(result);
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1e6      	bne.n	8011a5e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	69db      	ldr	r3, [r3, #28]
 8011a96:	f003 0310 	and.w	r3, r3, #16
 8011a9a:	2b10      	cmp	r3, #16
 8011a9c:	d103      	bne.n	8011aa6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2210      	movs	r2, #16
 8011aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011aac:	4619      	mov	r1, r3
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f7f5 ffd0 	bl	8007a54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011ab4:	e00b      	b.n	8011ace <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f7fe feda 	bl	8010870 <HAL_UART_RxCpltCallback>
}
 8011abc:	e007      	b.n	8011ace <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	699a      	ldr	r2, [r3, #24]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f042 0208 	orr.w	r2, r2, #8
 8011acc:	619a      	str	r2, [r3, #24]
}
 8011ace:	bf00      	nop
 8011ad0:	3770      	adds	r7, #112	; 0x70
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
 8011ad6:	bf00      	nop
 8011ad8:	40008000 	.word	0x40008000

08011adc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b0ac      	sub	sp, #176	; 0xb0
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011aea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	69db      	ldr	r3, [r3, #28]
 8011af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	689b      	ldr	r3, [r3, #8]
 8011b08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b12:	2b22      	cmp	r3, #34	; 0x22
 8011b14:	f040 8182 	bne.w	8011e1c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011b1e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011b22:	e125      	b.n	8011d70 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b2a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011b2e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011b32:	b2d9      	uxtb	r1, r3
 8011b34:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011b38:	b2da      	uxtb	r2, r3
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b3e:	400a      	ands	r2, r1
 8011b40:	b2d2      	uxtb	r2, r2
 8011b42:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b48:	1c5a      	adds	r2, r3, #1
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	3b01      	subs	r3, #1
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	69db      	ldr	r3, [r3, #28]
 8011b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b6e:	f003 0307 	and.w	r3, r3, #7
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d053      	beq.n	8011c1e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b7a:	f003 0301 	and.w	r3, r3, #1
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d011      	beq.n	8011ba6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011b82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d00b      	beq.n	8011ba6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2201      	movs	r2, #1
 8011b94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b9c:	f043 0201 	orr.w	r2, r3, #1
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011baa:	f003 0302 	and.w	r3, r3, #2
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d011      	beq.n	8011bd6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011bb6:	f003 0301 	and.w	r3, r3, #1
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00b      	beq.n	8011bd6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2202      	movs	r2, #2
 8011bc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011bcc:	f043 0204 	orr.w	r2, r3, #4
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011bda:	f003 0304 	and.w	r3, r3, #4
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d011      	beq.n	8011c06 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011be6:	f003 0301 	and.w	r3, r3, #1
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d00b      	beq.n	8011c06 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2204      	movs	r2, #4
 8011bf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011bfc:	f043 0202 	orr.w	r2, r3, #2
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d006      	beq.n	8011c1e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f7fe fe37 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	f040 80a2 	bne.w	8011d70 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c34:	e853 3f00 	ldrex	r3, [r3]
 8011c38:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	461a      	mov	r2, r3
 8011c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011c50:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c52:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011c54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011c56:	e841 2300 	strex	r3, r2, [r1]
 8011c5a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d1e4      	bne.n	8011c2c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	3308      	adds	r3, #8
 8011c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c6c:	e853 3f00 	ldrex	r3, [r3]
 8011c70:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011c78:	f023 0301 	bic.w	r3, r3, #1
 8011c7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	3308      	adds	r3, #8
 8011c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011c8a:	66ba      	str	r2, [r7, #104]	; 0x68
 8011c8c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011c90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011c92:	e841 2300 	strex	r3, r2, [r1]
 8011c96:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d1e1      	bne.n	8011c62 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2220      	movs	r2, #32
 8011ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	4a5f      	ldr	r2, [pc, #380]	; (8011e34 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d021      	beq.n	8011d00 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d01a      	beq.n	8011d00 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cd2:	e853 3f00 	ldrex	r3, [r3]
 8011cd6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011cec:	657b      	str	r3, [r7, #84]	; 0x54
 8011cee:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011cf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011cf4:	e841 2300 	strex	r3, r2, [r1]
 8011cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d1e4      	bne.n	8011cca <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d04:	2b01      	cmp	r3, #1
 8011d06:	d130      	bne.n	8011d6a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d16:	e853 3f00 	ldrex	r3, [r3]
 8011d1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d1e:	f023 0310 	bic.w	r3, r3, #16
 8011d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011d30:	643b      	str	r3, [r7, #64]	; 0x40
 8011d32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d38:	e841 2300 	strex	r3, r2, [r1]
 8011d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d1e4      	bne.n	8011d0e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	69db      	ldr	r3, [r3, #28]
 8011d4a:	f003 0310 	and.w	r3, r3, #16
 8011d4e:	2b10      	cmp	r3, #16
 8011d50:	d103      	bne.n	8011d5a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	2210      	movs	r2, #16
 8011d58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011d60:	4619      	mov	r1, r3
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7f5 fe76 	bl	8007a54 <HAL_UARTEx_RxEventCallback>
 8011d68:	e002      	b.n	8011d70 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f7fe fd80 	bl	8010870 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011d70:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d006      	beq.n	8011d86 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8011d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011d7c:	f003 0320 	and.w	r3, r3, #32
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	f47f aecf 	bne.w	8011b24 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d8c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011d90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d049      	beq.n	8011e2c <UART_RxISR_8BIT_FIFOEN+0x350>
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d9e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d242      	bcs.n	8011e2c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	3308      	adds	r3, #8
 8011dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dae:	6a3b      	ldr	r3, [r7, #32]
 8011db0:	e853 3f00 	ldrex	r3, [r3]
 8011db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	3308      	adds	r3, #8
 8011dc6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dd2:	e841 2300 	strex	r3, r2, [r1]
 8011dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d1e3      	bne.n	8011da6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	4a15      	ldr	r2, [pc, #84]	; (8011e38 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011de2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	e853 3f00 	ldrex	r3, [r3]
 8011df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	f043 0320 	orr.w	r3, r3, #32
 8011df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	461a      	mov	r2, r3
 8011e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e06:	61bb      	str	r3, [r7, #24]
 8011e08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e0a:	6979      	ldr	r1, [r7, #20]
 8011e0c:	69ba      	ldr	r2, [r7, #24]
 8011e0e:	e841 2300 	strex	r3, r2, [r1]
 8011e12:	613b      	str	r3, [r7, #16]
   return(result);
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d1e4      	bne.n	8011de4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011e1a:	e007      	b.n	8011e2c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	699a      	ldr	r2, [r3, #24]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f042 0208 	orr.w	r2, r2, #8
 8011e2a:	619a      	str	r2, [r3, #24]
}
 8011e2c:	bf00      	nop
 8011e2e:	37b0      	adds	r7, #176	; 0xb0
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	40008000 	.word	0x40008000
 8011e38:	0801176d 	.word	0x0801176d

08011e3c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b0ae      	sub	sp, #184	; 0xb8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e4a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	69db      	ldr	r3, [r3, #28]
 8011e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e72:	2b22      	cmp	r3, #34	; 0x22
 8011e74:	f040 8186 	bne.w	8012184 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e7e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e82:	e129      	b.n	80120d8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e8a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011e96:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011e9a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011e9e:	4013      	ands	r3, r2
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ea6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011eac:	1c9a      	adds	r2, r3, #2
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	69db      	ldr	r3, [r3, #28]
 8011eca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011ece:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011ed2:	f003 0307 	and.w	r3, r3, #7
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d053      	beq.n	8011f82 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011ede:	f003 0301 	and.w	r3, r3, #1
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d011      	beq.n	8011f0a <UART_RxISR_16BIT_FIFOEN+0xce>
 8011ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d00b      	beq.n	8011f0a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f00:	f043 0201 	orr.w	r2, r3, #1
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011f0e:	f003 0302 	and.w	r3, r3, #2
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d011      	beq.n	8011f3a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f1a:	f003 0301 	and.w	r3, r3, #1
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d00b      	beq.n	8011f3a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	2202      	movs	r2, #2
 8011f28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f30:	f043 0204 	orr.w	r2, r3, #4
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011f3e:	f003 0304 	and.w	r3, r3, #4
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d011      	beq.n	8011f6a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f4a:	f003 0301 	and.w	r3, r3, #1
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d00b      	beq.n	8011f6a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	2204      	movs	r2, #4
 8011f58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f60:	f043 0202 	orr.w	r2, r3, #2
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d006      	beq.n	8011f82 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7fe fc85 	bl	8010884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	f040 80a4 	bne.w	80120d8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f98:	e853 3f00 	ldrex	r3, [r3]
 8011f9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	461a      	mov	r2, r3
 8011fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011fb6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011fbe:	e841 2300 	strex	r3, r2, [r1]
 8011fc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d1e2      	bne.n	8011f90 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	3308      	adds	r3, #8
 8011fd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fd4:	e853 3f00 	ldrex	r3, [r3]
 8011fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011fe0:	f023 0301 	bic.w	r3, r3, #1
 8011fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	3308      	adds	r3, #8
 8011fee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011ff8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011ffa:	e841 2300 	strex	r3, r2, [r1]
 8011ffe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012002:	2b00      	cmp	r3, #0
 8012004:	d1e1      	bne.n	8011fca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2220      	movs	r2, #32
 801200a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2200      	movs	r2, #0
 8012012:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2200      	movs	r2, #0
 8012018:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	4a5f      	ldr	r2, [pc, #380]	; (801219c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012020:	4293      	cmp	r3, r2
 8012022:	d021      	beq.n	8012068 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801202e:	2b00      	cmp	r3, #0
 8012030:	d01a      	beq.n	8012068 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801203a:	e853 3f00 	ldrex	r3, [r3]
 801203e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	461a      	mov	r2, r3
 8012050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012054:	65bb      	str	r3, [r7, #88]	; 0x58
 8012056:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801205a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801205c:	e841 2300 	strex	r3, r2, [r1]
 8012060:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012064:	2b00      	cmp	r3, #0
 8012066:	d1e4      	bne.n	8012032 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801206c:	2b01      	cmp	r3, #1
 801206e:	d130      	bne.n	80120d2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207e:	e853 3f00 	ldrex	r3, [r3]
 8012082:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012086:	f023 0310 	bic.w	r3, r3, #16
 801208a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	461a      	mov	r2, r3
 8012094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012098:	647b      	str	r3, [r7, #68]	; 0x44
 801209a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801209c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801209e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120a0:	e841 2300 	strex	r3, r2, [r1]
 80120a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80120a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d1e4      	bne.n	8012076 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	69db      	ldr	r3, [r3, #28]
 80120b2:	f003 0310 	and.w	r3, r3, #16
 80120b6:	2b10      	cmp	r3, #16
 80120b8:	d103      	bne.n	80120c2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2210      	movs	r2, #16
 80120c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80120c8:	4619      	mov	r1, r3
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7f5 fcc2 	bl	8007a54 <HAL_UARTEx_RxEventCallback>
 80120d0:	e002      	b.n	80120d8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f7fe fbcc 	bl	8010870 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80120d8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d006      	beq.n	80120ee <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80120e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80120e4:	f003 0320 	and.w	r3, r3, #32
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	f47f aecb 	bne.w	8011e84 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80120f8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d049      	beq.n	8012194 <UART_RxISR_16BIT_FIFOEN+0x358>
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012106:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801210a:	429a      	cmp	r2, r3
 801210c:	d242      	bcs.n	8012194 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	3308      	adds	r3, #8
 8012114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012118:	e853 3f00 	ldrex	r3, [r3]
 801211c:	623b      	str	r3, [r7, #32]
   return(result);
 801211e:	6a3b      	ldr	r3, [r7, #32]
 8012120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	3308      	adds	r3, #8
 801212e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012132:	633a      	str	r2, [r7, #48]	; 0x30
 8012134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801213a:	e841 2300 	strex	r3, r2, [r1]
 801213e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012142:	2b00      	cmp	r3, #0
 8012144:	d1e3      	bne.n	801210e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4a15      	ldr	r2, [pc, #84]	; (80121a0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801214a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	e853 3f00 	ldrex	r3, [r3]
 8012158:	60fb      	str	r3, [r7, #12]
   return(result);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f043 0320 	orr.w	r3, r3, #32
 8012160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	461a      	mov	r2, r3
 801216a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801216e:	61fb      	str	r3, [r7, #28]
 8012170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012172:	69b9      	ldr	r1, [r7, #24]
 8012174:	69fa      	ldr	r2, [r7, #28]
 8012176:	e841 2300 	strex	r3, r2, [r1]
 801217a:	617b      	str	r3, [r7, #20]
   return(result);
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d1e4      	bne.n	801214c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012182:	e007      	b.n	8012194 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	699a      	ldr	r2, [r3, #24]
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	f042 0208 	orr.w	r2, r2, #8
 8012192:	619a      	str	r2, [r3, #24]
}
 8012194:	bf00      	nop
 8012196:	37b8      	adds	r7, #184	; 0xb8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	40008000 	.word	0x40008000
 80121a0:	08011925 	.word	0x08011925

080121a4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b086      	sub	sp, #24
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	60f8      	str	r0, [r7, #12]
 80121ac:	60b9      	str	r1, [r7, #8]
 80121ae:	607a      	str	r2, [r7, #4]
 80121b0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d101      	bne.n	80121bc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80121b8:	2301      	movs	r3, #1
 80121ba:	e058      	b.n	801226e <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d106      	bne.n	80121d4 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2200      	movs	r2, #0
 80121ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80121ce:	68f8      	ldr	r0, [r7, #12]
 80121d0:	f7f6 fca4 	bl	8008b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2224      	movs	r2, #36	; 0x24
 80121d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	681a      	ldr	r2, [r3, #0]
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	f022 0201 	bic.w	r2, r2, #1
 80121ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d002      	beq.n	80121fa <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f7fe fe59 	bl	8010eac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f7fe fb5a 	bl	80108b4 <UART_SetConfig>
 8012200:	4603      	mov	r3, r0
 8012202:	2b01      	cmp	r3, #1
 8012204:	d101      	bne.n	801220a <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8012206:	2301      	movs	r3, #1
 8012208:	e031      	b.n	801226e <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	689a      	ldr	r2, [r3, #8]
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012218:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	689b      	ldr	r3, [r3, #8]
 8012220:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	68ba      	ldr	r2, [r7, #8]
 801222a:	430a      	orrs	r2, r1
 801222c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	055b      	lsls	r3, r3, #21
 8012232:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	041b      	lsls	r3, r3, #16
 8012238:	697a      	ldr	r2, [r7, #20]
 801223a:	4313      	orrs	r3, r2
 801223c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8012248:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 801224c:	68fa      	ldr	r2, [r7, #12]
 801224e:	6812      	ldr	r2, [r2, #0]
 8012250:	6979      	ldr	r1, [r7, #20]
 8012252:	430b      	orrs	r3, r1
 8012254:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	681a      	ldr	r2, [r3, #0]
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f042 0201 	orr.w	r2, r2, #1
 8012264:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012266:	68f8      	ldr	r0, [r7, #12]
 8012268:	f7fe fec2 	bl	8010ff0 <UART_CheckIdleState>
 801226c:	4603      	mov	r3, r0
}
 801226e:	4618      	mov	r0, r3
 8012270:	3718      	adds	r7, #24
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012276:	b480      	push	{r7}
 8012278:	b083      	sub	sp, #12
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801227e:	bf00      	nop
 8012280:	370c      	adds	r7, #12
 8012282:	46bd      	mov	sp, r7
 8012284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012288:	4770      	bx	lr

0801228a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801228a:	b480      	push	{r7}
 801228c:	b083      	sub	sp, #12
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012292:	bf00      	nop
 8012294:	370c      	adds	r7, #12
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr

0801229e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801229e:	b480      	push	{r7}
 80122a0:	b083      	sub	sp, #12
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80122a6:	bf00      	nop
 80122a8:	370c      	adds	r7, #12
 80122aa:	46bd      	mov	sp, r7
 80122ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b0:	4770      	bx	lr

080122b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80122b2:	b480      	push	{r7}
 80122b4:	b085      	sub	sp, #20
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	d101      	bne.n	80122c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80122c4:	2302      	movs	r3, #2
 80122c6:	e027      	b.n	8012318 <HAL_UARTEx_DisableFifoMode+0x66>
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2201      	movs	r2, #1
 80122cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2224      	movs	r2, #36	; 0x24
 80122d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	681a      	ldr	r2, [r3, #0]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f022 0201 	bic.w	r2, r2, #1
 80122ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80122f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2200      	movs	r2, #0
 80122fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	68fa      	ldr	r2, [r7, #12]
 8012304:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2220      	movs	r2, #32
 801230a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012316:	2300      	movs	r3, #0
}
 8012318:	4618      	mov	r0, r3
 801231a:	3714      	adds	r7, #20
 801231c:	46bd      	mov	sp, r7
 801231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012322:	4770      	bx	lr

08012324 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b084      	sub	sp, #16
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012334:	2b01      	cmp	r3, #1
 8012336:	d101      	bne.n	801233c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012338:	2302      	movs	r3, #2
 801233a:	e02d      	b.n	8012398 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2201      	movs	r2, #1
 8012340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2224      	movs	r2, #36	; 0x24
 8012348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	681a      	ldr	r2, [r3, #0]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	f022 0201 	bic.w	r2, r2, #1
 8012362:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	689b      	ldr	r3, [r3, #8]
 801236a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	683a      	ldr	r2, [r7, #0]
 8012374:	430a      	orrs	r2, r1
 8012376:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 f89f 	bl	80124bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	68fa      	ldr	r2, [r7, #12]
 8012384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2220      	movs	r2, #32
 801238a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012396:	2300      	movs	r3, #0
}
 8012398:	4618      	mov	r0, r3
 801239a:	3710      	adds	r7, #16
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b084      	sub	sp, #16
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d101      	bne.n	80123b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80123b4:	2302      	movs	r3, #2
 80123b6:	e02d      	b.n	8012414 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2201      	movs	r2, #1
 80123bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2224      	movs	r2, #36	; 0x24
 80123c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	681a      	ldr	r2, [r3, #0]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	f022 0201 	bic.w	r2, r2, #1
 80123de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	689b      	ldr	r3, [r3, #8]
 80123e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	683a      	ldr	r2, [r7, #0]
 80123f0:	430a      	orrs	r2, r1
 80123f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f000 f861 	bl	80124bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	68fa      	ldr	r2, [r7, #12]
 8012400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2220      	movs	r2, #32
 8012406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2200      	movs	r2, #0
 801240e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012412:	2300      	movs	r3, #0
}
 8012414:	4618      	mov	r0, r3
 8012416:	3710      	adds	r7, #16
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b08c      	sub	sp, #48	; 0x30
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	4613      	mov	r3, r2
 8012428:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 801242a:	2300      	movs	r3, #0
 801242c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012436:	2b20      	cmp	r3, #32
 8012438:	d13b      	bne.n	80124b2 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d002      	beq.n	8012446 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8012440:	88fb      	ldrh	r3, [r7, #6]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d101      	bne.n	801244a <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8012446:	2301      	movs	r3, #1
 8012448:	e034      	b.n	80124b4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	2201      	movs	r2, #1
 801244e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2200      	movs	r2, #0
 8012454:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8012456:	88fb      	ldrh	r3, [r7, #6]
 8012458:	461a      	mov	r2, r3
 801245a:	68b9      	ldr	r1, [r7, #8]
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	f7fe fedf 	bl	8011220 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012466:	2b01      	cmp	r3, #1
 8012468:	d11d      	bne.n	80124a6 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2210      	movs	r2, #16
 8012470:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	e853 3f00 	ldrex	r3, [r3]
 801247e:	617b      	str	r3, [r7, #20]
   return(result);
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	f043 0310 	orr.w	r3, r3, #16
 8012486:	62bb      	str	r3, [r7, #40]	; 0x28
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	461a      	mov	r2, r3
 801248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012490:	627b      	str	r3, [r7, #36]	; 0x24
 8012492:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012494:	6a39      	ldr	r1, [r7, #32]
 8012496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012498:	e841 2300 	strex	r3, r2, [r1]
 801249c:	61fb      	str	r3, [r7, #28]
   return(result);
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d1e6      	bne.n	8012472 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80124a4:	e002      	b.n	80124ac <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80124a6:	2301      	movs	r3, #1
 80124a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 80124ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124b0:	e000      	b.n	80124b4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80124b2:	2302      	movs	r3, #2
  }
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3730      	adds	r7, #48	; 0x30
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80124bc:	b480      	push	{r7}
 80124be:	b085      	sub	sp, #20
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d108      	bne.n	80124de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2201      	movs	r2, #1
 80124d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2201      	movs	r2, #1
 80124d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80124dc:	e031      	b.n	8012542 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80124de:	2308      	movs	r3, #8
 80124e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80124e2:	2308      	movs	r3, #8
 80124e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	689b      	ldr	r3, [r3, #8]
 80124ec:	0e5b      	lsrs	r3, r3, #25
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	f003 0307 	and.w	r3, r3, #7
 80124f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	0f5b      	lsrs	r3, r3, #29
 80124fe:	b2db      	uxtb	r3, r3
 8012500:	f003 0307 	and.w	r3, r3, #7
 8012504:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012506:	7bbb      	ldrb	r3, [r7, #14]
 8012508:	7b3a      	ldrb	r2, [r7, #12]
 801250a:	4911      	ldr	r1, [pc, #68]	; (8012550 <UARTEx_SetNbDataToProcess+0x94>)
 801250c:	5c8a      	ldrb	r2, [r1, r2]
 801250e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012512:	7b3a      	ldrb	r2, [r7, #12]
 8012514:	490f      	ldr	r1, [pc, #60]	; (8012554 <UARTEx_SetNbDataToProcess+0x98>)
 8012516:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012518:	fb93 f3f2 	sdiv	r3, r3, r2
 801251c:	b29a      	uxth	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012524:	7bfb      	ldrb	r3, [r7, #15]
 8012526:	7b7a      	ldrb	r2, [r7, #13]
 8012528:	4909      	ldr	r1, [pc, #36]	; (8012550 <UARTEx_SetNbDataToProcess+0x94>)
 801252a:	5c8a      	ldrb	r2, [r1, r2]
 801252c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012530:	7b7a      	ldrb	r2, [r7, #13]
 8012532:	4908      	ldr	r1, [pc, #32]	; (8012554 <UARTEx_SetNbDataToProcess+0x98>)
 8012534:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012536:	fb93 f3f2 	sdiv	r3, r3, r2
 801253a:	b29a      	uxth	r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012542:	bf00      	nop
 8012544:	3714      	adds	r7, #20
 8012546:	46bd      	mov	sp, r7
 8012548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop
 8012550:	080236ec 	.word	0x080236ec
 8012554:	080236f4 	.word	0x080236f4

08012558 <LL_DMA_ConfigTransfer>:
{
 8012558:	b480      	push	{r7}
 801255a:	b087      	sub	sp, #28
 801255c:	af00      	add	r7, sp, #0
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8012568:	4a0e      	ldr	r2, [pc, #56]	; (80125a4 <LL_DMA_ConfigTransfer+0x4c>)
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	4413      	add	r3, r2
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	461a      	mov	r2, r3
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	4413      	add	r3, r2
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801257c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012580:	4908      	ldr	r1, [pc, #32]	; (80125a4 <LL_DMA_ConfigTransfer+0x4c>)
 8012582:	68ba      	ldr	r2, [r7, #8]
 8012584:	440a      	add	r2, r1
 8012586:	7812      	ldrb	r2, [r2, #0]
 8012588:	4611      	mov	r1, r2
 801258a:	697a      	ldr	r2, [r7, #20]
 801258c:	440a      	add	r2, r1
 801258e:	4611      	mov	r1, r2
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	4313      	orrs	r3, r2
 8012594:	600b      	str	r3, [r1, #0]
}
 8012596:	bf00      	nop
 8012598:	371c      	adds	r7, #28
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	080236fc 	.word	0x080236fc

080125a8 <LL_DMA_SetDataLength>:
{
 80125a8:	b480      	push	{r7}
 80125aa:	b087      	sub	sp, #28
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80125b8:	4a0d      	ldr	r2, [pc, #52]	; (80125f0 <LL_DMA_SetDataLength+0x48>)
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	4413      	add	r3, r2
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	461a      	mov	r2, r3
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	4413      	add	r3, r2
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	0c1b      	lsrs	r3, r3, #16
 80125ca:	041b      	lsls	r3, r3, #16
 80125cc:	4908      	ldr	r1, [pc, #32]	; (80125f0 <LL_DMA_SetDataLength+0x48>)
 80125ce:	68ba      	ldr	r2, [r7, #8]
 80125d0:	440a      	add	r2, r1
 80125d2:	7812      	ldrb	r2, [r2, #0]
 80125d4:	4611      	mov	r1, r2
 80125d6:	697a      	ldr	r2, [r7, #20]
 80125d8:	440a      	add	r2, r1
 80125da:	4611      	mov	r1, r2
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	4313      	orrs	r3, r2
 80125e0:	604b      	str	r3, [r1, #4]
}
 80125e2:	bf00      	nop
 80125e4:	371c      	adds	r7, #28
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	080236fc 	.word	0x080236fc

080125f4 <LL_DMA_SetMemoryAddress>:
{
 80125f4:	b480      	push	{r7}
 80125f6:	b087      	sub	sp, #28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8012604:	4a07      	ldr	r2, [pc, #28]	; (8012624 <LL_DMA_SetMemoryAddress+0x30>)
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	4413      	add	r3, r2
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	461a      	mov	r2, r3
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	4413      	add	r3, r2
 8012612:	461a      	mov	r2, r3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	60d3      	str	r3, [r2, #12]
}
 8012618:	bf00      	nop
 801261a:	371c      	adds	r7, #28
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr
 8012624:	080236fc 	.word	0x080236fc

08012628 <LL_DMA_SetPeriphAddress>:
{
 8012628:	b480      	push	{r7}
 801262a:	b087      	sub	sp, #28
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8012638:	4a07      	ldr	r2, [pc, #28]	; (8012658 <LL_DMA_SetPeriphAddress+0x30>)
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	4413      	add	r3, r2
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	461a      	mov	r2, r3
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	4413      	add	r3, r2
 8012646:	461a      	mov	r2, r3
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6093      	str	r3, [r2, #8]
}
 801264c:	bf00      	nop
 801264e:	371c      	adds	r7, #28
 8012650:	46bd      	mov	sp, r7
 8012652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012656:	4770      	bx	lr
 8012658:	080236fc 	.word	0x080236fc

0801265c <LL_DMA_SetPeriphRequest>:
{
 801265c:	b480      	push	{r7}
 801265e:	b087      	sub	sp, #28
 8012660:	af00      	add	r7, sp, #0
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	60b9      	str	r1, [r7, #8]
 8012666:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	0a9b      	lsrs	r3, r3, #10
 801266c:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8012670:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8012674:	00db      	lsls	r3, r3, #3
 8012676:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8012678:	68ba      	ldr	r2, [r7, #8]
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	4413      	add	r3, r2
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012684:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801268e:	68ba      	ldr	r2, [r7, #8]
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	4413      	add	r3, r2
 8012694:	009b      	lsls	r3, r3, #2
 8012696:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801269a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	430a      	orrs	r2, r1
 80126a2:	601a      	str	r2, [r3, #0]
}
 80126a4:	bf00      	nop
 80126a6:	371c      	adds	r7, #28
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80126c4:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 80126ca:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80126d0:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80126d6:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80126dc:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80126e2:	4313      	orrs	r3, r2
 80126e4:	461a      	mov	r2, r3
 80126e6:	68b9      	ldr	r1, [r7, #8]
 80126e8:	68f8      	ldr	r0, [r7, #12]
 80126ea:	f7ff ff35 	bl	8012558 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	461a      	mov	r2, r3
 80126f4:	68b9      	ldr	r1, [r7, #8]
 80126f6:	68f8      	ldr	r0, [r7, #12]
 80126f8:	f7ff ff7c 	bl	80125f4 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	461a      	mov	r2, r3
 8012702:	68b9      	ldr	r1, [r7, #8]
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f7ff ff8f 	bl	8012628 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6a1b      	ldr	r3, [r3, #32]
 801270e:	461a      	mov	r2, r3
 8012710:	68b9      	ldr	r1, [r7, #8]
 8012712:	68f8      	ldr	r0, [r7, #12]
 8012714:	f7ff ff48 	bl	80125a8 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271c:	461a      	mov	r2, r3
 801271e:	68b9      	ldr	r1, [r7, #8]
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f7ff ff9b 	bl	801265c <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 8012726:	2300      	movs	r3, #0
}
 8012728:	4618      	mov	r0, r3
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2200      	movs	r2, #0
 8012742:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2200      	movs	r2, #0
 8012748:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2200      	movs	r2, #0
 801274e:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2200      	movs	r2, #0
 801275a:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2200      	movs	r2, #0
 8012760:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2200      	movs	r2, #0
 8012766:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2200      	movs	r2, #0
 801276c:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2200      	movs	r2, #0
 8012772:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2200      	movs	r2, #0
 8012778:	629a      	str	r2, [r3, #40]	; 0x28
}
 801277a:	bf00      	nop
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr

08012786 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8012786:	b480      	push	{r7}
 8012788:	b08b      	sub	sp, #44	; 0x2c
 801278a:	af00      	add	r7, sp, #0
 801278c:	60f8      	str	r0, [r7, #12]
 801278e:	60b9      	str	r1, [r7, #8]
 8012790:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	fa93 f3a3 	rbit	r3, r3
 80127a0:	613b      	str	r3, [r7, #16]
  return result;
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d101      	bne.n	80127b0 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80127ac:	2320      	movs	r3, #32
 80127ae:	e003      	b.n	80127b8 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80127b0:	69bb      	ldr	r3, [r7, #24]
 80127b2:	fab3 f383 	clz	r3, r3
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	005b      	lsls	r3, r3, #1
 80127ba:	2103      	movs	r1, #3
 80127bc:	fa01 f303 	lsl.w	r3, r1, r3
 80127c0:	43db      	mvns	r3, r3
 80127c2:	401a      	ands	r2, r3
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80127c8:	6a3b      	ldr	r3, [r7, #32]
 80127ca:	fa93 f3a3 	rbit	r3, r3
 80127ce:	61fb      	str	r3, [r7, #28]
  return result;
 80127d0:	69fb      	ldr	r3, [r7, #28]
 80127d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80127d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d101      	bne.n	80127de <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80127da:	2320      	movs	r3, #32
 80127dc:	e003      	b.n	80127e6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80127de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e0:	fab3 f383 	clz	r3, r3
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	005b      	lsls	r3, r3, #1
 80127e8:	6879      	ldr	r1, [r7, #4]
 80127ea:	fa01 f303 	lsl.w	r3, r1, r3
 80127ee:	431a      	orrs	r2, r3
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	601a      	str	r2, [r3, #0]
}
 80127f4:	bf00      	nop
 80127f6:	372c      	adds	r7, #44	; 0x2c
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr

08012800 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8012800:	b480      	push	{r7}
 8012802:	b085      	sub	sp, #20
 8012804:	af00      	add	r7, sp, #0
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	685a      	ldr	r2, [r3, #4]
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	43db      	mvns	r3, r3
 8012814:	401a      	ands	r2, r3
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	6879      	ldr	r1, [r7, #4]
 801281a:	fb01 f303 	mul.w	r3, r1, r3
 801281e:	431a      	orrs	r2, r3
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	605a      	str	r2, [r3, #4]
}
 8012824:	bf00      	nop
 8012826:	3714      	adds	r7, #20
 8012828:	46bd      	mov	sp, r7
 801282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282e:	4770      	bx	lr

08012830 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8012830:	b480      	push	{r7}
 8012832:	b08b      	sub	sp, #44	; 0x2c
 8012834:	af00      	add	r7, sp, #0
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	689a      	ldr	r2, [r3, #8]
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	fa93 f3a3 	rbit	r3, r3
 801284a:	613b      	str	r3, [r7, #16]
  return result;
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8012850:	69bb      	ldr	r3, [r7, #24]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d101      	bne.n	801285a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8012856:	2320      	movs	r3, #32
 8012858:	e003      	b.n	8012862 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801285a:	69bb      	ldr	r3, [r7, #24]
 801285c:	fab3 f383 	clz	r3, r3
 8012860:	b2db      	uxtb	r3, r3
 8012862:	005b      	lsls	r3, r3, #1
 8012864:	2103      	movs	r1, #3
 8012866:	fa01 f303 	lsl.w	r3, r1, r3
 801286a:	43db      	mvns	r3, r3
 801286c:	401a      	ands	r2, r3
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012872:	6a3b      	ldr	r3, [r7, #32]
 8012874:	fa93 f3a3 	rbit	r3, r3
 8012878:	61fb      	str	r3, [r7, #28]
  return result;
 801287a:	69fb      	ldr	r3, [r7, #28]
 801287c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012880:	2b00      	cmp	r3, #0
 8012882:	d101      	bne.n	8012888 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8012884:	2320      	movs	r3, #32
 8012886:	e003      	b.n	8012890 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8012888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288a:	fab3 f383 	clz	r3, r3
 801288e:	b2db      	uxtb	r3, r3
 8012890:	005b      	lsls	r3, r3, #1
 8012892:	6879      	ldr	r1, [r7, #4]
 8012894:	fa01 f303 	lsl.w	r3, r1, r3
 8012898:	431a      	orrs	r2, r3
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 801289e:	bf00      	nop
 80128a0:	372c      	adds	r7, #44	; 0x2c
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr

080128aa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80128aa:	b480      	push	{r7}
 80128ac:	b08b      	sub	sp, #44	; 0x2c
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	60f8      	str	r0, [r7, #12]
 80128b2:	60b9      	str	r1, [r7, #8]
 80128b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	68da      	ldr	r2, [r3, #12]
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	fa93 f3a3 	rbit	r3, r3
 80128c4:	613b      	str	r3, [r7, #16]
  return result;
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d101      	bne.n	80128d4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80128d0:	2320      	movs	r3, #32
 80128d2:	e003      	b.n	80128dc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80128d4:	69bb      	ldr	r3, [r7, #24]
 80128d6:	fab3 f383 	clz	r3, r3
 80128da:	b2db      	uxtb	r3, r3
 80128dc:	005b      	lsls	r3, r3, #1
 80128de:	2103      	movs	r1, #3
 80128e0:	fa01 f303 	lsl.w	r3, r1, r3
 80128e4:	43db      	mvns	r3, r3
 80128e6:	401a      	ands	r2, r3
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80128ec:	6a3b      	ldr	r3, [r7, #32]
 80128ee:	fa93 f3a3 	rbit	r3, r3
 80128f2:	61fb      	str	r3, [r7, #28]
  return result;
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80128f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d101      	bne.n	8012902 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80128fe:	2320      	movs	r3, #32
 8012900:	e003      	b.n	801290a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8012902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012904:	fab3 f383 	clz	r3, r3
 8012908:	b2db      	uxtb	r3, r3
 801290a:	005b      	lsls	r3, r3, #1
 801290c:	6879      	ldr	r1, [r7, #4]
 801290e:	fa01 f303 	lsl.w	r3, r1, r3
 8012912:	431a      	orrs	r2, r3
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	60da      	str	r2, [r3, #12]
}
 8012918:	bf00      	nop
 801291a:	372c      	adds	r7, #44	; 0x2c
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8012924:	b480      	push	{r7}
 8012926:	b08b      	sub	sp, #44	; 0x2c
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	6a1a      	ldr	r2, [r3, #32]
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	fa93 f3a3 	rbit	r3, r3
 801293e:	613b      	str	r3, [r7, #16]
  return result;
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8012944:	69bb      	ldr	r3, [r7, #24]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d101      	bne.n	801294e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801294a:	2320      	movs	r3, #32
 801294c:	e003      	b.n	8012956 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	fab3 f383 	clz	r3, r3
 8012954:	b2db      	uxtb	r3, r3
 8012956:	009b      	lsls	r3, r3, #2
 8012958:	210f      	movs	r1, #15
 801295a:	fa01 f303 	lsl.w	r3, r1, r3
 801295e:	43db      	mvns	r3, r3
 8012960:	401a      	ands	r2, r3
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012966:	6a3b      	ldr	r3, [r7, #32]
 8012968:	fa93 f3a3 	rbit	r3, r3
 801296c:	61fb      	str	r3, [r7, #28]
  return result;
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012974:	2b00      	cmp	r3, #0
 8012976:	d101      	bne.n	801297c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8012978:	2320      	movs	r3, #32
 801297a:	e003      	b.n	8012984 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297e:	fab3 f383 	clz	r3, r3
 8012982:	b2db      	uxtb	r3, r3
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	6879      	ldr	r1, [r7, #4]
 8012988:	fa01 f303 	lsl.w	r3, r1, r3
 801298c:	431a      	orrs	r2, r3
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8012992:	bf00      	nop
 8012994:	372c      	adds	r7, #44	; 0x2c
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr

0801299e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801299e:	b480      	push	{r7}
 80129a0:	b08b      	sub	sp, #44	; 0x2c
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	60f8      	str	r0, [r7, #12]
 80129a6:	60b9      	str	r1, [r7, #8]
 80129a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	0a1b      	lsrs	r3, r3, #8
 80129b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	fa93 f3a3 	rbit	r3, r3
 80129ba:	613b      	str	r3, [r7, #16]
  return result;
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d101      	bne.n	80129ca <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80129c6:	2320      	movs	r3, #32
 80129c8:	e003      	b.n	80129d2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80129ca:	69bb      	ldr	r3, [r7, #24]
 80129cc:	fab3 f383 	clz	r3, r3
 80129d0:	b2db      	uxtb	r3, r3
 80129d2:	009b      	lsls	r3, r3, #2
 80129d4:	210f      	movs	r1, #15
 80129d6:	fa01 f303 	lsl.w	r3, r1, r3
 80129da:	43db      	mvns	r3, r3
 80129dc:	401a      	ands	r2, r3
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	0a1b      	lsrs	r3, r3, #8
 80129e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80129e4:	6a3b      	ldr	r3, [r7, #32]
 80129e6:	fa93 f3a3 	rbit	r3, r3
 80129ea:	61fb      	str	r3, [r7, #28]
  return result;
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80129f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d101      	bne.n	80129fa <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80129f6:	2320      	movs	r3, #32
 80129f8:	e003      	b.n	8012a02 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80129fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fc:	fab3 f383 	clz	r3, r3
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	6879      	ldr	r1, [r7, #4]
 8012a06:	fa01 f303 	lsl.w	r3, r1, r3
 8012a0a:	431a      	orrs	r2, r3
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8012a10:	bf00      	nop
 8012a12:	372c      	adds	r7, #44	; 0x2c
 8012a14:	46bd      	mov	sp, r7
 8012a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1a:	4770      	bx	lr

08012a1c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b088      	sub	sp, #32
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	fa93 f3a3 	rbit	r3, r3
 8012a32:	60fb      	str	r3, [r7, #12]
  return result;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d101      	bne.n	8012a42 <LL_GPIO_Init+0x26>
    return 32U;
 8012a3e:	2320      	movs	r3, #32
 8012a40:	e003      	b.n	8012a4a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	fab3 f383 	clz	r3, r3
 8012a48:	b2db      	uxtb	r3, r3
 8012a4a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8012a4c:	e048      	b.n	8012ae0 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	681a      	ldr	r2, [r3, #0]
 8012a52:	2101      	movs	r1, #1
 8012a54:	69fb      	ldr	r3, [r7, #28]
 8012a56:	fa01 f303 	lsl.w	r3, r1, r3
 8012a5a:	4013      	ands	r3, r2
 8012a5c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d03a      	beq.n	8012ada <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	d003      	beq.n	8012a74 <LL_GPIO_Init+0x58>
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	2b02      	cmp	r3, #2
 8012a72:	d10e      	bne.n	8012a92 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	689b      	ldr	r3, [r3, #8]
 8012a78:	461a      	mov	r2, r3
 8012a7a:	69b9      	ldr	r1, [r7, #24]
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f7ff fed7 	bl	8012830 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	6819      	ldr	r1, [r3, #0]
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f7ff feb7 	bl	8012800 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	691b      	ldr	r3, [r3, #16]
 8012a96:	461a      	mov	r2, r3
 8012a98:	69b9      	ldr	r1, [r7, #24]
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7ff ff05 	bl	80128aa <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	685b      	ldr	r3, [r3, #4]
 8012aa4:	2b02      	cmp	r3, #2
 8012aa6:	d111      	bne.n	8012acc <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8012aa8:	69bb      	ldr	r3, [r7, #24]
 8012aaa:	2bff      	cmp	r3, #255	; 0xff
 8012aac:	d807      	bhi.n	8012abe <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	695b      	ldr	r3, [r3, #20]
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	69b9      	ldr	r1, [r7, #24]
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f7ff ff34 	bl	8012924 <LL_GPIO_SetAFPin_0_7>
 8012abc:	e006      	b.n	8012acc <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	695b      	ldr	r3, [r3, #20]
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	69b9      	ldr	r1, [r7, #24]
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7ff ff69 	bl	801299e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	461a      	mov	r2, r3
 8012ad2:	69b9      	ldr	r1, [r7, #24]
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7ff fe56 	bl	8012786 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8012ada:	69fb      	ldr	r3, [r7, #28]
 8012adc:	3301      	adds	r3, #1
 8012ade:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	69fb      	ldr	r3, [r7, #28]
 8012ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d1af      	bne.n	8012a4e <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8012aee:	2300      	movs	r3, #0
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3720      	adds	r7, #32
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	601a      	str	r2, [r3, #0]
}
 8012b0c:	bf00      	nop
 8012b0e:	370c      	adds	r7, #12
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr

08012b18 <LL_APB1_GRP2_EnableClock>:
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8012b20:	4b08      	ldr	r3, [pc, #32]	; (8012b44 <LL_APB1_GRP2_EnableClock+0x2c>)
 8012b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b24:	4907      	ldr	r1, [pc, #28]	; (8012b44 <LL_APB1_GRP2_EnableClock+0x2c>)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4313      	orrs	r3, r2
 8012b2a:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8012b2c:	4b05      	ldr	r3, [pc, #20]	; (8012b44 <LL_APB1_GRP2_EnableClock+0x2c>)
 8012b2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	4013      	ands	r3, r2
 8012b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012b36:	68fb      	ldr	r3, [r7, #12]
}
 8012b38:	bf00      	nop
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr
 8012b44:	40021000 	.word	0x40021000

08012b48 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	4a11      	ldr	r2, [pc, #68]	; (8012b9c <LL_UCPD_Init+0x54>)
 8012b56:	4293      	cmp	r3, r2
 8012b58:	d103      	bne.n	8012b62 <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8012b5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012b5e:	f7ff ffdb 	bl	8012b18 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f7ff ffc8 	bl	8012af8 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ba0 <LL_UCPD_Init+0x58>)
 8012b6e:	4013      	ands	r3, r2
 8012b70:	683a      	ldr	r2, [r7, #0]
 8012b72:	6811      	ldr	r1, [r2, #0]
 8012b74:	683a      	ldr	r2, [r7, #0]
 8012b76:	6852      	ldr	r2, [r2, #4]
 8012b78:	02d2      	lsls	r2, r2, #11
 8012b7a:	4311      	orrs	r1, r2
 8012b7c:	683a      	ldr	r2, [r7, #0]
 8012b7e:	6892      	ldr	r2, [r2, #8]
 8012b80:	0192      	lsls	r2, r2, #6
 8012b82:	4311      	orrs	r1, r2
 8012b84:	683a      	ldr	r2, [r7, #0]
 8012b86:	68d2      	ldr	r2, [r2, #12]
 8012b88:	430a      	orrs	r2, r1
 8012b8a:	431a      	orrs	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8012b90:	2300      	movs	r3, #0
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3708      	adds	r7, #8
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	4000a000 	.word	0x4000a000
 8012ba0:	fff10000 	.word	0xfff10000

08012ba4 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8012bb2:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2207      	movs	r2, #7
 8012bb8:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2210      	movs	r2, #16
 8012bbe:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	220d      	movs	r2, #13
 8012bc4:	60da      	str	r2, [r3, #12]
}
 8012bc6:	bf00      	nop
 8012bc8:	370c      	adds	r7, #12
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr

08012bd2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012bd2:	b480      	push	{r7}
 8012bd4:	b085      	sub	sp, #20
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012be2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012be6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	b29a      	uxth	r2, r3
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012bf2:	2300      	movs	r3, #0
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr

08012c00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012c00:	b480      	push	{r7}
 8012c02:	b085      	sub	sp, #20
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012c08:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012c0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	43db      	mvns	r3, r3
 8012c1c:	b29b      	uxth	r3, r3
 8012c1e:	4013      	ands	r3, r2
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012c28:	2300      	movs	r3, #0
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3714      	adds	r7, #20
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr

08012c36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012c36:	b480      	push	{r7}
 8012c38:	b085      	sub	sp, #20
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	60f8      	str	r0, [r7, #12]
 8012c3e:	1d3b      	adds	r3, r7, #4
 8012c40:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	2201      	movs	r2, #1
 8012c48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2200      	movs	r2, #0
 8012c58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2200      	movs	r2, #0
 8012c60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012c64:	2300      	movs	r3, #0
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3714      	adds	r7, #20
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr
	...

08012c74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012c74:	b480      	push	{r7}
 8012c76:	b09d      	sub	sp, #116	; 0x74
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	009b      	lsls	r3, r3, #2
 8012c8c:	4413      	add	r3, r2
 8012c8e:	881b      	ldrh	r3, [r3, #0]
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8012c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c9a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	78db      	ldrb	r3, [r3, #3]
 8012ca2:	2b03      	cmp	r3, #3
 8012ca4:	d81f      	bhi.n	8012ce6 <USB_ActivateEndpoint+0x72>
 8012ca6:	a201      	add	r2, pc, #4	; (adr r2, 8012cac <USB_ActivateEndpoint+0x38>)
 8012ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cac:	08012cbd 	.word	0x08012cbd
 8012cb0:	08012cd9 	.word	0x08012cd9
 8012cb4:	08012cef 	.word	0x08012cef
 8012cb8:	08012ccb 	.word	0x08012ccb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012cbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012cc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012cc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012cc8:	e012      	b.n	8012cf0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012cca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012cce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8012cd2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012cd6:	e00b      	b.n	8012cf0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012ce0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012ce4:	e004      	b.n	8012cf0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8012cec:	e000      	b.n	8012cf0 <USB_ActivateEndpoint+0x7c>
      break;
 8012cee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	009b      	lsls	r3, r3, #2
 8012cf8:	441a      	add	r2, r3
 8012cfa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4413      	add	r3, r2
 8012d1c:	881b      	ldrh	r3, [r3, #0]
 8012d1e:	b29b      	uxth	r3, r3
 8012d20:	b21b      	sxth	r3, r3
 8012d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d2a:	b21a      	sxth	r2, r3
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	b21b      	sxth	r3, r3
 8012d32:	4313      	orrs	r3, r2
 8012d34:	b21b      	sxth	r3, r3
 8012d36:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	441a      	add	r2, r3
 8012d44:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	7b1b      	ldrb	r3, [r3, #12]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	f040 8178 	bne.w	8013056 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	785b      	ldrb	r3, [r3, #1]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f000 8084 	beq.w	8012e78 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	61bb      	str	r3, [r7, #24]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	69bb      	ldr	r3, [r7, #24]
 8012d80:	4413      	add	r3, r2
 8012d82:	61bb      	str	r3, [r7, #24]
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	00da      	lsls	r2, r3, #3
 8012d8a:	69bb      	ldr	r3, [r7, #24]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012d92:	617b      	str	r3, [r7, #20]
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	88db      	ldrh	r3, [r3, #6]
 8012d98:	085b      	lsrs	r3, r3, #1
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	005b      	lsls	r3, r3, #1
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	009b      	lsls	r3, r3, #2
 8012dac:	4413      	add	r3, r2
 8012dae:	881b      	ldrh	r3, [r3, #0]
 8012db0:	827b      	strh	r3, [r7, #18]
 8012db2:	8a7b      	ldrh	r3, [r7, #18]
 8012db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d01b      	beq.n	8012df4 <USB_ActivateEndpoint+0x180>
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	4413      	add	r3, r2
 8012dc6:	881b      	ldrh	r3, [r3, #0]
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012dd2:	823b      	strh	r3, [r7, #16]
 8012dd4:	687a      	ldr	r2, [r7, #4]
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	009b      	lsls	r3, r3, #2
 8012ddc:	441a      	add	r2, r3
 8012dde:	8a3b      	ldrh	r3, [r7, #16]
 8012de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012dec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012df0:	b29b      	uxth	r3, r3
 8012df2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	78db      	ldrb	r3, [r3, #3]
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d020      	beq.n	8012e3e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012dfc:	687a      	ldr	r2, [r7, #4]
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	009b      	lsls	r3, r3, #2
 8012e04:	4413      	add	r3, r2
 8012e06:	881b      	ldrh	r3, [r3, #0]
 8012e08:	b29b      	uxth	r3, r3
 8012e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012e12:	81bb      	strh	r3, [r7, #12]
 8012e14:	89bb      	ldrh	r3, [r7, #12]
 8012e16:	f083 0320 	eor.w	r3, r3, #32
 8012e1a:	81bb      	strh	r3, [r7, #12]
 8012e1c:	687a      	ldr	r2, [r7, #4]
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	441a      	add	r2, r3
 8012e26:	89bb      	ldrh	r3, [r7, #12]
 8012e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	8013      	strh	r3, [r2, #0]
 8012e3c:	e2d5      	b.n	80133ea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	4413      	add	r3, r2
 8012e48:	881b      	ldrh	r3, [r3, #0]
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012e54:	81fb      	strh	r3, [r7, #14]
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	441a      	add	r2, r3
 8012e60:	89fb      	ldrh	r3, [r7, #14]
 8012e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e72:	b29b      	uxth	r3, r3
 8012e74:	8013      	strh	r3, [r2, #0]
 8012e76:	e2b8      	b.n	80133ea <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	461a      	mov	r2, r3
 8012e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e88:	4413      	add	r3, r2
 8012e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	00da      	lsls	r2, r3, #3
 8012e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e94:	4413      	add	r3, r2
 8012e96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	88db      	ldrh	r3, [r3, #6]
 8012ea0:	085b      	lsrs	r3, r3, #1
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	005b      	lsls	r3, r3, #1
 8012ea6:	b29a      	uxth	r2, r3
 8012ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eaa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	461a      	mov	r2, r3
 8012eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebc:	4413      	add	r3, r2
 8012ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	00da      	lsls	r2, r3, #3
 8012ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec8:	4413      	add	r3, r2
 8012eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012ece:	627b      	str	r3, [r7, #36]	; 0x24
 8012ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed2:	881b      	ldrh	r3, [r3, #0]
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012eda:	b29a      	uxth	r2, r3
 8012edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ede:	801a      	strh	r2, [r3, #0]
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	691b      	ldr	r3, [r3, #16]
 8012ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8012ee6:	d91d      	bls.n	8012f24 <USB_ActivateEndpoint+0x2b0>
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	691b      	ldr	r3, [r3, #16]
 8012eec:	095b      	lsrs	r3, r3, #5
 8012eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	691b      	ldr	r3, [r3, #16]
 8012ef4:	f003 031f 	and.w	r3, r3, #31
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d102      	bne.n	8012f02 <USB_ActivateEndpoint+0x28e>
 8012efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012efe:	3b01      	subs	r3, #1
 8012f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8012f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f04:	881b      	ldrh	r3, [r3, #0]
 8012f06:	b29a      	uxth	r2, r3
 8012f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	029b      	lsls	r3, r3, #10
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	4313      	orrs	r3, r2
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012f1c:	b29a      	uxth	r2, r3
 8012f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f20:	801a      	strh	r2, [r3, #0]
 8012f22:	e026      	b.n	8012f72 <USB_ActivateEndpoint+0x2fe>
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	691b      	ldr	r3, [r3, #16]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d10a      	bne.n	8012f42 <USB_ActivateEndpoint+0x2ce>
 8012f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2e:	881b      	ldrh	r3, [r3, #0]
 8012f30:	b29b      	uxth	r3, r3
 8012f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3e:	801a      	strh	r2, [r3, #0]
 8012f40:	e017      	b.n	8012f72 <USB_ActivateEndpoint+0x2fe>
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	691b      	ldr	r3, [r3, #16]
 8012f46:	085b      	lsrs	r3, r3, #1
 8012f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	691b      	ldr	r3, [r3, #16]
 8012f4e:	f003 0301 	and.w	r3, r3, #1
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d002      	beq.n	8012f5c <USB_ActivateEndpoint+0x2e8>
 8012f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f58:	3301      	adds	r3, #1
 8012f5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5e:	881b      	ldrh	r3, [r3, #0]
 8012f60:	b29a      	uxth	r2, r3
 8012f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	029b      	lsls	r3, r3, #10
 8012f68:	b29b      	uxth	r3, r3
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	b29a      	uxth	r2, r3
 8012f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	009b      	lsls	r3, r3, #2
 8012f7a:	4413      	add	r3, r2
 8012f7c:	881b      	ldrh	r3, [r3, #0]
 8012f7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d01b      	beq.n	8012fc2 <USB_ActivateEndpoint+0x34e>
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	4413      	add	r3, r2
 8012f94:	881b      	ldrh	r3, [r3, #0]
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fa0:	843b      	strh	r3, [r7, #32]
 8012fa2:	687a      	ldr	r2, [r7, #4]
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	009b      	lsls	r3, r3, #2
 8012faa:	441a      	add	r2, r3
 8012fac:	8c3b      	ldrh	r3, [r7, #32]
 8012fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d124      	bne.n	8013014 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012fca:	687a      	ldr	r2, [r7, #4]
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	4413      	add	r3, r2
 8012fd4:	881b      	ldrh	r3, [r3, #0]
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fe0:	83bb      	strh	r3, [r7, #28]
 8012fe2:	8bbb      	ldrh	r3, [r7, #28]
 8012fe4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012fe8:	83bb      	strh	r3, [r7, #28]
 8012fea:	8bbb      	ldrh	r3, [r7, #28]
 8012fec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012ff0:	83bb      	strh	r3, [r7, #28]
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	441a      	add	r2, r3
 8012ffc:	8bbb      	ldrh	r3, [r7, #28]
 8012ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801300a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801300e:	b29b      	uxth	r3, r3
 8013010:	8013      	strh	r3, [r2, #0]
 8013012:	e1ea      	b.n	80133ea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	009b      	lsls	r3, r3, #2
 801301c:	4413      	add	r3, r2
 801301e:	881b      	ldrh	r3, [r3, #0]
 8013020:	b29b      	uxth	r3, r3
 8013022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801302a:	83fb      	strh	r3, [r7, #30]
 801302c:	8bfb      	ldrh	r3, [r7, #30]
 801302e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013032:	83fb      	strh	r3, [r7, #30]
 8013034:	687a      	ldr	r2, [r7, #4]
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	441a      	add	r2, r3
 801303e:	8bfb      	ldrh	r3, [r7, #30]
 8013040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801304c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013050:	b29b      	uxth	r3, r3
 8013052:	8013      	strh	r3, [r2, #0]
 8013054:	e1c9      	b.n	80133ea <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	78db      	ldrb	r3, [r3, #3]
 801305a:	2b02      	cmp	r3, #2
 801305c:	d11e      	bne.n	801309c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801305e:	687a      	ldr	r2, [r7, #4]
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	4413      	add	r3, r2
 8013068:	881b      	ldrh	r3, [r3, #0]
 801306a:	b29b      	uxth	r3, r3
 801306c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013074:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8013078:	687a      	ldr	r2, [r7, #4]
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	441a      	add	r2, r3
 8013082:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801308a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801308e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8013092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013096:	b29b      	uxth	r3, r3
 8013098:	8013      	strh	r3, [r2, #0]
 801309a:	e01d      	b.n	80130d8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801309c:	687a      	ldr	r2, [r7, #4]
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	4413      	add	r3, r2
 80130a6:	881b      	ldrh	r3, [r3, #0]
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80130ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	009b      	lsls	r3, r3, #2
 80130be:	441a      	add	r2, r3
 80130c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80130c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80130c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80130cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80130d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130d4:	b29b      	uxth	r3, r3
 80130d6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	461a      	mov	r2, r3
 80130e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80130e8:	4413      	add	r3, r2
 80130ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	00da      	lsls	r2, r3, #3
 80130f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80130f4:	4413      	add	r3, r2
 80130f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80130fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	891b      	ldrh	r3, [r3, #8]
 8013100:	085b      	lsrs	r3, r3, #1
 8013102:	b29b      	uxth	r3, r3
 8013104:	005b      	lsls	r3, r3, #1
 8013106:	b29a      	uxth	r2, r3
 8013108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801310a:	801a      	strh	r2, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	657b      	str	r3, [r7, #84]	; 0x54
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013116:	b29b      	uxth	r3, r3
 8013118:	461a      	mov	r2, r3
 801311a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801311c:	4413      	add	r3, r2
 801311e:	657b      	str	r3, [r7, #84]	; 0x54
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	00da      	lsls	r2, r3, #3
 8013126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013128:	4413      	add	r3, r2
 801312a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801312e:	653b      	str	r3, [r7, #80]	; 0x50
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	895b      	ldrh	r3, [r3, #10]
 8013134:	085b      	lsrs	r3, r3, #1
 8013136:	b29b      	uxth	r3, r3
 8013138:	005b      	lsls	r3, r3, #1
 801313a:	b29a      	uxth	r2, r3
 801313c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801313e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	785b      	ldrb	r3, [r3, #1]
 8013144:	2b00      	cmp	r3, #0
 8013146:	f040 8093 	bne.w	8013270 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	009b      	lsls	r3, r3, #2
 8013152:	4413      	add	r3, r2
 8013154:	881b      	ldrh	r3, [r3, #0]
 8013156:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801315a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013162:	2b00      	cmp	r3, #0
 8013164:	d01b      	beq.n	801319e <USB_ActivateEndpoint+0x52a>
 8013166:	687a      	ldr	r2, [r7, #4]
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	009b      	lsls	r3, r3, #2
 801316e:	4413      	add	r3, r2
 8013170:	881b      	ldrh	r3, [r3, #0]
 8013172:	b29b      	uxth	r3, r3
 8013174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801317c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	441a      	add	r2, r3
 8013188:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801318a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801318e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801319a:	b29b      	uxth	r3, r3
 801319c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	009b      	lsls	r3, r3, #2
 80131a6:	4413      	add	r3, r2
 80131a8:	881b      	ldrh	r3, [r3, #0]
 80131aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80131ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d01b      	beq.n	80131ee <USB_ActivateEndpoint+0x57a>
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	4413      	add	r3, r2
 80131c0:	881b      	ldrh	r3, [r3, #0]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80131c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80131cc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80131ce:	687a      	ldr	r2, [r7, #4]
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	441a      	add	r2, r3
 80131d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80131da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80131e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	009b      	lsls	r3, r3, #2
 80131f6:	4413      	add	r3, r2
 80131f8:	881b      	ldrh	r3, [r3, #0]
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013204:	873b      	strh	r3, [r7, #56]	; 0x38
 8013206:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013208:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801320c:	873b      	strh	r3, [r7, #56]	; 0x38
 801320e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013210:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013214:	873b      	strh	r3, [r7, #56]	; 0x38
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	441a      	add	r2, r3
 8013220:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801322a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013232:	b29b      	uxth	r3, r3
 8013234:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	009b      	lsls	r3, r3, #2
 801323e:	4413      	add	r3, r2
 8013240:	881b      	ldrh	r3, [r3, #0]
 8013242:	b29b      	uxth	r3, r3
 8013244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801324c:	86fb      	strh	r3, [r7, #54]	; 0x36
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	781b      	ldrb	r3, [r3, #0]
 8013254:	009b      	lsls	r3, r3, #2
 8013256:	441a      	add	r2, r3
 8013258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801325a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801325e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801326a:	b29b      	uxth	r3, r3
 801326c:	8013      	strh	r3, [r2, #0]
 801326e:	e0bc      	b.n	80133ea <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	4413      	add	r3, r2
 801327a:	881b      	ldrh	r3, [r3, #0]
 801327c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013288:	2b00      	cmp	r3, #0
 801328a:	d01d      	beq.n	80132c8 <USB_ActivateEndpoint+0x654>
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	4413      	add	r3, r2
 8013296:	881b      	ldrh	r3, [r3, #0]
 8013298:	b29b      	uxth	r3, r3
 801329a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	009b      	lsls	r3, r3, #2
 80132ae:	441a      	add	r2, r3
 80132b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80132b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80132c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132c4:	b29b      	uxth	r3, r3
 80132c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	009b      	lsls	r3, r3, #2
 80132d0:	4413      	add	r3, r2
 80132d2:	881b      	ldrh	r3, [r3, #0]
 80132d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80132d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80132dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d01d      	beq.n	8013320 <USB_ActivateEndpoint+0x6ac>
 80132e4:	687a      	ldr	r2, [r7, #4]
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	4413      	add	r3, r2
 80132ee:	881b      	ldrh	r3, [r3, #0]
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80132f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	009b      	lsls	r3, r3, #2
 8013306:	441a      	add	r2, r3
 8013308:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801330c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013318:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801331c:	b29b      	uxth	r3, r3
 801331e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	78db      	ldrb	r3, [r3, #3]
 8013324:	2b01      	cmp	r3, #1
 8013326:	d024      	beq.n	8013372 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013328:	687a      	ldr	r2, [r7, #4]
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	4413      	add	r3, r2
 8013332:	881b      	ldrh	r3, [r3, #0]
 8013334:	b29b      	uxth	r3, r3
 8013336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801333a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801333e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8013342:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013346:	f083 0320 	eor.w	r3, r3, #32
 801334a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	009b      	lsls	r3, r3, #2
 8013356:	441a      	add	r2, r3
 8013358:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801335c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801336c:	b29b      	uxth	r3, r3
 801336e:	8013      	strh	r3, [r2, #0]
 8013370:	e01d      	b.n	80133ae <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	009b      	lsls	r3, r3, #2
 801337a:	4413      	add	r3, r2
 801337c:	881b      	ldrh	r3, [r3, #0]
 801337e:	b29b      	uxth	r3, r3
 8013380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013388:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	009b      	lsls	r3, r3, #2
 8013394:	441a      	add	r2, r3
 8013396:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801339a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801339e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80133a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80133a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	009b      	lsls	r3, r3, #2
 80133b6:	4413      	add	r3, r2
 80133b8:	881b      	ldrh	r3, [r3, #0]
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80133c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	009b      	lsls	r3, r3, #2
 80133d0:	441a      	add	r2, r3
 80133d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80133da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80133de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80133e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80133ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3774      	adds	r7, #116	; 0x74
 80133f2:	46bd      	mov	sp, r7
 80133f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f8:	4770      	bx	lr
 80133fa:	bf00      	nop

080133fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b08d      	sub	sp, #52	; 0x34
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	7b1b      	ldrb	r3, [r3, #12]
 801340a:	2b00      	cmp	r3, #0
 801340c:	f040 808e 	bne.w	801352c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	785b      	ldrb	r3, [r3, #1]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d044      	beq.n	80134a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013418:	687a      	ldr	r2, [r7, #4]
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	4413      	add	r3, r2
 8013422:	881b      	ldrh	r3, [r3, #0]
 8013424:	81bb      	strh	r3, [r7, #12]
 8013426:	89bb      	ldrh	r3, [r7, #12]
 8013428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801342c:	2b00      	cmp	r3, #0
 801342e:	d01b      	beq.n	8013468 <USB_DeactivateEndpoint+0x6c>
 8013430:	687a      	ldr	r2, [r7, #4]
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	009b      	lsls	r3, r3, #2
 8013438:	4413      	add	r3, r2
 801343a:	881b      	ldrh	r3, [r3, #0]
 801343c:	b29b      	uxth	r3, r3
 801343e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013446:	817b      	strh	r3, [r7, #10]
 8013448:	687a      	ldr	r2, [r7, #4]
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	441a      	add	r2, r3
 8013452:	897b      	ldrh	r3, [r7, #10]
 8013454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801345c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013460:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013464:	b29b      	uxth	r3, r3
 8013466:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	009b      	lsls	r3, r3, #2
 8013470:	4413      	add	r3, r2
 8013472:	881b      	ldrh	r3, [r3, #0]
 8013474:	b29b      	uxth	r3, r3
 8013476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801347a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801347e:	813b      	strh	r3, [r7, #8]
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	009b      	lsls	r3, r3, #2
 8013488:	441a      	add	r2, r3
 801348a:	893b      	ldrh	r3, [r7, #8]
 801348c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801349c:	b29b      	uxth	r3, r3
 801349e:	8013      	strh	r3, [r2, #0]
 80134a0:	e192      	b.n	80137c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	4413      	add	r3, r2
 80134ac:	881b      	ldrh	r3, [r3, #0]
 80134ae:	827b      	strh	r3, [r7, #18]
 80134b0:	8a7b      	ldrh	r3, [r7, #18]
 80134b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d01b      	beq.n	80134f2 <USB_DeactivateEndpoint+0xf6>
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	4413      	add	r3, r2
 80134c4:	881b      	ldrh	r3, [r3, #0]
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80134cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134d0:	823b      	strh	r3, [r7, #16]
 80134d2:	687a      	ldr	r2, [r7, #4]
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	009b      	lsls	r3, r3, #2
 80134da:	441a      	add	r2, r3
 80134dc:	8a3b      	ldrh	r3, [r7, #16]
 80134de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80134e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80134e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80134ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80134f2:	687a      	ldr	r2, [r7, #4]
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	009b      	lsls	r3, r3, #2
 80134fa:	4413      	add	r3, r2
 80134fc:	881b      	ldrh	r3, [r3, #0]
 80134fe:	b29b      	uxth	r3, r3
 8013500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013508:	81fb      	strh	r3, [r7, #14]
 801350a:	687a      	ldr	r2, [r7, #4]
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	441a      	add	r2, r3
 8013514:	89fb      	ldrh	r3, [r7, #14]
 8013516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801351a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801351e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013526:	b29b      	uxth	r3, r3
 8013528:	8013      	strh	r3, [r2, #0]
 801352a:	e14d      	b.n	80137c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	785b      	ldrb	r3, [r3, #1]
 8013530:	2b00      	cmp	r3, #0
 8013532:	f040 80a5 	bne.w	8013680 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	4413      	add	r3, r2
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	843b      	strh	r3, [r7, #32]
 8013544:	8c3b      	ldrh	r3, [r7, #32]
 8013546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801354a:	2b00      	cmp	r3, #0
 801354c:	d01b      	beq.n	8013586 <USB_DeactivateEndpoint+0x18a>
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	4413      	add	r3, r2
 8013558:	881b      	ldrh	r3, [r3, #0]
 801355a:	b29b      	uxth	r3, r3
 801355c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013564:	83fb      	strh	r3, [r7, #30]
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	441a      	add	r2, r3
 8013570:	8bfb      	ldrh	r3, [r7, #30]
 8013572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801357a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801357e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013582:	b29b      	uxth	r3, r3
 8013584:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013586:	687a      	ldr	r2, [r7, #4]
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	4413      	add	r3, r2
 8013590:	881b      	ldrh	r3, [r3, #0]
 8013592:	83bb      	strh	r3, [r7, #28]
 8013594:	8bbb      	ldrh	r3, [r7, #28]
 8013596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801359a:	2b00      	cmp	r3, #0
 801359c:	d01b      	beq.n	80135d6 <USB_DeactivateEndpoint+0x1da>
 801359e:	687a      	ldr	r2, [r7, #4]
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	781b      	ldrb	r3, [r3, #0]
 80135a4:	009b      	lsls	r3, r3, #2
 80135a6:	4413      	add	r3, r2
 80135a8:	881b      	ldrh	r3, [r3, #0]
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135b4:	837b      	strh	r3, [r7, #26]
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	009b      	lsls	r3, r3, #2
 80135be:	441a      	add	r2, r3
 80135c0:	8b7b      	ldrh	r3, [r7, #26]
 80135c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80135c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80135ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80135ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	009b      	lsls	r3, r3, #2
 80135de:	4413      	add	r3, r2
 80135e0:	881b      	ldrh	r3, [r3, #0]
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135ec:	833b      	strh	r3, [r7, #24]
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	009b      	lsls	r3, r3, #2
 80135f6:	441a      	add	r2, r3
 80135f8:	8b3b      	ldrh	r3, [r7, #24]
 80135fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80135fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801360a:	b29b      	uxth	r3, r3
 801360c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801360e:	687a      	ldr	r2, [r7, #4]
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	009b      	lsls	r3, r3, #2
 8013616:	4413      	add	r3, r2
 8013618:	881b      	ldrh	r3, [r3, #0]
 801361a:	b29b      	uxth	r3, r3
 801361c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013624:	82fb      	strh	r3, [r7, #22]
 8013626:	687a      	ldr	r2, [r7, #4]
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	441a      	add	r2, r3
 8013630:	8afb      	ldrh	r3, [r7, #22]
 8013632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801363a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801363e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013642:	b29b      	uxth	r3, r3
 8013644:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013646:	687a      	ldr	r2, [r7, #4]
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	009b      	lsls	r3, r3, #2
 801364e:	4413      	add	r3, r2
 8013650:	881b      	ldrh	r3, [r3, #0]
 8013652:	b29b      	uxth	r3, r3
 8013654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801365c:	82bb      	strh	r3, [r7, #20]
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	009b      	lsls	r3, r3, #2
 8013666:	441a      	add	r2, r3
 8013668:	8abb      	ldrh	r3, [r7, #20]
 801366a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801366e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801367a:	b29b      	uxth	r3, r3
 801367c:	8013      	strh	r3, [r2, #0]
 801367e:	e0a3      	b.n	80137c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	4413      	add	r3, r2
 801368a:	881b      	ldrh	r3, [r3, #0]
 801368c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801368e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013694:	2b00      	cmp	r3, #0
 8013696:	d01b      	beq.n	80136d0 <USB_DeactivateEndpoint+0x2d4>
 8013698:	687a      	ldr	r2, [r7, #4]
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	4413      	add	r3, r2
 80136a2:	881b      	ldrh	r3, [r3, #0]
 80136a4:	b29b      	uxth	r3, r3
 80136a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80136aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80136ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	009b      	lsls	r3, r3, #2
 80136b8:	441a      	add	r2, r3
 80136ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80136bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80136c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80136c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80136c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80136d0:	687a      	ldr	r2, [r7, #4]
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	781b      	ldrb	r3, [r3, #0]
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	4413      	add	r3, r2
 80136da:	881b      	ldrh	r3, [r3, #0]
 80136dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80136de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d01b      	beq.n	8013720 <USB_DeactivateEndpoint+0x324>
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	009b      	lsls	r3, r3, #2
 80136f0:	4413      	add	r3, r2
 80136f2:	881b      	ldrh	r3, [r3, #0]
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80136fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80136fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8013700:	687a      	ldr	r2, [r7, #4]
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	009b      	lsls	r3, r3, #2
 8013708:	441a      	add	r2, r3
 801370a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801370c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013718:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801371c:	b29b      	uxth	r3, r3
 801371e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	4413      	add	r3, r2
 801372a:	881b      	ldrh	r3, [r3, #0]
 801372c:	b29b      	uxth	r3, r3
 801372e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013736:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	781b      	ldrb	r3, [r3, #0]
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	441a      	add	r2, r3
 8013742:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801374c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013754:	b29b      	uxth	r3, r3
 8013756:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	009b      	lsls	r3, r3, #2
 8013760:	4413      	add	r3, r2
 8013762:	881b      	ldrh	r3, [r3, #0]
 8013764:	b29b      	uxth	r3, r3
 8013766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801376a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801376e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	441a      	add	r2, r3
 801377a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801377c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801378c:	b29b      	uxth	r3, r3
 801378e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	4413      	add	r3, r2
 801379a:	881b      	ldrh	r3, [r3, #0]
 801379c:	b29b      	uxth	r3, r3
 801379e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80137a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80137a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	441a      	add	r2, r3
 80137b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80137b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80137bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80137c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137c4:	b29b      	uxth	r3, r3
 80137c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80137c8:	2300      	movs	r3, #0
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3734      	adds	r7, #52	; 0x34
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr

080137d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80137d6:	b580      	push	{r7, lr}
 80137d8:	b0c2      	sub	sp, #264	; 0x108
 80137da:	af00      	add	r7, sp, #0
 80137dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137e4:	6018      	str	r0, [r3, #0]
 80137e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	785b      	ldrb	r3, [r3, #1]
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	f040 86b7 	bne.w	8014570 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8013802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	699a      	ldr	r2, [r3, #24]
 801380e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	691b      	ldr	r3, [r3, #16]
 801381a:	429a      	cmp	r2, r3
 801381c:	d908      	bls.n	8013830 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 801381e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	691b      	ldr	r3, [r3, #16]
 801382a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801382e:	e007      	b.n	8013840 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8013830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	699b      	ldr	r3, [r3, #24]
 801383c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	7b1b      	ldrb	r3, [r3, #12]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d13a      	bne.n	80138c6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	6959      	ldr	r1, [r3, #20]
 801385c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	88da      	ldrh	r2, [r3, #6]
 8013868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801386c:	b29b      	uxth	r3, r3
 801386e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013872:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013876:	6800      	ldr	r0, [r0, #0]
 8013878:	f001 fc98 	bl	80151ac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801387c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	613b      	str	r3, [r7, #16]
 8013888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801388c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013896:	b29b      	uxth	r3, r3
 8013898:	461a      	mov	r2, r3
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	4413      	add	r3, r2
 801389e:	613b      	str	r3, [r7, #16]
 80138a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	00da      	lsls	r2, r3, #3
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	4413      	add	r3, r2
 80138b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80138b6:	60fb      	str	r3, [r7, #12]
 80138b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138bc:	b29a      	uxth	r2, r3
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	801a      	strh	r2, [r3, #0]
 80138c2:	f000 be1f 	b.w	8014504 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80138c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	78db      	ldrb	r3, [r3, #3]
 80138d2:	2b02      	cmp	r3, #2
 80138d4:	f040 8462 	bne.w	801419c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80138d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	6a1a      	ldr	r2, [r3, #32]
 80138e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	691b      	ldr	r3, [r3, #16]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	f240 83df 	bls.w	80140b4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80138f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	4413      	add	r3, r2
 8013910:	881b      	ldrh	r3, [r3, #0]
 8013912:	b29b      	uxth	r3, r3
 8013914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801391c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013928:	681a      	ldr	r2, [r3, #0]
 801392a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801392e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	441a      	add	r2, r3
 801393a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801393e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013946:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801394a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801394e:	b29b      	uxth	r3, r3
 8013950:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8013952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	6a1a      	ldr	r2, [r3, #32]
 801395e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013962:	1ad2      	subs	r2, r2, r3
 8013964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013974:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013978:	681a      	ldr	r2, [r3, #0]
 801397a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801397e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	4413      	add	r3, r2
 801398a:	881b      	ldrh	r3, [r3, #0]
 801398c:	b29b      	uxth	r3, r3
 801398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013992:	2b00      	cmp	r3, #0
 8013994:	f000 81c7 	beq.w	8013d26 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801399c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	633b      	str	r3, [r7, #48]	; 0x30
 80139a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	785b      	ldrb	r3, [r3, #1]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d177      	bne.n	8013aa4 <USB_EPStartXfer+0x2ce>
 80139b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	62bb      	str	r3, [r7, #40]	; 0x28
 80139c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	461a      	mov	r2, r3
 80139d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d4:	4413      	add	r3, r2
 80139d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80139d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	00da      	lsls	r2, r3, #3
 80139e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e8:	4413      	add	r3, r2
 80139ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80139ee:	627b      	str	r3, [r7, #36]	; 0x24
 80139f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f2:	881b      	ldrh	r3, [r3, #0]
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fe:	801a      	strh	r2, [r3, #0]
 8013a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a04:	2b3e      	cmp	r3, #62	; 0x3e
 8013a06:	d921      	bls.n	8013a4c <USB_EPStartXfer+0x276>
 8013a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a0c:	095b      	lsrs	r3, r3, #5
 8013a0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a16:	f003 031f 	and.w	r3, r3, #31
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d104      	bne.n	8013a28 <USB_EPStartXfer+0x252>
 8013a1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013a22:	3b01      	subs	r3, #1
 8013a24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2a:	881b      	ldrh	r3, [r3, #0]
 8013a2c:	b29a      	uxth	r2, r3
 8013a2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013a32:	b29b      	uxth	r3, r3
 8013a34:	029b      	lsls	r3, r3, #10
 8013a36:	b29b      	uxth	r3, r3
 8013a38:	4313      	orrs	r3, r2
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a48:	801a      	strh	r2, [r3, #0]
 8013a4a:	e050      	b.n	8013aee <USB_EPStartXfer+0x318>
 8013a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d10a      	bne.n	8013a6a <USB_EPStartXfer+0x294>
 8013a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a56:	881b      	ldrh	r3, [r3, #0]
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013a62:	b29a      	uxth	r2, r3
 8013a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a66:	801a      	strh	r2, [r3, #0]
 8013a68:	e041      	b.n	8013aee <USB_EPStartXfer+0x318>
 8013a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a6e:	085b      	lsrs	r3, r3, #1
 8013a70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a78:	f003 0301 	and.w	r3, r3, #1
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d004      	beq.n	8013a8a <USB_EPStartXfer+0x2b4>
 8013a80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013a84:	3301      	adds	r3, #1
 8013a86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8c:	881b      	ldrh	r3, [r3, #0]
 8013a8e:	b29a      	uxth	r2, r3
 8013a90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013a94:	b29b      	uxth	r3, r3
 8013a96:	029b      	lsls	r3, r3, #10
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	b29a      	uxth	r2, r3
 8013a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa0:	801a      	strh	r2, [r3, #0]
 8013aa2:	e024      	b.n	8013aee <USB_EPStartXfer+0x318>
 8013aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	785b      	ldrb	r3, [r3, #1]
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d11c      	bne.n	8013aee <USB_EPStartXfer+0x318>
 8013ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013ac2:	b29b      	uxth	r3, r3
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac8:	4413      	add	r3, r2
 8013aca:	633b      	str	r3, [r7, #48]	; 0x30
 8013acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	00da      	lsls	r2, r3, #3
 8013ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013adc:	4413      	add	r3, r2
 8013ade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ae8:	b29a      	uxth	r2, r3
 8013aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	895b      	ldrh	r3, [r3, #10]
 8013afa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	6959      	ldr	r1, [r3, #20]
 8013b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013b14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013b18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013b1c:	6800      	ldr	r0, [r0, #0]
 8013b1e:	f001 fb45 	bl	80151ac <USB_WritePMA>
            ep->xfer_buff += len;
 8013b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	695a      	ldr	r2, [r3, #20]
 8013b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b32:	441a      	add	r2, r3
 8013b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	6a1a      	ldr	r2, [r3, #32]
 8013b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	691b      	ldr	r3, [r3, #16]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d90f      	bls.n	8013b7c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8013b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	6a1a      	ldr	r2, [r3, #32]
 8013b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b6c:	1ad2      	subs	r2, r2, r3
 8013b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	621a      	str	r2, [r3, #32]
 8013b7a:	e00e      	b.n	8013b9a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8013b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	6a1b      	ldr	r3, [r3, #32]
 8013b88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8013b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	2200      	movs	r2, #0
 8013b98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	785b      	ldrb	r3, [r3, #1]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d177      	bne.n	8013c9a <USB_EPStartXfer+0x4c4>
 8013baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	61bb      	str	r3, [r7, #24]
 8013bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	69bb      	ldr	r3, [r7, #24]
 8013bca:	4413      	add	r3, r2
 8013bcc:	61bb      	str	r3, [r7, #24]
 8013bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	781b      	ldrb	r3, [r3, #0]
 8013bda:	00da      	lsls	r2, r3, #3
 8013bdc:	69bb      	ldr	r3, [r7, #24]
 8013bde:	4413      	add	r3, r2
 8013be0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013be4:	617b      	str	r3, [r7, #20]
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	881b      	ldrh	r3, [r3, #0]
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013bf0:	b29a      	uxth	r2, r3
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	801a      	strh	r2, [r3, #0]
 8013bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013bfa:	2b3e      	cmp	r3, #62	; 0x3e
 8013bfc:	d921      	bls.n	8013c42 <USB_EPStartXfer+0x46c>
 8013bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c02:	095b      	lsrs	r3, r3, #5
 8013c04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c0c:	f003 031f 	and.w	r3, r3, #31
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d104      	bne.n	8013c1e <USB_EPStartXfer+0x448>
 8013c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013c18:	3b01      	subs	r3, #1
 8013c1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	881b      	ldrh	r3, [r3, #0]
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	029b      	lsls	r3, r3, #10
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013c3a:	b29a      	uxth	r2, r3
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	801a      	strh	r2, [r3, #0]
 8013c40:	e056      	b.n	8013cf0 <USB_EPStartXfer+0x51a>
 8013c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d10a      	bne.n	8013c60 <USB_EPStartXfer+0x48a>
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	881b      	ldrh	r3, [r3, #0]
 8013c4e:	b29b      	uxth	r3, r3
 8013c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013c58:	b29a      	uxth	r2, r3
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	801a      	strh	r2, [r3, #0]
 8013c5e:	e047      	b.n	8013cf0 <USB_EPStartXfer+0x51a>
 8013c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c64:	085b      	lsrs	r3, r3, #1
 8013c66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c6e:	f003 0301 	and.w	r3, r3, #1
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d004      	beq.n	8013c80 <USB_EPStartXfer+0x4aa>
 8013c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	881b      	ldrh	r3, [r3, #0]
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	029b      	lsls	r3, r3, #10
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	4313      	orrs	r3, r2
 8013c92:	b29a      	uxth	r2, r3
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	801a      	strh	r2, [r3, #0]
 8013c98:	e02a      	b.n	8013cf0 <USB_EPStartXfer+0x51a>
 8013c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	785b      	ldrb	r3, [r3, #1]
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d122      	bne.n	8013cf0 <USB_EPStartXfer+0x51a>
 8013caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	623b      	str	r3, [r7, #32]
 8013cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	6a3b      	ldr	r3, [r7, #32]
 8013cca:	4413      	add	r3, r2
 8013ccc:	623b      	str	r3, [r7, #32]
 8013cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	781b      	ldrb	r3, [r3, #0]
 8013cda:	00da      	lsls	r2, r3, #3
 8013cdc:	6a3b      	ldr	r3, [r7, #32]
 8013cde:	4413      	add	r3, r2
 8013ce0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013ce4:	61fb      	str	r3, [r7, #28]
 8013ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013cea:	b29a      	uxth	r2, r3
 8013cec:	69fb      	ldr	r3, [r7, #28]
 8013cee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	891b      	ldrh	r3, [r3, #8]
 8013cfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	6959      	ldr	r1, [r3, #20]
 8013d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013d16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013d1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013d1e:	6800      	ldr	r0, [r0, #0]
 8013d20:	f001 fa44 	bl	80151ac <USB_WritePMA>
 8013d24:	e3ee      	b.n	8014504 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	785b      	ldrb	r3, [r3, #1]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d177      	bne.n	8013e26 <USB_EPStartXfer+0x650>
 8013d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013d50:	b29b      	uxth	r3, r3
 8013d52:	461a      	mov	r2, r3
 8013d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d56:	4413      	add	r3, r2
 8013d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	781b      	ldrb	r3, [r3, #0]
 8013d66:	00da      	lsls	r2, r3, #3
 8013d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d6a:	4413      	add	r3, r2
 8013d6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013d70:	647b      	str	r3, [r7, #68]	; 0x44
 8013d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d74:	881b      	ldrh	r3, [r3, #0]
 8013d76:	b29b      	uxth	r3, r3
 8013d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013d7c:	b29a      	uxth	r2, r3
 8013d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d80:	801a      	strh	r2, [r3, #0]
 8013d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d86:	2b3e      	cmp	r3, #62	; 0x3e
 8013d88:	d921      	bls.n	8013dce <USB_EPStartXfer+0x5f8>
 8013d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d8e:	095b      	lsrs	r3, r3, #5
 8013d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d98:	f003 031f 	and.w	r3, r3, #31
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d104      	bne.n	8013daa <USB_EPStartXfer+0x5d4>
 8013da0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013da4:	3b01      	subs	r3, #1
 8013da6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dac:	881b      	ldrh	r3, [r3, #0]
 8013dae:	b29a      	uxth	r2, r3
 8013db0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013db4:	b29b      	uxth	r3, r3
 8013db6:	029b      	lsls	r3, r3, #10
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	4313      	orrs	r3, r2
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013dc6:	b29a      	uxth	r2, r3
 8013dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dca:	801a      	strh	r2, [r3, #0]
 8013dcc:	e056      	b.n	8013e7c <USB_EPStartXfer+0x6a6>
 8013dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d10a      	bne.n	8013dec <USB_EPStartXfer+0x616>
 8013dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dd8:	881b      	ldrh	r3, [r3, #0]
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013de4:	b29a      	uxth	r2, r3
 8013de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013de8:	801a      	strh	r2, [r3, #0]
 8013dea:	e047      	b.n	8013e7c <USB_EPStartXfer+0x6a6>
 8013dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013df0:	085b      	lsrs	r3, r3, #1
 8013df2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013dfa:	f003 0301 	and.w	r3, r3, #1
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d004      	beq.n	8013e0c <USB_EPStartXfer+0x636>
 8013e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013e06:	3301      	adds	r3, #1
 8013e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e0e:	881b      	ldrh	r3, [r3, #0]
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013e16:	b29b      	uxth	r3, r3
 8013e18:	029b      	lsls	r3, r3, #10
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	4313      	orrs	r3, r2
 8013e1e:	b29a      	uxth	r2, r3
 8013e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e22:	801a      	strh	r2, [r3, #0]
 8013e24:	e02a      	b.n	8013e7c <USB_EPStartXfer+0x6a6>
 8013e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	785b      	ldrb	r3, [r3, #1]
 8013e32:	2b01      	cmp	r3, #1
 8013e34:	d122      	bne.n	8013e7c <USB_EPStartXfer+0x6a6>
 8013e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	653b      	str	r3, [r7, #80]	; 0x50
 8013e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013e50:	b29b      	uxth	r3, r3
 8013e52:	461a      	mov	r2, r3
 8013e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e56:	4413      	add	r3, r2
 8013e58:	653b      	str	r3, [r7, #80]	; 0x50
 8013e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	00da      	lsls	r2, r3, #3
 8013e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e6a:	4413      	add	r3, r2
 8013e6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e76:	b29a      	uxth	r2, r3
 8013e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	891b      	ldrh	r3, [r3, #8]
 8013e88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	6959      	ldr	r1, [r3, #20]
 8013e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013ea2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013ea6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013eaa:	6800      	ldr	r0, [r0, #0]
 8013eac:	f001 f97e 	bl	80151ac <USB_WritePMA>
            ep->xfer_buff += len;
 8013eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	695a      	ldr	r2, [r3, #20]
 8013ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ec0:	441a      	add	r2, r3
 8013ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	6a1a      	ldr	r2, [r3, #32]
 8013eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	691b      	ldr	r3, [r3, #16]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d90f      	bls.n	8013f0a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8013eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	6a1a      	ldr	r2, [r3, #32]
 8013ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013efa:	1ad2      	subs	r2, r2, r3
 8013efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	621a      	str	r2, [r3, #32]
 8013f08:	e00e      	b.n	8013f28 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8013f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	6a1b      	ldr	r3, [r3, #32]
 8013f16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8013f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2200      	movs	r2, #0
 8013f26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	643b      	str	r3, [r7, #64]	; 0x40
 8013f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	785b      	ldrb	r3, [r3, #1]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d177      	bne.n	8014034 <USB_EPStartXfer+0x85e>
 8013f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013f5e:	b29b      	uxth	r3, r3
 8013f60:	461a      	mov	r2, r3
 8013f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f64:	4413      	add	r3, r2
 8013f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	00da      	lsls	r2, r3, #3
 8013f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f78:	4413      	add	r3, r2
 8013f7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8013f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f82:	881b      	ldrh	r3, [r3, #0]
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013f8a:	b29a      	uxth	r2, r3
 8013f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f8e:	801a      	strh	r2, [r3, #0]
 8013f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013f94:	2b3e      	cmp	r3, #62	; 0x3e
 8013f96:	d921      	bls.n	8013fdc <USB_EPStartXfer+0x806>
 8013f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013f9c:	095b      	lsrs	r3, r3, #5
 8013f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013fa6:	f003 031f 	and.w	r3, r3, #31
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d104      	bne.n	8013fb8 <USB_EPStartXfer+0x7e2>
 8013fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013fb2:	3b01      	subs	r3, #1
 8013fb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fba:	881b      	ldrh	r3, [r3, #0]
 8013fbc:	b29a      	uxth	r2, r3
 8013fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	029b      	lsls	r3, r3, #10
 8013fc6:	b29b      	uxth	r3, r3
 8013fc8:	4313      	orrs	r3, r2
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fd8:	801a      	strh	r2, [r3, #0]
 8013fda:	e050      	b.n	801407e <USB_EPStartXfer+0x8a8>
 8013fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d10a      	bne.n	8013ffa <USB_EPStartXfer+0x824>
 8013fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fe6:	881b      	ldrh	r3, [r3, #0]
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013ff2:	b29a      	uxth	r2, r3
 8013ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ff6:	801a      	strh	r2, [r3, #0]
 8013ff8:	e041      	b.n	801407e <USB_EPStartXfer+0x8a8>
 8013ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ffe:	085b      	lsrs	r3, r3, #1
 8014000:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014008:	f003 0301 	and.w	r3, r3, #1
 801400c:	2b00      	cmp	r3, #0
 801400e:	d004      	beq.n	801401a <USB_EPStartXfer+0x844>
 8014010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014014:	3301      	adds	r3, #1
 8014016:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801401c:	881b      	ldrh	r3, [r3, #0]
 801401e:	b29a      	uxth	r2, r3
 8014020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014024:	b29b      	uxth	r3, r3
 8014026:	029b      	lsls	r3, r3, #10
 8014028:	b29b      	uxth	r3, r3
 801402a:	4313      	orrs	r3, r2
 801402c:	b29a      	uxth	r2, r3
 801402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014030:	801a      	strh	r2, [r3, #0]
 8014032:	e024      	b.n	801407e <USB_EPStartXfer+0x8a8>
 8014034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	785b      	ldrb	r3, [r3, #1]
 8014040:	2b01      	cmp	r3, #1
 8014042:	d11c      	bne.n	801407e <USB_EPStartXfer+0x8a8>
 8014044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014052:	b29b      	uxth	r3, r3
 8014054:	461a      	mov	r2, r3
 8014056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014058:	4413      	add	r3, r2
 801405a:	643b      	str	r3, [r7, #64]	; 0x40
 801405c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	00da      	lsls	r2, r3, #3
 801406a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801406c:	4413      	add	r3, r2
 801406e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014078:	b29a      	uxth	r2, r3
 801407a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801407c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801407e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	895b      	ldrh	r3, [r3, #10]
 801408a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801408e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	6959      	ldr	r1, [r3, #20]
 801409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801409e:	b29b      	uxth	r3, r3
 80140a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80140a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80140a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80140ac:	6800      	ldr	r0, [r0, #0]
 80140ae:	f001 f87d 	bl	80151ac <USB_WritePMA>
 80140b2:	e227      	b.n	8014504 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80140b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	6a1b      	ldr	r3, [r3, #32]
 80140c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80140c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80140cc:	681a      	ldr	r2, [r3, #0]
 80140ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	4413      	add	r3, r2
 80140de:	881b      	ldrh	r3, [r3, #0]
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80140e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80140ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80140ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	441a      	add	r2, r3
 8014108:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801410c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801411c:	b29b      	uxth	r3, r3
 801411e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8014120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801412c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801413a:	b29b      	uxth	r3, r3
 801413c:	461a      	mov	r2, r3
 801413e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014140:	4413      	add	r3, r2
 8014142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	00da      	lsls	r2, r3, #3
 8014152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014154:	4413      	add	r3, r2
 8014156:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801415a:	65bb      	str	r3, [r7, #88]	; 0x58
 801415c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014160:	b29a      	uxth	r2, r3
 8014162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014164:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801416a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	891b      	ldrh	r3, [r3, #8]
 8014172:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801417a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	6959      	ldr	r1, [r3, #20]
 8014182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014186:	b29b      	uxth	r3, r3
 8014188:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801418c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8014190:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8014194:	6800      	ldr	r0, [r0, #0]
 8014196:	f001 f809 	bl	80151ac <USB_WritePMA>
 801419a:	e1b3      	b.n	8014504 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801419c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	6a1a      	ldr	r2, [r3, #32]
 80141a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141ac:	1ad2      	subs	r2, r2, r3
 80141ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80141ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	4413      	add	r3, r2
 80141d4:	881b      	ldrh	r3, [r3, #0]
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141dc:	2b00      	cmp	r3, #0
 80141de:	f000 80c6 	beq.w	801436e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80141e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	673b      	str	r3, [r7, #112]	; 0x70
 80141ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	785b      	ldrb	r3, [r3, #1]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d177      	bne.n	80142ee <USB_EPStartXfer+0xb18>
 80141fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	66bb      	str	r3, [r7, #104]	; 0x68
 801420a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801420e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014218:	b29b      	uxth	r3, r3
 801421a:	461a      	mov	r2, r3
 801421c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801421e:	4413      	add	r3, r2
 8014220:	66bb      	str	r3, [r7, #104]	; 0x68
 8014222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	00da      	lsls	r2, r3, #3
 8014230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014232:	4413      	add	r3, r2
 8014234:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014238:	667b      	str	r3, [r7, #100]	; 0x64
 801423a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	b29b      	uxth	r3, r3
 8014240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014244:	b29a      	uxth	r2, r3
 8014246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014248:	801a      	strh	r2, [r3, #0]
 801424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801424e:	2b3e      	cmp	r3, #62	; 0x3e
 8014250:	d921      	bls.n	8014296 <USB_EPStartXfer+0xac0>
 8014252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014256:	095b      	lsrs	r3, r3, #5
 8014258:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801425c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014260:	f003 031f 	and.w	r3, r3, #31
 8014264:	2b00      	cmp	r3, #0
 8014266:	d104      	bne.n	8014272 <USB_EPStartXfer+0xa9c>
 8014268:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801426c:	3b01      	subs	r3, #1
 801426e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014274:	881b      	ldrh	r3, [r3, #0]
 8014276:	b29a      	uxth	r2, r3
 8014278:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801427c:	b29b      	uxth	r3, r3
 801427e:	029b      	lsls	r3, r3, #10
 8014280:	b29b      	uxth	r3, r3
 8014282:	4313      	orrs	r3, r2
 8014284:	b29b      	uxth	r3, r3
 8014286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801428a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801428e:	b29a      	uxth	r2, r3
 8014290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014292:	801a      	strh	r2, [r3, #0]
 8014294:	e050      	b.n	8014338 <USB_EPStartXfer+0xb62>
 8014296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801429a:	2b00      	cmp	r3, #0
 801429c:	d10a      	bne.n	80142b4 <USB_EPStartXfer+0xade>
 801429e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142a0:	881b      	ldrh	r3, [r3, #0]
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80142a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80142ac:	b29a      	uxth	r2, r3
 80142ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142b0:	801a      	strh	r2, [r3, #0]
 80142b2:	e041      	b.n	8014338 <USB_EPStartXfer+0xb62>
 80142b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142b8:	085b      	lsrs	r3, r3, #1
 80142ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80142be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142c2:	f003 0301 	and.w	r3, r3, #1
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d004      	beq.n	80142d4 <USB_EPStartXfer+0xafe>
 80142ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80142ce:	3301      	adds	r3, #1
 80142d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80142d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142d6:	881b      	ldrh	r3, [r3, #0]
 80142d8:	b29a      	uxth	r2, r3
 80142da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80142de:	b29b      	uxth	r3, r3
 80142e0:	029b      	lsls	r3, r3, #10
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	4313      	orrs	r3, r2
 80142e6:	b29a      	uxth	r2, r3
 80142e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142ea:	801a      	strh	r2, [r3, #0]
 80142ec:	e024      	b.n	8014338 <USB_EPStartXfer+0xb62>
 80142ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	785b      	ldrb	r3, [r3, #1]
 80142fa:	2b01      	cmp	r3, #1
 80142fc:	d11c      	bne.n	8014338 <USB_EPStartXfer+0xb62>
 80142fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801430c:	b29b      	uxth	r3, r3
 801430e:	461a      	mov	r2, r3
 8014310:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014312:	4413      	add	r3, r2
 8014314:	673b      	str	r3, [r7, #112]	; 0x70
 8014316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801431a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	00da      	lsls	r2, r3, #3
 8014324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014326:	4413      	add	r3, r2
 8014328:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801432c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801432e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014332:	b29a      	uxth	r2, r3
 8014334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014336:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8014338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801433c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	895b      	ldrh	r3, [r3, #10]
 8014344:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801434c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	6959      	ldr	r1, [r3, #20]
 8014354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014358:	b29b      	uxth	r3, r3
 801435a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801435e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8014362:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8014366:	6800      	ldr	r0, [r0, #0]
 8014368:	f000 ff20 	bl	80151ac <USB_WritePMA>
 801436c:	e0ca      	b.n	8014504 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801436e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	785b      	ldrb	r3, [r3, #1]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d177      	bne.n	801446e <USB_EPStartXfer+0xc98>
 801437e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	67fb      	str	r3, [r7, #124]	; 0x7c
 801438a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801438e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014398:	b29b      	uxth	r3, r3
 801439a:	461a      	mov	r2, r3
 801439c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801439e:	4413      	add	r3, r2
 80143a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80143a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	00da      	lsls	r2, r3, #3
 80143b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143b2:	4413      	add	r3, r2
 80143b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80143b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80143ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80143bc:	881b      	ldrh	r3, [r3, #0]
 80143be:	b29b      	uxth	r3, r3
 80143c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80143c4:	b29a      	uxth	r2, r3
 80143c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80143c8:	801a      	strh	r2, [r3, #0]
 80143ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80143ce:	2b3e      	cmp	r3, #62	; 0x3e
 80143d0:	d921      	bls.n	8014416 <USB_EPStartXfer+0xc40>
 80143d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80143d6:	095b      	lsrs	r3, r3, #5
 80143d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80143dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80143e0:	f003 031f 	and.w	r3, r3, #31
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d104      	bne.n	80143f2 <USB_EPStartXfer+0xc1c>
 80143e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143ec:	3b01      	subs	r3, #1
 80143ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80143f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	b29a      	uxth	r2, r3
 80143f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	029b      	lsls	r3, r3, #10
 8014400:	b29b      	uxth	r3, r3
 8014402:	4313      	orrs	r3, r2
 8014404:	b29b      	uxth	r3, r3
 8014406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801440a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801440e:	b29a      	uxth	r2, r3
 8014410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014412:	801a      	strh	r2, [r3, #0]
 8014414:	e05c      	b.n	80144d0 <USB_EPStartXfer+0xcfa>
 8014416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801441a:	2b00      	cmp	r3, #0
 801441c:	d10a      	bne.n	8014434 <USB_EPStartXfer+0xc5e>
 801441e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014420:	881b      	ldrh	r3, [r3, #0]
 8014422:	b29b      	uxth	r3, r3
 8014424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801442c:	b29a      	uxth	r2, r3
 801442e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014430:	801a      	strh	r2, [r3, #0]
 8014432:	e04d      	b.n	80144d0 <USB_EPStartXfer+0xcfa>
 8014434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014438:	085b      	lsrs	r3, r3, #1
 801443a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014442:	f003 0301 	and.w	r3, r3, #1
 8014446:	2b00      	cmp	r3, #0
 8014448:	d004      	beq.n	8014454 <USB_EPStartXfer+0xc7e>
 801444a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801444e:	3301      	adds	r3, #1
 8014450:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014456:	881b      	ldrh	r3, [r3, #0]
 8014458:	b29a      	uxth	r2, r3
 801445a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801445e:	b29b      	uxth	r3, r3
 8014460:	029b      	lsls	r3, r3, #10
 8014462:	b29b      	uxth	r3, r3
 8014464:	4313      	orrs	r3, r2
 8014466:	b29a      	uxth	r2, r3
 8014468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801446a:	801a      	strh	r2, [r3, #0]
 801446c:	e030      	b.n	80144d0 <USB_EPStartXfer+0xcfa>
 801446e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	785b      	ldrb	r3, [r3, #1]
 801447a:	2b01      	cmp	r3, #1
 801447c:	d128      	bne.n	80144d0 <USB_EPStartXfer+0xcfa>
 801447e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801448c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801449a:	b29b      	uxth	r3, r3
 801449c:	461a      	mov	r2, r3
 801449e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80144a2:	4413      	add	r3, r2
 80144a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80144a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80144ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	781b      	ldrb	r3, [r3, #0]
 80144b4:	00da      	lsls	r2, r3, #3
 80144b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80144ba:	4413      	add	r3, r2
 80144bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80144c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80144c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80144ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80144d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80144d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	891b      	ldrh	r3, [r3, #8]
 80144dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80144e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80144e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	6959      	ldr	r1, [r3, #20]
 80144ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80144f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80144fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80144fe:	6800      	ldr	r0, [r0, #0]
 8014500:	f000 fe54 	bl	80151ac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8014504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801450c:	681a      	ldr	r2, [r3, #0]
 801450e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	009b      	lsls	r3, r3, #2
 801451c:	4413      	add	r3, r2
 801451e:	881b      	ldrh	r3, [r3, #0]
 8014520:	b29b      	uxth	r3, r3
 8014522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801452a:	817b      	strh	r3, [r7, #10]
 801452c:	897b      	ldrh	r3, [r7, #10]
 801452e:	f083 0310 	eor.w	r3, r3, #16
 8014532:	817b      	strh	r3, [r7, #10]
 8014534:	897b      	ldrh	r3, [r7, #10]
 8014536:	f083 0320 	eor.w	r3, r3, #32
 801453a:	817b      	strh	r3, [r7, #10]
 801453c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801454a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	009b      	lsls	r3, r3, #2
 8014554:	441a      	add	r2, r3
 8014556:	897b      	ldrh	r3, [r7, #10]
 8014558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801455c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014568:	b29b      	uxth	r3, r3
 801456a:	8013      	strh	r3, [r2, #0]
 801456c:	f000 bcde 	b.w	8014f2c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8014570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	7b1b      	ldrb	r3, [r3, #12]
 801457c:	2b00      	cmp	r3, #0
 801457e:	f040 80bb 	bne.w	80146f8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8014582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	699a      	ldr	r2, [r3, #24]
 801458e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	691b      	ldr	r3, [r3, #16]
 801459a:	429a      	cmp	r2, r3
 801459c:	d917      	bls.n	80145ce <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 801459e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	691b      	ldr	r3, [r3, #16]
 80145aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80145ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	699a      	ldr	r2, [r3, #24]
 80145ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80145be:	1ad2      	subs	r2, r2, r3
 80145c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	619a      	str	r2, [r3, #24]
 80145cc:	e00e      	b.n	80145ec <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80145ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	699b      	ldr	r3, [r3, #24]
 80145da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80145de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	2200      	movs	r2, #0
 80145ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80145ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80145fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80145fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014608:	b29b      	uxth	r3, r3
 801460a:	461a      	mov	r2, r3
 801460c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014610:	4413      	add	r3, r2
 8014612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801461a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	00da      	lsls	r2, r3, #3
 8014624:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014628:	4413      	add	r3, r2
 801462a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801462e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014636:	881b      	ldrh	r3, [r3, #0]
 8014638:	b29b      	uxth	r3, r3
 801463a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801463e:	b29a      	uxth	r2, r3
 8014640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014644:	801a      	strh	r2, [r3, #0]
 8014646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801464a:	2b3e      	cmp	r3, #62	; 0x3e
 801464c:	d924      	bls.n	8014698 <USB_EPStartXfer+0xec2>
 801464e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014652:	095b      	lsrs	r3, r3, #5
 8014654:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801465c:	f003 031f 	and.w	r3, r3, #31
 8014660:	2b00      	cmp	r3, #0
 8014662:	d104      	bne.n	801466e <USB_EPStartXfer+0xe98>
 8014664:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014668:	3b01      	subs	r3, #1
 801466a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801466e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014672:	881b      	ldrh	r3, [r3, #0]
 8014674:	b29a      	uxth	r2, r3
 8014676:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801467a:	b29b      	uxth	r3, r3
 801467c:	029b      	lsls	r3, r3, #10
 801467e:	b29b      	uxth	r3, r3
 8014680:	4313      	orrs	r3, r2
 8014682:	b29b      	uxth	r3, r3
 8014684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801468c:	b29a      	uxth	r2, r3
 801468e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014692:	801a      	strh	r2, [r3, #0]
 8014694:	f000 bc10 	b.w	8014eb8 <USB_EPStartXfer+0x16e2>
 8014698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801469c:	2b00      	cmp	r3, #0
 801469e:	d10c      	bne.n	80146ba <USB_EPStartXfer+0xee4>
 80146a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80146ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80146b6:	801a      	strh	r2, [r3, #0]
 80146b8:	e3fe      	b.n	8014eb8 <USB_EPStartXfer+0x16e2>
 80146ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80146be:	085b      	lsrs	r3, r3, #1
 80146c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80146c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80146c8:	f003 0301 	and.w	r3, r3, #1
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d004      	beq.n	80146da <USB_EPStartXfer+0xf04>
 80146d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80146d4:	3301      	adds	r3, #1
 80146d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80146da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80146de:	881b      	ldrh	r3, [r3, #0]
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	029b      	lsls	r3, r3, #10
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	4313      	orrs	r3, r2
 80146ee:	b29a      	uxth	r2, r3
 80146f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80146f4:	801a      	strh	r2, [r3, #0]
 80146f6:	e3df      	b.n	8014eb8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80146f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80146fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	78db      	ldrb	r3, [r3, #3]
 8014704:	2b02      	cmp	r3, #2
 8014706:	f040 8218 	bne.w	8014b3a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801470a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801470e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	785b      	ldrb	r3, [r3, #1]
 8014716:	2b00      	cmp	r3, #0
 8014718:	f040 809d 	bne.w	8014856 <USB_EPStartXfer+0x1080>
 801471c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801472a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801472e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014738:	b29b      	uxth	r3, r3
 801473a:	461a      	mov	r2, r3
 801473c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014740:	4413      	add	r3, r2
 8014742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801474a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	00da      	lsls	r2, r3, #3
 8014754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014758:	4413      	add	r3, r2
 801475a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801475e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014766:	881b      	ldrh	r3, [r3, #0]
 8014768:	b29b      	uxth	r3, r3
 801476a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801476e:	b29a      	uxth	r2, r3
 8014770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014774:	801a      	strh	r2, [r3, #0]
 8014776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801477a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	691b      	ldr	r3, [r3, #16]
 8014782:	2b3e      	cmp	r3, #62	; 0x3e
 8014784:	d92b      	bls.n	80147de <USB_EPStartXfer+0x1008>
 8014786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801478a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	691b      	ldr	r3, [r3, #16]
 8014792:	095b      	lsrs	r3, r3, #5
 8014794:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801479c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	691b      	ldr	r3, [r3, #16]
 80147a4:	f003 031f 	and.w	r3, r3, #31
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d104      	bne.n	80147b6 <USB_EPStartXfer+0xfe0>
 80147ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80147b0:	3b01      	subs	r3, #1
 80147b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80147b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80147ba:	881b      	ldrh	r3, [r3, #0]
 80147bc:	b29a      	uxth	r2, r3
 80147be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	029b      	lsls	r3, r3, #10
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	4313      	orrs	r3, r2
 80147ca:	b29b      	uxth	r3, r3
 80147cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80147d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80147d4:	b29a      	uxth	r2, r3
 80147d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80147da:	801a      	strh	r2, [r3, #0]
 80147dc:	e070      	b.n	80148c0 <USB_EPStartXfer+0x10ea>
 80147de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80147e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	691b      	ldr	r3, [r3, #16]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d10c      	bne.n	8014808 <USB_EPStartXfer+0x1032>
 80147ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80147f2:	881b      	ldrh	r3, [r3, #0]
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80147fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80147fe:	b29a      	uxth	r2, r3
 8014800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014804:	801a      	strh	r2, [r3, #0]
 8014806:	e05b      	b.n	80148c0 <USB_EPStartXfer+0x10ea>
 8014808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801480c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	691b      	ldr	r3, [r3, #16]
 8014814:	085b      	lsrs	r3, r3, #1
 8014816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801481a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801481e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	691b      	ldr	r3, [r3, #16]
 8014826:	f003 0301 	and.w	r3, r3, #1
 801482a:	2b00      	cmp	r3, #0
 801482c:	d004      	beq.n	8014838 <USB_EPStartXfer+0x1062>
 801482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014832:	3301      	adds	r3, #1
 8014834:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014838:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801483c:	881b      	ldrh	r3, [r3, #0]
 801483e:	b29a      	uxth	r2, r3
 8014840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014844:	b29b      	uxth	r3, r3
 8014846:	029b      	lsls	r3, r3, #10
 8014848:	b29b      	uxth	r3, r3
 801484a:	4313      	orrs	r3, r2
 801484c:	b29a      	uxth	r2, r3
 801484e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014852:	801a      	strh	r2, [r3, #0]
 8014854:	e034      	b.n	80148c0 <USB_EPStartXfer+0x10ea>
 8014856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801485a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	785b      	ldrb	r3, [r3, #1]
 8014862:	2b01      	cmp	r3, #1
 8014864:	d12c      	bne.n	80148c0 <USB_EPStartXfer+0x10ea>
 8014866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801486a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014882:	b29b      	uxth	r3, r3
 8014884:	461a      	mov	r2, r3
 8014886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801488a:	4413      	add	r3, r2
 801488c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	00da      	lsls	r2, r3, #3
 801489e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80148a2:	4413      	add	r3, r2
 80148a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80148a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80148ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	691b      	ldr	r3, [r3, #16]
 80148b8:	b29a      	uxth	r2, r3
 80148ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80148be:	801a      	strh	r2, [r3, #0]
 80148c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80148ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	785b      	ldrb	r3, [r3, #1]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	f040 809d 	bne.w	8014a1a <USB_EPStartXfer+0x1244>
 80148e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80148ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80148fc:	b29b      	uxth	r3, r3
 80148fe:	461a      	mov	r2, r3
 8014900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014904:	4413      	add	r3, r2
 8014906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801490a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801490e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	00da      	lsls	r2, r3, #3
 8014918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801491c:	4413      	add	r3, r2
 801491e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014922:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014926:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801492a:	881b      	ldrh	r3, [r3, #0]
 801492c:	b29b      	uxth	r3, r3
 801492e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014932:	b29a      	uxth	r2, r3
 8014934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014938:	801a      	strh	r2, [r3, #0]
 801493a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801493e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	691b      	ldr	r3, [r3, #16]
 8014946:	2b3e      	cmp	r3, #62	; 0x3e
 8014948:	d92b      	bls.n	80149a2 <USB_EPStartXfer+0x11cc>
 801494a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801494e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	691b      	ldr	r3, [r3, #16]
 8014956:	095b      	lsrs	r3, r3, #5
 8014958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801495c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	691b      	ldr	r3, [r3, #16]
 8014968:	f003 031f 	and.w	r3, r3, #31
 801496c:	2b00      	cmp	r3, #0
 801496e:	d104      	bne.n	801497a <USB_EPStartXfer+0x11a4>
 8014970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014974:	3b01      	subs	r3, #1
 8014976:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801497a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801497e:	881b      	ldrh	r3, [r3, #0]
 8014980:	b29a      	uxth	r2, r3
 8014982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014986:	b29b      	uxth	r3, r3
 8014988:	029b      	lsls	r3, r3, #10
 801498a:	b29b      	uxth	r3, r3
 801498c:	4313      	orrs	r3, r2
 801498e:	b29b      	uxth	r3, r3
 8014990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014998:	b29a      	uxth	r2, r3
 801499a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801499e:	801a      	strh	r2, [r3, #0]
 80149a0:	e069      	b.n	8014a76 <USB_EPStartXfer+0x12a0>
 80149a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	691b      	ldr	r3, [r3, #16]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d10c      	bne.n	80149cc <USB_EPStartXfer+0x11f6>
 80149b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80149b6:	881b      	ldrh	r3, [r3, #0]
 80149b8:	b29b      	uxth	r3, r3
 80149ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80149be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80149c2:	b29a      	uxth	r2, r3
 80149c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80149c8:	801a      	strh	r2, [r3, #0]
 80149ca:	e054      	b.n	8014a76 <USB_EPStartXfer+0x12a0>
 80149cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	691b      	ldr	r3, [r3, #16]
 80149d8:	085b      	lsrs	r3, r3, #1
 80149da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80149de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	691b      	ldr	r3, [r3, #16]
 80149ea:	f003 0301 	and.w	r3, r3, #1
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d004      	beq.n	80149fc <USB_EPStartXfer+0x1226>
 80149f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80149f6:	3301      	adds	r3, #1
 80149f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80149fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014a00:	881b      	ldrh	r3, [r3, #0]
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	029b      	lsls	r3, r3, #10
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	4313      	orrs	r3, r2
 8014a10:	b29a      	uxth	r2, r3
 8014a12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014a16:	801a      	strh	r2, [r3, #0]
 8014a18:	e02d      	b.n	8014a76 <USB_EPStartXfer+0x12a0>
 8014a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	785b      	ldrb	r3, [r3, #1]
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d125      	bne.n	8014a76 <USB_EPStartXfer+0x12a0>
 8014a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a40:	4413      	add	r3, r2
 8014a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8014a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	00da      	lsls	r2, r3, #3
 8014a54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a58:	4413      	add	r3, r2
 8014a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	691b      	ldr	r3, [r3, #16]
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014a74:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	69db      	ldr	r3, [r3, #28]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	f000 8218 	beq.w	8014eb8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014a90:	681a      	ldr	r2, [r3, #0]
 8014a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	4413      	add	r3, r2
 8014aa2:	881b      	ldrh	r3, [r3, #0]
 8014aa4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014aa8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d005      	beq.n	8014ac0 <USB_EPStartXfer+0x12ea>
 8014ab4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d10d      	bne.n	8014adc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014ac0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f040 81f5 	bne.w	8014eb8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014ace:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8014ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	f040 81ee 	bne.w	8014eb8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8014adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014ae4:	681a      	ldr	r2, [r3, #0]
 8014ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	781b      	ldrb	r3, [r3, #0]
 8014af2:	009b      	lsls	r3, r3, #2
 8014af4:	4413      	add	r3, r2
 8014af6:	881b      	ldrh	r3, [r3, #0]
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014b02:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8014b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	009b      	lsls	r3, r3, #2
 8014b1e:	441a      	add	r2, r3
 8014b20:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8014b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	8013      	strh	r3, [r2, #0]
 8014b38:	e1be      	b.n	8014eb8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8014b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	78db      	ldrb	r3, [r3, #3]
 8014b46:	2b01      	cmp	r3, #1
 8014b48:	f040 81b4 	bne.w	8014eb4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	699a      	ldr	r2, [r3, #24]
 8014b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	691b      	ldr	r3, [r3, #16]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d917      	bls.n	8014b98 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8014b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	691b      	ldr	r3, [r3, #16]
 8014b74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8014b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	699a      	ldr	r2, [r3, #24]
 8014b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b88:	1ad2      	subs	r2, r2, r3
 8014b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	619a      	str	r2, [r3, #24]
 8014b96:	e00e      	b.n	8014bb6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8014b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	699b      	ldr	r3, [r3, #24]
 8014ba4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8014ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	785b      	ldrb	r3, [r3, #1]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	f040 8085 	bne.w	8014cd2 <USB_EPStartXfer+0x14fc>
 8014bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014be4:	b29b      	uxth	r3, r3
 8014be6:	461a      	mov	r2, r3
 8014be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014bec:	4413      	add	r3, r2
 8014bee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	00da      	lsls	r2, r3, #3
 8014c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014c04:	4413      	add	r3, r2
 8014c06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014c12:	881b      	ldrh	r3, [r3, #0]
 8014c14:	b29b      	uxth	r3, r3
 8014c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014c1a:	b29a      	uxth	r2, r3
 8014c1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014c20:	801a      	strh	r2, [r3, #0]
 8014c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c26:	2b3e      	cmp	r3, #62	; 0x3e
 8014c28:	d923      	bls.n	8014c72 <USB_EPStartXfer+0x149c>
 8014c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c2e:	095b      	lsrs	r3, r3, #5
 8014c30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c38:	f003 031f 	and.w	r3, r3, #31
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d104      	bne.n	8014c4a <USB_EPStartXfer+0x1474>
 8014c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014c44:	3b01      	subs	r3, #1
 8014c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014c4e:	881b      	ldrh	r3, [r3, #0]
 8014c50:	b29a      	uxth	r2, r3
 8014c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014c56:	b29b      	uxth	r3, r3
 8014c58:	029b      	lsls	r3, r3, #10
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	4313      	orrs	r3, r2
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014c68:	b29a      	uxth	r2, r3
 8014c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014c6e:	801a      	strh	r2, [r3, #0]
 8014c70:	e060      	b.n	8014d34 <USB_EPStartXfer+0x155e>
 8014c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d10c      	bne.n	8014c94 <USB_EPStartXfer+0x14be>
 8014c7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014c7e:	881b      	ldrh	r3, [r3, #0]
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014c90:	801a      	strh	r2, [r3, #0]
 8014c92:	e04f      	b.n	8014d34 <USB_EPStartXfer+0x155e>
 8014c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c98:	085b      	lsrs	r3, r3, #1
 8014c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ca2:	f003 0301 	and.w	r3, r3, #1
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d004      	beq.n	8014cb4 <USB_EPStartXfer+0x14de>
 8014caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014cae:	3301      	adds	r3, #1
 8014cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014cb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014cb8:	881b      	ldrh	r3, [r3, #0]
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	029b      	lsls	r3, r3, #10
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	4313      	orrs	r3, r2
 8014cc8:	b29a      	uxth	r2, r3
 8014cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014cce:	801a      	strh	r2, [r3, #0]
 8014cd0:	e030      	b.n	8014d34 <USB_EPStartXfer+0x155e>
 8014cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	785b      	ldrb	r3, [r3, #1]
 8014cde:	2b01      	cmp	r3, #1
 8014ce0:	d128      	bne.n	8014d34 <USB_EPStartXfer+0x155e>
 8014ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014cfe:	b29b      	uxth	r3, r3
 8014d00:	461a      	mov	r2, r3
 8014d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014d06:	4413      	add	r3, r2
 8014d08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	00da      	lsls	r2, r3, #3
 8014d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014d1e:	4413      	add	r3, r2
 8014d20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d2c:	b29a      	uxth	r2, r3
 8014d2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014d32:	801a      	strh	r2, [r3, #0]
 8014d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	785b      	ldrb	r3, [r3, #1]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	f040 8085 	bne.w	8014e5e <USB_EPStartXfer+0x1688>
 8014d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	461a      	mov	r2, r3
 8014d74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014d78:	4413      	add	r3, r2
 8014d7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	00da      	lsls	r2, r3, #3
 8014d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014d90:	4413      	add	r3, r2
 8014d92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d9e:	881b      	ldrh	r3, [r3, #0]
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014da6:	b29a      	uxth	r2, r3
 8014da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014dac:	801a      	strh	r2, [r3, #0]
 8014dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014db2:	2b3e      	cmp	r3, #62	; 0x3e
 8014db4:	d923      	bls.n	8014dfe <USB_EPStartXfer+0x1628>
 8014db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014dba:	095b      	lsrs	r3, r3, #5
 8014dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014dc4:	f003 031f 	and.w	r3, r3, #31
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d104      	bne.n	8014dd6 <USB_EPStartXfer+0x1600>
 8014dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014dda:	881b      	ldrh	r3, [r3, #0]
 8014ddc:	b29a      	uxth	r2, r3
 8014dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	029b      	lsls	r3, r3, #10
 8014de6:	b29b      	uxth	r3, r3
 8014de8:	4313      	orrs	r3, r2
 8014dea:	b29b      	uxth	r3, r3
 8014dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014df4:	b29a      	uxth	r2, r3
 8014df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014dfa:	801a      	strh	r2, [r3, #0]
 8014dfc:	e05c      	b.n	8014eb8 <USB_EPStartXfer+0x16e2>
 8014dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d10c      	bne.n	8014e20 <USB_EPStartXfer+0x164a>
 8014e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014e0a:	881b      	ldrh	r3, [r3, #0]
 8014e0c:	b29b      	uxth	r3, r3
 8014e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014e1c:	801a      	strh	r2, [r3, #0]
 8014e1e:	e04b      	b.n	8014eb8 <USB_EPStartXfer+0x16e2>
 8014e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e24:	085b      	lsrs	r3, r3, #1
 8014e26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e2e:	f003 0301 	and.w	r3, r3, #1
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d004      	beq.n	8014e40 <USB_EPStartXfer+0x166a>
 8014e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014e3a:	3301      	adds	r3, #1
 8014e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014e40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014e44:	881b      	ldrh	r3, [r3, #0]
 8014e46:	b29a      	uxth	r2, r3
 8014e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	029b      	lsls	r3, r3, #10
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	4313      	orrs	r3, r2
 8014e54:	b29a      	uxth	r2, r3
 8014e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014e5a:	801a      	strh	r2, [r3, #0]
 8014e5c:	e02c      	b.n	8014eb8 <USB_EPStartXfer+0x16e2>
 8014e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	785b      	ldrb	r3, [r3, #1]
 8014e6a:	2b01      	cmp	r3, #1
 8014e6c:	d124      	bne.n	8014eb8 <USB_EPStartXfer+0x16e2>
 8014e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014e7c:	b29b      	uxth	r3, r3
 8014e7e:	461a      	mov	r2, r3
 8014e80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014e84:	4413      	add	r3, r2
 8014e86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	00da      	lsls	r2, r3, #3
 8014e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014e9c:	4413      	add	r3, r2
 8014e9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014eaa:	b29a      	uxth	r2, r3
 8014eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014eb0:	801a      	strh	r2, [r3, #0]
 8014eb2:	e001      	b.n	8014eb8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8014eb4:	2301      	movs	r3, #1
 8014eb6:	e03a      	b.n	8014f2e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014ec0:	681a      	ldr	r2, [r3, #0]
 8014ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	781b      	ldrb	r3, [r3, #0]
 8014ece:	009b      	lsls	r3, r3, #2
 8014ed0:	4413      	add	r3, r2
 8014ed2:	881b      	ldrh	r3, [r3, #0]
 8014ed4:	b29b      	uxth	r3, r3
 8014ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ede:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014ee2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014ee6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014eea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014eee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014ef2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8014ef6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014efe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014f02:	681a      	ldr	r2, [r3, #0]
 8014f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	781b      	ldrb	r3, [r3, #0]
 8014f10:	009b      	lsls	r3, r3, #2
 8014f12:	441a      	add	r2, r3
 8014f14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8014f2c:	2300      	movs	r3, #0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}

08014f38 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014f38:	b480      	push	{r7}
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
 8014f40:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	785b      	ldrb	r3, [r3, #1]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d020      	beq.n	8014f8c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	009b      	lsls	r3, r3, #2
 8014f52:	4413      	add	r3, r2
 8014f54:	881b      	ldrh	r3, [r3, #0]
 8014f56:	b29b      	uxth	r3, r3
 8014f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f60:	81bb      	strh	r3, [r7, #12]
 8014f62:	89bb      	ldrh	r3, [r7, #12]
 8014f64:	f083 0310 	eor.w	r3, r3, #16
 8014f68:	81bb      	strh	r3, [r7, #12]
 8014f6a:	687a      	ldr	r2, [r7, #4]
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	009b      	lsls	r3, r3, #2
 8014f72:	441a      	add	r2, r3
 8014f74:	89bb      	ldrh	r3, [r7, #12]
 8014f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	8013      	strh	r3, [r2, #0]
 8014f8a:	e01f      	b.n	8014fcc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8014f8c:	687a      	ldr	r2, [r7, #4]
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	009b      	lsls	r3, r3, #2
 8014f94:	4413      	add	r3, r2
 8014f96:	881b      	ldrh	r3, [r3, #0]
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014fa2:	81fb      	strh	r3, [r7, #14]
 8014fa4:	89fb      	ldrh	r3, [r7, #14]
 8014fa6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014faa:	81fb      	strh	r3, [r7, #14]
 8014fac:	687a      	ldr	r2, [r7, #4]
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	781b      	ldrb	r3, [r3, #0]
 8014fb2:	009b      	lsls	r3, r3, #2
 8014fb4:	441a      	add	r2, r3
 8014fb6:	89fb      	ldrh	r3, [r7, #14]
 8014fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8014fcc:	2300      	movs	r3, #0
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3714      	adds	r7, #20
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd8:	4770      	bx	lr

08014fda <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014fda:	b480      	push	{r7}
 8014fdc:	b087      	sub	sp, #28
 8014fde:	af00      	add	r7, sp, #0
 8014fe0:	6078      	str	r0, [r7, #4]
 8014fe2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	7b1b      	ldrb	r3, [r3, #12]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f040 809d 	bne.w	8015128 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	785b      	ldrb	r3, [r3, #1]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d04c      	beq.n	8015090 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014ff6:	687a      	ldr	r2, [r7, #4]
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	009b      	lsls	r3, r3, #2
 8014ffe:	4413      	add	r3, r2
 8015000:	881b      	ldrh	r3, [r3, #0]
 8015002:	823b      	strh	r3, [r7, #16]
 8015004:	8a3b      	ldrh	r3, [r7, #16]
 8015006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801500a:	2b00      	cmp	r3, #0
 801500c:	d01b      	beq.n	8015046 <USB_EPClearStall+0x6c>
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	009b      	lsls	r3, r3, #2
 8015016:	4413      	add	r3, r2
 8015018:	881b      	ldrh	r3, [r3, #0]
 801501a:	b29b      	uxth	r3, r3
 801501c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015024:	81fb      	strh	r3, [r7, #14]
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	781b      	ldrb	r3, [r3, #0]
 801502c:	009b      	lsls	r3, r3, #2
 801502e:	441a      	add	r2, r3
 8015030:	89fb      	ldrh	r3, [r7, #14]
 8015032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801503a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801503e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8015042:	b29b      	uxth	r3, r3
 8015044:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	78db      	ldrb	r3, [r3, #3]
 801504a:	2b01      	cmp	r3, #1
 801504c:	d06c      	beq.n	8015128 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801504e:	687a      	ldr	r2, [r7, #4]
 8015050:	683b      	ldr	r3, [r7, #0]
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	009b      	lsls	r3, r3, #2
 8015056:	4413      	add	r3, r2
 8015058:	881b      	ldrh	r3, [r3, #0]
 801505a:	b29b      	uxth	r3, r3
 801505c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015064:	81bb      	strh	r3, [r7, #12]
 8015066:	89bb      	ldrh	r3, [r7, #12]
 8015068:	f083 0320 	eor.w	r3, r3, #32
 801506c:	81bb      	strh	r3, [r7, #12]
 801506e:	687a      	ldr	r2, [r7, #4]
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	781b      	ldrb	r3, [r3, #0]
 8015074:	009b      	lsls	r3, r3, #2
 8015076:	441a      	add	r2, r3
 8015078:	89bb      	ldrh	r3, [r7, #12]
 801507a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801507e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801508a:	b29b      	uxth	r3, r3
 801508c:	8013      	strh	r3, [r2, #0]
 801508e:	e04b      	b.n	8015128 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015090:	687a      	ldr	r2, [r7, #4]
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	009b      	lsls	r3, r3, #2
 8015098:	4413      	add	r3, r2
 801509a:	881b      	ldrh	r3, [r3, #0]
 801509c:	82fb      	strh	r3, [r7, #22]
 801509e:	8afb      	ldrh	r3, [r7, #22]
 80150a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d01b      	beq.n	80150e0 <USB_EPClearStall+0x106>
 80150a8:	687a      	ldr	r2, [r7, #4]
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	781b      	ldrb	r3, [r3, #0]
 80150ae:	009b      	lsls	r3, r3, #2
 80150b0:	4413      	add	r3, r2
 80150b2:	881b      	ldrh	r3, [r3, #0]
 80150b4:	b29b      	uxth	r3, r3
 80150b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80150ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80150be:	82bb      	strh	r3, [r7, #20]
 80150c0:	687a      	ldr	r2, [r7, #4]
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	781b      	ldrb	r3, [r3, #0]
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	441a      	add	r2, r3
 80150ca:	8abb      	ldrh	r3, [r7, #20]
 80150cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80150d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80150d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80150d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150dc:	b29b      	uxth	r3, r3
 80150de:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80150e0:	687a      	ldr	r2, [r7, #4]
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	009b      	lsls	r3, r3, #2
 80150e8:	4413      	add	r3, r2
 80150ea:	881b      	ldrh	r3, [r3, #0]
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80150f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80150f6:	827b      	strh	r3, [r7, #18]
 80150f8:	8a7b      	ldrh	r3, [r7, #18]
 80150fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80150fe:	827b      	strh	r3, [r7, #18]
 8015100:	8a7b      	ldrh	r3, [r7, #18]
 8015102:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8015106:	827b      	strh	r3, [r7, #18]
 8015108:	687a      	ldr	r2, [r7, #4]
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	009b      	lsls	r3, r3, #2
 8015110:	441a      	add	r2, r3
 8015112:	8a7b      	ldrh	r3, [r7, #18]
 8015114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801511c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015124:	b29b      	uxth	r3, r3
 8015126:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8015128:	2300      	movs	r3, #0
}
 801512a:	4618      	mov	r0, r3
 801512c:	371c      	adds	r7, #28
 801512e:	46bd      	mov	sp, r7
 8015130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015134:	4770      	bx	lr

08015136 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8015136:	b480      	push	{r7}
 8015138:	b083      	sub	sp, #12
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
 801513e:	460b      	mov	r3, r1
 8015140:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8015142:	78fb      	ldrb	r3, [r7, #3]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d103      	bne.n	8015150 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	2280      	movs	r2, #128	; 0x80
 801514c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8015150:	2300      	movs	r3, #0
}
 8015152:	4618      	mov	r0, r3
 8015154:	370c      	adds	r7, #12
 8015156:	46bd      	mov	sp, r7
 8015158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515c:	4770      	bx	lr

0801515e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801515e:	b480      	push	{r7}
 8015160:	b083      	sub	sp, #12
 8015162:	af00      	add	r7, sp, #0
 8015164:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801516c:	b29b      	uxth	r3, r3
 801516e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015176:	b29a      	uxth	r2, r3
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801517e:	2300      	movs	r3, #0
}
 8015180:	4618      	mov	r0, r3
 8015182:	370c      	adds	r7, #12
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr

0801518c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 801518c:	b480      	push	{r7}
 801518e:	b085      	sub	sp, #20
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801519a:	b29b      	uxth	r3, r3
 801519c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801519e:	68fb      	ldr	r3, [r7, #12]
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	3714      	adds	r7, #20
 80151a4:	46bd      	mov	sp, r7
 80151a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151aa:	4770      	bx	lr

080151ac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80151ac:	b480      	push	{r7}
 80151ae:	b08b      	sub	sp, #44	; 0x2c
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	60b9      	str	r1, [r7, #8]
 80151b6:	4611      	mov	r1, r2
 80151b8:	461a      	mov	r2, r3
 80151ba:	460b      	mov	r3, r1
 80151bc:	80fb      	strh	r3, [r7, #6]
 80151be:	4613      	mov	r3, r2
 80151c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80151c2:	88bb      	ldrh	r3, [r7, #4]
 80151c4:	3301      	adds	r3, #1
 80151c6:	085b      	lsrs	r3, r3, #1
 80151c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80151d2:	88fa      	ldrh	r2, [r7, #6]
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	4413      	add	r3, r2
 80151d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80151dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80151de:	69bb      	ldr	r3, [r7, #24]
 80151e0:	627b      	str	r3, [r7, #36]	; 0x24
 80151e2:	e01b      	b.n	801521c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80151e4:	69fb      	ldr	r3, [r7, #28]
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	3301      	adds	r3, #1
 80151ee:	781b      	ldrb	r3, [r3, #0]
 80151f0:	021b      	lsls	r3, r3, #8
 80151f2:	b21a      	sxth	r2, r3
 80151f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80151f8:	4313      	orrs	r3, r2
 80151fa:	b21b      	sxth	r3, r3
 80151fc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80151fe:	6a3b      	ldr	r3, [r7, #32]
 8015200:	8a7a      	ldrh	r2, [r7, #18]
 8015202:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8015204:	6a3b      	ldr	r3, [r7, #32]
 8015206:	3302      	adds	r3, #2
 8015208:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801520a:	69fb      	ldr	r3, [r7, #28]
 801520c:	3301      	adds	r3, #1
 801520e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8015210:	69fb      	ldr	r3, [r7, #28]
 8015212:	3301      	adds	r3, #1
 8015214:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8015216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015218:	3b01      	subs	r3, #1
 801521a:	627b      	str	r3, [r7, #36]	; 0x24
 801521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521e:	2b00      	cmp	r3, #0
 8015220:	d1e0      	bne.n	80151e4 <USB_WritePMA+0x38>
  }
}
 8015222:	bf00      	nop
 8015224:	bf00      	nop
 8015226:	372c      	adds	r7, #44	; 0x2c
 8015228:	46bd      	mov	sp, r7
 801522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522e:	4770      	bx	lr

08015230 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015230:	b480      	push	{r7}
 8015232:	b08b      	sub	sp, #44	; 0x2c
 8015234:	af00      	add	r7, sp, #0
 8015236:	60f8      	str	r0, [r7, #12]
 8015238:	60b9      	str	r1, [r7, #8]
 801523a:	4611      	mov	r1, r2
 801523c:	461a      	mov	r2, r3
 801523e:	460b      	mov	r3, r1
 8015240:	80fb      	strh	r3, [r7, #6]
 8015242:	4613      	mov	r3, r2
 8015244:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8015246:	88bb      	ldrh	r3, [r7, #4]
 8015248:	085b      	lsrs	r3, r3, #1
 801524a:	b29b      	uxth	r3, r3
 801524c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8015256:	88fa      	ldrh	r2, [r7, #6]
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	4413      	add	r3, r2
 801525c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015260:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8015262:	69bb      	ldr	r3, [r7, #24]
 8015264:	627b      	str	r3, [r7, #36]	; 0x24
 8015266:	e018      	b.n	801529a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8015268:	6a3b      	ldr	r3, [r7, #32]
 801526a:	881b      	ldrh	r3, [r3, #0]
 801526c:	b29b      	uxth	r3, r3
 801526e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8015270:	6a3b      	ldr	r3, [r7, #32]
 8015272:	3302      	adds	r3, #2
 8015274:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	b2da      	uxtb	r2, r3
 801527a:	69fb      	ldr	r3, [r7, #28]
 801527c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801527e:	69fb      	ldr	r3, [r7, #28]
 8015280:	3301      	adds	r3, #1
 8015282:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	0a1b      	lsrs	r3, r3, #8
 8015288:	b2da      	uxtb	r2, r3
 801528a:	69fb      	ldr	r3, [r7, #28]
 801528c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	3301      	adds	r3, #1
 8015292:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8015294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015296:	3b01      	subs	r3, #1
 8015298:	627b      	str	r3, [r7, #36]	; 0x24
 801529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801529c:	2b00      	cmp	r3, #0
 801529e:	d1e3      	bne.n	8015268 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80152a0:	88bb      	ldrh	r3, [r7, #4]
 80152a2:	f003 0301 	and.w	r3, r3, #1
 80152a6:	b29b      	uxth	r3, r3
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d007      	beq.n	80152bc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80152ac:	6a3b      	ldr	r3, [r7, #32]
 80152ae:	881b      	ldrh	r3, [r3, #0]
 80152b0:	b29b      	uxth	r3, r3
 80152b2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	b2da      	uxtb	r2, r3
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	701a      	strb	r2, [r3, #0]
  }
}
 80152bc:	bf00      	nop
 80152be:	372c      	adds	r7, #44	; 0x2c
 80152c0:	46bd      	mov	sp, r7
 80152c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c6:	4770      	bx	lr

080152c8 <SCPI_EXECUTE>:

#include "UniLink_SCPI.h"
#include "main.h"

void SCPI_EXECUTE(char* RXbuff, size_t RS485BUFFSIZE)
{
 80152c8:	b590      	push	{r4, r7, lr}
 80152ca:	b087      	sub	sp, #28
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	6039      	str	r1, [r7, #0]
    // Pass RXbuff and RS485BUFFSIZE as arguments
    char* formatedMessage = ReformatString(RXbuff, RS485BUFFSIZE); // tady je změna
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	4619      	mov	r1, r3
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f000 f862 	bl	80153a0 <ReformatString>
 80152dc:	6138      	str	r0, [r7, #16]

    strcpy(USBTXbuffer, "ERR:Unknown\r\n");
 80152de:	4a2e      	ldr	r2, [pc, #184]	; (8015398 <SCPI_EXECUTE+0xd0>)
 80152e0:	4b2e      	ldr	r3, [pc, #184]	; (801539c <SCPI_EXECUTE+0xd4>)
 80152e2:	4614      	mov	r4, r2
 80152e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152e6:	6020      	str	r0, [r4, #0]
 80152e8:	6061      	str	r1, [r4, #4]
 80152ea:	60a2      	str	r2, [r4, #8]
 80152ec:	881b      	ldrh	r3, [r3, #0]
 80152ee:	81a3      	strh	r3, [r4, #12]

    Word* word = generateWordDirect(formatedMessage);
 80152f0:	6938      	ldr	r0, [r7, #16]
 80152f2:	f000 f967 	bl	80155c4 <generateWordDirect>
 80152f6:	60f8      	str	r0, [r7, #12]

    free(formatedMessage);
 80152f8:	6938      	ldr	r0, [r7, #16]
 80152fa:	f00a fa01 	bl	801f700 <free>

    // if(word->address == RackID || word->address == 1)
    if (word != NULL) {
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d045      	beq.n	8015390 <SCPI_EXECUTE+0xc8>
        executeWord(word);
 8015304:	68f8      	ldr	r0, [r7, #12]
 8015306:	f000 fa3f 	bl	8015788 <executeWord>

        for (int i = word->subwordsCount - 1; i >= 0; i--)
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	68db      	ldr	r3, [r3, #12]
 801530e:	3b01      	subs	r3, #1
 8015310:	617b      	str	r3, [r7, #20]
 8015312:	e02f      	b.n	8015374 <SCPI_EXECUTE+0xac>
        {
            if (word->subwords[i]->paramType == OTHER_P && word->subwords[i]->otherParam != NULL)
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	689a      	ldr	r2, [r3, #8]
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	4413      	add	r3, r2
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	7a1b      	ldrb	r3, [r3, #8]
 8015322:	2b05      	cmp	r3, #5
 8015324:	d11a      	bne.n	801535c <SCPI_EXECUTE+0x94>
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	689a      	ldr	r2, [r3, #8]
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	009b      	lsls	r3, r3, #2
 801532e:	4413      	add	r3, r2
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	695b      	ldr	r3, [r3, #20]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d011      	beq.n	801535c <SCPI_EXECUTE+0x94>
            {
                free(word->subwords[i]->otherParam);
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	689a      	ldr	r2, [r3, #8]
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	009b      	lsls	r3, r3, #2
 8015340:	4413      	add	r3, r2
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	695b      	ldr	r3, [r3, #20]
 8015346:	4618      	mov	r0, r3
 8015348:	f00a f9da 	bl	801f700 <free>
                word->subwords[i]->otherParam = NULL;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	689a      	ldr	r2, [r3, #8]
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	009b      	lsls	r3, r3, #2
 8015354:	4413      	add	r3, r2
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	2200      	movs	r2, #0
 801535a:	615a      	str	r2, [r3, #20]
            }
            free(word->subwords[i]);
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	689a      	ldr	r2, [r3, #8]
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	009b      	lsls	r3, r3, #2
 8015364:	4413      	add	r3, r2
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	4618      	mov	r0, r3
 801536a:	f00a f9c9 	bl	801f700 <free>
        for (int i = word->subwordsCount - 1; i >= 0; i--)
 801536e:	697b      	ldr	r3, [r7, #20]
 8015370:	3b01      	subs	r3, #1
 8015372:	617b      	str	r3, [r7, #20]
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	2b00      	cmp	r3, #0
 8015378:	dacc      	bge.n	8015314 <SCPI_EXECUTE+0x4c>
        }
        free(word->subwords);
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	689b      	ldr	r3, [r3, #8]
 801537e:	4618      	mov	r0, r3
 8015380:	f00a f9be 	bl	801f700 <free>
        word->subwords = NULL;
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2200      	movs	r2, #0
 8015388:	609a      	str	r2, [r3, #8]
        free(word);
 801538a:	68f8      	ldr	r0, [r7, #12]
 801538c:	f00a f9b8 	bl	801f700 <free>
    }
}
 8015390:	bf00      	nop
 8015392:	371c      	adds	r7, #28
 8015394:	46bd      	mov	sp, r7
 8015396:	bd90      	pop	{r4, r7, pc}
 8015398:	20001760 	.word	0x20001760
 801539c:	0802341c 	.word	0x0802341c

080153a0 <ReformatString>:
//int defaultClassIndex;
int classLength = 0;
int defaultClassIndex = -1;

char* ReformatString(char* chararr, int arrMaxSize)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
	char* temp = (char*)calloc(strlen(chararr) + 1, sizeof(char));
 80153aa:	6878      	ldr	r0, [r7, #4]
 80153ac:	f7f0 fb98 	bl	8005ae0 <strlen>
 80153b0:	4603      	mov	r3, r0
 80153b2:	3301      	adds	r3, #1
 80153b4:	2101      	movs	r1, #1
 80153b6:	4618      	mov	r0, r3
 80153b8:	f00a f97c 	bl	801f6b4 <calloc>
 80153bc:	4603      	mov	r3, r0
 80153be:	60bb      	str	r3, [r7, #8]
	strcpy(temp, chararr);
 80153c0:	6879      	ldr	r1, [r7, #4]
 80153c2:	68b8      	ldr	r0, [r7, #8]
 80153c4:	f00b fb65 	bl	8020a92 <strcpy>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 80153c8:	2300      	movs	r3, #0
 80153ca:	60fb      	str	r3, [r7, #12]
 80153cc:	e015      	b.n	80153fa <ReformatString+0x5a>
	{
		if (chararr[i] == '\r' || chararr[i] == '\n')
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	687a      	ldr	r2, [r7, #4]
 80153d2:	4413      	add	r3, r2
 80153d4:	781b      	ldrb	r3, [r3, #0]
 80153d6:	2b0d      	cmp	r3, #13
 80153d8:	d005      	beq.n	80153e6 <ReformatString+0x46>
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	687a      	ldr	r2, [r7, #4]
 80153de:	4413      	add	r3, r2
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	2b0a      	cmp	r3, #10
 80153e4:	d106      	bne.n	80153f4 <ReformatString+0x54>
		{
			temp[i] = '\0';
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	68ba      	ldr	r2, [r7, #8]
 80153ea:	4413      	add	r3, r2
 80153ec:	2200      	movs	r2, #0
 80153ee:	701a      	strb	r2, [r3, #0]
			return temp;
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	e00d      	b.n	8015410 <ReformatString+0x70>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	3301      	adds	r3, #1
 80153f8:	60fb      	str	r3, [r7, #12]
 80153fa:	68fa      	ldr	r2, [r7, #12]
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	429a      	cmp	r2, r3
 8015400:	da05      	bge.n	801540e <ReformatString+0x6e>
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	4413      	add	r3, r2
 8015408:	781b      	ldrb	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d1df      	bne.n	80153ce <ReformatString+0x2e>
		}
	}
	return temp;
 801540e:	68bb      	ldr	r3, [r7, #8]
}
 8015410:	4618      	mov	r0, r3
 8015412:	3710      	adds	r7, #16
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <generateSubwordn>:

Subword* generateSubwordn(char* subcommand, int length, Class* class)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b08a      	sub	sp, #40	; 0x28
 801541c:	af00      	add	r7, sp, #0
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	607a      	str	r2, [r7, #4]
	Subword* final = (Subword*)malloc(sizeof(Subword));
 8015424:	2018      	movs	r0, #24
 8015426:	f00a f963 	bl	801f6f0 <malloc>
 801542a:	4603      	mov	r3, r0
 801542c:	61fb      	str	r3, [r7, #28]
	final->type = params;
 801542e:	69fb      	ldr	r3, [r7, #28]
 8015430:	2201      	movs	r2, #1
 8015432:	701a      	strb	r2, [r3, #0]
	final->integerParam = 0;
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	2200      	movs	r2, #0
 8015438:	611a      	str	r2, [r3, #16]
	final->otherParam = NULL;
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	2200      	movs	r2, #0
 801543e:	615a      	str	r2, [r3, #20]
	final->paramType = 0;
 8015440:	69fb      	ldr	r3, [r7, #28]
 8015442:	2200      	movs	r2, #0
 8015444:	721a      	strb	r2, [r3, #8]

	for (int i = 0; i < class->functionsLength; i++)
 8015446:	2300      	movs	r3, #0
 8015448:	627b      	str	r3, [r7, #36]	; 0x24
 801544a:	e018      	b.n	801547e <generateSubwordn+0x66>
	{
		if (!strncmp(subcommand, class->functions[i].name, length))
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	685a      	ldr	r2, [r3, #4]
 8015450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015452:	00db      	lsls	r3, r3, #3
 8015454:	4413      	add	r3, r2
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	68ba      	ldr	r2, [r7, #8]
 801545a:	4619      	mov	r1, r3
 801545c:	68f8      	ldr	r0, [r7, #12]
 801545e:	f00b fa19 	bl	8020894 <strncmp>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d107      	bne.n	8015478 <generateSubwordn+0x60>
		{
			final->type = function;
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	2200      	movs	r2, #0
 801546c:	701a      	strb	r2, [r3, #0]
			final->functionIndex = i;
 801546e:	69fb      	ldr	r3, [r7, #28]
 8015470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015472:	605a      	str	r2, [r3, #4]
			return final;
 8015474:	69fb      	ldr	r3, [r7, #28]
 8015476:	e06d      	b.n	8015554 <generateSubwordn+0x13c>
	for (int i = 0; i < class->functionsLength; i++)
 8015478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801547a:	3301      	adds	r3, #1
 801547c:	627b      	str	r3, [r7, #36]	; 0x24
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	689b      	ldr	r3, [r3, #8]
 8015482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015484:	429a      	cmp	r2, r3
 8015486:	dbe1      	blt.n	801544c <generateSubwordn+0x34>
		}
	}

	for (int i = 0; i < paramsLength; i++)
 8015488:	2300      	movs	r3, #0
 801548a:	623b      	str	r3, [r7, #32]
 801548c:	e014      	b.n	80154b8 <generateSubwordn+0xa0>
	{
		if (!strncmp(subcommand, paramsList[i], length))
 801548e:	4a33      	ldr	r2, [pc, #204]	; (801555c <generateSubwordn+0x144>)
 8015490:	6a3b      	ldr	r3, [r7, #32]
 8015492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015496:	68ba      	ldr	r2, [r7, #8]
 8015498:	4619      	mov	r1, r3
 801549a:	68f8      	ldr	r0, [r7, #12]
 801549c:	f00b f9fa 	bl	8020894 <strncmp>
 80154a0:	4603      	mov	r3, r0
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d105      	bne.n	80154b2 <generateSubwordn+0x9a>
		{
			final->paramType = (ParamTypes)i;
 80154a6:	6a3b      	ldr	r3, [r7, #32]
 80154a8:	b2da      	uxtb	r2, r3
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	721a      	strb	r2, [r3, #8]
			return final;
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	e050      	b.n	8015554 <generateSubwordn+0x13c>
	for (int i = 0; i < paramsLength; i++)
 80154b2:	6a3b      	ldr	r3, [r7, #32]
 80154b4:	3301      	adds	r3, #1
 80154b6:	623b      	str	r3, [r7, #32]
 80154b8:	4b29      	ldr	r3, [pc, #164]	; (8015560 <generateSubwordn+0x148>)
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	6a3a      	ldr	r2, [r7, #32]
 80154be:	429a      	cmp	r2, r3
 80154c0:	dbe5      	blt.n	801548e <generateSubwordn+0x76>
		}
	}

	float f;
	if (strchr(subcommand, '.'))
 80154c2:	212e      	movs	r1, #46	; 0x2e
 80154c4:	68f8      	ldr	r0, [r7, #12]
 80154c6:	f00b f9d8 	bl	802087a <strchr>
 80154ca:	4603      	mov	r3, r0
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d019      	beq.n	8015504 <generateSubwordn+0xec>
	{
		if ((f = atof(subcommand)) != 0)
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	f00a f8e7 	bl	801f6a4 <atof>
 80154d6:	ec53 2b10 	vmov	r2, r3, d0
 80154da:	4610      	mov	r0, r2
 80154dc:	4619      	mov	r1, r3
 80154de:	f7f0 ffcd 	bl	800647c <__aeabi_d2f>
 80154e2:	4603      	mov	r3, r0
 80154e4:	61bb      	str	r3, [r7, #24]
 80154e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80154ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80154ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154f2:	d007      	beq.n	8015504 <generateSubwordn+0xec>
		{
			final->paramType = FLOAT_P;
 80154f4:	69fb      	ldr	r3, [r7, #28]
 80154f6:	2204      	movs	r2, #4
 80154f8:	721a      	strb	r2, [r3, #8]
			final->floatParam = f;
 80154fa:	69fb      	ldr	r3, [r7, #28]
 80154fc:	69ba      	ldr	r2, [r7, #24]
 80154fe:	60da      	str	r2, [r3, #12]
			return final;
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	e027      	b.n	8015554 <generateSubwordn+0x13c>
		}
	}

	int n;
	if ((n = atoi(subcommand)))
 8015504:	68f8      	ldr	r0, [r7, #12]
 8015506:	f00a f8d0 	bl	801f6aa <atoi>
 801550a:	6178      	str	r0, [r7, #20]
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d007      	beq.n	8015522 <generateSubwordn+0x10a>
	{
		final->paramType = INT_P;
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	2203      	movs	r2, #3
 8015516:	721a      	strb	r2, [r3, #8]
		final->integerParam = n;
 8015518:	69fb      	ldr	r3, [r7, #28]
 801551a:	697a      	ldr	r2, [r7, #20]
 801551c:	611a      	str	r2, [r3, #16]
		return final;
 801551e:	69fb      	ldr	r3, [r7, #28]
 8015520:	e018      	b.n	8015554 <generateSubwordn+0x13c>
	}

	final->paramType = OTHER_P;
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	2205      	movs	r2, #5
 8015526:	721a      	strb	r2, [r3, #8]
	final->otherParam = (char*)calloc(length + 1, sizeof(char));
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	3301      	adds	r3, #1
 801552c:	2101      	movs	r1, #1
 801552e:	4618      	mov	r0, r3
 8015530:	f00a f8c0 	bl	801f6b4 <calloc>
 8015534:	4603      	mov	r3, r0
 8015536:	461a      	mov	r2, r3
 8015538:	69fb      	ldr	r3, [r7, #28]
 801553a:	615a      	str	r2, [r3, #20]
	if (final->otherParam != NULL) strncpy(final->otherParam, subcommand, length);
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	695b      	ldr	r3, [r3, #20]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d006      	beq.n	8015552 <generateSubwordn+0x13a>
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	695b      	ldr	r3, [r3, #20]
 8015548:	68ba      	ldr	r2, [r7, #8]
 801554a:	68f9      	ldr	r1, [r7, #12]
 801554c:	4618      	mov	r0, r3
 801554e:	f00b f9b3 	bl	80208b8 <strncpy>
	return final;
 8015552:	69fb      	ldr	r3, [r7, #28]
}
 8015554:	4618      	mov	r0, r3
 8015556:	3728      	adds	r7, #40	; 0x28
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	20000014 	.word	0x20000014
 8015560:	20000020 	.word	0x20000020

08015564 <findClassIndex>:

int findClassIndex(char* subcommand, int length)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b084      	sub	sp, #16
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
 801556c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < classLength; i++)
 801556e:	2300      	movs	r3, #0
 8015570:	60fb      	str	r3, [r7, #12]
 8015572:	e015      	b.n	80155a0 <findClassIndex+0x3c>
	{
		if (!strncmp(subcommand, classList[i].name, length))
 8015574:	4b10      	ldr	r3, [pc, #64]	; (80155b8 <findClassIndex+0x54>)
 8015576:	6819      	ldr	r1, [r3, #0]
 8015578:	68fa      	ldr	r2, [r7, #12]
 801557a:	4613      	mov	r3, r2
 801557c:	005b      	lsls	r3, r3, #1
 801557e:	4413      	add	r3, r2
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	440b      	add	r3, r1
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	683a      	ldr	r2, [r7, #0]
 8015588:	4619      	mov	r1, r3
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f00b f982 	bl	8020894 <strncmp>
 8015590:	4603      	mov	r3, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	d101      	bne.n	801559a <findClassIndex+0x36>
		{
			return i;
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	e009      	b.n	80155ae <findClassIndex+0x4a>
	for (int i = 0; i < classLength; i++)
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	3301      	adds	r3, #1
 801559e:	60fb      	str	r3, [r7, #12]
 80155a0:	4b06      	ldr	r3, [pc, #24]	; (80155bc <findClassIndex+0x58>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	68fa      	ldr	r2, [r7, #12]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	dbe4      	blt.n	8015574 <findClassIndex+0x10>
		}
	}

	return defaultClassIndex;
 80155aa:	4b05      	ldr	r3, [pc, #20]	; (80155c0 <findClassIndex+0x5c>)
 80155ac:	681b      	ldr	r3, [r3, #0]
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3710      	adds	r7, #16
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}
 80155b6:	bf00      	nop
 80155b8:	20001da0 	.word	0x20001da0
 80155bc:	20001da4 	.word	0x20001da4
 80155c0:	20000024 	.word	0x20000024

080155c4 <generateWordDirect>:

Word* generateWordDirect(char* command)
{
 80155c4:	b590      	push	{r4, r7, lr}
 80155c6:	b08d      	sub	sp, #52	; 0x34
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
	Word* final = (Word*)malloc(sizeof(Word));
 80155cc:	2010      	movs	r0, #16
 80155ce:	f00a f88f 	bl	801f6f0 <malloc>
 80155d2:	4603      	mov	r3, r0
 80155d4:	61bb      	str	r3, [r7, #24]
	final->address = -1;
 80155d6:	69bb      	ldr	r3, [r7, #24]
 80155d8:	f04f 32ff 	mov.w	r2, #4294967295
 80155dc:	601a      	str	r2, [r3, #0]
	final->subwords = NULL;
 80155de:	69bb      	ldr	r3, [r7, #24]
 80155e0:	2200      	movs	r2, #0
 80155e2:	609a      	str	r2, [r3, #8]
	final->subwordsCount = 0;
 80155e4:	69bb      	ldr	r3, [r7, #24]
 80155e6:	2200      	movs	r2, #0
 80155e8:	60da      	str	r2, [r3, #12]

	char* currSymbol = command;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	int intermediateLength = 0;
 80155ee:	2300      	movs	r3, #0
 80155f0:	62bb      	str	r3, [r7, #40]	; 0x28
	Class* currentClass = classList;
 80155f2:	4b62      	ldr	r3, [pc, #392]	; (801577c <generateWordDirect+0x1b8>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	627b      	str	r3, [r7, #36]	; 0x24
	int currentClassIndex = defaultClassIndex;
 80155f8:	4b61      	ldr	r3, [pc, #388]	; (8015780 <generateWordDirect+0x1bc>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	617b      	str	r3, [r7, #20]

	int isLast = 0;
 80155fe:	2300      	movs	r3, #0
 8015600:	623b      	str	r3, [r7, #32]
	int firstSubWord = 1;
 8015602:	2301      	movs	r3, #1
 8015604:	61fb      	str	r3, [r7, #28]

	while (!isLast)
 8015606:	e0af      	b.n	8015768 <generateWordDirect+0x1a4>
	{
		isLast = *currSymbol == '\0';
 8015608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	2b00      	cmp	r3, #0
 801560e:	bf0c      	ite	eq
 8015610:	2301      	moveq	r3, #1
 8015612:	2300      	movne	r3, #0
 8015614:	b2db      	uxtb	r3, r3
 8015616:	623b      	str	r3, [r7, #32]
		switch (*currSymbol)
 8015618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	2b3f      	cmp	r3, #63	; 0x3f
 801561e:	d005      	beq.n	801562c <generateWordDirect+0x68>
 8015620:	2b3f      	cmp	r3, #63	; 0x3f
 8015622:	dc65      	bgt.n	80156f0 <generateWordDirect+0x12c>
 8015624:	2b00      	cmp	r3, #0
 8015626:	d001      	beq.n	801562c <generateWordDirect+0x68>
 8015628:	2b3a      	cmp	r3, #58	; 0x3a
 801562a:	d161      	bne.n	80156f0 <generateWordDirect+0x12c>
		{
		case ':':
		case '\0':
		case '?':

			if (intermediateLength == 0) break;
 801562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801562e:	2b00      	cmp	r3, #0
 8015630:	d062      	beq.n	80156f8 <generateWordDirect+0x134>
			if (final->address == -1)
 8015632:	69bb      	ldr	r3, [r7, #24]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801563a:	d10a      	bne.n	8015652 <generateWordDirect+0x8e>
			{
				final->address = atoi(currSymbol - intermediateLength);
 801563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801563e:	425b      	negs	r3, r3
 8015640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015642:	4413      	add	r3, r2
 8015644:	4618      	mov	r0, r3
 8015646:	f00a f830 	bl	801f6aa <atoi>
 801564a:	4602      	mov	r2, r0
 801564c:	69bb      	ldr	r3, [r7, #24]
 801564e:	601a      	str	r2, [r3, #0]
 8015650:	e04b      	b.n	80156ea <generateWordDirect+0x126>
			}

			else
			{
				if (firstSubWord)
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d020      	beq.n	801569a <generateWordDirect+0xd6>
				{
					int index = findClassIndex(currSymbol - intermediateLength, intermediateLength);
 8015658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801565a:	425b      	negs	r3, r3
 801565c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801565e:	4413      	add	r3, r2
 8015660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015662:	4618      	mov	r0, r3
 8015664:	f7ff ff7e 	bl	8015564 <findClassIndex>
 8015668:	6138      	str	r0, [r7, #16]
					currentClass = &classList[index];
 801566a:	4b44      	ldr	r3, [pc, #272]	; (801577c <generateWordDirect+0x1b8>)
 801566c:	6819      	ldr	r1, [r3, #0]
 801566e:	693a      	ldr	r2, [r7, #16]
 8015670:	4613      	mov	r3, r2
 8015672:	005b      	lsls	r3, r3, #1
 8015674:	4413      	add	r3, r2
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	440b      	add	r3, r1
 801567a:	627b      	str	r3, [r7, #36]	; 0x24
					final->classIndex = index;
 801567c:	69bb      	ldr	r3, [r7, #24]
 801567e:	693a      	ldr	r2, [r7, #16]
 8015680:	605a      	str	r2, [r3, #4]
					currentClassIndex = index;
 8015682:	693b      	ldr	r3, [r7, #16]
 8015684:	617b      	str	r3, [r7, #20]
					firstSubWord = 0;
 8015686:	2300      	movs	r3, #0
 8015688:	61fb      	str	r3, [r7, #28]
					if (currentClassIndex != defaultClassIndex)
 801568a:	4b3d      	ldr	r3, [pc, #244]	; (8015780 <generateWordDirect+0x1bc>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	697a      	ldr	r2, [r7, #20]
 8015690:	429a      	cmp	r2, r3
 8015692:	d002      	beq.n	801569a <generateWordDirect+0xd6>
					{
						intermediateLength = 0;
 8015694:	2300      	movs	r3, #0
 8015696:	62bb      	str	r3, [r7, #40]	; 0x28
						break;
 8015698:	e02f      	b.n	80156fa <generateWordDirect+0x136>
					}
				}

				final->subwordsCount++;
 801569a:	69bb      	ldr	r3, [r7, #24]
 801569c:	68db      	ldr	r3, [r3, #12]
 801569e:	1c5a      	adds	r2, r3, #1
 80156a0:	69bb      	ldr	r3, [r7, #24]
 80156a2:	60da      	str	r2, [r3, #12]
				Subword** intermediate = (Subword*)realloc(final->subwords, final->subwordsCount * sizeof(Subword*));
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	689a      	ldr	r2, [r3, #8]
 80156a8:	69bb      	ldr	r3, [r7, #24]
 80156aa:	68db      	ldr	r3, [r3, #12]
 80156ac:	009b      	lsls	r3, r3, #2
 80156ae:	4619      	mov	r1, r3
 80156b0:	4610      	mov	r0, r2
 80156b2:	f00a f8d9 	bl	801f868 <realloc>
 80156b6:	60f8      	str	r0, [r7, #12]
				if (intermediate != NULL)
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d015      	beq.n	80156ea <generateWordDirect+0x126>
				{
					final->subwords = intermediate;																				///??????
 80156be:	69bb      	ldr	r3, [r7, #24]
 80156c0:	68fa      	ldr	r2, [r7, #12]
 80156c2:	609a      	str	r2, [r3, #8]
					final->subwords[final->subwordsCount - 1] = generateSubwordn(currSymbol - intermediateLength, intermediateLength, currentClass);
 80156c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c6:	425b      	negs	r3, r3
 80156c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156ca:	18d0      	adds	r0, r2, r3
 80156cc:	69bb      	ldr	r3, [r7, #24]
 80156ce:	689a      	ldr	r2, [r3, #8]
 80156d0:	69bb      	ldr	r3, [r7, #24]
 80156d2:	68db      	ldr	r3, [r3, #12]
 80156d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80156d8:	3b01      	subs	r3, #1
 80156da:	009b      	lsls	r3, r3, #2
 80156dc:	18d4      	adds	r4, r2, r3
 80156de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80156e2:	f7ff fe99 	bl	8015418 <generateSubwordn>
 80156e6:	4603      	mov	r3, r0
 80156e8:	6023      	str	r3, [r4, #0]
				}
			}

			intermediateLength = 0;
 80156ea:	2300      	movs	r3, #0
 80156ec:	62bb      	str	r3, [r7, #40]	; 0x28

			break;
 80156ee:	e004      	b.n	80156fa <generateWordDirect+0x136>

		default:
			intermediateLength++;
 80156f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f2:	3301      	adds	r3, #1
 80156f4:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80156f6:	e000      	b.n	80156fa <generateWordDirect+0x136>
			if (intermediateLength == 0) break;
 80156f8:	bf00      	nop

		}

		if (*currSymbol == '?')
 80156fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	2b3f      	cmp	r3, #63	; 0x3f
 8015700:	d128      	bne.n	8015754 <generateWordDirect+0x190>
		{
			final->subwordsCount++;
 8015702:	69bb      	ldr	r3, [r7, #24]
 8015704:	68db      	ldr	r3, [r3, #12]
 8015706:	1c5a      	adds	r2, r3, #1
 8015708:	69bb      	ldr	r3, [r7, #24]
 801570a:	60da      	str	r2, [r3, #12]
			Subword** intermediate = (Subword*)realloc(final->subwords, final->subwordsCount * sizeof(Subword));
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	689a      	ldr	r2, [r3, #8]
 8015710:	69bb      	ldr	r3, [r7, #24]
 8015712:	68db      	ldr	r3, [r3, #12]
 8015714:	4619      	mov	r1, r3
 8015716:	460b      	mov	r3, r1
 8015718:	005b      	lsls	r3, r3, #1
 801571a:	440b      	add	r3, r1
 801571c:	00db      	lsls	r3, r3, #3
 801571e:	4619      	mov	r1, r3
 8015720:	4610      	mov	r0, r2
 8015722:	f00a f8a1 	bl	801f868 <realloc>
 8015726:	60b8      	str	r0, [r7, #8]
			if (intermediate != NULL)
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d012      	beq.n	8015754 <generateWordDirect+0x190>
			{
				final->subwords = intermediate;																						///??????
 801572e:	69bb      	ldr	r3, [r7, #24]
 8015730:	68ba      	ldr	r2, [r7, #8]
 8015732:	609a      	str	r2, [r3, #8]
				final->subwords[final->subwordsCount - 1] = generateSubwordn("?", 1, currentClass);
 8015734:	69bb      	ldr	r3, [r7, #24]
 8015736:	689a      	ldr	r2, [r3, #8]
 8015738:	69bb      	ldr	r3, [r7, #24]
 801573a:	68db      	ldr	r3, [r3, #12]
 801573c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015740:	3b01      	subs	r3, #1
 8015742:	009b      	lsls	r3, r3, #2
 8015744:	18d4      	adds	r4, r2, r3
 8015746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015748:	2101      	movs	r1, #1
 801574a:	480e      	ldr	r0, [pc, #56]	; (8015784 <generateWordDirect+0x1c0>)
 801574c:	f7ff fe64 	bl	8015418 <generateSubwordn>
 8015750:	4603      	mov	r3, r0
 8015752:	6023      	str	r3, [r4, #0]
			}
		}

		currSymbol += !isLast;
 8015754:	6a3b      	ldr	r3, [r7, #32]
 8015756:	2b00      	cmp	r3, #0
 8015758:	bf0c      	ite	eq
 801575a:	2301      	moveq	r3, #1
 801575c:	2300      	movne	r3, #0
 801575e:	b2db      	uxtb	r3, r3
 8015760:	461a      	mov	r2, r3
 8015762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015764:	4413      	add	r3, r2
 8015766:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (!isLast)
 8015768:	6a3b      	ldr	r3, [r7, #32]
 801576a:	2b00      	cmp	r3, #0
 801576c:	f43f af4c 	beq.w	8015608 <generateWordDirect+0x44>
	}

	return final;
 8015770:	69bb      	ldr	r3, [r7, #24]
}
 8015772:	4618      	mov	r0, r3
 8015774:	3734      	adds	r7, #52	; 0x34
 8015776:	46bd      	mov	sp, r7
 8015778:	bd90      	pop	{r4, r7, pc}
 801577a:	bf00      	nop
 801577c:	20001da0 	.word	0x20001da0
 8015780:	20000024 	.word	0x20000024
 8015784:	08023438 	.word	0x08023438

08015788 <executeWord>:

void executeWord(Word* word)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
	if (word->subwordsCount < 1) return;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	68db      	ldr	r3, [r3, #12]
 8015794:	2b00      	cmp	r3, #0
 8015796:	dd27      	ble.n	80157e8 <executeWord+0x60>
	if (word->subwords == NULL) return;
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	689b      	ldr	r3, [r3, #8]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d025      	beq.n	80157ec <executeWord+0x64>
	if (word->subwords[0]->type != function) return;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	689b      	ldr	r3, [r3, #8]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	781b      	ldrb	r3, [r3, #0]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d121      	bne.n	80157f0 <executeWord+0x68>
	int classIndex = word->classIndex;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	60fb      	str	r3, [r7, #12]
	int functionIndex = word->subwords[0]->functionIndex;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	689b      	ldr	r3, [r3, #8]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	60bb      	str	r3, [r7, #8]
	classList[classIndex].functions[functionIndex].run(word->subwords + 1, word->subwordsCount - 1);
 80157bc:	4b0e      	ldr	r3, [pc, #56]	; (80157f8 <executeWord+0x70>)
 80157be:	6819      	ldr	r1, [r3, #0]
 80157c0:	68fa      	ldr	r2, [r7, #12]
 80157c2:	4613      	mov	r3, r2
 80157c4:	005b      	lsls	r3, r3, #1
 80157c6:	4413      	add	r3, r2
 80157c8:	009b      	lsls	r3, r3, #2
 80157ca:	440b      	add	r3, r1
 80157cc:	685a      	ldr	r2, [r3, #4]
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	00db      	lsls	r3, r3, #3
 80157d2:	4413      	add	r3, r2
 80157d4:	685b      	ldr	r3, [r3, #4]
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	6892      	ldr	r2, [r2, #8]
 80157da:	1d10      	adds	r0, r2, #4
 80157dc:	687a      	ldr	r2, [r7, #4]
 80157de:	68d2      	ldr	r2, [r2, #12]
 80157e0:	3a01      	subs	r2, #1
 80157e2:	4611      	mov	r1, r2
 80157e4:	4798      	blx	r3
 80157e6:	e004      	b.n	80157f2 <executeWord+0x6a>
	if (word->subwordsCount < 1) return;
 80157e8:	bf00      	nop
 80157ea:	e002      	b.n	80157f2 <executeWord+0x6a>
	if (word->subwords == NULL) return;
 80157ec:	bf00      	nop
 80157ee:	e000      	b.n	80157f2 <executeWord+0x6a>
	if (word->subwords[0]->type != function) return;
 80157f0:	bf00      	nop
}
 80157f2:	3710      	adds	r7, #16
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}
 80157f8:	20001da0 	.word	0x20001da0

080157fc <addClass>:
	if (isDefault) defaultClassIndex = classLength;
	classLength++;
}

void addClass(Class* class, int isDefault)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b082      	sub	sp, #8
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	6039      	str	r1, [r7, #0]
	classList = (Class*)realloc(classList, (classLength + 1) * sizeof(Class));
 8015806:	4b17      	ldr	r3, [pc, #92]	; (8015864 <addClass+0x68>)
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	4b17      	ldr	r3, [pc, #92]	; (8015868 <addClass+0x6c>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	3301      	adds	r3, #1
 8015810:	4619      	mov	r1, r3
 8015812:	460b      	mov	r3, r1
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	440b      	add	r3, r1
 8015818:	009b      	lsls	r3, r3, #2
 801581a:	4619      	mov	r1, r3
 801581c:	4610      	mov	r0, r2
 801581e:	f00a f823 	bl	801f868 <realloc>
 8015822:	4603      	mov	r3, r0
 8015824:	4a0f      	ldr	r2, [pc, #60]	; (8015864 <addClass+0x68>)
 8015826:	6013      	str	r3, [r2, #0]
	classList[classLength] = *class;
 8015828:	4b0e      	ldr	r3, [pc, #56]	; (8015864 <addClass+0x68>)
 801582a:	681a      	ldr	r2, [r3, #0]
 801582c:	4b0e      	ldr	r3, [pc, #56]	; (8015868 <addClass+0x6c>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	4619      	mov	r1, r3
 8015832:	460b      	mov	r3, r1
 8015834:	005b      	lsls	r3, r3, #1
 8015836:	440b      	add	r3, r1
 8015838:	009b      	lsls	r3, r3, #2
 801583a:	4413      	add	r3, r2
 801583c:	687a      	ldr	r2, [r7, #4]
 801583e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015840:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (isDefault) defaultClassIndex = classLength;
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d003      	beq.n	8015852 <addClass+0x56>
 801584a:	4b07      	ldr	r3, [pc, #28]	; (8015868 <addClass+0x6c>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	4a07      	ldr	r2, [pc, #28]	; (801586c <addClass+0x70>)
 8015850:	6013      	str	r3, [r2, #0]
	classLength++;
 8015852:	4b05      	ldr	r3, [pc, #20]	; (8015868 <addClass+0x6c>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	3301      	adds	r3, #1
 8015858:	4a03      	ldr	r2, [pc, #12]	; (8015868 <addClass+0x6c>)
 801585a:	6013      	str	r3, [r2, #0]
}
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	20001da0 	.word	0x20001da0
 8015868:	20001da4 	.word	0x20001da4
 801586c:	20000024 	.word	0x20000024

08015870 <__NVIC_EnableIRQ>:
{
 8015870:	b480      	push	{r7}
 8015872:	b083      	sub	sp, #12
 8015874:	af00      	add	r7, sp, #0
 8015876:	4603      	mov	r3, r0
 8015878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801587a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801587e:	2b00      	cmp	r3, #0
 8015880:	db0b      	blt.n	801589a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015882:	79fb      	ldrb	r3, [r7, #7]
 8015884:	f003 021f 	and.w	r2, r3, #31
 8015888:	4907      	ldr	r1, [pc, #28]	; (80158a8 <__NVIC_EnableIRQ+0x38>)
 801588a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801588e:	095b      	lsrs	r3, r3, #5
 8015890:	2001      	movs	r0, #1
 8015892:	fa00 f202 	lsl.w	r2, r0, r2
 8015896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801589a:	bf00      	nop
 801589c:	370c      	adds	r7, #12
 801589e:	46bd      	mov	sp, r7
 80158a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a4:	4770      	bx	lr
 80158a6:	bf00      	nop
 80158a8:	e000e100 	.word	0xe000e100

080158ac <__NVIC_SetPriority>:
{
 80158ac:	b480      	push	{r7}
 80158ae:	b083      	sub	sp, #12
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	4603      	mov	r3, r0
 80158b4:	6039      	str	r1, [r7, #0]
 80158b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80158b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	db0a      	blt.n	80158d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	b2da      	uxtb	r2, r3
 80158c4:	490c      	ldr	r1, [pc, #48]	; (80158f8 <__NVIC_SetPriority+0x4c>)
 80158c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158ca:	0112      	lsls	r2, r2, #4
 80158cc:	b2d2      	uxtb	r2, r2
 80158ce:	440b      	add	r3, r1
 80158d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80158d4:	e00a      	b.n	80158ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	b2da      	uxtb	r2, r3
 80158da:	4908      	ldr	r1, [pc, #32]	; (80158fc <__NVIC_SetPriority+0x50>)
 80158dc:	79fb      	ldrb	r3, [r7, #7]
 80158de:	f003 030f 	and.w	r3, r3, #15
 80158e2:	3b04      	subs	r3, #4
 80158e4:	0112      	lsls	r2, r2, #4
 80158e6:	b2d2      	uxtb	r2, r2
 80158e8:	440b      	add	r3, r1
 80158ea:	761a      	strb	r2, [r3, #24]
}
 80158ec:	bf00      	nop
 80158ee:	370c      	adds	r7, #12
 80158f0:	46bd      	mov	sp, r7
 80158f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f6:	4770      	bx	lr
 80158f8:	e000e100 	.word	0xe000e100
 80158fc:	e000ed00 	.word	0xe000ed00

08015900 <LL_AHB2_GRP1_EnableClock>:
{
 8015900:	b480      	push	{r7}
 8015902:	b085      	sub	sp, #20
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8015908:	4b08      	ldr	r3, [pc, #32]	; (801592c <LL_AHB2_GRP1_EnableClock+0x2c>)
 801590a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801590c:	4907      	ldr	r1, [pc, #28]	; (801592c <LL_AHB2_GRP1_EnableClock+0x2c>)
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4313      	orrs	r3, r2
 8015912:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8015914:	4b05      	ldr	r3, [pc, #20]	; (801592c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8015916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	4013      	ands	r3, r2
 801591c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801591e:	68fb      	ldr	r3, [r7, #12]
}
 8015920:	bf00      	nop
 8015922:	3714      	adds	r7, #20
 8015924:	46bd      	mov	sp, r7
 8015926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592a:	4770      	bx	lr
 801592c:	40021000 	.word	0x40021000

08015930 <LL_GPIO_SetPinMode>:
{
 8015930:	b480      	push	{r7}
 8015932:	b08b      	sub	sp, #44	; 0x2c
 8015934:	af00      	add	r7, sp, #0
 8015936:	60f8      	str	r0, [r7, #12]
 8015938:	60b9      	str	r1, [r7, #8]
 801593a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	681a      	ldr	r2, [r3, #0]
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	fa93 f3a3 	rbit	r3, r3
 801594a:	613b      	str	r3, [r7, #16]
  return result;
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015950:	69bb      	ldr	r3, [r7, #24]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d101      	bne.n	801595a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8015956:	2320      	movs	r3, #32
 8015958:	e003      	b.n	8015962 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	fab3 f383 	clz	r3, r3
 8015960:	b2db      	uxtb	r3, r3
 8015962:	005b      	lsls	r3, r3, #1
 8015964:	2103      	movs	r1, #3
 8015966:	fa01 f303 	lsl.w	r3, r1, r3
 801596a:	43db      	mvns	r3, r3
 801596c:	401a      	ands	r2, r3
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015972:	6a3b      	ldr	r3, [r7, #32]
 8015974:	fa93 f3a3 	rbit	r3, r3
 8015978:	61fb      	str	r3, [r7, #28]
  return result;
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015980:	2b00      	cmp	r3, #0
 8015982:	d101      	bne.n	8015988 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8015984:	2320      	movs	r3, #32
 8015986:	e003      	b.n	8015990 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8015988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801598a:	fab3 f383 	clz	r3, r3
 801598e:	b2db      	uxtb	r3, r3
 8015990:	005b      	lsls	r3, r3, #1
 8015992:	6879      	ldr	r1, [r7, #4]
 8015994:	fa01 f303 	lsl.w	r3, r1, r3
 8015998:	431a      	orrs	r2, r3
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	601a      	str	r2, [r3, #0]
}
 801599e:	bf00      	nop
 80159a0:	372c      	adds	r7, #44	; 0x2c
 80159a2:	46bd      	mov	sp, r7
 80159a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a8:	4770      	bx	lr

080159aa <LL_GPIO_SetPinPull>:
{
 80159aa:	b480      	push	{r7}
 80159ac:	b08b      	sub	sp, #44	; 0x2c
 80159ae:	af00      	add	r7, sp, #0
 80159b0:	60f8      	str	r0, [r7, #12]
 80159b2:	60b9      	str	r1, [r7, #8]
 80159b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	68da      	ldr	r2, [r3, #12]
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	fa93 f3a3 	rbit	r3, r3
 80159c4:	613b      	str	r3, [r7, #16]
  return result;
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80159ca:	69bb      	ldr	r3, [r7, #24]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d101      	bne.n	80159d4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80159d0:	2320      	movs	r3, #32
 80159d2:	e003      	b.n	80159dc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80159d4:	69bb      	ldr	r3, [r7, #24]
 80159d6:	fab3 f383 	clz	r3, r3
 80159da:	b2db      	uxtb	r3, r3
 80159dc:	005b      	lsls	r3, r3, #1
 80159de:	2103      	movs	r1, #3
 80159e0:	fa01 f303 	lsl.w	r3, r1, r3
 80159e4:	43db      	mvns	r3, r3
 80159e6:	401a      	ands	r2, r3
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80159ec:	6a3b      	ldr	r3, [r7, #32]
 80159ee:	fa93 f3a3 	rbit	r3, r3
 80159f2:	61fb      	str	r3, [r7, #28]
  return result;
 80159f4:	69fb      	ldr	r3, [r7, #28]
 80159f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80159f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d101      	bne.n	8015a02 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80159fe:	2320      	movs	r3, #32
 8015a00:	e003      	b.n	8015a0a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8015a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a04:	fab3 f383 	clz	r3, r3
 8015a08:	b2db      	uxtb	r3, r3
 8015a0a:	005b      	lsls	r3, r3, #1
 8015a0c:	6879      	ldr	r1, [r7, #4]
 8015a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8015a12:	431a      	orrs	r2, r3
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	60da      	str	r2, [r3, #12]
}
 8015a18:	bf00      	nop
 8015a1a:	372c      	adds	r7, #44	; 0x2c
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a22:	4770      	bx	lr

08015a24 <LL_UCPD_Enable>:
{
 8015a24:	b480      	push	{r7}
 8015a26:	b083      	sub	sp, #12
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	601a      	str	r2, [r3, #0]
}
 8015a38:	bf00      	nop
 8015a3a:	370c      	adds	r7, #12
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr

08015a44 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
 8015a4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015a56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015a5a:	683a      	ldr	r2, [r7, #0]
 8015a5c:	431a      	orrs	r2, r3
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	601a      	str	r2, [r3, #0]
}
 8015a62:	bf00      	nop
 8015a64:	370c      	adds	r7, #12
 8015a66:	46bd      	mov	sp, r7
 8015a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6c:	4770      	bx	lr

08015a6e <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 8015a6e:	b480      	push	{r7}
 8015a70:	b083      	sub	sp, #12
 8015a72:	af00      	add	r7, sp, #0
 8015a74:	6078      	str	r0, [r7, #4]
 8015a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	68db      	ldr	r3, [r3, #12]
 8015a7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	431a      	orrs	r2, r3
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	60da      	str	r2, [r3, #12]
}
 8015a88:	bf00      	nop
 8015a8a:	370c      	adds	r7, #12
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a92:	4770      	bx	lr

08015a94 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8015a94:	b480      	push	{r7}
 8015a96:	b083      	sub	sp, #12
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	691b      	ldr	r3, [r3, #16]
 8015aa0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	611a      	str	r2, [r3, #16]
}
 8015aa8:	bf00      	nop
 8015aaa:	370c      	adds	r7, #12
 8015aac:	46bd      	mov	sp, r7
 8015aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab2:	4770      	bx	lr

08015ab4 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8015ab4:	b480      	push	{r7}
 8015ab6:	b083      	sub	sp, #12
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	691b      	ldr	r3, [r3, #16]
 8015ac0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	611a      	str	r2, [r3, #16]
}
 8015ac8:	bf00      	nop
 8015aca:	370c      	adds	r7, #12
 8015acc:	46bd      	mov	sp, r7
 8015ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad2:	4770      	bx	lr

08015ad4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8015ad8:	4b05      	ldr	r3, [pc, #20]	; (8015af0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8015ada:	689b      	ldr	r3, [r3, #8]
 8015adc:	4a04      	ldr	r2, [pc, #16]	; (8015af0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8015ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015ae2:	6093      	str	r3, [r2, #8]
}
 8015ae4:	bf00      	nop
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aec:	4770      	bx	lr
 8015aee:	bf00      	nop
 8015af0:	40007000 	.word	0x40007000

08015af4 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 8015af4:	b590      	push	{r4, r7, lr}
 8015af6:	b08b      	sub	sp, #44	; 0x2c
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	60b9      	str	r1, [r7, #8]
 8015afc:	607a      	str	r2, [r7, #4]
 8015afe:	603b      	str	r3, [r7, #0]
 8015b00:	4603      	mov	r3, r0
 8015b02:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015b04:	7bfa      	ldrb	r2, [r7, #15]
 8015b06:	4613      	mov	r3, r2
 8015b08:	005b      	lsls	r3, r3, #1
 8015b0a:	4413      	add	r3, r2
 8015b0c:	009b      	lsls	r3, r3, #2
 8015b0e:	4a66      	ldr	r2, [pc, #408]	; (8015ca8 <CAD_Init+0x1b4>)
 8015b10:	4413      	add	r3, r2
 8015b12:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8015b14:	7bfa      	ldrb	r2, [r7, #15]
 8015b16:	4965      	ldr	r1, [pc, #404]	; (8015cac <CAD_Init+0x1b8>)
 8015b18:	4613      	mov	r3, r2
 8015b1a:	011b      	lsls	r3, r3, #4
 8015b1c:	1a9b      	subs	r3, r3, r2
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	440b      	add	r3, r1
 8015b22:	3310      	adds	r3, #16
 8015b24:	687a      	ldr	r2, [r7, #4]
 8015b26:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8015b28:	7bfa      	ldrb	r2, [r7, #15]
 8015b2a:	4960      	ldr	r1, [pc, #384]	; (8015cac <CAD_Init+0x1b8>)
 8015b2c:	4613      	mov	r3, r2
 8015b2e:	011b      	lsls	r3, r3, #4
 8015b30:	1a9b      	subs	r3, r3, r2
 8015b32:	009b      	lsls	r3, r3, #2
 8015b34:	440b      	add	r3, r1
 8015b36:	330c      	adds	r3, #12
 8015b38:	68ba      	ldr	r2, [r7, #8]
 8015b3a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8015b3c:	7bfa      	ldrb	r2, [r7, #15]
 8015b3e:	495b      	ldr	r1, [pc, #364]	; (8015cac <CAD_Init+0x1b8>)
 8015b40:	4613      	mov	r3, r2
 8015b42:	011b      	lsls	r3, r3, #4
 8015b44:	1a9b      	subs	r3, r3, r2
 8015b46:	009b      	lsls	r3, r3, #2
 8015b48:	440b      	add	r3, r1
 8015b4a:	330c      	adds	r3, #12
 8015b4c:	6819      	ldr	r1, [r3, #0]
 8015b4e:	7bfa      	ldrb	r2, [r7, #15]
 8015b50:	4856      	ldr	r0, [pc, #344]	; (8015cac <CAD_Init+0x1b8>)
 8015b52:	4613      	mov	r3, r2
 8015b54:	011b      	lsls	r3, r3, #4
 8015b56:	1a9b      	subs	r3, r3, r2
 8015b58:	009b      	lsls	r3, r3, #2
 8015b5a:	4403      	add	r3, r0
 8015b5c:	3310      	adds	r3, #16
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	794b      	ldrb	r3, [r1, #5]
 8015b62:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8015b66:	b2d9      	uxtb	r1, r3
 8015b68:	7893      	ldrb	r3, [r2, #2]
 8015b6a:	f361 0301 	bfi	r3, r1, #0, #2
 8015b6e:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8015b70:	7bfa      	ldrb	r2, [r7, #15]
 8015b72:	494e      	ldr	r1, [pc, #312]	; (8015cac <CAD_Init+0x1b8>)
 8015b74:	4613      	mov	r3, r2
 8015b76:	011b      	lsls	r3, r3, #4
 8015b78:	1a9b      	subs	r3, r3, r2
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	440b      	add	r3, r1
 8015b7e:	3310      	adds	r3, #16
 8015b80:	681a      	ldr	r2, [r3, #0]
 8015b82:	7893      	ldrb	r3, [r2, #2]
 8015b84:	f36f 0383 	bfc	r3, #2, #2
 8015b88:	7093      	strb	r3, [r2, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8015b8a:	220c      	movs	r2, #12
 8015b8c:	2100      	movs	r1, #0
 8015b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b90:	f00a fe6b 	bl	802086a <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8015b94:	7bfa      	ldrb	r2, [r7, #15]
 8015b96:	4945      	ldr	r1, [pc, #276]	; (8015cac <CAD_Init+0x1b8>)
 8015b98:	4613      	mov	r3, r2
 8015b9a:	011b      	lsls	r3, r3, #4
 8015b9c:	1a9b      	subs	r3, r3, r2
 8015b9e:	009b      	lsls	r3, r3, #2
 8015ba0:	440b      	add	r3, r1
 8015ba2:	332c      	adds	r3, #44	; 0x2c
 8015ba4:	683a      	ldr	r2, [r7, #0]
 8015ba6:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 8015ba8:	7bfc      	ldrb	r4, [r7, #15]
 8015baa:	7bfb      	ldrb	r3, [r7, #15]
 8015bac:	4618      	mov	r0, r3
 8015bae:	f000 fbb1 	bl	8016314 <USBPD_HW_GetUSPDInstance>
 8015bb2:	4602      	mov	r2, r0
 8015bb4:	493d      	ldr	r1, [pc, #244]	; (8015cac <CAD_Init+0x1b8>)
 8015bb6:	4623      	mov	r3, r4
 8015bb8:	011b      	lsls	r3, r3, #4
 8015bba:	1b1b      	subs	r3, r3, r4
 8015bbc:	009b      	lsls	r3, r3, #2
 8015bbe:	440b      	add	r3, r1
 8015bc0:	601a      	str	r2, [r3, #0]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 8015bc2:	f107 0314 	add.w	r3, r7, #20
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f7fc ffec 	bl	8012ba4 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8015bcc:	7bfa      	ldrb	r2, [r7, #15]
 8015bce:	4937      	ldr	r1, [pc, #220]	; (8015cac <CAD_Init+0x1b8>)
 8015bd0:	4613      	mov	r3, r2
 8015bd2:	011b      	lsls	r3, r3, #4
 8015bd4:	1a9b      	subs	r3, r3, r2
 8015bd6:	009b      	lsls	r3, r3, #2
 8015bd8:	440b      	add	r3, r1
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	f107 0214 	add.w	r2, r7, #20
 8015be0:	4611      	mov	r1, r2
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7fc ffb0 	bl	8012b48 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 8015be8:	7bfa      	ldrb	r2, [r7, #15]
 8015bea:	4930      	ldr	r1, [pc, #192]	; (8015cac <CAD_Init+0x1b8>)
 8015bec:	4613      	mov	r3, r2
 8015bee:	011b      	lsls	r3, r3, #4
 8015bf0:	1a9b      	subs	r3, r3, r2
 8015bf2:	009b      	lsls	r3, r3, #2
 8015bf4:	440b      	add	r3, r1
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f7ff ff21 	bl	8015a44 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8015c02:	7bfa      	ldrb	r2, [r7, #15]
 8015c04:	4929      	ldr	r1, [pc, #164]	; (8015cac <CAD_Init+0x1b8>)
 8015c06:	4613      	mov	r3, r2
 8015c08:	011b      	lsls	r3, r3, #4
 8015c0a:	1a9b      	subs	r3, r3, r2
 8015c0c:	009b      	lsls	r3, r3, #2
 8015c0e:	440b      	add	r3, r1
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7ff ff29 	bl	8015a6e <LL_UCPD_SetccEnable>

#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 8015c1c:	f7ff ff5a 	bl	8015ad4 <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 8015c20:	2002      	movs	r0, #2
 8015c22:	f7ff fe6d 	bl	8015900 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 8015c26:	2203      	movs	r2, #3
 8015c28:	2140      	movs	r1, #64	; 0x40
 8015c2a:	4821      	ldr	r0, [pc, #132]	; (8015cb0 <CAD_Init+0x1bc>)
 8015c2c:	f7ff fe80 	bl	8015930 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 8015c30:	2203      	movs	r2, #3
 8015c32:	2110      	movs	r1, #16
 8015c34:	481e      	ldr	r0, [pc, #120]	; (8015cb0 <CAD_Init+0x1bc>)
 8015c36:	f7ff fe7b 	bl	8015930 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	2140      	movs	r1, #64	; 0x40
 8015c3e:	481c      	ldr	r0, [pc, #112]	; (8015cb0 <CAD_Init+0x1bc>)
 8015c40:	f7ff feb3 	bl	80159aa <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8015c44:	2200      	movs	r2, #0
 8015c46:	2110      	movs	r1, #16
 8015c48:	4819      	ldr	r0, [pc, #100]	; (8015cb0 <CAD_Init+0x1bc>)
 8015c4a:	f7ff feae 	bl	80159aa <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8015c4e:	7bfb      	ldrb	r3, [r7, #15]
 8015c50:	4618      	mov	r0, r3
 8015c52:	f008 ffaf 	bl	801ebb4 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8015c56:	7bfa      	ldrb	r2, [r7, #15]
 8015c58:	4914      	ldr	r1, [pc, #80]	; (8015cac <CAD_Init+0x1b8>)
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	011b      	lsls	r3, r3, #4
 8015c5e:	1a9b      	subs	r3, r3, r2
 8015c60:	009b      	lsls	r3, r3, #2
 8015c62:	440b      	add	r3, r1
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7ff fedc 	bl	8015a24 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8015c6c:	7bfb      	ldrb	r3, [r7, #15]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f001 fc64 	bl	801753c <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8015c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c76:	4a0f      	ldr	r2, [pc, #60]	; (8015cb4 <CAD_Init+0x1c0>)
 8015c78:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8015c7a:	7bfa      	ldrb	r2, [r7, #15]
 8015c7c:	490b      	ldr	r1, [pc, #44]	; (8015cac <CAD_Init+0x1b8>)
 8015c7e:	4613      	mov	r3, r2
 8015c80:	011b      	lsls	r3, r3, #4
 8015c82:	1a9b      	subs	r3, r3, r2
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	440b      	add	r3, r1
 8015c88:	330c      	adds	r3, #12
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	795b      	ldrb	r3, [r3, #5]
 8015c8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015c92:	b2d9      	uxtb	r1, r3
 8015c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c96:	7853      	ldrb	r3, [r2, #1]
 8015c98:	f361 13c7 	bfi	r3, r1, #7, #1
 8015c9c:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 8015c9e:	bf00      	nop
 8015ca0:	372c      	adds	r7, #44	; 0x2c
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd90      	pop	{r4, r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	20001da8 	.word	0x20001da8
 8015cac:	20001dc0 	.word	0x20001dc0
 8015cb0:	48000400 	.word	0x48000400
 8015cb4:	08015d91 	.word	0x08015d91

08015cb8 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	71fb      	strb	r3, [r7, #7]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 8015cc2:	79fb      	ldrb	r3, [r7, #7]
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f001 fccb 	bl	8017660 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 8015cca:	79fa      	ldrb	r2, [r7, #7]
 8015ccc:	490b      	ldr	r1, [pc, #44]	; (8015cfc <CAD_Enter_ErrorRecovery+0x44>)
 8015cce:	4613      	mov	r3, r2
 8015cd0:	005b      	lsls	r3, r3, #1
 8015cd2:	4413      	add	r3, r2
 8015cd4:	009b      	lsls	r3, r3, #2
 8015cd6:	18ca      	adds	r2, r1, r3
 8015cd8:	7813      	ldrb	r3, [r2, #0]
 8015cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015cde:	7013      	strb	r3, [r2, #0]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8015ce0:	79fa      	ldrb	r2, [r7, #7]
 8015ce2:	4907      	ldr	r1, [pc, #28]	; (8015d00 <CAD_Enter_ErrorRecovery+0x48>)
 8015ce4:	4613      	mov	r3, r2
 8015ce6:	011b      	lsls	r3, r3, #4
 8015ce8:	1a9b      	subs	r3, r3, r2
 8015cea:	009b      	lsls	r3, r3, #2
 8015cec:	440b      	add	r3, r1
 8015cee:	332c      	adds	r3, #44	; 0x2c
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	4798      	blx	r3
}
 8015cf4:	bf00      	nop
 8015cf6:	3708      	adds	r7, #8
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd80      	pop	{r7, pc}
 8015cfc:	20001da8 	.word	0x20001da8
 8015d00:	20001dc0 	.word	0x20001dc0

08015d04 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	6039      	str	r1, [r7, #0]
 8015d0e:	71fb      	strb	r3, [r7, #7]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 8015d10:	79fa      	ldrb	r2, [r7, #7]
 8015d12:	4915      	ldr	r1, [pc, #84]	; (8015d68 <CAD_SRC_Set_ResistorRp+0x64>)
 8015d14:	4613      	mov	r3, r2
 8015d16:	011b      	lsls	r3, r3, #4
 8015d18:	1a9b      	subs	r3, r3, r2
 8015d1a:	009b      	lsls	r3, r3, #2
 8015d1c:	440b      	add	r3, r1
 8015d1e:	3310      	adds	r3, #16
 8015d20:	681a      	ldr	r2, [r3, #0]
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	f003 0303 	and.w	r3, r3, #3
 8015d28:	b2d9      	uxtb	r1, r3
 8015d2a:	7893      	ldrb	r3, [r2, #2]
 8015d2c:	f361 0301 	bfi	r3, r1, #0, #2
 8015d30:	7093      	strb	r3, [r2, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 8015d32:	79fa      	ldrb	r2, [r7, #7]
 8015d34:	490d      	ldr	r1, [pc, #52]	; (8015d6c <CAD_SRC_Set_ResistorRp+0x68>)
 8015d36:	4613      	mov	r3, r2
 8015d38:	005b      	lsls	r3, r3, #1
 8015d3a:	4413      	add	r3, r2
 8015d3c:	009b      	lsls	r3, r3, #2
 8015d3e:	18ca      	adds	r2, r1, r3
 8015d40:	7853      	ldrb	r3, [r2, #1]
 8015d42:	f043 0301 	orr.w	r3, r3, #1
 8015d46:	7053      	strb	r3, [r2, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8015d48:	79fa      	ldrb	r2, [r7, #7]
 8015d4a:	4907      	ldr	r1, [pc, #28]	; (8015d68 <CAD_SRC_Set_ResistorRp+0x64>)
 8015d4c:	4613      	mov	r3, r2
 8015d4e:	011b      	lsls	r3, r3, #4
 8015d50:	1a9b      	subs	r3, r3, r2
 8015d52:	009b      	lsls	r3, r3, #2
 8015d54:	440b      	add	r3, r1
 8015d56:	332c      	adds	r3, #44	; 0x2c
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	4798      	blx	r3
  return 0;
 8015d5c:	2300      	movs	r3, #0
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3708      	adds	r7, #8
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}
 8015d66:	bf00      	nop
 8015d68:	20001dc0 	.word	0x20001dc0
 8015d6c:	20001da8 	.word	0x20001da8

08015d70 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	4603      	mov	r3, r0
 8015d78:	6039      	str	r1, [r7, #0]
 8015d7a:	71fb      	strb	r3, [r7, #7]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 8015d7c:	79fb      	ldrb	r3, [r7, #7]
 8015d7e:	6839      	ldr	r1, [r7, #0]
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7ff ffbf 	bl	8015d04 <CAD_SRC_Set_ResistorRp>
 8015d86:	4603      	mov	r3, r0
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b086      	sub	sp, #24
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	4603      	mov	r3, r0
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	607a      	str	r2, [r7, #4]
 8015d9c:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015d9e:	7bfa      	ldrb	r2, [r7, #15]
 8015da0:	4613      	mov	r3, r2
 8015da2:	005b      	lsls	r3, r3, #1
 8015da4:	4413      	add	r3, r2
 8015da6:	009b      	lsls	r3, r3, #2
 8015da8:	4a17      	ldr	r2, [pc, #92]	; (8015e08 <CAD_StateMachine_SNK+0x78>)
 8015daa:	4413      	add	r3, r2
 8015dac:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015dae:	2302      	movs	r3, #2
 8015db0:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8015db2:	693b      	ldr	r3, [r7, #16]
 8015db4:	785b      	ldrb	r3, [r3, #1]
 8015db6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8015dba:	b2db      	uxtb	r3, r3
 8015dbc:	2b03      	cmp	r3, #3
 8015dbe:	d014      	beq.n	8015dea <CAD_StateMachine_SNK+0x5a>
 8015dc0:	2b03      	cmp	r3, #3
 8015dc2:	dc1a      	bgt.n	8015dfa <CAD_StateMachine_SNK+0x6a>
 8015dc4:	2b01      	cmp	r3, #1
 8015dc6:	d002      	beq.n	8015dce <CAD_StateMachine_SNK+0x3e>
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	d006      	beq.n	8015dda <CAD_StateMachine_SNK+0x4a>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 8015dcc:	e015      	b.n	8015dfa <CAD_StateMachine_SNK+0x6a>
      _timing = ManageStateDetached_SNK(PortNum);
 8015dce:	7bfb      	ldrb	r3, [r7, #15]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f000 f955 	bl	8016080 <ManageStateDetached_SNK>
 8015dd6:	6178      	str	r0, [r7, #20]
      break;
 8015dd8:	e010      	b.n	8015dfc <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 8015dda:	7bfb      	ldrb	r3, [r7, #15]
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	68b9      	ldr	r1, [r7, #8]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f000 f997 	bl	8016114 <ManageStateAttachedWait_SNK>
 8015de6:	6178      	str	r0, [r7, #20]
      break;
 8015de8:	e008      	b.n	8015dfc <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 8015dea:	7bfb      	ldrb	r3, [r7, #15]
 8015dec:	687a      	ldr	r2, [r7, #4]
 8015dee:	68b9      	ldr	r1, [r7, #8]
 8015df0:	4618      	mov	r0, r3
 8015df2:	f000 fa11 	bl	8016218 <ManageStateAttached_SNK>
 8015df6:	6178      	str	r0, [r7, #20]
      break;
 8015df8:	e000      	b.n	8015dfc <CAD_StateMachine_SNK+0x6c>
      break;
 8015dfa:	bf00      	nop
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8015dfc:	697b      	ldr	r3, [r7, #20]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3718      	adds	r7, #24
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	20001da8 	.word	0x20001da8

08015e0c <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b086      	sub	sp, #24
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	4603      	mov	r3, r0
 8015e14:	60b9      	str	r1, [r7, #8]
 8015e16:	607a      	str	r2, [r7, #4]
 8015e18:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015e1a:	7bfa      	ldrb	r2, [r7, #15]
 8015e1c:	4613      	mov	r3, r2
 8015e1e:	005b      	lsls	r3, r3, #1
 8015e20:	4413      	add	r3, r2
 8015e22:	009b      	lsls	r3, r3, #2
 8015e24:	4a52      	ldr	r2, [pc, #328]	; (8015f70 <CAD_StateMachine+0x164>)
 8015e26:	4413      	add	r3, r2
 8015e28:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015e2a:	2302      	movs	r3, #2
 8015e2c:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	2200      	movs	r2, #0
 8015e32:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8015e34:	7bfa      	ldrb	r2, [r7, #15]
 8015e36:	494f      	ldr	r1, [pc, #316]	; (8015f74 <CAD_StateMachine+0x168>)
 8015e38:	4613      	mov	r3, r2
 8015e3a:	011b      	lsls	r3, r3, #4
 8015e3c:	1a9b      	subs	r3, r3, r2
 8015e3e:	009b      	lsls	r3, r3, #2
 8015e40:	440b      	add	r3, r1
 8015e42:	3310      	adds	r3, #16
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	f003 0310 	and.w	r3, r3, #16
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d001      	beq.n	8015e56 <CAD_StateMachine+0x4a>
  {
    return _timing;
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	e087      	b.n	8015f66 <CAD_StateMachine+0x15a>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8015e56:	693b      	ldr	r3, [r7, #16]
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015e5e:	b2db      	uxtb	r3, r3
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d00a      	beq.n	8015e7a <CAD_StateMachine+0x6e>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8015e64:	693a      	ldr	r2, [r7, #16]
 8015e66:	7813      	ldrb	r3, [r2, #0]
 8015e68:	f36f 13c7 	bfc	r3, #7, #1
 8015e6c:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8015e6e:	693a      	ldr	r2, [r7, #16]
 8015e70:	7853      	ldrb	r3, [r2, #1]
 8015e72:	210c      	movs	r1, #12
 8015e74:	f361 0345 	bfi	r3, r1, #1, #5
 8015e78:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 8015e7a:	693b      	ldr	r3, [r7, #16]
 8015e7c:	785b      	ldrb	r3, [r3, #1]
 8015e7e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8015e82:	b2db      	uxtb	r3, r3
 8015e84:	2b0d      	cmp	r3, #13
 8015e86:	d051      	beq.n	8015f2c <CAD_StateMachine+0x120>
 8015e88:	2b0d      	cmp	r3, #13
 8015e8a:	dc62      	bgt.n	8015f52 <CAD_StateMachine+0x146>
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d002      	beq.n	8015e96 <CAD_StateMachine+0x8a>
 8015e90:	2b0c      	cmp	r3, #12
 8015e92:	d024      	beq.n	8015ede <CAD_StateMachine+0xd2>
 8015e94:	e05d      	b.n	8015f52 <CAD_StateMachine+0x146>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 8015e96:	7bfa      	ldrb	r2, [r7, #15]
 8015e98:	4936      	ldr	r1, [pc, #216]	; (8015f74 <CAD_StateMachine+0x168>)
 8015e9a:	4613      	mov	r3, r2
 8015e9c:	011b      	lsls	r3, r3, #4
 8015e9e:	1a9b      	subs	r3, r3, r2
 8015ea0:	009b      	lsls	r3, r3, #2
 8015ea2:	440b      	add	r3, r1
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7ff fdf4 	bl	8015a94 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8015eac:	7bfa      	ldrb	r2, [r7, #15]
 8015eae:	4931      	ldr	r1, [pc, #196]	; (8015f74 <CAD_StateMachine+0x168>)
 8015eb0:	4613      	mov	r3, r2
 8015eb2:	011b      	lsls	r3, r3, #4
 8015eb4:	1a9b      	subs	r3, r3, r2
 8015eb6:	009b      	lsls	r3, r3, #2
 8015eb8:	440b      	add	r3, r1
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f7ff fdf9 	bl	8015ab4 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      UCPD_INSTANCE0_ENABLEIRQ;
 8015ec2:	2104      	movs	r1, #4
 8015ec4:	203f      	movs	r0, #63	; 0x3f
 8015ec6:	f7ff fcf1 	bl	80158ac <__NVIC_SetPriority>
 8015eca:	203f      	movs	r0, #63	; 0x3f
 8015ecc:	f7ff fcd0 	bl	8015870 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8015ed0:	693a      	ldr	r2, [r7, #16]
 8015ed2:	7853      	ldrb	r3, [r2, #1]
 8015ed4:	2101      	movs	r1, #1
 8015ed6:	f361 0345 	bfi	r3, r1, #1, #5
 8015eda:	7053      	strb	r3, [r2, #1]
      break;
 8015edc:	e042      	b.n	8015f64 <CAD_StateMachine+0x158>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8015ede:	7bfb      	ldrb	r3, [r7, #15]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f001 fbbd 	bl	8017660 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8015ee6:	7bfa      	ldrb	r2, [r7, #15]
 8015ee8:	4922      	ldr	r1, [pc, #136]	; (8015f74 <CAD_StateMachine+0x168>)
 8015eea:	4613      	mov	r3, r2
 8015eec:	011b      	lsls	r3, r3, #4
 8015eee:	1a9b      	subs	r3, r3, r2
 8015ef0:	009b      	lsls	r3, r3, #2
 8015ef2:	440b      	add	r3, r1
 8015ef4:	3334      	adds	r3, #52	; 0x34
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2200      	movs	r2, #0
 8015efe:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8015f00:	693a      	ldr	r2, [r7, #16]
 8015f02:	7813      	ldrb	r3, [r2, #0]
 8015f04:	f36f 0301 	bfc	r3, #0, #2
 8015f08:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	2201      	movs	r2, #1
 8015f0e:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8015f10:	f7f3 fa26 	bl	8009360 <HAL_GetTick>
 8015f14:	4602      	mov	r2, r0
 8015f16:	693b      	ldr	r3, [r7, #16]
 8015f18:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8015f1a:	231a      	movs	r3, #26
 8015f1c:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8015f1e:	693a      	ldr	r2, [r7, #16]
 8015f20:	7853      	ldrb	r3, [r2, #1]
 8015f22:	210d      	movs	r1, #13
 8015f24:	f361 0345 	bfi	r3, r1, #1, #5
 8015f28:	7053      	strb	r3, [r2, #1]
      break;
 8015f2a:	e01b      	b.n	8015f64 <CAD_StateMachine+0x158>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8015f2c:	f7f3 fa18 	bl	8009360 <HAL_GetTick>
 8015f30:	4602      	mov	r2, r0
 8015f32:	693b      	ldr	r3, [r7, #16]
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	1ad3      	subs	r3, r2, r3
 8015f38:	2b1a      	cmp	r3, #26
 8015f3a:	d912      	bls.n	8015f62 <CAD_StateMachine+0x156>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 8015f3c:	7bfb      	ldrb	r3, [r7, #15]
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f001 fafc 	bl	801753c <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8015f44:	693a      	ldr	r2, [r7, #16]
 8015f46:	7853      	ldrb	r3, [r2, #1]
 8015f48:	2101      	movs	r1, #1
 8015f4a:	f361 0345 	bfi	r3, r1, #1, #5
 8015f4e:	7053      	strb	r3, [r2, #1]
      }
      break;
 8015f50:	e007      	b.n	8015f62 <CAD_StateMachine+0x156>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8015f52:	693b      	ldr	r3, [r7, #16]
 8015f54:	689b      	ldr	r3, [r3, #8]
 8015f56:	7bf8      	ldrb	r0, [r7, #15]
 8015f58:	687a      	ldr	r2, [r7, #4]
 8015f5a:	68b9      	ldr	r1, [r7, #8]
 8015f5c:	4798      	blx	r3
 8015f5e:	6178      	str	r0, [r7, #20]
      break;
 8015f60:	e000      	b.n	8015f64 <CAD_StateMachine+0x158>
      break;
 8015f62:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 8015f64:	697b      	ldr	r3, [r7, #20]
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3718      	adds	r7, #24
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop
 8015f70:	20001da8 	.word	0x20001da8
 8015f74:	20001dc0 	.word	0x20001dc0

08015f78 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8015f78:	b480      	push	{r7}
 8015f7a:	b087      	sub	sp, #28
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	4603      	mov	r3, r0
 8015f80:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015f82:	79fa      	ldrb	r2, [r7, #7]
 8015f84:	4613      	mov	r3, r2
 8015f86:	005b      	lsls	r3, r3, #1
 8015f88:	4413      	add	r3, r2
 8015f8a:	009b      	lsls	r3, r3, #2
 8015f8c:	4a3a      	ldr	r2, [pc, #232]	; (8016078 <CAD_Check_HW_SNK+0x100>)
 8015f8e:	4413      	add	r3, r2
 8015f90:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8015f92:	79fa      	ldrb	r2, [r7, #7]
 8015f94:	4939      	ldr	r1, [pc, #228]	; (801607c <CAD_Check_HW_SNK+0x104>)
 8015f96:	4613      	mov	r3, r2
 8015f98:	011b      	lsls	r3, r3, #4
 8015f9a:	1a9b      	subs	r3, r3, r2
 8015f9c:	009b      	lsls	r3, r3, #2
 8015f9e:	440b      	add	r3, r1
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	695b      	ldr	r3, [r3, #20]
 8015fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015fa8:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8015faa:	79fa      	ldrb	r2, [r7, #7]
 8015fac:	4933      	ldr	r1, [pc, #204]	; (801607c <CAD_Check_HW_SNK+0x104>)
 8015fae:	4613      	mov	r3, r2
 8015fb0:	011b      	lsls	r3, r3, #4
 8015fb2:	1a9b      	subs	r3, r3, r2
 8015fb4:	009b      	lsls	r3, r3, #2
 8015fb6:	440b      	add	r3, r1
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	695b      	ldr	r3, [r3, #20]
 8015fbc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8015fc0:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 8015fc2:	697a      	ldr	r2, [r7, #20]
 8015fc4:	7813      	ldrb	r3, [r2, #0]
 8015fc6:	f36f 0301 	bfc	r3, #0, #2
 8015fca:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8015fcc:	697a      	ldr	r2, [r7, #20]
 8015fce:	7813      	ldrb	r3, [r2, #0]
 8015fd0:	f36f 0384 	bfc	r3, #2, #3
 8015fd4:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d021      	beq.n	8016020 <CAD_Check_HW_SNK+0xa8>
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d11e      	bne.n	8016020 <CAD_Check_HW_SNK+0xa8>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8015fe2:	697a      	ldr	r2, [r7, #20]
 8015fe4:	7813      	ldrb	r3, [r2, #0]
 8015fe6:	2101      	movs	r1, #1
 8015fe8:	f361 0384 	bfi	r3, r1, #2, #3
 8015fec:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC1;
 8015fee:	697a      	ldr	r2, [r7, #20]
 8015ff0:	7813      	ldrb	r3, [r2, #0]
 8015ff2:	2101      	movs	r1, #1
 8015ff4:	f361 0301 	bfi	r3, r1, #0, #2
 8015ff8:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	0c18      	lsrs	r0, r3, #16
 8015ffe:	79fa      	ldrb	r2, [r7, #7]
 8016000:	491e      	ldr	r1, [pc, #120]	; (801607c <CAD_Check_HW_SNK+0x104>)
 8016002:	4613      	mov	r3, r2
 8016004:	011b      	lsls	r3, r3, #4
 8016006:	1a9b      	subs	r3, r3, r2
 8016008:	009b      	lsls	r3, r3, #2
 801600a:	440b      	add	r3, r1
 801600c:	3310      	adds	r3, #16
 801600e:	681a      	ldr	r2, [r3, #0]
 8016010:	4603      	mov	r3, r0
 8016012:	f003 0303 	and.w	r3, r3, #3
 8016016:	b2d9      	uxtb	r1, r3
 8016018:	7893      	ldrb	r3, [r2, #2]
 801601a:	f361 0383 	bfi	r3, r1, #2, #2
 801601e:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d121      	bne.n	801606a <CAD_Check_HW_SNK+0xf2>
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d01e      	beq.n	801606a <CAD_Check_HW_SNK+0xf2>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801602c:	697a      	ldr	r2, [r7, #20]
 801602e:	7813      	ldrb	r3, [r2, #0]
 8016030:	2101      	movs	r1, #1
 8016032:	f361 0384 	bfi	r3, r1, #2, #3
 8016036:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC2;
 8016038:	697a      	ldr	r2, [r7, #20]
 801603a:	7813      	ldrb	r3, [r2, #0]
 801603c:	2102      	movs	r1, #2
 801603e:	f361 0301 	bfi	r3, r1, #0, #2
 8016042:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	0c98      	lsrs	r0, r3, #18
 8016048:	79fa      	ldrb	r2, [r7, #7]
 801604a:	490c      	ldr	r1, [pc, #48]	; (801607c <CAD_Check_HW_SNK+0x104>)
 801604c:	4613      	mov	r3, r2
 801604e:	011b      	lsls	r3, r3, #4
 8016050:	1a9b      	subs	r3, r3, r2
 8016052:	009b      	lsls	r3, r3, #2
 8016054:	440b      	add	r3, r1
 8016056:	3310      	adds	r3, #16
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	4603      	mov	r3, r0
 801605c:	f003 0303 	and.w	r3, r3, #3
 8016060:	b2d9      	uxtb	r1, r3
 8016062:	7893      	ldrb	r3, [r2, #2]
 8016064:	f361 0383 	bfi	r3, r1, #2, #2
 8016068:	7093      	strb	r3, [r2, #2]
  }
}
 801606a:	bf00      	nop
 801606c:	371c      	adds	r7, #28
 801606e:	46bd      	mov	sp, r7
 8016070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop
 8016078:	20001da8 	.word	0x20001da8
 801607c:	20001dc0 	.word	0x20001dc0

08016080 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b084      	sub	sp, #16
 8016084:	af00      	add	r7, sp, #0
 8016086:	4603      	mov	r3, r0
 8016088:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801608a:	79fa      	ldrb	r2, [r7, #7]
 801608c:	4613      	mov	r3, r2
 801608e:	005b      	lsls	r3, r3, #1
 8016090:	4413      	add	r3, r2
 8016092:	009b      	lsls	r3, r3, #2
 8016094:	4a1e      	ldr	r2, [pc, #120]	; (8016110 <ManageStateDetached_SNK+0x90>)
 8016096:	4413      	add	r3, r2
 8016098:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801609a:	2302      	movs	r3, #2
 801609c:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 801609e:	79fb      	ldrb	r3, [r7, #7]
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7ff ff69 	bl	8015f78 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 80160a6:	68bb      	ldr	r3, [r7, #8]
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	f003 031c 	and.w	r3, r3, #28
 80160ae:	b2db      	uxtb	r3, r3
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d103      	bne.n	80160bc <ManageStateDetached_SNK+0x3c>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 80160b4:	f04f 33ff 	mov.w	r3, #4294967295
 80160b8:	60fb      	str	r3, [r7, #12]
 80160ba:	e023      	b.n	8016104 <ManageStateDetached_SNK+0x84>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 80160bc:	f7f3 f950 	bl	8009360 <HAL_GetTick>
 80160c0:	4602      	mov	r2, r0
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80160c6:	68ba      	ldr	r2, [r7, #8]
 80160c8:	7853      	ldrb	r3, [r2, #1]
 80160ca:	2102      	movs	r1, #2
 80160cc:	f361 0345 	bfi	r3, r1, #1, #5
 80160d0:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 80160d2:	2001      	movs	r0, #1
 80160d4:	f7f3 f950 	bl	8009378 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 80160d8:	79fb      	ldrb	r3, [r7, #7]
 80160da:	4618      	mov	r0, r3
 80160dc:	f7ff ff4c 	bl	8015f78 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	f003 031c 	and.w	r3, r3, #28
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d106      	bne.n	80160fc <ManageStateDetached_SNK+0x7c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80160ee:	68ba      	ldr	r2, [r7, #8]
 80160f0:	7853      	ldrb	r3, [r2, #1]
 80160f2:	2101      	movs	r1, #1
 80160f4:	f361 0345 	bfi	r3, r1, #1, #5
 80160f8:	7053      	strb	r3, [r2, #1]
 80160fa:	e003      	b.n	8016104 <ManageStateDetached_SNK+0x84>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 80160fc:	79fb      	ldrb	r3, [r7, #7]
 80160fe:	4618      	mov	r0, r3
 8016100:	f008 fd6b 	bl	801ebda <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8016104:	68fb      	ldr	r3, [r7, #12]
}
 8016106:	4618      	mov	r0, r3
 8016108:	3710      	adds	r7, #16
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop
 8016110:	20001da8 	.word	0x20001da8

08016114 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b088      	sub	sp, #32
 8016118:	af00      	add	r7, sp, #0
 801611a:	4603      	mov	r3, r0
 801611c:	60b9      	str	r1, [r7, #8]
 801611e:	607a      	str	r2, [r7, #4]
 8016120:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8016122:	7bfa      	ldrb	r2, [r7, #15]
 8016124:	4613      	mov	r3, r2
 8016126:	005b      	lsls	r3, r3, #1
 8016128:	4413      	add	r3, r2
 801612a:	009b      	lsls	r3, r3, #2
 801612c:	4a39      	ldr	r2, [pc, #228]	; (8016214 <ManageStateAttachedWait_SNK+0x100>)
 801612e:	4413      	add	r3, r2
 8016130:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8016132:	2302      	movs	r3, #2
 8016134:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8016136:	f7f3 f913 	bl	8009360 <HAL_GetTick>
 801613a:	4602      	mov	r2, r0
 801613c:	69bb      	ldr	r3, [r7, #24]
 801613e:	685b      	ldr	r3, [r3, #4]
 8016140:	1ad3      	subs	r3, r2, r3
 8016142:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 8016144:	7bfb      	ldrb	r3, [r7, #15]
 8016146:	4618      	mov	r0, r3
 8016148:	f7ff ff16 	bl	8015f78 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 801614c:	69bb      	ldr	r3, [r7, #24]
 801614e:	781b      	ldrb	r3, [r3, #0]
 8016150:	f003 031c 	and.w	r3, r3, #28
 8016154:	b2db      	uxtb	r3, r3
 8016156:	2b04      	cmp	r3, #4
 8016158:	d12c      	bne.n	80161b4 <ManageStateAttachedWait_SNK+0xa0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 801615a:	697b      	ldr	r3, [r7, #20]
 801615c:	2b78      	cmp	r3, #120	; 0x78
 801615e:	d923      	bls.n	80161a8 <ManageStateAttachedWait_SNK+0x94>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8016160:	7bfb      	ldrb	r3, [r7, #15]
 8016162:	2101      	movs	r1, #1
 8016164:	4618      	mov	r0, r3
 8016166:	f008 fce9 	bl	801eb3c <USBPD_PWR_IF_GetVBUSStatus>
 801616a:	4603      	mov	r3, r0
 801616c:	2b01      	cmp	r3, #1
 801616e:	d11b      	bne.n	80161a8 <ManageStateAttachedWait_SNK+0x94>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8016170:	69bb      	ldr	r3, [r7, #24]
 8016172:	781b      	ldrb	r3, [r3, #0]
 8016174:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8016178:	b2db      	uxtb	r3, r3
 801617a:	461a      	mov	r2, r3
 801617c:	7bfb      	ldrb	r3, [r7, #15]
 801617e:	4611      	mov	r1, r2
 8016180:	4618      	mov	r0, r3
 8016182:	f001 fae1 	bl	8017748 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8016186:	69ba      	ldr	r2, [r7, #24]
 8016188:	7853      	ldrb	r3, [r2, #1]
 801618a:	2103      	movs	r1, #3
 801618c:	f361 0345 	bfi	r3, r1, #1, #5
 8016190:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	2202      	movs	r2, #2
 8016196:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8016198:	69bb      	ldr	r3, [r7, #24]
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	461a      	mov	r2, r3
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 80161a8:	69ba      	ldr	r2, [r7, #24]
 80161aa:	7813      	ldrb	r3, [r2, #0]
 80161ac:	f36f 1345 	bfc	r3, #5, #1
 80161b0:	7013      	strb	r3, [r2, #0]
 80161b2:	e02a      	b.n	801620a <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 80161b4:	69bb      	ldr	r3, [r7, #24]
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	f003 0320 	and.w	r3, r3, #32
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d10c      	bne.n	80161dc <ManageStateAttachedWait_SNK+0xc8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 80161c2:	f7f3 f8cd 	bl	8009360 <HAL_GetTick>
 80161c6:	4602      	mov	r2, r0
 80161c8:	69bb      	ldr	r3, [r7, #24]
 80161ca:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 80161cc:	69ba      	ldr	r2, [r7, #24]
 80161ce:	7813      	ldrb	r3, [r2, #0]
 80161d0:	f043 0320 	orr.w	r3, r3, #32
 80161d4:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 80161d6:	230c      	movs	r3, #12
 80161d8:	61fb      	str	r3, [r7, #28]
 80161da:	e016      	b.n	801620a <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 80161dc:	f7f3 f8c0 	bl	8009360 <HAL_GetTick>
 80161e0:	4602      	mov	r2, r0
 80161e2:	69bb      	ldr	r3, [r7, #24]
 80161e4:	685b      	ldr	r3, [r3, #4]
 80161e6:	1ad3      	subs	r3, r2, r3
 80161e8:	2b0c      	cmp	r3, #12
 80161ea:	d90e      	bls.n	801620a <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 80161ec:	69ba      	ldr	r2, [r7, #24]
 80161ee:	7813      	ldrb	r3, [r2, #0]
 80161f0:	f36f 1345 	bfc	r3, #5, #1
 80161f4:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 80161f6:	69ba      	ldr	r2, [r7, #24]
 80161f8:	7853      	ldrb	r3, [r2, #1]
 80161fa:	2101      	movs	r1, #1
 80161fc:	f361 0345 	bfi	r3, r1, #1, #5
 8016200:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8016202:	7bfb      	ldrb	r3, [r7, #15]
 8016204:	4618      	mov	r0, r3
 8016206:	f008 fcfb 	bl	801ec00 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 801620a:	69fb      	ldr	r3, [r7, #28]
}
 801620c:	4618      	mov	r0, r3
 801620e:	3720      	adds	r7, #32
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}
 8016214:	20001da8 	.word	0x20001da8

08016218 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b088      	sub	sp, #32
 801621c:	af00      	add	r7, sp, #0
 801621e:	4603      	mov	r3, r0
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	607a      	str	r2, [r7, #4]
 8016224:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8016226:	7bfa      	ldrb	r2, [r7, #15]
 8016228:	4613      	mov	r3, r2
 801622a:	005b      	lsls	r3, r3, #1
 801622c:	4413      	add	r3, r2
 801622e:	009b      	lsls	r3, r3, #2
 8016230:	4a2a      	ldr	r2, [pc, #168]	; (80162dc <ManageStateAttached_SNK+0xc4>)
 8016232:	4413      	add	r3, r2
 8016234:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8016236:	2302      	movs	r3, #2
 8016238:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 801623a:	2300      	movs	r3, #0
 801623c:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 801623e:	7bfa      	ldrb	r2, [r7, #15]
 8016240:	4927      	ldr	r1, [pc, #156]	; (80162e0 <ManageStateAttached_SNK+0xc8>)
 8016242:	4613      	mov	r3, r2
 8016244:	011b      	lsls	r3, r3, #4
 8016246:	1a9b      	subs	r3, r3, r2
 8016248:	009b      	lsls	r3, r3, #2
 801624a:	440b      	add	r3, r1
 801624c:	3334      	adds	r3, #52	; 0x34
 801624e:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8016250:	2b01      	cmp	r3, #1
 8016252:	d10b      	bne.n	801626c <ManageStateAttached_SNK+0x54>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8016254:	7bfa      	ldrb	r2, [r7, #15]
 8016256:	4922      	ldr	r1, [pc, #136]	; (80162e0 <ManageStateAttached_SNK+0xc8>)
 8016258:	4613      	mov	r3, r2
 801625a:	011b      	lsls	r3, r3, #4
 801625c:	1a9b      	subs	r3, r3, r2
 801625e:	009b      	lsls	r3, r3, #2
 8016260:	440b      	add	r3, r1
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	695b      	ldr	r3, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8016266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801626a:	e00a      	b.n	8016282 <ManageStateAttached_SNK+0x6a>
 801626c:	7bfa      	ldrb	r2, [r7, #15]
 801626e:	491c      	ldr	r1, [pc, #112]	; (80162e0 <ManageStateAttached_SNK+0xc8>)
 8016270:	4613      	mov	r3, r2
 8016272:	011b      	lsls	r3, r3, #4
 8016274:	1a9b      	subs	r3, r3, r2
 8016276:	009b      	lsls	r3, r3, #2
 8016278:	440b      	add	r3, r1
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	695b      	ldr	r3, [r3, #20]
 801627e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8016282:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8016284:	7bfb      	ldrb	r3, [r7, #15]
 8016286:	2102      	movs	r1, #2
 8016288:	4618      	mov	r0, r3
 801628a:	f008 fc57 	bl	801eb3c <USBPD_PWR_IF_GetVBUSStatus>
 801628e:	4603      	mov	r3, r0
 8016290:	2b01      	cmp	r3, #1
 8016292:	d11b      	bne.n	80162cc <ManageStateAttached_SNK+0xb4>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8016294:	697a      	ldr	r2, [r7, #20]
 8016296:	693b      	ldr	r3, [r7, #16]
 8016298:	429a      	cmp	r2, r3
 801629a:	d117      	bne.n	80162cc <ManageStateAttached_SNK+0xb4>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 801629c:	7bfb      	ldrb	r3, [r7, #15]
 801629e:	4618      	mov	r0, r3
 80162a0:	f001 fb9e 	bl	80179e0 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 80162a4:	69ba      	ldr	r2, [r7, #24]
 80162a6:	7813      	ldrb	r3, [r2, #0]
 80162a8:	f36f 0384 	bfc	r3, #2, #3
 80162ac:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 80162ae:	69ba      	ldr	r2, [r7, #24]
 80162b0:	7853      	ldrb	r3, [r2, #1]
 80162b2:	2101      	movs	r1, #1
 80162b4:	f361 0345 	bfi	r3, r1, #1, #5
 80162b8:	7053      	strb	r3, [r2, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 80162ba:	68bb      	ldr	r3, [r7, #8]
 80162bc:	2201      	movs	r2, #1
 80162be:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	2200      	movs	r2, #0
 80162c4:	601a      	str	r2, [r3, #0]
    _timing = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	61fb      	str	r3, [r7, #28]
 80162ca:	e001      	b.n	80162d0 <ManageStateAttached_SNK+0xb8>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 80162cc:	230a      	movs	r3, #10
 80162ce:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 80162d0:	69fb      	ldr	r3, [r7, #28]
}
 80162d2:	4618      	mov	r0, r3
 80162d4:	3720      	adds	r7, #32
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}
 80162da:	bf00      	nop
 80162dc:	20001da8 	.word	0x20001da8
 80162e0:	20001dc0 	.word	0x20001dc0

080162e4 <LL_AHB1_GRP1_EnableClock>:
{
 80162e4:	b480      	push	{r7}
 80162e6:	b085      	sub	sp, #20
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80162ec:	4b08      	ldr	r3, [pc, #32]	; (8016310 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80162ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80162f0:	4907      	ldr	r1, [pc, #28]	; (8016310 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	4313      	orrs	r3, r2
 80162f6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80162f8:	4b05      	ldr	r3, [pc, #20]	; (8016310 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80162fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	4013      	ands	r3, r2
 8016300:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016302:	68fb      	ldr	r3, [r7, #12]
}
 8016304:	bf00      	nop
 8016306:	3714      	adds	r7, #20
 8016308:	46bd      	mov	sp, r7
 801630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630e:	4770      	bx	lr
 8016310:	40021000 	.word	0x40021000

08016314 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8016314:	b480      	push	{r7}
 8016316:	b083      	sub	sp, #12
 8016318:	af00      	add	r7, sp, #0
 801631a:	4603      	mov	r3, r0
 801631c:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 801631e:	4b03      	ldr	r3, [pc, #12]	; (801632c <USBPD_HW_GetUSPDInstance+0x18>)
}
 8016320:	4618      	mov	r0, r3
 8016322:	370c      	adds	r7, #12
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr
 801632c:	4000a000 	.word	0x4000a000

08016330 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b08e      	sub	sp, #56	; 0x38
 8016334:	af00      	add	r7, sp, #0
 8016336:	4603      	mov	r3, r0
 8016338:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 801633a:	f107 030c 	add.w	r3, r7, #12
 801633e:	4618      	mov	r0, r3
 8016340:	f7fc f9f6 	bl	8012730 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8016344:	2300      	movs	r3, #0
 8016346:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8016348:	2300      	movs	r3, #0
 801634a:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 801634c:	2300      	movs	r3, #0
 801634e:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8016350:	2380      	movs	r3, #128	; 0x80
 8016352:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8016354:	2300      	movs	r3, #0
 8016356:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8016358:	2300      	movs	r3, #0
 801635a:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 801635c:	2300      	movs	r3, #0
 801635e:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8016360:	2300      	movs	r3, #0
 8016362:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8016364:	2300      	movs	r3, #0
 8016366:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8016368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801636c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 801636e:	2001      	movs	r0, #1
 8016370:	f7ff ffb8 	bl	80162e4 <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8016374:	2372      	movs	r3, #114	; 0x72
 8016376:	633b      	str	r3, [r7, #48]	; 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8016378:	f107 030c 	add.w	r3, r7, #12
 801637c:	461a      	mov	r2, r3
 801637e:	2102      	movs	r1, #2
 8016380:	4803      	ldr	r0, [pc, #12]	; (8016390 <USBPD_HW_Init_DMARxInstance+0x60>)
 8016382:	f7fc f995 	bl	80126b0 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 8016386:	4b03      	ldr	r3, [pc, #12]	; (8016394 <USBPD_HW_Init_DMARxInstance+0x64>)
}
 8016388:	4618      	mov	r0, r3
 801638a:	3738      	adds	r7, #56	; 0x38
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}
 8016390:	40020000 	.word	0x40020000
 8016394:	40020030 	.word	0x40020030

08016398 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8016398:	b480      	push	{r7}
 801639a:	b083      	sub	sp, #12
 801639c:	af00      	add	r7, sp, #0
 801639e:	4603      	mov	r3, r0
 80163a0:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 80163a2:	bf00      	nop
 80163a4:	370c      	adds	r7, #12
 80163a6:	46bd      	mov	sp, r7
 80163a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ac:	4770      	bx	lr
	...

080163b0 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b08e      	sub	sp, #56	; 0x38
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	4603      	mov	r3, r0
 80163b8:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 80163ba:	f107 030c 	add.w	r3, r7, #12
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fc f9b6 	bl	8012730 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80163c4:	2310      	movs	r3, #16
 80163c6:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80163c8:	2300      	movs	r3, #0
 80163ca:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80163cc:	2300      	movs	r3, #0
 80163ce:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80163d0:	2380      	movs	r3, #128	; 0x80
 80163d2:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80163d4:	2300      	movs	r3, #0
 80163d6:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80163d8:	2300      	movs	r3, #0
 80163da:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 80163dc:	2300      	movs	r3, #0
 80163de:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 80163e0:	2300      	movs	r3, #0
 80163e2:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 80163e4:	2300      	movs	r3, #0
 80163e6:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 80163e8:	2001      	movs	r0, #1
 80163ea:	f7ff ff7b 	bl	80162e4 <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 80163ee:	2373      	movs	r3, #115	; 0x73
 80163f0:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 80163f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80163f6:	637b      	str	r3, [r7, #52]	; 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 80163f8:	f107 030c 	add.w	r3, r7, #12
 80163fc:	461a      	mov	r2, r3
 80163fe:	2103      	movs	r1, #3
 8016400:	4803      	ldr	r0, [pc, #12]	; (8016410 <USBPD_HW_Init_DMATxInstance+0x60>)
 8016402:	f7fc f955 	bl	80126b0 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8016406:	4b03      	ldr	r3, [pc, #12]	; (8016414 <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8016408:	4618      	mov	r0, r3
 801640a:	3738      	adds	r7, #56	; 0x38
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}
 8016410:	40020000 	.word	0x40020000
 8016414:	40020044 	.word	0x40020044

08016418 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8016418:	b480      	push	{r7}
 801641a:	b083      	sub	sp, #12
 801641c:	af00      	add	r7, sp, #0
 801641e:	4603      	mov	r3, r0
 8016420:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8016422:	bf00      	nop
 8016424:	370c      	adds	r7, #12
 8016426:	46bd      	mov	sp, r7
 8016428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642c:	4770      	bx	lr

0801642e <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 801642e:	b480      	push	{r7}
 8016430:	b083      	sub	sp, #12
 8016432:	af00      	add	r7, sp, #0
 8016434:	4603      	mov	r3, r0
 8016436:	460a      	mov	r2, r1
 8016438:	71fb      	strb	r3, [r7, #7]
 801643a:	4613      	mov	r3, r2
 801643c:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 801643e:	bf00      	nop
 8016440:	370c      	adds	r7, #12
 8016442:	46bd      	mov	sp, r7
 8016444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016448:	4770      	bx	lr

0801644a <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 801644a:	b480      	push	{r7}
 801644c:	b083      	sub	sp, #12
 801644e:	af00      	add	r7, sp, #0
 8016450:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	699b      	ldr	r3, [r3, #24]
 8016456:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	619a      	str	r2, [r3, #24]
}
 801645e:	bf00      	nop
 8016460:	370c      	adds	r7, #12
 8016462:	46bd      	mov	sp, r7
 8016464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016468:	4770      	bx	lr

0801646a <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 801646a:	b480      	push	{r7}
 801646c:	b083      	sub	sp, #12
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	699b      	ldr	r3, [r3, #24]
 8016476:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	619a      	str	r2, [r3, #24]
}
 801647e:	bf00      	nop
 8016480:	370c      	adds	r7, #12
 8016482:	46bd      	mov	sp, r7
 8016484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016488:	4770      	bx	lr

0801648a <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 801648a:	b480      	push	{r7}
 801648c:	b083      	sub	sp, #12
 801648e:	af00      	add	r7, sp, #0
 8016490:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	699b      	ldr	r3, [r3, #24]
 8016496:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	619a      	str	r2, [r3, #24]
}
 801649e:	bf00      	nop
 80164a0:	370c      	adds	r7, #12
 80164a2:	46bd      	mov	sp, r7
 80164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a8:	4770      	bx	lr

080164aa <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 80164aa:	b480      	push	{r7}
 80164ac:	b083      	sub	sp, #12
 80164ae:	af00      	add	r7, sp, #0
 80164b0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	699b      	ldr	r3, [r3, #24]
 80164b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	619a      	str	r2, [r3, #24]
}
 80164be:	bf00      	nop
 80164c0:	370c      	adds	r7, #12
 80164c2:	46bd      	mov	sp, r7
 80164c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c8:	4770      	bx	lr

080164ca <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 80164ca:	b480      	push	{r7}
 80164cc:	b083      	sub	sp, #12
 80164ce:	af00      	add	r7, sp, #0
 80164d0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	699b      	ldr	r3, [r3, #24]
 80164d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	619a      	str	r2, [r3, #24]
}
 80164de:	bf00      	nop
 80164e0:	370c      	adds	r7, #12
 80164e2:	46bd      	mov	sp, r7
 80164e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e8:	4770      	bx	lr

080164ea <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 80164ea:	b480      	push	{r7}
 80164ec:	b083      	sub	sp, #12
 80164ee:	af00      	add	r7, sp, #0
 80164f0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	699b      	ldr	r3, [r3, #24]
 80164f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	619a      	str	r2, [r3, #24]
}
 80164fe:	bf00      	nop
 8016500:	370c      	adds	r7, #12
 8016502:	46bd      	mov	sp, r7
 8016504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016508:	4770      	bx	lr

0801650a <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 801650a:	b480      	push	{r7}
 801650c:	b083      	sub	sp, #12
 801650e:	af00      	add	r7, sp, #0
 8016510:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	699b      	ldr	r3, [r3, #24]
 8016516:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	619a      	str	r2, [r3, #24]
}
 801651e:	bf00      	nop
 8016520:	370c      	adds	r7, #12
 8016522:	46bd      	mov	sp, r7
 8016524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016528:	4770      	bx	lr

0801652a <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 801652a:	b480      	push	{r7}
 801652c:	b083      	sub	sp, #12
 801652e:	af00      	add	r7, sp, #0
 8016530:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	699b      	ldr	r3, [r3, #24]
 8016536:	f043 0220 	orr.w	r2, r3, #32
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	619a      	str	r2, [r3, #24]
}
 801653e:	bf00      	nop
 8016540:	370c      	adds	r7, #12
 8016542:	46bd      	mov	sp, r7
 8016544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016548:	4770      	bx	lr

0801654a <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 801654a:	b480      	push	{r7}
 801654c:	b083      	sub	sp, #12
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	699b      	ldr	r3, [r3, #24]
 8016556:	f043 0210 	orr.w	r2, r3, #16
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	619a      	str	r2, [r3, #24]
}
 801655e:	bf00      	nop
 8016560:	370c      	adds	r7, #12
 8016562:	46bd      	mov	sp, r7
 8016564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016568:	4770      	bx	lr

0801656a <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 801656a:	b480      	push	{r7}
 801656c:	b083      	sub	sp, #12
 801656e:	af00      	add	r7, sp, #0
 8016570:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	699b      	ldr	r3, [r3, #24]
 8016576:	f043 0208 	orr.w	r2, r3, #8
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	619a      	str	r2, [r3, #24]
}
 801657e:	bf00      	nop
 8016580:	370c      	adds	r7, #12
 8016582:	46bd      	mov	sp, r7
 8016584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016588:	4770      	bx	lr

0801658a <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 801658a:	b480      	push	{r7}
 801658c:	b083      	sub	sp, #12
 801658e:	af00      	add	r7, sp, #0
 8016590:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	699b      	ldr	r3, [r3, #24]
 8016596:	f043 0204 	orr.w	r2, r3, #4
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	619a      	str	r2, [r3, #24]
}
 801659e:	bf00      	nop
 80165a0:	370c      	adds	r7, #12
 80165a2:	46bd      	mov	sp, r7
 80165a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a8:	4770      	bx	lr

080165aa <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 80165aa:	b480      	push	{r7}
 80165ac:	b083      	sub	sp, #12
 80165ae:	af00      	add	r7, sp, #0
 80165b0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	699b      	ldr	r3, [r3, #24]
 80165b6:	f043 0202 	orr.w	r2, r3, #2
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	619a      	str	r2, [r3, #24]
}
 80165be:	bf00      	nop
 80165c0:	370c      	adds	r7, #12
 80165c2:	46bd      	mov	sp, r7
 80165c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c8:	4770      	bx	lr

080165ca <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 80165ca:	b580      	push	{r7, lr}
 80165cc:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 80165ce:	2000      	movs	r0, #0
 80165d0:	f000 f802 	bl	80165d8 <PORTx_IRQHandler>
}
 80165d4:	bf00      	nop
 80165d6:	bd80      	pop	{r7, pc}

080165d8 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b084      	sub	sp, #16
 80165dc:	af00      	add	r7, sp, #0
 80165de:	4603      	mov	r3, r0
 80165e0:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 80165e2:	79fa      	ldrb	r2, [r7, #7]
 80165e4:	4998      	ldr	r1, [pc, #608]	; (8016848 <PORTx_IRQHandler+0x270>)
 80165e6:	4613      	mov	r3, r2
 80165e8:	011b      	lsls	r3, r3, #4
 80165ea:	1a9b      	subs	r3, r3, r2
 80165ec:	009b      	lsls	r3, r3, #2
 80165ee:	440b      	add	r3, r1
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	695b      	ldr	r3, [r3, #20]
 80165f8:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	691a      	ldr	r2, [r3, #16]
 80165fe:	68bb      	ldr	r3, [r7, #8]
 8016600:	4013      	ands	r3, r2
 8016602:	2b00      	cmp	r3, #0
 8016604:	f000 81ca 	beq.w	801699c <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	f003 0302 	and.w	r3, r3, #2
 801660e:	2b00      	cmp	r3, #0
 8016610:	d035      	beq.n	801667e <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8016612:	68f8      	ldr	r0, [r7, #12]
 8016614:	f7ff ffc9 	bl	80165aa <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016618:	79fa      	ldrb	r2, [r7, #7]
 801661a:	498b      	ldr	r1, [pc, #556]	; (8016848 <PORTx_IRQHandler+0x270>)
 801661c:	4613      	mov	r3, r2
 801661e:	011b      	lsls	r3, r3, #4
 8016620:	1a9b      	subs	r3, r3, r2
 8016622:	009b      	lsls	r3, r3, #2
 8016624:	440b      	add	r3, r1
 8016626:	3304      	adds	r3, #4
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	6819      	ldr	r1, [r3, #0]
 801662c:	79fa      	ldrb	r2, [r7, #7]
 801662e:	4886      	ldr	r0, [pc, #536]	; (8016848 <PORTx_IRQHandler+0x270>)
 8016630:	4613      	mov	r3, r2
 8016632:	011b      	lsls	r3, r3, #4
 8016634:	1a9b      	subs	r3, r3, r2
 8016636:	009b      	lsls	r3, r3, #2
 8016638:	4403      	add	r3, r0
 801663a:	3304      	adds	r3, #4
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	f021 0201 	bic.w	r2, r1, #1
 8016642:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8016644:	bf00      	nop
 8016646:	79fa      	ldrb	r2, [r7, #7]
 8016648:	497f      	ldr	r1, [pc, #508]	; (8016848 <PORTx_IRQHandler+0x270>)
 801664a:	4613      	mov	r3, r2
 801664c:	011b      	lsls	r3, r3, #4
 801664e:	1a9b      	subs	r3, r3, r2
 8016650:	009b      	lsls	r3, r3, #2
 8016652:	440b      	add	r3, r1
 8016654:	3304      	adds	r3, #4
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	f003 0301 	and.w	r3, r3, #1
 801665e:	2b01      	cmp	r3, #1
 8016660:	d0f1      	beq.n	8016646 <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8016662:	79fa      	ldrb	r2, [r7, #7]
 8016664:	4978      	ldr	r1, [pc, #480]	; (8016848 <PORTx_IRQHandler+0x270>)
 8016666:	4613      	mov	r3, r2
 8016668:	011b      	lsls	r3, r3, #4
 801666a:	1a9b      	subs	r3, r3, r2
 801666c:	009b      	lsls	r3, r3, #2
 801666e:	440b      	add	r3, r1
 8016670:	3314      	adds	r3, #20
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	79fa      	ldrb	r2, [r7, #7]
 8016676:	2101      	movs	r1, #1
 8016678:	4610      	mov	r0, r2
 801667a:	4798      	blx	r3
      return;
 801667c:	e18e      	b.n	801699c <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	f003 0304 	and.w	r3, r3, #4
 8016684:	2b00      	cmp	r3, #0
 8016686:	d035      	beq.n	80166f4 <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8016688:	68f8      	ldr	r0, [r7, #12]
 801668a:	f7ff ff7e 	bl	801658a <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801668e:	79fa      	ldrb	r2, [r7, #7]
 8016690:	496d      	ldr	r1, [pc, #436]	; (8016848 <PORTx_IRQHandler+0x270>)
 8016692:	4613      	mov	r3, r2
 8016694:	011b      	lsls	r3, r3, #4
 8016696:	1a9b      	subs	r3, r3, r2
 8016698:	009b      	lsls	r3, r3, #2
 801669a:	440b      	add	r3, r1
 801669c:	3304      	adds	r3, #4
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	6819      	ldr	r1, [r3, #0]
 80166a2:	79fa      	ldrb	r2, [r7, #7]
 80166a4:	4868      	ldr	r0, [pc, #416]	; (8016848 <PORTx_IRQHandler+0x270>)
 80166a6:	4613      	mov	r3, r2
 80166a8:	011b      	lsls	r3, r3, #4
 80166aa:	1a9b      	subs	r3, r3, r2
 80166ac:	009b      	lsls	r3, r3, #2
 80166ae:	4403      	add	r3, r0
 80166b0:	3304      	adds	r3, #4
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	f021 0201 	bic.w	r2, r1, #1
 80166b8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 80166ba:	bf00      	nop
 80166bc:	79fa      	ldrb	r2, [r7, #7]
 80166be:	4962      	ldr	r1, [pc, #392]	; (8016848 <PORTx_IRQHandler+0x270>)
 80166c0:	4613      	mov	r3, r2
 80166c2:	011b      	lsls	r3, r3, #4
 80166c4:	1a9b      	subs	r3, r3, r2
 80166c6:	009b      	lsls	r3, r3, #2
 80166c8:	440b      	add	r3, r1
 80166ca:	3304      	adds	r3, #4
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	f003 0301 	and.w	r3, r3, #1
 80166d4:	2b01      	cmp	r3, #1
 80166d6:	d0f1      	beq.n	80166bc <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 80166d8:	79fa      	ldrb	r2, [r7, #7]
 80166da:	495b      	ldr	r1, [pc, #364]	; (8016848 <PORTx_IRQHandler+0x270>)
 80166dc:	4613      	mov	r3, r2
 80166de:	011b      	lsls	r3, r3, #4
 80166e0:	1a9b      	subs	r3, r3, r2
 80166e2:	009b      	lsls	r3, r3, #2
 80166e4:	440b      	add	r3, r1
 80166e6:	3314      	adds	r3, #20
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	79fa      	ldrb	r2, [r7, #7]
 80166ec:	2100      	movs	r1, #0
 80166ee:	4610      	mov	r0, r2
 80166f0:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 80166f2:	e153      	b.n	801699c <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 80166f4:	68bb      	ldr	r3, [r7, #8]
 80166f6:	f003 0308 	and.w	r3, r3, #8
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d035      	beq.n	801676a <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 80166fe:	68f8      	ldr	r0, [r7, #12]
 8016700:	f7ff ff33 	bl	801656a <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016704:	79fa      	ldrb	r2, [r7, #7]
 8016706:	4950      	ldr	r1, [pc, #320]	; (8016848 <PORTx_IRQHandler+0x270>)
 8016708:	4613      	mov	r3, r2
 801670a:	011b      	lsls	r3, r3, #4
 801670c:	1a9b      	subs	r3, r3, r2
 801670e:	009b      	lsls	r3, r3, #2
 8016710:	440b      	add	r3, r1
 8016712:	3304      	adds	r3, #4
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	6819      	ldr	r1, [r3, #0]
 8016718:	79fa      	ldrb	r2, [r7, #7]
 801671a:	484b      	ldr	r0, [pc, #300]	; (8016848 <PORTx_IRQHandler+0x270>)
 801671c:	4613      	mov	r3, r2
 801671e:	011b      	lsls	r3, r3, #4
 8016720:	1a9b      	subs	r3, r3, r2
 8016722:	009b      	lsls	r3, r3, #2
 8016724:	4403      	add	r3, r0
 8016726:	3304      	adds	r3, #4
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	f021 0201 	bic.w	r2, r1, #1
 801672e:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8016730:	bf00      	nop
 8016732:	79fa      	ldrb	r2, [r7, #7]
 8016734:	4944      	ldr	r1, [pc, #272]	; (8016848 <PORTx_IRQHandler+0x270>)
 8016736:	4613      	mov	r3, r2
 8016738:	011b      	lsls	r3, r3, #4
 801673a:	1a9b      	subs	r3, r3, r2
 801673c:	009b      	lsls	r3, r3, #2
 801673e:	440b      	add	r3, r1
 8016740:	3304      	adds	r3, #4
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	f003 0301 	and.w	r3, r3, #1
 801674a:	2b01      	cmp	r3, #1
 801674c:	d0f1      	beq.n	8016732 <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 801674e:	79fa      	ldrb	r2, [r7, #7]
 8016750:	493d      	ldr	r1, [pc, #244]	; (8016848 <PORTx_IRQHandler+0x270>)
 8016752:	4613      	mov	r3, r2
 8016754:	011b      	lsls	r3, r3, #4
 8016756:	1a9b      	subs	r3, r3, r2
 8016758:	009b      	lsls	r3, r3, #2
 801675a:	440b      	add	r3, r1
 801675c:	3314      	adds	r3, #20
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	79fa      	ldrb	r2, [r7, #7]
 8016762:	2102      	movs	r1, #2
 8016764:	4610      	mov	r0, r2
 8016766:	4798      	blx	r3
      return;
 8016768:	e118      	b.n	801699c <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 801676a:	68bb      	ldr	r3, [r7, #8]
 801676c:	f003 0310 	and.w	r3, r3, #16
 8016770:	2b00      	cmp	r3, #0
 8016772:	d003      	beq.n	801677c <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8016774:	68f8      	ldr	r0, [r7, #12]
 8016776:	f7ff fee8 	bl	801654a <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 801677a:	e10f      	b.n	801699c <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 801677c:	68bb      	ldr	r3, [r7, #8]
 801677e:	f003 0320 	and.w	r3, r3, #32
 8016782:	2b00      	cmp	r3, #0
 8016784:	d010      	beq.n	80167a8 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8016786:	68f8      	ldr	r0, [r7, #12]
 8016788:	f7ff fecf 	bl	801652a <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 801678c:	79fa      	ldrb	r2, [r7, #7]
 801678e:	492e      	ldr	r1, [pc, #184]	; (8016848 <PORTx_IRQHandler+0x270>)
 8016790:	4613      	mov	r3, r2
 8016792:	011b      	lsls	r3, r3, #4
 8016794:	1a9b      	subs	r3, r3, r2
 8016796:	009b      	lsls	r3, r3, #2
 8016798:	440b      	add	r3, r1
 801679a:	3324      	adds	r3, #36	; 0x24
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	79fa      	ldrb	r2, [r7, #7]
 80167a0:	2105      	movs	r1, #5
 80167a2:	4610      	mov	r0, r2
 80167a4:	4798      	blx	r3
      return;
 80167a6:	e0f9      	b.n	801699c <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d003      	beq.n	80167ba <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 80167b2:	68f8      	ldr	r0, [r7, #12]
 80167b4:	f7ff fea9 	bl	801650a <LL_UCPD_ClearFlag_TxUND>
      return;
 80167b8:	e0f0      	b.n	801699c <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 80167ba:	68bb      	ldr	r3, [r7, #8]
 80167bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d01e      	beq.n	8016802 <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167c8:	2b05      	cmp	r3, #5
 80167ca:	d10c      	bne.n	80167e6 <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 80167cc:	79fa      	ldrb	r2, [r7, #7]
 80167ce:	491e      	ldr	r1, [pc, #120]	; (8016848 <PORTx_IRQHandler+0x270>)
 80167d0:	4613      	mov	r3, r2
 80167d2:	011b      	lsls	r3, r3, #4
 80167d4:	1a9b      	subs	r3, r3, r2
 80167d6:	009b      	lsls	r3, r3, #2
 80167d8:	440b      	add	r3, r1
 80167da:	331c      	adds	r3, #28
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	79fa      	ldrb	r2, [r7, #7]
 80167e0:	2106      	movs	r1, #6
 80167e2:	4610      	mov	r0, r2
 80167e4:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 80167e6:	68f8      	ldr	r0, [r7, #12]
 80167e8:	f7ff fe7f 	bl	80164ea <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 80167ec:	79fa      	ldrb	r2, [r7, #7]
 80167ee:	4916      	ldr	r1, [pc, #88]	; (8016848 <PORTx_IRQHandler+0x270>)
 80167f0:	4613      	mov	r3, r2
 80167f2:	011b      	lsls	r3, r3, #4
 80167f4:	1a9b      	subs	r3, r3, r2
 80167f6:	009b      	lsls	r3, r3, #2
 80167f8:	440b      	add	r3, r1
 80167fa:	3338      	adds	r3, #56	; 0x38
 80167fc:	2201      	movs	r2, #1
 80167fe:	701a      	strb	r2, [r3, #0]
      return;
 8016800:	e0cc      	b.n	801699c <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8016802:	68bb      	ldr	r3, [r7, #8]
 8016804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016808:	2b00      	cmp	r3, #0
 801680a:	d010      	beq.n	801682e <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 801680c:	79fa      	ldrb	r2, [r7, #7]
 801680e:	490e      	ldr	r1, [pc, #56]	; (8016848 <PORTx_IRQHandler+0x270>)
 8016810:	4613      	mov	r3, r2
 8016812:	011b      	lsls	r3, r3, #4
 8016814:	1a9b      	subs	r3, r3, r2
 8016816:	009b      	lsls	r3, r3, #2
 8016818:	440b      	add	r3, r1
 801681a:	331c      	adds	r3, #28
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	79fa      	ldrb	r2, [r7, #7]
 8016820:	2105      	movs	r1, #5
 8016822:	4610      	mov	r0, r2
 8016824:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8016826:	68f8      	ldr	r0, [r7, #12]
 8016828:	f7ff fe4f 	bl	80164ca <LL_UCPD_ClearFlag_RxHRST>
      return;
 801682c:	e0b6      	b.n	801699c <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 801682e:	68bb      	ldr	r3, [r7, #8]
 8016830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016834:	2b00      	cmp	r3, #0
 8016836:	d00b      	beq.n	8016850 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 8016838:	4b04      	ldr	r3, [pc, #16]	; (801684c <PORTx_IRQHandler+0x274>)
 801683a:	2201      	movs	r2, #1
 801683c:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 801683e:	68f8      	ldr	r0, [r7, #12]
 8016840:	f7ff fe33 	bl	80164aa <LL_UCPD_ClearFlag_RxOvr>
      return;
 8016844:	e0aa      	b.n	801699c <PORTx_IRQHandler+0x3c4>
 8016846:	bf00      	nop
 8016848:	20001dc0 	.word	0x20001dc0
 801684c:	20001db4 	.word	0x20001db4
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016856:	2b00      	cmp	r3, #0
 8016858:	f000 8085 	beq.w	8016966 <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 801685c:	79fa      	ldrb	r2, [r7, #7]
 801685e:	4951      	ldr	r1, [pc, #324]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 8016860:	4613      	mov	r3, r2
 8016862:	011b      	lsls	r3, r3, #4
 8016864:	1a9b      	subs	r3, r3, r2
 8016866:	009b      	lsls	r3, r3, #2
 8016868:	440b      	add	r3, r1
 801686a:	3338      	adds	r3, #56	; 0x38
 801686c:	2200      	movs	r2, #0
 801686e:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8016870:	68f8      	ldr	r0, [r7, #12]
 8016872:	f7ff fe0a 	bl	801648a <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8016876:	79fa      	ldrb	r2, [r7, #7]
 8016878:	494a      	ldr	r1, [pc, #296]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 801687a:	4613      	mov	r3, r2
 801687c:	011b      	lsls	r3, r3, #4
 801687e:	1a9b      	subs	r3, r3, r2
 8016880:	009b      	lsls	r3, r3, #2
 8016882:	440b      	add	r3, r1
 8016884:	3308      	adds	r3, #8
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	6819      	ldr	r1, [r3, #0]
 801688a:	79fa      	ldrb	r2, [r7, #7]
 801688c:	4845      	ldr	r0, [pc, #276]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 801688e:	4613      	mov	r3, r2
 8016890:	011b      	lsls	r3, r3, #4
 8016892:	1a9b      	subs	r3, r3, r2
 8016894:	009b      	lsls	r3, r3, #2
 8016896:	4403      	add	r3, r0
 8016898:	3308      	adds	r3, #8
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	f021 0201 	bic.w	r2, r1, #1
 80168a0:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 80168a2:	bf00      	nop
 80168a4:	79fa      	ldrb	r2, [r7, #7]
 80168a6:	493f      	ldr	r1, [pc, #252]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 80168a8:	4613      	mov	r3, r2
 80168aa:	011b      	lsls	r3, r3, #4
 80168ac:	1a9b      	subs	r3, r3, r2
 80168ae:	009b      	lsls	r3, r3, #2
 80168b0:	440b      	add	r3, r1
 80168b2:	3308      	adds	r3, #8
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	f003 0301 	and.w	r3, r3, #1
 80168bc:	2b01      	cmp	r3, #1
 80168be:	d0f1      	beq.n	80168a4 <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80168c0:	79fa      	ldrb	r2, [r7, #7]
 80168c2:	4938      	ldr	r1, [pc, #224]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 80168c4:	4613      	mov	r3, r2
 80168c6:	011b      	lsls	r3, r3, #4
 80168c8:	1a9b      	subs	r3, r3, r2
 80168ca:	009b      	lsls	r3, r3, #2
 80168cc:	440b      	add	r3, r1
 80168ce:	3330      	adds	r3, #48	; 0x30
 80168d0:	6818      	ldr	r0, [r3, #0]
 80168d2:	79fa      	ldrb	r2, [r7, #7]
 80168d4:	4933      	ldr	r1, [pc, #204]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 80168d6:	4613      	mov	r3, r2
 80168d8:	011b      	lsls	r3, r3, #4
 80168da:	1a9b      	subs	r3, r3, r2
 80168dc:	009b      	lsls	r3, r3, #2
 80168de:	440b      	add	r3, r1
 80168e0:	3308      	adds	r3, #8
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	4602      	mov	r2, r0
 80168e6:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 80168e8:	79fa      	ldrb	r2, [r7, #7]
 80168ea:	492e      	ldr	r1, [pc, #184]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 80168ec:	4613      	mov	r3, r2
 80168ee:	011b      	lsls	r3, r3, #4
 80168f0:	1a9b      	subs	r3, r3, r2
 80168f2:	009b      	lsls	r3, r3, #2
 80168f4:	440b      	add	r3, r1
 80168f6:	3308      	adds	r3, #8
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	f44f 7284 	mov.w	r2, #264	; 0x108
 80168fe:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8016900:	79fa      	ldrb	r2, [r7, #7]
 8016902:	4928      	ldr	r1, [pc, #160]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 8016904:	4613      	mov	r3, r2
 8016906:	011b      	lsls	r3, r3, #4
 8016908:	1a9b      	subs	r3, r3, r2
 801690a:	009b      	lsls	r3, r3, #2
 801690c:	440b      	add	r3, r1
 801690e:	3308      	adds	r3, #8
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	6819      	ldr	r1, [r3, #0]
 8016914:	79fa      	ldrb	r2, [r7, #7]
 8016916:	4823      	ldr	r0, [pc, #140]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 8016918:	4613      	mov	r3, r2
 801691a:	011b      	lsls	r3, r3, #4
 801691c:	1a9b      	subs	r3, r3, r2
 801691e:	009b      	lsls	r3, r3, #2
 8016920:	4403      	add	r3, r0
 8016922:	3308      	adds	r3, #8
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	f041 0201 	orr.w	r2, r1, #1
 801692a:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016932:	2b00      	cmp	r3, #0
 8016934:	d113      	bne.n	801695e <PORTx_IRQHandler+0x386>
 8016936:	4b1c      	ldr	r3, [pc, #112]	; (80169a8 <PORTx_IRQHandler+0x3d0>)
 8016938:	781b      	ldrb	r3, [r3, #0]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d10f      	bne.n	801695e <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 801693e:	79fa      	ldrb	r2, [r7, #7]
 8016940:	4918      	ldr	r1, [pc, #96]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 8016942:	4613      	mov	r3, r2
 8016944:	011b      	lsls	r3, r3, #4
 8016946:	1a9b      	subs	r3, r3, r2
 8016948:	009b      	lsls	r3, r3, #2
 801694a:	440b      	add	r3, r1
 801694c:	3320      	adds	r3, #32
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	68fa      	ldr	r2, [r7, #12]
 8016952:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8016954:	f002 0107 	and.w	r1, r2, #7
 8016958:	79fa      	ldrb	r2, [r7, #7]
 801695a:	4610      	mov	r0, r2
 801695c:	4798      	blx	r3
      }
      ovrflag = 0;
 801695e:	4b12      	ldr	r3, [pc, #72]	; (80169a8 <PORTx_IRQHandler+0x3d0>)
 8016960:	2200      	movs	r2, #0
 8016962:	701a      	strb	r2, [r3, #0]
      return;
 8016964:	e01a      	b.n	801699c <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8016966:	68bb      	ldr	r3, [r7, #8]
 8016968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801696c:	2b00      	cmp	r3, #0
 801696e:	d104      	bne.n	801697a <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8016970:	68bb      	ldr	r3, [r7, #8]
 8016972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016976:	2b00      	cmp	r3, #0
 8016978:	d010      	beq.n	801699c <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 801697a:	68f8      	ldr	r0, [r7, #12]
 801697c:	f7ff fd75 	bl	801646a <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8016980:	68f8      	ldr	r0, [r7, #12]
 8016982:	f7ff fd62 	bl	801644a <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8016986:	79fa      	ldrb	r2, [r7, #7]
 8016988:	4906      	ldr	r1, [pc, #24]	; (80169a4 <PORTx_IRQHandler+0x3cc>)
 801698a:	4613      	mov	r3, r2
 801698c:	011b      	lsls	r3, r3, #4
 801698e:	1a9b      	subs	r3, r3, r2
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	440b      	add	r3, r1
 8016994:	332c      	adds	r3, #44	; 0x2c
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 801699a:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 801699c:	3710      	adds	r7, #16
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}
 80169a2:	bf00      	nop
 80169a4:	20001dc0 	.word	0x20001dc0
 80169a8:	20001db4 	.word	0x20001db4

080169ac <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 80169ac:	b480      	push	{r7}
 80169ae:	b085      	sub	sp, #20
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	60b9      	str	r1, [r7, #8]
 80169b4:	607a      	str	r2, [r7, #4]
 80169b6:	603b      	str	r3, [r7, #0]
 80169b8:	4603      	mov	r3, r0
 80169ba:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 80169bc:	7bfa      	ldrb	r2, [r7, #15]
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	6919      	ldr	r1, [r3, #16]
 80169c2:	482d      	ldr	r0, [pc, #180]	; (8016a78 <USBPD_PHY_Init+0xcc>)
 80169c4:	4613      	mov	r3, r2
 80169c6:	011b      	lsls	r3, r3, #4
 80169c8:	1a9b      	subs	r3, r3, r2
 80169ca:	009b      	lsls	r3, r3, #2
 80169cc:	4403      	add	r3, r0
 80169ce:	3314      	adds	r3, #20
 80169d0:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 80169d2:	7bfa      	ldrb	r2, [r7, #15]
 80169d4:	68bb      	ldr	r3, [r7, #8]
 80169d6:	68d9      	ldr	r1, [r3, #12]
 80169d8:	4827      	ldr	r0, [pc, #156]	; (8016a78 <USBPD_PHY_Init+0xcc>)
 80169da:	4613      	mov	r3, r2
 80169dc:	011b      	lsls	r3, r3, #4
 80169de:	1a9b      	subs	r3, r3, r2
 80169e0:	009b      	lsls	r3, r3, #2
 80169e2:	4403      	add	r3, r0
 80169e4:	3318      	adds	r3, #24
 80169e6:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 80169e8:	7bfa      	ldrb	r2, [r7, #15]
 80169ea:	68bb      	ldr	r3, [r7, #8]
 80169ec:	6859      	ldr	r1, [r3, #4]
 80169ee:	4822      	ldr	r0, [pc, #136]	; (8016a78 <USBPD_PHY_Init+0xcc>)
 80169f0:	4613      	mov	r3, r2
 80169f2:	011b      	lsls	r3, r3, #4
 80169f4:	1a9b      	subs	r3, r3, r2
 80169f6:	009b      	lsls	r3, r3, #2
 80169f8:	4403      	add	r3, r0
 80169fa:	331c      	adds	r3, #28
 80169fc:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 80169fe:	7bfa      	ldrb	r2, [r7, #15]
 8016a00:	491d      	ldr	r1, [pc, #116]	; (8016a78 <USBPD_PHY_Init+0xcc>)
 8016a02:	4613      	mov	r3, r2
 8016a04:	011b      	lsls	r3, r3, #4
 8016a06:	1a9b      	subs	r3, r3, r2
 8016a08:	009b      	lsls	r3, r3, #2
 8016a0a:	440b      	add	r3, r1
 8016a0c:	3320      	adds	r3, #32
 8016a0e:	4a1b      	ldr	r2, [pc, #108]	; (8016a7c <USBPD_PHY_Init+0xd0>)
 8016a10:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8016a12:	7bfa      	ldrb	r2, [r7, #15]
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	6899      	ldr	r1, [r3, #8]
 8016a18:	4817      	ldr	r0, [pc, #92]	; (8016a78 <USBPD_PHY_Init+0xcc>)
 8016a1a:	4613      	mov	r3, r2
 8016a1c:	011b      	lsls	r3, r3, #4
 8016a1e:	1a9b      	subs	r3, r3, r2
 8016a20:	009b      	lsls	r3, r3, #2
 8016a22:	4403      	add	r3, r0
 8016a24:	3324      	adds	r3, #36	; 0x24
 8016a26:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8016a28:	7bfa      	ldrb	r2, [r7, #15]
 8016a2a:	68bb      	ldr	r3, [r7, #8]
 8016a2c:	6959      	ldr	r1, [r3, #20]
 8016a2e:	4812      	ldr	r0, [pc, #72]	; (8016a78 <USBPD_PHY_Init+0xcc>)
 8016a30:	4613      	mov	r3, r2
 8016a32:	011b      	lsls	r3, r3, #4
 8016a34:	1a9b      	subs	r3, r3, r2
 8016a36:	009b      	lsls	r3, r3, #2
 8016a38:	4403      	add	r3, r0
 8016a3a:	3328      	adds	r3, #40	; 0x28
 8016a3c:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8016a3e:	7bfa      	ldrb	r2, [r7, #15]
 8016a40:	490d      	ldr	r1, [pc, #52]	; (8016a78 <USBPD_PHY_Init+0xcc>)
 8016a42:	4613      	mov	r3, r2
 8016a44:	011b      	lsls	r3, r3, #4
 8016a46:	1a9b      	subs	r3, r3, r2
 8016a48:	009b      	lsls	r3, r3, #2
 8016a4a:	440b      	add	r3, r1
 8016a4c:	3330      	adds	r3, #48	; 0x30
 8016a4e:	687a      	ldr	r2, [r7, #4]
 8016a50:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8016a52:	7bfb      	ldrb	r3, [r7, #15]
 8016a54:	4a0a      	ldr	r2, [pc, #40]	; (8016a80 <USBPD_PHY_Init+0xd4>)
 8016a56:	00db      	lsls	r3, r3, #3
 8016a58:	4413      	add	r3, r2
 8016a5a:	69ba      	ldr	r2, [r7, #24]
 8016a5c:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 8016a5e:	7bfb      	ldrb	r3, [r7, #15]
 8016a60:	68ba      	ldr	r2, [r7, #8]
 8016a62:	6812      	ldr	r2, [r2, #0]
 8016a64:	4906      	ldr	r1, [pc, #24]	; (8016a80 <USBPD_PHY_Init+0xd4>)
 8016a66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 8016a6a:	2300      	movs	r3, #0
}
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	3714      	adds	r7, #20
 8016a70:	46bd      	mov	sp, r7
 8016a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a76:	4770      	bx	lr
 8016a78:	20001dc0 	.word	0x20001dc0
 8016a7c:	08016c2d 	.word	0x08016c2d
 8016a80:	20001db8 	.word	0x20001db8

08016a84 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 8016a8e:	f240 3389 	movw	r3, #905	; 0x389
}
 8016a92:	4618      	mov	r0, r3
 8016a94:	370c      	adds	r7, #12
 8016a96:	46bd      	mov	sp, r7
 8016a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9c:	4770      	bx	lr

08016a9e <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 8016a9e:	b480      	push	{r7}
 8016aa0:	b083      	sub	sp, #12
 8016aa2:	af00      	add	r7, sp, #0
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	71fb      	strb	r3, [r7, #7]
  return 30u;
 8016aa8:	231e      	movs	r3, #30
}
 8016aaa:	4618      	mov	r0, r3
 8016aac:	370c      	adds	r7, #12
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab4:	4770      	bx	lr

08016ab6 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 8016ab6:	b480      	push	{r7}
 8016ab8:	b083      	sub	sp, #12
 8016aba:	af00      	add	r7, sp, #0
 8016abc:	4603      	mov	r3, r0
 8016abe:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 8016ac0:	bf00      	nop
 8016ac2:	370c      	adds	r7, #12
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aca:	4770      	bx	lr

08016acc <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b082      	sub	sp, #8
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	460a      	mov	r2, r1
 8016ad6:	71fb      	strb	r3, [r7, #7]
 8016ad8:	4613      	mov	r3, r2
 8016ada:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 8016adc:	79b9      	ldrb	r1, [r7, #6]
 8016ade:	79f8      	ldrb	r0, [r7, #7]
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	f000 f805 	bl	8016af2 <USBPD_PHY_SendMessage>
 8016ae8:	4603      	mov	r3, r0
}
 8016aea:	4618      	mov	r0, r3
 8016aec:	3708      	adds	r7, #8
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd80      	pop	{r7, pc}

08016af2 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 8016af2:	b580      	push	{r7, lr}
 8016af4:	b082      	sub	sp, #8
 8016af6:	af00      	add	r7, sp, #0
 8016af8:	603a      	str	r2, [r7, #0]
 8016afa:	461a      	mov	r2, r3
 8016afc:	4603      	mov	r3, r0
 8016afe:	71fb      	strb	r3, [r7, #7]
 8016b00:	460b      	mov	r3, r1
 8016b02:	71bb      	strb	r3, [r7, #6]
 8016b04:	4613      	mov	r3, r2
 8016b06:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8016b08:	88bb      	ldrh	r3, [r7, #4]
 8016b0a:	79b9      	ldrb	r1, [r7, #6]
 8016b0c:	79f8      	ldrb	r0, [r7, #7]
 8016b0e:	683a      	ldr	r2, [r7, #0]
 8016b10:	f000 fb0a 	bl	8017128 <USBPD_HW_IF_SendBuffer>
 8016b14:	4603      	mov	r3, r0
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3708      	adds	r7, #8
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}

08016b1e <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 8016b1e:	b580      	push	{r7, lr}
 8016b20:	b082      	sub	sp, #8
 8016b22:	af00      	add	r7, sp, #0
 8016b24:	4603      	mov	r3, r0
 8016b26:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8016b28:	79fb      	ldrb	r3, [r7, #7]
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f000 fc42 	bl	80173b4 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 8016b30:	2300      	movs	r3, #0
}
 8016b32:	4618      	mov	r0, r3
 8016b34:	3708      	adds	r7, #8
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}

08016b3a <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 8016b3a:	b580      	push	{r7, lr}
 8016b3c:	b082      	sub	sp, #8
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	4603      	mov	r3, r0
 8016b42:	460a      	mov	r2, r1
 8016b44:	71fb      	strb	r3, [r7, #7]
 8016b46:	4613      	mov	r3, r2
 8016b48:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 8016b4a:	79bb      	ldrb	r3, [r7, #6]
 8016b4c:	2b07      	cmp	r3, #7
 8016b4e:	d103      	bne.n	8016b58 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 8016b50:	79fb      	ldrb	r3, [r7, #7]
 8016b52:	4618      	mov	r0, r3
 8016b54:	f000 fab0 	bl	80170b8 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 8016b58:	2300      	movs	r3, #0
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	3708      	adds	r7, #8
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}

08016b62 <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8016b62:	b580      	push	{r7, lr}
 8016b64:	b082      	sub	sp, #8
 8016b66:	af00      	add	r7, sp, #0
 8016b68:	4603      	mov	r3, r0
 8016b6a:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 8016b6c:	79fb      	ldrb	r3, [r7, #7]
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f000 ffbc 	bl	8017aec <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 8016b74:	bf00      	nop
 8016b76:	3708      	adds	r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b082      	sub	sp, #8
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	4603      	mov	r3, r0
 8016b84:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 8016b86:	79fb      	ldrb	r3, [r7, #7]
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f000 ffc7 	bl	8017b1c <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 8016b8e:	bf00      	nop
 8016b90:	3708      	adds	r7, #8
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}
	...

08016b98 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 8016b98:	b480      	push	{r7}
 8016b9a:	b083      	sub	sp, #12
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	6039      	str	r1, [r7, #0]
 8016ba2:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 8016ba4:	79fb      	ldrb	r3, [r7, #7]
 8016ba6:	4a05      	ldr	r2, [pc, #20]	; (8016bbc <USBPD_PHY_SOPSupported+0x24>)
 8016ba8:	00db      	lsls	r3, r3, #3
 8016baa:	4413      	add	r3, r2
 8016bac:	683a      	ldr	r2, [r7, #0]
 8016bae:	605a      	str	r2, [r3, #4]
}
 8016bb0:	bf00      	nop
 8016bb2:	370c      	adds	r7, #12
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bba:	4770      	bx	lr
 8016bbc:	20001db8 	.word	0x20001db8

08016bc0 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 8016bca:	79fb      	ldrb	r3, [r7, #7]
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f000 ffbd 	bl	8017b4c <USBPD_HW_IF_IsResistor_SinkTxOk>
 8016bd2:	4603      	mov	r3, r0
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3708      	adds	r7, #8
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b082      	sub	sp, #8
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	4603      	mov	r3, r0
 8016be4:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 8016be6:	79fb      	ldrb	r3, [r7, #7]
 8016be8:	4618      	mov	r0, r3
 8016bea:	f000 ffef 	bl	8017bcc <USBPD_HW_IF_FastRoleSwapSignalling>
}
 8016bee:	bf00      	nop
 8016bf0:	3708      	adds	r7, #8
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}

08016bf6 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 8016bf6:	b580      	push	{r7, lr}
 8016bf8:	b082      	sub	sp, #8
 8016bfa:	af00      	add	r7, sp, #0
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 8016c00:	79fb      	ldrb	r3, [r7, #7]
 8016c02:	4618      	mov	r0, r3
 8016c04:	f000 fd74 	bl	80176f0 <USBPD_HW_IF_EnableRX>
}
 8016c08:	bf00      	nop
 8016c0a:	3708      	adds	r7, #8
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b082      	sub	sp, #8
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	4603      	mov	r3, r0
 8016c18:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 8016c1a:	79fb      	ldrb	r3, [r7, #7]
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f000 fd7d 	bl	801771c <USBPD_HW_IF_DisableRX>
}
 8016c22:	bf00      	nop
 8016c24:	3708      	adds	r7, #8
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd80      	pop	{r7, pc}
	...

08016c2c <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b084      	sub	sp, #16
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	4603      	mov	r3, r0
 8016c34:	6039      	str	r1, [r7, #0]
 8016c36:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8016c38:	4a28      	ldr	r2, [pc, #160]	; (8016cdc <PHY_Rx_Completed+0xb0>)
 8016c3a:	f107 0308 	add.w	r3, r7, #8
 8016c3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c42:	6018      	str	r0, [r3, #0]
 8016c44:	3304      	adds	r3, #4
 8016c46:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8016c48:	f107 0208 	add.w	r2, r7, #8
 8016c4c:	683b      	ldr	r3, [r7, #0]
 8016c4e:	4413      	add	r3, r2
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	73fb      	strb	r3, [r7, #15]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8016c54:	7bfb      	ldrb	r3, [r7, #15]
 8016c56:	2b04      	cmp	r3, #4
 8016c58:	dc02      	bgt.n	8016c60 <PHY_Rx_Completed+0x34>
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	da19      	bge.n	8016c92 <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 8016c5e:	e034      	b.n	8016cca <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 8016c60:	2b06      	cmp	r3, #6
 8016c62:	d132      	bne.n	8016cca <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8016c64:	79fb      	ldrb	r3, [r7, #7]
 8016c66:	4a1e      	ldr	r2, [pc, #120]	; (8016ce0 <PHY_Rx_Completed+0xb4>)
 8016c68:	00db      	lsls	r3, r3, #3
 8016c6a:	4413      	add	r3, r2
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	f003 031e 	and.w	r3, r3, #30
 8016c72:	2b1e      	cmp	r3, #30
 8016c74:	d12b      	bne.n	8016cce <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8016c76:	79fa      	ldrb	r2, [r7, #7]
 8016c78:	491a      	ldr	r1, [pc, #104]	; (8016ce4 <PHY_Rx_Completed+0xb8>)
 8016c7a:	4613      	mov	r3, r2
 8016c7c:	011b      	lsls	r3, r3, #4
 8016c7e:	1a9b      	subs	r3, r3, r2
 8016c80:	009b      	lsls	r3, r3, #2
 8016c82:	440b      	add	r3, r1
 8016c84:	331c      	adds	r3, #28
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	79fa      	ldrb	r2, [r7, #7]
 8016c8a:	2106      	movs	r1, #6
 8016c8c:	4610      	mov	r0, r2
 8016c8e:	4798      	blx	r3
      break;
 8016c90:	e01d      	b.n	8016cce <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 8016c92:	7bfb      	ldrb	r3, [r7, #15]
 8016c94:	2201      	movs	r2, #1
 8016c96:	fa02 f303 	lsl.w	r3, r2, r3
 8016c9a:	b2db      	uxtb	r3, r3
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	79fb      	ldrb	r3, [r7, #7]
 8016ca0:	4a0f      	ldr	r2, [pc, #60]	; (8016ce0 <PHY_Rx_Completed+0xb4>)
 8016ca2:	00db      	lsls	r3, r3, #3
 8016ca4:	4413      	add	r3, r2
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	7bfa      	ldrb	r2, [r7, #15]
 8016caa:	2101      	movs	r1, #1
 8016cac:	fa01 f202 	lsl.w	r2, r1, r2
 8016cb0:	b2d2      	uxtb	r2, r2
 8016cb2:	4013      	ands	r3, r2
 8016cb4:	4298      	cmp	r0, r3
 8016cb6:	d10c      	bne.n	8016cd2 <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 8016cb8:	79fb      	ldrb	r3, [r7, #7]
 8016cba:	4a09      	ldr	r2, [pc, #36]	; (8016ce0 <PHY_Rx_Completed+0xb4>)
 8016cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016cc0:	7bf9      	ldrb	r1, [r7, #15]
 8016cc2:	79fa      	ldrb	r2, [r7, #7]
 8016cc4:	4610      	mov	r0, r2
 8016cc6:	4798      	blx	r3
      break;
 8016cc8:	e003      	b.n	8016cd2 <PHY_Rx_Completed+0xa6>
      break;
 8016cca:	bf00      	nop
 8016ccc:	e002      	b.n	8016cd4 <PHY_Rx_Completed+0xa8>
      break;
 8016cce:	bf00      	nop
 8016cd0:	e000      	b.n	8016cd4 <PHY_Rx_Completed+0xa8>
      break;
 8016cd2:	bf00      	nop
  }
}
 8016cd4:	bf00      	nop
 8016cd6:	3710      	adds	r7, #16
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	08023444 	.word	0x08023444
 8016ce0:	20001db8 	.word	0x20001db8
 8016ce4:	20001dc0 	.word	0x20001dc0

08016ce8 <LL_AHB1_GRP1_EnableClock>:
{
 8016ce8:	b480      	push	{r7}
 8016cea:	b085      	sub	sp, #20
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8016cf0:	4b08      	ldr	r3, [pc, #32]	; (8016d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8016cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016cf4:	4907      	ldr	r1, [pc, #28]	; (8016d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	4313      	orrs	r3, r2
 8016cfa:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8016cfc:	4b05      	ldr	r3, [pc, #20]	; (8016d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8016cfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	4013      	ands	r3, r2
 8016d04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016d06:	68fb      	ldr	r3, [r7, #12]
}
 8016d08:	bf00      	nop
 8016d0a:	3714      	adds	r7, #20
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d12:	4770      	bx	lr
 8016d14:	40021000 	.word	0x40021000

08016d18 <LL_APB1_GRP1_EnableClock>:
{
 8016d18:	b480      	push	{r7}
 8016d1a:	b085      	sub	sp, #20
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8016d20:	4b08      	ldr	r3, [pc, #32]	; (8016d44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8016d22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016d24:	4907      	ldr	r1, [pc, #28]	; (8016d44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	4313      	orrs	r3, r2
 8016d2a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8016d2c:	4b05      	ldr	r3, [pc, #20]	; (8016d44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8016d2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	4013      	ands	r3, r2
 8016d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016d36:	68fb      	ldr	r3, [r7, #12]
}
 8016d38:	bf00      	nop
 8016d3a:	3714      	adds	r7, #20
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d42:	4770      	bx	lr
 8016d44:	40021000 	.word	0x40021000

08016d48 <LL_UCPD_Enable>:
{
 8016d48:	b480      	push	{r7}
 8016d4a:	b083      	sub	sp, #12
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	601a      	str	r2, [r3, #0]
}
 8016d5c:	bf00      	nop
 8016d5e:	370c      	adds	r7, #12
 8016d60:	46bd      	mov	sp, r7
 8016d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d66:	4770      	bx	lr

08016d68 <LL_UCPD_Disable>:
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b083      	sub	sp, #12
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	601a      	str	r2, [r3, #0]
}
 8016d7c:	bf00      	nop
 8016d7e:	370c      	adds	r7, #12
 8016d80:	46bd      	mov	sp, r7
 8016d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d86:	4770      	bx	lr

08016d88 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8016d88:	b480      	push	{r7}
 8016d8a:	b083      	sub	sp, #12
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	60da      	str	r2, [r3, #12]
}
 8016d9c:	bf00      	nop
 8016d9e:	370c      	adds	r7, #12
 8016da0:	46bd      	mov	sp, r7
 8016da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da6:	4770      	bx	lr

08016da8 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8016da8:	b480      	push	{r7}
 8016daa:	b083      	sub	sp, #12
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	68db      	ldr	r3, [r3, #12]
 8016db4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	60da      	str	r2, [r3, #12]
}
 8016dbc:	bf00      	nop
 8016dbe:	370c      	adds	r7, #12
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc6:	4770      	bx	lr

08016dc8 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8016dc8:	b480      	push	{r7}
 8016dca:	b083      	sub	sp, #12
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	68db      	ldr	r3, [r3, #12]
 8016dd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	60da      	str	r2, [r3, #12]
}
 8016ddc:	bf00      	nop
 8016dde:	370c      	adds	r7, #12
 8016de0:	46bd      	mov	sp, r7
 8016de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de6:	4770      	bx	lr

08016de8 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8016de8:	b480      	push	{r7}
 8016dea:	b083      	sub	sp, #12
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	68db      	ldr	r3, [r3, #12]
 8016df4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	60da      	str	r2, [r3, #12]
}
 8016dfc:	bf00      	nop
 8016dfe:	370c      	adds	r7, #12
 8016e00:	46bd      	mov	sp, r7
 8016e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e06:	4770      	bx	lr

08016e08 <LL_UCPD_SignalFRSTX>:
{
 8016e08:	b480      	push	{r7}
 8016e0a:	b083      	sub	sp, #12
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	68db      	ldr	r3, [r3, #12]
 8016e14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	60da      	str	r2, [r3, #12]
}
 8016e1c:	bf00      	nop
 8016e1e:	370c      	adds	r7, #12
 8016e20:	46bd      	mov	sp, r7
 8016e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e26:	4770      	bx	lr

08016e28 <LL_UCPD_FRSDetectionEnable>:
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b083      	sub	sp, #12
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	68db      	ldr	r3, [r3, #12]
 8016e34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	60da      	str	r2, [r3, #12]
}
 8016e3c:	bf00      	nop
 8016e3e:	370c      	adds	r7, #12
 8016e40:	46bd      	mov	sp, r7
 8016e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e46:	4770      	bx	lr

08016e48 <LL_UCPD_FRSDetectionDisable>:
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b083      	sub	sp, #12
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	68db      	ldr	r3, [r3, #12]
 8016e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	60da      	str	r2, [r3, #12]
}
 8016e5c:	bf00      	nop
 8016e5e:	370c      	adds	r7, #12
 8016e60:	46bd      	mov	sp, r7
 8016e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e66:	4770      	bx	lr

08016e68 <LL_UCPD_SetccEnable>:
{
 8016e68:	b480      	push	{r7}
 8016e6a:	b083      	sub	sp, #12
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	68db      	ldr	r3, [r3, #12]
 8016e76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	431a      	orrs	r2, r3
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	60da      	str	r2, [r3, #12]
}
 8016e82:	bf00      	nop
 8016e84:	370c      	adds	r7, #12
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr

08016e8e <LL_UCPD_SetSNKRole>:
{
 8016e8e:	b480      	push	{r7}
 8016e90:	b083      	sub	sp, #12
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	68db      	ldr	r3, [r3, #12]
 8016e9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	60da      	str	r2, [r3, #12]
}
 8016ea2:	bf00      	nop
 8016ea4:	370c      	adds	r7, #12
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eac:	4770      	bx	lr

08016eae <LL_UCPD_SetSRCRole>:
{
 8016eae:	b480      	push	{r7}
 8016eb0:	b083      	sub	sp, #12
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	68db      	ldr	r3, [r3, #12]
 8016eba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	60da      	str	r2, [r3, #12]
}
 8016ec2:	bf00      	nop
 8016ec4:	370c      	adds	r7, #12
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ecc:	4770      	bx	lr

08016ece <LL_UCPD_SetRpResistor>:
{
 8016ece:	b480      	push	{r7}
 8016ed0:	b083      	sub	sp, #12
 8016ed2:	af00      	add	r7, sp, #0
 8016ed4:	6078      	str	r0, [r7, #4]
 8016ed6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	68db      	ldr	r3, [r3, #12]
 8016edc:	f423 72c0 	bic.w	r2, r3, #384	; 0x180
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	431a      	orrs	r2, r3
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	60da      	str	r2, [r3, #12]
}
 8016ee8:	bf00      	nop
 8016eea:	370c      	adds	r7, #12
 8016eec:	46bd      	mov	sp, r7
 8016eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef2:	4770      	bx	lr

08016ef4 <LL_UCPD_SetCCPin>:
{
 8016ef4:	b480      	push	{r7}
 8016ef6:	b083      	sub	sp, #12
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	68db      	ldr	r3, [r3, #12]
 8016f02:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	431a      	orrs	r2, r3
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	60da      	str	r2, [r3, #12]
}
 8016f0e:	bf00      	nop
 8016f10:	370c      	adds	r7, #12
 8016f12:	46bd      	mov	sp, r7
 8016f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f18:	4770      	bx	lr

08016f1a <LL_UCPD_RxEnable>:
{
 8016f1a:	b480      	push	{r7}
 8016f1c:	b083      	sub	sp, #12
 8016f1e:	af00      	add	r7, sp, #0
 8016f20:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	68db      	ldr	r3, [r3, #12]
 8016f26:	f043 0220 	orr.w	r2, r3, #32
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	60da      	str	r2, [r3, #12]
}
 8016f2e:	bf00      	nop
 8016f30:	370c      	adds	r7, #12
 8016f32:	46bd      	mov	sp, r7
 8016f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f38:	4770      	bx	lr

08016f3a <LL_UCPD_RxDisable>:
{
 8016f3a:	b480      	push	{r7}
 8016f3c:	b083      	sub	sp, #12
 8016f3e:	af00      	add	r7, sp, #0
 8016f40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	68db      	ldr	r3, [r3, #12]
 8016f46:	f023 0220 	bic.w	r2, r3, #32
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	60da      	str	r2, [r3, #12]
}
 8016f4e:	bf00      	nop
 8016f50:	370c      	adds	r7, #12
 8016f52:	46bd      	mov	sp, r7
 8016f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f58:	4770      	bx	lr

08016f5a <LL_UCPD_SetRxMode>:
{
 8016f5a:	b480      	push	{r7}
 8016f5c:	b083      	sub	sp, #12
 8016f5e:	af00      	add	r7, sp, #0
 8016f60:	6078      	str	r0, [r7, #4]
 8016f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	68db      	ldr	r3, [r3, #12]
 8016f68:	f023 0210 	bic.w	r2, r3, #16
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	431a      	orrs	r2, r3
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	60da      	str	r2, [r3, #12]
}
 8016f74:	bf00      	nop
 8016f76:	370c      	adds	r7, #12
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7e:	4770      	bx	lr

08016f80 <LL_UCPD_SendHardReset>:
{
 8016f80:	b480      	push	{r7}
 8016f82:	b083      	sub	sp, #12
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	68db      	ldr	r3, [r3, #12]
 8016f8c:	f043 0208 	orr.w	r2, r3, #8
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	60da      	str	r2, [r3, #12]
}
 8016f94:	bf00      	nop
 8016f96:	370c      	adds	r7, #12
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9e:	4770      	bx	lr

08016fa0 <LL_UCPD_SendMessage>:
{
 8016fa0:	b480      	push	{r7}
 8016fa2:	b083      	sub	sp, #12
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	68db      	ldr	r3, [r3, #12]
 8016fac:	f043 0204 	orr.w	r2, r3, #4
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	60da      	str	r2, [r3, #12]
}
 8016fb4:	bf00      	nop
 8016fb6:	370c      	adds	r7, #12
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbe:	4770      	bx	lr

08016fc0 <LL_UCPD_SetTxMode>:
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	b083      	sub	sp, #12
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	68db      	ldr	r3, [r3, #12]
 8016fce:	f023 0203 	bic.w	r2, r3, #3
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	431a      	orrs	r2, r3
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	60da      	str	r2, [r3, #12]
}
 8016fda:	bf00      	nop
 8016fdc:	370c      	adds	r7, #12
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe4:	4770      	bx	lr

08016fe6 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8016fe6:	b480      	push	{r7}
 8016fe8:	b083      	sub	sp, #12
 8016fea:	af00      	add	r7, sp, #0
 8016fec:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	601a      	str	r2, [r3, #0]
}
 8016ffa:	bf00      	nop
 8016ffc:	370c      	adds	r7, #12
 8016ffe:	46bd      	mov	sp, r7
 8017000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017004:	4770      	bx	lr

08017006 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 8017006:	b480      	push	{r7}
 8017008:	b083      	sub	sp, #12
 801700a:	af00      	add	r7, sp, #0
 801700c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	601a      	str	r2, [r3, #0]
}
 801701a:	bf00      	nop
 801701c:	370c      	adds	r7, #12
 801701e:	46bd      	mov	sp, r7
 8017020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017024:	4770      	bx	lr

08017026 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8017026:	b480      	push	{r7}
 8017028:	b083      	sub	sp, #12
 801702a:	af00      	add	r7, sp, #0
 801702c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	601a      	str	r2, [r3, #0]
}
 801703a:	bf00      	nop
 801703c:	370c      	adds	r7, #12
 801703e:	46bd      	mov	sp, r7
 8017040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017044:	4770      	bx	lr

08017046 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8017046:	b480      	push	{r7}
 8017048:	b083      	sub	sp, #12
 801704a:	af00      	add	r7, sp, #0
 801704c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	601a      	str	r2, [r3, #0]
}
 801705a:	bf00      	nop
 801705c:	370c      	adds	r7, #12
 801705e:	46bd      	mov	sp, r7
 8017060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017064:	4770      	bx	lr

08017066 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8017066:	b480      	push	{r7}
 8017068:	b083      	sub	sp, #12
 801706a:	af00      	add	r7, sp, #0
 801706c:	6078      	str	r0, [r7, #4]
 801706e:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	683a      	ldr	r2, [r7, #0]
 8017074:	61da      	str	r2, [r3, #28]
}
 8017076:	bf00      	nop
 8017078:	370c      	adds	r7, #12
 801707a:	46bd      	mov	sp, r7
 801707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017080:	4770      	bx	lr

08017082 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8017082:	b480      	push	{r7}
 8017084:	b083      	sub	sp, #12
 8017086:	af00      	add	r7, sp, #0
 8017088:	6078      	str	r0, [r7, #4]
 801708a:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	683a      	ldr	r2, [r7, #0]
 8017090:	621a      	str	r2, [r3, #32]
}
 8017092:	bf00      	nop
 8017094:	370c      	adds	r7, #12
 8017096:	46bd      	mov	sp, r7
 8017098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709c:	4770      	bx	lr

0801709e <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 801709e:	b580      	push	{r7, lr}
 80170a0:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80170a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80170a6:	f7ff fe37 	bl	8016d18 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80170aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80170ae:	f7ff fe1b 	bl	8016ce8 <LL_AHB1_GRP1_EnableClock>
}
 80170b2:	bf00      	nop
 80170b4:	bd80      	pop	{r7, pc}
	...

080170b8 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b084      	sub	sp, #16
 80170bc:	af00      	add	r7, sp, #0
 80170be:	4603      	mov	r3, r0
 80170c0:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 80170c2:	79fa      	ldrb	r2, [r7, #7]
 80170c4:	4917      	ldr	r1, [pc, #92]	; (8017124 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80170c6:	4613      	mov	r3, r2
 80170c8:	011b      	lsls	r3, r3, #4
 80170ca:	1a9b      	subs	r3, r3, r2
 80170cc:	009b      	lsls	r3, r3, #2
 80170ce:	440b      	add	r3, r1
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	68db      	ldr	r3, [r3, #12]
 80170d4:	f023 0307 	bic.w	r3, r3, #7
 80170d8:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 80170da:	79fa      	ldrb	r2, [r7, #7]
 80170dc:	4911      	ldr	r1, [pc, #68]	; (8017124 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80170de:	4613      	mov	r3, r2
 80170e0:	011b      	lsls	r3, r3, #4
 80170e2:	1a9b      	subs	r3, r3, r2
 80170e4:	009b      	lsls	r3, r3, #2
 80170e6:	440b      	add	r3, r1
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7ff fe3c 	bl	8016d68 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 80170f0:	79fa      	ldrb	r2, [r7, #7]
 80170f2:	490c      	ldr	r1, [pc, #48]	; (8017124 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80170f4:	4613      	mov	r3, r2
 80170f6:	011b      	lsls	r3, r3, #4
 80170f8:	1a9b      	subs	r3, r3, r2
 80170fa:	009b      	lsls	r3, r3, #2
 80170fc:	440b      	add	r3, r1
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	4618      	mov	r0, r3
 8017102:	f7ff fe21 	bl	8016d48 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 8017106:	79fa      	ldrb	r2, [r7, #7]
 8017108:	4906      	ldr	r1, [pc, #24]	; (8017124 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801710a:	4613      	mov	r3, r2
 801710c:	011b      	lsls	r3, r3, #4
 801710e:	1a9b      	subs	r3, r3, r2
 8017110:	009b      	lsls	r3, r3, #2
 8017112:	440b      	add	r3, r1
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	68fa      	ldr	r2, [r7, #12]
 8017118:	60da      	str	r2, [r3, #12]
}
 801711a:	bf00      	nop
 801711c:	3710      	adds	r7, #16
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}
 8017122:	bf00      	nop
 8017124:	20001dc0 	.word	0x20001dc0

08017128 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b08a      	sub	sp, #40	; 0x28
 801712c:	af00      	add	r7, sp, #0
 801712e:	60ba      	str	r2, [r7, #8]
 8017130:	607b      	str	r3, [r7, #4]
 8017132:	4603      	mov	r3, r0
 8017134:	73fb      	strb	r3, [r7, #15]
 8017136:	460b      	mov	r3, r1
 8017138:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 801713a:	2300      	movs	r3, #0
 801713c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8017140:	7bbb      	ldrb	r3, [r7, #14]
 8017142:	2b05      	cmp	r3, #5
 8017144:	d10b      	bne.n	801715e <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8017146:	7bfa      	ldrb	r2, [r7, #15]
 8017148:	4996      	ldr	r1, [pc, #600]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 801714a:	4613      	mov	r3, r2
 801714c:	011b      	lsls	r3, r3, #4
 801714e:	1a9b      	subs	r3, r3, r2
 8017150:	009b      	lsls	r3, r3, #2
 8017152:	440b      	add	r3, r1
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	4618      	mov	r0, r3
 8017158:	f7ff ff12 	bl	8016f80 <LL_UCPD_SendHardReset>
 801715c:	e11b      	b.n	8017396 <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801715e:	f3ef 8310 	mrs	r3, PRIMASK
 8017162:	61fb      	str	r3, [r7, #28]
  return(result);
 8017164:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8017166:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8017168:	b672      	cpsid	i
}
 801716a:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 801716c:	7bfa      	ldrb	r2, [r7, #15]
 801716e:	498d      	ldr	r1, [pc, #564]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017170:	4613      	mov	r3, r2
 8017172:	011b      	lsls	r3, r3, #4
 8017174:	1a9b      	subs	r3, r3, r2
 8017176:	009b      	lsls	r3, r3, #2
 8017178:	440b      	add	r3, r1
 801717a:	3338      	adds	r3, #56	; 0x38
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	b2db      	uxtb	r3, r3
 8017180:	2b01      	cmp	r3, #1
 8017182:	d00d      	beq.n	80171a0 <USBPD_HW_IF_SendBuffer+0x78>
 8017184:	7bfa      	ldrb	r2, [r7, #15]
 8017186:	4987      	ldr	r1, [pc, #540]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017188:	4613      	mov	r3, r2
 801718a:	011b      	lsls	r3, r3, #4
 801718c:	1a9b      	subs	r3, r3, r2
 801718e:	009b      	lsls	r3, r3, #2
 8017190:	440b      	add	r3, r1
 8017192:	3304      	adds	r3, #4
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	f003 0301 	and.w	r3, r3, #1
 801719c:	2b01      	cmp	r3, #1
 801719e:	d109      	bne.n	80171b4 <USBPD_HW_IF_SendBuffer+0x8c>
 80171a0:	6a3b      	ldr	r3, [r7, #32]
 80171a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171a4:	69bb      	ldr	r3, [r7, #24]
 80171a6:	f383 8810 	msr	PRIMASK, r3
}
 80171aa:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 80171ac:	2302      	movs	r3, #2
 80171ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80171b2:	e0f0      	b.n	8017396 <USBPD_HW_IF_SendBuffer+0x26e>
 80171b4:	6a3b      	ldr	r3, [r7, #32]
 80171b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	f383 8810 	msr	PRIMASK, r3
}
 80171be:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 80171c0:	7bbb      	ldrb	r3, [r7, #14]
 80171c2:	2b07      	cmp	r3, #7
 80171c4:	d877      	bhi.n	80172b6 <USBPD_HW_IF_SendBuffer+0x18e>
 80171c6:	a201      	add	r2, pc, #4	; (adr r2, 80171cc <USBPD_HW_IF_SendBuffer+0xa4>)
 80171c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171cc:	080171ed 	.word	0x080171ed
 80171d0:	0801721f 	.word	0x0801721f
 80171d4:	08017251 	.word	0x08017251
 80171d8:	080172b7 	.word	0x080172b7
 80171dc:	080172b7 	.word	0x080172b7
 80171e0:	080172b7 	.word	0x080172b7
 80171e4:	08017283 	.word	0x08017283
 80171e8:	0801729d 	.word	0x0801729d
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 80171ec:	7bfa      	ldrb	r2, [r7, #15]
 80171ee:	496d      	ldr	r1, [pc, #436]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 80171f0:	4613      	mov	r3, r2
 80171f2:	011b      	lsls	r3, r3, #4
 80171f4:	1a9b      	subs	r3, r3, r2
 80171f6:	009b      	lsls	r3, r3, #2
 80171f8:	440b      	add	r3, r1
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	496a      	ldr	r1, [pc, #424]	; (80173a8 <USBPD_HW_IF_SendBuffer+0x280>)
 80171fe:	4618      	mov	r0, r3
 8017200:	f7ff ff31 	bl	8017066 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8017204:	7bfa      	ldrb	r2, [r7, #15]
 8017206:	4967      	ldr	r1, [pc, #412]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017208:	4613      	mov	r3, r2
 801720a:	011b      	lsls	r3, r3, #4
 801720c:	1a9b      	subs	r3, r3, r2
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	440b      	add	r3, r1
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	2100      	movs	r1, #0
 8017216:	4618      	mov	r0, r3
 8017218:	f7ff fed2 	bl	8016fc0 <LL_UCPD_SetTxMode>
          break;
 801721c:	e04f      	b.n	80172be <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 801721e:	7bfa      	ldrb	r2, [r7, #15]
 8017220:	4960      	ldr	r1, [pc, #384]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017222:	4613      	mov	r3, r2
 8017224:	011b      	lsls	r3, r3, #4
 8017226:	1a9b      	subs	r3, r3, r2
 8017228:	009b      	lsls	r3, r3, #2
 801722a:	440b      	add	r3, r1
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	495f      	ldr	r1, [pc, #380]	; (80173ac <USBPD_HW_IF_SendBuffer+0x284>)
 8017230:	4618      	mov	r0, r3
 8017232:	f7ff ff18 	bl	8017066 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8017236:	7bfa      	ldrb	r2, [r7, #15]
 8017238:	495a      	ldr	r1, [pc, #360]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 801723a:	4613      	mov	r3, r2
 801723c:	011b      	lsls	r3, r3, #4
 801723e:	1a9b      	subs	r3, r3, r2
 8017240:	009b      	lsls	r3, r3, #2
 8017242:	440b      	add	r3, r1
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	2100      	movs	r1, #0
 8017248:	4618      	mov	r0, r3
 801724a:	f7ff feb9 	bl	8016fc0 <LL_UCPD_SetTxMode>
          break;
 801724e:	e036      	b.n	80172be <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8017250:	7bfa      	ldrb	r2, [r7, #15]
 8017252:	4954      	ldr	r1, [pc, #336]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017254:	4613      	mov	r3, r2
 8017256:	011b      	lsls	r3, r3, #4
 8017258:	1a9b      	subs	r3, r3, r2
 801725a:	009b      	lsls	r3, r3, #2
 801725c:	440b      	add	r3, r1
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	4953      	ldr	r1, [pc, #332]	; (80173b0 <USBPD_HW_IF_SendBuffer+0x288>)
 8017262:	4618      	mov	r0, r3
 8017264:	f7ff feff 	bl	8017066 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8017268:	7bfa      	ldrb	r2, [r7, #15]
 801726a:	494e      	ldr	r1, [pc, #312]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 801726c:	4613      	mov	r3, r2
 801726e:	011b      	lsls	r3, r3, #4
 8017270:	1a9b      	subs	r3, r3, r2
 8017272:	009b      	lsls	r3, r3, #2
 8017274:	440b      	add	r3, r1
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	2100      	movs	r1, #0
 801727a:	4618      	mov	r0, r3
 801727c:	f7ff fea0 	bl	8016fc0 <LL_UCPD_SetTxMode>
          break;
 8017280:	e01d      	b.n	80172be <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8017282:	7bfa      	ldrb	r2, [r7, #15]
 8017284:	4947      	ldr	r1, [pc, #284]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017286:	4613      	mov	r3, r2
 8017288:	011b      	lsls	r3, r3, #4
 801728a:	1a9b      	subs	r3, r3, r2
 801728c:	009b      	lsls	r3, r3, #2
 801728e:	440b      	add	r3, r1
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	2101      	movs	r1, #1
 8017294:	4618      	mov	r0, r3
 8017296:	f7ff fe93 	bl	8016fc0 <LL_UCPD_SetTxMode>
          break;
 801729a:	e010      	b.n	80172be <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 801729c:	7bfa      	ldrb	r2, [r7, #15]
 801729e:	4941      	ldr	r1, [pc, #260]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 80172a0:	4613      	mov	r3, r2
 80172a2:	011b      	lsls	r3, r3, #4
 80172a4:	1a9b      	subs	r3, r3, r2
 80172a6:	009b      	lsls	r3, r3, #2
 80172a8:	440b      	add	r3, r1
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	2102      	movs	r1, #2
 80172ae:	4618      	mov	r0, r3
 80172b0:	f7ff fe86 	bl	8016fc0 <LL_UCPD_SetTxMode>
          break;
 80172b4:	e003      	b.n	80172be <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 80172b6:	2302      	movs	r3, #2
 80172b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80172bc:	bf00      	nop
      }

      if (USBPD_OK == _status)
 80172be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d167      	bne.n	8017396 <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80172c6:	7bfa      	ldrb	r2, [r7, #15]
 80172c8:	4936      	ldr	r1, [pc, #216]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 80172ca:	4613      	mov	r3, r2
 80172cc:	011b      	lsls	r3, r3, #4
 80172ce:	1a9b      	subs	r3, r3, r2
 80172d0:	009b      	lsls	r3, r3, #2
 80172d2:	440b      	add	r3, r1
 80172d4:	3304      	adds	r3, #4
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	6819      	ldr	r1, [r3, #0]
 80172da:	7bfa      	ldrb	r2, [r7, #15]
 80172dc:	4831      	ldr	r0, [pc, #196]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 80172de:	4613      	mov	r3, r2
 80172e0:	011b      	lsls	r3, r3, #4
 80172e2:	1a9b      	subs	r3, r3, r2
 80172e4:	009b      	lsls	r3, r3, #2
 80172e6:	4403      	add	r3, r0
 80172e8:	3304      	adds	r3, #4
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	f021 0201 	bic.w	r2, r1, #1
 80172f0:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 80172f2:	bf00      	nop
 80172f4:	7bfa      	ldrb	r2, [r7, #15]
 80172f6:	492b      	ldr	r1, [pc, #172]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 80172f8:	4613      	mov	r3, r2
 80172fa:	011b      	lsls	r3, r3, #4
 80172fc:	1a9b      	subs	r3, r3, r2
 80172fe:	009b      	lsls	r3, r3, #2
 8017300:	440b      	add	r3, r1
 8017302:	3304      	adds	r3, #4
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	f003 0301 	and.w	r3, r3, #1
 801730c:	2b01      	cmp	r3, #1
 801730e:	d0f1      	beq.n	80172f4 <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8017310:	7bfa      	ldrb	r2, [r7, #15]
 8017312:	4924      	ldr	r1, [pc, #144]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017314:	4613      	mov	r3, r2
 8017316:	011b      	lsls	r3, r3, #4
 8017318:	1a9b      	subs	r3, r3, r2
 801731a:	009b      	lsls	r3, r3, #2
 801731c:	440b      	add	r3, r1
 801731e:	3304      	adds	r3, #4
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	68ba      	ldr	r2, [r7, #8]
 8017324:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8017326:	7bfa      	ldrb	r2, [r7, #15]
 8017328:	491e      	ldr	r1, [pc, #120]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 801732a:	4613      	mov	r3, r2
 801732c:	011b      	lsls	r3, r3, #4
 801732e:	1a9b      	subs	r3, r3, r2
 8017330:	009b      	lsls	r3, r3, #2
 8017332:	440b      	add	r3, r1
 8017334:	3304      	adds	r3, #4
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	687a      	ldr	r2, [r7, #4]
 801733a:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801733c:	7bfa      	ldrb	r2, [r7, #15]
 801733e:	4919      	ldr	r1, [pc, #100]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017340:	4613      	mov	r3, r2
 8017342:	011b      	lsls	r3, r3, #4
 8017344:	1a9b      	subs	r3, r3, r2
 8017346:	009b      	lsls	r3, r3, #2
 8017348:	440b      	add	r3, r1
 801734a:	3304      	adds	r3, #4
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	6819      	ldr	r1, [r3, #0]
 8017350:	7bfa      	ldrb	r2, [r7, #15]
 8017352:	4814      	ldr	r0, [pc, #80]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017354:	4613      	mov	r3, r2
 8017356:	011b      	lsls	r3, r3, #4
 8017358:	1a9b      	subs	r3, r3, r2
 801735a:	009b      	lsls	r3, r3, #2
 801735c:	4403      	add	r3, r0
 801735e:	3304      	adds	r3, #4
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	f041 0201 	orr.w	r2, r1, #1
 8017366:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8017368:	7bfa      	ldrb	r2, [r7, #15]
 801736a:	490e      	ldr	r1, [pc, #56]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 801736c:	4613      	mov	r3, r2
 801736e:	011b      	lsls	r3, r3, #4
 8017370:	1a9b      	subs	r3, r3, r2
 8017372:	009b      	lsls	r3, r3, #2
 8017374:	440b      	add	r3, r1
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	6879      	ldr	r1, [r7, #4]
 801737a:	4618      	mov	r0, r3
 801737c:	f7ff fe81 	bl	8017082 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8017380:	7bfa      	ldrb	r2, [r7, #15]
 8017382:	4908      	ldr	r1, [pc, #32]	; (80173a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017384:	4613      	mov	r3, r2
 8017386:	011b      	lsls	r3, r3, #4
 8017388:	1a9b      	subs	r3, r3, r2
 801738a:	009b      	lsls	r3, r3, #2
 801738c:	440b      	add	r3, r1
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	4618      	mov	r0, r3
 8017392:	f7ff fe05 	bl	8016fa0 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8017396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801739a:	4618      	mov	r0, r3
 801739c:	3728      	adds	r7, #40	; 0x28
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	20001dc0 	.word	0x20001dc0
 80173a8:	0008e318 	.word	0x0008e318
 80173ac:	00031b18 	.word	0x00031b18
 80173b0:	000360d8 	.word	0x000360d8

080173b4 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b082      	sub	sp, #8
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	4603      	mov	r3, r0
 80173bc:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 80173be:	79fa      	ldrb	r2, [r7, #7]
 80173c0:	490c      	ldr	r1, [pc, #48]	; (80173f4 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 80173c2:	4613      	mov	r3, r2
 80173c4:	011b      	lsls	r3, r3, #4
 80173c6:	1a9b      	subs	r3, r3, r2
 80173c8:	009b      	lsls	r3, r3, #2
 80173ca:	440b      	add	r3, r1
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	2102      	movs	r1, #2
 80173d0:	4618      	mov	r0, r3
 80173d2:	f7ff fdf5 	bl	8016fc0 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80173d6:	79fa      	ldrb	r2, [r7, #7]
 80173d8:	4906      	ldr	r1, [pc, #24]	; (80173f4 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 80173da:	4613      	mov	r3, r2
 80173dc:	011b      	lsls	r3, r3, #4
 80173de:	1a9b      	subs	r3, r3, r2
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	440b      	add	r3, r1
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	4618      	mov	r0, r3
 80173e8:	f7ff fdda 	bl	8016fa0 <LL_UCPD_SendMessage>
}
 80173ec:	bf00      	nop
 80173ee:	3708      	adds	r7, #8
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}
 80173f4:	20001dc0 	.word	0x20001dc0

080173f8 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b082      	sub	sp, #8
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	4603      	mov	r3, r0
 8017400:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 8017402:	79fa      	ldrb	r2, [r7, #7]
 8017404:	4946      	ldr	r1, [pc, #280]	; (8017520 <USBPDM1_AssertRp+0x128>)
 8017406:	4613      	mov	r3, r2
 8017408:	011b      	lsls	r3, r3, #4
 801740a:	1a9b      	subs	r3, r3, r2
 801740c:	009b      	lsls	r3, r3, #2
 801740e:	440b      	add	r3, r1
 8017410:	3310      	adds	r3, #16
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	789b      	ldrb	r3, [r3, #2]
 8017416:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801741a:	b2db      	uxtb	r3, r3
 801741c:	2b02      	cmp	r3, #2
 801741e:	d021      	beq.n	8017464 <USBPDM1_AssertRp+0x6c>
 8017420:	2b02      	cmp	r3, #2
 8017422:	dc2d      	bgt.n	8017480 <USBPDM1_AssertRp+0x88>
 8017424:	2b00      	cmp	r3, #0
 8017426:	d002      	beq.n	801742e <USBPDM1_AssertRp+0x36>
 8017428:	2b01      	cmp	r3, #1
 801742a:	d00d      	beq.n	8017448 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 801742c:	e028      	b.n	8017480 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 801742e:	79fa      	ldrb	r2, [r7, #7]
 8017430:	493b      	ldr	r1, [pc, #236]	; (8017520 <USBPDM1_AssertRp+0x128>)
 8017432:	4613      	mov	r3, r2
 8017434:	011b      	lsls	r3, r3, #4
 8017436:	1a9b      	subs	r3, r3, r2
 8017438:	009b      	lsls	r3, r3, #2
 801743a:	440b      	add	r3, r1
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	2180      	movs	r1, #128	; 0x80
 8017440:	4618      	mov	r0, r3
 8017442:	f7ff fd44 	bl	8016ece <LL_UCPD_SetRpResistor>
      break;
 8017446:	e01c      	b.n	8017482 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8017448:	79fa      	ldrb	r2, [r7, #7]
 801744a:	4935      	ldr	r1, [pc, #212]	; (8017520 <USBPDM1_AssertRp+0x128>)
 801744c:	4613      	mov	r3, r2
 801744e:	011b      	lsls	r3, r3, #4
 8017450:	1a9b      	subs	r3, r3, r2
 8017452:	009b      	lsls	r3, r3, #2
 8017454:	440b      	add	r3, r1
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	f44f 7180 	mov.w	r1, #256	; 0x100
 801745c:	4618      	mov	r0, r3
 801745e:	f7ff fd36 	bl	8016ece <LL_UCPD_SetRpResistor>
      break;
 8017462:	e00e      	b.n	8017482 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8017464:	79fa      	ldrb	r2, [r7, #7]
 8017466:	492e      	ldr	r1, [pc, #184]	; (8017520 <USBPDM1_AssertRp+0x128>)
 8017468:	4613      	mov	r3, r2
 801746a:	011b      	lsls	r3, r3, #4
 801746c:	1a9b      	subs	r3, r3, r2
 801746e:	009b      	lsls	r3, r3, #2
 8017470:	440b      	add	r3, r1
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017478:	4618      	mov	r0, r3
 801747a:	f7ff fd28 	bl	8016ece <LL_UCPD_SetRpResistor>
      break;
 801747e:	e000      	b.n	8017482 <USBPDM1_AssertRp+0x8a>
      break;
 8017480:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8017482:	79fa      	ldrb	r2, [r7, #7]
 8017484:	4926      	ldr	r1, [pc, #152]	; (8017520 <USBPDM1_AssertRp+0x128>)
 8017486:	4613      	mov	r3, r2
 8017488:	011b      	lsls	r3, r3, #4
 801748a:	1a9b      	subs	r3, r3, r2
 801748c:	009b      	lsls	r3, r3, #2
 801748e:	440b      	add	r3, r1
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	2100      	movs	r1, #0
 8017494:	4618      	mov	r0, r3
 8017496:	f7ff fce7 	bl	8016e68 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801749a:	79fa      	ldrb	r2, [r7, #7]
 801749c:	4920      	ldr	r1, [pc, #128]	; (8017520 <USBPDM1_AssertRp+0x128>)
 801749e:	4613      	mov	r3, r2
 80174a0:	011b      	lsls	r3, r3, #4
 80174a2:	1a9b      	subs	r3, r3, r2
 80174a4:	009b      	lsls	r3, r3, #2
 80174a6:	440b      	add	r3, r1
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	4618      	mov	r0, r3
 80174ac:	f7ff fcff 	bl	8016eae <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 80174b0:	79fa      	ldrb	r2, [r7, #7]
 80174b2:	491b      	ldr	r1, [pc, #108]	; (8017520 <USBPDM1_AssertRp+0x128>)
 80174b4:	4613      	mov	r3, r2
 80174b6:	011b      	lsls	r3, r3, #4
 80174b8:	1a9b      	subs	r3, r3, r2
 80174ba:	009b      	lsls	r3, r3, #2
 80174bc:	440b      	add	r3, r1
 80174be:	3334      	adds	r3, #52	; 0x34
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d10d      	bne.n	80174e2 <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80174c6:	79fa      	ldrb	r2, [r7, #7]
 80174c8:	4915      	ldr	r1, [pc, #84]	; (8017520 <USBPDM1_AssertRp+0x128>)
 80174ca:	4613      	mov	r3, r2
 80174cc:	011b      	lsls	r3, r3, #4
 80174ce:	1a9b      	subs	r3, r3, r2
 80174d0:	009b      	lsls	r3, r3, #2
 80174d2:	440b      	add	r3, r1
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80174da:	4618      	mov	r0, r3
 80174dc:	f7ff fcc4 	bl	8016e68 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 80174e0:	e01a      	b.n	8017518 <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80174e2:	79fa      	ldrb	r2, [r7, #7]
 80174e4:	490e      	ldr	r1, [pc, #56]	; (8017520 <USBPDM1_AssertRp+0x128>)
 80174e6:	4613      	mov	r3, r2
 80174e8:	011b      	lsls	r3, r3, #4
 80174ea:	1a9b      	subs	r3, r3, r2
 80174ec:	009b      	lsls	r3, r3, #2
 80174ee:	440b      	add	r3, r1
 80174f0:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80174f2:	79fa      	ldrb	r2, [r7, #7]
 80174f4:	490a      	ldr	r1, [pc, #40]	; (8017520 <USBPDM1_AssertRp+0x128>)
 80174f6:	4613      	mov	r3, r2
 80174f8:	011b      	lsls	r3, r3, #4
 80174fa:	1a9b      	subs	r3, r3, r2
 80174fc:	009b      	lsls	r3, r3, #2
 80174fe:	440b      	add	r3, r1
 8017500:	3334      	adds	r3, #52	; 0x34
 8017502:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8017504:	2b01      	cmp	r3, #1
 8017506:	d102      	bne.n	801750e <USBPDM1_AssertRp+0x116>
 8017508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801750c:	e001      	b.n	8017512 <USBPDM1_AssertRp+0x11a>
 801750e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017512:	4619      	mov	r1, r3
 8017514:	f7ff fca8 	bl	8016e68 <LL_UCPD_SetccEnable>
}
 8017518:	bf00      	nop
 801751a:	3708      	adds	r7, #8
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}
 8017520:	20001dc0 	.word	0x20001dc0

08017524 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8017524:	b480      	push	{r7}
 8017526:	b083      	sub	sp, #12
 8017528:	af00      	add	r7, sp, #0
 801752a:	4603      	mov	r3, r0
 801752c:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 801752e:	bf00      	nop
 8017530:	370c      	adds	r7, #12
 8017532:	46bd      	mov	sp, r7
 8017534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017538:	4770      	bx	lr
	...

0801753c <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b082      	sub	sp, #8
 8017540:	af00      	add	r7, sp, #0
 8017542:	4603      	mov	r3, r0
 8017544:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8017546:	79fa      	ldrb	r2, [r7, #7]
 8017548:	493e      	ldr	r1, [pc, #248]	; (8017644 <USBPDM1_AssertRd+0x108>)
 801754a:	4613      	mov	r3, r2
 801754c:	011b      	lsls	r3, r3, #4
 801754e:	1a9b      	subs	r3, r3, r2
 8017550:	009b      	lsls	r3, r3, #2
 8017552:	440b      	add	r3, r1
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	4618      	mov	r0, r3
 8017558:	f7ff fc26 	bl	8016da8 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 801755c:	79fa      	ldrb	r2, [r7, #7]
 801755e:	4939      	ldr	r1, [pc, #228]	; (8017644 <USBPDM1_AssertRd+0x108>)
 8017560:	4613      	mov	r3, r2
 8017562:	011b      	lsls	r3, r3, #4
 8017564:	1a9b      	subs	r3, r3, r2
 8017566:	009b      	lsls	r3, r3, #2
 8017568:	440b      	add	r3, r1
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	4618      	mov	r0, r3
 801756e:	f7ff fc3b 	bl	8016de8 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8017572:	79fa      	ldrb	r2, [r7, #7]
 8017574:	4933      	ldr	r1, [pc, #204]	; (8017644 <USBPDM1_AssertRd+0x108>)
 8017576:	4613      	mov	r3, r2
 8017578:	011b      	lsls	r3, r3, #4
 801757a:	1a9b      	subs	r3, r3, r2
 801757c:	009b      	lsls	r3, r3, #2
 801757e:	440b      	add	r3, r1
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	2100      	movs	r1, #0
 8017584:	4618      	mov	r0, r3
 8017586:	f7ff fc6f 	bl	8016e68 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 801758a:	79fa      	ldrb	r2, [r7, #7]
 801758c:	492d      	ldr	r1, [pc, #180]	; (8017644 <USBPDM1_AssertRd+0x108>)
 801758e:	4613      	mov	r3, r2
 8017590:	011b      	lsls	r3, r3, #4
 8017592:	1a9b      	subs	r3, r3, r2
 8017594:	009b      	lsls	r3, r3, #2
 8017596:	440b      	add	r3, r1
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	4618      	mov	r0, r3
 801759c:	f7ff fc77 	bl	8016e8e <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 80175a0:	79fa      	ldrb	r2, [r7, #7]
 80175a2:	4928      	ldr	r1, [pc, #160]	; (8017644 <USBPDM1_AssertRd+0x108>)
 80175a4:	4613      	mov	r3, r2
 80175a6:	011b      	lsls	r3, r3, #4
 80175a8:	1a9b      	subs	r3, r3, r2
 80175aa:	009b      	lsls	r3, r3, #2
 80175ac:	440b      	add	r3, r1
 80175ae:	3334      	adds	r3, #52	; 0x34
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d10d      	bne.n	80175d2 <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80175b6:	79fa      	ldrb	r2, [r7, #7]
 80175b8:	4922      	ldr	r1, [pc, #136]	; (8017644 <USBPDM1_AssertRd+0x108>)
 80175ba:	4613      	mov	r3, r2
 80175bc:	011b      	lsls	r3, r3, #4
 80175be:	1a9b      	subs	r3, r3, r2
 80175c0:	009b      	lsls	r3, r3, #2
 80175c2:	440b      	add	r3, r1
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7ff fc4c 	bl	8016e68 <LL_UCPD_SetccEnable>
 80175d0:	e01a      	b.n	8017608 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80175d2:	79fa      	ldrb	r2, [r7, #7]
 80175d4:	491b      	ldr	r1, [pc, #108]	; (8017644 <USBPDM1_AssertRd+0x108>)
 80175d6:	4613      	mov	r3, r2
 80175d8:	011b      	lsls	r3, r3, #4
 80175da:	1a9b      	subs	r3, r3, r2
 80175dc:	009b      	lsls	r3, r3, #2
 80175de:	440b      	add	r3, r1
 80175e0:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80175e2:	79fa      	ldrb	r2, [r7, #7]
 80175e4:	4917      	ldr	r1, [pc, #92]	; (8017644 <USBPDM1_AssertRd+0x108>)
 80175e6:	4613      	mov	r3, r2
 80175e8:	011b      	lsls	r3, r3, #4
 80175ea:	1a9b      	subs	r3, r3, r2
 80175ec:	009b      	lsls	r3, r3, #2
 80175ee:	440b      	add	r3, r1
 80175f0:	3334      	adds	r3, #52	; 0x34
 80175f2:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	d102      	bne.n	80175fe <USBPDM1_AssertRd+0xc2>
 80175f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80175fc:	e001      	b.n	8017602 <USBPDM1_AssertRd+0xc6>
 80175fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017602:	4619      	mov	r1, r3
 8017604:	f7ff fc30 	bl	8016e68 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 8017608:	2001      	movs	r0, #1
 801760a:	f7f1 feb5 	bl	8009378 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 801760e:	79fa      	ldrb	r2, [r7, #7]
 8017610:	490c      	ldr	r1, [pc, #48]	; (8017644 <USBPDM1_AssertRd+0x108>)
 8017612:	4613      	mov	r3, r2
 8017614:	011b      	lsls	r3, r3, #4
 8017616:	1a9b      	subs	r3, r3, r2
 8017618:	009b      	lsls	r3, r3, #2
 801761a:	440b      	add	r3, r1
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	4618      	mov	r0, r3
 8017620:	f7ff fbb2 	bl	8016d88 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8017624:	79fa      	ldrb	r2, [r7, #7]
 8017626:	4907      	ldr	r1, [pc, #28]	; (8017644 <USBPDM1_AssertRd+0x108>)
 8017628:	4613      	mov	r3, r2
 801762a:	011b      	lsls	r3, r3, #4
 801762c:	1a9b      	subs	r3, r3, r2
 801762e:	009b      	lsls	r3, r3, #2
 8017630:	440b      	add	r3, r1
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	4618      	mov	r0, r3
 8017636:	f7ff fbc7 	bl	8016dc8 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 801763a:	bf00      	nop
 801763c:	3708      	adds	r7, #8
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}
 8017642:	bf00      	nop
 8017644:	20001dc0 	.word	0x20001dc0

08017648 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8017648:	b480      	push	{r7}
 801764a:	b083      	sub	sp, #12
 801764c:	af00      	add	r7, sp, #0
 801764e:	4603      	mov	r3, r0
 8017650:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8017652:	bf00      	nop
 8017654:	370c      	adds	r7, #12
 8017656:	46bd      	mov	sp, r7
 8017658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765c:	4770      	bx	lr
	...

08017660 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b082      	sub	sp, #8
 8017664:	af00      	add	r7, sp, #0
 8017666:	4603      	mov	r3, r0
 8017668:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801766a:	79fa      	ldrb	r2, [r7, #7]
 801766c:	491f      	ldr	r1, [pc, #124]	; (80176ec <USBPDM1_EnterErrorRecovery+0x8c>)
 801766e:	4613      	mov	r3, r2
 8017670:	011b      	lsls	r3, r3, #4
 8017672:	1a9b      	subs	r3, r3, r2
 8017674:	009b      	lsls	r3, r3, #2
 8017676:	440b      	add	r3, r1
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	4618      	mov	r0, r3
 801767c:	f7ff fc17 	bl	8016eae <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8017680:	79fa      	ldrb	r2, [r7, #7]
 8017682:	491a      	ldr	r1, [pc, #104]	; (80176ec <USBPDM1_EnterErrorRecovery+0x8c>)
 8017684:	4613      	mov	r3, r2
 8017686:	011b      	lsls	r3, r3, #4
 8017688:	1a9b      	subs	r3, r3, r2
 801768a:	009b      	lsls	r3, r3, #2
 801768c:	440b      	add	r3, r1
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	2100      	movs	r1, #0
 8017692:	4618      	mov	r0, r3
 8017694:	f7ff fc1b 	bl	8016ece <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8017698:	79fa      	ldrb	r2, [r7, #7]
 801769a:	4914      	ldr	r1, [pc, #80]	; (80176ec <USBPDM1_EnterErrorRecovery+0x8c>)
 801769c:	4613      	mov	r3, r2
 801769e:	011b      	lsls	r3, r3, #4
 80176a0:	1a9b      	subs	r3, r3, r2
 80176a2:	009b      	lsls	r3, r3, #2
 80176a4:	440b      	add	r3, r1
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	4618      	mov	r0, r3
 80176aa:	f7ff fc46 	bl	8016f3a <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80176ae:	79fa      	ldrb	r2, [r7, #7]
 80176b0:	490e      	ldr	r1, [pc, #56]	; (80176ec <USBPDM1_EnterErrorRecovery+0x8c>)
 80176b2:	4613      	mov	r3, r2
 80176b4:	011b      	lsls	r3, r3, #4
 80176b6:	1a9b      	subs	r3, r3, r2
 80176b8:	009b      	lsls	r3, r3, #2
 80176ba:	440b      	add	r3, r1
 80176bc:	330c      	adds	r3, #12
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	7a1b      	ldrb	r3, [r3, #8]
 80176c2:	f003 0302 	and.w	r3, r3, #2
 80176c6:	b2db      	uxtb	r3, r3
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d00a      	beq.n	80176e2 <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 80176cc:	79fa      	ldrb	r2, [r7, #7]
 80176ce:	4907      	ldr	r1, [pc, #28]	; (80176ec <USBPDM1_EnterErrorRecovery+0x8c>)
 80176d0:	4613      	mov	r3, r2
 80176d2:	011b      	lsls	r3, r3, #4
 80176d4:	1a9b      	subs	r3, r3, r2
 80176d6:	009b      	lsls	r3, r3, #2
 80176d8:	440b      	add	r3, r1
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	4618      	mov	r0, r3
 80176de:	f7ff fbb3 	bl	8016e48 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 80176e2:	bf00      	nop
 80176e4:	3708      	adds	r7, #8
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	20001dc0 	.word	0x20001dc0

080176f0 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b082      	sub	sp, #8
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	4603      	mov	r3, r0
 80176f8:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 80176fa:	79fa      	ldrb	r2, [r7, #7]
 80176fc:	4906      	ldr	r1, [pc, #24]	; (8017718 <USBPD_HW_IF_EnableRX+0x28>)
 80176fe:	4613      	mov	r3, r2
 8017700:	011b      	lsls	r3, r3, #4
 8017702:	1a9b      	subs	r3, r3, r2
 8017704:	009b      	lsls	r3, r3, #2
 8017706:	440b      	add	r3, r1
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	4618      	mov	r0, r3
 801770c:	f7ff fc05 	bl	8016f1a <LL_UCPD_RxEnable>
}
 8017710:	bf00      	nop
 8017712:	3708      	adds	r7, #8
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}
 8017718:	20001dc0 	.word	0x20001dc0

0801771c <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	af00      	add	r7, sp, #0
 8017722:	4603      	mov	r3, r0
 8017724:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8017726:	79fa      	ldrb	r2, [r7, #7]
 8017728:	4906      	ldr	r1, [pc, #24]	; (8017744 <USBPD_HW_IF_DisableRX+0x28>)
 801772a:	4613      	mov	r3, r2
 801772c:	011b      	lsls	r3, r3, #4
 801772e:	1a9b      	subs	r3, r3, r2
 8017730:	009b      	lsls	r3, r3, #2
 8017732:	440b      	add	r3, r1
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	4618      	mov	r0, r3
 8017738:	f7ff fbff 	bl	8016f3a <LL_UCPD_RxDisable>
}
 801773c:	bf00      	nop
 801773e:	3708      	adds	r7, #8
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}
 8017744:	20001dc0 	.word	0x20001dc0

08017748 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8017748:	b590      	push	{r4, r7, lr}
 801774a:	b085      	sub	sp, #20
 801774c:	af00      	add	r7, sp, #0
 801774e:	4603      	mov	r3, r0
 8017750:	6039      	str	r1, [r7, #0]
 8017752:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8017754:	f000 fc4e 	bl	8017ff4 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8017758:	79fc      	ldrb	r4, [r7, #7]
 801775a:	79fb      	ldrb	r3, [r7, #7]
 801775c:	4618      	mov	r0, r3
 801775e:	f7fe fe27 	bl	80163b0 <USBPD_HW_Init_DMATxInstance>
 8017762:	4602      	mov	r2, r0
 8017764:	499d      	ldr	r1, [pc, #628]	; (80179dc <HW_SignalAttachement+0x294>)
 8017766:	4623      	mov	r3, r4
 8017768:	011b      	lsls	r3, r3, #4
 801776a:	1b1b      	subs	r3, r3, r4
 801776c:	009b      	lsls	r3, r3, #2
 801776e:	440b      	add	r3, r1
 8017770:	3304      	adds	r3, #4
 8017772:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8017774:	79fc      	ldrb	r4, [r7, #7]
 8017776:	79fb      	ldrb	r3, [r7, #7]
 8017778:	4618      	mov	r0, r3
 801777a:	f7fe fdd9 	bl	8016330 <USBPD_HW_Init_DMARxInstance>
 801777e:	4602      	mov	r2, r0
 8017780:	4996      	ldr	r1, [pc, #600]	; (80179dc <HW_SignalAttachement+0x294>)
 8017782:	4623      	mov	r3, r4
 8017784:	011b      	lsls	r3, r3, #4
 8017786:	1b1b      	subs	r3, r3, r4
 8017788:	009b      	lsls	r3, r3, #2
 801778a:	440b      	add	r3, r1
 801778c:	3308      	adds	r3, #8
 801778e:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8017790:	79fa      	ldrb	r2, [r7, #7]
 8017792:	4992      	ldr	r1, [pc, #584]	; (80179dc <HW_SignalAttachement+0x294>)
 8017794:	4613      	mov	r3, r2
 8017796:	011b      	lsls	r3, r3, #4
 8017798:	1a9b      	subs	r3, r3, r2
 801779a:	009b      	lsls	r3, r3, #2
 801779c:	440b      	add	r3, r1
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	3330      	adds	r3, #48	; 0x30
 80177a2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 80177a4:	79fa      	ldrb	r2, [r7, #7]
 80177a6:	498d      	ldr	r1, [pc, #564]	; (80179dc <HW_SignalAttachement+0x294>)
 80177a8:	4613      	mov	r3, r2
 80177aa:	011b      	lsls	r3, r3, #4
 80177ac:	1a9b      	subs	r3, r3, r2
 80177ae:	009b      	lsls	r3, r3, #2
 80177b0:	440b      	add	r3, r1
 80177b2:	3308      	adds	r3, #8
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	68fa      	ldr	r2, [r7, #12]
 80177b8:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80177ba:	79fa      	ldrb	r2, [r7, #7]
 80177bc:	4987      	ldr	r1, [pc, #540]	; (80179dc <HW_SignalAttachement+0x294>)
 80177be:	4613      	mov	r3, r2
 80177c0:	011b      	lsls	r3, r3, #4
 80177c2:	1a9b      	subs	r3, r3, r2
 80177c4:	009b      	lsls	r3, r3, #2
 80177c6:	440b      	add	r3, r1
 80177c8:	3330      	adds	r3, #48	; 0x30
 80177ca:	6818      	ldr	r0, [r3, #0]
 80177cc:	79fa      	ldrb	r2, [r7, #7]
 80177ce:	4983      	ldr	r1, [pc, #524]	; (80179dc <HW_SignalAttachement+0x294>)
 80177d0:	4613      	mov	r3, r2
 80177d2:	011b      	lsls	r3, r3, #4
 80177d4:	1a9b      	subs	r3, r3, r2
 80177d6:	009b      	lsls	r3, r3, #2
 80177d8:	440b      	add	r3, r1
 80177da:	3308      	adds	r3, #8
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	4602      	mov	r2, r0
 80177e0:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 80177e2:	79fa      	ldrb	r2, [r7, #7]
 80177e4:	497d      	ldr	r1, [pc, #500]	; (80179dc <HW_SignalAttachement+0x294>)
 80177e6:	4613      	mov	r3, r2
 80177e8:	011b      	lsls	r3, r3, #4
 80177ea:	1a9b      	subs	r3, r3, r2
 80177ec:	009b      	lsls	r3, r3, #2
 80177ee:	440b      	add	r3, r1
 80177f0:	3308      	adds	r3, #8
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	f44f 7284 	mov.w	r2, #264	; 0x108
 80177f8:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 80177fa:	79fa      	ldrb	r2, [r7, #7]
 80177fc:	4977      	ldr	r1, [pc, #476]	; (80179dc <HW_SignalAttachement+0x294>)
 80177fe:	4613      	mov	r3, r2
 8017800:	011b      	lsls	r3, r3, #4
 8017802:	1a9b      	subs	r3, r3, r2
 8017804:	009b      	lsls	r3, r3, #2
 8017806:	440b      	add	r3, r1
 8017808:	3308      	adds	r3, #8
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	6819      	ldr	r1, [r3, #0]
 801780e:	79fa      	ldrb	r2, [r7, #7]
 8017810:	4872      	ldr	r0, [pc, #456]	; (80179dc <HW_SignalAttachement+0x294>)
 8017812:	4613      	mov	r3, r2
 8017814:	011b      	lsls	r3, r3, #4
 8017816:	1a9b      	subs	r3, r3, r2
 8017818:	009b      	lsls	r3, r3, #2
 801781a:	4403      	add	r3, r0
 801781c:	3308      	adds	r3, #8
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	f041 0201 	orr.w	r2, r1, #1
 8017824:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8017826:	79fa      	ldrb	r2, [r7, #7]
 8017828:	496c      	ldr	r1, [pc, #432]	; (80179dc <HW_SignalAttachement+0x294>)
 801782a:	4613      	mov	r3, r2
 801782c:	011b      	lsls	r3, r3, #4
 801782e:	1a9b      	subs	r3, r3, r2
 8017830:	009b      	lsls	r3, r3, #2
 8017832:	440b      	add	r3, r1
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	3324      	adds	r3, #36	; 0x24
 8017838:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 801783a:	79fa      	ldrb	r2, [r7, #7]
 801783c:	4967      	ldr	r1, [pc, #412]	; (80179dc <HW_SignalAttachement+0x294>)
 801783e:	4613      	mov	r3, r2
 8017840:	011b      	lsls	r3, r3, #4
 8017842:	1a9b      	subs	r3, r3, r2
 8017844:	009b      	lsls	r3, r3, #2
 8017846:	440b      	add	r3, r1
 8017848:	3304      	adds	r3, #4
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	68fa      	ldr	r2, [r7, #12]
 801784e:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8017850:	79fa      	ldrb	r2, [r7, #7]
 8017852:	4962      	ldr	r1, [pc, #392]	; (80179dc <HW_SignalAttachement+0x294>)
 8017854:	4613      	mov	r3, r2
 8017856:	011b      	lsls	r3, r3, #4
 8017858:	1a9b      	subs	r3, r3, r2
 801785a:	009b      	lsls	r3, r3, #2
 801785c:	440b      	add	r3, r1
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	6919      	ldr	r1, [r3, #16]
 8017862:	79fa      	ldrb	r2, [r7, #7]
 8017864:	485d      	ldr	r0, [pc, #372]	; (80179dc <HW_SignalAttachement+0x294>)
 8017866:	4613      	mov	r3, r2
 8017868:	011b      	lsls	r3, r3, #4
 801786a:	1a9b      	subs	r3, r3, r2
 801786c:	009b      	lsls	r3, r3, #2
 801786e:	4403      	add	r3, r0
 8017870:	681a      	ldr	r2, [r3, #0]
 8017872:	f441 53f3 	orr.w	r3, r1, #7776	; 0x1e60
 8017876:	f043 031e 	orr.w	r3, r3, #30
 801787a:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 801787c:	79fa      	ldrb	r2, [r7, #7]
 801787e:	4957      	ldr	r1, [pc, #348]	; (80179dc <HW_SignalAttachement+0x294>)
 8017880:	4613      	mov	r3, r2
 8017882:	011b      	lsls	r3, r3, #4
 8017884:	1a9b      	subs	r3, r3, r2
 8017886:	009b      	lsls	r3, r3, #2
 8017888:	440b      	add	r3, r1
 801788a:	3334      	adds	r3, #52	; 0x34
 801788c:	683a      	ldr	r2, [r7, #0]
 801788e:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8017890:	79fa      	ldrb	r2, [r7, #7]
 8017892:	4952      	ldr	r1, [pc, #328]	; (80179dc <HW_SignalAttachement+0x294>)
 8017894:	4613      	mov	r3, r2
 8017896:	011b      	lsls	r3, r3, #4
 8017898:	1a9b      	subs	r3, r3, r2
 801789a:	009b      	lsls	r3, r3, #2
 801789c:	440b      	add	r3, r1
 801789e:	6818      	ldr	r0, [r3, #0]
 80178a0:	79fa      	ldrb	r2, [r7, #7]
 80178a2:	494e      	ldr	r1, [pc, #312]	; (80179dc <HW_SignalAttachement+0x294>)
 80178a4:	4613      	mov	r3, r2
 80178a6:	011b      	lsls	r3, r3, #4
 80178a8:	1a9b      	subs	r3, r3, r2
 80178aa:	009b      	lsls	r3, r3, #2
 80178ac:	440b      	add	r3, r1
 80178ae:	3334      	adds	r3, #52	; 0x34
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	2b01      	cmp	r3, #1
 80178b4:	d101      	bne.n	80178ba <HW_SignalAttachement+0x172>
 80178b6:	2300      	movs	r3, #0
 80178b8:	e000      	b.n	80178bc <HW_SignalAttachement+0x174>
 80178ba:	2340      	movs	r3, #64	; 0x40
 80178bc:	4619      	mov	r1, r3
 80178be:	f7ff fb19 	bl	8016ef4 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80178c2:	79fa      	ldrb	r2, [r7, #7]
 80178c4:	4945      	ldr	r1, [pc, #276]	; (80179dc <HW_SignalAttachement+0x294>)
 80178c6:	4613      	mov	r3, r2
 80178c8:	011b      	lsls	r3, r3, #4
 80178ca:	1a9b      	subs	r3, r3, r2
 80178cc:	009b      	lsls	r3, r3, #2
 80178ce:	440b      	add	r3, r1
 80178d0:	330c      	adds	r3, #12
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	7a1b      	ldrb	r3, [r3, #8]
 80178d6:	f003 0302 	and.w	r3, r3, #2
 80178da:	b2db      	uxtb	r3, r3
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d031      	beq.n	8017944 <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 80178e0:	79fa      	ldrb	r2, [r7, #7]
 80178e2:	493e      	ldr	r1, [pc, #248]	; (80179dc <HW_SignalAttachement+0x294>)
 80178e4:	4613      	mov	r3, r2
 80178e6:	011b      	lsls	r3, r3, #4
 80178e8:	1a9b      	subs	r3, r3, r2
 80178ea:	009b      	lsls	r3, r3, #2
 80178ec:	440b      	add	r3, r1
 80178ee:	3334      	adds	r3, #52	; 0x34
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	2b01      	cmp	r3, #1
 80178f4:	d101      	bne.n	80178fa <HW_SignalAttachement+0x1b2>
 80178f6:	2201      	movs	r2, #1
 80178f8:	e000      	b.n	80178fc <HW_SignalAttachement+0x1b4>
 80178fa:	2202      	movs	r2, #2
 80178fc:	79fb      	ldrb	r3, [r7, #7]
 80178fe:	4611      	mov	r1, r2
 8017900:	4618      	mov	r0, r3
 8017902:	f7fe fd94 	bl	801642e <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8017906:	79fa      	ldrb	r2, [r7, #7]
 8017908:	4934      	ldr	r1, [pc, #208]	; (80179dc <HW_SignalAttachement+0x294>)
 801790a:	4613      	mov	r3, r2
 801790c:	011b      	lsls	r3, r3, #4
 801790e:	1a9b      	subs	r3, r3, r2
 8017910:	009b      	lsls	r3, r3, #2
 8017912:	440b      	add	r3, r1
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	4618      	mov	r0, r3
 8017918:	f7ff fa86 	bl	8016e28 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 801791c:	79fa      	ldrb	r2, [r7, #7]
 801791e:	492f      	ldr	r1, [pc, #188]	; (80179dc <HW_SignalAttachement+0x294>)
 8017920:	4613      	mov	r3, r2
 8017922:	011b      	lsls	r3, r3, #4
 8017924:	1a9b      	subs	r3, r3, r2
 8017926:	009b      	lsls	r3, r3, #2
 8017928:	440b      	add	r3, r1
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	6919      	ldr	r1, [r3, #16]
 801792e:	79fa      	ldrb	r2, [r7, #7]
 8017930:	482a      	ldr	r0, [pc, #168]	; (80179dc <HW_SignalAttachement+0x294>)
 8017932:	4613      	mov	r3, r2
 8017934:	011b      	lsls	r3, r3, #4
 8017936:	1a9b      	subs	r3, r3, r2
 8017938:	009b      	lsls	r3, r3, #2
 801793a:	4403      	add	r3, r0
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	f441 1280 	orr.w	r2, r1, #1048576	; 0x100000
 8017942:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8017944:	79fa      	ldrb	r2, [r7, #7]
 8017946:	4925      	ldr	r1, [pc, #148]	; (80179dc <HW_SignalAttachement+0x294>)
 8017948:	4613      	mov	r3, r2
 801794a:	011b      	lsls	r3, r3, #4
 801794c:	1a9b      	subs	r3, r3, r2
 801794e:	009b      	lsls	r3, r3, #2
 8017950:	440b      	add	r3, r1
 8017952:	3334      	adds	r3, #52	; 0x34
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	2b01      	cmp	r3, #1
 8017958:	d10d      	bne.n	8017976 <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 801795a:	79fa      	ldrb	r2, [r7, #7]
 801795c:	491f      	ldr	r1, [pc, #124]	; (80179dc <HW_SignalAttachement+0x294>)
 801795e:	4613      	mov	r3, r2
 8017960:	011b      	lsls	r3, r3, #4
 8017962:	1a9b      	subs	r3, r3, r2
 8017964:	009b      	lsls	r3, r3, #2
 8017966:	440b      	add	r3, r1
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801796e:	4618      	mov	r0, r3
 8017970:	f7ff fa7a 	bl	8016e68 <LL_UCPD_SetccEnable>
 8017974:	e00c      	b.n	8017990 <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8017976:	79fa      	ldrb	r2, [r7, #7]
 8017978:	4918      	ldr	r1, [pc, #96]	; (80179dc <HW_SignalAttachement+0x294>)
 801797a:	4613      	mov	r3, r2
 801797c:	011b      	lsls	r3, r3, #4
 801797e:	1a9b      	subs	r3, r3, r2
 8017980:	009b      	lsls	r3, r3, #2
 8017982:	440b      	add	r3, r1
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801798a:	4618      	mov	r0, r3
 801798c:	f7ff fa6c 	bl	8016e68 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8017990:	79fa      	ldrb	r2, [r7, #7]
 8017992:	4912      	ldr	r1, [pc, #72]	; (80179dc <HW_SignalAttachement+0x294>)
 8017994:	4613      	mov	r3, r2
 8017996:	011b      	lsls	r3, r3, #4
 8017998:	1a9b      	subs	r3, r3, r2
 801799a:	009b      	lsls	r3, r3, #2
 801799c:	440b      	add	r3, r1
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	2100      	movs	r1, #0
 80179a2:	4618      	mov	r0, r3
 80179a4:	f7ff fad9 	bl	8016f5a <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 80179a8:	79fa      	ldrb	r2, [r7, #7]
 80179aa:	490c      	ldr	r1, [pc, #48]	; (80179dc <HW_SignalAttachement+0x294>)
 80179ac:	4613      	mov	r3, r2
 80179ae:	011b      	lsls	r3, r3, #4
 80179b0:	1a9b      	subs	r3, r3, r2
 80179b2:	009b      	lsls	r3, r3, #2
 80179b4:	440b      	add	r3, r1
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	4618      	mov	r0, r3
 80179ba:	f7ff fb14 	bl	8016fe6 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 80179be:	79fa      	ldrb	r2, [r7, #7]
 80179c0:	4906      	ldr	r1, [pc, #24]	; (80179dc <HW_SignalAttachement+0x294>)
 80179c2:	4613      	mov	r3, r2
 80179c4:	011b      	lsls	r3, r3, #4
 80179c6:	1a9b      	subs	r3, r3, r2
 80179c8:	009b      	lsls	r3, r3, #2
 80179ca:	440b      	add	r3, r1
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7ff fb29 	bl	8017026 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80179d4:	bf00      	nop
 80179d6:	3714      	adds	r7, #20
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd90      	pop	{r4, r7, pc}
 80179dc:	20001dc0 	.word	0x20001dc0

080179e0 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	4603      	mov	r3, r0
 80179e8:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 80179ea:	79fa      	ldrb	r2, [r7, #7]
 80179ec:	493e      	ldr	r1, [pc, #248]	; (8017ae8 <HW_SignalDetachment+0x108>)
 80179ee:	4613      	mov	r3, r2
 80179f0:	011b      	lsls	r3, r3, #4
 80179f2:	1a9b      	subs	r3, r3, r2
 80179f4:	009b      	lsls	r3, r3, #2
 80179f6:	440b      	add	r3, r1
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	4618      	mov	r0, r3
 80179fc:	f7ff fb03 	bl	8017006 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 8017a00:	79fa      	ldrb	r2, [r7, #7]
 8017a02:	4939      	ldr	r1, [pc, #228]	; (8017ae8 <HW_SignalDetachment+0x108>)
 8017a04:	4613      	mov	r3, r2
 8017a06:	011b      	lsls	r3, r3, #4
 8017a08:	1a9b      	subs	r3, r3, r2
 8017a0a:	009b      	lsls	r3, r3, #2
 8017a0c:	440b      	add	r3, r1
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7ff fb18 	bl	8017046 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8017a16:	79fa      	ldrb	r2, [r7, #7]
 8017a18:	4933      	ldr	r1, [pc, #204]	; (8017ae8 <HW_SignalDetachment+0x108>)
 8017a1a:	4613      	mov	r3, r2
 8017a1c:	011b      	lsls	r3, r3, #4
 8017a1e:	1a9b      	subs	r3, r3, r2
 8017a20:	009b      	lsls	r3, r3, #2
 8017a22:	440b      	add	r3, r1
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	4618      	mov	r0, r3
 8017a28:	f7ff fa87 	bl	8016f3a <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 8017a2c:	79fa      	ldrb	r2, [r7, #7]
 8017a2e:	492e      	ldr	r1, [pc, #184]	; (8017ae8 <HW_SignalDetachment+0x108>)
 8017a30:	4613      	mov	r3, r2
 8017a32:	011b      	lsls	r3, r3, #4
 8017a34:	1a9b      	subs	r3, r3, r2
 8017a36:	009b      	lsls	r3, r3, #2
 8017a38:	440b      	add	r3, r1
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017a40:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8017a42:	79fb      	ldrb	r3, [r7, #7]
 8017a44:	4618      	mov	r0, r3
 8017a46:	f7fe fce7 	bl	8016418 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8017a4a:	79fb      	ldrb	r3, [r7, #7]
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f7fe fca3 	bl	8016398 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8017a52:	79fa      	ldrb	r2, [r7, #7]
 8017a54:	4924      	ldr	r1, [pc, #144]	; (8017ae8 <HW_SignalDetachment+0x108>)
 8017a56:	4613      	mov	r3, r2
 8017a58:	011b      	lsls	r3, r3, #4
 8017a5a:	1a9b      	subs	r3, r3, r2
 8017a5c:	009b      	lsls	r3, r3, #2
 8017a5e:	440b      	add	r3, r1
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8017a66:	4618      	mov	r0, r3
 8017a68:	f7ff f9fe 	bl	8016e68 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8017a6c:	79fa      	ldrb	r2, [r7, #7]
 8017a6e:	491e      	ldr	r1, [pc, #120]	; (8017ae8 <HW_SignalDetachment+0x108>)
 8017a70:	4613      	mov	r3, r2
 8017a72:	011b      	lsls	r3, r3, #4
 8017a74:	1a9b      	subs	r3, r3, r2
 8017a76:	009b      	lsls	r3, r3, #2
 8017a78:	440b      	add	r3, r1
 8017a7a:	3310      	adds	r3, #16
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	f003 0304 	and.w	r3, r3, #4
 8017a84:	b2db      	uxtb	r3, r3
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d103      	bne.n	8017a92 <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8017a8a:	79fb      	ldrb	r3, [r7, #7]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f007 f8b7 	bl	801ec00 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8017a92:	79fa      	ldrb	r2, [r7, #7]
 8017a94:	4914      	ldr	r1, [pc, #80]	; (8017ae8 <HW_SignalDetachment+0x108>)
 8017a96:	4613      	mov	r3, r2
 8017a98:	011b      	lsls	r3, r3, #4
 8017a9a:	1a9b      	subs	r3, r3, r2
 8017a9c:	009b      	lsls	r3, r3, #2
 8017a9e:	440b      	add	r3, r1
 8017aa0:	330c      	adds	r3, #12
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	7a1b      	ldrb	r3, [r3, #8]
 8017aa6:	f003 0302 	and.w	r3, r3, #2
 8017aaa:	b2db      	uxtb	r3, r3
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d00a      	beq.n	8017ac6 <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8017ab0:	79fa      	ldrb	r2, [r7, #7]
 8017ab2:	490d      	ldr	r1, [pc, #52]	; (8017ae8 <HW_SignalDetachment+0x108>)
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	011b      	lsls	r3, r3, #4
 8017ab8:	1a9b      	subs	r3, r3, r2
 8017aba:	009b      	lsls	r3, r3, #2
 8017abc:	440b      	add	r3, r1
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7ff f9c1 	bl	8016e48 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 8017ac6:	79fa      	ldrb	r2, [r7, #7]
 8017ac8:	4907      	ldr	r1, [pc, #28]	; (8017ae8 <HW_SignalDetachment+0x108>)
 8017aca:	4613      	mov	r3, r2
 8017acc:	011b      	lsls	r3, r3, #4
 8017ace:	1a9b      	subs	r3, r3, r2
 8017ad0:	009b      	lsls	r3, r3, #2
 8017ad2:	440b      	add	r3, r1
 8017ad4:	3334      	adds	r3, #52	; 0x34
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 8017ada:	f000 fb13 	bl	8018104 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8017ade:	bf00      	nop
 8017ae0:	3708      	adds	r7, #8
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd80      	pop	{r7, pc}
 8017ae6:	bf00      	nop
 8017ae8:	20001dc0 	.word	0x20001dc0

08017aec <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	4603      	mov	r3, r0
 8017af4:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8017af6:	79fa      	ldrb	r2, [r7, #7]
 8017af8:	4907      	ldr	r1, [pc, #28]	; (8017b18 <USBPD_HW_IF_SetResistor_SinkTxNG+0x2c>)
 8017afa:	4613      	mov	r3, r2
 8017afc:	011b      	lsls	r3, r3, #4
 8017afe:	1a9b      	subs	r3, r3, r2
 8017b00:	009b      	lsls	r3, r3, #2
 8017b02:	440b      	add	r3, r1
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7ff f9df 	bl	8016ece <LL_UCPD_SetRpResistor>
}
 8017b10:	bf00      	nop
 8017b12:	3708      	adds	r7, #8
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}
 8017b18:	20001dc0 	.word	0x20001dc0

08017b1c <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b082      	sub	sp, #8
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	4603      	mov	r3, r0
 8017b24:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8017b26:	79fa      	ldrb	r2, [r7, #7]
 8017b28:	4907      	ldr	r1, [pc, #28]	; (8017b48 <USBPD_HW_IF_SetResistor_SinkTxOK+0x2c>)
 8017b2a:	4613      	mov	r3, r2
 8017b2c:	011b      	lsls	r3, r3, #4
 8017b2e:	1a9b      	subs	r3, r3, r2
 8017b30:	009b      	lsls	r3, r3, #2
 8017b32:	440b      	add	r3, r1
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7ff f9c7 	bl	8016ece <LL_UCPD_SetRpResistor>
}
 8017b40:	bf00      	nop
 8017b42:	3708      	adds	r7, #8
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	20001dc0 	.word	0x20001dc0

08017b4c <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8017b4c:	b480      	push	{r7}
 8017b4e:	b083      	sub	sp, #12
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	4603      	mov	r3, r0
 8017b54:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8017b56:	79fa      	ldrb	r2, [r7, #7]
 8017b58:	491b      	ldr	r1, [pc, #108]	; (8017bc8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8017b5a:	4613      	mov	r3, r2
 8017b5c:	011b      	lsls	r3, r3, #4
 8017b5e:	1a9b      	subs	r3, r3, r2
 8017b60:	009b      	lsls	r3, r3, #2
 8017b62:	440b      	add	r3, r1
 8017b64:	3334      	adds	r3, #52	; 0x34
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	2b01      	cmp	r3, #1
 8017b6a:	d002      	beq.n	8017b72 <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 8017b6c:	2b02      	cmp	r3, #2
 8017b6e:	d010      	beq.n	8017b92 <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 8017b70:	e022      	b.n	8017bb8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 8017b72:	79fa      	ldrb	r2, [r7, #7]
 8017b74:	4914      	ldr	r1, [pc, #80]	; (8017bc8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8017b76:	4613      	mov	r3, r2
 8017b78:	011b      	lsls	r3, r3, #4
 8017b7a:	1a9b      	subs	r3, r3, r2
 8017b7c:	009b      	lsls	r3, r3, #2
 8017b7e:	440b      	add	r3, r1
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	695b      	ldr	r3, [r3, #20]
 8017b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017b88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017b8c:	d111      	bne.n	8017bb2 <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 8017b8e:	2301      	movs	r3, #1
 8017b90:	e013      	b.n	8017bba <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8017b92:	79fa      	ldrb	r2, [r7, #7]
 8017b94:	490c      	ldr	r1, [pc, #48]	; (8017bc8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8017b96:	4613      	mov	r3, r2
 8017b98:	011b      	lsls	r3, r3, #4
 8017b9a:	1a9b      	subs	r3, r3, r2
 8017b9c:	009b      	lsls	r3, r3, #2
 8017b9e:	440b      	add	r3, r1
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	695b      	ldr	r3, [r3, #20]
 8017ba4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8017ba8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8017bac:	d103      	bne.n	8017bb6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 8017bae:	2301      	movs	r3, #1
 8017bb0:	e003      	b.n	8017bba <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 8017bb2:	bf00      	nop
 8017bb4:	e000      	b.n	8017bb8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 8017bb6:	bf00      	nop
  }

  return USBPD_FALSE;
 8017bb8:	2300      	movs	r3, #0
}
 8017bba:	4618      	mov	r0, r3
 8017bbc:	370c      	adds	r7, #12
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc4:	4770      	bx	lr
 8017bc6:	bf00      	nop
 8017bc8:	20001dc0 	.word	0x20001dc0

08017bcc <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 8017bd6:	79fa      	ldrb	r2, [r7, #7]
 8017bd8:	4906      	ldr	r1, [pc, #24]	; (8017bf4 <USBPD_HW_IF_FastRoleSwapSignalling+0x28>)
 8017bda:	4613      	mov	r3, r2
 8017bdc:	011b      	lsls	r3, r3, #4
 8017bde:	1a9b      	subs	r3, r3, r2
 8017be0:	009b      	lsls	r3, r3, #2
 8017be2:	440b      	add	r3, r1
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7ff f90e 	bl	8016e08 <LL_UCPD_SignalFRSTX>
}
 8017bec:	bf00      	nop
 8017bee:	3708      	adds	r7, #8
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd80      	pop	{r7, pc}
 8017bf4:	20001dc0 	.word	0x20001dc0

08017bf8 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b084      	sub	sp, #16
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	4603      	mov	r3, r0
 8017c00:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8017c02:	79fb      	ldrb	r3, [r7, #7]
 8017c04:	f107 020c 	add.w	r2, r7, #12
 8017c08:	4611      	mov	r1, r2
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f007 f80c 	bl	801ec28 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	b29b      	uxth	r3, r3
}
 8017c14:	4618      	mov	r0, r3
 8017c16:	3710      	adds	r7, #16
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd80      	pop	{r7, pc}

08017c1c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8017c1c:	b480      	push	{r7}
 8017c1e:	b085      	sub	sp, #20
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8017c24:	4b08      	ldr	r3, [pc, #32]	; (8017c48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8017c26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017c28:	4907      	ldr	r1, [pc, #28]	; (8017c48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	4313      	orrs	r3, r2
 8017c2e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8017c30:	4b05      	ldr	r3, [pc, #20]	; (8017c48 <LL_APB2_GRP1_EnableClock+0x2c>)
 8017c32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	4013      	ands	r3, r2
 8017c38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
}
 8017c3c:	bf00      	nop
 8017c3e:	3714      	adds	r7, #20
 8017c40:	46bd      	mov	sp, r7
 8017c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c46:	4770      	bx	lr
 8017c48:	40021000 	.word	0x40021000

08017c4c <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8017c4c:	b480      	push	{r7}
 8017c4e:	b083      	sub	sp, #12
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8017c54:	4b06      	ldr	r3, [pc, #24]	; (8017c70 <LL_APB2_GRP1_DisableClock+0x24>)
 8017c56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	43db      	mvns	r3, r3
 8017c5c:	4904      	ldr	r1, [pc, #16]	; (8017c70 <LL_APB2_GRP1_DisableClock+0x24>)
 8017c5e:	4013      	ands	r3, r2
 8017c60:	660b      	str	r3, [r1, #96]	; 0x60
}
 8017c62:	bf00      	nop
 8017c64:	370c      	adds	r7, #12
 8017c66:	46bd      	mov	sp, r7
 8017c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6c:	4770      	bx	lr
 8017c6e:	bf00      	nop
 8017c70:	40021000 	.word	0x40021000

08017c74 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8017c74:	b480      	push	{r7}
 8017c76:	b083      	sub	sp, #12
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	f043 0201 	orr.w	r2, r3, #1
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	601a      	str	r2, [r3, #0]
}
 8017c88:	bf00      	nop
 8017c8a:	370c      	adds	r7, #12
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c92:	4770      	bx	lr

08017c94 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8017c94:	b480      	push	{r7}
 8017c96:	b083      	sub	sp, #12
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
 8017c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8017ca6:	683b      	ldr	r3, [r7, #0]
 8017ca8:	431a      	orrs	r2, r3
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	601a      	str	r2, [r3, #0]
}
 8017cae:	bf00      	nop
 8017cb0:	370c      	adds	r7, #12
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb8:	4770      	bx	lr

08017cba <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8017cba:	b480      	push	{r7}
 8017cbc:	b083      	sub	sp, #12
 8017cbe:	af00      	add	r7, sp, #0
 8017cc0:	6078      	str	r0, [r7, #4]
 8017cc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	683a      	ldr	r2, [r7, #0]
 8017cc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017cca:	bf00      	nop
 8017ccc:	370c      	adds	r7, #12
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd4:	4770      	bx	lr

08017cd6 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8017cd6:	b480      	push	{r7}
 8017cd8:	b083      	sub	sp, #12
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	370c      	adds	r7, #12
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr

08017cee <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8017cee:	b480      	push	{r7}
 8017cf0:	b083      	sub	sp, #12
 8017cf2:	af00      	add	r7, sp, #0
 8017cf4:	6078      	str	r0, [r7, #4]
 8017cf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	683a      	ldr	r2, [r7, #0]
 8017cfc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8017cfe:	bf00      	nop
 8017d00:	370c      	adds	r7, #12
 8017d02:	46bd      	mov	sp, r7
 8017d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d08:	4770      	bx	lr
	...

08017d0c <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8017d0c:	b480      	push	{r7}
 8017d0e:	b087      	sub	sp, #28
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8017d18:	68bb      	ldr	r3, [r7, #8]
 8017d1a:	2b01      	cmp	r3, #1
 8017d1c:	d02e      	beq.n	8017d7c <LL_TIM_OC_SetMode+0x70>
 8017d1e:	68bb      	ldr	r3, [r7, #8]
 8017d20:	2b04      	cmp	r3, #4
 8017d22:	d029      	beq.n	8017d78 <LL_TIM_OC_SetMode+0x6c>
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	2b10      	cmp	r3, #16
 8017d28:	d024      	beq.n	8017d74 <LL_TIM_OC_SetMode+0x68>
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	2b40      	cmp	r3, #64	; 0x40
 8017d2e:	d01f      	beq.n	8017d70 <LL_TIM_OC_SetMode+0x64>
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d36:	d019      	beq.n	8017d6c <LL_TIM_OC_SetMode+0x60>
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017d3e:	d013      	beq.n	8017d68 <LL_TIM_OC_SetMode+0x5c>
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017d46:	d00d      	beq.n	8017d64 <LL_TIM_OC_SetMode+0x58>
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017d4e:	d007      	beq.n	8017d60 <LL_TIM_OC_SetMode+0x54>
 8017d50:	68bb      	ldr	r3, [r7, #8]
 8017d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d56:	d101      	bne.n	8017d5c <LL_TIM_OC_SetMode+0x50>
 8017d58:	2308      	movs	r3, #8
 8017d5a:	e010      	b.n	8017d7e <LL_TIM_OC_SetMode+0x72>
 8017d5c:	2309      	movs	r3, #9
 8017d5e:	e00e      	b.n	8017d7e <LL_TIM_OC_SetMode+0x72>
 8017d60:	2307      	movs	r3, #7
 8017d62:	e00c      	b.n	8017d7e <LL_TIM_OC_SetMode+0x72>
 8017d64:	2306      	movs	r3, #6
 8017d66:	e00a      	b.n	8017d7e <LL_TIM_OC_SetMode+0x72>
 8017d68:	2305      	movs	r3, #5
 8017d6a:	e008      	b.n	8017d7e <LL_TIM_OC_SetMode+0x72>
 8017d6c:	2304      	movs	r3, #4
 8017d6e:	e006      	b.n	8017d7e <LL_TIM_OC_SetMode+0x72>
 8017d70:	2303      	movs	r3, #3
 8017d72:	e004      	b.n	8017d7e <LL_TIM_OC_SetMode+0x72>
 8017d74:	2302      	movs	r3, #2
 8017d76:	e002      	b.n	8017d7e <LL_TIM_OC_SetMode+0x72>
 8017d78:	2301      	movs	r3, #1
 8017d7a:	e000      	b.n	8017d7e <LL_TIM_OC_SetMode+0x72>
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	3318      	adds	r3, #24
 8017d84:	4619      	mov	r1, r3
 8017d86:	7dfb      	ldrb	r3, [r7, #23]
 8017d88:	4a0e      	ldr	r2, [pc, #56]	; (8017dc4 <LL_TIM_OC_SetMode+0xb8>)
 8017d8a:	5cd3      	ldrb	r3, [r2, r3]
 8017d8c:	440b      	add	r3, r1
 8017d8e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8017d90:	693b      	ldr	r3, [r7, #16]
 8017d92:	681a      	ldr	r2, [r3, #0]
 8017d94:	7dfb      	ldrb	r3, [r7, #23]
 8017d96:	490c      	ldr	r1, [pc, #48]	; (8017dc8 <LL_TIM_OC_SetMode+0xbc>)
 8017d98:	5ccb      	ldrb	r3, [r1, r3]
 8017d9a:	4619      	mov	r1, r3
 8017d9c:	4b0b      	ldr	r3, [pc, #44]	; (8017dcc <LL_TIM_OC_SetMode+0xc0>)
 8017d9e:	408b      	lsls	r3, r1
 8017da0:	43db      	mvns	r3, r3
 8017da2:	401a      	ands	r2, r3
 8017da4:	7dfb      	ldrb	r3, [r7, #23]
 8017da6:	4908      	ldr	r1, [pc, #32]	; (8017dc8 <LL_TIM_OC_SetMode+0xbc>)
 8017da8:	5ccb      	ldrb	r3, [r1, r3]
 8017daa:	4619      	mov	r1, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	408b      	lsls	r3, r1
 8017db0:	431a      	orrs	r2, r3
 8017db2:	693b      	ldr	r3, [r7, #16]
 8017db4:	601a      	str	r2, [r3, #0]
}
 8017db6:	bf00      	nop
 8017db8:	371c      	adds	r7, #28
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc0:	4770      	bx	lr
 8017dc2:	bf00      	nop
 8017dc4:	08023704 	.word	0x08023704
 8017dc8:	08023710 	.word	0x08023710
 8017dcc:	00010073 	.word	0x00010073

08017dd0 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8017dd0:	b480      	push	{r7}
 8017dd2:	b087      	sub	sp, #28
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	60f8      	str	r0, [r7, #12]
 8017dd8:	60b9      	str	r1, [r7, #8]
 8017dda:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8017ddc:	68bb      	ldr	r3, [r7, #8]
 8017dde:	2b01      	cmp	r3, #1
 8017de0:	d02e      	beq.n	8017e40 <LL_TIM_OC_SetPolarity+0x70>
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	2b04      	cmp	r3, #4
 8017de6:	d029      	beq.n	8017e3c <LL_TIM_OC_SetPolarity+0x6c>
 8017de8:	68bb      	ldr	r3, [r7, #8]
 8017dea:	2b10      	cmp	r3, #16
 8017dec:	d024      	beq.n	8017e38 <LL_TIM_OC_SetPolarity+0x68>
 8017dee:	68bb      	ldr	r3, [r7, #8]
 8017df0:	2b40      	cmp	r3, #64	; 0x40
 8017df2:	d01f      	beq.n	8017e34 <LL_TIM_OC_SetPolarity+0x64>
 8017df4:	68bb      	ldr	r3, [r7, #8]
 8017df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017dfa:	d019      	beq.n	8017e30 <LL_TIM_OC_SetPolarity+0x60>
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017e02:	d013      	beq.n	8017e2c <LL_TIM_OC_SetPolarity+0x5c>
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017e0a:	d00d      	beq.n	8017e28 <LL_TIM_OC_SetPolarity+0x58>
 8017e0c:	68bb      	ldr	r3, [r7, #8]
 8017e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017e12:	d007      	beq.n	8017e24 <LL_TIM_OC_SetPolarity+0x54>
 8017e14:	68bb      	ldr	r3, [r7, #8]
 8017e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017e1a:	d101      	bne.n	8017e20 <LL_TIM_OC_SetPolarity+0x50>
 8017e1c:	2308      	movs	r3, #8
 8017e1e:	e010      	b.n	8017e42 <LL_TIM_OC_SetPolarity+0x72>
 8017e20:	2309      	movs	r3, #9
 8017e22:	e00e      	b.n	8017e42 <LL_TIM_OC_SetPolarity+0x72>
 8017e24:	2307      	movs	r3, #7
 8017e26:	e00c      	b.n	8017e42 <LL_TIM_OC_SetPolarity+0x72>
 8017e28:	2306      	movs	r3, #6
 8017e2a:	e00a      	b.n	8017e42 <LL_TIM_OC_SetPolarity+0x72>
 8017e2c:	2305      	movs	r3, #5
 8017e2e:	e008      	b.n	8017e42 <LL_TIM_OC_SetPolarity+0x72>
 8017e30:	2304      	movs	r3, #4
 8017e32:	e006      	b.n	8017e42 <LL_TIM_OC_SetPolarity+0x72>
 8017e34:	2303      	movs	r3, #3
 8017e36:	e004      	b.n	8017e42 <LL_TIM_OC_SetPolarity+0x72>
 8017e38:	2302      	movs	r3, #2
 8017e3a:	e002      	b.n	8017e42 <LL_TIM_OC_SetPolarity+0x72>
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	e000      	b.n	8017e42 <LL_TIM_OC_SetPolarity+0x72>
 8017e40:	2300      	movs	r3, #0
 8017e42:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	6a1a      	ldr	r2, [r3, #32]
 8017e48:	7dfb      	ldrb	r3, [r7, #23]
 8017e4a:	490b      	ldr	r1, [pc, #44]	; (8017e78 <LL_TIM_OC_SetPolarity+0xa8>)
 8017e4c:	5ccb      	ldrb	r3, [r1, r3]
 8017e4e:	4619      	mov	r1, r3
 8017e50:	2302      	movs	r3, #2
 8017e52:	408b      	lsls	r3, r1
 8017e54:	43db      	mvns	r3, r3
 8017e56:	401a      	ands	r2, r3
 8017e58:	7dfb      	ldrb	r3, [r7, #23]
 8017e5a:	4907      	ldr	r1, [pc, #28]	; (8017e78 <LL_TIM_OC_SetPolarity+0xa8>)
 8017e5c:	5ccb      	ldrb	r3, [r1, r3]
 8017e5e:	4619      	mov	r1, r3
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	408b      	lsls	r3, r1
 8017e64:	431a      	orrs	r2, r3
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	621a      	str	r2, [r3, #32]
}
 8017e6a:	bf00      	nop
 8017e6c:	371c      	adds	r7, #28
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e74:	4770      	bx	lr
 8017e76:	bf00      	nop
 8017e78:	0802371c 	.word	0x0802371c

08017e7c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b083      	sub	sp, #12
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
 8017e84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	683a      	ldr	r2, [r7, #0]
 8017e8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8017e8c:	bf00      	nop
 8017e8e:	370c      	adds	r7, #12
 8017e90:	46bd      	mov	sp, r7
 8017e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e96:	4770      	bx	lr

08017e98 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017e98:	b480      	push	{r7}
 8017e9a:	b083      	sub	sp, #12
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
 8017ea0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	683a      	ldr	r2, [r7, #0]
 8017ea6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8017ea8:	bf00      	nop
 8017eaa:	370c      	adds	r7, #12
 8017eac:	46bd      	mov	sp, r7
 8017eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb2:	4770      	bx	lr

08017eb4 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017eb4:	b480      	push	{r7}
 8017eb6:	b083      	sub	sp, #12
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	683a      	ldr	r2, [r7, #0]
 8017ec2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8017ec4:	bf00      	nop
 8017ec6:	370c      	adds	r7, #12
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ece:	4770      	bx	lr

08017ed0 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017ed0:	b480      	push	{r7}
 8017ed2:	b083      	sub	sp, #12
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
 8017ed8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	683a      	ldr	r2, [r7, #0]
 8017ede:	641a      	str	r2, [r3, #64]	; 0x40
}
 8017ee0:	bf00      	nop
 8017ee2:	370c      	adds	r7, #12
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eea:	4770      	bx	lr

08017eec <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8017eec:	b480      	push	{r7}
 8017eee:	b083      	sub	sp, #12
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	f06f 0202 	mvn.w	r2, #2
 8017efa:	611a      	str	r2, [r3, #16]
}
 8017efc:	bf00      	nop
 8017efe:	370c      	adds	r7, #12
 8017f00:	46bd      	mov	sp, r7
 8017f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f06:	4770      	bx	lr

08017f08 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8017f08:	b480      	push	{r7}
 8017f0a:	b083      	sub	sp, #12
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	691b      	ldr	r3, [r3, #16]
 8017f14:	f003 0302 	and.w	r3, r3, #2
 8017f18:	2b02      	cmp	r3, #2
 8017f1a:	d101      	bne.n	8017f20 <LL_TIM_IsActiveFlag_CC1+0x18>
 8017f1c:	2301      	movs	r3, #1
 8017f1e:	e000      	b.n	8017f22 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8017f20:	2300      	movs	r3, #0
}
 8017f22:	4618      	mov	r0, r3
 8017f24:	370c      	adds	r7, #12
 8017f26:	46bd      	mov	sp, r7
 8017f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2c:	4770      	bx	lr

08017f2e <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8017f2e:	b480      	push	{r7}
 8017f30:	b083      	sub	sp, #12
 8017f32:	af00      	add	r7, sp, #0
 8017f34:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	f06f 0204 	mvn.w	r2, #4
 8017f3c:	611a      	str	r2, [r3, #16]
}
 8017f3e:	bf00      	nop
 8017f40:	370c      	adds	r7, #12
 8017f42:	46bd      	mov	sp, r7
 8017f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f48:	4770      	bx	lr

08017f4a <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8017f4a:	b480      	push	{r7}
 8017f4c:	b083      	sub	sp, #12
 8017f4e:	af00      	add	r7, sp, #0
 8017f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	691b      	ldr	r3, [r3, #16]
 8017f56:	f003 0304 	and.w	r3, r3, #4
 8017f5a:	2b04      	cmp	r3, #4
 8017f5c:	d101      	bne.n	8017f62 <LL_TIM_IsActiveFlag_CC2+0x18>
 8017f5e:	2301      	movs	r3, #1
 8017f60:	e000      	b.n	8017f64 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8017f62:	2300      	movs	r3, #0
}
 8017f64:	4618      	mov	r0, r3
 8017f66:	370c      	adds	r7, #12
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f6e:	4770      	bx	lr

08017f70 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8017f70:	b480      	push	{r7}
 8017f72:	b083      	sub	sp, #12
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	f06f 0208 	mvn.w	r2, #8
 8017f7e:	611a      	str	r2, [r3, #16]
}
 8017f80:	bf00      	nop
 8017f82:	370c      	adds	r7, #12
 8017f84:	46bd      	mov	sp, r7
 8017f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8a:	4770      	bx	lr

08017f8c <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	b083      	sub	sp, #12
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	691b      	ldr	r3, [r3, #16]
 8017f98:	f003 0308 	and.w	r3, r3, #8
 8017f9c:	2b08      	cmp	r3, #8
 8017f9e:	d101      	bne.n	8017fa4 <LL_TIM_IsActiveFlag_CC3+0x18>
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	e000      	b.n	8017fa6 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8017fa4:	2300      	movs	r3, #0
}
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	370c      	adds	r7, #12
 8017faa:	46bd      	mov	sp, r7
 8017fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb0:	4770      	bx	lr

08017fb2 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8017fb2:	b480      	push	{r7}
 8017fb4:	b083      	sub	sp, #12
 8017fb6:	af00      	add	r7, sp, #0
 8017fb8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	f06f 0210 	mvn.w	r2, #16
 8017fc0:	611a      	str	r2, [r3, #16]
}
 8017fc2:	bf00      	nop
 8017fc4:	370c      	adds	r7, #12
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fcc:	4770      	bx	lr

08017fce <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8017fce:	b480      	push	{r7}
 8017fd0:	b083      	sub	sp, #12
 8017fd2:	af00      	add	r7, sp, #0
 8017fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	691b      	ldr	r3, [r3, #16]
 8017fda:	f003 0310 	and.w	r3, r3, #16
 8017fde:	2b10      	cmp	r3, #16
 8017fe0:	d101      	bne.n	8017fe6 <LL_TIM_IsActiveFlag_CC4+0x18>
 8017fe2:	2301      	movs	r3, #1
 8017fe4:	e000      	b.n	8017fe8 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8017fe6:	2300      	movs	r3, #0
}
 8017fe8:	4618      	mov	r0, r3
 8017fea:	370c      	adds	r7, #12
 8017fec:	46bd      	mov	sp, r7
 8017fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff2:	4770      	bx	lr

08017ff4 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8017ff4:	b598      	push	{r3, r4, r7, lr}
 8017ff6:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8017ff8:	4b3d      	ldr	r3, [pc, #244]	; (80180f0 <USBPD_TIM_Init+0xfc>)
 8017ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d16a      	bne.n	80180d8 <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 8018002:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018006:	f7ff fe09 	bl	8017c1c <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 801800a:	2100      	movs	r1, #0
 801800c:	4839      	ldr	r0, [pc, #228]	; (80180f4 <USBPD_TIM_Init+0x100>)
 801800e:	f7ff fe41 	bl	8017c94 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8018012:	4b39      	ldr	r3, [pc, #228]	; (80180f8 <USBPD_TIM_Init+0x104>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	4a39      	ldr	r2, [pc, #228]	; (80180fc <USBPD_TIM_Init+0x108>)
 8018018:	4293      	cmp	r3, r2
 801801a:	d90b      	bls.n	8018034 <USBPD_TIM_Init+0x40>
 801801c:	4b36      	ldr	r3, [pc, #216]	; (80180f8 <USBPD_TIM_Init+0x104>)
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8018024:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8018028:	4a35      	ldr	r2, [pc, #212]	; (8018100 <USBPD_TIM_Init+0x10c>)
 801802a:	fba2 2303 	umull	r2, r3, r2, r3
 801802e:	0c9b      	lsrs	r3, r3, #18
 8018030:	3b01      	subs	r3, #1
 8018032:	e000      	b.n	8018036 <USBPD_TIM_Init+0x42>
 8018034:	2300      	movs	r3, #0
 8018036:	4619      	mov	r1, r3
 8018038:	482e      	ldr	r0, [pc, #184]	; (80180f4 <USBPD_TIM_Init+0x100>)
 801803a:	f7ff fe3e 	bl	8017cba <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 801803e:	4b2e      	ldr	r3, [pc, #184]	; (80180f8 <USBPD_TIM_Init+0x104>)
 8018040:	681c      	ldr	r4, [r3, #0]
 8018042:	482c      	ldr	r0, [pc, #176]	; (80180f4 <USBPD_TIM_Init+0x100>)
 8018044:	f7ff fe47 	bl	8017cd6 <LL_TIM_GetPrescaler>
 8018048:	4603      	mov	r3, r0
 801804a:	3301      	adds	r3, #1
 801804c:	fbb4 f3f3 	udiv	r3, r4, r3
 8018050:	2b63      	cmp	r3, #99	; 0x63
 8018052:	d90d      	bls.n	8018070 <USBPD_TIM_Init+0x7c>
 8018054:	4b28      	ldr	r3, [pc, #160]	; (80180f8 <USBPD_TIM_Init+0x104>)
 8018056:	681c      	ldr	r4, [r3, #0]
 8018058:	4826      	ldr	r0, [pc, #152]	; (80180f4 <USBPD_TIM_Init+0x100>)
 801805a:	f7ff fe3c 	bl	8017cd6 <LL_TIM_GetPrescaler>
 801805e:	4603      	mov	r3, r0
 8018060:	3301      	adds	r3, #1
 8018062:	2264      	movs	r2, #100	; 0x64
 8018064:	fb02 f303 	mul.w	r3, r2, r3
 8018068:	fbb4 f3f3 	udiv	r3, r4, r3
 801806c:	3b01      	subs	r3, #1
 801806e:	e000      	b.n	8018072 <USBPD_TIM_Init+0x7e>
 8018070:	2300      	movs	r3, #0
 8018072:	4619      	mov	r1, r3
 8018074:	481f      	ldr	r0, [pc, #124]	; (80180f4 <USBPD_TIM_Init+0x100>)
 8018076:	f7ff fe3a 	bl	8017cee <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 801807a:	2230      	movs	r2, #48	; 0x30
 801807c:	2101      	movs	r1, #1
 801807e:	481d      	ldr	r0, [pc, #116]	; (80180f4 <USBPD_TIM_Init+0x100>)
 8018080:	f7ff fe44 	bl	8017d0c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8018084:	2230      	movs	r2, #48	; 0x30
 8018086:	2110      	movs	r1, #16
 8018088:	481a      	ldr	r0, [pc, #104]	; (80180f4 <USBPD_TIM_Init+0x100>)
 801808a:	f7ff fe3f 	bl	8017d0c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 801808e:	2230      	movs	r2, #48	; 0x30
 8018090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018094:	4817      	ldr	r0, [pc, #92]	; (80180f4 <USBPD_TIM_Init+0x100>)
 8018096:	f7ff fe39 	bl	8017d0c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 801809a:	2230      	movs	r2, #48	; 0x30
 801809c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80180a0:	4814      	ldr	r0, [pc, #80]	; (80180f4 <USBPD_TIM_Init+0x100>)
 80180a2:	f7ff fe33 	bl	8017d0c <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80180a6:	2200      	movs	r2, #0
 80180a8:	2101      	movs	r1, #1
 80180aa:	4812      	ldr	r0, [pc, #72]	; (80180f4 <USBPD_TIM_Init+0x100>)
 80180ac:	f7ff fe90 	bl	8017dd0 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 80180b0:	2200      	movs	r2, #0
 80180b2:	2110      	movs	r1, #16
 80180b4:	480f      	ldr	r0, [pc, #60]	; (80180f4 <USBPD_TIM_Init+0x100>)
 80180b6:	f7ff fe8b 	bl	8017dd0 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 80180ba:	2200      	movs	r2, #0
 80180bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80180c0:	480c      	ldr	r0, [pc, #48]	; (80180f4 <USBPD_TIM_Init+0x100>)
 80180c2:	f7ff fe85 	bl	8017dd0 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 80180c6:	2200      	movs	r2, #0
 80180c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80180cc:	4809      	ldr	r0, [pc, #36]	; (80180f4 <USBPD_TIM_Init+0x100>)
 80180ce:	f7ff fe7f 	bl	8017dd0 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 80180d2:	4808      	ldr	r0, [pc, #32]	; (80180f4 <USBPD_TIM_Init+0x100>)
 80180d4:	f7ff fdce 	bl	8017c74 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 80180d8:	4b05      	ldr	r3, [pc, #20]	; (80180f0 <USBPD_TIM_Init+0xfc>)
 80180da:	f993 3000 	ldrsb.w	r3, [r3]
 80180de:	b2db      	uxtb	r3, r3
 80180e0:	3301      	adds	r3, #1
 80180e2:	b2db      	uxtb	r3, r3
 80180e4:	b25a      	sxtb	r2, r3
 80180e6:	4b02      	ldr	r3, [pc, #8]	; (80180f0 <USBPD_TIM_Init+0xfc>)
 80180e8:	701a      	strb	r2, [r3, #0]
}
 80180ea:	bf00      	nop
 80180ec:	bd98      	pop	{r3, r4, r7, pc}
 80180ee:	bf00      	nop
 80180f0:	20001dfc 	.word	0x20001dfc
 80180f4:	40012c00 	.word	0x40012c00
 80180f8:	20000008 	.word	0x20000008
 80180fc:	000f423f 	.word	0x000f423f
 8018100:	431bde83 	.word	0x431bde83

08018104 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8018104:	b580      	push	{r7, lr}
 8018106:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8018108:	4b09      	ldr	r3, [pc, #36]	; (8018130 <USBPD_TIM_DeInit+0x2c>)
 801810a:	f993 3000 	ldrsb.w	r3, [r3]
 801810e:	b2db      	uxtb	r3, r3
 8018110:	3b01      	subs	r3, #1
 8018112:	b2db      	uxtb	r3, r3
 8018114:	b25a      	sxtb	r2, r3
 8018116:	4b06      	ldr	r3, [pc, #24]	; (8018130 <USBPD_TIM_DeInit+0x2c>)
 8018118:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 801811a:	4b05      	ldr	r3, [pc, #20]	; (8018130 <USBPD_TIM_DeInit+0x2c>)
 801811c:	f993 3000 	ldrsb.w	r3, [r3]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d103      	bne.n	801812c <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 8018124:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018128:	f7ff fd90 	bl	8017c4c <LL_APB2_GRP1_DisableClock>
  }
}
 801812c:	bf00      	nop
 801812e:	bd80      	pop	{r7, pc}
 8018130:	20001dfc 	.word	0x20001dfc

08018134 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b082      	sub	sp, #8
 8018138:	af00      	add	r7, sp, #0
 801813a:	4603      	mov	r3, r0
 801813c:	6039      	str	r1, [r7, #0]
 801813e:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8018140:	79fb      	ldrb	r3, [r7, #7]
 8018142:	2b03      	cmp	r3, #3
 8018144:	d85e      	bhi.n	8018204 <USBPD_TIM_Start+0xd0>
 8018146:	a201      	add	r2, pc, #4	; (adr r2, 801814c <USBPD_TIM_Start+0x18>)
 8018148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801814c:	0801815d 	.word	0x0801815d
 8018150:	08018187 	.word	0x08018187
 8018154:	080181b1 	.word	0x080181b1
 8018158:	080181db 	.word	0x080181db
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 801815c:	4b2c      	ldr	r3, [pc, #176]	; (8018210 <USBPD_TIM_Start+0xdc>)
 801815e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018160:	683b      	ldr	r3, [r7, #0]
 8018162:	441a      	add	r2, r3
 8018164:	4b2b      	ldr	r3, [pc, #172]	; (8018214 <USBPD_TIM_Start+0xe0>)
 8018166:	fba3 1302 	umull	r1, r3, r3, r2
 801816a:	0b5b      	lsrs	r3, r3, #13
 801816c:	f242 7110 	movw	r1, #10000	; 0x2710
 8018170:	fb01 f303 	mul.w	r3, r1, r3
 8018174:	1ad3      	subs	r3, r2, r3
 8018176:	4619      	mov	r1, r3
 8018178:	4825      	ldr	r0, [pc, #148]	; (8018210 <USBPD_TIM_Start+0xdc>)
 801817a:	f7ff fe7f 	bl	8017e7c <LL_TIM_OC_SetCompareCH1>
 801817e:	4824      	ldr	r0, [pc, #144]	; (8018210 <USBPD_TIM_Start+0xdc>)
 8018180:	f7ff feb4 	bl	8017eec <LL_TIM_ClearFlag_CC1>
      break;
 8018184:	e03f      	b.n	8018206 <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 8018186:	4b22      	ldr	r3, [pc, #136]	; (8018210 <USBPD_TIM_Start+0xdc>)
 8018188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801818a:	683b      	ldr	r3, [r7, #0]
 801818c:	441a      	add	r2, r3
 801818e:	4b21      	ldr	r3, [pc, #132]	; (8018214 <USBPD_TIM_Start+0xe0>)
 8018190:	fba3 1302 	umull	r1, r3, r3, r2
 8018194:	0b5b      	lsrs	r3, r3, #13
 8018196:	f242 7110 	movw	r1, #10000	; 0x2710
 801819a:	fb01 f303 	mul.w	r3, r1, r3
 801819e:	1ad3      	subs	r3, r2, r3
 80181a0:	4619      	mov	r1, r3
 80181a2:	481b      	ldr	r0, [pc, #108]	; (8018210 <USBPD_TIM_Start+0xdc>)
 80181a4:	f7ff fe78 	bl	8017e98 <LL_TIM_OC_SetCompareCH2>
 80181a8:	4819      	ldr	r0, [pc, #100]	; (8018210 <USBPD_TIM_Start+0xdc>)
 80181aa:	f7ff fec0 	bl	8017f2e <LL_TIM_ClearFlag_CC2>
      break;
 80181ae:	e02a      	b.n	8018206 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 80181b0:	4b17      	ldr	r3, [pc, #92]	; (8018210 <USBPD_TIM_Start+0xdc>)
 80181b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80181b4:	683b      	ldr	r3, [r7, #0]
 80181b6:	441a      	add	r2, r3
 80181b8:	4b16      	ldr	r3, [pc, #88]	; (8018214 <USBPD_TIM_Start+0xe0>)
 80181ba:	fba3 1302 	umull	r1, r3, r3, r2
 80181be:	0b5b      	lsrs	r3, r3, #13
 80181c0:	f242 7110 	movw	r1, #10000	; 0x2710
 80181c4:	fb01 f303 	mul.w	r3, r1, r3
 80181c8:	1ad3      	subs	r3, r2, r3
 80181ca:	4619      	mov	r1, r3
 80181cc:	4810      	ldr	r0, [pc, #64]	; (8018210 <USBPD_TIM_Start+0xdc>)
 80181ce:	f7ff fe71 	bl	8017eb4 <LL_TIM_OC_SetCompareCH3>
 80181d2:	480f      	ldr	r0, [pc, #60]	; (8018210 <USBPD_TIM_Start+0xdc>)
 80181d4:	f7ff fecc 	bl	8017f70 <LL_TIM_ClearFlag_CC3>
      break;
 80181d8:	e015      	b.n	8018206 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 80181da:	4b0d      	ldr	r3, [pc, #52]	; (8018210 <USBPD_TIM_Start+0xdc>)
 80181dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80181de:	683b      	ldr	r3, [r7, #0]
 80181e0:	441a      	add	r2, r3
 80181e2:	4b0c      	ldr	r3, [pc, #48]	; (8018214 <USBPD_TIM_Start+0xe0>)
 80181e4:	fba3 1302 	umull	r1, r3, r3, r2
 80181e8:	0b5b      	lsrs	r3, r3, #13
 80181ea:	f242 7110 	movw	r1, #10000	; 0x2710
 80181ee:	fb01 f303 	mul.w	r3, r1, r3
 80181f2:	1ad3      	subs	r3, r2, r3
 80181f4:	4619      	mov	r1, r3
 80181f6:	4806      	ldr	r0, [pc, #24]	; (8018210 <USBPD_TIM_Start+0xdc>)
 80181f8:	f7ff fe6a 	bl	8017ed0 <LL_TIM_OC_SetCompareCH4>
 80181fc:	4804      	ldr	r0, [pc, #16]	; (8018210 <USBPD_TIM_Start+0xdc>)
 80181fe:	f7ff fed8 	bl	8017fb2 <LL_TIM_ClearFlag_CC4>
      break;
 8018202:	e000      	b.n	8018206 <USBPD_TIM_Start+0xd2>
    default:
      break;
 8018204:	bf00      	nop
  }
}
 8018206:	bf00      	nop
 8018208:	3708      	adds	r7, #8
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	40012c00 	.word	0x40012c00
 8018214:	d1b71759 	.word	0xd1b71759

08018218 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b084      	sub	sp, #16
 801821c:	af00      	add	r7, sp, #0
 801821e:	4603      	mov	r3, r0
 8018220:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 8018222:	2301      	movs	r3, #1
 8018224:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8018226:	79fb      	ldrb	r3, [r7, #7]
 8018228:	2b03      	cmp	r3, #3
 801822a:	d81f      	bhi.n	801826c <USBPD_TIM_IsExpired+0x54>
 801822c:	a201      	add	r2, pc, #4	; (adr r2, 8018234 <USBPD_TIM_IsExpired+0x1c>)
 801822e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018232:	bf00      	nop
 8018234:	08018245 	.word	0x08018245
 8018238:	0801824f 	.word	0x0801824f
 801823c:	08018259 	.word	0x08018259
 8018240:	08018263 	.word	0x08018263
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8018244:	480c      	ldr	r0, [pc, #48]	; (8018278 <USBPD_TIM_IsExpired+0x60>)
 8018246:	f7ff fe5f 	bl	8017f08 <LL_TIM_IsActiveFlag_CC1>
 801824a:	60f8      	str	r0, [r7, #12]
      break;
 801824c:	e00f      	b.n	801826e <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 801824e:	480a      	ldr	r0, [pc, #40]	; (8018278 <USBPD_TIM_IsExpired+0x60>)
 8018250:	f7ff fe7b 	bl	8017f4a <LL_TIM_IsActiveFlag_CC2>
 8018254:	60f8      	str	r0, [r7, #12]
      break;
 8018256:	e00a      	b.n	801826e <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8018258:	4807      	ldr	r0, [pc, #28]	; (8018278 <USBPD_TIM_IsExpired+0x60>)
 801825a:	f7ff fe97 	bl	8017f8c <LL_TIM_IsActiveFlag_CC3>
 801825e:	60f8      	str	r0, [r7, #12]
      break;
 8018260:	e005      	b.n	801826e <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8018262:	4805      	ldr	r0, [pc, #20]	; (8018278 <USBPD_TIM_IsExpired+0x60>)
 8018264:	f7ff feb3 	bl	8017fce <LL_TIM_IsActiveFlag_CC4>
 8018268:	60f8      	str	r0, [r7, #12]
      break;
 801826a:	e000      	b.n	801826e <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 801826c:	bf00      	nop
  }
  return _expired;
 801826e:	68fb      	ldr	r3, [r7, #12]
}
 8018270:	4618      	mov	r0, r3
 8018272:	3710      	adds	r7, #16
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}
 8018278:	40012c00 	.word	0x40012c00

0801827c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b084      	sub	sp, #16
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
 8018284:	460b      	mov	r3, r1
 8018286:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8018288:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801828c:	f007 f9c0 	bl	801f610 <USBD_static_malloc>
 8018290:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d105      	bne.n	80182a4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	2200      	movs	r2, #0
 801829c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80182a0:	2302      	movs	r3, #2
 80182a2:	e066      	b.n	8018372 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	68fa      	ldr	r2, [r7, #12]
 80182a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	7c1b      	ldrb	r3, [r3, #16]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d119      	bne.n	80182e8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80182b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80182b8:	2202      	movs	r2, #2
 80182ba:	2181      	movs	r1, #129	; 0x81
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f007 f84e 	bl	801f35e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2201      	movs	r2, #1
 80182c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80182c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80182cc:	2202      	movs	r2, #2
 80182ce:	2101      	movs	r1, #1
 80182d0:	6878      	ldr	r0, [r7, #4]
 80182d2:	f007 f844 	bl	801f35e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	2201      	movs	r2, #1
 80182da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2210      	movs	r2, #16
 80182e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80182e6:	e016      	b.n	8018316 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80182e8:	2340      	movs	r3, #64	; 0x40
 80182ea:	2202      	movs	r2, #2
 80182ec:	2181      	movs	r1, #129	; 0x81
 80182ee:	6878      	ldr	r0, [r7, #4]
 80182f0:	f007 f835 	bl	801f35e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2201      	movs	r2, #1
 80182f8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80182fa:	2340      	movs	r3, #64	; 0x40
 80182fc:	2202      	movs	r2, #2
 80182fe:	2101      	movs	r1, #1
 8018300:	6878      	ldr	r0, [r7, #4]
 8018302:	f007 f82c 	bl	801f35e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	2201      	movs	r2, #1
 801830a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2210      	movs	r2, #16
 8018312:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018316:	2308      	movs	r3, #8
 8018318:	2203      	movs	r2, #3
 801831a:	2182      	movs	r1, #130	; 0x82
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f007 f81e 	bl	801f35e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	2201      	movs	r2, #1
 8018326:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	2200      	movs	r2, #0
 8018338:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	2200      	movs	r2, #0
 8018340:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	7c1b      	ldrb	r3, [r3, #16]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d109      	bne.n	8018360 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018356:	2101      	movs	r1, #1
 8018358:	6878      	ldr	r0, [r7, #4]
 801835a:	f007 f8ef 	bl	801f53c <USBD_LL_PrepareReceive>
 801835e:	e007      	b.n	8018370 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018366:	2340      	movs	r3, #64	; 0x40
 8018368:	2101      	movs	r1, #1
 801836a:	6878      	ldr	r0, [r7, #4]
 801836c:	f007 f8e6 	bl	801f53c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018370:	2300      	movs	r3, #0
}
 8018372:	4618      	mov	r0, r3
 8018374:	3710      	adds	r7, #16
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}

0801837a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801837a:	b580      	push	{r7, lr}
 801837c:	b082      	sub	sp, #8
 801837e:	af00      	add	r7, sp, #0
 8018380:	6078      	str	r0, [r7, #4]
 8018382:	460b      	mov	r3, r1
 8018384:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8018386:	2181      	movs	r1, #129	; 0x81
 8018388:	6878      	ldr	r0, [r7, #4]
 801838a:	f007 f80e 	bl	801f3aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	2200      	movs	r2, #0
 8018392:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8018394:	2101      	movs	r1, #1
 8018396:	6878      	ldr	r0, [r7, #4]
 8018398:	f007 f807 	bl	801f3aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	2200      	movs	r2, #0
 80183a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80183a4:	2182      	movs	r1, #130	; 0x82
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	f006 ffff 	bl	801f3aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	2200      	movs	r2, #0
 80183b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	2200      	movs	r2, #0
 80183b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d00e      	beq.n	80183e4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80183cc:	685b      	ldr	r3, [r3, #4]
 80183ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80183d6:	4618      	mov	r0, r3
 80183d8:	f007 f928 	bl	801f62c <USBD_static_free>
    pdev->pClassData = NULL;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	2200      	movs	r2, #0
 80183e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80183e4:	2300      	movs	r3, #0
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3708      	adds	r7, #8
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
	...

080183f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b086      	sub	sp, #24
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
 80183f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018400:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8018402:	2300      	movs	r3, #0
 8018404:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8018406:	2300      	movs	r3, #0
 8018408:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801840a:	2300      	movs	r3, #0
 801840c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801840e:	693b      	ldr	r3, [r7, #16]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d101      	bne.n	8018418 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8018414:	2303      	movs	r3, #3
 8018416:	e0af      	b.n	8018578 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018418:	683b      	ldr	r3, [r7, #0]
 801841a:	781b      	ldrb	r3, [r3, #0]
 801841c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018420:	2b00      	cmp	r3, #0
 8018422:	d03f      	beq.n	80184a4 <USBD_CDC_Setup+0xb4>
 8018424:	2b20      	cmp	r3, #32
 8018426:	f040 809f 	bne.w	8018568 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801842a:	683b      	ldr	r3, [r7, #0]
 801842c:	88db      	ldrh	r3, [r3, #6]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d02e      	beq.n	8018490 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	781b      	ldrb	r3, [r3, #0]
 8018436:	b25b      	sxtb	r3, r3
 8018438:	2b00      	cmp	r3, #0
 801843a:	da16      	bge.n	801846a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018442:	689b      	ldr	r3, [r3, #8]
 8018444:	683a      	ldr	r2, [r7, #0]
 8018446:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8018448:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801844a:	683a      	ldr	r2, [r7, #0]
 801844c:	88d2      	ldrh	r2, [r2, #6]
 801844e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	88db      	ldrh	r3, [r3, #6]
 8018454:	2b07      	cmp	r3, #7
 8018456:	bf28      	it	cs
 8018458:	2307      	movcs	r3, #7
 801845a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801845c:	693b      	ldr	r3, [r7, #16]
 801845e:	89fa      	ldrh	r2, [r7, #14]
 8018460:	4619      	mov	r1, r3
 8018462:	6878      	ldr	r0, [r7, #4]
 8018464:	f001 facf 	bl	8019a06 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8018468:	e085      	b.n	8018576 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801846a:	683b      	ldr	r3, [r7, #0]
 801846c:	785a      	ldrb	r2, [r3, #1]
 801846e:	693b      	ldr	r3, [r7, #16]
 8018470:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8018474:	683b      	ldr	r3, [r7, #0]
 8018476:	88db      	ldrh	r3, [r3, #6]
 8018478:	b2da      	uxtb	r2, r3
 801847a:	693b      	ldr	r3, [r7, #16]
 801847c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8018480:	6939      	ldr	r1, [r7, #16]
 8018482:	683b      	ldr	r3, [r7, #0]
 8018484:	88db      	ldrh	r3, [r3, #6]
 8018486:	461a      	mov	r2, r3
 8018488:	6878      	ldr	r0, [r7, #4]
 801848a:	f001 fae8 	bl	8019a5e <USBD_CtlPrepareRx>
      break;
 801848e:	e072      	b.n	8018576 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018496:	689b      	ldr	r3, [r3, #8]
 8018498:	683a      	ldr	r2, [r7, #0]
 801849a:	7850      	ldrb	r0, [r2, #1]
 801849c:	2200      	movs	r2, #0
 801849e:	6839      	ldr	r1, [r7, #0]
 80184a0:	4798      	blx	r3
      break;
 80184a2:	e068      	b.n	8018576 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80184a4:	683b      	ldr	r3, [r7, #0]
 80184a6:	785b      	ldrb	r3, [r3, #1]
 80184a8:	2b0b      	cmp	r3, #11
 80184aa:	d852      	bhi.n	8018552 <USBD_CDC_Setup+0x162>
 80184ac:	a201      	add	r2, pc, #4	; (adr r2, 80184b4 <USBD_CDC_Setup+0xc4>)
 80184ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184b2:	bf00      	nop
 80184b4:	080184e5 	.word	0x080184e5
 80184b8:	08018561 	.word	0x08018561
 80184bc:	08018553 	.word	0x08018553
 80184c0:	08018553 	.word	0x08018553
 80184c4:	08018553 	.word	0x08018553
 80184c8:	08018553 	.word	0x08018553
 80184cc:	08018553 	.word	0x08018553
 80184d0:	08018553 	.word	0x08018553
 80184d4:	08018553 	.word	0x08018553
 80184d8:	08018553 	.word	0x08018553
 80184dc:	0801850f 	.word	0x0801850f
 80184e0:	08018539 	.word	0x08018539
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80184ea:	b2db      	uxtb	r3, r3
 80184ec:	2b03      	cmp	r3, #3
 80184ee:	d107      	bne.n	8018500 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80184f0:	f107 030a 	add.w	r3, r7, #10
 80184f4:	2202      	movs	r2, #2
 80184f6:	4619      	mov	r1, r3
 80184f8:	6878      	ldr	r0, [r7, #4]
 80184fa:	f001 fa84 	bl	8019a06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80184fe:	e032      	b.n	8018566 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8018500:	6839      	ldr	r1, [r7, #0]
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	f001 fa0e 	bl	8019924 <USBD_CtlError>
            ret = USBD_FAIL;
 8018508:	2303      	movs	r3, #3
 801850a:	75fb      	strb	r3, [r7, #23]
          break;
 801850c:	e02b      	b.n	8018566 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018514:	b2db      	uxtb	r3, r3
 8018516:	2b03      	cmp	r3, #3
 8018518:	d107      	bne.n	801852a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801851a:	f107 030d 	add.w	r3, r7, #13
 801851e:	2201      	movs	r2, #1
 8018520:	4619      	mov	r1, r3
 8018522:	6878      	ldr	r0, [r7, #4]
 8018524:	f001 fa6f 	bl	8019a06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018528:	e01d      	b.n	8018566 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801852a:	6839      	ldr	r1, [r7, #0]
 801852c:	6878      	ldr	r0, [r7, #4]
 801852e:	f001 f9f9 	bl	8019924 <USBD_CtlError>
            ret = USBD_FAIL;
 8018532:	2303      	movs	r3, #3
 8018534:	75fb      	strb	r3, [r7, #23]
          break;
 8018536:	e016      	b.n	8018566 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801853e:	b2db      	uxtb	r3, r3
 8018540:	2b03      	cmp	r3, #3
 8018542:	d00f      	beq.n	8018564 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8018544:	6839      	ldr	r1, [r7, #0]
 8018546:	6878      	ldr	r0, [r7, #4]
 8018548:	f001 f9ec 	bl	8019924 <USBD_CtlError>
            ret = USBD_FAIL;
 801854c:	2303      	movs	r3, #3
 801854e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8018550:	e008      	b.n	8018564 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8018552:	6839      	ldr	r1, [r7, #0]
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	f001 f9e5 	bl	8019924 <USBD_CtlError>
          ret = USBD_FAIL;
 801855a:	2303      	movs	r3, #3
 801855c:	75fb      	strb	r3, [r7, #23]
          break;
 801855e:	e002      	b.n	8018566 <USBD_CDC_Setup+0x176>
          break;
 8018560:	bf00      	nop
 8018562:	e008      	b.n	8018576 <USBD_CDC_Setup+0x186>
          break;
 8018564:	bf00      	nop
      }
      break;
 8018566:	e006      	b.n	8018576 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8018568:	6839      	ldr	r1, [r7, #0]
 801856a:	6878      	ldr	r0, [r7, #4]
 801856c:	f001 f9da 	bl	8019924 <USBD_CtlError>
      ret = USBD_FAIL;
 8018570:	2303      	movs	r3, #3
 8018572:	75fb      	strb	r3, [r7, #23]
      break;
 8018574:	bf00      	nop
  }

  return (uint8_t)ret;
 8018576:	7dfb      	ldrb	r3, [r7, #23]
}
 8018578:	4618      	mov	r0, r3
 801857a:	3718      	adds	r7, #24
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}

08018580 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b084      	sub	sp, #16
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
 8018588:	460b      	mov	r3, r1
 801858a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018592:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801859a:	2b00      	cmp	r3, #0
 801859c:	d101      	bne.n	80185a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801859e:	2303      	movs	r3, #3
 80185a0:	e04f      	b.n	8018642 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80185a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80185aa:	78fa      	ldrb	r2, [r7, #3]
 80185ac:	6879      	ldr	r1, [r7, #4]
 80185ae:	4613      	mov	r3, r2
 80185b0:	009b      	lsls	r3, r3, #2
 80185b2:	4413      	add	r3, r2
 80185b4:	009b      	lsls	r3, r3, #2
 80185b6:	440b      	add	r3, r1
 80185b8:	3318      	adds	r3, #24
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d029      	beq.n	8018614 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80185c0:	78fa      	ldrb	r2, [r7, #3]
 80185c2:	6879      	ldr	r1, [r7, #4]
 80185c4:	4613      	mov	r3, r2
 80185c6:	009b      	lsls	r3, r3, #2
 80185c8:	4413      	add	r3, r2
 80185ca:	009b      	lsls	r3, r3, #2
 80185cc:	440b      	add	r3, r1
 80185ce:	3318      	adds	r3, #24
 80185d0:	681a      	ldr	r2, [r3, #0]
 80185d2:	78f9      	ldrb	r1, [r7, #3]
 80185d4:	68f8      	ldr	r0, [r7, #12]
 80185d6:	460b      	mov	r3, r1
 80185d8:	009b      	lsls	r3, r3, #2
 80185da:	440b      	add	r3, r1
 80185dc:	00db      	lsls	r3, r3, #3
 80185de:	4403      	add	r3, r0
 80185e0:	3320      	adds	r3, #32
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80185e8:	fb01 f303 	mul.w	r3, r1, r3
 80185ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d110      	bne.n	8018614 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80185f2:	78fa      	ldrb	r2, [r7, #3]
 80185f4:	6879      	ldr	r1, [r7, #4]
 80185f6:	4613      	mov	r3, r2
 80185f8:	009b      	lsls	r3, r3, #2
 80185fa:	4413      	add	r3, r2
 80185fc:	009b      	lsls	r3, r3, #2
 80185fe:	440b      	add	r3, r1
 8018600:	3318      	adds	r3, #24
 8018602:	2200      	movs	r2, #0
 8018604:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8018606:	78f9      	ldrb	r1, [r7, #3]
 8018608:	2300      	movs	r3, #0
 801860a:	2200      	movs	r2, #0
 801860c:	6878      	ldr	r0, [r7, #4]
 801860e:	f006 ff74 	bl	801f4fa <USBD_LL_Transmit>
 8018612:	e015      	b.n	8018640 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	2200      	movs	r2, #0
 8018618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018622:	691b      	ldr	r3, [r3, #16]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d00b      	beq.n	8018640 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801862e:	691b      	ldr	r3, [r3, #16]
 8018630:	68ba      	ldr	r2, [r7, #8]
 8018632:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8018636:	68ba      	ldr	r2, [r7, #8]
 8018638:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801863c:	78fa      	ldrb	r2, [r7, #3]
 801863e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8018640:	2300      	movs	r3, #0
}
 8018642:	4618      	mov	r0, r3
 8018644:	3710      	adds	r7, #16
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}

0801864a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801864a:	b580      	push	{r7, lr}
 801864c:	b084      	sub	sp, #16
 801864e:	af00      	add	r7, sp, #0
 8018650:	6078      	str	r0, [r7, #4]
 8018652:	460b      	mov	r3, r1
 8018654:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801865c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018664:	2b00      	cmp	r3, #0
 8018666:	d101      	bne.n	801866c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018668:	2303      	movs	r3, #3
 801866a:	e015      	b.n	8018698 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801866c:	78fb      	ldrb	r3, [r7, #3]
 801866e:	4619      	mov	r1, r3
 8018670:	6878      	ldr	r0, [r7, #4]
 8018672:	f006 ff84 	bl	801f57e <USBD_LL_GetRxDataSize>
 8018676:	4602      	mov	r2, r0
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018684:	68db      	ldr	r3, [r3, #12]
 8018686:	68fa      	ldr	r2, [r7, #12]
 8018688:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801868c:	68fa      	ldr	r2, [r7, #12]
 801868e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8018692:	4611      	mov	r1, r2
 8018694:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8018696:	2300      	movs	r3, #0
}
 8018698:	4618      	mov	r0, r3
 801869a:	3710      	adds	r7, #16
 801869c:	46bd      	mov	sp, r7
 801869e:	bd80      	pop	{r7, pc}

080186a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b084      	sub	sp, #16
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80186ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d101      	bne.n	80186ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80186b6:	2303      	movs	r3, #3
 80186b8:	e01b      	b.n	80186f2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d015      	beq.n	80186f0 <USBD_CDC_EP0_RxReady+0x50>
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80186ca:	2bff      	cmp	r3, #255	; 0xff
 80186cc:	d010      	beq.n	80186f0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80186d4:	689b      	ldr	r3, [r3, #8]
 80186d6:	68fa      	ldr	r2, [r7, #12]
 80186d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80186dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80186de:	68fa      	ldr	r2, [r7, #12]
 80186e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80186e4:	b292      	uxth	r2, r2
 80186e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	22ff      	movs	r2, #255	; 0xff
 80186ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80186f0:	2300      	movs	r3, #0
}
 80186f2:	4618      	mov	r0, r3
 80186f4:	3710      	adds	r7, #16
 80186f6:	46bd      	mov	sp, r7
 80186f8:	bd80      	pop	{r7, pc}
	...

080186fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80186fc:	b480      	push	{r7}
 80186fe:	b083      	sub	sp, #12
 8018700:	af00      	add	r7, sp, #0
 8018702:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2243      	movs	r2, #67	; 0x43
 8018708:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801870a:	4b03      	ldr	r3, [pc, #12]	; (8018718 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801870c:	4618      	mov	r0, r3
 801870e:	370c      	adds	r7, #12
 8018710:	46bd      	mov	sp, r7
 8018712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018716:	4770      	bx	lr
 8018718:	200000b0 	.word	0x200000b0

0801871c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801871c:	b480      	push	{r7}
 801871e:	b083      	sub	sp, #12
 8018720:	af00      	add	r7, sp, #0
 8018722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	2243      	movs	r2, #67	; 0x43
 8018728:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801872a:	4b03      	ldr	r3, [pc, #12]	; (8018738 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801872c:	4618      	mov	r0, r3
 801872e:	370c      	adds	r7, #12
 8018730:	46bd      	mov	sp, r7
 8018732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018736:	4770      	bx	lr
 8018738:	2000006c 	.word	0x2000006c

0801873c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801873c:	b480      	push	{r7}
 801873e:	b083      	sub	sp, #12
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	2243      	movs	r2, #67	; 0x43
 8018748:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801874a:	4b03      	ldr	r3, [pc, #12]	; (8018758 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801874c:	4618      	mov	r0, r3
 801874e:	370c      	adds	r7, #12
 8018750:	46bd      	mov	sp, r7
 8018752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018756:	4770      	bx	lr
 8018758:	200000f4 	.word	0x200000f4

0801875c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801875c:	b480      	push	{r7}
 801875e:	b083      	sub	sp, #12
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	220a      	movs	r2, #10
 8018768:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801876a:	4b03      	ldr	r3, [pc, #12]	; (8018778 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801876c:	4618      	mov	r0, r3
 801876e:	370c      	adds	r7, #12
 8018770:	46bd      	mov	sp, r7
 8018772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018776:	4770      	bx	lr
 8018778:	20000028 	.word	0x20000028

0801877c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801877c:	b480      	push	{r7}
 801877e:	b083      	sub	sp, #12
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
 8018784:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8018786:	683b      	ldr	r3, [r7, #0]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d101      	bne.n	8018790 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801878c:	2303      	movs	r3, #3
 801878e:	e004      	b.n	801879a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	683a      	ldr	r2, [r7, #0]
 8018794:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8018798:	2300      	movs	r3, #0
}
 801879a:	4618      	mov	r0, r3
 801879c:	370c      	adds	r7, #12
 801879e:	46bd      	mov	sp, r7
 80187a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a4:	4770      	bx	lr

080187a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80187a6:	b480      	push	{r7}
 80187a8:	b087      	sub	sp, #28
 80187aa:	af00      	add	r7, sp, #0
 80187ac:	60f8      	str	r0, [r7, #12]
 80187ae:	60b9      	str	r1, [r7, #8]
 80187b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80187b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d101      	bne.n	80187c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80187c0:	2303      	movs	r3, #3
 80187c2:	e008      	b.n	80187d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80187c4:	697b      	ldr	r3, [r7, #20]
 80187c6:	68ba      	ldr	r2, [r7, #8]
 80187c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80187cc:	697b      	ldr	r3, [r7, #20]
 80187ce:	687a      	ldr	r2, [r7, #4]
 80187d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80187d4:	2300      	movs	r3, #0
}
 80187d6:	4618      	mov	r0, r3
 80187d8:	371c      	adds	r7, #28
 80187da:	46bd      	mov	sp, r7
 80187dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e0:	4770      	bx	lr

080187e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80187e2:	b480      	push	{r7}
 80187e4:	b085      	sub	sp, #20
 80187e6:	af00      	add	r7, sp, #0
 80187e8:	6078      	str	r0, [r7, #4]
 80187ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80187f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d101      	bne.n	80187fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80187fa:	2303      	movs	r3, #3
 80187fc:	e004      	b.n	8018808 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	683a      	ldr	r2, [r7, #0]
 8018802:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8018806:	2300      	movs	r3, #0
}
 8018808:	4618      	mov	r0, r3
 801880a:	3714      	adds	r7, #20
 801880c:	46bd      	mov	sp, r7
 801880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018812:	4770      	bx	lr

08018814 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b084      	sub	sp, #16
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018822:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8018824:	2301      	movs	r3, #1
 8018826:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801882e:	2b00      	cmp	r3, #0
 8018830:	d101      	bne.n	8018836 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018832:	2303      	movs	r3, #3
 8018834:	e01a      	b.n	801886c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8018836:	68bb      	ldr	r3, [r7, #8]
 8018838:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801883c:	2b00      	cmp	r3, #0
 801883e:	d114      	bne.n	801886a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8018840:	68bb      	ldr	r3, [r7, #8]
 8018842:	2201      	movs	r2, #1
 8018844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8018848:	68bb      	ldr	r3, [r7, #8]
 801884a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801885e:	2181      	movs	r1, #129	; 0x81
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f006 fe4a 	bl	801f4fa <USBD_LL_Transmit>

    ret = USBD_OK;
 8018866:	2300      	movs	r3, #0
 8018868:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801886a:	7bfb      	ldrb	r3, [r7, #15]
}
 801886c:	4618      	mov	r0, r3
 801886e:	3710      	adds	r7, #16
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}

08018874 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b084      	sub	sp, #16
 8018878:	af00      	add	r7, sp, #0
 801887a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018882:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801888a:	2b00      	cmp	r3, #0
 801888c:	d101      	bne.n	8018892 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801888e:	2303      	movs	r3, #3
 8018890:	e016      	b.n	80188c0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	7c1b      	ldrb	r3, [r3, #16]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d109      	bne.n	80188ae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80188a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80188a4:	2101      	movs	r1, #1
 80188a6:	6878      	ldr	r0, [r7, #4]
 80188a8:	f006 fe48 	bl	801f53c <USBD_LL_PrepareReceive>
 80188ac:	e007      	b.n	80188be <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80188b4:	2340      	movs	r3, #64	; 0x40
 80188b6:	2101      	movs	r1, #1
 80188b8:	6878      	ldr	r0, [r7, #4]
 80188ba:	f006 fe3f 	bl	801f53c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80188be:	2300      	movs	r3, #0
}
 80188c0:	4618      	mov	r0, r3
 80188c2:	3710      	adds	r7, #16
 80188c4:	46bd      	mov	sp, r7
 80188c6:	bd80      	pop	{r7, pc}

080188c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b086      	sub	sp, #24
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	60f8      	str	r0, [r7, #12]
 80188d0:	60b9      	str	r1, [r7, #8]
 80188d2:	4613      	mov	r3, r2
 80188d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d101      	bne.n	80188e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80188dc:	2303      	movs	r3, #3
 80188de:	e01f      	b.n	8018920 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	2200      	movs	r2, #0
 80188e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	2200      	movs	r2, #0
 80188ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	2200      	movs	r2, #0
 80188f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d003      	beq.n	8018906 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	68ba      	ldr	r2, [r7, #8]
 8018902:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	2201      	movs	r2, #1
 801890a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	79fa      	ldrb	r2, [r7, #7]
 8018912:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8018914:	68f8      	ldr	r0, [r7, #12]
 8018916:	f006 fca7 	bl	801f268 <USBD_LL_Init>
 801891a:	4603      	mov	r3, r0
 801891c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801891e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018920:	4618      	mov	r0, r3
 8018922:	3718      	adds	r7, #24
 8018924:	46bd      	mov	sp, r7
 8018926:	bd80      	pop	{r7, pc}

08018928 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b084      	sub	sp, #16
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
 8018930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018932:	2300      	movs	r3, #0
 8018934:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8018936:	683b      	ldr	r3, [r7, #0]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d101      	bne.n	8018940 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801893c:	2303      	movs	r3, #3
 801893e:	e016      	b.n	801896e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	683a      	ldr	r2, [r7, #0]
 8018944:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018950:	2b00      	cmp	r3, #0
 8018952:	d00b      	beq.n	801896c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801895c:	f107 020e 	add.w	r2, r7, #14
 8018960:	4610      	mov	r0, r2
 8018962:	4798      	blx	r3
 8018964:	4602      	mov	r2, r0
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801896c:	2300      	movs	r3, #0
}
 801896e:	4618      	mov	r0, r3
 8018970:	3710      	adds	r7, #16
 8018972:	46bd      	mov	sp, r7
 8018974:	bd80      	pop	{r7, pc}

08018976 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8018976:	b580      	push	{r7, lr}
 8018978:	b082      	sub	sp, #8
 801897a:	af00      	add	r7, sp, #0
 801897c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	f006 fcd2 	bl	801f328 <USBD_LL_Start>
 8018984:	4603      	mov	r3, r0
}
 8018986:	4618      	mov	r0, r3
 8018988:	3708      	adds	r7, #8
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}

0801898e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801898e:	b480      	push	{r7}
 8018990:	b083      	sub	sp, #12
 8018992:	af00      	add	r7, sp, #0
 8018994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018996:	2300      	movs	r3, #0
}
 8018998:	4618      	mov	r0, r3
 801899a:	370c      	adds	r7, #12
 801899c:	46bd      	mov	sp, r7
 801899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a2:	4770      	bx	lr

080189a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
 80189ac:	460b      	mov	r3, r1
 80189ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80189b0:	2303      	movs	r3, #3
 80189b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d009      	beq.n	80189d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	78fa      	ldrb	r2, [r7, #3]
 80189c8:	4611      	mov	r1, r2
 80189ca:	6878      	ldr	r0, [r7, #4]
 80189cc:	4798      	blx	r3
 80189ce:	4603      	mov	r3, r0
 80189d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80189d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80189d4:	4618      	mov	r0, r3
 80189d6:	3710      	adds	r7, #16
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}

080189dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	460b      	mov	r3, r1
 80189e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d007      	beq.n	8018a02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189f8:	685b      	ldr	r3, [r3, #4]
 80189fa:	78fa      	ldrb	r2, [r7, #3]
 80189fc:	4611      	mov	r1, r2
 80189fe:	6878      	ldr	r0, [r7, #4]
 8018a00:	4798      	blx	r3
  }

  return USBD_OK;
 8018a02:	2300      	movs	r3, #0
}
 8018a04:	4618      	mov	r0, r3
 8018a06:	3708      	adds	r7, #8
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	bd80      	pop	{r7, pc}

08018a0c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b084      	sub	sp, #16
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
 8018a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018a1c:	6839      	ldr	r1, [r7, #0]
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f000 ff46 	bl	80198b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	2201      	movs	r2, #1
 8018a28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8018a32:	461a      	mov	r2, r3
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018a40:	f003 031f 	and.w	r3, r3, #31
 8018a44:	2b02      	cmp	r3, #2
 8018a46:	d01a      	beq.n	8018a7e <USBD_LL_SetupStage+0x72>
 8018a48:	2b02      	cmp	r3, #2
 8018a4a:	d822      	bhi.n	8018a92 <USBD_LL_SetupStage+0x86>
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d002      	beq.n	8018a56 <USBD_LL_SetupStage+0x4a>
 8018a50:	2b01      	cmp	r3, #1
 8018a52:	d00a      	beq.n	8018a6a <USBD_LL_SetupStage+0x5e>
 8018a54:	e01d      	b.n	8018a92 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018a5c:	4619      	mov	r1, r3
 8018a5e:	6878      	ldr	r0, [r7, #4]
 8018a60:	f000 f9ee 	bl	8018e40 <USBD_StdDevReq>
 8018a64:	4603      	mov	r3, r0
 8018a66:	73fb      	strb	r3, [r7, #15]
      break;
 8018a68:	e020      	b.n	8018aac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018a70:	4619      	mov	r1, r3
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	f000 fa52 	bl	8018f1c <USBD_StdItfReq>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8018a7c:	e016      	b.n	8018aac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018a84:	4619      	mov	r1, r3
 8018a86:	6878      	ldr	r0, [r7, #4]
 8018a88:	f000 fa91 	bl	8018fae <USBD_StdEPReq>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8018a90:	e00c      	b.n	8018aac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018a98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018a9c:	b2db      	uxtb	r3, r3
 8018a9e:	4619      	mov	r1, r3
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	f006 fca1 	bl	801f3e8 <USBD_LL_StallEP>
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8018aaa:	bf00      	nop
  }

  return ret;
 8018aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8018aae:	4618      	mov	r0, r3
 8018ab0:	3710      	adds	r7, #16
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd80      	pop	{r7, pc}

08018ab6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8018ab6:	b580      	push	{r7, lr}
 8018ab8:	b086      	sub	sp, #24
 8018aba:	af00      	add	r7, sp, #0
 8018abc:	60f8      	str	r0, [r7, #12]
 8018abe:	460b      	mov	r3, r1
 8018ac0:	607a      	str	r2, [r7, #4]
 8018ac2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8018ac4:	7afb      	ldrb	r3, [r7, #11]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d138      	bne.n	8018b3c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018ad0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018ad8:	2b03      	cmp	r3, #3
 8018ada:	d14a      	bne.n	8018b72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	689a      	ldr	r2, [r3, #8]
 8018ae0:	693b      	ldr	r3, [r7, #16]
 8018ae2:	68db      	ldr	r3, [r3, #12]
 8018ae4:	429a      	cmp	r2, r3
 8018ae6:	d913      	bls.n	8018b10 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018ae8:	693b      	ldr	r3, [r7, #16]
 8018aea:	689a      	ldr	r2, [r3, #8]
 8018aec:	693b      	ldr	r3, [r7, #16]
 8018aee:	68db      	ldr	r3, [r3, #12]
 8018af0:	1ad2      	subs	r2, r2, r3
 8018af2:	693b      	ldr	r3, [r7, #16]
 8018af4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8018af6:	693b      	ldr	r3, [r7, #16]
 8018af8:	68da      	ldr	r2, [r3, #12]
 8018afa:	693b      	ldr	r3, [r7, #16]
 8018afc:	689b      	ldr	r3, [r3, #8]
 8018afe:	4293      	cmp	r3, r2
 8018b00:	bf28      	it	cs
 8018b02:	4613      	movcs	r3, r2
 8018b04:	461a      	mov	r2, r3
 8018b06:	6879      	ldr	r1, [r7, #4]
 8018b08:	68f8      	ldr	r0, [r7, #12]
 8018b0a:	f000 ffc5 	bl	8019a98 <USBD_CtlContinueRx>
 8018b0e:	e030      	b.n	8018b72 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018b16:	b2db      	uxtb	r3, r3
 8018b18:	2b03      	cmp	r3, #3
 8018b1a:	d10b      	bne.n	8018b34 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b22:	691b      	ldr	r3, [r3, #16]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d005      	beq.n	8018b34 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b2e:	691b      	ldr	r3, [r3, #16]
 8018b30:	68f8      	ldr	r0, [r7, #12]
 8018b32:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8018b34:	68f8      	ldr	r0, [r7, #12]
 8018b36:	f000 ffc0 	bl	8019aba <USBD_CtlSendStatus>
 8018b3a:	e01a      	b.n	8018b72 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018b42:	b2db      	uxtb	r3, r3
 8018b44:	2b03      	cmp	r3, #3
 8018b46:	d114      	bne.n	8018b72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b4e:	699b      	ldr	r3, [r3, #24]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d00e      	beq.n	8018b72 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b5a:	699b      	ldr	r3, [r3, #24]
 8018b5c:	7afa      	ldrb	r2, [r7, #11]
 8018b5e:	4611      	mov	r1, r2
 8018b60:	68f8      	ldr	r0, [r7, #12]
 8018b62:	4798      	blx	r3
 8018b64:	4603      	mov	r3, r0
 8018b66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8018b68:	7dfb      	ldrb	r3, [r7, #23]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d001      	beq.n	8018b72 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8018b6e:	7dfb      	ldrb	r3, [r7, #23]
 8018b70:	e000      	b.n	8018b74 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8018b72:	2300      	movs	r3, #0
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	3718      	adds	r7, #24
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}

08018b7c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b086      	sub	sp, #24
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	60f8      	str	r0, [r7, #12]
 8018b84:	460b      	mov	r3, r1
 8018b86:	607a      	str	r2, [r7, #4]
 8018b88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8018b8a:	7afb      	ldrb	r3, [r7, #11]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d16b      	bne.n	8018c68 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	3314      	adds	r3, #20
 8018b94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018b9c:	2b02      	cmp	r3, #2
 8018b9e:	d156      	bne.n	8018c4e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8018ba0:	693b      	ldr	r3, [r7, #16]
 8018ba2:	689a      	ldr	r2, [r3, #8]
 8018ba4:	693b      	ldr	r3, [r7, #16]
 8018ba6:	68db      	ldr	r3, [r3, #12]
 8018ba8:	429a      	cmp	r2, r3
 8018baa:	d914      	bls.n	8018bd6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018bac:	693b      	ldr	r3, [r7, #16]
 8018bae:	689a      	ldr	r2, [r3, #8]
 8018bb0:	693b      	ldr	r3, [r7, #16]
 8018bb2:	68db      	ldr	r3, [r3, #12]
 8018bb4:	1ad2      	subs	r2, r2, r3
 8018bb6:	693b      	ldr	r3, [r7, #16]
 8018bb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8018bba:	693b      	ldr	r3, [r7, #16]
 8018bbc:	689b      	ldr	r3, [r3, #8]
 8018bbe:	461a      	mov	r2, r3
 8018bc0:	6879      	ldr	r1, [r7, #4]
 8018bc2:	68f8      	ldr	r0, [r7, #12]
 8018bc4:	f000 ff3a 	bl	8019a3c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018bc8:	2300      	movs	r3, #0
 8018bca:	2200      	movs	r2, #0
 8018bcc:	2100      	movs	r1, #0
 8018bce:	68f8      	ldr	r0, [r7, #12]
 8018bd0:	f006 fcb4 	bl	801f53c <USBD_LL_PrepareReceive>
 8018bd4:	e03b      	b.n	8018c4e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8018bd6:	693b      	ldr	r3, [r7, #16]
 8018bd8:	68da      	ldr	r2, [r3, #12]
 8018bda:	693b      	ldr	r3, [r7, #16]
 8018bdc:	689b      	ldr	r3, [r3, #8]
 8018bde:	429a      	cmp	r2, r3
 8018be0:	d11c      	bne.n	8018c1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8018be2:	693b      	ldr	r3, [r7, #16]
 8018be4:	685a      	ldr	r2, [r3, #4]
 8018be6:	693b      	ldr	r3, [r7, #16]
 8018be8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8018bea:	429a      	cmp	r2, r3
 8018bec:	d316      	bcc.n	8018c1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8018bee:	693b      	ldr	r3, [r7, #16]
 8018bf0:	685a      	ldr	r2, [r3, #4]
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d20f      	bcs.n	8018c1c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	2100      	movs	r1, #0
 8018c00:	68f8      	ldr	r0, [r7, #12]
 8018c02:	f000 ff1b 	bl	8019a3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	2200      	movs	r2, #0
 8018c0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018c0e:	2300      	movs	r3, #0
 8018c10:	2200      	movs	r2, #0
 8018c12:	2100      	movs	r1, #0
 8018c14:	68f8      	ldr	r0, [r7, #12]
 8018c16:	f006 fc91 	bl	801f53c <USBD_LL_PrepareReceive>
 8018c1a:	e018      	b.n	8018c4e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018c22:	b2db      	uxtb	r3, r3
 8018c24:	2b03      	cmp	r3, #3
 8018c26:	d10b      	bne.n	8018c40 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c2e:	68db      	ldr	r3, [r3, #12]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d005      	beq.n	8018c40 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c3a:	68db      	ldr	r3, [r3, #12]
 8018c3c:	68f8      	ldr	r0, [r7, #12]
 8018c3e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018c40:	2180      	movs	r1, #128	; 0x80
 8018c42:	68f8      	ldr	r0, [r7, #12]
 8018c44:	f006 fbd0 	bl	801f3e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8018c48:	68f8      	ldr	r0, [r7, #12]
 8018c4a:	f000 ff49 	bl	8019ae0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8018c54:	2b01      	cmp	r3, #1
 8018c56:	d122      	bne.n	8018c9e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8018c58:	68f8      	ldr	r0, [r7, #12]
 8018c5a:	f7ff fe98 	bl	801898e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	2200      	movs	r2, #0
 8018c62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8018c66:	e01a      	b.n	8018c9e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018c6e:	b2db      	uxtb	r3, r3
 8018c70:	2b03      	cmp	r3, #3
 8018c72:	d114      	bne.n	8018c9e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c7a:	695b      	ldr	r3, [r3, #20]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d00e      	beq.n	8018c9e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c86:	695b      	ldr	r3, [r3, #20]
 8018c88:	7afa      	ldrb	r2, [r7, #11]
 8018c8a:	4611      	mov	r1, r2
 8018c8c:	68f8      	ldr	r0, [r7, #12]
 8018c8e:	4798      	blx	r3
 8018c90:	4603      	mov	r3, r0
 8018c92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8018c94:	7dfb      	ldrb	r3, [r7, #23]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d001      	beq.n	8018c9e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8018c9a:	7dfb      	ldrb	r3, [r7, #23]
 8018c9c:	e000      	b.n	8018ca0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8018c9e:	2300      	movs	r3, #0
}
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	3718      	adds	r7, #24
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	bd80      	pop	{r7, pc}

08018ca8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b082      	sub	sp, #8
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	2201      	movs	r2, #1
 8018cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2200      	movs	r2, #0
 8018cbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	2200      	movs	r2, #0
 8018cca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d101      	bne.n	8018cdc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8018cd8:	2303      	movs	r3, #3
 8018cda:	e02f      	b.n	8018d3c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d00f      	beq.n	8018d06 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018cec:	685b      	ldr	r3, [r3, #4]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d009      	beq.n	8018d06 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018cf8:	685b      	ldr	r3, [r3, #4]
 8018cfa:	687a      	ldr	r2, [r7, #4]
 8018cfc:	6852      	ldr	r2, [r2, #4]
 8018cfe:	b2d2      	uxtb	r2, r2
 8018d00:	4611      	mov	r1, r2
 8018d02:	6878      	ldr	r0, [r7, #4]
 8018d04:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018d06:	2340      	movs	r3, #64	; 0x40
 8018d08:	2200      	movs	r2, #0
 8018d0a:	2100      	movs	r1, #0
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f006 fb26 	bl	801f35e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	2201      	movs	r2, #1
 8018d16:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	2240      	movs	r2, #64	; 0x40
 8018d1e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018d22:	2340      	movs	r3, #64	; 0x40
 8018d24:	2200      	movs	r2, #0
 8018d26:	2180      	movs	r1, #128	; 0x80
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	f006 fb18 	bl	801f35e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	2201      	movs	r2, #1
 8018d32:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	2240      	movs	r2, #64	; 0x40
 8018d38:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8018d3a:	2300      	movs	r3, #0
}
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	3708      	adds	r7, #8
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd80      	pop	{r7, pc}

08018d44 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018d44:	b480      	push	{r7}
 8018d46:	b083      	sub	sp, #12
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
 8018d4c:	460b      	mov	r3, r1
 8018d4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	78fa      	ldrb	r2, [r7, #3]
 8018d54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018d56:	2300      	movs	r3, #0
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	370c      	adds	r7, #12
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d62:	4770      	bx	lr

08018d64 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018d64:	b480      	push	{r7}
 8018d66:	b083      	sub	sp, #12
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018d72:	b2da      	uxtb	r2, r3
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	2204      	movs	r2, #4
 8018d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8018d82:	2300      	movs	r3, #0
}
 8018d84:	4618      	mov	r0, r3
 8018d86:	370c      	adds	r7, #12
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8e:	4770      	bx	lr

08018d90 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018d90:	b480      	push	{r7}
 8018d92:	b083      	sub	sp, #12
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	2b04      	cmp	r3, #4
 8018da2:	d106      	bne.n	8018db2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8018daa:	b2da      	uxtb	r2, r3
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8018db2:	2300      	movs	r3, #0
}
 8018db4:	4618      	mov	r0, r3
 8018db6:	370c      	adds	r7, #12
 8018db8:	46bd      	mov	sp, r7
 8018dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dbe:	4770      	bx	lr

08018dc0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b082      	sub	sp, #8
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d101      	bne.n	8018dd6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8018dd2:	2303      	movs	r3, #3
 8018dd4:	e012      	b.n	8018dfc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	2b03      	cmp	r3, #3
 8018de0:	d10b      	bne.n	8018dfa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018de8:	69db      	ldr	r3, [r3, #28]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d005      	beq.n	8018dfa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018df4:	69db      	ldr	r3, [r3, #28]
 8018df6:	6878      	ldr	r0, [r7, #4]
 8018df8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018dfa:	2300      	movs	r3, #0
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	3708      	adds	r7, #8
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bd80      	pop	{r7, pc}

08018e04 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018e04:	b480      	push	{r7}
 8018e06:	b087      	sub	sp, #28
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018e10:	697b      	ldr	r3, [r7, #20]
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018e16:	697b      	ldr	r3, [r7, #20]
 8018e18:	3301      	adds	r3, #1
 8018e1a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018e1c:	697b      	ldr	r3, [r7, #20]
 8018e1e:	781b      	ldrb	r3, [r3, #0]
 8018e20:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018e22:	8a3b      	ldrh	r3, [r7, #16]
 8018e24:	021b      	lsls	r3, r3, #8
 8018e26:	b21a      	sxth	r2, r3
 8018e28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018e2c:	4313      	orrs	r3, r2
 8018e2e:	b21b      	sxth	r3, r3
 8018e30:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018e32:	89fb      	ldrh	r3, [r7, #14]
}
 8018e34:	4618      	mov	r0, r3
 8018e36:	371c      	adds	r7, #28
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3e:	4770      	bx	lr

08018e40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b084      	sub	sp, #16
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
 8018e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018e4e:	683b      	ldr	r3, [r7, #0]
 8018e50:	781b      	ldrb	r3, [r3, #0]
 8018e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018e56:	2b40      	cmp	r3, #64	; 0x40
 8018e58:	d005      	beq.n	8018e66 <USBD_StdDevReq+0x26>
 8018e5a:	2b40      	cmp	r3, #64	; 0x40
 8018e5c:	d853      	bhi.n	8018f06 <USBD_StdDevReq+0xc6>
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d00b      	beq.n	8018e7a <USBD_StdDevReq+0x3a>
 8018e62:	2b20      	cmp	r3, #32
 8018e64:	d14f      	bne.n	8018f06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018e6c:	689b      	ldr	r3, [r3, #8]
 8018e6e:	6839      	ldr	r1, [r7, #0]
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	4798      	blx	r3
 8018e74:	4603      	mov	r3, r0
 8018e76:	73fb      	strb	r3, [r7, #15]
      break;
 8018e78:	e04a      	b.n	8018f10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018e7a:	683b      	ldr	r3, [r7, #0]
 8018e7c:	785b      	ldrb	r3, [r3, #1]
 8018e7e:	2b09      	cmp	r3, #9
 8018e80:	d83b      	bhi.n	8018efa <USBD_StdDevReq+0xba>
 8018e82:	a201      	add	r2, pc, #4	; (adr r2, 8018e88 <USBD_StdDevReq+0x48>)
 8018e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e88:	08018edd 	.word	0x08018edd
 8018e8c:	08018ef1 	.word	0x08018ef1
 8018e90:	08018efb 	.word	0x08018efb
 8018e94:	08018ee7 	.word	0x08018ee7
 8018e98:	08018efb 	.word	0x08018efb
 8018e9c:	08018ebb 	.word	0x08018ebb
 8018ea0:	08018eb1 	.word	0x08018eb1
 8018ea4:	08018efb 	.word	0x08018efb
 8018ea8:	08018ed3 	.word	0x08018ed3
 8018eac:	08018ec5 	.word	0x08018ec5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018eb0:	6839      	ldr	r1, [r7, #0]
 8018eb2:	6878      	ldr	r0, [r7, #4]
 8018eb4:	f000 f9de 	bl	8019274 <USBD_GetDescriptor>
          break;
 8018eb8:	e024      	b.n	8018f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018eba:	6839      	ldr	r1, [r7, #0]
 8018ebc:	6878      	ldr	r0, [r7, #4]
 8018ebe:	f000 fb6d 	bl	801959c <USBD_SetAddress>
          break;
 8018ec2:	e01f      	b.n	8018f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018ec4:	6839      	ldr	r1, [r7, #0]
 8018ec6:	6878      	ldr	r0, [r7, #4]
 8018ec8:	f000 fbac 	bl	8019624 <USBD_SetConfig>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	73fb      	strb	r3, [r7, #15]
          break;
 8018ed0:	e018      	b.n	8018f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018ed2:	6839      	ldr	r1, [r7, #0]
 8018ed4:	6878      	ldr	r0, [r7, #4]
 8018ed6:	f000 fc4b 	bl	8019770 <USBD_GetConfig>
          break;
 8018eda:	e013      	b.n	8018f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018edc:	6839      	ldr	r1, [r7, #0]
 8018ede:	6878      	ldr	r0, [r7, #4]
 8018ee0:	f000 fc7c 	bl	80197dc <USBD_GetStatus>
          break;
 8018ee4:	e00e      	b.n	8018f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018ee6:	6839      	ldr	r1, [r7, #0]
 8018ee8:	6878      	ldr	r0, [r7, #4]
 8018eea:	f000 fcab 	bl	8019844 <USBD_SetFeature>
          break;
 8018eee:	e009      	b.n	8018f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018ef0:	6839      	ldr	r1, [r7, #0]
 8018ef2:	6878      	ldr	r0, [r7, #4]
 8018ef4:	f000 fcba 	bl	801986c <USBD_ClrFeature>
          break;
 8018ef8:	e004      	b.n	8018f04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8018efa:	6839      	ldr	r1, [r7, #0]
 8018efc:	6878      	ldr	r0, [r7, #4]
 8018efe:	f000 fd11 	bl	8019924 <USBD_CtlError>
          break;
 8018f02:	bf00      	nop
      }
      break;
 8018f04:	e004      	b.n	8018f10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8018f06:	6839      	ldr	r1, [r7, #0]
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f000 fd0b 	bl	8019924 <USBD_CtlError>
      break;
 8018f0e:	bf00      	nop
  }

  return ret;
 8018f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f12:	4618      	mov	r0, r3
 8018f14:	3710      	adds	r7, #16
 8018f16:	46bd      	mov	sp, r7
 8018f18:	bd80      	pop	{r7, pc}
 8018f1a:	bf00      	nop

08018f1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b084      	sub	sp, #16
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
 8018f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018f26:	2300      	movs	r3, #0
 8018f28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	781b      	ldrb	r3, [r3, #0]
 8018f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018f32:	2b40      	cmp	r3, #64	; 0x40
 8018f34:	d005      	beq.n	8018f42 <USBD_StdItfReq+0x26>
 8018f36:	2b40      	cmp	r3, #64	; 0x40
 8018f38:	d82f      	bhi.n	8018f9a <USBD_StdItfReq+0x7e>
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d001      	beq.n	8018f42 <USBD_StdItfReq+0x26>
 8018f3e:	2b20      	cmp	r3, #32
 8018f40:	d12b      	bne.n	8018f9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f48:	b2db      	uxtb	r3, r3
 8018f4a:	3b01      	subs	r3, #1
 8018f4c:	2b02      	cmp	r3, #2
 8018f4e:	d81d      	bhi.n	8018f8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018f50:	683b      	ldr	r3, [r7, #0]
 8018f52:	889b      	ldrh	r3, [r3, #4]
 8018f54:	b2db      	uxtb	r3, r3
 8018f56:	2b01      	cmp	r3, #1
 8018f58:	d813      	bhi.n	8018f82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018f60:	689b      	ldr	r3, [r3, #8]
 8018f62:	6839      	ldr	r1, [r7, #0]
 8018f64:	6878      	ldr	r0, [r7, #4]
 8018f66:	4798      	blx	r3
 8018f68:	4603      	mov	r3, r0
 8018f6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018f6c:	683b      	ldr	r3, [r7, #0]
 8018f6e:	88db      	ldrh	r3, [r3, #6]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d110      	bne.n	8018f96 <USBD_StdItfReq+0x7a>
 8018f74:	7bfb      	ldrb	r3, [r7, #15]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d10d      	bne.n	8018f96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018f7a:	6878      	ldr	r0, [r7, #4]
 8018f7c:	f000 fd9d 	bl	8019aba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018f80:	e009      	b.n	8018f96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8018f82:	6839      	ldr	r1, [r7, #0]
 8018f84:	6878      	ldr	r0, [r7, #4]
 8018f86:	f000 fccd 	bl	8019924 <USBD_CtlError>
          break;
 8018f8a:	e004      	b.n	8018f96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8018f8c:	6839      	ldr	r1, [r7, #0]
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f000 fcc8 	bl	8019924 <USBD_CtlError>
          break;
 8018f94:	e000      	b.n	8018f98 <USBD_StdItfReq+0x7c>
          break;
 8018f96:	bf00      	nop
      }
      break;
 8018f98:	e004      	b.n	8018fa4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8018f9a:	6839      	ldr	r1, [r7, #0]
 8018f9c:	6878      	ldr	r0, [r7, #4]
 8018f9e:	f000 fcc1 	bl	8019924 <USBD_CtlError>
      break;
 8018fa2:	bf00      	nop
  }

  return ret;
 8018fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	3710      	adds	r7, #16
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}

08018fae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018fae:	b580      	push	{r7, lr}
 8018fb0:	b084      	sub	sp, #16
 8018fb2:	af00      	add	r7, sp, #0
 8018fb4:	6078      	str	r0, [r7, #4]
 8018fb6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	889b      	ldrh	r3, [r3, #4]
 8018fc0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018fc2:	683b      	ldr	r3, [r7, #0]
 8018fc4:	781b      	ldrb	r3, [r3, #0]
 8018fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018fca:	2b40      	cmp	r3, #64	; 0x40
 8018fcc:	d007      	beq.n	8018fde <USBD_StdEPReq+0x30>
 8018fce:	2b40      	cmp	r3, #64	; 0x40
 8018fd0:	f200 8145 	bhi.w	801925e <USBD_StdEPReq+0x2b0>
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d00c      	beq.n	8018ff2 <USBD_StdEPReq+0x44>
 8018fd8:	2b20      	cmp	r3, #32
 8018fda:	f040 8140 	bne.w	801925e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018fe4:	689b      	ldr	r3, [r3, #8]
 8018fe6:	6839      	ldr	r1, [r7, #0]
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	4798      	blx	r3
 8018fec:	4603      	mov	r3, r0
 8018fee:	73fb      	strb	r3, [r7, #15]
      break;
 8018ff0:	e13a      	b.n	8019268 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	785b      	ldrb	r3, [r3, #1]
 8018ff6:	2b03      	cmp	r3, #3
 8018ff8:	d007      	beq.n	801900a <USBD_StdEPReq+0x5c>
 8018ffa:	2b03      	cmp	r3, #3
 8018ffc:	f300 8129 	bgt.w	8019252 <USBD_StdEPReq+0x2a4>
 8019000:	2b00      	cmp	r3, #0
 8019002:	d07f      	beq.n	8019104 <USBD_StdEPReq+0x156>
 8019004:	2b01      	cmp	r3, #1
 8019006:	d03c      	beq.n	8019082 <USBD_StdEPReq+0xd4>
 8019008:	e123      	b.n	8019252 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019010:	b2db      	uxtb	r3, r3
 8019012:	2b02      	cmp	r3, #2
 8019014:	d002      	beq.n	801901c <USBD_StdEPReq+0x6e>
 8019016:	2b03      	cmp	r3, #3
 8019018:	d016      	beq.n	8019048 <USBD_StdEPReq+0x9a>
 801901a:	e02c      	b.n	8019076 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801901c:	7bbb      	ldrb	r3, [r7, #14]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d00d      	beq.n	801903e <USBD_StdEPReq+0x90>
 8019022:	7bbb      	ldrb	r3, [r7, #14]
 8019024:	2b80      	cmp	r3, #128	; 0x80
 8019026:	d00a      	beq.n	801903e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8019028:	7bbb      	ldrb	r3, [r7, #14]
 801902a:	4619      	mov	r1, r3
 801902c:	6878      	ldr	r0, [r7, #4]
 801902e:	f006 f9db 	bl	801f3e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8019032:	2180      	movs	r1, #128	; 0x80
 8019034:	6878      	ldr	r0, [r7, #4]
 8019036:	f006 f9d7 	bl	801f3e8 <USBD_LL_StallEP>
 801903a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801903c:	e020      	b.n	8019080 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801903e:	6839      	ldr	r1, [r7, #0]
 8019040:	6878      	ldr	r0, [r7, #4]
 8019042:	f000 fc6f 	bl	8019924 <USBD_CtlError>
              break;
 8019046:	e01b      	b.n	8019080 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019048:	683b      	ldr	r3, [r7, #0]
 801904a:	885b      	ldrh	r3, [r3, #2]
 801904c:	2b00      	cmp	r3, #0
 801904e:	d10e      	bne.n	801906e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8019050:	7bbb      	ldrb	r3, [r7, #14]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d00b      	beq.n	801906e <USBD_StdEPReq+0xc0>
 8019056:	7bbb      	ldrb	r3, [r7, #14]
 8019058:	2b80      	cmp	r3, #128	; 0x80
 801905a:	d008      	beq.n	801906e <USBD_StdEPReq+0xc0>
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	88db      	ldrh	r3, [r3, #6]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d104      	bne.n	801906e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8019064:	7bbb      	ldrb	r3, [r7, #14]
 8019066:	4619      	mov	r1, r3
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	f006 f9bd 	bl	801f3e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801906e:	6878      	ldr	r0, [r7, #4]
 8019070:	f000 fd23 	bl	8019aba <USBD_CtlSendStatus>

              break;
 8019074:	e004      	b.n	8019080 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8019076:	6839      	ldr	r1, [r7, #0]
 8019078:	6878      	ldr	r0, [r7, #4]
 801907a:	f000 fc53 	bl	8019924 <USBD_CtlError>
              break;
 801907e:	bf00      	nop
          }
          break;
 8019080:	e0ec      	b.n	801925c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019088:	b2db      	uxtb	r3, r3
 801908a:	2b02      	cmp	r3, #2
 801908c:	d002      	beq.n	8019094 <USBD_StdEPReq+0xe6>
 801908e:	2b03      	cmp	r3, #3
 8019090:	d016      	beq.n	80190c0 <USBD_StdEPReq+0x112>
 8019092:	e030      	b.n	80190f6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019094:	7bbb      	ldrb	r3, [r7, #14]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d00d      	beq.n	80190b6 <USBD_StdEPReq+0x108>
 801909a:	7bbb      	ldrb	r3, [r7, #14]
 801909c:	2b80      	cmp	r3, #128	; 0x80
 801909e:	d00a      	beq.n	80190b6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80190a0:	7bbb      	ldrb	r3, [r7, #14]
 80190a2:	4619      	mov	r1, r3
 80190a4:	6878      	ldr	r0, [r7, #4]
 80190a6:	f006 f99f 	bl	801f3e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80190aa:	2180      	movs	r1, #128	; 0x80
 80190ac:	6878      	ldr	r0, [r7, #4]
 80190ae:	f006 f99b 	bl	801f3e8 <USBD_LL_StallEP>
 80190b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80190b4:	e025      	b.n	8019102 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80190b6:	6839      	ldr	r1, [r7, #0]
 80190b8:	6878      	ldr	r0, [r7, #4]
 80190ba:	f000 fc33 	bl	8019924 <USBD_CtlError>
              break;
 80190be:	e020      	b.n	8019102 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80190c0:	683b      	ldr	r3, [r7, #0]
 80190c2:	885b      	ldrh	r3, [r3, #2]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d11b      	bne.n	8019100 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80190c8:	7bbb      	ldrb	r3, [r7, #14]
 80190ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d004      	beq.n	80190dc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80190d2:	7bbb      	ldrb	r3, [r7, #14]
 80190d4:	4619      	mov	r1, r3
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	f006 f9a5 	bl	801f426 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80190dc:	6878      	ldr	r0, [r7, #4]
 80190de:	f000 fcec 	bl	8019aba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80190e8:	689b      	ldr	r3, [r3, #8]
 80190ea:	6839      	ldr	r1, [r7, #0]
 80190ec:	6878      	ldr	r0, [r7, #4]
 80190ee:	4798      	blx	r3
 80190f0:	4603      	mov	r3, r0
 80190f2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80190f4:	e004      	b.n	8019100 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80190f6:	6839      	ldr	r1, [r7, #0]
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	f000 fc13 	bl	8019924 <USBD_CtlError>
              break;
 80190fe:	e000      	b.n	8019102 <USBD_StdEPReq+0x154>
              break;
 8019100:	bf00      	nop
          }
          break;
 8019102:	e0ab      	b.n	801925c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801910a:	b2db      	uxtb	r3, r3
 801910c:	2b02      	cmp	r3, #2
 801910e:	d002      	beq.n	8019116 <USBD_StdEPReq+0x168>
 8019110:	2b03      	cmp	r3, #3
 8019112:	d032      	beq.n	801917a <USBD_StdEPReq+0x1cc>
 8019114:	e097      	b.n	8019246 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019116:	7bbb      	ldrb	r3, [r7, #14]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d007      	beq.n	801912c <USBD_StdEPReq+0x17e>
 801911c:	7bbb      	ldrb	r3, [r7, #14]
 801911e:	2b80      	cmp	r3, #128	; 0x80
 8019120:	d004      	beq.n	801912c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8019122:	6839      	ldr	r1, [r7, #0]
 8019124:	6878      	ldr	r0, [r7, #4]
 8019126:	f000 fbfd 	bl	8019924 <USBD_CtlError>
                break;
 801912a:	e091      	b.n	8019250 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801912c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019130:	2b00      	cmp	r3, #0
 8019132:	da0b      	bge.n	801914c <USBD_StdEPReq+0x19e>
 8019134:	7bbb      	ldrb	r3, [r7, #14]
 8019136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801913a:	4613      	mov	r3, r2
 801913c:	009b      	lsls	r3, r3, #2
 801913e:	4413      	add	r3, r2
 8019140:	009b      	lsls	r3, r3, #2
 8019142:	3310      	adds	r3, #16
 8019144:	687a      	ldr	r2, [r7, #4]
 8019146:	4413      	add	r3, r2
 8019148:	3304      	adds	r3, #4
 801914a:	e00b      	b.n	8019164 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801914c:	7bbb      	ldrb	r3, [r7, #14]
 801914e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019152:	4613      	mov	r3, r2
 8019154:	009b      	lsls	r3, r3, #2
 8019156:	4413      	add	r3, r2
 8019158:	009b      	lsls	r3, r3, #2
 801915a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801915e:	687a      	ldr	r2, [r7, #4]
 8019160:	4413      	add	r3, r2
 8019162:	3304      	adds	r3, #4
 8019164:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8019166:	68bb      	ldr	r3, [r7, #8]
 8019168:	2200      	movs	r2, #0
 801916a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801916c:	68bb      	ldr	r3, [r7, #8]
 801916e:	2202      	movs	r2, #2
 8019170:	4619      	mov	r1, r3
 8019172:	6878      	ldr	r0, [r7, #4]
 8019174:	f000 fc47 	bl	8019a06 <USBD_CtlSendData>
              break;
 8019178:	e06a      	b.n	8019250 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801917a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801917e:	2b00      	cmp	r3, #0
 8019180:	da11      	bge.n	80191a6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8019182:	7bbb      	ldrb	r3, [r7, #14]
 8019184:	f003 020f 	and.w	r2, r3, #15
 8019188:	6879      	ldr	r1, [r7, #4]
 801918a:	4613      	mov	r3, r2
 801918c:	009b      	lsls	r3, r3, #2
 801918e:	4413      	add	r3, r2
 8019190:	009b      	lsls	r3, r3, #2
 8019192:	440b      	add	r3, r1
 8019194:	3324      	adds	r3, #36	; 0x24
 8019196:	881b      	ldrh	r3, [r3, #0]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d117      	bne.n	80191cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801919c:	6839      	ldr	r1, [r7, #0]
 801919e:	6878      	ldr	r0, [r7, #4]
 80191a0:	f000 fbc0 	bl	8019924 <USBD_CtlError>
                  break;
 80191a4:	e054      	b.n	8019250 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80191a6:	7bbb      	ldrb	r3, [r7, #14]
 80191a8:	f003 020f 	and.w	r2, r3, #15
 80191ac:	6879      	ldr	r1, [r7, #4]
 80191ae:	4613      	mov	r3, r2
 80191b0:	009b      	lsls	r3, r3, #2
 80191b2:	4413      	add	r3, r2
 80191b4:	009b      	lsls	r3, r3, #2
 80191b6:	440b      	add	r3, r1
 80191b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80191bc:	881b      	ldrh	r3, [r3, #0]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d104      	bne.n	80191cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80191c2:	6839      	ldr	r1, [r7, #0]
 80191c4:	6878      	ldr	r0, [r7, #4]
 80191c6:	f000 fbad 	bl	8019924 <USBD_CtlError>
                  break;
 80191ca:	e041      	b.n	8019250 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80191cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	da0b      	bge.n	80191ec <USBD_StdEPReq+0x23e>
 80191d4:	7bbb      	ldrb	r3, [r7, #14]
 80191d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80191da:	4613      	mov	r3, r2
 80191dc:	009b      	lsls	r3, r3, #2
 80191de:	4413      	add	r3, r2
 80191e0:	009b      	lsls	r3, r3, #2
 80191e2:	3310      	adds	r3, #16
 80191e4:	687a      	ldr	r2, [r7, #4]
 80191e6:	4413      	add	r3, r2
 80191e8:	3304      	adds	r3, #4
 80191ea:	e00b      	b.n	8019204 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80191ec:	7bbb      	ldrb	r3, [r7, #14]
 80191ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80191f2:	4613      	mov	r3, r2
 80191f4:	009b      	lsls	r3, r3, #2
 80191f6:	4413      	add	r3, r2
 80191f8:	009b      	lsls	r3, r3, #2
 80191fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80191fe:	687a      	ldr	r2, [r7, #4]
 8019200:	4413      	add	r3, r2
 8019202:	3304      	adds	r3, #4
 8019204:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8019206:	7bbb      	ldrb	r3, [r7, #14]
 8019208:	2b00      	cmp	r3, #0
 801920a:	d002      	beq.n	8019212 <USBD_StdEPReq+0x264>
 801920c:	7bbb      	ldrb	r3, [r7, #14]
 801920e:	2b80      	cmp	r3, #128	; 0x80
 8019210:	d103      	bne.n	801921a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8019212:	68bb      	ldr	r3, [r7, #8]
 8019214:	2200      	movs	r2, #0
 8019216:	601a      	str	r2, [r3, #0]
 8019218:	e00e      	b.n	8019238 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801921a:	7bbb      	ldrb	r3, [r7, #14]
 801921c:	4619      	mov	r1, r3
 801921e:	6878      	ldr	r0, [r7, #4]
 8019220:	f006 f920 	bl	801f464 <USBD_LL_IsStallEP>
 8019224:	4603      	mov	r3, r0
 8019226:	2b00      	cmp	r3, #0
 8019228:	d003      	beq.n	8019232 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801922a:	68bb      	ldr	r3, [r7, #8]
 801922c:	2201      	movs	r2, #1
 801922e:	601a      	str	r2, [r3, #0]
 8019230:	e002      	b.n	8019238 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8019232:	68bb      	ldr	r3, [r7, #8]
 8019234:	2200      	movs	r2, #0
 8019236:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8019238:	68bb      	ldr	r3, [r7, #8]
 801923a:	2202      	movs	r2, #2
 801923c:	4619      	mov	r1, r3
 801923e:	6878      	ldr	r0, [r7, #4]
 8019240:	f000 fbe1 	bl	8019a06 <USBD_CtlSendData>
              break;
 8019244:	e004      	b.n	8019250 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8019246:	6839      	ldr	r1, [r7, #0]
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	f000 fb6b 	bl	8019924 <USBD_CtlError>
              break;
 801924e:	bf00      	nop
          }
          break;
 8019250:	e004      	b.n	801925c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8019252:	6839      	ldr	r1, [r7, #0]
 8019254:	6878      	ldr	r0, [r7, #4]
 8019256:	f000 fb65 	bl	8019924 <USBD_CtlError>
          break;
 801925a:	bf00      	nop
      }
      break;
 801925c:	e004      	b.n	8019268 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801925e:	6839      	ldr	r1, [r7, #0]
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f000 fb5f 	bl	8019924 <USBD_CtlError>
      break;
 8019266:	bf00      	nop
  }

  return ret;
 8019268:	7bfb      	ldrb	r3, [r7, #15]
}
 801926a:	4618      	mov	r0, r3
 801926c:	3710      	adds	r7, #16
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}
	...

08019274 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b084      	sub	sp, #16
 8019278:	af00      	add	r7, sp, #0
 801927a:	6078      	str	r0, [r7, #4]
 801927c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801927e:	2300      	movs	r3, #0
 8019280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8019282:	2300      	movs	r3, #0
 8019284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8019286:	2300      	movs	r3, #0
 8019288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801928a:	683b      	ldr	r3, [r7, #0]
 801928c:	885b      	ldrh	r3, [r3, #2]
 801928e:	0a1b      	lsrs	r3, r3, #8
 8019290:	b29b      	uxth	r3, r3
 8019292:	3b01      	subs	r3, #1
 8019294:	2b0e      	cmp	r3, #14
 8019296:	f200 8152 	bhi.w	801953e <USBD_GetDescriptor+0x2ca>
 801929a:	a201      	add	r2, pc, #4	; (adr r2, 80192a0 <USBD_GetDescriptor+0x2c>)
 801929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192a0:	08019311 	.word	0x08019311
 80192a4:	08019329 	.word	0x08019329
 80192a8:	08019369 	.word	0x08019369
 80192ac:	0801953f 	.word	0x0801953f
 80192b0:	0801953f 	.word	0x0801953f
 80192b4:	080194df 	.word	0x080194df
 80192b8:	0801950b 	.word	0x0801950b
 80192bc:	0801953f 	.word	0x0801953f
 80192c0:	0801953f 	.word	0x0801953f
 80192c4:	0801953f 	.word	0x0801953f
 80192c8:	0801953f 	.word	0x0801953f
 80192cc:	0801953f 	.word	0x0801953f
 80192d0:	0801953f 	.word	0x0801953f
 80192d4:	0801953f 	.word	0x0801953f
 80192d8:	080192dd 	.word	0x080192dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80192e2:	69db      	ldr	r3, [r3, #28]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d00b      	beq.n	8019300 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80192ee:	69db      	ldr	r3, [r3, #28]
 80192f0:	687a      	ldr	r2, [r7, #4]
 80192f2:	7c12      	ldrb	r2, [r2, #16]
 80192f4:	f107 0108 	add.w	r1, r7, #8
 80192f8:	4610      	mov	r0, r2
 80192fa:	4798      	blx	r3
 80192fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80192fe:	e126      	b.n	801954e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019300:	6839      	ldr	r1, [r7, #0]
 8019302:	6878      	ldr	r0, [r7, #4]
 8019304:	f000 fb0e 	bl	8019924 <USBD_CtlError>
        err++;
 8019308:	7afb      	ldrb	r3, [r7, #11]
 801930a:	3301      	adds	r3, #1
 801930c:	72fb      	strb	r3, [r7, #11]
      break;
 801930e:	e11e      	b.n	801954e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	687a      	ldr	r2, [r7, #4]
 801931a:	7c12      	ldrb	r2, [r2, #16]
 801931c:	f107 0108 	add.w	r1, r7, #8
 8019320:	4610      	mov	r0, r2
 8019322:	4798      	blx	r3
 8019324:	60f8      	str	r0, [r7, #12]
      break;
 8019326:	e112      	b.n	801954e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	7c1b      	ldrb	r3, [r3, #16]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d10d      	bne.n	801934c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019338:	f107 0208 	add.w	r2, r7, #8
 801933c:	4610      	mov	r0, r2
 801933e:	4798      	blx	r3
 8019340:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	3301      	adds	r3, #1
 8019346:	2202      	movs	r2, #2
 8019348:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801934a:	e100      	b.n	801954e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019354:	f107 0208 	add.w	r2, r7, #8
 8019358:	4610      	mov	r0, r2
 801935a:	4798      	blx	r3
 801935c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	3301      	adds	r3, #1
 8019362:	2202      	movs	r2, #2
 8019364:	701a      	strb	r2, [r3, #0]
      break;
 8019366:	e0f2      	b.n	801954e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	885b      	ldrh	r3, [r3, #2]
 801936c:	b2db      	uxtb	r3, r3
 801936e:	2b05      	cmp	r3, #5
 8019370:	f200 80ac 	bhi.w	80194cc <USBD_GetDescriptor+0x258>
 8019374:	a201      	add	r2, pc, #4	; (adr r2, 801937c <USBD_GetDescriptor+0x108>)
 8019376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801937a:	bf00      	nop
 801937c:	08019395 	.word	0x08019395
 8019380:	080193c9 	.word	0x080193c9
 8019384:	080193fd 	.word	0x080193fd
 8019388:	08019431 	.word	0x08019431
 801938c:	08019465 	.word	0x08019465
 8019390:	08019499 	.word	0x08019499
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801939a:	685b      	ldr	r3, [r3, #4]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d00b      	beq.n	80193b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80193a6:	685b      	ldr	r3, [r3, #4]
 80193a8:	687a      	ldr	r2, [r7, #4]
 80193aa:	7c12      	ldrb	r2, [r2, #16]
 80193ac:	f107 0108 	add.w	r1, r7, #8
 80193b0:	4610      	mov	r0, r2
 80193b2:	4798      	blx	r3
 80193b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80193b6:	e091      	b.n	80194dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80193b8:	6839      	ldr	r1, [r7, #0]
 80193ba:	6878      	ldr	r0, [r7, #4]
 80193bc:	f000 fab2 	bl	8019924 <USBD_CtlError>
            err++;
 80193c0:	7afb      	ldrb	r3, [r7, #11]
 80193c2:	3301      	adds	r3, #1
 80193c4:	72fb      	strb	r3, [r7, #11]
          break;
 80193c6:	e089      	b.n	80194dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80193ce:	689b      	ldr	r3, [r3, #8]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d00b      	beq.n	80193ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80193da:	689b      	ldr	r3, [r3, #8]
 80193dc:	687a      	ldr	r2, [r7, #4]
 80193de:	7c12      	ldrb	r2, [r2, #16]
 80193e0:	f107 0108 	add.w	r1, r7, #8
 80193e4:	4610      	mov	r0, r2
 80193e6:	4798      	blx	r3
 80193e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80193ea:	e077      	b.n	80194dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80193ec:	6839      	ldr	r1, [r7, #0]
 80193ee:	6878      	ldr	r0, [r7, #4]
 80193f0:	f000 fa98 	bl	8019924 <USBD_CtlError>
            err++;
 80193f4:	7afb      	ldrb	r3, [r7, #11]
 80193f6:	3301      	adds	r3, #1
 80193f8:	72fb      	strb	r3, [r7, #11]
          break;
 80193fa:	e06f      	b.n	80194dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019402:	68db      	ldr	r3, [r3, #12]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d00b      	beq.n	8019420 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801940e:	68db      	ldr	r3, [r3, #12]
 8019410:	687a      	ldr	r2, [r7, #4]
 8019412:	7c12      	ldrb	r2, [r2, #16]
 8019414:	f107 0108 	add.w	r1, r7, #8
 8019418:	4610      	mov	r0, r2
 801941a:	4798      	blx	r3
 801941c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801941e:	e05d      	b.n	80194dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019420:	6839      	ldr	r1, [r7, #0]
 8019422:	6878      	ldr	r0, [r7, #4]
 8019424:	f000 fa7e 	bl	8019924 <USBD_CtlError>
            err++;
 8019428:	7afb      	ldrb	r3, [r7, #11]
 801942a:	3301      	adds	r3, #1
 801942c:	72fb      	strb	r3, [r7, #11]
          break;
 801942e:	e055      	b.n	80194dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019436:	691b      	ldr	r3, [r3, #16]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d00b      	beq.n	8019454 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019442:	691b      	ldr	r3, [r3, #16]
 8019444:	687a      	ldr	r2, [r7, #4]
 8019446:	7c12      	ldrb	r2, [r2, #16]
 8019448:	f107 0108 	add.w	r1, r7, #8
 801944c:	4610      	mov	r0, r2
 801944e:	4798      	blx	r3
 8019450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019452:	e043      	b.n	80194dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019454:	6839      	ldr	r1, [r7, #0]
 8019456:	6878      	ldr	r0, [r7, #4]
 8019458:	f000 fa64 	bl	8019924 <USBD_CtlError>
            err++;
 801945c:	7afb      	ldrb	r3, [r7, #11]
 801945e:	3301      	adds	r3, #1
 8019460:	72fb      	strb	r3, [r7, #11]
          break;
 8019462:	e03b      	b.n	80194dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801946a:	695b      	ldr	r3, [r3, #20]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d00b      	beq.n	8019488 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019476:	695b      	ldr	r3, [r3, #20]
 8019478:	687a      	ldr	r2, [r7, #4]
 801947a:	7c12      	ldrb	r2, [r2, #16]
 801947c:	f107 0108 	add.w	r1, r7, #8
 8019480:	4610      	mov	r0, r2
 8019482:	4798      	blx	r3
 8019484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019486:	e029      	b.n	80194dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019488:	6839      	ldr	r1, [r7, #0]
 801948a:	6878      	ldr	r0, [r7, #4]
 801948c:	f000 fa4a 	bl	8019924 <USBD_CtlError>
            err++;
 8019490:	7afb      	ldrb	r3, [r7, #11]
 8019492:	3301      	adds	r3, #1
 8019494:	72fb      	strb	r3, [r7, #11]
          break;
 8019496:	e021      	b.n	80194dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801949e:	699b      	ldr	r3, [r3, #24]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d00b      	beq.n	80194bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80194aa:	699b      	ldr	r3, [r3, #24]
 80194ac:	687a      	ldr	r2, [r7, #4]
 80194ae:	7c12      	ldrb	r2, [r2, #16]
 80194b0:	f107 0108 	add.w	r1, r7, #8
 80194b4:	4610      	mov	r0, r2
 80194b6:	4798      	blx	r3
 80194b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80194ba:	e00f      	b.n	80194dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80194bc:	6839      	ldr	r1, [r7, #0]
 80194be:	6878      	ldr	r0, [r7, #4]
 80194c0:	f000 fa30 	bl	8019924 <USBD_CtlError>
            err++;
 80194c4:	7afb      	ldrb	r3, [r7, #11]
 80194c6:	3301      	adds	r3, #1
 80194c8:	72fb      	strb	r3, [r7, #11]
          break;
 80194ca:	e007      	b.n	80194dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80194cc:	6839      	ldr	r1, [r7, #0]
 80194ce:	6878      	ldr	r0, [r7, #4]
 80194d0:	f000 fa28 	bl	8019924 <USBD_CtlError>
          err++;
 80194d4:	7afb      	ldrb	r3, [r7, #11]
 80194d6:	3301      	adds	r3, #1
 80194d8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80194da:	bf00      	nop
      }
      break;
 80194dc:	e037      	b.n	801954e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	7c1b      	ldrb	r3, [r3, #16]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d109      	bne.n	80194fa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80194ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80194ee:	f107 0208 	add.w	r2, r7, #8
 80194f2:	4610      	mov	r0, r2
 80194f4:	4798      	blx	r3
 80194f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80194f8:	e029      	b.n	801954e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80194fa:	6839      	ldr	r1, [r7, #0]
 80194fc:	6878      	ldr	r0, [r7, #4]
 80194fe:	f000 fa11 	bl	8019924 <USBD_CtlError>
        err++;
 8019502:	7afb      	ldrb	r3, [r7, #11]
 8019504:	3301      	adds	r3, #1
 8019506:	72fb      	strb	r3, [r7, #11]
      break;
 8019508:	e021      	b.n	801954e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	7c1b      	ldrb	r3, [r3, #16]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d10d      	bne.n	801952e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801951a:	f107 0208 	add.w	r2, r7, #8
 801951e:	4610      	mov	r0, r2
 8019520:	4798      	blx	r3
 8019522:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	3301      	adds	r3, #1
 8019528:	2207      	movs	r2, #7
 801952a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801952c:	e00f      	b.n	801954e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801952e:	6839      	ldr	r1, [r7, #0]
 8019530:	6878      	ldr	r0, [r7, #4]
 8019532:	f000 f9f7 	bl	8019924 <USBD_CtlError>
        err++;
 8019536:	7afb      	ldrb	r3, [r7, #11]
 8019538:	3301      	adds	r3, #1
 801953a:	72fb      	strb	r3, [r7, #11]
      break;
 801953c:	e007      	b.n	801954e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801953e:	6839      	ldr	r1, [r7, #0]
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	f000 f9ef 	bl	8019924 <USBD_CtlError>
      err++;
 8019546:	7afb      	ldrb	r3, [r7, #11]
 8019548:	3301      	adds	r3, #1
 801954a:	72fb      	strb	r3, [r7, #11]
      break;
 801954c:	bf00      	nop
  }

  if (err != 0U)
 801954e:	7afb      	ldrb	r3, [r7, #11]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d11e      	bne.n	8019592 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8019554:	683b      	ldr	r3, [r7, #0]
 8019556:	88db      	ldrh	r3, [r3, #6]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d016      	beq.n	801958a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801955c:	893b      	ldrh	r3, [r7, #8]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d00e      	beq.n	8019580 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	88da      	ldrh	r2, [r3, #6]
 8019566:	893b      	ldrh	r3, [r7, #8]
 8019568:	4293      	cmp	r3, r2
 801956a:	bf28      	it	cs
 801956c:	4613      	movcs	r3, r2
 801956e:	b29b      	uxth	r3, r3
 8019570:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8019572:	893b      	ldrh	r3, [r7, #8]
 8019574:	461a      	mov	r2, r3
 8019576:	68f9      	ldr	r1, [r7, #12]
 8019578:	6878      	ldr	r0, [r7, #4]
 801957a:	f000 fa44 	bl	8019a06 <USBD_CtlSendData>
 801957e:	e009      	b.n	8019594 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8019580:	6839      	ldr	r1, [r7, #0]
 8019582:	6878      	ldr	r0, [r7, #4]
 8019584:	f000 f9ce 	bl	8019924 <USBD_CtlError>
 8019588:	e004      	b.n	8019594 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801958a:	6878      	ldr	r0, [r7, #4]
 801958c:	f000 fa95 	bl	8019aba <USBD_CtlSendStatus>
 8019590:	e000      	b.n	8019594 <USBD_GetDescriptor+0x320>
    return;
 8019592:	bf00      	nop
  }
}
 8019594:	3710      	adds	r7, #16
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}
 801959a:	bf00      	nop

0801959c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b084      	sub	sp, #16
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	889b      	ldrh	r3, [r3, #4]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d131      	bne.n	8019612 <USBD_SetAddress+0x76>
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	88db      	ldrh	r3, [r3, #6]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d12d      	bne.n	8019612 <USBD_SetAddress+0x76>
 80195b6:	683b      	ldr	r3, [r7, #0]
 80195b8:	885b      	ldrh	r3, [r3, #2]
 80195ba:	2b7f      	cmp	r3, #127	; 0x7f
 80195bc:	d829      	bhi.n	8019612 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	885b      	ldrh	r3, [r3, #2]
 80195c2:	b2db      	uxtb	r3, r3
 80195c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80195c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80195d0:	b2db      	uxtb	r3, r3
 80195d2:	2b03      	cmp	r3, #3
 80195d4:	d104      	bne.n	80195e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80195d6:	6839      	ldr	r1, [r7, #0]
 80195d8:	6878      	ldr	r0, [r7, #4]
 80195da:	f000 f9a3 	bl	8019924 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80195de:	e01d      	b.n	801961c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	7bfa      	ldrb	r2, [r7, #15]
 80195e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80195e8:	7bfb      	ldrb	r3, [r7, #15]
 80195ea:	4619      	mov	r1, r3
 80195ec:	6878      	ldr	r0, [r7, #4]
 80195ee:	f005 ff65 	bl	801f4bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80195f2:	6878      	ldr	r0, [r7, #4]
 80195f4:	f000 fa61 	bl	8019aba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80195f8:	7bfb      	ldrb	r3, [r7, #15]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d004      	beq.n	8019608 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	2202      	movs	r2, #2
 8019602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019606:	e009      	b.n	801961c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	2201      	movs	r2, #1
 801960c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019610:	e004      	b.n	801961c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8019612:	6839      	ldr	r1, [r7, #0]
 8019614:	6878      	ldr	r0, [r7, #4]
 8019616:	f000 f985 	bl	8019924 <USBD_CtlError>
  }
}
 801961a:	bf00      	nop
 801961c:	bf00      	nop
 801961e:	3710      	adds	r7, #16
 8019620:	46bd      	mov	sp, r7
 8019622:	bd80      	pop	{r7, pc}

08019624 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019624:	b580      	push	{r7, lr}
 8019626:	b084      	sub	sp, #16
 8019628:	af00      	add	r7, sp, #0
 801962a:	6078      	str	r0, [r7, #4]
 801962c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801962e:	2300      	movs	r3, #0
 8019630:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	885b      	ldrh	r3, [r3, #2]
 8019636:	b2da      	uxtb	r2, r3
 8019638:	4b4c      	ldr	r3, [pc, #304]	; (801976c <USBD_SetConfig+0x148>)
 801963a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801963c:	4b4b      	ldr	r3, [pc, #300]	; (801976c <USBD_SetConfig+0x148>)
 801963e:	781b      	ldrb	r3, [r3, #0]
 8019640:	2b01      	cmp	r3, #1
 8019642:	d905      	bls.n	8019650 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8019644:	6839      	ldr	r1, [r7, #0]
 8019646:	6878      	ldr	r0, [r7, #4]
 8019648:	f000 f96c 	bl	8019924 <USBD_CtlError>
    return USBD_FAIL;
 801964c:	2303      	movs	r3, #3
 801964e:	e088      	b.n	8019762 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019656:	b2db      	uxtb	r3, r3
 8019658:	2b02      	cmp	r3, #2
 801965a:	d002      	beq.n	8019662 <USBD_SetConfig+0x3e>
 801965c:	2b03      	cmp	r3, #3
 801965e:	d025      	beq.n	80196ac <USBD_SetConfig+0x88>
 8019660:	e071      	b.n	8019746 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8019662:	4b42      	ldr	r3, [pc, #264]	; (801976c <USBD_SetConfig+0x148>)
 8019664:	781b      	ldrb	r3, [r3, #0]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d01c      	beq.n	80196a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801966a:	4b40      	ldr	r3, [pc, #256]	; (801976c <USBD_SetConfig+0x148>)
 801966c:	781b      	ldrb	r3, [r3, #0]
 801966e:	461a      	mov	r2, r3
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019674:	4b3d      	ldr	r3, [pc, #244]	; (801976c <USBD_SetConfig+0x148>)
 8019676:	781b      	ldrb	r3, [r3, #0]
 8019678:	4619      	mov	r1, r3
 801967a:	6878      	ldr	r0, [r7, #4]
 801967c:	f7ff f992 	bl	80189a4 <USBD_SetClassConfig>
 8019680:	4603      	mov	r3, r0
 8019682:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8019684:	7bfb      	ldrb	r3, [r7, #15]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d004      	beq.n	8019694 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801968a:	6839      	ldr	r1, [r7, #0]
 801968c:	6878      	ldr	r0, [r7, #4]
 801968e:	f000 f949 	bl	8019924 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019692:	e065      	b.n	8019760 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8019694:	6878      	ldr	r0, [r7, #4]
 8019696:	f000 fa10 	bl	8019aba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	2203      	movs	r2, #3
 801969e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80196a2:	e05d      	b.n	8019760 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80196a4:	6878      	ldr	r0, [r7, #4]
 80196a6:	f000 fa08 	bl	8019aba <USBD_CtlSendStatus>
      break;
 80196aa:	e059      	b.n	8019760 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80196ac:	4b2f      	ldr	r3, [pc, #188]	; (801976c <USBD_SetConfig+0x148>)
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d112      	bne.n	80196da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	2202      	movs	r2, #2
 80196b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80196bc:	4b2b      	ldr	r3, [pc, #172]	; (801976c <USBD_SetConfig+0x148>)
 80196be:	781b      	ldrb	r3, [r3, #0]
 80196c0:	461a      	mov	r2, r3
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80196c6:	4b29      	ldr	r3, [pc, #164]	; (801976c <USBD_SetConfig+0x148>)
 80196c8:	781b      	ldrb	r3, [r3, #0]
 80196ca:	4619      	mov	r1, r3
 80196cc:	6878      	ldr	r0, [r7, #4]
 80196ce:	f7ff f985 	bl	80189dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80196d2:	6878      	ldr	r0, [r7, #4]
 80196d4:	f000 f9f1 	bl	8019aba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80196d8:	e042      	b.n	8019760 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80196da:	4b24      	ldr	r3, [pc, #144]	; (801976c <USBD_SetConfig+0x148>)
 80196dc:	781b      	ldrb	r3, [r3, #0]
 80196de:	461a      	mov	r2, r3
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	685b      	ldr	r3, [r3, #4]
 80196e4:	429a      	cmp	r2, r3
 80196e6:	d02a      	beq.n	801973e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	685b      	ldr	r3, [r3, #4]
 80196ec:	b2db      	uxtb	r3, r3
 80196ee:	4619      	mov	r1, r3
 80196f0:	6878      	ldr	r0, [r7, #4]
 80196f2:	f7ff f973 	bl	80189dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80196f6:	4b1d      	ldr	r3, [pc, #116]	; (801976c <USBD_SetConfig+0x148>)
 80196f8:	781b      	ldrb	r3, [r3, #0]
 80196fa:	461a      	mov	r2, r3
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019700:	4b1a      	ldr	r3, [pc, #104]	; (801976c <USBD_SetConfig+0x148>)
 8019702:	781b      	ldrb	r3, [r3, #0]
 8019704:	4619      	mov	r1, r3
 8019706:	6878      	ldr	r0, [r7, #4]
 8019708:	f7ff f94c 	bl	80189a4 <USBD_SetClassConfig>
 801970c:	4603      	mov	r3, r0
 801970e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8019710:	7bfb      	ldrb	r3, [r7, #15]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d00f      	beq.n	8019736 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8019716:	6839      	ldr	r1, [r7, #0]
 8019718:	6878      	ldr	r0, [r7, #4]
 801971a:	f000 f903 	bl	8019924 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	685b      	ldr	r3, [r3, #4]
 8019722:	b2db      	uxtb	r3, r3
 8019724:	4619      	mov	r1, r3
 8019726:	6878      	ldr	r0, [r7, #4]
 8019728:	f7ff f958 	bl	80189dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	2202      	movs	r2, #2
 8019730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8019734:	e014      	b.n	8019760 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8019736:	6878      	ldr	r0, [r7, #4]
 8019738:	f000 f9bf 	bl	8019aba <USBD_CtlSendStatus>
      break;
 801973c:	e010      	b.n	8019760 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801973e:	6878      	ldr	r0, [r7, #4]
 8019740:	f000 f9bb 	bl	8019aba <USBD_CtlSendStatus>
      break;
 8019744:	e00c      	b.n	8019760 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8019746:	6839      	ldr	r1, [r7, #0]
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	f000 f8eb 	bl	8019924 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801974e:	4b07      	ldr	r3, [pc, #28]	; (801976c <USBD_SetConfig+0x148>)
 8019750:	781b      	ldrb	r3, [r3, #0]
 8019752:	4619      	mov	r1, r3
 8019754:	6878      	ldr	r0, [r7, #4]
 8019756:	f7ff f941 	bl	80189dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801975a:	2303      	movs	r3, #3
 801975c:	73fb      	strb	r3, [r7, #15]
      break;
 801975e:	bf00      	nop
  }

  return ret;
 8019760:	7bfb      	ldrb	r3, [r7, #15]
}
 8019762:	4618      	mov	r0, r3
 8019764:	3710      	adds	r7, #16
 8019766:	46bd      	mov	sp, r7
 8019768:	bd80      	pop	{r7, pc}
 801976a:	bf00      	nop
 801976c:	20001dfd 	.word	0x20001dfd

08019770 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b082      	sub	sp, #8
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
 8019778:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801977a:	683b      	ldr	r3, [r7, #0]
 801977c:	88db      	ldrh	r3, [r3, #6]
 801977e:	2b01      	cmp	r3, #1
 8019780:	d004      	beq.n	801978c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8019782:	6839      	ldr	r1, [r7, #0]
 8019784:	6878      	ldr	r0, [r7, #4]
 8019786:	f000 f8cd 	bl	8019924 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801978a:	e023      	b.n	80197d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019792:	b2db      	uxtb	r3, r3
 8019794:	2b02      	cmp	r3, #2
 8019796:	dc02      	bgt.n	801979e <USBD_GetConfig+0x2e>
 8019798:	2b00      	cmp	r3, #0
 801979a:	dc03      	bgt.n	80197a4 <USBD_GetConfig+0x34>
 801979c:	e015      	b.n	80197ca <USBD_GetConfig+0x5a>
 801979e:	2b03      	cmp	r3, #3
 80197a0:	d00b      	beq.n	80197ba <USBD_GetConfig+0x4a>
 80197a2:	e012      	b.n	80197ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2200      	movs	r2, #0
 80197a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	3308      	adds	r3, #8
 80197ae:	2201      	movs	r2, #1
 80197b0:	4619      	mov	r1, r3
 80197b2:	6878      	ldr	r0, [r7, #4]
 80197b4:	f000 f927 	bl	8019a06 <USBD_CtlSendData>
        break;
 80197b8:	e00c      	b.n	80197d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	3304      	adds	r3, #4
 80197be:	2201      	movs	r2, #1
 80197c0:	4619      	mov	r1, r3
 80197c2:	6878      	ldr	r0, [r7, #4]
 80197c4:	f000 f91f 	bl	8019a06 <USBD_CtlSendData>
        break;
 80197c8:	e004      	b.n	80197d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80197ca:	6839      	ldr	r1, [r7, #0]
 80197cc:	6878      	ldr	r0, [r7, #4]
 80197ce:	f000 f8a9 	bl	8019924 <USBD_CtlError>
        break;
 80197d2:	bf00      	nop
}
 80197d4:	bf00      	nop
 80197d6:	3708      	adds	r7, #8
 80197d8:	46bd      	mov	sp, r7
 80197da:	bd80      	pop	{r7, pc}

080197dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b082      	sub	sp, #8
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
 80197e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	3b01      	subs	r3, #1
 80197f0:	2b02      	cmp	r3, #2
 80197f2:	d81e      	bhi.n	8019832 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80197f4:	683b      	ldr	r3, [r7, #0]
 80197f6:	88db      	ldrh	r3, [r3, #6]
 80197f8:	2b02      	cmp	r3, #2
 80197fa:	d004      	beq.n	8019806 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80197fc:	6839      	ldr	r1, [r7, #0]
 80197fe:	6878      	ldr	r0, [r7, #4]
 8019800:	f000 f890 	bl	8019924 <USBD_CtlError>
        break;
 8019804:	e01a      	b.n	801983c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	2201      	movs	r2, #1
 801980a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8019812:	2b00      	cmp	r3, #0
 8019814:	d005      	beq.n	8019822 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	68db      	ldr	r3, [r3, #12]
 801981a:	f043 0202 	orr.w	r2, r3, #2
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	330c      	adds	r3, #12
 8019826:	2202      	movs	r2, #2
 8019828:	4619      	mov	r1, r3
 801982a:	6878      	ldr	r0, [r7, #4]
 801982c:	f000 f8eb 	bl	8019a06 <USBD_CtlSendData>
      break;
 8019830:	e004      	b.n	801983c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8019832:	6839      	ldr	r1, [r7, #0]
 8019834:	6878      	ldr	r0, [r7, #4]
 8019836:	f000 f875 	bl	8019924 <USBD_CtlError>
      break;
 801983a:	bf00      	nop
  }
}
 801983c:	bf00      	nop
 801983e:	3708      	adds	r7, #8
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b082      	sub	sp, #8
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
 801984c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801984e:	683b      	ldr	r3, [r7, #0]
 8019850:	885b      	ldrh	r3, [r3, #2]
 8019852:	2b01      	cmp	r3, #1
 8019854:	d106      	bne.n	8019864 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	2201      	movs	r2, #1
 801985a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801985e:	6878      	ldr	r0, [r7, #4]
 8019860:	f000 f92b 	bl	8019aba <USBD_CtlSendStatus>
  }
}
 8019864:	bf00      	nop
 8019866:	3708      	adds	r7, #8
 8019868:	46bd      	mov	sp, r7
 801986a:	bd80      	pop	{r7, pc}

0801986c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801986c:	b580      	push	{r7, lr}
 801986e:	b082      	sub	sp, #8
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
 8019874:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801987c:	b2db      	uxtb	r3, r3
 801987e:	3b01      	subs	r3, #1
 8019880:	2b02      	cmp	r3, #2
 8019882:	d80b      	bhi.n	801989c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019884:	683b      	ldr	r3, [r7, #0]
 8019886:	885b      	ldrh	r3, [r3, #2]
 8019888:	2b01      	cmp	r3, #1
 801988a:	d10c      	bne.n	80198a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	2200      	movs	r2, #0
 8019890:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8019894:	6878      	ldr	r0, [r7, #4]
 8019896:	f000 f910 	bl	8019aba <USBD_CtlSendStatus>
      }
      break;
 801989a:	e004      	b.n	80198a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801989c:	6839      	ldr	r1, [r7, #0]
 801989e:	6878      	ldr	r0, [r7, #4]
 80198a0:	f000 f840 	bl	8019924 <USBD_CtlError>
      break;
 80198a4:	e000      	b.n	80198a8 <USBD_ClrFeature+0x3c>
      break;
 80198a6:	bf00      	nop
  }
}
 80198a8:	bf00      	nop
 80198aa:	3708      	adds	r7, #8
 80198ac:	46bd      	mov	sp, r7
 80198ae:	bd80      	pop	{r7, pc}

080198b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80198b0:	b580      	push	{r7, lr}
 80198b2:	b084      	sub	sp, #16
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	6078      	str	r0, [r7, #4]
 80198b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80198ba:	683b      	ldr	r3, [r7, #0]
 80198bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	781a      	ldrb	r2, [r3, #0]
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	3301      	adds	r3, #1
 80198ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	781a      	ldrb	r2, [r3, #0]
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	3301      	adds	r3, #1
 80198d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80198da:	68f8      	ldr	r0, [r7, #12]
 80198dc:	f7ff fa92 	bl	8018e04 <SWAPBYTE>
 80198e0:	4603      	mov	r3, r0
 80198e2:	461a      	mov	r2, r3
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	3301      	adds	r3, #1
 80198ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	3301      	adds	r3, #1
 80198f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80198f4:	68f8      	ldr	r0, [r7, #12]
 80198f6:	f7ff fa85 	bl	8018e04 <SWAPBYTE>
 80198fa:	4603      	mov	r3, r0
 80198fc:	461a      	mov	r2, r3
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	3301      	adds	r3, #1
 8019906:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	3301      	adds	r3, #1
 801990c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801990e:	68f8      	ldr	r0, [r7, #12]
 8019910:	f7ff fa78 	bl	8018e04 <SWAPBYTE>
 8019914:	4603      	mov	r3, r0
 8019916:	461a      	mov	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	80da      	strh	r2, [r3, #6]
}
 801991c:	bf00      	nop
 801991e:	3710      	adds	r7, #16
 8019920:	46bd      	mov	sp, r7
 8019922:	bd80      	pop	{r7, pc}

08019924 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b082      	sub	sp, #8
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
 801992c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801992e:	2180      	movs	r1, #128	; 0x80
 8019930:	6878      	ldr	r0, [r7, #4]
 8019932:	f005 fd59 	bl	801f3e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8019936:	2100      	movs	r1, #0
 8019938:	6878      	ldr	r0, [r7, #4]
 801993a:	f005 fd55 	bl	801f3e8 <USBD_LL_StallEP>
}
 801993e:	bf00      	nop
 8019940:	3708      	adds	r7, #8
 8019942:	46bd      	mov	sp, r7
 8019944:	bd80      	pop	{r7, pc}

08019946 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8019946:	b580      	push	{r7, lr}
 8019948:	b086      	sub	sp, #24
 801994a:	af00      	add	r7, sp, #0
 801994c:	60f8      	str	r0, [r7, #12]
 801994e:	60b9      	str	r1, [r7, #8]
 8019950:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8019952:	2300      	movs	r3, #0
 8019954:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d036      	beq.n	80199ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8019960:	6938      	ldr	r0, [r7, #16]
 8019962:	f000 f836 	bl	80199d2 <USBD_GetLen>
 8019966:	4603      	mov	r3, r0
 8019968:	3301      	adds	r3, #1
 801996a:	b29b      	uxth	r3, r3
 801996c:	005b      	lsls	r3, r3, #1
 801996e:	b29a      	uxth	r2, r3
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8019974:	7dfb      	ldrb	r3, [r7, #23]
 8019976:	68ba      	ldr	r2, [r7, #8]
 8019978:	4413      	add	r3, r2
 801997a:	687a      	ldr	r2, [r7, #4]
 801997c:	7812      	ldrb	r2, [r2, #0]
 801997e:	701a      	strb	r2, [r3, #0]
  idx++;
 8019980:	7dfb      	ldrb	r3, [r7, #23]
 8019982:	3301      	adds	r3, #1
 8019984:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019986:	7dfb      	ldrb	r3, [r7, #23]
 8019988:	68ba      	ldr	r2, [r7, #8]
 801998a:	4413      	add	r3, r2
 801998c:	2203      	movs	r2, #3
 801998e:	701a      	strb	r2, [r3, #0]
  idx++;
 8019990:	7dfb      	ldrb	r3, [r7, #23]
 8019992:	3301      	adds	r3, #1
 8019994:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019996:	e013      	b.n	80199c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8019998:	7dfb      	ldrb	r3, [r7, #23]
 801999a:	68ba      	ldr	r2, [r7, #8]
 801999c:	4413      	add	r3, r2
 801999e:	693a      	ldr	r2, [r7, #16]
 80199a0:	7812      	ldrb	r2, [r2, #0]
 80199a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80199a4:	693b      	ldr	r3, [r7, #16]
 80199a6:	3301      	adds	r3, #1
 80199a8:	613b      	str	r3, [r7, #16]
    idx++;
 80199aa:	7dfb      	ldrb	r3, [r7, #23]
 80199ac:	3301      	adds	r3, #1
 80199ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80199b0:	7dfb      	ldrb	r3, [r7, #23]
 80199b2:	68ba      	ldr	r2, [r7, #8]
 80199b4:	4413      	add	r3, r2
 80199b6:	2200      	movs	r2, #0
 80199b8:	701a      	strb	r2, [r3, #0]
    idx++;
 80199ba:	7dfb      	ldrb	r3, [r7, #23]
 80199bc:	3301      	adds	r3, #1
 80199be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80199c0:	693b      	ldr	r3, [r7, #16]
 80199c2:	781b      	ldrb	r3, [r3, #0]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d1e7      	bne.n	8019998 <USBD_GetString+0x52>
 80199c8:	e000      	b.n	80199cc <USBD_GetString+0x86>
    return;
 80199ca:	bf00      	nop
  }
}
 80199cc:	3718      	adds	r7, #24
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}

080199d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80199d2:	b480      	push	{r7}
 80199d4:	b085      	sub	sp, #20
 80199d6:	af00      	add	r7, sp, #0
 80199d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80199da:	2300      	movs	r3, #0
 80199dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80199e2:	e005      	b.n	80199f0 <USBD_GetLen+0x1e>
  {
    len++;
 80199e4:	7bfb      	ldrb	r3, [r7, #15]
 80199e6:	3301      	adds	r3, #1
 80199e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	3301      	adds	r3, #1
 80199ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80199f0:	68bb      	ldr	r3, [r7, #8]
 80199f2:	781b      	ldrb	r3, [r3, #0]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d1f5      	bne.n	80199e4 <USBD_GetLen+0x12>
  }

  return len;
 80199f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80199fa:	4618      	mov	r0, r3
 80199fc:	3714      	adds	r7, #20
 80199fe:	46bd      	mov	sp, r7
 8019a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a04:	4770      	bx	lr

08019a06 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019a06:	b580      	push	{r7, lr}
 8019a08:	b084      	sub	sp, #16
 8019a0a:	af00      	add	r7, sp, #0
 8019a0c:	60f8      	str	r0, [r7, #12]
 8019a0e:	60b9      	str	r1, [r7, #8]
 8019a10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	2202      	movs	r2, #2
 8019a16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	687a      	ldr	r2, [r7, #4]
 8019a1e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	687a      	ldr	r2, [r7, #4]
 8019a24:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	68ba      	ldr	r2, [r7, #8]
 8019a2a:	2100      	movs	r1, #0
 8019a2c:	68f8      	ldr	r0, [r7, #12]
 8019a2e:	f005 fd64 	bl	801f4fa <USBD_LL_Transmit>

  return USBD_OK;
 8019a32:	2300      	movs	r3, #0
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	3710      	adds	r7, #16
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}

08019a3c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b084      	sub	sp, #16
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	60f8      	str	r0, [r7, #12]
 8019a44:	60b9      	str	r1, [r7, #8]
 8019a46:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	68ba      	ldr	r2, [r7, #8]
 8019a4c:	2100      	movs	r1, #0
 8019a4e:	68f8      	ldr	r0, [r7, #12]
 8019a50:	f005 fd53 	bl	801f4fa <USBD_LL_Transmit>

  return USBD_OK;
 8019a54:	2300      	movs	r3, #0
}
 8019a56:	4618      	mov	r0, r3
 8019a58:	3710      	adds	r7, #16
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}

08019a5e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8019a5e:	b580      	push	{r7, lr}
 8019a60:	b084      	sub	sp, #16
 8019a62:	af00      	add	r7, sp, #0
 8019a64:	60f8      	str	r0, [r7, #12]
 8019a66:	60b9      	str	r1, [r7, #8]
 8019a68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	2203      	movs	r2, #3
 8019a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	687a      	ldr	r2, [r7, #4]
 8019a76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	687a      	ldr	r2, [r7, #4]
 8019a7e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	68ba      	ldr	r2, [r7, #8]
 8019a86:	2100      	movs	r1, #0
 8019a88:	68f8      	ldr	r0, [r7, #12]
 8019a8a:	f005 fd57 	bl	801f53c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019a8e:	2300      	movs	r3, #0
}
 8019a90:	4618      	mov	r0, r3
 8019a92:	3710      	adds	r7, #16
 8019a94:	46bd      	mov	sp, r7
 8019a96:	bd80      	pop	{r7, pc}

08019a98 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	b084      	sub	sp, #16
 8019a9c:	af00      	add	r7, sp, #0
 8019a9e:	60f8      	str	r0, [r7, #12]
 8019aa0:	60b9      	str	r1, [r7, #8]
 8019aa2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	68ba      	ldr	r2, [r7, #8]
 8019aa8:	2100      	movs	r1, #0
 8019aaa:	68f8      	ldr	r0, [r7, #12]
 8019aac:	f005 fd46 	bl	801f53c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019ab0:	2300      	movs	r3, #0
}
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	3710      	adds	r7, #16
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bd80      	pop	{r7, pc}

08019aba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019aba:	b580      	push	{r7, lr}
 8019abc:	b082      	sub	sp, #8
 8019abe:	af00      	add	r7, sp, #0
 8019ac0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	2204      	movs	r2, #4
 8019ac6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019aca:	2300      	movs	r3, #0
 8019acc:	2200      	movs	r2, #0
 8019ace:	2100      	movs	r1, #0
 8019ad0:	6878      	ldr	r0, [r7, #4]
 8019ad2:	f005 fd12 	bl	801f4fa <USBD_LL_Transmit>

  return USBD_OK;
 8019ad6:	2300      	movs	r3, #0
}
 8019ad8:	4618      	mov	r0, r3
 8019ada:	3708      	adds	r7, #8
 8019adc:	46bd      	mov	sp, r7
 8019ade:	bd80      	pop	{r7, pc}

08019ae0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b082      	sub	sp, #8
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	2205      	movs	r2, #5
 8019aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019af0:	2300      	movs	r3, #0
 8019af2:	2200      	movs	r2, #0
 8019af4:	2100      	movs	r1, #0
 8019af6:	6878      	ldr	r0, [r7, #4]
 8019af8:	f005 fd20 	bl	801f53c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019afc:	2300      	movs	r3, #0
}
 8019afe:	4618      	mov	r0, r3
 8019b00:	3708      	adds	r7, #8
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bd80      	pop	{r7, pc}
	...

08019b08 <__NVIC_SetPriority>:
{
 8019b08:	b480      	push	{r7}
 8019b0a:	b083      	sub	sp, #12
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	4603      	mov	r3, r0
 8019b10:	6039      	str	r1, [r7, #0]
 8019b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	db0a      	blt.n	8019b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019b1c:	683b      	ldr	r3, [r7, #0]
 8019b1e:	b2da      	uxtb	r2, r3
 8019b20:	490c      	ldr	r1, [pc, #48]	; (8019b54 <__NVIC_SetPriority+0x4c>)
 8019b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019b26:	0112      	lsls	r2, r2, #4
 8019b28:	b2d2      	uxtb	r2, r2
 8019b2a:	440b      	add	r3, r1
 8019b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019b30:	e00a      	b.n	8019b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019b32:	683b      	ldr	r3, [r7, #0]
 8019b34:	b2da      	uxtb	r2, r3
 8019b36:	4908      	ldr	r1, [pc, #32]	; (8019b58 <__NVIC_SetPriority+0x50>)
 8019b38:	79fb      	ldrb	r3, [r7, #7]
 8019b3a:	f003 030f 	and.w	r3, r3, #15
 8019b3e:	3b04      	subs	r3, #4
 8019b40:	0112      	lsls	r2, r2, #4
 8019b42:	b2d2      	uxtb	r2, r2
 8019b44:	440b      	add	r3, r1
 8019b46:	761a      	strb	r2, [r3, #24]
}
 8019b48:	bf00      	nop
 8019b4a:	370c      	adds	r7, #12
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b52:	4770      	bx	lr
 8019b54:	e000e100 	.word	0xe000e100
 8019b58:	e000ed00 	.word	0xe000ed00

08019b5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8019b60:	4b05      	ldr	r3, [pc, #20]	; (8019b78 <SysTick_Handler+0x1c>)
 8019b62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8019b64:	f002 fb10 	bl	801c188 <xTaskGetSchedulerState>
 8019b68:	4603      	mov	r3, r0
 8019b6a:	2b01      	cmp	r3, #1
 8019b6c:	d001      	beq.n	8019b72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8019b6e:	f003 f9f3 	bl	801cf58 <xPortSysTickHandler>
  }
}
 8019b72:	bf00      	nop
 8019b74:	bd80      	pop	{r7, pc}
 8019b76:	bf00      	nop
 8019b78:	e000e010 	.word	0xe000e010

08019b7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8019b80:	2100      	movs	r1, #0
 8019b82:	f06f 0004 	mvn.w	r0, #4
 8019b86:	f7ff ffbf 	bl	8019b08 <__NVIC_SetPriority>
#endif
}
 8019b8a:	bf00      	nop
 8019b8c:	bd80      	pop	{r7, pc}
	...

08019b90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8019b90:	b480      	push	{r7}
 8019b92:	b083      	sub	sp, #12
 8019b94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019b96:	f3ef 8305 	mrs	r3, IPSR
 8019b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8019b9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d003      	beq.n	8019baa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8019ba2:	f06f 0305 	mvn.w	r3, #5
 8019ba6:	607b      	str	r3, [r7, #4]
 8019ba8:	e00c      	b.n	8019bc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8019baa:	4b0a      	ldr	r3, [pc, #40]	; (8019bd4 <osKernelInitialize+0x44>)
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d105      	bne.n	8019bbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8019bb2:	4b08      	ldr	r3, [pc, #32]	; (8019bd4 <osKernelInitialize+0x44>)
 8019bb4:	2201      	movs	r2, #1
 8019bb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8019bb8:	2300      	movs	r3, #0
 8019bba:	607b      	str	r3, [r7, #4]
 8019bbc:	e002      	b.n	8019bc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8019bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8019bc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019bc4:	687b      	ldr	r3, [r7, #4]
}
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	370c      	adds	r7, #12
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd0:	4770      	bx	lr
 8019bd2:	bf00      	nop
 8019bd4:	20001e00 	.word	0x20001e00

08019bd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019bde:	f3ef 8305 	mrs	r3, IPSR
 8019be2:	603b      	str	r3, [r7, #0]
  return(result);
 8019be4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d003      	beq.n	8019bf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8019bea:	f06f 0305 	mvn.w	r3, #5
 8019bee:	607b      	str	r3, [r7, #4]
 8019bf0:	e010      	b.n	8019c14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8019bf2:	4b0b      	ldr	r3, [pc, #44]	; (8019c20 <osKernelStart+0x48>)
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	2b01      	cmp	r3, #1
 8019bf8:	d109      	bne.n	8019c0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8019bfa:	f7ff ffbf 	bl	8019b7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8019bfe:	4b08      	ldr	r3, [pc, #32]	; (8019c20 <osKernelStart+0x48>)
 8019c00:	2202      	movs	r2, #2
 8019c02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8019c04:	f001 fe54 	bl	801b8b0 <vTaskStartScheduler>
      stat = osOK;
 8019c08:	2300      	movs	r3, #0
 8019c0a:	607b      	str	r3, [r7, #4]
 8019c0c:	e002      	b.n	8019c14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8019c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8019c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019c14:	687b      	ldr	r3, [r7, #4]
}
 8019c16:	4618      	mov	r0, r3
 8019c18:	3708      	adds	r7, #8
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	bd80      	pop	{r7, pc}
 8019c1e:	bf00      	nop
 8019c20:	20001e00 	.word	0x20001e00

08019c24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b08e      	sub	sp, #56	; 0x38
 8019c28:	af04      	add	r7, sp, #16
 8019c2a:	60f8      	str	r0, [r7, #12]
 8019c2c:	60b9      	str	r1, [r7, #8]
 8019c2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8019c30:	2300      	movs	r3, #0
 8019c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019c34:	f3ef 8305 	mrs	r3, IPSR
 8019c38:	617b      	str	r3, [r7, #20]
  return(result);
 8019c3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d17e      	bne.n	8019d3e <osThreadNew+0x11a>
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d07b      	beq.n	8019d3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8019c46:	2380      	movs	r3, #128	; 0x80
 8019c48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8019c4a:	2318      	movs	r3, #24
 8019c4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8019c4e:	2300      	movs	r3, #0
 8019c50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8019c52:	f04f 33ff 	mov.w	r3, #4294967295
 8019c56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d045      	beq.n	8019cea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d002      	beq.n	8019c6c <osThreadNew+0x48>
        name = attr->name;
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	699b      	ldr	r3, [r3, #24]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d002      	beq.n	8019c7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	699b      	ldr	r3, [r3, #24]
 8019c78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8019c7a:	69fb      	ldr	r3, [r7, #28]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d008      	beq.n	8019c92 <osThreadNew+0x6e>
 8019c80:	69fb      	ldr	r3, [r7, #28]
 8019c82:	2b38      	cmp	r3, #56	; 0x38
 8019c84:	d805      	bhi.n	8019c92 <osThreadNew+0x6e>
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	685b      	ldr	r3, [r3, #4]
 8019c8a:	f003 0301 	and.w	r3, r3, #1
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d001      	beq.n	8019c96 <osThreadNew+0x72>
        return (NULL);
 8019c92:	2300      	movs	r3, #0
 8019c94:	e054      	b.n	8019d40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	695b      	ldr	r3, [r3, #20]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d003      	beq.n	8019ca6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	695b      	ldr	r3, [r3, #20]
 8019ca2:	089b      	lsrs	r3, r3, #2
 8019ca4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	689b      	ldr	r3, [r3, #8]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d00e      	beq.n	8019ccc <osThreadNew+0xa8>
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	68db      	ldr	r3, [r3, #12]
 8019cb2:	2ba7      	cmp	r3, #167	; 0xa7
 8019cb4:	d90a      	bls.n	8019ccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d006      	beq.n	8019ccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	695b      	ldr	r3, [r3, #20]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d002      	beq.n	8019ccc <osThreadNew+0xa8>
        mem = 1;
 8019cc6:	2301      	movs	r3, #1
 8019cc8:	61bb      	str	r3, [r7, #24]
 8019cca:	e010      	b.n	8019cee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	689b      	ldr	r3, [r3, #8]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d10c      	bne.n	8019cee <osThreadNew+0xca>
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	68db      	ldr	r3, [r3, #12]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d108      	bne.n	8019cee <osThreadNew+0xca>
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	691b      	ldr	r3, [r3, #16]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d104      	bne.n	8019cee <osThreadNew+0xca>
          mem = 0;
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	61bb      	str	r3, [r7, #24]
 8019ce8:	e001      	b.n	8019cee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8019cea:	2300      	movs	r3, #0
 8019cec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8019cee:	69bb      	ldr	r3, [r7, #24]
 8019cf0:	2b01      	cmp	r3, #1
 8019cf2:	d110      	bne.n	8019d16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8019cf8:	687a      	ldr	r2, [r7, #4]
 8019cfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019cfc:	9202      	str	r2, [sp, #8]
 8019cfe:	9301      	str	r3, [sp, #4]
 8019d00:	69fb      	ldr	r3, [r7, #28]
 8019d02:	9300      	str	r3, [sp, #0]
 8019d04:	68bb      	ldr	r3, [r7, #8]
 8019d06:	6a3a      	ldr	r2, [r7, #32]
 8019d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d0a:	68f8      	ldr	r0, [r7, #12]
 8019d0c:	f001 fb0c 	bl	801b328 <xTaskCreateStatic>
 8019d10:	4603      	mov	r3, r0
 8019d12:	613b      	str	r3, [r7, #16]
 8019d14:	e013      	b.n	8019d3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8019d16:	69bb      	ldr	r3, [r7, #24]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d110      	bne.n	8019d3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8019d1c:	6a3b      	ldr	r3, [r7, #32]
 8019d1e:	b29a      	uxth	r2, r3
 8019d20:	f107 0310 	add.w	r3, r7, #16
 8019d24:	9301      	str	r3, [sp, #4]
 8019d26:	69fb      	ldr	r3, [r7, #28]
 8019d28:	9300      	str	r3, [sp, #0]
 8019d2a:	68bb      	ldr	r3, [r7, #8]
 8019d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d2e:	68f8      	ldr	r0, [r7, #12]
 8019d30:	f001 fb57 	bl	801b3e2 <xTaskCreate>
 8019d34:	4603      	mov	r3, r0
 8019d36:	2b01      	cmp	r3, #1
 8019d38:	d001      	beq.n	8019d3e <osThreadNew+0x11a>
            hTask = NULL;
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019d3e:	693b      	ldr	r3, [r7, #16]
}
 8019d40:	4618      	mov	r0, r3
 8019d42:	3728      	adds	r7, #40	; 0x28
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd80      	pop	{r7, pc}

08019d48 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b086      	sub	sp, #24
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019d54:	f3ef 8305 	mrs	r3, IPSR
 8019d58:	60bb      	str	r3, [r7, #8]
  return(result);
 8019d5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d003      	beq.n	8019d68 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8019d60:	f06f 0305 	mvn.w	r3, #5
 8019d64:	617b      	str	r3, [r7, #20]
 8019d66:	e017      	b.n	8019d98 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8019d68:	693b      	ldr	r3, [r7, #16]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d103      	bne.n	8019d76 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8019d6e:	f06f 0303 	mvn.w	r3, #3
 8019d72:	617b      	str	r3, [r7, #20]
 8019d74:	e010      	b.n	8019d98 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8019d76:	6938      	ldr	r0, [r7, #16]
 8019d78:	f001 fd34 	bl	801b7e4 <eTaskGetState>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8019d80:	7bfb      	ldrb	r3, [r7, #15]
 8019d82:	2b04      	cmp	r3, #4
 8019d84:	d005      	beq.n	8019d92 <osThreadTerminate+0x4a>
      stat = osOK;
 8019d86:	2300      	movs	r3, #0
 8019d88:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8019d8a:	6938      	ldr	r0, [r7, #16]
 8019d8c:	f001 fc84 	bl	801b698 <vTaskDelete>
 8019d90:	e002      	b.n	8019d98 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8019d92:	f06f 0302 	mvn.w	r3, #2
 8019d96:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8019d98:	697b      	ldr	r3, [r7, #20]
}
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	3718      	adds	r7, #24
 8019d9e:	46bd      	mov	sp, r7
 8019da0:	bd80      	pop	{r7, pc}

08019da2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8019da2:	b580      	push	{r7, lr}
 8019da4:	b084      	sub	sp, #16
 8019da6:	af00      	add	r7, sp, #0
 8019da8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019daa:	f3ef 8305 	mrs	r3, IPSR
 8019dae:	60bb      	str	r3, [r7, #8]
  return(result);
 8019db0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d003      	beq.n	8019dbe <osDelay+0x1c>
    stat = osErrorISR;
 8019db6:	f06f 0305 	mvn.w	r3, #5
 8019dba:	60fb      	str	r3, [r7, #12]
 8019dbc:	e007      	b.n	8019dce <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d002      	beq.n	8019dce <osDelay+0x2c>
      vTaskDelay(ticks);
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	f001 fcd7 	bl	801b77c <vTaskDelay>
    }
  }

  return (stat);
 8019dce:	68fb      	ldr	r3, [r7, #12]
}
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	3710      	adds	r7, #16
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}

08019dd8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b088      	sub	sp, #32
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8019de0:	2300      	movs	r3, #0
 8019de2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019de4:	f3ef 8305 	mrs	r3, IPSR
 8019de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8019dea:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d174      	bne.n	8019eda <osMutexNew+0x102>
    if (attr != NULL) {
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d003      	beq.n	8019dfe <osMutexNew+0x26>
      type = attr->attr_bits;
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	685b      	ldr	r3, [r3, #4]
 8019dfa:	61bb      	str	r3, [r7, #24]
 8019dfc:	e001      	b.n	8019e02 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8019dfe:	2300      	movs	r3, #0
 8019e00:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8019e02:	69bb      	ldr	r3, [r7, #24]
 8019e04:	f003 0301 	and.w	r3, r3, #1
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d002      	beq.n	8019e12 <osMutexNew+0x3a>
      rmtx = 1U;
 8019e0c:	2301      	movs	r3, #1
 8019e0e:	617b      	str	r3, [r7, #20]
 8019e10:	e001      	b.n	8019e16 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8019e12:	2300      	movs	r3, #0
 8019e14:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8019e16:	69bb      	ldr	r3, [r7, #24]
 8019e18:	f003 0308 	and.w	r3, r3, #8
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d15c      	bne.n	8019eda <osMutexNew+0x102>
      mem = -1;
 8019e20:	f04f 33ff 	mov.w	r3, #4294967295
 8019e24:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d015      	beq.n	8019e58 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	689b      	ldr	r3, [r3, #8]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d006      	beq.n	8019e42 <osMutexNew+0x6a>
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	68db      	ldr	r3, [r3, #12]
 8019e38:	2b4f      	cmp	r3, #79	; 0x4f
 8019e3a:	d902      	bls.n	8019e42 <osMutexNew+0x6a>
          mem = 1;
 8019e3c:	2301      	movs	r3, #1
 8019e3e:	613b      	str	r3, [r7, #16]
 8019e40:	e00c      	b.n	8019e5c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	689b      	ldr	r3, [r3, #8]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d108      	bne.n	8019e5c <osMutexNew+0x84>
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	68db      	ldr	r3, [r3, #12]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d104      	bne.n	8019e5c <osMutexNew+0x84>
            mem = 0;
 8019e52:	2300      	movs	r3, #0
 8019e54:	613b      	str	r3, [r7, #16]
 8019e56:	e001      	b.n	8019e5c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8019e5c:	693b      	ldr	r3, [r7, #16]
 8019e5e:	2b01      	cmp	r3, #1
 8019e60:	d112      	bne.n	8019e88 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8019e62:	697b      	ldr	r3, [r7, #20]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d007      	beq.n	8019e78 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	689b      	ldr	r3, [r3, #8]
 8019e6c:	4619      	mov	r1, r3
 8019e6e:	2004      	movs	r0, #4
 8019e70:	f000 fc49 	bl	801a706 <xQueueCreateMutexStatic>
 8019e74:	61f8      	str	r0, [r7, #28]
 8019e76:	e016      	b.n	8019ea6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	689b      	ldr	r3, [r3, #8]
 8019e7c:	4619      	mov	r1, r3
 8019e7e:	2001      	movs	r0, #1
 8019e80:	f000 fc41 	bl	801a706 <xQueueCreateMutexStatic>
 8019e84:	61f8      	str	r0, [r7, #28]
 8019e86:	e00e      	b.n	8019ea6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8019e88:	693b      	ldr	r3, [r7, #16]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d10b      	bne.n	8019ea6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8019e8e:	697b      	ldr	r3, [r7, #20]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d004      	beq.n	8019e9e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8019e94:	2004      	movs	r0, #4
 8019e96:	f000 fc1e 	bl	801a6d6 <xQueueCreateMutex>
 8019e9a:	61f8      	str	r0, [r7, #28]
 8019e9c:	e003      	b.n	8019ea6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8019e9e:	2001      	movs	r0, #1
 8019ea0:	f000 fc19 	bl	801a6d6 <xQueueCreateMutex>
 8019ea4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8019ea6:	69fb      	ldr	r3, [r7, #28]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d00c      	beq.n	8019ec6 <osMutexNew+0xee>
        if (attr != NULL) {
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d003      	beq.n	8019eba <osMutexNew+0xe2>
          name = attr->name;
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	60fb      	str	r3, [r7, #12]
 8019eb8:	e001      	b.n	8019ebe <osMutexNew+0xe6>
        } else {
          name = NULL;
 8019eba:	2300      	movs	r3, #0
 8019ebc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8019ebe:	68f9      	ldr	r1, [r7, #12]
 8019ec0:	69f8      	ldr	r0, [r7, #28]
 8019ec2:	f001 f9d3 	bl	801b26c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8019ec6:	69fb      	ldr	r3, [r7, #28]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d006      	beq.n	8019eda <osMutexNew+0x102>
 8019ecc:	697b      	ldr	r3, [r7, #20]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d003      	beq.n	8019eda <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8019ed2:	69fb      	ldr	r3, [r7, #28]
 8019ed4:	f043 0301 	orr.w	r3, r3, #1
 8019ed8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8019eda:	69fb      	ldr	r3, [r7, #28]
}
 8019edc:	4618      	mov	r0, r3
 8019ede:	3720      	adds	r7, #32
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}

08019ee4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b086      	sub	sp, #24
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
 8019eec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	f023 0301 	bic.w	r3, r3, #1
 8019ef4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	f003 0301 	and.w	r3, r3, #1
 8019efc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8019efe:	2300      	movs	r3, #0
 8019f00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019f02:	f3ef 8305 	mrs	r3, IPSR
 8019f06:	60bb      	str	r3, [r7, #8]
  return(result);
 8019f08:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d003      	beq.n	8019f16 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8019f0e:	f06f 0305 	mvn.w	r3, #5
 8019f12:	617b      	str	r3, [r7, #20]
 8019f14:	e02c      	b.n	8019f70 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8019f16:	693b      	ldr	r3, [r7, #16]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d103      	bne.n	8019f24 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8019f1c:	f06f 0303 	mvn.w	r3, #3
 8019f20:	617b      	str	r3, [r7, #20]
 8019f22:	e025      	b.n	8019f70 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d011      	beq.n	8019f4e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8019f2a:	6839      	ldr	r1, [r7, #0]
 8019f2c:	6938      	ldr	r0, [r7, #16]
 8019f2e:	f000 fc39 	bl	801a7a4 <xQueueTakeMutexRecursive>
 8019f32:	4603      	mov	r3, r0
 8019f34:	2b01      	cmp	r3, #1
 8019f36:	d01b      	beq.n	8019f70 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d003      	beq.n	8019f46 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8019f3e:	f06f 0301 	mvn.w	r3, #1
 8019f42:	617b      	str	r3, [r7, #20]
 8019f44:	e014      	b.n	8019f70 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8019f46:	f06f 0302 	mvn.w	r3, #2
 8019f4a:	617b      	str	r3, [r7, #20]
 8019f4c:	e010      	b.n	8019f70 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8019f4e:	6839      	ldr	r1, [r7, #0]
 8019f50:	6938      	ldr	r0, [r7, #16]
 8019f52:	f000 fed7 	bl	801ad04 <xQueueSemaphoreTake>
 8019f56:	4603      	mov	r3, r0
 8019f58:	2b01      	cmp	r3, #1
 8019f5a:	d009      	beq.n	8019f70 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019f5c:	683b      	ldr	r3, [r7, #0]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d003      	beq.n	8019f6a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8019f62:	f06f 0301 	mvn.w	r3, #1
 8019f66:	617b      	str	r3, [r7, #20]
 8019f68:	e002      	b.n	8019f70 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8019f6a:	f06f 0302 	mvn.w	r3, #2
 8019f6e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8019f70:	697b      	ldr	r3, [r7, #20]
}
 8019f72:	4618      	mov	r0, r3
 8019f74:	3718      	adds	r7, #24
 8019f76:	46bd      	mov	sp, r7
 8019f78:	bd80      	pop	{r7, pc}

08019f7a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8019f7a:	b580      	push	{r7, lr}
 8019f7c:	b086      	sub	sp, #24
 8019f7e:	af00      	add	r7, sp, #0
 8019f80:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	f023 0301 	bic.w	r3, r3, #1
 8019f88:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	f003 0301 	and.w	r3, r3, #1
 8019f90:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8019f92:	2300      	movs	r3, #0
 8019f94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019f96:	f3ef 8305 	mrs	r3, IPSR
 8019f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8019f9c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d003      	beq.n	8019faa <osMutexRelease+0x30>
    stat = osErrorISR;
 8019fa2:	f06f 0305 	mvn.w	r3, #5
 8019fa6:	617b      	str	r3, [r7, #20]
 8019fa8:	e01f      	b.n	8019fea <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8019faa:	693b      	ldr	r3, [r7, #16]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d103      	bne.n	8019fb8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8019fb0:	f06f 0303 	mvn.w	r3, #3
 8019fb4:	617b      	str	r3, [r7, #20]
 8019fb6:	e018      	b.n	8019fea <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d009      	beq.n	8019fd2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8019fbe:	6938      	ldr	r0, [r7, #16]
 8019fc0:	f000 fbbc 	bl	801a73c <xQueueGiveMutexRecursive>
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	2b01      	cmp	r3, #1
 8019fc8:	d00f      	beq.n	8019fea <osMutexRelease+0x70>
        stat = osErrorResource;
 8019fca:	f06f 0302 	mvn.w	r3, #2
 8019fce:	617b      	str	r3, [r7, #20]
 8019fd0:	e00b      	b.n	8019fea <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	2200      	movs	r2, #0
 8019fd6:	2100      	movs	r1, #0
 8019fd8:	6938      	ldr	r0, [r7, #16]
 8019fda:	f000 fc19 	bl	801a810 <xQueueGenericSend>
 8019fde:	4603      	mov	r3, r0
 8019fe0:	2b01      	cmp	r3, #1
 8019fe2:	d002      	beq.n	8019fea <osMutexRelease+0x70>
        stat = osErrorResource;
 8019fe4:	f06f 0302 	mvn.w	r3, #2
 8019fe8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8019fea:	697b      	ldr	r3, [r7, #20]
}
 8019fec:	4618      	mov	r0, r3
 8019fee:	3718      	adds	r7, #24
 8019ff0:	46bd      	mov	sp, r7
 8019ff2:	bd80      	pop	{r7, pc}

08019ff4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b08a      	sub	sp, #40	; 0x28
 8019ff8:	af02      	add	r7, sp, #8
 8019ffa:	60f8      	str	r0, [r7, #12]
 8019ffc:	60b9      	str	r1, [r7, #8]
 8019ffe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801a000:	2300      	movs	r3, #0
 801a002:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801a004:	f3ef 8305 	mrs	r3, IPSR
 801a008:	613b      	str	r3, [r7, #16]
  return(result);
 801a00a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d15f      	bne.n	801a0d0 <osMessageQueueNew+0xdc>
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d05c      	beq.n	801a0d0 <osMessageQueueNew+0xdc>
 801a016:	68bb      	ldr	r3, [r7, #8]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d059      	beq.n	801a0d0 <osMessageQueueNew+0xdc>
    mem = -1;
 801a01c:	f04f 33ff 	mov.w	r3, #4294967295
 801a020:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	2b00      	cmp	r3, #0
 801a026:	d029      	beq.n	801a07c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	689b      	ldr	r3, [r3, #8]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d012      	beq.n	801a056 <osMessageQueueNew+0x62>
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	68db      	ldr	r3, [r3, #12]
 801a034:	2b4f      	cmp	r3, #79	; 0x4f
 801a036:	d90e      	bls.n	801a056 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d00a      	beq.n	801a056 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	695a      	ldr	r2, [r3, #20]
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	68b9      	ldr	r1, [r7, #8]
 801a048:	fb01 f303 	mul.w	r3, r1, r3
 801a04c:	429a      	cmp	r2, r3
 801a04e:	d302      	bcc.n	801a056 <osMessageQueueNew+0x62>
        mem = 1;
 801a050:	2301      	movs	r3, #1
 801a052:	61bb      	str	r3, [r7, #24]
 801a054:	e014      	b.n	801a080 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	689b      	ldr	r3, [r3, #8]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d110      	bne.n	801a080 <osMessageQueueNew+0x8c>
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	68db      	ldr	r3, [r3, #12]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d10c      	bne.n	801a080 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d108      	bne.n	801a080 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	695b      	ldr	r3, [r3, #20]
 801a072:	2b00      	cmp	r3, #0
 801a074:	d104      	bne.n	801a080 <osMessageQueueNew+0x8c>
          mem = 0;
 801a076:	2300      	movs	r3, #0
 801a078:	61bb      	str	r3, [r7, #24]
 801a07a:	e001      	b.n	801a080 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801a07c:	2300      	movs	r3, #0
 801a07e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801a080:	69bb      	ldr	r3, [r7, #24]
 801a082:	2b01      	cmp	r3, #1
 801a084:	d10b      	bne.n	801a09e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	691a      	ldr	r2, [r3, #16]
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	689b      	ldr	r3, [r3, #8]
 801a08e:	2100      	movs	r1, #0
 801a090:	9100      	str	r1, [sp, #0]
 801a092:	68b9      	ldr	r1, [r7, #8]
 801a094:	68f8      	ldr	r0, [r7, #12]
 801a096:	f000 fa2f 	bl	801a4f8 <xQueueGenericCreateStatic>
 801a09a:	61f8      	str	r0, [r7, #28]
 801a09c:	e008      	b.n	801a0b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801a09e:	69bb      	ldr	r3, [r7, #24]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d105      	bne.n	801a0b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	68b9      	ldr	r1, [r7, #8]
 801a0a8:	68f8      	ldr	r0, [r7, #12]
 801a0aa:	f000 fa9d 	bl	801a5e8 <xQueueGenericCreate>
 801a0ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801a0b0:	69fb      	ldr	r3, [r7, #28]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d00c      	beq.n	801a0d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d003      	beq.n	801a0c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	617b      	str	r3, [r7, #20]
 801a0c2:	e001      	b.n	801a0c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801a0c8:	6979      	ldr	r1, [r7, #20]
 801a0ca:	69f8      	ldr	r0, [r7, #28]
 801a0cc:	f001 f8ce 	bl	801b26c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801a0d0:	69fb      	ldr	r3, [r7, #28]
}
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	3720      	adds	r7, #32
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bd80      	pop	{r7, pc}
	...

0801a0dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b088      	sub	sp, #32
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	60f8      	str	r0, [r7, #12]
 801a0e4:	60b9      	str	r1, [r7, #8]
 801a0e6:	603b      	str	r3, [r7, #0]
 801a0e8:	4613      	mov	r3, r2
 801a0ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801a0f0:	2300      	movs	r3, #0
 801a0f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801a0f4:	f3ef 8305 	mrs	r3, IPSR
 801a0f8:	617b      	str	r3, [r7, #20]
  return(result);
 801a0fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d028      	beq.n	801a152 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801a100:	69bb      	ldr	r3, [r7, #24]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d005      	beq.n	801a112 <osMessageQueuePut+0x36>
 801a106:	68bb      	ldr	r3, [r7, #8]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d002      	beq.n	801a112 <osMessageQueuePut+0x36>
 801a10c:	683b      	ldr	r3, [r7, #0]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d003      	beq.n	801a11a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801a112:	f06f 0303 	mvn.w	r3, #3
 801a116:	61fb      	str	r3, [r7, #28]
 801a118:	e038      	b.n	801a18c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801a11a:	2300      	movs	r3, #0
 801a11c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801a11e:	f107 0210 	add.w	r2, r7, #16
 801a122:	2300      	movs	r3, #0
 801a124:	68b9      	ldr	r1, [r7, #8]
 801a126:	69b8      	ldr	r0, [r7, #24]
 801a128:	f000 fc70 	bl	801aa0c <xQueueGenericSendFromISR>
 801a12c:	4603      	mov	r3, r0
 801a12e:	2b01      	cmp	r3, #1
 801a130:	d003      	beq.n	801a13a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801a132:	f06f 0302 	mvn.w	r3, #2
 801a136:	61fb      	str	r3, [r7, #28]
 801a138:	e028      	b.n	801a18c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801a13a:	693b      	ldr	r3, [r7, #16]
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d025      	beq.n	801a18c <osMessageQueuePut+0xb0>
 801a140:	4b15      	ldr	r3, [pc, #84]	; (801a198 <osMessageQueuePut+0xbc>)
 801a142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a146:	601a      	str	r2, [r3, #0]
 801a148:	f3bf 8f4f 	dsb	sy
 801a14c:	f3bf 8f6f 	isb	sy
 801a150:	e01c      	b.n	801a18c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801a152:	69bb      	ldr	r3, [r7, #24]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d002      	beq.n	801a15e <osMessageQueuePut+0x82>
 801a158:	68bb      	ldr	r3, [r7, #8]
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d103      	bne.n	801a166 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801a15e:	f06f 0303 	mvn.w	r3, #3
 801a162:	61fb      	str	r3, [r7, #28]
 801a164:	e012      	b.n	801a18c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801a166:	2300      	movs	r3, #0
 801a168:	683a      	ldr	r2, [r7, #0]
 801a16a:	68b9      	ldr	r1, [r7, #8]
 801a16c:	69b8      	ldr	r0, [r7, #24]
 801a16e:	f000 fb4f 	bl	801a810 <xQueueGenericSend>
 801a172:	4603      	mov	r3, r0
 801a174:	2b01      	cmp	r3, #1
 801a176:	d009      	beq.n	801a18c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801a178:	683b      	ldr	r3, [r7, #0]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d003      	beq.n	801a186 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801a17e:	f06f 0301 	mvn.w	r3, #1
 801a182:	61fb      	str	r3, [r7, #28]
 801a184:	e002      	b.n	801a18c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801a186:	f06f 0302 	mvn.w	r3, #2
 801a18a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801a18c:	69fb      	ldr	r3, [r7, #28]
}
 801a18e:	4618      	mov	r0, r3
 801a190:	3720      	adds	r7, #32
 801a192:	46bd      	mov	sp, r7
 801a194:	bd80      	pop	{r7, pc}
 801a196:	bf00      	nop
 801a198:	e000ed04 	.word	0xe000ed04

0801a19c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801a19c:	b580      	push	{r7, lr}
 801a19e:	b088      	sub	sp, #32
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	60f8      	str	r0, [r7, #12]
 801a1a4:	60b9      	str	r1, [r7, #8]
 801a1a6:	607a      	str	r2, [r7, #4]
 801a1a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801a1b2:	f3ef 8305 	mrs	r3, IPSR
 801a1b6:	617b      	str	r3, [r7, #20]
  return(result);
 801a1b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d028      	beq.n	801a210 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801a1be:	69bb      	ldr	r3, [r7, #24]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d005      	beq.n	801a1d0 <osMessageQueueGet+0x34>
 801a1c4:	68bb      	ldr	r3, [r7, #8]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d002      	beq.n	801a1d0 <osMessageQueueGet+0x34>
 801a1ca:	683b      	ldr	r3, [r7, #0]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d003      	beq.n	801a1d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801a1d0:	f06f 0303 	mvn.w	r3, #3
 801a1d4:	61fb      	str	r3, [r7, #28]
 801a1d6:	e037      	b.n	801a248 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801a1d8:	2300      	movs	r3, #0
 801a1da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801a1dc:	f107 0310 	add.w	r3, r7, #16
 801a1e0:	461a      	mov	r2, r3
 801a1e2:	68b9      	ldr	r1, [r7, #8]
 801a1e4:	69b8      	ldr	r0, [r7, #24]
 801a1e6:	f000 fe99 	bl	801af1c <xQueueReceiveFromISR>
 801a1ea:	4603      	mov	r3, r0
 801a1ec:	2b01      	cmp	r3, #1
 801a1ee:	d003      	beq.n	801a1f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801a1f0:	f06f 0302 	mvn.w	r3, #2
 801a1f4:	61fb      	str	r3, [r7, #28]
 801a1f6:	e027      	b.n	801a248 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801a1f8:	693b      	ldr	r3, [r7, #16]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d024      	beq.n	801a248 <osMessageQueueGet+0xac>
 801a1fe:	4b15      	ldr	r3, [pc, #84]	; (801a254 <osMessageQueueGet+0xb8>)
 801a200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a204:	601a      	str	r2, [r3, #0]
 801a206:	f3bf 8f4f 	dsb	sy
 801a20a:	f3bf 8f6f 	isb	sy
 801a20e:	e01b      	b.n	801a248 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801a210:	69bb      	ldr	r3, [r7, #24]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d002      	beq.n	801a21c <osMessageQueueGet+0x80>
 801a216:	68bb      	ldr	r3, [r7, #8]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d103      	bne.n	801a224 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801a21c:	f06f 0303 	mvn.w	r3, #3
 801a220:	61fb      	str	r3, [r7, #28]
 801a222:	e011      	b.n	801a248 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801a224:	683a      	ldr	r2, [r7, #0]
 801a226:	68b9      	ldr	r1, [r7, #8]
 801a228:	69b8      	ldr	r0, [r7, #24]
 801a22a:	f000 fc8b 	bl	801ab44 <xQueueReceive>
 801a22e:	4603      	mov	r3, r0
 801a230:	2b01      	cmp	r3, #1
 801a232:	d009      	beq.n	801a248 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801a234:	683b      	ldr	r3, [r7, #0]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d003      	beq.n	801a242 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801a23a:	f06f 0301 	mvn.w	r3, #1
 801a23e:	61fb      	str	r3, [r7, #28]
 801a240:	e002      	b.n	801a248 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801a242:	f06f 0302 	mvn.w	r3, #2
 801a246:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801a248:	69fb      	ldr	r3, [r7, #28]
}
 801a24a:	4618      	mov	r0, r3
 801a24c:	3720      	adds	r7, #32
 801a24e:	46bd      	mov	sp, r7
 801a250:	bd80      	pop	{r7, pc}
 801a252:	bf00      	nop
 801a254:	e000ed04 	.word	0xe000ed04

0801a258 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801a258:	b480      	push	{r7}
 801a25a:	b085      	sub	sp, #20
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	60f8      	str	r0, [r7, #12]
 801a260:	60b9      	str	r1, [r7, #8]
 801a262:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	4a07      	ldr	r2, [pc, #28]	; (801a284 <vApplicationGetIdleTaskMemory+0x2c>)
 801a268:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	4a06      	ldr	r2, [pc, #24]	; (801a288 <vApplicationGetIdleTaskMemory+0x30>)
 801a26e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	2280      	movs	r2, #128	; 0x80
 801a274:	601a      	str	r2, [r3, #0]
}
 801a276:	bf00      	nop
 801a278:	3714      	adds	r7, #20
 801a27a:	46bd      	mov	sp, r7
 801a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a280:	4770      	bx	lr
 801a282:	bf00      	nop
 801a284:	20001e04 	.word	0x20001e04
 801a288:	20001eac 	.word	0x20001eac

0801a28c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801a28c:	b480      	push	{r7}
 801a28e:	b085      	sub	sp, #20
 801a290:	af00      	add	r7, sp, #0
 801a292:	60f8      	str	r0, [r7, #12]
 801a294:	60b9      	str	r1, [r7, #8]
 801a296:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	4a07      	ldr	r2, [pc, #28]	; (801a2b8 <vApplicationGetTimerTaskMemory+0x2c>)
 801a29c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	4a06      	ldr	r2, [pc, #24]	; (801a2bc <vApplicationGetTimerTaskMemory+0x30>)
 801a2a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a2aa:	601a      	str	r2, [r3, #0]
}
 801a2ac:	bf00      	nop
 801a2ae:	3714      	adds	r7, #20
 801a2b0:	46bd      	mov	sp, r7
 801a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b6:	4770      	bx	lr
 801a2b8:	200020ac 	.word	0x200020ac
 801a2bc:	20002154 	.word	0x20002154

0801a2c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801a2c0:	b480      	push	{r7}
 801a2c2:	b083      	sub	sp, #12
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	f103 0208 	add.w	r2, r3, #8
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	f04f 32ff 	mov.w	r2, #4294967295
 801a2d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	f103 0208 	add.w	r2, r3, #8
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	f103 0208 	add.w	r2, r3, #8
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801a2f4:	bf00      	nop
 801a2f6:	370c      	adds	r7, #12
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2fe:	4770      	bx	lr

0801a300 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801a300:	b480      	push	{r7}
 801a302:	b083      	sub	sp, #12
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	2200      	movs	r2, #0
 801a30c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801a30e:	bf00      	nop
 801a310:	370c      	adds	r7, #12
 801a312:	46bd      	mov	sp, r7
 801a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a318:	4770      	bx	lr

0801a31a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a31a:	b480      	push	{r7}
 801a31c:	b085      	sub	sp, #20
 801a31e:	af00      	add	r7, sp, #0
 801a320:	6078      	str	r0, [r7, #4]
 801a322:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	685b      	ldr	r3, [r3, #4]
 801a328:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801a32a:	683b      	ldr	r3, [r7, #0]
 801a32c:	68fa      	ldr	r2, [r7, #12]
 801a32e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	689a      	ldr	r2, [r3, #8]
 801a334:	683b      	ldr	r3, [r7, #0]
 801a336:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	689b      	ldr	r3, [r3, #8]
 801a33c:	683a      	ldr	r2, [r7, #0]
 801a33e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	683a      	ldr	r2, [r7, #0]
 801a344:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801a346:	683b      	ldr	r3, [r7, #0]
 801a348:	687a      	ldr	r2, [r7, #4]
 801a34a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	1c5a      	adds	r2, r3, #1
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	601a      	str	r2, [r3, #0]
}
 801a356:	bf00      	nop
 801a358:	3714      	adds	r7, #20
 801a35a:	46bd      	mov	sp, r7
 801a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a360:	4770      	bx	lr

0801a362 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a362:	b480      	push	{r7}
 801a364:	b085      	sub	sp, #20
 801a366:	af00      	add	r7, sp, #0
 801a368:	6078      	str	r0, [r7, #4]
 801a36a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801a36c:	683b      	ldr	r3, [r7, #0]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801a372:	68bb      	ldr	r3, [r7, #8]
 801a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a378:	d103      	bne.n	801a382 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	691b      	ldr	r3, [r3, #16]
 801a37e:	60fb      	str	r3, [r7, #12]
 801a380:	e00c      	b.n	801a39c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	3308      	adds	r3, #8
 801a386:	60fb      	str	r3, [r7, #12]
 801a388:	e002      	b.n	801a390 <vListInsert+0x2e>
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	685b      	ldr	r3, [r3, #4]
 801a38e:	60fb      	str	r3, [r7, #12]
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	685b      	ldr	r3, [r3, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	68ba      	ldr	r2, [r7, #8]
 801a398:	429a      	cmp	r2, r3
 801a39a:	d2f6      	bcs.n	801a38a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	685a      	ldr	r2, [r3, #4]
 801a3a0:	683b      	ldr	r3, [r7, #0]
 801a3a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801a3a4:	683b      	ldr	r3, [r7, #0]
 801a3a6:	685b      	ldr	r3, [r3, #4]
 801a3a8:	683a      	ldr	r2, [r7, #0]
 801a3aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801a3ac:	683b      	ldr	r3, [r7, #0]
 801a3ae:	68fa      	ldr	r2, [r7, #12]
 801a3b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	683a      	ldr	r2, [r7, #0]
 801a3b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801a3b8:	683b      	ldr	r3, [r7, #0]
 801a3ba:	687a      	ldr	r2, [r7, #4]
 801a3bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	1c5a      	adds	r2, r3, #1
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	601a      	str	r2, [r3, #0]
}
 801a3c8:	bf00      	nop
 801a3ca:	3714      	adds	r7, #20
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d2:	4770      	bx	lr

0801a3d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801a3d4:	b480      	push	{r7}
 801a3d6:	b085      	sub	sp, #20
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	691b      	ldr	r3, [r3, #16]
 801a3e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	685b      	ldr	r3, [r3, #4]
 801a3e6:	687a      	ldr	r2, [r7, #4]
 801a3e8:	6892      	ldr	r2, [r2, #8]
 801a3ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	689b      	ldr	r3, [r3, #8]
 801a3f0:	687a      	ldr	r2, [r7, #4]
 801a3f2:	6852      	ldr	r2, [r2, #4]
 801a3f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	685b      	ldr	r3, [r3, #4]
 801a3fa:	687a      	ldr	r2, [r7, #4]
 801a3fc:	429a      	cmp	r2, r3
 801a3fe:	d103      	bne.n	801a408 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	689a      	ldr	r2, [r3, #8]
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	2200      	movs	r2, #0
 801a40c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	1e5a      	subs	r2, r3, #1
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	681b      	ldr	r3, [r3, #0]
}
 801a41c:	4618      	mov	r0, r3
 801a41e:	3714      	adds	r7, #20
 801a420:	46bd      	mov	sp, r7
 801a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a426:	4770      	bx	lr

0801a428 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801a428:	b580      	push	{r7, lr}
 801a42a:	b084      	sub	sp, #16
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]
 801a430:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d10a      	bne.n	801a452 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a440:	f383 8811 	msr	BASEPRI, r3
 801a444:	f3bf 8f6f 	isb	sy
 801a448:	f3bf 8f4f 	dsb	sy
 801a44c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801a44e:	bf00      	nop
 801a450:	e7fe      	b.n	801a450 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801a452:	f002 fcef 	bl	801ce34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	681a      	ldr	r2, [r3, #0]
 801a45a:	68fb      	ldr	r3, [r7, #12]
 801a45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a45e:	68f9      	ldr	r1, [r7, #12]
 801a460:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a462:	fb01 f303 	mul.w	r3, r1, r3
 801a466:	441a      	add	r2, r3
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	2200      	movs	r2, #0
 801a470:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	681a      	ldr	r2, [r3, #0]
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	681a      	ldr	r2, [r3, #0]
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a482:	3b01      	subs	r3, #1
 801a484:	68f9      	ldr	r1, [r7, #12]
 801a486:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a488:	fb01 f303 	mul.w	r3, r1, r3
 801a48c:	441a      	add	r2, r3
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	22ff      	movs	r2, #255	; 0xff
 801a496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	22ff      	movs	r2, #255	; 0xff
 801a49e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801a4a2:	683b      	ldr	r3, [r7, #0]
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d114      	bne.n	801a4d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	691b      	ldr	r3, [r3, #16]
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d01a      	beq.n	801a4e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a4b0:	68fb      	ldr	r3, [r7, #12]
 801a4b2:	3310      	adds	r3, #16
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	f001 fc95 	bl	801bde4 <xTaskRemoveFromEventList>
 801a4ba:	4603      	mov	r3, r0
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d012      	beq.n	801a4e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801a4c0:	4b0c      	ldr	r3, [pc, #48]	; (801a4f4 <xQueueGenericReset+0xcc>)
 801a4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a4c6:	601a      	str	r2, [r3, #0]
 801a4c8:	f3bf 8f4f 	dsb	sy
 801a4cc:	f3bf 8f6f 	isb	sy
 801a4d0:	e009      	b.n	801a4e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	3310      	adds	r3, #16
 801a4d6:	4618      	mov	r0, r3
 801a4d8:	f7ff fef2 	bl	801a2c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801a4dc:	68fb      	ldr	r3, [r7, #12]
 801a4de:	3324      	adds	r3, #36	; 0x24
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	f7ff feed 	bl	801a2c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801a4e6:	f002 fcd5 	bl	801ce94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801a4ea:	2301      	movs	r3, #1
}
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	3710      	adds	r7, #16
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	bd80      	pop	{r7, pc}
 801a4f4:	e000ed04 	.word	0xe000ed04

0801a4f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b08e      	sub	sp, #56	; 0x38
 801a4fc:	af02      	add	r7, sp, #8
 801a4fe:	60f8      	str	r0, [r7, #12]
 801a500:	60b9      	str	r1, [r7, #8]
 801a502:	607a      	str	r2, [r7, #4]
 801a504:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d10a      	bne.n	801a522 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a510:	f383 8811 	msr	BASEPRI, r3
 801a514:	f3bf 8f6f 	isb	sy
 801a518:	f3bf 8f4f 	dsb	sy
 801a51c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a51e:	bf00      	nop
 801a520:	e7fe      	b.n	801a520 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	2b00      	cmp	r3, #0
 801a526:	d10a      	bne.n	801a53e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801a528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a52c:	f383 8811 	msr	BASEPRI, r3
 801a530:	f3bf 8f6f 	isb	sy
 801a534:	f3bf 8f4f 	dsb	sy
 801a538:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a53a:	bf00      	nop
 801a53c:	e7fe      	b.n	801a53c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d002      	beq.n	801a54a <xQueueGenericCreateStatic+0x52>
 801a544:	68bb      	ldr	r3, [r7, #8]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d001      	beq.n	801a54e <xQueueGenericCreateStatic+0x56>
 801a54a:	2301      	movs	r3, #1
 801a54c:	e000      	b.n	801a550 <xQueueGenericCreateStatic+0x58>
 801a54e:	2300      	movs	r3, #0
 801a550:	2b00      	cmp	r3, #0
 801a552:	d10a      	bne.n	801a56a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a558:	f383 8811 	msr	BASEPRI, r3
 801a55c:	f3bf 8f6f 	isb	sy
 801a560:	f3bf 8f4f 	dsb	sy
 801a564:	623b      	str	r3, [r7, #32]
}
 801a566:	bf00      	nop
 801a568:	e7fe      	b.n	801a568 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d102      	bne.n	801a576 <xQueueGenericCreateStatic+0x7e>
 801a570:	68bb      	ldr	r3, [r7, #8]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d101      	bne.n	801a57a <xQueueGenericCreateStatic+0x82>
 801a576:	2301      	movs	r3, #1
 801a578:	e000      	b.n	801a57c <xQueueGenericCreateStatic+0x84>
 801a57a:	2300      	movs	r3, #0
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d10a      	bne.n	801a596 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a584:	f383 8811 	msr	BASEPRI, r3
 801a588:	f3bf 8f6f 	isb	sy
 801a58c:	f3bf 8f4f 	dsb	sy
 801a590:	61fb      	str	r3, [r7, #28]
}
 801a592:	bf00      	nop
 801a594:	e7fe      	b.n	801a594 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801a596:	2350      	movs	r3, #80	; 0x50
 801a598:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801a59a:	697b      	ldr	r3, [r7, #20]
 801a59c:	2b50      	cmp	r3, #80	; 0x50
 801a59e:	d00a      	beq.n	801a5b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801a5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5a4:	f383 8811 	msr	BASEPRI, r3
 801a5a8:	f3bf 8f6f 	isb	sy
 801a5ac:	f3bf 8f4f 	dsb	sy
 801a5b0:	61bb      	str	r3, [r7, #24]
}
 801a5b2:	bf00      	nop
 801a5b4:	e7fe      	b.n	801a5b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a5b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d00d      	beq.n	801a5de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801a5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5c4:	2201      	movs	r2, #1
 801a5c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a5ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d0:	9300      	str	r3, [sp, #0]
 801a5d2:	4613      	mov	r3, r2
 801a5d4:	687a      	ldr	r2, [r7, #4]
 801a5d6:	68b9      	ldr	r1, [r7, #8]
 801a5d8:	68f8      	ldr	r0, [r7, #12]
 801a5da:	f000 f83f 	bl	801a65c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	3730      	adds	r7, #48	; 0x30
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	bd80      	pop	{r7, pc}

0801a5e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801a5e8:	b580      	push	{r7, lr}
 801a5ea:	b08a      	sub	sp, #40	; 0x28
 801a5ec:	af02      	add	r7, sp, #8
 801a5ee:	60f8      	str	r0, [r7, #12]
 801a5f0:	60b9      	str	r1, [r7, #8]
 801a5f2:	4613      	mov	r3, r2
 801a5f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d10a      	bne.n	801a612 <xQueueGenericCreate+0x2a>
	__asm volatile
 801a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a600:	f383 8811 	msr	BASEPRI, r3
 801a604:	f3bf 8f6f 	isb	sy
 801a608:	f3bf 8f4f 	dsb	sy
 801a60c:	613b      	str	r3, [r7, #16]
}
 801a60e:	bf00      	nop
 801a610:	e7fe      	b.n	801a610 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	68ba      	ldr	r2, [r7, #8]
 801a616:	fb02 f303 	mul.w	r3, r2, r3
 801a61a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801a61c:	69fb      	ldr	r3, [r7, #28]
 801a61e:	3350      	adds	r3, #80	; 0x50
 801a620:	4618      	mov	r0, r3
 801a622:	f002 fd29 	bl	801d078 <pvPortMalloc>
 801a626:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801a628:	69bb      	ldr	r3, [r7, #24]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d011      	beq.n	801a652 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801a62e:	69bb      	ldr	r3, [r7, #24]
 801a630:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a632:	697b      	ldr	r3, [r7, #20]
 801a634:	3350      	adds	r3, #80	; 0x50
 801a636:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801a638:	69bb      	ldr	r3, [r7, #24]
 801a63a:	2200      	movs	r2, #0
 801a63c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a640:	79fa      	ldrb	r2, [r7, #7]
 801a642:	69bb      	ldr	r3, [r7, #24]
 801a644:	9300      	str	r3, [sp, #0]
 801a646:	4613      	mov	r3, r2
 801a648:	697a      	ldr	r2, [r7, #20]
 801a64a:	68b9      	ldr	r1, [r7, #8]
 801a64c:	68f8      	ldr	r0, [r7, #12]
 801a64e:	f000 f805 	bl	801a65c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a652:	69bb      	ldr	r3, [r7, #24]
	}
 801a654:	4618      	mov	r0, r3
 801a656:	3720      	adds	r7, #32
 801a658:	46bd      	mov	sp, r7
 801a65a:	bd80      	pop	{r7, pc}

0801a65c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801a65c:	b580      	push	{r7, lr}
 801a65e:	b084      	sub	sp, #16
 801a660:	af00      	add	r7, sp, #0
 801a662:	60f8      	str	r0, [r7, #12]
 801a664:	60b9      	str	r1, [r7, #8]
 801a666:	607a      	str	r2, [r7, #4]
 801a668:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801a66a:	68bb      	ldr	r3, [r7, #8]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d103      	bne.n	801a678 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801a670:	69bb      	ldr	r3, [r7, #24]
 801a672:	69ba      	ldr	r2, [r7, #24]
 801a674:	601a      	str	r2, [r3, #0]
 801a676:	e002      	b.n	801a67e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801a678:	69bb      	ldr	r3, [r7, #24]
 801a67a:	687a      	ldr	r2, [r7, #4]
 801a67c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801a67e:	69bb      	ldr	r3, [r7, #24]
 801a680:	68fa      	ldr	r2, [r7, #12]
 801a682:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801a684:	69bb      	ldr	r3, [r7, #24]
 801a686:	68ba      	ldr	r2, [r7, #8]
 801a688:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801a68a:	2101      	movs	r1, #1
 801a68c:	69b8      	ldr	r0, [r7, #24]
 801a68e:	f7ff fecb 	bl	801a428 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801a692:	69bb      	ldr	r3, [r7, #24]
 801a694:	78fa      	ldrb	r2, [r7, #3]
 801a696:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801a69a:	bf00      	nop
 801a69c:	3710      	adds	r7, #16
 801a69e:	46bd      	mov	sp, r7
 801a6a0:	bd80      	pop	{r7, pc}

0801a6a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801a6a2:	b580      	push	{r7, lr}
 801a6a4:	b082      	sub	sp, #8
 801a6a6:	af00      	add	r7, sp, #0
 801a6a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d00e      	beq.n	801a6ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	2200      	movs	r2, #0
 801a6c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	2100      	movs	r1, #0
 801a6c8:	6878      	ldr	r0, [r7, #4]
 801a6ca:	f000 f8a1 	bl	801a810 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801a6ce:	bf00      	nop
 801a6d0:	3708      	adds	r7, #8
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	bd80      	pop	{r7, pc}

0801a6d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801a6d6:	b580      	push	{r7, lr}
 801a6d8:	b086      	sub	sp, #24
 801a6da:	af00      	add	r7, sp, #0
 801a6dc:	4603      	mov	r3, r0
 801a6de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801a6e0:	2301      	movs	r3, #1
 801a6e2:	617b      	str	r3, [r7, #20]
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801a6e8:	79fb      	ldrb	r3, [r7, #7]
 801a6ea:	461a      	mov	r2, r3
 801a6ec:	6939      	ldr	r1, [r7, #16]
 801a6ee:	6978      	ldr	r0, [r7, #20]
 801a6f0:	f7ff ff7a 	bl	801a5e8 <xQueueGenericCreate>
 801a6f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a6f6:	68f8      	ldr	r0, [r7, #12]
 801a6f8:	f7ff ffd3 	bl	801a6a2 <prvInitialiseMutex>

		return xNewQueue;
 801a6fc:	68fb      	ldr	r3, [r7, #12]
	}
 801a6fe:	4618      	mov	r0, r3
 801a700:	3718      	adds	r7, #24
 801a702:	46bd      	mov	sp, r7
 801a704:	bd80      	pop	{r7, pc}

0801a706 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801a706:	b580      	push	{r7, lr}
 801a708:	b088      	sub	sp, #32
 801a70a:	af02      	add	r7, sp, #8
 801a70c:	4603      	mov	r3, r0
 801a70e:	6039      	str	r1, [r7, #0]
 801a710:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801a712:	2301      	movs	r3, #1
 801a714:	617b      	str	r3, [r7, #20]
 801a716:	2300      	movs	r3, #0
 801a718:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801a71a:	79fb      	ldrb	r3, [r7, #7]
 801a71c:	9300      	str	r3, [sp, #0]
 801a71e:	683b      	ldr	r3, [r7, #0]
 801a720:	2200      	movs	r2, #0
 801a722:	6939      	ldr	r1, [r7, #16]
 801a724:	6978      	ldr	r0, [r7, #20]
 801a726:	f7ff fee7 	bl	801a4f8 <xQueueGenericCreateStatic>
 801a72a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a72c:	68f8      	ldr	r0, [r7, #12]
 801a72e:	f7ff ffb8 	bl	801a6a2 <prvInitialiseMutex>

		return xNewQueue;
 801a732:	68fb      	ldr	r3, [r7, #12]
	}
 801a734:	4618      	mov	r0, r3
 801a736:	3718      	adds	r7, #24
 801a738:	46bd      	mov	sp, r7
 801a73a:	bd80      	pop	{r7, pc}

0801a73c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801a73c:	b590      	push	{r4, r7, lr}
 801a73e:	b087      	sub	sp, #28
 801a740:	af00      	add	r7, sp, #0
 801a742:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801a748:	693b      	ldr	r3, [r7, #16]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d10a      	bne.n	801a764 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 801a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a752:	f383 8811 	msr	BASEPRI, r3
 801a756:	f3bf 8f6f 	isb	sy
 801a75a:	f3bf 8f4f 	dsb	sy
 801a75e:	60fb      	str	r3, [r7, #12]
}
 801a760:	bf00      	nop
 801a762:	e7fe      	b.n	801a762 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a764:	693b      	ldr	r3, [r7, #16]
 801a766:	689c      	ldr	r4, [r3, #8]
 801a768:	f001 fcfe 	bl	801c168 <xTaskGetCurrentTaskHandle>
 801a76c:	4603      	mov	r3, r0
 801a76e:	429c      	cmp	r4, r3
 801a770:	d111      	bne.n	801a796 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801a772:	693b      	ldr	r3, [r7, #16]
 801a774:	68db      	ldr	r3, [r3, #12]
 801a776:	1e5a      	subs	r2, r3, #1
 801a778:	693b      	ldr	r3, [r7, #16]
 801a77a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801a77c:	693b      	ldr	r3, [r7, #16]
 801a77e:	68db      	ldr	r3, [r3, #12]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d105      	bne.n	801a790 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801a784:	2300      	movs	r3, #0
 801a786:	2200      	movs	r2, #0
 801a788:	2100      	movs	r1, #0
 801a78a:	6938      	ldr	r0, [r7, #16]
 801a78c:	f000 f840 	bl	801a810 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801a790:	2301      	movs	r3, #1
 801a792:	617b      	str	r3, [r7, #20]
 801a794:	e001      	b.n	801a79a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801a796:	2300      	movs	r3, #0
 801a798:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801a79a:	697b      	ldr	r3, [r7, #20]
	}
 801a79c:	4618      	mov	r0, r3
 801a79e:	371c      	adds	r7, #28
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	bd90      	pop	{r4, r7, pc}

0801a7a4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801a7a4:	b590      	push	{r4, r7, lr}
 801a7a6:	b087      	sub	sp, #28
 801a7a8:	af00      	add	r7, sp, #0
 801a7aa:	6078      	str	r0, [r7, #4]
 801a7ac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801a7b2:	693b      	ldr	r3, [r7, #16]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d10a      	bne.n	801a7ce <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 801a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7bc:	f383 8811 	msr	BASEPRI, r3
 801a7c0:	f3bf 8f6f 	isb	sy
 801a7c4:	f3bf 8f4f 	dsb	sy
 801a7c8:	60fb      	str	r3, [r7, #12]
}
 801a7ca:	bf00      	nop
 801a7cc:	e7fe      	b.n	801a7cc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a7ce:	693b      	ldr	r3, [r7, #16]
 801a7d0:	689c      	ldr	r4, [r3, #8]
 801a7d2:	f001 fcc9 	bl	801c168 <xTaskGetCurrentTaskHandle>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	429c      	cmp	r4, r3
 801a7da:	d107      	bne.n	801a7ec <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a7dc:	693b      	ldr	r3, [r7, #16]
 801a7de:	68db      	ldr	r3, [r3, #12]
 801a7e0:	1c5a      	adds	r2, r3, #1
 801a7e2:	693b      	ldr	r3, [r7, #16]
 801a7e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	617b      	str	r3, [r7, #20]
 801a7ea:	e00c      	b.n	801a806 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801a7ec:	6839      	ldr	r1, [r7, #0]
 801a7ee:	6938      	ldr	r0, [r7, #16]
 801a7f0:	f000 fa88 	bl	801ad04 <xQueueSemaphoreTake>
 801a7f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801a7f6:	697b      	ldr	r3, [r7, #20]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d004      	beq.n	801a806 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a7fc:	693b      	ldr	r3, [r7, #16]
 801a7fe:	68db      	ldr	r3, [r3, #12]
 801a800:	1c5a      	adds	r2, r3, #1
 801a802:	693b      	ldr	r3, [r7, #16]
 801a804:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801a806:	697b      	ldr	r3, [r7, #20]
	}
 801a808:	4618      	mov	r0, r3
 801a80a:	371c      	adds	r7, #28
 801a80c:	46bd      	mov	sp, r7
 801a80e:	bd90      	pop	{r4, r7, pc}

0801a810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b08e      	sub	sp, #56	; 0x38
 801a814:	af00      	add	r7, sp, #0
 801a816:	60f8      	str	r0, [r7, #12]
 801a818:	60b9      	str	r1, [r7, #8]
 801a81a:	607a      	str	r2, [r7, #4]
 801a81c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a81e:	2300      	movs	r3, #0
 801a820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d10a      	bne.n	801a842 <xQueueGenericSend+0x32>
	__asm volatile
 801a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a830:	f383 8811 	msr	BASEPRI, r3
 801a834:	f3bf 8f6f 	isb	sy
 801a838:	f3bf 8f4f 	dsb	sy
 801a83c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a83e:	bf00      	nop
 801a840:	e7fe      	b.n	801a840 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a842:	68bb      	ldr	r3, [r7, #8]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d103      	bne.n	801a850 <xQueueGenericSend+0x40>
 801a848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d101      	bne.n	801a854 <xQueueGenericSend+0x44>
 801a850:	2301      	movs	r3, #1
 801a852:	e000      	b.n	801a856 <xQueueGenericSend+0x46>
 801a854:	2300      	movs	r3, #0
 801a856:	2b00      	cmp	r3, #0
 801a858:	d10a      	bne.n	801a870 <xQueueGenericSend+0x60>
	__asm volatile
 801a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a85e:	f383 8811 	msr	BASEPRI, r3
 801a862:	f3bf 8f6f 	isb	sy
 801a866:	f3bf 8f4f 	dsb	sy
 801a86a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a86c:	bf00      	nop
 801a86e:	e7fe      	b.n	801a86e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a870:	683b      	ldr	r3, [r7, #0]
 801a872:	2b02      	cmp	r3, #2
 801a874:	d103      	bne.n	801a87e <xQueueGenericSend+0x6e>
 801a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a87a:	2b01      	cmp	r3, #1
 801a87c:	d101      	bne.n	801a882 <xQueueGenericSend+0x72>
 801a87e:	2301      	movs	r3, #1
 801a880:	e000      	b.n	801a884 <xQueueGenericSend+0x74>
 801a882:	2300      	movs	r3, #0
 801a884:	2b00      	cmp	r3, #0
 801a886:	d10a      	bne.n	801a89e <xQueueGenericSend+0x8e>
	__asm volatile
 801a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a88c:	f383 8811 	msr	BASEPRI, r3
 801a890:	f3bf 8f6f 	isb	sy
 801a894:	f3bf 8f4f 	dsb	sy
 801a898:	623b      	str	r3, [r7, #32]
}
 801a89a:	bf00      	nop
 801a89c:	e7fe      	b.n	801a89c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a89e:	f001 fc73 	bl	801c188 <xTaskGetSchedulerState>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d102      	bne.n	801a8ae <xQueueGenericSend+0x9e>
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d101      	bne.n	801a8b2 <xQueueGenericSend+0xa2>
 801a8ae:	2301      	movs	r3, #1
 801a8b0:	e000      	b.n	801a8b4 <xQueueGenericSend+0xa4>
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d10a      	bne.n	801a8ce <xQueueGenericSend+0xbe>
	__asm volatile
 801a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8bc:	f383 8811 	msr	BASEPRI, r3
 801a8c0:	f3bf 8f6f 	isb	sy
 801a8c4:	f3bf 8f4f 	dsb	sy
 801a8c8:	61fb      	str	r3, [r7, #28]
}
 801a8ca:	bf00      	nop
 801a8cc:	e7fe      	b.n	801a8cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a8ce:	f002 fab1 	bl	801ce34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a8da:	429a      	cmp	r2, r3
 801a8dc:	d302      	bcc.n	801a8e4 <xQueueGenericSend+0xd4>
 801a8de:	683b      	ldr	r3, [r7, #0]
 801a8e0:	2b02      	cmp	r3, #2
 801a8e2:	d129      	bne.n	801a938 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a8e4:	683a      	ldr	r2, [r7, #0]
 801a8e6:	68b9      	ldr	r1, [r7, #8]
 801a8e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a8ea:	f000 fbaf 	bl	801b04c <prvCopyDataToQueue>
 801a8ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d010      	beq.n	801a91a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8fa:	3324      	adds	r3, #36	; 0x24
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f001 fa71 	bl	801bde4 <xTaskRemoveFromEventList>
 801a902:	4603      	mov	r3, r0
 801a904:	2b00      	cmp	r3, #0
 801a906:	d013      	beq.n	801a930 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a908:	4b3f      	ldr	r3, [pc, #252]	; (801aa08 <xQueueGenericSend+0x1f8>)
 801a90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a90e:	601a      	str	r2, [r3, #0]
 801a910:	f3bf 8f4f 	dsb	sy
 801a914:	f3bf 8f6f 	isb	sy
 801a918:	e00a      	b.n	801a930 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d007      	beq.n	801a930 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a920:	4b39      	ldr	r3, [pc, #228]	; (801aa08 <xQueueGenericSend+0x1f8>)
 801a922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a926:	601a      	str	r2, [r3, #0]
 801a928:	f3bf 8f4f 	dsb	sy
 801a92c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a930:	f002 fab0 	bl	801ce94 <vPortExitCritical>
				return pdPASS;
 801a934:	2301      	movs	r3, #1
 801a936:	e063      	b.n	801aa00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d103      	bne.n	801a946 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a93e:	f002 faa9 	bl	801ce94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a942:	2300      	movs	r3, #0
 801a944:	e05c      	b.n	801aa00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d106      	bne.n	801a95a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a94c:	f107 0314 	add.w	r3, r7, #20
 801a950:	4618      	mov	r0, r3
 801a952:	f001 faab 	bl	801beac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a956:	2301      	movs	r3, #1
 801a958:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a95a:	f002 fa9b 	bl	801ce94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a95e:	f001 f817 	bl	801b990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a962:	f002 fa67 	bl	801ce34 <vPortEnterCritical>
 801a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a96c:	b25b      	sxtb	r3, r3
 801a96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a972:	d103      	bne.n	801a97c <xQueueGenericSend+0x16c>
 801a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a976:	2200      	movs	r2, #0
 801a978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a97e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a982:	b25b      	sxtb	r3, r3
 801a984:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a988:	d103      	bne.n	801a992 <xQueueGenericSend+0x182>
 801a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a98c:	2200      	movs	r2, #0
 801a98e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a992:	f002 fa7f 	bl	801ce94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a996:	1d3a      	adds	r2, r7, #4
 801a998:	f107 0314 	add.w	r3, r7, #20
 801a99c:	4611      	mov	r1, r2
 801a99e:	4618      	mov	r0, r3
 801a9a0:	f001 fa9a 	bl	801bed8 <xTaskCheckForTimeOut>
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d124      	bne.n	801a9f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a9aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9ac:	f000 fc46 	bl	801b23c <prvIsQueueFull>
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d018      	beq.n	801a9e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9b8:	3310      	adds	r3, #16
 801a9ba:	687a      	ldr	r2, [r7, #4]
 801a9bc:	4611      	mov	r1, r2
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f001 f9c0 	bl	801bd44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a9c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9c6:	f000 fbd1 	bl	801b16c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a9ca:	f000 ffef 	bl	801b9ac <xTaskResumeAll>
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	f47f af7c 	bne.w	801a8ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801a9d6:	4b0c      	ldr	r3, [pc, #48]	; (801aa08 <xQueueGenericSend+0x1f8>)
 801a9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a9dc:	601a      	str	r2, [r3, #0]
 801a9de:	f3bf 8f4f 	dsb	sy
 801a9e2:	f3bf 8f6f 	isb	sy
 801a9e6:	e772      	b.n	801a8ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a9e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9ea:	f000 fbbf 	bl	801b16c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a9ee:	f000 ffdd 	bl	801b9ac <xTaskResumeAll>
 801a9f2:	e76c      	b.n	801a8ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9f6:	f000 fbb9 	bl	801b16c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a9fa:	f000 ffd7 	bl	801b9ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a9fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801aa00:	4618      	mov	r0, r3
 801aa02:	3738      	adds	r7, #56	; 0x38
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}
 801aa08:	e000ed04 	.word	0xe000ed04

0801aa0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b090      	sub	sp, #64	; 0x40
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	60f8      	str	r0, [r7, #12]
 801aa14:	60b9      	str	r1, [r7, #8]
 801aa16:	607a      	str	r2, [r7, #4]
 801aa18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d10a      	bne.n	801aa3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa28:	f383 8811 	msr	BASEPRI, r3
 801aa2c:	f3bf 8f6f 	isb	sy
 801aa30:	f3bf 8f4f 	dsb	sy
 801aa34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801aa36:	bf00      	nop
 801aa38:	e7fe      	b.n	801aa38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801aa3a:	68bb      	ldr	r3, [r7, #8]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d103      	bne.n	801aa48 <xQueueGenericSendFromISR+0x3c>
 801aa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d101      	bne.n	801aa4c <xQueueGenericSendFromISR+0x40>
 801aa48:	2301      	movs	r3, #1
 801aa4a:	e000      	b.n	801aa4e <xQueueGenericSendFromISR+0x42>
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d10a      	bne.n	801aa68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa56:	f383 8811 	msr	BASEPRI, r3
 801aa5a:	f3bf 8f6f 	isb	sy
 801aa5e:	f3bf 8f4f 	dsb	sy
 801aa62:	627b      	str	r3, [r7, #36]	; 0x24
}
 801aa64:	bf00      	nop
 801aa66:	e7fe      	b.n	801aa66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801aa68:	683b      	ldr	r3, [r7, #0]
 801aa6a:	2b02      	cmp	r3, #2
 801aa6c:	d103      	bne.n	801aa76 <xQueueGenericSendFromISR+0x6a>
 801aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa72:	2b01      	cmp	r3, #1
 801aa74:	d101      	bne.n	801aa7a <xQueueGenericSendFromISR+0x6e>
 801aa76:	2301      	movs	r3, #1
 801aa78:	e000      	b.n	801aa7c <xQueueGenericSendFromISR+0x70>
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d10a      	bne.n	801aa96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa84:	f383 8811 	msr	BASEPRI, r3
 801aa88:	f3bf 8f6f 	isb	sy
 801aa8c:	f3bf 8f4f 	dsb	sy
 801aa90:	623b      	str	r3, [r7, #32]
}
 801aa92:	bf00      	nop
 801aa94:	e7fe      	b.n	801aa94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801aa96:	f002 faaf 	bl	801cff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801aa9a:	f3ef 8211 	mrs	r2, BASEPRI
 801aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aaa2:	f383 8811 	msr	BASEPRI, r3
 801aaa6:	f3bf 8f6f 	isb	sy
 801aaaa:	f3bf 8f4f 	dsb	sy
 801aaae:	61fa      	str	r2, [r7, #28]
 801aab0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801aab2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801aab4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801aab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aabe:	429a      	cmp	r2, r3
 801aac0:	d302      	bcc.n	801aac8 <xQueueGenericSendFromISR+0xbc>
 801aac2:	683b      	ldr	r3, [r7, #0]
 801aac4:	2b02      	cmp	r3, #2
 801aac6:	d12f      	bne.n	801ab28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801aad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aad6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801aad8:	683a      	ldr	r2, [r7, #0]
 801aada:	68b9      	ldr	r1, [r7, #8]
 801aadc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801aade:	f000 fab5 	bl	801b04c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801aae2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801aae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aaea:	d112      	bne.n	801ab12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801aaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d016      	beq.n	801ab22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaf6:	3324      	adds	r3, #36	; 0x24
 801aaf8:	4618      	mov	r0, r3
 801aafa:	f001 f973 	bl	801bde4 <xTaskRemoveFromEventList>
 801aafe:	4603      	mov	r3, r0
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d00e      	beq.n	801ab22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d00b      	beq.n	801ab22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	2201      	movs	r2, #1
 801ab0e:	601a      	str	r2, [r3, #0]
 801ab10:	e007      	b.n	801ab22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801ab12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ab16:	3301      	adds	r3, #1
 801ab18:	b2db      	uxtb	r3, r3
 801ab1a:	b25a      	sxtb	r2, r3
 801ab1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801ab22:	2301      	movs	r3, #1
 801ab24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801ab26:	e001      	b.n	801ab2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801ab28:	2300      	movs	r3, #0
 801ab2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ab2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801ab36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801ab38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	3740      	adds	r7, #64	; 0x40
 801ab3e:	46bd      	mov	sp, r7
 801ab40:	bd80      	pop	{r7, pc}
	...

0801ab44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b08c      	sub	sp, #48	; 0x30
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	60f8      	str	r0, [r7, #12]
 801ab4c:	60b9      	str	r1, [r7, #8]
 801ab4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801ab50:	2300      	movs	r3, #0
 801ab52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d10a      	bne.n	801ab74 <xQueueReceive+0x30>
	__asm volatile
 801ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab62:	f383 8811 	msr	BASEPRI, r3
 801ab66:	f3bf 8f6f 	isb	sy
 801ab6a:	f3bf 8f4f 	dsb	sy
 801ab6e:	623b      	str	r3, [r7, #32]
}
 801ab70:	bf00      	nop
 801ab72:	e7fe      	b.n	801ab72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ab74:	68bb      	ldr	r3, [r7, #8]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d103      	bne.n	801ab82 <xQueueReceive+0x3e>
 801ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d101      	bne.n	801ab86 <xQueueReceive+0x42>
 801ab82:	2301      	movs	r3, #1
 801ab84:	e000      	b.n	801ab88 <xQueueReceive+0x44>
 801ab86:	2300      	movs	r3, #0
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d10a      	bne.n	801aba2 <xQueueReceive+0x5e>
	__asm volatile
 801ab8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab90:	f383 8811 	msr	BASEPRI, r3
 801ab94:	f3bf 8f6f 	isb	sy
 801ab98:	f3bf 8f4f 	dsb	sy
 801ab9c:	61fb      	str	r3, [r7, #28]
}
 801ab9e:	bf00      	nop
 801aba0:	e7fe      	b.n	801aba0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801aba2:	f001 faf1 	bl	801c188 <xTaskGetSchedulerState>
 801aba6:	4603      	mov	r3, r0
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d102      	bne.n	801abb2 <xQueueReceive+0x6e>
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d101      	bne.n	801abb6 <xQueueReceive+0x72>
 801abb2:	2301      	movs	r3, #1
 801abb4:	e000      	b.n	801abb8 <xQueueReceive+0x74>
 801abb6:	2300      	movs	r3, #0
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d10a      	bne.n	801abd2 <xQueueReceive+0x8e>
	__asm volatile
 801abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abc0:	f383 8811 	msr	BASEPRI, r3
 801abc4:	f3bf 8f6f 	isb	sy
 801abc8:	f3bf 8f4f 	dsb	sy
 801abcc:	61bb      	str	r3, [r7, #24]
}
 801abce:	bf00      	nop
 801abd0:	e7fe      	b.n	801abd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801abd2:	f002 f92f 	bl	801ce34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801abdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d01f      	beq.n	801ac22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801abe2:	68b9      	ldr	r1, [r7, #8]
 801abe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801abe6:	f000 fa9b 	bl	801b120 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abec:	1e5a      	subs	r2, r3, #1
 801abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abf0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abf4:	691b      	ldr	r3, [r3, #16]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d00f      	beq.n	801ac1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abfc:	3310      	adds	r3, #16
 801abfe:	4618      	mov	r0, r3
 801ac00:	f001 f8f0 	bl	801bde4 <xTaskRemoveFromEventList>
 801ac04:	4603      	mov	r3, r0
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d007      	beq.n	801ac1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801ac0a:	4b3d      	ldr	r3, [pc, #244]	; (801ad00 <xQueueReceive+0x1bc>)
 801ac0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ac10:	601a      	str	r2, [r3, #0]
 801ac12:	f3bf 8f4f 	dsb	sy
 801ac16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801ac1a:	f002 f93b 	bl	801ce94 <vPortExitCritical>
				return pdPASS;
 801ac1e:	2301      	movs	r3, #1
 801ac20:	e069      	b.n	801acf6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d103      	bne.n	801ac30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ac28:	f002 f934 	bl	801ce94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	e062      	b.n	801acf6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d106      	bne.n	801ac44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ac36:	f107 0310 	add.w	r3, r7, #16
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f001 f936 	bl	801beac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ac40:	2301      	movs	r3, #1
 801ac42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ac44:	f002 f926 	bl	801ce94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ac48:	f000 fea2 	bl	801b990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ac4c:	f002 f8f2 	bl	801ce34 <vPortEnterCritical>
 801ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ac56:	b25b      	sxtb	r3, r3
 801ac58:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac5c:	d103      	bne.n	801ac66 <xQueueReceive+0x122>
 801ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac60:	2200      	movs	r2, #0
 801ac62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ac6c:	b25b      	sxtb	r3, r3
 801ac6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac72:	d103      	bne.n	801ac7c <xQueueReceive+0x138>
 801ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac76:	2200      	movs	r2, #0
 801ac78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ac7c:	f002 f90a 	bl	801ce94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ac80:	1d3a      	adds	r2, r7, #4
 801ac82:	f107 0310 	add.w	r3, r7, #16
 801ac86:	4611      	mov	r1, r2
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f001 f925 	bl	801bed8 <xTaskCheckForTimeOut>
 801ac8e:	4603      	mov	r3, r0
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d123      	bne.n	801acdc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ac94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ac96:	f000 fabb 	bl	801b210 <prvIsQueueEmpty>
 801ac9a:	4603      	mov	r3, r0
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d017      	beq.n	801acd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aca2:	3324      	adds	r3, #36	; 0x24
 801aca4:	687a      	ldr	r2, [r7, #4]
 801aca6:	4611      	mov	r1, r2
 801aca8:	4618      	mov	r0, r3
 801acaa:	f001 f84b 	bl	801bd44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801acae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801acb0:	f000 fa5c 	bl	801b16c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801acb4:	f000 fe7a 	bl	801b9ac <xTaskResumeAll>
 801acb8:	4603      	mov	r3, r0
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d189      	bne.n	801abd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801acbe:	4b10      	ldr	r3, [pc, #64]	; (801ad00 <xQueueReceive+0x1bc>)
 801acc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801acc4:	601a      	str	r2, [r3, #0]
 801acc6:	f3bf 8f4f 	dsb	sy
 801acca:	f3bf 8f6f 	isb	sy
 801acce:	e780      	b.n	801abd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801acd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801acd2:	f000 fa4b 	bl	801b16c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801acd6:	f000 fe69 	bl	801b9ac <xTaskResumeAll>
 801acda:	e77a      	b.n	801abd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801acdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801acde:	f000 fa45 	bl	801b16c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801ace2:	f000 fe63 	bl	801b9ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ace6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ace8:	f000 fa92 	bl	801b210 <prvIsQueueEmpty>
 801acec:	4603      	mov	r3, r0
 801acee:	2b00      	cmp	r3, #0
 801acf0:	f43f af6f 	beq.w	801abd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801acf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801acf6:	4618      	mov	r0, r3
 801acf8:	3730      	adds	r7, #48	; 0x30
 801acfa:	46bd      	mov	sp, r7
 801acfc:	bd80      	pop	{r7, pc}
 801acfe:	bf00      	nop
 801ad00:	e000ed04 	.word	0xe000ed04

0801ad04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801ad04:	b580      	push	{r7, lr}
 801ad06:	b08e      	sub	sp, #56	; 0x38
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]
 801ad0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801ad0e:	2300      	movs	r3, #0
 801ad10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801ad16:	2300      	movs	r3, #0
 801ad18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801ad1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d10a      	bne.n	801ad36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad24:	f383 8811 	msr	BASEPRI, r3
 801ad28:	f3bf 8f6f 	isb	sy
 801ad2c:	f3bf 8f4f 	dsb	sy
 801ad30:	623b      	str	r3, [r7, #32]
}
 801ad32:	bf00      	nop
 801ad34:	e7fe      	b.n	801ad34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d00a      	beq.n	801ad54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad42:	f383 8811 	msr	BASEPRI, r3
 801ad46:	f3bf 8f6f 	isb	sy
 801ad4a:	f3bf 8f4f 	dsb	sy
 801ad4e:	61fb      	str	r3, [r7, #28]
}
 801ad50:	bf00      	nop
 801ad52:	e7fe      	b.n	801ad52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ad54:	f001 fa18 	bl	801c188 <xTaskGetSchedulerState>
 801ad58:	4603      	mov	r3, r0
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d102      	bne.n	801ad64 <xQueueSemaphoreTake+0x60>
 801ad5e:	683b      	ldr	r3, [r7, #0]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d101      	bne.n	801ad68 <xQueueSemaphoreTake+0x64>
 801ad64:	2301      	movs	r3, #1
 801ad66:	e000      	b.n	801ad6a <xQueueSemaphoreTake+0x66>
 801ad68:	2300      	movs	r3, #0
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d10a      	bne.n	801ad84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad72:	f383 8811 	msr	BASEPRI, r3
 801ad76:	f3bf 8f6f 	isb	sy
 801ad7a:	f3bf 8f4f 	dsb	sy
 801ad7e:	61bb      	str	r3, [r7, #24]
}
 801ad80:	bf00      	nop
 801ad82:	e7fe      	b.n	801ad82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ad84:	f002 f856 	bl	801ce34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d024      	beq.n	801adde <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801ad94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad96:	1e5a      	subs	r2, r3, #1
 801ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d104      	bne.n	801adae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801ada4:	f001 fb66 	bl	801c474 <pvTaskIncrementMutexHeldCount>
 801ada8:	4602      	mov	r2, r0
 801adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adb0:	691b      	ldr	r3, [r3, #16]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d00f      	beq.n	801add6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adb8:	3310      	adds	r3, #16
 801adba:	4618      	mov	r0, r3
 801adbc:	f001 f812 	bl	801bde4 <xTaskRemoveFromEventList>
 801adc0:	4603      	mov	r3, r0
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d007      	beq.n	801add6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801adc6:	4b54      	ldr	r3, [pc, #336]	; (801af18 <xQueueSemaphoreTake+0x214>)
 801adc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801adcc:	601a      	str	r2, [r3, #0]
 801adce:	f3bf 8f4f 	dsb	sy
 801add2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801add6:	f002 f85d 	bl	801ce94 <vPortExitCritical>
				return pdPASS;
 801adda:	2301      	movs	r3, #1
 801addc:	e097      	b.n	801af0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801adde:	683b      	ldr	r3, [r7, #0]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d111      	bne.n	801ae08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d00a      	beq.n	801ae00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adee:	f383 8811 	msr	BASEPRI, r3
 801adf2:	f3bf 8f6f 	isb	sy
 801adf6:	f3bf 8f4f 	dsb	sy
 801adfa:	617b      	str	r3, [r7, #20]
}
 801adfc:	bf00      	nop
 801adfe:	e7fe      	b.n	801adfe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801ae00:	f002 f848 	bl	801ce94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ae04:	2300      	movs	r3, #0
 801ae06:	e082      	b.n	801af0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ae08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d106      	bne.n	801ae1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ae0e:	f107 030c 	add.w	r3, r7, #12
 801ae12:	4618      	mov	r0, r3
 801ae14:	f001 f84a 	bl	801beac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ae18:	2301      	movs	r3, #1
 801ae1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ae1c:	f002 f83a 	bl	801ce94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ae20:	f000 fdb6 	bl	801b990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ae24:	f002 f806 	bl	801ce34 <vPortEnterCritical>
 801ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ae2e:	b25b      	sxtb	r3, r3
 801ae30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae34:	d103      	bne.n	801ae3e <xQueueSemaphoreTake+0x13a>
 801ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae38:	2200      	movs	r2, #0
 801ae3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ae44:	b25b      	sxtb	r3, r3
 801ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae4a:	d103      	bne.n	801ae54 <xQueueSemaphoreTake+0x150>
 801ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae4e:	2200      	movs	r2, #0
 801ae50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ae54:	f002 f81e 	bl	801ce94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ae58:	463a      	mov	r2, r7
 801ae5a:	f107 030c 	add.w	r3, r7, #12
 801ae5e:	4611      	mov	r1, r2
 801ae60:	4618      	mov	r0, r3
 801ae62:	f001 f839 	bl	801bed8 <xTaskCheckForTimeOut>
 801ae66:	4603      	mov	r3, r0
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d132      	bne.n	801aed2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ae6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ae6e:	f000 f9cf 	bl	801b210 <prvIsQueueEmpty>
 801ae72:	4603      	mov	r3, r0
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d026      	beq.n	801aec6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d109      	bne.n	801ae94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801ae80:	f001 ffd8 	bl	801ce34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801ae84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae86:	689b      	ldr	r3, [r3, #8]
 801ae88:	4618      	mov	r0, r3
 801ae8a:	f001 f99b 	bl	801c1c4 <xTaskPriorityInherit>
 801ae8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801ae90:	f002 f800 	bl	801ce94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae96:	3324      	adds	r3, #36	; 0x24
 801ae98:	683a      	ldr	r2, [r7, #0]
 801ae9a:	4611      	mov	r1, r2
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	f000 ff51 	bl	801bd44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801aea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aea4:	f000 f962 	bl	801b16c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801aea8:	f000 fd80 	bl	801b9ac <xTaskResumeAll>
 801aeac:	4603      	mov	r3, r0
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	f47f af68 	bne.w	801ad84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801aeb4:	4b18      	ldr	r3, [pc, #96]	; (801af18 <xQueueSemaphoreTake+0x214>)
 801aeb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aeba:	601a      	str	r2, [r3, #0]
 801aebc:	f3bf 8f4f 	dsb	sy
 801aec0:	f3bf 8f6f 	isb	sy
 801aec4:	e75e      	b.n	801ad84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801aec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aec8:	f000 f950 	bl	801b16c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801aecc:	f000 fd6e 	bl	801b9ac <xTaskResumeAll>
 801aed0:	e758      	b.n	801ad84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801aed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aed4:	f000 f94a 	bl	801b16c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801aed8:	f000 fd68 	bl	801b9ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801aedc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aede:	f000 f997 	bl	801b210 <prvIsQueueEmpty>
 801aee2:	4603      	mov	r3, r0
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	f43f af4d 	beq.w	801ad84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d00d      	beq.n	801af0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801aef0:	f001 ffa0 	bl	801ce34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801aef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aef6:	f000 f891 	bl	801b01c <prvGetDisinheritPriorityAfterTimeout>
 801aefa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aefe:	689b      	ldr	r3, [r3, #8]
 801af00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801af02:	4618      	mov	r0, r3
 801af04:	f001 fa34 	bl	801c370 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801af08:	f001 ffc4 	bl	801ce94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801af0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801af0e:	4618      	mov	r0, r3
 801af10:	3738      	adds	r7, #56	; 0x38
 801af12:	46bd      	mov	sp, r7
 801af14:	bd80      	pop	{r7, pc}
 801af16:	bf00      	nop
 801af18:	e000ed04 	.word	0xe000ed04

0801af1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b08e      	sub	sp, #56	; 0x38
 801af20:	af00      	add	r7, sp, #0
 801af22:	60f8      	str	r0, [r7, #12]
 801af24:	60b9      	str	r1, [r7, #8]
 801af26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d10a      	bne.n	801af48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af36:	f383 8811 	msr	BASEPRI, r3
 801af3a:	f3bf 8f6f 	isb	sy
 801af3e:	f3bf 8f4f 	dsb	sy
 801af42:	623b      	str	r3, [r7, #32]
}
 801af44:	bf00      	nop
 801af46:	e7fe      	b.n	801af46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801af48:	68bb      	ldr	r3, [r7, #8]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d103      	bne.n	801af56 <xQueueReceiveFromISR+0x3a>
 801af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af52:	2b00      	cmp	r3, #0
 801af54:	d101      	bne.n	801af5a <xQueueReceiveFromISR+0x3e>
 801af56:	2301      	movs	r3, #1
 801af58:	e000      	b.n	801af5c <xQueueReceiveFromISR+0x40>
 801af5a:	2300      	movs	r3, #0
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d10a      	bne.n	801af76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af64:	f383 8811 	msr	BASEPRI, r3
 801af68:	f3bf 8f6f 	isb	sy
 801af6c:	f3bf 8f4f 	dsb	sy
 801af70:	61fb      	str	r3, [r7, #28]
}
 801af72:	bf00      	nop
 801af74:	e7fe      	b.n	801af74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801af76:	f002 f83f 	bl	801cff8 <vPortValidateInterruptPriority>
	__asm volatile
 801af7a:	f3ef 8211 	mrs	r2, BASEPRI
 801af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af82:	f383 8811 	msr	BASEPRI, r3
 801af86:	f3bf 8f6f 	isb	sy
 801af8a:	f3bf 8f4f 	dsb	sy
 801af8e:	61ba      	str	r2, [r7, #24]
 801af90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801af92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801af94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d02f      	beq.n	801b002 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801afa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801afa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801afac:	68b9      	ldr	r1, [r7, #8]
 801afae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801afb0:	f000 f8b6 	bl	801b120 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afb6:	1e5a      	subs	r2, r3, #1
 801afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801afbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801afc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afc4:	d112      	bne.n	801afec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afc8:	691b      	ldr	r3, [r3, #16]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d016      	beq.n	801affc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afd0:	3310      	adds	r3, #16
 801afd2:	4618      	mov	r0, r3
 801afd4:	f000 ff06 	bl	801bde4 <xTaskRemoveFromEventList>
 801afd8:	4603      	mov	r3, r0
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d00e      	beq.n	801affc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d00b      	beq.n	801affc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	2201      	movs	r2, #1
 801afe8:	601a      	str	r2, [r3, #0]
 801afea:	e007      	b.n	801affc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801afec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aff0:	3301      	adds	r3, #1
 801aff2:	b2db      	uxtb	r3, r3
 801aff4:	b25a      	sxtb	r2, r3
 801aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801affc:	2301      	movs	r3, #1
 801affe:	637b      	str	r3, [r7, #52]	; 0x34
 801b000:	e001      	b.n	801b006 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801b002:	2300      	movs	r3, #0
 801b004:	637b      	str	r3, [r7, #52]	; 0x34
 801b006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b008:	613b      	str	r3, [r7, #16]
	__asm volatile
 801b00a:	693b      	ldr	r3, [r7, #16]
 801b00c:	f383 8811 	msr	BASEPRI, r3
}
 801b010:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801b012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801b014:	4618      	mov	r0, r3
 801b016:	3738      	adds	r7, #56	; 0x38
 801b018:	46bd      	mov	sp, r7
 801b01a:	bd80      	pop	{r7, pc}

0801b01c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801b01c:	b480      	push	{r7}
 801b01e:	b085      	sub	sp, #20
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d006      	beq.n	801b03a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801b036:	60fb      	str	r3, [r7, #12]
 801b038:	e001      	b.n	801b03e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801b03a:	2300      	movs	r3, #0
 801b03c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801b03e:	68fb      	ldr	r3, [r7, #12]
	}
 801b040:	4618      	mov	r0, r3
 801b042:	3714      	adds	r7, #20
 801b044:	46bd      	mov	sp, r7
 801b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b04a:	4770      	bx	lr

0801b04c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b086      	sub	sp, #24
 801b050:	af00      	add	r7, sp, #0
 801b052:	60f8      	str	r0, [r7, #12]
 801b054:	60b9      	str	r1, [r7, #8]
 801b056:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801b058:	2300      	movs	r3, #0
 801b05a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b060:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b066:	2b00      	cmp	r3, #0
 801b068:	d10d      	bne.n	801b086 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	681b      	ldr	r3, [r3, #0]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d14d      	bne.n	801b10e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	689b      	ldr	r3, [r3, #8]
 801b076:	4618      	mov	r0, r3
 801b078:	f001 f90c 	bl	801c294 <xTaskPriorityDisinherit>
 801b07c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	2200      	movs	r2, #0
 801b082:	609a      	str	r2, [r3, #8]
 801b084:	e043      	b.n	801b10e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d119      	bne.n	801b0c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	6858      	ldr	r0, [r3, #4]
 801b090:	68fb      	ldr	r3, [r7, #12]
 801b092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b094:	461a      	mov	r2, r3
 801b096:	68b9      	ldr	r1, [r7, #8]
 801b098:	f005 fd08 	bl	8020aac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801b09c:	68fb      	ldr	r3, [r7, #12]
 801b09e:	685a      	ldr	r2, [r3, #4]
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0a4:	441a      	add	r2, r3
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	685a      	ldr	r2, [r3, #4]
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	689b      	ldr	r3, [r3, #8]
 801b0b2:	429a      	cmp	r2, r3
 801b0b4:	d32b      	bcc.n	801b10e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	681a      	ldr	r2, [r3, #0]
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	605a      	str	r2, [r3, #4]
 801b0be:	e026      	b.n	801b10e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	68d8      	ldr	r0, [r3, #12]
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0c8:	461a      	mov	r2, r3
 801b0ca:	68b9      	ldr	r1, [r7, #8]
 801b0cc:	f005 fcee 	bl	8020aac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	68da      	ldr	r2, [r3, #12]
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0d8:	425b      	negs	r3, r3
 801b0da:	441a      	add	r2, r3
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	68da      	ldr	r2, [r3, #12]
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	429a      	cmp	r2, r3
 801b0ea:	d207      	bcs.n	801b0fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	689a      	ldr	r2, [r3, #8]
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0f4:	425b      	negs	r3, r3
 801b0f6:	441a      	add	r2, r3
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	2b02      	cmp	r3, #2
 801b100:	d105      	bne.n	801b10e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801b102:	693b      	ldr	r3, [r7, #16]
 801b104:	2b00      	cmp	r3, #0
 801b106:	d002      	beq.n	801b10e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801b108:	693b      	ldr	r3, [r7, #16]
 801b10a:	3b01      	subs	r3, #1
 801b10c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801b10e:	693b      	ldr	r3, [r7, #16]
 801b110:	1c5a      	adds	r2, r3, #1
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801b116:	697b      	ldr	r3, [r7, #20]
}
 801b118:	4618      	mov	r0, r3
 801b11a:	3718      	adds	r7, #24
 801b11c:	46bd      	mov	sp, r7
 801b11e:	bd80      	pop	{r7, pc}

0801b120 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801b120:	b580      	push	{r7, lr}
 801b122:	b082      	sub	sp, #8
 801b124:	af00      	add	r7, sp, #0
 801b126:	6078      	str	r0, [r7, #4]
 801b128:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d018      	beq.n	801b164 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	68da      	ldr	r2, [r3, #12]
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b13a:	441a      	add	r2, r3
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	68da      	ldr	r2, [r3, #12]
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	689b      	ldr	r3, [r3, #8]
 801b148:	429a      	cmp	r2, r3
 801b14a:	d303      	bcc.n	801b154 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	681a      	ldr	r2, [r3, #0]
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	68d9      	ldr	r1, [r3, #12]
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b15c:	461a      	mov	r2, r3
 801b15e:	6838      	ldr	r0, [r7, #0]
 801b160:	f005 fca4 	bl	8020aac <memcpy>
	}
}
 801b164:	bf00      	nop
 801b166:	3708      	adds	r7, #8
 801b168:	46bd      	mov	sp, r7
 801b16a:	bd80      	pop	{r7, pc}

0801b16c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b084      	sub	sp, #16
 801b170:	af00      	add	r7, sp, #0
 801b172:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801b174:	f001 fe5e 	bl	801ce34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b17e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801b180:	e011      	b.n	801b1a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b186:	2b00      	cmp	r3, #0
 801b188:	d012      	beq.n	801b1b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	3324      	adds	r3, #36	; 0x24
 801b18e:	4618      	mov	r0, r3
 801b190:	f000 fe28 	bl	801bde4 <xTaskRemoveFromEventList>
 801b194:	4603      	mov	r3, r0
 801b196:	2b00      	cmp	r3, #0
 801b198:	d001      	beq.n	801b19e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801b19a:	f000 feff 	bl	801bf9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801b19e:	7bfb      	ldrb	r3, [r7, #15]
 801b1a0:	3b01      	subs	r3, #1
 801b1a2:	b2db      	uxtb	r3, r3
 801b1a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801b1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	dce9      	bgt.n	801b182 <prvUnlockQueue+0x16>
 801b1ae:	e000      	b.n	801b1b2 <prvUnlockQueue+0x46>
					break;
 801b1b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	22ff      	movs	r2, #255	; 0xff
 801b1b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801b1ba:	f001 fe6b 	bl	801ce94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801b1be:	f001 fe39 	bl	801ce34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b1c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801b1ca:	e011      	b.n	801b1f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	691b      	ldr	r3, [r3, #16]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d012      	beq.n	801b1fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	3310      	adds	r3, #16
 801b1d8:	4618      	mov	r0, r3
 801b1da:	f000 fe03 	bl	801bde4 <xTaskRemoveFromEventList>
 801b1de:	4603      	mov	r3, r0
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d001      	beq.n	801b1e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801b1e4:	f000 feda 	bl	801bf9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801b1e8:	7bbb      	ldrb	r3, [r7, #14]
 801b1ea:	3b01      	subs	r3, #1
 801b1ec:	b2db      	uxtb	r3, r3
 801b1ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801b1f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	dce9      	bgt.n	801b1cc <prvUnlockQueue+0x60>
 801b1f8:	e000      	b.n	801b1fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801b1fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	22ff      	movs	r2, #255	; 0xff
 801b200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801b204:	f001 fe46 	bl	801ce94 <vPortExitCritical>
}
 801b208:	bf00      	nop
 801b20a:	3710      	adds	r7, #16
 801b20c:	46bd      	mov	sp, r7
 801b20e:	bd80      	pop	{r7, pc}

0801b210 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801b210:	b580      	push	{r7, lr}
 801b212:	b084      	sub	sp, #16
 801b214:	af00      	add	r7, sp, #0
 801b216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b218:	f001 fe0c 	bl	801ce34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b220:	2b00      	cmp	r3, #0
 801b222:	d102      	bne.n	801b22a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801b224:	2301      	movs	r3, #1
 801b226:	60fb      	str	r3, [r7, #12]
 801b228:	e001      	b.n	801b22e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801b22a:	2300      	movs	r3, #0
 801b22c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801b22e:	f001 fe31 	bl	801ce94 <vPortExitCritical>

	return xReturn;
 801b232:	68fb      	ldr	r3, [r7, #12]
}
 801b234:	4618      	mov	r0, r3
 801b236:	3710      	adds	r7, #16
 801b238:	46bd      	mov	sp, r7
 801b23a:	bd80      	pop	{r7, pc}

0801b23c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801b23c:	b580      	push	{r7, lr}
 801b23e:	b084      	sub	sp, #16
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b244:	f001 fdf6 	bl	801ce34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b250:	429a      	cmp	r2, r3
 801b252:	d102      	bne.n	801b25a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801b254:	2301      	movs	r3, #1
 801b256:	60fb      	str	r3, [r7, #12]
 801b258:	e001      	b.n	801b25e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801b25a:	2300      	movs	r3, #0
 801b25c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801b25e:	f001 fe19 	bl	801ce94 <vPortExitCritical>

	return xReturn;
 801b262:	68fb      	ldr	r3, [r7, #12]
}
 801b264:	4618      	mov	r0, r3
 801b266:	3710      	adds	r7, #16
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}

0801b26c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801b26c:	b480      	push	{r7}
 801b26e:	b085      	sub	sp, #20
 801b270:	af00      	add	r7, sp, #0
 801b272:	6078      	str	r0, [r7, #4]
 801b274:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801b276:	2300      	movs	r3, #0
 801b278:	60fb      	str	r3, [r7, #12]
 801b27a:	e014      	b.n	801b2a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801b27c:	4a0f      	ldr	r2, [pc, #60]	; (801b2bc <vQueueAddToRegistry+0x50>)
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d10b      	bne.n	801b2a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801b288:	490c      	ldr	r1, [pc, #48]	; (801b2bc <vQueueAddToRegistry+0x50>)
 801b28a:	68fb      	ldr	r3, [r7, #12]
 801b28c:	683a      	ldr	r2, [r7, #0]
 801b28e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801b292:	4a0a      	ldr	r2, [pc, #40]	; (801b2bc <vQueueAddToRegistry+0x50>)
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	00db      	lsls	r3, r3, #3
 801b298:	4413      	add	r3, r2
 801b29a:	687a      	ldr	r2, [r7, #4]
 801b29c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801b29e:	e006      	b.n	801b2ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	3301      	adds	r3, #1
 801b2a4:	60fb      	str	r3, [r7, #12]
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	2b07      	cmp	r3, #7
 801b2aa:	d9e7      	bls.n	801b27c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801b2ac:	bf00      	nop
 801b2ae:	bf00      	nop
 801b2b0:	3714      	adds	r7, #20
 801b2b2:	46bd      	mov	sp, r7
 801b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2b8:	4770      	bx	lr
 801b2ba:	bf00      	nop
 801b2bc:	20002554 	.word	0x20002554

0801b2c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b2c0:	b580      	push	{r7, lr}
 801b2c2:	b086      	sub	sp, #24
 801b2c4:	af00      	add	r7, sp, #0
 801b2c6:	60f8      	str	r0, [r7, #12]
 801b2c8:	60b9      	str	r1, [r7, #8]
 801b2ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801b2d0:	f001 fdb0 	bl	801ce34 <vPortEnterCritical>
 801b2d4:	697b      	ldr	r3, [r7, #20]
 801b2d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b2da:	b25b      	sxtb	r3, r3
 801b2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2e0:	d103      	bne.n	801b2ea <vQueueWaitForMessageRestricted+0x2a>
 801b2e2:	697b      	ldr	r3, [r7, #20]
 801b2e4:	2200      	movs	r2, #0
 801b2e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b2ea:	697b      	ldr	r3, [r7, #20]
 801b2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b2f0:	b25b      	sxtb	r3, r3
 801b2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2f6:	d103      	bne.n	801b300 <vQueueWaitForMessageRestricted+0x40>
 801b2f8:	697b      	ldr	r3, [r7, #20]
 801b2fa:	2200      	movs	r2, #0
 801b2fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801b300:	f001 fdc8 	bl	801ce94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801b304:	697b      	ldr	r3, [r7, #20]
 801b306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d106      	bne.n	801b31a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801b30c:	697b      	ldr	r3, [r7, #20]
 801b30e:	3324      	adds	r3, #36	; 0x24
 801b310:	687a      	ldr	r2, [r7, #4]
 801b312:	68b9      	ldr	r1, [r7, #8]
 801b314:	4618      	mov	r0, r3
 801b316:	f000 fd39 	bl	801bd8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801b31a:	6978      	ldr	r0, [r7, #20]
 801b31c:	f7ff ff26 	bl	801b16c <prvUnlockQueue>
	}
 801b320:	bf00      	nop
 801b322:	3718      	adds	r7, #24
 801b324:	46bd      	mov	sp, r7
 801b326:	bd80      	pop	{r7, pc}

0801b328 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b08e      	sub	sp, #56	; 0x38
 801b32c:	af04      	add	r7, sp, #16
 801b32e:	60f8      	str	r0, [r7, #12]
 801b330:	60b9      	str	r1, [r7, #8]
 801b332:	607a      	str	r2, [r7, #4]
 801b334:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801b336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d10a      	bne.n	801b352 <xTaskCreateStatic+0x2a>
	__asm volatile
 801b33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b340:	f383 8811 	msr	BASEPRI, r3
 801b344:	f3bf 8f6f 	isb	sy
 801b348:	f3bf 8f4f 	dsb	sy
 801b34c:	623b      	str	r3, [r7, #32]
}
 801b34e:	bf00      	nop
 801b350:	e7fe      	b.n	801b350 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801b352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b354:	2b00      	cmp	r3, #0
 801b356:	d10a      	bne.n	801b36e <xTaskCreateStatic+0x46>
	__asm volatile
 801b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b35c:	f383 8811 	msr	BASEPRI, r3
 801b360:	f3bf 8f6f 	isb	sy
 801b364:	f3bf 8f4f 	dsb	sy
 801b368:	61fb      	str	r3, [r7, #28]
}
 801b36a:	bf00      	nop
 801b36c:	e7fe      	b.n	801b36c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801b36e:	23a8      	movs	r3, #168	; 0xa8
 801b370:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801b372:	693b      	ldr	r3, [r7, #16]
 801b374:	2ba8      	cmp	r3, #168	; 0xa8
 801b376:	d00a      	beq.n	801b38e <xTaskCreateStatic+0x66>
	__asm volatile
 801b378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b37c:	f383 8811 	msr	BASEPRI, r3
 801b380:	f3bf 8f6f 	isb	sy
 801b384:	f3bf 8f4f 	dsb	sy
 801b388:	61bb      	str	r3, [r7, #24]
}
 801b38a:	bf00      	nop
 801b38c:	e7fe      	b.n	801b38c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801b38e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b392:	2b00      	cmp	r3, #0
 801b394:	d01e      	beq.n	801b3d4 <xTaskCreateStatic+0xac>
 801b396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d01b      	beq.n	801b3d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801b39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b39e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b3a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a8:	2202      	movs	r2, #2
 801b3aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801b3ae:	2300      	movs	r3, #0
 801b3b0:	9303      	str	r3, [sp, #12]
 801b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3b4:	9302      	str	r3, [sp, #8]
 801b3b6:	f107 0314 	add.w	r3, r7, #20
 801b3ba:	9301      	str	r3, [sp, #4]
 801b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3be:	9300      	str	r3, [sp, #0]
 801b3c0:	683b      	ldr	r3, [r7, #0]
 801b3c2:	687a      	ldr	r2, [r7, #4]
 801b3c4:	68b9      	ldr	r1, [r7, #8]
 801b3c6:	68f8      	ldr	r0, [r7, #12]
 801b3c8:	f000 f850 	bl	801b46c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b3cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b3ce:	f000 f8f3 	bl	801b5b8 <prvAddNewTaskToReadyList>
 801b3d2:	e001      	b.n	801b3d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801b3d8:	697b      	ldr	r3, [r7, #20]
	}
 801b3da:	4618      	mov	r0, r3
 801b3dc:	3728      	adds	r7, #40	; 0x28
 801b3de:	46bd      	mov	sp, r7
 801b3e0:	bd80      	pop	{r7, pc}

0801b3e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801b3e2:	b580      	push	{r7, lr}
 801b3e4:	b08c      	sub	sp, #48	; 0x30
 801b3e6:	af04      	add	r7, sp, #16
 801b3e8:	60f8      	str	r0, [r7, #12]
 801b3ea:	60b9      	str	r1, [r7, #8]
 801b3ec:	603b      	str	r3, [r7, #0]
 801b3ee:	4613      	mov	r3, r2
 801b3f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801b3f2:	88fb      	ldrh	r3, [r7, #6]
 801b3f4:	009b      	lsls	r3, r3, #2
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f001 fe3e 	bl	801d078 <pvPortMalloc>
 801b3fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801b3fe:	697b      	ldr	r3, [r7, #20]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d00e      	beq.n	801b422 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801b404:	20a8      	movs	r0, #168	; 0xa8
 801b406:	f001 fe37 	bl	801d078 <pvPortMalloc>
 801b40a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801b40c:	69fb      	ldr	r3, [r7, #28]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d003      	beq.n	801b41a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801b412:	69fb      	ldr	r3, [r7, #28]
 801b414:	697a      	ldr	r2, [r7, #20]
 801b416:	631a      	str	r2, [r3, #48]	; 0x30
 801b418:	e005      	b.n	801b426 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801b41a:	6978      	ldr	r0, [r7, #20]
 801b41c:	f001 fef8 	bl	801d210 <vPortFree>
 801b420:	e001      	b.n	801b426 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801b422:	2300      	movs	r3, #0
 801b424:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801b426:	69fb      	ldr	r3, [r7, #28]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d017      	beq.n	801b45c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801b42c:	69fb      	ldr	r3, [r7, #28]
 801b42e:	2200      	movs	r2, #0
 801b430:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801b434:	88fa      	ldrh	r2, [r7, #6]
 801b436:	2300      	movs	r3, #0
 801b438:	9303      	str	r3, [sp, #12]
 801b43a:	69fb      	ldr	r3, [r7, #28]
 801b43c:	9302      	str	r3, [sp, #8]
 801b43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b440:	9301      	str	r3, [sp, #4]
 801b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b444:	9300      	str	r3, [sp, #0]
 801b446:	683b      	ldr	r3, [r7, #0]
 801b448:	68b9      	ldr	r1, [r7, #8]
 801b44a:	68f8      	ldr	r0, [r7, #12]
 801b44c:	f000 f80e 	bl	801b46c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b450:	69f8      	ldr	r0, [r7, #28]
 801b452:	f000 f8b1 	bl	801b5b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801b456:	2301      	movs	r3, #1
 801b458:	61bb      	str	r3, [r7, #24]
 801b45a:	e002      	b.n	801b462 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801b45c:	f04f 33ff 	mov.w	r3, #4294967295
 801b460:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801b462:	69bb      	ldr	r3, [r7, #24]
	}
 801b464:	4618      	mov	r0, r3
 801b466:	3720      	adds	r7, #32
 801b468:	46bd      	mov	sp, r7
 801b46a:	bd80      	pop	{r7, pc}

0801b46c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801b46c:	b580      	push	{r7, lr}
 801b46e:	b088      	sub	sp, #32
 801b470:	af00      	add	r7, sp, #0
 801b472:	60f8      	str	r0, [r7, #12]
 801b474:	60b9      	str	r1, [r7, #8]
 801b476:	607a      	str	r2, [r7, #4]
 801b478:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b47c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	009b      	lsls	r3, r3, #2
 801b482:	461a      	mov	r2, r3
 801b484:	21a5      	movs	r1, #165	; 0xa5
 801b486:	f005 f9f0 	bl	802086a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b48c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b494:	3b01      	subs	r3, #1
 801b496:	009b      	lsls	r3, r3, #2
 801b498:	4413      	add	r3, r2
 801b49a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801b49c:	69bb      	ldr	r3, [r7, #24]
 801b49e:	f023 0307 	bic.w	r3, r3, #7
 801b4a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801b4a4:	69bb      	ldr	r3, [r7, #24]
 801b4a6:	f003 0307 	and.w	r3, r3, #7
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d00a      	beq.n	801b4c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 801b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4b2:	f383 8811 	msr	BASEPRI, r3
 801b4b6:	f3bf 8f6f 	isb	sy
 801b4ba:	f3bf 8f4f 	dsb	sy
 801b4be:	617b      	str	r3, [r7, #20]
}
 801b4c0:	bf00      	nop
 801b4c2:	e7fe      	b.n	801b4c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801b4c4:	68bb      	ldr	r3, [r7, #8]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d01f      	beq.n	801b50a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	61fb      	str	r3, [r7, #28]
 801b4ce:	e012      	b.n	801b4f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801b4d0:	68ba      	ldr	r2, [r7, #8]
 801b4d2:	69fb      	ldr	r3, [r7, #28]
 801b4d4:	4413      	add	r3, r2
 801b4d6:	7819      	ldrb	r1, [r3, #0]
 801b4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b4da:	69fb      	ldr	r3, [r7, #28]
 801b4dc:	4413      	add	r3, r2
 801b4de:	3334      	adds	r3, #52	; 0x34
 801b4e0:	460a      	mov	r2, r1
 801b4e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801b4e4:	68ba      	ldr	r2, [r7, #8]
 801b4e6:	69fb      	ldr	r3, [r7, #28]
 801b4e8:	4413      	add	r3, r2
 801b4ea:	781b      	ldrb	r3, [r3, #0]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d006      	beq.n	801b4fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b4f0:	69fb      	ldr	r3, [r7, #28]
 801b4f2:	3301      	adds	r3, #1
 801b4f4:	61fb      	str	r3, [r7, #28]
 801b4f6:	69fb      	ldr	r3, [r7, #28]
 801b4f8:	2b0f      	cmp	r3, #15
 801b4fa:	d9e9      	bls.n	801b4d0 <prvInitialiseNewTask+0x64>
 801b4fc:	e000      	b.n	801b500 <prvInitialiseNewTask+0x94>
			{
				break;
 801b4fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b502:	2200      	movs	r2, #0
 801b504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b508:	e003      	b.n	801b512 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801b50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b50c:	2200      	movs	r2, #0
 801b50e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b514:	2b37      	cmp	r3, #55	; 0x37
 801b516:	d901      	bls.n	801b51c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801b518:	2337      	movs	r3, #55	; 0x37
 801b51a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801b51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b51e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b520:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b526:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b52a:	2200      	movs	r2, #0
 801b52c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b530:	3304      	adds	r3, #4
 801b532:	4618      	mov	r0, r3
 801b534:	f7fe fee4 	bl	801a300 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b53a:	3318      	adds	r3, #24
 801b53c:	4618      	mov	r0, r3
 801b53e:	f7fe fedf 	bl	801a300 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b546:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b54a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b550:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b556:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b55a:	2200      	movs	r2, #0
 801b55c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b562:	2200      	movs	r2, #0
 801b564:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b56a:	3354      	adds	r3, #84	; 0x54
 801b56c:	224c      	movs	r2, #76	; 0x4c
 801b56e:	2100      	movs	r1, #0
 801b570:	4618      	mov	r0, r3
 801b572:	f005 f97a 	bl	802086a <memset>
 801b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b578:	4a0c      	ldr	r2, [pc, #48]	; (801b5ac <prvInitialiseNewTask+0x140>)
 801b57a:	659a      	str	r2, [r3, #88]	; 0x58
 801b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b57e:	4a0c      	ldr	r2, [pc, #48]	; (801b5b0 <prvInitialiseNewTask+0x144>)
 801b580:	65da      	str	r2, [r3, #92]	; 0x5c
 801b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b584:	4a0b      	ldr	r2, [pc, #44]	; (801b5b4 <prvInitialiseNewTask+0x148>)
 801b586:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801b588:	683a      	ldr	r2, [r7, #0]
 801b58a:	68f9      	ldr	r1, [r7, #12]
 801b58c:	69b8      	ldr	r0, [r7, #24]
 801b58e:	f001 fb27 	bl	801cbe0 <pxPortInitialiseStack>
 801b592:	4602      	mov	r2, r0
 801b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b596:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d002      	beq.n	801b5a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b5a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b5a4:	bf00      	nop
 801b5a6:	3720      	adds	r7, #32
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	bd80      	pop	{r7, pc}
 801b5ac:	20014694 	.word	0x20014694
 801b5b0:	200146fc 	.word	0x200146fc
 801b5b4:	20014764 	.word	0x20014764

0801b5b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b082      	sub	sp, #8
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801b5c0:	f001 fc38 	bl	801ce34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801b5c4:	4b2d      	ldr	r3, [pc, #180]	; (801b67c <prvAddNewTaskToReadyList+0xc4>)
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	3301      	adds	r3, #1
 801b5ca:	4a2c      	ldr	r2, [pc, #176]	; (801b67c <prvAddNewTaskToReadyList+0xc4>)
 801b5cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801b5ce:	4b2c      	ldr	r3, [pc, #176]	; (801b680 <prvAddNewTaskToReadyList+0xc8>)
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d109      	bne.n	801b5ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801b5d6:	4a2a      	ldr	r2, [pc, #168]	; (801b680 <prvAddNewTaskToReadyList+0xc8>)
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801b5dc:	4b27      	ldr	r3, [pc, #156]	; (801b67c <prvAddNewTaskToReadyList+0xc4>)
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	2b01      	cmp	r3, #1
 801b5e2:	d110      	bne.n	801b606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801b5e4:	f000 fcfe 	bl	801bfe4 <prvInitialiseTaskLists>
 801b5e8:	e00d      	b.n	801b606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801b5ea:	4b26      	ldr	r3, [pc, #152]	; (801b684 <prvAddNewTaskToReadyList+0xcc>)
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d109      	bne.n	801b606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801b5f2:	4b23      	ldr	r3, [pc, #140]	; (801b680 <prvAddNewTaskToReadyList+0xc8>)
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d802      	bhi.n	801b606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801b600:	4a1f      	ldr	r2, [pc, #124]	; (801b680 <prvAddNewTaskToReadyList+0xc8>)
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801b606:	4b20      	ldr	r3, [pc, #128]	; (801b688 <prvAddNewTaskToReadyList+0xd0>)
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	3301      	adds	r3, #1
 801b60c:	4a1e      	ldr	r2, [pc, #120]	; (801b688 <prvAddNewTaskToReadyList+0xd0>)
 801b60e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801b610:	4b1d      	ldr	r3, [pc, #116]	; (801b688 <prvAddNewTaskToReadyList+0xd0>)
 801b612:	681a      	ldr	r2, [r3, #0]
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b61c:	4b1b      	ldr	r3, [pc, #108]	; (801b68c <prvAddNewTaskToReadyList+0xd4>)
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	429a      	cmp	r2, r3
 801b622:	d903      	bls.n	801b62c <prvAddNewTaskToReadyList+0x74>
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b628:	4a18      	ldr	r2, [pc, #96]	; (801b68c <prvAddNewTaskToReadyList+0xd4>)
 801b62a:	6013      	str	r3, [r2, #0]
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b630:	4613      	mov	r3, r2
 801b632:	009b      	lsls	r3, r3, #2
 801b634:	4413      	add	r3, r2
 801b636:	009b      	lsls	r3, r3, #2
 801b638:	4a15      	ldr	r2, [pc, #84]	; (801b690 <prvAddNewTaskToReadyList+0xd8>)
 801b63a:	441a      	add	r2, r3
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	3304      	adds	r3, #4
 801b640:	4619      	mov	r1, r3
 801b642:	4610      	mov	r0, r2
 801b644:	f7fe fe69 	bl	801a31a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801b648:	f001 fc24 	bl	801ce94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801b64c:	4b0d      	ldr	r3, [pc, #52]	; (801b684 <prvAddNewTaskToReadyList+0xcc>)
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	2b00      	cmp	r3, #0
 801b652:	d00e      	beq.n	801b672 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b654:	4b0a      	ldr	r3, [pc, #40]	; (801b680 <prvAddNewTaskToReadyList+0xc8>)
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b65e:	429a      	cmp	r2, r3
 801b660:	d207      	bcs.n	801b672 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801b662:	4b0c      	ldr	r3, [pc, #48]	; (801b694 <prvAddNewTaskToReadyList+0xdc>)
 801b664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b668:	601a      	str	r2, [r3, #0]
 801b66a:	f3bf 8f4f 	dsb	sy
 801b66e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b672:	bf00      	nop
 801b674:	3708      	adds	r7, #8
 801b676:	46bd      	mov	sp, r7
 801b678:	bd80      	pop	{r7, pc}
 801b67a:	bf00      	nop
 801b67c:	20002a68 	.word	0x20002a68
 801b680:	20002594 	.word	0x20002594
 801b684:	20002a74 	.word	0x20002a74
 801b688:	20002a84 	.word	0x20002a84
 801b68c:	20002a70 	.word	0x20002a70
 801b690:	20002598 	.word	0x20002598
 801b694:	e000ed04 	.word	0xe000ed04

0801b698 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801b698:	b580      	push	{r7, lr}
 801b69a:	b084      	sub	sp, #16
 801b69c:	af00      	add	r7, sp, #0
 801b69e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801b6a0:	f001 fbc8 	bl	801ce34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d102      	bne.n	801b6b0 <vTaskDelete+0x18>
 801b6aa:	4b2c      	ldr	r3, [pc, #176]	; (801b75c <vTaskDelete+0xc4>)
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	e000      	b.n	801b6b2 <vTaskDelete+0x1a>
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	3304      	adds	r3, #4
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	f7fe fe8b 	bl	801a3d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d004      	beq.n	801b6d0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b6c6:	68fb      	ldr	r3, [r7, #12]
 801b6c8:	3318      	adds	r3, #24
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f7fe fe82 	bl	801a3d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801b6d0:	4b23      	ldr	r3, [pc, #140]	; (801b760 <vTaskDelete+0xc8>)
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	3301      	adds	r3, #1
 801b6d6:	4a22      	ldr	r2, [pc, #136]	; (801b760 <vTaskDelete+0xc8>)
 801b6d8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801b6da:	4b20      	ldr	r3, [pc, #128]	; (801b75c <vTaskDelete+0xc4>)
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	68fa      	ldr	r2, [r7, #12]
 801b6e0:	429a      	cmp	r2, r3
 801b6e2:	d10b      	bne.n	801b6fc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	3304      	adds	r3, #4
 801b6e8:	4619      	mov	r1, r3
 801b6ea:	481e      	ldr	r0, [pc, #120]	; (801b764 <vTaskDelete+0xcc>)
 801b6ec:	f7fe fe15 	bl	801a31a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801b6f0:	4b1d      	ldr	r3, [pc, #116]	; (801b768 <vTaskDelete+0xd0>)
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	3301      	adds	r3, #1
 801b6f6:	4a1c      	ldr	r2, [pc, #112]	; (801b768 <vTaskDelete+0xd0>)
 801b6f8:	6013      	str	r3, [r2, #0]
 801b6fa:	e009      	b.n	801b710 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801b6fc:	4b1b      	ldr	r3, [pc, #108]	; (801b76c <vTaskDelete+0xd4>)
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	3b01      	subs	r3, #1
 801b702:	4a1a      	ldr	r2, [pc, #104]	; (801b76c <vTaskDelete+0xd4>)
 801b704:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801b706:	68f8      	ldr	r0, [r7, #12]
 801b708:	f000 fcda 	bl	801c0c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801b70c:	f000 fd0c 	bl	801c128 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801b710:	f001 fbc0 	bl	801ce94 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801b714:	4b16      	ldr	r3, [pc, #88]	; (801b770 <vTaskDelete+0xd8>)
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d01b      	beq.n	801b754 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801b71c:	4b0f      	ldr	r3, [pc, #60]	; (801b75c <vTaskDelete+0xc4>)
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	68fa      	ldr	r2, [r7, #12]
 801b722:	429a      	cmp	r2, r3
 801b724:	d116      	bne.n	801b754 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801b726:	4b13      	ldr	r3, [pc, #76]	; (801b774 <vTaskDelete+0xdc>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d00a      	beq.n	801b744 <vTaskDelete+0xac>
	__asm volatile
 801b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b732:	f383 8811 	msr	BASEPRI, r3
 801b736:	f3bf 8f6f 	isb	sy
 801b73a:	f3bf 8f4f 	dsb	sy
 801b73e:	60bb      	str	r3, [r7, #8]
}
 801b740:	bf00      	nop
 801b742:	e7fe      	b.n	801b742 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801b744:	4b0c      	ldr	r3, [pc, #48]	; (801b778 <vTaskDelete+0xe0>)
 801b746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b74a:	601a      	str	r2, [r3, #0]
 801b74c:	f3bf 8f4f 	dsb	sy
 801b750:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801b754:	bf00      	nop
 801b756:	3710      	adds	r7, #16
 801b758:	46bd      	mov	sp, r7
 801b75a:	bd80      	pop	{r7, pc}
 801b75c:	20002594 	.word	0x20002594
 801b760:	20002a84 	.word	0x20002a84
 801b764:	20002a3c 	.word	0x20002a3c
 801b768:	20002a50 	.word	0x20002a50
 801b76c:	20002a68 	.word	0x20002a68
 801b770:	20002a74 	.word	0x20002a74
 801b774:	20002a90 	.word	0x20002a90
 801b778:	e000ed04 	.word	0xe000ed04

0801b77c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b084      	sub	sp, #16
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b784:	2300      	movs	r3, #0
 801b786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d017      	beq.n	801b7be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b78e:	4b13      	ldr	r3, [pc, #76]	; (801b7dc <vTaskDelay+0x60>)
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d00a      	beq.n	801b7ac <vTaskDelay+0x30>
	__asm volatile
 801b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b79a:	f383 8811 	msr	BASEPRI, r3
 801b79e:	f3bf 8f6f 	isb	sy
 801b7a2:	f3bf 8f4f 	dsb	sy
 801b7a6:	60bb      	str	r3, [r7, #8]
}
 801b7a8:	bf00      	nop
 801b7aa:	e7fe      	b.n	801b7aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801b7ac:	f000 f8f0 	bl	801b990 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b7b0:	2100      	movs	r1, #0
 801b7b2:	6878      	ldr	r0, [r7, #4]
 801b7b4:	f000 fe72 	bl	801c49c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b7b8:	f000 f8f8 	bl	801b9ac <xTaskResumeAll>
 801b7bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d107      	bne.n	801b7d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801b7c4:	4b06      	ldr	r3, [pc, #24]	; (801b7e0 <vTaskDelay+0x64>)
 801b7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b7ca:	601a      	str	r2, [r3, #0]
 801b7cc:	f3bf 8f4f 	dsb	sy
 801b7d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b7d4:	bf00      	nop
 801b7d6:	3710      	adds	r7, #16
 801b7d8:	46bd      	mov	sp, r7
 801b7da:	bd80      	pop	{r7, pc}
 801b7dc:	20002a90 	.word	0x20002a90
 801b7e0:	e000ed04 	.word	0xe000ed04

0801b7e4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801b7e4:	b580      	push	{r7, lr}
 801b7e6:	b088      	sub	sp, #32
 801b7e8:	af00      	add	r7, sp, #0
 801b7ea:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801b7f0:	69bb      	ldr	r3, [r7, #24]
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d10a      	bne.n	801b80c <eTaskGetState+0x28>
	__asm volatile
 801b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7fa:	f383 8811 	msr	BASEPRI, r3
 801b7fe:	f3bf 8f6f 	isb	sy
 801b802:	f3bf 8f4f 	dsb	sy
 801b806:	60bb      	str	r3, [r7, #8]
}
 801b808:	bf00      	nop
 801b80a:	e7fe      	b.n	801b80a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801b80c:	4b23      	ldr	r3, [pc, #140]	; (801b89c <eTaskGetState+0xb8>)
 801b80e:	681b      	ldr	r3, [r3, #0]
 801b810:	69ba      	ldr	r2, [r7, #24]
 801b812:	429a      	cmp	r2, r3
 801b814:	d102      	bne.n	801b81c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801b816:	2300      	movs	r3, #0
 801b818:	77fb      	strb	r3, [r7, #31]
 801b81a:	e03a      	b.n	801b892 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801b81c:	f001 fb0a 	bl	801ce34 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801b820:	69bb      	ldr	r3, [r7, #24]
 801b822:	695b      	ldr	r3, [r3, #20]
 801b824:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801b826:	4b1e      	ldr	r3, [pc, #120]	; (801b8a0 <eTaskGetState+0xbc>)
 801b828:	681b      	ldr	r3, [r3, #0]
 801b82a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801b82c:	4b1d      	ldr	r3, [pc, #116]	; (801b8a4 <eTaskGetState+0xc0>)
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801b832:	f001 fb2f 	bl	801ce94 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801b836:	697a      	ldr	r2, [r7, #20]
 801b838:	693b      	ldr	r3, [r7, #16]
 801b83a:	429a      	cmp	r2, r3
 801b83c:	d003      	beq.n	801b846 <eTaskGetState+0x62>
 801b83e:	697a      	ldr	r2, [r7, #20]
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	429a      	cmp	r2, r3
 801b844:	d102      	bne.n	801b84c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801b846:	2302      	movs	r3, #2
 801b848:	77fb      	strb	r3, [r7, #31]
 801b84a:	e022      	b.n	801b892 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801b84c:	697b      	ldr	r3, [r7, #20]
 801b84e:	4a16      	ldr	r2, [pc, #88]	; (801b8a8 <eTaskGetState+0xc4>)
 801b850:	4293      	cmp	r3, r2
 801b852:	d112      	bne.n	801b87a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801b854:	69bb      	ldr	r3, [r7, #24]
 801b856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d10b      	bne.n	801b874 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801b85c:	69bb      	ldr	r3, [r7, #24]
 801b85e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 801b862:	b2db      	uxtb	r3, r3
 801b864:	2b01      	cmp	r3, #1
 801b866:	d102      	bne.n	801b86e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801b868:	2302      	movs	r3, #2
 801b86a:	77fb      	strb	r3, [r7, #31]
 801b86c:	e011      	b.n	801b892 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801b86e:	2303      	movs	r3, #3
 801b870:	77fb      	strb	r3, [r7, #31]
 801b872:	e00e      	b.n	801b892 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801b874:	2302      	movs	r3, #2
 801b876:	77fb      	strb	r3, [r7, #31]
 801b878:	e00b      	b.n	801b892 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801b87a:	697b      	ldr	r3, [r7, #20]
 801b87c:	4a0b      	ldr	r2, [pc, #44]	; (801b8ac <eTaskGetState+0xc8>)
 801b87e:	4293      	cmp	r3, r2
 801b880:	d002      	beq.n	801b888 <eTaskGetState+0xa4>
 801b882:	697b      	ldr	r3, [r7, #20]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d102      	bne.n	801b88e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801b888:	2304      	movs	r3, #4
 801b88a:	77fb      	strb	r3, [r7, #31]
 801b88c:	e001      	b.n	801b892 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801b88e:	2301      	movs	r3, #1
 801b890:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801b892:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801b894:	4618      	mov	r0, r3
 801b896:	3720      	adds	r7, #32
 801b898:	46bd      	mov	sp, r7
 801b89a:	bd80      	pop	{r7, pc}
 801b89c:	20002594 	.word	0x20002594
 801b8a0:	20002a20 	.word	0x20002a20
 801b8a4:	20002a24 	.word	0x20002a24
 801b8a8:	20002a54 	.word	0x20002a54
 801b8ac:	20002a3c 	.word	0x20002a3c

0801b8b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b8b0:	b580      	push	{r7, lr}
 801b8b2:	b08a      	sub	sp, #40	; 0x28
 801b8b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b8be:	463a      	mov	r2, r7
 801b8c0:	1d39      	adds	r1, r7, #4
 801b8c2:	f107 0308 	add.w	r3, r7, #8
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	f7fe fcc6 	bl	801a258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b8cc:	6839      	ldr	r1, [r7, #0]
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	68ba      	ldr	r2, [r7, #8]
 801b8d2:	9202      	str	r2, [sp, #8]
 801b8d4:	9301      	str	r3, [sp, #4]
 801b8d6:	2300      	movs	r3, #0
 801b8d8:	9300      	str	r3, [sp, #0]
 801b8da:	2300      	movs	r3, #0
 801b8dc:	460a      	mov	r2, r1
 801b8de:	4924      	ldr	r1, [pc, #144]	; (801b970 <vTaskStartScheduler+0xc0>)
 801b8e0:	4824      	ldr	r0, [pc, #144]	; (801b974 <vTaskStartScheduler+0xc4>)
 801b8e2:	f7ff fd21 	bl	801b328 <xTaskCreateStatic>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	4a23      	ldr	r2, [pc, #140]	; (801b978 <vTaskStartScheduler+0xc8>)
 801b8ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b8ec:	4b22      	ldr	r3, [pc, #136]	; (801b978 <vTaskStartScheduler+0xc8>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d002      	beq.n	801b8fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b8f4:	2301      	movs	r3, #1
 801b8f6:	617b      	str	r3, [r7, #20]
 801b8f8:	e001      	b.n	801b8fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b8fa:	2300      	movs	r3, #0
 801b8fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801b8fe:	697b      	ldr	r3, [r7, #20]
 801b900:	2b01      	cmp	r3, #1
 801b902:	d102      	bne.n	801b90a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801b904:	f000 fe1e 	bl	801c544 <xTimerCreateTimerTask>
 801b908:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b90a:	697b      	ldr	r3, [r7, #20]
 801b90c:	2b01      	cmp	r3, #1
 801b90e:	d11b      	bne.n	801b948 <vTaskStartScheduler+0x98>
	__asm volatile
 801b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b914:	f383 8811 	msr	BASEPRI, r3
 801b918:	f3bf 8f6f 	isb	sy
 801b91c:	f3bf 8f4f 	dsb	sy
 801b920:	613b      	str	r3, [r7, #16]
}
 801b922:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b924:	4b15      	ldr	r3, [pc, #84]	; (801b97c <vTaskStartScheduler+0xcc>)
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	3354      	adds	r3, #84	; 0x54
 801b92a:	4a15      	ldr	r2, [pc, #84]	; (801b980 <vTaskStartScheduler+0xd0>)
 801b92c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b92e:	4b15      	ldr	r3, [pc, #84]	; (801b984 <vTaskStartScheduler+0xd4>)
 801b930:	f04f 32ff 	mov.w	r2, #4294967295
 801b934:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b936:	4b14      	ldr	r3, [pc, #80]	; (801b988 <vTaskStartScheduler+0xd8>)
 801b938:	2201      	movs	r2, #1
 801b93a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b93c:	4b13      	ldr	r3, [pc, #76]	; (801b98c <vTaskStartScheduler+0xdc>)
 801b93e:	2200      	movs	r2, #0
 801b940:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b942:	f001 f9d5 	bl	801ccf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b946:	e00e      	b.n	801b966 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b948:	697b      	ldr	r3, [r7, #20]
 801b94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b94e:	d10a      	bne.n	801b966 <vTaskStartScheduler+0xb6>
	__asm volatile
 801b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b954:	f383 8811 	msr	BASEPRI, r3
 801b958:	f3bf 8f6f 	isb	sy
 801b95c:	f3bf 8f4f 	dsb	sy
 801b960:	60fb      	str	r3, [r7, #12]
}
 801b962:	bf00      	nop
 801b964:	e7fe      	b.n	801b964 <vTaskStartScheduler+0xb4>
}
 801b966:	bf00      	nop
 801b968:	3718      	adds	r7, #24
 801b96a:	46bd      	mov	sp, r7
 801b96c:	bd80      	pop	{r7, pc}
 801b96e:	bf00      	nop
 801b970:	0802344c 	.word	0x0802344c
 801b974:	0801bfb5 	.word	0x0801bfb5
 801b978:	20002a8c 	.word	0x20002a8c
 801b97c:	20002594 	.word	0x20002594
 801b980:	20000418 	.word	0x20000418
 801b984:	20002a88 	.word	0x20002a88
 801b988:	20002a74 	.word	0x20002a74
 801b98c:	20002a6c 	.word	0x20002a6c

0801b990 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b990:	b480      	push	{r7}
 801b992:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b994:	4b04      	ldr	r3, [pc, #16]	; (801b9a8 <vTaskSuspendAll+0x18>)
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	3301      	adds	r3, #1
 801b99a:	4a03      	ldr	r2, [pc, #12]	; (801b9a8 <vTaskSuspendAll+0x18>)
 801b99c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b99e:	bf00      	nop
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9a6:	4770      	bx	lr
 801b9a8:	20002a90 	.word	0x20002a90

0801b9ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b084      	sub	sp, #16
 801b9b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b9b2:	2300      	movs	r3, #0
 801b9b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b9ba:	4b42      	ldr	r3, [pc, #264]	; (801bac4 <xTaskResumeAll+0x118>)
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d10a      	bne.n	801b9d8 <xTaskResumeAll+0x2c>
	__asm volatile
 801b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9c6:	f383 8811 	msr	BASEPRI, r3
 801b9ca:	f3bf 8f6f 	isb	sy
 801b9ce:	f3bf 8f4f 	dsb	sy
 801b9d2:	603b      	str	r3, [r7, #0]
}
 801b9d4:	bf00      	nop
 801b9d6:	e7fe      	b.n	801b9d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b9d8:	f001 fa2c 	bl	801ce34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b9dc:	4b39      	ldr	r3, [pc, #228]	; (801bac4 <xTaskResumeAll+0x118>)
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	3b01      	subs	r3, #1
 801b9e2:	4a38      	ldr	r2, [pc, #224]	; (801bac4 <xTaskResumeAll+0x118>)
 801b9e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b9e6:	4b37      	ldr	r3, [pc, #220]	; (801bac4 <xTaskResumeAll+0x118>)
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d162      	bne.n	801bab4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b9ee:	4b36      	ldr	r3, [pc, #216]	; (801bac8 <xTaskResumeAll+0x11c>)
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d05e      	beq.n	801bab4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b9f6:	e02f      	b.n	801ba58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b9f8:	4b34      	ldr	r3, [pc, #208]	; (801bacc <xTaskResumeAll+0x120>)
 801b9fa:	68db      	ldr	r3, [r3, #12]
 801b9fc:	68db      	ldr	r3, [r3, #12]
 801b9fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	3318      	adds	r3, #24
 801ba04:	4618      	mov	r0, r3
 801ba06:	f7fe fce5 	bl	801a3d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	3304      	adds	r3, #4
 801ba0e:	4618      	mov	r0, r3
 801ba10:	f7fe fce0 	bl	801a3d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba18:	4b2d      	ldr	r3, [pc, #180]	; (801bad0 <xTaskResumeAll+0x124>)
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	429a      	cmp	r2, r3
 801ba1e:	d903      	bls.n	801ba28 <xTaskResumeAll+0x7c>
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba24:	4a2a      	ldr	r2, [pc, #168]	; (801bad0 <xTaskResumeAll+0x124>)
 801ba26:	6013      	str	r3, [r2, #0]
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba2c:	4613      	mov	r3, r2
 801ba2e:	009b      	lsls	r3, r3, #2
 801ba30:	4413      	add	r3, r2
 801ba32:	009b      	lsls	r3, r3, #2
 801ba34:	4a27      	ldr	r2, [pc, #156]	; (801bad4 <xTaskResumeAll+0x128>)
 801ba36:	441a      	add	r2, r3
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	3304      	adds	r3, #4
 801ba3c:	4619      	mov	r1, r3
 801ba3e:	4610      	mov	r0, r2
 801ba40:	f7fe fc6b 	bl	801a31a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba48:	4b23      	ldr	r3, [pc, #140]	; (801bad8 <xTaskResumeAll+0x12c>)
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba4e:	429a      	cmp	r2, r3
 801ba50:	d302      	bcc.n	801ba58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801ba52:	4b22      	ldr	r3, [pc, #136]	; (801badc <xTaskResumeAll+0x130>)
 801ba54:	2201      	movs	r2, #1
 801ba56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ba58:	4b1c      	ldr	r3, [pc, #112]	; (801bacc <xTaskResumeAll+0x120>)
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d1cb      	bne.n	801b9f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d001      	beq.n	801ba6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801ba66:	f000 fb5f 	bl	801c128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801ba6a:	4b1d      	ldr	r3, [pc, #116]	; (801bae0 <xTaskResumeAll+0x134>)
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d010      	beq.n	801ba98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801ba76:	f000 f847 	bl	801bb08 <xTaskIncrementTick>
 801ba7a:	4603      	mov	r3, r0
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d002      	beq.n	801ba86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801ba80:	4b16      	ldr	r3, [pc, #88]	; (801badc <xTaskResumeAll+0x130>)
 801ba82:	2201      	movs	r2, #1
 801ba84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	3b01      	subs	r3, #1
 801ba8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d1f1      	bne.n	801ba76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801ba92:	4b13      	ldr	r3, [pc, #76]	; (801bae0 <xTaskResumeAll+0x134>)
 801ba94:	2200      	movs	r2, #0
 801ba96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801ba98:	4b10      	ldr	r3, [pc, #64]	; (801badc <xTaskResumeAll+0x130>)
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d009      	beq.n	801bab4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801baa0:	2301      	movs	r3, #1
 801baa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801baa4:	4b0f      	ldr	r3, [pc, #60]	; (801bae4 <xTaskResumeAll+0x138>)
 801baa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801baaa:	601a      	str	r2, [r3, #0]
 801baac:	f3bf 8f4f 	dsb	sy
 801bab0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801bab4:	f001 f9ee 	bl	801ce94 <vPortExitCritical>

	return xAlreadyYielded;
 801bab8:	68bb      	ldr	r3, [r7, #8]
}
 801baba:	4618      	mov	r0, r3
 801babc:	3710      	adds	r7, #16
 801babe:	46bd      	mov	sp, r7
 801bac0:	bd80      	pop	{r7, pc}
 801bac2:	bf00      	nop
 801bac4:	20002a90 	.word	0x20002a90
 801bac8:	20002a68 	.word	0x20002a68
 801bacc:	20002a28 	.word	0x20002a28
 801bad0:	20002a70 	.word	0x20002a70
 801bad4:	20002598 	.word	0x20002598
 801bad8:	20002594 	.word	0x20002594
 801badc:	20002a7c 	.word	0x20002a7c
 801bae0:	20002a78 	.word	0x20002a78
 801bae4:	e000ed04 	.word	0xe000ed04

0801bae8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801bae8:	b480      	push	{r7}
 801baea:	b083      	sub	sp, #12
 801baec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801baee:	4b05      	ldr	r3, [pc, #20]	; (801bb04 <xTaskGetTickCount+0x1c>)
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801baf4:	687b      	ldr	r3, [r7, #4]
}
 801baf6:	4618      	mov	r0, r3
 801baf8:	370c      	adds	r7, #12
 801bafa:	46bd      	mov	sp, r7
 801bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb00:	4770      	bx	lr
 801bb02:	bf00      	nop
 801bb04:	20002a6c 	.word	0x20002a6c

0801bb08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801bb08:	b580      	push	{r7, lr}
 801bb0a:	b086      	sub	sp, #24
 801bb0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801bb0e:	2300      	movs	r3, #0
 801bb10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bb12:	4b4f      	ldr	r3, [pc, #316]	; (801bc50 <xTaskIncrementTick+0x148>)
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	f040 808f 	bne.w	801bc3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801bb1c:	4b4d      	ldr	r3, [pc, #308]	; (801bc54 <xTaskIncrementTick+0x14c>)
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	3301      	adds	r3, #1
 801bb22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801bb24:	4a4b      	ldr	r2, [pc, #300]	; (801bc54 <xTaskIncrementTick+0x14c>)
 801bb26:	693b      	ldr	r3, [r7, #16]
 801bb28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801bb2a:	693b      	ldr	r3, [r7, #16]
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d120      	bne.n	801bb72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801bb30:	4b49      	ldr	r3, [pc, #292]	; (801bc58 <xTaskIncrementTick+0x150>)
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d00a      	beq.n	801bb50 <xTaskIncrementTick+0x48>
	__asm volatile
 801bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb3e:	f383 8811 	msr	BASEPRI, r3
 801bb42:	f3bf 8f6f 	isb	sy
 801bb46:	f3bf 8f4f 	dsb	sy
 801bb4a:	603b      	str	r3, [r7, #0]
}
 801bb4c:	bf00      	nop
 801bb4e:	e7fe      	b.n	801bb4e <xTaskIncrementTick+0x46>
 801bb50:	4b41      	ldr	r3, [pc, #260]	; (801bc58 <xTaskIncrementTick+0x150>)
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	60fb      	str	r3, [r7, #12]
 801bb56:	4b41      	ldr	r3, [pc, #260]	; (801bc5c <xTaskIncrementTick+0x154>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	4a3f      	ldr	r2, [pc, #252]	; (801bc58 <xTaskIncrementTick+0x150>)
 801bb5c:	6013      	str	r3, [r2, #0]
 801bb5e:	4a3f      	ldr	r2, [pc, #252]	; (801bc5c <xTaskIncrementTick+0x154>)
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	6013      	str	r3, [r2, #0]
 801bb64:	4b3e      	ldr	r3, [pc, #248]	; (801bc60 <xTaskIncrementTick+0x158>)
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	3301      	adds	r3, #1
 801bb6a:	4a3d      	ldr	r2, [pc, #244]	; (801bc60 <xTaskIncrementTick+0x158>)
 801bb6c:	6013      	str	r3, [r2, #0]
 801bb6e:	f000 fadb 	bl	801c128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801bb72:	4b3c      	ldr	r3, [pc, #240]	; (801bc64 <xTaskIncrementTick+0x15c>)
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	693a      	ldr	r2, [r7, #16]
 801bb78:	429a      	cmp	r2, r3
 801bb7a:	d349      	bcc.n	801bc10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801bb7c:	4b36      	ldr	r3, [pc, #216]	; (801bc58 <xTaskIncrementTick+0x150>)
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d104      	bne.n	801bb90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bb86:	4b37      	ldr	r3, [pc, #220]	; (801bc64 <xTaskIncrementTick+0x15c>)
 801bb88:	f04f 32ff 	mov.w	r2, #4294967295
 801bb8c:	601a      	str	r2, [r3, #0]
					break;
 801bb8e:	e03f      	b.n	801bc10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bb90:	4b31      	ldr	r3, [pc, #196]	; (801bc58 <xTaskIncrementTick+0x150>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	68db      	ldr	r3, [r3, #12]
 801bb96:	68db      	ldr	r3, [r3, #12]
 801bb98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801bb9a:	68bb      	ldr	r3, [r7, #8]
 801bb9c:	685b      	ldr	r3, [r3, #4]
 801bb9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801bba0:	693a      	ldr	r2, [r7, #16]
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	429a      	cmp	r2, r3
 801bba6:	d203      	bcs.n	801bbb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801bba8:	4a2e      	ldr	r2, [pc, #184]	; (801bc64 <xTaskIncrementTick+0x15c>)
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801bbae:	e02f      	b.n	801bc10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bbb0:	68bb      	ldr	r3, [r7, #8]
 801bbb2:	3304      	adds	r3, #4
 801bbb4:	4618      	mov	r0, r3
 801bbb6:	f7fe fc0d 	bl	801a3d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801bbba:	68bb      	ldr	r3, [r7, #8]
 801bbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d004      	beq.n	801bbcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801bbc2:	68bb      	ldr	r3, [r7, #8]
 801bbc4:	3318      	adds	r3, #24
 801bbc6:	4618      	mov	r0, r3
 801bbc8:	f7fe fc04 	bl	801a3d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801bbcc:	68bb      	ldr	r3, [r7, #8]
 801bbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bbd0:	4b25      	ldr	r3, [pc, #148]	; (801bc68 <xTaskIncrementTick+0x160>)
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	429a      	cmp	r2, r3
 801bbd6:	d903      	bls.n	801bbe0 <xTaskIncrementTick+0xd8>
 801bbd8:	68bb      	ldr	r3, [r7, #8]
 801bbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bbdc:	4a22      	ldr	r2, [pc, #136]	; (801bc68 <xTaskIncrementTick+0x160>)
 801bbde:	6013      	str	r3, [r2, #0]
 801bbe0:	68bb      	ldr	r3, [r7, #8]
 801bbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bbe4:	4613      	mov	r3, r2
 801bbe6:	009b      	lsls	r3, r3, #2
 801bbe8:	4413      	add	r3, r2
 801bbea:	009b      	lsls	r3, r3, #2
 801bbec:	4a1f      	ldr	r2, [pc, #124]	; (801bc6c <xTaskIncrementTick+0x164>)
 801bbee:	441a      	add	r2, r3
 801bbf0:	68bb      	ldr	r3, [r7, #8]
 801bbf2:	3304      	adds	r3, #4
 801bbf4:	4619      	mov	r1, r3
 801bbf6:	4610      	mov	r0, r2
 801bbf8:	f7fe fb8f 	bl	801a31a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801bbfc:	68bb      	ldr	r3, [r7, #8]
 801bbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc00:	4b1b      	ldr	r3, [pc, #108]	; (801bc70 <xTaskIncrementTick+0x168>)
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc06:	429a      	cmp	r2, r3
 801bc08:	d3b8      	bcc.n	801bb7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801bc0a:	2301      	movs	r3, #1
 801bc0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801bc0e:	e7b5      	b.n	801bb7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801bc10:	4b17      	ldr	r3, [pc, #92]	; (801bc70 <xTaskIncrementTick+0x168>)
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc16:	4915      	ldr	r1, [pc, #84]	; (801bc6c <xTaskIncrementTick+0x164>)
 801bc18:	4613      	mov	r3, r2
 801bc1a:	009b      	lsls	r3, r3, #2
 801bc1c:	4413      	add	r3, r2
 801bc1e:	009b      	lsls	r3, r3, #2
 801bc20:	440b      	add	r3, r1
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	2b01      	cmp	r3, #1
 801bc26:	d901      	bls.n	801bc2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801bc28:	2301      	movs	r3, #1
 801bc2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801bc2c:	4b11      	ldr	r3, [pc, #68]	; (801bc74 <xTaskIncrementTick+0x16c>)
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d007      	beq.n	801bc44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801bc34:	2301      	movs	r3, #1
 801bc36:	617b      	str	r3, [r7, #20]
 801bc38:	e004      	b.n	801bc44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801bc3a:	4b0f      	ldr	r3, [pc, #60]	; (801bc78 <xTaskIncrementTick+0x170>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	3301      	adds	r3, #1
 801bc40:	4a0d      	ldr	r2, [pc, #52]	; (801bc78 <xTaskIncrementTick+0x170>)
 801bc42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801bc44:	697b      	ldr	r3, [r7, #20]
}
 801bc46:	4618      	mov	r0, r3
 801bc48:	3718      	adds	r7, #24
 801bc4a:	46bd      	mov	sp, r7
 801bc4c:	bd80      	pop	{r7, pc}
 801bc4e:	bf00      	nop
 801bc50:	20002a90 	.word	0x20002a90
 801bc54:	20002a6c 	.word	0x20002a6c
 801bc58:	20002a20 	.word	0x20002a20
 801bc5c:	20002a24 	.word	0x20002a24
 801bc60:	20002a80 	.word	0x20002a80
 801bc64:	20002a88 	.word	0x20002a88
 801bc68:	20002a70 	.word	0x20002a70
 801bc6c:	20002598 	.word	0x20002598
 801bc70:	20002594 	.word	0x20002594
 801bc74:	20002a7c 	.word	0x20002a7c
 801bc78:	20002a78 	.word	0x20002a78

0801bc7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801bc7c:	b480      	push	{r7}
 801bc7e:	b085      	sub	sp, #20
 801bc80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801bc82:	4b2a      	ldr	r3, [pc, #168]	; (801bd2c <vTaskSwitchContext+0xb0>)
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d003      	beq.n	801bc92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801bc8a:	4b29      	ldr	r3, [pc, #164]	; (801bd30 <vTaskSwitchContext+0xb4>)
 801bc8c:	2201      	movs	r2, #1
 801bc8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801bc90:	e046      	b.n	801bd20 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801bc92:	4b27      	ldr	r3, [pc, #156]	; (801bd30 <vTaskSwitchContext+0xb4>)
 801bc94:	2200      	movs	r2, #0
 801bc96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bc98:	4b26      	ldr	r3, [pc, #152]	; (801bd34 <vTaskSwitchContext+0xb8>)
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	60fb      	str	r3, [r7, #12]
 801bc9e:	e010      	b.n	801bcc2 <vTaskSwitchContext+0x46>
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d10a      	bne.n	801bcbc <vTaskSwitchContext+0x40>
	__asm volatile
 801bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcaa:	f383 8811 	msr	BASEPRI, r3
 801bcae:	f3bf 8f6f 	isb	sy
 801bcb2:	f3bf 8f4f 	dsb	sy
 801bcb6:	607b      	str	r3, [r7, #4]
}
 801bcb8:	bf00      	nop
 801bcba:	e7fe      	b.n	801bcba <vTaskSwitchContext+0x3e>
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	3b01      	subs	r3, #1
 801bcc0:	60fb      	str	r3, [r7, #12]
 801bcc2:	491d      	ldr	r1, [pc, #116]	; (801bd38 <vTaskSwitchContext+0xbc>)
 801bcc4:	68fa      	ldr	r2, [r7, #12]
 801bcc6:	4613      	mov	r3, r2
 801bcc8:	009b      	lsls	r3, r3, #2
 801bcca:	4413      	add	r3, r2
 801bccc:	009b      	lsls	r3, r3, #2
 801bcce:	440b      	add	r3, r1
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d0e4      	beq.n	801bca0 <vTaskSwitchContext+0x24>
 801bcd6:	68fa      	ldr	r2, [r7, #12]
 801bcd8:	4613      	mov	r3, r2
 801bcda:	009b      	lsls	r3, r3, #2
 801bcdc:	4413      	add	r3, r2
 801bcde:	009b      	lsls	r3, r3, #2
 801bce0:	4a15      	ldr	r2, [pc, #84]	; (801bd38 <vTaskSwitchContext+0xbc>)
 801bce2:	4413      	add	r3, r2
 801bce4:	60bb      	str	r3, [r7, #8]
 801bce6:	68bb      	ldr	r3, [r7, #8]
 801bce8:	685b      	ldr	r3, [r3, #4]
 801bcea:	685a      	ldr	r2, [r3, #4]
 801bcec:	68bb      	ldr	r3, [r7, #8]
 801bcee:	605a      	str	r2, [r3, #4]
 801bcf0:	68bb      	ldr	r3, [r7, #8]
 801bcf2:	685a      	ldr	r2, [r3, #4]
 801bcf4:	68bb      	ldr	r3, [r7, #8]
 801bcf6:	3308      	adds	r3, #8
 801bcf8:	429a      	cmp	r2, r3
 801bcfa:	d104      	bne.n	801bd06 <vTaskSwitchContext+0x8a>
 801bcfc:	68bb      	ldr	r3, [r7, #8]
 801bcfe:	685b      	ldr	r3, [r3, #4]
 801bd00:	685a      	ldr	r2, [r3, #4]
 801bd02:	68bb      	ldr	r3, [r7, #8]
 801bd04:	605a      	str	r2, [r3, #4]
 801bd06:	68bb      	ldr	r3, [r7, #8]
 801bd08:	685b      	ldr	r3, [r3, #4]
 801bd0a:	68db      	ldr	r3, [r3, #12]
 801bd0c:	4a0b      	ldr	r2, [pc, #44]	; (801bd3c <vTaskSwitchContext+0xc0>)
 801bd0e:	6013      	str	r3, [r2, #0]
 801bd10:	4a08      	ldr	r2, [pc, #32]	; (801bd34 <vTaskSwitchContext+0xb8>)
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801bd16:	4b09      	ldr	r3, [pc, #36]	; (801bd3c <vTaskSwitchContext+0xc0>)
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	3354      	adds	r3, #84	; 0x54
 801bd1c:	4a08      	ldr	r2, [pc, #32]	; (801bd40 <vTaskSwitchContext+0xc4>)
 801bd1e:	6013      	str	r3, [r2, #0]
}
 801bd20:	bf00      	nop
 801bd22:	3714      	adds	r7, #20
 801bd24:	46bd      	mov	sp, r7
 801bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd2a:	4770      	bx	lr
 801bd2c:	20002a90 	.word	0x20002a90
 801bd30:	20002a7c 	.word	0x20002a7c
 801bd34:	20002a70 	.word	0x20002a70
 801bd38:	20002598 	.word	0x20002598
 801bd3c:	20002594 	.word	0x20002594
 801bd40:	20000418 	.word	0x20000418

0801bd44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b084      	sub	sp, #16
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
 801bd4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d10a      	bne.n	801bd6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd58:	f383 8811 	msr	BASEPRI, r3
 801bd5c:	f3bf 8f6f 	isb	sy
 801bd60:	f3bf 8f4f 	dsb	sy
 801bd64:	60fb      	str	r3, [r7, #12]
}
 801bd66:	bf00      	nop
 801bd68:	e7fe      	b.n	801bd68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801bd6a:	4b07      	ldr	r3, [pc, #28]	; (801bd88 <vTaskPlaceOnEventList+0x44>)
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	3318      	adds	r3, #24
 801bd70:	4619      	mov	r1, r3
 801bd72:	6878      	ldr	r0, [r7, #4]
 801bd74:	f7fe faf5 	bl	801a362 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801bd78:	2101      	movs	r1, #1
 801bd7a:	6838      	ldr	r0, [r7, #0]
 801bd7c:	f000 fb8e 	bl	801c49c <prvAddCurrentTaskToDelayedList>
}
 801bd80:	bf00      	nop
 801bd82:	3710      	adds	r7, #16
 801bd84:	46bd      	mov	sp, r7
 801bd86:	bd80      	pop	{r7, pc}
 801bd88:	20002594 	.word	0x20002594

0801bd8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801bd8c:	b580      	push	{r7, lr}
 801bd8e:	b086      	sub	sp, #24
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	60f8      	str	r0, [r7, #12]
 801bd94:	60b9      	str	r1, [r7, #8]
 801bd96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d10a      	bne.n	801bdb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bda2:	f383 8811 	msr	BASEPRI, r3
 801bda6:	f3bf 8f6f 	isb	sy
 801bdaa:	f3bf 8f4f 	dsb	sy
 801bdae:	617b      	str	r3, [r7, #20]
}
 801bdb0:	bf00      	nop
 801bdb2:	e7fe      	b.n	801bdb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801bdb4:	4b0a      	ldr	r3, [pc, #40]	; (801bde0 <vTaskPlaceOnEventListRestricted+0x54>)
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	3318      	adds	r3, #24
 801bdba:	4619      	mov	r1, r3
 801bdbc:	68f8      	ldr	r0, [r7, #12]
 801bdbe:	f7fe faac 	bl	801a31a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d002      	beq.n	801bdce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801bdc8:	f04f 33ff 	mov.w	r3, #4294967295
 801bdcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801bdce:	6879      	ldr	r1, [r7, #4]
 801bdd0:	68b8      	ldr	r0, [r7, #8]
 801bdd2:	f000 fb63 	bl	801c49c <prvAddCurrentTaskToDelayedList>
	}
 801bdd6:	bf00      	nop
 801bdd8:	3718      	adds	r7, #24
 801bdda:	46bd      	mov	sp, r7
 801bddc:	bd80      	pop	{r7, pc}
 801bdde:	bf00      	nop
 801bde0:	20002594 	.word	0x20002594

0801bde4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b086      	sub	sp, #24
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	68db      	ldr	r3, [r3, #12]
 801bdf0:	68db      	ldr	r3, [r3, #12]
 801bdf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801bdf4:	693b      	ldr	r3, [r7, #16]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d10a      	bne.n	801be10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bdfe:	f383 8811 	msr	BASEPRI, r3
 801be02:	f3bf 8f6f 	isb	sy
 801be06:	f3bf 8f4f 	dsb	sy
 801be0a:	60fb      	str	r3, [r7, #12]
}
 801be0c:	bf00      	nop
 801be0e:	e7fe      	b.n	801be0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801be10:	693b      	ldr	r3, [r7, #16]
 801be12:	3318      	adds	r3, #24
 801be14:	4618      	mov	r0, r3
 801be16:	f7fe fadd 	bl	801a3d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801be1a:	4b1e      	ldr	r3, [pc, #120]	; (801be94 <xTaskRemoveFromEventList+0xb0>)
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d11d      	bne.n	801be5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801be22:	693b      	ldr	r3, [r7, #16]
 801be24:	3304      	adds	r3, #4
 801be26:	4618      	mov	r0, r3
 801be28:	f7fe fad4 	bl	801a3d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801be2c:	693b      	ldr	r3, [r7, #16]
 801be2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be30:	4b19      	ldr	r3, [pc, #100]	; (801be98 <xTaskRemoveFromEventList+0xb4>)
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	429a      	cmp	r2, r3
 801be36:	d903      	bls.n	801be40 <xTaskRemoveFromEventList+0x5c>
 801be38:	693b      	ldr	r3, [r7, #16]
 801be3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be3c:	4a16      	ldr	r2, [pc, #88]	; (801be98 <xTaskRemoveFromEventList+0xb4>)
 801be3e:	6013      	str	r3, [r2, #0]
 801be40:	693b      	ldr	r3, [r7, #16]
 801be42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be44:	4613      	mov	r3, r2
 801be46:	009b      	lsls	r3, r3, #2
 801be48:	4413      	add	r3, r2
 801be4a:	009b      	lsls	r3, r3, #2
 801be4c:	4a13      	ldr	r2, [pc, #76]	; (801be9c <xTaskRemoveFromEventList+0xb8>)
 801be4e:	441a      	add	r2, r3
 801be50:	693b      	ldr	r3, [r7, #16]
 801be52:	3304      	adds	r3, #4
 801be54:	4619      	mov	r1, r3
 801be56:	4610      	mov	r0, r2
 801be58:	f7fe fa5f 	bl	801a31a <vListInsertEnd>
 801be5c:	e005      	b.n	801be6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801be5e:	693b      	ldr	r3, [r7, #16]
 801be60:	3318      	adds	r3, #24
 801be62:	4619      	mov	r1, r3
 801be64:	480e      	ldr	r0, [pc, #56]	; (801bea0 <xTaskRemoveFromEventList+0xbc>)
 801be66:	f7fe fa58 	bl	801a31a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801be6a:	693b      	ldr	r3, [r7, #16]
 801be6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be6e:	4b0d      	ldr	r3, [pc, #52]	; (801bea4 <xTaskRemoveFromEventList+0xc0>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be74:	429a      	cmp	r2, r3
 801be76:	d905      	bls.n	801be84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801be78:	2301      	movs	r3, #1
 801be7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801be7c:	4b0a      	ldr	r3, [pc, #40]	; (801bea8 <xTaskRemoveFromEventList+0xc4>)
 801be7e:	2201      	movs	r2, #1
 801be80:	601a      	str	r2, [r3, #0]
 801be82:	e001      	b.n	801be88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801be84:	2300      	movs	r3, #0
 801be86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801be88:	697b      	ldr	r3, [r7, #20]
}
 801be8a:	4618      	mov	r0, r3
 801be8c:	3718      	adds	r7, #24
 801be8e:	46bd      	mov	sp, r7
 801be90:	bd80      	pop	{r7, pc}
 801be92:	bf00      	nop
 801be94:	20002a90 	.word	0x20002a90
 801be98:	20002a70 	.word	0x20002a70
 801be9c:	20002598 	.word	0x20002598
 801bea0:	20002a28 	.word	0x20002a28
 801bea4:	20002594 	.word	0x20002594
 801bea8:	20002a7c 	.word	0x20002a7c

0801beac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801beac:	b480      	push	{r7}
 801beae:	b083      	sub	sp, #12
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801beb4:	4b06      	ldr	r3, [pc, #24]	; (801bed0 <vTaskInternalSetTimeOutState+0x24>)
 801beb6:	681a      	ldr	r2, [r3, #0]
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801bebc:	4b05      	ldr	r3, [pc, #20]	; (801bed4 <vTaskInternalSetTimeOutState+0x28>)
 801bebe:	681a      	ldr	r2, [r3, #0]
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	605a      	str	r2, [r3, #4]
}
 801bec4:	bf00      	nop
 801bec6:	370c      	adds	r7, #12
 801bec8:	46bd      	mov	sp, r7
 801beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bece:	4770      	bx	lr
 801bed0:	20002a80 	.word	0x20002a80
 801bed4:	20002a6c 	.word	0x20002a6c

0801bed8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801bed8:	b580      	push	{r7, lr}
 801beda:	b088      	sub	sp, #32
 801bedc:	af00      	add	r7, sp, #0
 801bede:	6078      	str	r0, [r7, #4]
 801bee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d10a      	bne.n	801befe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801beec:	f383 8811 	msr	BASEPRI, r3
 801bef0:	f3bf 8f6f 	isb	sy
 801bef4:	f3bf 8f4f 	dsb	sy
 801bef8:	613b      	str	r3, [r7, #16]
}
 801befa:	bf00      	nop
 801befc:	e7fe      	b.n	801befc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d10a      	bne.n	801bf1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf08:	f383 8811 	msr	BASEPRI, r3
 801bf0c:	f3bf 8f6f 	isb	sy
 801bf10:	f3bf 8f4f 	dsb	sy
 801bf14:	60fb      	str	r3, [r7, #12]
}
 801bf16:	bf00      	nop
 801bf18:	e7fe      	b.n	801bf18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801bf1a:	f000 ff8b 	bl	801ce34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801bf1e:	4b1d      	ldr	r3, [pc, #116]	; (801bf94 <xTaskCheckForTimeOut+0xbc>)
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	685b      	ldr	r3, [r3, #4]
 801bf28:	69ba      	ldr	r2, [r7, #24]
 801bf2a:	1ad3      	subs	r3, r2, r3
 801bf2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801bf2e:	683b      	ldr	r3, [r7, #0]
 801bf30:	681b      	ldr	r3, [r3, #0]
 801bf32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf36:	d102      	bne.n	801bf3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801bf38:	2300      	movs	r3, #0
 801bf3a:	61fb      	str	r3, [r7, #28]
 801bf3c:	e023      	b.n	801bf86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	681a      	ldr	r2, [r3, #0]
 801bf42:	4b15      	ldr	r3, [pc, #84]	; (801bf98 <xTaskCheckForTimeOut+0xc0>)
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	429a      	cmp	r2, r3
 801bf48:	d007      	beq.n	801bf5a <xTaskCheckForTimeOut+0x82>
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	685b      	ldr	r3, [r3, #4]
 801bf4e:	69ba      	ldr	r2, [r7, #24]
 801bf50:	429a      	cmp	r2, r3
 801bf52:	d302      	bcc.n	801bf5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801bf54:	2301      	movs	r3, #1
 801bf56:	61fb      	str	r3, [r7, #28]
 801bf58:	e015      	b.n	801bf86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801bf5a:	683b      	ldr	r3, [r7, #0]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	697a      	ldr	r2, [r7, #20]
 801bf60:	429a      	cmp	r2, r3
 801bf62:	d20b      	bcs.n	801bf7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801bf64:	683b      	ldr	r3, [r7, #0]
 801bf66:	681a      	ldr	r2, [r3, #0]
 801bf68:	697b      	ldr	r3, [r7, #20]
 801bf6a:	1ad2      	subs	r2, r2, r3
 801bf6c:	683b      	ldr	r3, [r7, #0]
 801bf6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801bf70:	6878      	ldr	r0, [r7, #4]
 801bf72:	f7ff ff9b 	bl	801beac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801bf76:	2300      	movs	r3, #0
 801bf78:	61fb      	str	r3, [r7, #28]
 801bf7a:	e004      	b.n	801bf86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801bf7c:	683b      	ldr	r3, [r7, #0]
 801bf7e:	2200      	movs	r2, #0
 801bf80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801bf82:	2301      	movs	r3, #1
 801bf84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801bf86:	f000 ff85 	bl	801ce94 <vPortExitCritical>

	return xReturn;
 801bf8a:	69fb      	ldr	r3, [r7, #28]
}
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	3720      	adds	r7, #32
 801bf90:	46bd      	mov	sp, r7
 801bf92:	bd80      	pop	{r7, pc}
 801bf94:	20002a6c 	.word	0x20002a6c
 801bf98:	20002a80 	.word	0x20002a80

0801bf9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801bf9c:	b480      	push	{r7}
 801bf9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801bfa0:	4b03      	ldr	r3, [pc, #12]	; (801bfb0 <vTaskMissedYield+0x14>)
 801bfa2:	2201      	movs	r2, #1
 801bfa4:	601a      	str	r2, [r3, #0]
}
 801bfa6:	bf00      	nop
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfae:	4770      	bx	lr
 801bfb0:	20002a7c 	.word	0x20002a7c

0801bfb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b082      	sub	sp, #8
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801bfbc:	f000 f852 	bl	801c064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801bfc0:	4b06      	ldr	r3, [pc, #24]	; (801bfdc <prvIdleTask+0x28>)
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	2b01      	cmp	r3, #1
 801bfc6:	d9f9      	bls.n	801bfbc <prvIdleTask+0x8>
			{
				taskYIELD();
 801bfc8:	4b05      	ldr	r3, [pc, #20]	; (801bfe0 <prvIdleTask+0x2c>)
 801bfca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bfce:	601a      	str	r2, [r3, #0]
 801bfd0:	f3bf 8f4f 	dsb	sy
 801bfd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801bfd8:	e7f0      	b.n	801bfbc <prvIdleTask+0x8>
 801bfda:	bf00      	nop
 801bfdc:	20002598 	.word	0x20002598
 801bfe0:	e000ed04 	.word	0xe000ed04

0801bfe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801bfe4:	b580      	push	{r7, lr}
 801bfe6:	b082      	sub	sp, #8
 801bfe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801bfea:	2300      	movs	r3, #0
 801bfec:	607b      	str	r3, [r7, #4]
 801bfee:	e00c      	b.n	801c00a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801bff0:	687a      	ldr	r2, [r7, #4]
 801bff2:	4613      	mov	r3, r2
 801bff4:	009b      	lsls	r3, r3, #2
 801bff6:	4413      	add	r3, r2
 801bff8:	009b      	lsls	r3, r3, #2
 801bffa:	4a12      	ldr	r2, [pc, #72]	; (801c044 <prvInitialiseTaskLists+0x60>)
 801bffc:	4413      	add	r3, r2
 801bffe:	4618      	mov	r0, r3
 801c000:	f7fe f95e 	bl	801a2c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	3301      	adds	r3, #1
 801c008:	607b      	str	r3, [r7, #4]
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	2b37      	cmp	r3, #55	; 0x37
 801c00e:	d9ef      	bls.n	801bff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801c010:	480d      	ldr	r0, [pc, #52]	; (801c048 <prvInitialiseTaskLists+0x64>)
 801c012:	f7fe f955 	bl	801a2c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801c016:	480d      	ldr	r0, [pc, #52]	; (801c04c <prvInitialiseTaskLists+0x68>)
 801c018:	f7fe f952 	bl	801a2c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801c01c:	480c      	ldr	r0, [pc, #48]	; (801c050 <prvInitialiseTaskLists+0x6c>)
 801c01e:	f7fe f94f 	bl	801a2c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801c022:	480c      	ldr	r0, [pc, #48]	; (801c054 <prvInitialiseTaskLists+0x70>)
 801c024:	f7fe f94c 	bl	801a2c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801c028:	480b      	ldr	r0, [pc, #44]	; (801c058 <prvInitialiseTaskLists+0x74>)
 801c02a:	f7fe f949 	bl	801a2c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801c02e:	4b0b      	ldr	r3, [pc, #44]	; (801c05c <prvInitialiseTaskLists+0x78>)
 801c030:	4a05      	ldr	r2, [pc, #20]	; (801c048 <prvInitialiseTaskLists+0x64>)
 801c032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801c034:	4b0a      	ldr	r3, [pc, #40]	; (801c060 <prvInitialiseTaskLists+0x7c>)
 801c036:	4a05      	ldr	r2, [pc, #20]	; (801c04c <prvInitialiseTaskLists+0x68>)
 801c038:	601a      	str	r2, [r3, #0]
}
 801c03a:	bf00      	nop
 801c03c:	3708      	adds	r7, #8
 801c03e:	46bd      	mov	sp, r7
 801c040:	bd80      	pop	{r7, pc}
 801c042:	bf00      	nop
 801c044:	20002598 	.word	0x20002598
 801c048:	200029f8 	.word	0x200029f8
 801c04c:	20002a0c 	.word	0x20002a0c
 801c050:	20002a28 	.word	0x20002a28
 801c054:	20002a3c 	.word	0x20002a3c
 801c058:	20002a54 	.word	0x20002a54
 801c05c:	20002a20 	.word	0x20002a20
 801c060:	20002a24 	.word	0x20002a24

0801c064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b082      	sub	sp, #8
 801c068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801c06a:	e019      	b.n	801c0a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801c06c:	f000 fee2 	bl	801ce34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c070:	4b10      	ldr	r3, [pc, #64]	; (801c0b4 <prvCheckTasksWaitingTermination+0x50>)
 801c072:	68db      	ldr	r3, [r3, #12]
 801c074:	68db      	ldr	r3, [r3, #12]
 801c076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	3304      	adds	r3, #4
 801c07c:	4618      	mov	r0, r3
 801c07e:	f7fe f9a9 	bl	801a3d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801c082:	4b0d      	ldr	r3, [pc, #52]	; (801c0b8 <prvCheckTasksWaitingTermination+0x54>)
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	3b01      	subs	r3, #1
 801c088:	4a0b      	ldr	r2, [pc, #44]	; (801c0b8 <prvCheckTasksWaitingTermination+0x54>)
 801c08a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801c08c:	4b0b      	ldr	r3, [pc, #44]	; (801c0bc <prvCheckTasksWaitingTermination+0x58>)
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	3b01      	subs	r3, #1
 801c092:	4a0a      	ldr	r2, [pc, #40]	; (801c0bc <prvCheckTasksWaitingTermination+0x58>)
 801c094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801c096:	f000 fefd 	bl	801ce94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801c09a:	6878      	ldr	r0, [r7, #4]
 801c09c:	f000 f810 	bl	801c0c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801c0a0:	4b06      	ldr	r3, [pc, #24]	; (801c0bc <prvCheckTasksWaitingTermination+0x58>)
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d1e1      	bne.n	801c06c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801c0a8:	bf00      	nop
 801c0aa:	bf00      	nop
 801c0ac:	3708      	adds	r7, #8
 801c0ae:	46bd      	mov	sp, r7
 801c0b0:	bd80      	pop	{r7, pc}
 801c0b2:	bf00      	nop
 801c0b4:	20002a3c 	.word	0x20002a3c
 801c0b8:	20002a68 	.word	0x20002a68
 801c0bc:	20002a50 	.word	0x20002a50

0801c0c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b084      	sub	sp, #16
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	3354      	adds	r3, #84	; 0x54
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	f004 fc17 	bl	8020900 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d108      	bne.n	801c0ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	f001 f895 	bl	801d210 <vPortFree>
				vPortFree( pxTCB );
 801c0e6:	6878      	ldr	r0, [r7, #4]
 801c0e8:	f001 f892 	bl	801d210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801c0ec:	e018      	b.n	801c120 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801c0f4:	2b01      	cmp	r3, #1
 801c0f6:	d103      	bne.n	801c100 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801c0f8:	6878      	ldr	r0, [r7, #4]
 801c0fa:	f001 f889 	bl	801d210 <vPortFree>
	}
 801c0fe:	e00f      	b.n	801c120 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801c106:	2b02      	cmp	r3, #2
 801c108:	d00a      	beq.n	801c120 <prvDeleteTCB+0x60>
	__asm volatile
 801c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c10e:	f383 8811 	msr	BASEPRI, r3
 801c112:	f3bf 8f6f 	isb	sy
 801c116:	f3bf 8f4f 	dsb	sy
 801c11a:	60fb      	str	r3, [r7, #12]
}
 801c11c:	bf00      	nop
 801c11e:	e7fe      	b.n	801c11e <prvDeleteTCB+0x5e>
	}
 801c120:	bf00      	nop
 801c122:	3710      	adds	r7, #16
 801c124:	46bd      	mov	sp, r7
 801c126:	bd80      	pop	{r7, pc}

0801c128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801c128:	b480      	push	{r7}
 801c12a:	b083      	sub	sp, #12
 801c12c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801c12e:	4b0c      	ldr	r3, [pc, #48]	; (801c160 <prvResetNextTaskUnblockTime+0x38>)
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d104      	bne.n	801c142 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801c138:	4b0a      	ldr	r3, [pc, #40]	; (801c164 <prvResetNextTaskUnblockTime+0x3c>)
 801c13a:	f04f 32ff 	mov.w	r2, #4294967295
 801c13e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801c140:	e008      	b.n	801c154 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c142:	4b07      	ldr	r3, [pc, #28]	; (801c160 <prvResetNextTaskUnblockTime+0x38>)
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	68db      	ldr	r3, [r3, #12]
 801c148:	68db      	ldr	r3, [r3, #12]
 801c14a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	685b      	ldr	r3, [r3, #4]
 801c150:	4a04      	ldr	r2, [pc, #16]	; (801c164 <prvResetNextTaskUnblockTime+0x3c>)
 801c152:	6013      	str	r3, [r2, #0]
}
 801c154:	bf00      	nop
 801c156:	370c      	adds	r7, #12
 801c158:	46bd      	mov	sp, r7
 801c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c15e:	4770      	bx	lr
 801c160:	20002a20 	.word	0x20002a20
 801c164:	20002a88 	.word	0x20002a88

0801c168 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801c168:	b480      	push	{r7}
 801c16a:	b083      	sub	sp, #12
 801c16c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801c16e:	4b05      	ldr	r3, [pc, #20]	; (801c184 <xTaskGetCurrentTaskHandle+0x1c>)
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	607b      	str	r3, [r7, #4]

		return xReturn;
 801c174:	687b      	ldr	r3, [r7, #4]
	}
 801c176:	4618      	mov	r0, r3
 801c178:	370c      	adds	r7, #12
 801c17a:	46bd      	mov	sp, r7
 801c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c180:	4770      	bx	lr
 801c182:	bf00      	nop
 801c184:	20002594 	.word	0x20002594

0801c188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801c188:	b480      	push	{r7}
 801c18a:	b083      	sub	sp, #12
 801c18c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801c18e:	4b0b      	ldr	r3, [pc, #44]	; (801c1bc <xTaskGetSchedulerState+0x34>)
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d102      	bne.n	801c19c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801c196:	2301      	movs	r3, #1
 801c198:	607b      	str	r3, [r7, #4]
 801c19a:	e008      	b.n	801c1ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c19c:	4b08      	ldr	r3, [pc, #32]	; (801c1c0 <xTaskGetSchedulerState+0x38>)
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d102      	bne.n	801c1aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801c1a4:	2302      	movs	r3, #2
 801c1a6:	607b      	str	r3, [r7, #4]
 801c1a8:	e001      	b.n	801c1ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801c1aa:	2300      	movs	r3, #0
 801c1ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801c1ae:	687b      	ldr	r3, [r7, #4]
	}
 801c1b0:	4618      	mov	r0, r3
 801c1b2:	370c      	adds	r7, #12
 801c1b4:	46bd      	mov	sp, r7
 801c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ba:	4770      	bx	lr
 801c1bc:	20002a74 	.word	0x20002a74
 801c1c0:	20002a90 	.word	0x20002a90

0801c1c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b084      	sub	sp, #16
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801c1d0:	2300      	movs	r3, #0
 801c1d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d051      	beq.n	801c27e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801c1da:	68bb      	ldr	r3, [r7, #8]
 801c1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c1de:	4b2a      	ldr	r3, [pc, #168]	; (801c288 <xTaskPriorityInherit+0xc4>)
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1e4:	429a      	cmp	r2, r3
 801c1e6:	d241      	bcs.n	801c26c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	699b      	ldr	r3, [r3, #24]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	db06      	blt.n	801c1fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c1f0:	4b25      	ldr	r3, [pc, #148]	; (801c288 <xTaskPriorityInherit+0xc4>)
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801c1fa:	68bb      	ldr	r3, [r7, #8]
 801c1fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801c1fe:	68bb      	ldr	r3, [r7, #8]
 801c200:	6959      	ldr	r1, [r3, #20]
 801c202:	68bb      	ldr	r3, [r7, #8]
 801c204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c206:	4613      	mov	r3, r2
 801c208:	009b      	lsls	r3, r3, #2
 801c20a:	4413      	add	r3, r2
 801c20c:	009b      	lsls	r3, r3, #2
 801c20e:	4a1f      	ldr	r2, [pc, #124]	; (801c28c <xTaskPriorityInherit+0xc8>)
 801c210:	4413      	add	r3, r2
 801c212:	4299      	cmp	r1, r3
 801c214:	d122      	bne.n	801c25c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c216:	68bb      	ldr	r3, [r7, #8]
 801c218:	3304      	adds	r3, #4
 801c21a:	4618      	mov	r0, r3
 801c21c:	f7fe f8da 	bl	801a3d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801c220:	4b19      	ldr	r3, [pc, #100]	; (801c288 <xTaskPriorityInherit+0xc4>)
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c226:	68bb      	ldr	r3, [r7, #8]
 801c228:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801c22a:	68bb      	ldr	r3, [r7, #8]
 801c22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c22e:	4b18      	ldr	r3, [pc, #96]	; (801c290 <xTaskPriorityInherit+0xcc>)
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	429a      	cmp	r2, r3
 801c234:	d903      	bls.n	801c23e <xTaskPriorityInherit+0x7a>
 801c236:	68bb      	ldr	r3, [r7, #8]
 801c238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c23a:	4a15      	ldr	r2, [pc, #84]	; (801c290 <xTaskPriorityInherit+0xcc>)
 801c23c:	6013      	str	r3, [r2, #0]
 801c23e:	68bb      	ldr	r3, [r7, #8]
 801c240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c242:	4613      	mov	r3, r2
 801c244:	009b      	lsls	r3, r3, #2
 801c246:	4413      	add	r3, r2
 801c248:	009b      	lsls	r3, r3, #2
 801c24a:	4a10      	ldr	r2, [pc, #64]	; (801c28c <xTaskPriorityInherit+0xc8>)
 801c24c:	441a      	add	r2, r3
 801c24e:	68bb      	ldr	r3, [r7, #8]
 801c250:	3304      	adds	r3, #4
 801c252:	4619      	mov	r1, r3
 801c254:	4610      	mov	r0, r2
 801c256:	f7fe f860 	bl	801a31a <vListInsertEnd>
 801c25a:	e004      	b.n	801c266 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801c25c:	4b0a      	ldr	r3, [pc, #40]	; (801c288 <xTaskPriorityInherit+0xc4>)
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c262:	68bb      	ldr	r3, [r7, #8]
 801c264:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801c266:	2301      	movs	r3, #1
 801c268:	60fb      	str	r3, [r7, #12]
 801c26a:	e008      	b.n	801c27e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801c26c:	68bb      	ldr	r3, [r7, #8]
 801c26e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c270:	4b05      	ldr	r3, [pc, #20]	; (801c288 <xTaskPriorityInherit+0xc4>)
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c276:	429a      	cmp	r2, r3
 801c278:	d201      	bcs.n	801c27e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801c27a:	2301      	movs	r3, #1
 801c27c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801c27e:	68fb      	ldr	r3, [r7, #12]
	}
 801c280:	4618      	mov	r0, r3
 801c282:	3710      	adds	r7, #16
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}
 801c288:	20002594 	.word	0x20002594
 801c28c:	20002598 	.word	0x20002598
 801c290:	20002a70 	.word	0x20002a70

0801c294 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801c294:	b580      	push	{r7, lr}
 801c296:	b086      	sub	sp, #24
 801c298:	af00      	add	r7, sp, #0
 801c29a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d056      	beq.n	801c358 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801c2aa:	4b2e      	ldr	r3, [pc, #184]	; (801c364 <xTaskPriorityDisinherit+0xd0>)
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	693a      	ldr	r2, [r7, #16]
 801c2b0:	429a      	cmp	r2, r3
 801c2b2:	d00a      	beq.n	801c2ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801c2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2b8:	f383 8811 	msr	BASEPRI, r3
 801c2bc:	f3bf 8f6f 	isb	sy
 801c2c0:	f3bf 8f4f 	dsb	sy
 801c2c4:	60fb      	str	r3, [r7, #12]
}
 801c2c6:	bf00      	nop
 801c2c8:	e7fe      	b.n	801c2c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801c2ca:	693b      	ldr	r3, [r7, #16]
 801c2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d10a      	bne.n	801c2e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2d6:	f383 8811 	msr	BASEPRI, r3
 801c2da:	f3bf 8f6f 	isb	sy
 801c2de:	f3bf 8f4f 	dsb	sy
 801c2e2:	60bb      	str	r3, [r7, #8]
}
 801c2e4:	bf00      	nop
 801c2e6:	e7fe      	b.n	801c2e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801c2e8:	693b      	ldr	r3, [r7, #16]
 801c2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c2ec:	1e5a      	subs	r2, r3, #1
 801c2ee:	693b      	ldr	r3, [r7, #16]
 801c2f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801c2f2:	693b      	ldr	r3, [r7, #16]
 801c2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c2f6:	693b      	ldr	r3, [r7, #16]
 801c2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c2fa:	429a      	cmp	r2, r3
 801c2fc:	d02c      	beq.n	801c358 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801c2fe:	693b      	ldr	r3, [r7, #16]
 801c300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c302:	2b00      	cmp	r3, #0
 801c304:	d128      	bne.n	801c358 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c306:	693b      	ldr	r3, [r7, #16]
 801c308:	3304      	adds	r3, #4
 801c30a:	4618      	mov	r0, r3
 801c30c:	f7fe f862 	bl	801a3d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801c310:	693b      	ldr	r3, [r7, #16]
 801c312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c314:	693b      	ldr	r3, [r7, #16]
 801c316:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c318:	693b      	ldr	r3, [r7, #16]
 801c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c31c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801c320:	693b      	ldr	r3, [r7, #16]
 801c322:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801c324:	693b      	ldr	r3, [r7, #16]
 801c326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c328:	4b0f      	ldr	r3, [pc, #60]	; (801c368 <xTaskPriorityDisinherit+0xd4>)
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	429a      	cmp	r2, r3
 801c32e:	d903      	bls.n	801c338 <xTaskPriorityDisinherit+0xa4>
 801c330:	693b      	ldr	r3, [r7, #16]
 801c332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c334:	4a0c      	ldr	r2, [pc, #48]	; (801c368 <xTaskPriorityDisinherit+0xd4>)
 801c336:	6013      	str	r3, [r2, #0]
 801c338:	693b      	ldr	r3, [r7, #16]
 801c33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c33c:	4613      	mov	r3, r2
 801c33e:	009b      	lsls	r3, r3, #2
 801c340:	4413      	add	r3, r2
 801c342:	009b      	lsls	r3, r3, #2
 801c344:	4a09      	ldr	r2, [pc, #36]	; (801c36c <xTaskPriorityDisinherit+0xd8>)
 801c346:	441a      	add	r2, r3
 801c348:	693b      	ldr	r3, [r7, #16]
 801c34a:	3304      	adds	r3, #4
 801c34c:	4619      	mov	r1, r3
 801c34e:	4610      	mov	r0, r2
 801c350:	f7fd ffe3 	bl	801a31a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801c354:	2301      	movs	r3, #1
 801c356:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801c358:	697b      	ldr	r3, [r7, #20]
	}
 801c35a:	4618      	mov	r0, r3
 801c35c:	3718      	adds	r7, #24
 801c35e:	46bd      	mov	sp, r7
 801c360:	bd80      	pop	{r7, pc}
 801c362:	bf00      	nop
 801c364:	20002594 	.word	0x20002594
 801c368:	20002a70 	.word	0x20002a70
 801c36c:	20002598 	.word	0x20002598

0801c370 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801c370:	b580      	push	{r7, lr}
 801c372:	b088      	sub	sp, #32
 801c374:	af00      	add	r7, sp, #0
 801c376:	6078      	str	r0, [r7, #4]
 801c378:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801c37e:	2301      	movs	r3, #1
 801c380:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	2b00      	cmp	r3, #0
 801c386:	d06a      	beq.n	801c45e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801c388:	69bb      	ldr	r3, [r7, #24]
 801c38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d10a      	bne.n	801c3a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801c390:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c394:	f383 8811 	msr	BASEPRI, r3
 801c398:	f3bf 8f6f 	isb	sy
 801c39c:	f3bf 8f4f 	dsb	sy
 801c3a0:	60fb      	str	r3, [r7, #12]
}
 801c3a2:	bf00      	nop
 801c3a4:	e7fe      	b.n	801c3a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801c3a6:	69bb      	ldr	r3, [r7, #24]
 801c3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c3aa:	683a      	ldr	r2, [r7, #0]
 801c3ac:	429a      	cmp	r2, r3
 801c3ae:	d902      	bls.n	801c3b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801c3b0:	683b      	ldr	r3, [r7, #0]
 801c3b2:	61fb      	str	r3, [r7, #28]
 801c3b4:	e002      	b.n	801c3bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801c3b6:	69bb      	ldr	r3, [r7, #24]
 801c3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c3ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801c3bc:	69bb      	ldr	r3, [r7, #24]
 801c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3c0:	69fa      	ldr	r2, [r7, #28]
 801c3c2:	429a      	cmp	r2, r3
 801c3c4:	d04b      	beq.n	801c45e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801c3c6:	69bb      	ldr	r3, [r7, #24]
 801c3c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c3ca:	697a      	ldr	r2, [r7, #20]
 801c3cc:	429a      	cmp	r2, r3
 801c3ce:	d146      	bne.n	801c45e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801c3d0:	4b25      	ldr	r3, [pc, #148]	; (801c468 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	69ba      	ldr	r2, [r7, #24]
 801c3d6:	429a      	cmp	r2, r3
 801c3d8:	d10a      	bne.n	801c3f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3de:	f383 8811 	msr	BASEPRI, r3
 801c3e2:	f3bf 8f6f 	isb	sy
 801c3e6:	f3bf 8f4f 	dsb	sy
 801c3ea:	60bb      	str	r3, [r7, #8]
}
 801c3ec:	bf00      	nop
 801c3ee:	e7fe      	b.n	801c3ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801c3f0:	69bb      	ldr	r3, [r7, #24]
 801c3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801c3f6:	69bb      	ldr	r3, [r7, #24]
 801c3f8:	69fa      	ldr	r2, [r7, #28]
 801c3fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801c3fc:	69bb      	ldr	r3, [r7, #24]
 801c3fe:	699b      	ldr	r3, [r3, #24]
 801c400:	2b00      	cmp	r3, #0
 801c402:	db04      	blt.n	801c40e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c404:	69fb      	ldr	r3, [r7, #28]
 801c406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801c40a:	69bb      	ldr	r3, [r7, #24]
 801c40c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801c40e:	69bb      	ldr	r3, [r7, #24]
 801c410:	6959      	ldr	r1, [r3, #20]
 801c412:	693a      	ldr	r2, [r7, #16]
 801c414:	4613      	mov	r3, r2
 801c416:	009b      	lsls	r3, r3, #2
 801c418:	4413      	add	r3, r2
 801c41a:	009b      	lsls	r3, r3, #2
 801c41c:	4a13      	ldr	r2, [pc, #76]	; (801c46c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801c41e:	4413      	add	r3, r2
 801c420:	4299      	cmp	r1, r3
 801c422:	d11c      	bne.n	801c45e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c424:	69bb      	ldr	r3, [r7, #24]
 801c426:	3304      	adds	r3, #4
 801c428:	4618      	mov	r0, r3
 801c42a:	f7fd ffd3 	bl	801a3d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801c42e:	69bb      	ldr	r3, [r7, #24]
 801c430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c432:	4b0f      	ldr	r3, [pc, #60]	; (801c470 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	429a      	cmp	r2, r3
 801c438:	d903      	bls.n	801c442 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801c43a:	69bb      	ldr	r3, [r7, #24]
 801c43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c43e:	4a0c      	ldr	r2, [pc, #48]	; (801c470 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801c440:	6013      	str	r3, [r2, #0]
 801c442:	69bb      	ldr	r3, [r7, #24]
 801c444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c446:	4613      	mov	r3, r2
 801c448:	009b      	lsls	r3, r3, #2
 801c44a:	4413      	add	r3, r2
 801c44c:	009b      	lsls	r3, r3, #2
 801c44e:	4a07      	ldr	r2, [pc, #28]	; (801c46c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801c450:	441a      	add	r2, r3
 801c452:	69bb      	ldr	r3, [r7, #24]
 801c454:	3304      	adds	r3, #4
 801c456:	4619      	mov	r1, r3
 801c458:	4610      	mov	r0, r2
 801c45a:	f7fd ff5e 	bl	801a31a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801c45e:	bf00      	nop
 801c460:	3720      	adds	r7, #32
 801c462:	46bd      	mov	sp, r7
 801c464:	bd80      	pop	{r7, pc}
 801c466:	bf00      	nop
 801c468:	20002594 	.word	0x20002594
 801c46c:	20002598 	.word	0x20002598
 801c470:	20002a70 	.word	0x20002a70

0801c474 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801c474:	b480      	push	{r7}
 801c476:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801c478:	4b07      	ldr	r3, [pc, #28]	; (801c498 <pvTaskIncrementMutexHeldCount+0x24>)
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d004      	beq.n	801c48a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801c480:	4b05      	ldr	r3, [pc, #20]	; (801c498 <pvTaskIncrementMutexHeldCount+0x24>)
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c486:	3201      	adds	r2, #1
 801c488:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801c48a:	4b03      	ldr	r3, [pc, #12]	; (801c498 <pvTaskIncrementMutexHeldCount+0x24>)
 801c48c:	681b      	ldr	r3, [r3, #0]
	}
 801c48e:	4618      	mov	r0, r3
 801c490:	46bd      	mov	sp, r7
 801c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c496:	4770      	bx	lr
 801c498:	20002594 	.word	0x20002594

0801c49c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801c49c:	b580      	push	{r7, lr}
 801c49e:	b084      	sub	sp, #16
 801c4a0:	af00      	add	r7, sp, #0
 801c4a2:	6078      	str	r0, [r7, #4]
 801c4a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801c4a6:	4b21      	ldr	r3, [pc, #132]	; (801c52c <prvAddCurrentTaskToDelayedList+0x90>)
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c4ac:	4b20      	ldr	r3, [pc, #128]	; (801c530 <prvAddCurrentTaskToDelayedList+0x94>)
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	3304      	adds	r3, #4
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	f7fd ff8e 	bl	801a3d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4be:	d10a      	bne.n	801c4d6 <prvAddCurrentTaskToDelayedList+0x3a>
 801c4c0:	683b      	ldr	r3, [r7, #0]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d007      	beq.n	801c4d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c4c6:	4b1a      	ldr	r3, [pc, #104]	; (801c530 <prvAddCurrentTaskToDelayedList+0x94>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	3304      	adds	r3, #4
 801c4cc:	4619      	mov	r1, r3
 801c4ce:	4819      	ldr	r0, [pc, #100]	; (801c534 <prvAddCurrentTaskToDelayedList+0x98>)
 801c4d0:	f7fd ff23 	bl	801a31a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801c4d4:	e026      	b.n	801c524 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801c4d6:	68fa      	ldr	r2, [r7, #12]
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	4413      	add	r3, r2
 801c4dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801c4de:	4b14      	ldr	r3, [pc, #80]	; (801c530 <prvAddCurrentTaskToDelayedList+0x94>)
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	68ba      	ldr	r2, [r7, #8]
 801c4e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801c4e6:	68ba      	ldr	r2, [r7, #8]
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	429a      	cmp	r2, r3
 801c4ec:	d209      	bcs.n	801c502 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c4ee:	4b12      	ldr	r3, [pc, #72]	; (801c538 <prvAddCurrentTaskToDelayedList+0x9c>)
 801c4f0:	681a      	ldr	r2, [r3, #0]
 801c4f2:	4b0f      	ldr	r3, [pc, #60]	; (801c530 <prvAddCurrentTaskToDelayedList+0x94>)
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	3304      	adds	r3, #4
 801c4f8:	4619      	mov	r1, r3
 801c4fa:	4610      	mov	r0, r2
 801c4fc:	f7fd ff31 	bl	801a362 <vListInsert>
}
 801c500:	e010      	b.n	801c524 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c502:	4b0e      	ldr	r3, [pc, #56]	; (801c53c <prvAddCurrentTaskToDelayedList+0xa0>)
 801c504:	681a      	ldr	r2, [r3, #0]
 801c506:	4b0a      	ldr	r3, [pc, #40]	; (801c530 <prvAddCurrentTaskToDelayedList+0x94>)
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	3304      	adds	r3, #4
 801c50c:	4619      	mov	r1, r3
 801c50e:	4610      	mov	r0, r2
 801c510:	f7fd ff27 	bl	801a362 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801c514:	4b0a      	ldr	r3, [pc, #40]	; (801c540 <prvAddCurrentTaskToDelayedList+0xa4>)
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	68ba      	ldr	r2, [r7, #8]
 801c51a:	429a      	cmp	r2, r3
 801c51c:	d202      	bcs.n	801c524 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801c51e:	4a08      	ldr	r2, [pc, #32]	; (801c540 <prvAddCurrentTaskToDelayedList+0xa4>)
 801c520:	68bb      	ldr	r3, [r7, #8]
 801c522:	6013      	str	r3, [r2, #0]
}
 801c524:	bf00      	nop
 801c526:	3710      	adds	r7, #16
 801c528:	46bd      	mov	sp, r7
 801c52a:	bd80      	pop	{r7, pc}
 801c52c:	20002a6c 	.word	0x20002a6c
 801c530:	20002594 	.word	0x20002594
 801c534:	20002a54 	.word	0x20002a54
 801c538:	20002a24 	.word	0x20002a24
 801c53c:	20002a20 	.word	0x20002a20
 801c540:	20002a88 	.word	0x20002a88

0801c544 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801c544:	b580      	push	{r7, lr}
 801c546:	b08a      	sub	sp, #40	; 0x28
 801c548:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801c54a:	2300      	movs	r3, #0
 801c54c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801c54e:	f000 fb07 	bl	801cb60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801c552:	4b1c      	ldr	r3, [pc, #112]	; (801c5c4 <xTimerCreateTimerTask+0x80>)
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d021      	beq.n	801c59e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801c55a:	2300      	movs	r3, #0
 801c55c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801c55e:	2300      	movs	r3, #0
 801c560:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801c562:	1d3a      	adds	r2, r7, #4
 801c564:	f107 0108 	add.w	r1, r7, #8
 801c568:	f107 030c 	add.w	r3, r7, #12
 801c56c:	4618      	mov	r0, r3
 801c56e:	f7fd fe8d 	bl	801a28c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801c572:	6879      	ldr	r1, [r7, #4]
 801c574:	68bb      	ldr	r3, [r7, #8]
 801c576:	68fa      	ldr	r2, [r7, #12]
 801c578:	9202      	str	r2, [sp, #8]
 801c57a:	9301      	str	r3, [sp, #4]
 801c57c:	2302      	movs	r3, #2
 801c57e:	9300      	str	r3, [sp, #0]
 801c580:	2300      	movs	r3, #0
 801c582:	460a      	mov	r2, r1
 801c584:	4910      	ldr	r1, [pc, #64]	; (801c5c8 <xTimerCreateTimerTask+0x84>)
 801c586:	4811      	ldr	r0, [pc, #68]	; (801c5cc <xTimerCreateTimerTask+0x88>)
 801c588:	f7fe fece 	bl	801b328 <xTaskCreateStatic>
 801c58c:	4603      	mov	r3, r0
 801c58e:	4a10      	ldr	r2, [pc, #64]	; (801c5d0 <xTimerCreateTimerTask+0x8c>)
 801c590:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801c592:	4b0f      	ldr	r3, [pc, #60]	; (801c5d0 <xTimerCreateTimerTask+0x8c>)
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d001      	beq.n	801c59e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801c59a:	2301      	movs	r3, #1
 801c59c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801c59e:	697b      	ldr	r3, [r7, #20]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d10a      	bne.n	801c5ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 801c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5a8:	f383 8811 	msr	BASEPRI, r3
 801c5ac:	f3bf 8f6f 	isb	sy
 801c5b0:	f3bf 8f4f 	dsb	sy
 801c5b4:	613b      	str	r3, [r7, #16]
}
 801c5b6:	bf00      	nop
 801c5b8:	e7fe      	b.n	801c5b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801c5ba:	697b      	ldr	r3, [r7, #20]
}
 801c5bc:	4618      	mov	r0, r3
 801c5be:	3718      	adds	r7, #24
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}
 801c5c4:	20002ac4 	.word	0x20002ac4
 801c5c8:	08023454 	.word	0x08023454
 801c5cc:	0801c709 	.word	0x0801c709
 801c5d0:	20002ac8 	.word	0x20002ac8

0801c5d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b08a      	sub	sp, #40	; 0x28
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	60f8      	str	r0, [r7, #12]
 801c5dc:	60b9      	str	r1, [r7, #8]
 801c5de:	607a      	str	r2, [r7, #4]
 801c5e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801c5e2:	2300      	movs	r3, #0
 801c5e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d10a      	bne.n	801c602 <xTimerGenericCommand+0x2e>
	__asm volatile
 801c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5f0:	f383 8811 	msr	BASEPRI, r3
 801c5f4:	f3bf 8f6f 	isb	sy
 801c5f8:	f3bf 8f4f 	dsb	sy
 801c5fc:	623b      	str	r3, [r7, #32]
}
 801c5fe:	bf00      	nop
 801c600:	e7fe      	b.n	801c600 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801c602:	4b1a      	ldr	r3, [pc, #104]	; (801c66c <xTimerGenericCommand+0x98>)
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d02a      	beq.n	801c660 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801c60a:	68bb      	ldr	r3, [r7, #8]
 801c60c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801c616:	68bb      	ldr	r3, [r7, #8]
 801c618:	2b05      	cmp	r3, #5
 801c61a:	dc18      	bgt.n	801c64e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801c61c:	f7ff fdb4 	bl	801c188 <xTaskGetSchedulerState>
 801c620:	4603      	mov	r3, r0
 801c622:	2b02      	cmp	r3, #2
 801c624:	d109      	bne.n	801c63a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801c626:	4b11      	ldr	r3, [pc, #68]	; (801c66c <xTimerGenericCommand+0x98>)
 801c628:	6818      	ldr	r0, [r3, #0]
 801c62a:	f107 0110 	add.w	r1, r7, #16
 801c62e:	2300      	movs	r3, #0
 801c630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c632:	f7fe f8ed 	bl	801a810 <xQueueGenericSend>
 801c636:	6278      	str	r0, [r7, #36]	; 0x24
 801c638:	e012      	b.n	801c660 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801c63a:	4b0c      	ldr	r3, [pc, #48]	; (801c66c <xTimerGenericCommand+0x98>)
 801c63c:	6818      	ldr	r0, [r3, #0]
 801c63e:	f107 0110 	add.w	r1, r7, #16
 801c642:	2300      	movs	r3, #0
 801c644:	2200      	movs	r2, #0
 801c646:	f7fe f8e3 	bl	801a810 <xQueueGenericSend>
 801c64a:	6278      	str	r0, [r7, #36]	; 0x24
 801c64c:	e008      	b.n	801c660 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c64e:	4b07      	ldr	r3, [pc, #28]	; (801c66c <xTimerGenericCommand+0x98>)
 801c650:	6818      	ldr	r0, [r3, #0]
 801c652:	f107 0110 	add.w	r1, r7, #16
 801c656:	2300      	movs	r3, #0
 801c658:	683a      	ldr	r2, [r7, #0]
 801c65a:	f7fe f9d7 	bl	801aa0c <xQueueGenericSendFromISR>
 801c65e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c662:	4618      	mov	r0, r3
 801c664:	3728      	adds	r7, #40	; 0x28
 801c666:	46bd      	mov	sp, r7
 801c668:	bd80      	pop	{r7, pc}
 801c66a:	bf00      	nop
 801c66c:	20002ac4 	.word	0x20002ac4

0801c670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801c670:	b580      	push	{r7, lr}
 801c672:	b088      	sub	sp, #32
 801c674:	af02      	add	r7, sp, #8
 801c676:	6078      	str	r0, [r7, #4]
 801c678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c67a:	4b22      	ldr	r3, [pc, #136]	; (801c704 <prvProcessExpiredTimer+0x94>)
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	68db      	ldr	r3, [r3, #12]
 801c680:	68db      	ldr	r3, [r3, #12]
 801c682:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c684:	697b      	ldr	r3, [r7, #20]
 801c686:	3304      	adds	r3, #4
 801c688:	4618      	mov	r0, r3
 801c68a:	f7fd fea3 	bl	801a3d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c68e:	697b      	ldr	r3, [r7, #20]
 801c690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c694:	f003 0304 	and.w	r3, r3, #4
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d022      	beq.n	801c6e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801c69c:	697b      	ldr	r3, [r7, #20]
 801c69e:	699a      	ldr	r2, [r3, #24]
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	18d1      	adds	r1, r2, r3
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	683a      	ldr	r2, [r7, #0]
 801c6a8:	6978      	ldr	r0, [r7, #20]
 801c6aa:	f000 f8d1 	bl	801c850 <prvInsertTimerInActiveList>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d01f      	beq.n	801c6f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c6b4:	2300      	movs	r3, #0
 801c6b6:	9300      	str	r3, [sp, #0]
 801c6b8:	2300      	movs	r3, #0
 801c6ba:	687a      	ldr	r2, [r7, #4]
 801c6bc:	2100      	movs	r1, #0
 801c6be:	6978      	ldr	r0, [r7, #20]
 801c6c0:	f7ff ff88 	bl	801c5d4 <xTimerGenericCommand>
 801c6c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801c6c6:	693b      	ldr	r3, [r7, #16]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d113      	bne.n	801c6f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801c6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6d0:	f383 8811 	msr	BASEPRI, r3
 801c6d4:	f3bf 8f6f 	isb	sy
 801c6d8:	f3bf 8f4f 	dsb	sy
 801c6dc:	60fb      	str	r3, [r7, #12]
}
 801c6de:	bf00      	nop
 801c6e0:	e7fe      	b.n	801c6e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c6e2:	697b      	ldr	r3, [r7, #20]
 801c6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c6e8:	f023 0301 	bic.w	r3, r3, #1
 801c6ec:	b2da      	uxtb	r2, r3
 801c6ee:	697b      	ldr	r3, [r7, #20]
 801c6f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c6f4:	697b      	ldr	r3, [r7, #20]
 801c6f6:	6a1b      	ldr	r3, [r3, #32]
 801c6f8:	6978      	ldr	r0, [r7, #20]
 801c6fa:	4798      	blx	r3
}
 801c6fc:	bf00      	nop
 801c6fe:	3718      	adds	r7, #24
 801c700:	46bd      	mov	sp, r7
 801c702:	bd80      	pop	{r7, pc}
 801c704:	20002abc 	.word	0x20002abc

0801c708 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801c708:	b580      	push	{r7, lr}
 801c70a:	b084      	sub	sp, #16
 801c70c:	af00      	add	r7, sp, #0
 801c70e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c710:	f107 0308 	add.w	r3, r7, #8
 801c714:	4618      	mov	r0, r3
 801c716:	f000 f857 	bl	801c7c8 <prvGetNextExpireTime>
 801c71a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801c71c:	68bb      	ldr	r3, [r7, #8]
 801c71e:	4619      	mov	r1, r3
 801c720:	68f8      	ldr	r0, [r7, #12]
 801c722:	f000 f803 	bl	801c72c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801c726:	f000 f8d5 	bl	801c8d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c72a:	e7f1      	b.n	801c710 <prvTimerTask+0x8>

0801c72c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801c72c:	b580      	push	{r7, lr}
 801c72e:	b084      	sub	sp, #16
 801c730:	af00      	add	r7, sp, #0
 801c732:	6078      	str	r0, [r7, #4]
 801c734:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801c736:	f7ff f92b 	bl	801b990 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c73a:	f107 0308 	add.w	r3, r7, #8
 801c73e:	4618      	mov	r0, r3
 801c740:	f000 f866 	bl	801c810 <prvSampleTimeNow>
 801c744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801c746:	68bb      	ldr	r3, [r7, #8]
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d130      	bne.n	801c7ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801c74c:	683b      	ldr	r3, [r7, #0]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d10a      	bne.n	801c768 <prvProcessTimerOrBlockTask+0x3c>
 801c752:	687a      	ldr	r2, [r7, #4]
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	429a      	cmp	r2, r3
 801c758:	d806      	bhi.n	801c768 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801c75a:	f7ff f927 	bl	801b9ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801c75e:	68f9      	ldr	r1, [r7, #12]
 801c760:	6878      	ldr	r0, [r7, #4]
 801c762:	f7ff ff85 	bl	801c670 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801c766:	e024      	b.n	801c7b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801c768:	683b      	ldr	r3, [r7, #0]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d008      	beq.n	801c780 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801c76e:	4b13      	ldr	r3, [pc, #76]	; (801c7bc <prvProcessTimerOrBlockTask+0x90>)
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	2b00      	cmp	r3, #0
 801c776:	d101      	bne.n	801c77c <prvProcessTimerOrBlockTask+0x50>
 801c778:	2301      	movs	r3, #1
 801c77a:	e000      	b.n	801c77e <prvProcessTimerOrBlockTask+0x52>
 801c77c:	2300      	movs	r3, #0
 801c77e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801c780:	4b0f      	ldr	r3, [pc, #60]	; (801c7c0 <prvProcessTimerOrBlockTask+0x94>)
 801c782:	6818      	ldr	r0, [r3, #0]
 801c784:	687a      	ldr	r2, [r7, #4]
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	1ad3      	subs	r3, r2, r3
 801c78a:	683a      	ldr	r2, [r7, #0]
 801c78c:	4619      	mov	r1, r3
 801c78e:	f7fe fd97 	bl	801b2c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801c792:	f7ff f90b 	bl	801b9ac <xTaskResumeAll>
 801c796:	4603      	mov	r3, r0
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d10a      	bne.n	801c7b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801c79c:	4b09      	ldr	r3, [pc, #36]	; (801c7c4 <prvProcessTimerOrBlockTask+0x98>)
 801c79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c7a2:	601a      	str	r2, [r3, #0]
 801c7a4:	f3bf 8f4f 	dsb	sy
 801c7a8:	f3bf 8f6f 	isb	sy
}
 801c7ac:	e001      	b.n	801c7b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801c7ae:	f7ff f8fd 	bl	801b9ac <xTaskResumeAll>
}
 801c7b2:	bf00      	nop
 801c7b4:	3710      	adds	r7, #16
 801c7b6:	46bd      	mov	sp, r7
 801c7b8:	bd80      	pop	{r7, pc}
 801c7ba:	bf00      	nop
 801c7bc:	20002ac0 	.word	0x20002ac0
 801c7c0:	20002ac4 	.word	0x20002ac4
 801c7c4:	e000ed04 	.word	0xe000ed04

0801c7c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801c7c8:	b480      	push	{r7}
 801c7ca:	b085      	sub	sp, #20
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801c7d0:	4b0e      	ldr	r3, [pc, #56]	; (801c80c <prvGetNextExpireTime+0x44>)
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d101      	bne.n	801c7de <prvGetNextExpireTime+0x16>
 801c7da:	2201      	movs	r2, #1
 801c7dc:	e000      	b.n	801c7e0 <prvGetNextExpireTime+0x18>
 801c7de:	2200      	movs	r2, #0
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d105      	bne.n	801c7f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c7ec:	4b07      	ldr	r3, [pc, #28]	; (801c80c <prvGetNextExpireTime+0x44>)
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	68db      	ldr	r3, [r3, #12]
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	60fb      	str	r3, [r7, #12]
 801c7f6:	e001      	b.n	801c7fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801c7f8:	2300      	movs	r3, #0
 801c7fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801c7fc:	68fb      	ldr	r3, [r7, #12]
}
 801c7fe:	4618      	mov	r0, r3
 801c800:	3714      	adds	r7, #20
 801c802:	46bd      	mov	sp, r7
 801c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c808:	4770      	bx	lr
 801c80a:	bf00      	nop
 801c80c:	20002abc 	.word	0x20002abc

0801c810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801c810:	b580      	push	{r7, lr}
 801c812:	b084      	sub	sp, #16
 801c814:	af00      	add	r7, sp, #0
 801c816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801c818:	f7ff f966 	bl	801bae8 <xTaskGetTickCount>
 801c81c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801c81e:	4b0b      	ldr	r3, [pc, #44]	; (801c84c <prvSampleTimeNow+0x3c>)
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	68fa      	ldr	r2, [r7, #12]
 801c824:	429a      	cmp	r2, r3
 801c826:	d205      	bcs.n	801c834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801c828:	f000 f936 	bl	801ca98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	2201      	movs	r2, #1
 801c830:	601a      	str	r2, [r3, #0]
 801c832:	e002      	b.n	801c83a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	2200      	movs	r2, #0
 801c838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801c83a:	4a04      	ldr	r2, [pc, #16]	; (801c84c <prvSampleTimeNow+0x3c>)
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801c840:	68fb      	ldr	r3, [r7, #12]
}
 801c842:	4618      	mov	r0, r3
 801c844:	3710      	adds	r7, #16
 801c846:	46bd      	mov	sp, r7
 801c848:	bd80      	pop	{r7, pc}
 801c84a:	bf00      	nop
 801c84c:	20002acc 	.word	0x20002acc

0801c850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b086      	sub	sp, #24
 801c854:	af00      	add	r7, sp, #0
 801c856:	60f8      	str	r0, [r7, #12]
 801c858:	60b9      	str	r1, [r7, #8]
 801c85a:	607a      	str	r2, [r7, #4]
 801c85c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801c85e:	2300      	movs	r3, #0
 801c860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	68ba      	ldr	r2, [r7, #8]
 801c866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	68fa      	ldr	r2, [r7, #12]
 801c86c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801c86e:	68ba      	ldr	r2, [r7, #8]
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	429a      	cmp	r2, r3
 801c874:	d812      	bhi.n	801c89c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c876:	687a      	ldr	r2, [r7, #4]
 801c878:	683b      	ldr	r3, [r7, #0]
 801c87a:	1ad2      	subs	r2, r2, r3
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	699b      	ldr	r3, [r3, #24]
 801c880:	429a      	cmp	r2, r3
 801c882:	d302      	bcc.n	801c88a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801c884:	2301      	movs	r3, #1
 801c886:	617b      	str	r3, [r7, #20]
 801c888:	e01b      	b.n	801c8c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c88a:	4b10      	ldr	r3, [pc, #64]	; (801c8cc <prvInsertTimerInActiveList+0x7c>)
 801c88c:	681a      	ldr	r2, [r3, #0]
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	3304      	adds	r3, #4
 801c892:	4619      	mov	r1, r3
 801c894:	4610      	mov	r0, r2
 801c896:	f7fd fd64 	bl	801a362 <vListInsert>
 801c89a:	e012      	b.n	801c8c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c89c:	687a      	ldr	r2, [r7, #4]
 801c89e:	683b      	ldr	r3, [r7, #0]
 801c8a0:	429a      	cmp	r2, r3
 801c8a2:	d206      	bcs.n	801c8b2 <prvInsertTimerInActiveList+0x62>
 801c8a4:	68ba      	ldr	r2, [r7, #8]
 801c8a6:	683b      	ldr	r3, [r7, #0]
 801c8a8:	429a      	cmp	r2, r3
 801c8aa:	d302      	bcc.n	801c8b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c8ac:	2301      	movs	r3, #1
 801c8ae:	617b      	str	r3, [r7, #20]
 801c8b0:	e007      	b.n	801c8c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c8b2:	4b07      	ldr	r3, [pc, #28]	; (801c8d0 <prvInsertTimerInActiveList+0x80>)
 801c8b4:	681a      	ldr	r2, [r3, #0]
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	3304      	adds	r3, #4
 801c8ba:	4619      	mov	r1, r3
 801c8bc:	4610      	mov	r0, r2
 801c8be:	f7fd fd50 	bl	801a362 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c8c2:	697b      	ldr	r3, [r7, #20]
}
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	3718      	adds	r7, #24
 801c8c8:	46bd      	mov	sp, r7
 801c8ca:	bd80      	pop	{r7, pc}
 801c8cc:	20002ac0 	.word	0x20002ac0
 801c8d0:	20002abc 	.word	0x20002abc

0801c8d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b08e      	sub	sp, #56	; 0x38
 801c8d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c8da:	e0ca      	b.n	801ca72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	da18      	bge.n	801c914 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801c8e2:	1d3b      	adds	r3, r7, #4
 801c8e4:	3304      	adds	r3, #4
 801c8e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d10a      	bne.n	801c904 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8f2:	f383 8811 	msr	BASEPRI, r3
 801c8f6:	f3bf 8f6f 	isb	sy
 801c8fa:	f3bf 8f4f 	dsb	sy
 801c8fe:	61fb      	str	r3, [r7, #28]
}
 801c900:	bf00      	nop
 801c902:	e7fe      	b.n	801c902 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801c904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c90a:	6850      	ldr	r0, [r2, #4]
 801c90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c90e:	6892      	ldr	r2, [r2, #8]
 801c910:	4611      	mov	r1, r2
 801c912:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	2b00      	cmp	r3, #0
 801c918:	f2c0 80ab 	blt.w	801ca72 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c922:	695b      	ldr	r3, [r3, #20]
 801c924:	2b00      	cmp	r3, #0
 801c926:	d004      	beq.n	801c932 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c92a:	3304      	adds	r3, #4
 801c92c:	4618      	mov	r0, r3
 801c92e:	f7fd fd51 	bl	801a3d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c932:	463b      	mov	r3, r7
 801c934:	4618      	mov	r0, r3
 801c936:	f7ff ff6b 	bl	801c810 <prvSampleTimeNow>
 801c93a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	2b09      	cmp	r3, #9
 801c940:	f200 8096 	bhi.w	801ca70 <prvProcessReceivedCommands+0x19c>
 801c944:	a201      	add	r2, pc, #4	; (adr r2, 801c94c <prvProcessReceivedCommands+0x78>)
 801c946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c94a:	bf00      	nop
 801c94c:	0801c975 	.word	0x0801c975
 801c950:	0801c975 	.word	0x0801c975
 801c954:	0801c975 	.word	0x0801c975
 801c958:	0801c9e9 	.word	0x0801c9e9
 801c95c:	0801c9fd 	.word	0x0801c9fd
 801c960:	0801ca47 	.word	0x0801ca47
 801c964:	0801c975 	.word	0x0801c975
 801c968:	0801c975 	.word	0x0801c975
 801c96c:	0801c9e9 	.word	0x0801c9e9
 801c970:	0801c9fd 	.word	0x0801c9fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c97a:	f043 0301 	orr.w	r3, r3, #1
 801c97e:	b2da      	uxtb	r2, r3
 801c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c986:	68ba      	ldr	r2, [r7, #8]
 801c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c98a:	699b      	ldr	r3, [r3, #24]
 801c98c:	18d1      	adds	r1, r2, r3
 801c98e:	68bb      	ldr	r3, [r7, #8]
 801c990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c994:	f7ff ff5c 	bl	801c850 <prvInsertTimerInActiveList>
 801c998:	4603      	mov	r3, r0
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d069      	beq.n	801ca72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9a0:	6a1b      	ldr	r3, [r3, #32]
 801c9a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c9a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c9ac:	f003 0304 	and.w	r3, r3, #4
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d05e      	beq.n	801ca72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c9b4:	68ba      	ldr	r2, [r7, #8]
 801c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9b8:	699b      	ldr	r3, [r3, #24]
 801c9ba:	441a      	add	r2, r3
 801c9bc:	2300      	movs	r3, #0
 801c9be:	9300      	str	r3, [sp, #0]
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	2100      	movs	r1, #0
 801c9c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c9c6:	f7ff fe05 	bl	801c5d4 <xTimerGenericCommand>
 801c9ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801c9cc:	6a3b      	ldr	r3, [r7, #32]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d14f      	bne.n	801ca72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c9d6:	f383 8811 	msr	BASEPRI, r3
 801c9da:	f3bf 8f6f 	isb	sy
 801c9de:	f3bf 8f4f 	dsb	sy
 801c9e2:	61bb      	str	r3, [r7, #24]
}
 801c9e4:	bf00      	nop
 801c9e6:	e7fe      	b.n	801c9e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c9ee:	f023 0301 	bic.w	r3, r3, #1
 801c9f2:	b2da      	uxtb	r2, r3
 801c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801c9fa:	e03a      	b.n	801ca72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ca02:	f043 0301 	orr.w	r3, r3, #1
 801ca06:	b2da      	uxtb	r2, r3
 801ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801ca0e:	68ba      	ldr	r2, [r7, #8]
 801ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca16:	699b      	ldr	r3, [r3, #24]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d10a      	bne.n	801ca32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca20:	f383 8811 	msr	BASEPRI, r3
 801ca24:	f3bf 8f6f 	isb	sy
 801ca28:	f3bf 8f4f 	dsb	sy
 801ca2c:	617b      	str	r3, [r7, #20]
}
 801ca2e:	bf00      	nop
 801ca30:	e7fe      	b.n	801ca30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca34:	699a      	ldr	r2, [r3, #24]
 801ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca38:	18d1      	adds	r1, r2, r3
 801ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ca40:	f7ff ff06 	bl	801c850 <prvInsertTimerInActiveList>
					break;
 801ca44:	e015      	b.n	801ca72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801ca46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ca4c:	f003 0302 	and.w	r3, r3, #2
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d103      	bne.n	801ca5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801ca54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ca56:	f000 fbdb 	bl	801d210 <vPortFree>
 801ca5a:	e00a      	b.n	801ca72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ca5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ca62:	f023 0301 	bic.w	r3, r3, #1
 801ca66:	b2da      	uxtb	r2, r3
 801ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801ca6e:	e000      	b.n	801ca72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801ca70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ca72:	4b08      	ldr	r3, [pc, #32]	; (801ca94 <prvProcessReceivedCommands+0x1c0>)
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	1d39      	adds	r1, r7, #4
 801ca78:	2200      	movs	r2, #0
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	f7fe f862 	bl	801ab44 <xQueueReceive>
 801ca80:	4603      	mov	r3, r0
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	f47f af2a 	bne.w	801c8dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801ca88:	bf00      	nop
 801ca8a:	bf00      	nop
 801ca8c:	3730      	adds	r7, #48	; 0x30
 801ca8e:	46bd      	mov	sp, r7
 801ca90:	bd80      	pop	{r7, pc}
 801ca92:	bf00      	nop
 801ca94:	20002ac4 	.word	0x20002ac4

0801ca98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801ca98:	b580      	push	{r7, lr}
 801ca9a:	b088      	sub	sp, #32
 801ca9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ca9e:	e048      	b.n	801cb32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801caa0:	4b2d      	ldr	r3, [pc, #180]	; (801cb58 <prvSwitchTimerLists+0xc0>)
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	68db      	ldr	r3, [r3, #12]
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801caaa:	4b2b      	ldr	r3, [pc, #172]	; (801cb58 <prvSwitchTimerLists+0xc0>)
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	68db      	ldr	r3, [r3, #12]
 801cab0:	68db      	ldr	r3, [r3, #12]
 801cab2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	3304      	adds	r3, #4
 801cab8:	4618      	mov	r0, r3
 801caba:	f7fd fc8b 	bl	801a3d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	6a1b      	ldr	r3, [r3, #32]
 801cac2:	68f8      	ldr	r0, [r7, #12]
 801cac4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cacc:	f003 0304 	and.w	r3, r3, #4
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d02e      	beq.n	801cb32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801cad4:	68fb      	ldr	r3, [r7, #12]
 801cad6:	699b      	ldr	r3, [r3, #24]
 801cad8:	693a      	ldr	r2, [r7, #16]
 801cada:	4413      	add	r3, r2
 801cadc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801cade:	68ba      	ldr	r2, [r7, #8]
 801cae0:	693b      	ldr	r3, [r7, #16]
 801cae2:	429a      	cmp	r2, r3
 801cae4:	d90e      	bls.n	801cb04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	68ba      	ldr	r2, [r7, #8]
 801caea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	68fa      	ldr	r2, [r7, #12]
 801caf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801caf2:	4b19      	ldr	r3, [pc, #100]	; (801cb58 <prvSwitchTimerLists+0xc0>)
 801caf4:	681a      	ldr	r2, [r3, #0]
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	3304      	adds	r3, #4
 801cafa:	4619      	mov	r1, r3
 801cafc:	4610      	mov	r0, r2
 801cafe:	f7fd fc30 	bl	801a362 <vListInsert>
 801cb02:	e016      	b.n	801cb32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801cb04:	2300      	movs	r3, #0
 801cb06:	9300      	str	r3, [sp, #0]
 801cb08:	2300      	movs	r3, #0
 801cb0a:	693a      	ldr	r2, [r7, #16]
 801cb0c:	2100      	movs	r1, #0
 801cb0e:	68f8      	ldr	r0, [r7, #12]
 801cb10:	f7ff fd60 	bl	801c5d4 <xTimerGenericCommand>
 801cb14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d10a      	bne.n	801cb32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801cb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb20:	f383 8811 	msr	BASEPRI, r3
 801cb24:	f3bf 8f6f 	isb	sy
 801cb28:	f3bf 8f4f 	dsb	sy
 801cb2c:	603b      	str	r3, [r7, #0]
}
 801cb2e:	bf00      	nop
 801cb30:	e7fe      	b.n	801cb30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801cb32:	4b09      	ldr	r3, [pc, #36]	; (801cb58 <prvSwitchTimerLists+0xc0>)
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d1b1      	bne.n	801caa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801cb3c:	4b06      	ldr	r3, [pc, #24]	; (801cb58 <prvSwitchTimerLists+0xc0>)
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801cb42:	4b06      	ldr	r3, [pc, #24]	; (801cb5c <prvSwitchTimerLists+0xc4>)
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	4a04      	ldr	r2, [pc, #16]	; (801cb58 <prvSwitchTimerLists+0xc0>)
 801cb48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801cb4a:	4a04      	ldr	r2, [pc, #16]	; (801cb5c <prvSwitchTimerLists+0xc4>)
 801cb4c:	697b      	ldr	r3, [r7, #20]
 801cb4e:	6013      	str	r3, [r2, #0]
}
 801cb50:	bf00      	nop
 801cb52:	3718      	adds	r7, #24
 801cb54:	46bd      	mov	sp, r7
 801cb56:	bd80      	pop	{r7, pc}
 801cb58:	20002abc 	.word	0x20002abc
 801cb5c:	20002ac0 	.word	0x20002ac0

0801cb60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801cb60:	b580      	push	{r7, lr}
 801cb62:	b082      	sub	sp, #8
 801cb64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801cb66:	f000 f965 	bl	801ce34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801cb6a:	4b15      	ldr	r3, [pc, #84]	; (801cbc0 <prvCheckForValidListAndQueue+0x60>)
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d120      	bne.n	801cbb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801cb72:	4814      	ldr	r0, [pc, #80]	; (801cbc4 <prvCheckForValidListAndQueue+0x64>)
 801cb74:	f7fd fba4 	bl	801a2c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801cb78:	4813      	ldr	r0, [pc, #76]	; (801cbc8 <prvCheckForValidListAndQueue+0x68>)
 801cb7a:	f7fd fba1 	bl	801a2c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801cb7e:	4b13      	ldr	r3, [pc, #76]	; (801cbcc <prvCheckForValidListAndQueue+0x6c>)
 801cb80:	4a10      	ldr	r2, [pc, #64]	; (801cbc4 <prvCheckForValidListAndQueue+0x64>)
 801cb82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801cb84:	4b12      	ldr	r3, [pc, #72]	; (801cbd0 <prvCheckForValidListAndQueue+0x70>)
 801cb86:	4a10      	ldr	r2, [pc, #64]	; (801cbc8 <prvCheckForValidListAndQueue+0x68>)
 801cb88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801cb8a:	2300      	movs	r3, #0
 801cb8c:	9300      	str	r3, [sp, #0]
 801cb8e:	4b11      	ldr	r3, [pc, #68]	; (801cbd4 <prvCheckForValidListAndQueue+0x74>)
 801cb90:	4a11      	ldr	r2, [pc, #68]	; (801cbd8 <prvCheckForValidListAndQueue+0x78>)
 801cb92:	2110      	movs	r1, #16
 801cb94:	200a      	movs	r0, #10
 801cb96:	f7fd fcaf 	bl	801a4f8 <xQueueGenericCreateStatic>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	4a08      	ldr	r2, [pc, #32]	; (801cbc0 <prvCheckForValidListAndQueue+0x60>)
 801cb9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801cba0:	4b07      	ldr	r3, [pc, #28]	; (801cbc0 <prvCheckForValidListAndQueue+0x60>)
 801cba2:	681b      	ldr	r3, [r3, #0]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d005      	beq.n	801cbb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801cba8:	4b05      	ldr	r3, [pc, #20]	; (801cbc0 <prvCheckForValidListAndQueue+0x60>)
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	490b      	ldr	r1, [pc, #44]	; (801cbdc <prvCheckForValidListAndQueue+0x7c>)
 801cbae:	4618      	mov	r0, r3
 801cbb0:	f7fe fb5c 	bl	801b26c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801cbb4:	f000 f96e 	bl	801ce94 <vPortExitCritical>
}
 801cbb8:	bf00      	nop
 801cbba:	46bd      	mov	sp, r7
 801cbbc:	bd80      	pop	{r7, pc}
 801cbbe:	bf00      	nop
 801cbc0:	20002ac4 	.word	0x20002ac4
 801cbc4:	20002a94 	.word	0x20002a94
 801cbc8:	20002aa8 	.word	0x20002aa8
 801cbcc:	20002abc 	.word	0x20002abc
 801cbd0:	20002ac0 	.word	0x20002ac0
 801cbd4:	20002b70 	.word	0x20002b70
 801cbd8:	20002ad0 	.word	0x20002ad0
 801cbdc:	0802345c 	.word	0x0802345c

0801cbe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801cbe0:	b480      	push	{r7}
 801cbe2:	b085      	sub	sp, #20
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	60f8      	str	r0, [r7, #12]
 801cbe8:	60b9      	str	r1, [r7, #8]
 801cbea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	3b04      	subs	r3, #4
 801cbf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801cbf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	3b04      	subs	r3, #4
 801cbfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801cc00:	68bb      	ldr	r3, [r7, #8]
 801cc02:	f023 0201 	bic.w	r2, r3, #1
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	3b04      	subs	r3, #4
 801cc0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801cc10:	4a0c      	ldr	r2, [pc, #48]	; (801cc44 <pxPortInitialiseStack+0x64>)
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801cc16:	68fb      	ldr	r3, [r7, #12]
 801cc18:	3b14      	subs	r3, #20
 801cc1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801cc1c:	687a      	ldr	r2, [r7, #4]
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801cc22:	68fb      	ldr	r3, [r7, #12]
 801cc24:	3b04      	subs	r3, #4
 801cc26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	f06f 0202 	mvn.w	r2, #2
 801cc2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801cc30:	68fb      	ldr	r3, [r7, #12]
 801cc32:	3b20      	subs	r3, #32
 801cc34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801cc36:	68fb      	ldr	r3, [r7, #12]
}
 801cc38:	4618      	mov	r0, r3
 801cc3a:	3714      	adds	r7, #20
 801cc3c:	46bd      	mov	sp, r7
 801cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc42:	4770      	bx	lr
 801cc44:	0801cc49 	.word	0x0801cc49

0801cc48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801cc48:	b480      	push	{r7}
 801cc4a:	b085      	sub	sp, #20
 801cc4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801cc4e:	2300      	movs	r3, #0
 801cc50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801cc52:	4b12      	ldr	r3, [pc, #72]	; (801cc9c <prvTaskExitError+0x54>)
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc5a:	d00a      	beq.n	801cc72 <prvTaskExitError+0x2a>
	__asm volatile
 801cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc60:	f383 8811 	msr	BASEPRI, r3
 801cc64:	f3bf 8f6f 	isb	sy
 801cc68:	f3bf 8f4f 	dsb	sy
 801cc6c:	60fb      	str	r3, [r7, #12]
}
 801cc6e:	bf00      	nop
 801cc70:	e7fe      	b.n	801cc70 <prvTaskExitError+0x28>
	__asm volatile
 801cc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc76:	f383 8811 	msr	BASEPRI, r3
 801cc7a:	f3bf 8f6f 	isb	sy
 801cc7e:	f3bf 8f4f 	dsb	sy
 801cc82:	60bb      	str	r3, [r7, #8]
}
 801cc84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801cc86:	bf00      	nop
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d0fc      	beq.n	801cc88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801cc8e:	bf00      	nop
 801cc90:	bf00      	nop
 801cc92:	3714      	adds	r7, #20
 801cc94:	46bd      	mov	sp, r7
 801cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc9a:	4770      	bx	lr
 801cc9c:	20000138 	.word	0x20000138

0801cca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801cca0:	4b07      	ldr	r3, [pc, #28]	; (801ccc0 <pxCurrentTCBConst2>)
 801cca2:	6819      	ldr	r1, [r3, #0]
 801cca4:	6808      	ldr	r0, [r1, #0]
 801cca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccaa:	f380 8809 	msr	PSP, r0
 801ccae:	f3bf 8f6f 	isb	sy
 801ccb2:	f04f 0000 	mov.w	r0, #0
 801ccb6:	f380 8811 	msr	BASEPRI, r0
 801ccba:	4770      	bx	lr
 801ccbc:	f3af 8000 	nop.w

0801ccc0 <pxCurrentTCBConst2>:
 801ccc0:	20002594 	.word	0x20002594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801ccc4:	bf00      	nop
 801ccc6:	bf00      	nop

0801ccc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801ccc8:	4808      	ldr	r0, [pc, #32]	; (801ccec <prvPortStartFirstTask+0x24>)
 801ccca:	6800      	ldr	r0, [r0, #0]
 801cccc:	6800      	ldr	r0, [r0, #0]
 801ccce:	f380 8808 	msr	MSP, r0
 801ccd2:	f04f 0000 	mov.w	r0, #0
 801ccd6:	f380 8814 	msr	CONTROL, r0
 801ccda:	b662      	cpsie	i
 801ccdc:	b661      	cpsie	f
 801ccde:	f3bf 8f4f 	dsb	sy
 801cce2:	f3bf 8f6f 	isb	sy
 801cce6:	df00      	svc	0
 801cce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801ccea:	bf00      	nop
 801ccec:	e000ed08 	.word	0xe000ed08

0801ccf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	b086      	sub	sp, #24
 801ccf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ccf6:	4b46      	ldr	r3, [pc, #280]	; (801ce10 <xPortStartScheduler+0x120>)
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	4a46      	ldr	r2, [pc, #280]	; (801ce14 <xPortStartScheduler+0x124>)
 801ccfc:	4293      	cmp	r3, r2
 801ccfe:	d10a      	bne.n	801cd16 <xPortStartScheduler+0x26>
	__asm volatile
 801cd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cd04:	f383 8811 	msr	BASEPRI, r3
 801cd08:	f3bf 8f6f 	isb	sy
 801cd0c:	f3bf 8f4f 	dsb	sy
 801cd10:	613b      	str	r3, [r7, #16]
}
 801cd12:	bf00      	nop
 801cd14:	e7fe      	b.n	801cd14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801cd16:	4b3e      	ldr	r3, [pc, #248]	; (801ce10 <xPortStartScheduler+0x120>)
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	4a3f      	ldr	r2, [pc, #252]	; (801ce18 <xPortStartScheduler+0x128>)
 801cd1c:	4293      	cmp	r3, r2
 801cd1e:	d10a      	bne.n	801cd36 <xPortStartScheduler+0x46>
	__asm volatile
 801cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cd24:	f383 8811 	msr	BASEPRI, r3
 801cd28:	f3bf 8f6f 	isb	sy
 801cd2c:	f3bf 8f4f 	dsb	sy
 801cd30:	60fb      	str	r3, [r7, #12]
}
 801cd32:	bf00      	nop
 801cd34:	e7fe      	b.n	801cd34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801cd36:	4b39      	ldr	r3, [pc, #228]	; (801ce1c <xPortStartScheduler+0x12c>)
 801cd38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801cd3a:	697b      	ldr	r3, [r7, #20]
 801cd3c:	781b      	ldrb	r3, [r3, #0]
 801cd3e:	b2db      	uxtb	r3, r3
 801cd40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801cd42:	697b      	ldr	r3, [r7, #20]
 801cd44:	22ff      	movs	r2, #255	; 0xff
 801cd46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801cd48:	697b      	ldr	r3, [r7, #20]
 801cd4a:	781b      	ldrb	r3, [r3, #0]
 801cd4c:	b2db      	uxtb	r3, r3
 801cd4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801cd50:	78fb      	ldrb	r3, [r7, #3]
 801cd52:	b2db      	uxtb	r3, r3
 801cd54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801cd58:	b2da      	uxtb	r2, r3
 801cd5a:	4b31      	ldr	r3, [pc, #196]	; (801ce20 <xPortStartScheduler+0x130>)
 801cd5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801cd5e:	4b31      	ldr	r3, [pc, #196]	; (801ce24 <xPortStartScheduler+0x134>)
 801cd60:	2207      	movs	r2, #7
 801cd62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801cd64:	e009      	b.n	801cd7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801cd66:	4b2f      	ldr	r3, [pc, #188]	; (801ce24 <xPortStartScheduler+0x134>)
 801cd68:	681b      	ldr	r3, [r3, #0]
 801cd6a:	3b01      	subs	r3, #1
 801cd6c:	4a2d      	ldr	r2, [pc, #180]	; (801ce24 <xPortStartScheduler+0x134>)
 801cd6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801cd70:	78fb      	ldrb	r3, [r7, #3]
 801cd72:	b2db      	uxtb	r3, r3
 801cd74:	005b      	lsls	r3, r3, #1
 801cd76:	b2db      	uxtb	r3, r3
 801cd78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801cd7a:	78fb      	ldrb	r3, [r7, #3]
 801cd7c:	b2db      	uxtb	r3, r3
 801cd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cd82:	2b80      	cmp	r3, #128	; 0x80
 801cd84:	d0ef      	beq.n	801cd66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801cd86:	4b27      	ldr	r3, [pc, #156]	; (801ce24 <xPortStartScheduler+0x134>)
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	f1c3 0307 	rsb	r3, r3, #7
 801cd8e:	2b04      	cmp	r3, #4
 801cd90:	d00a      	beq.n	801cda8 <xPortStartScheduler+0xb8>
	__asm volatile
 801cd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cd96:	f383 8811 	msr	BASEPRI, r3
 801cd9a:	f3bf 8f6f 	isb	sy
 801cd9e:	f3bf 8f4f 	dsb	sy
 801cda2:	60bb      	str	r3, [r7, #8]
}
 801cda4:	bf00      	nop
 801cda6:	e7fe      	b.n	801cda6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801cda8:	4b1e      	ldr	r3, [pc, #120]	; (801ce24 <xPortStartScheduler+0x134>)
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	021b      	lsls	r3, r3, #8
 801cdae:	4a1d      	ldr	r2, [pc, #116]	; (801ce24 <xPortStartScheduler+0x134>)
 801cdb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801cdb2:	4b1c      	ldr	r3, [pc, #112]	; (801ce24 <xPortStartScheduler+0x134>)
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801cdba:	4a1a      	ldr	r2, [pc, #104]	; (801ce24 <xPortStartScheduler+0x134>)
 801cdbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	b2da      	uxtb	r2, r3
 801cdc2:	697b      	ldr	r3, [r7, #20]
 801cdc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801cdc6:	4b18      	ldr	r3, [pc, #96]	; (801ce28 <xPortStartScheduler+0x138>)
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	4a17      	ldr	r2, [pc, #92]	; (801ce28 <xPortStartScheduler+0x138>)
 801cdcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801cdd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801cdd2:	4b15      	ldr	r3, [pc, #84]	; (801ce28 <xPortStartScheduler+0x138>)
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	4a14      	ldr	r2, [pc, #80]	; (801ce28 <xPortStartScheduler+0x138>)
 801cdd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801cddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801cdde:	f000 f8dd 	bl	801cf9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801cde2:	4b12      	ldr	r3, [pc, #72]	; (801ce2c <xPortStartScheduler+0x13c>)
 801cde4:	2200      	movs	r2, #0
 801cde6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801cde8:	f000 f8fc 	bl	801cfe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801cdec:	4b10      	ldr	r3, [pc, #64]	; (801ce30 <xPortStartScheduler+0x140>)
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	4a0f      	ldr	r2, [pc, #60]	; (801ce30 <xPortStartScheduler+0x140>)
 801cdf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801cdf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801cdf8:	f7ff ff66 	bl	801ccc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801cdfc:	f7fe ff3e 	bl	801bc7c <vTaskSwitchContext>
	prvTaskExitError();
 801ce00:	f7ff ff22 	bl	801cc48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801ce04:	2300      	movs	r3, #0
}
 801ce06:	4618      	mov	r0, r3
 801ce08:	3718      	adds	r7, #24
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd80      	pop	{r7, pc}
 801ce0e:	bf00      	nop
 801ce10:	e000ed00 	.word	0xe000ed00
 801ce14:	410fc271 	.word	0x410fc271
 801ce18:	410fc270 	.word	0x410fc270
 801ce1c:	e000e400 	.word	0xe000e400
 801ce20:	20002bc0 	.word	0x20002bc0
 801ce24:	20002bc4 	.word	0x20002bc4
 801ce28:	e000ed20 	.word	0xe000ed20
 801ce2c:	20000138 	.word	0x20000138
 801ce30:	e000ef34 	.word	0xe000ef34

0801ce34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801ce34:	b480      	push	{r7}
 801ce36:	b083      	sub	sp, #12
 801ce38:	af00      	add	r7, sp, #0
	__asm volatile
 801ce3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ce3e:	f383 8811 	msr	BASEPRI, r3
 801ce42:	f3bf 8f6f 	isb	sy
 801ce46:	f3bf 8f4f 	dsb	sy
 801ce4a:	607b      	str	r3, [r7, #4]
}
 801ce4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801ce4e:	4b0f      	ldr	r3, [pc, #60]	; (801ce8c <vPortEnterCritical+0x58>)
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	3301      	adds	r3, #1
 801ce54:	4a0d      	ldr	r2, [pc, #52]	; (801ce8c <vPortEnterCritical+0x58>)
 801ce56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801ce58:	4b0c      	ldr	r3, [pc, #48]	; (801ce8c <vPortEnterCritical+0x58>)
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	2b01      	cmp	r3, #1
 801ce5e:	d10f      	bne.n	801ce80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801ce60:	4b0b      	ldr	r3, [pc, #44]	; (801ce90 <vPortEnterCritical+0x5c>)
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	b2db      	uxtb	r3, r3
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d00a      	beq.n	801ce80 <vPortEnterCritical+0x4c>
	__asm volatile
 801ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ce6e:	f383 8811 	msr	BASEPRI, r3
 801ce72:	f3bf 8f6f 	isb	sy
 801ce76:	f3bf 8f4f 	dsb	sy
 801ce7a:	603b      	str	r3, [r7, #0]
}
 801ce7c:	bf00      	nop
 801ce7e:	e7fe      	b.n	801ce7e <vPortEnterCritical+0x4a>
	}
}
 801ce80:	bf00      	nop
 801ce82:	370c      	adds	r7, #12
 801ce84:	46bd      	mov	sp, r7
 801ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce8a:	4770      	bx	lr
 801ce8c:	20000138 	.word	0x20000138
 801ce90:	e000ed04 	.word	0xe000ed04

0801ce94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801ce94:	b480      	push	{r7}
 801ce96:	b083      	sub	sp, #12
 801ce98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801ce9a:	4b12      	ldr	r3, [pc, #72]	; (801cee4 <vPortExitCritical+0x50>)
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d10a      	bne.n	801ceb8 <vPortExitCritical+0x24>
	__asm volatile
 801cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cea6:	f383 8811 	msr	BASEPRI, r3
 801ceaa:	f3bf 8f6f 	isb	sy
 801ceae:	f3bf 8f4f 	dsb	sy
 801ceb2:	607b      	str	r3, [r7, #4]
}
 801ceb4:	bf00      	nop
 801ceb6:	e7fe      	b.n	801ceb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801ceb8:	4b0a      	ldr	r3, [pc, #40]	; (801cee4 <vPortExitCritical+0x50>)
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	3b01      	subs	r3, #1
 801cebe:	4a09      	ldr	r2, [pc, #36]	; (801cee4 <vPortExitCritical+0x50>)
 801cec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801cec2:	4b08      	ldr	r3, [pc, #32]	; (801cee4 <vPortExitCritical+0x50>)
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d105      	bne.n	801ced6 <vPortExitCritical+0x42>
 801ceca:	2300      	movs	r3, #0
 801cecc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801cece:	683b      	ldr	r3, [r7, #0]
 801ced0:	f383 8811 	msr	BASEPRI, r3
}
 801ced4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801ced6:	bf00      	nop
 801ced8:	370c      	adds	r7, #12
 801ceda:	46bd      	mov	sp, r7
 801cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cee0:	4770      	bx	lr
 801cee2:	bf00      	nop
 801cee4:	20000138 	.word	0x20000138
	...

0801cef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801cef0:	f3ef 8009 	mrs	r0, PSP
 801cef4:	f3bf 8f6f 	isb	sy
 801cef8:	4b15      	ldr	r3, [pc, #84]	; (801cf50 <pxCurrentTCBConst>)
 801cefa:	681a      	ldr	r2, [r3, #0]
 801cefc:	f01e 0f10 	tst.w	lr, #16
 801cf00:	bf08      	it	eq
 801cf02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801cf06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf0a:	6010      	str	r0, [r2, #0]
 801cf0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801cf10:	f04f 0050 	mov.w	r0, #80	; 0x50
 801cf14:	f380 8811 	msr	BASEPRI, r0
 801cf18:	f3bf 8f4f 	dsb	sy
 801cf1c:	f3bf 8f6f 	isb	sy
 801cf20:	f7fe feac 	bl	801bc7c <vTaskSwitchContext>
 801cf24:	f04f 0000 	mov.w	r0, #0
 801cf28:	f380 8811 	msr	BASEPRI, r0
 801cf2c:	bc09      	pop	{r0, r3}
 801cf2e:	6819      	ldr	r1, [r3, #0]
 801cf30:	6808      	ldr	r0, [r1, #0]
 801cf32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf36:	f01e 0f10 	tst.w	lr, #16
 801cf3a:	bf08      	it	eq
 801cf3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801cf40:	f380 8809 	msr	PSP, r0
 801cf44:	f3bf 8f6f 	isb	sy
 801cf48:	4770      	bx	lr
 801cf4a:	bf00      	nop
 801cf4c:	f3af 8000 	nop.w

0801cf50 <pxCurrentTCBConst>:
 801cf50:	20002594 	.word	0x20002594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801cf54:	bf00      	nop
 801cf56:	bf00      	nop

0801cf58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801cf58:	b580      	push	{r7, lr}
 801cf5a:	b082      	sub	sp, #8
 801cf5c:	af00      	add	r7, sp, #0
	__asm volatile
 801cf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cf62:	f383 8811 	msr	BASEPRI, r3
 801cf66:	f3bf 8f6f 	isb	sy
 801cf6a:	f3bf 8f4f 	dsb	sy
 801cf6e:	607b      	str	r3, [r7, #4]
}
 801cf70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801cf72:	f7fe fdc9 	bl	801bb08 <xTaskIncrementTick>
 801cf76:	4603      	mov	r3, r0
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d003      	beq.n	801cf84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801cf7c:	4b06      	ldr	r3, [pc, #24]	; (801cf98 <xPortSysTickHandler+0x40>)
 801cf7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cf82:	601a      	str	r2, [r3, #0]
 801cf84:	2300      	movs	r3, #0
 801cf86:	603b      	str	r3, [r7, #0]
	__asm volatile
 801cf88:	683b      	ldr	r3, [r7, #0]
 801cf8a:	f383 8811 	msr	BASEPRI, r3
}
 801cf8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801cf90:	bf00      	nop
 801cf92:	3708      	adds	r7, #8
 801cf94:	46bd      	mov	sp, r7
 801cf96:	bd80      	pop	{r7, pc}
 801cf98:	e000ed04 	.word	0xe000ed04

0801cf9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801cf9c:	b480      	push	{r7}
 801cf9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801cfa0:	4b0b      	ldr	r3, [pc, #44]	; (801cfd0 <vPortSetupTimerInterrupt+0x34>)
 801cfa2:	2200      	movs	r2, #0
 801cfa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801cfa6:	4b0b      	ldr	r3, [pc, #44]	; (801cfd4 <vPortSetupTimerInterrupt+0x38>)
 801cfa8:	2200      	movs	r2, #0
 801cfaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801cfac:	4b0a      	ldr	r3, [pc, #40]	; (801cfd8 <vPortSetupTimerInterrupt+0x3c>)
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	4a0a      	ldr	r2, [pc, #40]	; (801cfdc <vPortSetupTimerInterrupt+0x40>)
 801cfb2:	fba2 2303 	umull	r2, r3, r2, r3
 801cfb6:	099b      	lsrs	r3, r3, #6
 801cfb8:	4a09      	ldr	r2, [pc, #36]	; (801cfe0 <vPortSetupTimerInterrupt+0x44>)
 801cfba:	3b01      	subs	r3, #1
 801cfbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801cfbe:	4b04      	ldr	r3, [pc, #16]	; (801cfd0 <vPortSetupTimerInterrupt+0x34>)
 801cfc0:	2207      	movs	r2, #7
 801cfc2:	601a      	str	r2, [r3, #0]
}
 801cfc4:	bf00      	nop
 801cfc6:	46bd      	mov	sp, r7
 801cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfcc:	4770      	bx	lr
 801cfce:	bf00      	nop
 801cfd0:	e000e010 	.word	0xe000e010
 801cfd4:	e000e018 	.word	0xe000e018
 801cfd8:	20000008 	.word	0x20000008
 801cfdc:	10624dd3 	.word	0x10624dd3
 801cfe0:	e000e014 	.word	0xe000e014

0801cfe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801cfe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801cff4 <vPortEnableVFP+0x10>
 801cfe8:	6801      	ldr	r1, [r0, #0]
 801cfea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801cfee:	6001      	str	r1, [r0, #0]
 801cff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801cff2:	bf00      	nop
 801cff4:	e000ed88 	.word	0xe000ed88

0801cff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801cff8:	b480      	push	{r7}
 801cffa:	b085      	sub	sp, #20
 801cffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801cffe:	f3ef 8305 	mrs	r3, IPSR
 801d002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	2b0f      	cmp	r3, #15
 801d008:	d914      	bls.n	801d034 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801d00a:	4a17      	ldr	r2, [pc, #92]	; (801d068 <vPortValidateInterruptPriority+0x70>)
 801d00c:	68fb      	ldr	r3, [r7, #12]
 801d00e:	4413      	add	r3, r2
 801d010:	781b      	ldrb	r3, [r3, #0]
 801d012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801d014:	4b15      	ldr	r3, [pc, #84]	; (801d06c <vPortValidateInterruptPriority+0x74>)
 801d016:	781b      	ldrb	r3, [r3, #0]
 801d018:	7afa      	ldrb	r2, [r7, #11]
 801d01a:	429a      	cmp	r2, r3
 801d01c:	d20a      	bcs.n	801d034 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801d01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d022:	f383 8811 	msr	BASEPRI, r3
 801d026:	f3bf 8f6f 	isb	sy
 801d02a:	f3bf 8f4f 	dsb	sy
 801d02e:	607b      	str	r3, [r7, #4]
}
 801d030:	bf00      	nop
 801d032:	e7fe      	b.n	801d032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801d034:	4b0e      	ldr	r3, [pc, #56]	; (801d070 <vPortValidateInterruptPriority+0x78>)
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801d03c:	4b0d      	ldr	r3, [pc, #52]	; (801d074 <vPortValidateInterruptPriority+0x7c>)
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	429a      	cmp	r2, r3
 801d042:	d90a      	bls.n	801d05a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801d044:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d048:	f383 8811 	msr	BASEPRI, r3
 801d04c:	f3bf 8f6f 	isb	sy
 801d050:	f3bf 8f4f 	dsb	sy
 801d054:	603b      	str	r3, [r7, #0]
}
 801d056:	bf00      	nop
 801d058:	e7fe      	b.n	801d058 <vPortValidateInterruptPriority+0x60>
	}
 801d05a:	bf00      	nop
 801d05c:	3714      	adds	r7, #20
 801d05e:	46bd      	mov	sp, r7
 801d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d064:	4770      	bx	lr
 801d066:	bf00      	nop
 801d068:	e000e3f0 	.word	0xe000e3f0
 801d06c:	20002bc0 	.word	0x20002bc0
 801d070:	e000ed0c 	.word	0xe000ed0c
 801d074:	20002bc4 	.word	0x20002bc4

0801d078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801d078:	b580      	push	{r7, lr}
 801d07a:	b08a      	sub	sp, #40	; 0x28
 801d07c:	af00      	add	r7, sp, #0
 801d07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801d080:	2300      	movs	r3, #0
 801d082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801d084:	f7fe fc84 	bl	801b990 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801d088:	4b5b      	ldr	r3, [pc, #364]	; (801d1f8 <pvPortMalloc+0x180>)
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d101      	bne.n	801d094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801d090:	f000 f920 	bl	801d2d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801d094:	4b59      	ldr	r3, [pc, #356]	; (801d1fc <pvPortMalloc+0x184>)
 801d096:	681a      	ldr	r2, [r3, #0]
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	4013      	ands	r3, r2
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	f040 8093 	bne.w	801d1c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d01d      	beq.n	801d0e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801d0a8:	2208      	movs	r2, #8
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	4413      	add	r3, r2
 801d0ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	f003 0307 	and.w	r3, r3, #7
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d014      	beq.n	801d0e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	f023 0307 	bic.w	r3, r3, #7
 801d0c0:	3308      	adds	r3, #8
 801d0c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	f003 0307 	and.w	r3, r3, #7
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d00a      	beq.n	801d0e4 <pvPortMalloc+0x6c>
	__asm volatile
 801d0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d0d2:	f383 8811 	msr	BASEPRI, r3
 801d0d6:	f3bf 8f6f 	isb	sy
 801d0da:	f3bf 8f4f 	dsb	sy
 801d0de:	617b      	str	r3, [r7, #20]
}
 801d0e0:	bf00      	nop
 801d0e2:	e7fe      	b.n	801d0e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d06e      	beq.n	801d1c8 <pvPortMalloc+0x150>
 801d0ea:	4b45      	ldr	r3, [pc, #276]	; (801d200 <pvPortMalloc+0x188>)
 801d0ec:	681b      	ldr	r3, [r3, #0]
 801d0ee:	687a      	ldr	r2, [r7, #4]
 801d0f0:	429a      	cmp	r2, r3
 801d0f2:	d869      	bhi.n	801d1c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801d0f4:	4b43      	ldr	r3, [pc, #268]	; (801d204 <pvPortMalloc+0x18c>)
 801d0f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801d0f8:	4b42      	ldr	r3, [pc, #264]	; (801d204 <pvPortMalloc+0x18c>)
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801d0fe:	e004      	b.n	801d10a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d10c:	685b      	ldr	r3, [r3, #4]
 801d10e:	687a      	ldr	r2, [r7, #4]
 801d110:	429a      	cmp	r2, r3
 801d112:	d903      	bls.n	801d11c <pvPortMalloc+0xa4>
 801d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d1f1      	bne.n	801d100 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801d11c:	4b36      	ldr	r3, [pc, #216]	; (801d1f8 <pvPortMalloc+0x180>)
 801d11e:	681b      	ldr	r3, [r3, #0]
 801d120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d122:	429a      	cmp	r2, r3
 801d124:	d050      	beq.n	801d1c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801d126:	6a3b      	ldr	r3, [r7, #32]
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	2208      	movs	r2, #8
 801d12c:	4413      	add	r3, r2
 801d12e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d132:	681a      	ldr	r2, [r3, #0]
 801d134:	6a3b      	ldr	r3, [r7, #32]
 801d136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d13a:	685a      	ldr	r2, [r3, #4]
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	1ad2      	subs	r2, r2, r3
 801d140:	2308      	movs	r3, #8
 801d142:	005b      	lsls	r3, r3, #1
 801d144:	429a      	cmp	r2, r3
 801d146:	d91f      	bls.n	801d188 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801d148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	4413      	add	r3, r2
 801d14e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801d150:	69bb      	ldr	r3, [r7, #24]
 801d152:	f003 0307 	and.w	r3, r3, #7
 801d156:	2b00      	cmp	r3, #0
 801d158:	d00a      	beq.n	801d170 <pvPortMalloc+0xf8>
	__asm volatile
 801d15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d15e:	f383 8811 	msr	BASEPRI, r3
 801d162:	f3bf 8f6f 	isb	sy
 801d166:	f3bf 8f4f 	dsb	sy
 801d16a:	613b      	str	r3, [r7, #16]
}
 801d16c:	bf00      	nop
 801d16e:	e7fe      	b.n	801d16e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d172:	685a      	ldr	r2, [r3, #4]
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	1ad2      	subs	r2, r2, r3
 801d178:	69bb      	ldr	r3, [r7, #24]
 801d17a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d17e:	687a      	ldr	r2, [r7, #4]
 801d180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801d182:	69b8      	ldr	r0, [r7, #24]
 801d184:	f000 f908 	bl	801d398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801d188:	4b1d      	ldr	r3, [pc, #116]	; (801d200 <pvPortMalloc+0x188>)
 801d18a:	681a      	ldr	r2, [r3, #0]
 801d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d18e:	685b      	ldr	r3, [r3, #4]
 801d190:	1ad3      	subs	r3, r2, r3
 801d192:	4a1b      	ldr	r2, [pc, #108]	; (801d200 <pvPortMalloc+0x188>)
 801d194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801d196:	4b1a      	ldr	r3, [pc, #104]	; (801d200 <pvPortMalloc+0x188>)
 801d198:	681a      	ldr	r2, [r3, #0]
 801d19a:	4b1b      	ldr	r3, [pc, #108]	; (801d208 <pvPortMalloc+0x190>)
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	429a      	cmp	r2, r3
 801d1a0:	d203      	bcs.n	801d1aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801d1a2:	4b17      	ldr	r3, [pc, #92]	; (801d200 <pvPortMalloc+0x188>)
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	4a18      	ldr	r2, [pc, #96]	; (801d208 <pvPortMalloc+0x190>)
 801d1a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1ac:	685a      	ldr	r2, [r3, #4]
 801d1ae:	4b13      	ldr	r3, [pc, #76]	; (801d1fc <pvPortMalloc+0x184>)
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	431a      	orrs	r2, r3
 801d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1ba:	2200      	movs	r2, #0
 801d1bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801d1be:	4b13      	ldr	r3, [pc, #76]	; (801d20c <pvPortMalloc+0x194>)
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	3301      	adds	r3, #1
 801d1c4:	4a11      	ldr	r2, [pc, #68]	; (801d20c <pvPortMalloc+0x194>)
 801d1c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801d1c8:	f7fe fbf0 	bl	801b9ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801d1cc:	69fb      	ldr	r3, [r7, #28]
 801d1ce:	f003 0307 	and.w	r3, r3, #7
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d00a      	beq.n	801d1ec <pvPortMalloc+0x174>
	__asm volatile
 801d1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d1da:	f383 8811 	msr	BASEPRI, r3
 801d1de:	f3bf 8f6f 	isb	sy
 801d1e2:	f3bf 8f4f 	dsb	sy
 801d1e6:	60fb      	str	r3, [r7, #12]
}
 801d1e8:	bf00      	nop
 801d1ea:	e7fe      	b.n	801d1ea <pvPortMalloc+0x172>
	return pvReturn;
 801d1ec:	69fb      	ldr	r3, [r7, #28]
}
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	3728      	adds	r7, #40	; 0x28
 801d1f2:	46bd      	mov	sp, r7
 801d1f4:	bd80      	pop	{r7, pc}
 801d1f6:	bf00      	nop
 801d1f8:	20012bd0 	.word	0x20012bd0
 801d1fc:	20012be4 	.word	0x20012be4
 801d200:	20012bd4 	.word	0x20012bd4
 801d204:	20012bc8 	.word	0x20012bc8
 801d208:	20012bd8 	.word	0x20012bd8
 801d20c:	20012bdc 	.word	0x20012bdc

0801d210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801d210:	b580      	push	{r7, lr}
 801d212:	b086      	sub	sp, #24
 801d214:	af00      	add	r7, sp, #0
 801d216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d04d      	beq.n	801d2be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801d222:	2308      	movs	r3, #8
 801d224:	425b      	negs	r3, r3
 801d226:	697a      	ldr	r2, [r7, #20]
 801d228:	4413      	add	r3, r2
 801d22a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801d22c:	697b      	ldr	r3, [r7, #20]
 801d22e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801d230:	693b      	ldr	r3, [r7, #16]
 801d232:	685a      	ldr	r2, [r3, #4]
 801d234:	4b24      	ldr	r3, [pc, #144]	; (801d2c8 <vPortFree+0xb8>)
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	4013      	ands	r3, r2
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d10a      	bne.n	801d254 <vPortFree+0x44>
	__asm volatile
 801d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d242:	f383 8811 	msr	BASEPRI, r3
 801d246:	f3bf 8f6f 	isb	sy
 801d24a:	f3bf 8f4f 	dsb	sy
 801d24e:	60fb      	str	r3, [r7, #12]
}
 801d250:	bf00      	nop
 801d252:	e7fe      	b.n	801d252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801d254:	693b      	ldr	r3, [r7, #16]
 801d256:	681b      	ldr	r3, [r3, #0]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d00a      	beq.n	801d272 <vPortFree+0x62>
	__asm volatile
 801d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d260:	f383 8811 	msr	BASEPRI, r3
 801d264:	f3bf 8f6f 	isb	sy
 801d268:	f3bf 8f4f 	dsb	sy
 801d26c:	60bb      	str	r3, [r7, #8]
}
 801d26e:	bf00      	nop
 801d270:	e7fe      	b.n	801d270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801d272:	693b      	ldr	r3, [r7, #16]
 801d274:	685a      	ldr	r2, [r3, #4]
 801d276:	4b14      	ldr	r3, [pc, #80]	; (801d2c8 <vPortFree+0xb8>)
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	4013      	ands	r3, r2
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d01e      	beq.n	801d2be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801d280:	693b      	ldr	r3, [r7, #16]
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	2b00      	cmp	r3, #0
 801d286:	d11a      	bne.n	801d2be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801d288:	693b      	ldr	r3, [r7, #16]
 801d28a:	685a      	ldr	r2, [r3, #4]
 801d28c:	4b0e      	ldr	r3, [pc, #56]	; (801d2c8 <vPortFree+0xb8>)
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	43db      	mvns	r3, r3
 801d292:	401a      	ands	r2, r3
 801d294:	693b      	ldr	r3, [r7, #16]
 801d296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801d298:	f7fe fb7a 	bl	801b990 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801d29c:	693b      	ldr	r3, [r7, #16]
 801d29e:	685a      	ldr	r2, [r3, #4]
 801d2a0:	4b0a      	ldr	r3, [pc, #40]	; (801d2cc <vPortFree+0xbc>)
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	4413      	add	r3, r2
 801d2a6:	4a09      	ldr	r2, [pc, #36]	; (801d2cc <vPortFree+0xbc>)
 801d2a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801d2aa:	6938      	ldr	r0, [r7, #16]
 801d2ac:	f000 f874 	bl	801d398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801d2b0:	4b07      	ldr	r3, [pc, #28]	; (801d2d0 <vPortFree+0xc0>)
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	3301      	adds	r3, #1
 801d2b6:	4a06      	ldr	r2, [pc, #24]	; (801d2d0 <vPortFree+0xc0>)
 801d2b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801d2ba:	f7fe fb77 	bl	801b9ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801d2be:	bf00      	nop
 801d2c0:	3718      	adds	r7, #24
 801d2c2:	46bd      	mov	sp, r7
 801d2c4:	bd80      	pop	{r7, pc}
 801d2c6:	bf00      	nop
 801d2c8:	20012be4 	.word	0x20012be4
 801d2cc:	20012bd4 	.word	0x20012bd4
 801d2d0:	20012be0 	.word	0x20012be0

0801d2d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801d2d4:	b480      	push	{r7}
 801d2d6:	b085      	sub	sp, #20
 801d2d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801d2da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801d2de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801d2e0:	4b27      	ldr	r3, [pc, #156]	; (801d380 <prvHeapInit+0xac>)
 801d2e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	f003 0307 	and.w	r3, r3, #7
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	d00c      	beq.n	801d308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	3307      	adds	r3, #7
 801d2f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	f023 0307 	bic.w	r3, r3, #7
 801d2fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801d2fc:	68ba      	ldr	r2, [r7, #8]
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	1ad3      	subs	r3, r2, r3
 801d302:	4a1f      	ldr	r2, [pc, #124]	; (801d380 <prvHeapInit+0xac>)
 801d304:	4413      	add	r3, r2
 801d306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801d30c:	4a1d      	ldr	r2, [pc, #116]	; (801d384 <prvHeapInit+0xb0>)
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801d312:	4b1c      	ldr	r3, [pc, #112]	; (801d384 <prvHeapInit+0xb0>)
 801d314:	2200      	movs	r2, #0
 801d316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	68ba      	ldr	r2, [r7, #8]
 801d31c:	4413      	add	r3, r2
 801d31e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801d320:	2208      	movs	r2, #8
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	1a9b      	subs	r3, r3, r2
 801d326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	f023 0307 	bic.w	r3, r3, #7
 801d32e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	4a15      	ldr	r2, [pc, #84]	; (801d388 <prvHeapInit+0xb4>)
 801d334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801d336:	4b14      	ldr	r3, [pc, #80]	; (801d388 <prvHeapInit+0xb4>)
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	2200      	movs	r2, #0
 801d33c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801d33e:	4b12      	ldr	r3, [pc, #72]	; (801d388 <prvHeapInit+0xb4>)
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	2200      	movs	r2, #0
 801d344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801d34a:	683b      	ldr	r3, [r7, #0]
 801d34c:	68fa      	ldr	r2, [r7, #12]
 801d34e:	1ad2      	subs	r2, r2, r3
 801d350:	683b      	ldr	r3, [r7, #0]
 801d352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801d354:	4b0c      	ldr	r3, [pc, #48]	; (801d388 <prvHeapInit+0xb4>)
 801d356:	681a      	ldr	r2, [r3, #0]
 801d358:	683b      	ldr	r3, [r7, #0]
 801d35a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d35c:	683b      	ldr	r3, [r7, #0]
 801d35e:	685b      	ldr	r3, [r3, #4]
 801d360:	4a0a      	ldr	r2, [pc, #40]	; (801d38c <prvHeapInit+0xb8>)
 801d362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d364:	683b      	ldr	r3, [r7, #0]
 801d366:	685b      	ldr	r3, [r3, #4]
 801d368:	4a09      	ldr	r2, [pc, #36]	; (801d390 <prvHeapInit+0xbc>)
 801d36a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801d36c:	4b09      	ldr	r3, [pc, #36]	; (801d394 <prvHeapInit+0xc0>)
 801d36e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801d372:	601a      	str	r2, [r3, #0]
}
 801d374:	bf00      	nop
 801d376:	3714      	adds	r7, #20
 801d378:	46bd      	mov	sp, r7
 801d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d37e:	4770      	bx	lr
 801d380:	20002bc8 	.word	0x20002bc8
 801d384:	20012bc8 	.word	0x20012bc8
 801d388:	20012bd0 	.word	0x20012bd0
 801d38c:	20012bd8 	.word	0x20012bd8
 801d390:	20012bd4 	.word	0x20012bd4
 801d394:	20012be4 	.word	0x20012be4

0801d398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801d398:	b480      	push	{r7}
 801d39a:	b085      	sub	sp, #20
 801d39c:	af00      	add	r7, sp, #0
 801d39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801d3a0:	4b28      	ldr	r3, [pc, #160]	; (801d444 <prvInsertBlockIntoFreeList+0xac>)
 801d3a2:	60fb      	str	r3, [r7, #12]
 801d3a4:	e002      	b.n	801d3ac <prvInsertBlockIntoFreeList+0x14>
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	60fb      	str	r3, [r7, #12]
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	687a      	ldr	r2, [r7, #4]
 801d3b2:	429a      	cmp	r2, r3
 801d3b4:	d8f7      	bhi.n	801d3a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	685b      	ldr	r3, [r3, #4]
 801d3be:	68ba      	ldr	r2, [r7, #8]
 801d3c0:	4413      	add	r3, r2
 801d3c2:	687a      	ldr	r2, [r7, #4]
 801d3c4:	429a      	cmp	r2, r3
 801d3c6:	d108      	bne.n	801d3da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	685a      	ldr	r2, [r3, #4]
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	685b      	ldr	r3, [r3, #4]
 801d3d0:	441a      	add	r2, r3
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	685b      	ldr	r3, [r3, #4]
 801d3e2:	68ba      	ldr	r2, [r7, #8]
 801d3e4:	441a      	add	r2, r3
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	429a      	cmp	r2, r3
 801d3ec:	d118      	bne.n	801d420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	681a      	ldr	r2, [r3, #0]
 801d3f2:	4b15      	ldr	r3, [pc, #84]	; (801d448 <prvInsertBlockIntoFreeList+0xb0>)
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	429a      	cmp	r2, r3
 801d3f8:	d00d      	beq.n	801d416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	685a      	ldr	r2, [r3, #4]
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	685b      	ldr	r3, [r3, #4]
 801d404:	441a      	add	r2, r3
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801d40a:	68fb      	ldr	r3, [r7, #12]
 801d40c:	681b      	ldr	r3, [r3, #0]
 801d40e:	681a      	ldr	r2, [r3, #0]
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	601a      	str	r2, [r3, #0]
 801d414:	e008      	b.n	801d428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801d416:	4b0c      	ldr	r3, [pc, #48]	; (801d448 <prvInsertBlockIntoFreeList+0xb0>)
 801d418:	681a      	ldr	r2, [r3, #0]
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	601a      	str	r2, [r3, #0]
 801d41e:	e003      	b.n	801d428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	681a      	ldr	r2, [r3, #0]
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801d428:	68fa      	ldr	r2, [r7, #12]
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	429a      	cmp	r2, r3
 801d42e:	d002      	beq.n	801d436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	687a      	ldr	r2, [r7, #4]
 801d434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d436:	bf00      	nop
 801d438:	3714      	adds	r7, #20
 801d43a:	46bd      	mov	sp, r7
 801d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d440:	4770      	bx	lr
 801d442:	bf00      	nop
 801d444:	20012bc8 	.word	0x20012bc8
 801d448:	20012bd0 	.word	0x20012bd0

0801d44c <RS485_Init>:
#include "string.h"
#include "stm32g4xx_hal.h"

uint8_t RS485receiveFlag = 0;

void RS485_Init(RS485cfg_struct *RS485cfg){
 801d44c:	b580      	push	{r7, lr}
 801d44e:	b082      	sub	sp, #8
 801d450:	af00      	add	r7, sp, #0
 801d452:	6078      	str	r0, [r7, #4]
	HAL_RS485Ex_Init(RS485cfg->huart, UART_DE_POLARITY_HIGH, 2, 2);
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	6818      	ldr	r0, [r3, #0]
 801d458:	2302      	movs	r3, #2
 801d45a:	2202      	movs	r2, #2
 801d45c:	2100      	movs	r1, #0
 801d45e:	f7f4 fea1 	bl	80121a4 <HAL_RS485Ex_Init>
	RS485receiveFlag = 0;
 801d462:	4b09      	ldr	r3, [pc, #36]	; (801d488 <RS485_Init+0x3c>)
 801d464:	2200      	movs	r2, #0
 801d466:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(RS485cfg->huart, RS485cfg->RXbuffer, RS485cfg->RXbuffSize-1);
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	6818      	ldr	r0, [r3, #0]
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	68d9      	ldr	r1, [r3, #12]
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	8a1b      	ldrh	r3, [r3, #16]
 801d474:	3b01      	subs	r3, #1
 801d476:	b29b      	uxth	r3, r3
 801d478:	461a      	mov	r2, r3
 801d47a:	f7f4 ffcf 	bl	801241c <HAL_UARTEx_ReceiveToIdle_IT>
}
 801d47e:	bf00      	nop
 801d480:	3708      	adds	r7, #8
 801d482:	46bd      	mov	sp, r7
 801d484:	bd80      	pop	{r7, pc}
 801d486:	bf00      	nop
 801d488:	20012be8 	.word	0x20012be8

0801d48c <RS485_Transmit_DMA>:

void RS485_Transmit_DMA(RS485cfg_struct *RS485cfg)
{
 801d48c:	b590      	push	{r4, r7, lr}
 801d48e:	b085      	sub	sp, #20
 801d490:	af00      	add	r7, sp, #0
 801d492:	6078      	str	r0, [r7, #4]
	uint16_t msglength = strlen(RS485cfg->TXbuffer) + 2;
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	685b      	ldr	r3, [r3, #4]
 801d498:	4618      	mov	r0, r3
 801d49a:	f7e8 fb21 	bl	8005ae0 <strlen>
 801d49e:	4603      	mov	r3, r0
 801d4a0:	b29b      	uxth	r3, r3
 801d4a2:	3302      	adds	r3, #2
 801d4a4:	81fb      	strh	r3, [r7, #14]
	if(msglength > RS485cfg->TXbuffSize) return;
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	891b      	ldrh	r3, [r3, #8]
 801d4aa:	89fa      	ldrh	r2, [r7, #14]
 801d4ac:	429a      	cmp	r2, r3
 801d4ae:	d829      	bhi.n	801d504 <RS485_Transmit_DMA+0x78>

	strcat(RS485cfg->TXbuffer, "\r\n");
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	685c      	ldr	r4, [r3, #4]
 801d4b4:	4620      	mov	r0, r4
 801d4b6:	f7e8 fb13 	bl	8005ae0 <strlen>
 801d4ba:	4603      	mov	r3, r0
 801d4bc:	4423      	add	r3, r4
 801d4be:	4a13      	ldr	r2, [pc, #76]	; (801d50c <RS485_Transmit_DMA+0x80>)
 801d4c0:	8811      	ldrh	r1, [r2, #0]
 801d4c2:	7892      	ldrb	r2, [r2, #2]
 801d4c4:	8019      	strh	r1, [r3, #0]
 801d4c6:	709a      	strb	r2, [r3, #2]

	HAL_StatusTypeDef RS485status = HAL_UART_Transmit_DMA(RS485cfg->huart, RS485cfg->TXbuffer, msglength);
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	6818      	ldr	r0, [r3, #0]
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	685b      	ldr	r3, [r3, #4]
 801d4d0:	89fa      	ldrh	r2, [r7, #14]
 801d4d2:	4619      	mov	r1, r3
 801d4d4:	f7f2 fe14 	bl	8010100 <HAL_UART_Transmit_DMA>
 801d4d8:	4603      	mov	r3, r0
 801d4da:	737b      	strb	r3, [r7, #13]
	if (RS485status != HAL_OK) {
 801d4dc:	7b7b      	ldrb	r3, [r7, #13]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d001      	beq.n	801d4e6 <RS485_Transmit_DMA+0x5a>
	        Error_Handler();
 801d4e2:	f7ea ffdf 	bl	80084a4 <Error_Handler>
	}

	RS485receiveFlag = 0;
 801d4e6:	4b0a      	ldr	r3, [pc, #40]	; (801d510 <RS485_Transmit_DMA+0x84>)
 801d4e8:	2200      	movs	r2, #0
 801d4ea:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(RS485cfg->huart, RS485cfg->RXbuffer, RS485cfg->RXbuffSize-1);
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	6818      	ldr	r0, [r3, #0]
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	68d9      	ldr	r1, [r3, #12]
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	8a1b      	ldrh	r3, [r3, #16]
 801d4f8:	3b01      	subs	r3, #1
 801d4fa:	b29b      	uxth	r3, r3
 801d4fc:	461a      	mov	r2, r3
 801d4fe:	f7f4 ff8d 	bl	801241c <HAL_UARTEx_ReceiveToIdle_IT>

	return;
 801d502:	e000      	b.n	801d506 <RS485_Transmit_DMA+0x7a>
	if(msglength > RS485cfg->TXbuffSize) return;
 801d504:	bf00      	nop
}
 801d506:	3714      	adds	r7, #20
 801d508:	46bd      	mov	sp, r7
 801d50a:	bd90      	pop	{r4, r7, pc}
 801d50c:	08023464 	.word	0x08023464
 801d510:	20012be8 	.word	0x20012be8

0801d514 <RS485_TransmitDone>:

uint8_t RS485_TransmitDone(RS485cfg_struct *RS485cfg)
{
 801d514:	b580      	push	{r7, lr}
 801d516:	b084      	sub	sp, #16
 801d518:	af00      	add	r7, sp, #0
 801d51a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef val = HAL_UART_GetError(RS485cfg->huart);
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	4618      	mov	r0, r3
 801d522:	f7f3 f9b9 	bl	8010898 <HAL_UART_GetError>
 801d526:	4603      	mov	r3, r0
 801d528:	73fb      	strb	r3, [r7, #15]
	return (HAL_OK == val);
 801d52a:	7bfb      	ldrb	r3, [r7, #15]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	bf0c      	ite	eq
 801d530:	2301      	moveq	r3, #1
 801d532:	2300      	movne	r3, #0
 801d534:	b2db      	uxtb	r3, r3
}
 801d536:	4618      	mov	r0, r3
 801d538:	3710      	adds	r7, #16
 801d53a:	46bd      	mov	sp, r7
 801d53c:	bd80      	pop	{r7, pc}
	...

0801d540 <RS485_IsReceived>:
	RS485receiveFlag = 0;
	HAL_UARTEx_ReceiveToIdle_IT(RS485cfg->huart, RS485cfg->RXbuffer, RS485cfg->RXbuffSize-1);
}

uint8_t RS485_IsReceived()
{
 801d540:	b480      	push	{r7}
 801d542:	af00      	add	r7, sp, #0
	return RS485receiveFlag;
 801d544:	4b03      	ldr	r3, [pc, #12]	; (801d554 <RS485_IsReceived+0x14>)
 801d546:	781b      	ldrb	r3, [r3, #0]
}
 801d548:	4618      	mov	r0, r3
 801d54a:	46bd      	mov	sp, r7
 801d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d550:	4770      	bx	lr
 801d552:	bf00      	nop
 801d554:	20012be8 	.word	0x20012be8

0801d558 <LED_init>:
RGB_struct actualRGB[3] = {0}; // stores data of actual RGB settings with added effects
RGB_struct transitionRGB[3] = {0}; // stores post-transition RGB data without effects
uint32_t period = 0;

void LED_init(uint32_t updatePeriod)
{
 801d558:	b580      	push	{r7, lr}
 801d55a:	b082      	sub	sp, #8
 801d55c:	af00      	add	r7, sp, #0
 801d55e:	6078      	str	r0, [r7, #4]
	period = updatePeriod;
 801d560:	4a09      	ldr	r2, [pc, #36]	; (801d588 <LED_init+0x30>)
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);	//R
 801d566:	2100      	movs	r1, #0
 801d568:	4808      	ldr	r0, [pc, #32]	; (801d58c <LED_init+0x34>)
 801d56a:	f7f1 fb49 	bl	800ec00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);	//G
 801d56e:	210c      	movs	r1, #12
 801d570:	4807      	ldr	r0, [pc, #28]	; (801d590 <LED_init+0x38>)
 801d572:	f7f1 fb45 	bl	800ec00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	//B
 801d576:	2108      	movs	r1, #8
 801d578:	4805      	ldr	r0, [pc, #20]	; (801d590 <LED_init+0x38>)
 801d57a:	f7f1 fb41 	bl	800ec00 <HAL_TIM_PWM_Start>
}
 801d57e:	bf00      	nop
 801d580:	3708      	adds	r7, #8
 801d582:	46bd      	mov	sp, r7
 801d584:	bd80      	pop	{r7, pc}
 801d586:	bf00      	nop
 801d588:	20012cac 	.word	0x20012cac
 801d58c:	20000760 	.word	0x20000760
 801d590:	20000714 	.word	0x20000714
 801d594:	00000000 	.word	0x00000000

0801d598 <LED_UpdateTransition>:
	HAL_GPIO_WritePin(LED2_OUT_GPIO_Port, LED2_OUT_Pin, channel==1);
	HAL_GPIO_WritePin(LED3_OUT_GPIO_Port, LED3_OUT_Pin, channel==2);
}

void LED_UpdateTransition()
{
 801d598:	b580      	push	{r7, lr}
 801d59a:	b086      	sub	sp, #24
 801d59c:	af00      	add	r7, sp, #0
	for(uint8_t channel = 0; channel <= 2; channel++)
 801d59e:	2300      	movs	r3, #0
 801d5a0:	75fb      	strb	r3, [r7, #23]
 801d5a2:	e122      	b.n	801d7ea <LED_UpdateTransition+0x252>
	{
		float newR = 0, newG = 0, newB = 0;
 801d5a4:	f04f 0300 	mov.w	r3, #0
 801d5a8:	613b      	str	r3, [r7, #16]
 801d5aa:	f04f 0300 	mov.w	r3, #0
 801d5ae:	60fb      	str	r3, [r7, #12]
 801d5b0:	f04f 0300 	mov.w	r3, #0
 801d5b4:	60bb      	str	r3, [r7, #8]
		if(leds[channel].effect.type != EFFECT_OFF)
 801d5b6:	7dfa      	ldrb	r2, [r7, #23]
 801d5b8:	4993      	ldr	r1, [pc, #588]	; (801d808 <LED_UpdateTransition+0x270>)
 801d5ba:	4613      	mov	r3, r2
 801d5bc:	005b      	lsls	r3, r3, #1
 801d5be:	4413      	add	r3, r2
 801d5c0:	00db      	lsls	r3, r3, #3
 801d5c2:	440b      	add	r3, r1
 801d5c4:	330c      	adds	r3, #12
 801d5c6:	781b      	ldrb	r3, [r3, #0]
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	d060      	beq.n	801d68e <LED_UpdateTransition+0xf6>
		{
			newR = leds[channel].R >= 0.01 ? leds[channel].R : 0.0;
 801d5cc:	7dfa      	ldrb	r2, [r7, #23]
 801d5ce:	498e      	ldr	r1, [pc, #568]	; (801d808 <LED_UpdateTransition+0x270>)
 801d5d0:	4613      	mov	r3, r2
 801d5d2:	005b      	lsls	r3, r3, #1
 801d5d4:	4413      	add	r3, r2
 801d5d6:	00db      	lsls	r3, r3, #3
 801d5d8:	440b      	add	r3, r1
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	4618      	mov	r0, r3
 801d5de:	f7e8 fc3b 	bl	8005e58 <__aeabi_f2d>
 801d5e2:	a387      	add	r3, pc, #540	; (adr r3, 801d800 <LED_UpdateTransition+0x268>)
 801d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5e8:	f7e8 ff14 	bl	8006414 <__aeabi_dcmpge>
 801d5ec:	4603      	mov	r3, r0
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d008      	beq.n	801d604 <LED_UpdateTransition+0x6c>
 801d5f2:	7dfa      	ldrb	r2, [r7, #23]
 801d5f4:	4984      	ldr	r1, [pc, #528]	; (801d808 <LED_UpdateTransition+0x270>)
 801d5f6:	4613      	mov	r3, r2
 801d5f8:	005b      	lsls	r3, r3, #1
 801d5fa:	4413      	add	r3, r2
 801d5fc:	00db      	lsls	r3, r3, #3
 801d5fe:	440b      	add	r3, r1
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	e001      	b.n	801d608 <LED_UpdateTransition+0x70>
 801d604:	f04f 0300 	mov.w	r3, #0
 801d608:	613b      	str	r3, [r7, #16]
			newG = leds[channel].G >= 0.01 ? leds[channel].G : 0.0;
 801d60a:	7dfa      	ldrb	r2, [r7, #23]
 801d60c:	497e      	ldr	r1, [pc, #504]	; (801d808 <LED_UpdateTransition+0x270>)
 801d60e:	4613      	mov	r3, r2
 801d610:	005b      	lsls	r3, r3, #1
 801d612:	4413      	add	r3, r2
 801d614:	00db      	lsls	r3, r3, #3
 801d616:	440b      	add	r3, r1
 801d618:	3304      	adds	r3, #4
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	4618      	mov	r0, r3
 801d61e:	f7e8 fc1b 	bl	8005e58 <__aeabi_f2d>
 801d622:	a377      	add	r3, pc, #476	; (adr r3, 801d800 <LED_UpdateTransition+0x268>)
 801d624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d628:	f7e8 fef4 	bl	8006414 <__aeabi_dcmpge>
 801d62c:	4603      	mov	r3, r0
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d009      	beq.n	801d646 <LED_UpdateTransition+0xae>
 801d632:	7dfa      	ldrb	r2, [r7, #23]
 801d634:	4974      	ldr	r1, [pc, #464]	; (801d808 <LED_UpdateTransition+0x270>)
 801d636:	4613      	mov	r3, r2
 801d638:	005b      	lsls	r3, r3, #1
 801d63a:	4413      	add	r3, r2
 801d63c:	00db      	lsls	r3, r3, #3
 801d63e:	440b      	add	r3, r1
 801d640:	3304      	adds	r3, #4
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	e001      	b.n	801d64a <LED_UpdateTransition+0xb2>
 801d646:	f04f 0300 	mov.w	r3, #0
 801d64a:	60fb      	str	r3, [r7, #12]
			newB = leds[channel].B >= 0.01 ? leds[channel].B : 0.0;
 801d64c:	7dfa      	ldrb	r2, [r7, #23]
 801d64e:	496e      	ldr	r1, [pc, #440]	; (801d808 <LED_UpdateTransition+0x270>)
 801d650:	4613      	mov	r3, r2
 801d652:	005b      	lsls	r3, r3, #1
 801d654:	4413      	add	r3, r2
 801d656:	00db      	lsls	r3, r3, #3
 801d658:	440b      	add	r3, r1
 801d65a:	3308      	adds	r3, #8
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	4618      	mov	r0, r3
 801d660:	f7e8 fbfa 	bl	8005e58 <__aeabi_f2d>
 801d664:	a366      	add	r3, pc, #408	; (adr r3, 801d800 <LED_UpdateTransition+0x268>)
 801d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d66a:	f7e8 fed3 	bl	8006414 <__aeabi_dcmpge>
 801d66e:	4603      	mov	r3, r0
 801d670:	2b00      	cmp	r3, #0
 801d672:	d009      	beq.n	801d688 <LED_UpdateTransition+0xf0>
 801d674:	7dfa      	ldrb	r2, [r7, #23]
 801d676:	4964      	ldr	r1, [pc, #400]	; (801d808 <LED_UpdateTransition+0x270>)
 801d678:	4613      	mov	r3, r2
 801d67a:	005b      	lsls	r3, r3, #1
 801d67c:	4413      	add	r3, r2
 801d67e:	00db      	lsls	r3, r3, #3
 801d680:	440b      	add	r3, r1
 801d682:	3308      	adds	r3, #8
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	e001      	b.n	801d68c <LED_UpdateTransition+0xf4>
 801d688:	f04f 0300 	mov.w	r3, #0
 801d68c:	60bb      	str	r3, [r7, #8]
		}

		switch (leds[channel].transition.type)
 801d68e:	7dfa      	ldrb	r2, [r7, #23]
 801d690:	495d      	ldr	r1, [pc, #372]	; (801d808 <LED_UpdateTransition+0x270>)
 801d692:	4613      	mov	r3, r2
 801d694:	005b      	lsls	r3, r3, #1
 801d696:	4413      	add	r3, r2
 801d698:	00db      	lsls	r3, r3, #3
 801d69a:	440b      	add	r3, r1
 801d69c:	3314      	adds	r3, #20
 801d69e:	781b      	ldrb	r3, [r3, #0]
 801d6a0:	2b02      	cmp	r3, #2
 801d6a2:	d01d      	beq.n	801d6e0 <LED_UpdateTransition+0x148>
		{
			default: //TRANSITION_INSTANT
				transitionRGB[channel].R = newR;
 801d6a4:	7dfa      	ldrb	r2, [r7, #23]
 801d6a6:	4959      	ldr	r1, [pc, #356]	; (801d80c <LED_UpdateTransition+0x274>)
 801d6a8:	4613      	mov	r3, r2
 801d6aa:	009b      	lsls	r3, r3, #2
 801d6ac:	4413      	add	r3, r2
 801d6ae:	009b      	lsls	r3, r3, #2
 801d6b0:	440b      	add	r3, r1
 801d6b2:	693a      	ldr	r2, [r7, #16]
 801d6b4:	601a      	str	r2, [r3, #0]
				transitionRGB[channel].G = newG;
 801d6b6:	7dfa      	ldrb	r2, [r7, #23]
 801d6b8:	4954      	ldr	r1, [pc, #336]	; (801d80c <LED_UpdateTransition+0x274>)
 801d6ba:	4613      	mov	r3, r2
 801d6bc:	009b      	lsls	r3, r3, #2
 801d6be:	4413      	add	r3, r2
 801d6c0:	009b      	lsls	r3, r3, #2
 801d6c2:	440b      	add	r3, r1
 801d6c4:	3304      	adds	r3, #4
 801d6c6:	68fa      	ldr	r2, [r7, #12]
 801d6c8:	601a      	str	r2, [r3, #0]
				transitionRGB[channel].B = newB;
 801d6ca:	7dfa      	ldrb	r2, [r7, #23]
 801d6cc:	494f      	ldr	r1, [pc, #316]	; (801d80c <LED_UpdateTransition+0x274>)
 801d6ce:	4613      	mov	r3, r2
 801d6d0:	009b      	lsls	r3, r3, #2
 801d6d2:	4413      	add	r3, r2
 801d6d4:	009b      	lsls	r3, r3, #2
 801d6d6:	440b      	add	r3, r1
 801d6d8:	3308      	adds	r3, #8
 801d6da:	68ba      	ldr	r2, [r7, #8]
 801d6dc:	601a      	str	r2, [r3, #0]
			break;
 801d6de:	e081      	b.n	801d7e4 <LED_UpdateTransition+0x24c>

			case TRANSITION_FADE:
				float val = period/(float)(leds[channel].transition.time);
 801d6e0:	4b4b      	ldr	r3, [pc, #300]	; (801d810 <LED_UpdateTransition+0x278>)
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	ee07 3a90 	vmov	s15, r3
 801d6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d6ec:	7dfa      	ldrb	r2, [r7, #23]
 801d6ee:	4946      	ldr	r1, [pc, #280]	; (801d808 <LED_UpdateTransition+0x270>)
 801d6f0:	4613      	mov	r3, r2
 801d6f2:	005b      	lsls	r3, r3, #1
 801d6f4:	4413      	add	r3, r2
 801d6f6:	00db      	lsls	r3, r3, #3
 801d6f8:	440b      	add	r3, r1
 801d6fa:	3316      	adds	r3, #22
 801d6fc:	881b      	ldrh	r3, [r3, #0]
 801d6fe:	ee07 3a90 	vmov	s15, r3
 801d702:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d70a:	edc7 7a01 	vstr	s15, [r7, #4]
				transitionRGB[channel].R = (1 - val) * transitionRGB[channel].R + val * newR;
 801d70e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d712:	edd7 7a01 	vldr	s15, [r7, #4]
 801d716:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d71a:	7dfa      	ldrb	r2, [r7, #23]
 801d71c:	493b      	ldr	r1, [pc, #236]	; (801d80c <LED_UpdateTransition+0x274>)
 801d71e:	4613      	mov	r3, r2
 801d720:	009b      	lsls	r3, r3, #2
 801d722:	4413      	add	r3, r2
 801d724:	009b      	lsls	r3, r3, #2
 801d726:	440b      	add	r3, r1
 801d728:	edd3 7a00 	vldr	s15, [r3]
 801d72c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d730:	edd7 6a01 	vldr	s13, [r7, #4]
 801d734:	edd7 7a04 	vldr	s15, [r7, #16]
 801d738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d73c:	7dfa      	ldrb	r2, [r7, #23]
 801d73e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d742:	4932      	ldr	r1, [pc, #200]	; (801d80c <LED_UpdateTransition+0x274>)
 801d744:	4613      	mov	r3, r2
 801d746:	009b      	lsls	r3, r3, #2
 801d748:	4413      	add	r3, r2
 801d74a:	009b      	lsls	r3, r3, #2
 801d74c:	440b      	add	r3, r1
 801d74e:	edc3 7a00 	vstr	s15, [r3]
				transitionRGB[channel].G = (1 - val) * transitionRGB[channel].G + val * newG;
 801d752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d756:	edd7 7a01 	vldr	s15, [r7, #4]
 801d75a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d75e:	7dfa      	ldrb	r2, [r7, #23]
 801d760:	492a      	ldr	r1, [pc, #168]	; (801d80c <LED_UpdateTransition+0x274>)
 801d762:	4613      	mov	r3, r2
 801d764:	009b      	lsls	r3, r3, #2
 801d766:	4413      	add	r3, r2
 801d768:	009b      	lsls	r3, r3, #2
 801d76a:	440b      	add	r3, r1
 801d76c:	3304      	adds	r3, #4
 801d76e:	edd3 7a00 	vldr	s15, [r3]
 801d772:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d776:	edd7 6a01 	vldr	s13, [r7, #4]
 801d77a:	edd7 7a03 	vldr	s15, [r7, #12]
 801d77e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d782:	7dfa      	ldrb	r2, [r7, #23]
 801d784:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d788:	4920      	ldr	r1, [pc, #128]	; (801d80c <LED_UpdateTransition+0x274>)
 801d78a:	4613      	mov	r3, r2
 801d78c:	009b      	lsls	r3, r3, #2
 801d78e:	4413      	add	r3, r2
 801d790:	009b      	lsls	r3, r3, #2
 801d792:	440b      	add	r3, r1
 801d794:	3304      	adds	r3, #4
 801d796:	edc3 7a00 	vstr	s15, [r3]
				transitionRGB[channel].B = (1 - val) * transitionRGB[channel].B + val * newB;
 801d79a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d79e:	edd7 7a01 	vldr	s15, [r7, #4]
 801d7a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d7a6:	7dfa      	ldrb	r2, [r7, #23]
 801d7a8:	4918      	ldr	r1, [pc, #96]	; (801d80c <LED_UpdateTransition+0x274>)
 801d7aa:	4613      	mov	r3, r2
 801d7ac:	009b      	lsls	r3, r3, #2
 801d7ae:	4413      	add	r3, r2
 801d7b0:	009b      	lsls	r3, r3, #2
 801d7b2:	440b      	add	r3, r1
 801d7b4:	3308      	adds	r3, #8
 801d7b6:	edd3 7a00 	vldr	s15, [r3]
 801d7ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d7be:	edd7 6a01 	vldr	s13, [r7, #4]
 801d7c2:	edd7 7a02 	vldr	s15, [r7, #8]
 801d7c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d7ca:	7dfa      	ldrb	r2, [r7, #23]
 801d7cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d7d0:	490e      	ldr	r1, [pc, #56]	; (801d80c <LED_UpdateTransition+0x274>)
 801d7d2:	4613      	mov	r3, r2
 801d7d4:	009b      	lsls	r3, r3, #2
 801d7d6:	4413      	add	r3, r2
 801d7d8:	009b      	lsls	r3, r3, #2
 801d7da:	440b      	add	r3, r1
 801d7dc:	3308      	adds	r3, #8
 801d7de:	edc3 7a00 	vstr	s15, [r3]
			break;
 801d7e2:	bf00      	nop
	for(uint8_t channel = 0; channel <= 2; channel++)
 801d7e4:	7dfb      	ldrb	r3, [r7, #23]
 801d7e6:	3301      	adds	r3, #1
 801d7e8:	75fb      	strb	r3, [r7, #23]
 801d7ea:	7dfb      	ldrb	r3, [r7, #23]
 801d7ec:	2b02      	cmp	r3, #2
 801d7ee:	f67f aed9 	bls.w	801d5a4 <LED_UpdateTransition+0xc>
		}
	}
}
 801d7f2:	bf00      	nop
 801d7f4:	bf00      	nop
 801d7f6:	3718      	adds	r7, #24
 801d7f8:	46bd      	mov	sp, r7
 801d7fa:	bd80      	pop	{r7, pc}
 801d7fc:	f3af 8000 	nop.w
 801d800:	47ae147b 	.word	0x47ae147b
 801d804:	3f847ae1 	.word	0x3f847ae1
 801d808:	20012bec 	.word	0x20012bec
 801d80c:	20012c70 	.word	0x20012c70
 801d810:	20012cac 	.word	0x20012cac
 801d814:	00000000 	.word	0x00000000

0801d818 <LED_UpdateEffect>:

void LED_UpdateEffect()
{
 801d818:	b5b0      	push	{r4, r5, r7, lr}
 801d81a:	b082      	sub	sp, #8
 801d81c:	af00      	add	r7, sp, #0
	for(uint8_t channel = 0; channel <= 2; channel++)
 801d81e:	2300      	movs	r3, #0
 801d820:	71fb      	strb	r3, [r7, #7]
 801d822:	e337      	b.n	801de94 <LED_UpdateEffect+0x67c>
	{
		switch (leds[channel].effect.type)
 801d824:	79fa      	ldrb	r2, [r7, #7]
 801d826:	49a9      	ldr	r1, [pc, #676]	; (801dacc <LED_UpdateEffect+0x2b4>)
 801d828:	4613      	mov	r3, r2
 801d82a:	005b      	lsls	r3, r3, #1
 801d82c:	4413      	add	r3, r2
 801d82e:	00db      	lsls	r3, r3, #3
 801d830:	440b      	add	r3, r1
 801d832:	330c      	adds	r3, #12
 801d834:	781b      	ldrb	r3, [r3, #0]
 801d836:	3b02      	subs	r3, #2
 801d838:	2b03      	cmp	r3, #3
 801d83a:	d80b      	bhi.n	801d854 <LED_UpdateEffect+0x3c>
 801d83c:	a201      	add	r2, pc, #4	; (adr r2, 801d844 <LED_UpdateEffect+0x2c>)
 801d83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d842:	bf00      	nop
 801d844:	0801d8bf 	.word	0x0801d8bf
 801d848:	0801d9a1 	.word	0x0801d9a1
 801d84c:	0801dad9 	.word	0x0801dad9
 801d850:	0801dbed 	.word	0x0801dbed
		{
			default: //OFF
			case EFFECT_ON:
				actualRGB[channel].R = transitionRGB[channel].R;
 801d854:	79f9      	ldrb	r1, [r7, #7]
 801d856:	79fa      	ldrb	r2, [r7, #7]
 801d858:	489d      	ldr	r0, [pc, #628]	; (801dad0 <LED_UpdateEffect+0x2b8>)
 801d85a:	460b      	mov	r3, r1
 801d85c:	009b      	lsls	r3, r3, #2
 801d85e:	440b      	add	r3, r1
 801d860:	009b      	lsls	r3, r3, #2
 801d862:	4403      	add	r3, r0
 801d864:	6819      	ldr	r1, [r3, #0]
 801d866:	489b      	ldr	r0, [pc, #620]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d868:	4613      	mov	r3, r2
 801d86a:	009b      	lsls	r3, r3, #2
 801d86c:	4413      	add	r3, r2
 801d86e:	009b      	lsls	r3, r3, #2
 801d870:	4403      	add	r3, r0
 801d872:	6019      	str	r1, [r3, #0]
				actualRGB[channel].G = transitionRGB[channel].G;
 801d874:	79f9      	ldrb	r1, [r7, #7]
 801d876:	79fa      	ldrb	r2, [r7, #7]
 801d878:	4895      	ldr	r0, [pc, #596]	; (801dad0 <LED_UpdateEffect+0x2b8>)
 801d87a:	460b      	mov	r3, r1
 801d87c:	009b      	lsls	r3, r3, #2
 801d87e:	440b      	add	r3, r1
 801d880:	009b      	lsls	r3, r3, #2
 801d882:	4403      	add	r3, r0
 801d884:	3304      	adds	r3, #4
 801d886:	6819      	ldr	r1, [r3, #0]
 801d888:	4892      	ldr	r0, [pc, #584]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d88a:	4613      	mov	r3, r2
 801d88c:	009b      	lsls	r3, r3, #2
 801d88e:	4413      	add	r3, r2
 801d890:	009b      	lsls	r3, r3, #2
 801d892:	4403      	add	r3, r0
 801d894:	3304      	adds	r3, #4
 801d896:	6019      	str	r1, [r3, #0]
				actualRGB[channel].B = transitionRGB[channel].B;
 801d898:	79f9      	ldrb	r1, [r7, #7]
 801d89a:	79fa      	ldrb	r2, [r7, #7]
 801d89c:	488c      	ldr	r0, [pc, #560]	; (801dad0 <LED_UpdateEffect+0x2b8>)
 801d89e:	460b      	mov	r3, r1
 801d8a0:	009b      	lsls	r3, r3, #2
 801d8a2:	440b      	add	r3, r1
 801d8a4:	009b      	lsls	r3, r3, #2
 801d8a6:	4403      	add	r3, r0
 801d8a8:	3308      	adds	r3, #8
 801d8aa:	6819      	ldr	r1, [r3, #0]
 801d8ac:	4889      	ldr	r0, [pc, #548]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d8ae:	4613      	mov	r3, r2
 801d8b0:	009b      	lsls	r3, r3, #2
 801d8b2:	4413      	add	r3, r2
 801d8b4:	009b      	lsls	r3, r3, #2
 801d8b6:	4403      	add	r3, r0
 801d8b8:	3308      	adds	r3, #8
 801d8ba:	6019      	str	r1, [r3, #0]
			break;
 801d8bc:	e2a0      	b.n	801de00 <LED_UpdateEffect+0x5e8>

			case EFFECT_BLINK:
				actualRGB[channel].R = actualRGB[channel].phase > 0.5 ? transitionRGB[channel].R : 0;
 801d8be:	79fa      	ldrb	r2, [r7, #7]
 801d8c0:	4984      	ldr	r1, [pc, #528]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d8c2:	4613      	mov	r3, r2
 801d8c4:	009b      	lsls	r3, r3, #2
 801d8c6:	4413      	add	r3, r2
 801d8c8:	009b      	lsls	r3, r3, #2
 801d8ca:	440b      	add	r3, r1
 801d8cc:	330c      	adds	r3, #12
 801d8ce:	edd3 7a00 	vldr	s15, [r3]
 801d8d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d8d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8de:	dd08      	ble.n	801d8f2 <LED_UpdateEffect+0xda>
 801d8e0:	79fa      	ldrb	r2, [r7, #7]
 801d8e2:	497b      	ldr	r1, [pc, #492]	; (801dad0 <LED_UpdateEffect+0x2b8>)
 801d8e4:	4613      	mov	r3, r2
 801d8e6:	009b      	lsls	r3, r3, #2
 801d8e8:	4413      	add	r3, r2
 801d8ea:	009b      	lsls	r3, r3, #2
 801d8ec:	440b      	add	r3, r1
 801d8ee:	681a      	ldr	r2, [r3, #0]
 801d8f0:	e001      	b.n	801d8f6 <LED_UpdateEffect+0xde>
 801d8f2:	f04f 0200 	mov.w	r2, #0
 801d8f6:	79f9      	ldrb	r1, [r7, #7]
 801d8f8:	4876      	ldr	r0, [pc, #472]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d8fa:	460b      	mov	r3, r1
 801d8fc:	009b      	lsls	r3, r3, #2
 801d8fe:	440b      	add	r3, r1
 801d900:	009b      	lsls	r3, r3, #2
 801d902:	4403      	add	r3, r0
 801d904:	601a      	str	r2, [r3, #0]
				actualRGB[channel].G = actualRGB[channel].phase > 0.5 ? transitionRGB[channel].G : 0;
 801d906:	79fa      	ldrb	r2, [r7, #7]
 801d908:	4972      	ldr	r1, [pc, #456]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d90a:	4613      	mov	r3, r2
 801d90c:	009b      	lsls	r3, r3, #2
 801d90e:	4413      	add	r3, r2
 801d910:	009b      	lsls	r3, r3, #2
 801d912:	440b      	add	r3, r1
 801d914:	330c      	adds	r3, #12
 801d916:	edd3 7a00 	vldr	s15, [r3]
 801d91a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d91e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d926:	dd09      	ble.n	801d93c <LED_UpdateEffect+0x124>
 801d928:	79fa      	ldrb	r2, [r7, #7]
 801d92a:	4969      	ldr	r1, [pc, #420]	; (801dad0 <LED_UpdateEffect+0x2b8>)
 801d92c:	4613      	mov	r3, r2
 801d92e:	009b      	lsls	r3, r3, #2
 801d930:	4413      	add	r3, r2
 801d932:	009b      	lsls	r3, r3, #2
 801d934:	440b      	add	r3, r1
 801d936:	3304      	adds	r3, #4
 801d938:	681a      	ldr	r2, [r3, #0]
 801d93a:	e001      	b.n	801d940 <LED_UpdateEffect+0x128>
 801d93c:	f04f 0200 	mov.w	r2, #0
 801d940:	79f9      	ldrb	r1, [r7, #7]
 801d942:	4864      	ldr	r0, [pc, #400]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d944:	460b      	mov	r3, r1
 801d946:	009b      	lsls	r3, r3, #2
 801d948:	440b      	add	r3, r1
 801d94a:	009b      	lsls	r3, r3, #2
 801d94c:	4403      	add	r3, r0
 801d94e:	3304      	adds	r3, #4
 801d950:	601a      	str	r2, [r3, #0]
				actualRGB[channel].B = actualRGB[channel].phase > 0.5 ? transitionRGB[channel].B : 0;
 801d952:	79fa      	ldrb	r2, [r7, #7]
 801d954:	495f      	ldr	r1, [pc, #380]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d956:	4613      	mov	r3, r2
 801d958:	009b      	lsls	r3, r3, #2
 801d95a:	4413      	add	r3, r2
 801d95c:	009b      	lsls	r3, r3, #2
 801d95e:	440b      	add	r3, r1
 801d960:	330c      	adds	r3, #12
 801d962:	edd3 7a00 	vldr	s15, [r3]
 801d966:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d96a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d972:	dd09      	ble.n	801d988 <LED_UpdateEffect+0x170>
 801d974:	79fa      	ldrb	r2, [r7, #7]
 801d976:	4956      	ldr	r1, [pc, #344]	; (801dad0 <LED_UpdateEffect+0x2b8>)
 801d978:	4613      	mov	r3, r2
 801d97a:	009b      	lsls	r3, r3, #2
 801d97c:	4413      	add	r3, r2
 801d97e:	009b      	lsls	r3, r3, #2
 801d980:	440b      	add	r3, r1
 801d982:	3308      	adds	r3, #8
 801d984:	681a      	ldr	r2, [r3, #0]
 801d986:	e001      	b.n	801d98c <LED_UpdateEffect+0x174>
 801d988:	f04f 0200 	mov.w	r2, #0
 801d98c:	79f9      	ldrb	r1, [r7, #7]
 801d98e:	4851      	ldr	r0, [pc, #324]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d990:	460b      	mov	r3, r1
 801d992:	009b      	lsls	r3, r3, #2
 801d994:	440b      	add	r3, r1
 801d996:	009b      	lsls	r3, r3, #2
 801d998:	4403      	add	r3, r0
 801d99a:	3308      	adds	r3, #8
 801d99c:	601a      	str	r2, [r3, #0]
			break;
 801d99e:	e22f      	b.n	801de00 <LED_UpdateEffect+0x5e8>

			case EFFECT_PULSE:
				actualRGB[channel].R = actualRGB[channel].phase > 1-leds[channel].effect.dutycycle ? transitionRGB[channel].R : 0;
 801d9a0:	79fa      	ldrb	r2, [r7, #7]
 801d9a2:	494c      	ldr	r1, [pc, #304]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d9a4:	4613      	mov	r3, r2
 801d9a6:	009b      	lsls	r3, r3, #2
 801d9a8:	4413      	add	r3, r2
 801d9aa:	009b      	lsls	r3, r3, #2
 801d9ac:	440b      	add	r3, r1
 801d9ae:	330c      	adds	r3, #12
 801d9b0:	ed93 7a00 	vldr	s14, [r3]
 801d9b4:	79fa      	ldrb	r2, [r7, #7]
 801d9b6:	4945      	ldr	r1, [pc, #276]	; (801dacc <LED_UpdateEffect+0x2b4>)
 801d9b8:	4613      	mov	r3, r2
 801d9ba:	005b      	lsls	r3, r3, #1
 801d9bc:	4413      	add	r3, r2
 801d9be:	00db      	lsls	r3, r3, #3
 801d9c0:	440b      	add	r3, r1
 801d9c2:	3310      	adds	r3, #16
 801d9c4:	edd3 7a00 	vldr	s15, [r3]
 801d9c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d9cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801d9d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9d8:	dd08      	ble.n	801d9ec <LED_UpdateEffect+0x1d4>
 801d9da:	79fa      	ldrb	r2, [r7, #7]
 801d9dc:	493c      	ldr	r1, [pc, #240]	; (801dad0 <LED_UpdateEffect+0x2b8>)
 801d9de:	4613      	mov	r3, r2
 801d9e0:	009b      	lsls	r3, r3, #2
 801d9e2:	4413      	add	r3, r2
 801d9e4:	009b      	lsls	r3, r3, #2
 801d9e6:	440b      	add	r3, r1
 801d9e8:	681a      	ldr	r2, [r3, #0]
 801d9ea:	e001      	b.n	801d9f0 <LED_UpdateEffect+0x1d8>
 801d9ec:	f04f 0200 	mov.w	r2, #0
 801d9f0:	79f9      	ldrb	r1, [r7, #7]
 801d9f2:	4838      	ldr	r0, [pc, #224]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801d9f4:	460b      	mov	r3, r1
 801d9f6:	009b      	lsls	r3, r3, #2
 801d9f8:	440b      	add	r3, r1
 801d9fa:	009b      	lsls	r3, r3, #2
 801d9fc:	4403      	add	r3, r0
 801d9fe:	601a      	str	r2, [r3, #0]
				actualRGB[channel].G = actualRGB[channel].phase > 1-leds[channel].effect.dutycycle ? transitionRGB[channel].G : 0;
 801da00:	79fa      	ldrb	r2, [r7, #7]
 801da02:	4934      	ldr	r1, [pc, #208]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801da04:	4613      	mov	r3, r2
 801da06:	009b      	lsls	r3, r3, #2
 801da08:	4413      	add	r3, r2
 801da0a:	009b      	lsls	r3, r3, #2
 801da0c:	440b      	add	r3, r1
 801da0e:	330c      	adds	r3, #12
 801da10:	ed93 7a00 	vldr	s14, [r3]
 801da14:	79fa      	ldrb	r2, [r7, #7]
 801da16:	492d      	ldr	r1, [pc, #180]	; (801dacc <LED_UpdateEffect+0x2b4>)
 801da18:	4613      	mov	r3, r2
 801da1a:	005b      	lsls	r3, r3, #1
 801da1c:	4413      	add	r3, r2
 801da1e:	00db      	lsls	r3, r3, #3
 801da20:	440b      	add	r3, r1
 801da22:	3310      	adds	r3, #16
 801da24:	edd3 7a00 	vldr	s15, [r3]
 801da28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801da30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801da34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da38:	dd09      	ble.n	801da4e <LED_UpdateEffect+0x236>
 801da3a:	79fa      	ldrb	r2, [r7, #7]
 801da3c:	4924      	ldr	r1, [pc, #144]	; (801dad0 <LED_UpdateEffect+0x2b8>)
 801da3e:	4613      	mov	r3, r2
 801da40:	009b      	lsls	r3, r3, #2
 801da42:	4413      	add	r3, r2
 801da44:	009b      	lsls	r3, r3, #2
 801da46:	440b      	add	r3, r1
 801da48:	3304      	adds	r3, #4
 801da4a:	681a      	ldr	r2, [r3, #0]
 801da4c:	e001      	b.n	801da52 <LED_UpdateEffect+0x23a>
 801da4e:	f04f 0200 	mov.w	r2, #0
 801da52:	79f9      	ldrb	r1, [r7, #7]
 801da54:	481f      	ldr	r0, [pc, #124]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801da56:	460b      	mov	r3, r1
 801da58:	009b      	lsls	r3, r3, #2
 801da5a:	440b      	add	r3, r1
 801da5c:	009b      	lsls	r3, r3, #2
 801da5e:	4403      	add	r3, r0
 801da60:	3304      	adds	r3, #4
 801da62:	601a      	str	r2, [r3, #0]
				actualRGB[channel].B = actualRGB[channel].phase > 1-leds[channel].effect.dutycycle ? transitionRGB[channel].B : 0;
 801da64:	79fa      	ldrb	r2, [r7, #7]
 801da66:	491b      	ldr	r1, [pc, #108]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801da68:	4613      	mov	r3, r2
 801da6a:	009b      	lsls	r3, r3, #2
 801da6c:	4413      	add	r3, r2
 801da6e:	009b      	lsls	r3, r3, #2
 801da70:	440b      	add	r3, r1
 801da72:	330c      	adds	r3, #12
 801da74:	ed93 7a00 	vldr	s14, [r3]
 801da78:	79fa      	ldrb	r2, [r7, #7]
 801da7a:	4914      	ldr	r1, [pc, #80]	; (801dacc <LED_UpdateEffect+0x2b4>)
 801da7c:	4613      	mov	r3, r2
 801da7e:	005b      	lsls	r3, r3, #1
 801da80:	4413      	add	r3, r2
 801da82:	00db      	lsls	r3, r3, #3
 801da84:	440b      	add	r3, r1
 801da86:	3310      	adds	r3, #16
 801da88:	edd3 7a00 	vldr	s15, [r3]
 801da8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801da94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801da98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da9c:	dd09      	ble.n	801dab2 <LED_UpdateEffect+0x29a>
 801da9e:	79fa      	ldrb	r2, [r7, #7]
 801daa0:	490b      	ldr	r1, [pc, #44]	; (801dad0 <LED_UpdateEffect+0x2b8>)
 801daa2:	4613      	mov	r3, r2
 801daa4:	009b      	lsls	r3, r3, #2
 801daa6:	4413      	add	r3, r2
 801daa8:	009b      	lsls	r3, r3, #2
 801daaa:	440b      	add	r3, r1
 801daac:	3308      	adds	r3, #8
 801daae:	681a      	ldr	r2, [r3, #0]
 801dab0:	e001      	b.n	801dab6 <LED_UpdateEffect+0x29e>
 801dab2:	f04f 0200 	mov.w	r2, #0
 801dab6:	79f9      	ldrb	r1, [r7, #7]
 801dab8:	4806      	ldr	r0, [pc, #24]	; (801dad4 <LED_UpdateEffect+0x2bc>)
 801daba:	460b      	mov	r3, r1
 801dabc:	009b      	lsls	r3, r3, #2
 801dabe:	440b      	add	r3, r1
 801dac0:	009b      	lsls	r3, r3, #2
 801dac2:	4403      	add	r3, r0
 801dac4:	3308      	adds	r3, #8
 801dac6:	601a      	str	r2, [r3, #0]
			break;
 801dac8:	e19a      	b.n	801de00 <LED_UpdateEffect+0x5e8>
 801daca:	bf00      	nop
 801dacc:	20012bec 	.word	0x20012bec
 801dad0:	20012c70 	.word	0x20012c70
 801dad4:	20012c34 	.word	0x20012c34

			case EFFECT_BREATHE:
				float val = 0.5 + 0.5 * cosf(6.28 * actualRGB[channel].phase);
 801dad8:	79fa      	ldrb	r2, [r7, #7]
 801dada:	4941      	ldr	r1, [pc, #260]	; (801dbe0 <LED_UpdateEffect+0x3c8>)
 801dadc:	4613      	mov	r3, r2
 801dade:	009b      	lsls	r3, r3, #2
 801dae0:	4413      	add	r3, r2
 801dae2:	009b      	lsls	r3, r3, #2
 801dae4:	440b      	add	r3, r1
 801dae6:	330c      	adds	r3, #12
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	4618      	mov	r0, r3
 801daec:	f7e8 f9b4 	bl	8005e58 <__aeabi_f2d>
 801daf0:	a339      	add	r3, pc, #228	; (adr r3, 801dbd8 <LED_UpdateEffect+0x3c0>)
 801daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daf6:	f7e8 fa07 	bl	8005f08 <__aeabi_dmul>
 801dafa:	4602      	mov	r2, r0
 801dafc:	460b      	mov	r3, r1
 801dafe:	4610      	mov	r0, r2
 801db00:	4619      	mov	r1, r3
 801db02:	f7e8 fcbb 	bl	800647c <__aeabi_d2f>
 801db06:	4603      	mov	r3, r0
 801db08:	ee00 3a10 	vmov	s0, r3
 801db0c:	f004 fee4 	bl	80228d8 <cosf>
 801db10:	ee10 3a10 	vmov	r3, s0
 801db14:	4618      	mov	r0, r3
 801db16:	f7e8 f99f 	bl	8005e58 <__aeabi_f2d>
 801db1a:	f04f 0200 	mov.w	r2, #0
 801db1e:	4b31      	ldr	r3, [pc, #196]	; (801dbe4 <LED_UpdateEffect+0x3cc>)
 801db20:	f7e8 f9f2 	bl	8005f08 <__aeabi_dmul>
 801db24:	4602      	mov	r2, r0
 801db26:	460b      	mov	r3, r1
 801db28:	4610      	mov	r0, r2
 801db2a:	4619      	mov	r1, r3
 801db2c:	f04f 0200 	mov.w	r2, #0
 801db30:	4b2c      	ldr	r3, [pc, #176]	; (801dbe4 <LED_UpdateEffect+0x3cc>)
 801db32:	f7e8 f833 	bl	8005b9c <__adddf3>
 801db36:	4602      	mov	r2, r0
 801db38:	460b      	mov	r3, r1
 801db3a:	4610      	mov	r0, r2
 801db3c:	4619      	mov	r1, r3
 801db3e:	f7e8 fc9d 	bl	800647c <__aeabi_d2f>
 801db42:	4603      	mov	r3, r0
 801db44:	603b      	str	r3, [r7, #0]
				actualRGB[channel].R = transitionRGB[channel].R * val;
 801db46:	79fa      	ldrb	r2, [r7, #7]
 801db48:	4927      	ldr	r1, [pc, #156]	; (801dbe8 <LED_UpdateEffect+0x3d0>)
 801db4a:	4613      	mov	r3, r2
 801db4c:	009b      	lsls	r3, r3, #2
 801db4e:	4413      	add	r3, r2
 801db50:	009b      	lsls	r3, r3, #2
 801db52:	440b      	add	r3, r1
 801db54:	ed93 7a00 	vldr	s14, [r3]
 801db58:	79fa      	ldrb	r2, [r7, #7]
 801db5a:	edd7 7a00 	vldr	s15, [r7]
 801db5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db62:	491f      	ldr	r1, [pc, #124]	; (801dbe0 <LED_UpdateEffect+0x3c8>)
 801db64:	4613      	mov	r3, r2
 801db66:	009b      	lsls	r3, r3, #2
 801db68:	4413      	add	r3, r2
 801db6a:	009b      	lsls	r3, r3, #2
 801db6c:	440b      	add	r3, r1
 801db6e:	edc3 7a00 	vstr	s15, [r3]
				actualRGB[channel].G = transitionRGB[channel].G * val;
 801db72:	79fa      	ldrb	r2, [r7, #7]
 801db74:	491c      	ldr	r1, [pc, #112]	; (801dbe8 <LED_UpdateEffect+0x3d0>)
 801db76:	4613      	mov	r3, r2
 801db78:	009b      	lsls	r3, r3, #2
 801db7a:	4413      	add	r3, r2
 801db7c:	009b      	lsls	r3, r3, #2
 801db7e:	440b      	add	r3, r1
 801db80:	3304      	adds	r3, #4
 801db82:	ed93 7a00 	vldr	s14, [r3]
 801db86:	79fa      	ldrb	r2, [r7, #7]
 801db88:	edd7 7a00 	vldr	s15, [r7]
 801db8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db90:	4913      	ldr	r1, [pc, #76]	; (801dbe0 <LED_UpdateEffect+0x3c8>)
 801db92:	4613      	mov	r3, r2
 801db94:	009b      	lsls	r3, r3, #2
 801db96:	4413      	add	r3, r2
 801db98:	009b      	lsls	r3, r3, #2
 801db9a:	440b      	add	r3, r1
 801db9c:	3304      	adds	r3, #4
 801db9e:	edc3 7a00 	vstr	s15, [r3]
				actualRGB[channel].B = transitionRGB[channel].B * val;
 801dba2:	79fa      	ldrb	r2, [r7, #7]
 801dba4:	4910      	ldr	r1, [pc, #64]	; (801dbe8 <LED_UpdateEffect+0x3d0>)
 801dba6:	4613      	mov	r3, r2
 801dba8:	009b      	lsls	r3, r3, #2
 801dbaa:	4413      	add	r3, r2
 801dbac:	009b      	lsls	r3, r3, #2
 801dbae:	440b      	add	r3, r1
 801dbb0:	3308      	adds	r3, #8
 801dbb2:	ed93 7a00 	vldr	s14, [r3]
 801dbb6:	79fa      	ldrb	r2, [r7, #7]
 801dbb8:	edd7 7a00 	vldr	s15, [r7]
 801dbbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dbc0:	4907      	ldr	r1, [pc, #28]	; (801dbe0 <LED_UpdateEffect+0x3c8>)
 801dbc2:	4613      	mov	r3, r2
 801dbc4:	009b      	lsls	r3, r3, #2
 801dbc6:	4413      	add	r3, r2
 801dbc8:	009b      	lsls	r3, r3, #2
 801dbca:	440b      	add	r3, r1
 801dbcc:	3308      	adds	r3, #8
 801dbce:	edc3 7a00 	vstr	s15, [r3]
			break;
 801dbd2:	e115      	b.n	801de00 <LED_UpdateEffect+0x5e8>
 801dbd4:	f3af 8000 	nop.w
 801dbd8:	51eb851f 	.word	0x51eb851f
 801dbdc:	40191eb8 	.word	0x40191eb8
 801dbe0:	20012c34 	.word	0x20012c34
 801dbe4:	3fe00000 	.word	0x3fe00000
 801dbe8:	20012c70 	.word	0x20012c70

			case EFFECT_COLORSHIFT:
				actualRGB[channel].R = transitionRGB[channel].R * (0.55 + 0.45 * cosf(6.28 * actualRGB[channel].phase));
 801dbec:	79fa      	ldrb	r2, [r7, #7]
 801dbee:	49b8      	ldr	r1, [pc, #736]	; (801ded0 <LED_UpdateEffect+0x6b8>)
 801dbf0:	4613      	mov	r3, r2
 801dbf2:	009b      	lsls	r3, r3, #2
 801dbf4:	4413      	add	r3, r2
 801dbf6:	009b      	lsls	r3, r3, #2
 801dbf8:	440b      	add	r3, r1
 801dbfa:	681b      	ldr	r3, [r3, #0]
 801dbfc:	4618      	mov	r0, r3
 801dbfe:	f7e8 f92b 	bl	8005e58 <__aeabi_f2d>
 801dc02:	4604      	mov	r4, r0
 801dc04:	460d      	mov	r5, r1
 801dc06:	79fa      	ldrb	r2, [r7, #7]
 801dc08:	49b2      	ldr	r1, [pc, #712]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801dc0a:	4613      	mov	r3, r2
 801dc0c:	009b      	lsls	r3, r3, #2
 801dc0e:	4413      	add	r3, r2
 801dc10:	009b      	lsls	r3, r3, #2
 801dc12:	440b      	add	r3, r1
 801dc14:	330c      	adds	r3, #12
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	4618      	mov	r0, r3
 801dc1a:	f7e8 f91d 	bl	8005e58 <__aeabi_f2d>
 801dc1e:	a3a2      	add	r3, pc, #648	; (adr r3, 801dea8 <LED_UpdateEffect+0x690>)
 801dc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc24:	f7e8 f970 	bl	8005f08 <__aeabi_dmul>
 801dc28:	4602      	mov	r2, r0
 801dc2a:	460b      	mov	r3, r1
 801dc2c:	4610      	mov	r0, r2
 801dc2e:	4619      	mov	r1, r3
 801dc30:	f7e8 fc24 	bl	800647c <__aeabi_d2f>
 801dc34:	4603      	mov	r3, r0
 801dc36:	ee00 3a10 	vmov	s0, r3
 801dc3a:	f004 fe4d 	bl	80228d8 <cosf>
 801dc3e:	ee10 3a10 	vmov	r3, s0
 801dc42:	4618      	mov	r0, r3
 801dc44:	f7e8 f908 	bl	8005e58 <__aeabi_f2d>
 801dc48:	a399      	add	r3, pc, #612	; (adr r3, 801deb0 <LED_UpdateEffect+0x698>)
 801dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc4e:	f7e8 f95b 	bl	8005f08 <__aeabi_dmul>
 801dc52:	4602      	mov	r2, r0
 801dc54:	460b      	mov	r3, r1
 801dc56:	4610      	mov	r0, r2
 801dc58:	4619      	mov	r1, r3
 801dc5a:	a397      	add	r3, pc, #604	; (adr r3, 801deb8 <LED_UpdateEffect+0x6a0>)
 801dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc60:	f7e7 ff9c 	bl	8005b9c <__adddf3>
 801dc64:	4602      	mov	r2, r0
 801dc66:	460b      	mov	r3, r1
 801dc68:	4620      	mov	r0, r4
 801dc6a:	4629      	mov	r1, r5
 801dc6c:	f7e8 f94c 	bl	8005f08 <__aeabi_dmul>
 801dc70:	4602      	mov	r2, r0
 801dc72:	460b      	mov	r3, r1
 801dc74:	79fc      	ldrb	r4, [r7, #7]
 801dc76:	4610      	mov	r0, r2
 801dc78:	4619      	mov	r1, r3
 801dc7a:	f7e8 fbff 	bl	800647c <__aeabi_d2f>
 801dc7e:	4602      	mov	r2, r0
 801dc80:	4994      	ldr	r1, [pc, #592]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801dc82:	4623      	mov	r3, r4
 801dc84:	009b      	lsls	r3, r3, #2
 801dc86:	4423      	add	r3, r4
 801dc88:	009b      	lsls	r3, r3, #2
 801dc8a:	440b      	add	r3, r1
 801dc8c:	601a      	str	r2, [r3, #0]
				actualRGB[channel].G = transitionRGB[channel].G * (0.55 + 0.45 * cosf(6.28 * actualRGB[channel].phase + 2.1));
 801dc8e:	79fa      	ldrb	r2, [r7, #7]
 801dc90:	498f      	ldr	r1, [pc, #572]	; (801ded0 <LED_UpdateEffect+0x6b8>)
 801dc92:	4613      	mov	r3, r2
 801dc94:	009b      	lsls	r3, r3, #2
 801dc96:	4413      	add	r3, r2
 801dc98:	009b      	lsls	r3, r3, #2
 801dc9a:	440b      	add	r3, r1
 801dc9c:	3304      	adds	r3, #4
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	4618      	mov	r0, r3
 801dca2:	f7e8 f8d9 	bl	8005e58 <__aeabi_f2d>
 801dca6:	4604      	mov	r4, r0
 801dca8:	460d      	mov	r5, r1
 801dcaa:	79fa      	ldrb	r2, [r7, #7]
 801dcac:	4989      	ldr	r1, [pc, #548]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801dcae:	4613      	mov	r3, r2
 801dcb0:	009b      	lsls	r3, r3, #2
 801dcb2:	4413      	add	r3, r2
 801dcb4:	009b      	lsls	r3, r3, #2
 801dcb6:	440b      	add	r3, r1
 801dcb8:	330c      	adds	r3, #12
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	4618      	mov	r0, r3
 801dcbe:	f7e8 f8cb 	bl	8005e58 <__aeabi_f2d>
 801dcc2:	a379      	add	r3, pc, #484	; (adr r3, 801dea8 <LED_UpdateEffect+0x690>)
 801dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcc8:	f7e8 f91e 	bl	8005f08 <__aeabi_dmul>
 801dccc:	4602      	mov	r2, r0
 801dcce:	460b      	mov	r3, r1
 801dcd0:	4610      	mov	r0, r2
 801dcd2:	4619      	mov	r1, r3
 801dcd4:	a37a      	add	r3, pc, #488	; (adr r3, 801dec0 <LED_UpdateEffect+0x6a8>)
 801dcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcda:	f7e7 ff5f 	bl	8005b9c <__adddf3>
 801dcde:	4602      	mov	r2, r0
 801dce0:	460b      	mov	r3, r1
 801dce2:	4610      	mov	r0, r2
 801dce4:	4619      	mov	r1, r3
 801dce6:	f7e8 fbc9 	bl	800647c <__aeabi_d2f>
 801dcea:	4603      	mov	r3, r0
 801dcec:	ee00 3a10 	vmov	s0, r3
 801dcf0:	f004 fdf2 	bl	80228d8 <cosf>
 801dcf4:	ee10 3a10 	vmov	r3, s0
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	f7e8 f8ad 	bl	8005e58 <__aeabi_f2d>
 801dcfe:	a36c      	add	r3, pc, #432	; (adr r3, 801deb0 <LED_UpdateEffect+0x698>)
 801dd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd04:	f7e8 f900 	bl	8005f08 <__aeabi_dmul>
 801dd08:	4602      	mov	r2, r0
 801dd0a:	460b      	mov	r3, r1
 801dd0c:	4610      	mov	r0, r2
 801dd0e:	4619      	mov	r1, r3
 801dd10:	a369      	add	r3, pc, #420	; (adr r3, 801deb8 <LED_UpdateEffect+0x6a0>)
 801dd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd16:	f7e7 ff41 	bl	8005b9c <__adddf3>
 801dd1a:	4602      	mov	r2, r0
 801dd1c:	460b      	mov	r3, r1
 801dd1e:	4620      	mov	r0, r4
 801dd20:	4629      	mov	r1, r5
 801dd22:	f7e8 f8f1 	bl	8005f08 <__aeabi_dmul>
 801dd26:	4602      	mov	r2, r0
 801dd28:	460b      	mov	r3, r1
 801dd2a:	79fc      	ldrb	r4, [r7, #7]
 801dd2c:	4610      	mov	r0, r2
 801dd2e:	4619      	mov	r1, r3
 801dd30:	f7e8 fba4 	bl	800647c <__aeabi_d2f>
 801dd34:	4602      	mov	r2, r0
 801dd36:	4967      	ldr	r1, [pc, #412]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801dd38:	4623      	mov	r3, r4
 801dd3a:	009b      	lsls	r3, r3, #2
 801dd3c:	4423      	add	r3, r4
 801dd3e:	009b      	lsls	r3, r3, #2
 801dd40:	440b      	add	r3, r1
 801dd42:	3304      	adds	r3, #4
 801dd44:	601a      	str	r2, [r3, #0]
				actualRGB[channel].B = transitionRGB[channel].B * (0.55 + 0.45 * cosf(6.28 * actualRGB[channel].phase + 4.2));
 801dd46:	79fa      	ldrb	r2, [r7, #7]
 801dd48:	4961      	ldr	r1, [pc, #388]	; (801ded0 <LED_UpdateEffect+0x6b8>)
 801dd4a:	4613      	mov	r3, r2
 801dd4c:	009b      	lsls	r3, r3, #2
 801dd4e:	4413      	add	r3, r2
 801dd50:	009b      	lsls	r3, r3, #2
 801dd52:	440b      	add	r3, r1
 801dd54:	3308      	adds	r3, #8
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	4618      	mov	r0, r3
 801dd5a:	f7e8 f87d 	bl	8005e58 <__aeabi_f2d>
 801dd5e:	4604      	mov	r4, r0
 801dd60:	460d      	mov	r5, r1
 801dd62:	79fa      	ldrb	r2, [r7, #7]
 801dd64:	495b      	ldr	r1, [pc, #364]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801dd66:	4613      	mov	r3, r2
 801dd68:	009b      	lsls	r3, r3, #2
 801dd6a:	4413      	add	r3, r2
 801dd6c:	009b      	lsls	r3, r3, #2
 801dd6e:	440b      	add	r3, r1
 801dd70:	330c      	adds	r3, #12
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	4618      	mov	r0, r3
 801dd76:	f7e8 f86f 	bl	8005e58 <__aeabi_f2d>
 801dd7a:	a34b      	add	r3, pc, #300	; (adr r3, 801dea8 <LED_UpdateEffect+0x690>)
 801dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd80:	f7e8 f8c2 	bl	8005f08 <__aeabi_dmul>
 801dd84:	4602      	mov	r2, r0
 801dd86:	460b      	mov	r3, r1
 801dd88:	4610      	mov	r0, r2
 801dd8a:	4619      	mov	r1, r3
 801dd8c:	a34e      	add	r3, pc, #312	; (adr r3, 801dec8 <LED_UpdateEffect+0x6b0>)
 801dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd92:	f7e7 ff03 	bl	8005b9c <__adddf3>
 801dd96:	4602      	mov	r2, r0
 801dd98:	460b      	mov	r3, r1
 801dd9a:	4610      	mov	r0, r2
 801dd9c:	4619      	mov	r1, r3
 801dd9e:	f7e8 fb6d 	bl	800647c <__aeabi_d2f>
 801dda2:	4603      	mov	r3, r0
 801dda4:	ee00 3a10 	vmov	s0, r3
 801dda8:	f004 fd96 	bl	80228d8 <cosf>
 801ddac:	ee10 3a10 	vmov	r3, s0
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	f7e8 f851 	bl	8005e58 <__aeabi_f2d>
 801ddb6:	a33e      	add	r3, pc, #248	; (adr r3, 801deb0 <LED_UpdateEffect+0x698>)
 801ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddbc:	f7e8 f8a4 	bl	8005f08 <__aeabi_dmul>
 801ddc0:	4602      	mov	r2, r0
 801ddc2:	460b      	mov	r3, r1
 801ddc4:	4610      	mov	r0, r2
 801ddc6:	4619      	mov	r1, r3
 801ddc8:	a33b      	add	r3, pc, #236	; (adr r3, 801deb8 <LED_UpdateEffect+0x6a0>)
 801ddca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddce:	f7e7 fee5 	bl	8005b9c <__adddf3>
 801ddd2:	4602      	mov	r2, r0
 801ddd4:	460b      	mov	r3, r1
 801ddd6:	4620      	mov	r0, r4
 801ddd8:	4629      	mov	r1, r5
 801ddda:	f7e8 f895 	bl	8005f08 <__aeabi_dmul>
 801ddde:	4602      	mov	r2, r0
 801dde0:	460b      	mov	r3, r1
 801dde2:	79fc      	ldrb	r4, [r7, #7]
 801dde4:	4610      	mov	r0, r2
 801dde6:	4619      	mov	r1, r3
 801dde8:	f7e8 fb48 	bl	800647c <__aeabi_d2f>
 801ddec:	4602      	mov	r2, r0
 801ddee:	4939      	ldr	r1, [pc, #228]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801ddf0:	4623      	mov	r3, r4
 801ddf2:	009b      	lsls	r3, r3, #2
 801ddf4:	4423      	add	r3, r4
 801ddf6:	009b      	lsls	r3, r3, #2
 801ddf8:	440b      	add	r3, r1
 801ddfa:	3308      	adds	r3, #8
 801ddfc:	601a      	str	r2, [r3, #0]
			break;
 801ddfe:	bf00      	nop
		}
		actualRGB[channel].phase += period/(float)(leds[channel].effect.period);
 801de00:	79fa      	ldrb	r2, [r7, #7]
 801de02:	4934      	ldr	r1, [pc, #208]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801de04:	4613      	mov	r3, r2
 801de06:	009b      	lsls	r3, r3, #2
 801de08:	4413      	add	r3, r2
 801de0a:	009b      	lsls	r3, r3, #2
 801de0c:	440b      	add	r3, r1
 801de0e:	330c      	adds	r3, #12
 801de10:	ed93 7a00 	vldr	s14, [r3]
 801de14:	4b30      	ldr	r3, [pc, #192]	; (801ded8 <LED_UpdateEffect+0x6c0>)
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	ee07 3a90 	vmov	s15, r3
 801de1c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801de20:	79fa      	ldrb	r2, [r7, #7]
 801de22:	492e      	ldr	r1, [pc, #184]	; (801dedc <LED_UpdateEffect+0x6c4>)
 801de24:	4613      	mov	r3, r2
 801de26:	005b      	lsls	r3, r3, #1
 801de28:	4413      	add	r3, r2
 801de2a:	00db      	lsls	r3, r3, #3
 801de2c:	440b      	add	r3, r1
 801de2e:	330e      	adds	r3, #14
 801de30:	881b      	ldrh	r3, [r3, #0]
 801de32:	ee07 3a90 	vmov	s15, r3
 801de36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de3a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801de3e:	79fa      	ldrb	r2, [r7, #7]
 801de40:	ee77 7a27 	vadd.f32	s15, s14, s15
 801de44:	4923      	ldr	r1, [pc, #140]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801de46:	4613      	mov	r3, r2
 801de48:	009b      	lsls	r3, r3, #2
 801de4a:	4413      	add	r3, r2
 801de4c:	009b      	lsls	r3, r3, #2
 801de4e:	440b      	add	r3, r1
 801de50:	330c      	adds	r3, #12
 801de52:	edc3 7a00 	vstr	s15, [r3]
		if(actualRGB[channel].phase > 1) actualRGB[channel].phase = 0;
 801de56:	79fa      	ldrb	r2, [r7, #7]
 801de58:	491e      	ldr	r1, [pc, #120]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801de5a:	4613      	mov	r3, r2
 801de5c:	009b      	lsls	r3, r3, #2
 801de5e:	4413      	add	r3, r2
 801de60:	009b      	lsls	r3, r3, #2
 801de62:	440b      	add	r3, r1
 801de64:	330c      	adds	r3, #12
 801de66:	edd3 7a00 	vldr	s15, [r3]
 801de6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801de72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de76:	dd0a      	ble.n	801de8e <LED_UpdateEffect+0x676>
 801de78:	79fa      	ldrb	r2, [r7, #7]
 801de7a:	4916      	ldr	r1, [pc, #88]	; (801ded4 <LED_UpdateEffect+0x6bc>)
 801de7c:	4613      	mov	r3, r2
 801de7e:	009b      	lsls	r3, r3, #2
 801de80:	4413      	add	r3, r2
 801de82:	009b      	lsls	r3, r3, #2
 801de84:	440b      	add	r3, r1
 801de86:	330c      	adds	r3, #12
 801de88:	f04f 0200 	mov.w	r2, #0
 801de8c:	601a      	str	r2, [r3, #0]
	for(uint8_t channel = 0; channel <= 2; channel++)
 801de8e:	79fb      	ldrb	r3, [r7, #7]
 801de90:	3301      	adds	r3, #1
 801de92:	71fb      	strb	r3, [r7, #7]
 801de94:	79fb      	ldrb	r3, [r7, #7]
 801de96:	2b02      	cmp	r3, #2
 801de98:	f67f acc4 	bls.w	801d824 <LED_UpdateEffect+0xc>
	}
}
 801de9c:	bf00      	nop
 801de9e:	bf00      	nop
 801dea0:	3708      	adds	r7, #8
 801dea2:	46bd      	mov	sp, r7
 801dea4:	bdb0      	pop	{r4, r5, r7, pc}
 801dea6:	bf00      	nop
 801dea8:	51eb851f 	.word	0x51eb851f
 801deac:	40191eb8 	.word	0x40191eb8
 801deb0:	cccccccd 	.word	0xcccccccd
 801deb4:	3fdccccc 	.word	0x3fdccccc
 801deb8:	9999999a 	.word	0x9999999a
 801debc:	3fe19999 	.word	0x3fe19999
 801dec0:	cccccccd 	.word	0xcccccccd
 801dec4:	4000cccc 	.word	0x4000cccc
 801dec8:	cccccccd 	.word	0xcccccccd
 801decc:	4010cccc 	.word	0x4010cccc
 801ded0:	20012c70 	.word	0x20012c70
 801ded4:	20012c34 	.word	0x20012c34
 801ded8:	20012cac 	.word	0x20012cac
 801dedc:	20012bec 	.word	0x20012bec

0801dee0 <LED_Iterate>:

void LED_Iterate()
{
 801dee0:	b590      	push	{r4, r7, lr}
 801dee2:	b083      	sub	sp, #12
 801dee4:	af00      	add	r7, sp, #0
	LEDPosition++;
 801dee6:	4b56      	ldr	r3, [pc, #344]	; (801e040 <LED_Iterate+0x160>)
 801dee8:	781b      	ldrb	r3, [r3, #0]
 801deea:	3301      	adds	r3, #1
 801deec:	b2da      	uxtb	r2, r3
 801deee:	4b54      	ldr	r3, [pc, #336]	; (801e040 <LED_Iterate+0x160>)
 801def0:	701a      	strb	r2, [r3, #0]
	if(LEDPosition > 2) LEDPosition = 0;
 801def2:	4b53      	ldr	r3, [pc, #332]	; (801e040 <LED_Iterate+0x160>)
 801def4:	781b      	ldrb	r3, [r3, #0]
 801def6:	2b02      	cmp	r3, #2
 801def8:	d902      	bls.n	801df00 <LED_Iterate+0x20>
 801defa:	4b51      	ldr	r3, [pc, #324]	; (801e040 <LED_Iterate+0x160>)
 801defc:	2200      	movs	r2, #0
 801defe:	701a      	strb	r2, [r3, #0]

	LED_PWMSET(actualRGB[LEDPosition].R, actualRGB[LEDPosition].G, actualRGB[LEDPosition].B);
 801df00:	4b4f      	ldr	r3, [pc, #316]	; (801e040 <LED_Iterate+0x160>)
 801df02:	781b      	ldrb	r3, [r3, #0]
 801df04:	4619      	mov	r1, r3
 801df06:	4a4f      	ldr	r2, [pc, #316]	; (801e044 <LED_Iterate+0x164>)
 801df08:	460b      	mov	r3, r1
 801df0a:	009b      	lsls	r3, r3, #2
 801df0c:	440b      	add	r3, r1
 801df0e:	009b      	lsls	r3, r3, #2
 801df10:	4413      	add	r3, r2
 801df12:	edd3 7a00 	vldr	s15, [r3]
 801df16:	4b4a      	ldr	r3, [pc, #296]	; (801e040 <LED_Iterate+0x160>)
 801df18:	781b      	ldrb	r3, [r3, #0]
 801df1a:	4619      	mov	r1, r3
 801df1c:	4a49      	ldr	r2, [pc, #292]	; (801e044 <LED_Iterate+0x164>)
 801df1e:	460b      	mov	r3, r1
 801df20:	009b      	lsls	r3, r3, #2
 801df22:	440b      	add	r3, r1
 801df24:	009b      	lsls	r3, r3, #2
 801df26:	4413      	add	r3, r2
 801df28:	3304      	adds	r3, #4
 801df2a:	ed93 7a00 	vldr	s14, [r3]
 801df2e:	4b44      	ldr	r3, [pc, #272]	; (801e040 <LED_Iterate+0x160>)
 801df30:	781b      	ldrb	r3, [r3, #0]
 801df32:	4619      	mov	r1, r3
 801df34:	4a43      	ldr	r2, [pc, #268]	; (801e044 <LED_Iterate+0x164>)
 801df36:	460b      	mov	r3, r1
 801df38:	009b      	lsls	r3, r3, #2
 801df3a:	440b      	add	r3, r1
 801df3c:	009b      	lsls	r3, r3, #2
 801df3e:	4413      	add	r3, r2
 801df40:	3308      	adds	r3, #8
 801df42:	edd3 6a00 	vldr	s13, [r3]
 801df46:	eeb0 1a66 	vmov.f32	s2, s13
 801df4a:	eef0 0a47 	vmov.f32	s1, s14
 801df4e:	eeb0 0a67 	vmov.f32	s0, s15
 801df52:	f000 f87b 	bl	801e04c <LED_PWMSET>

	uint8_t enabler = (actualRGB[LEDPosition].R + actualRGB[LEDPosition].G + actualRGB[LEDPosition].B) > 0.005 ? 1 : 0;
 801df56:	4b3a      	ldr	r3, [pc, #232]	; (801e040 <LED_Iterate+0x160>)
 801df58:	781b      	ldrb	r3, [r3, #0]
 801df5a:	4619      	mov	r1, r3
 801df5c:	4a39      	ldr	r2, [pc, #228]	; (801e044 <LED_Iterate+0x164>)
 801df5e:	460b      	mov	r3, r1
 801df60:	009b      	lsls	r3, r3, #2
 801df62:	440b      	add	r3, r1
 801df64:	009b      	lsls	r3, r3, #2
 801df66:	4413      	add	r3, r2
 801df68:	ed93 7a00 	vldr	s14, [r3]
 801df6c:	4b34      	ldr	r3, [pc, #208]	; (801e040 <LED_Iterate+0x160>)
 801df6e:	781b      	ldrb	r3, [r3, #0]
 801df70:	4619      	mov	r1, r3
 801df72:	4a34      	ldr	r2, [pc, #208]	; (801e044 <LED_Iterate+0x164>)
 801df74:	460b      	mov	r3, r1
 801df76:	009b      	lsls	r3, r3, #2
 801df78:	440b      	add	r3, r1
 801df7a:	009b      	lsls	r3, r3, #2
 801df7c:	4413      	add	r3, r2
 801df7e:	3304      	adds	r3, #4
 801df80:	edd3 7a00 	vldr	s15, [r3]
 801df84:	ee37 7a27 	vadd.f32	s14, s14, s15
 801df88:	4b2d      	ldr	r3, [pc, #180]	; (801e040 <LED_Iterate+0x160>)
 801df8a:	781b      	ldrb	r3, [r3, #0]
 801df8c:	4619      	mov	r1, r3
 801df8e:	4a2d      	ldr	r2, [pc, #180]	; (801e044 <LED_Iterate+0x164>)
 801df90:	460b      	mov	r3, r1
 801df92:	009b      	lsls	r3, r3, #2
 801df94:	440b      	add	r3, r1
 801df96:	009b      	lsls	r3, r3, #2
 801df98:	4413      	add	r3, r2
 801df9a:	3308      	adds	r3, #8
 801df9c:	edd3 7a00 	vldr	s15, [r3]
 801dfa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dfa4:	ee17 0a90 	vmov	r0, s15
 801dfa8:	f7e7 ff56 	bl	8005e58 <__aeabi_f2d>
 801dfac:	2301      	movs	r3, #1
 801dfae:	461c      	mov	r4, r3
 801dfb0:	a321      	add	r3, pc, #132	; (adr r3, 801e038 <LED_Iterate+0x158>)
 801dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfb6:	f7e8 fa37 	bl	8006428 <__aeabi_dcmpgt>
 801dfba:	4603      	mov	r3, r0
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	d101      	bne.n	801dfc4 <LED_Iterate+0xe4>
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	461c      	mov	r4, r3
 801dfc4:	b2e3      	uxtb	r3, r4
 801dfc6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED1_OUT_GPIO_Port, LED1_OUT_Pin, LEDPosition==0 && enabler);
 801dfc8:	4b1d      	ldr	r3, [pc, #116]	; (801e040 <LED_Iterate+0x160>)
 801dfca:	781b      	ldrb	r3, [r3, #0]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	d104      	bne.n	801dfda <LED_Iterate+0xfa>
 801dfd0:	79fb      	ldrb	r3, [r7, #7]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d001      	beq.n	801dfda <LED_Iterate+0xfa>
 801dfd6:	2301      	movs	r3, #1
 801dfd8:	e000      	b.n	801dfdc <LED_Iterate+0xfc>
 801dfda:	2300      	movs	r3, #0
 801dfdc:	b2db      	uxtb	r3, r3
 801dfde:	461a      	mov	r2, r3
 801dfe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801dfe4:	4818      	ldr	r0, [pc, #96]	; (801e048 <LED_Iterate+0x168>)
 801dfe6:	f7ed fdf9 	bl	800bbdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_OUT_GPIO_Port, LED2_OUT_Pin, LEDPosition==1 && enabler);
 801dfea:	4b15      	ldr	r3, [pc, #84]	; (801e040 <LED_Iterate+0x160>)
 801dfec:	781b      	ldrb	r3, [r3, #0]
 801dfee:	2b01      	cmp	r3, #1
 801dff0:	d104      	bne.n	801dffc <LED_Iterate+0x11c>
 801dff2:	79fb      	ldrb	r3, [r7, #7]
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d001      	beq.n	801dffc <LED_Iterate+0x11c>
 801dff8:	2301      	movs	r3, #1
 801dffa:	e000      	b.n	801dffe <LED_Iterate+0x11e>
 801dffc:	2300      	movs	r3, #0
 801dffe:	b2db      	uxtb	r3, r3
 801e000:	461a      	mov	r2, r3
 801e002:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801e006:	4810      	ldr	r0, [pc, #64]	; (801e048 <LED_Iterate+0x168>)
 801e008:	f7ed fde8 	bl	800bbdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_OUT_GPIO_Port, LED3_OUT_Pin, LEDPosition==2 && enabler);
 801e00c:	4b0c      	ldr	r3, [pc, #48]	; (801e040 <LED_Iterate+0x160>)
 801e00e:	781b      	ldrb	r3, [r3, #0]
 801e010:	2b02      	cmp	r3, #2
 801e012:	d104      	bne.n	801e01e <LED_Iterate+0x13e>
 801e014:	79fb      	ldrb	r3, [r7, #7]
 801e016:	2b00      	cmp	r3, #0
 801e018:	d001      	beq.n	801e01e <LED_Iterate+0x13e>
 801e01a:	2301      	movs	r3, #1
 801e01c:	e000      	b.n	801e020 <LED_Iterate+0x140>
 801e01e:	2300      	movs	r3, #0
 801e020:	b2db      	uxtb	r3, r3
 801e022:	461a      	mov	r2, r3
 801e024:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e028:	4807      	ldr	r0, [pc, #28]	; (801e048 <LED_Iterate+0x168>)
 801e02a:	f7ed fdd7 	bl	800bbdc <HAL_GPIO_WritePin>
}
 801e02e:	bf00      	nop
 801e030:	370c      	adds	r7, #12
 801e032:	46bd      	mov	sp, r7
 801e034:	bd90      	pop	{r4, r7, pc}
 801e036:	bf00      	nop
 801e038:	47ae147b 	.word	0x47ae147b
 801e03c:	3f747ae1 	.word	0x3f747ae1
 801e040:	20012be9 	.word	0x20012be9
 801e044:	20012c34 	.word	0x20012c34
 801e048:	48000400 	.word	0x48000400

0801e04c <LED_PWMSET>:

void LED_PWMSET(float R, float G, float B)
{
 801e04c:	b580      	push	{r7, lr}
 801e04e:	b084      	sub	sp, #16
 801e050:	af00      	add	r7, sp, #0
 801e052:	ed87 0a03 	vstr	s0, [r7, #12]
 801e056:	edc7 0a02 	vstr	s1, [r7, #8]
 801e05a:	ed87 1a01 	vstr	s2, [r7, #4]
	TIM5->CCR1 = 1000 - (uint16_t)(R * 1000.0);// set Red
 801e05e:	68f8      	ldr	r0, [r7, #12]
 801e060:	f7e7 fefa 	bl	8005e58 <__aeabi_f2d>
 801e064:	f04f 0200 	mov.w	r2, #0
 801e068:	4b1d      	ldr	r3, [pc, #116]	; (801e0e0 <LED_PWMSET+0x94>)
 801e06a:	f7e7 ff4d 	bl	8005f08 <__aeabi_dmul>
 801e06e:	4602      	mov	r2, r0
 801e070:	460b      	mov	r3, r1
 801e072:	4610      	mov	r0, r2
 801e074:	4619      	mov	r1, r3
 801e076:	f7e8 f9e1 	bl	800643c <__aeabi_d2uiz>
 801e07a:	4603      	mov	r3, r0
 801e07c:	b29b      	uxth	r3, r3
 801e07e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 801e082:	4b18      	ldr	r3, [pc, #96]	; (801e0e4 <LED_PWMSET+0x98>)
 801e084:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR4 = 1000 - (uint16_t)(G * 1000.0);// set Green
 801e086:	68b8      	ldr	r0, [r7, #8]
 801e088:	f7e7 fee6 	bl	8005e58 <__aeabi_f2d>
 801e08c:	f04f 0200 	mov.w	r2, #0
 801e090:	4b13      	ldr	r3, [pc, #76]	; (801e0e0 <LED_PWMSET+0x94>)
 801e092:	f7e7 ff39 	bl	8005f08 <__aeabi_dmul>
 801e096:	4602      	mov	r2, r0
 801e098:	460b      	mov	r3, r1
 801e09a:	4610      	mov	r0, r2
 801e09c:	4619      	mov	r1, r3
 801e09e:	f7e8 f9cd 	bl	800643c <__aeabi_d2uiz>
 801e0a2:	4603      	mov	r3, r0
 801e0a4:	b29b      	uxth	r3, r3
 801e0a6:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 801e0aa:	4b0f      	ldr	r3, [pc, #60]	; (801e0e8 <LED_PWMSET+0x9c>)
 801e0ac:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CCR3 = 1000 - (uint16_t)(B * 1000.0);// set Blue
 801e0ae:	6878      	ldr	r0, [r7, #4]
 801e0b0:	f7e7 fed2 	bl	8005e58 <__aeabi_f2d>
 801e0b4:	f04f 0200 	mov.w	r2, #0
 801e0b8:	4b09      	ldr	r3, [pc, #36]	; (801e0e0 <LED_PWMSET+0x94>)
 801e0ba:	f7e7 ff25 	bl	8005f08 <__aeabi_dmul>
 801e0be:	4602      	mov	r2, r0
 801e0c0:	460b      	mov	r3, r1
 801e0c2:	4610      	mov	r0, r2
 801e0c4:	4619      	mov	r1, r3
 801e0c6:	f7e8 f9b9 	bl	800643c <__aeabi_d2uiz>
 801e0ca:	4603      	mov	r3, r0
 801e0cc:	b29b      	uxth	r3, r3
 801e0ce:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 801e0d2:	4b05      	ldr	r3, [pc, #20]	; (801e0e8 <LED_PWMSET+0x9c>)
 801e0d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801e0d6:	bf00      	nop
 801e0d8:	3710      	adds	r7, #16
 801e0da:	46bd      	mov	sp, r7
 801e0dc:	bd80      	pop	{r7, pc}
 801e0de:	bf00      	nop
 801e0e0:	408f4000 	.word	0x408f4000
 801e0e4:	40000c00 	.word	0x40000c00
 801e0e8:	40000400 	.word	0x40000400

0801e0ec <LED_PWMCLEAR>:

void LED_PWMCLEAR()
{
 801e0ec:	b480      	push	{r7}
 801e0ee:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 1000;// set Red
 801e0f0:	4b08      	ldr	r3, [pc, #32]	; (801e114 <LED_PWMCLEAR+0x28>)
 801e0f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e0f6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR4 = 1000;// set Green
 801e0f8:	4b07      	ldr	r3, [pc, #28]	; (801e118 <LED_PWMCLEAR+0x2c>)
 801e0fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e0fe:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CCR3 = 1000;// set Blue
 801e100:	4b05      	ldr	r3, [pc, #20]	; (801e118 <LED_PWMCLEAR+0x2c>)
 801e102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e106:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801e108:	bf00      	nop
 801e10a:	46bd      	mov	sp, r7
 801e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e110:	4770      	bx	lr
 801e112:	bf00      	nop
 801e114:	40000c00 	.word	0x40000c00
 801e118:	40000400 	.word	0x40000400

0801e11c <LED_Preset>:
 */

#include "UDEV1_LEDpresets.h"

RGBLEDS_struct LED_Preset(LEDpreset_enum LEDpreset)
{
 801e11c:	b4b0      	push	{r4, r5, r7}
 801e11e:	b089      	sub	sp, #36	; 0x24
 801e120:	af00      	add	r7, sp, #0
 801e122:	6078      	str	r0, [r7, #4]
 801e124:	460b      	mov	r3, r1
 801e126:	70fb      	strb	r3, [r7, #3]
	RGBLEDS_struct presetStruct;
	presetStruct.R = 0;
 801e128:	f04f 0300 	mov.w	r3, #0
 801e12c:	60bb      	str	r3, [r7, #8]
	presetStruct.G = 0;
 801e12e:	f04f 0300 	mov.w	r3, #0
 801e132:	60fb      	str	r3, [r7, #12]
	presetStruct.B = 0;
 801e134:	f04f 0300 	mov.w	r3, #0
 801e138:	613b      	str	r3, [r7, #16]
	presetStruct.effect.type = EFFECT_OFF;
 801e13a:	2300      	movs	r3, #0
 801e13c:	753b      	strb	r3, [r7, #20]
	presetStruct.effect.period = 1000;
 801e13e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e142:	82fb      	strh	r3, [r7, #22]
	presetStruct.effect.dutycycle = 0.5;
 801e144:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801e148:	61bb      	str	r3, [r7, #24]
	presetStruct.transition.type = TRANSITION_FADE;
 801e14a:	2302      	movs	r3, #2
 801e14c:	773b      	strb	r3, [r7, #28]
	presetStruct.transition.time = 25;
 801e14e:	2319      	movs	r3, #25
 801e150:	83fb      	strh	r3, [r7, #30]

	switch (LEDpreset)
 801e152:	78fb      	ldrb	r3, [r7, #3]
 801e154:	3b01      	subs	r3, #1
 801e156:	2b06      	cmp	r3, #6
 801e158:	d810      	bhi.n	801e17c <LED_Preset+0x60>
 801e15a:	a201      	add	r2, pc, #4	; (adr r2, 801e160 <LED_Preset+0x44>)
 801e15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e160:	0801e187 	.word	0x0801e187
 801e164:	0801e19b 	.word	0x0801e19b
 801e168:	0801e1b3 	.word	0x0801e1b3
 801e16c:	0801e1bf 	.word	0x0801e1bf
 801e170:	0801e1cb 	.word	0x0801e1cb
 801e174:	0801e1e3 	.word	0x0801e1e3
 801e178:	0801e1fb 	.word	0x0801e1fb
	{
		default: //OFF
			presetStruct.transition.type = TRANSITION_FADE;
 801e17c:	2302      	movs	r3, #2
 801e17e:	773b      	strb	r3, [r7, #28]
			presetStruct.transition.time = 50;
 801e180:	2332      	movs	r3, #50	; 0x32
 801e182:	83fb      	strh	r3, [r7, #30]
			break;
 801e184:	e045      	b.n	801e212 <LED_Preset+0xf6>
		case PRESET_OVERCURRENT:
			presetStruct.R = 1;
 801e186:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e18a:	60bb      	str	r3, [r7, #8]
			presetStruct.effect.type = EFFECT_BLINK;
 801e18c:	2302      	movs	r3, #2
 801e18e:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 200;
 801e190:	23c8      	movs	r3, #200	; 0xc8
 801e192:	82fb      	strh	r3, [r7, #22]
			presetStruct.transition.type = TRANSITION_INSTANT;
 801e194:	2300      	movs	r3, #0
 801e196:	773b      	strb	r3, [r7, #28]
			break;
 801e198:	e03b      	b.n	801e212 <LED_Preset+0xf6>
		case PRESET_NOTLINKEDWITHPC:
			presetStruct.R = 1;
 801e19a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e19e:	60bb      	str	r3, [r7, #8]
			presetStruct.G = 0.5;
 801e1a0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801e1a4:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_BREATHE;
 801e1a6:	2304      	movs	r3, #4
 801e1a8:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 1400;
 801e1aa:	f44f 63af 	mov.w	r3, #1400	; 0x578
 801e1ae:	82fb      	strh	r3, [r7, #22]
			break;
 801e1b0:	e02f      	b.n	801e212 <LED_Preset+0xf6>
		case PRESET_LINKEDTOPC:
			presetStruct.G = 0.5;
 801e1b2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801e1b6:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_ON;
 801e1b8:	2301      	movs	r3, #1
 801e1ba:	753b      	strb	r3, [r7, #20]
			break;
 801e1bc:	e029      	b.n	801e212 <LED_Preset+0xf6>
		case PRESET_CARDRECOGNISED:
			presetStruct.G = 1;
 801e1be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e1c2:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_ON;
 801e1c4:	2301      	movs	r3, #1
 801e1c6:	753b      	strb	r3, [r7, #20]
			break;
 801e1c8:	e023      	b.n	801e212 <LED_Preset+0xf6>
		case PRESET_CARDNOTDETECTED:
			presetStruct.R = 1;
 801e1ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e1ce:	60bb      	str	r3, [r7, #8]
			presetStruct.G = 0.5;
 801e1d0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801e1d4:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_BREATHE;
 801e1d6:	2304      	movs	r3, #4
 801e1d8:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 2000;
 801e1da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801e1de:	82fb      	strh	r3, [r7, #22]
			break;
 801e1e0:	e017      	b.n	801e212 <LED_Preset+0xf6>
		case PRESET_CARDNOTRECOGNISED:
			presetStruct.R = 1;
 801e1e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e1e6:	60bb      	str	r3, [r7, #8]
			presetStruct.G = 0.5;
 801e1e8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801e1ec:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_COLORSHIFT;
 801e1ee:	2305      	movs	r3, #5
 801e1f0:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 400;
 801e1f2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e1f6:	82fb      	strh	r3, [r7, #22]
			break;
 801e1f8:	e00b      	b.n	801e212 <LED_Preset+0xf6>
		case PRESET_CARDCOMFAIL:
			presetStruct.R = 1;
 801e1fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e1fe:	60bb      	str	r3, [r7, #8]
			presetStruct.B = 1;
 801e200:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e204:	613b      	str	r3, [r7, #16]
			presetStruct.effect.type = EFFECT_COLORSHIFT;
 801e206:	2305      	movs	r3, #5
 801e208:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 400;
 801e20a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e20e:	82fb      	strh	r3, [r7, #22]
			break;
 801e210:	bf00      	nop
	}
	return presetStruct;
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	461d      	mov	r5, r3
 801e216:	f107 0408 	add.w	r4, r7, #8
 801e21a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e21c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e21e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e222:	e885 0003 	stmia.w	r5, {r0, r1}
}
 801e226:	6878      	ldr	r0, [r7, #4]
 801e228:	3724      	adds	r7, #36	; 0x24
 801e22a:	46bd      	mov	sp, r7
 801e22c:	bcb0      	pop	{r4, r5, r7}
 801e22e:	4770      	bx	lr

0801e230 <SENDfunc>:
#include "UDEV1_board.h"
#include "cmsis_os.h"
#include "RS485.h"

void SENDfunc(struct subword* subwords, int length)
{
 801e230:	b5b0      	push	{r4, r5, r7, lr}
 801e232:	b08a      	sub	sp, #40	; 0x28
 801e234:	af00      	add	r7, sp, #0
 801e236:	6078      	str	r0, [r7, #4]
 801e238:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 801e23a:	683b      	ldr	r3, [r7, #0]
 801e23c:	2b01      	cmp	r3, #1
 801e23e:	f040 80d0 	bne.w	801e3e2 <SENDfunc+0x1b2>

	if(subwords[0].type != params) return;
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	781b      	ldrb	r3, [r3, #0]
 801e246:	2b01      	cmp	r3, #1
 801e248:	f040 80cd 	bne.w	801e3e6 <SENDfunc+0x1b6>
	struct subword subword = subwords[0];
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	f107 0408 	add.w	r4, r7, #8
 801e252:	461d      	mov	r5, r3
 801e254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e258:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e25c:	e884 0003 	stmia.w	r4, {r0, r1}

	uint8_t USBtoRS485_DONE = 0;
 801e260:	2300      	movs	r3, #0
 801e262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch (subword.paramType)
 801e266:	7c3b      	ldrb	r3, [r7, #16]
 801e268:	2b05      	cmp	r3, #5
 801e26a:	f040 80b5 	bne.w	801e3d8 <SENDfunc+0x1a8>
	{
			case OTHER_P:

					if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NOTRECOGNISED)
 801e26e:	4b66      	ldr	r3, [pc, #408]	; (801e408 <SENDfunc+0x1d8>)
 801e270:	781b      	ldrb	r3, [r3, #0]
 801e272:	2b00      	cmp	r3, #0
 801e274:	f000 80b9 	beq.w	801e3ea <SENDfunc+0x1ba>
 801e278:	4b64      	ldr	r3, [pc, #400]	; (801e40c <SENDfunc+0x1dc>)
 801e27a:	781b      	ldrb	r3, [r3, #0]
 801e27c:	2b02      	cmp	r3, #2
 801e27e:	f240 80b4 	bls.w	801e3ea <SENDfunc+0x1ba>
				  	{
				  	  	  for(uint8_t i = 0; i < 100 && !USBtoRS485_DONE; i++)
 801e282:	2300      	movs	r3, #0
 801e284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801e288:	e091      	b.n	801e3ae <SENDfunc+0x17e>
				  	  	  {
				  			  if(osMutexAcquire(mutex_RS485Handle, osWaitForever) == osOK)
 801e28a:	4b61      	ldr	r3, [pc, #388]	; (801e410 <SENDfunc+0x1e0>)
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	f04f 31ff 	mov.w	r1, #4294967295
 801e292:	4618      	mov	r0, r3
 801e294:	f7fb fe26 	bl	8019ee4 <osMutexAcquire>
 801e298:	4603      	mov	r3, r0
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	f040 8082 	bne.w	801e3a4 <SENDfunc+0x174>
				  			  {
				  				  sprintf(RS485TXbuffer, "000:%s",subword.otherParam);
 801e2a0:	69fb      	ldr	r3, [r7, #28]
 801e2a2:	461a      	mov	r2, r3
 801e2a4:	495b      	ldr	r1, [pc, #364]	; (801e414 <SENDfunc+0x1e4>)
 801e2a6:	485c      	ldr	r0, [pc, #368]	; (801e418 <SENDfunc+0x1e8>)
 801e2a8:	f002 fa7c 	bl	80207a4 <siprintf>
				  				  RS485_Transmit_DMA(&RS485cfg);
 801e2ac:	485b      	ldr	r0, [pc, #364]	; (801e41c <SENDfunc+0x1ec>)
 801e2ae:	f7ff f8ed 	bl	801d48c <RS485_Transmit_DMA>

				  				  for(uint16_t timer = RS485maxTimeToTransmit_ms; timer > 0 && !RS485_TransmitDone(&RS485cfg); timer--) osDelay(1);
 801e2b2:	230a      	movs	r3, #10
 801e2b4:	84bb      	strh	r3, [r7, #36]	; 0x24
 801e2b6:	e005      	b.n	801e2c4 <SENDfunc+0x94>
 801e2b8:	2001      	movs	r0, #1
 801e2ba:	f7fb fd72 	bl	8019da2 <osDelay>
 801e2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e2c0:	3b01      	subs	r3, #1
 801e2c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 801e2c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d005      	beq.n	801e2d6 <SENDfunc+0xa6>
 801e2ca:	4854      	ldr	r0, [pc, #336]	; (801e41c <SENDfunc+0x1ec>)
 801e2cc:	f7ff f922 	bl	801d514 <RS485_TransmitDone>
 801e2d0:	4603      	mov	r3, r0
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d0f0      	beq.n	801e2b8 <SENDfunc+0x88>

				  				  for(uint16_t timer = RS485maxTimeToReceive_ms; timer > 0 && !RS485_IsReceived(); timer--) osDelay(1);
 801e2d6:	2364      	movs	r3, #100	; 0x64
 801e2d8:	847b      	strh	r3, [r7, #34]	; 0x22
 801e2da:	e005      	b.n	801e2e8 <SENDfunc+0xb8>
 801e2dc:	2001      	movs	r0, #1
 801e2de:	f7fb fd60 	bl	8019da2 <osDelay>
 801e2e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e2e4:	3b01      	subs	r3, #1
 801e2e6:	847b      	strh	r3, [r7, #34]	; 0x22
 801e2e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e2ea:	2b00      	cmp	r3, #0
 801e2ec:	d004      	beq.n	801e2f8 <SENDfunc+0xc8>
 801e2ee:	f7ff f927 	bl	801d540 <RS485_IsReceived>
 801e2f2:	4603      	mov	r3, r0
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	d0f1      	beq.n	801e2dc <SENDfunc+0xac>

				  				  if(RS485_IsReceived())// && UC1_CheckCardValidity(&UNICARD1data))
 801e2f8:	f7ff f922 	bl	801d540 <RS485_IsReceived>
 801e2fc:	4603      	mov	r3, r0
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d02b      	beq.n	801e35a <SENDfunc+0x12a>
				  				  {
				  					  	sprintf(USBTXbuffer, "RESPONSE:%s", RS485RXbuffer);
 801e302:	4a47      	ldr	r2, [pc, #284]	; (801e420 <SENDfunc+0x1f0>)
 801e304:	4947      	ldr	r1, [pc, #284]	; (801e424 <SENDfunc+0x1f4>)
 801e306:	4848      	ldr	r0, [pc, #288]	; (801e428 <SENDfunc+0x1f8>)
 801e308:	f002 fa4c 	bl	80207a4 <siprintf>
				  						if(ComFailCounter > 0 && !strncmp(RS485RXbuffer, "OK\r\n", 2)) ComFailCounter -= Card_acceptableFailedComRatio;
 801e30c:	4b47      	ldr	r3, [pc, #284]	; (801e42c <SENDfunc+0x1fc>)
 801e30e:	edd3 7a00 	vldr	s15, [r3]
 801e312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e31a:	dd1a      	ble.n	801e352 <SENDfunc+0x122>
 801e31c:	2202      	movs	r2, #2
 801e31e:	4944      	ldr	r1, [pc, #272]	; (801e430 <SENDfunc+0x200>)
 801e320:	483f      	ldr	r0, [pc, #252]	; (801e420 <SENDfunc+0x1f0>)
 801e322:	f002 fab7 	bl	8020894 <strncmp>
 801e326:	4603      	mov	r3, r0
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d112      	bne.n	801e352 <SENDfunc+0x122>
 801e32c:	4b3f      	ldr	r3, [pc, #252]	; (801e42c <SENDfunc+0x1fc>)
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	4618      	mov	r0, r3
 801e332:	f7e7 fd91 	bl	8005e58 <__aeabi_f2d>
 801e336:	a330      	add	r3, pc, #192	; (adr r3, 801e3f8 <SENDfunc+0x1c8>)
 801e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e33c:	f7e7 fc2c 	bl	8005b98 <__aeabi_dsub>
 801e340:	4602      	mov	r2, r0
 801e342:	460b      	mov	r3, r1
 801e344:	4610      	mov	r0, r2
 801e346:	4619      	mov	r1, r3
 801e348:	f7e8 f898 	bl	800647c <__aeabi_d2f>
 801e34c:	4603      	mov	r3, r0
 801e34e:	4a37      	ldr	r2, [pc, #220]	; (801e42c <SENDfunc+0x1fc>)
 801e350:	6013      	str	r3, [r2, #0]
				  						USBtoRS485_DONE = 1;
 801e352:	2301      	movs	r3, #1
 801e354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e358:	e01c      	b.n	801e394 <SENDfunc+0x164>
				  				  }
				  				  else if(ComFailCounter < 10) ComFailCounter += (1-Card_acceptableFailedComRatio);
 801e35a:	4b34      	ldr	r3, [pc, #208]	; (801e42c <SENDfunc+0x1fc>)
 801e35c:	edd3 7a00 	vldr	s15, [r3]
 801e360:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801e364:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e36c:	d512      	bpl.n	801e394 <SENDfunc+0x164>
 801e36e:	4b2f      	ldr	r3, [pc, #188]	; (801e42c <SENDfunc+0x1fc>)
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	4618      	mov	r0, r3
 801e374:	f7e7 fd70 	bl	8005e58 <__aeabi_f2d>
 801e378:	a321      	add	r3, pc, #132	; (adr r3, 801e400 <SENDfunc+0x1d0>)
 801e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e37e:	f7e7 fc0d 	bl	8005b9c <__adddf3>
 801e382:	4602      	mov	r2, r0
 801e384:	460b      	mov	r3, r1
 801e386:	4610      	mov	r0, r2
 801e388:	4619      	mov	r1, r3
 801e38a:	f7e8 f877 	bl	800647c <__aeabi_d2f>
 801e38e:	4603      	mov	r3, r0
 801e390:	4a26      	ldr	r2, [pc, #152]	; (801e42c <SENDfunc+0x1fc>)
 801e392:	6013      	str	r3, [r2, #0]

				  				  RS485receiveFlag = 0;
 801e394:	4b27      	ldr	r3, [pc, #156]	; (801e434 <SENDfunc+0x204>)
 801e396:	2200      	movs	r2, #0
 801e398:	701a      	strb	r2, [r3, #0]

				  				  osMutexRelease(mutex_RS485Handle);
 801e39a:	4b1d      	ldr	r3, [pc, #116]	; (801e410 <SENDfunc+0x1e0>)
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	4618      	mov	r0, r3
 801e3a0:	f7fb fdeb 	bl	8019f7a <osMutexRelease>
				  	  	  for(uint8_t i = 0; i < 100 && !USBtoRS485_DONE; i++)
 801e3a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e3a8:	3301      	adds	r3, #1
 801e3aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801e3ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e3b2:	2b63      	cmp	r3, #99	; 0x63
 801e3b4:	d804      	bhi.n	801e3c0 <SENDfunc+0x190>
 801e3b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	f43f af65 	beq.w	801e28a <SENDfunc+0x5a>
				  			  }
				  		  }
				  	  	  if(!USBtoRS485_DONE) sprintf(USBTXbuffer, "ERR:Timeout");
 801e3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d103      	bne.n	801e3d0 <SENDfunc+0x1a0>
 801e3c8:	491b      	ldr	r1, [pc, #108]	; (801e438 <SENDfunc+0x208>)
 801e3ca:	4817      	ldr	r0, [pc, #92]	; (801e428 <SENDfunc+0x1f8>)
 801e3cc:	f002 f9ea 	bl	80207a4 <siprintf>

				  		  osDelay(1);
 801e3d0:	2001      	movs	r0, #1
 801e3d2:	f7fb fce6 	bl	8019da2 <osDelay>
				  	 }

			break;
 801e3d6:	e008      	b.n	801e3ea <SENDfunc+0x1ba>

			default:
				sprintf(USBTXbuffer, "ERR:Parameter");
 801e3d8:	4918      	ldr	r1, [pc, #96]	; (801e43c <SENDfunc+0x20c>)
 801e3da:	4813      	ldr	r0, [pc, #76]	; (801e428 <SENDfunc+0x1f8>)
 801e3dc:	f002 f9e2 	bl	80207a4 <siprintf>
				break;
 801e3e0:	e004      	b.n	801e3ec <SENDfunc+0x1bc>
	if(length != 1) return;
 801e3e2:	bf00      	nop
 801e3e4:	e002      	b.n	801e3ec <SENDfunc+0x1bc>
	if(subwords[0].type != params) return;
 801e3e6:	bf00      	nop
 801e3e8:	e000      	b.n	801e3ec <SENDfunc+0x1bc>
			break;
 801e3ea:	bf00      	nop
	}
}
 801e3ec:	3728      	adds	r7, #40	; 0x28
 801e3ee:	46bd      	mov	sp, r7
 801e3f0:	bdb0      	pop	{r4, r5, r7, pc}
 801e3f2:	bf00      	nop
 801e3f4:	f3af 8000 	nop.w
 801e3f8:	9999999a 	.word	0x9999999a
 801e3fc:	3fb99999 	.word	0x3fb99999
 801e400:	cccccccd 	.word	0xcccccccd
 801e404:	3feccccc 	.word	0x3feccccc
 801e408:	20000004 	.word	0x20000004
 801e40c:	20000b3c 	.word	0x20000b3c
 801e410:	20000b0c 	.word	0x20000b0c
 801e414:	08023468 	.word	0x08023468
 801e418:	20000ba8 	.word	0x20000ba8
 801e41c:	20000b94 	.word	0x20000b94
 801e420:	20001184 	.word	0x20001184
 801e424:	08023470 	.word	0x08023470
 801e428:	20001760 	.word	0x20001760
 801e42c:	20001d44 	.word	0x20001d44
 801e430:	0802347c 	.word	0x0802347c
 801e434:	20012be8 	.word	0x20012be8
 801e438:	08023484 	.word	0x08023484
 801e43c:	08023490 	.word	0x08023490

0801e440 <UDEV1SCPI_init>:

void UDEV1SCPI_init()
{
 801e440:	b580      	push	{r7, lr}
 801e442:	b086      	sub	sp, #24
 801e444:	af00      	add	r7, sp, #0
    Function CARDfunctions[] = {{.name = "SEND", .run = SENDfunc}};
 801e446:	4a0b      	ldr	r2, [pc, #44]	; (801e474 <UDEV1SCPI_init+0x34>)
 801e448:	f107 0310 	add.w	r3, r7, #16
 801e44c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e450:	e883 0003 	stmia.w	r3, {r0, r1}
    Class CARDclass = { .name = "CARD", .functions = CARDfunctions, .functionsLength = 1 };
 801e454:	4b08      	ldr	r3, [pc, #32]	; (801e478 <UDEV1SCPI_init+0x38>)
 801e456:	607b      	str	r3, [r7, #4]
 801e458:	f107 0310 	add.w	r3, r7, #16
 801e45c:	60bb      	str	r3, [r7, #8]
 801e45e:	2301      	movs	r3, #1
 801e460:	60fb      	str	r3, [r7, #12]
    addClass(&CARDclass, 0);
 801e462:	1d3b      	adds	r3, r7, #4
 801e464:	2100      	movs	r1, #0
 801e466:	4618      	mov	r0, r3
 801e468:	f7f7 f9c8 	bl	80157fc <addClass>
}
 801e46c:	bf00      	nop
 801e46e:	3718      	adds	r7, #24
 801e470:	46bd      	mov	sp, r7
 801e472:	bd80      	pop	{r7, pc}
 801e474:	080234b0 	.word	0x080234b0
 801e478:	080234a0 	.word	0x080234a0

0801e47c <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 801e47c:	b580      	push	{r7, lr}
 801e47e:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 801e480:	f7f8 fe0d 	bl	801709e <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 801e484:	f000 f814 	bl	801e4b0 <USBPD_DPM_InitCore>
 801e488:	4603      	mov	r3, r0
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d000      	beq.n	801e490 <MX_USBPD_Init+0x14>
  {
    while(1);
 801e48e:	e7fe      	b.n	801e48e <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 801e490:	f000 fa24 	bl	801e8dc <USBPD_DPM_UserInit>
 801e494:	4603      	mov	r3, r0
 801e496:	2b00      	cmp	r3, #0
 801e498:	d000      	beq.n	801e49c <MX_USBPD_Init+0x20>
  {
    while(1);
 801e49a:	e7fe      	b.n	801e49a <MX_USBPD_Init+0x1e>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 801e49c:	f000 f8b6 	bl	801e60c <USBPD_DPM_InitOS>
 801e4a0:	4603      	mov	r3, r0
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d000      	beq.n	801e4a8 <MX_USBPD_Init+0x2c>
  {
    while(1);
 801e4a6:	e7fe      	b.n	801e4a6 <MX_USBPD_Init+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 801e4a8:	b662      	cpsie	i
}
 801e4aa:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801e4ac:	bf00      	nop
 801e4ae:	bd80      	pop	{r7, pc}

0801e4b0 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 801e4b0:	b580      	push	{r7, lr}
 801e4b2:	b082      	sub	sp, #8
 801e4b4:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801e4b6:	2300      	movs	r3, #0
 801e4b8:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 801e4ba:	484f      	ldr	r0, [pc, #316]	; (801e5f8 <USBPD_DPM_InitCore+0x148>)
 801e4bc:	f7e2 ffbd 	bl	800143a <USBPD_PE_CheckLIB>
 801e4c0:	4603      	mov	r3, r0
 801e4c2:	2b01      	cmp	r3, #1
 801e4c4:	d001      	beq.n	801e4ca <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 801e4c6:	2302      	movs	r3, #2
 801e4c8:	e092      	b.n	801e5f0 <USBPD_DPM_InitCore+0x140>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801e4ca:	f7e2 ffc1 	bl	8001450 <USBPD_PE_GetMemoryConsumption>
 801e4ce:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	71bb      	strb	r3, [r7, #6]
 801e4d4:	e087      	b.n	801e5e6 <USBPD_DPM_InitCore+0x136>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801e4d6:	79bb      	ldrb	r3, [r7, #6]
 801e4d8:	4a48      	ldr	r2, [pc, #288]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e4da:	009b      	lsls	r3, r3, #2
 801e4dc:	4413      	add	r3, r2
 801e4de:	785a      	ldrb	r2, [r3, #1]
 801e4e0:	f36f 02c3 	bfc	r2, #3, #1
 801e4e4:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801e4e6:	79b9      	ldrb	r1, [r7, #6]
 801e4e8:	79ba      	ldrb	r2, [r7, #6]
 801e4ea:	4845      	ldr	r0, [pc, #276]	; (801e600 <USBPD_DPM_InitCore+0x150>)
 801e4ec:	460b      	mov	r3, r1
 801e4ee:	005b      	lsls	r3, r3, #1
 801e4f0:	440b      	add	r3, r1
 801e4f2:	009b      	lsls	r3, r3, #2
 801e4f4:	4403      	add	r3, r0
 801e4f6:	791b      	ldrb	r3, [r3, #4]
 801e4f8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801e4fc:	b2d8      	uxtb	r0, r3
 801e4fe:	493f      	ldr	r1, [pc, #252]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e500:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e504:	f360 0301 	bfi	r3, r0, #0, #2
 801e508:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801e50c:	79b9      	ldrb	r1, [r7, #6]
 801e50e:	79ba      	ldrb	r2, [r7, #6]
 801e510:	483b      	ldr	r0, [pc, #236]	; (801e600 <USBPD_DPM_InitCore+0x150>)
 801e512:	460b      	mov	r3, r1
 801e514:	005b      	lsls	r3, r3, #1
 801e516:	440b      	add	r3, r1
 801e518:	009b      	lsls	r3, r3, #2
 801e51a:	4403      	add	r3, r0
 801e51c:	791b      	ldrb	r3, [r3, #4]
 801e51e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e522:	b2d8      	uxtb	r0, r3
 801e524:	4935      	ldr	r1, [pc, #212]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e526:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e52a:	f360 0382 	bfi	r3, r0, #2, #1
 801e52e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801e532:	79ba      	ldrb	r2, [r7, #6]
 801e534:	4931      	ldr	r1, [pc, #196]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e536:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e53a:	f36f 1304 	bfc	r3, #4, #1
 801e53e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801e542:	79ba      	ldrb	r2, [r7, #6]
 801e544:	492d      	ldr	r1, [pc, #180]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e546:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e54a:	f36f 1387 	bfc	r3, #6, #2
 801e54e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801e552:	79bb      	ldrb	r3, [r7, #6]
 801e554:	4a29      	ldr	r2, [pc, #164]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e556:	009b      	lsls	r3, r3, #2
 801e558:	4413      	add	r3, r2
 801e55a:	785a      	ldrb	r2, [r3, #1]
 801e55c:	f36f 1246 	bfc	r2, #5, #2
 801e560:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 801e562:	79bb      	ldrb	r3, [r7, #6]
 801e564:	4a25      	ldr	r2, [pc, #148]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e566:	009b      	lsls	r3, r3, #2
 801e568:	4413      	add	r3, r2
 801e56a:	785a      	ldrb	r2, [r3, #1]
 801e56c:	f36f 12c7 	bfc	r2, #7, #1
 801e570:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 801e572:	79ba      	ldrb	r2, [r7, #6]
 801e574:	4613      	mov	r3, r2
 801e576:	005b      	lsls	r3, r3, #1
 801e578:	4413      	add	r3, r2
 801e57a:	009b      	lsls	r3, r3, #2
 801e57c:	4a20      	ldr	r2, [pc, #128]	; (801e600 <USBPD_DPM_InitCore+0x150>)
 801e57e:	441a      	add	r2, r3
 801e580:	79bb      	ldrb	r3, [r7, #6]
 801e582:	009b      	lsls	r3, r3, #2
 801e584:	491d      	ldr	r1, [pc, #116]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e586:	440b      	add	r3, r1
 801e588:	79b8      	ldrb	r0, [r7, #6]
 801e58a:	491e      	ldr	r1, [pc, #120]	; (801e604 <USBPD_DPM_InitCore+0x154>)
 801e58c:	f7e1 fe48 	bl	8000220 <USBPD_CAD_Init>
 801e590:	4603      	mov	r3, r0
 801e592:	2b00      	cmp	r3, #0
 801e594:	d001      	beq.n	801e59a <USBPD_DPM_InitCore+0xea>
 801e596:	2302      	movs	r3, #2
 801e598:	e02a      	b.n	801e5f0 <USBPD_DPM_InitCore+0x140>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 801e59a:	79ba      	ldrb	r2, [r7, #6]
 801e59c:	4613      	mov	r3, r2
 801e59e:	005b      	lsls	r3, r3, #1
 801e5a0:	4413      	add	r3, r2
 801e5a2:	009b      	lsls	r3, r3, #2
 801e5a4:	4a16      	ldr	r2, [pc, #88]	; (801e600 <USBPD_DPM_InitCore+0x150>)
 801e5a6:	1899      	adds	r1, r3, r2
 801e5a8:	79bb      	ldrb	r3, [r7, #6]
 801e5aa:	009b      	lsls	r3, r3, #2
 801e5ac:	4a13      	ldr	r2, [pc, #76]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e5ae:	441a      	add	r2, r3
 801e5b0:	79b8      	ldrb	r0, [r7, #6]
 801e5b2:	4b15      	ldr	r3, [pc, #84]	; (801e608 <USBPD_DPM_InitCore+0x158>)
 801e5b4:	f7e1 ff02 	bl	80003bc <USBPD_PE_Init>
 801e5b8:	4603      	mov	r3, r0
 801e5ba:	71fb      	strb	r3, [r7, #7]
 801e5bc:	79fb      	ldrb	r3, [r7, #7]
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	d001      	beq.n	801e5c6 <USBPD_DPM_InitCore+0x116>
 801e5c2:	79fb      	ldrb	r3, [r7, #7]
 801e5c4:	e014      	b.n	801e5f0 <USBPD_DPM_InitCore+0x140>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801e5c6:	79bb      	ldrb	r3, [r7, #6]
 801e5c8:	4a0c      	ldr	r2, [pc, #48]	; (801e5fc <USBPD_DPM_InitCore+0x14c>)
 801e5ca:	009b      	lsls	r3, r3, #2
 801e5cc:	4413      	add	r3, r2
 801e5ce:	785a      	ldrb	r2, [r3, #1]
 801e5d0:	f042 0208 	orr.w	r2, r2, #8
 801e5d4:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801e5d6:	79bb      	ldrb	r3, [r7, #6]
 801e5d8:	2101      	movs	r1, #1
 801e5da:	4618      	mov	r0, r3
 801e5dc:	f7e1 fe48 	bl	8000270 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801e5e0:	79bb      	ldrb	r3, [r7, #6]
 801e5e2:	3301      	adds	r3, #1
 801e5e4:	71bb      	strb	r3, [r7, #6]
 801e5e6:	79bb      	ldrb	r3, [r7, #6]
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	f43f af74 	beq.w	801e4d6 <USBPD_DPM_InitCore+0x26>
  }

  return _retr;
 801e5ee:	79fb      	ldrb	r3, [r7, #7]
}
 801e5f0:	4618      	mov	r0, r3
 801e5f2:	3708      	adds	r7, #8
 801e5f4:	46bd      	mov	sp, r7
 801e5f6:	bd80      	pop	{r7, pc}
 801e5f8:	30410000 	.word	0x30410000
 801e5fc:	20012cbc 	.word	0x20012cbc
 801e600:	2000013c 	.word	0x2000013c
 801e604:	08023728 	.word	0x08023728
 801e608:	08023730 	.word	0x08023730

0801e60c <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 801e60c:	b580      	push	{r7, lr}
 801e60e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
 801e610:	2200      	movs	r2, #0
 801e612:	2102      	movs	r1, #2
 801e614:	2002      	movs	r0, #2
 801e616:	f7fb fced 	bl	8019ff4 <osMessageQueueNew>
 801e61a:	4603      	mov	r3, r0
 801e61c:	4a0c      	ldr	r2, [pc, #48]	; (801e650 <USBPD_DPM_InitOS+0x44>)
 801e61e:	6013      	str	r3, [r2, #0]
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
 801e620:	4a0c      	ldr	r2, [pc, #48]	; (801e654 <USBPD_DPM_InitOS+0x48>)
 801e622:	490b      	ldr	r1, [pc, #44]	; (801e650 <USBPD_DPM_InitOS+0x44>)
 801e624:	480c      	ldr	r0, [pc, #48]	; (801e658 <USBPD_DPM_InitOS+0x4c>)
 801e626:	f7fb fafd 	bl	8019c24 <osThreadNew>
 801e62a:	4603      	mov	r3, r0
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d101      	bne.n	801e634 <USBPD_DPM_InitOS+0x28>
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 801e630:	2302      	movs	r3, #2
 801e632:	e00b      	b.n	801e64c <USBPD_DPM_InitOS+0x40>
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
#if USBPD_PORT_COUNT == 2
  PEQueueId[1] = osMessageCreate(osMessageQ(queuePE), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#else
  PEQueueId[0] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
 801e634:	2200      	movs	r2, #0
 801e636:	2102      	movs	r1, #2
 801e638:	2001      	movs	r0, #1
 801e63a:	f7fb fcdb 	bl	8019ff4 <osMessageQueueNew>
 801e63e:	4603      	mov	r3, r0
 801e640:	4a06      	ldr	r2, [pc, #24]	; (801e65c <USBPD_DPM_InitOS+0x50>)
 801e642:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 801e644:	4b06      	ldr	r3, [pc, #24]	; (801e660 <USBPD_DPM_InitOS+0x54>)
 801e646:	2200      	movs	r2, #0
 801e648:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 801e64a:	2300      	movs	r3, #0
}
 801e64c:	4618      	mov	r0, r3
 801e64e:	bd80      	pop	{r7, pc}
 801e650:	20012cb0 	.word	0x20012cb0
 801e654:	200001c8 	.word	0x200001c8
 801e658:	0801e719 	.word	0x0801e719
 801e65c:	20012cb8 	.word	0x20012cb8
 801e660:	20012cb4 	.word	0x20012cb4

0801e664 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801e664:	b580      	push	{r7, lr}
 801e666:	b084      	sub	sp, #16
 801e668:	af00      	add	r7, sp, #0
 801e66a:	4603      	mov	r3, r0
 801e66c:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 801e66e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e672:	60fb      	str	r3, [r7, #12]
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
 801e674:	79fb      	ldrb	r3, [r7, #7]
 801e676:	4a06      	ldr	r2, [pc, #24]	; (801e690 <USBPD_PE_TaskWakeUp+0x2c>)
 801e678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e67c:	f107 010c 	add.w	r1, r7, #12
 801e680:	2300      	movs	r3, #0
 801e682:	2200      	movs	r2, #0
 801e684:	f7fb fd2a 	bl	801a0dc <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 801e688:	bf00      	nop
 801e68a:	3710      	adds	r7, #16
 801e68c:	46bd      	mov	sp, r7
 801e68e:	bd80      	pop	{r7, pc}
 801e690:	20012cb8 	.word	0x20012cb8

0801e694 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801e694:	b580      	push	{r7, lr}
 801e696:	b082      	sub	sp, #8
 801e698:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 801e69a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e69e:	607b      	str	r3, [r7, #4]
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
 801e6a0:	4b05      	ldr	r3, [pc, #20]	; (801e6b8 <USBPD_DPM_CADTaskWakeUp+0x24>)
 801e6a2:	6818      	ldr	r0, [r3, #0]
 801e6a4:	1d39      	adds	r1, r7, #4
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	2200      	movs	r2, #0
 801e6aa:	f7fb fd17 	bl	801a0dc <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 801e6ae:	bf00      	nop
 801e6b0:	3708      	adds	r7, #8
 801e6b2:	46bd      	mov	sp, r7
 801e6b4:	bd80      	pop	{r7, pc}
 801e6b6:	bf00      	nop
 801e6b8:	20012cb0 	.word	0x20012cb0

0801e6bc <USBPD_PE_Task_P0>:
  * @brief  Main task for PE layer on Port0
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P0(void *argument)
{
 801e6bc:	b580      	push	{r7, lr}
 801e6be:	b082      	sub	sp, #8
 801e6c0:	af00      	add	r7, sp, #0
 801e6c2:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_0);
 801e6c4:	2000      	movs	r0, #0
 801e6c6:	f000 f80f 	bl	801e6e8 <PE_Task>
}
 801e6ca:	bf00      	nop
 801e6cc:	3708      	adds	r7, #8
 801e6ce:	46bd      	mov	sp, r7
 801e6d0:	bd80      	pop	{r7, pc}

0801e6d2 <USBPD_PE_Task_P1>:
  * @brief  Main task for PE layer on Port1
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P1(void *argument)
{
 801e6d2:	b580      	push	{r7, lr}
 801e6d4:	b082      	sub	sp, #8
 801e6d6:	af00      	add	r7, sp, #0
 801e6d8:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_1);
 801e6da:	2001      	movs	r0, #1
 801e6dc:	f000 f804 	bl	801e6e8 <PE_Task>
}
 801e6e0:	bf00      	nop
 801e6e2:	3708      	adds	r7, #8
 801e6e4:	46bd      	mov	sp, r7
 801e6e6:	bd80      	pop	{r7, pc}

0801e6e8 <PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
static void PE_Task(uint32_t PortNum)
{
 801e6e8:	b590      	push	{r4, r7, lr}
 801e6ea:	b085      	sub	sp, #20
 801e6ec:	af00      	add	r7, sp, #0
 801e6ee:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    uint32_t event;
    (void)osMessageQueueGet(PEQueueId[PortNum], &event, NULL,
 801e6f0:	4a08      	ldr	r2, [pc, #32]	; (801e714 <PE_Task+0x2c>)
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	b2db      	uxtb	r3, r3
 801e6fc:	4618      	mov	r0, r3
 801e6fe:	f7e3 faf7 	bl	8001cf0 <USBPD_PE_StateMachine_SNK>
 801e702:	4603      	mov	r3, r0
 801e704:	f107 010c 	add.w	r1, r7, #12
 801e708:	2200      	movs	r2, #0
 801e70a:	4620      	mov	r0, r4
 801e70c:	f7fb fd46 	bl	801a19c <osMessageQueueGet>
  {
 801e710:	e7ee      	b.n	801e6f0 <PE_Task+0x8>
 801e712:	bf00      	nop
 801e714:	20012cb8 	.word	0x20012cb8

0801e718 <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 801e718:	b590      	push	{r4, r7, lr}
 801e71a:	b085      	sub	sp, #20
 801e71c:	af00      	add	r7, sp, #0
 801e71e:	6078      	str	r0, [r7, #4]
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
#else
    uint32_t event;
    (void)osMessageQueueGet(CADQueueId, &event, NULL, USBPD_CAD_Process());
 801e720:	4b05      	ldr	r3, [pc, #20]	; (801e738 <USBPD_CAD_Task+0x20>)
 801e722:	681c      	ldr	r4, [r3, #0]
 801e724:	f7e1 fdab 	bl	800027e <USBPD_CAD_Process>
 801e728:	4603      	mov	r3, r0
 801e72a:	f107 010c 	add.w	r1, r7, #12
 801e72e:	2200      	movs	r2, #0
 801e730:	4620      	mov	r0, r4
 801e732:	f7fb fd33 	bl	801a19c <osMessageQueueGet>
  {
 801e736:	e7f3      	b.n	801e720 <USBPD_CAD_Task+0x8>
 801e738:	20012cb0 	.word	0x20012cb0

0801e73c <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801e73c:	b580      	push	{r7, lr}
 801e73e:	b084      	sub	sp, #16
 801e740:	af00      	add	r7, sp, #0
 801e742:	4603      	mov	r3, r0
 801e744:	603a      	str	r2, [r7, #0]
 801e746:	71fb      	strb	r3, [r7, #7]
 801e748:	460b      	mov	r3, r1
 801e74a:	71bb      	strb	r3, [r7, #6]

  switch (State)
 801e74c:	79bb      	ldrb	r3, [r7, #6]
 801e74e:	3b01      	subs	r3, #1
 801e750:	2b03      	cmp	r3, #3
 801e752:	d867      	bhi.n	801e824 <USBPD_DPM_CADCallback+0xe8>
 801e754:	a201      	add	r2, pc, #4	; (adr r2, 801e75c <USBPD_DPM_CADCallback+0x20>)
 801e756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e75a:	bf00      	nop
 801e75c:	0801e789 	.word	0x0801e789
 801e760:	0801e77b 	.word	0x0801e77b
 801e764:	0801e789 	.word	0x0801e789
 801e768:	0801e76d 	.word	0x0801e76d
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 801e76c:	79b9      	ldrb	r1, [r7, #6]
 801e76e:	79fb      	ldrb	r3, [r7, #7]
 801e770:	683a      	ldr	r2, [r7, #0]
 801e772:	4618      	mov	r0, r3
 801e774:	f000 f860 	bl	801e838 <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 801e778:	e055      	b.n	801e826 <USBPD_DPM_CADCallback+0xea>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 801e77a:	79b9      	ldrb	r1, [r7, #6]
 801e77c:	79fb      	ldrb	r3, [r7, #7]
 801e77e:	683a      	ldr	r2, [r7, #0]
 801e780:	4618      	mov	r0, r3
 801e782:	f000 f859 	bl	801e838 <DPM_ManageAttachedState>
      break;
 801e786:	e04e      	b.n	801e826 <USBPD_DPM_CADCallback+0xea>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 801e788:	79fb      	ldrb	r3, [r7, #7]
 801e78a:	2100      	movs	r1, #0
 801e78c:	4618      	mov	r0, r3
 801e78e:	f7e1 febe 	bl	800050e <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 801e792:	79fb      	ldrb	r3, [r7, #7]
 801e794:	4a26      	ldr	r2, [pc, #152]	; (801e830 <USBPD_DPM_CADCallback+0xf4>)
 801e796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d023      	beq.n	801e7e6 <USBPD_DPM_CADCallback+0xaa>
      {
        uint8_t _timeout = 0;
 801e79e:	2300      	movs	r3, #0
 801e7a0:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 801e7a2:	e008      	b.n	801e7b6 <USBPD_DPM_CADCallback+0x7a>
        {
          osDelay(1);
 801e7a4:	2001      	movs	r0, #1
 801e7a6:	f7fb fafc 	bl	8019da2 <osDelay>
          _timeout++;
 801e7aa:	7bfb      	ldrb	r3, [r7, #15]
 801e7ac:	3301      	adds	r3, #1
 801e7ae:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 801e7b0:	7bfb      	ldrb	r3, [r7, #15]
 801e7b2:	2b1e      	cmp	r3, #30
 801e7b4:	d80a      	bhi.n	801e7cc <USBPD_DPM_CADCallback+0x90>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 801e7b6:	79fb      	ldrb	r3, [r7, #7]
 801e7b8:	4a1d      	ldr	r2, [pc, #116]	; (801e830 <USBPD_DPM_CADCallback+0xf4>)
 801e7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e7be:	4618      	mov	r0, r3
 801e7c0:	f7fd f810 	bl	801b7e4 <eTaskGetState>
 801e7c4:	4603      	mov	r3, r0
 801e7c6:	2b02      	cmp	r3, #2
 801e7c8:	d1ec      	bne.n	801e7a4 <USBPD_DPM_CADCallback+0x68>
 801e7ca:	e000      	b.n	801e7ce <USBPD_DPM_CADCallback+0x92>
          {
            break;
 801e7cc:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 801e7ce:	79fb      	ldrb	r3, [r7, #7]
 801e7d0:	4a17      	ldr	r2, [pc, #92]	; (801e830 <USBPD_DPM_CADCallback+0xf4>)
 801e7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e7d6:	4618      	mov	r0, r3
 801e7d8:	f7fb fab6 	bl	8019d48 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 801e7dc:	79fb      	ldrb	r3, [r7, #7]
 801e7de:	4a14      	ldr	r2, [pc, #80]	; (801e830 <USBPD_DPM_CADCallback+0xf4>)
 801e7e0:	2100      	movs	r1, #0
 801e7e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801e7e6:	79fa      	ldrb	r2, [r7, #7]
 801e7e8:	4912      	ldr	r1, [pc, #72]	; (801e834 <USBPD_DPM_CADCallback+0xf8>)
 801e7ea:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e7ee:	f36f 1304 	bfc	r3, #4, #1
 801e7f2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 801e7f6:	79fa      	ldrb	r2, [r7, #7]
 801e7f8:	490e      	ldr	r1, [pc, #56]	; (801e834 <USBPD_DPM_CADCallback+0xf8>)
 801e7fa:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e7fe:	f36f 1387 	bfc	r3, #6, #2
 801e802:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801e806:	79fb      	ldrb	r3, [r7, #7]
 801e808:	4a0a      	ldr	r2, [pc, #40]	; (801e834 <USBPD_DPM_CADCallback+0xf8>)
 801e80a:	009b      	lsls	r3, r3, #2
 801e80c:	4413      	add	r3, r2
 801e80e:	785a      	ldrb	r2, [r3, #1]
 801e810:	f36f 0202 	bfc	r2, #0, #3
 801e814:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801e816:	79ba      	ldrb	r2, [r7, #6]
 801e818:	79fb      	ldrb	r3, [r7, #7]
 801e81a:	4611      	mov	r1, r2
 801e81c:	4618      	mov	r0, r3
 801e81e:	f000 f865 	bl	801e8ec <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 801e822:	e000      	b.n	801e826 <USBPD_DPM_CADCallback+0xea>
    }
    default :
      /* nothing to do */
      break;
 801e824:	bf00      	nop
  }
}
 801e826:	bf00      	nop
 801e828:	3710      	adds	r7, #16
 801e82a:	46bd      	mov	sp, r7
 801e82c:	bd80      	pop	{r7, pc}
 801e82e:	bf00      	nop
 801e830:	20012cb4 	.word	0x20012cb4
 801e834:	20012cbc 	.word	0x20012cbc

0801e838 <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801e838:	b590      	push	{r4, r7, lr}
 801e83a:	b083      	sub	sp, #12
 801e83c:	af00      	add	r7, sp, #0
 801e83e:	4603      	mov	r3, r0
 801e840:	603a      	str	r2, [r7, #0]
 801e842:	71fb      	strb	r3, [r7, #7]
 801e844:	460b      	mov	r3, r1
 801e846:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 801e848:	79fa      	ldrb	r2, [r7, #7]
 801e84a:	683b      	ldr	r3, [r7, #0]
 801e84c:	f003 0303 	and.w	r3, r3, #3
 801e850:	b2d8      	uxtb	r0, r3
 801e852:	491c      	ldr	r1, [pc, #112]	; (801e8c4 <DPM_ManageAttachedState+0x8c>)
 801e854:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e858:	f360 1387 	bfi	r3, r0, #6, #2
 801e85c:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 801e860:	79fb      	ldrb	r3, [r7, #7]
 801e862:	2101      	movs	r1, #1
 801e864:	4618      	mov	r0, r3
 801e866:	f7e1 fe52 	bl	800050e <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 801e86a:	79ba      	ldrb	r2, [r7, #6]
 801e86c:	79fb      	ldrb	r3, [r7, #7]
 801e86e:	4611      	mov	r1, r2
 801e870:	4618      	mov	r0, r3
 801e872:	f000 f83b 	bl	801e8ec <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 801e876:	79fb      	ldrb	r3, [r7, #7]
 801e878:	4a13      	ldr	r2, [pc, #76]	; (801e8c8 <DPM_ManageAttachedState+0x90>)
 801e87a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d11b      	bne.n	801e8ba <DPM_ManageAttachedState+0x82>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
 801e882:	79fb      	ldrb	r3, [r7, #7]
 801e884:	2b00      	cmp	r3, #0
 801e886:	d101      	bne.n	801e88c <DPM_ManageAttachedState+0x54>
 801e888:	4810      	ldr	r0, [pc, #64]	; (801e8cc <DPM_ManageAttachedState+0x94>)
 801e88a:	e000      	b.n	801e88e <DPM_ManageAttachedState+0x56>
 801e88c:	4810      	ldr	r0, [pc, #64]	; (801e8d0 <DPM_ManageAttachedState+0x98>)
 801e88e:	79fb      	ldrb	r3, [r7, #7]
 801e890:	2b00      	cmp	r3, #0
 801e892:	d101      	bne.n	801e898 <DPM_ManageAttachedState+0x60>
 801e894:	4b0f      	ldr	r3, [pc, #60]	; (801e8d4 <DPM_ManageAttachedState+0x9c>)
 801e896:	e000      	b.n	801e89a <DPM_ManageAttachedState+0x62>
 801e898:	4b0f      	ldr	r3, [pc, #60]	; (801e8d8 <DPM_ManageAttachedState+0xa0>)
 801e89a:	79fc      	ldrb	r4, [r7, #7]
 801e89c:	461a      	mov	r2, r3
 801e89e:	2100      	movs	r1, #0
 801e8a0:	f7fb f9c0 	bl	8019c24 <osThreadNew>
 801e8a4:	4603      	mov	r3, r0
 801e8a6:	4a08      	ldr	r2, [pc, #32]	; (801e8c8 <DPM_ManageAttachedState+0x90>)
 801e8a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 801e8ac:	79fb      	ldrb	r3, [r7, #7]
 801e8ae:	4a06      	ldr	r2, [pc, #24]	; (801e8c8 <DPM_ManageAttachedState+0x90>)
 801e8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	d100      	bne.n	801e8ba <DPM_ManageAttachedState+0x82>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 801e8b8:	e7fe      	b.n	801e8b8 <DPM_ManageAttachedState+0x80>
    }
  }
}
 801e8ba:	bf00      	nop
 801e8bc:	370c      	adds	r7, #12
 801e8be:	46bd      	mov	sp, r7
 801e8c0:	bd90      	pop	{r4, r7, pc}
 801e8c2:	bf00      	nop
 801e8c4:	20012cbc 	.word	0x20012cbc
 801e8c8:	20012cb4 	.word	0x20012cb4
 801e8cc:	0801e6bd 	.word	0x0801e6bd
 801e8d0:	0801e6d3 	.word	0x0801e6d3
 801e8d4:	20000180 	.word	0x20000180
 801e8d8:	200001a4 	.word	0x200001a4

0801e8dc <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 801e8dc:	b480      	push	{r7}
 801e8de:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 801e8e0:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801e8e2:	4618      	mov	r0, r3
 801e8e4:	46bd      	mov	sp, r7
 801e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ea:	4770      	bx	lr

0801e8ec <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801e8ec:	b480      	push	{r7}
 801e8ee:	b083      	sub	sp, #12
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	4603      	mov	r3, r0
 801e8f4:	460a      	mov	r2, r1
 801e8f6:	71fb      	strb	r3, [r7, #7]
 801e8f8:	4613      	mov	r3, r2
 801e8fa:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801e8fc:	bf00      	nop
 801e8fe:	370c      	adds	r7, #12
 801e900:	46bd      	mov	sp, r7
 801e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e906:	4770      	bx	lr

0801e908 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801e908:	b480      	push	{r7}
 801e90a:	b083      	sub	sp, #12
 801e90c:	af00      	add	r7, sp, #0
 801e90e:	4603      	mov	r3, r0
 801e910:	460a      	mov	r2, r1
 801e912:	71fb      	strb	r3, [r7, #7]
 801e914:	4613      	mov	r3, r2
 801e916:	71bb      	strb	r3, [r7, #6]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 801e918:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801e91a:	bf00      	nop
 801e91c:	370c      	adds	r7, #12
 801e91e:	46bd      	mov	sp, r7
 801e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e924:	4770      	bx	lr

0801e926 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801e926:	b480      	push	{r7}
 801e928:	b083      	sub	sp, #12
 801e92a:	af00      	add	r7, sp, #0
 801e92c:	4603      	mov	r3, r0
 801e92e:	6039      	str	r1, [r7, #0]
 801e930:	71fb      	strb	r3, [r7, #7]
 801e932:	4613      	mov	r3, r2
 801e934:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 801e936:	bf00      	nop
 801e938:	370c      	adds	r7, #12
 801e93a:	46bd      	mov	sp, r7
 801e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e940:	4770      	bx	lr

0801e942 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801e942:	b480      	push	{r7}
 801e944:	b085      	sub	sp, #20
 801e946:	af00      	add	r7, sp, #0
 801e948:	60ba      	str	r2, [r7, #8]
 801e94a:	607b      	str	r3, [r7, #4]
 801e94c:	4603      	mov	r3, r0
 801e94e:	73fb      	strb	r3, [r7, #15]
 801e950:	460b      	mov	r3, r1
 801e952:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 801e954:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801e956:	bf00      	nop
 801e958:	3714      	adds	r7, #20
 801e95a:	46bd      	mov	sp, r7
 801e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e960:	4770      	bx	lr

0801e962 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801e962:	b480      	push	{r7}
 801e964:	b085      	sub	sp, #20
 801e966:	af00      	add	r7, sp, #0
 801e968:	60ba      	str	r2, [r7, #8]
 801e96a:	607b      	str	r3, [r7, #4]
 801e96c:	4603      	mov	r3, r0
 801e96e:	73fb      	strb	r3, [r7, #15]
 801e970:	460b      	mov	r3, r1
 801e972:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 801e974:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 801e976:	bf00      	nop
 801e978:	3714      	adds	r7, #20
 801e97a:	46bd      	mov	sp, r7
 801e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e980:	4770      	bx	lr

0801e982 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801e982:	b480      	push	{r7}
 801e984:	b085      	sub	sp, #20
 801e986:	af00      	add	r7, sp, #0
 801e988:	4603      	mov	r3, r0
 801e98a:	60b9      	str	r1, [r7, #8]
 801e98c:	607a      	str	r2, [r7, #4]
 801e98e:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801e990:	bf00      	nop
 801e992:	3714      	adds	r7, #20
 801e994:	46bd      	mov	sp, r7
 801e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99a:	4770      	bx	lr

0801e99c <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801e99c:	b480      	push	{r7}
 801e99e:	b083      	sub	sp, #12
 801e9a0:	af00      	add	r7, sp, #0
 801e9a2:	603a      	str	r2, [r7, #0]
 801e9a4:	461a      	mov	r2, r3
 801e9a6:	4603      	mov	r3, r0
 801e9a8:	71fb      	strb	r3, [r7, #7]
 801e9aa:	460b      	mov	r3, r1
 801e9ac:	71bb      	strb	r3, [r7, #6]
 801e9ae:	4613      	mov	r3, r2
 801e9b0:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801e9b2:	bf00      	nop
 801e9b4:	370c      	adds	r7, #12
 801e9b6:	46bd      	mov	sp, r7
 801e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9bc:	4770      	bx	lr

0801e9be <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801e9be:	b580      	push	{r7, lr}
 801e9c0:	b082      	sub	sp, #8
 801e9c2:	af00      	add	r7, sp, #0
 801e9c4:	4603      	mov	r3, r0
 801e9c6:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801e9c8:	79fb      	ldrb	r3, [r7, #7]
 801e9ca:	4618      	mov	r0, r3
 801e9cc:	f7e1 fce8 	bl	80003a0 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801e9d0:	bf00      	nop
 801e9d2:	3708      	adds	r7, #8
 801e9d4:	46bd      	mov	sp, r7
 801e9d6:	bd80      	pop	{r7, pc}

0801e9d8 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801e9d8:	b480      	push	{r7}
 801e9da:	b085      	sub	sp, #20
 801e9dc:	af00      	add	r7, sp, #0
 801e9de:	4603      	mov	r3, r0
 801e9e0:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801e9e2:	230c      	movs	r3, #12
 801e9e4:	73fb      	strb	r3, [r7, #15]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801e9e6:	79fa      	ldrb	r2, [r7, #7]
 801e9e8:	492e      	ldr	r1, [pc, #184]	; (801eaa4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e9ea:	4613      	mov	r3, r2
 801e9ec:	00db      	lsls	r3, r3, #3
 801e9ee:	1a9b      	subs	r3, r3, r2
 801e9f0:	00db      	lsls	r3, r3, #3
 801e9f2:	440b      	add	r3, r1
 801e9f4:	781b      	ldrb	r3, [r3, #0]
 801e9f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e9fa:	b2db      	uxtb	r3, r3
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d019      	beq.n	801ea34 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801ea00:	79fa      	ldrb	r2, [r7, #7]
 801ea02:	4928      	ldr	r1, [pc, #160]	; (801eaa4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801ea04:	4613      	mov	r3, r2
 801ea06:	00db      	lsls	r3, r3, #3
 801ea08:	1a9b      	subs	r3, r3, r2
 801ea0a:	00db      	lsls	r3, r3, #3
 801ea0c:	440b      	add	r3, r1
 801ea0e:	781b      	ldrb	r3, [r3, #0]
 801ea10:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801ea14:	b2db      	uxtb	r3, r3
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	d10f      	bne.n	801ea3a <USBPD_DPM_EvaluateDataRoleSwap+0x62>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801ea1a:	79fa      	ldrb	r2, [r7, #7]
 801ea1c:	4921      	ldr	r1, [pc, #132]	; (801eaa4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801ea1e:	4613      	mov	r3, r2
 801ea20:	00db      	lsls	r3, r3, #3
 801ea22:	1a9b      	subs	r3, r3, r2
 801ea24:	00db      	lsls	r3, r3, #3
 801ea26:	440b      	add	r3, r1
 801ea28:	781b      	ldrb	r3, [r3, #0]
 801ea2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ea2e:	b2db      	uxtb	r3, r3
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	d102      	bne.n	801ea3a <USBPD_DPM_EvaluateDataRoleSwap+0x62>
  {
    status = USBPD_NOTSUPPORTED;
 801ea34:	2301      	movs	r3, #1
 801ea36:	73fb      	strb	r3, [r7, #15]
 801ea38:	e02d      	b.n	801ea96 <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801ea3a:	79fa      	ldrb	r2, [r7, #7]
 801ea3c:	4919      	ldr	r1, [pc, #100]	; (801eaa4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801ea3e:	4613      	mov	r3, r2
 801ea40:	00db      	lsls	r3, r3, #3
 801ea42:	1a9b      	subs	r3, r3, r2
 801ea44:	00db      	lsls	r3, r3, #3
 801ea46:	440b      	add	r3, r1
 801ea48:	781b      	ldrb	r3, [r3, #0]
 801ea4a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801ea4e:	b2db      	uxtb	r3, r3
 801ea50:	2b01      	cmp	r3, #1
 801ea52:	d108      	bne.n	801ea66 <USBPD_DPM_EvaluateDataRoleSwap+0x8e>
 801ea54:	79fb      	ldrb	r3, [r7, #7]
 801ea56:	4a14      	ldr	r2, [pc, #80]	; (801eaa8 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801ea58:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801ea5c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ea60:	b2db      	uxtb	r3, r3
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	d015      	beq.n	801ea92 <USBPD_DPM_EvaluateDataRoleSwap+0xba>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801ea66:	79fa      	ldrb	r2, [r7, #7]
 801ea68:	490e      	ldr	r1, [pc, #56]	; (801eaa4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801ea6a:	4613      	mov	r3, r2
 801ea6c:	00db      	lsls	r3, r3, #3
 801ea6e:	1a9b      	subs	r3, r3, r2
 801ea70:	00db      	lsls	r3, r3, #3
 801ea72:	440b      	add	r3, r1
 801ea74:	781b      	ldrb	r3, [r3, #0]
 801ea76:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ea7a:	b2db      	uxtb	r3, r3
 801ea7c:	2b01      	cmp	r3, #1
 801ea7e:	d10a      	bne.n	801ea96 <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
 801ea80:	79fb      	ldrb	r3, [r7, #7]
 801ea82:	4a09      	ldr	r2, [pc, #36]	; (801eaa8 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801ea84:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801ea88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ea8c:	b2db      	uxtb	r3, r3
 801ea8e:	2b01      	cmp	r3, #1
 801ea90:	d101      	bne.n	801ea96 <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
    {
      status = USBPD_ACCEPT;
 801ea92:	230a      	movs	r3, #10
 801ea94:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 801ea96:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801ea98:	4618      	mov	r0, r3
 801ea9a:	3714      	adds	r7, #20
 801ea9c:	46bd      	mov	sp, r7
 801ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaa2:	4770      	bx	lr
 801eaa4:	20000148 	.word	0x20000148
 801eaa8:	20012cbc 	.word	0x20012cbc

0801eaac <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801eaac:	b580      	push	{r7, lr}
 801eaae:	b082      	sub	sp, #8
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	4603      	mov	r3, r0
 801eab4:	460a      	mov	r2, r1
 801eab6:	71fb      	strb	r3, [r7, #7]
 801eab8:	4613      	mov	r3, r2
 801eaba:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801eabc:	79ba      	ldrb	r2, [r7, #6]
 801eabe:	79fb      	ldrb	r3, [r7, #7]
 801eac0:	4611      	mov	r1, r2
 801eac2:	4618      	mov	r0, r3
 801eac4:	f000 f80a 	bl	801eadc <USBPD_PWR_IF_SupplyReady>
 801eac8:	4603      	mov	r3, r0
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	bf0c      	ite	eq
 801eace:	2301      	moveq	r3, #1
 801ead0:	2300      	movne	r3, #0
 801ead2:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801ead4:	4618      	mov	r0, r3
 801ead6:	3708      	adds	r7, #8
 801ead8:	46bd      	mov	sp, r7
 801eada:	bd80      	pop	{r7, pc}

0801eadc <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801eadc:	b580      	push	{r7, lr}
 801eade:	b084      	sub	sp, #16
 801eae0:	af00      	add	r7, sp, #0
 801eae2:	4603      	mov	r3, r0
 801eae4:	460a      	mov	r2, r1
 801eae6:	71fb      	strb	r3, [r7, #7]
 801eae8:	4613      	mov	r3, r2
 801eaea:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801eaec:	2302      	movs	r3, #2
 801eaee:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801eaf0:	79fb      	ldrb	r3, [r7, #7]
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d001      	beq.n	801eafa <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 801eaf6:	2302      	movs	r3, #2
 801eaf8:	e01c      	b.n	801eb34 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801eafa:	79fb      	ldrb	r3, [r7, #7]
 801eafc:	f107 0208 	add.w	r2, r7, #8
 801eb00:	4611      	mov	r1, r2
 801eb02:	4618      	mov	r0, r3
 801eb04:	f000 f890 	bl	801ec28 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 801eb08:	79bb      	ldrb	r3, [r7, #6]
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	d109      	bne.n	801eb22 <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801eb0e:	68bb      	ldr	r3, [r7, #8]
 801eb10:	f240 22ed 	movw	r2, #749	; 0x2ed
 801eb14:	4293      	cmp	r3, r2
 801eb16:	d801      	bhi.n	801eb1c <USBPD_PWR_IF_SupplyReady+0x40>
 801eb18:	2300      	movs	r3, #0
 801eb1a:	e000      	b.n	801eb1e <USBPD_PWR_IF_SupplyReady+0x42>
 801eb1c:	2302      	movs	r3, #2
 801eb1e:	73fb      	strb	r3, [r7, #15]
 801eb20:	e007      	b.n	801eb32 <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801eb22:	68bb      	ldr	r3, [r7, #8]
 801eb24:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801eb28:	d901      	bls.n	801eb2e <USBPD_PWR_IF_SupplyReady+0x52>
 801eb2a:	2300      	movs	r3, #0
 801eb2c:	e000      	b.n	801eb30 <USBPD_PWR_IF_SupplyReady+0x54>
 801eb2e:	2302      	movs	r3, #2
 801eb30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801eb32:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 801eb34:	4618      	mov	r0, r3
 801eb36:	3710      	adds	r7, #16
 801eb38:	46bd      	mov	sp, r7
 801eb3a:	bd80      	pop	{r7, pc}

0801eb3c <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801eb3c:	b580      	push	{r7, lr}
 801eb3e:	b084      	sub	sp, #16
 801eb40:	af00      	add	r7, sp, #0
 801eb42:	4603      	mov	r3, r0
 801eb44:	460a      	mov	r2, r1
 801eb46:	71fb      	strb	r3, [r7, #7]
 801eb48:	4613      	mov	r3, r2
 801eb4a:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801eb4c:	2300      	movs	r3, #0
 801eb4e:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801eb50:	79fb      	ldrb	r3, [r7, #7]
 801eb52:	4618      	mov	r0, r3
 801eb54:	f7f9 f850 	bl	8017bf8 <HW_IF_PWR_GetVoltage>
 801eb58:	4603      	mov	r3, r0
 801eb5a:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 801eb5c:	79bb      	ldrb	r3, [r7, #6]
 801eb5e:	2b02      	cmp	r3, #2
 801eb60:	d015      	beq.n	801eb8e <USBPD_PWR_IF_GetVBUSStatus+0x52>
 801eb62:	2b02      	cmp	r3, #2
 801eb64:	dc1a      	bgt.n	801eb9c <USBPD_PWR_IF_GetVBUSStatus+0x60>
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	d002      	beq.n	801eb70 <USBPD_PWR_IF_GetVBUSStatus+0x34>
 801eb6a:	2b01      	cmp	r3, #1
 801eb6c:	d008      	beq.n	801eb80 <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801eb6e:	e015      	b.n	801eb9c <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801eb70:	68bb      	ldr	r3, [r7, #8]
 801eb72:	f240 22ed 	movw	r2, #749	; 0x2ed
 801eb76:	4293      	cmp	r3, r2
 801eb78:	d812      	bhi.n	801eba0 <USBPD_PWR_IF_GetVBUSStatus+0x64>
 801eb7a:	2301      	movs	r3, #1
 801eb7c:	73fb      	strb	r3, [r7, #15]
    break;
 801eb7e:	e00f      	b.n	801eba0 <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801eb80:	68bb      	ldr	r3, [r7, #8]
 801eb82:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801eb86:	d30d      	bcc.n	801eba4 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 801eb88:	2301      	movs	r3, #1
 801eb8a:	73fb      	strb	r3, [r7, #15]
    break;
 801eb8c:	e00a      	b.n	801eba4 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801eb8e:	68bb      	ldr	r3, [r7, #8]
 801eb90:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801eb94:	d208      	bcs.n	801eba8 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 801eb96:	2301      	movs	r3, #1
 801eb98:	73fb      	strb	r3, [r7, #15]
    break;
 801eb9a:	e005      	b.n	801eba8 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 801eb9c:	bf00      	nop
 801eb9e:	e004      	b.n	801ebaa <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801eba0:	bf00      	nop
 801eba2:	e002      	b.n	801ebaa <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801eba4:	bf00      	nop
 801eba6:	e000      	b.n	801ebaa <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801eba8:	bf00      	nop
  }
  return _status;
 801ebaa:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801ebac:	4618      	mov	r0, r3
 801ebae:	3710      	adds	r7, #16
 801ebb0:	46bd      	mov	sp, r7
 801ebb2:	bd80      	pop	{r7, pc}

0801ebb4 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801ebb4:	b480      	push	{r7}
 801ebb6:	b085      	sub	sp, #20
 801ebb8:	af00      	add	r7, sp, #0
 801ebba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801ebbc:	2300      	movs	r3, #0
 801ebbe:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d002      	beq.n	801ebcc <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801ebc6:	f06f 0301 	mvn.w	r3, #1
 801ebca:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801ebcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801ebce:	4618      	mov	r0, r3
 801ebd0:	3714      	adds	r7, #20
 801ebd2:	46bd      	mov	sp, r7
 801ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebd8:	4770      	bx	lr

0801ebda <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801ebda:	b480      	push	{r7}
 801ebdc:	b085      	sub	sp, #20
 801ebde:	af00      	add	r7, sp, #0
 801ebe0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801ebe2:	2300      	movs	r3, #0
 801ebe4:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d002      	beq.n	801ebf2 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801ebec:	f06f 0301 	mvn.w	r3, #1
 801ebf0:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 801ebf2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	3714      	adds	r7, #20
 801ebf8:	46bd      	mov	sp, r7
 801ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebfe:	4770      	bx	lr

0801ec00 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801ec00:	b480      	push	{r7}
 801ec02:	b085      	sub	sp, #20
 801ec04:	af00      	add	r7, sp, #0
 801ec06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801ec08:	f06f 030a 	mvn.w	r3, #10
 801ec0c:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d002      	beq.n	801ec1a <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801ec14:	f06f 0301 	mvn.w	r3, #1
 801ec18:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801ec1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801ec1c:	4618      	mov	r0, r3
 801ec1e:	3714      	adds	r7, #20
 801ec20:	46bd      	mov	sp, r7
 801ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec26:	4770      	bx	lr

0801ec28 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801ec28:	b480      	push	{r7}
 801ec2a:	b085      	sub	sp, #20
 801ec2c:	af00      	add	r7, sp, #0
 801ec2e:	6078      	str	r0, [r7, #4]
 801ec30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */

  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 801ec32:	2300      	movs	r3, #0
 801ec34:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	d102      	bne.n	801ec42 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801ec3c:	683b      	ldr	r3, [r7, #0]
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	d103      	bne.n	801ec4a <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801ec42:	f06f 0301 	mvn.w	r3, #1
 801ec46:	60fb      	str	r3, [r7, #12]
 801ec48:	e002      	b.n	801ec50 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801ec4a:	f06f 030a 	mvn.w	r3, #10
 801ec4e:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 801ec50:	683b      	ldr	r3, [r7, #0]
 801ec52:	68ba      	ldr	r2, [r7, #8]
 801ec54:	601a      	str	r2, [r3, #0]
  return ret;
 801ec56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801ec58:	4618      	mov	r0, r3
 801ec5a:	3714      	adds	r7, #20
 801ec5c:	46bd      	mov	sp, r7
 801ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec62:	4770      	bx	lr

0801ec64 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801ec64:	b580      	push	{r7, lr}
 801ec66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801ec68:	2200      	movs	r2, #0
 801ec6a:	4912      	ldr	r1, [pc, #72]	; (801ecb4 <MX_USB_Device_Init+0x50>)
 801ec6c:	4812      	ldr	r0, [pc, #72]	; (801ecb8 <MX_USB_Device_Init+0x54>)
 801ec6e:	f7f9 fe2b 	bl	80188c8 <USBD_Init>
 801ec72:	4603      	mov	r3, r0
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d001      	beq.n	801ec7c <MX_USB_Device_Init+0x18>
    Error_Handler();
 801ec78:	f7e9 fc14 	bl	80084a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801ec7c:	490f      	ldr	r1, [pc, #60]	; (801ecbc <MX_USB_Device_Init+0x58>)
 801ec7e:	480e      	ldr	r0, [pc, #56]	; (801ecb8 <MX_USB_Device_Init+0x54>)
 801ec80:	f7f9 fe52 	bl	8018928 <USBD_RegisterClass>
 801ec84:	4603      	mov	r3, r0
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d001      	beq.n	801ec8e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801ec8a:	f7e9 fc0b 	bl	80084a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801ec8e:	490c      	ldr	r1, [pc, #48]	; (801ecc0 <MX_USB_Device_Init+0x5c>)
 801ec90:	4809      	ldr	r0, [pc, #36]	; (801ecb8 <MX_USB_Device_Init+0x54>)
 801ec92:	f7f9 fd73 	bl	801877c <USBD_CDC_RegisterInterface>
 801ec96:	4603      	mov	r3, r0
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d001      	beq.n	801eca0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801ec9c:	f7e9 fc02 	bl	80084a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801eca0:	4805      	ldr	r0, [pc, #20]	; (801ecb8 <MX_USB_Device_Init+0x54>)
 801eca2:	f7f9 fe68 	bl	8018976 <USBD_Start>
 801eca6:	4603      	mov	r3, r0
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d001      	beq.n	801ecb0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801ecac:	f7e9 fbfa 	bl	80084a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801ecb0:	bf00      	nop
 801ecb2:	bd80      	pop	{r7, pc}
 801ecb4:	20000200 	.word	0x20000200
 801ecb8:	20012cc0 	.word	0x20012cc0
 801ecbc:	20000034 	.word	0x20000034
 801ecc0:	200001ec 	.word	0x200001ec

0801ecc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801ecc4:	b580      	push	{r7, lr}
 801ecc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801ecc8:	2200      	movs	r2, #0
 801ecca:	4905      	ldr	r1, [pc, #20]	; (801ece0 <CDC_Init_FS+0x1c>)
 801eccc:	4805      	ldr	r0, [pc, #20]	; (801ece4 <CDC_Init_FS+0x20>)
 801ecce:	f7f9 fd6a 	bl	80187a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ecd2:	4905      	ldr	r1, [pc, #20]	; (801ece8 <CDC_Init_FS+0x24>)
 801ecd4:	4803      	ldr	r0, [pc, #12]	; (801ece4 <CDC_Init_FS+0x20>)
 801ecd6:	f7f9 fd84 	bl	80187e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801ecda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801ecdc:	4618      	mov	r0, r3
 801ecde:	bd80      	pop	{r7, pc}
 801ece0:	20013790 	.word	0x20013790
 801ece4:	20012cc0 	.word	0x20012cc0
 801ece8:	20012f90 	.word	0x20012f90

0801ecec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ecec:	b480      	push	{r7}
 801ecee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ecf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ecf2:	4618      	mov	r0, r3
 801ecf4:	46bd      	mov	sp, r7
 801ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecfa:	4770      	bx	lr

0801ecfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ecfc:	b480      	push	{r7}
 801ecfe:	b083      	sub	sp, #12
 801ed00:	af00      	add	r7, sp, #0
 801ed02:	4603      	mov	r3, r0
 801ed04:	6039      	str	r1, [r7, #0]
 801ed06:	71fb      	strb	r3, [r7, #7]
 801ed08:	4613      	mov	r3, r2
 801ed0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801ed0c:	79fb      	ldrb	r3, [r7, #7]
 801ed0e:	2b23      	cmp	r3, #35	; 0x23
 801ed10:	d84a      	bhi.n	801eda8 <CDC_Control_FS+0xac>
 801ed12:	a201      	add	r2, pc, #4	; (adr r2, 801ed18 <CDC_Control_FS+0x1c>)
 801ed14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ed18:	0801eda9 	.word	0x0801eda9
 801ed1c:	0801eda9 	.word	0x0801eda9
 801ed20:	0801eda9 	.word	0x0801eda9
 801ed24:	0801eda9 	.word	0x0801eda9
 801ed28:	0801eda9 	.word	0x0801eda9
 801ed2c:	0801eda9 	.word	0x0801eda9
 801ed30:	0801eda9 	.word	0x0801eda9
 801ed34:	0801eda9 	.word	0x0801eda9
 801ed38:	0801eda9 	.word	0x0801eda9
 801ed3c:	0801eda9 	.word	0x0801eda9
 801ed40:	0801eda9 	.word	0x0801eda9
 801ed44:	0801eda9 	.word	0x0801eda9
 801ed48:	0801eda9 	.word	0x0801eda9
 801ed4c:	0801eda9 	.word	0x0801eda9
 801ed50:	0801eda9 	.word	0x0801eda9
 801ed54:	0801eda9 	.word	0x0801eda9
 801ed58:	0801eda9 	.word	0x0801eda9
 801ed5c:	0801eda9 	.word	0x0801eda9
 801ed60:	0801eda9 	.word	0x0801eda9
 801ed64:	0801eda9 	.word	0x0801eda9
 801ed68:	0801eda9 	.word	0x0801eda9
 801ed6c:	0801eda9 	.word	0x0801eda9
 801ed70:	0801eda9 	.word	0x0801eda9
 801ed74:	0801eda9 	.word	0x0801eda9
 801ed78:	0801eda9 	.word	0x0801eda9
 801ed7c:	0801eda9 	.word	0x0801eda9
 801ed80:	0801eda9 	.word	0x0801eda9
 801ed84:	0801eda9 	.word	0x0801eda9
 801ed88:	0801eda9 	.word	0x0801eda9
 801ed8c:	0801eda9 	.word	0x0801eda9
 801ed90:	0801eda9 	.word	0x0801eda9
 801ed94:	0801eda9 	.word	0x0801eda9
 801ed98:	0801eda9 	.word	0x0801eda9
 801ed9c:	0801eda9 	.word	0x0801eda9
 801eda0:	0801eda9 	.word	0x0801eda9
 801eda4:	0801eda9 	.word	0x0801eda9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801eda8:	bf00      	nop
  }

  return (USBD_OK);
 801edaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801edac:	4618      	mov	r0, r3
 801edae:	370c      	adds	r7, #12
 801edb0:	46bd      	mov	sp, r7
 801edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edb6:	4770      	bx	lr

0801edb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801edb8:	b580      	push	{r7, lr}
 801edba:	b082      	sub	sp, #8
 801edbc:	af00      	add	r7, sp, #0
 801edbe:	6078      	str	r0, [r7, #4]
 801edc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801edc2:	6879      	ldr	r1, [r7, #4]
 801edc4:	480b      	ldr	r0, [pc, #44]	; (801edf4 <CDC_Receive_FS+0x3c>)
 801edc6:	f7f9 fd0c 	bl	80187e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801edca:	480a      	ldr	r0, [pc, #40]	; (801edf4 <CDC_Receive_FS+0x3c>)
 801edcc:	f7f9 fd52 	bl	8018874 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 801edd0:	683b      	ldr	r3, [r7, #0]
 801edd2:	681b      	ldr	r3, [r3, #0]
 801edd4:	4619      	mov	r1, r3
 801edd6:	4808      	ldr	r0, [pc, #32]	; (801edf8 <CDC_Receive_FS+0x40>)
 801edd8:	f7e8 ff3e 	bl	8007c58 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 801eddc:	683b      	ldr	r3, [r7, #0]
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	461a      	mov	r2, r3
 801ede2:	2100      	movs	r1, #0
 801ede4:	4804      	ldr	r0, [pc, #16]	; (801edf8 <CDC_Receive_FS+0x40>)
 801ede6:	f001 fd40 	bl	802086a <memset>
  return (USBD_OK);
 801edea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801edec:	4618      	mov	r0, r3
 801edee:	3708      	adds	r7, #8
 801edf0:	46bd      	mov	sp, r7
 801edf2:	bd80      	pop	{r7, pc}
 801edf4:	20012cc0 	.word	0x20012cc0
 801edf8:	20012f90 	.word	0x20012f90

0801edfc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801edfc:	b580      	push	{r7, lr}
 801edfe:	b084      	sub	sp, #16
 801ee00:	af00      	add	r7, sp, #0
 801ee02:	6078      	str	r0, [r7, #4]
 801ee04:	460b      	mov	r3, r1
 801ee06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801ee08:	2300      	movs	r3, #0
 801ee0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801ee0c:	4b0d      	ldr	r3, [pc, #52]	; (801ee44 <CDC_Transmit_FS+0x48>)
 801ee0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ee12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801ee14:	68bb      	ldr	r3, [r7, #8]
 801ee16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	d001      	beq.n	801ee22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801ee1e:	2301      	movs	r3, #1
 801ee20:	e00b      	b.n	801ee3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801ee22:	887b      	ldrh	r3, [r7, #2]
 801ee24:	461a      	mov	r2, r3
 801ee26:	6879      	ldr	r1, [r7, #4]
 801ee28:	4806      	ldr	r0, [pc, #24]	; (801ee44 <CDC_Transmit_FS+0x48>)
 801ee2a:	f7f9 fcbc 	bl	80187a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801ee2e:	4805      	ldr	r0, [pc, #20]	; (801ee44 <CDC_Transmit_FS+0x48>)
 801ee30:	f7f9 fcf0 	bl	8018814 <USBD_CDC_TransmitPacket>
 801ee34:	4603      	mov	r3, r0
 801ee36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801ee38:	7bfb      	ldrb	r3, [r7, #15]
}
 801ee3a:	4618      	mov	r0, r3
 801ee3c:	3710      	adds	r7, #16
 801ee3e:	46bd      	mov	sp, r7
 801ee40:	bd80      	pop	{r7, pc}
 801ee42:	bf00      	nop
 801ee44:	20012cc0 	.word	0x20012cc0

0801ee48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801ee48:	b480      	push	{r7}
 801ee4a:	b087      	sub	sp, #28
 801ee4c:	af00      	add	r7, sp, #0
 801ee4e:	60f8      	str	r0, [r7, #12]
 801ee50:	60b9      	str	r1, [r7, #8]
 801ee52:	4613      	mov	r3, r2
 801ee54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801ee56:	2300      	movs	r3, #0
 801ee58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801ee5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ee5e:	4618      	mov	r0, r3
 801ee60:	371c      	adds	r7, #28
 801ee62:	46bd      	mov	sp, r7
 801ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee68:	4770      	bx	lr
	...

0801ee6c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ee6c:	b480      	push	{r7}
 801ee6e:	b083      	sub	sp, #12
 801ee70:	af00      	add	r7, sp, #0
 801ee72:	4603      	mov	r3, r0
 801ee74:	6039      	str	r1, [r7, #0]
 801ee76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801ee78:	683b      	ldr	r3, [r7, #0]
 801ee7a:	2212      	movs	r2, #18
 801ee7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801ee7e:	4b03      	ldr	r3, [pc, #12]	; (801ee8c <USBD_CDC_DeviceDescriptor+0x20>)
}
 801ee80:	4618      	mov	r0, r3
 801ee82:	370c      	adds	r7, #12
 801ee84:	46bd      	mov	sp, r7
 801ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee8a:	4770      	bx	lr
 801ee8c:	20000220 	.word	0x20000220

0801ee90 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ee90:	b480      	push	{r7}
 801ee92:	b083      	sub	sp, #12
 801ee94:	af00      	add	r7, sp, #0
 801ee96:	4603      	mov	r3, r0
 801ee98:	6039      	str	r1, [r7, #0]
 801ee9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ee9c:	683b      	ldr	r3, [r7, #0]
 801ee9e:	2204      	movs	r2, #4
 801eea0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801eea2:	4b03      	ldr	r3, [pc, #12]	; (801eeb0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801eea4:	4618      	mov	r0, r3
 801eea6:	370c      	adds	r7, #12
 801eea8:	46bd      	mov	sp, r7
 801eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eeae:	4770      	bx	lr
 801eeb0:	20000234 	.word	0x20000234

0801eeb4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801eeb4:	b580      	push	{r7, lr}
 801eeb6:	b082      	sub	sp, #8
 801eeb8:	af00      	add	r7, sp, #0
 801eeba:	4603      	mov	r3, r0
 801eebc:	6039      	str	r1, [r7, #0]
 801eebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801eec0:	79fb      	ldrb	r3, [r7, #7]
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d105      	bne.n	801eed2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801eec6:	683a      	ldr	r2, [r7, #0]
 801eec8:	4907      	ldr	r1, [pc, #28]	; (801eee8 <USBD_CDC_ProductStrDescriptor+0x34>)
 801eeca:	4808      	ldr	r0, [pc, #32]	; (801eeec <USBD_CDC_ProductStrDescriptor+0x38>)
 801eecc:	f7fa fd3b 	bl	8019946 <USBD_GetString>
 801eed0:	e004      	b.n	801eedc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801eed2:	683a      	ldr	r2, [r7, #0]
 801eed4:	4904      	ldr	r1, [pc, #16]	; (801eee8 <USBD_CDC_ProductStrDescriptor+0x34>)
 801eed6:	4805      	ldr	r0, [pc, #20]	; (801eeec <USBD_CDC_ProductStrDescriptor+0x38>)
 801eed8:	f7fa fd35 	bl	8019946 <USBD_GetString>
  }
  return USBD_StrDesc;
 801eedc:	4b02      	ldr	r3, [pc, #8]	; (801eee8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801eede:	4618      	mov	r0, r3
 801eee0:	3708      	adds	r7, #8
 801eee2:	46bd      	mov	sp, r7
 801eee4:	bd80      	pop	{r7, pc}
 801eee6:	bf00      	nop
 801eee8:	20013f90 	.word	0x20013f90
 801eeec:	080234cc 	.word	0x080234cc

0801eef0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801eef0:	b580      	push	{r7, lr}
 801eef2:	b082      	sub	sp, #8
 801eef4:	af00      	add	r7, sp, #0
 801eef6:	4603      	mov	r3, r0
 801eef8:	6039      	str	r1, [r7, #0]
 801eefa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801eefc:	683a      	ldr	r2, [r7, #0]
 801eefe:	4904      	ldr	r1, [pc, #16]	; (801ef10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801ef00:	4804      	ldr	r0, [pc, #16]	; (801ef14 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801ef02:	f7fa fd20 	bl	8019946 <USBD_GetString>
  return USBD_StrDesc;
 801ef06:	4b02      	ldr	r3, [pc, #8]	; (801ef10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801ef08:	4618      	mov	r0, r3
 801ef0a:	3708      	adds	r7, #8
 801ef0c:	46bd      	mov	sp, r7
 801ef0e:	bd80      	pop	{r7, pc}
 801ef10:	20013f90 	.word	0x20013f90
 801ef14:	080234d4 	.word	0x080234d4

0801ef18 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ef18:	b580      	push	{r7, lr}
 801ef1a:	b082      	sub	sp, #8
 801ef1c:	af00      	add	r7, sp, #0
 801ef1e:	4603      	mov	r3, r0
 801ef20:	6039      	str	r1, [r7, #0]
 801ef22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ef24:	683b      	ldr	r3, [r7, #0]
 801ef26:	221a      	movs	r2, #26
 801ef28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ef2a:	f000 f843 	bl	801efb4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801ef2e:	4b02      	ldr	r3, [pc, #8]	; (801ef38 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801ef30:	4618      	mov	r0, r3
 801ef32:	3708      	adds	r7, #8
 801ef34:	46bd      	mov	sp, r7
 801ef36:	bd80      	pop	{r7, pc}
 801ef38:	20000238 	.word	0x20000238

0801ef3c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ef3c:	b580      	push	{r7, lr}
 801ef3e:	b082      	sub	sp, #8
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	4603      	mov	r3, r0
 801ef44:	6039      	str	r1, [r7, #0]
 801ef46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ef48:	79fb      	ldrb	r3, [r7, #7]
 801ef4a:	2b00      	cmp	r3, #0
 801ef4c:	d105      	bne.n	801ef5a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801ef4e:	683a      	ldr	r2, [r7, #0]
 801ef50:	4907      	ldr	r1, [pc, #28]	; (801ef70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801ef52:	4808      	ldr	r0, [pc, #32]	; (801ef74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801ef54:	f7fa fcf7 	bl	8019946 <USBD_GetString>
 801ef58:	e004      	b.n	801ef64 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801ef5a:	683a      	ldr	r2, [r7, #0]
 801ef5c:	4904      	ldr	r1, [pc, #16]	; (801ef70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801ef5e:	4805      	ldr	r0, [pc, #20]	; (801ef74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801ef60:	f7fa fcf1 	bl	8019946 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ef64:	4b02      	ldr	r3, [pc, #8]	; (801ef70 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801ef66:	4618      	mov	r0, r3
 801ef68:	3708      	adds	r7, #8
 801ef6a:	46bd      	mov	sp, r7
 801ef6c:	bd80      	pop	{r7, pc}
 801ef6e:	bf00      	nop
 801ef70:	20013f90 	.word	0x20013f90
 801ef74:	080234e8 	.word	0x080234e8

0801ef78 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ef78:	b580      	push	{r7, lr}
 801ef7a:	b082      	sub	sp, #8
 801ef7c:	af00      	add	r7, sp, #0
 801ef7e:	4603      	mov	r3, r0
 801ef80:	6039      	str	r1, [r7, #0]
 801ef82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ef84:	79fb      	ldrb	r3, [r7, #7]
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	d105      	bne.n	801ef96 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801ef8a:	683a      	ldr	r2, [r7, #0]
 801ef8c:	4907      	ldr	r1, [pc, #28]	; (801efac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801ef8e:	4808      	ldr	r0, [pc, #32]	; (801efb0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801ef90:	f7fa fcd9 	bl	8019946 <USBD_GetString>
 801ef94:	e004      	b.n	801efa0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801ef96:	683a      	ldr	r2, [r7, #0]
 801ef98:	4904      	ldr	r1, [pc, #16]	; (801efac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801ef9a:	4805      	ldr	r0, [pc, #20]	; (801efb0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801ef9c:	f7fa fcd3 	bl	8019946 <USBD_GetString>
  }
  return USBD_StrDesc;
 801efa0:	4b02      	ldr	r3, [pc, #8]	; (801efac <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801efa2:	4618      	mov	r0, r3
 801efa4:	3708      	adds	r7, #8
 801efa6:	46bd      	mov	sp, r7
 801efa8:	bd80      	pop	{r7, pc}
 801efaa:	bf00      	nop
 801efac:	20013f90 	.word	0x20013f90
 801efb0:	080234f4 	.word	0x080234f4

0801efb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801efb4:	b580      	push	{r7, lr}
 801efb6:	b084      	sub	sp, #16
 801efb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801efba:	4b0f      	ldr	r3, [pc, #60]	; (801eff8 <Get_SerialNum+0x44>)
 801efbc:	681b      	ldr	r3, [r3, #0]
 801efbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801efc0:	4b0e      	ldr	r3, [pc, #56]	; (801effc <Get_SerialNum+0x48>)
 801efc2:	681b      	ldr	r3, [r3, #0]
 801efc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801efc6:	4b0e      	ldr	r3, [pc, #56]	; (801f000 <Get_SerialNum+0x4c>)
 801efc8:	681b      	ldr	r3, [r3, #0]
 801efca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801efcc:	68fa      	ldr	r2, [r7, #12]
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	4413      	add	r3, r2
 801efd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801efd4:	68fb      	ldr	r3, [r7, #12]
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d009      	beq.n	801efee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801efda:	2208      	movs	r2, #8
 801efdc:	4909      	ldr	r1, [pc, #36]	; (801f004 <Get_SerialNum+0x50>)
 801efde:	68f8      	ldr	r0, [r7, #12]
 801efe0:	f000 f814 	bl	801f00c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801efe4:	2204      	movs	r2, #4
 801efe6:	4908      	ldr	r1, [pc, #32]	; (801f008 <Get_SerialNum+0x54>)
 801efe8:	68b8      	ldr	r0, [r7, #8]
 801efea:	f000 f80f 	bl	801f00c <IntToUnicode>
  }
}
 801efee:	bf00      	nop
 801eff0:	3710      	adds	r7, #16
 801eff2:	46bd      	mov	sp, r7
 801eff4:	bd80      	pop	{r7, pc}
 801eff6:	bf00      	nop
 801eff8:	1fff7590 	.word	0x1fff7590
 801effc:	1fff7594 	.word	0x1fff7594
 801f000:	1fff7598 	.word	0x1fff7598
 801f004:	2000023a 	.word	0x2000023a
 801f008:	2000024a 	.word	0x2000024a

0801f00c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801f00c:	b480      	push	{r7}
 801f00e:	b087      	sub	sp, #28
 801f010:	af00      	add	r7, sp, #0
 801f012:	60f8      	str	r0, [r7, #12]
 801f014:	60b9      	str	r1, [r7, #8]
 801f016:	4613      	mov	r3, r2
 801f018:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801f01a:	2300      	movs	r3, #0
 801f01c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801f01e:	2300      	movs	r3, #0
 801f020:	75fb      	strb	r3, [r7, #23]
 801f022:	e027      	b.n	801f074 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	0f1b      	lsrs	r3, r3, #28
 801f028:	2b09      	cmp	r3, #9
 801f02a:	d80b      	bhi.n	801f044 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801f02c:	68fb      	ldr	r3, [r7, #12]
 801f02e:	0f1b      	lsrs	r3, r3, #28
 801f030:	b2da      	uxtb	r2, r3
 801f032:	7dfb      	ldrb	r3, [r7, #23]
 801f034:	005b      	lsls	r3, r3, #1
 801f036:	4619      	mov	r1, r3
 801f038:	68bb      	ldr	r3, [r7, #8]
 801f03a:	440b      	add	r3, r1
 801f03c:	3230      	adds	r2, #48	; 0x30
 801f03e:	b2d2      	uxtb	r2, r2
 801f040:	701a      	strb	r2, [r3, #0]
 801f042:	e00a      	b.n	801f05a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f044:	68fb      	ldr	r3, [r7, #12]
 801f046:	0f1b      	lsrs	r3, r3, #28
 801f048:	b2da      	uxtb	r2, r3
 801f04a:	7dfb      	ldrb	r3, [r7, #23]
 801f04c:	005b      	lsls	r3, r3, #1
 801f04e:	4619      	mov	r1, r3
 801f050:	68bb      	ldr	r3, [r7, #8]
 801f052:	440b      	add	r3, r1
 801f054:	3237      	adds	r2, #55	; 0x37
 801f056:	b2d2      	uxtb	r2, r2
 801f058:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801f05a:	68fb      	ldr	r3, [r7, #12]
 801f05c:	011b      	lsls	r3, r3, #4
 801f05e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801f060:	7dfb      	ldrb	r3, [r7, #23]
 801f062:	005b      	lsls	r3, r3, #1
 801f064:	3301      	adds	r3, #1
 801f066:	68ba      	ldr	r2, [r7, #8]
 801f068:	4413      	add	r3, r2
 801f06a:	2200      	movs	r2, #0
 801f06c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801f06e:	7dfb      	ldrb	r3, [r7, #23]
 801f070:	3301      	adds	r3, #1
 801f072:	75fb      	strb	r3, [r7, #23]
 801f074:	7dfa      	ldrb	r2, [r7, #23]
 801f076:	79fb      	ldrb	r3, [r7, #7]
 801f078:	429a      	cmp	r2, r3
 801f07a:	d3d3      	bcc.n	801f024 <IntToUnicode+0x18>
  }
}
 801f07c:	bf00      	nop
 801f07e:	bf00      	nop
 801f080:	371c      	adds	r7, #28
 801f082:	46bd      	mov	sp, r7
 801f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f088:	4770      	bx	lr
	...

0801f08c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f08c:	b580      	push	{r7, lr}
 801f08e:	b098      	sub	sp, #96	; 0x60
 801f090:	af00      	add	r7, sp, #0
 801f092:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801f094:	f107 030c 	add.w	r3, r7, #12
 801f098:	2254      	movs	r2, #84	; 0x54
 801f09a:	2100      	movs	r1, #0
 801f09c:	4618      	mov	r0, r3
 801f09e:	f001 fbe4 	bl	802086a <memset>
  if(pcdHandle->Instance==USB)
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	4a19      	ldr	r2, [pc, #100]	; (801f10c <HAL_PCD_MspInit+0x80>)
 801f0a8:	4293      	cmp	r3, r2
 801f0aa:	d12b      	bne.n	801f104 <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801f0ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801f0b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801f0b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801f0b6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801f0b8:	f107 030c 	add.w	r3, r7, #12
 801f0bc:	4618      	mov	r0, r3
 801f0be:	f7ef fa1f 	bl	800e500 <HAL_RCCEx_PeriphCLKConfig>
 801f0c2:	4603      	mov	r3, r0
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d001      	beq.n	801f0cc <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 801f0c8:	f7e9 f9ec 	bl	80084a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801f0cc:	4b10      	ldr	r3, [pc, #64]	; (801f110 <HAL_PCD_MspInit+0x84>)
 801f0ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f0d0:	4a0f      	ldr	r2, [pc, #60]	; (801f110 <HAL_PCD_MspInit+0x84>)
 801f0d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801f0d6:	6593      	str	r3, [r2, #88]	; 0x58
 801f0d8:	4b0d      	ldr	r3, [pc, #52]	; (801f110 <HAL_PCD_MspInit+0x84>)
 801f0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f0dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801f0e0:	60bb      	str	r3, [r7, #8]
 801f0e2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 801f0e4:	2200      	movs	r2, #0
 801f0e6:	2105      	movs	r1, #5
 801f0e8:	2013      	movs	r0, #19
 801f0ea:	f7ec f883 	bl	800b1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 801f0ee:	2013      	movs	r0, #19
 801f0f0:	f7ec f89a 	bl	800b228 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801f0f4:	2200      	movs	r2, #0
 801f0f6:	2105      	movs	r1, #5
 801f0f8:	2014      	movs	r0, #20
 801f0fa:	f7ec f87b 	bl	800b1f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801f0fe:	2014      	movs	r0, #20
 801f100:	f7ec f892 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801f104:	bf00      	nop
 801f106:	3760      	adds	r7, #96	; 0x60
 801f108:	46bd      	mov	sp, r7
 801f10a:	bd80      	pop	{r7, pc}
 801f10c:	40005c00 	.word	0x40005c00
 801f110:	40021000 	.word	0x40021000

0801f114 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f114:	b580      	push	{r7, lr}
 801f116:	b082      	sub	sp, #8
 801f118:	af00      	add	r7, sp, #0
 801f11a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801f128:	4619      	mov	r1, r3
 801f12a:	4610      	mov	r0, r2
 801f12c:	f7f9 fc6e 	bl	8018a0c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801f130:	bf00      	nop
 801f132:	3708      	adds	r7, #8
 801f134:	46bd      	mov	sp, r7
 801f136:	bd80      	pop	{r7, pc}

0801f138 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f138:	b580      	push	{r7, lr}
 801f13a:	b082      	sub	sp, #8
 801f13c:	af00      	add	r7, sp, #0
 801f13e:	6078      	str	r0, [r7, #4]
 801f140:	460b      	mov	r3, r1
 801f142:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f144:	687b      	ldr	r3, [r7, #4]
 801f146:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801f14a:	78fa      	ldrb	r2, [r7, #3]
 801f14c:	6879      	ldr	r1, [r7, #4]
 801f14e:	4613      	mov	r3, r2
 801f150:	009b      	lsls	r3, r3, #2
 801f152:	4413      	add	r3, r2
 801f154:	00db      	lsls	r3, r3, #3
 801f156:	440b      	add	r3, r1
 801f158:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801f15c:	681a      	ldr	r2, [r3, #0]
 801f15e:	78fb      	ldrb	r3, [r7, #3]
 801f160:	4619      	mov	r1, r3
 801f162:	f7f9 fca8 	bl	8018ab6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801f166:	bf00      	nop
 801f168:	3708      	adds	r7, #8
 801f16a:	46bd      	mov	sp, r7
 801f16c:	bd80      	pop	{r7, pc}

0801f16e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f16e:	b580      	push	{r7, lr}
 801f170:	b082      	sub	sp, #8
 801f172:	af00      	add	r7, sp, #0
 801f174:	6078      	str	r0, [r7, #4]
 801f176:	460b      	mov	r3, r1
 801f178:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801f180:	78fa      	ldrb	r2, [r7, #3]
 801f182:	6879      	ldr	r1, [r7, #4]
 801f184:	4613      	mov	r3, r2
 801f186:	009b      	lsls	r3, r3, #2
 801f188:	4413      	add	r3, r2
 801f18a:	00db      	lsls	r3, r3, #3
 801f18c:	440b      	add	r3, r1
 801f18e:	3324      	adds	r3, #36	; 0x24
 801f190:	681a      	ldr	r2, [r3, #0]
 801f192:	78fb      	ldrb	r3, [r7, #3]
 801f194:	4619      	mov	r1, r3
 801f196:	f7f9 fcf1 	bl	8018b7c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801f19a:	bf00      	nop
 801f19c:	3708      	adds	r7, #8
 801f19e:	46bd      	mov	sp, r7
 801f1a0:	bd80      	pop	{r7, pc}

0801f1a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f1a2:	b580      	push	{r7, lr}
 801f1a4:	b082      	sub	sp, #8
 801f1a6:	af00      	add	r7, sp, #0
 801f1a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801f1b0:	4618      	mov	r0, r3
 801f1b2:	f7f9 fe05 	bl	8018dc0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801f1b6:	bf00      	nop
 801f1b8:	3708      	adds	r7, #8
 801f1ba:	46bd      	mov	sp, r7
 801f1bc:	bd80      	pop	{r7, pc}

0801f1be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f1be:	b580      	push	{r7, lr}
 801f1c0:	b084      	sub	sp, #16
 801f1c2:	af00      	add	r7, sp, #0
 801f1c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801f1c6:	2301      	movs	r3, #1
 801f1c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	795b      	ldrb	r3, [r3, #5]
 801f1ce:	2b02      	cmp	r3, #2
 801f1d0:	d001      	beq.n	801f1d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801f1d2:	f7e9 f967 	bl	80084a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f1d6:	687b      	ldr	r3, [r7, #4]
 801f1d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801f1dc:	7bfa      	ldrb	r2, [r7, #15]
 801f1de:	4611      	mov	r1, r2
 801f1e0:	4618      	mov	r0, r3
 801f1e2:	f7f9 fdaf 	bl	8018d44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801f1ec:	4618      	mov	r0, r3
 801f1ee:	f7f9 fd5b 	bl	8018ca8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801f1f2:	bf00      	nop
 801f1f4:	3710      	adds	r7, #16
 801f1f6:	46bd      	mov	sp, r7
 801f1f8:	bd80      	pop	{r7, pc}
	...

0801f1fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f1fc:	b580      	push	{r7, lr}
 801f1fe:	b082      	sub	sp, #8
 801f200:	af00      	add	r7, sp, #0
 801f202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801f20a:	4618      	mov	r0, r3
 801f20c:	f7f9 fdaa 	bl	8018d64 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	7a5b      	ldrb	r3, [r3, #9]
 801f214:	2b00      	cmp	r3, #0
 801f216:	d005      	beq.n	801f224 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f218:	4b04      	ldr	r3, [pc, #16]	; (801f22c <HAL_PCD_SuspendCallback+0x30>)
 801f21a:	691b      	ldr	r3, [r3, #16]
 801f21c:	4a03      	ldr	r2, [pc, #12]	; (801f22c <HAL_PCD_SuspendCallback+0x30>)
 801f21e:	f043 0306 	orr.w	r3, r3, #6
 801f222:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801f224:	bf00      	nop
 801f226:	3708      	adds	r7, #8
 801f228:	46bd      	mov	sp, r7
 801f22a:	bd80      	pop	{r7, pc}
 801f22c:	e000ed00 	.word	0xe000ed00

0801f230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f230:	b580      	push	{r7, lr}
 801f232:	b082      	sub	sp, #8
 801f234:	af00      	add	r7, sp, #0
 801f236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	7a5b      	ldrb	r3, [r3, #9]
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d007      	beq.n	801f250 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f240:	4b08      	ldr	r3, [pc, #32]	; (801f264 <HAL_PCD_ResumeCallback+0x34>)
 801f242:	691b      	ldr	r3, [r3, #16]
 801f244:	4a07      	ldr	r2, [pc, #28]	; (801f264 <HAL_PCD_ResumeCallback+0x34>)
 801f246:	f023 0306 	bic.w	r3, r3, #6
 801f24a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801f24c:	f000 f9f8 	bl	801f640 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801f256:	4618      	mov	r0, r3
 801f258:	f7f9 fd9a 	bl	8018d90 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801f25c:	bf00      	nop
 801f25e:	3708      	adds	r7, #8
 801f260:	46bd      	mov	sp, r7
 801f262:	bd80      	pop	{r7, pc}
 801f264:	e000ed00 	.word	0xe000ed00

0801f268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	b082      	sub	sp, #8
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801f270:	4a2b      	ldr	r2, [pc, #172]	; (801f320 <USBD_LL_Init+0xb8>)
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	4a29      	ldr	r2, [pc, #164]	; (801f320 <USBD_LL_Init+0xb8>)
 801f27c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 801f280:	4b27      	ldr	r3, [pc, #156]	; (801f320 <USBD_LL_Init+0xb8>)
 801f282:	4a28      	ldr	r2, [pc, #160]	; (801f324 <USBD_LL_Init+0xbc>)
 801f284:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801f286:	4b26      	ldr	r3, [pc, #152]	; (801f320 <USBD_LL_Init+0xb8>)
 801f288:	2208      	movs	r2, #8
 801f28a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801f28c:	4b24      	ldr	r3, [pc, #144]	; (801f320 <USBD_LL_Init+0xb8>)
 801f28e:	2202      	movs	r2, #2
 801f290:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801f292:	4b23      	ldr	r3, [pc, #140]	; (801f320 <USBD_LL_Init+0xb8>)
 801f294:	2202      	movs	r2, #2
 801f296:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801f298:	4b21      	ldr	r3, [pc, #132]	; (801f320 <USBD_LL_Init+0xb8>)
 801f29a:	2200      	movs	r2, #0
 801f29c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801f29e:	4b20      	ldr	r3, [pc, #128]	; (801f320 <USBD_LL_Init+0xb8>)
 801f2a0:	2200      	movs	r2, #0
 801f2a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801f2a4:	4b1e      	ldr	r3, [pc, #120]	; (801f320 <USBD_LL_Init+0xb8>)
 801f2a6:	2200      	movs	r2, #0
 801f2a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801f2aa:	4b1d      	ldr	r3, [pc, #116]	; (801f320 <USBD_LL_Init+0xb8>)
 801f2ac:	2200      	movs	r2, #0
 801f2ae:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801f2b0:	481b      	ldr	r0, [pc, #108]	; (801f320 <USBD_LL_Init+0xb8>)
 801f2b2:	f7ec fddd 	bl	800be70 <HAL_PCD_Init>
 801f2b6:	4603      	mov	r3, r0
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d001      	beq.n	801f2c0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801f2bc:	f7e9 f8f2 	bl	80084a4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f2c6:	2318      	movs	r3, #24
 801f2c8:	2200      	movs	r2, #0
 801f2ca:	2100      	movs	r1, #0
 801f2cc:	f7ee fa97 	bl	800d7fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f2d6:	2358      	movs	r3, #88	; 0x58
 801f2d8:	2200      	movs	r2, #0
 801f2da:	2180      	movs	r1, #128	; 0x80
 801f2dc:	f7ee fa8f 	bl	800d7fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f2e6:	23c0      	movs	r3, #192	; 0xc0
 801f2e8:	2200      	movs	r2, #0
 801f2ea:	2181      	movs	r1, #129	; 0x81
 801f2ec:	f7ee fa87 	bl	800d7fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f2f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 801f2fa:	2200      	movs	r2, #0
 801f2fc:	2101      	movs	r1, #1
 801f2fe:	f7ee fa7e 	bl	800d7fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f308:	f44f 7380 	mov.w	r3, #256	; 0x100
 801f30c:	2200      	movs	r2, #0
 801f30e:	2182      	movs	r1, #130	; 0x82
 801f310:	f7ee fa75 	bl	800d7fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801f314:	2300      	movs	r3, #0
}
 801f316:	4618      	mov	r0, r3
 801f318:	3708      	adds	r7, #8
 801f31a:	46bd      	mov	sp, r7
 801f31c:	bd80      	pop	{r7, pc}
 801f31e:	bf00      	nop
 801f320:	20014190 	.word	0x20014190
 801f324:	40005c00 	.word	0x40005c00

0801f328 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801f328:	b580      	push	{r7, lr}
 801f32a:	b084      	sub	sp, #16
 801f32c:	af00      	add	r7, sp, #0
 801f32e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f330:	2300      	movs	r3, #0
 801f332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f334:	2300      	movs	r3, #0
 801f336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f33e:	4618      	mov	r0, r3
 801f340:	f7ec fe64 	bl	800c00c <HAL_PCD_Start>
 801f344:	4603      	mov	r3, r0
 801f346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f348:	7bfb      	ldrb	r3, [r7, #15]
 801f34a:	4618      	mov	r0, r3
 801f34c:	f000 f97e 	bl	801f64c <USBD_Get_USB_Status>
 801f350:	4603      	mov	r3, r0
 801f352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f354:	7bbb      	ldrb	r3, [r7, #14]
}
 801f356:	4618      	mov	r0, r3
 801f358:	3710      	adds	r7, #16
 801f35a:	46bd      	mov	sp, r7
 801f35c:	bd80      	pop	{r7, pc}

0801f35e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801f35e:	b580      	push	{r7, lr}
 801f360:	b084      	sub	sp, #16
 801f362:	af00      	add	r7, sp, #0
 801f364:	6078      	str	r0, [r7, #4]
 801f366:	4608      	mov	r0, r1
 801f368:	4611      	mov	r1, r2
 801f36a:	461a      	mov	r2, r3
 801f36c:	4603      	mov	r3, r0
 801f36e:	70fb      	strb	r3, [r7, #3]
 801f370:	460b      	mov	r3, r1
 801f372:	70bb      	strb	r3, [r7, #2]
 801f374:	4613      	mov	r3, r2
 801f376:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f378:	2300      	movs	r3, #0
 801f37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f37c:	2300      	movs	r3, #0
 801f37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f380:	687b      	ldr	r3, [r7, #4]
 801f382:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f386:	78bb      	ldrb	r3, [r7, #2]
 801f388:	883a      	ldrh	r2, [r7, #0]
 801f38a:	78f9      	ldrb	r1, [r7, #3]
 801f38c:	f7ec ffab 	bl	800c2e6 <HAL_PCD_EP_Open>
 801f390:	4603      	mov	r3, r0
 801f392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f394:	7bfb      	ldrb	r3, [r7, #15]
 801f396:	4618      	mov	r0, r3
 801f398:	f000 f958 	bl	801f64c <USBD_Get_USB_Status>
 801f39c:	4603      	mov	r3, r0
 801f39e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f3a0:	7bbb      	ldrb	r3, [r7, #14]
}
 801f3a2:	4618      	mov	r0, r3
 801f3a4:	3710      	adds	r7, #16
 801f3a6:	46bd      	mov	sp, r7
 801f3a8:	bd80      	pop	{r7, pc}

0801f3aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f3aa:	b580      	push	{r7, lr}
 801f3ac:	b084      	sub	sp, #16
 801f3ae:	af00      	add	r7, sp, #0
 801f3b0:	6078      	str	r0, [r7, #4]
 801f3b2:	460b      	mov	r3, r1
 801f3b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f3b6:	2300      	movs	r3, #0
 801f3b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f3ba:	2300      	movs	r3, #0
 801f3bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f3c4:	78fa      	ldrb	r2, [r7, #3]
 801f3c6:	4611      	mov	r1, r2
 801f3c8:	4618      	mov	r0, r3
 801f3ca:	f7ec ffe9 	bl	800c3a0 <HAL_PCD_EP_Close>
 801f3ce:	4603      	mov	r3, r0
 801f3d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f3d2:	7bfb      	ldrb	r3, [r7, #15]
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	f000 f939 	bl	801f64c <USBD_Get_USB_Status>
 801f3da:	4603      	mov	r3, r0
 801f3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f3de:	7bbb      	ldrb	r3, [r7, #14]
}
 801f3e0:	4618      	mov	r0, r3
 801f3e2:	3710      	adds	r7, #16
 801f3e4:	46bd      	mov	sp, r7
 801f3e6:	bd80      	pop	{r7, pc}

0801f3e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f3e8:	b580      	push	{r7, lr}
 801f3ea:	b084      	sub	sp, #16
 801f3ec:	af00      	add	r7, sp, #0
 801f3ee:	6078      	str	r0, [r7, #4]
 801f3f0:	460b      	mov	r3, r1
 801f3f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f3f4:	2300      	movs	r3, #0
 801f3f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f3f8:	2300      	movs	r3, #0
 801f3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f3fc:	687b      	ldr	r3, [r7, #4]
 801f3fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f402:	78fa      	ldrb	r2, [r7, #3]
 801f404:	4611      	mov	r1, r2
 801f406:	4618      	mov	r0, r3
 801f408:	f7ed f892 	bl	800c530 <HAL_PCD_EP_SetStall>
 801f40c:	4603      	mov	r3, r0
 801f40e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f410:	7bfb      	ldrb	r3, [r7, #15]
 801f412:	4618      	mov	r0, r3
 801f414:	f000 f91a 	bl	801f64c <USBD_Get_USB_Status>
 801f418:	4603      	mov	r3, r0
 801f41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f41c:	7bbb      	ldrb	r3, [r7, #14]
}
 801f41e:	4618      	mov	r0, r3
 801f420:	3710      	adds	r7, #16
 801f422:	46bd      	mov	sp, r7
 801f424:	bd80      	pop	{r7, pc}

0801f426 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f426:	b580      	push	{r7, lr}
 801f428:	b084      	sub	sp, #16
 801f42a:	af00      	add	r7, sp, #0
 801f42c:	6078      	str	r0, [r7, #4]
 801f42e:	460b      	mov	r3, r1
 801f430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f432:	2300      	movs	r3, #0
 801f434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f436:	2300      	movs	r3, #0
 801f438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f440:	78fa      	ldrb	r2, [r7, #3]
 801f442:	4611      	mov	r1, r2
 801f444:	4618      	mov	r0, r3
 801f446:	f7ed f8c5 	bl	800c5d4 <HAL_PCD_EP_ClrStall>
 801f44a:	4603      	mov	r3, r0
 801f44c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f44e:	7bfb      	ldrb	r3, [r7, #15]
 801f450:	4618      	mov	r0, r3
 801f452:	f000 f8fb 	bl	801f64c <USBD_Get_USB_Status>
 801f456:	4603      	mov	r3, r0
 801f458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f45a:	7bbb      	ldrb	r3, [r7, #14]
}
 801f45c:	4618      	mov	r0, r3
 801f45e:	3710      	adds	r7, #16
 801f460:	46bd      	mov	sp, r7
 801f462:	bd80      	pop	{r7, pc}

0801f464 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f464:	b480      	push	{r7}
 801f466:	b085      	sub	sp, #20
 801f468:	af00      	add	r7, sp, #0
 801f46a:	6078      	str	r0, [r7, #4]
 801f46c:	460b      	mov	r3, r1
 801f46e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f476:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801f478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f47c:	2b00      	cmp	r3, #0
 801f47e:	da0b      	bge.n	801f498 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801f480:	78fb      	ldrb	r3, [r7, #3]
 801f482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801f486:	68f9      	ldr	r1, [r7, #12]
 801f488:	4613      	mov	r3, r2
 801f48a:	009b      	lsls	r3, r3, #2
 801f48c:	4413      	add	r3, r2
 801f48e:	00db      	lsls	r3, r3, #3
 801f490:	440b      	add	r3, r1
 801f492:	3312      	adds	r3, #18
 801f494:	781b      	ldrb	r3, [r3, #0]
 801f496:	e00b      	b.n	801f4b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801f498:	78fb      	ldrb	r3, [r7, #3]
 801f49a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801f49e:	68f9      	ldr	r1, [r7, #12]
 801f4a0:	4613      	mov	r3, r2
 801f4a2:	009b      	lsls	r3, r3, #2
 801f4a4:	4413      	add	r3, r2
 801f4a6:	00db      	lsls	r3, r3, #3
 801f4a8:	440b      	add	r3, r1
 801f4aa:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 801f4ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 801f4b0:	4618      	mov	r0, r3
 801f4b2:	3714      	adds	r7, #20
 801f4b4:	46bd      	mov	sp, r7
 801f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ba:	4770      	bx	lr

0801f4bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801f4bc:	b580      	push	{r7, lr}
 801f4be:	b084      	sub	sp, #16
 801f4c0:	af00      	add	r7, sp, #0
 801f4c2:	6078      	str	r0, [r7, #4]
 801f4c4:	460b      	mov	r3, r1
 801f4c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f4cc:	2300      	movs	r3, #0
 801f4ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f4d6:	78fa      	ldrb	r2, [r7, #3]
 801f4d8:	4611      	mov	r1, r2
 801f4da:	4618      	mov	r0, r3
 801f4dc:	f7ec fedf 	bl	800c29e <HAL_PCD_SetAddress>
 801f4e0:	4603      	mov	r3, r0
 801f4e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f4e4:	7bfb      	ldrb	r3, [r7, #15]
 801f4e6:	4618      	mov	r0, r3
 801f4e8:	f000 f8b0 	bl	801f64c <USBD_Get_USB_Status>
 801f4ec:	4603      	mov	r3, r0
 801f4ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f4f0:	7bbb      	ldrb	r3, [r7, #14]
}
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	3710      	adds	r7, #16
 801f4f6:	46bd      	mov	sp, r7
 801f4f8:	bd80      	pop	{r7, pc}

0801f4fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f4fa:	b580      	push	{r7, lr}
 801f4fc:	b086      	sub	sp, #24
 801f4fe:	af00      	add	r7, sp, #0
 801f500:	60f8      	str	r0, [r7, #12]
 801f502:	607a      	str	r2, [r7, #4]
 801f504:	603b      	str	r3, [r7, #0]
 801f506:	460b      	mov	r3, r1
 801f508:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f50a:	2300      	movs	r3, #0
 801f50c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f50e:	2300      	movs	r3, #0
 801f510:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f512:	68fb      	ldr	r3, [r7, #12]
 801f514:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f518:	7af9      	ldrb	r1, [r7, #11]
 801f51a:	683b      	ldr	r3, [r7, #0]
 801f51c:	687a      	ldr	r2, [r7, #4]
 801f51e:	f7ec ffd0 	bl	800c4c2 <HAL_PCD_EP_Transmit>
 801f522:	4603      	mov	r3, r0
 801f524:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f526:	7dfb      	ldrb	r3, [r7, #23]
 801f528:	4618      	mov	r0, r3
 801f52a:	f000 f88f 	bl	801f64c <USBD_Get_USB_Status>
 801f52e:	4603      	mov	r3, r0
 801f530:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801f532:	7dbb      	ldrb	r3, [r7, #22]
}
 801f534:	4618      	mov	r0, r3
 801f536:	3718      	adds	r7, #24
 801f538:	46bd      	mov	sp, r7
 801f53a:	bd80      	pop	{r7, pc}

0801f53c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f53c:	b580      	push	{r7, lr}
 801f53e:	b086      	sub	sp, #24
 801f540:	af00      	add	r7, sp, #0
 801f542:	60f8      	str	r0, [r7, #12]
 801f544:	607a      	str	r2, [r7, #4]
 801f546:	603b      	str	r3, [r7, #0]
 801f548:	460b      	mov	r3, r1
 801f54a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f54c:	2300      	movs	r3, #0
 801f54e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f550:	2300      	movs	r3, #0
 801f552:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f554:	68fb      	ldr	r3, [r7, #12]
 801f556:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f55a:	7af9      	ldrb	r1, [r7, #11]
 801f55c:	683b      	ldr	r3, [r7, #0]
 801f55e:	687a      	ldr	r2, [r7, #4]
 801f560:	f7ec ff66 	bl	800c430 <HAL_PCD_EP_Receive>
 801f564:	4603      	mov	r3, r0
 801f566:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f568:	7dfb      	ldrb	r3, [r7, #23]
 801f56a:	4618      	mov	r0, r3
 801f56c:	f000 f86e 	bl	801f64c <USBD_Get_USB_Status>
 801f570:	4603      	mov	r3, r0
 801f572:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801f574:	7dbb      	ldrb	r3, [r7, #22]
}
 801f576:	4618      	mov	r0, r3
 801f578:	3718      	adds	r7, #24
 801f57a:	46bd      	mov	sp, r7
 801f57c:	bd80      	pop	{r7, pc}

0801f57e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f57e:	b580      	push	{r7, lr}
 801f580:	b082      	sub	sp, #8
 801f582:	af00      	add	r7, sp, #0
 801f584:	6078      	str	r0, [r7, #4]
 801f586:	460b      	mov	r3, r1
 801f588:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f590:	78fa      	ldrb	r2, [r7, #3]
 801f592:	4611      	mov	r1, r2
 801f594:	4618      	mov	r0, r3
 801f596:	f7ec ff7c 	bl	800c492 <HAL_PCD_EP_GetRxCount>
 801f59a:	4603      	mov	r3, r0
}
 801f59c:	4618      	mov	r0, r3
 801f59e:	3708      	adds	r7, #8
 801f5a0:	46bd      	mov	sp, r7
 801f5a2:	bd80      	pop	{r7, pc}

0801f5a4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f5a4:	b580      	push	{r7, lr}
 801f5a6:	b082      	sub	sp, #8
 801f5a8:	af00      	add	r7, sp, #0
 801f5aa:	6078      	str	r0, [r7, #4]
 801f5ac:	460b      	mov	r3, r1
 801f5ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801f5b0:	78fb      	ldrb	r3, [r7, #3]
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d002      	beq.n	801f5bc <HAL_PCDEx_LPM_Callback+0x18>
 801f5b6:	2b01      	cmp	r3, #1
 801f5b8:	d013      	beq.n	801f5e2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801f5ba:	e023      	b.n	801f604 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	7a5b      	ldrb	r3, [r3, #9]
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	d007      	beq.n	801f5d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801f5c4:	f000 f83c 	bl	801f640 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f5c8:	4b10      	ldr	r3, [pc, #64]	; (801f60c <HAL_PCDEx_LPM_Callback+0x68>)
 801f5ca:	691b      	ldr	r3, [r3, #16]
 801f5cc:	4a0f      	ldr	r2, [pc, #60]	; (801f60c <HAL_PCDEx_LPM_Callback+0x68>)
 801f5ce:	f023 0306 	bic.w	r3, r3, #6
 801f5d2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801f5da:	4618      	mov	r0, r3
 801f5dc:	f7f9 fbd8 	bl	8018d90 <USBD_LL_Resume>
    break;
 801f5e0:	e010      	b.n	801f604 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801f5e8:	4618      	mov	r0, r3
 801f5ea:	f7f9 fbbb 	bl	8018d64 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	7a5b      	ldrb	r3, [r3, #9]
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	d005      	beq.n	801f602 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f5f6:	4b05      	ldr	r3, [pc, #20]	; (801f60c <HAL_PCDEx_LPM_Callback+0x68>)
 801f5f8:	691b      	ldr	r3, [r3, #16]
 801f5fa:	4a04      	ldr	r2, [pc, #16]	; (801f60c <HAL_PCDEx_LPM_Callback+0x68>)
 801f5fc:	f043 0306 	orr.w	r3, r3, #6
 801f600:	6113      	str	r3, [r2, #16]
    break;
 801f602:	bf00      	nop
}
 801f604:	bf00      	nop
 801f606:	3708      	adds	r7, #8
 801f608:	46bd      	mov	sp, r7
 801f60a:	bd80      	pop	{r7, pc}
 801f60c:	e000ed00 	.word	0xe000ed00

0801f610 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801f610:	b480      	push	{r7}
 801f612:	b083      	sub	sp, #12
 801f614:	af00      	add	r7, sp, #0
 801f616:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801f618:	4b03      	ldr	r3, [pc, #12]	; (801f628 <USBD_static_malloc+0x18>)
}
 801f61a:	4618      	mov	r0, r3
 801f61c:	370c      	adds	r7, #12
 801f61e:	46bd      	mov	sp, r7
 801f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f624:	4770      	bx	lr
 801f626:	bf00      	nop
 801f628:	2001446c 	.word	0x2001446c

0801f62c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801f62c:	b480      	push	{r7}
 801f62e:	b083      	sub	sp, #12
 801f630:	af00      	add	r7, sp, #0
 801f632:	6078      	str	r0, [r7, #4]

}
 801f634:	bf00      	nop
 801f636:	370c      	adds	r7, #12
 801f638:	46bd      	mov	sp, r7
 801f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f63e:	4770      	bx	lr

0801f640 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801f640:	b580      	push	{r7, lr}
 801f642:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801f644:	f7e7 fc18 	bl	8006e78 <SystemClock_Config>
}
 801f648:	bf00      	nop
 801f64a:	bd80      	pop	{r7, pc}

0801f64c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801f64c:	b480      	push	{r7}
 801f64e:	b085      	sub	sp, #20
 801f650:	af00      	add	r7, sp, #0
 801f652:	4603      	mov	r3, r0
 801f654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f656:	2300      	movs	r3, #0
 801f658:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801f65a:	79fb      	ldrb	r3, [r7, #7]
 801f65c:	2b03      	cmp	r3, #3
 801f65e:	d817      	bhi.n	801f690 <USBD_Get_USB_Status+0x44>
 801f660:	a201      	add	r2, pc, #4	; (adr r2, 801f668 <USBD_Get_USB_Status+0x1c>)
 801f662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f666:	bf00      	nop
 801f668:	0801f679 	.word	0x0801f679
 801f66c:	0801f67f 	.word	0x0801f67f
 801f670:	0801f685 	.word	0x0801f685
 801f674:	0801f68b 	.word	0x0801f68b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801f678:	2300      	movs	r3, #0
 801f67a:	73fb      	strb	r3, [r7, #15]
    break;
 801f67c:	e00b      	b.n	801f696 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801f67e:	2303      	movs	r3, #3
 801f680:	73fb      	strb	r3, [r7, #15]
    break;
 801f682:	e008      	b.n	801f696 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801f684:	2301      	movs	r3, #1
 801f686:	73fb      	strb	r3, [r7, #15]
    break;
 801f688:	e005      	b.n	801f696 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801f68a:	2303      	movs	r3, #3
 801f68c:	73fb      	strb	r3, [r7, #15]
    break;
 801f68e:	e002      	b.n	801f696 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801f690:	2303      	movs	r3, #3
 801f692:	73fb      	strb	r3, [r7, #15]
    break;
 801f694:	bf00      	nop
  }
  return usb_status;
 801f696:	7bfb      	ldrb	r3, [r7, #15]
}
 801f698:	4618      	mov	r0, r3
 801f69a:	3714      	adds	r7, #20
 801f69c:	46bd      	mov	sp, r7
 801f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6a2:	4770      	bx	lr

0801f6a4 <atof>:
 801f6a4:	2100      	movs	r1, #0
 801f6a6:	f000 bf23 	b.w	80204f0 <strtod>

0801f6aa <atoi>:
 801f6aa:	220a      	movs	r2, #10
 801f6ac:	2100      	movs	r1, #0
 801f6ae:	f000 bfad 	b.w	802060c <strtol>
	...

0801f6b4 <calloc>:
 801f6b4:	4b02      	ldr	r3, [pc, #8]	; (801f6c0 <calloc+0xc>)
 801f6b6:	460a      	mov	r2, r1
 801f6b8:	4601      	mov	r1, r0
 801f6ba:	6818      	ldr	r0, [r3, #0]
 801f6bc:	f000 b802 	b.w	801f6c4 <_calloc_r>
 801f6c0:	20000418 	.word	0x20000418

0801f6c4 <_calloc_r>:
 801f6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f6c6:	fba1 2402 	umull	r2, r4, r1, r2
 801f6ca:	b94c      	cbnz	r4, 801f6e0 <_calloc_r+0x1c>
 801f6cc:	4611      	mov	r1, r2
 801f6ce:	9201      	str	r2, [sp, #4]
 801f6d0:	f000 f83e 	bl	801f750 <_malloc_r>
 801f6d4:	9a01      	ldr	r2, [sp, #4]
 801f6d6:	4605      	mov	r5, r0
 801f6d8:	b930      	cbnz	r0, 801f6e8 <_calloc_r+0x24>
 801f6da:	4628      	mov	r0, r5
 801f6dc:	b003      	add	sp, #12
 801f6de:	bd30      	pop	{r4, r5, pc}
 801f6e0:	220c      	movs	r2, #12
 801f6e2:	6002      	str	r2, [r0, #0]
 801f6e4:	2500      	movs	r5, #0
 801f6e6:	e7f8      	b.n	801f6da <_calloc_r+0x16>
 801f6e8:	4621      	mov	r1, r4
 801f6ea:	f001 f8be 	bl	802086a <memset>
 801f6ee:	e7f4      	b.n	801f6da <_calloc_r+0x16>

0801f6f0 <malloc>:
 801f6f0:	4b02      	ldr	r3, [pc, #8]	; (801f6fc <malloc+0xc>)
 801f6f2:	4601      	mov	r1, r0
 801f6f4:	6818      	ldr	r0, [r3, #0]
 801f6f6:	f000 b82b 	b.w	801f750 <_malloc_r>
 801f6fa:	bf00      	nop
 801f6fc:	20000418 	.word	0x20000418

0801f700 <free>:
 801f700:	4b02      	ldr	r3, [pc, #8]	; (801f70c <free+0xc>)
 801f702:	4601      	mov	r1, r0
 801f704:	6818      	ldr	r0, [r3, #0]
 801f706:	f001 b9e7 	b.w	8020ad8 <_free_r>
 801f70a:	bf00      	nop
 801f70c:	20000418 	.word	0x20000418

0801f710 <sbrk_aligned>:
 801f710:	b570      	push	{r4, r5, r6, lr}
 801f712:	4e0e      	ldr	r6, [pc, #56]	; (801f74c <sbrk_aligned+0x3c>)
 801f714:	460c      	mov	r4, r1
 801f716:	6831      	ldr	r1, [r6, #0]
 801f718:	4605      	mov	r5, r0
 801f71a:	b911      	cbnz	r1, 801f722 <sbrk_aligned+0x12>
 801f71c:	f001 f96a 	bl	80209f4 <_sbrk_r>
 801f720:	6030      	str	r0, [r6, #0]
 801f722:	4621      	mov	r1, r4
 801f724:	4628      	mov	r0, r5
 801f726:	f001 f965 	bl	80209f4 <_sbrk_r>
 801f72a:	1c43      	adds	r3, r0, #1
 801f72c:	d00a      	beq.n	801f744 <sbrk_aligned+0x34>
 801f72e:	1cc4      	adds	r4, r0, #3
 801f730:	f024 0403 	bic.w	r4, r4, #3
 801f734:	42a0      	cmp	r0, r4
 801f736:	d007      	beq.n	801f748 <sbrk_aligned+0x38>
 801f738:	1a21      	subs	r1, r4, r0
 801f73a:	4628      	mov	r0, r5
 801f73c:	f001 f95a 	bl	80209f4 <_sbrk_r>
 801f740:	3001      	adds	r0, #1
 801f742:	d101      	bne.n	801f748 <sbrk_aligned+0x38>
 801f744:	f04f 34ff 	mov.w	r4, #4294967295
 801f748:	4620      	mov	r0, r4
 801f74a:	bd70      	pop	{r4, r5, r6, pc}
 801f74c:	20014690 	.word	0x20014690

0801f750 <_malloc_r>:
 801f750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f754:	1ccd      	adds	r5, r1, #3
 801f756:	f025 0503 	bic.w	r5, r5, #3
 801f75a:	3508      	adds	r5, #8
 801f75c:	2d0c      	cmp	r5, #12
 801f75e:	bf38      	it	cc
 801f760:	250c      	movcc	r5, #12
 801f762:	2d00      	cmp	r5, #0
 801f764:	4607      	mov	r7, r0
 801f766:	db01      	blt.n	801f76c <_malloc_r+0x1c>
 801f768:	42a9      	cmp	r1, r5
 801f76a:	d905      	bls.n	801f778 <_malloc_r+0x28>
 801f76c:	230c      	movs	r3, #12
 801f76e:	603b      	str	r3, [r7, #0]
 801f770:	2600      	movs	r6, #0
 801f772:	4630      	mov	r0, r6
 801f774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f778:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f84c <_malloc_r+0xfc>
 801f77c:	f000 f868 	bl	801f850 <__malloc_lock>
 801f780:	f8d8 3000 	ldr.w	r3, [r8]
 801f784:	461c      	mov	r4, r3
 801f786:	bb5c      	cbnz	r4, 801f7e0 <_malloc_r+0x90>
 801f788:	4629      	mov	r1, r5
 801f78a:	4638      	mov	r0, r7
 801f78c:	f7ff ffc0 	bl	801f710 <sbrk_aligned>
 801f790:	1c43      	adds	r3, r0, #1
 801f792:	4604      	mov	r4, r0
 801f794:	d155      	bne.n	801f842 <_malloc_r+0xf2>
 801f796:	f8d8 4000 	ldr.w	r4, [r8]
 801f79a:	4626      	mov	r6, r4
 801f79c:	2e00      	cmp	r6, #0
 801f79e:	d145      	bne.n	801f82c <_malloc_r+0xdc>
 801f7a0:	2c00      	cmp	r4, #0
 801f7a2:	d048      	beq.n	801f836 <_malloc_r+0xe6>
 801f7a4:	6823      	ldr	r3, [r4, #0]
 801f7a6:	4631      	mov	r1, r6
 801f7a8:	4638      	mov	r0, r7
 801f7aa:	eb04 0903 	add.w	r9, r4, r3
 801f7ae:	f001 f921 	bl	80209f4 <_sbrk_r>
 801f7b2:	4581      	cmp	r9, r0
 801f7b4:	d13f      	bne.n	801f836 <_malloc_r+0xe6>
 801f7b6:	6821      	ldr	r1, [r4, #0]
 801f7b8:	1a6d      	subs	r5, r5, r1
 801f7ba:	4629      	mov	r1, r5
 801f7bc:	4638      	mov	r0, r7
 801f7be:	f7ff ffa7 	bl	801f710 <sbrk_aligned>
 801f7c2:	3001      	adds	r0, #1
 801f7c4:	d037      	beq.n	801f836 <_malloc_r+0xe6>
 801f7c6:	6823      	ldr	r3, [r4, #0]
 801f7c8:	442b      	add	r3, r5
 801f7ca:	6023      	str	r3, [r4, #0]
 801f7cc:	f8d8 3000 	ldr.w	r3, [r8]
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	d038      	beq.n	801f846 <_malloc_r+0xf6>
 801f7d4:	685a      	ldr	r2, [r3, #4]
 801f7d6:	42a2      	cmp	r2, r4
 801f7d8:	d12b      	bne.n	801f832 <_malloc_r+0xe2>
 801f7da:	2200      	movs	r2, #0
 801f7dc:	605a      	str	r2, [r3, #4]
 801f7de:	e00f      	b.n	801f800 <_malloc_r+0xb0>
 801f7e0:	6822      	ldr	r2, [r4, #0]
 801f7e2:	1b52      	subs	r2, r2, r5
 801f7e4:	d41f      	bmi.n	801f826 <_malloc_r+0xd6>
 801f7e6:	2a0b      	cmp	r2, #11
 801f7e8:	d917      	bls.n	801f81a <_malloc_r+0xca>
 801f7ea:	1961      	adds	r1, r4, r5
 801f7ec:	42a3      	cmp	r3, r4
 801f7ee:	6025      	str	r5, [r4, #0]
 801f7f0:	bf18      	it	ne
 801f7f2:	6059      	strne	r1, [r3, #4]
 801f7f4:	6863      	ldr	r3, [r4, #4]
 801f7f6:	bf08      	it	eq
 801f7f8:	f8c8 1000 	streq.w	r1, [r8]
 801f7fc:	5162      	str	r2, [r4, r5]
 801f7fe:	604b      	str	r3, [r1, #4]
 801f800:	4638      	mov	r0, r7
 801f802:	f104 060b 	add.w	r6, r4, #11
 801f806:	f000 f829 	bl	801f85c <__malloc_unlock>
 801f80a:	f026 0607 	bic.w	r6, r6, #7
 801f80e:	1d23      	adds	r3, r4, #4
 801f810:	1af2      	subs	r2, r6, r3
 801f812:	d0ae      	beq.n	801f772 <_malloc_r+0x22>
 801f814:	1b9b      	subs	r3, r3, r6
 801f816:	50a3      	str	r3, [r4, r2]
 801f818:	e7ab      	b.n	801f772 <_malloc_r+0x22>
 801f81a:	42a3      	cmp	r3, r4
 801f81c:	6862      	ldr	r2, [r4, #4]
 801f81e:	d1dd      	bne.n	801f7dc <_malloc_r+0x8c>
 801f820:	f8c8 2000 	str.w	r2, [r8]
 801f824:	e7ec      	b.n	801f800 <_malloc_r+0xb0>
 801f826:	4623      	mov	r3, r4
 801f828:	6864      	ldr	r4, [r4, #4]
 801f82a:	e7ac      	b.n	801f786 <_malloc_r+0x36>
 801f82c:	4634      	mov	r4, r6
 801f82e:	6876      	ldr	r6, [r6, #4]
 801f830:	e7b4      	b.n	801f79c <_malloc_r+0x4c>
 801f832:	4613      	mov	r3, r2
 801f834:	e7cc      	b.n	801f7d0 <_malloc_r+0x80>
 801f836:	230c      	movs	r3, #12
 801f838:	603b      	str	r3, [r7, #0]
 801f83a:	4638      	mov	r0, r7
 801f83c:	f000 f80e 	bl	801f85c <__malloc_unlock>
 801f840:	e797      	b.n	801f772 <_malloc_r+0x22>
 801f842:	6025      	str	r5, [r4, #0]
 801f844:	e7dc      	b.n	801f800 <_malloc_r+0xb0>
 801f846:	605b      	str	r3, [r3, #4]
 801f848:	deff      	udf	#255	; 0xff
 801f84a:	bf00      	nop
 801f84c:	2001468c 	.word	0x2001468c

0801f850 <__malloc_lock>:
 801f850:	4801      	ldr	r0, [pc, #4]	; (801f858 <__malloc_lock+0x8>)
 801f852:	f001 b91c 	b.w	8020a8e <__retarget_lock_acquire_recursive>
 801f856:	bf00      	nop
 801f858:	200147d4 	.word	0x200147d4

0801f85c <__malloc_unlock>:
 801f85c:	4801      	ldr	r0, [pc, #4]	; (801f864 <__malloc_unlock+0x8>)
 801f85e:	f001 b917 	b.w	8020a90 <__retarget_lock_release_recursive>
 801f862:	bf00      	nop
 801f864:	200147d4 	.word	0x200147d4

0801f868 <realloc>:
 801f868:	4b02      	ldr	r3, [pc, #8]	; (801f874 <realloc+0xc>)
 801f86a:	460a      	mov	r2, r1
 801f86c:	4601      	mov	r1, r0
 801f86e:	6818      	ldr	r0, [r3, #0]
 801f870:	f000 b802 	b.w	801f878 <_realloc_r>
 801f874:	20000418 	.word	0x20000418

0801f878 <_realloc_r>:
 801f878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f87c:	4680      	mov	r8, r0
 801f87e:	4614      	mov	r4, r2
 801f880:	460e      	mov	r6, r1
 801f882:	b921      	cbnz	r1, 801f88e <_realloc_r+0x16>
 801f884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f888:	4611      	mov	r1, r2
 801f88a:	f7ff bf61 	b.w	801f750 <_malloc_r>
 801f88e:	b92a      	cbnz	r2, 801f89c <_realloc_r+0x24>
 801f890:	f001 f922 	bl	8020ad8 <_free_r>
 801f894:	4625      	mov	r5, r4
 801f896:	4628      	mov	r0, r5
 801f898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f89c:	f002 f97f 	bl	8021b9e <_malloc_usable_size_r>
 801f8a0:	4284      	cmp	r4, r0
 801f8a2:	4607      	mov	r7, r0
 801f8a4:	d802      	bhi.n	801f8ac <_realloc_r+0x34>
 801f8a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f8aa:	d812      	bhi.n	801f8d2 <_realloc_r+0x5a>
 801f8ac:	4621      	mov	r1, r4
 801f8ae:	4640      	mov	r0, r8
 801f8b0:	f7ff ff4e 	bl	801f750 <_malloc_r>
 801f8b4:	4605      	mov	r5, r0
 801f8b6:	2800      	cmp	r0, #0
 801f8b8:	d0ed      	beq.n	801f896 <_realloc_r+0x1e>
 801f8ba:	42bc      	cmp	r4, r7
 801f8bc:	4622      	mov	r2, r4
 801f8be:	4631      	mov	r1, r6
 801f8c0:	bf28      	it	cs
 801f8c2:	463a      	movcs	r2, r7
 801f8c4:	f001 f8f2 	bl	8020aac <memcpy>
 801f8c8:	4631      	mov	r1, r6
 801f8ca:	4640      	mov	r0, r8
 801f8cc:	f001 f904 	bl	8020ad8 <_free_r>
 801f8d0:	e7e1      	b.n	801f896 <_realloc_r+0x1e>
 801f8d2:	4635      	mov	r5, r6
 801f8d4:	e7df      	b.n	801f896 <_realloc_r+0x1e>

0801f8d6 <sulp>:
 801f8d6:	b570      	push	{r4, r5, r6, lr}
 801f8d8:	4604      	mov	r4, r0
 801f8da:	460d      	mov	r5, r1
 801f8dc:	ec45 4b10 	vmov	d0, r4, r5
 801f8e0:	4616      	mov	r6, r2
 801f8e2:	f002 f81b 	bl	802191c <__ulp>
 801f8e6:	ec51 0b10 	vmov	r0, r1, d0
 801f8ea:	b17e      	cbz	r6, 801f90c <sulp+0x36>
 801f8ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f8f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f8f4:	2b00      	cmp	r3, #0
 801f8f6:	dd09      	ble.n	801f90c <sulp+0x36>
 801f8f8:	051b      	lsls	r3, r3, #20
 801f8fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801f8fe:	2400      	movs	r4, #0
 801f900:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801f904:	4622      	mov	r2, r4
 801f906:	462b      	mov	r3, r5
 801f908:	f7e6 fafe 	bl	8005f08 <__aeabi_dmul>
 801f90c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f910 <_strtod_l>:
 801f910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f914:	ed2d 8b02 	vpush	{d8}
 801f918:	b09b      	sub	sp, #108	; 0x6c
 801f91a:	4604      	mov	r4, r0
 801f91c:	9213      	str	r2, [sp, #76]	; 0x4c
 801f91e:	2200      	movs	r2, #0
 801f920:	9216      	str	r2, [sp, #88]	; 0x58
 801f922:	460d      	mov	r5, r1
 801f924:	f04f 0800 	mov.w	r8, #0
 801f928:	f04f 0900 	mov.w	r9, #0
 801f92c:	460a      	mov	r2, r1
 801f92e:	9215      	str	r2, [sp, #84]	; 0x54
 801f930:	7811      	ldrb	r1, [r2, #0]
 801f932:	292b      	cmp	r1, #43	; 0x2b
 801f934:	d04c      	beq.n	801f9d0 <_strtod_l+0xc0>
 801f936:	d83a      	bhi.n	801f9ae <_strtod_l+0x9e>
 801f938:	290d      	cmp	r1, #13
 801f93a:	d834      	bhi.n	801f9a6 <_strtod_l+0x96>
 801f93c:	2908      	cmp	r1, #8
 801f93e:	d834      	bhi.n	801f9aa <_strtod_l+0x9a>
 801f940:	2900      	cmp	r1, #0
 801f942:	d03d      	beq.n	801f9c0 <_strtod_l+0xb0>
 801f944:	2200      	movs	r2, #0
 801f946:	920a      	str	r2, [sp, #40]	; 0x28
 801f948:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801f94a:	7832      	ldrb	r2, [r6, #0]
 801f94c:	2a30      	cmp	r2, #48	; 0x30
 801f94e:	f040 80b4 	bne.w	801faba <_strtod_l+0x1aa>
 801f952:	7872      	ldrb	r2, [r6, #1]
 801f954:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801f958:	2a58      	cmp	r2, #88	; 0x58
 801f95a:	d170      	bne.n	801fa3e <_strtod_l+0x12e>
 801f95c:	9302      	str	r3, [sp, #8]
 801f95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f960:	9301      	str	r3, [sp, #4]
 801f962:	ab16      	add	r3, sp, #88	; 0x58
 801f964:	9300      	str	r3, [sp, #0]
 801f966:	4a8e      	ldr	r2, [pc, #568]	; (801fba0 <_strtod_l+0x290>)
 801f968:	ab17      	add	r3, sp, #92	; 0x5c
 801f96a:	a915      	add	r1, sp, #84	; 0x54
 801f96c:	4620      	mov	r0, r4
 801f96e:	f001 f967 	bl	8020c40 <__gethex>
 801f972:	f010 070f 	ands.w	r7, r0, #15
 801f976:	4605      	mov	r5, r0
 801f978:	d005      	beq.n	801f986 <_strtod_l+0x76>
 801f97a:	2f06      	cmp	r7, #6
 801f97c:	d12a      	bne.n	801f9d4 <_strtod_l+0xc4>
 801f97e:	3601      	adds	r6, #1
 801f980:	2300      	movs	r3, #0
 801f982:	9615      	str	r6, [sp, #84]	; 0x54
 801f984:	930a      	str	r3, [sp, #40]	; 0x28
 801f986:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f988:	2b00      	cmp	r3, #0
 801f98a:	f040 857f 	bne.w	802048c <_strtod_l+0xb7c>
 801f98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f990:	b1db      	cbz	r3, 801f9ca <_strtod_l+0xba>
 801f992:	4642      	mov	r2, r8
 801f994:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801f998:	ec43 2b10 	vmov	d0, r2, r3
 801f99c:	b01b      	add	sp, #108	; 0x6c
 801f99e:	ecbd 8b02 	vpop	{d8}
 801f9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9a6:	2920      	cmp	r1, #32
 801f9a8:	d1cc      	bne.n	801f944 <_strtod_l+0x34>
 801f9aa:	3201      	adds	r2, #1
 801f9ac:	e7bf      	b.n	801f92e <_strtod_l+0x1e>
 801f9ae:	292d      	cmp	r1, #45	; 0x2d
 801f9b0:	d1c8      	bne.n	801f944 <_strtod_l+0x34>
 801f9b2:	2101      	movs	r1, #1
 801f9b4:	910a      	str	r1, [sp, #40]	; 0x28
 801f9b6:	1c51      	adds	r1, r2, #1
 801f9b8:	9115      	str	r1, [sp, #84]	; 0x54
 801f9ba:	7852      	ldrb	r2, [r2, #1]
 801f9bc:	2a00      	cmp	r2, #0
 801f9be:	d1c3      	bne.n	801f948 <_strtod_l+0x38>
 801f9c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f9c2:	9515      	str	r5, [sp, #84]	; 0x54
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	f040 855f 	bne.w	8020488 <_strtod_l+0xb78>
 801f9ca:	4642      	mov	r2, r8
 801f9cc:	464b      	mov	r3, r9
 801f9ce:	e7e3      	b.n	801f998 <_strtod_l+0x88>
 801f9d0:	2100      	movs	r1, #0
 801f9d2:	e7ef      	b.n	801f9b4 <_strtod_l+0xa4>
 801f9d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f9d6:	b13a      	cbz	r2, 801f9e8 <_strtod_l+0xd8>
 801f9d8:	2135      	movs	r1, #53	; 0x35
 801f9da:	a818      	add	r0, sp, #96	; 0x60
 801f9dc:	f002 f89b 	bl	8021b16 <__copybits>
 801f9e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f9e2:	4620      	mov	r0, r4
 801f9e4:	f001 fc6e 	bl	80212c4 <_Bfree>
 801f9e8:	3f01      	subs	r7, #1
 801f9ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f9ec:	2f04      	cmp	r7, #4
 801f9ee:	d806      	bhi.n	801f9fe <_strtod_l+0xee>
 801f9f0:	e8df f007 	tbb	[pc, r7]
 801f9f4:	201d0314 	.word	0x201d0314
 801f9f8:	14          	.byte	0x14
 801f9f9:	00          	.byte	0x00
 801f9fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801f9fe:	05e9      	lsls	r1, r5, #23
 801fa00:	bf48      	it	mi
 801fa02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801fa06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801fa0a:	0d1b      	lsrs	r3, r3, #20
 801fa0c:	051b      	lsls	r3, r3, #20
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d1b9      	bne.n	801f986 <_strtod_l+0x76>
 801fa12:	f001 f811 	bl	8020a38 <__errno>
 801fa16:	2322      	movs	r3, #34	; 0x22
 801fa18:	6003      	str	r3, [r0, #0]
 801fa1a:	e7b4      	b.n	801f986 <_strtod_l+0x76>
 801fa1c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801fa20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801fa24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801fa28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801fa2c:	e7e7      	b.n	801f9fe <_strtod_l+0xee>
 801fa2e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801fba8 <_strtod_l+0x298>
 801fa32:	e7e4      	b.n	801f9fe <_strtod_l+0xee>
 801fa34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801fa38:	f04f 38ff 	mov.w	r8, #4294967295
 801fa3c:	e7df      	b.n	801f9fe <_strtod_l+0xee>
 801fa3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fa40:	1c5a      	adds	r2, r3, #1
 801fa42:	9215      	str	r2, [sp, #84]	; 0x54
 801fa44:	785b      	ldrb	r3, [r3, #1]
 801fa46:	2b30      	cmp	r3, #48	; 0x30
 801fa48:	d0f9      	beq.n	801fa3e <_strtod_l+0x12e>
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	d09b      	beq.n	801f986 <_strtod_l+0x76>
 801fa4e:	2301      	movs	r3, #1
 801fa50:	f04f 0a00 	mov.w	sl, #0
 801fa54:	9304      	str	r3, [sp, #16]
 801fa56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fa58:	930b      	str	r3, [sp, #44]	; 0x2c
 801fa5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801fa5e:	46d3      	mov	fp, sl
 801fa60:	220a      	movs	r2, #10
 801fa62:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fa64:	7806      	ldrb	r6, [r0, #0]
 801fa66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801fa6a:	b2d9      	uxtb	r1, r3
 801fa6c:	2909      	cmp	r1, #9
 801fa6e:	d926      	bls.n	801fabe <_strtod_l+0x1ae>
 801fa70:	494c      	ldr	r1, [pc, #304]	; (801fba4 <_strtod_l+0x294>)
 801fa72:	2201      	movs	r2, #1
 801fa74:	f000 ff0e 	bl	8020894 <strncmp>
 801fa78:	2800      	cmp	r0, #0
 801fa7a:	d030      	beq.n	801fade <_strtod_l+0x1ce>
 801fa7c:	2000      	movs	r0, #0
 801fa7e:	4632      	mov	r2, r6
 801fa80:	9005      	str	r0, [sp, #20]
 801fa82:	465e      	mov	r6, fp
 801fa84:	4603      	mov	r3, r0
 801fa86:	2a65      	cmp	r2, #101	; 0x65
 801fa88:	d001      	beq.n	801fa8e <_strtod_l+0x17e>
 801fa8a:	2a45      	cmp	r2, #69	; 0x45
 801fa8c:	d113      	bne.n	801fab6 <_strtod_l+0x1a6>
 801fa8e:	b91e      	cbnz	r6, 801fa98 <_strtod_l+0x188>
 801fa90:	9a04      	ldr	r2, [sp, #16]
 801fa92:	4302      	orrs	r2, r0
 801fa94:	d094      	beq.n	801f9c0 <_strtod_l+0xb0>
 801fa96:	2600      	movs	r6, #0
 801fa98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801fa9a:	1c6a      	adds	r2, r5, #1
 801fa9c:	9215      	str	r2, [sp, #84]	; 0x54
 801fa9e:	786a      	ldrb	r2, [r5, #1]
 801faa0:	2a2b      	cmp	r2, #43	; 0x2b
 801faa2:	d074      	beq.n	801fb8e <_strtod_l+0x27e>
 801faa4:	2a2d      	cmp	r2, #45	; 0x2d
 801faa6:	d078      	beq.n	801fb9a <_strtod_l+0x28a>
 801faa8:	f04f 0c00 	mov.w	ip, #0
 801faac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801fab0:	2909      	cmp	r1, #9
 801fab2:	d97f      	bls.n	801fbb4 <_strtod_l+0x2a4>
 801fab4:	9515      	str	r5, [sp, #84]	; 0x54
 801fab6:	2700      	movs	r7, #0
 801fab8:	e09e      	b.n	801fbf8 <_strtod_l+0x2e8>
 801faba:	2300      	movs	r3, #0
 801fabc:	e7c8      	b.n	801fa50 <_strtod_l+0x140>
 801fabe:	f1bb 0f08 	cmp.w	fp, #8
 801fac2:	bfd8      	it	le
 801fac4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801fac6:	f100 0001 	add.w	r0, r0, #1
 801faca:	bfda      	itte	le
 801facc:	fb02 3301 	mlale	r3, r2, r1, r3
 801fad0:	9309      	strle	r3, [sp, #36]	; 0x24
 801fad2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801fad6:	f10b 0b01 	add.w	fp, fp, #1
 801fada:	9015      	str	r0, [sp, #84]	; 0x54
 801fadc:	e7c1      	b.n	801fa62 <_strtod_l+0x152>
 801fade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fae0:	1c5a      	adds	r2, r3, #1
 801fae2:	9215      	str	r2, [sp, #84]	; 0x54
 801fae4:	785a      	ldrb	r2, [r3, #1]
 801fae6:	f1bb 0f00 	cmp.w	fp, #0
 801faea:	d037      	beq.n	801fb5c <_strtod_l+0x24c>
 801faec:	9005      	str	r0, [sp, #20]
 801faee:	465e      	mov	r6, fp
 801faf0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801faf4:	2b09      	cmp	r3, #9
 801faf6:	d912      	bls.n	801fb1e <_strtod_l+0x20e>
 801faf8:	2301      	movs	r3, #1
 801fafa:	e7c4      	b.n	801fa86 <_strtod_l+0x176>
 801fafc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fafe:	1c5a      	adds	r2, r3, #1
 801fb00:	9215      	str	r2, [sp, #84]	; 0x54
 801fb02:	785a      	ldrb	r2, [r3, #1]
 801fb04:	3001      	adds	r0, #1
 801fb06:	2a30      	cmp	r2, #48	; 0x30
 801fb08:	d0f8      	beq.n	801fafc <_strtod_l+0x1ec>
 801fb0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801fb0e:	2b08      	cmp	r3, #8
 801fb10:	f200 84c1 	bhi.w	8020496 <_strtod_l+0xb86>
 801fb14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fb16:	9005      	str	r0, [sp, #20]
 801fb18:	2000      	movs	r0, #0
 801fb1a:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb1c:	4606      	mov	r6, r0
 801fb1e:	3a30      	subs	r2, #48	; 0x30
 801fb20:	f100 0301 	add.w	r3, r0, #1
 801fb24:	d014      	beq.n	801fb50 <_strtod_l+0x240>
 801fb26:	9905      	ldr	r1, [sp, #20]
 801fb28:	4419      	add	r1, r3
 801fb2a:	9105      	str	r1, [sp, #20]
 801fb2c:	4633      	mov	r3, r6
 801fb2e:	eb00 0c06 	add.w	ip, r0, r6
 801fb32:	210a      	movs	r1, #10
 801fb34:	4563      	cmp	r3, ip
 801fb36:	d113      	bne.n	801fb60 <_strtod_l+0x250>
 801fb38:	1833      	adds	r3, r6, r0
 801fb3a:	2b08      	cmp	r3, #8
 801fb3c:	f106 0601 	add.w	r6, r6, #1
 801fb40:	4406      	add	r6, r0
 801fb42:	dc1a      	bgt.n	801fb7a <_strtod_l+0x26a>
 801fb44:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fb46:	230a      	movs	r3, #10
 801fb48:	fb03 2301 	mla	r3, r3, r1, r2
 801fb4c:	9309      	str	r3, [sp, #36]	; 0x24
 801fb4e:	2300      	movs	r3, #0
 801fb50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fb52:	1c51      	adds	r1, r2, #1
 801fb54:	9115      	str	r1, [sp, #84]	; 0x54
 801fb56:	7852      	ldrb	r2, [r2, #1]
 801fb58:	4618      	mov	r0, r3
 801fb5a:	e7c9      	b.n	801faf0 <_strtod_l+0x1e0>
 801fb5c:	4658      	mov	r0, fp
 801fb5e:	e7d2      	b.n	801fb06 <_strtod_l+0x1f6>
 801fb60:	2b08      	cmp	r3, #8
 801fb62:	f103 0301 	add.w	r3, r3, #1
 801fb66:	dc03      	bgt.n	801fb70 <_strtod_l+0x260>
 801fb68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fb6a:	434f      	muls	r7, r1
 801fb6c:	9709      	str	r7, [sp, #36]	; 0x24
 801fb6e:	e7e1      	b.n	801fb34 <_strtod_l+0x224>
 801fb70:	2b10      	cmp	r3, #16
 801fb72:	bfd8      	it	le
 801fb74:	fb01 fa0a 	mulle.w	sl, r1, sl
 801fb78:	e7dc      	b.n	801fb34 <_strtod_l+0x224>
 801fb7a:	2e10      	cmp	r6, #16
 801fb7c:	bfdc      	itt	le
 801fb7e:	230a      	movle	r3, #10
 801fb80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801fb84:	e7e3      	b.n	801fb4e <_strtod_l+0x23e>
 801fb86:	2300      	movs	r3, #0
 801fb88:	9305      	str	r3, [sp, #20]
 801fb8a:	2301      	movs	r3, #1
 801fb8c:	e780      	b.n	801fa90 <_strtod_l+0x180>
 801fb8e:	f04f 0c00 	mov.w	ip, #0
 801fb92:	1caa      	adds	r2, r5, #2
 801fb94:	9215      	str	r2, [sp, #84]	; 0x54
 801fb96:	78aa      	ldrb	r2, [r5, #2]
 801fb98:	e788      	b.n	801faac <_strtod_l+0x19c>
 801fb9a:	f04f 0c01 	mov.w	ip, #1
 801fb9e:	e7f8      	b.n	801fb92 <_strtod_l+0x282>
 801fba0:	08023780 	.word	0x08023780
 801fba4:	08023770 	.word	0x08023770
 801fba8:	7ff00000 	.word	0x7ff00000
 801fbac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fbae:	1c51      	adds	r1, r2, #1
 801fbb0:	9115      	str	r1, [sp, #84]	; 0x54
 801fbb2:	7852      	ldrb	r2, [r2, #1]
 801fbb4:	2a30      	cmp	r2, #48	; 0x30
 801fbb6:	d0f9      	beq.n	801fbac <_strtod_l+0x29c>
 801fbb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801fbbc:	2908      	cmp	r1, #8
 801fbbe:	f63f af7a 	bhi.w	801fab6 <_strtod_l+0x1a6>
 801fbc2:	3a30      	subs	r2, #48	; 0x30
 801fbc4:	9208      	str	r2, [sp, #32]
 801fbc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fbc8:	920c      	str	r2, [sp, #48]	; 0x30
 801fbca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fbcc:	1c57      	adds	r7, r2, #1
 801fbce:	9715      	str	r7, [sp, #84]	; 0x54
 801fbd0:	7852      	ldrb	r2, [r2, #1]
 801fbd2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801fbd6:	f1be 0f09 	cmp.w	lr, #9
 801fbda:	d938      	bls.n	801fc4e <_strtod_l+0x33e>
 801fbdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fbde:	1a7f      	subs	r7, r7, r1
 801fbe0:	2f08      	cmp	r7, #8
 801fbe2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801fbe6:	dc03      	bgt.n	801fbf0 <_strtod_l+0x2e0>
 801fbe8:	9908      	ldr	r1, [sp, #32]
 801fbea:	428f      	cmp	r7, r1
 801fbec:	bfa8      	it	ge
 801fbee:	460f      	movge	r7, r1
 801fbf0:	f1bc 0f00 	cmp.w	ip, #0
 801fbf4:	d000      	beq.n	801fbf8 <_strtod_l+0x2e8>
 801fbf6:	427f      	negs	r7, r7
 801fbf8:	2e00      	cmp	r6, #0
 801fbfa:	d14f      	bne.n	801fc9c <_strtod_l+0x38c>
 801fbfc:	9904      	ldr	r1, [sp, #16]
 801fbfe:	4301      	orrs	r1, r0
 801fc00:	f47f aec1 	bne.w	801f986 <_strtod_l+0x76>
 801fc04:	2b00      	cmp	r3, #0
 801fc06:	f47f aedb 	bne.w	801f9c0 <_strtod_l+0xb0>
 801fc0a:	2a69      	cmp	r2, #105	; 0x69
 801fc0c:	d029      	beq.n	801fc62 <_strtod_l+0x352>
 801fc0e:	dc26      	bgt.n	801fc5e <_strtod_l+0x34e>
 801fc10:	2a49      	cmp	r2, #73	; 0x49
 801fc12:	d026      	beq.n	801fc62 <_strtod_l+0x352>
 801fc14:	2a4e      	cmp	r2, #78	; 0x4e
 801fc16:	f47f aed3 	bne.w	801f9c0 <_strtod_l+0xb0>
 801fc1a:	499b      	ldr	r1, [pc, #620]	; (801fe88 <_strtod_l+0x578>)
 801fc1c:	a815      	add	r0, sp, #84	; 0x54
 801fc1e:	f001 fa4f 	bl	80210c0 <__match>
 801fc22:	2800      	cmp	r0, #0
 801fc24:	f43f aecc 	beq.w	801f9c0 <_strtod_l+0xb0>
 801fc28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc2a:	781b      	ldrb	r3, [r3, #0]
 801fc2c:	2b28      	cmp	r3, #40	; 0x28
 801fc2e:	d12f      	bne.n	801fc90 <_strtod_l+0x380>
 801fc30:	4996      	ldr	r1, [pc, #600]	; (801fe8c <_strtod_l+0x57c>)
 801fc32:	aa18      	add	r2, sp, #96	; 0x60
 801fc34:	a815      	add	r0, sp, #84	; 0x54
 801fc36:	f001 fa57 	bl	80210e8 <__hexnan>
 801fc3a:	2805      	cmp	r0, #5
 801fc3c:	d128      	bne.n	801fc90 <_strtod_l+0x380>
 801fc3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fc40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801fc44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801fc48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801fc4c:	e69b      	b.n	801f986 <_strtod_l+0x76>
 801fc4e:	9f08      	ldr	r7, [sp, #32]
 801fc50:	210a      	movs	r1, #10
 801fc52:	fb01 2107 	mla	r1, r1, r7, r2
 801fc56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801fc5a:	9208      	str	r2, [sp, #32]
 801fc5c:	e7b5      	b.n	801fbca <_strtod_l+0x2ba>
 801fc5e:	2a6e      	cmp	r2, #110	; 0x6e
 801fc60:	e7d9      	b.n	801fc16 <_strtod_l+0x306>
 801fc62:	498b      	ldr	r1, [pc, #556]	; (801fe90 <_strtod_l+0x580>)
 801fc64:	a815      	add	r0, sp, #84	; 0x54
 801fc66:	f001 fa2b 	bl	80210c0 <__match>
 801fc6a:	2800      	cmp	r0, #0
 801fc6c:	f43f aea8 	beq.w	801f9c0 <_strtod_l+0xb0>
 801fc70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc72:	4988      	ldr	r1, [pc, #544]	; (801fe94 <_strtod_l+0x584>)
 801fc74:	3b01      	subs	r3, #1
 801fc76:	a815      	add	r0, sp, #84	; 0x54
 801fc78:	9315      	str	r3, [sp, #84]	; 0x54
 801fc7a:	f001 fa21 	bl	80210c0 <__match>
 801fc7e:	b910      	cbnz	r0, 801fc86 <_strtod_l+0x376>
 801fc80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc82:	3301      	adds	r3, #1
 801fc84:	9315      	str	r3, [sp, #84]	; 0x54
 801fc86:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801fea4 <_strtod_l+0x594>
 801fc8a:	f04f 0800 	mov.w	r8, #0
 801fc8e:	e67a      	b.n	801f986 <_strtod_l+0x76>
 801fc90:	4881      	ldr	r0, [pc, #516]	; (801fe98 <_strtod_l+0x588>)
 801fc92:	f000 ff19 	bl	8020ac8 <nan>
 801fc96:	ec59 8b10 	vmov	r8, r9, d0
 801fc9a:	e674      	b.n	801f986 <_strtod_l+0x76>
 801fc9c:	9b05      	ldr	r3, [sp, #20]
 801fc9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fca0:	1afb      	subs	r3, r7, r3
 801fca2:	f1bb 0f00 	cmp.w	fp, #0
 801fca6:	bf08      	it	eq
 801fca8:	46b3      	moveq	fp, r6
 801fcaa:	2e10      	cmp	r6, #16
 801fcac:	9308      	str	r3, [sp, #32]
 801fcae:	4635      	mov	r5, r6
 801fcb0:	bfa8      	it	ge
 801fcb2:	2510      	movge	r5, #16
 801fcb4:	f7e6 f8ae 	bl	8005e14 <__aeabi_ui2d>
 801fcb8:	2e09      	cmp	r6, #9
 801fcba:	4680      	mov	r8, r0
 801fcbc:	4689      	mov	r9, r1
 801fcbe:	dd13      	ble.n	801fce8 <_strtod_l+0x3d8>
 801fcc0:	4b76      	ldr	r3, [pc, #472]	; (801fe9c <_strtod_l+0x58c>)
 801fcc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801fcc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801fcca:	f7e6 f91d 	bl	8005f08 <__aeabi_dmul>
 801fcce:	4680      	mov	r8, r0
 801fcd0:	4650      	mov	r0, sl
 801fcd2:	4689      	mov	r9, r1
 801fcd4:	f7e6 f89e 	bl	8005e14 <__aeabi_ui2d>
 801fcd8:	4602      	mov	r2, r0
 801fcda:	460b      	mov	r3, r1
 801fcdc:	4640      	mov	r0, r8
 801fcde:	4649      	mov	r1, r9
 801fce0:	f7e5 ff5c 	bl	8005b9c <__adddf3>
 801fce4:	4680      	mov	r8, r0
 801fce6:	4689      	mov	r9, r1
 801fce8:	2e0f      	cmp	r6, #15
 801fcea:	dc38      	bgt.n	801fd5e <_strtod_l+0x44e>
 801fcec:	9b08      	ldr	r3, [sp, #32]
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	f43f ae49 	beq.w	801f986 <_strtod_l+0x76>
 801fcf4:	dd24      	ble.n	801fd40 <_strtod_l+0x430>
 801fcf6:	2b16      	cmp	r3, #22
 801fcf8:	dc0b      	bgt.n	801fd12 <_strtod_l+0x402>
 801fcfa:	4968      	ldr	r1, [pc, #416]	; (801fe9c <_strtod_l+0x58c>)
 801fcfc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd04:	4642      	mov	r2, r8
 801fd06:	464b      	mov	r3, r9
 801fd08:	f7e6 f8fe 	bl	8005f08 <__aeabi_dmul>
 801fd0c:	4680      	mov	r8, r0
 801fd0e:	4689      	mov	r9, r1
 801fd10:	e639      	b.n	801f986 <_strtod_l+0x76>
 801fd12:	9a08      	ldr	r2, [sp, #32]
 801fd14:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801fd18:	4293      	cmp	r3, r2
 801fd1a:	db20      	blt.n	801fd5e <_strtod_l+0x44e>
 801fd1c:	4c5f      	ldr	r4, [pc, #380]	; (801fe9c <_strtod_l+0x58c>)
 801fd1e:	f1c6 060f 	rsb	r6, r6, #15
 801fd22:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801fd26:	4642      	mov	r2, r8
 801fd28:	464b      	mov	r3, r9
 801fd2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd2e:	f7e6 f8eb 	bl	8005f08 <__aeabi_dmul>
 801fd32:	9b08      	ldr	r3, [sp, #32]
 801fd34:	1b9e      	subs	r6, r3, r6
 801fd36:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801fd3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801fd3e:	e7e3      	b.n	801fd08 <_strtod_l+0x3f8>
 801fd40:	9b08      	ldr	r3, [sp, #32]
 801fd42:	3316      	adds	r3, #22
 801fd44:	db0b      	blt.n	801fd5e <_strtod_l+0x44e>
 801fd46:	9b05      	ldr	r3, [sp, #20]
 801fd48:	1bdf      	subs	r7, r3, r7
 801fd4a:	4b54      	ldr	r3, [pc, #336]	; (801fe9c <_strtod_l+0x58c>)
 801fd4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801fd50:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fd54:	4640      	mov	r0, r8
 801fd56:	4649      	mov	r1, r9
 801fd58:	f7e6 fa00 	bl	800615c <__aeabi_ddiv>
 801fd5c:	e7d6      	b.n	801fd0c <_strtod_l+0x3fc>
 801fd5e:	9b08      	ldr	r3, [sp, #32]
 801fd60:	1b75      	subs	r5, r6, r5
 801fd62:	441d      	add	r5, r3
 801fd64:	2d00      	cmp	r5, #0
 801fd66:	dd70      	ble.n	801fe4a <_strtod_l+0x53a>
 801fd68:	f015 030f 	ands.w	r3, r5, #15
 801fd6c:	d00a      	beq.n	801fd84 <_strtod_l+0x474>
 801fd6e:	494b      	ldr	r1, [pc, #300]	; (801fe9c <_strtod_l+0x58c>)
 801fd70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fd74:	4642      	mov	r2, r8
 801fd76:	464b      	mov	r3, r9
 801fd78:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd7c:	f7e6 f8c4 	bl	8005f08 <__aeabi_dmul>
 801fd80:	4680      	mov	r8, r0
 801fd82:	4689      	mov	r9, r1
 801fd84:	f035 050f 	bics.w	r5, r5, #15
 801fd88:	d04d      	beq.n	801fe26 <_strtod_l+0x516>
 801fd8a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801fd8e:	dd22      	ble.n	801fdd6 <_strtod_l+0x4c6>
 801fd90:	2500      	movs	r5, #0
 801fd92:	46ab      	mov	fp, r5
 801fd94:	9509      	str	r5, [sp, #36]	; 0x24
 801fd96:	9505      	str	r5, [sp, #20]
 801fd98:	2322      	movs	r3, #34	; 0x22
 801fd9a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801fea4 <_strtod_l+0x594>
 801fd9e:	6023      	str	r3, [r4, #0]
 801fda0:	f04f 0800 	mov.w	r8, #0
 801fda4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	f43f aded 	beq.w	801f986 <_strtod_l+0x76>
 801fdac:	9916      	ldr	r1, [sp, #88]	; 0x58
 801fdae:	4620      	mov	r0, r4
 801fdb0:	f001 fa88 	bl	80212c4 <_Bfree>
 801fdb4:	9905      	ldr	r1, [sp, #20]
 801fdb6:	4620      	mov	r0, r4
 801fdb8:	f001 fa84 	bl	80212c4 <_Bfree>
 801fdbc:	4659      	mov	r1, fp
 801fdbe:	4620      	mov	r0, r4
 801fdc0:	f001 fa80 	bl	80212c4 <_Bfree>
 801fdc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fdc6:	4620      	mov	r0, r4
 801fdc8:	f001 fa7c 	bl	80212c4 <_Bfree>
 801fdcc:	4629      	mov	r1, r5
 801fdce:	4620      	mov	r0, r4
 801fdd0:	f001 fa78 	bl	80212c4 <_Bfree>
 801fdd4:	e5d7      	b.n	801f986 <_strtod_l+0x76>
 801fdd6:	4b32      	ldr	r3, [pc, #200]	; (801fea0 <_strtod_l+0x590>)
 801fdd8:	9304      	str	r3, [sp, #16]
 801fdda:	2300      	movs	r3, #0
 801fddc:	112d      	asrs	r5, r5, #4
 801fdde:	4640      	mov	r0, r8
 801fde0:	4649      	mov	r1, r9
 801fde2:	469a      	mov	sl, r3
 801fde4:	2d01      	cmp	r5, #1
 801fde6:	dc21      	bgt.n	801fe2c <_strtod_l+0x51c>
 801fde8:	b10b      	cbz	r3, 801fdee <_strtod_l+0x4de>
 801fdea:	4680      	mov	r8, r0
 801fdec:	4689      	mov	r9, r1
 801fdee:	492c      	ldr	r1, [pc, #176]	; (801fea0 <_strtod_l+0x590>)
 801fdf0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801fdf4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801fdf8:	4642      	mov	r2, r8
 801fdfa:	464b      	mov	r3, r9
 801fdfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe00:	f7e6 f882 	bl	8005f08 <__aeabi_dmul>
 801fe04:	4b27      	ldr	r3, [pc, #156]	; (801fea4 <_strtod_l+0x594>)
 801fe06:	460a      	mov	r2, r1
 801fe08:	400b      	ands	r3, r1
 801fe0a:	4927      	ldr	r1, [pc, #156]	; (801fea8 <_strtod_l+0x598>)
 801fe0c:	428b      	cmp	r3, r1
 801fe0e:	4680      	mov	r8, r0
 801fe10:	d8be      	bhi.n	801fd90 <_strtod_l+0x480>
 801fe12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801fe16:	428b      	cmp	r3, r1
 801fe18:	bf86      	itte	hi
 801fe1a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801feac <_strtod_l+0x59c>
 801fe1e:	f04f 38ff 	movhi.w	r8, #4294967295
 801fe22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801fe26:	2300      	movs	r3, #0
 801fe28:	9304      	str	r3, [sp, #16]
 801fe2a:	e07b      	b.n	801ff24 <_strtod_l+0x614>
 801fe2c:	07ea      	lsls	r2, r5, #31
 801fe2e:	d505      	bpl.n	801fe3c <_strtod_l+0x52c>
 801fe30:	9b04      	ldr	r3, [sp, #16]
 801fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe36:	f7e6 f867 	bl	8005f08 <__aeabi_dmul>
 801fe3a:	2301      	movs	r3, #1
 801fe3c:	9a04      	ldr	r2, [sp, #16]
 801fe3e:	3208      	adds	r2, #8
 801fe40:	f10a 0a01 	add.w	sl, sl, #1
 801fe44:	106d      	asrs	r5, r5, #1
 801fe46:	9204      	str	r2, [sp, #16]
 801fe48:	e7cc      	b.n	801fde4 <_strtod_l+0x4d4>
 801fe4a:	d0ec      	beq.n	801fe26 <_strtod_l+0x516>
 801fe4c:	426d      	negs	r5, r5
 801fe4e:	f015 020f 	ands.w	r2, r5, #15
 801fe52:	d00a      	beq.n	801fe6a <_strtod_l+0x55a>
 801fe54:	4b11      	ldr	r3, [pc, #68]	; (801fe9c <_strtod_l+0x58c>)
 801fe56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fe5a:	4640      	mov	r0, r8
 801fe5c:	4649      	mov	r1, r9
 801fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe62:	f7e6 f97b 	bl	800615c <__aeabi_ddiv>
 801fe66:	4680      	mov	r8, r0
 801fe68:	4689      	mov	r9, r1
 801fe6a:	112d      	asrs	r5, r5, #4
 801fe6c:	d0db      	beq.n	801fe26 <_strtod_l+0x516>
 801fe6e:	2d1f      	cmp	r5, #31
 801fe70:	dd1e      	ble.n	801feb0 <_strtod_l+0x5a0>
 801fe72:	2500      	movs	r5, #0
 801fe74:	46ab      	mov	fp, r5
 801fe76:	9509      	str	r5, [sp, #36]	; 0x24
 801fe78:	9505      	str	r5, [sp, #20]
 801fe7a:	2322      	movs	r3, #34	; 0x22
 801fe7c:	f04f 0800 	mov.w	r8, #0
 801fe80:	f04f 0900 	mov.w	r9, #0
 801fe84:	6023      	str	r3, [r4, #0]
 801fe86:	e78d      	b.n	801fda4 <_strtod_l+0x494>
 801fe88:	0802377b 	.word	0x0802377b
 801fe8c:	08023794 	.word	0x08023794
 801fe90:	08023772 	.word	0x08023772
 801fe94:	08023775 	.word	0x08023775
 801fe98:	08023b2a 	.word	0x08023b2a
 801fe9c:	080239e8 	.word	0x080239e8
 801fea0:	080239c0 	.word	0x080239c0
 801fea4:	7ff00000 	.word	0x7ff00000
 801fea8:	7ca00000 	.word	0x7ca00000
 801feac:	7fefffff 	.word	0x7fefffff
 801feb0:	f015 0310 	ands.w	r3, r5, #16
 801feb4:	bf18      	it	ne
 801feb6:	236a      	movne	r3, #106	; 0x6a
 801feb8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 802025c <_strtod_l+0x94c>
 801febc:	9304      	str	r3, [sp, #16]
 801febe:	4640      	mov	r0, r8
 801fec0:	4649      	mov	r1, r9
 801fec2:	2300      	movs	r3, #0
 801fec4:	07ea      	lsls	r2, r5, #31
 801fec6:	d504      	bpl.n	801fed2 <_strtod_l+0x5c2>
 801fec8:	e9da 2300 	ldrd	r2, r3, [sl]
 801fecc:	f7e6 f81c 	bl	8005f08 <__aeabi_dmul>
 801fed0:	2301      	movs	r3, #1
 801fed2:	106d      	asrs	r5, r5, #1
 801fed4:	f10a 0a08 	add.w	sl, sl, #8
 801fed8:	d1f4      	bne.n	801fec4 <_strtod_l+0x5b4>
 801feda:	b10b      	cbz	r3, 801fee0 <_strtod_l+0x5d0>
 801fedc:	4680      	mov	r8, r0
 801fede:	4689      	mov	r9, r1
 801fee0:	9b04      	ldr	r3, [sp, #16]
 801fee2:	b1bb      	cbz	r3, 801ff14 <_strtod_l+0x604>
 801fee4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801fee8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801feec:	2b00      	cmp	r3, #0
 801feee:	4649      	mov	r1, r9
 801fef0:	dd10      	ble.n	801ff14 <_strtod_l+0x604>
 801fef2:	2b1f      	cmp	r3, #31
 801fef4:	f340 811e 	ble.w	8020134 <_strtod_l+0x824>
 801fef8:	2b34      	cmp	r3, #52	; 0x34
 801fefa:	bfde      	ittt	le
 801fefc:	f04f 33ff 	movle.w	r3, #4294967295
 801ff00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ff04:	4093      	lslle	r3, r2
 801ff06:	f04f 0800 	mov.w	r8, #0
 801ff0a:	bfcc      	ite	gt
 801ff0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801ff10:	ea03 0901 	andle.w	r9, r3, r1
 801ff14:	2200      	movs	r2, #0
 801ff16:	2300      	movs	r3, #0
 801ff18:	4640      	mov	r0, r8
 801ff1a:	4649      	mov	r1, r9
 801ff1c:	f7e6 fa5c 	bl	80063d8 <__aeabi_dcmpeq>
 801ff20:	2800      	cmp	r0, #0
 801ff22:	d1a6      	bne.n	801fe72 <_strtod_l+0x562>
 801ff24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff26:	9300      	str	r3, [sp, #0]
 801ff28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ff2a:	4633      	mov	r3, r6
 801ff2c:	465a      	mov	r2, fp
 801ff2e:	4620      	mov	r0, r4
 801ff30:	f001 fa30 	bl	8021394 <__s2b>
 801ff34:	9009      	str	r0, [sp, #36]	; 0x24
 801ff36:	2800      	cmp	r0, #0
 801ff38:	f43f af2a 	beq.w	801fd90 <_strtod_l+0x480>
 801ff3c:	9a08      	ldr	r2, [sp, #32]
 801ff3e:	9b05      	ldr	r3, [sp, #20]
 801ff40:	2a00      	cmp	r2, #0
 801ff42:	eba3 0307 	sub.w	r3, r3, r7
 801ff46:	bfa8      	it	ge
 801ff48:	2300      	movge	r3, #0
 801ff4a:	930c      	str	r3, [sp, #48]	; 0x30
 801ff4c:	2500      	movs	r5, #0
 801ff4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ff52:	9312      	str	r3, [sp, #72]	; 0x48
 801ff54:	46ab      	mov	fp, r5
 801ff56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff58:	4620      	mov	r0, r4
 801ff5a:	6859      	ldr	r1, [r3, #4]
 801ff5c:	f001 f972 	bl	8021244 <_Balloc>
 801ff60:	9005      	str	r0, [sp, #20]
 801ff62:	2800      	cmp	r0, #0
 801ff64:	f43f af18 	beq.w	801fd98 <_strtod_l+0x488>
 801ff68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff6a:	691a      	ldr	r2, [r3, #16]
 801ff6c:	3202      	adds	r2, #2
 801ff6e:	f103 010c 	add.w	r1, r3, #12
 801ff72:	0092      	lsls	r2, r2, #2
 801ff74:	300c      	adds	r0, #12
 801ff76:	f000 fd99 	bl	8020aac <memcpy>
 801ff7a:	ec49 8b10 	vmov	d0, r8, r9
 801ff7e:	aa18      	add	r2, sp, #96	; 0x60
 801ff80:	a917      	add	r1, sp, #92	; 0x5c
 801ff82:	4620      	mov	r0, r4
 801ff84:	f001 fd3a 	bl	80219fc <__d2b>
 801ff88:	ec49 8b18 	vmov	d8, r8, r9
 801ff8c:	9016      	str	r0, [sp, #88]	; 0x58
 801ff8e:	2800      	cmp	r0, #0
 801ff90:	f43f af02 	beq.w	801fd98 <_strtod_l+0x488>
 801ff94:	2101      	movs	r1, #1
 801ff96:	4620      	mov	r0, r4
 801ff98:	f001 fa94 	bl	80214c4 <__i2b>
 801ff9c:	4683      	mov	fp, r0
 801ff9e:	2800      	cmp	r0, #0
 801ffa0:	f43f aefa 	beq.w	801fd98 <_strtod_l+0x488>
 801ffa4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801ffa6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ffa8:	2e00      	cmp	r6, #0
 801ffaa:	bfab      	itete	ge
 801ffac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801ffae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801ffb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ffb2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801ffb6:	bfac      	ite	ge
 801ffb8:	eb06 0a03 	addge.w	sl, r6, r3
 801ffbc:	1b9f      	sublt	r7, r3, r6
 801ffbe:	9b04      	ldr	r3, [sp, #16]
 801ffc0:	1af6      	subs	r6, r6, r3
 801ffc2:	4416      	add	r6, r2
 801ffc4:	4ba0      	ldr	r3, [pc, #640]	; (8020248 <_strtod_l+0x938>)
 801ffc6:	3e01      	subs	r6, #1
 801ffc8:	429e      	cmp	r6, r3
 801ffca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ffce:	f280 80c4 	bge.w	802015a <_strtod_l+0x84a>
 801ffd2:	1b9b      	subs	r3, r3, r6
 801ffd4:	2b1f      	cmp	r3, #31
 801ffd6:	eba2 0203 	sub.w	r2, r2, r3
 801ffda:	f04f 0101 	mov.w	r1, #1
 801ffde:	f300 80b0 	bgt.w	8020142 <_strtod_l+0x832>
 801ffe2:	fa01 f303 	lsl.w	r3, r1, r3
 801ffe6:	930e      	str	r3, [sp, #56]	; 0x38
 801ffe8:	2300      	movs	r3, #0
 801ffea:	930d      	str	r3, [sp, #52]	; 0x34
 801ffec:	eb0a 0602 	add.w	r6, sl, r2
 801fff0:	9b04      	ldr	r3, [sp, #16]
 801fff2:	45b2      	cmp	sl, r6
 801fff4:	4417      	add	r7, r2
 801fff6:	441f      	add	r7, r3
 801fff8:	4653      	mov	r3, sl
 801fffa:	bfa8      	it	ge
 801fffc:	4633      	movge	r3, r6
 801fffe:	42bb      	cmp	r3, r7
 8020000:	bfa8      	it	ge
 8020002:	463b      	movge	r3, r7
 8020004:	2b00      	cmp	r3, #0
 8020006:	bfc2      	ittt	gt
 8020008:	1af6      	subgt	r6, r6, r3
 802000a:	1aff      	subgt	r7, r7, r3
 802000c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8020010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020012:	2b00      	cmp	r3, #0
 8020014:	dd17      	ble.n	8020046 <_strtod_l+0x736>
 8020016:	4659      	mov	r1, fp
 8020018:	461a      	mov	r2, r3
 802001a:	4620      	mov	r0, r4
 802001c:	f001 fb12 	bl	8021644 <__pow5mult>
 8020020:	4683      	mov	fp, r0
 8020022:	2800      	cmp	r0, #0
 8020024:	f43f aeb8 	beq.w	801fd98 <_strtod_l+0x488>
 8020028:	4601      	mov	r1, r0
 802002a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802002c:	4620      	mov	r0, r4
 802002e:	f001 fa5f 	bl	80214f0 <__multiply>
 8020032:	900b      	str	r0, [sp, #44]	; 0x2c
 8020034:	2800      	cmp	r0, #0
 8020036:	f43f aeaf 	beq.w	801fd98 <_strtod_l+0x488>
 802003a:	9916      	ldr	r1, [sp, #88]	; 0x58
 802003c:	4620      	mov	r0, r4
 802003e:	f001 f941 	bl	80212c4 <_Bfree>
 8020042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020044:	9316      	str	r3, [sp, #88]	; 0x58
 8020046:	2e00      	cmp	r6, #0
 8020048:	f300 808c 	bgt.w	8020164 <_strtod_l+0x854>
 802004c:	9b08      	ldr	r3, [sp, #32]
 802004e:	2b00      	cmp	r3, #0
 8020050:	dd08      	ble.n	8020064 <_strtod_l+0x754>
 8020052:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020054:	9905      	ldr	r1, [sp, #20]
 8020056:	4620      	mov	r0, r4
 8020058:	f001 faf4 	bl	8021644 <__pow5mult>
 802005c:	9005      	str	r0, [sp, #20]
 802005e:	2800      	cmp	r0, #0
 8020060:	f43f ae9a 	beq.w	801fd98 <_strtod_l+0x488>
 8020064:	2f00      	cmp	r7, #0
 8020066:	dd08      	ble.n	802007a <_strtod_l+0x76a>
 8020068:	9905      	ldr	r1, [sp, #20]
 802006a:	463a      	mov	r2, r7
 802006c:	4620      	mov	r0, r4
 802006e:	f001 fb43 	bl	80216f8 <__lshift>
 8020072:	9005      	str	r0, [sp, #20]
 8020074:	2800      	cmp	r0, #0
 8020076:	f43f ae8f 	beq.w	801fd98 <_strtod_l+0x488>
 802007a:	f1ba 0f00 	cmp.w	sl, #0
 802007e:	dd08      	ble.n	8020092 <_strtod_l+0x782>
 8020080:	4659      	mov	r1, fp
 8020082:	4652      	mov	r2, sl
 8020084:	4620      	mov	r0, r4
 8020086:	f001 fb37 	bl	80216f8 <__lshift>
 802008a:	4683      	mov	fp, r0
 802008c:	2800      	cmp	r0, #0
 802008e:	f43f ae83 	beq.w	801fd98 <_strtod_l+0x488>
 8020092:	9a05      	ldr	r2, [sp, #20]
 8020094:	9916      	ldr	r1, [sp, #88]	; 0x58
 8020096:	4620      	mov	r0, r4
 8020098:	f001 fbb6 	bl	8021808 <__mdiff>
 802009c:	4605      	mov	r5, r0
 802009e:	2800      	cmp	r0, #0
 80200a0:	f43f ae7a 	beq.w	801fd98 <_strtod_l+0x488>
 80200a4:	68c3      	ldr	r3, [r0, #12]
 80200a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80200a8:	2300      	movs	r3, #0
 80200aa:	60c3      	str	r3, [r0, #12]
 80200ac:	4659      	mov	r1, fp
 80200ae:	f001 fb8f 	bl	80217d0 <__mcmp>
 80200b2:	2800      	cmp	r0, #0
 80200b4:	da60      	bge.n	8020178 <_strtod_l+0x868>
 80200b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200b8:	ea53 0308 	orrs.w	r3, r3, r8
 80200bc:	f040 8084 	bne.w	80201c8 <_strtod_l+0x8b8>
 80200c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80200c4:	2b00      	cmp	r3, #0
 80200c6:	d17f      	bne.n	80201c8 <_strtod_l+0x8b8>
 80200c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80200cc:	0d1b      	lsrs	r3, r3, #20
 80200ce:	051b      	lsls	r3, r3, #20
 80200d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80200d4:	d978      	bls.n	80201c8 <_strtod_l+0x8b8>
 80200d6:	696b      	ldr	r3, [r5, #20]
 80200d8:	b913      	cbnz	r3, 80200e0 <_strtod_l+0x7d0>
 80200da:	692b      	ldr	r3, [r5, #16]
 80200dc:	2b01      	cmp	r3, #1
 80200de:	dd73      	ble.n	80201c8 <_strtod_l+0x8b8>
 80200e0:	4629      	mov	r1, r5
 80200e2:	2201      	movs	r2, #1
 80200e4:	4620      	mov	r0, r4
 80200e6:	f001 fb07 	bl	80216f8 <__lshift>
 80200ea:	4659      	mov	r1, fp
 80200ec:	4605      	mov	r5, r0
 80200ee:	f001 fb6f 	bl	80217d0 <__mcmp>
 80200f2:	2800      	cmp	r0, #0
 80200f4:	dd68      	ble.n	80201c8 <_strtod_l+0x8b8>
 80200f6:	9904      	ldr	r1, [sp, #16]
 80200f8:	4a54      	ldr	r2, [pc, #336]	; (802024c <_strtod_l+0x93c>)
 80200fa:	464b      	mov	r3, r9
 80200fc:	2900      	cmp	r1, #0
 80200fe:	f000 8084 	beq.w	802020a <_strtod_l+0x8fa>
 8020102:	ea02 0109 	and.w	r1, r2, r9
 8020106:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802010a:	dc7e      	bgt.n	802020a <_strtod_l+0x8fa>
 802010c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8020110:	f77f aeb3 	ble.w	801fe7a <_strtod_l+0x56a>
 8020114:	4b4e      	ldr	r3, [pc, #312]	; (8020250 <_strtod_l+0x940>)
 8020116:	4640      	mov	r0, r8
 8020118:	4649      	mov	r1, r9
 802011a:	2200      	movs	r2, #0
 802011c:	f7e5 fef4 	bl	8005f08 <__aeabi_dmul>
 8020120:	4b4a      	ldr	r3, [pc, #296]	; (802024c <_strtod_l+0x93c>)
 8020122:	400b      	ands	r3, r1
 8020124:	4680      	mov	r8, r0
 8020126:	4689      	mov	r9, r1
 8020128:	2b00      	cmp	r3, #0
 802012a:	f47f ae3f 	bne.w	801fdac <_strtod_l+0x49c>
 802012e:	2322      	movs	r3, #34	; 0x22
 8020130:	6023      	str	r3, [r4, #0]
 8020132:	e63b      	b.n	801fdac <_strtod_l+0x49c>
 8020134:	f04f 32ff 	mov.w	r2, #4294967295
 8020138:	fa02 f303 	lsl.w	r3, r2, r3
 802013c:	ea03 0808 	and.w	r8, r3, r8
 8020140:	e6e8      	b.n	801ff14 <_strtod_l+0x604>
 8020142:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8020146:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802014a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802014e:	36e2      	adds	r6, #226	; 0xe2
 8020150:	fa01 f306 	lsl.w	r3, r1, r6
 8020154:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8020158:	e748      	b.n	801ffec <_strtod_l+0x6dc>
 802015a:	2100      	movs	r1, #0
 802015c:	2301      	movs	r3, #1
 802015e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8020162:	e743      	b.n	801ffec <_strtod_l+0x6dc>
 8020164:	9916      	ldr	r1, [sp, #88]	; 0x58
 8020166:	4632      	mov	r2, r6
 8020168:	4620      	mov	r0, r4
 802016a:	f001 fac5 	bl	80216f8 <__lshift>
 802016e:	9016      	str	r0, [sp, #88]	; 0x58
 8020170:	2800      	cmp	r0, #0
 8020172:	f47f af6b 	bne.w	802004c <_strtod_l+0x73c>
 8020176:	e60f      	b.n	801fd98 <_strtod_l+0x488>
 8020178:	46ca      	mov	sl, r9
 802017a:	d171      	bne.n	8020260 <_strtod_l+0x950>
 802017c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802017e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020182:	b352      	cbz	r2, 80201da <_strtod_l+0x8ca>
 8020184:	4a33      	ldr	r2, [pc, #204]	; (8020254 <_strtod_l+0x944>)
 8020186:	4293      	cmp	r3, r2
 8020188:	d12a      	bne.n	80201e0 <_strtod_l+0x8d0>
 802018a:	9b04      	ldr	r3, [sp, #16]
 802018c:	4641      	mov	r1, r8
 802018e:	b1fb      	cbz	r3, 80201d0 <_strtod_l+0x8c0>
 8020190:	4b2e      	ldr	r3, [pc, #184]	; (802024c <_strtod_l+0x93c>)
 8020192:	ea09 0303 	and.w	r3, r9, r3
 8020196:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802019a:	f04f 32ff 	mov.w	r2, #4294967295
 802019e:	d81a      	bhi.n	80201d6 <_strtod_l+0x8c6>
 80201a0:	0d1b      	lsrs	r3, r3, #20
 80201a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80201a6:	fa02 f303 	lsl.w	r3, r2, r3
 80201aa:	4299      	cmp	r1, r3
 80201ac:	d118      	bne.n	80201e0 <_strtod_l+0x8d0>
 80201ae:	4b2a      	ldr	r3, [pc, #168]	; (8020258 <_strtod_l+0x948>)
 80201b0:	459a      	cmp	sl, r3
 80201b2:	d102      	bne.n	80201ba <_strtod_l+0x8aa>
 80201b4:	3101      	adds	r1, #1
 80201b6:	f43f adef 	beq.w	801fd98 <_strtod_l+0x488>
 80201ba:	4b24      	ldr	r3, [pc, #144]	; (802024c <_strtod_l+0x93c>)
 80201bc:	ea0a 0303 	and.w	r3, sl, r3
 80201c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80201c4:	f04f 0800 	mov.w	r8, #0
 80201c8:	9b04      	ldr	r3, [sp, #16]
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	d1a2      	bne.n	8020114 <_strtod_l+0x804>
 80201ce:	e5ed      	b.n	801fdac <_strtod_l+0x49c>
 80201d0:	f04f 33ff 	mov.w	r3, #4294967295
 80201d4:	e7e9      	b.n	80201aa <_strtod_l+0x89a>
 80201d6:	4613      	mov	r3, r2
 80201d8:	e7e7      	b.n	80201aa <_strtod_l+0x89a>
 80201da:	ea53 0308 	orrs.w	r3, r3, r8
 80201de:	d08a      	beq.n	80200f6 <_strtod_l+0x7e6>
 80201e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201e2:	b1e3      	cbz	r3, 802021e <_strtod_l+0x90e>
 80201e4:	ea13 0f0a 	tst.w	r3, sl
 80201e8:	d0ee      	beq.n	80201c8 <_strtod_l+0x8b8>
 80201ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201ec:	9a04      	ldr	r2, [sp, #16]
 80201ee:	4640      	mov	r0, r8
 80201f0:	4649      	mov	r1, r9
 80201f2:	b1c3      	cbz	r3, 8020226 <_strtod_l+0x916>
 80201f4:	f7ff fb6f 	bl	801f8d6 <sulp>
 80201f8:	4602      	mov	r2, r0
 80201fa:	460b      	mov	r3, r1
 80201fc:	ec51 0b18 	vmov	r0, r1, d8
 8020200:	f7e5 fccc 	bl	8005b9c <__adddf3>
 8020204:	4680      	mov	r8, r0
 8020206:	4689      	mov	r9, r1
 8020208:	e7de      	b.n	80201c8 <_strtod_l+0x8b8>
 802020a:	4013      	ands	r3, r2
 802020c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8020210:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8020214:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8020218:	f04f 38ff 	mov.w	r8, #4294967295
 802021c:	e7d4      	b.n	80201c8 <_strtod_l+0x8b8>
 802021e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020220:	ea13 0f08 	tst.w	r3, r8
 8020224:	e7e0      	b.n	80201e8 <_strtod_l+0x8d8>
 8020226:	f7ff fb56 	bl	801f8d6 <sulp>
 802022a:	4602      	mov	r2, r0
 802022c:	460b      	mov	r3, r1
 802022e:	ec51 0b18 	vmov	r0, r1, d8
 8020232:	f7e5 fcb1 	bl	8005b98 <__aeabi_dsub>
 8020236:	2200      	movs	r2, #0
 8020238:	2300      	movs	r3, #0
 802023a:	4680      	mov	r8, r0
 802023c:	4689      	mov	r9, r1
 802023e:	f7e6 f8cb 	bl	80063d8 <__aeabi_dcmpeq>
 8020242:	2800      	cmp	r0, #0
 8020244:	d0c0      	beq.n	80201c8 <_strtod_l+0x8b8>
 8020246:	e618      	b.n	801fe7a <_strtod_l+0x56a>
 8020248:	fffffc02 	.word	0xfffffc02
 802024c:	7ff00000 	.word	0x7ff00000
 8020250:	39500000 	.word	0x39500000
 8020254:	000fffff 	.word	0x000fffff
 8020258:	7fefffff 	.word	0x7fefffff
 802025c:	080237a8 	.word	0x080237a8
 8020260:	4659      	mov	r1, fp
 8020262:	4628      	mov	r0, r5
 8020264:	f001 fc24 	bl	8021ab0 <__ratio>
 8020268:	ec57 6b10 	vmov	r6, r7, d0
 802026c:	ee10 0a10 	vmov	r0, s0
 8020270:	2200      	movs	r2, #0
 8020272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020276:	4639      	mov	r1, r7
 8020278:	f7e6 f8c2 	bl	8006400 <__aeabi_dcmple>
 802027c:	2800      	cmp	r0, #0
 802027e:	d071      	beq.n	8020364 <_strtod_l+0xa54>
 8020280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020282:	2b00      	cmp	r3, #0
 8020284:	d17c      	bne.n	8020380 <_strtod_l+0xa70>
 8020286:	f1b8 0f00 	cmp.w	r8, #0
 802028a:	d15a      	bne.n	8020342 <_strtod_l+0xa32>
 802028c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020290:	2b00      	cmp	r3, #0
 8020292:	d15d      	bne.n	8020350 <_strtod_l+0xa40>
 8020294:	4b90      	ldr	r3, [pc, #576]	; (80204d8 <_strtod_l+0xbc8>)
 8020296:	2200      	movs	r2, #0
 8020298:	4630      	mov	r0, r6
 802029a:	4639      	mov	r1, r7
 802029c:	f7e6 f8a6 	bl	80063ec <__aeabi_dcmplt>
 80202a0:	2800      	cmp	r0, #0
 80202a2:	d15c      	bne.n	802035e <_strtod_l+0xa4e>
 80202a4:	4630      	mov	r0, r6
 80202a6:	4639      	mov	r1, r7
 80202a8:	4b8c      	ldr	r3, [pc, #560]	; (80204dc <_strtod_l+0xbcc>)
 80202aa:	2200      	movs	r2, #0
 80202ac:	f7e5 fe2c 	bl	8005f08 <__aeabi_dmul>
 80202b0:	4606      	mov	r6, r0
 80202b2:	460f      	mov	r7, r1
 80202b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80202b8:	9606      	str	r6, [sp, #24]
 80202ba:	9307      	str	r3, [sp, #28]
 80202bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80202c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80202c4:	4b86      	ldr	r3, [pc, #536]	; (80204e0 <_strtod_l+0xbd0>)
 80202c6:	ea0a 0303 	and.w	r3, sl, r3
 80202ca:	930d      	str	r3, [sp, #52]	; 0x34
 80202cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80202ce:	4b85      	ldr	r3, [pc, #532]	; (80204e4 <_strtod_l+0xbd4>)
 80202d0:	429a      	cmp	r2, r3
 80202d2:	f040 8090 	bne.w	80203f6 <_strtod_l+0xae6>
 80202d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80202da:	ec49 8b10 	vmov	d0, r8, r9
 80202de:	f001 fb1d 	bl	802191c <__ulp>
 80202e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80202e6:	ec51 0b10 	vmov	r0, r1, d0
 80202ea:	f7e5 fe0d 	bl	8005f08 <__aeabi_dmul>
 80202ee:	4642      	mov	r2, r8
 80202f0:	464b      	mov	r3, r9
 80202f2:	f7e5 fc53 	bl	8005b9c <__adddf3>
 80202f6:	460b      	mov	r3, r1
 80202f8:	4979      	ldr	r1, [pc, #484]	; (80204e0 <_strtod_l+0xbd0>)
 80202fa:	4a7b      	ldr	r2, [pc, #492]	; (80204e8 <_strtod_l+0xbd8>)
 80202fc:	4019      	ands	r1, r3
 80202fe:	4291      	cmp	r1, r2
 8020300:	4680      	mov	r8, r0
 8020302:	d944      	bls.n	802038e <_strtod_l+0xa7e>
 8020304:	ee18 2a90 	vmov	r2, s17
 8020308:	4b78      	ldr	r3, [pc, #480]	; (80204ec <_strtod_l+0xbdc>)
 802030a:	429a      	cmp	r2, r3
 802030c:	d104      	bne.n	8020318 <_strtod_l+0xa08>
 802030e:	ee18 3a10 	vmov	r3, s16
 8020312:	3301      	adds	r3, #1
 8020314:	f43f ad40 	beq.w	801fd98 <_strtod_l+0x488>
 8020318:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80204ec <_strtod_l+0xbdc>
 802031c:	f04f 38ff 	mov.w	r8, #4294967295
 8020320:	9916      	ldr	r1, [sp, #88]	; 0x58
 8020322:	4620      	mov	r0, r4
 8020324:	f000 ffce 	bl	80212c4 <_Bfree>
 8020328:	9905      	ldr	r1, [sp, #20]
 802032a:	4620      	mov	r0, r4
 802032c:	f000 ffca 	bl	80212c4 <_Bfree>
 8020330:	4659      	mov	r1, fp
 8020332:	4620      	mov	r0, r4
 8020334:	f000 ffc6 	bl	80212c4 <_Bfree>
 8020338:	4629      	mov	r1, r5
 802033a:	4620      	mov	r0, r4
 802033c:	f000 ffc2 	bl	80212c4 <_Bfree>
 8020340:	e609      	b.n	801ff56 <_strtod_l+0x646>
 8020342:	f1b8 0f01 	cmp.w	r8, #1
 8020346:	d103      	bne.n	8020350 <_strtod_l+0xa40>
 8020348:	f1b9 0f00 	cmp.w	r9, #0
 802034c:	f43f ad95 	beq.w	801fe7a <_strtod_l+0x56a>
 8020350:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80204a8 <_strtod_l+0xb98>
 8020354:	4f60      	ldr	r7, [pc, #384]	; (80204d8 <_strtod_l+0xbc8>)
 8020356:	ed8d 7b06 	vstr	d7, [sp, #24]
 802035a:	2600      	movs	r6, #0
 802035c:	e7ae      	b.n	80202bc <_strtod_l+0x9ac>
 802035e:	4f5f      	ldr	r7, [pc, #380]	; (80204dc <_strtod_l+0xbcc>)
 8020360:	2600      	movs	r6, #0
 8020362:	e7a7      	b.n	80202b4 <_strtod_l+0x9a4>
 8020364:	4b5d      	ldr	r3, [pc, #372]	; (80204dc <_strtod_l+0xbcc>)
 8020366:	4630      	mov	r0, r6
 8020368:	4639      	mov	r1, r7
 802036a:	2200      	movs	r2, #0
 802036c:	f7e5 fdcc 	bl	8005f08 <__aeabi_dmul>
 8020370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020372:	4606      	mov	r6, r0
 8020374:	460f      	mov	r7, r1
 8020376:	2b00      	cmp	r3, #0
 8020378:	d09c      	beq.n	80202b4 <_strtod_l+0x9a4>
 802037a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802037e:	e79d      	b.n	80202bc <_strtod_l+0x9ac>
 8020380:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80204b0 <_strtod_l+0xba0>
 8020384:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020388:	ec57 6b17 	vmov	r6, r7, d7
 802038c:	e796      	b.n	80202bc <_strtod_l+0x9ac>
 802038e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8020392:	9b04      	ldr	r3, [sp, #16]
 8020394:	46ca      	mov	sl, r9
 8020396:	2b00      	cmp	r3, #0
 8020398:	d1c2      	bne.n	8020320 <_strtod_l+0xa10>
 802039a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802039e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80203a0:	0d1b      	lsrs	r3, r3, #20
 80203a2:	051b      	lsls	r3, r3, #20
 80203a4:	429a      	cmp	r2, r3
 80203a6:	d1bb      	bne.n	8020320 <_strtod_l+0xa10>
 80203a8:	4630      	mov	r0, r6
 80203aa:	4639      	mov	r1, r7
 80203ac:	f7e6 f8ce 	bl	800654c <__aeabi_d2lz>
 80203b0:	f7e5 fd7c 	bl	8005eac <__aeabi_l2d>
 80203b4:	4602      	mov	r2, r0
 80203b6:	460b      	mov	r3, r1
 80203b8:	4630      	mov	r0, r6
 80203ba:	4639      	mov	r1, r7
 80203bc:	f7e5 fbec 	bl	8005b98 <__aeabi_dsub>
 80203c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80203c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80203c6:	ea43 0308 	orr.w	r3, r3, r8
 80203ca:	4313      	orrs	r3, r2
 80203cc:	4606      	mov	r6, r0
 80203ce:	460f      	mov	r7, r1
 80203d0:	d054      	beq.n	802047c <_strtod_l+0xb6c>
 80203d2:	a339      	add	r3, pc, #228	; (adr r3, 80204b8 <_strtod_l+0xba8>)
 80203d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203d8:	f7e6 f808 	bl	80063ec <__aeabi_dcmplt>
 80203dc:	2800      	cmp	r0, #0
 80203de:	f47f ace5 	bne.w	801fdac <_strtod_l+0x49c>
 80203e2:	a337      	add	r3, pc, #220	; (adr r3, 80204c0 <_strtod_l+0xbb0>)
 80203e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203e8:	4630      	mov	r0, r6
 80203ea:	4639      	mov	r1, r7
 80203ec:	f7e6 f81c 	bl	8006428 <__aeabi_dcmpgt>
 80203f0:	2800      	cmp	r0, #0
 80203f2:	d095      	beq.n	8020320 <_strtod_l+0xa10>
 80203f4:	e4da      	b.n	801fdac <_strtod_l+0x49c>
 80203f6:	9b04      	ldr	r3, [sp, #16]
 80203f8:	b333      	cbz	r3, 8020448 <_strtod_l+0xb38>
 80203fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80203fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020400:	d822      	bhi.n	8020448 <_strtod_l+0xb38>
 8020402:	a331      	add	r3, pc, #196	; (adr r3, 80204c8 <_strtod_l+0xbb8>)
 8020404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020408:	4630      	mov	r0, r6
 802040a:	4639      	mov	r1, r7
 802040c:	f7e5 fff8 	bl	8006400 <__aeabi_dcmple>
 8020410:	b1a0      	cbz	r0, 802043c <_strtod_l+0xb2c>
 8020412:	4639      	mov	r1, r7
 8020414:	4630      	mov	r0, r6
 8020416:	f7e6 f811 	bl	800643c <__aeabi_d2uiz>
 802041a:	2801      	cmp	r0, #1
 802041c:	bf38      	it	cc
 802041e:	2001      	movcc	r0, #1
 8020420:	f7e5 fcf8 	bl	8005e14 <__aeabi_ui2d>
 8020424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020426:	4606      	mov	r6, r0
 8020428:	460f      	mov	r7, r1
 802042a:	bb23      	cbnz	r3, 8020476 <_strtod_l+0xb66>
 802042c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020430:	9010      	str	r0, [sp, #64]	; 0x40
 8020432:	9311      	str	r3, [sp, #68]	; 0x44
 8020434:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8020438:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802043c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802043e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020440:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020444:	1a9b      	subs	r3, r3, r2
 8020446:	930f      	str	r3, [sp, #60]	; 0x3c
 8020448:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802044c:	eeb0 0a48 	vmov.f32	s0, s16
 8020450:	eef0 0a68 	vmov.f32	s1, s17
 8020454:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8020458:	f001 fa60 	bl	802191c <__ulp>
 802045c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020460:	ec53 2b10 	vmov	r2, r3, d0
 8020464:	f7e5 fd50 	bl	8005f08 <__aeabi_dmul>
 8020468:	ec53 2b18 	vmov	r2, r3, d8
 802046c:	f7e5 fb96 	bl	8005b9c <__adddf3>
 8020470:	4680      	mov	r8, r0
 8020472:	4689      	mov	r9, r1
 8020474:	e78d      	b.n	8020392 <_strtod_l+0xa82>
 8020476:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802047a:	e7db      	b.n	8020434 <_strtod_l+0xb24>
 802047c:	a314      	add	r3, pc, #80	; (adr r3, 80204d0 <_strtod_l+0xbc0>)
 802047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020482:	f7e5 ffb3 	bl	80063ec <__aeabi_dcmplt>
 8020486:	e7b3      	b.n	80203f0 <_strtod_l+0xae0>
 8020488:	2300      	movs	r3, #0
 802048a:	930a      	str	r3, [sp, #40]	; 0x28
 802048c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802048e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020490:	6013      	str	r3, [r2, #0]
 8020492:	f7ff ba7c 	b.w	801f98e <_strtod_l+0x7e>
 8020496:	2a65      	cmp	r2, #101	; 0x65
 8020498:	f43f ab75 	beq.w	801fb86 <_strtod_l+0x276>
 802049c:	2a45      	cmp	r2, #69	; 0x45
 802049e:	f43f ab72 	beq.w	801fb86 <_strtod_l+0x276>
 80204a2:	2301      	movs	r3, #1
 80204a4:	f7ff bbaa 	b.w	801fbfc <_strtod_l+0x2ec>
 80204a8:	00000000 	.word	0x00000000
 80204ac:	bff00000 	.word	0xbff00000
 80204b0:	00000000 	.word	0x00000000
 80204b4:	3ff00000 	.word	0x3ff00000
 80204b8:	94a03595 	.word	0x94a03595
 80204bc:	3fdfffff 	.word	0x3fdfffff
 80204c0:	35afe535 	.word	0x35afe535
 80204c4:	3fe00000 	.word	0x3fe00000
 80204c8:	ffc00000 	.word	0xffc00000
 80204cc:	41dfffff 	.word	0x41dfffff
 80204d0:	94a03595 	.word	0x94a03595
 80204d4:	3fcfffff 	.word	0x3fcfffff
 80204d8:	3ff00000 	.word	0x3ff00000
 80204dc:	3fe00000 	.word	0x3fe00000
 80204e0:	7ff00000 	.word	0x7ff00000
 80204e4:	7fe00000 	.word	0x7fe00000
 80204e8:	7c9fffff 	.word	0x7c9fffff
 80204ec:	7fefffff 	.word	0x7fefffff

080204f0 <strtod>:
 80204f0:	460a      	mov	r2, r1
 80204f2:	4601      	mov	r1, r0
 80204f4:	4802      	ldr	r0, [pc, #8]	; (8020500 <strtod+0x10>)
 80204f6:	4b03      	ldr	r3, [pc, #12]	; (8020504 <strtod+0x14>)
 80204f8:	6800      	ldr	r0, [r0, #0]
 80204fa:	f7ff ba09 	b.w	801f910 <_strtod_l>
 80204fe:	bf00      	nop
 8020500:	20000418 	.word	0x20000418
 8020504:	20000260 	.word	0x20000260

08020508 <_strtol_l.constprop.0>:
 8020508:	2b01      	cmp	r3, #1
 802050a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802050e:	d001      	beq.n	8020514 <_strtol_l.constprop.0+0xc>
 8020510:	2b24      	cmp	r3, #36	; 0x24
 8020512:	d906      	bls.n	8020522 <_strtol_l.constprop.0+0x1a>
 8020514:	f000 fa90 	bl	8020a38 <__errno>
 8020518:	2316      	movs	r3, #22
 802051a:	6003      	str	r3, [r0, #0]
 802051c:	2000      	movs	r0, #0
 802051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020522:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8020608 <_strtol_l.constprop.0+0x100>
 8020526:	460d      	mov	r5, r1
 8020528:	462e      	mov	r6, r5
 802052a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802052e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8020532:	f017 0708 	ands.w	r7, r7, #8
 8020536:	d1f7      	bne.n	8020528 <_strtol_l.constprop.0+0x20>
 8020538:	2c2d      	cmp	r4, #45	; 0x2d
 802053a:	d132      	bne.n	80205a2 <_strtol_l.constprop.0+0x9a>
 802053c:	782c      	ldrb	r4, [r5, #0]
 802053e:	2701      	movs	r7, #1
 8020540:	1cb5      	adds	r5, r6, #2
 8020542:	2b00      	cmp	r3, #0
 8020544:	d05b      	beq.n	80205fe <_strtol_l.constprop.0+0xf6>
 8020546:	2b10      	cmp	r3, #16
 8020548:	d109      	bne.n	802055e <_strtol_l.constprop.0+0x56>
 802054a:	2c30      	cmp	r4, #48	; 0x30
 802054c:	d107      	bne.n	802055e <_strtol_l.constprop.0+0x56>
 802054e:	782c      	ldrb	r4, [r5, #0]
 8020550:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020554:	2c58      	cmp	r4, #88	; 0x58
 8020556:	d14d      	bne.n	80205f4 <_strtol_l.constprop.0+0xec>
 8020558:	786c      	ldrb	r4, [r5, #1]
 802055a:	2310      	movs	r3, #16
 802055c:	3502      	adds	r5, #2
 802055e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8020562:	f108 38ff 	add.w	r8, r8, #4294967295
 8020566:	f04f 0e00 	mov.w	lr, #0
 802056a:	fbb8 f9f3 	udiv	r9, r8, r3
 802056e:	4676      	mov	r6, lr
 8020570:	fb03 8a19 	mls	sl, r3, r9, r8
 8020574:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8020578:	f1bc 0f09 	cmp.w	ip, #9
 802057c:	d816      	bhi.n	80205ac <_strtol_l.constprop.0+0xa4>
 802057e:	4664      	mov	r4, ip
 8020580:	42a3      	cmp	r3, r4
 8020582:	dd24      	ble.n	80205ce <_strtol_l.constprop.0+0xc6>
 8020584:	f1be 3fff 	cmp.w	lr, #4294967295
 8020588:	d008      	beq.n	802059c <_strtol_l.constprop.0+0x94>
 802058a:	45b1      	cmp	r9, r6
 802058c:	d31c      	bcc.n	80205c8 <_strtol_l.constprop.0+0xc0>
 802058e:	d101      	bne.n	8020594 <_strtol_l.constprop.0+0x8c>
 8020590:	45a2      	cmp	sl, r4
 8020592:	db19      	blt.n	80205c8 <_strtol_l.constprop.0+0xc0>
 8020594:	fb06 4603 	mla	r6, r6, r3, r4
 8020598:	f04f 0e01 	mov.w	lr, #1
 802059c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80205a0:	e7e8      	b.n	8020574 <_strtol_l.constprop.0+0x6c>
 80205a2:	2c2b      	cmp	r4, #43	; 0x2b
 80205a4:	bf04      	itt	eq
 80205a6:	782c      	ldrbeq	r4, [r5, #0]
 80205a8:	1cb5      	addeq	r5, r6, #2
 80205aa:	e7ca      	b.n	8020542 <_strtol_l.constprop.0+0x3a>
 80205ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80205b0:	f1bc 0f19 	cmp.w	ip, #25
 80205b4:	d801      	bhi.n	80205ba <_strtol_l.constprop.0+0xb2>
 80205b6:	3c37      	subs	r4, #55	; 0x37
 80205b8:	e7e2      	b.n	8020580 <_strtol_l.constprop.0+0x78>
 80205ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80205be:	f1bc 0f19 	cmp.w	ip, #25
 80205c2:	d804      	bhi.n	80205ce <_strtol_l.constprop.0+0xc6>
 80205c4:	3c57      	subs	r4, #87	; 0x57
 80205c6:	e7db      	b.n	8020580 <_strtol_l.constprop.0+0x78>
 80205c8:	f04f 3eff 	mov.w	lr, #4294967295
 80205cc:	e7e6      	b.n	802059c <_strtol_l.constprop.0+0x94>
 80205ce:	f1be 3fff 	cmp.w	lr, #4294967295
 80205d2:	d105      	bne.n	80205e0 <_strtol_l.constprop.0+0xd8>
 80205d4:	2322      	movs	r3, #34	; 0x22
 80205d6:	6003      	str	r3, [r0, #0]
 80205d8:	4646      	mov	r6, r8
 80205da:	b942      	cbnz	r2, 80205ee <_strtol_l.constprop.0+0xe6>
 80205dc:	4630      	mov	r0, r6
 80205de:	e79e      	b.n	802051e <_strtol_l.constprop.0+0x16>
 80205e0:	b107      	cbz	r7, 80205e4 <_strtol_l.constprop.0+0xdc>
 80205e2:	4276      	negs	r6, r6
 80205e4:	2a00      	cmp	r2, #0
 80205e6:	d0f9      	beq.n	80205dc <_strtol_l.constprop.0+0xd4>
 80205e8:	f1be 0f00 	cmp.w	lr, #0
 80205ec:	d000      	beq.n	80205f0 <_strtol_l.constprop.0+0xe8>
 80205ee:	1e69      	subs	r1, r5, #1
 80205f0:	6011      	str	r1, [r2, #0]
 80205f2:	e7f3      	b.n	80205dc <_strtol_l.constprop.0+0xd4>
 80205f4:	2430      	movs	r4, #48	; 0x30
 80205f6:	2b00      	cmp	r3, #0
 80205f8:	d1b1      	bne.n	802055e <_strtol_l.constprop.0+0x56>
 80205fa:	2308      	movs	r3, #8
 80205fc:	e7af      	b.n	802055e <_strtol_l.constprop.0+0x56>
 80205fe:	2c30      	cmp	r4, #48	; 0x30
 8020600:	d0a5      	beq.n	802054e <_strtol_l.constprop.0+0x46>
 8020602:	230a      	movs	r3, #10
 8020604:	e7ab      	b.n	802055e <_strtol_l.constprop.0+0x56>
 8020606:	bf00      	nop
 8020608:	080237d1 	.word	0x080237d1

0802060c <strtol>:
 802060c:	4613      	mov	r3, r2
 802060e:	460a      	mov	r2, r1
 8020610:	4601      	mov	r1, r0
 8020612:	4802      	ldr	r0, [pc, #8]	; (802061c <strtol+0x10>)
 8020614:	6800      	ldr	r0, [r0, #0]
 8020616:	f7ff bf77 	b.w	8020508 <_strtol_l.constprop.0>
 802061a:	bf00      	nop
 802061c:	20000418 	.word	0x20000418

08020620 <std>:
 8020620:	2300      	movs	r3, #0
 8020622:	b510      	push	{r4, lr}
 8020624:	4604      	mov	r4, r0
 8020626:	e9c0 3300 	strd	r3, r3, [r0]
 802062a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802062e:	6083      	str	r3, [r0, #8]
 8020630:	8181      	strh	r1, [r0, #12]
 8020632:	6643      	str	r3, [r0, #100]	; 0x64
 8020634:	81c2      	strh	r2, [r0, #14]
 8020636:	6183      	str	r3, [r0, #24]
 8020638:	4619      	mov	r1, r3
 802063a:	2208      	movs	r2, #8
 802063c:	305c      	adds	r0, #92	; 0x5c
 802063e:	f000 f914 	bl	802086a <memset>
 8020642:	4b0d      	ldr	r3, [pc, #52]	; (8020678 <std+0x58>)
 8020644:	6263      	str	r3, [r4, #36]	; 0x24
 8020646:	4b0d      	ldr	r3, [pc, #52]	; (802067c <std+0x5c>)
 8020648:	62a3      	str	r3, [r4, #40]	; 0x28
 802064a:	4b0d      	ldr	r3, [pc, #52]	; (8020680 <std+0x60>)
 802064c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802064e:	4b0d      	ldr	r3, [pc, #52]	; (8020684 <std+0x64>)
 8020650:	6323      	str	r3, [r4, #48]	; 0x30
 8020652:	4b0d      	ldr	r3, [pc, #52]	; (8020688 <std+0x68>)
 8020654:	6224      	str	r4, [r4, #32]
 8020656:	429c      	cmp	r4, r3
 8020658:	d006      	beq.n	8020668 <std+0x48>
 802065a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802065e:	4294      	cmp	r4, r2
 8020660:	d002      	beq.n	8020668 <std+0x48>
 8020662:	33d0      	adds	r3, #208	; 0xd0
 8020664:	429c      	cmp	r4, r3
 8020666:	d105      	bne.n	8020674 <std+0x54>
 8020668:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020670:	f000 ba0c 	b.w	8020a8c <__retarget_lock_init_recursive>
 8020674:	bd10      	pop	{r4, pc}
 8020676:	bf00      	nop
 8020678:	080207e5 	.word	0x080207e5
 802067c:	08020807 	.word	0x08020807
 8020680:	0802083f 	.word	0x0802083f
 8020684:	08020863 	.word	0x08020863
 8020688:	20014694 	.word	0x20014694

0802068c <stdio_exit_handler>:
 802068c:	4a02      	ldr	r2, [pc, #8]	; (8020698 <stdio_exit_handler+0xc>)
 802068e:	4903      	ldr	r1, [pc, #12]	; (802069c <stdio_exit_handler+0x10>)
 8020690:	4803      	ldr	r0, [pc, #12]	; (80206a0 <stdio_exit_handler+0x14>)
 8020692:	f000 b869 	b.w	8020768 <_fwalk_sglue>
 8020696:	bf00      	nop
 8020698:	20000254 	.word	0x20000254
 802069c:	080222a5 	.word	0x080222a5
 80206a0:	200003cc 	.word	0x200003cc

080206a4 <cleanup_stdio>:
 80206a4:	6841      	ldr	r1, [r0, #4]
 80206a6:	4b0c      	ldr	r3, [pc, #48]	; (80206d8 <cleanup_stdio+0x34>)
 80206a8:	4299      	cmp	r1, r3
 80206aa:	b510      	push	{r4, lr}
 80206ac:	4604      	mov	r4, r0
 80206ae:	d001      	beq.n	80206b4 <cleanup_stdio+0x10>
 80206b0:	f001 fdf8 	bl	80222a4 <_fflush_r>
 80206b4:	68a1      	ldr	r1, [r4, #8]
 80206b6:	4b09      	ldr	r3, [pc, #36]	; (80206dc <cleanup_stdio+0x38>)
 80206b8:	4299      	cmp	r1, r3
 80206ba:	d002      	beq.n	80206c2 <cleanup_stdio+0x1e>
 80206bc:	4620      	mov	r0, r4
 80206be:	f001 fdf1 	bl	80222a4 <_fflush_r>
 80206c2:	68e1      	ldr	r1, [r4, #12]
 80206c4:	4b06      	ldr	r3, [pc, #24]	; (80206e0 <cleanup_stdio+0x3c>)
 80206c6:	4299      	cmp	r1, r3
 80206c8:	d004      	beq.n	80206d4 <cleanup_stdio+0x30>
 80206ca:	4620      	mov	r0, r4
 80206cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80206d0:	f001 bde8 	b.w	80222a4 <_fflush_r>
 80206d4:	bd10      	pop	{r4, pc}
 80206d6:	bf00      	nop
 80206d8:	20014694 	.word	0x20014694
 80206dc:	200146fc 	.word	0x200146fc
 80206e0:	20014764 	.word	0x20014764

080206e4 <global_stdio_init.part.0>:
 80206e4:	b510      	push	{r4, lr}
 80206e6:	4b0b      	ldr	r3, [pc, #44]	; (8020714 <global_stdio_init.part.0+0x30>)
 80206e8:	4c0b      	ldr	r4, [pc, #44]	; (8020718 <global_stdio_init.part.0+0x34>)
 80206ea:	4a0c      	ldr	r2, [pc, #48]	; (802071c <global_stdio_init.part.0+0x38>)
 80206ec:	601a      	str	r2, [r3, #0]
 80206ee:	4620      	mov	r0, r4
 80206f0:	2200      	movs	r2, #0
 80206f2:	2104      	movs	r1, #4
 80206f4:	f7ff ff94 	bl	8020620 <std>
 80206f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80206fc:	2201      	movs	r2, #1
 80206fe:	2109      	movs	r1, #9
 8020700:	f7ff ff8e 	bl	8020620 <std>
 8020704:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8020708:	2202      	movs	r2, #2
 802070a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802070e:	2112      	movs	r1, #18
 8020710:	f7ff bf86 	b.w	8020620 <std>
 8020714:	200147cc 	.word	0x200147cc
 8020718:	20014694 	.word	0x20014694
 802071c:	0802068d 	.word	0x0802068d

08020720 <__sfp_lock_acquire>:
 8020720:	4801      	ldr	r0, [pc, #4]	; (8020728 <__sfp_lock_acquire+0x8>)
 8020722:	f000 b9b4 	b.w	8020a8e <__retarget_lock_acquire_recursive>
 8020726:	bf00      	nop
 8020728:	200147d5 	.word	0x200147d5

0802072c <__sfp_lock_release>:
 802072c:	4801      	ldr	r0, [pc, #4]	; (8020734 <__sfp_lock_release+0x8>)
 802072e:	f000 b9af 	b.w	8020a90 <__retarget_lock_release_recursive>
 8020732:	bf00      	nop
 8020734:	200147d5 	.word	0x200147d5

08020738 <__sinit>:
 8020738:	b510      	push	{r4, lr}
 802073a:	4604      	mov	r4, r0
 802073c:	f7ff fff0 	bl	8020720 <__sfp_lock_acquire>
 8020740:	6a23      	ldr	r3, [r4, #32]
 8020742:	b11b      	cbz	r3, 802074c <__sinit+0x14>
 8020744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020748:	f7ff bff0 	b.w	802072c <__sfp_lock_release>
 802074c:	4b04      	ldr	r3, [pc, #16]	; (8020760 <__sinit+0x28>)
 802074e:	6223      	str	r3, [r4, #32]
 8020750:	4b04      	ldr	r3, [pc, #16]	; (8020764 <__sinit+0x2c>)
 8020752:	681b      	ldr	r3, [r3, #0]
 8020754:	2b00      	cmp	r3, #0
 8020756:	d1f5      	bne.n	8020744 <__sinit+0xc>
 8020758:	f7ff ffc4 	bl	80206e4 <global_stdio_init.part.0>
 802075c:	e7f2      	b.n	8020744 <__sinit+0xc>
 802075e:	bf00      	nop
 8020760:	080206a5 	.word	0x080206a5
 8020764:	200147cc 	.word	0x200147cc

08020768 <_fwalk_sglue>:
 8020768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802076c:	4607      	mov	r7, r0
 802076e:	4688      	mov	r8, r1
 8020770:	4614      	mov	r4, r2
 8020772:	2600      	movs	r6, #0
 8020774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020778:	f1b9 0901 	subs.w	r9, r9, #1
 802077c:	d505      	bpl.n	802078a <_fwalk_sglue+0x22>
 802077e:	6824      	ldr	r4, [r4, #0]
 8020780:	2c00      	cmp	r4, #0
 8020782:	d1f7      	bne.n	8020774 <_fwalk_sglue+0xc>
 8020784:	4630      	mov	r0, r6
 8020786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802078a:	89ab      	ldrh	r3, [r5, #12]
 802078c:	2b01      	cmp	r3, #1
 802078e:	d907      	bls.n	80207a0 <_fwalk_sglue+0x38>
 8020790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020794:	3301      	adds	r3, #1
 8020796:	d003      	beq.n	80207a0 <_fwalk_sglue+0x38>
 8020798:	4629      	mov	r1, r5
 802079a:	4638      	mov	r0, r7
 802079c:	47c0      	blx	r8
 802079e:	4306      	orrs	r6, r0
 80207a0:	3568      	adds	r5, #104	; 0x68
 80207a2:	e7e9      	b.n	8020778 <_fwalk_sglue+0x10>

080207a4 <siprintf>:
 80207a4:	b40e      	push	{r1, r2, r3}
 80207a6:	b500      	push	{lr}
 80207a8:	b09c      	sub	sp, #112	; 0x70
 80207aa:	ab1d      	add	r3, sp, #116	; 0x74
 80207ac:	9002      	str	r0, [sp, #8]
 80207ae:	9006      	str	r0, [sp, #24]
 80207b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80207b4:	4809      	ldr	r0, [pc, #36]	; (80207dc <siprintf+0x38>)
 80207b6:	9107      	str	r1, [sp, #28]
 80207b8:	9104      	str	r1, [sp, #16]
 80207ba:	4909      	ldr	r1, [pc, #36]	; (80207e0 <siprintf+0x3c>)
 80207bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80207c0:	9105      	str	r1, [sp, #20]
 80207c2:	6800      	ldr	r0, [r0, #0]
 80207c4:	9301      	str	r3, [sp, #4]
 80207c6:	a902      	add	r1, sp, #8
 80207c8:	f001 fa58 	bl	8021c7c <_svfiprintf_r>
 80207cc:	9b02      	ldr	r3, [sp, #8]
 80207ce:	2200      	movs	r2, #0
 80207d0:	701a      	strb	r2, [r3, #0]
 80207d2:	b01c      	add	sp, #112	; 0x70
 80207d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80207d8:	b003      	add	sp, #12
 80207da:	4770      	bx	lr
 80207dc:	20000418 	.word	0x20000418
 80207e0:	ffff0208 	.word	0xffff0208

080207e4 <__sread>:
 80207e4:	b510      	push	{r4, lr}
 80207e6:	460c      	mov	r4, r1
 80207e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80207ec:	f000 f8f0 	bl	80209d0 <_read_r>
 80207f0:	2800      	cmp	r0, #0
 80207f2:	bfab      	itete	ge
 80207f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80207f6:	89a3      	ldrhlt	r3, [r4, #12]
 80207f8:	181b      	addge	r3, r3, r0
 80207fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80207fe:	bfac      	ite	ge
 8020800:	6563      	strge	r3, [r4, #84]	; 0x54
 8020802:	81a3      	strhlt	r3, [r4, #12]
 8020804:	bd10      	pop	{r4, pc}

08020806 <__swrite>:
 8020806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802080a:	461f      	mov	r7, r3
 802080c:	898b      	ldrh	r3, [r1, #12]
 802080e:	05db      	lsls	r3, r3, #23
 8020810:	4605      	mov	r5, r0
 8020812:	460c      	mov	r4, r1
 8020814:	4616      	mov	r6, r2
 8020816:	d505      	bpl.n	8020824 <__swrite+0x1e>
 8020818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802081c:	2302      	movs	r3, #2
 802081e:	2200      	movs	r2, #0
 8020820:	f000 f8c4 	bl	80209ac <_lseek_r>
 8020824:	89a3      	ldrh	r3, [r4, #12]
 8020826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802082a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802082e:	81a3      	strh	r3, [r4, #12]
 8020830:	4632      	mov	r2, r6
 8020832:	463b      	mov	r3, r7
 8020834:	4628      	mov	r0, r5
 8020836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802083a:	f000 b8eb 	b.w	8020a14 <_write_r>

0802083e <__sseek>:
 802083e:	b510      	push	{r4, lr}
 8020840:	460c      	mov	r4, r1
 8020842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020846:	f000 f8b1 	bl	80209ac <_lseek_r>
 802084a:	1c43      	adds	r3, r0, #1
 802084c:	89a3      	ldrh	r3, [r4, #12]
 802084e:	bf15      	itete	ne
 8020850:	6560      	strne	r0, [r4, #84]	; 0x54
 8020852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802085a:	81a3      	strheq	r3, [r4, #12]
 802085c:	bf18      	it	ne
 802085e:	81a3      	strhne	r3, [r4, #12]
 8020860:	bd10      	pop	{r4, pc}

08020862 <__sclose>:
 8020862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020866:	f000 b83b 	b.w	80208e0 <_close_r>

0802086a <memset>:
 802086a:	4402      	add	r2, r0
 802086c:	4603      	mov	r3, r0
 802086e:	4293      	cmp	r3, r2
 8020870:	d100      	bne.n	8020874 <memset+0xa>
 8020872:	4770      	bx	lr
 8020874:	f803 1b01 	strb.w	r1, [r3], #1
 8020878:	e7f9      	b.n	802086e <memset+0x4>

0802087a <strchr>:
 802087a:	b2c9      	uxtb	r1, r1
 802087c:	4603      	mov	r3, r0
 802087e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020882:	b11a      	cbz	r2, 802088c <strchr+0x12>
 8020884:	428a      	cmp	r2, r1
 8020886:	d1f9      	bne.n	802087c <strchr+0x2>
 8020888:	4618      	mov	r0, r3
 802088a:	4770      	bx	lr
 802088c:	2900      	cmp	r1, #0
 802088e:	bf18      	it	ne
 8020890:	2300      	movne	r3, #0
 8020892:	e7f9      	b.n	8020888 <strchr+0xe>

08020894 <strncmp>:
 8020894:	b510      	push	{r4, lr}
 8020896:	b16a      	cbz	r2, 80208b4 <strncmp+0x20>
 8020898:	3901      	subs	r1, #1
 802089a:	1884      	adds	r4, r0, r2
 802089c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80208a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80208a4:	429a      	cmp	r2, r3
 80208a6:	d103      	bne.n	80208b0 <strncmp+0x1c>
 80208a8:	42a0      	cmp	r0, r4
 80208aa:	d001      	beq.n	80208b0 <strncmp+0x1c>
 80208ac:	2a00      	cmp	r2, #0
 80208ae:	d1f5      	bne.n	802089c <strncmp+0x8>
 80208b0:	1ad0      	subs	r0, r2, r3
 80208b2:	bd10      	pop	{r4, pc}
 80208b4:	4610      	mov	r0, r2
 80208b6:	e7fc      	b.n	80208b2 <strncmp+0x1e>

080208b8 <strncpy>:
 80208b8:	b510      	push	{r4, lr}
 80208ba:	3901      	subs	r1, #1
 80208bc:	4603      	mov	r3, r0
 80208be:	b132      	cbz	r2, 80208ce <strncpy+0x16>
 80208c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80208c4:	f803 4b01 	strb.w	r4, [r3], #1
 80208c8:	3a01      	subs	r2, #1
 80208ca:	2c00      	cmp	r4, #0
 80208cc:	d1f7      	bne.n	80208be <strncpy+0x6>
 80208ce:	441a      	add	r2, r3
 80208d0:	2100      	movs	r1, #0
 80208d2:	4293      	cmp	r3, r2
 80208d4:	d100      	bne.n	80208d8 <strncpy+0x20>
 80208d6:	bd10      	pop	{r4, pc}
 80208d8:	f803 1b01 	strb.w	r1, [r3], #1
 80208dc:	e7f9      	b.n	80208d2 <strncpy+0x1a>
	...

080208e0 <_close_r>:
 80208e0:	b538      	push	{r3, r4, r5, lr}
 80208e2:	4d06      	ldr	r5, [pc, #24]	; (80208fc <_close_r+0x1c>)
 80208e4:	2300      	movs	r3, #0
 80208e6:	4604      	mov	r4, r0
 80208e8:	4608      	mov	r0, r1
 80208ea:	602b      	str	r3, [r5, #0]
 80208ec:	f7e8 fc67 	bl	80091be <_close>
 80208f0:	1c43      	adds	r3, r0, #1
 80208f2:	d102      	bne.n	80208fa <_close_r+0x1a>
 80208f4:	682b      	ldr	r3, [r5, #0]
 80208f6:	b103      	cbz	r3, 80208fa <_close_r+0x1a>
 80208f8:	6023      	str	r3, [r4, #0]
 80208fa:	bd38      	pop	{r3, r4, r5, pc}
 80208fc:	200147d0 	.word	0x200147d0

08020900 <_reclaim_reent>:
 8020900:	4b29      	ldr	r3, [pc, #164]	; (80209a8 <_reclaim_reent+0xa8>)
 8020902:	681b      	ldr	r3, [r3, #0]
 8020904:	4283      	cmp	r3, r0
 8020906:	b570      	push	{r4, r5, r6, lr}
 8020908:	4604      	mov	r4, r0
 802090a:	d04b      	beq.n	80209a4 <_reclaim_reent+0xa4>
 802090c:	69c3      	ldr	r3, [r0, #28]
 802090e:	b143      	cbz	r3, 8020922 <_reclaim_reent+0x22>
 8020910:	68db      	ldr	r3, [r3, #12]
 8020912:	2b00      	cmp	r3, #0
 8020914:	d144      	bne.n	80209a0 <_reclaim_reent+0xa0>
 8020916:	69e3      	ldr	r3, [r4, #28]
 8020918:	6819      	ldr	r1, [r3, #0]
 802091a:	b111      	cbz	r1, 8020922 <_reclaim_reent+0x22>
 802091c:	4620      	mov	r0, r4
 802091e:	f000 f8db 	bl	8020ad8 <_free_r>
 8020922:	6961      	ldr	r1, [r4, #20]
 8020924:	b111      	cbz	r1, 802092c <_reclaim_reent+0x2c>
 8020926:	4620      	mov	r0, r4
 8020928:	f000 f8d6 	bl	8020ad8 <_free_r>
 802092c:	69e1      	ldr	r1, [r4, #28]
 802092e:	b111      	cbz	r1, 8020936 <_reclaim_reent+0x36>
 8020930:	4620      	mov	r0, r4
 8020932:	f000 f8d1 	bl	8020ad8 <_free_r>
 8020936:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8020938:	b111      	cbz	r1, 8020940 <_reclaim_reent+0x40>
 802093a:	4620      	mov	r0, r4
 802093c:	f000 f8cc 	bl	8020ad8 <_free_r>
 8020940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020942:	b111      	cbz	r1, 802094a <_reclaim_reent+0x4a>
 8020944:	4620      	mov	r0, r4
 8020946:	f000 f8c7 	bl	8020ad8 <_free_r>
 802094a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802094c:	b111      	cbz	r1, 8020954 <_reclaim_reent+0x54>
 802094e:	4620      	mov	r0, r4
 8020950:	f000 f8c2 	bl	8020ad8 <_free_r>
 8020954:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8020956:	b111      	cbz	r1, 802095e <_reclaim_reent+0x5e>
 8020958:	4620      	mov	r0, r4
 802095a:	f000 f8bd 	bl	8020ad8 <_free_r>
 802095e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8020960:	b111      	cbz	r1, 8020968 <_reclaim_reent+0x68>
 8020962:	4620      	mov	r0, r4
 8020964:	f000 f8b8 	bl	8020ad8 <_free_r>
 8020968:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802096a:	b111      	cbz	r1, 8020972 <_reclaim_reent+0x72>
 802096c:	4620      	mov	r0, r4
 802096e:	f000 f8b3 	bl	8020ad8 <_free_r>
 8020972:	6a23      	ldr	r3, [r4, #32]
 8020974:	b1b3      	cbz	r3, 80209a4 <_reclaim_reent+0xa4>
 8020976:	4620      	mov	r0, r4
 8020978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802097c:	4718      	bx	r3
 802097e:	5949      	ldr	r1, [r1, r5]
 8020980:	b941      	cbnz	r1, 8020994 <_reclaim_reent+0x94>
 8020982:	3504      	adds	r5, #4
 8020984:	69e3      	ldr	r3, [r4, #28]
 8020986:	2d80      	cmp	r5, #128	; 0x80
 8020988:	68d9      	ldr	r1, [r3, #12]
 802098a:	d1f8      	bne.n	802097e <_reclaim_reent+0x7e>
 802098c:	4620      	mov	r0, r4
 802098e:	f000 f8a3 	bl	8020ad8 <_free_r>
 8020992:	e7c0      	b.n	8020916 <_reclaim_reent+0x16>
 8020994:	680e      	ldr	r6, [r1, #0]
 8020996:	4620      	mov	r0, r4
 8020998:	f000 f89e 	bl	8020ad8 <_free_r>
 802099c:	4631      	mov	r1, r6
 802099e:	e7ef      	b.n	8020980 <_reclaim_reent+0x80>
 80209a0:	2500      	movs	r5, #0
 80209a2:	e7ef      	b.n	8020984 <_reclaim_reent+0x84>
 80209a4:	bd70      	pop	{r4, r5, r6, pc}
 80209a6:	bf00      	nop
 80209a8:	20000418 	.word	0x20000418

080209ac <_lseek_r>:
 80209ac:	b538      	push	{r3, r4, r5, lr}
 80209ae:	4d07      	ldr	r5, [pc, #28]	; (80209cc <_lseek_r+0x20>)
 80209b0:	4604      	mov	r4, r0
 80209b2:	4608      	mov	r0, r1
 80209b4:	4611      	mov	r1, r2
 80209b6:	2200      	movs	r2, #0
 80209b8:	602a      	str	r2, [r5, #0]
 80209ba:	461a      	mov	r2, r3
 80209bc:	f7e8 fc26 	bl	800920c <_lseek>
 80209c0:	1c43      	adds	r3, r0, #1
 80209c2:	d102      	bne.n	80209ca <_lseek_r+0x1e>
 80209c4:	682b      	ldr	r3, [r5, #0]
 80209c6:	b103      	cbz	r3, 80209ca <_lseek_r+0x1e>
 80209c8:	6023      	str	r3, [r4, #0]
 80209ca:	bd38      	pop	{r3, r4, r5, pc}
 80209cc:	200147d0 	.word	0x200147d0

080209d0 <_read_r>:
 80209d0:	b538      	push	{r3, r4, r5, lr}
 80209d2:	4d07      	ldr	r5, [pc, #28]	; (80209f0 <_read_r+0x20>)
 80209d4:	4604      	mov	r4, r0
 80209d6:	4608      	mov	r0, r1
 80209d8:	4611      	mov	r1, r2
 80209da:	2200      	movs	r2, #0
 80209dc:	602a      	str	r2, [r5, #0]
 80209de:	461a      	mov	r2, r3
 80209e0:	f7e8 fbb4 	bl	800914c <_read>
 80209e4:	1c43      	adds	r3, r0, #1
 80209e6:	d102      	bne.n	80209ee <_read_r+0x1e>
 80209e8:	682b      	ldr	r3, [r5, #0]
 80209ea:	b103      	cbz	r3, 80209ee <_read_r+0x1e>
 80209ec:	6023      	str	r3, [r4, #0]
 80209ee:	bd38      	pop	{r3, r4, r5, pc}
 80209f0:	200147d0 	.word	0x200147d0

080209f4 <_sbrk_r>:
 80209f4:	b538      	push	{r3, r4, r5, lr}
 80209f6:	4d06      	ldr	r5, [pc, #24]	; (8020a10 <_sbrk_r+0x1c>)
 80209f8:	2300      	movs	r3, #0
 80209fa:	4604      	mov	r4, r0
 80209fc:	4608      	mov	r0, r1
 80209fe:	602b      	str	r3, [r5, #0]
 8020a00:	f7e8 fc12 	bl	8009228 <_sbrk>
 8020a04:	1c43      	adds	r3, r0, #1
 8020a06:	d102      	bne.n	8020a0e <_sbrk_r+0x1a>
 8020a08:	682b      	ldr	r3, [r5, #0]
 8020a0a:	b103      	cbz	r3, 8020a0e <_sbrk_r+0x1a>
 8020a0c:	6023      	str	r3, [r4, #0]
 8020a0e:	bd38      	pop	{r3, r4, r5, pc}
 8020a10:	200147d0 	.word	0x200147d0

08020a14 <_write_r>:
 8020a14:	b538      	push	{r3, r4, r5, lr}
 8020a16:	4d07      	ldr	r5, [pc, #28]	; (8020a34 <_write_r+0x20>)
 8020a18:	4604      	mov	r4, r0
 8020a1a:	4608      	mov	r0, r1
 8020a1c:	4611      	mov	r1, r2
 8020a1e:	2200      	movs	r2, #0
 8020a20:	602a      	str	r2, [r5, #0]
 8020a22:	461a      	mov	r2, r3
 8020a24:	f7e8 fbaf 	bl	8009186 <_write>
 8020a28:	1c43      	adds	r3, r0, #1
 8020a2a:	d102      	bne.n	8020a32 <_write_r+0x1e>
 8020a2c:	682b      	ldr	r3, [r5, #0]
 8020a2e:	b103      	cbz	r3, 8020a32 <_write_r+0x1e>
 8020a30:	6023      	str	r3, [r4, #0]
 8020a32:	bd38      	pop	{r3, r4, r5, pc}
 8020a34:	200147d0 	.word	0x200147d0

08020a38 <__errno>:
 8020a38:	4b01      	ldr	r3, [pc, #4]	; (8020a40 <__errno+0x8>)
 8020a3a:	6818      	ldr	r0, [r3, #0]
 8020a3c:	4770      	bx	lr
 8020a3e:	bf00      	nop
 8020a40:	20000418 	.word	0x20000418

08020a44 <__libc_init_array>:
 8020a44:	b570      	push	{r4, r5, r6, lr}
 8020a46:	4d0d      	ldr	r5, [pc, #52]	; (8020a7c <__libc_init_array+0x38>)
 8020a48:	4c0d      	ldr	r4, [pc, #52]	; (8020a80 <__libc_init_array+0x3c>)
 8020a4a:	1b64      	subs	r4, r4, r5
 8020a4c:	10a4      	asrs	r4, r4, #2
 8020a4e:	2600      	movs	r6, #0
 8020a50:	42a6      	cmp	r6, r4
 8020a52:	d109      	bne.n	8020a68 <__libc_init_array+0x24>
 8020a54:	4d0b      	ldr	r5, [pc, #44]	; (8020a84 <__libc_init_array+0x40>)
 8020a56:	4c0c      	ldr	r4, [pc, #48]	; (8020a88 <__libc_init_array+0x44>)
 8020a58:	f002 fc76 	bl	8023348 <_init>
 8020a5c:	1b64      	subs	r4, r4, r5
 8020a5e:	10a4      	asrs	r4, r4, #2
 8020a60:	2600      	movs	r6, #0
 8020a62:	42a6      	cmp	r6, r4
 8020a64:	d105      	bne.n	8020a72 <__libc_init_array+0x2e>
 8020a66:	bd70      	pop	{r4, r5, r6, pc}
 8020a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8020a6c:	4798      	blx	r3
 8020a6e:	3601      	adds	r6, #1
 8020a70:	e7ee      	b.n	8020a50 <__libc_init_array+0xc>
 8020a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8020a76:	4798      	blx	r3
 8020a78:	3601      	adds	r6, #1
 8020a7a:	e7f2      	b.n	8020a62 <__libc_init_array+0x1e>
 8020a7c:	08023f04 	.word	0x08023f04
 8020a80:	08023f04 	.word	0x08023f04
 8020a84:	08023f04 	.word	0x08023f04
 8020a88:	08023f08 	.word	0x08023f08

08020a8c <__retarget_lock_init_recursive>:
 8020a8c:	4770      	bx	lr

08020a8e <__retarget_lock_acquire_recursive>:
 8020a8e:	4770      	bx	lr

08020a90 <__retarget_lock_release_recursive>:
 8020a90:	4770      	bx	lr

08020a92 <strcpy>:
 8020a92:	4603      	mov	r3, r0
 8020a94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020a98:	f803 2b01 	strb.w	r2, [r3], #1
 8020a9c:	2a00      	cmp	r2, #0
 8020a9e:	d1f9      	bne.n	8020a94 <strcpy+0x2>
 8020aa0:	4770      	bx	lr

08020aa2 <__aeabi_memcpy>:
 8020aa2:	f000 b803 	b.w	8020aac <memcpy>

08020aa6 <__aeabi_memclr>:
 8020aa6:	2200      	movs	r2, #0
 8020aa8:	f7e4 bfcd 	b.w	8005a46 <__aeabi_memset>

08020aac <memcpy>:
 8020aac:	440a      	add	r2, r1
 8020aae:	4291      	cmp	r1, r2
 8020ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8020ab4:	d100      	bne.n	8020ab8 <memcpy+0xc>
 8020ab6:	4770      	bx	lr
 8020ab8:	b510      	push	{r4, lr}
 8020aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020ac2:	4291      	cmp	r1, r2
 8020ac4:	d1f9      	bne.n	8020aba <memcpy+0xe>
 8020ac6:	bd10      	pop	{r4, pc}

08020ac8 <nan>:
 8020ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020ad0 <nan+0x8>
 8020acc:	4770      	bx	lr
 8020ace:	bf00      	nop
 8020ad0:	00000000 	.word	0x00000000
 8020ad4:	7ff80000 	.word	0x7ff80000

08020ad8 <_free_r>:
 8020ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020ada:	2900      	cmp	r1, #0
 8020adc:	d044      	beq.n	8020b68 <_free_r+0x90>
 8020ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020ae2:	9001      	str	r0, [sp, #4]
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8020aea:	bfb8      	it	lt
 8020aec:	18e4      	addlt	r4, r4, r3
 8020aee:	f7fe feaf 	bl	801f850 <__malloc_lock>
 8020af2:	4a1e      	ldr	r2, [pc, #120]	; (8020b6c <_free_r+0x94>)
 8020af4:	9801      	ldr	r0, [sp, #4]
 8020af6:	6813      	ldr	r3, [r2, #0]
 8020af8:	b933      	cbnz	r3, 8020b08 <_free_r+0x30>
 8020afa:	6063      	str	r3, [r4, #4]
 8020afc:	6014      	str	r4, [r2, #0]
 8020afe:	b003      	add	sp, #12
 8020b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020b04:	f7fe beaa 	b.w	801f85c <__malloc_unlock>
 8020b08:	42a3      	cmp	r3, r4
 8020b0a:	d908      	bls.n	8020b1e <_free_r+0x46>
 8020b0c:	6825      	ldr	r5, [r4, #0]
 8020b0e:	1961      	adds	r1, r4, r5
 8020b10:	428b      	cmp	r3, r1
 8020b12:	bf01      	itttt	eq
 8020b14:	6819      	ldreq	r1, [r3, #0]
 8020b16:	685b      	ldreq	r3, [r3, #4]
 8020b18:	1949      	addeq	r1, r1, r5
 8020b1a:	6021      	streq	r1, [r4, #0]
 8020b1c:	e7ed      	b.n	8020afa <_free_r+0x22>
 8020b1e:	461a      	mov	r2, r3
 8020b20:	685b      	ldr	r3, [r3, #4]
 8020b22:	b10b      	cbz	r3, 8020b28 <_free_r+0x50>
 8020b24:	42a3      	cmp	r3, r4
 8020b26:	d9fa      	bls.n	8020b1e <_free_r+0x46>
 8020b28:	6811      	ldr	r1, [r2, #0]
 8020b2a:	1855      	adds	r5, r2, r1
 8020b2c:	42a5      	cmp	r5, r4
 8020b2e:	d10b      	bne.n	8020b48 <_free_r+0x70>
 8020b30:	6824      	ldr	r4, [r4, #0]
 8020b32:	4421      	add	r1, r4
 8020b34:	1854      	adds	r4, r2, r1
 8020b36:	42a3      	cmp	r3, r4
 8020b38:	6011      	str	r1, [r2, #0]
 8020b3a:	d1e0      	bne.n	8020afe <_free_r+0x26>
 8020b3c:	681c      	ldr	r4, [r3, #0]
 8020b3e:	685b      	ldr	r3, [r3, #4]
 8020b40:	6053      	str	r3, [r2, #4]
 8020b42:	440c      	add	r4, r1
 8020b44:	6014      	str	r4, [r2, #0]
 8020b46:	e7da      	b.n	8020afe <_free_r+0x26>
 8020b48:	d902      	bls.n	8020b50 <_free_r+0x78>
 8020b4a:	230c      	movs	r3, #12
 8020b4c:	6003      	str	r3, [r0, #0]
 8020b4e:	e7d6      	b.n	8020afe <_free_r+0x26>
 8020b50:	6825      	ldr	r5, [r4, #0]
 8020b52:	1961      	adds	r1, r4, r5
 8020b54:	428b      	cmp	r3, r1
 8020b56:	bf04      	itt	eq
 8020b58:	6819      	ldreq	r1, [r3, #0]
 8020b5a:	685b      	ldreq	r3, [r3, #4]
 8020b5c:	6063      	str	r3, [r4, #4]
 8020b5e:	bf04      	itt	eq
 8020b60:	1949      	addeq	r1, r1, r5
 8020b62:	6021      	streq	r1, [r4, #0]
 8020b64:	6054      	str	r4, [r2, #4]
 8020b66:	e7ca      	b.n	8020afe <_free_r+0x26>
 8020b68:	b003      	add	sp, #12
 8020b6a:	bd30      	pop	{r4, r5, pc}
 8020b6c:	2001468c 	.word	0x2001468c

08020b70 <rshift>:
 8020b70:	6903      	ldr	r3, [r0, #16]
 8020b72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8020b76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020b7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020b7e:	f100 0414 	add.w	r4, r0, #20
 8020b82:	dd45      	ble.n	8020c10 <rshift+0xa0>
 8020b84:	f011 011f 	ands.w	r1, r1, #31
 8020b88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020b8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020b90:	d10c      	bne.n	8020bac <rshift+0x3c>
 8020b92:	f100 0710 	add.w	r7, r0, #16
 8020b96:	4629      	mov	r1, r5
 8020b98:	42b1      	cmp	r1, r6
 8020b9a:	d334      	bcc.n	8020c06 <rshift+0x96>
 8020b9c:	1a9b      	subs	r3, r3, r2
 8020b9e:	009b      	lsls	r3, r3, #2
 8020ba0:	1eea      	subs	r2, r5, #3
 8020ba2:	4296      	cmp	r6, r2
 8020ba4:	bf38      	it	cc
 8020ba6:	2300      	movcc	r3, #0
 8020ba8:	4423      	add	r3, r4
 8020baa:	e015      	b.n	8020bd8 <rshift+0x68>
 8020bac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020bb0:	f1c1 0820 	rsb	r8, r1, #32
 8020bb4:	40cf      	lsrs	r7, r1
 8020bb6:	f105 0e04 	add.w	lr, r5, #4
 8020bba:	46a1      	mov	r9, r4
 8020bbc:	4576      	cmp	r6, lr
 8020bbe:	46f4      	mov	ip, lr
 8020bc0:	d815      	bhi.n	8020bee <rshift+0x7e>
 8020bc2:	1a9a      	subs	r2, r3, r2
 8020bc4:	0092      	lsls	r2, r2, #2
 8020bc6:	3a04      	subs	r2, #4
 8020bc8:	3501      	adds	r5, #1
 8020bca:	42ae      	cmp	r6, r5
 8020bcc:	bf38      	it	cc
 8020bce:	2200      	movcc	r2, #0
 8020bd0:	18a3      	adds	r3, r4, r2
 8020bd2:	50a7      	str	r7, [r4, r2]
 8020bd4:	b107      	cbz	r7, 8020bd8 <rshift+0x68>
 8020bd6:	3304      	adds	r3, #4
 8020bd8:	1b1a      	subs	r2, r3, r4
 8020bda:	42a3      	cmp	r3, r4
 8020bdc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8020be0:	bf08      	it	eq
 8020be2:	2300      	moveq	r3, #0
 8020be4:	6102      	str	r2, [r0, #16]
 8020be6:	bf08      	it	eq
 8020be8:	6143      	streq	r3, [r0, #20]
 8020bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020bee:	f8dc c000 	ldr.w	ip, [ip]
 8020bf2:	fa0c fc08 	lsl.w	ip, ip, r8
 8020bf6:	ea4c 0707 	orr.w	r7, ip, r7
 8020bfa:	f849 7b04 	str.w	r7, [r9], #4
 8020bfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020c02:	40cf      	lsrs	r7, r1
 8020c04:	e7da      	b.n	8020bbc <rshift+0x4c>
 8020c06:	f851 cb04 	ldr.w	ip, [r1], #4
 8020c0a:	f847 cf04 	str.w	ip, [r7, #4]!
 8020c0e:	e7c3      	b.n	8020b98 <rshift+0x28>
 8020c10:	4623      	mov	r3, r4
 8020c12:	e7e1      	b.n	8020bd8 <rshift+0x68>

08020c14 <__hexdig_fun>:
 8020c14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8020c18:	2b09      	cmp	r3, #9
 8020c1a:	d802      	bhi.n	8020c22 <__hexdig_fun+0xe>
 8020c1c:	3820      	subs	r0, #32
 8020c1e:	b2c0      	uxtb	r0, r0
 8020c20:	4770      	bx	lr
 8020c22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8020c26:	2b05      	cmp	r3, #5
 8020c28:	d801      	bhi.n	8020c2e <__hexdig_fun+0x1a>
 8020c2a:	3847      	subs	r0, #71	; 0x47
 8020c2c:	e7f7      	b.n	8020c1e <__hexdig_fun+0xa>
 8020c2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8020c32:	2b05      	cmp	r3, #5
 8020c34:	d801      	bhi.n	8020c3a <__hexdig_fun+0x26>
 8020c36:	3827      	subs	r0, #39	; 0x27
 8020c38:	e7f1      	b.n	8020c1e <__hexdig_fun+0xa>
 8020c3a:	2000      	movs	r0, #0
 8020c3c:	4770      	bx	lr
	...

08020c40 <__gethex>:
 8020c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c44:	4617      	mov	r7, r2
 8020c46:	680a      	ldr	r2, [r1, #0]
 8020c48:	b085      	sub	sp, #20
 8020c4a:	f102 0b02 	add.w	fp, r2, #2
 8020c4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8020c52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8020c56:	4681      	mov	r9, r0
 8020c58:	468a      	mov	sl, r1
 8020c5a:	9302      	str	r3, [sp, #8]
 8020c5c:	32fe      	adds	r2, #254	; 0xfe
 8020c5e:	eb02 030b 	add.w	r3, r2, fp
 8020c62:	46d8      	mov	r8, fp
 8020c64:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8020c68:	9301      	str	r3, [sp, #4]
 8020c6a:	2830      	cmp	r0, #48	; 0x30
 8020c6c:	d0f7      	beq.n	8020c5e <__gethex+0x1e>
 8020c6e:	f7ff ffd1 	bl	8020c14 <__hexdig_fun>
 8020c72:	4604      	mov	r4, r0
 8020c74:	2800      	cmp	r0, #0
 8020c76:	d138      	bne.n	8020cea <__gethex+0xaa>
 8020c78:	49a7      	ldr	r1, [pc, #668]	; (8020f18 <__gethex+0x2d8>)
 8020c7a:	2201      	movs	r2, #1
 8020c7c:	4640      	mov	r0, r8
 8020c7e:	f7ff fe09 	bl	8020894 <strncmp>
 8020c82:	4606      	mov	r6, r0
 8020c84:	2800      	cmp	r0, #0
 8020c86:	d169      	bne.n	8020d5c <__gethex+0x11c>
 8020c88:	f898 0001 	ldrb.w	r0, [r8, #1]
 8020c8c:	465d      	mov	r5, fp
 8020c8e:	f7ff ffc1 	bl	8020c14 <__hexdig_fun>
 8020c92:	2800      	cmp	r0, #0
 8020c94:	d064      	beq.n	8020d60 <__gethex+0x120>
 8020c96:	465a      	mov	r2, fp
 8020c98:	7810      	ldrb	r0, [r2, #0]
 8020c9a:	2830      	cmp	r0, #48	; 0x30
 8020c9c:	4690      	mov	r8, r2
 8020c9e:	f102 0201 	add.w	r2, r2, #1
 8020ca2:	d0f9      	beq.n	8020c98 <__gethex+0x58>
 8020ca4:	f7ff ffb6 	bl	8020c14 <__hexdig_fun>
 8020ca8:	2301      	movs	r3, #1
 8020caa:	fab0 f480 	clz	r4, r0
 8020cae:	0964      	lsrs	r4, r4, #5
 8020cb0:	465e      	mov	r6, fp
 8020cb2:	9301      	str	r3, [sp, #4]
 8020cb4:	4642      	mov	r2, r8
 8020cb6:	4615      	mov	r5, r2
 8020cb8:	3201      	adds	r2, #1
 8020cba:	7828      	ldrb	r0, [r5, #0]
 8020cbc:	f7ff ffaa 	bl	8020c14 <__hexdig_fun>
 8020cc0:	2800      	cmp	r0, #0
 8020cc2:	d1f8      	bne.n	8020cb6 <__gethex+0x76>
 8020cc4:	4994      	ldr	r1, [pc, #592]	; (8020f18 <__gethex+0x2d8>)
 8020cc6:	2201      	movs	r2, #1
 8020cc8:	4628      	mov	r0, r5
 8020cca:	f7ff fde3 	bl	8020894 <strncmp>
 8020cce:	b978      	cbnz	r0, 8020cf0 <__gethex+0xb0>
 8020cd0:	b946      	cbnz	r6, 8020ce4 <__gethex+0xa4>
 8020cd2:	1c6e      	adds	r6, r5, #1
 8020cd4:	4632      	mov	r2, r6
 8020cd6:	4615      	mov	r5, r2
 8020cd8:	3201      	adds	r2, #1
 8020cda:	7828      	ldrb	r0, [r5, #0]
 8020cdc:	f7ff ff9a 	bl	8020c14 <__hexdig_fun>
 8020ce0:	2800      	cmp	r0, #0
 8020ce2:	d1f8      	bne.n	8020cd6 <__gethex+0x96>
 8020ce4:	1b73      	subs	r3, r6, r5
 8020ce6:	009e      	lsls	r6, r3, #2
 8020ce8:	e004      	b.n	8020cf4 <__gethex+0xb4>
 8020cea:	2400      	movs	r4, #0
 8020cec:	4626      	mov	r6, r4
 8020cee:	e7e1      	b.n	8020cb4 <__gethex+0x74>
 8020cf0:	2e00      	cmp	r6, #0
 8020cf2:	d1f7      	bne.n	8020ce4 <__gethex+0xa4>
 8020cf4:	782b      	ldrb	r3, [r5, #0]
 8020cf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8020cfa:	2b50      	cmp	r3, #80	; 0x50
 8020cfc:	d13d      	bne.n	8020d7a <__gethex+0x13a>
 8020cfe:	786b      	ldrb	r3, [r5, #1]
 8020d00:	2b2b      	cmp	r3, #43	; 0x2b
 8020d02:	d02f      	beq.n	8020d64 <__gethex+0x124>
 8020d04:	2b2d      	cmp	r3, #45	; 0x2d
 8020d06:	d031      	beq.n	8020d6c <__gethex+0x12c>
 8020d08:	1c69      	adds	r1, r5, #1
 8020d0a:	f04f 0b00 	mov.w	fp, #0
 8020d0e:	7808      	ldrb	r0, [r1, #0]
 8020d10:	f7ff ff80 	bl	8020c14 <__hexdig_fun>
 8020d14:	1e42      	subs	r2, r0, #1
 8020d16:	b2d2      	uxtb	r2, r2
 8020d18:	2a18      	cmp	r2, #24
 8020d1a:	d82e      	bhi.n	8020d7a <__gethex+0x13a>
 8020d1c:	f1a0 0210 	sub.w	r2, r0, #16
 8020d20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020d24:	f7ff ff76 	bl	8020c14 <__hexdig_fun>
 8020d28:	f100 3cff 	add.w	ip, r0, #4294967295
 8020d2c:	fa5f fc8c 	uxtb.w	ip, ip
 8020d30:	f1bc 0f18 	cmp.w	ip, #24
 8020d34:	d91d      	bls.n	8020d72 <__gethex+0x132>
 8020d36:	f1bb 0f00 	cmp.w	fp, #0
 8020d3a:	d000      	beq.n	8020d3e <__gethex+0xfe>
 8020d3c:	4252      	negs	r2, r2
 8020d3e:	4416      	add	r6, r2
 8020d40:	f8ca 1000 	str.w	r1, [sl]
 8020d44:	b1dc      	cbz	r4, 8020d7e <__gethex+0x13e>
 8020d46:	9b01      	ldr	r3, [sp, #4]
 8020d48:	2b00      	cmp	r3, #0
 8020d4a:	bf14      	ite	ne
 8020d4c:	f04f 0800 	movne.w	r8, #0
 8020d50:	f04f 0806 	moveq.w	r8, #6
 8020d54:	4640      	mov	r0, r8
 8020d56:	b005      	add	sp, #20
 8020d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d5c:	4645      	mov	r5, r8
 8020d5e:	4626      	mov	r6, r4
 8020d60:	2401      	movs	r4, #1
 8020d62:	e7c7      	b.n	8020cf4 <__gethex+0xb4>
 8020d64:	f04f 0b00 	mov.w	fp, #0
 8020d68:	1ca9      	adds	r1, r5, #2
 8020d6a:	e7d0      	b.n	8020d0e <__gethex+0xce>
 8020d6c:	f04f 0b01 	mov.w	fp, #1
 8020d70:	e7fa      	b.n	8020d68 <__gethex+0x128>
 8020d72:	230a      	movs	r3, #10
 8020d74:	fb03 0002 	mla	r0, r3, r2, r0
 8020d78:	e7d0      	b.n	8020d1c <__gethex+0xdc>
 8020d7a:	4629      	mov	r1, r5
 8020d7c:	e7e0      	b.n	8020d40 <__gethex+0x100>
 8020d7e:	eba5 0308 	sub.w	r3, r5, r8
 8020d82:	3b01      	subs	r3, #1
 8020d84:	4621      	mov	r1, r4
 8020d86:	2b07      	cmp	r3, #7
 8020d88:	dc0a      	bgt.n	8020da0 <__gethex+0x160>
 8020d8a:	4648      	mov	r0, r9
 8020d8c:	f000 fa5a 	bl	8021244 <_Balloc>
 8020d90:	4604      	mov	r4, r0
 8020d92:	b940      	cbnz	r0, 8020da6 <__gethex+0x166>
 8020d94:	4b61      	ldr	r3, [pc, #388]	; (8020f1c <__gethex+0x2dc>)
 8020d96:	4602      	mov	r2, r0
 8020d98:	21e4      	movs	r1, #228	; 0xe4
 8020d9a:	4861      	ldr	r0, [pc, #388]	; (8020f20 <__gethex+0x2e0>)
 8020d9c:	f001 fac4 	bl	8022328 <__assert_func>
 8020da0:	3101      	adds	r1, #1
 8020da2:	105b      	asrs	r3, r3, #1
 8020da4:	e7ef      	b.n	8020d86 <__gethex+0x146>
 8020da6:	f100 0a14 	add.w	sl, r0, #20
 8020daa:	2300      	movs	r3, #0
 8020dac:	495a      	ldr	r1, [pc, #360]	; (8020f18 <__gethex+0x2d8>)
 8020dae:	f8cd a004 	str.w	sl, [sp, #4]
 8020db2:	469b      	mov	fp, r3
 8020db4:	45a8      	cmp	r8, r5
 8020db6:	d342      	bcc.n	8020e3e <__gethex+0x1fe>
 8020db8:	9801      	ldr	r0, [sp, #4]
 8020dba:	f840 bb04 	str.w	fp, [r0], #4
 8020dbe:	eba0 000a 	sub.w	r0, r0, sl
 8020dc2:	1080      	asrs	r0, r0, #2
 8020dc4:	6120      	str	r0, [r4, #16]
 8020dc6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8020dca:	4658      	mov	r0, fp
 8020dcc:	f000 fb2c 	bl	8021428 <__hi0bits>
 8020dd0:	683d      	ldr	r5, [r7, #0]
 8020dd2:	eba8 0000 	sub.w	r0, r8, r0
 8020dd6:	42a8      	cmp	r0, r5
 8020dd8:	dd59      	ble.n	8020e8e <__gethex+0x24e>
 8020dda:	eba0 0805 	sub.w	r8, r0, r5
 8020dde:	4641      	mov	r1, r8
 8020de0:	4620      	mov	r0, r4
 8020de2:	f000 febb 	bl	8021b5c <__any_on>
 8020de6:	4683      	mov	fp, r0
 8020de8:	b1b8      	cbz	r0, 8020e1a <__gethex+0x1da>
 8020dea:	f108 33ff 	add.w	r3, r8, #4294967295
 8020dee:	1159      	asrs	r1, r3, #5
 8020df0:	f003 021f 	and.w	r2, r3, #31
 8020df4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020df8:	f04f 0b01 	mov.w	fp, #1
 8020dfc:	fa0b f202 	lsl.w	r2, fp, r2
 8020e00:	420a      	tst	r2, r1
 8020e02:	d00a      	beq.n	8020e1a <__gethex+0x1da>
 8020e04:	455b      	cmp	r3, fp
 8020e06:	dd06      	ble.n	8020e16 <__gethex+0x1d6>
 8020e08:	f1a8 0102 	sub.w	r1, r8, #2
 8020e0c:	4620      	mov	r0, r4
 8020e0e:	f000 fea5 	bl	8021b5c <__any_on>
 8020e12:	2800      	cmp	r0, #0
 8020e14:	d138      	bne.n	8020e88 <__gethex+0x248>
 8020e16:	f04f 0b02 	mov.w	fp, #2
 8020e1a:	4641      	mov	r1, r8
 8020e1c:	4620      	mov	r0, r4
 8020e1e:	f7ff fea7 	bl	8020b70 <rshift>
 8020e22:	4446      	add	r6, r8
 8020e24:	68bb      	ldr	r3, [r7, #8]
 8020e26:	42b3      	cmp	r3, r6
 8020e28:	da41      	bge.n	8020eae <__gethex+0x26e>
 8020e2a:	4621      	mov	r1, r4
 8020e2c:	4648      	mov	r0, r9
 8020e2e:	f000 fa49 	bl	80212c4 <_Bfree>
 8020e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020e34:	2300      	movs	r3, #0
 8020e36:	6013      	str	r3, [r2, #0]
 8020e38:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8020e3c:	e78a      	b.n	8020d54 <__gethex+0x114>
 8020e3e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8020e42:	2a2e      	cmp	r2, #46	; 0x2e
 8020e44:	d014      	beq.n	8020e70 <__gethex+0x230>
 8020e46:	2b20      	cmp	r3, #32
 8020e48:	d106      	bne.n	8020e58 <__gethex+0x218>
 8020e4a:	9b01      	ldr	r3, [sp, #4]
 8020e4c:	f843 bb04 	str.w	fp, [r3], #4
 8020e50:	f04f 0b00 	mov.w	fp, #0
 8020e54:	9301      	str	r3, [sp, #4]
 8020e56:	465b      	mov	r3, fp
 8020e58:	7828      	ldrb	r0, [r5, #0]
 8020e5a:	9303      	str	r3, [sp, #12]
 8020e5c:	f7ff feda 	bl	8020c14 <__hexdig_fun>
 8020e60:	9b03      	ldr	r3, [sp, #12]
 8020e62:	f000 000f 	and.w	r0, r0, #15
 8020e66:	4098      	lsls	r0, r3
 8020e68:	ea4b 0b00 	orr.w	fp, fp, r0
 8020e6c:	3304      	adds	r3, #4
 8020e6e:	e7a1      	b.n	8020db4 <__gethex+0x174>
 8020e70:	45a8      	cmp	r8, r5
 8020e72:	d8e8      	bhi.n	8020e46 <__gethex+0x206>
 8020e74:	2201      	movs	r2, #1
 8020e76:	4628      	mov	r0, r5
 8020e78:	9303      	str	r3, [sp, #12]
 8020e7a:	f7ff fd0b 	bl	8020894 <strncmp>
 8020e7e:	4926      	ldr	r1, [pc, #152]	; (8020f18 <__gethex+0x2d8>)
 8020e80:	9b03      	ldr	r3, [sp, #12]
 8020e82:	2800      	cmp	r0, #0
 8020e84:	d1df      	bne.n	8020e46 <__gethex+0x206>
 8020e86:	e795      	b.n	8020db4 <__gethex+0x174>
 8020e88:	f04f 0b03 	mov.w	fp, #3
 8020e8c:	e7c5      	b.n	8020e1a <__gethex+0x1da>
 8020e8e:	da0b      	bge.n	8020ea8 <__gethex+0x268>
 8020e90:	eba5 0800 	sub.w	r8, r5, r0
 8020e94:	4621      	mov	r1, r4
 8020e96:	4642      	mov	r2, r8
 8020e98:	4648      	mov	r0, r9
 8020e9a:	f000 fc2d 	bl	80216f8 <__lshift>
 8020e9e:	eba6 0608 	sub.w	r6, r6, r8
 8020ea2:	4604      	mov	r4, r0
 8020ea4:	f100 0a14 	add.w	sl, r0, #20
 8020ea8:	f04f 0b00 	mov.w	fp, #0
 8020eac:	e7ba      	b.n	8020e24 <__gethex+0x1e4>
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	42b3      	cmp	r3, r6
 8020eb2:	dd73      	ble.n	8020f9c <__gethex+0x35c>
 8020eb4:	1b9e      	subs	r6, r3, r6
 8020eb6:	42b5      	cmp	r5, r6
 8020eb8:	dc34      	bgt.n	8020f24 <__gethex+0x2e4>
 8020eba:	68fb      	ldr	r3, [r7, #12]
 8020ebc:	2b02      	cmp	r3, #2
 8020ebe:	d023      	beq.n	8020f08 <__gethex+0x2c8>
 8020ec0:	2b03      	cmp	r3, #3
 8020ec2:	d025      	beq.n	8020f10 <__gethex+0x2d0>
 8020ec4:	2b01      	cmp	r3, #1
 8020ec6:	d115      	bne.n	8020ef4 <__gethex+0x2b4>
 8020ec8:	42b5      	cmp	r5, r6
 8020eca:	d113      	bne.n	8020ef4 <__gethex+0x2b4>
 8020ecc:	2d01      	cmp	r5, #1
 8020ece:	d10b      	bne.n	8020ee8 <__gethex+0x2a8>
 8020ed0:	9a02      	ldr	r2, [sp, #8]
 8020ed2:	687b      	ldr	r3, [r7, #4]
 8020ed4:	6013      	str	r3, [r2, #0]
 8020ed6:	2301      	movs	r3, #1
 8020ed8:	6123      	str	r3, [r4, #16]
 8020eda:	f8ca 3000 	str.w	r3, [sl]
 8020ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ee0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8020ee4:	601c      	str	r4, [r3, #0]
 8020ee6:	e735      	b.n	8020d54 <__gethex+0x114>
 8020ee8:	1e69      	subs	r1, r5, #1
 8020eea:	4620      	mov	r0, r4
 8020eec:	f000 fe36 	bl	8021b5c <__any_on>
 8020ef0:	2800      	cmp	r0, #0
 8020ef2:	d1ed      	bne.n	8020ed0 <__gethex+0x290>
 8020ef4:	4621      	mov	r1, r4
 8020ef6:	4648      	mov	r0, r9
 8020ef8:	f000 f9e4 	bl	80212c4 <_Bfree>
 8020efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020efe:	2300      	movs	r3, #0
 8020f00:	6013      	str	r3, [r2, #0]
 8020f02:	f04f 0850 	mov.w	r8, #80	; 0x50
 8020f06:	e725      	b.n	8020d54 <__gethex+0x114>
 8020f08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020f0a:	2b00      	cmp	r3, #0
 8020f0c:	d1f2      	bne.n	8020ef4 <__gethex+0x2b4>
 8020f0e:	e7df      	b.n	8020ed0 <__gethex+0x290>
 8020f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020f12:	2b00      	cmp	r3, #0
 8020f14:	d1dc      	bne.n	8020ed0 <__gethex+0x290>
 8020f16:	e7ed      	b.n	8020ef4 <__gethex+0x2b4>
 8020f18:	08023770 	.word	0x08023770
 8020f1c:	080238d9 	.word	0x080238d9
 8020f20:	080238ea 	.word	0x080238ea
 8020f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8020f28:	f1bb 0f00 	cmp.w	fp, #0
 8020f2c:	d133      	bne.n	8020f96 <__gethex+0x356>
 8020f2e:	f1b8 0f00 	cmp.w	r8, #0
 8020f32:	d004      	beq.n	8020f3e <__gethex+0x2fe>
 8020f34:	4641      	mov	r1, r8
 8020f36:	4620      	mov	r0, r4
 8020f38:	f000 fe10 	bl	8021b5c <__any_on>
 8020f3c:	4683      	mov	fp, r0
 8020f3e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8020f42:	2301      	movs	r3, #1
 8020f44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8020f48:	f008 081f 	and.w	r8, r8, #31
 8020f4c:	fa03 f308 	lsl.w	r3, r3, r8
 8020f50:	4213      	tst	r3, r2
 8020f52:	4631      	mov	r1, r6
 8020f54:	4620      	mov	r0, r4
 8020f56:	bf18      	it	ne
 8020f58:	f04b 0b02 	orrne.w	fp, fp, #2
 8020f5c:	1bad      	subs	r5, r5, r6
 8020f5e:	f7ff fe07 	bl	8020b70 <rshift>
 8020f62:	687e      	ldr	r6, [r7, #4]
 8020f64:	f04f 0802 	mov.w	r8, #2
 8020f68:	f1bb 0f00 	cmp.w	fp, #0
 8020f6c:	d04a      	beq.n	8021004 <__gethex+0x3c4>
 8020f6e:	68fb      	ldr	r3, [r7, #12]
 8020f70:	2b02      	cmp	r3, #2
 8020f72:	d016      	beq.n	8020fa2 <__gethex+0x362>
 8020f74:	2b03      	cmp	r3, #3
 8020f76:	d018      	beq.n	8020faa <__gethex+0x36a>
 8020f78:	2b01      	cmp	r3, #1
 8020f7a:	d109      	bne.n	8020f90 <__gethex+0x350>
 8020f7c:	f01b 0f02 	tst.w	fp, #2
 8020f80:	d006      	beq.n	8020f90 <__gethex+0x350>
 8020f82:	f8da 3000 	ldr.w	r3, [sl]
 8020f86:	ea4b 0b03 	orr.w	fp, fp, r3
 8020f8a:	f01b 0f01 	tst.w	fp, #1
 8020f8e:	d10f      	bne.n	8020fb0 <__gethex+0x370>
 8020f90:	f048 0810 	orr.w	r8, r8, #16
 8020f94:	e036      	b.n	8021004 <__gethex+0x3c4>
 8020f96:	f04f 0b01 	mov.w	fp, #1
 8020f9a:	e7d0      	b.n	8020f3e <__gethex+0x2fe>
 8020f9c:	f04f 0801 	mov.w	r8, #1
 8020fa0:	e7e2      	b.n	8020f68 <__gethex+0x328>
 8020fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020fa4:	f1c3 0301 	rsb	r3, r3, #1
 8020fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8020faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	d0ef      	beq.n	8020f90 <__gethex+0x350>
 8020fb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020fb4:	f104 0214 	add.w	r2, r4, #20
 8020fb8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8020fbc:	9301      	str	r3, [sp, #4]
 8020fbe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	4694      	mov	ip, r2
 8020fc6:	f852 1b04 	ldr.w	r1, [r2], #4
 8020fca:	f1b1 3fff 	cmp.w	r1, #4294967295
 8020fce:	d01e      	beq.n	802100e <__gethex+0x3ce>
 8020fd0:	3101      	adds	r1, #1
 8020fd2:	f8cc 1000 	str.w	r1, [ip]
 8020fd6:	f1b8 0f02 	cmp.w	r8, #2
 8020fda:	f104 0214 	add.w	r2, r4, #20
 8020fde:	d13d      	bne.n	802105c <__gethex+0x41c>
 8020fe0:	683b      	ldr	r3, [r7, #0]
 8020fe2:	3b01      	subs	r3, #1
 8020fe4:	42ab      	cmp	r3, r5
 8020fe6:	d10b      	bne.n	8021000 <__gethex+0x3c0>
 8020fe8:	1169      	asrs	r1, r5, #5
 8020fea:	2301      	movs	r3, #1
 8020fec:	f005 051f 	and.w	r5, r5, #31
 8020ff0:	fa03 f505 	lsl.w	r5, r3, r5
 8020ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020ff8:	421d      	tst	r5, r3
 8020ffa:	bf18      	it	ne
 8020ffc:	f04f 0801 	movne.w	r8, #1
 8021000:	f048 0820 	orr.w	r8, r8, #32
 8021004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021006:	601c      	str	r4, [r3, #0]
 8021008:	9b02      	ldr	r3, [sp, #8]
 802100a:	601e      	str	r6, [r3, #0]
 802100c:	e6a2      	b.n	8020d54 <__gethex+0x114>
 802100e:	4290      	cmp	r0, r2
 8021010:	f842 3c04 	str.w	r3, [r2, #-4]
 8021014:	d8d6      	bhi.n	8020fc4 <__gethex+0x384>
 8021016:	68a2      	ldr	r2, [r4, #8]
 8021018:	4593      	cmp	fp, r2
 802101a:	db17      	blt.n	802104c <__gethex+0x40c>
 802101c:	6861      	ldr	r1, [r4, #4]
 802101e:	4648      	mov	r0, r9
 8021020:	3101      	adds	r1, #1
 8021022:	f000 f90f 	bl	8021244 <_Balloc>
 8021026:	4682      	mov	sl, r0
 8021028:	b918      	cbnz	r0, 8021032 <__gethex+0x3f2>
 802102a:	4b1b      	ldr	r3, [pc, #108]	; (8021098 <__gethex+0x458>)
 802102c:	4602      	mov	r2, r0
 802102e:	2184      	movs	r1, #132	; 0x84
 8021030:	e6b3      	b.n	8020d9a <__gethex+0x15a>
 8021032:	6922      	ldr	r2, [r4, #16]
 8021034:	3202      	adds	r2, #2
 8021036:	f104 010c 	add.w	r1, r4, #12
 802103a:	0092      	lsls	r2, r2, #2
 802103c:	300c      	adds	r0, #12
 802103e:	f7ff fd35 	bl	8020aac <memcpy>
 8021042:	4621      	mov	r1, r4
 8021044:	4648      	mov	r0, r9
 8021046:	f000 f93d 	bl	80212c4 <_Bfree>
 802104a:	4654      	mov	r4, sl
 802104c:	6922      	ldr	r2, [r4, #16]
 802104e:	1c51      	adds	r1, r2, #1
 8021050:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021054:	6121      	str	r1, [r4, #16]
 8021056:	2101      	movs	r1, #1
 8021058:	6151      	str	r1, [r2, #20]
 802105a:	e7bc      	b.n	8020fd6 <__gethex+0x396>
 802105c:	6921      	ldr	r1, [r4, #16]
 802105e:	4559      	cmp	r1, fp
 8021060:	dd0b      	ble.n	802107a <__gethex+0x43a>
 8021062:	2101      	movs	r1, #1
 8021064:	4620      	mov	r0, r4
 8021066:	f7ff fd83 	bl	8020b70 <rshift>
 802106a:	68bb      	ldr	r3, [r7, #8]
 802106c:	3601      	adds	r6, #1
 802106e:	42b3      	cmp	r3, r6
 8021070:	f6ff aedb 	blt.w	8020e2a <__gethex+0x1ea>
 8021074:	f04f 0801 	mov.w	r8, #1
 8021078:	e7c2      	b.n	8021000 <__gethex+0x3c0>
 802107a:	f015 051f 	ands.w	r5, r5, #31
 802107e:	d0f9      	beq.n	8021074 <__gethex+0x434>
 8021080:	9b01      	ldr	r3, [sp, #4]
 8021082:	441a      	add	r2, r3
 8021084:	f1c5 0520 	rsb	r5, r5, #32
 8021088:	f852 0c04 	ldr.w	r0, [r2, #-4]
 802108c:	f000 f9cc 	bl	8021428 <__hi0bits>
 8021090:	42a8      	cmp	r0, r5
 8021092:	dbe6      	blt.n	8021062 <__gethex+0x422>
 8021094:	e7ee      	b.n	8021074 <__gethex+0x434>
 8021096:	bf00      	nop
 8021098:	080238d9 	.word	0x080238d9

0802109c <L_shift>:
 802109c:	f1c2 0208 	rsb	r2, r2, #8
 80210a0:	0092      	lsls	r2, r2, #2
 80210a2:	b570      	push	{r4, r5, r6, lr}
 80210a4:	f1c2 0620 	rsb	r6, r2, #32
 80210a8:	6843      	ldr	r3, [r0, #4]
 80210aa:	6804      	ldr	r4, [r0, #0]
 80210ac:	fa03 f506 	lsl.w	r5, r3, r6
 80210b0:	432c      	orrs	r4, r5
 80210b2:	40d3      	lsrs	r3, r2
 80210b4:	6004      	str	r4, [r0, #0]
 80210b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80210ba:	4288      	cmp	r0, r1
 80210bc:	d3f4      	bcc.n	80210a8 <L_shift+0xc>
 80210be:	bd70      	pop	{r4, r5, r6, pc}

080210c0 <__match>:
 80210c0:	b530      	push	{r4, r5, lr}
 80210c2:	6803      	ldr	r3, [r0, #0]
 80210c4:	3301      	adds	r3, #1
 80210c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80210ca:	b914      	cbnz	r4, 80210d2 <__match+0x12>
 80210cc:	6003      	str	r3, [r0, #0]
 80210ce:	2001      	movs	r0, #1
 80210d0:	bd30      	pop	{r4, r5, pc}
 80210d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80210d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80210da:	2d19      	cmp	r5, #25
 80210dc:	bf98      	it	ls
 80210de:	3220      	addls	r2, #32
 80210e0:	42a2      	cmp	r2, r4
 80210e2:	d0f0      	beq.n	80210c6 <__match+0x6>
 80210e4:	2000      	movs	r0, #0
 80210e6:	e7f3      	b.n	80210d0 <__match+0x10>

080210e8 <__hexnan>:
 80210e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210ec:	680b      	ldr	r3, [r1, #0]
 80210ee:	6801      	ldr	r1, [r0, #0]
 80210f0:	115e      	asrs	r6, r3, #5
 80210f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80210f6:	f013 031f 	ands.w	r3, r3, #31
 80210fa:	b087      	sub	sp, #28
 80210fc:	bf18      	it	ne
 80210fe:	3604      	addne	r6, #4
 8021100:	2500      	movs	r5, #0
 8021102:	1f37      	subs	r7, r6, #4
 8021104:	4682      	mov	sl, r0
 8021106:	4690      	mov	r8, r2
 8021108:	9301      	str	r3, [sp, #4]
 802110a:	f846 5c04 	str.w	r5, [r6, #-4]
 802110e:	46b9      	mov	r9, r7
 8021110:	463c      	mov	r4, r7
 8021112:	9502      	str	r5, [sp, #8]
 8021114:	46ab      	mov	fp, r5
 8021116:	784a      	ldrb	r2, [r1, #1]
 8021118:	1c4b      	adds	r3, r1, #1
 802111a:	9303      	str	r3, [sp, #12]
 802111c:	b342      	cbz	r2, 8021170 <__hexnan+0x88>
 802111e:	4610      	mov	r0, r2
 8021120:	9105      	str	r1, [sp, #20]
 8021122:	9204      	str	r2, [sp, #16]
 8021124:	f7ff fd76 	bl	8020c14 <__hexdig_fun>
 8021128:	2800      	cmp	r0, #0
 802112a:	d14f      	bne.n	80211cc <__hexnan+0xe4>
 802112c:	9a04      	ldr	r2, [sp, #16]
 802112e:	9905      	ldr	r1, [sp, #20]
 8021130:	2a20      	cmp	r2, #32
 8021132:	d818      	bhi.n	8021166 <__hexnan+0x7e>
 8021134:	9b02      	ldr	r3, [sp, #8]
 8021136:	459b      	cmp	fp, r3
 8021138:	dd13      	ble.n	8021162 <__hexnan+0x7a>
 802113a:	454c      	cmp	r4, r9
 802113c:	d206      	bcs.n	802114c <__hexnan+0x64>
 802113e:	2d07      	cmp	r5, #7
 8021140:	dc04      	bgt.n	802114c <__hexnan+0x64>
 8021142:	462a      	mov	r2, r5
 8021144:	4649      	mov	r1, r9
 8021146:	4620      	mov	r0, r4
 8021148:	f7ff ffa8 	bl	802109c <L_shift>
 802114c:	4544      	cmp	r4, r8
 802114e:	d950      	bls.n	80211f2 <__hexnan+0x10a>
 8021150:	2300      	movs	r3, #0
 8021152:	f1a4 0904 	sub.w	r9, r4, #4
 8021156:	f844 3c04 	str.w	r3, [r4, #-4]
 802115a:	f8cd b008 	str.w	fp, [sp, #8]
 802115e:	464c      	mov	r4, r9
 8021160:	461d      	mov	r5, r3
 8021162:	9903      	ldr	r1, [sp, #12]
 8021164:	e7d7      	b.n	8021116 <__hexnan+0x2e>
 8021166:	2a29      	cmp	r2, #41	; 0x29
 8021168:	d155      	bne.n	8021216 <__hexnan+0x12e>
 802116a:	3102      	adds	r1, #2
 802116c:	f8ca 1000 	str.w	r1, [sl]
 8021170:	f1bb 0f00 	cmp.w	fp, #0
 8021174:	d04f      	beq.n	8021216 <__hexnan+0x12e>
 8021176:	454c      	cmp	r4, r9
 8021178:	d206      	bcs.n	8021188 <__hexnan+0xa0>
 802117a:	2d07      	cmp	r5, #7
 802117c:	dc04      	bgt.n	8021188 <__hexnan+0xa0>
 802117e:	462a      	mov	r2, r5
 8021180:	4649      	mov	r1, r9
 8021182:	4620      	mov	r0, r4
 8021184:	f7ff ff8a 	bl	802109c <L_shift>
 8021188:	4544      	cmp	r4, r8
 802118a:	d934      	bls.n	80211f6 <__hexnan+0x10e>
 802118c:	f1a8 0204 	sub.w	r2, r8, #4
 8021190:	4623      	mov	r3, r4
 8021192:	f853 1b04 	ldr.w	r1, [r3], #4
 8021196:	f842 1f04 	str.w	r1, [r2, #4]!
 802119a:	429f      	cmp	r7, r3
 802119c:	d2f9      	bcs.n	8021192 <__hexnan+0xaa>
 802119e:	1b3b      	subs	r3, r7, r4
 80211a0:	f023 0303 	bic.w	r3, r3, #3
 80211a4:	3304      	adds	r3, #4
 80211a6:	3e03      	subs	r6, #3
 80211a8:	3401      	adds	r4, #1
 80211aa:	42a6      	cmp	r6, r4
 80211ac:	bf38      	it	cc
 80211ae:	2304      	movcc	r3, #4
 80211b0:	4443      	add	r3, r8
 80211b2:	2200      	movs	r2, #0
 80211b4:	f843 2b04 	str.w	r2, [r3], #4
 80211b8:	429f      	cmp	r7, r3
 80211ba:	d2fb      	bcs.n	80211b4 <__hexnan+0xcc>
 80211bc:	683b      	ldr	r3, [r7, #0]
 80211be:	b91b      	cbnz	r3, 80211c8 <__hexnan+0xe0>
 80211c0:	4547      	cmp	r7, r8
 80211c2:	d126      	bne.n	8021212 <__hexnan+0x12a>
 80211c4:	2301      	movs	r3, #1
 80211c6:	603b      	str	r3, [r7, #0]
 80211c8:	2005      	movs	r0, #5
 80211ca:	e025      	b.n	8021218 <__hexnan+0x130>
 80211cc:	3501      	adds	r5, #1
 80211ce:	2d08      	cmp	r5, #8
 80211d0:	f10b 0b01 	add.w	fp, fp, #1
 80211d4:	dd06      	ble.n	80211e4 <__hexnan+0xfc>
 80211d6:	4544      	cmp	r4, r8
 80211d8:	d9c3      	bls.n	8021162 <__hexnan+0x7a>
 80211da:	2300      	movs	r3, #0
 80211dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80211e0:	2501      	movs	r5, #1
 80211e2:	3c04      	subs	r4, #4
 80211e4:	6822      	ldr	r2, [r4, #0]
 80211e6:	f000 000f 	and.w	r0, r0, #15
 80211ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80211ee:	6020      	str	r0, [r4, #0]
 80211f0:	e7b7      	b.n	8021162 <__hexnan+0x7a>
 80211f2:	2508      	movs	r5, #8
 80211f4:	e7b5      	b.n	8021162 <__hexnan+0x7a>
 80211f6:	9b01      	ldr	r3, [sp, #4]
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	d0df      	beq.n	80211bc <__hexnan+0xd4>
 80211fc:	f1c3 0320 	rsb	r3, r3, #32
 8021200:	f04f 32ff 	mov.w	r2, #4294967295
 8021204:	40da      	lsrs	r2, r3
 8021206:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802120a:	4013      	ands	r3, r2
 802120c:	f846 3c04 	str.w	r3, [r6, #-4]
 8021210:	e7d4      	b.n	80211bc <__hexnan+0xd4>
 8021212:	3f04      	subs	r7, #4
 8021214:	e7d2      	b.n	80211bc <__hexnan+0xd4>
 8021216:	2004      	movs	r0, #4
 8021218:	b007      	add	sp, #28
 802121a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802121e <__ascii_mbtowc>:
 802121e:	b082      	sub	sp, #8
 8021220:	b901      	cbnz	r1, 8021224 <__ascii_mbtowc+0x6>
 8021222:	a901      	add	r1, sp, #4
 8021224:	b142      	cbz	r2, 8021238 <__ascii_mbtowc+0x1a>
 8021226:	b14b      	cbz	r3, 802123c <__ascii_mbtowc+0x1e>
 8021228:	7813      	ldrb	r3, [r2, #0]
 802122a:	600b      	str	r3, [r1, #0]
 802122c:	7812      	ldrb	r2, [r2, #0]
 802122e:	1e10      	subs	r0, r2, #0
 8021230:	bf18      	it	ne
 8021232:	2001      	movne	r0, #1
 8021234:	b002      	add	sp, #8
 8021236:	4770      	bx	lr
 8021238:	4610      	mov	r0, r2
 802123a:	e7fb      	b.n	8021234 <__ascii_mbtowc+0x16>
 802123c:	f06f 0001 	mvn.w	r0, #1
 8021240:	e7f8      	b.n	8021234 <__ascii_mbtowc+0x16>
	...

08021244 <_Balloc>:
 8021244:	b570      	push	{r4, r5, r6, lr}
 8021246:	69c6      	ldr	r6, [r0, #28]
 8021248:	4604      	mov	r4, r0
 802124a:	460d      	mov	r5, r1
 802124c:	b976      	cbnz	r6, 802126c <_Balloc+0x28>
 802124e:	2010      	movs	r0, #16
 8021250:	f7fe fa4e 	bl	801f6f0 <malloc>
 8021254:	4602      	mov	r2, r0
 8021256:	61e0      	str	r0, [r4, #28]
 8021258:	b920      	cbnz	r0, 8021264 <_Balloc+0x20>
 802125a:	4b18      	ldr	r3, [pc, #96]	; (80212bc <_Balloc+0x78>)
 802125c:	4818      	ldr	r0, [pc, #96]	; (80212c0 <_Balloc+0x7c>)
 802125e:	216b      	movs	r1, #107	; 0x6b
 8021260:	f001 f862 	bl	8022328 <__assert_func>
 8021264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021268:	6006      	str	r6, [r0, #0]
 802126a:	60c6      	str	r6, [r0, #12]
 802126c:	69e6      	ldr	r6, [r4, #28]
 802126e:	68f3      	ldr	r3, [r6, #12]
 8021270:	b183      	cbz	r3, 8021294 <_Balloc+0x50>
 8021272:	69e3      	ldr	r3, [r4, #28]
 8021274:	68db      	ldr	r3, [r3, #12]
 8021276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802127a:	b9b8      	cbnz	r0, 80212ac <_Balloc+0x68>
 802127c:	2101      	movs	r1, #1
 802127e:	fa01 f605 	lsl.w	r6, r1, r5
 8021282:	1d72      	adds	r2, r6, #5
 8021284:	0092      	lsls	r2, r2, #2
 8021286:	4620      	mov	r0, r4
 8021288:	f7fe fa1c 	bl	801f6c4 <_calloc_r>
 802128c:	b160      	cbz	r0, 80212a8 <_Balloc+0x64>
 802128e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021292:	e00e      	b.n	80212b2 <_Balloc+0x6e>
 8021294:	2221      	movs	r2, #33	; 0x21
 8021296:	2104      	movs	r1, #4
 8021298:	4620      	mov	r0, r4
 802129a:	f7fe fa13 	bl	801f6c4 <_calloc_r>
 802129e:	69e3      	ldr	r3, [r4, #28]
 80212a0:	60f0      	str	r0, [r6, #12]
 80212a2:	68db      	ldr	r3, [r3, #12]
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	d1e4      	bne.n	8021272 <_Balloc+0x2e>
 80212a8:	2000      	movs	r0, #0
 80212aa:	bd70      	pop	{r4, r5, r6, pc}
 80212ac:	6802      	ldr	r2, [r0, #0]
 80212ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80212b2:	2300      	movs	r3, #0
 80212b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80212b8:	e7f7      	b.n	80212aa <_Balloc+0x66>
 80212ba:	bf00      	nop
 80212bc:	0802394a 	.word	0x0802394a
 80212c0:	08023961 	.word	0x08023961

080212c4 <_Bfree>:
 80212c4:	b570      	push	{r4, r5, r6, lr}
 80212c6:	69c6      	ldr	r6, [r0, #28]
 80212c8:	4605      	mov	r5, r0
 80212ca:	460c      	mov	r4, r1
 80212cc:	b976      	cbnz	r6, 80212ec <_Bfree+0x28>
 80212ce:	2010      	movs	r0, #16
 80212d0:	f7fe fa0e 	bl	801f6f0 <malloc>
 80212d4:	4602      	mov	r2, r0
 80212d6:	61e8      	str	r0, [r5, #28]
 80212d8:	b920      	cbnz	r0, 80212e4 <_Bfree+0x20>
 80212da:	4b09      	ldr	r3, [pc, #36]	; (8021300 <_Bfree+0x3c>)
 80212dc:	4809      	ldr	r0, [pc, #36]	; (8021304 <_Bfree+0x40>)
 80212de:	218f      	movs	r1, #143	; 0x8f
 80212e0:	f001 f822 	bl	8022328 <__assert_func>
 80212e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80212e8:	6006      	str	r6, [r0, #0]
 80212ea:	60c6      	str	r6, [r0, #12]
 80212ec:	b13c      	cbz	r4, 80212fe <_Bfree+0x3a>
 80212ee:	69eb      	ldr	r3, [r5, #28]
 80212f0:	6862      	ldr	r2, [r4, #4]
 80212f2:	68db      	ldr	r3, [r3, #12]
 80212f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80212f8:	6021      	str	r1, [r4, #0]
 80212fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80212fe:	bd70      	pop	{r4, r5, r6, pc}
 8021300:	0802394a 	.word	0x0802394a
 8021304:	08023961 	.word	0x08023961

08021308 <__multadd>:
 8021308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802130c:	690d      	ldr	r5, [r1, #16]
 802130e:	4607      	mov	r7, r0
 8021310:	460c      	mov	r4, r1
 8021312:	461e      	mov	r6, r3
 8021314:	f101 0c14 	add.w	ip, r1, #20
 8021318:	2000      	movs	r0, #0
 802131a:	f8dc 3000 	ldr.w	r3, [ip]
 802131e:	b299      	uxth	r1, r3
 8021320:	fb02 6101 	mla	r1, r2, r1, r6
 8021324:	0c1e      	lsrs	r6, r3, #16
 8021326:	0c0b      	lsrs	r3, r1, #16
 8021328:	fb02 3306 	mla	r3, r2, r6, r3
 802132c:	b289      	uxth	r1, r1
 802132e:	3001      	adds	r0, #1
 8021330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021334:	4285      	cmp	r5, r0
 8021336:	f84c 1b04 	str.w	r1, [ip], #4
 802133a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802133e:	dcec      	bgt.n	802131a <__multadd+0x12>
 8021340:	b30e      	cbz	r6, 8021386 <__multadd+0x7e>
 8021342:	68a3      	ldr	r3, [r4, #8]
 8021344:	42ab      	cmp	r3, r5
 8021346:	dc19      	bgt.n	802137c <__multadd+0x74>
 8021348:	6861      	ldr	r1, [r4, #4]
 802134a:	4638      	mov	r0, r7
 802134c:	3101      	adds	r1, #1
 802134e:	f7ff ff79 	bl	8021244 <_Balloc>
 8021352:	4680      	mov	r8, r0
 8021354:	b928      	cbnz	r0, 8021362 <__multadd+0x5a>
 8021356:	4602      	mov	r2, r0
 8021358:	4b0c      	ldr	r3, [pc, #48]	; (802138c <__multadd+0x84>)
 802135a:	480d      	ldr	r0, [pc, #52]	; (8021390 <__multadd+0x88>)
 802135c:	21ba      	movs	r1, #186	; 0xba
 802135e:	f000 ffe3 	bl	8022328 <__assert_func>
 8021362:	6922      	ldr	r2, [r4, #16]
 8021364:	3202      	adds	r2, #2
 8021366:	f104 010c 	add.w	r1, r4, #12
 802136a:	0092      	lsls	r2, r2, #2
 802136c:	300c      	adds	r0, #12
 802136e:	f7ff fb9d 	bl	8020aac <memcpy>
 8021372:	4621      	mov	r1, r4
 8021374:	4638      	mov	r0, r7
 8021376:	f7ff ffa5 	bl	80212c4 <_Bfree>
 802137a:	4644      	mov	r4, r8
 802137c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021380:	3501      	adds	r5, #1
 8021382:	615e      	str	r6, [r3, #20]
 8021384:	6125      	str	r5, [r4, #16]
 8021386:	4620      	mov	r0, r4
 8021388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802138c:	080238d9 	.word	0x080238d9
 8021390:	08023961 	.word	0x08023961

08021394 <__s2b>:
 8021394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021398:	460c      	mov	r4, r1
 802139a:	4615      	mov	r5, r2
 802139c:	461f      	mov	r7, r3
 802139e:	2209      	movs	r2, #9
 80213a0:	3308      	adds	r3, #8
 80213a2:	4606      	mov	r6, r0
 80213a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80213a8:	2100      	movs	r1, #0
 80213aa:	2201      	movs	r2, #1
 80213ac:	429a      	cmp	r2, r3
 80213ae:	db09      	blt.n	80213c4 <__s2b+0x30>
 80213b0:	4630      	mov	r0, r6
 80213b2:	f7ff ff47 	bl	8021244 <_Balloc>
 80213b6:	b940      	cbnz	r0, 80213ca <__s2b+0x36>
 80213b8:	4602      	mov	r2, r0
 80213ba:	4b19      	ldr	r3, [pc, #100]	; (8021420 <__s2b+0x8c>)
 80213bc:	4819      	ldr	r0, [pc, #100]	; (8021424 <__s2b+0x90>)
 80213be:	21d3      	movs	r1, #211	; 0xd3
 80213c0:	f000 ffb2 	bl	8022328 <__assert_func>
 80213c4:	0052      	lsls	r2, r2, #1
 80213c6:	3101      	adds	r1, #1
 80213c8:	e7f0      	b.n	80213ac <__s2b+0x18>
 80213ca:	9b08      	ldr	r3, [sp, #32]
 80213cc:	6143      	str	r3, [r0, #20]
 80213ce:	2d09      	cmp	r5, #9
 80213d0:	f04f 0301 	mov.w	r3, #1
 80213d4:	6103      	str	r3, [r0, #16]
 80213d6:	dd16      	ble.n	8021406 <__s2b+0x72>
 80213d8:	f104 0909 	add.w	r9, r4, #9
 80213dc:	46c8      	mov	r8, r9
 80213de:	442c      	add	r4, r5
 80213e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80213e4:	4601      	mov	r1, r0
 80213e6:	3b30      	subs	r3, #48	; 0x30
 80213e8:	220a      	movs	r2, #10
 80213ea:	4630      	mov	r0, r6
 80213ec:	f7ff ff8c 	bl	8021308 <__multadd>
 80213f0:	45a0      	cmp	r8, r4
 80213f2:	d1f5      	bne.n	80213e0 <__s2b+0x4c>
 80213f4:	f1a5 0408 	sub.w	r4, r5, #8
 80213f8:	444c      	add	r4, r9
 80213fa:	1b2d      	subs	r5, r5, r4
 80213fc:	1963      	adds	r3, r4, r5
 80213fe:	42bb      	cmp	r3, r7
 8021400:	db04      	blt.n	802140c <__s2b+0x78>
 8021402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021406:	340a      	adds	r4, #10
 8021408:	2509      	movs	r5, #9
 802140a:	e7f6      	b.n	80213fa <__s2b+0x66>
 802140c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021410:	4601      	mov	r1, r0
 8021412:	3b30      	subs	r3, #48	; 0x30
 8021414:	220a      	movs	r2, #10
 8021416:	4630      	mov	r0, r6
 8021418:	f7ff ff76 	bl	8021308 <__multadd>
 802141c:	e7ee      	b.n	80213fc <__s2b+0x68>
 802141e:	bf00      	nop
 8021420:	080238d9 	.word	0x080238d9
 8021424:	08023961 	.word	0x08023961

08021428 <__hi0bits>:
 8021428:	0c03      	lsrs	r3, r0, #16
 802142a:	041b      	lsls	r3, r3, #16
 802142c:	b9d3      	cbnz	r3, 8021464 <__hi0bits+0x3c>
 802142e:	0400      	lsls	r0, r0, #16
 8021430:	2310      	movs	r3, #16
 8021432:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021436:	bf04      	itt	eq
 8021438:	0200      	lsleq	r0, r0, #8
 802143a:	3308      	addeq	r3, #8
 802143c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021440:	bf04      	itt	eq
 8021442:	0100      	lsleq	r0, r0, #4
 8021444:	3304      	addeq	r3, #4
 8021446:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802144a:	bf04      	itt	eq
 802144c:	0080      	lsleq	r0, r0, #2
 802144e:	3302      	addeq	r3, #2
 8021450:	2800      	cmp	r0, #0
 8021452:	db05      	blt.n	8021460 <__hi0bits+0x38>
 8021454:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021458:	f103 0301 	add.w	r3, r3, #1
 802145c:	bf08      	it	eq
 802145e:	2320      	moveq	r3, #32
 8021460:	4618      	mov	r0, r3
 8021462:	4770      	bx	lr
 8021464:	2300      	movs	r3, #0
 8021466:	e7e4      	b.n	8021432 <__hi0bits+0xa>

08021468 <__lo0bits>:
 8021468:	6803      	ldr	r3, [r0, #0]
 802146a:	f013 0207 	ands.w	r2, r3, #7
 802146e:	d00c      	beq.n	802148a <__lo0bits+0x22>
 8021470:	07d9      	lsls	r1, r3, #31
 8021472:	d422      	bmi.n	80214ba <__lo0bits+0x52>
 8021474:	079a      	lsls	r2, r3, #30
 8021476:	bf49      	itett	mi
 8021478:	085b      	lsrmi	r3, r3, #1
 802147a:	089b      	lsrpl	r3, r3, #2
 802147c:	6003      	strmi	r3, [r0, #0]
 802147e:	2201      	movmi	r2, #1
 8021480:	bf5c      	itt	pl
 8021482:	6003      	strpl	r3, [r0, #0]
 8021484:	2202      	movpl	r2, #2
 8021486:	4610      	mov	r0, r2
 8021488:	4770      	bx	lr
 802148a:	b299      	uxth	r1, r3
 802148c:	b909      	cbnz	r1, 8021492 <__lo0bits+0x2a>
 802148e:	0c1b      	lsrs	r3, r3, #16
 8021490:	2210      	movs	r2, #16
 8021492:	b2d9      	uxtb	r1, r3
 8021494:	b909      	cbnz	r1, 802149a <__lo0bits+0x32>
 8021496:	3208      	adds	r2, #8
 8021498:	0a1b      	lsrs	r3, r3, #8
 802149a:	0719      	lsls	r1, r3, #28
 802149c:	bf04      	itt	eq
 802149e:	091b      	lsreq	r3, r3, #4
 80214a0:	3204      	addeq	r2, #4
 80214a2:	0799      	lsls	r1, r3, #30
 80214a4:	bf04      	itt	eq
 80214a6:	089b      	lsreq	r3, r3, #2
 80214a8:	3202      	addeq	r2, #2
 80214aa:	07d9      	lsls	r1, r3, #31
 80214ac:	d403      	bmi.n	80214b6 <__lo0bits+0x4e>
 80214ae:	085b      	lsrs	r3, r3, #1
 80214b0:	f102 0201 	add.w	r2, r2, #1
 80214b4:	d003      	beq.n	80214be <__lo0bits+0x56>
 80214b6:	6003      	str	r3, [r0, #0]
 80214b8:	e7e5      	b.n	8021486 <__lo0bits+0x1e>
 80214ba:	2200      	movs	r2, #0
 80214bc:	e7e3      	b.n	8021486 <__lo0bits+0x1e>
 80214be:	2220      	movs	r2, #32
 80214c0:	e7e1      	b.n	8021486 <__lo0bits+0x1e>
	...

080214c4 <__i2b>:
 80214c4:	b510      	push	{r4, lr}
 80214c6:	460c      	mov	r4, r1
 80214c8:	2101      	movs	r1, #1
 80214ca:	f7ff febb 	bl	8021244 <_Balloc>
 80214ce:	4602      	mov	r2, r0
 80214d0:	b928      	cbnz	r0, 80214de <__i2b+0x1a>
 80214d2:	4b05      	ldr	r3, [pc, #20]	; (80214e8 <__i2b+0x24>)
 80214d4:	4805      	ldr	r0, [pc, #20]	; (80214ec <__i2b+0x28>)
 80214d6:	f240 1145 	movw	r1, #325	; 0x145
 80214da:	f000 ff25 	bl	8022328 <__assert_func>
 80214de:	2301      	movs	r3, #1
 80214e0:	6144      	str	r4, [r0, #20]
 80214e2:	6103      	str	r3, [r0, #16]
 80214e4:	bd10      	pop	{r4, pc}
 80214e6:	bf00      	nop
 80214e8:	080238d9 	.word	0x080238d9
 80214ec:	08023961 	.word	0x08023961

080214f0 <__multiply>:
 80214f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214f4:	4691      	mov	r9, r2
 80214f6:	690a      	ldr	r2, [r1, #16]
 80214f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80214fc:	429a      	cmp	r2, r3
 80214fe:	bfb8      	it	lt
 8021500:	460b      	movlt	r3, r1
 8021502:	460c      	mov	r4, r1
 8021504:	bfbc      	itt	lt
 8021506:	464c      	movlt	r4, r9
 8021508:	4699      	movlt	r9, r3
 802150a:	6927      	ldr	r7, [r4, #16]
 802150c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021510:	68a3      	ldr	r3, [r4, #8]
 8021512:	6861      	ldr	r1, [r4, #4]
 8021514:	eb07 060a 	add.w	r6, r7, sl
 8021518:	42b3      	cmp	r3, r6
 802151a:	b085      	sub	sp, #20
 802151c:	bfb8      	it	lt
 802151e:	3101      	addlt	r1, #1
 8021520:	f7ff fe90 	bl	8021244 <_Balloc>
 8021524:	b930      	cbnz	r0, 8021534 <__multiply+0x44>
 8021526:	4602      	mov	r2, r0
 8021528:	4b44      	ldr	r3, [pc, #272]	; (802163c <__multiply+0x14c>)
 802152a:	4845      	ldr	r0, [pc, #276]	; (8021640 <__multiply+0x150>)
 802152c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8021530:	f000 fefa 	bl	8022328 <__assert_func>
 8021534:	f100 0514 	add.w	r5, r0, #20
 8021538:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802153c:	462b      	mov	r3, r5
 802153e:	2200      	movs	r2, #0
 8021540:	4543      	cmp	r3, r8
 8021542:	d321      	bcc.n	8021588 <__multiply+0x98>
 8021544:	f104 0314 	add.w	r3, r4, #20
 8021548:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802154c:	f109 0314 	add.w	r3, r9, #20
 8021550:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021554:	9202      	str	r2, [sp, #8]
 8021556:	1b3a      	subs	r2, r7, r4
 8021558:	3a15      	subs	r2, #21
 802155a:	f022 0203 	bic.w	r2, r2, #3
 802155e:	3204      	adds	r2, #4
 8021560:	f104 0115 	add.w	r1, r4, #21
 8021564:	428f      	cmp	r7, r1
 8021566:	bf38      	it	cc
 8021568:	2204      	movcc	r2, #4
 802156a:	9201      	str	r2, [sp, #4]
 802156c:	9a02      	ldr	r2, [sp, #8]
 802156e:	9303      	str	r3, [sp, #12]
 8021570:	429a      	cmp	r2, r3
 8021572:	d80c      	bhi.n	802158e <__multiply+0x9e>
 8021574:	2e00      	cmp	r6, #0
 8021576:	dd03      	ble.n	8021580 <__multiply+0x90>
 8021578:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802157c:	2b00      	cmp	r3, #0
 802157e:	d05b      	beq.n	8021638 <__multiply+0x148>
 8021580:	6106      	str	r6, [r0, #16]
 8021582:	b005      	add	sp, #20
 8021584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021588:	f843 2b04 	str.w	r2, [r3], #4
 802158c:	e7d8      	b.n	8021540 <__multiply+0x50>
 802158e:	f8b3 a000 	ldrh.w	sl, [r3]
 8021592:	f1ba 0f00 	cmp.w	sl, #0
 8021596:	d024      	beq.n	80215e2 <__multiply+0xf2>
 8021598:	f104 0e14 	add.w	lr, r4, #20
 802159c:	46a9      	mov	r9, r5
 802159e:	f04f 0c00 	mov.w	ip, #0
 80215a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80215a6:	f8d9 1000 	ldr.w	r1, [r9]
 80215aa:	fa1f fb82 	uxth.w	fp, r2
 80215ae:	b289      	uxth	r1, r1
 80215b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80215b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80215b8:	f8d9 2000 	ldr.w	r2, [r9]
 80215bc:	4461      	add	r1, ip
 80215be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80215c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80215c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80215ca:	b289      	uxth	r1, r1
 80215cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80215d0:	4577      	cmp	r7, lr
 80215d2:	f849 1b04 	str.w	r1, [r9], #4
 80215d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80215da:	d8e2      	bhi.n	80215a2 <__multiply+0xb2>
 80215dc:	9a01      	ldr	r2, [sp, #4]
 80215de:	f845 c002 	str.w	ip, [r5, r2]
 80215e2:	9a03      	ldr	r2, [sp, #12]
 80215e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80215e8:	3304      	adds	r3, #4
 80215ea:	f1b9 0f00 	cmp.w	r9, #0
 80215ee:	d021      	beq.n	8021634 <__multiply+0x144>
 80215f0:	6829      	ldr	r1, [r5, #0]
 80215f2:	f104 0c14 	add.w	ip, r4, #20
 80215f6:	46ae      	mov	lr, r5
 80215f8:	f04f 0a00 	mov.w	sl, #0
 80215fc:	f8bc b000 	ldrh.w	fp, [ip]
 8021600:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021604:	fb09 220b 	mla	r2, r9, fp, r2
 8021608:	4452      	add	r2, sl
 802160a:	b289      	uxth	r1, r1
 802160c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021610:	f84e 1b04 	str.w	r1, [lr], #4
 8021614:	f85c 1b04 	ldr.w	r1, [ip], #4
 8021618:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802161c:	f8be 1000 	ldrh.w	r1, [lr]
 8021620:	fb09 110a 	mla	r1, r9, sl, r1
 8021624:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8021628:	4567      	cmp	r7, ip
 802162a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802162e:	d8e5      	bhi.n	80215fc <__multiply+0x10c>
 8021630:	9a01      	ldr	r2, [sp, #4]
 8021632:	50a9      	str	r1, [r5, r2]
 8021634:	3504      	adds	r5, #4
 8021636:	e799      	b.n	802156c <__multiply+0x7c>
 8021638:	3e01      	subs	r6, #1
 802163a:	e79b      	b.n	8021574 <__multiply+0x84>
 802163c:	080238d9 	.word	0x080238d9
 8021640:	08023961 	.word	0x08023961

08021644 <__pow5mult>:
 8021644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021648:	4615      	mov	r5, r2
 802164a:	f012 0203 	ands.w	r2, r2, #3
 802164e:	4606      	mov	r6, r0
 8021650:	460f      	mov	r7, r1
 8021652:	d007      	beq.n	8021664 <__pow5mult+0x20>
 8021654:	4c25      	ldr	r4, [pc, #148]	; (80216ec <__pow5mult+0xa8>)
 8021656:	3a01      	subs	r2, #1
 8021658:	2300      	movs	r3, #0
 802165a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802165e:	f7ff fe53 	bl	8021308 <__multadd>
 8021662:	4607      	mov	r7, r0
 8021664:	10ad      	asrs	r5, r5, #2
 8021666:	d03d      	beq.n	80216e4 <__pow5mult+0xa0>
 8021668:	69f4      	ldr	r4, [r6, #28]
 802166a:	b97c      	cbnz	r4, 802168c <__pow5mult+0x48>
 802166c:	2010      	movs	r0, #16
 802166e:	f7fe f83f 	bl	801f6f0 <malloc>
 8021672:	4602      	mov	r2, r0
 8021674:	61f0      	str	r0, [r6, #28]
 8021676:	b928      	cbnz	r0, 8021684 <__pow5mult+0x40>
 8021678:	4b1d      	ldr	r3, [pc, #116]	; (80216f0 <__pow5mult+0xac>)
 802167a:	481e      	ldr	r0, [pc, #120]	; (80216f4 <__pow5mult+0xb0>)
 802167c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8021680:	f000 fe52 	bl	8022328 <__assert_func>
 8021684:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021688:	6004      	str	r4, [r0, #0]
 802168a:	60c4      	str	r4, [r0, #12]
 802168c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8021690:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021694:	b94c      	cbnz	r4, 80216aa <__pow5mult+0x66>
 8021696:	f240 2171 	movw	r1, #625	; 0x271
 802169a:	4630      	mov	r0, r6
 802169c:	f7ff ff12 	bl	80214c4 <__i2b>
 80216a0:	2300      	movs	r3, #0
 80216a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80216a6:	4604      	mov	r4, r0
 80216a8:	6003      	str	r3, [r0, #0]
 80216aa:	f04f 0900 	mov.w	r9, #0
 80216ae:	07eb      	lsls	r3, r5, #31
 80216b0:	d50a      	bpl.n	80216c8 <__pow5mult+0x84>
 80216b2:	4639      	mov	r1, r7
 80216b4:	4622      	mov	r2, r4
 80216b6:	4630      	mov	r0, r6
 80216b8:	f7ff ff1a 	bl	80214f0 <__multiply>
 80216bc:	4639      	mov	r1, r7
 80216be:	4680      	mov	r8, r0
 80216c0:	4630      	mov	r0, r6
 80216c2:	f7ff fdff 	bl	80212c4 <_Bfree>
 80216c6:	4647      	mov	r7, r8
 80216c8:	106d      	asrs	r5, r5, #1
 80216ca:	d00b      	beq.n	80216e4 <__pow5mult+0xa0>
 80216cc:	6820      	ldr	r0, [r4, #0]
 80216ce:	b938      	cbnz	r0, 80216e0 <__pow5mult+0x9c>
 80216d0:	4622      	mov	r2, r4
 80216d2:	4621      	mov	r1, r4
 80216d4:	4630      	mov	r0, r6
 80216d6:	f7ff ff0b 	bl	80214f0 <__multiply>
 80216da:	6020      	str	r0, [r4, #0]
 80216dc:	f8c0 9000 	str.w	r9, [r0]
 80216e0:	4604      	mov	r4, r0
 80216e2:	e7e4      	b.n	80216ae <__pow5mult+0x6a>
 80216e4:	4638      	mov	r0, r7
 80216e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80216ea:	bf00      	nop
 80216ec:	08023ab0 	.word	0x08023ab0
 80216f0:	0802394a 	.word	0x0802394a
 80216f4:	08023961 	.word	0x08023961

080216f8 <__lshift>:
 80216f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80216fc:	460c      	mov	r4, r1
 80216fe:	6849      	ldr	r1, [r1, #4]
 8021700:	6923      	ldr	r3, [r4, #16]
 8021702:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021706:	68a3      	ldr	r3, [r4, #8]
 8021708:	4607      	mov	r7, r0
 802170a:	4691      	mov	r9, r2
 802170c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021710:	f108 0601 	add.w	r6, r8, #1
 8021714:	42b3      	cmp	r3, r6
 8021716:	db0b      	blt.n	8021730 <__lshift+0x38>
 8021718:	4638      	mov	r0, r7
 802171a:	f7ff fd93 	bl	8021244 <_Balloc>
 802171e:	4605      	mov	r5, r0
 8021720:	b948      	cbnz	r0, 8021736 <__lshift+0x3e>
 8021722:	4602      	mov	r2, r0
 8021724:	4b28      	ldr	r3, [pc, #160]	; (80217c8 <__lshift+0xd0>)
 8021726:	4829      	ldr	r0, [pc, #164]	; (80217cc <__lshift+0xd4>)
 8021728:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802172c:	f000 fdfc 	bl	8022328 <__assert_func>
 8021730:	3101      	adds	r1, #1
 8021732:	005b      	lsls	r3, r3, #1
 8021734:	e7ee      	b.n	8021714 <__lshift+0x1c>
 8021736:	2300      	movs	r3, #0
 8021738:	f100 0114 	add.w	r1, r0, #20
 802173c:	f100 0210 	add.w	r2, r0, #16
 8021740:	4618      	mov	r0, r3
 8021742:	4553      	cmp	r3, sl
 8021744:	db33      	blt.n	80217ae <__lshift+0xb6>
 8021746:	6920      	ldr	r0, [r4, #16]
 8021748:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802174c:	f104 0314 	add.w	r3, r4, #20
 8021750:	f019 091f 	ands.w	r9, r9, #31
 8021754:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021758:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802175c:	d02b      	beq.n	80217b6 <__lshift+0xbe>
 802175e:	f1c9 0e20 	rsb	lr, r9, #32
 8021762:	468a      	mov	sl, r1
 8021764:	2200      	movs	r2, #0
 8021766:	6818      	ldr	r0, [r3, #0]
 8021768:	fa00 f009 	lsl.w	r0, r0, r9
 802176c:	4310      	orrs	r0, r2
 802176e:	f84a 0b04 	str.w	r0, [sl], #4
 8021772:	f853 2b04 	ldr.w	r2, [r3], #4
 8021776:	459c      	cmp	ip, r3
 8021778:	fa22 f20e 	lsr.w	r2, r2, lr
 802177c:	d8f3      	bhi.n	8021766 <__lshift+0x6e>
 802177e:	ebac 0304 	sub.w	r3, ip, r4
 8021782:	3b15      	subs	r3, #21
 8021784:	f023 0303 	bic.w	r3, r3, #3
 8021788:	3304      	adds	r3, #4
 802178a:	f104 0015 	add.w	r0, r4, #21
 802178e:	4584      	cmp	ip, r0
 8021790:	bf38      	it	cc
 8021792:	2304      	movcc	r3, #4
 8021794:	50ca      	str	r2, [r1, r3]
 8021796:	b10a      	cbz	r2, 802179c <__lshift+0xa4>
 8021798:	f108 0602 	add.w	r6, r8, #2
 802179c:	3e01      	subs	r6, #1
 802179e:	4638      	mov	r0, r7
 80217a0:	612e      	str	r6, [r5, #16]
 80217a2:	4621      	mov	r1, r4
 80217a4:	f7ff fd8e 	bl	80212c4 <_Bfree>
 80217a8:	4628      	mov	r0, r5
 80217aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80217ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80217b2:	3301      	adds	r3, #1
 80217b4:	e7c5      	b.n	8021742 <__lshift+0x4a>
 80217b6:	3904      	subs	r1, #4
 80217b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80217bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80217c0:	459c      	cmp	ip, r3
 80217c2:	d8f9      	bhi.n	80217b8 <__lshift+0xc0>
 80217c4:	e7ea      	b.n	802179c <__lshift+0xa4>
 80217c6:	bf00      	nop
 80217c8:	080238d9 	.word	0x080238d9
 80217cc:	08023961 	.word	0x08023961

080217d0 <__mcmp>:
 80217d0:	b530      	push	{r4, r5, lr}
 80217d2:	6902      	ldr	r2, [r0, #16]
 80217d4:	690c      	ldr	r4, [r1, #16]
 80217d6:	1b12      	subs	r2, r2, r4
 80217d8:	d10e      	bne.n	80217f8 <__mcmp+0x28>
 80217da:	f100 0314 	add.w	r3, r0, #20
 80217de:	3114      	adds	r1, #20
 80217e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80217e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80217e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80217ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80217f0:	42a5      	cmp	r5, r4
 80217f2:	d003      	beq.n	80217fc <__mcmp+0x2c>
 80217f4:	d305      	bcc.n	8021802 <__mcmp+0x32>
 80217f6:	2201      	movs	r2, #1
 80217f8:	4610      	mov	r0, r2
 80217fa:	bd30      	pop	{r4, r5, pc}
 80217fc:	4283      	cmp	r3, r0
 80217fe:	d3f3      	bcc.n	80217e8 <__mcmp+0x18>
 8021800:	e7fa      	b.n	80217f8 <__mcmp+0x28>
 8021802:	f04f 32ff 	mov.w	r2, #4294967295
 8021806:	e7f7      	b.n	80217f8 <__mcmp+0x28>

08021808 <__mdiff>:
 8021808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802180c:	460c      	mov	r4, r1
 802180e:	4606      	mov	r6, r0
 8021810:	4611      	mov	r1, r2
 8021812:	4620      	mov	r0, r4
 8021814:	4690      	mov	r8, r2
 8021816:	f7ff ffdb 	bl	80217d0 <__mcmp>
 802181a:	1e05      	subs	r5, r0, #0
 802181c:	d110      	bne.n	8021840 <__mdiff+0x38>
 802181e:	4629      	mov	r1, r5
 8021820:	4630      	mov	r0, r6
 8021822:	f7ff fd0f 	bl	8021244 <_Balloc>
 8021826:	b930      	cbnz	r0, 8021836 <__mdiff+0x2e>
 8021828:	4b3a      	ldr	r3, [pc, #232]	; (8021914 <__mdiff+0x10c>)
 802182a:	4602      	mov	r2, r0
 802182c:	f240 2137 	movw	r1, #567	; 0x237
 8021830:	4839      	ldr	r0, [pc, #228]	; (8021918 <__mdiff+0x110>)
 8021832:	f000 fd79 	bl	8022328 <__assert_func>
 8021836:	2301      	movs	r3, #1
 8021838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802183c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021840:	bfa4      	itt	ge
 8021842:	4643      	movge	r3, r8
 8021844:	46a0      	movge	r8, r4
 8021846:	4630      	mov	r0, r6
 8021848:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802184c:	bfa6      	itte	ge
 802184e:	461c      	movge	r4, r3
 8021850:	2500      	movge	r5, #0
 8021852:	2501      	movlt	r5, #1
 8021854:	f7ff fcf6 	bl	8021244 <_Balloc>
 8021858:	b920      	cbnz	r0, 8021864 <__mdiff+0x5c>
 802185a:	4b2e      	ldr	r3, [pc, #184]	; (8021914 <__mdiff+0x10c>)
 802185c:	4602      	mov	r2, r0
 802185e:	f240 2145 	movw	r1, #581	; 0x245
 8021862:	e7e5      	b.n	8021830 <__mdiff+0x28>
 8021864:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021868:	6926      	ldr	r6, [r4, #16]
 802186a:	60c5      	str	r5, [r0, #12]
 802186c:	f104 0914 	add.w	r9, r4, #20
 8021870:	f108 0514 	add.w	r5, r8, #20
 8021874:	f100 0e14 	add.w	lr, r0, #20
 8021878:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802187c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021880:	f108 0210 	add.w	r2, r8, #16
 8021884:	46f2      	mov	sl, lr
 8021886:	2100      	movs	r1, #0
 8021888:	f859 3b04 	ldr.w	r3, [r9], #4
 802188c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021890:	fa11 f88b 	uxtah	r8, r1, fp
 8021894:	b299      	uxth	r1, r3
 8021896:	0c1b      	lsrs	r3, r3, #16
 8021898:	eba8 0801 	sub.w	r8, r8, r1
 802189c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80218a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80218a4:	fa1f f888 	uxth.w	r8, r8
 80218a8:	1419      	asrs	r1, r3, #16
 80218aa:	454e      	cmp	r6, r9
 80218ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80218b0:	f84a 3b04 	str.w	r3, [sl], #4
 80218b4:	d8e8      	bhi.n	8021888 <__mdiff+0x80>
 80218b6:	1b33      	subs	r3, r6, r4
 80218b8:	3b15      	subs	r3, #21
 80218ba:	f023 0303 	bic.w	r3, r3, #3
 80218be:	3304      	adds	r3, #4
 80218c0:	3415      	adds	r4, #21
 80218c2:	42a6      	cmp	r6, r4
 80218c4:	bf38      	it	cc
 80218c6:	2304      	movcc	r3, #4
 80218c8:	441d      	add	r5, r3
 80218ca:	4473      	add	r3, lr
 80218cc:	469e      	mov	lr, r3
 80218ce:	462e      	mov	r6, r5
 80218d0:	4566      	cmp	r6, ip
 80218d2:	d30e      	bcc.n	80218f2 <__mdiff+0xea>
 80218d4:	f10c 0203 	add.w	r2, ip, #3
 80218d8:	1b52      	subs	r2, r2, r5
 80218da:	f022 0203 	bic.w	r2, r2, #3
 80218de:	3d03      	subs	r5, #3
 80218e0:	45ac      	cmp	ip, r5
 80218e2:	bf38      	it	cc
 80218e4:	2200      	movcc	r2, #0
 80218e6:	4413      	add	r3, r2
 80218e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80218ec:	b17a      	cbz	r2, 802190e <__mdiff+0x106>
 80218ee:	6107      	str	r7, [r0, #16]
 80218f0:	e7a4      	b.n	802183c <__mdiff+0x34>
 80218f2:	f856 8b04 	ldr.w	r8, [r6], #4
 80218f6:	fa11 f288 	uxtah	r2, r1, r8
 80218fa:	1414      	asrs	r4, r2, #16
 80218fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8021900:	b292      	uxth	r2, r2
 8021902:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021906:	f84e 2b04 	str.w	r2, [lr], #4
 802190a:	1421      	asrs	r1, r4, #16
 802190c:	e7e0      	b.n	80218d0 <__mdiff+0xc8>
 802190e:	3f01      	subs	r7, #1
 8021910:	e7ea      	b.n	80218e8 <__mdiff+0xe0>
 8021912:	bf00      	nop
 8021914:	080238d9 	.word	0x080238d9
 8021918:	08023961 	.word	0x08023961

0802191c <__ulp>:
 802191c:	b082      	sub	sp, #8
 802191e:	ed8d 0b00 	vstr	d0, [sp]
 8021922:	9a01      	ldr	r2, [sp, #4]
 8021924:	4b0f      	ldr	r3, [pc, #60]	; (8021964 <__ulp+0x48>)
 8021926:	4013      	ands	r3, r2
 8021928:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 802192c:	2b00      	cmp	r3, #0
 802192e:	dc08      	bgt.n	8021942 <__ulp+0x26>
 8021930:	425b      	negs	r3, r3
 8021932:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8021936:	ea4f 5223 	mov.w	r2, r3, asr #20
 802193a:	da04      	bge.n	8021946 <__ulp+0x2a>
 802193c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8021940:	4113      	asrs	r3, r2
 8021942:	2200      	movs	r2, #0
 8021944:	e008      	b.n	8021958 <__ulp+0x3c>
 8021946:	f1a2 0314 	sub.w	r3, r2, #20
 802194a:	2b1e      	cmp	r3, #30
 802194c:	bfda      	itte	le
 802194e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8021952:	40da      	lsrle	r2, r3
 8021954:	2201      	movgt	r2, #1
 8021956:	2300      	movs	r3, #0
 8021958:	4619      	mov	r1, r3
 802195a:	4610      	mov	r0, r2
 802195c:	ec41 0b10 	vmov	d0, r0, r1
 8021960:	b002      	add	sp, #8
 8021962:	4770      	bx	lr
 8021964:	7ff00000 	.word	0x7ff00000

08021968 <__b2d>:
 8021968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802196c:	6906      	ldr	r6, [r0, #16]
 802196e:	f100 0814 	add.w	r8, r0, #20
 8021972:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8021976:	1f37      	subs	r7, r6, #4
 8021978:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802197c:	4610      	mov	r0, r2
 802197e:	f7ff fd53 	bl	8021428 <__hi0bits>
 8021982:	f1c0 0320 	rsb	r3, r0, #32
 8021986:	280a      	cmp	r0, #10
 8021988:	600b      	str	r3, [r1, #0]
 802198a:	491b      	ldr	r1, [pc, #108]	; (80219f8 <__b2d+0x90>)
 802198c:	dc15      	bgt.n	80219ba <__b2d+0x52>
 802198e:	f1c0 0c0b 	rsb	ip, r0, #11
 8021992:	fa22 f30c 	lsr.w	r3, r2, ip
 8021996:	45b8      	cmp	r8, r7
 8021998:	ea43 0501 	orr.w	r5, r3, r1
 802199c:	bf34      	ite	cc
 802199e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80219a2:	2300      	movcs	r3, #0
 80219a4:	3015      	adds	r0, #21
 80219a6:	fa02 f000 	lsl.w	r0, r2, r0
 80219aa:	fa23 f30c 	lsr.w	r3, r3, ip
 80219ae:	4303      	orrs	r3, r0
 80219b0:	461c      	mov	r4, r3
 80219b2:	ec45 4b10 	vmov	d0, r4, r5
 80219b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219ba:	45b8      	cmp	r8, r7
 80219bc:	bf3a      	itte	cc
 80219be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80219c2:	f1a6 0708 	subcc.w	r7, r6, #8
 80219c6:	2300      	movcs	r3, #0
 80219c8:	380b      	subs	r0, #11
 80219ca:	d012      	beq.n	80219f2 <__b2d+0x8a>
 80219cc:	f1c0 0120 	rsb	r1, r0, #32
 80219d0:	fa23 f401 	lsr.w	r4, r3, r1
 80219d4:	4082      	lsls	r2, r0
 80219d6:	4322      	orrs	r2, r4
 80219d8:	4547      	cmp	r7, r8
 80219da:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80219de:	bf8c      	ite	hi
 80219e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80219e4:	2200      	movls	r2, #0
 80219e6:	4083      	lsls	r3, r0
 80219e8:	40ca      	lsrs	r2, r1
 80219ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80219ee:	4313      	orrs	r3, r2
 80219f0:	e7de      	b.n	80219b0 <__b2d+0x48>
 80219f2:	ea42 0501 	orr.w	r5, r2, r1
 80219f6:	e7db      	b.n	80219b0 <__b2d+0x48>
 80219f8:	3ff00000 	.word	0x3ff00000

080219fc <__d2b>:
 80219fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021a00:	460f      	mov	r7, r1
 8021a02:	2101      	movs	r1, #1
 8021a04:	ec59 8b10 	vmov	r8, r9, d0
 8021a08:	4616      	mov	r6, r2
 8021a0a:	f7ff fc1b 	bl	8021244 <_Balloc>
 8021a0e:	4604      	mov	r4, r0
 8021a10:	b930      	cbnz	r0, 8021a20 <__d2b+0x24>
 8021a12:	4602      	mov	r2, r0
 8021a14:	4b24      	ldr	r3, [pc, #144]	; (8021aa8 <__d2b+0xac>)
 8021a16:	4825      	ldr	r0, [pc, #148]	; (8021aac <__d2b+0xb0>)
 8021a18:	f240 310f 	movw	r1, #783	; 0x30f
 8021a1c:	f000 fc84 	bl	8022328 <__assert_func>
 8021a20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8021a24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021a28:	bb2d      	cbnz	r5, 8021a76 <__d2b+0x7a>
 8021a2a:	9301      	str	r3, [sp, #4]
 8021a2c:	f1b8 0300 	subs.w	r3, r8, #0
 8021a30:	d026      	beq.n	8021a80 <__d2b+0x84>
 8021a32:	4668      	mov	r0, sp
 8021a34:	9300      	str	r3, [sp, #0]
 8021a36:	f7ff fd17 	bl	8021468 <__lo0bits>
 8021a3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8021a3e:	b1e8      	cbz	r0, 8021a7c <__d2b+0x80>
 8021a40:	f1c0 0320 	rsb	r3, r0, #32
 8021a44:	fa02 f303 	lsl.w	r3, r2, r3
 8021a48:	430b      	orrs	r3, r1
 8021a4a:	40c2      	lsrs	r2, r0
 8021a4c:	6163      	str	r3, [r4, #20]
 8021a4e:	9201      	str	r2, [sp, #4]
 8021a50:	9b01      	ldr	r3, [sp, #4]
 8021a52:	61a3      	str	r3, [r4, #24]
 8021a54:	2b00      	cmp	r3, #0
 8021a56:	bf14      	ite	ne
 8021a58:	2202      	movne	r2, #2
 8021a5a:	2201      	moveq	r2, #1
 8021a5c:	6122      	str	r2, [r4, #16]
 8021a5e:	b1bd      	cbz	r5, 8021a90 <__d2b+0x94>
 8021a60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021a64:	4405      	add	r5, r0
 8021a66:	603d      	str	r5, [r7, #0]
 8021a68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021a6c:	6030      	str	r0, [r6, #0]
 8021a6e:	4620      	mov	r0, r4
 8021a70:	b003      	add	sp, #12
 8021a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021a7a:	e7d6      	b.n	8021a2a <__d2b+0x2e>
 8021a7c:	6161      	str	r1, [r4, #20]
 8021a7e:	e7e7      	b.n	8021a50 <__d2b+0x54>
 8021a80:	a801      	add	r0, sp, #4
 8021a82:	f7ff fcf1 	bl	8021468 <__lo0bits>
 8021a86:	9b01      	ldr	r3, [sp, #4]
 8021a88:	6163      	str	r3, [r4, #20]
 8021a8a:	3020      	adds	r0, #32
 8021a8c:	2201      	movs	r2, #1
 8021a8e:	e7e5      	b.n	8021a5c <__d2b+0x60>
 8021a90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021a94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021a98:	6038      	str	r0, [r7, #0]
 8021a9a:	6918      	ldr	r0, [r3, #16]
 8021a9c:	f7ff fcc4 	bl	8021428 <__hi0bits>
 8021aa0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8021aa4:	e7e2      	b.n	8021a6c <__d2b+0x70>
 8021aa6:	bf00      	nop
 8021aa8:	080238d9 	.word	0x080238d9
 8021aac:	08023961 	.word	0x08023961

08021ab0 <__ratio>:
 8021ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ab4:	4688      	mov	r8, r1
 8021ab6:	4669      	mov	r1, sp
 8021ab8:	4681      	mov	r9, r0
 8021aba:	f7ff ff55 	bl	8021968 <__b2d>
 8021abe:	a901      	add	r1, sp, #4
 8021ac0:	4640      	mov	r0, r8
 8021ac2:	ec55 4b10 	vmov	r4, r5, d0
 8021ac6:	f7ff ff4f 	bl	8021968 <__b2d>
 8021aca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021ace:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8021ad2:	eba3 0c02 	sub.w	ip, r3, r2
 8021ad6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021ada:	1a9b      	subs	r3, r3, r2
 8021adc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8021ae0:	ec51 0b10 	vmov	r0, r1, d0
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	bfd6      	itet	le
 8021ae8:	460a      	movle	r2, r1
 8021aea:	462a      	movgt	r2, r5
 8021aec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8021af0:	468b      	mov	fp, r1
 8021af2:	462f      	mov	r7, r5
 8021af4:	bfd4      	ite	le
 8021af6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8021afa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8021afe:	4620      	mov	r0, r4
 8021b00:	ee10 2a10 	vmov	r2, s0
 8021b04:	465b      	mov	r3, fp
 8021b06:	4639      	mov	r1, r7
 8021b08:	f7e4 fb28 	bl	800615c <__aeabi_ddiv>
 8021b0c:	ec41 0b10 	vmov	d0, r0, r1
 8021b10:	b003      	add	sp, #12
 8021b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021b16 <__copybits>:
 8021b16:	3901      	subs	r1, #1
 8021b18:	b570      	push	{r4, r5, r6, lr}
 8021b1a:	1149      	asrs	r1, r1, #5
 8021b1c:	6914      	ldr	r4, [r2, #16]
 8021b1e:	3101      	adds	r1, #1
 8021b20:	f102 0314 	add.w	r3, r2, #20
 8021b24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8021b28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021b2c:	1f05      	subs	r5, r0, #4
 8021b2e:	42a3      	cmp	r3, r4
 8021b30:	d30c      	bcc.n	8021b4c <__copybits+0x36>
 8021b32:	1aa3      	subs	r3, r4, r2
 8021b34:	3b11      	subs	r3, #17
 8021b36:	f023 0303 	bic.w	r3, r3, #3
 8021b3a:	3211      	adds	r2, #17
 8021b3c:	42a2      	cmp	r2, r4
 8021b3e:	bf88      	it	hi
 8021b40:	2300      	movhi	r3, #0
 8021b42:	4418      	add	r0, r3
 8021b44:	2300      	movs	r3, #0
 8021b46:	4288      	cmp	r0, r1
 8021b48:	d305      	bcc.n	8021b56 <__copybits+0x40>
 8021b4a:	bd70      	pop	{r4, r5, r6, pc}
 8021b4c:	f853 6b04 	ldr.w	r6, [r3], #4
 8021b50:	f845 6f04 	str.w	r6, [r5, #4]!
 8021b54:	e7eb      	b.n	8021b2e <__copybits+0x18>
 8021b56:	f840 3b04 	str.w	r3, [r0], #4
 8021b5a:	e7f4      	b.n	8021b46 <__copybits+0x30>

08021b5c <__any_on>:
 8021b5c:	f100 0214 	add.w	r2, r0, #20
 8021b60:	6900      	ldr	r0, [r0, #16]
 8021b62:	114b      	asrs	r3, r1, #5
 8021b64:	4298      	cmp	r0, r3
 8021b66:	b510      	push	{r4, lr}
 8021b68:	db11      	blt.n	8021b8e <__any_on+0x32>
 8021b6a:	dd0a      	ble.n	8021b82 <__any_on+0x26>
 8021b6c:	f011 011f 	ands.w	r1, r1, #31
 8021b70:	d007      	beq.n	8021b82 <__any_on+0x26>
 8021b72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8021b76:	fa24 f001 	lsr.w	r0, r4, r1
 8021b7a:	fa00 f101 	lsl.w	r1, r0, r1
 8021b7e:	428c      	cmp	r4, r1
 8021b80:	d10b      	bne.n	8021b9a <__any_on+0x3e>
 8021b82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021b86:	4293      	cmp	r3, r2
 8021b88:	d803      	bhi.n	8021b92 <__any_on+0x36>
 8021b8a:	2000      	movs	r0, #0
 8021b8c:	bd10      	pop	{r4, pc}
 8021b8e:	4603      	mov	r3, r0
 8021b90:	e7f7      	b.n	8021b82 <__any_on+0x26>
 8021b92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8021b96:	2900      	cmp	r1, #0
 8021b98:	d0f5      	beq.n	8021b86 <__any_on+0x2a>
 8021b9a:	2001      	movs	r0, #1
 8021b9c:	e7f6      	b.n	8021b8c <__any_on+0x30>

08021b9e <_malloc_usable_size_r>:
 8021b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021ba2:	1f18      	subs	r0, r3, #4
 8021ba4:	2b00      	cmp	r3, #0
 8021ba6:	bfbc      	itt	lt
 8021ba8:	580b      	ldrlt	r3, [r1, r0]
 8021baa:	18c0      	addlt	r0, r0, r3
 8021bac:	4770      	bx	lr

08021bae <__ascii_wctomb>:
 8021bae:	b149      	cbz	r1, 8021bc4 <__ascii_wctomb+0x16>
 8021bb0:	2aff      	cmp	r2, #255	; 0xff
 8021bb2:	bf85      	ittet	hi
 8021bb4:	238a      	movhi	r3, #138	; 0x8a
 8021bb6:	6003      	strhi	r3, [r0, #0]
 8021bb8:	700a      	strbls	r2, [r1, #0]
 8021bba:	f04f 30ff 	movhi.w	r0, #4294967295
 8021bbe:	bf98      	it	ls
 8021bc0:	2001      	movls	r0, #1
 8021bc2:	4770      	bx	lr
 8021bc4:	4608      	mov	r0, r1
 8021bc6:	4770      	bx	lr

08021bc8 <__ssputs_r>:
 8021bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021bcc:	688e      	ldr	r6, [r1, #8]
 8021bce:	461f      	mov	r7, r3
 8021bd0:	42be      	cmp	r6, r7
 8021bd2:	680b      	ldr	r3, [r1, #0]
 8021bd4:	4682      	mov	sl, r0
 8021bd6:	460c      	mov	r4, r1
 8021bd8:	4690      	mov	r8, r2
 8021bda:	d82c      	bhi.n	8021c36 <__ssputs_r+0x6e>
 8021bdc:	898a      	ldrh	r2, [r1, #12]
 8021bde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021be2:	d026      	beq.n	8021c32 <__ssputs_r+0x6a>
 8021be4:	6965      	ldr	r5, [r4, #20]
 8021be6:	6909      	ldr	r1, [r1, #16]
 8021be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021bec:	eba3 0901 	sub.w	r9, r3, r1
 8021bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021bf4:	1c7b      	adds	r3, r7, #1
 8021bf6:	444b      	add	r3, r9
 8021bf8:	106d      	asrs	r5, r5, #1
 8021bfa:	429d      	cmp	r5, r3
 8021bfc:	bf38      	it	cc
 8021bfe:	461d      	movcc	r5, r3
 8021c00:	0553      	lsls	r3, r2, #21
 8021c02:	d527      	bpl.n	8021c54 <__ssputs_r+0x8c>
 8021c04:	4629      	mov	r1, r5
 8021c06:	f7fd fda3 	bl	801f750 <_malloc_r>
 8021c0a:	4606      	mov	r6, r0
 8021c0c:	b360      	cbz	r0, 8021c68 <__ssputs_r+0xa0>
 8021c0e:	6921      	ldr	r1, [r4, #16]
 8021c10:	464a      	mov	r2, r9
 8021c12:	f7fe ff4b 	bl	8020aac <memcpy>
 8021c16:	89a3      	ldrh	r3, [r4, #12]
 8021c18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021c20:	81a3      	strh	r3, [r4, #12]
 8021c22:	6126      	str	r6, [r4, #16]
 8021c24:	6165      	str	r5, [r4, #20]
 8021c26:	444e      	add	r6, r9
 8021c28:	eba5 0509 	sub.w	r5, r5, r9
 8021c2c:	6026      	str	r6, [r4, #0]
 8021c2e:	60a5      	str	r5, [r4, #8]
 8021c30:	463e      	mov	r6, r7
 8021c32:	42be      	cmp	r6, r7
 8021c34:	d900      	bls.n	8021c38 <__ssputs_r+0x70>
 8021c36:	463e      	mov	r6, r7
 8021c38:	6820      	ldr	r0, [r4, #0]
 8021c3a:	4632      	mov	r2, r6
 8021c3c:	4641      	mov	r1, r8
 8021c3e:	f000 fb59 	bl	80222f4 <memmove>
 8021c42:	68a3      	ldr	r3, [r4, #8]
 8021c44:	1b9b      	subs	r3, r3, r6
 8021c46:	60a3      	str	r3, [r4, #8]
 8021c48:	6823      	ldr	r3, [r4, #0]
 8021c4a:	4433      	add	r3, r6
 8021c4c:	6023      	str	r3, [r4, #0]
 8021c4e:	2000      	movs	r0, #0
 8021c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021c54:	462a      	mov	r2, r5
 8021c56:	f7fd fe0f 	bl	801f878 <_realloc_r>
 8021c5a:	4606      	mov	r6, r0
 8021c5c:	2800      	cmp	r0, #0
 8021c5e:	d1e0      	bne.n	8021c22 <__ssputs_r+0x5a>
 8021c60:	6921      	ldr	r1, [r4, #16]
 8021c62:	4650      	mov	r0, sl
 8021c64:	f7fe ff38 	bl	8020ad8 <_free_r>
 8021c68:	230c      	movs	r3, #12
 8021c6a:	f8ca 3000 	str.w	r3, [sl]
 8021c6e:	89a3      	ldrh	r3, [r4, #12]
 8021c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021c74:	81a3      	strh	r3, [r4, #12]
 8021c76:	f04f 30ff 	mov.w	r0, #4294967295
 8021c7a:	e7e9      	b.n	8021c50 <__ssputs_r+0x88>

08021c7c <_svfiprintf_r>:
 8021c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c80:	4698      	mov	r8, r3
 8021c82:	898b      	ldrh	r3, [r1, #12]
 8021c84:	061b      	lsls	r3, r3, #24
 8021c86:	b09d      	sub	sp, #116	; 0x74
 8021c88:	4607      	mov	r7, r0
 8021c8a:	460d      	mov	r5, r1
 8021c8c:	4614      	mov	r4, r2
 8021c8e:	d50e      	bpl.n	8021cae <_svfiprintf_r+0x32>
 8021c90:	690b      	ldr	r3, [r1, #16]
 8021c92:	b963      	cbnz	r3, 8021cae <_svfiprintf_r+0x32>
 8021c94:	2140      	movs	r1, #64	; 0x40
 8021c96:	f7fd fd5b 	bl	801f750 <_malloc_r>
 8021c9a:	6028      	str	r0, [r5, #0]
 8021c9c:	6128      	str	r0, [r5, #16]
 8021c9e:	b920      	cbnz	r0, 8021caa <_svfiprintf_r+0x2e>
 8021ca0:	230c      	movs	r3, #12
 8021ca2:	603b      	str	r3, [r7, #0]
 8021ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8021ca8:	e0d0      	b.n	8021e4c <_svfiprintf_r+0x1d0>
 8021caa:	2340      	movs	r3, #64	; 0x40
 8021cac:	616b      	str	r3, [r5, #20]
 8021cae:	2300      	movs	r3, #0
 8021cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8021cb2:	2320      	movs	r3, #32
 8021cb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8021cbc:	2330      	movs	r3, #48	; 0x30
 8021cbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8021e64 <_svfiprintf_r+0x1e8>
 8021cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021cc6:	f04f 0901 	mov.w	r9, #1
 8021cca:	4623      	mov	r3, r4
 8021ccc:	469a      	mov	sl, r3
 8021cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021cd2:	b10a      	cbz	r2, 8021cd8 <_svfiprintf_r+0x5c>
 8021cd4:	2a25      	cmp	r2, #37	; 0x25
 8021cd6:	d1f9      	bne.n	8021ccc <_svfiprintf_r+0x50>
 8021cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8021cdc:	d00b      	beq.n	8021cf6 <_svfiprintf_r+0x7a>
 8021cde:	465b      	mov	r3, fp
 8021ce0:	4622      	mov	r2, r4
 8021ce2:	4629      	mov	r1, r5
 8021ce4:	4638      	mov	r0, r7
 8021ce6:	f7ff ff6f 	bl	8021bc8 <__ssputs_r>
 8021cea:	3001      	adds	r0, #1
 8021cec:	f000 80a9 	beq.w	8021e42 <_svfiprintf_r+0x1c6>
 8021cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021cf2:	445a      	add	r2, fp
 8021cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8021cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8021cfa:	2b00      	cmp	r3, #0
 8021cfc:	f000 80a1 	beq.w	8021e42 <_svfiprintf_r+0x1c6>
 8021d00:	2300      	movs	r3, #0
 8021d02:	f04f 32ff 	mov.w	r2, #4294967295
 8021d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021d0a:	f10a 0a01 	add.w	sl, sl, #1
 8021d0e:	9304      	str	r3, [sp, #16]
 8021d10:	9307      	str	r3, [sp, #28]
 8021d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021d16:	931a      	str	r3, [sp, #104]	; 0x68
 8021d18:	4654      	mov	r4, sl
 8021d1a:	2205      	movs	r2, #5
 8021d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d20:	4850      	ldr	r0, [pc, #320]	; (8021e64 <_svfiprintf_r+0x1e8>)
 8021d22:	f7e3 fee5 	bl	8005af0 <memchr>
 8021d26:	9a04      	ldr	r2, [sp, #16]
 8021d28:	b9d8      	cbnz	r0, 8021d62 <_svfiprintf_r+0xe6>
 8021d2a:	06d0      	lsls	r0, r2, #27
 8021d2c:	bf44      	itt	mi
 8021d2e:	2320      	movmi	r3, #32
 8021d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021d34:	0711      	lsls	r1, r2, #28
 8021d36:	bf44      	itt	mi
 8021d38:	232b      	movmi	r3, #43	; 0x2b
 8021d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8021d42:	2b2a      	cmp	r3, #42	; 0x2a
 8021d44:	d015      	beq.n	8021d72 <_svfiprintf_r+0xf6>
 8021d46:	9a07      	ldr	r2, [sp, #28]
 8021d48:	4654      	mov	r4, sl
 8021d4a:	2000      	movs	r0, #0
 8021d4c:	f04f 0c0a 	mov.w	ip, #10
 8021d50:	4621      	mov	r1, r4
 8021d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021d56:	3b30      	subs	r3, #48	; 0x30
 8021d58:	2b09      	cmp	r3, #9
 8021d5a:	d94d      	bls.n	8021df8 <_svfiprintf_r+0x17c>
 8021d5c:	b1b0      	cbz	r0, 8021d8c <_svfiprintf_r+0x110>
 8021d5e:	9207      	str	r2, [sp, #28]
 8021d60:	e014      	b.n	8021d8c <_svfiprintf_r+0x110>
 8021d62:	eba0 0308 	sub.w	r3, r0, r8
 8021d66:	fa09 f303 	lsl.w	r3, r9, r3
 8021d6a:	4313      	orrs	r3, r2
 8021d6c:	9304      	str	r3, [sp, #16]
 8021d6e:	46a2      	mov	sl, r4
 8021d70:	e7d2      	b.n	8021d18 <_svfiprintf_r+0x9c>
 8021d72:	9b03      	ldr	r3, [sp, #12]
 8021d74:	1d19      	adds	r1, r3, #4
 8021d76:	681b      	ldr	r3, [r3, #0]
 8021d78:	9103      	str	r1, [sp, #12]
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	bfbb      	ittet	lt
 8021d7e:	425b      	neglt	r3, r3
 8021d80:	f042 0202 	orrlt.w	r2, r2, #2
 8021d84:	9307      	strge	r3, [sp, #28]
 8021d86:	9307      	strlt	r3, [sp, #28]
 8021d88:	bfb8      	it	lt
 8021d8a:	9204      	strlt	r2, [sp, #16]
 8021d8c:	7823      	ldrb	r3, [r4, #0]
 8021d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8021d90:	d10c      	bne.n	8021dac <_svfiprintf_r+0x130>
 8021d92:	7863      	ldrb	r3, [r4, #1]
 8021d94:	2b2a      	cmp	r3, #42	; 0x2a
 8021d96:	d134      	bne.n	8021e02 <_svfiprintf_r+0x186>
 8021d98:	9b03      	ldr	r3, [sp, #12]
 8021d9a:	1d1a      	adds	r2, r3, #4
 8021d9c:	681b      	ldr	r3, [r3, #0]
 8021d9e:	9203      	str	r2, [sp, #12]
 8021da0:	2b00      	cmp	r3, #0
 8021da2:	bfb8      	it	lt
 8021da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8021da8:	3402      	adds	r4, #2
 8021daa:	9305      	str	r3, [sp, #20]
 8021dac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8021e74 <_svfiprintf_r+0x1f8>
 8021db0:	7821      	ldrb	r1, [r4, #0]
 8021db2:	2203      	movs	r2, #3
 8021db4:	4650      	mov	r0, sl
 8021db6:	f7e3 fe9b 	bl	8005af0 <memchr>
 8021dba:	b138      	cbz	r0, 8021dcc <_svfiprintf_r+0x150>
 8021dbc:	9b04      	ldr	r3, [sp, #16]
 8021dbe:	eba0 000a 	sub.w	r0, r0, sl
 8021dc2:	2240      	movs	r2, #64	; 0x40
 8021dc4:	4082      	lsls	r2, r0
 8021dc6:	4313      	orrs	r3, r2
 8021dc8:	3401      	adds	r4, #1
 8021dca:	9304      	str	r3, [sp, #16]
 8021dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021dd0:	4825      	ldr	r0, [pc, #148]	; (8021e68 <_svfiprintf_r+0x1ec>)
 8021dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021dd6:	2206      	movs	r2, #6
 8021dd8:	f7e3 fe8a 	bl	8005af0 <memchr>
 8021ddc:	2800      	cmp	r0, #0
 8021dde:	d038      	beq.n	8021e52 <_svfiprintf_r+0x1d6>
 8021de0:	4b22      	ldr	r3, [pc, #136]	; (8021e6c <_svfiprintf_r+0x1f0>)
 8021de2:	bb1b      	cbnz	r3, 8021e2c <_svfiprintf_r+0x1b0>
 8021de4:	9b03      	ldr	r3, [sp, #12]
 8021de6:	3307      	adds	r3, #7
 8021de8:	f023 0307 	bic.w	r3, r3, #7
 8021dec:	3308      	adds	r3, #8
 8021dee:	9303      	str	r3, [sp, #12]
 8021df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021df2:	4433      	add	r3, r6
 8021df4:	9309      	str	r3, [sp, #36]	; 0x24
 8021df6:	e768      	b.n	8021cca <_svfiprintf_r+0x4e>
 8021df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8021dfc:	460c      	mov	r4, r1
 8021dfe:	2001      	movs	r0, #1
 8021e00:	e7a6      	b.n	8021d50 <_svfiprintf_r+0xd4>
 8021e02:	2300      	movs	r3, #0
 8021e04:	3401      	adds	r4, #1
 8021e06:	9305      	str	r3, [sp, #20]
 8021e08:	4619      	mov	r1, r3
 8021e0a:	f04f 0c0a 	mov.w	ip, #10
 8021e0e:	4620      	mov	r0, r4
 8021e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021e14:	3a30      	subs	r2, #48	; 0x30
 8021e16:	2a09      	cmp	r2, #9
 8021e18:	d903      	bls.n	8021e22 <_svfiprintf_r+0x1a6>
 8021e1a:	2b00      	cmp	r3, #0
 8021e1c:	d0c6      	beq.n	8021dac <_svfiprintf_r+0x130>
 8021e1e:	9105      	str	r1, [sp, #20]
 8021e20:	e7c4      	b.n	8021dac <_svfiprintf_r+0x130>
 8021e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8021e26:	4604      	mov	r4, r0
 8021e28:	2301      	movs	r3, #1
 8021e2a:	e7f0      	b.n	8021e0e <_svfiprintf_r+0x192>
 8021e2c:	ab03      	add	r3, sp, #12
 8021e2e:	9300      	str	r3, [sp, #0]
 8021e30:	462a      	mov	r2, r5
 8021e32:	4b0f      	ldr	r3, [pc, #60]	; (8021e70 <_svfiprintf_r+0x1f4>)
 8021e34:	a904      	add	r1, sp, #16
 8021e36:	4638      	mov	r0, r7
 8021e38:	f3af 8000 	nop.w
 8021e3c:	1c42      	adds	r2, r0, #1
 8021e3e:	4606      	mov	r6, r0
 8021e40:	d1d6      	bne.n	8021df0 <_svfiprintf_r+0x174>
 8021e42:	89ab      	ldrh	r3, [r5, #12]
 8021e44:	065b      	lsls	r3, r3, #25
 8021e46:	f53f af2d 	bmi.w	8021ca4 <_svfiprintf_r+0x28>
 8021e4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021e4c:	b01d      	add	sp, #116	; 0x74
 8021e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e52:	ab03      	add	r3, sp, #12
 8021e54:	9300      	str	r3, [sp, #0]
 8021e56:	462a      	mov	r2, r5
 8021e58:	4b05      	ldr	r3, [pc, #20]	; (8021e70 <_svfiprintf_r+0x1f4>)
 8021e5a:	a904      	add	r1, sp, #16
 8021e5c:	4638      	mov	r0, r7
 8021e5e:	f000 f879 	bl	8021f54 <_printf_i>
 8021e62:	e7eb      	b.n	8021e3c <_svfiprintf_r+0x1c0>
 8021e64:	08023abc 	.word	0x08023abc
 8021e68:	08023ac6 	.word	0x08023ac6
 8021e6c:	00000000 	.word	0x00000000
 8021e70:	08021bc9 	.word	0x08021bc9
 8021e74:	08023ac2 	.word	0x08023ac2

08021e78 <_printf_common>:
 8021e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e7c:	4616      	mov	r6, r2
 8021e7e:	4699      	mov	r9, r3
 8021e80:	688a      	ldr	r2, [r1, #8]
 8021e82:	690b      	ldr	r3, [r1, #16]
 8021e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021e88:	4293      	cmp	r3, r2
 8021e8a:	bfb8      	it	lt
 8021e8c:	4613      	movlt	r3, r2
 8021e8e:	6033      	str	r3, [r6, #0]
 8021e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021e94:	4607      	mov	r7, r0
 8021e96:	460c      	mov	r4, r1
 8021e98:	b10a      	cbz	r2, 8021e9e <_printf_common+0x26>
 8021e9a:	3301      	adds	r3, #1
 8021e9c:	6033      	str	r3, [r6, #0]
 8021e9e:	6823      	ldr	r3, [r4, #0]
 8021ea0:	0699      	lsls	r1, r3, #26
 8021ea2:	bf42      	ittt	mi
 8021ea4:	6833      	ldrmi	r3, [r6, #0]
 8021ea6:	3302      	addmi	r3, #2
 8021ea8:	6033      	strmi	r3, [r6, #0]
 8021eaa:	6825      	ldr	r5, [r4, #0]
 8021eac:	f015 0506 	ands.w	r5, r5, #6
 8021eb0:	d106      	bne.n	8021ec0 <_printf_common+0x48>
 8021eb2:	f104 0a19 	add.w	sl, r4, #25
 8021eb6:	68e3      	ldr	r3, [r4, #12]
 8021eb8:	6832      	ldr	r2, [r6, #0]
 8021eba:	1a9b      	subs	r3, r3, r2
 8021ebc:	42ab      	cmp	r3, r5
 8021ebe:	dc26      	bgt.n	8021f0e <_printf_common+0x96>
 8021ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021ec4:	1e13      	subs	r3, r2, #0
 8021ec6:	6822      	ldr	r2, [r4, #0]
 8021ec8:	bf18      	it	ne
 8021eca:	2301      	movne	r3, #1
 8021ecc:	0692      	lsls	r2, r2, #26
 8021ece:	d42b      	bmi.n	8021f28 <_printf_common+0xb0>
 8021ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021ed4:	4649      	mov	r1, r9
 8021ed6:	4638      	mov	r0, r7
 8021ed8:	47c0      	blx	r8
 8021eda:	3001      	adds	r0, #1
 8021edc:	d01e      	beq.n	8021f1c <_printf_common+0xa4>
 8021ede:	6823      	ldr	r3, [r4, #0]
 8021ee0:	6922      	ldr	r2, [r4, #16]
 8021ee2:	f003 0306 	and.w	r3, r3, #6
 8021ee6:	2b04      	cmp	r3, #4
 8021ee8:	bf02      	ittt	eq
 8021eea:	68e5      	ldreq	r5, [r4, #12]
 8021eec:	6833      	ldreq	r3, [r6, #0]
 8021eee:	1aed      	subeq	r5, r5, r3
 8021ef0:	68a3      	ldr	r3, [r4, #8]
 8021ef2:	bf0c      	ite	eq
 8021ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021ef8:	2500      	movne	r5, #0
 8021efa:	4293      	cmp	r3, r2
 8021efc:	bfc4      	itt	gt
 8021efe:	1a9b      	subgt	r3, r3, r2
 8021f00:	18ed      	addgt	r5, r5, r3
 8021f02:	2600      	movs	r6, #0
 8021f04:	341a      	adds	r4, #26
 8021f06:	42b5      	cmp	r5, r6
 8021f08:	d11a      	bne.n	8021f40 <_printf_common+0xc8>
 8021f0a:	2000      	movs	r0, #0
 8021f0c:	e008      	b.n	8021f20 <_printf_common+0xa8>
 8021f0e:	2301      	movs	r3, #1
 8021f10:	4652      	mov	r2, sl
 8021f12:	4649      	mov	r1, r9
 8021f14:	4638      	mov	r0, r7
 8021f16:	47c0      	blx	r8
 8021f18:	3001      	adds	r0, #1
 8021f1a:	d103      	bne.n	8021f24 <_printf_common+0xac>
 8021f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8021f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f24:	3501      	adds	r5, #1
 8021f26:	e7c6      	b.n	8021eb6 <_printf_common+0x3e>
 8021f28:	18e1      	adds	r1, r4, r3
 8021f2a:	1c5a      	adds	r2, r3, #1
 8021f2c:	2030      	movs	r0, #48	; 0x30
 8021f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021f32:	4422      	add	r2, r4
 8021f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021f3c:	3302      	adds	r3, #2
 8021f3e:	e7c7      	b.n	8021ed0 <_printf_common+0x58>
 8021f40:	2301      	movs	r3, #1
 8021f42:	4622      	mov	r2, r4
 8021f44:	4649      	mov	r1, r9
 8021f46:	4638      	mov	r0, r7
 8021f48:	47c0      	blx	r8
 8021f4a:	3001      	adds	r0, #1
 8021f4c:	d0e6      	beq.n	8021f1c <_printf_common+0xa4>
 8021f4e:	3601      	adds	r6, #1
 8021f50:	e7d9      	b.n	8021f06 <_printf_common+0x8e>
	...

08021f54 <_printf_i>:
 8021f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021f58:	7e0f      	ldrb	r7, [r1, #24]
 8021f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021f5c:	2f78      	cmp	r7, #120	; 0x78
 8021f5e:	4691      	mov	r9, r2
 8021f60:	4680      	mov	r8, r0
 8021f62:	460c      	mov	r4, r1
 8021f64:	469a      	mov	sl, r3
 8021f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8021f6a:	d807      	bhi.n	8021f7c <_printf_i+0x28>
 8021f6c:	2f62      	cmp	r7, #98	; 0x62
 8021f6e:	d80a      	bhi.n	8021f86 <_printf_i+0x32>
 8021f70:	2f00      	cmp	r7, #0
 8021f72:	f000 80d4 	beq.w	802211e <_printf_i+0x1ca>
 8021f76:	2f58      	cmp	r7, #88	; 0x58
 8021f78:	f000 80c0 	beq.w	80220fc <_printf_i+0x1a8>
 8021f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021f84:	e03a      	b.n	8021ffc <_printf_i+0xa8>
 8021f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021f8a:	2b15      	cmp	r3, #21
 8021f8c:	d8f6      	bhi.n	8021f7c <_printf_i+0x28>
 8021f8e:	a101      	add	r1, pc, #4	; (adr r1, 8021f94 <_printf_i+0x40>)
 8021f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021f94:	08021fed 	.word	0x08021fed
 8021f98:	08022001 	.word	0x08022001
 8021f9c:	08021f7d 	.word	0x08021f7d
 8021fa0:	08021f7d 	.word	0x08021f7d
 8021fa4:	08021f7d 	.word	0x08021f7d
 8021fa8:	08021f7d 	.word	0x08021f7d
 8021fac:	08022001 	.word	0x08022001
 8021fb0:	08021f7d 	.word	0x08021f7d
 8021fb4:	08021f7d 	.word	0x08021f7d
 8021fb8:	08021f7d 	.word	0x08021f7d
 8021fbc:	08021f7d 	.word	0x08021f7d
 8021fc0:	08022105 	.word	0x08022105
 8021fc4:	0802202d 	.word	0x0802202d
 8021fc8:	080220bf 	.word	0x080220bf
 8021fcc:	08021f7d 	.word	0x08021f7d
 8021fd0:	08021f7d 	.word	0x08021f7d
 8021fd4:	08022127 	.word	0x08022127
 8021fd8:	08021f7d 	.word	0x08021f7d
 8021fdc:	0802202d 	.word	0x0802202d
 8021fe0:	08021f7d 	.word	0x08021f7d
 8021fe4:	08021f7d 	.word	0x08021f7d
 8021fe8:	080220c7 	.word	0x080220c7
 8021fec:	682b      	ldr	r3, [r5, #0]
 8021fee:	1d1a      	adds	r2, r3, #4
 8021ff0:	681b      	ldr	r3, [r3, #0]
 8021ff2:	602a      	str	r2, [r5, #0]
 8021ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021ffc:	2301      	movs	r3, #1
 8021ffe:	e09f      	b.n	8022140 <_printf_i+0x1ec>
 8022000:	6820      	ldr	r0, [r4, #0]
 8022002:	682b      	ldr	r3, [r5, #0]
 8022004:	0607      	lsls	r7, r0, #24
 8022006:	f103 0104 	add.w	r1, r3, #4
 802200a:	6029      	str	r1, [r5, #0]
 802200c:	d501      	bpl.n	8022012 <_printf_i+0xbe>
 802200e:	681e      	ldr	r6, [r3, #0]
 8022010:	e003      	b.n	802201a <_printf_i+0xc6>
 8022012:	0646      	lsls	r6, r0, #25
 8022014:	d5fb      	bpl.n	802200e <_printf_i+0xba>
 8022016:	f9b3 6000 	ldrsh.w	r6, [r3]
 802201a:	2e00      	cmp	r6, #0
 802201c:	da03      	bge.n	8022026 <_printf_i+0xd2>
 802201e:	232d      	movs	r3, #45	; 0x2d
 8022020:	4276      	negs	r6, r6
 8022022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022026:	485a      	ldr	r0, [pc, #360]	; (8022190 <_printf_i+0x23c>)
 8022028:	230a      	movs	r3, #10
 802202a:	e012      	b.n	8022052 <_printf_i+0xfe>
 802202c:	682b      	ldr	r3, [r5, #0]
 802202e:	6820      	ldr	r0, [r4, #0]
 8022030:	1d19      	adds	r1, r3, #4
 8022032:	6029      	str	r1, [r5, #0]
 8022034:	0605      	lsls	r5, r0, #24
 8022036:	d501      	bpl.n	802203c <_printf_i+0xe8>
 8022038:	681e      	ldr	r6, [r3, #0]
 802203a:	e002      	b.n	8022042 <_printf_i+0xee>
 802203c:	0641      	lsls	r1, r0, #25
 802203e:	d5fb      	bpl.n	8022038 <_printf_i+0xe4>
 8022040:	881e      	ldrh	r6, [r3, #0]
 8022042:	4853      	ldr	r0, [pc, #332]	; (8022190 <_printf_i+0x23c>)
 8022044:	2f6f      	cmp	r7, #111	; 0x6f
 8022046:	bf0c      	ite	eq
 8022048:	2308      	moveq	r3, #8
 802204a:	230a      	movne	r3, #10
 802204c:	2100      	movs	r1, #0
 802204e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022052:	6865      	ldr	r5, [r4, #4]
 8022054:	60a5      	str	r5, [r4, #8]
 8022056:	2d00      	cmp	r5, #0
 8022058:	bfa2      	ittt	ge
 802205a:	6821      	ldrge	r1, [r4, #0]
 802205c:	f021 0104 	bicge.w	r1, r1, #4
 8022060:	6021      	strge	r1, [r4, #0]
 8022062:	b90e      	cbnz	r6, 8022068 <_printf_i+0x114>
 8022064:	2d00      	cmp	r5, #0
 8022066:	d04b      	beq.n	8022100 <_printf_i+0x1ac>
 8022068:	4615      	mov	r5, r2
 802206a:	fbb6 f1f3 	udiv	r1, r6, r3
 802206e:	fb03 6711 	mls	r7, r3, r1, r6
 8022072:	5dc7      	ldrb	r7, [r0, r7]
 8022074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022078:	4637      	mov	r7, r6
 802207a:	42bb      	cmp	r3, r7
 802207c:	460e      	mov	r6, r1
 802207e:	d9f4      	bls.n	802206a <_printf_i+0x116>
 8022080:	2b08      	cmp	r3, #8
 8022082:	d10b      	bne.n	802209c <_printf_i+0x148>
 8022084:	6823      	ldr	r3, [r4, #0]
 8022086:	07de      	lsls	r6, r3, #31
 8022088:	d508      	bpl.n	802209c <_printf_i+0x148>
 802208a:	6923      	ldr	r3, [r4, #16]
 802208c:	6861      	ldr	r1, [r4, #4]
 802208e:	4299      	cmp	r1, r3
 8022090:	bfde      	ittt	le
 8022092:	2330      	movle	r3, #48	; 0x30
 8022094:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022098:	f105 35ff 	addle.w	r5, r5, #4294967295
 802209c:	1b52      	subs	r2, r2, r5
 802209e:	6122      	str	r2, [r4, #16]
 80220a0:	f8cd a000 	str.w	sl, [sp]
 80220a4:	464b      	mov	r3, r9
 80220a6:	aa03      	add	r2, sp, #12
 80220a8:	4621      	mov	r1, r4
 80220aa:	4640      	mov	r0, r8
 80220ac:	f7ff fee4 	bl	8021e78 <_printf_common>
 80220b0:	3001      	adds	r0, #1
 80220b2:	d14a      	bne.n	802214a <_printf_i+0x1f6>
 80220b4:	f04f 30ff 	mov.w	r0, #4294967295
 80220b8:	b004      	add	sp, #16
 80220ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220be:	6823      	ldr	r3, [r4, #0]
 80220c0:	f043 0320 	orr.w	r3, r3, #32
 80220c4:	6023      	str	r3, [r4, #0]
 80220c6:	4833      	ldr	r0, [pc, #204]	; (8022194 <_printf_i+0x240>)
 80220c8:	2778      	movs	r7, #120	; 0x78
 80220ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80220ce:	6823      	ldr	r3, [r4, #0]
 80220d0:	6829      	ldr	r1, [r5, #0]
 80220d2:	061f      	lsls	r7, r3, #24
 80220d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80220d8:	d402      	bmi.n	80220e0 <_printf_i+0x18c>
 80220da:	065f      	lsls	r7, r3, #25
 80220dc:	bf48      	it	mi
 80220de:	b2b6      	uxthmi	r6, r6
 80220e0:	07df      	lsls	r7, r3, #31
 80220e2:	bf48      	it	mi
 80220e4:	f043 0320 	orrmi.w	r3, r3, #32
 80220e8:	6029      	str	r1, [r5, #0]
 80220ea:	bf48      	it	mi
 80220ec:	6023      	strmi	r3, [r4, #0]
 80220ee:	b91e      	cbnz	r6, 80220f8 <_printf_i+0x1a4>
 80220f0:	6823      	ldr	r3, [r4, #0]
 80220f2:	f023 0320 	bic.w	r3, r3, #32
 80220f6:	6023      	str	r3, [r4, #0]
 80220f8:	2310      	movs	r3, #16
 80220fa:	e7a7      	b.n	802204c <_printf_i+0xf8>
 80220fc:	4824      	ldr	r0, [pc, #144]	; (8022190 <_printf_i+0x23c>)
 80220fe:	e7e4      	b.n	80220ca <_printf_i+0x176>
 8022100:	4615      	mov	r5, r2
 8022102:	e7bd      	b.n	8022080 <_printf_i+0x12c>
 8022104:	682b      	ldr	r3, [r5, #0]
 8022106:	6826      	ldr	r6, [r4, #0]
 8022108:	6961      	ldr	r1, [r4, #20]
 802210a:	1d18      	adds	r0, r3, #4
 802210c:	6028      	str	r0, [r5, #0]
 802210e:	0635      	lsls	r5, r6, #24
 8022110:	681b      	ldr	r3, [r3, #0]
 8022112:	d501      	bpl.n	8022118 <_printf_i+0x1c4>
 8022114:	6019      	str	r1, [r3, #0]
 8022116:	e002      	b.n	802211e <_printf_i+0x1ca>
 8022118:	0670      	lsls	r0, r6, #25
 802211a:	d5fb      	bpl.n	8022114 <_printf_i+0x1c0>
 802211c:	8019      	strh	r1, [r3, #0]
 802211e:	2300      	movs	r3, #0
 8022120:	6123      	str	r3, [r4, #16]
 8022122:	4615      	mov	r5, r2
 8022124:	e7bc      	b.n	80220a0 <_printf_i+0x14c>
 8022126:	682b      	ldr	r3, [r5, #0]
 8022128:	1d1a      	adds	r2, r3, #4
 802212a:	602a      	str	r2, [r5, #0]
 802212c:	681d      	ldr	r5, [r3, #0]
 802212e:	6862      	ldr	r2, [r4, #4]
 8022130:	2100      	movs	r1, #0
 8022132:	4628      	mov	r0, r5
 8022134:	f7e3 fcdc 	bl	8005af0 <memchr>
 8022138:	b108      	cbz	r0, 802213e <_printf_i+0x1ea>
 802213a:	1b40      	subs	r0, r0, r5
 802213c:	6060      	str	r0, [r4, #4]
 802213e:	6863      	ldr	r3, [r4, #4]
 8022140:	6123      	str	r3, [r4, #16]
 8022142:	2300      	movs	r3, #0
 8022144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022148:	e7aa      	b.n	80220a0 <_printf_i+0x14c>
 802214a:	6923      	ldr	r3, [r4, #16]
 802214c:	462a      	mov	r2, r5
 802214e:	4649      	mov	r1, r9
 8022150:	4640      	mov	r0, r8
 8022152:	47d0      	blx	sl
 8022154:	3001      	adds	r0, #1
 8022156:	d0ad      	beq.n	80220b4 <_printf_i+0x160>
 8022158:	6823      	ldr	r3, [r4, #0]
 802215a:	079b      	lsls	r3, r3, #30
 802215c:	d413      	bmi.n	8022186 <_printf_i+0x232>
 802215e:	68e0      	ldr	r0, [r4, #12]
 8022160:	9b03      	ldr	r3, [sp, #12]
 8022162:	4298      	cmp	r0, r3
 8022164:	bfb8      	it	lt
 8022166:	4618      	movlt	r0, r3
 8022168:	e7a6      	b.n	80220b8 <_printf_i+0x164>
 802216a:	2301      	movs	r3, #1
 802216c:	4632      	mov	r2, r6
 802216e:	4649      	mov	r1, r9
 8022170:	4640      	mov	r0, r8
 8022172:	47d0      	blx	sl
 8022174:	3001      	adds	r0, #1
 8022176:	d09d      	beq.n	80220b4 <_printf_i+0x160>
 8022178:	3501      	adds	r5, #1
 802217a:	68e3      	ldr	r3, [r4, #12]
 802217c:	9903      	ldr	r1, [sp, #12]
 802217e:	1a5b      	subs	r3, r3, r1
 8022180:	42ab      	cmp	r3, r5
 8022182:	dcf2      	bgt.n	802216a <_printf_i+0x216>
 8022184:	e7eb      	b.n	802215e <_printf_i+0x20a>
 8022186:	2500      	movs	r5, #0
 8022188:	f104 0619 	add.w	r6, r4, #25
 802218c:	e7f5      	b.n	802217a <_printf_i+0x226>
 802218e:	bf00      	nop
 8022190:	08023acd 	.word	0x08023acd
 8022194:	08023ade 	.word	0x08023ade

08022198 <__sflush_r>:
 8022198:	898a      	ldrh	r2, [r1, #12]
 802219a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802219e:	4605      	mov	r5, r0
 80221a0:	0710      	lsls	r0, r2, #28
 80221a2:	460c      	mov	r4, r1
 80221a4:	d458      	bmi.n	8022258 <__sflush_r+0xc0>
 80221a6:	684b      	ldr	r3, [r1, #4]
 80221a8:	2b00      	cmp	r3, #0
 80221aa:	dc05      	bgt.n	80221b8 <__sflush_r+0x20>
 80221ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80221ae:	2b00      	cmp	r3, #0
 80221b0:	dc02      	bgt.n	80221b8 <__sflush_r+0x20>
 80221b2:	2000      	movs	r0, #0
 80221b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80221ba:	2e00      	cmp	r6, #0
 80221bc:	d0f9      	beq.n	80221b2 <__sflush_r+0x1a>
 80221be:	2300      	movs	r3, #0
 80221c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80221c4:	682f      	ldr	r7, [r5, #0]
 80221c6:	6a21      	ldr	r1, [r4, #32]
 80221c8:	602b      	str	r3, [r5, #0]
 80221ca:	d032      	beq.n	8022232 <__sflush_r+0x9a>
 80221cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80221ce:	89a3      	ldrh	r3, [r4, #12]
 80221d0:	075a      	lsls	r2, r3, #29
 80221d2:	d505      	bpl.n	80221e0 <__sflush_r+0x48>
 80221d4:	6863      	ldr	r3, [r4, #4]
 80221d6:	1ac0      	subs	r0, r0, r3
 80221d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80221da:	b10b      	cbz	r3, 80221e0 <__sflush_r+0x48>
 80221dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80221de:	1ac0      	subs	r0, r0, r3
 80221e0:	2300      	movs	r3, #0
 80221e2:	4602      	mov	r2, r0
 80221e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80221e6:	6a21      	ldr	r1, [r4, #32]
 80221e8:	4628      	mov	r0, r5
 80221ea:	47b0      	blx	r6
 80221ec:	1c43      	adds	r3, r0, #1
 80221ee:	89a3      	ldrh	r3, [r4, #12]
 80221f0:	d106      	bne.n	8022200 <__sflush_r+0x68>
 80221f2:	6829      	ldr	r1, [r5, #0]
 80221f4:	291d      	cmp	r1, #29
 80221f6:	d82b      	bhi.n	8022250 <__sflush_r+0xb8>
 80221f8:	4a29      	ldr	r2, [pc, #164]	; (80222a0 <__sflush_r+0x108>)
 80221fa:	410a      	asrs	r2, r1
 80221fc:	07d6      	lsls	r6, r2, #31
 80221fe:	d427      	bmi.n	8022250 <__sflush_r+0xb8>
 8022200:	2200      	movs	r2, #0
 8022202:	6062      	str	r2, [r4, #4]
 8022204:	04d9      	lsls	r1, r3, #19
 8022206:	6922      	ldr	r2, [r4, #16]
 8022208:	6022      	str	r2, [r4, #0]
 802220a:	d504      	bpl.n	8022216 <__sflush_r+0x7e>
 802220c:	1c42      	adds	r2, r0, #1
 802220e:	d101      	bne.n	8022214 <__sflush_r+0x7c>
 8022210:	682b      	ldr	r3, [r5, #0]
 8022212:	b903      	cbnz	r3, 8022216 <__sflush_r+0x7e>
 8022214:	6560      	str	r0, [r4, #84]	; 0x54
 8022216:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022218:	602f      	str	r7, [r5, #0]
 802221a:	2900      	cmp	r1, #0
 802221c:	d0c9      	beq.n	80221b2 <__sflush_r+0x1a>
 802221e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022222:	4299      	cmp	r1, r3
 8022224:	d002      	beq.n	802222c <__sflush_r+0x94>
 8022226:	4628      	mov	r0, r5
 8022228:	f7fe fc56 	bl	8020ad8 <_free_r>
 802222c:	2000      	movs	r0, #0
 802222e:	6360      	str	r0, [r4, #52]	; 0x34
 8022230:	e7c0      	b.n	80221b4 <__sflush_r+0x1c>
 8022232:	2301      	movs	r3, #1
 8022234:	4628      	mov	r0, r5
 8022236:	47b0      	blx	r6
 8022238:	1c41      	adds	r1, r0, #1
 802223a:	d1c8      	bne.n	80221ce <__sflush_r+0x36>
 802223c:	682b      	ldr	r3, [r5, #0]
 802223e:	2b00      	cmp	r3, #0
 8022240:	d0c5      	beq.n	80221ce <__sflush_r+0x36>
 8022242:	2b1d      	cmp	r3, #29
 8022244:	d001      	beq.n	802224a <__sflush_r+0xb2>
 8022246:	2b16      	cmp	r3, #22
 8022248:	d101      	bne.n	802224e <__sflush_r+0xb6>
 802224a:	602f      	str	r7, [r5, #0]
 802224c:	e7b1      	b.n	80221b2 <__sflush_r+0x1a>
 802224e:	89a3      	ldrh	r3, [r4, #12]
 8022250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022254:	81a3      	strh	r3, [r4, #12]
 8022256:	e7ad      	b.n	80221b4 <__sflush_r+0x1c>
 8022258:	690f      	ldr	r7, [r1, #16]
 802225a:	2f00      	cmp	r7, #0
 802225c:	d0a9      	beq.n	80221b2 <__sflush_r+0x1a>
 802225e:	0793      	lsls	r3, r2, #30
 8022260:	680e      	ldr	r6, [r1, #0]
 8022262:	bf08      	it	eq
 8022264:	694b      	ldreq	r3, [r1, #20]
 8022266:	600f      	str	r7, [r1, #0]
 8022268:	bf18      	it	ne
 802226a:	2300      	movne	r3, #0
 802226c:	eba6 0807 	sub.w	r8, r6, r7
 8022270:	608b      	str	r3, [r1, #8]
 8022272:	f1b8 0f00 	cmp.w	r8, #0
 8022276:	dd9c      	ble.n	80221b2 <__sflush_r+0x1a>
 8022278:	6a21      	ldr	r1, [r4, #32]
 802227a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802227c:	4643      	mov	r3, r8
 802227e:	463a      	mov	r2, r7
 8022280:	4628      	mov	r0, r5
 8022282:	47b0      	blx	r6
 8022284:	2800      	cmp	r0, #0
 8022286:	dc06      	bgt.n	8022296 <__sflush_r+0xfe>
 8022288:	89a3      	ldrh	r3, [r4, #12]
 802228a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802228e:	81a3      	strh	r3, [r4, #12]
 8022290:	f04f 30ff 	mov.w	r0, #4294967295
 8022294:	e78e      	b.n	80221b4 <__sflush_r+0x1c>
 8022296:	4407      	add	r7, r0
 8022298:	eba8 0800 	sub.w	r8, r8, r0
 802229c:	e7e9      	b.n	8022272 <__sflush_r+0xda>
 802229e:	bf00      	nop
 80222a0:	dfbffffe 	.word	0xdfbffffe

080222a4 <_fflush_r>:
 80222a4:	b538      	push	{r3, r4, r5, lr}
 80222a6:	690b      	ldr	r3, [r1, #16]
 80222a8:	4605      	mov	r5, r0
 80222aa:	460c      	mov	r4, r1
 80222ac:	b913      	cbnz	r3, 80222b4 <_fflush_r+0x10>
 80222ae:	2500      	movs	r5, #0
 80222b0:	4628      	mov	r0, r5
 80222b2:	bd38      	pop	{r3, r4, r5, pc}
 80222b4:	b118      	cbz	r0, 80222be <_fflush_r+0x1a>
 80222b6:	6a03      	ldr	r3, [r0, #32]
 80222b8:	b90b      	cbnz	r3, 80222be <_fflush_r+0x1a>
 80222ba:	f7fe fa3d 	bl	8020738 <__sinit>
 80222be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	d0f3      	beq.n	80222ae <_fflush_r+0xa>
 80222c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80222c8:	07d0      	lsls	r0, r2, #31
 80222ca:	d404      	bmi.n	80222d6 <_fflush_r+0x32>
 80222cc:	0599      	lsls	r1, r3, #22
 80222ce:	d402      	bmi.n	80222d6 <_fflush_r+0x32>
 80222d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80222d2:	f7fe fbdc 	bl	8020a8e <__retarget_lock_acquire_recursive>
 80222d6:	4628      	mov	r0, r5
 80222d8:	4621      	mov	r1, r4
 80222da:	f7ff ff5d 	bl	8022198 <__sflush_r>
 80222de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80222e0:	07da      	lsls	r2, r3, #31
 80222e2:	4605      	mov	r5, r0
 80222e4:	d4e4      	bmi.n	80222b0 <_fflush_r+0xc>
 80222e6:	89a3      	ldrh	r3, [r4, #12]
 80222e8:	059b      	lsls	r3, r3, #22
 80222ea:	d4e1      	bmi.n	80222b0 <_fflush_r+0xc>
 80222ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80222ee:	f7fe fbcf 	bl	8020a90 <__retarget_lock_release_recursive>
 80222f2:	e7dd      	b.n	80222b0 <_fflush_r+0xc>

080222f4 <memmove>:
 80222f4:	4288      	cmp	r0, r1
 80222f6:	b510      	push	{r4, lr}
 80222f8:	eb01 0402 	add.w	r4, r1, r2
 80222fc:	d902      	bls.n	8022304 <memmove+0x10>
 80222fe:	4284      	cmp	r4, r0
 8022300:	4623      	mov	r3, r4
 8022302:	d807      	bhi.n	8022314 <memmove+0x20>
 8022304:	1e43      	subs	r3, r0, #1
 8022306:	42a1      	cmp	r1, r4
 8022308:	d008      	beq.n	802231c <memmove+0x28>
 802230a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802230e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022312:	e7f8      	b.n	8022306 <memmove+0x12>
 8022314:	4402      	add	r2, r0
 8022316:	4601      	mov	r1, r0
 8022318:	428a      	cmp	r2, r1
 802231a:	d100      	bne.n	802231e <memmove+0x2a>
 802231c:	bd10      	pop	{r4, pc}
 802231e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022326:	e7f7      	b.n	8022318 <memmove+0x24>

08022328 <__assert_func>:
 8022328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802232a:	4614      	mov	r4, r2
 802232c:	461a      	mov	r2, r3
 802232e:	4b09      	ldr	r3, [pc, #36]	; (8022354 <__assert_func+0x2c>)
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	4605      	mov	r5, r0
 8022334:	68d8      	ldr	r0, [r3, #12]
 8022336:	b14c      	cbz	r4, 802234c <__assert_func+0x24>
 8022338:	4b07      	ldr	r3, [pc, #28]	; (8022358 <__assert_func+0x30>)
 802233a:	9100      	str	r1, [sp, #0]
 802233c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022340:	4906      	ldr	r1, [pc, #24]	; (802235c <__assert_func+0x34>)
 8022342:	462b      	mov	r3, r5
 8022344:	f000 f80e 	bl	8022364 <fiprintf>
 8022348:	f000 f81e 	bl	8022388 <abort>
 802234c:	4b04      	ldr	r3, [pc, #16]	; (8022360 <__assert_func+0x38>)
 802234e:	461c      	mov	r4, r3
 8022350:	e7f3      	b.n	802233a <__assert_func+0x12>
 8022352:	bf00      	nop
 8022354:	20000418 	.word	0x20000418
 8022358:	08023aef 	.word	0x08023aef
 802235c:	08023afc 	.word	0x08023afc
 8022360:	08023b2a 	.word	0x08023b2a

08022364 <fiprintf>:
 8022364:	b40e      	push	{r1, r2, r3}
 8022366:	b503      	push	{r0, r1, lr}
 8022368:	4601      	mov	r1, r0
 802236a:	ab03      	add	r3, sp, #12
 802236c:	4805      	ldr	r0, [pc, #20]	; (8022384 <fiprintf+0x20>)
 802236e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022372:	6800      	ldr	r0, [r0, #0]
 8022374:	9301      	str	r3, [sp, #4]
 8022376:	f000 f837 	bl	80223e8 <_vfiprintf_r>
 802237a:	b002      	add	sp, #8
 802237c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022380:	b003      	add	sp, #12
 8022382:	4770      	bx	lr
 8022384:	20000418 	.word	0x20000418

08022388 <abort>:
 8022388:	b508      	push	{r3, lr}
 802238a:	2006      	movs	r0, #6
 802238c:	f000 fa04 	bl	8022798 <raise>
 8022390:	2001      	movs	r0, #1
 8022392:	f7e6 fed1 	bl	8009138 <_exit>

08022396 <__sfputc_r>:
 8022396:	6893      	ldr	r3, [r2, #8]
 8022398:	3b01      	subs	r3, #1
 802239a:	2b00      	cmp	r3, #0
 802239c:	b410      	push	{r4}
 802239e:	6093      	str	r3, [r2, #8]
 80223a0:	da08      	bge.n	80223b4 <__sfputc_r+0x1e>
 80223a2:	6994      	ldr	r4, [r2, #24]
 80223a4:	42a3      	cmp	r3, r4
 80223a6:	db01      	blt.n	80223ac <__sfputc_r+0x16>
 80223a8:	290a      	cmp	r1, #10
 80223aa:	d103      	bne.n	80223b4 <__sfputc_r+0x1e>
 80223ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80223b0:	f000 b934 	b.w	802261c <__swbuf_r>
 80223b4:	6813      	ldr	r3, [r2, #0]
 80223b6:	1c58      	adds	r0, r3, #1
 80223b8:	6010      	str	r0, [r2, #0]
 80223ba:	7019      	strb	r1, [r3, #0]
 80223bc:	4608      	mov	r0, r1
 80223be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80223c2:	4770      	bx	lr

080223c4 <__sfputs_r>:
 80223c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223c6:	4606      	mov	r6, r0
 80223c8:	460f      	mov	r7, r1
 80223ca:	4614      	mov	r4, r2
 80223cc:	18d5      	adds	r5, r2, r3
 80223ce:	42ac      	cmp	r4, r5
 80223d0:	d101      	bne.n	80223d6 <__sfputs_r+0x12>
 80223d2:	2000      	movs	r0, #0
 80223d4:	e007      	b.n	80223e6 <__sfputs_r+0x22>
 80223d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80223da:	463a      	mov	r2, r7
 80223dc:	4630      	mov	r0, r6
 80223de:	f7ff ffda 	bl	8022396 <__sfputc_r>
 80223e2:	1c43      	adds	r3, r0, #1
 80223e4:	d1f3      	bne.n	80223ce <__sfputs_r+0xa>
 80223e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080223e8 <_vfiprintf_r>:
 80223e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223ec:	460d      	mov	r5, r1
 80223ee:	b09d      	sub	sp, #116	; 0x74
 80223f0:	4614      	mov	r4, r2
 80223f2:	4698      	mov	r8, r3
 80223f4:	4606      	mov	r6, r0
 80223f6:	b118      	cbz	r0, 8022400 <_vfiprintf_r+0x18>
 80223f8:	6a03      	ldr	r3, [r0, #32]
 80223fa:	b90b      	cbnz	r3, 8022400 <_vfiprintf_r+0x18>
 80223fc:	f7fe f99c 	bl	8020738 <__sinit>
 8022400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022402:	07d9      	lsls	r1, r3, #31
 8022404:	d405      	bmi.n	8022412 <_vfiprintf_r+0x2a>
 8022406:	89ab      	ldrh	r3, [r5, #12]
 8022408:	059a      	lsls	r2, r3, #22
 802240a:	d402      	bmi.n	8022412 <_vfiprintf_r+0x2a>
 802240c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802240e:	f7fe fb3e 	bl	8020a8e <__retarget_lock_acquire_recursive>
 8022412:	89ab      	ldrh	r3, [r5, #12]
 8022414:	071b      	lsls	r3, r3, #28
 8022416:	d501      	bpl.n	802241c <_vfiprintf_r+0x34>
 8022418:	692b      	ldr	r3, [r5, #16]
 802241a:	b99b      	cbnz	r3, 8022444 <_vfiprintf_r+0x5c>
 802241c:	4629      	mov	r1, r5
 802241e:	4630      	mov	r0, r6
 8022420:	f000 f93a 	bl	8022698 <__swsetup_r>
 8022424:	b170      	cbz	r0, 8022444 <_vfiprintf_r+0x5c>
 8022426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022428:	07dc      	lsls	r4, r3, #31
 802242a:	d504      	bpl.n	8022436 <_vfiprintf_r+0x4e>
 802242c:	f04f 30ff 	mov.w	r0, #4294967295
 8022430:	b01d      	add	sp, #116	; 0x74
 8022432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022436:	89ab      	ldrh	r3, [r5, #12]
 8022438:	0598      	lsls	r0, r3, #22
 802243a:	d4f7      	bmi.n	802242c <_vfiprintf_r+0x44>
 802243c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802243e:	f7fe fb27 	bl	8020a90 <__retarget_lock_release_recursive>
 8022442:	e7f3      	b.n	802242c <_vfiprintf_r+0x44>
 8022444:	2300      	movs	r3, #0
 8022446:	9309      	str	r3, [sp, #36]	; 0x24
 8022448:	2320      	movs	r3, #32
 802244a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802244e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022452:	2330      	movs	r3, #48	; 0x30
 8022454:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8022608 <_vfiprintf_r+0x220>
 8022458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802245c:	f04f 0901 	mov.w	r9, #1
 8022460:	4623      	mov	r3, r4
 8022462:	469a      	mov	sl, r3
 8022464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022468:	b10a      	cbz	r2, 802246e <_vfiprintf_r+0x86>
 802246a:	2a25      	cmp	r2, #37	; 0x25
 802246c:	d1f9      	bne.n	8022462 <_vfiprintf_r+0x7a>
 802246e:	ebba 0b04 	subs.w	fp, sl, r4
 8022472:	d00b      	beq.n	802248c <_vfiprintf_r+0xa4>
 8022474:	465b      	mov	r3, fp
 8022476:	4622      	mov	r2, r4
 8022478:	4629      	mov	r1, r5
 802247a:	4630      	mov	r0, r6
 802247c:	f7ff ffa2 	bl	80223c4 <__sfputs_r>
 8022480:	3001      	adds	r0, #1
 8022482:	f000 80a9 	beq.w	80225d8 <_vfiprintf_r+0x1f0>
 8022486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022488:	445a      	add	r2, fp
 802248a:	9209      	str	r2, [sp, #36]	; 0x24
 802248c:	f89a 3000 	ldrb.w	r3, [sl]
 8022490:	2b00      	cmp	r3, #0
 8022492:	f000 80a1 	beq.w	80225d8 <_vfiprintf_r+0x1f0>
 8022496:	2300      	movs	r3, #0
 8022498:	f04f 32ff 	mov.w	r2, #4294967295
 802249c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80224a0:	f10a 0a01 	add.w	sl, sl, #1
 80224a4:	9304      	str	r3, [sp, #16]
 80224a6:	9307      	str	r3, [sp, #28]
 80224a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80224ac:	931a      	str	r3, [sp, #104]	; 0x68
 80224ae:	4654      	mov	r4, sl
 80224b0:	2205      	movs	r2, #5
 80224b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80224b6:	4854      	ldr	r0, [pc, #336]	; (8022608 <_vfiprintf_r+0x220>)
 80224b8:	f7e3 fb1a 	bl	8005af0 <memchr>
 80224bc:	9a04      	ldr	r2, [sp, #16]
 80224be:	b9d8      	cbnz	r0, 80224f8 <_vfiprintf_r+0x110>
 80224c0:	06d1      	lsls	r1, r2, #27
 80224c2:	bf44      	itt	mi
 80224c4:	2320      	movmi	r3, #32
 80224c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80224ca:	0713      	lsls	r3, r2, #28
 80224cc:	bf44      	itt	mi
 80224ce:	232b      	movmi	r3, #43	; 0x2b
 80224d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80224d4:	f89a 3000 	ldrb.w	r3, [sl]
 80224d8:	2b2a      	cmp	r3, #42	; 0x2a
 80224da:	d015      	beq.n	8022508 <_vfiprintf_r+0x120>
 80224dc:	9a07      	ldr	r2, [sp, #28]
 80224de:	4654      	mov	r4, sl
 80224e0:	2000      	movs	r0, #0
 80224e2:	f04f 0c0a 	mov.w	ip, #10
 80224e6:	4621      	mov	r1, r4
 80224e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80224ec:	3b30      	subs	r3, #48	; 0x30
 80224ee:	2b09      	cmp	r3, #9
 80224f0:	d94d      	bls.n	802258e <_vfiprintf_r+0x1a6>
 80224f2:	b1b0      	cbz	r0, 8022522 <_vfiprintf_r+0x13a>
 80224f4:	9207      	str	r2, [sp, #28]
 80224f6:	e014      	b.n	8022522 <_vfiprintf_r+0x13a>
 80224f8:	eba0 0308 	sub.w	r3, r0, r8
 80224fc:	fa09 f303 	lsl.w	r3, r9, r3
 8022500:	4313      	orrs	r3, r2
 8022502:	9304      	str	r3, [sp, #16]
 8022504:	46a2      	mov	sl, r4
 8022506:	e7d2      	b.n	80224ae <_vfiprintf_r+0xc6>
 8022508:	9b03      	ldr	r3, [sp, #12]
 802250a:	1d19      	adds	r1, r3, #4
 802250c:	681b      	ldr	r3, [r3, #0]
 802250e:	9103      	str	r1, [sp, #12]
 8022510:	2b00      	cmp	r3, #0
 8022512:	bfbb      	ittet	lt
 8022514:	425b      	neglt	r3, r3
 8022516:	f042 0202 	orrlt.w	r2, r2, #2
 802251a:	9307      	strge	r3, [sp, #28]
 802251c:	9307      	strlt	r3, [sp, #28]
 802251e:	bfb8      	it	lt
 8022520:	9204      	strlt	r2, [sp, #16]
 8022522:	7823      	ldrb	r3, [r4, #0]
 8022524:	2b2e      	cmp	r3, #46	; 0x2e
 8022526:	d10c      	bne.n	8022542 <_vfiprintf_r+0x15a>
 8022528:	7863      	ldrb	r3, [r4, #1]
 802252a:	2b2a      	cmp	r3, #42	; 0x2a
 802252c:	d134      	bne.n	8022598 <_vfiprintf_r+0x1b0>
 802252e:	9b03      	ldr	r3, [sp, #12]
 8022530:	1d1a      	adds	r2, r3, #4
 8022532:	681b      	ldr	r3, [r3, #0]
 8022534:	9203      	str	r2, [sp, #12]
 8022536:	2b00      	cmp	r3, #0
 8022538:	bfb8      	it	lt
 802253a:	f04f 33ff 	movlt.w	r3, #4294967295
 802253e:	3402      	adds	r4, #2
 8022540:	9305      	str	r3, [sp, #20]
 8022542:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8022618 <_vfiprintf_r+0x230>
 8022546:	7821      	ldrb	r1, [r4, #0]
 8022548:	2203      	movs	r2, #3
 802254a:	4650      	mov	r0, sl
 802254c:	f7e3 fad0 	bl	8005af0 <memchr>
 8022550:	b138      	cbz	r0, 8022562 <_vfiprintf_r+0x17a>
 8022552:	9b04      	ldr	r3, [sp, #16]
 8022554:	eba0 000a 	sub.w	r0, r0, sl
 8022558:	2240      	movs	r2, #64	; 0x40
 802255a:	4082      	lsls	r2, r0
 802255c:	4313      	orrs	r3, r2
 802255e:	3401      	adds	r4, #1
 8022560:	9304      	str	r3, [sp, #16]
 8022562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022566:	4829      	ldr	r0, [pc, #164]	; (802260c <_vfiprintf_r+0x224>)
 8022568:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802256c:	2206      	movs	r2, #6
 802256e:	f7e3 fabf 	bl	8005af0 <memchr>
 8022572:	2800      	cmp	r0, #0
 8022574:	d03f      	beq.n	80225f6 <_vfiprintf_r+0x20e>
 8022576:	4b26      	ldr	r3, [pc, #152]	; (8022610 <_vfiprintf_r+0x228>)
 8022578:	bb1b      	cbnz	r3, 80225c2 <_vfiprintf_r+0x1da>
 802257a:	9b03      	ldr	r3, [sp, #12]
 802257c:	3307      	adds	r3, #7
 802257e:	f023 0307 	bic.w	r3, r3, #7
 8022582:	3308      	adds	r3, #8
 8022584:	9303      	str	r3, [sp, #12]
 8022586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022588:	443b      	add	r3, r7
 802258a:	9309      	str	r3, [sp, #36]	; 0x24
 802258c:	e768      	b.n	8022460 <_vfiprintf_r+0x78>
 802258e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022592:	460c      	mov	r4, r1
 8022594:	2001      	movs	r0, #1
 8022596:	e7a6      	b.n	80224e6 <_vfiprintf_r+0xfe>
 8022598:	2300      	movs	r3, #0
 802259a:	3401      	adds	r4, #1
 802259c:	9305      	str	r3, [sp, #20]
 802259e:	4619      	mov	r1, r3
 80225a0:	f04f 0c0a 	mov.w	ip, #10
 80225a4:	4620      	mov	r0, r4
 80225a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80225aa:	3a30      	subs	r2, #48	; 0x30
 80225ac:	2a09      	cmp	r2, #9
 80225ae:	d903      	bls.n	80225b8 <_vfiprintf_r+0x1d0>
 80225b0:	2b00      	cmp	r3, #0
 80225b2:	d0c6      	beq.n	8022542 <_vfiprintf_r+0x15a>
 80225b4:	9105      	str	r1, [sp, #20]
 80225b6:	e7c4      	b.n	8022542 <_vfiprintf_r+0x15a>
 80225b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80225bc:	4604      	mov	r4, r0
 80225be:	2301      	movs	r3, #1
 80225c0:	e7f0      	b.n	80225a4 <_vfiprintf_r+0x1bc>
 80225c2:	ab03      	add	r3, sp, #12
 80225c4:	9300      	str	r3, [sp, #0]
 80225c6:	462a      	mov	r2, r5
 80225c8:	4b12      	ldr	r3, [pc, #72]	; (8022614 <_vfiprintf_r+0x22c>)
 80225ca:	a904      	add	r1, sp, #16
 80225cc:	4630      	mov	r0, r6
 80225ce:	f3af 8000 	nop.w
 80225d2:	4607      	mov	r7, r0
 80225d4:	1c78      	adds	r0, r7, #1
 80225d6:	d1d6      	bne.n	8022586 <_vfiprintf_r+0x19e>
 80225d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80225da:	07d9      	lsls	r1, r3, #31
 80225dc:	d405      	bmi.n	80225ea <_vfiprintf_r+0x202>
 80225de:	89ab      	ldrh	r3, [r5, #12]
 80225e0:	059a      	lsls	r2, r3, #22
 80225e2:	d402      	bmi.n	80225ea <_vfiprintf_r+0x202>
 80225e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80225e6:	f7fe fa53 	bl	8020a90 <__retarget_lock_release_recursive>
 80225ea:	89ab      	ldrh	r3, [r5, #12]
 80225ec:	065b      	lsls	r3, r3, #25
 80225ee:	f53f af1d 	bmi.w	802242c <_vfiprintf_r+0x44>
 80225f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80225f4:	e71c      	b.n	8022430 <_vfiprintf_r+0x48>
 80225f6:	ab03      	add	r3, sp, #12
 80225f8:	9300      	str	r3, [sp, #0]
 80225fa:	462a      	mov	r2, r5
 80225fc:	4b05      	ldr	r3, [pc, #20]	; (8022614 <_vfiprintf_r+0x22c>)
 80225fe:	a904      	add	r1, sp, #16
 8022600:	4630      	mov	r0, r6
 8022602:	f7ff fca7 	bl	8021f54 <_printf_i>
 8022606:	e7e4      	b.n	80225d2 <_vfiprintf_r+0x1ea>
 8022608:	08023abc 	.word	0x08023abc
 802260c:	08023ac6 	.word	0x08023ac6
 8022610:	00000000 	.word	0x00000000
 8022614:	080223c5 	.word	0x080223c5
 8022618:	08023ac2 	.word	0x08023ac2

0802261c <__swbuf_r>:
 802261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802261e:	460e      	mov	r6, r1
 8022620:	4614      	mov	r4, r2
 8022622:	4605      	mov	r5, r0
 8022624:	b118      	cbz	r0, 802262e <__swbuf_r+0x12>
 8022626:	6a03      	ldr	r3, [r0, #32]
 8022628:	b90b      	cbnz	r3, 802262e <__swbuf_r+0x12>
 802262a:	f7fe f885 	bl	8020738 <__sinit>
 802262e:	69a3      	ldr	r3, [r4, #24]
 8022630:	60a3      	str	r3, [r4, #8]
 8022632:	89a3      	ldrh	r3, [r4, #12]
 8022634:	071a      	lsls	r2, r3, #28
 8022636:	d525      	bpl.n	8022684 <__swbuf_r+0x68>
 8022638:	6923      	ldr	r3, [r4, #16]
 802263a:	b31b      	cbz	r3, 8022684 <__swbuf_r+0x68>
 802263c:	6823      	ldr	r3, [r4, #0]
 802263e:	6922      	ldr	r2, [r4, #16]
 8022640:	1a98      	subs	r0, r3, r2
 8022642:	6963      	ldr	r3, [r4, #20]
 8022644:	b2f6      	uxtb	r6, r6
 8022646:	4283      	cmp	r3, r0
 8022648:	4637      	mov	r7, r6
 802264a:	dc04      	bgt.n	8022656 <__swbuf_r+0x3a>
 802264c:	4621      	mov	r1, r4
 802264e:	4628      	mov	r0, r5
 8022650:	f7ff fe28 	bl	80222a4 <_fflush_r>
 8022654:	b9e0      	cbnz	r0, 8022690 <__swbuf_r+0x74>
 8022656:	68a3      	ldr	r3, [r4, #8]
 8022658:	3b01      	subs	r3, #1
 802265a:	60a3      	str	r3, [r4, #8]
 802265c:	6823      	ldr	r3, [r4, #0]
 802265e:	1c5a      	adds	r2, r3, #1
 8022660:	6022      	str	r2, [r4, #0]
 8022662:	701e      	strb	r6, [r3, #0]
 8022664:	6962      	ldr	r2, [r4, #20]
 8022666:	1c43      	adds	r3, r0, #1
 8022668:	429a      	cmp	r2, r3
 802266a:	d004      	beq.n	8022676 <__swbuf_r+0x5a>
 802266c:	89a3      	ldrh	r3, [r4, #12]
 802266e:	07db      	lsls	r3, r3, #31
 8022670:	d506      	bpl.n	8022680 <__swbuf_r+0x64>
 8022672:	2e0a      	cmp	r6, #10
 8022674:	d104      	bne.n	8022680 <__swbuf_r+0x64>
 8022676:	4621      	mov	r1, r4
 8022678:	4628      	mov	r0, r5
 802267a:	f7ff fe13 	bl	80222a4 <_fflush_r>
 802267e:	b938      	cbnz	r0, 8022690 <__swbuf_r+0x74>
 8022680:	4638      	mov	r0, r7
 8022682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022684:	4621      	mov	r1, r4
 8022686:	4628      	mov	r0, r5
 8022688:	f000 f806 	bl	8022698 <__swsetup_r>
 802268c:	2800      	cmp	r0, #0
 802268e:	d0d5      	beq.n	802263c <__swbuf_r+0x20>
 8022690:	f04f 37ff 	mov.w	r7, #4294967295
 8022694:	e7f4      	b.n	8022680 <__swbuf_r+0x64>
	...

08022698 <__swsetup_r>:
 8022698:	b538      	push	{r3, r4, r5, lr}
 802269a:	4b2a      	ldr	r3, [pc, #168]	; (8022744 <__swsetup_r+0xac>)
 802269c:	4605      	mov	r5, r0
 802269e:	6818      	ldr	r0, [r3, #0]
 80226a0:	460c      	mov	r4, r1
 80226a2:	b118      	cbz	r0, 80226ac <__swsetup_r+0x14>
 80226a4:	6a03      	ldr	r3, [r0, #32]
 80226a6:	b90b      	cbnz	r3, 80226ac <__swsetup_r+0x14>
 80226a8:	f7fe f846 	bl	8020738 <__sinit>
 80226ac:	89a3      	ldrh	r3, [r4, #12]
 80226ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80226b2:	0718      	lsls	r0, r3, #28
 80226b4:	d422      	bmi.n	80226fc <__swsetup_r+0x64>
 80226b6:	06d9      	lsls	r1, r3, #27
 80226b8:	d407      	bmi.n	80226ca <__swsetup_r+0x32>
 80226ba:	2309      	movs	r3, #9
 80226bc:	602b      	str	r3, [r5, #0]
 80226be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80226c2:	81a3      	strh	r3, [r4, #12]
 80226c4:	f04f 30ff 	mov.w	r0, #4294967295
 80226c8:	e034      	b.n	8022734 <__swsetup_r+0x9c>
 80226ca:	0758      	lsls	r0, r3, #29
 80226cc:	d512      	bpl.n	80226f4 <__swsetup_r+0x5c>
 80226ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80226d0:	b141      	cbz	r1, 80226e4 <__swsetup_r+0x4c>
 80226d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80226d6:	4299      	cmp	r1, r3
 80226d8:	d002      	beq.n	80226e0 <__swsetup_r+0x48>
 80226da:	4628      	mov	r0, r5
 80226dc:	f7fe f9fc 	bl	8020ad8 <_free_r>
 80226e0:	2300      	movs	r3, #0
 80226e2:	6363      	str	r3, [r4, #52]	; 0x34
 80226e4:	89a3      	ldrh	r3, [r4, #12]
 80226e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80226ea:	81a3      	strh	r3, [r4, #12]
 80226ec:	2300      	movs	r3, #0
 80226ee:	6063      	str	r3, [r4, #4]
 80226f0:	6923      	ldr	r3, [r4, #16]
 80226f2:	6023      	str	r3, [r4, #0]
 80226f4:	89a3      	ldrh	r3, [r4, #12]
 80226f6:	f043 0308 	orr.w	r3, r3, #8
 80226fa:	81a3      	strh	r3, [r4, #12]
 80226fc:	6923      	ldr	r3, [r4, #16]
 80226fe:	b94b      	cbnz	r3, 8022714 <__swsetup_r+0x7c>
 8022700:	89a3      	ldrh	r3, [r4, #12]
 8022702:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802270a:	d003      	beq.n	8022714 <__swsetup_r+0x7c>
 802270c:	4621      	mov	r1, r4
 802270e:	4628      	mov	r0, r5
 8022710:	f000 f884 	bl	802281c <__smakebuf_r>
 8022714:	89a0      	ldrh	r0, [r4, #12]
 8022716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802271a:	f010 0301 	ands.w	r3, r0, #1
 802271e:	d00a      	beq.n	8022736 <__swsetup_r+0x9e>
 8022720:	2300      	movs	r3, #0
 8022722:	60a3      	str	r3, [r4, #8]
 8022724:	6963      	ldr	r3, [r4, #20]
 8022726:	425b      	negs	r3, r3
 8022728:	61a3      	str	r3, [r4, #24]
 802272a:	6923      	ldr	r3, [r4, #16]
 802272c:	b943      	cbnz	r3, 8022740 <__swsetup_r+0xa8>
 802272e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022732:	d1c4      	bne.n	80226be <__swsetup_r+0x26>
 8022734:	bd38      	pop	{r3, r4, r5, pc}
 8022736:	0781      	lsls	r1, r0, #30
 8022738:	bf58      	it	pl
 802273a:	6963      	ldrpl	r3, [r4, #20]
 802273c:	60a3      	str	r3, [r4, #8]
 802273e:	e7f4      	b.n	802272a <__swsetup_r+0x92>
 8022740:	2000      	movs	r0, #0
 8022742:	e7f7      	b.n	8022734 <__swsetup_r+0x9c>
 8022744:	20000418 	.word	0x20000418

08022748 <_raise_r>:
 8022748:	291f      	cmp	r1, #31
 802274a:	b538      	push	{r3, r4, r5, lr}
 802274c:	4604      	mov	r4, r0
 802274e:	460d      	mov	r5, r1
 8022750:	d904      	bls.n	802275c <_raise_r+0x14>
 8022752:	2316      	movs	r3, #22
 8022754:	6003      	str	r3, [r0, #0]
 8022756:	f04f 30ff 	mov.w	r0, #4294967295
 802275a:	bd38      	pop	{r3, r4, r5, pc}
 802275c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802275e:	b112      	cbz	r2, 8022766 <_raise_r+0x1e>
 8022760:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022764:	b94b      	cbnz	r3, 802277a <_raise_r+0x32>
 8022766:	4620      	mov	r0, r4
 8022768:	f000 f830 	bl	80227cc <_getpid_r>
 802276c:	462a      	mov	r2, r5
 802276e:	4601      	mov	r1, r0
 8022770:	4620      	mov	r0, r4
 8022772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022776:	f000 b817 	b.w	80227a8 <_kill_r>
 802277a:	2b01      	cmp	r3, #1
 802277c:	d00a      	beq.n	8022794 <_raise_r+0x4c>
 802277e:	1c59      	adds	r1, r3, #1
 8022780:	d103      	bne.n	802278a <_raise_r+0x42>
 8022782:	2316      	movs	r3, #22
 8022784:	6003      	str	r3, [r0, #0]
 8022786:	2001      	movs	r0, #1
 8022788:	e7e7      	b.n	802275a <_raise_r+0x12>
 802278a:	2400      	movs	r4, #0
 802278c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022790:	4628      	mov	r0, r5
 8022792:	4798      	blx	r3
 8022794:	2000      	movs	r0, #0
 8022796:	e7e0      	b.n	802275a <_raise_r+0x12>

08022798 <raise>:
 8022798:	4b02      	ldr	r3, [pc, #8]	; (80227a4 <raise+0xc>)
 802279a:	4601      	mov	r1, r0
 802279c:	6818      	ldr	r0, [r3, #0]
 802279e:	f7ff bfd3 	b.w	8022748 <_raise_r>
 80227a2:	bf00      	nop
 80227a4:	20000418 	.word	0x20000418

080227a8 <_kill_r>:
 80227a8:	b538      	push	{r3, r4, r5, lr}
 80227aa:	4d07      	ldr	r5, [pc, #28]	; (80227c8 <_kill_r+0x20>)
 80227ac:	2300      	movs	r3, #0
 80227ae:	4604      	mov	r4, r0
 80227b0:	4608      	mov	r0, r1
 80227b2:	4611      	mov	r1, r2
 80227b4:	602b      	str	r3, [r5, #0]
 80227b6:	f7e6 fcaf 	bl	8009118 <_kill>
 80227ba:	1c43      	adds	r3, r0, #1
 80227bc:	d102      	bne.n	80227c4 <_kill_r+0x1c>
 80227be:	682b      	ldr	r3, [r5, #0]
 80227c0:	b103      	cbz	r3, 80227c4 <_kill_r+0x1c>
 80227c2:	6023      	str	r3, [r4, #0]
 80227c4:	bd38      	pop	{r3, r4, r5, pc}
 80227c6:	bf00      	nop
 80227c8:	200147d0 	.word	0x200147d0

080227cc <_getpid_r>:
 80227cc:	f7e6 bc9c 	b.w	8009108 <_getpid>

080227d0 <__swhatbuf_r>:
 80227d0:	b570      	push	{r4, r5, r6, lr}
 80227d2:	460c      	mov	r4, r1
 80227d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227d8:	2900      	cmp	r1, #0
 80227da:	b096      	sub	sp, #88	; 0x58
 80227dc:	4615      	mov	r5, r2
 80227de:	461e      	mov	r6, r3
 80227e0:	da0d      	bge.n	80227fe <__swhatbuf_r+0x2e>
 80227e2:	89a3      	ldrh	r3, [r4, #12]
 80227e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80227e8:	f04f 0100 	mov.w	r1, #0
 80227ec:	bf0c      	ite	eq
 80227ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80227f2:	2340      	movne	r3, #64	; 0x40
 80227f4:	2000      	movs	r0, #0
 80227f6:	6031      	str	r1, [r6, #0]
 80227f8:	602b      	str	r3, [r5, #0]
 80227fa:	b016      	add	sp, #88	; 0x58
 80227fc:	bd70      	pop	{r4, r5, r6, pc}
 80227fe:	466a      	mov	r2, sp
 8022800:	f000 f848 	bl	8022894 <_fstat_r>
 8022804:	2800      	cmp	r0, #0
 8022806:	dbec      	blt.n	80227e2 <__swhatbuf_r+0x12>
 8022808:	9901      	ldr	r1, [sp, #4]
 802280a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802280e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8022812:	4259      	negs	r1, r3
 8022814:	4159      	adcs	r1, r3
 8022816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802281a:	e7eb      	b.n	80227f4 <__swhatbuf_r+0x24>

0802281c <__smakebuf_r>:
 802281c:	898b      	ldrh	r3, [r1, #12]
 802281e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022820:	079d      	lsls	r5, r3, #30
 8022822:	4606      	mov	r6, r0
 8022824:	460c      	mov	r4, r1
 8022826:	d507      	bpl.n	8022838 <__smakebuf_r+0x1c>
 8022828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802282c:	6023      	str	r3, [r4, #0]
 802282e:	6123      	str	r3, [r4, #16]
 8022830:	2301      	movs	r3, #1
 8022832:	6163      	str	r3, [r4, #20]
 8022834:	b002      	add	sp, #8
 8022836:	bd70      	pop	{r4, r5, r6, pc}
 8022838:	ab01      	add	r3, sp, #4
 802283a:	466a      	mov	r2, sp
 802283c:	f7ff ffc8 	bl	80227d0 <__swhatbuf_r>
 8022840:	9900      	ldr	r1, [sp, #0]
 8022842:	4605      	mov	r5, r0
 8022844:	4630      	mov	r0, r6
 8022846:	f7fc ff83 	bl	801f750 <_malloc_r>
 802284a:	b948      	cbnz	r0, 8022860 <__smakebuf_r+0x44>
 802284c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022850:	059a      	lsls	r2, r3, #22
 8022852:	d4ef      	bmi.n	8022834 <__smakebuf_r+0x18>
 8022854:	f023 0303 	bic.w	r3, r3, #3
 8022858:	f043 0302 	orr.w	r3, r3, #2
 802285c:	81a3      	strh	r3, [r4, #12]
 802285e:	e7e3      	b.n	8022828 <__smakebuf_r+0xc>
 8022860:	89a3      	ldrh	r3, [r4, #12]
 8022862:	6020      	str	r0, [r4, #0]
 8022864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022868:	81a3      	strh	r3, [r4, #12]
 802286a:	9b00      	ldr	r3, [sp, #0]
 802286c:	6163      	str	r3, [r4, #20]
 802286e:	9b01      	ldr	r3, [sp, #4]
 8022870:	6120      	str	r0, [r4, #16]
 8022872:	b15b      	cbz	r3, 802288c <__smakebuf_r+0x70>
 8022874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022878:	4630      	mov	r0, r6
 802287a:	f000 f81d 	bl	80228b8 <_isatty_r>
 802287e:	b128      	cbz	r0, 802288c <__smakebuf_r+0x70>
 8022880:	89a3      	ldrh	r3, [r4, #12]
 8022882:	f023 0303 	bic.w	r3, r3, #3
 8022886:	f043 0301 	orr.w	r3, r3, #1
 802288a:	81a3      	strh	r3, [r4, #12]
 802288c:	89a3      	ldrh	r3, [r4, #12]
 802288e:	431d      	orrs	r5, r3
 8022890:	81a5      	strh	r5, [r4, #12]
 8022892:	e7cf      	b.n	8022834 <__smakebuf_r+0x18>

08022894 <_fstat_r>:
 8022894:	b538      	push	{r3, r4, r5, lr}
 8022896:	4d07      	ldr	r5, [pc, #28]	; (80228b4 <_fstat_r+0x20>)
 8022898:	2300      	movs	r3, #0
 802289a:	4604      	mov	r4, r0
 802289c:	4608      	mov	r0, r1
 802289e:	4611      	mov	r1, r2
 80228a0:	602b      	str	r3, [r5, #0]
 80228a2:	f7e6 fc98 	bl	80091d6 <_fstat>
 80228a6:	1c43      	adds	r3, r0, #1
 80228a8:	d102      	bne.n	80228b0 <_fstat_r+0x1c>
 80228aa:	682b      	ldr	r3, [r5, #0]
 80228ac:	b103      	cbz	r3, 80228b0 <_fstat_r+0x1c>
 80228ae:	6023      	str	r3, [r4, #0]
 80228b0:	bd38      	pop	{r3, r4, r5, pc}
 80228b2:	bf00      	nop
 80228b4:	200147d0 	.word	0x200147d0

080228b8 <_isatty_r>:
 80228b8:	b538      	push	{r3, r4, r5, lr}
 80228ba:	4d06      	ldr	r5, [pc, #24]	; (80228d4 <_isatty_r+0x1c>)
 80228bc:	2300      	movs	r3, #0
 80228be:	4604      	mov	r4, r0
 80228c0:	4608      	mov	r0, r1
 80228c2:	602b      	str	r3, [r5, #0]
 80228c4:	f7e6 fc97 	bl	80091f6 <_isatty>
 80228c8:	1c43      	adds	r3, r0, #1
 80228ca:	d102      	bne.n	80228d2 <_isatty_r+0x1a>
 80228cc:	682b      	ldr	r3, [r5, #0]
 80228ce:	b103      	cbz	r3, 80228d2 <_isatty_r+0x1a>
 80228d0:	6023      	str	r3, [r4, #0]
 80228d2:	bd38      	pop	{r3, r4, r5, pc}
 80228d4:	200147d0 	.word	0x200147d0

080228d8 <cosf>:
 80228d8:	ee10 3a10 	vmov	r3, s0
 80228dc:	b507      	push	{r0, r1, r2, lr}
 80228de:	4a1e      	ldr	r2, [pc, #120]	; (8022958 <cosf+0x80>)
 80228e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80228e4:	4293      	cmp	r3, r2
 80228e6:	dc06      	bgt.n	80228f6 <cosf+0x1e>
 80228e8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 802295c <cosf+0x84>
 80228ec:	b003      	add	sp, #12
 80228ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80228f2:	f000 b835 	b.w	8022960 <__kernel_cosf>
 80228f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80228fa:	db04      	blt.n	8022906 <cosf+0x2e>
 80228fc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8022900:	b003      	add	sp, #12
 8022902:	f85d fb04 	ldr.w	pc, [sp], #4
 8022906:	4668      	mov	r0, sp
 8022908:	f000 f8d0 	bl	8022aac <__ieee754_rem_pio2f>
 802290c:	f000 0003 	and.w	r0, r0, #3
 8022910:	2801      	cmp	r0, #1
 8022912:	d009      	beq.n	8022928 <cosf+0x50>
 8022914:	2802      	cmp	r0, #2
 8022916:	d010      	beq.n	802293a <cosf+0x62>
 8022918:	b9b0      	cbnz	r0, 8022948 <cosf+0x70>
 802291a:	eddd 0a01 	vldr	s1, [sp, #4]
 802291e:	ed9d 0a00 	vldr	s0, [sp]
 8022922:	f000 f81d 	bl	8022960 <__kernel_cosf>
 8022926:	e7eb      	b.n	8022900 <cosf+0x28>
 8022928:	eddd 0a01 	vldr	s1, [sp, #4]
 802292c:	ed9d 0a00 	vldr	s0, [sp]
 8022930:	f000 f874 	bl	8022a1c <__kernel_sinf>
 8022934:	eeb1 0a40 	vneg.f32	s0, s0
 8022938:	e7e2      	b.n	8022900 <cosf+0x28>
 802293a:	eddd 0a01 	vldr	s1, [sp, #4]
 802293e:	ed9d 0a00 	vldr	s0, [sp]
 8022942:	f000 f80d 	bl	8022960 <__kernel_cosf>
 8022946:	e7f5      	b.n	8022934 <cosf+0x5c>
 8022948:	eddd 0a01 	vldr	s1, [sp, #4]
 802294c:	ed9d 0a00 	vldr	s0, [sp]
 8022950:	2001      	movs	r0, #1
 8022952:	f000 f863 	bl	8022a1c <__kernel_sinf>
 8022956:	e7d3      	b.n	8022900 <cosf+0x28>
 8022958:	3f490fd8 	.word	0x3f490fd8
 802295c:	00000000 	.word	0x00000000

08022960 <__kernel_cosf>:
 8022960:	ee10 3a10 	vmov	r3, s0
 8022964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022968:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802296c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022970:	da05      	bge.n	802297e <__kernel_cosf+0x1e>
 8022972:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022976:	ee17 2a90 	vmov	r2, s15
 802297a:	2a00      	cmp	r2, #0
 802297c:	d03b      	beq.n	80229f6 <__kernel_cosf+0x96>
 802297e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022982:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80229fc <__kernel_cosf+0x9c>
 8022986:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8022a00 <__kernel_cosf+0xa0>
 802298a:	4a1e      	ldr	r2, [pc, #120]	; (8022a04 <__kernel_cosf+0xa4>)
 802298c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022990:	4293      	cmp	r3, r2
 8022992:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8022a08 <__kernel_cosf+0xa8>
 8022996:	eee6 7a07 	vfma.f32	s15, s12, s14
 802299a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8022a0c <__kernel_cosf+0xac>
 802299e:	eea7 6a87 	vfma.f32	s12, s15, s14
 80229a2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8022a10 <__kernel_cosf+0xb0>
 80229a6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80229aa:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8022a14 <__kernel_cosf+0xb4>
 80229ae:	eea7 6a87 	vfma.f32	s12, s15, s14
 80229b2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80229b6:	ee26 6a07 	vmul.f32	s12, s12, s14
 80229ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80229be:	eee7 0a06 	vfma.f32	s1, s14, s12
 80229c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80229c6:	dc04      	bgt.n	80229d2 <__kernel_cosf+0x72>
 80229c8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80229cc:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80229d0:	4770      	bx	lr
 80229d2:	4a11      	ldr	r2, [pc, #68]	; (8022a18 <__kernel_cosf+0xb8>)
 80229d4:	4293      	cmp	r3, r2
 80229d6:	bfda      	itte	le
 80229d8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80229dc:	ee07 3a10 	vmovle	s14, r3
 80229e0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80229e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80229e8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80229ec:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80229f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80229f4:	4770      	bx	lr
 80229f6:	eeb0 0a66 	vmov.f32	s0, s13
 80229fa:	4770      	bx	lr
 80229fc:	ad47d74e 	.word	0xad47d74e
 8022a00:	310f74f6 	.word	0x310f74f6
 8022a04:	3e999999 	.word	0x3e999999
 8022a08:	b493f27c 	.word	0xb493f27c
 8022a0c:	37d00d01 	.word	0x37d00d01
 8022a10:	bab60b61 	.word	0xbab60b61
 8022a14:	3d2aaaab 	.word	0x3d2aaaab
 8022a18:	3f480000 	.word	0x3f480000

08022a1c <__kernel_sinf>:
 8022a1c:	ee10 3a10 	vmov	r3, s0
 8022a20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022a24:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022a28:	da04      	bge.n	8022a34 <__kernel_sinf+0x18>
 8022a2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022a2e:	ee17 3a90 	vmov	r3, s15
 8022a32:	b35b      	cbz	r3, 8022a8c <__kernel_sinf+0x70>
 8022a34:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022a38:	eddf 7a15 	vldr	s15, [pc, #84]	; 8022a90 <__kernel_sinf+0x74>
 8022a3c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8022a94 <__kernel_sinf+0x78>
 8022a40:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022a44:	eddf 7a14 	vldr	s15, [pc, #80]	; 8022a98 <__kernel_sinf+0x7c>
 8022a48:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022a4c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8022a9c <__kernel_sinf+0x80>
 8022a50:	eea7 6a87 	vfma.f32	s12, s15, s14
 8022a54:	eddf 7a12 	vldr	s15, [pc, #72]	; 8022aa0 <__kernel_sinf+0x84>
 8022a58:	ee60 6a07 	vmul.f32	s13, s0, s14
 8022a5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022a60:	b930      	cbnz	r0, 8022a70 <__kernel_sinf+0x54>
 8022a62:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8022aa4 <__kernel_sinf+0x88>
 8022a66:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022a6a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8022a6e:	4770      	bx	lr
 8022a70:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8022a74:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8022a78:	eee0 7a86 	vfma.f32	s15, s1, s12
 8022a7c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8022a80:	eddf 7a09 	vldr	s15, [pc, #36]	; 8022aa8 <__kernel_sinf+0x8c>
 8022a84:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8022a88:	ee30 0a60 	vsub.f32	s0, s0, s1
 8022a8c:	4770      	bx	lr
 8022a8e:	bf00      	nop
 8022a90:	2f2ec9d3 	.word	0x2f2ec9d3
 8022a94:	b2d72f34 	.word	0xb2d72f34
 8022a98:	3638ef1b 	.word	0x3638ef1b
 8022a9c:	b9500d01 	.word	0xb9500d01
 8022aa0:	3c088889 	.word	0x3c088889
 8022aa4:	be2aaaab 	.word	0xbe2aaaab
 8022aa8:	3e2aaaab 	.word	0x3e2aaaab

08022aac <__ieee754_rem_pio2f>:
 8022aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022aae:	ee10 6a10 	vmov	r6, s0
 8022ab2:	4b86      	ldr	r3, [pc, #536]	; (8022ccc <__ieee754_rem_pio2f+0x220>)
 8022ab4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8022ab8:	429d      	cmp	r5, r3
 8022aba:	b087      	sub	sp, #28
 8022abc:	4604      	mov	r4, r0
 8022abe:	dc05      	bgt.n	8022acc <__ieee754_rem_pio2f+0x20>
 8022ac0:	2300      	movs	r3, #0
 8022ac2:	ed80 0a00 	vstr	s0, [r0]
 8022ac6:	6043      	str	r3, [r0, #4]
 8022ac8:	2000      	movs	r0, #0
 8022aca:	e020      	b.n	8022b0e <__ieee754_rem_pio2f+0x62>
 8022acc:	4b80      	ldr	r3, [pc, #512]	; (8022cd0 <__ieee754_rem_pio2f+0x224>)
 8022ace:	429d      	cmp	r5, r3
 8022ad0:	dc38      	bgt.n	8022b44 <__ieee754_rem_pio2f+0x98>
 8022ad2:	2e00      	cmp	r6, #0
 8022ad4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8022cd4 <__ieee754_rem_pio2f+0x228>
 8022ad8:	4b7f      	ldr	r3, [pc, #508]	; (8022cd8 <__ieee754_rem_pio2f+0x22c>)
 8022ada:	f025 050f 	bic.w	r5, r5, #15
 8022ade:	dd18      	ble.n	8022b12 <__ieee754_rem_pio2f+0x66>
 8022ae0:	429d      	cmp	r5, r3
 8022ae2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8022ae6:	bf09      	itett	eq
 8022ae8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8022cdc <__ieee754_rem_pio2f+0x230>
 8022aec:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8022ce0 <__ieee754_rem_pio2f+0x234>
 8022af0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8022af4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8022ce4 <__ieee754_rem_pio2f+0x238>
 8022af8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8022afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022b00:	edc0 6a00 	vstr	s13, [r0]
 8022b04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022b08:	edc0 7a01 	vstr	s15, [r0, #4]
 8022b0c:	2001      	movs	r0, #1
 8022b0e:	b007      	add	sp, #28
 8022b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b12:	429d      	cmp	r5, r3
 8022b14:	ee70 7a07 	vadd.f32	s15, s0, s14
 8022b18:	bf09      	itett	eq
 8022b1a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8022cdc <__ieee754_rem_pio2f+0x230>
 8022b1e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8022ce0 <__ieee754_rem_pio2f+0x234>
 8022b22:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8022b26:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8022ce4 <__ieee754_rem_pio2f+0x238>
 8022b2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8022b2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022b32:	edc0 6a00 	vstr	s13, [r0]
 8022b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b3a:	edc0 7a01 	vstr	s15, [r0, #4]
 8022b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8022b42:	e7e4      	b.n	8022b0e <__ieee754_rem_pio2f+0x62>
 8022b44:	4b68      	ldr	r3, [pc, #416]	; (8022ce8 <__ieee754_rem_pio2f+0x23c>)
 8022b46:	429d      	cmp	r5, r3
 8022b48:	dc71      	bgt.n	8022c2e <__ieee754_rem_pio2f+0x182>
 8022b4a:	f000 f8db 	bl	8022d04 <fabsf>
 8022b4e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8022cec <__ieee754_rem_pio2f+0x240>
 8022b52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022b56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022b62:	ee17 0a90 	vmov	r0, s15
 8022b66:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8022cd4 <__ieee754_rem_pio2f+0x228>
 8022b6a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8022b6e:	281f      	cmp	r0, #31
 8022b70:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8022ce0 <__ieee754_rem_pio2f+0x234>
 8022b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022b78:	eeb1 6a47 	vneg.f32	s12, s14
 8022b7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8022b80:	ee16 2a90 	vmov	r2, s13
 8022b84:	dc1c      	bgt.n	8022bc0 <__ieee754_rem_pio2f+0x114>
 8022b86:	495a      	ldr	r1, [pc, #360]	; (8022cf0 <__ieee754_rem_pio2f+0x244>)
 8022b88:	1e47      	subs	r7, r0, #1
 8022b8a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8022b8e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8022b92:	428b      	cmp	r3, r1
 8022b94:	d014      	beq.n	8022bc0 <__ieee754_rem_pio2f+0x114>
 8022b96:	6022      	str	r2, [r4, #0]
 8022b98:	ed94 7a00 	vldr	s14, [r4]
 8022b9c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8022ba0:	2e00      	cmp	r6, #0
 8022ba2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022ba6:	ed84 0a01 	vstr	s0, [r4, #4]
 8022baa:	dab0      	bge.n	8022b0e <__ieee754_rem_pio2f+0x62>
 8022bac:	eeb1 7a47 	vneg.f32	s14, s14
 8022bb0:	eeb1 0a40 	vneg.f32	s0, s0
 8022bb4:	ed84 7a00 	vstr	s14, [r4]
 8022bb8:	ed84 0a01 	vstr	s0, [r4, #4]
 8022bbc:	4240      	negs	r0, r0
 8022bbe:	e7a6      	b.n	8022b0e <__ieee754_rem_pio2f+0x62>
 8022bc0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8022bc4:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8022bc8:	2908      	cmp	r1, #8
 8022bca:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8022bce:	dde2      	ble.n	8022b96 <__ieee754_rem_pio2f+0xea>
 8022bd0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8022cdc <__ieee754_rem_pio2f+0x230>
 8022bd4:	eef0 6a40 	vmov.f32	s13, s0
 8022bd8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8022bdc:	ee70 7a66 	vsub.f32	s15, s0, s13
 8022be0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8022be4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8022ce4 <__ieee754_rem_pio2f+0x238>
 8022be8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8022bec:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8022bf0:	ee15 2a90 	vmov	r2, s11
 8022bf4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8022bf8:	1a5b      	subs	r3, r3, r1
 8022bfa:	2b19      	cmp	r3, #25
 8022bfc:	dc04      	bgt.n	8022c08 <__ieee754_rem_pio2f+0x15c>
 8022bfe:	edc4 5a00 	vstr	s11, [r4]
 8022c02:	eeb0 0a66 	vmov.f32	s0, s13
 8022c06:	e7c7      	b.n	8022b98 <__ieee754_rem_pio2f+0xec>
 8022c08:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8022cf4 <__ieee754_rem_pio2f+0x248>
 8022c0c:	eeb0 0a66 	vmov.f32	s0, s13
 8022c10:	eea6 0a25 	vfma.f32	s0, s12, s11
 8022c14:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8022c18:	eddf 6a37 	vldr	s13, [pc, #220]	; 8022cf8 <__ieee754_rem_pio2f+0x24c>
 8022c1c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8022c20:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8022c24:	ee30 7a67 	vsub.f32	s14, s0, s15
 8022c28:	ed84 7a00 	vstr	s14, [r4]
 8022c2c:	e7b4      	b.n	8022b98 <__ieee754_rem_pio2f+0xec>
 8022c2e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8022c32:	db06      	blt.n	8022c42 <__ieee754_rem_pio2f+0x196>
 8022c34:	ee70 7a40 	vsub.f32	s15, s0, s0
 8022c38:	edc0 7a01 	vstr	s15, [r0, #4]
 8022c3c:	edc0 7a00 	vstr	s15, [r0]
 8022c40:	e742      	b.n	8022ac8 <__ieee754_rem_pio2f+0x1c>
 8022c42:	15ea      	asrs	r2, r5, #23
 8022c44:	3a86      	subs	r2, #134	; 0x86
 8022c46:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8022c4a:	ee07 3a90 	vmov	s15, r3
 8022c4e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8022c52:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8022cfc <__ieee754_rem_pio2f+0x250>
 8022c56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022c5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022c5e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8022c62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022c66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8022c6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022c6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022c72:	ed8d 7a04 	vstr	s14, [sp, #16]
 8022c76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022c7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8022c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c82:	edcd 7a05 	vstr	s15, [sp, #20]
 8022c86:	d11e      	bne.n	8022cc6 <__ieee754_rem_pio2f+0x21a>
 8022c88:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8022c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c90:	bf14      	ite	ne
 8022c92:	2302      	movne	r3, #2
 8022c94:	2301      	moveq	r3, #1
 8022c96:	491a      	ldr	r1, [pc, #104]	; (8022d00 <__ieee754_rem_pio2f+0x254>)
 8022c98:	9101      	str	r1, [sp, #4]
 8022c9a:	2102      	movs	r1, #2
 8022c9c:	9100      	str	r1, [sp, #0]
 8022c9e:	a803      	add	r0, sp, #12
 8022ca0:	4621      	mov	r1, r4
 8022ca2:	f000 f837 	bl	8022d14 <__kernel_rem_pio2f>
 8022ca6:	2e00      	cmp	r6, #0
 8022ca8:	f6bf af31 	bge.w	8022b0e <__ieee754_rem_pio2f+0x62>
 8022cac:	edd4 7a00 	vldr	s15, [r4]
 8022cb0:	eef1 7a67 	vneg.f32	s15, s15
 8022cb4:	edc4 7a00 	vstr	s15, [r4]
 8022cb8:	edd4 7a01 	vldr	s15, [r4, #4]
 8022cbc:	eef1 7a67 	vneg.f32	s15, s15
 8022cc0:	edc4 7a01 	vstr	s15, [r4, #4]
 8022cc4:	e77a      	b.n	8022bbc <__ieee754_rem_pio2f+0x110>
 8022cc6:	2303      	movs	r3, #3
 8022cc8:	e7e5      	b.n	8022c96 <__ieee754_rem_pio2f+0x1ea>
 8022cca:	bf00      	nop
 8022ccc:	3f490fd8 	.word	0x3f490fd8
 8022cd0:	4016cbe3 	.word	0x4016cbe3
 8022cd4:	3fc90f80 	.word	0x3fc90f80
 8022cd8:	3fc90fd0 	.word	0x3fc90fd0
 8022cdc:	37354400 	.word	0x37354400
 8022ce0:	37354443 	.word	0x37354443
 8022ce4:	2e85a308 	.word	0x2e85a308
 8022ce8:	43490f80 	.word	0x43490f80
 8022cec:	3f22f984 	.word	0x3f22f984
 8022cf0:	08023b2c 	.word	0x08023b2c
 8022cf4:	2e85a300 	.word	0x2e85a300
 8022cf8:	248d3132 	.word	0x248d3132
 8022cfc:	43800000 	.word	0x43800000
 8022d00:	08023bac 	.word	0x08023bac

08022d04 <fabsf>:
 8022d04:	ee10 3a10 	vmov	r3, s0
 8022d08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022d0c:	ee00 3a10 	vmov	s0, r3
 8022d10:	4770      	bx	lr
	...

08022d14 <__kernel_rem_pio2f>:
 8022d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d18:	ed2d 8b04 	vpush	{d8-d9}
 8022d1c:	b0d9      	sub	sp, #356	; 0x164
 8022d1e:	4688      	mov	r8, r1
 8022d20:	9002      	str	r0, [sp, #8]
 8022d22:	49b8      	ldr	r1, [pc, #736]	; (8023004 <__kernel_rem_pio2f+0x2f0>)
 8022d24:	9866      	ldr	r0, [sp, #408]	; 0x198
 8022d26:	9301      	str	r3, [sp, #4]
 8022d28:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8022d2c:	9901      	ldr	r1, [sp, #4]
 8022d2e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8022d30:	f101 3bff 	add.w	fp, r1, #4294967295
 8022d34:	1d11      	adds	r1, r2, #4
 8022d36:	db25      	blt.n	8022d84 <__kernel_rem_pio2f+0x70>
 8022d38:	1ed0      	subs	r0, r2, #3
 8022d3a:	bf48      	it	mi
 8022d3c:	1d10      	addmi	r0, r2, #4
 8022d3e:	10c0      	asrs	r0, r0, #3
 8022d40:	1c45      	adds	r5, r0, #1
 8022d42:	00e9      	lsls	r1, r5, #3
 8022d44:	eba0 070b 	sub.w	r7, r0, fp
 8022d48:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8023014 <__kernel_rem_pio2f+0x300>
 8022d4c:	9103      	str	r1, [sp, #12]
 8022d4e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8022d52:	eb0a 0c0b 	add.w	ip, sl, fp
 8022d56:	ae1c      	add	r6, sp, #112	; 0x70
 8022d58:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8022d5c:	2400      	movs	r4, #0
 8022d5e:	4564      	cmp	r4, ip
 8022d60:	dd12      	ble.n	8022d88 <__kernel_rem_pio2f+0x74>
 8022d62:	9901      	ldr	r1, [sp, #4]
 8022d64:	ac1c      	add	r4, sp, #112	; 0x70
 8022d66:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022d6a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8022d6e:	f04f 0c00 	mov.w	ip, #0
 8022d72:	45d4      	cmp	ip, sl
 8022d74:	dc27      	bgt.n	8022dc6 <__kernel_rem_pio2f+0xb2>
 8022d76:	f8dd e008 	ldr.w	lr, [sp, #8]
 8022d7a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8023014 <__kernel_rem_pio2f+0x300>
 8022d7e:	4627      	mov	r7, r4
 8022d80:	2600      	movs	r6, #0
 8022d82:	e016      	b.n	8022db2 <__kernel_rem_pio2f+0x9e>
 8022d84:	2000      	movs	r0, #0
 8022d86:	e7db      	b.n	8022d40 <__kernel_rem_pio2f+0x2c>
 8022d88:	42e7      	cmn	r7, r4
 8022d8a:	bf5d      	ittte	pl
 8022d8c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8022d90:	ee07 1a90 	vmovpl	s15, r1
 8022d94:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8022d98:	eef0 7a47 	vmovmi.f32	s15, s14
 8022d9c:	ece6 7a01 	vstmia	r6!, {s15}
 8022da0:	3401      	adds	r4, #1
 8022da2:	e7dc      	b.n	8022d5e <__kernel_rem_pio2f+0x4a>
 8022da4:	ecfe 6a01 	vldmia	lr!, {s13}
 8022da8:	ed97 7a00 	vldr	s14, [r7]
 8022dac:	eee6 7a87 	vfma.f32	s15, s13, s14
 8022db0:	3601      	adds	r6, #1
 8022db2:	455e      	cmp	r6, fp
 8022db4:	f1a7 0704 	sub.w	r7, r7, #4
 8022db8:	ddf4      	ble.n	8022da4 <__kernel_rem_pio2f+0x90>
 8022dba:	ece9 7a01 	vstmia	r9!, {s15}
 8022dbe:	f10c 0c01 	add.w	ip, ip, #1
 8022dc2:	3404      	adds	r4, #4
 8022dc4:	e7d5      	b.n	8022d72 <__kernel_rem_pio2f+0x5e>
 8022dc6:	a908      	add	r1, sp, #32
 8022dc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022dcc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8022dd0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8023010 <__kernel_rem_pio2f+0x2fc>
 8022dd4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 802300c <__kernel_rem_pio2f+0x2f8>
 8022dd8:	9105      	str	r1, [sp, #20]
 8022dda:	9304      	str	r3, [sp, #16]
 8022ddc:	4656      	mov	r6, sl
 8022dde:	00b3      	lsls	r3, r6, #2
 8022de0:	9306      	str	r3, [sp, #24]
 8022de2:	ab58      	add	r3, sp, #352	; 0x160
 8022de4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8022de8:	ac08      	add	r4, sp, #32
 8022dea:	ab44      	add	r3, sp, #272	; 0x110
 8022dec:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8022df0:	46a4      	mov	ip, r4
 8022df2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8022df6:	4637      	mov	r7, r6
 8022df8:	2f00      	cmp	r7, #0
 8022dfa:	f1a0 0004 	sub.w	r0, r0, #4
 8022dfe:	dc4a      	bgt.n	8022e96 <__kernel_rem_pio2f+0x182>
 8022e00:	4628      	mov	r0, r5
 8022e02:	9207      	str	r2, [sp, #28]
 8022e04:	f000 f9f8 	bl	80231f8 <scalbnf>
 8022e08:	eeb0 8a40 	vmov.f32	s16, s0
 8022e0c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8022e10:	ee28 0a00 	vmul.f32	s0, s16, s0
 8022e14:	f000 fa56 	bl	80232c4 <floorf>
 8022e18:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8022e1c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8022e20:	2d00      	cmp	r5, #0
 8022e22:	9a07      	ldr	r2, [sp, #28]
 8022e24:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8022e28:	ee17 9a90 	vmov	r9, s15
 8022e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022e30:	ee38 8a67 	vsub.f32	s16, s16, s15
 8022e34:	dd41      	ble.n	8022eba <__kernel_rem_pio2f+0x1a6>
 8022e36:	f106 3cff 	add.w	ip, r6, #4294967295
 8022e3a:	ab08      	add	r3, sp, #32
 8022e3c:	f1c5 0e08 	rsb	lr, r5, #8
 8022e40:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8022e44:	fa47 f00e 	asr.w	r0, r7, lr
 8022e48:	4481      	add	r9, r0
 8022e4a:	fa00 f00e 	lsl.w	r0, r0, lr
 8022e4e:	1a3f      	subs	r7, r7, r0
 8022e50:	f1c5 0007 	rsb	r0, r5, #7
 8022e54:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8022e58:	4107      	asrs	r7, r0
 8022e5a:	2f00      	cmp	r7, #0
 8022e5c:	dd3c      	ble.n	8022ed8 <__kernel_rem_pio2f+0x1c4>
 8022e5e:	f04f 0e00 	mov.w	lr, #0
 8022e62:	f109 0901 	add.w	r9, r9, #1
 8022e66:	4671      	mov	r1, lr
 8022e68:	4576      	cmp	r6, lr
 8022e6a:	dc67      	bgt.n	8022f3c <__kernel_rem_pio2f+0x228>
 8022e6c:	2d00      	cmp	r5, #0
 8022e6e:	dd03      	ble.n	8022e78 <__kernel_rem_pio2f+0x164>
 8022e70:	2d01      	cmp	r5, #1
 8022e72:	d074      	beq.n	8022f5e <__kernel_rem_pio2f+0x24a>
 8022e74:	2d02      	cmp	r5, #2
 8022e76:	d07b      	beq.n	8022f70 <__kernel_rem_pio2f+0x25c>
 8022e78:	2f02      	cmp	r7, #2
 8022e7a:	d12d      	bne.n	8022ed8 <__kernel_rem_pio2f+0x1c4>
 8022e7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8022e80:	ee30 8a48 	vsub.f32	s16, s0, s16
 8022e84:	b341      	cbz	r1, 8022ed8 <__kernel_rem_pio2f+0x1c4>
 8022e86:	4628      	mov	r0, r5
 8022e88:	9207      	str	r2, [sp, #28]
 8022e8a:	f000 f9b5 	bl	80231f8 <scalbnf>
 8022e8e:	9a07      	ldr	r2, [sp, #28]
 8022e90:	ee38 8a40 	vsub.f32	s16, s16, s0
 8022e94:	e020      	b.n	8022ed8 <__kernel_rem_pio2f+0x1c4>
 8022e96:	ee60 7a28 	vmul.f32	s15, s0, s17
 8022e9a:	3f01      	subs	r7, #1
 8022e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022ea4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8022ea8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8022eac:	ecac 0a01 	vstmia	ip!, {s0}
 8022eb0:	ed90 0a00 	vldr	s0, [r0]
 8022eb4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8022eb8:	e79e      	b.n	8022df8 <__kernel_rem_pio2f+0xe4>
 8022eba:	d105      	bne.n	8022ec8 <__kernel_rem_pio2f+0x1b4>
 8022ebc:	1e70      	subs	r0, r6, #1
 8022ebe:	ab08      	add	r3, sp, #32
 8022ec0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8022ec4:	11ff      	asrs	r7, r7, #7
 8022ec6:	e7c8      	b.n	8022e5a <__kernel_rem_pio2f+0x146>
 8022ec8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022ecc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8022ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ed4:	da30      	bge.n	8022f38 <__kernel_rem_pio2f+0x224>
 8022ed6:	2700      	movs	r7, #0
 8022ed8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8022edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ee0:	f040 809a 	bne.w	8023018 <__kernel_rem_pio2f+0x304>
 8022ee4:	1e74      	subs	r4, r6, #1
 8022ee6:	46a4      	mov	ip, r4
 8022ee8:	2100      	movs	r1, #0
 8022eea:	45d4      	cmp	ip, sl
 8022eec:	da47      	bge.n	8022f7e <__kernel_rem_pio2f+0x26a>
 8022eee:	2900      	cmp	r1, #0
 8022ef0:	d063      	beq.n	8022fba <__kernel_rem_pio2f+0x2a6>
 8022ef2:	ab08      	add	r3, sp, #32
 8022ef4:	3d08      	subs	r5, #8
 8022ef6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d07f      	beq.n	8022ffe <__kernel_rem_pio2f+0x2ea>
 8022efe:	4628      	mov	r0, r5
 8022f00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8022f04:	f000 f978 	bl	80231f8 <scalbnf>
 8022f08:	1c63      	adds	r3, r4, #1
 8022f0a:	aa44      	add	r2, sp, #272	; 0x110
 8022f0c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8023010 <__kernel_rem_pio2f+0x2fc>
 8022f10:	0099      	lsls	r1, r3, #2
 8022f12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022f16:	4623      	mov	r3, r4
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	f280 80ad 	bge.w	8023078 <__kernel_rem_pio2f+0x364>
 8022f1e:	4623      	mov	r3, r4
 8022f20:	2b00      	cmp	r3, #0
 8022f22:	f2c0 80cb 	blt.w	80230bc <__kernel_rem_pio2f+0x3a8>
 8022f26:	aa44      	add	r2, sp, #272	; 0x110
 8022f28:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022f2c:	4e36      	ldr	r6, [pc, #216]	; (8023008 <__kernel_rem_pio2f+0x2f4>)
 8022f2e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8023014 <__kernel_rem_pio2f+0x300>
 8022f32:	2000      	movs	r0, #0
 8022f34:	1ae2      	subs	r2, r4, r3
 8022f36:	e0b6      	b.n	80230a6 <__kernel_rem_pio2f+0x392>
 8022f38:	2702      	movs	r7, #2
 8022f3a:	e790      	b.n	8022e5e <__kernel_rem_pio2f+0x14a>
 8022f3c:	6820      	ldr	r0, [r4, #0]
 8022f3e:	b949      	cbnz	r1, 8022f54 <__kernel_rem_pio2f+0x240>
 8022f40:	b118      	cbz	r0, 8022f4a <__kernel_rem_pio2f+0x236>
 8022f42:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022f46:	6020      	str	r0, [r4, #0]
 8022f48:	2001      	movs	r0, #1
 8022f4a:	f10e 0e01 	add.w	lr, lr, #1
 8022f4e:	3404      	adds	r4, #4
 8022f50:	4601      	mov	r1, r0
 8022f52:	e789      	b.n	8022e68 <__kernel_rem_pio2f+0x154>
 8022f54:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8022f58:	6020      	str	r0, [r4, #0]
 8022f5a:	4608      	mov	r0, r1
 8022f5c:	e7f5      	b.n	8022f4a <__kernel_rem_pio2f+0x236>
 8022f5e:	1e74      	subs	r4, r6, #1
 8022f60:	ab08      	add	r3, sp, #32
 8022f62:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8022f66:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8022f6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8022f6e:	e783      	b.n	8022e78 <__kernel_rem_pio2f+0x164>
 8022f70:	1e74      	subs	r4, r6, #1
 8022f72:	ab08      	add	r3, sp, #32
 8022f74:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8022f78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8022f7c:	e7f5      	b.n	8022f6a <__kernel_rem_pio2f+0x256>
 8022f7e:	ab08      	add	r3, sp, #32
 8022f80:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8022f84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022f88:	4301      	orrs	r1, r0
 8022f8a:	e7ae      	b.n	8022eea <__kernel_rem_pio2f+0x1d6>
 8022f8c:	3001      	adds	r0, #1
 8022f8e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8022f92:	2f00      	cmp	r7, #0
 8022f94:	d0fa      	beq.n	8022f8c <__kernel_rem_pio2f+0x278>
 8022f96:	9b06      	ldr	r3, [sp, #24]
 8022f98:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8022f9c:	eb0d 0403 	add.w	r4, sp, r3
 8022fa0:	9b01      	ldr	r3, [sp, #4]
 8022fa2:	18f7      	adds	r7, r6, r3
 8022fa4:	ab1c      	add	r3, sp, #112	; 0x70
 8022fa6:	f106 0c01 	add.w	ip, r6, #1
 8022faa:	3c4c      	subs	r4, #76	; 0x4c
 8022fac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022fb0:	4430      	add	r0, r6
 8022fb2:	4560      	cmp	r0, ip
 8022fb4:	da04      	bge.n	8022fc0 <__kernel_rem_pio2f+0x2ac>
 8022fb6:	4606      	mov	r6, r0
 8022fb8:	e711      	b.n	8022dde <__kernel_rem_pio2f+0xca>
 8022fba:	9c05      	ldr	r4, [sp, #20]
 8022fbc:	2001      	movs	r0, #1
 8022fbe:	e7e6      	b.n	8022f8e <__kernel_rem_pio2f+0x27a>
 8022fc0:	9b04      	ldr	r3, [sp, #16]
 8022fc2:	f8dd e008 	ldr.w	lr, [sp, #8]
 8022fc6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8022fca:	9306      	str	r3, [sp, #24]
 8022fcc:	ee07 3a90 	vmov	s15, r3
 8022fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022fd4:	2600      	movs	r6, #0
 8022fd6:	ece7 7a01 	vstmia	r7!, {s15}
 8022fda:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8023014 <__kernel_rem_pio2f+0x300>
 8022fde:	46b9      	mov	r9, r7
 8022fe0:	455e      	cmp	r6, fp
 8022fe2:	dd04      	ble.n	8022fee <__kernel_rem_pio2f+0x2da>
 8022fe4:	ece4 7a01 	vstmia	r4!, {s15}
 8022fe8:	f10c 0c01 	add.w	ip, ip, #1
 8022fec:	e7e1      	b.n	8022fb2 <__kernel_rem_pio2f+0x29e>
 8022fee:	ecfe 6a01 	vldmia	lr!, {s13}
 8022ff2:	ed39 7a01 	vldmdb	r9!, {s14}
 8022ff6:	3601      	adds	r6, #1
 8022ff8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8022ffc:	e7f0      	b.n	8022fe0 <__kernel_rem_pio2f+0x2cc>
 8022ffe:	3c01      	subs	r4, #1
 8023000:	e777      	b.n	8022ef2 <__kernel_rem_pio2f+0x1de>
 8023002:	bf00      	nop
 8023004:	08023ef0 	.word	0x08023ef0
 8023008:	08023ec4 	.word	0x08023ec4
 802300c:	43800000 	.word	0x43800000
 8023010:	3b800000 	.word	0x3b800000
 8023014:	00000000 	.word	0x00000000
 8023018:	9b03      	ldr	r3, [sp, #12]
 802301a:	eeb0 0a48 	vmov.f32	s0, s16
 802301e:	1a98      	subs	r0, r3, r2
 8023020:	f000 f8ea 	bl	80231f8 <scalbnf>
 8023024:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802300c <__kernel_rem_pio2f+0x2f8>
 8023028:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023030:	db19      	blt.n	8023066 <__kernel_rem_pio2f+0x352>
 8023032:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8023010 <__kernel_rem_pio2f+0x2fc>
 8023036:	ee60 7a27 	vmul.f32	s15, s0, s15
 802303a:	aa08      	add	r2, sp, #32
 802303c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023040:	1c74      	adds	r4, r6, #1
 8023042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023046:	3508      	adds	r5, #8
 8023048:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802304c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023050:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023054:	ee10 3a10 	vmov	r3, s0
 8023058:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802305c:	ee17 3a90 	vmov	r3, s15
 8023060:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8023064:	e74b      	b.n	8022efe <__kernel_rem_pio2f+0x1ea>
 8023066:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802306a:	aa08      	add	r2, sp, #32
 802306c:	ee10 3a10 	vmov	r3, s0
 8023070:	4634      	mov	r4, r6
 8023072:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8023076:	e742      	b.n	8022efe <__kernel_rem_pio2f+0x1ea>
 8023078:	a808      	add	r0, sp, #32
 802307a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802307e:	9001      	str	r0, [sp, #4]
 8023080:	ee07 0a90 	vmov	s15, r0
 8023084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023088:	3b01      	subs	r3, #1
 802308a:	ee67 7a80 	vmul.f32	s15, s15, s0
 802308e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023092:	ed62 7a01 	vstmdb	r2!, {s15}
 8023096:	e73f      	b.n	8022f18 <__kernel_rem_pio2f+0x204>
 8023098:	ecf6 6a01 	vldmia	r6!, {s13}
 802309c:	ecb5 7a01 	vldmia	r5!, {s14}
 80230a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80230a4:	3001      	adds	r0, #1
 80230a6:	4550      	cmp	r0, sl
 80230a8:	dc01      	bgt.n	80230ae <__kernel_rem_pio2f+0x39a>
 80230aa:	4290      	cmp	r0, r2
 80230ac:	ddf4      	ble.n	8023098 <__kernel_rem_pio2f+0x384>
 80230ae:	a858      	add	r0, sp, #352	; 0x160
 80230b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80230b4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80230b8:	3b01      	subs	r3, #1
 80230ba:	e731      	b.n	8022f20 <__kernel_rem_pio2f+0x20c>
 80230bc:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80230be:	2b02      	cmp	r3, #2
 80230c0:	dc09      	bgt.n	80230d6 <__kernel_rem_pio2f+0x3c2>
 80230c2:	2b00      	cmp	r3, #0
 80230c4:	dc2b      	bgt.n	802311e <__kernel_rem_pio2f+0x40a>
 80230c6:	d044      	beq.n	8023152 <__kernel_rem_pio2f+0x43e>
 80230c8:	f009 0007 	and.w	r0, r9, #7
 80230cc:	b059      	add	sp, #356	; 0x164
 80230ce:	ecbd 8b04 	vpop	{d8-d9}
 80230d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230d6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80230d8:	2b03      	cmp	r3, #3
 80230da:	d1f5      	bne.n	80230c8 <__kernel_rem_pio2f+0x3b4>
 80230dc:	aa30      	add	r2, sp, #192	; 0xc0
 80230de:	1f0b      	subs	r3, r1, #4
 80230e0:	4413      	add	r3, r2
 80230e2:	461a      	mov	r2, r3
 80230e4:	4620      	mov	r0, r4
 80230e6:	2800      	cmp	r0, #0
 80230e8:	f1a2 0204 	sub.w	r2, r2, #4
 80230ec:	dc52      	bgt.n	8023194 <__kernel_rem_pio2f+0x480>
 80230ee:	4622      	mov	r2, r4
 80230f0:	2a01      	cmp	r2, #1
 80230f2:	f1a3 0304 	sub.w	r3, r3, #4
 80230f6:	dc5d      	bgt.n	80231b4 <__kernel_rem_pio2f+0x4a0>
 80230f8:	ab30      	add	r3, sp, #192	; 0xc0
 80230fa:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8023014 <__kernel_rem_pio2f+0x300>
 80230fe:	440b      	add	r3, r1
 8023100:	2c01      	cmp	r4, #1
 8023102:	dc67      	bgt.n	80231d4 <__kernel_rem_pio2f+0x4c0>
 8023104:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8023108:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802310c:	2f00      	cmp	r7, #0
 802310e:	d167      	bne.n	80231e0 <__kernel_rem_pio2f+0x4cc>
 8023110:	edc8 6a00 	vstr	s13, [r8]
 8023114:	ed88 7a01 	vstr	s14, [r8, #4]
 8023118:	edc8 7a02 	vstr	s15, [r8, #8]
 802311c:	e7d4      	b.n	80230c8 <__kernel_rem_pio2f+0x3b4>
 802311e:	ab30      	add	r3, sp, #192	; 0xc0
 8023120:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8023014 <__kernel_rem_pio2f+0x300>
 8023124:	440b      	add	r3, r1
 8023126:	4622      	mov	r2, r4
 8023128:	2a00      	cmp	r2, #0
 802312a:	da24      	bge.n	8023176 <__kernel_rem_pio2f+0x462>
 802312c:	b34f      	cbz	r7, 8023182 <__kernel_rem_pio2f+0x46e>
 802312e:	eef1 7a47 	vneg.f32	s15, s14
 8023132:	edc8 7a00 	vstr	s15, [r8]
 8023136:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802313a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802313e:	aa31      	add	r2, sp, #196	; 0xc4
 8023140:	2301      	movs	r3, #1
 8023142:	429c      	cmp	r4, r3
 8023144:	da20      	bge.n	8023188 <__kernel_rem_pio2f+0x474>
 8023146:	b10f      	cbz	r7, 802314c <__kernel_rem_pio2f+0x438>
 8023148:	eef1 7a67 	vneg.f32	s15, s15
 802314c:	edc8 7a01 	vstr	s15, [r8, #4]
 8023150:	e7ba      	b.n	80230c8 <__kernel_rem_pio2f+0x3b4>
 8023152:	ab30      	add	r3, sp, #192	; 0xc0
 8023154:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8023014 <__kernel_rem_pio2f+0x300>
 8023158:	440b      	add	r3, r1
 802315a:	2c00      	cmp	r4, #0
 802315c:	da05      	bge.n	802316a <__kernel_rem_pio2f+0x456>
 802315e:	b10f      	cbz	r7, 8023164 <__kernel_rem_pio2f+0x450>
 8023160:	eef1 7a67 	vneg.f32	s15, s15
 8023164:	edc8 7a00 	vstr	s15, [r8]
 8023168:	e7ae      	b.n	80230c8 <__kernel_rem_pio2f+0x3b4>
 802316a:	ed33 7a01 	vldmdb	r3!, {s14}
 802316e:	3c01      	subs	r4, #1
 8023170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023174:	e7f1      	b.n	802315a <__kernel_rem_pio2f+0x446>
 8023176:	ed73 7a01 	vldmdb	r3!, {s15}
 802317a:	3a01      	subs	r2, #1
 802317c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023180:	e7d2      	b.n	8023128 <__kernel_rem_pio2f+0x414>
 8023182:	eef0 7a47 	vmov.f32	s15, s14
 8023186:	e7d4      	b.n	8023132 <__kernel_rem_pio2f+0x41e>
 8023188:	ecb2 7a01 	vldmia	r2!, {s14}
 802318c:	3301      	adds	r3, #1
 802318e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023192:	e7d6      	b.n	8023142 <__kernel_rem_pio2f+0x42e>
 8023194:	edd2 7a00 	vldr	s15, [r2]
 8023198:	edd2 6a01 	vldr	s13, [r2, #4]
 802319c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80231a0:	3801      	subs	r0, #1
 80231a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80231a6:	ed82 7a00 	vstr	s14, [r2]
 80231aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80231ae:	edc2 7a01 	vstr	s15, [r2, #4]
 80231b2:	e798      	b.n	80230e6 <__kernel_rem_pio2f+0x3d2>
 80231b4:	edd3 7a00 	vldr	s15, [r3]
 80231b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80231bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80231c0:	3a01      	subs	r2, #1
 80231c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80231c6:	ed83 7a00 	vstr	s14, [r3]
 80231ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80231ce:	edc3 7a01 	vstr	s15, [r3, #4]
 80231d2:	e78d      	b.n	80230f0 <__kernel_rem_pio2f+0x3dc>
 80231d4:	ed33 7a01 	vldmdb	r3!, {s14}
 80231d8:	3c01      	subs	r4, #1
 80231da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80231de:	e78f      	b.n	8023100 <__kernel_rem_pio2f+0x3ec>
 80231e0:	eef1 6a66 	vneg.f32	s13, s13
 80231e4:	eeb1 7a47 	vneg.f32	s14, s14
 80231e8:	edc8 6a00 	vstr	s13, [r8]
 80231ec:	ed88 7a01 	vstr	s14, [r8, #4]
 80231f0:	eef1 7a67 	vneg.f32	s15, s15
 80231f4:	e790      	b.n	8023118 <__kernel_rem_pio2f+0x404>
 80231f6:	bf00      	nop

080231f8 <scalbnf>:
 80231f8:	ee10 3a10 	vmov	r3, s0
 80231fc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8023200:	d02b      	beq.n	802325a <scalbnf+0x62>
 8023202:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8023206:	d302      	bcc.n	802320e <scalbnf+0x16>
 8023208:	ee30 0a00 	vadd.f32	s0, s0, s0
 802320c:	4770      	bx	lr
 802320e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8023212:	d123      	bne.n	802325c <scalbnf+0x64>
 8023214:	4b24      	ldr	r3, [pc, #144]	; (80232a8 <scalbnf+0xb0>)
 8023216:	eddf 7a25 	vldr	s15, [pc, #148]	; 80232ac <scalbnf+0xb4>
 802321a:	4298      	cmp	r0, r3
 802321c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023220:	db17      	blt.n	8023252 <scalbnf+0x5a>
 8023222:	ee10 3a10 	vmov	r3, s0
 8023226:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802322a:	3a19      	subs	r2, #25
 802322c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8023230:	4288      	cmp	r0, r1
 8023232:	dd15      	ble.n	8023260 <scalbnf+0x68>
 8023234:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80232b0 <scalbnf+0xb8>
 8023238:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80232b4 <scalbnf+0xbc>
 802323c:	ee10 3a10 	vmov	r3, s0
 8023240:	eeb0 7a67 	vmov.f32	s14, s15
 8023244:	2b00      	cmp	r3, #0
 8023246:	bfb8      	it	lt
 8023248:	eef0 7a66 	vmovlt.f32	s15, s13
 802324c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8023250:	4770      	bx	lr
 8023252:	eddf 7a19 	vldr	s15, [pc, #100]	; 80232b8 <scalbnf+0xc0>
 8023256:	ee27 0a80 	vmul.f32	s0, s15, s0
 802325a:	4770      	bx	lr
 802325c:	0dd2      	lsrs	r2, r2, #23
 802325e:	e7e5      	b.n	802322c <scalbnf+0x34>
 8023260:	4410      	add	r0, r2
 8023262:	28fe      	cmp	r0, #254	; 0xfe
 8023264:	dce6      	bgt.n	8023234 <scalbnf+0x3c>
 8023266:	2800      	cmp	r0, #0
 8023268:	dd06      	ble.n	8023278 <scalbnf+0x80>
 802326a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802326e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8023272:	ee00 3a10 	vmov	s0, r3
 8023276:	4770      	bx	lr
 8023278:	f110 0f16 	cmn.w	r0, #22
 802327c:	da09      	bge.n	8023292 <scalbnf+0x9a>
 802327e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80232b8 <scalbnf+0xc0>
 8023282:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80232bc <scalbnf+0xc4>
 8023286:	ee10 3a10 	vmov	r3, s0
 802328a:	eeb0 7a67 	vmov.f32	s14, s15
 802328e:	2b00      	cmp	r3, #0
 8023290:	e7d9      	b.n	8023246 <scalbnf+0x4e>
 8023292:	3019      	adds	r0, #25
 8023294:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023298:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802329c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80232c0 <scalbnf+0xc8>
 80232a0:	ee07 3a90 	vmov	s15, r3
 80232a4:	e7d7      	b.n	8023256 <scalbnf+0x5e>
 80232a6:	bf00      	nop
 80232a8:	ffff3cb0 	.word	0xffff3cb0
 80232ac:	4c000000 	.word	0x4c000000
 80232b0:	7149f2ca 	.word	0x7149f2ca
 80232b4:	f149f2ca 	.word	0xf149f2ca
 80232b8:	0da24260 	.word	0x0da24260
 80232bc:	8da24260 	.word	0x8da24260
 80232c0:	33000000 	.word	0x33000000

080232c4 <floorf>:
 80232c4:	ee10 3a10 	vmov	r3, s0
 80232c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80232cc:	3a7f      	subs	r2, #127	; 0x7f
 80232ce:	2a16      	cmp	r2, #22
 80232d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80232d4:	dc2a      	bgt.n	802332c <floorf+0x68>
 80232d6:	2a00      	cmp	r2, #0
 80232d8:	da11      	bge.n	80232fe <floorf+0x3a>
 80232da:	eddf 7a18 	vldr	s15, [pc, #96]	; 802333c <floorf+0x78>
 80232de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80232e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80232e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232ea:	dd05      	ble.n	80232f8 <floorf+0x34>
 80232ec:	2b00      	cmp	r3, #0
 80232ee:	da23      	bge.n	8023338 <floorf+0x74>
 80232f0:	4a13      	ldr	r2, [pc, #76]	; (8023340 <floorf+0x7c>)
 80232f2:	2900      	cmp	r1, #0
 80232f4:	bf18      	it	ne
 80232f6:	4613      	movne	r3, r2
 80232f8:	ee00 3a10 	vmov	s0, r3
 80232fc:	4770      	bx	lr
 80232fe:	4911      	ldr	r1, [pc, #68]	; (8023344 <floorf+0x80>)
 8023300:	4111      	asrs	r1, r2
 8023302:	420b      	tst	r3, r1
 8023304:	d0fa      	beq.n	80232fc <floorf+0x38>
 8023306:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802333c <floorf+0x78>
 802330a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802330e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8023312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023316:	ddef      	ble.n	80232f8 <floorf+0x34>
 8023318:	2b00      	cmp	r3, #0
 802331a:	bfbe      	ittt	lt
 802331c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8023320:	fa40 f202 	asrlt.w	r2, r0, r2
 8023324:	189b      	addlt	r3, r3, r2
 8023326:	ea23 0301 	bic.w	r3, r3, r1
 802332a:	e7e5      	b.n	80232f8 <floorf+0x34>
 802332c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8023330:	d3e4      	bcc.n	80232fc <floorf+0x38>
 8023332:	ee30 0a00 	vadd.f32	s0, s0, s0
 8023336:	4770      	bx	lr
 8023338:	2300      	movs	r3, #0
 802333a:	e7dd      	b.n	80232f8 <floorf+0x34>
 802333c:	7149f2ca 	.word	0x7149f2ca
 8023340:	bf800000 	.word	0xbf800000
 8023344:	007fffff 	.word	0x007fffff

08023348 <_init>:
 8023348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802334a:	bf00      	nop
 802334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802334e:	bc08      	pop	{r3}
 8023350:	469e      	mov	lr, r3
 8023352:	4770      	bx	lr

08023354 <_fini>:
 8023354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023356:	bf00      	nop
 8023358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802335a:	bc08      	pop	{r3}
 802335c:	469e      	mov	lr, r3
 802335e:	4770      	bx	lr
