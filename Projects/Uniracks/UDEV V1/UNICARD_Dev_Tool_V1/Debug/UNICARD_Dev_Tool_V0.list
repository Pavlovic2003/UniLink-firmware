
UNICARD_Dev_Tool_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000207ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  0802098c  0802098c  0003098c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021288  08021288  000402a0  2**0
                  CONTENTS
  4 .ARM          00000008  08021288  08021288  00031288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021290  08021290  000402a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021290  08021290  00031290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021294  08021294  00031294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08021298  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000143b8  200002a0  08021538  000402a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014658  08021538  00044658  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000402a0  2**0
                  CONTENTS, READONLY
 12 .comment      0000351b  00000000  00000000  000402d4  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  000437ef  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  00043b2c  2**2
                  CONTENTS, READONLY
 15 .iar.debug_frame 000003bf  00000000  00000000  00043b50  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003ffcd  00000000  00000000  00043f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008d3b  00000000  00000000  00083edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003290  00000000  00000000  0008cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000026a1  00000000  00000000  0008fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000e7d4  00000000  00000000  00092549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003fd1d  00000000  00000000  000a0d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00147f42  00000000  00000000  000e0a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000f934  00000000  00000000  0022897c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000080  00000000  00000000  002382b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a0 	.word	0x200002a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08020974 	.word	0x08020974

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002a4 	.word	0x200002a4
 800021c:	08020974 	.word	0x08020974

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f01f f897 	bl	801f370 <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f01f faf2 	bl	801f834 <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4947      	ldr	r1, [pc, #284]	; (8000378 <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f015 fac5 	bl	80157f4 <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a40      	ldr	r2, [pc, #256]	; (8000378 <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295
 800028c:	2600      	movs	r6, #0
 800028e:	4c3a      	ldr	r4, [pc, #232]	; (8000378 <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d069      	beq.n	800036c <USBPD_CAD_Process+0xee>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d166      	bne.n	800036c <USBPD_CAD_Process+0xee>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f015 fc32 	bl	8015b0c <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e03e      	b.n	800033e <USBPD_CAD_Process+0xc0>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e02f      	b.n	8000344 <USBPD_CAD_Process+0xc6>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6802      	ldr	r2, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	2901      	cmp	r1, #1
 80002f0:	bf0c      	ite	eq
 80002f2:	2102      	moveq	r1, #2
 80002f4:	2101      	movne	r1, #1
 80002f6:	f361 334e 	bfi	r3, r1, #13, #2
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	6800      	ldr	r0, [r0, #0]
 80002fe:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8000302:	9a01      	ldr	r2, [sp, #4]
 8000304:	6803      	ldr	r3, [r0, #0]
 8000306:	f362 1387 	bfi	r3, r2, #6, #2
 800030a:	680a      	ldr	r2, [r1, #0]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	6808      	ldr	r0, [r1, #0]
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000316:	6003      	str	r3, [r0, #0]
 8000318:	6808      	ldr	r0, [r1, #0]
 800031a:	6801      	ldr	r1, [r0, #0]
 800031c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000320:	2800      	cmp	r0, #0
 8000322:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000326:	6800      	ldr	r0, [r0, #0]
 8000328:	6801      	ldr	r1, [r0, #0]
 800032a:	bf0c      	ite	eq
 800032c:	f021 0108 	biceq.w	r1, r1, #8
 8000330:	f041 0108 	orrne.w	r1, r1, #8
 8000334:	6001      	str	r1, [r0, #0]
 8000336:	b2f0      	uxtb	r0, r6
 8000338:	2168      	movs	r1, #104	; 0x68
 800033a:	f000 f90c 	bl	8000556 <USBPD_PE_Notification>
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	b198      	cbz	r0, 800036c <USBPD_CAD_Process+0xee>
 8000344:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8000348:	685f      	ldr	r7, [r3, #4]
 800034a:	9a01      	ldr	r2, [sp, #4]
 800034c:	f89d 1000 	ldrb.w	r1, [sp]
 8000350:	f8d7 c000 	ldr.w	ip, [r7]
 8000354:	b2f0      	uxtb	r0, r6
 8000356:	47e0      	blx	ip
 8000358:	f89d 0000 	ldrb.w	r0, [sp]
 800035c:	2801      	cmp	r0, #1
 800035e:	bf18      	it	ne
 8000360:	2803      	cmpne	r0, #3
 8000362:	d103      	bne.n	800036c <USBPD_CAD_Process+0xee>
 8000364:	2169      	movs	r1, #105	; 0x69
 8000366:	b2f0      	uxtb	r0, r6
 8000368:	f000 f8f5 	bl	8000556 <USBPD_PE_Notification>
 800036c:	1c76      	adds	r6, r6, #1
 800036e:	2e02      	cmp	r6, #2
 8000370:	d98e      	bls.n	8000290 <USBPD_CAD_Process+0x12>
 8000372:	4628      	mov	r0, r5
 8000374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000378 <.text_6>:
 8000378:	200002bc 	.word	0x200002bc

0800037c <USBPD_CAD_AssertRd>:
 800037c:	b510      	push	{r4, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	f016 ff50 	bl	8017224 <USBPDM1_DeAssertRp>
 8000384:	4620      	mov	r0, r4
 8000386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800038a:	f016 bf57 	b.w	801723c <USBPDM1_AssertRd>

0800038e <USBPD_CAD_AssertRp>:
 800038e:	b510      	push	{r4, lr}
 8000390:	4604      	mov	r4, r0
 8000392:	f016 ffd9 	bl	8017348 <USBPDM1_DeAssertRd>
 8000396:	4620      	mov	r0, r4
 8000398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800039c:	f016 beac 	b.w	80170f8 <USBPDM1_AssertRp>

080003a0 <USBPD_CAD_EnterErrorRecovery>:
 80003a0:	f015 bb0a 	b.w	80159b8 <CAD_Enter_ErrorRecovery>

080003a4 <USBPD_CAD_SRC_SetRpResistor>:
 80003a4:	b510      	push	{r4, lr}
 80003a6:	f015 fb63 	bl	8015a70 <CAD_Set_ResistorRp>
 80003aa:	2404      	movs	r4, #4
 80003ac:	b900      	cbnz	r0, 80003b0 <USBPD_CAD_SRC_SetRpResistor+0xc>
 80003ae:	2400      	movs	r4, #0
 80003b0:	4620      	mov	r0, r4
 80003b2:	bd10      	pop	{r4, pc}

080003b4 <USBPD_CAD_SetRpResistor>:
 80003b4:	e7f6      	b.n	80003a4 <USBPD_CAD_SRC_SetRpResistor>

080003b6 <USBPD_CAD_GetMemoryConsumption>:
 80003b6:	2024      	movs	r0, #36	; 0x24
 80003b8:	4770      	bx	lr
	...

080003bc <USBPD_PE_Init>:
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c0:	460e      	mov	r6, r1
 80003c2:	4680      	mov	r8, r0
 80003c4:	6870      	ldr	r0, [r6, #4]
 80003c6:	4617      	mov	r7, r2
 80003c8:	461d      	mov	r5, r3
 80003ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80003ce:	b108      	cbz	r0, 80003d4 <USBPD_PE_Init+0x18>
 80003d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80003d2:	b108      	cbz	r0, 80003d8 <USBPD_PE_Init+0x1c>
 80003d4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80003d6:	b908      	cbnz	r0, 80003dc <USBPD_PE_Init+0x20>
 80003d8:	271b      	movs	r7, #27
 80003da:	e042      	b.n	8000462 <USBPD_PE_Init+0xa6>
 80003dc:	f1b8 0f03 	cmp.w	r8, #3
 80003e0:	bf28      	it	cs
 80003e2:	2717      	movcs	r7, #23
 80003e4:	d23d      	bcs.n	8000462 <USBPD_PE_Init+0xa6>
 80003e6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80003ea:	f01e ffc1 	bl	801f370 <malloc>
 80003ee:	0004      	movs	r4, r0
 80003f0:	bf08      	it	eq
 80003f2:	2716      	moveq	r7, #22
 80003f4:	d035      	beq.n	8000462 <USBPD_PE_Init+0xa6>
 80003f6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80003fa:	f01f fa1b 	bl	801f834 <__aeabi_memclr>
 80003fe:	f8df 09ac 	ldr.w	r0, [pc, #2476]	; 8000dac <.text_47>
 8000402:	4641      	mov	r1, r8
 8000404:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8000408:	6026      	str	r6, [r4, #0]
 800040a:	6067      	str	r7, [r4, #4]
 800040c:	f884 8010 	strb.w	r8, [r4, #16]
 8000410:	60a5      	str	r5, [r4, #8]
 8000412:	f204 438e 	addw	r3, r4, #1166	; 0x48e
 8000416:	f204 2281 	addw	r2, r4, #641	; 0x281
 800041a:	4631      	mov	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f004 fd92 	bl	8004f46 <USBPD_PRL_Init>
 8000422:	0007      	movs	r7, r0
 8000424:	d11d      	bne.n	8000462 <USBPD_PE_Init+0xa6>
 8000426:	6820      	ldr	r0, [r4, #0]
 8000428:	6841      	ldr	r1, [r0, #4]
 800042a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800042e:	2800      	cmp	r0, #0
 8000430:	6860      	ldr	r0, [r4, #4]
 8000432:	6801      	ldr	r1, [r0, #0]
 8000434:	d004      	beq.n	8000440 <USBPD_PE_Init+0x84>
 8000436:	f041 0108 	orr.w	r1, r1, #8
 800043a:	6001      	str	r1, [r0, #0]
 800043c:	2201      	movs	r2, #1
 800043e:	e003      	b.n	8000448 <USBPD_PE_Init+0x8c>
 8000440:	f021 0108 	bic.w	r1, r1, #8
 8000444:	6001      	str	r1, [r0, #0]
 8000446:	2200      	movs	r2, #0
 8000448:	7933      	ldrb	r3, [r6, #4]
 800044a:	f003 0303 	and.w	r3, r3, #3
 800044e:	4611      	mov	r1, r2
 8000450:	4640      	mov	r0, r8
 8000452:	f004 fda6 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000456:	7931      	ldrb	r1, [r6, #4]
 8000458:	f001 0103 	and.w	r1, r1, #3
 800045c:	4640      	mov	r0, r8
 800045e:	f004 fdd1 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000462:	4638      	mov	r0, r7
 8000464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000468 <USBPD_PE_TimerCounter>:
 8000468:	f8df 1940 	ldr.w	r1, [pc, #2368]	; 8000dac <.text_47>
 800046c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000470:	8bc1      	ldrh	r1, [r0, #30]
 8000472:	044a      	lsls	r2, r1, #17
 8000474:	d002      	beq.n	800047c <USBPD_PE_TimerCounter+0x14>
 8000476:	8bc1      	ldrh	r1, [r0, #30]
 8000478:	1e4a      	subs	r2, r1, #1
 800047a:	83c2      	strh	r2, [r0, #30]
 800047c:	8c01      	ldrh	r1, [r0, #32]
 800047e:	044a      	lsls	r2, r1, #17
 8000480:	d002      	beq.n	8000488 <USBPD_PE_TimerCounter+0x20>
 8000482:	8c01      	ldrh	r1, [r0, #32]
 8000484:	1e4a      	subs	r2, r1, #1
 8000486:	8402      	strh	r2, [r0, #32]
 8000488:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 800048a:	044a      	lsls	r2, r1, #17
 800048c:	d002      	beq.n	8000494 <USBPD_PE_TimerCounter+0x2c>
 800048e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 8000490:	1e4a      	subs	r2, r1, #1
 8000492:	84c2      	strh	r2, [r0, #38]	; 0x26
 8000494:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 8000496:	044a      	lsls	r2, r1, #17
 8000498:	d002      	beq.n	80004a0 <USBPD_PE_TimerCounter+0x38>
 800049a:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 800049c:	1e4a      	subs	r2, r1, #1
 800049e:	8442      	strh	r2, [r0, #34]	; 0x22
 80004a0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80004a2:	044a      	lsls	r2, r1, #17
 80004a4:	d002      	beq.n	80004ac <USBPD_PE_TimerCounter+0x44>
 80004a6:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80004a8:	1e4a      	subs	r2, r1, #1
 80004aa:	8482      	strh	r2, [r0, #36]	; 0x24
 80004ac:	4770      	bx	lr

080004ae <USBPD_PE_TimerCounteUpdate>:
 80004ae:	b538      	push	{r3, r4, r5, lr}
 80004b0:	460c      	mov	r4, r1
 80004b2:	f8df 18f8 	ldr.w	r1, [pc, #2296]	; 8000dac <.text_47>
 80004b6:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 80004ba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80004be:	da22      	bge.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004c0:	8be8      	ldrh	r0, [r5, #30]
 80004c2:	0441      	lsls	r1, r0, #17
 80004c4:	d003      	beq.n	80004ce <USBPD_PE_TimerCounteUpdate+0x20>
 80004c6:	8be8      	ldrh	r0, [r5, #30]
 80004c8:	f000 f81e 	bl	8000508 <.text_8>
 80004cc:	83e8      	strh	r0, [r5, #30]
 80004ce:	8c28      	ldrh	r0, [r5, #32]
 80004d0:	0441      	lsls	r1, r0, #17
 80004d2:	d003      	beq.n	80004dc <USBPD_PE_TimerCounteUpdate+0x2e>
 80004d4:	8c28      	ldrh	r0, [r5, #32]
 80004d6:	f000 f817 	bl	8000508 <.text_8>
 80004da:	8428      	strh	r0, [r5, #32]
 80004dc:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80004de:	0441      	lsls	r1, r0, #17
 80004e0:	d003      	beq.n	80004ea <USBPD_PE_TimerCounteUpdate+0x3c>
 80004e2:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80004e4:	f000 f810 	bl	8000508 <.text_8>
 80004e8:	84e8      	strh	r0, [r5, #38]	; 0x26
 80004ea:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80004ec:	0441      	lsls	r1, r0, #17
 80004ee:	d003      	beq.n	80004f8 <USBPD_PE_TimerCounteUpdate+0x4a>
 80004f0:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80004f2:	f000 f809 	bl	8000508 <.text_8>
 80004f6:	8468      	strh	r0, [r5, #34]	; 0x22
 80004f8:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 80004fa:	0441      	lsls	r1, r0, #17
 80004fc:	d003      	beq.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004fe:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8000500:	f000 f802 	bl	8000508 <.text_8>
 8000504:	84a8      	strh	r0, [r5, #36]	; 0x24
 8000506:	bd31      	pop	{r0, r4, r5, pc}

08000508 <.text_8>:
 8000508:	4621      	mov	r1, r4
 800050a:	f000 bef9 	b.w	8001300 <PE_UpdateTimer>

0800050e <USBPD_PE_IsCableConnected>:
 800050e:	f8df 289c 	ldr.w	r2, [pc, #2204]	; 8000dac <.text_47>
 8000512:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000516:	6842      	ldr	r2, [r0, #4]
 8000518:	6813      	ldr	r3, [r2, #0]
 800051a:	f361 330c 	bfi	r3, r1, #12, #1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	2248      	movs	r2, #72	; 0x48
 8000522:	7442      	strb	r2, [r0, #17]
 8000524:	4770      	bx	lr

08000526 <USBPD_PE_StateMachine_Reset>:
 8000526:	f8df 2884 	ldr.w	r2, [pc, #2180]	; 8000dac <.text_47>
 800052a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800052e:	2148      	movs	r1, #72	; 0x48
 8000530:	7441      	strb	r1, [r0, #17]
 8000532:	4770      	bx	lr

08000534 <USBPD_PE_StateMachine_Stop>:
 8000534:	f005 b81f 	b.w	8005576 <USBPD_PRL_Stop>

08000538 <USBPD_PE_StateMachine_DRP>:
 8000538:	f8df 1870 	ldr.w	r1, [pc, #2160]	; 8000dac <.text_47>
 800053c:	4602      	mov	r2, r0
 800053e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	680a      	ldr	r2, [r1, #0]
 8000546:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800054a:	2900      	cmp	r1, #0
 800054c:	bf18      	it	ne
 800054e:	f002 b9ed 	bne.w	800292c <USBPD_PE_StateMachine_SRC>
 8000552:	f001 bbcd 	b.w	8001cf0 <USBPD_PE_StateMachine_SNK>

08000556 <USBPD_PE_Notification>:
 8000556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000558:	2803      	cmp	r0, #3
 800055a:	4604      	mov	r4, r0
 800055c:	460d      	mov	r5, r1
 800055e:	d214      	bcs.n	800058a <__iar_annotation$$tailcall+0x2>
 8000560:	2600      	movs	r6, #0
 8000562:	9600      	str	r6, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	f8df 7848 	ldr.w	r7, [pc, #2120]	; 8000db0 <.text_48>
 800056a:	683e      	ldr	r6, [r7, #0]
 800056c:	462a      	mov	r2, r5
 800056e:	4621      	mov	r1, r4
 8000570:	2009      	movs	r0, #9
 8000572:	47b0      	blx	r6
 8000574:	f8df 2834 	ldr.w	r2, [pc, #2100]	; 8000dac <.text_47>
 8000578:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800057c:	689a      	ldr	r2, [r3, #8]
 800057e:	68d3      	ldr	r3, [r2, #12]
 8000580:	4629      	mov	r1, r5
 8000582:	4620      	mov	r0, r4
 8000584:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

08000588 <__iar_annotation$$tailcall>:
 8000588:	4718      	bx	r3
 800058a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800058c <USBPD_PE_InitVDM_Callback>:
 800058c:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 8000dac <.text_47>
 8000590:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000594:	60c1      	str	r1, [r0, #12]
 8000596:	4770      	bx	lr

08000598 <USBPD_PE_Request_HardReset>:
 8000598:	b580      	push	{r7, lr}
 800059a:	f8df 1810 	ldr.w	r1, [pc, #2064]	; 8000dac <.text_47>
 800059e:	4602      	mov	r2, r0
 80005a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80005a4:	230f      	movs	r3, #15
 80005a6:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
 80005aa:	6889      	ldr	r1, [r1, #8]
 80005ac:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80005ae:	4790      	blx	r2
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd02      	pop	{r1, pc}

080005b4 <USBPD_PE_Request_CableReset>:
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	f000 fbe8 	bl	8000d8a <.text_45>
 80005ba:	6853      	ldr	r3, [r2, #4]
 80005bc:	681c      	ldr	r4, [r3, #0]
 80005be:	f248 7108 	movw	r1, #34568	; 0x8708
 80005c2:	400c      	ands	r4, r1
 80005c4:	f248 3508 	movw	r5, #33544	; 0x8308
 80005c8:	42ac      	cmp	r4, r5
 80005ca:	d105      	bne.n	80005d8 <USBPD_PE_Request_CableReset+0x24>
 80005cc:	6891      	ldr	r1, [r2, #8]
 80005ce:	2399      	movs	r3, #153	; 0x99
 80005d0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 80005d4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80005d6:	4790      	blx	r2
 80005d8:	2010      	movs	r0, #16
 80005da:	bd32      	pop	{r1, r4, r5, pc}

080005dc <USBPD_PE_Request_CtrlMessage>:
 80005dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e0:	4680      	mov	r8, r0
 80005e2:	460c      	mov	r4, r1
 80005e4:	f8df 07c4 	ldr.w	r0, [pc, #1988]	; 8000dac <.text_47>
 80005e8:	b093      	sub	sp, #76	; 0x4c
 80005ea:	4641      	mov	r1, r8
 80005ec:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80005f0:	f8df 17c0 	ldr.w	r1, [pc, #1984]	; 8000db4 <.text_49>
 80005f4:	4617      	mov	r7, r2
 80005f6:	4668      	mov	r0, sp
 80005f8:	224c      	movs	r2, #76	; 0x4c
 80005fa:	f01f f919 	bl	801f830 <__aeabi_memcpy>
 80005fe:	f105 0132 	add.w	r1, r5, #50	; 0x32
 8000602:	2600      	movs	r6, #0
 8000604:	7808      	ldrb	r0, [r1, #0]
 8000606:	b920      	cbnz	r0, 8000612 <USBPD_PE_Request_CtrlMessage+0x36>
 8000608:	6868      	ldr	r0, [r5, #4]
 800060a:	6802      	ldr	r2, [r0, #0]
 800060c:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8000610:	b908      	cbnz	r0, 8000616 <USBPD_PE_Request_CtrlMessage+0x3a>
 8000612:	2603      	movs	r6, #3
 8000614:	e07f      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 8000616:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800061a:	6828      	ldr	r0, [r5, #0]
 800061c:	f8dc e000 	ldr.w	lr, [ip]
 8000620:	6842      	ldr	r2, [r0, #4]
 8000622:	6868      	ldr	r0, [r5, #4]
 8000624:	6803      	ldr	r3, [r0, #0]
 8000626:	f3c3 0080 	ubfx	r0, r3, #2, #1
 800062a:	f3ce 2c02 	ubfx	ip, lr, #8, #3
 800062e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8000632:	f89e 9000 	ldrb.w	r9, [lr]
 8000636:	f009 0903 	and.w	r9, r9, #3
 800063a:	08d2      	lsrs	r2, r2, #3
 800063c:	2800      	cmp	r0, #0
 800063e:	bf07      	ittee	eq
 8000640:	2002      	moveq	r0, #2
 8000642:	2300      	moveq	r3, #0
 8000644:	2000      	movne	r0, #0
 8000646:	2304      	movne	r3, #4
 8000648:	f1bc 0f03 	cmp.w	ip, #3
 800064c:	bf0c      	ite	eq
 800064e:	f04f 0c08 	moveq.w	ip, #8
 8000652:	46b4      	movne	ip, r6
 8000654:	f1b9 0f02 	cmp.w	r9, #2
 8000658:	f002 0201 	and.w	r2, r2, #1
 800065c:	bf0c      	ite	eq
 800065e:	f04f 0e40 	moveq.w	lr, #64	; 0x40
 8000662:	46b6      	movne	lr, r6
 8000664:	4302      	orrs	r2, r0
 8000666:	431a      	orrs	r2, r3
 8000668:	ea4c 0202 	orr.w	r2, ip, r2
 800066c:	ea4e 0202 	orr.w	r2, lr, r2
 8000670:	f012 0f03 	tst.w	r2, #3
 8000674:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000678:	bf18      	it	ne
 800067a:	f042 0210 	orrne.w	r2, r2, #16
 800067e:	f012 0f05 	tst.w	r2, #5
 8000682:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8000686:	bf18      	it	ne
 8000688:	f042 0220 	orrne.w	r2, r2, #32
 800068c:	4002      	ands	r2, r0
 800068e:	4282      	cmp	r2, r0
 8000690:	d118      	bne.n	80006c4 <USBPD_PE_Request_CtrlMessage+0xe8>
 8000692:	2c05      	cmp	r4, #5
 8000694:	704e      	strb	r6, [r1, #1]
 8000696:	f205 225e 	addw	r2, r5, #606	; 0x25e
 800069a:	d02e      	beq.n	80006fa <USBPD_PE_Request_CtrlMessage+0x11e>
 800069c:	2c0b      	cmp	r4, #11
 800069e:	d00e      	beq.n	80006be <USBPD_PE_Request_CtrlMessage+0xe2>
 80006a0:	2c0d      	cmp	r4, #13
 80006a2:	d028      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006a4:	2c11      	cmp	r4, #17
 80006a6:	d00f      	beq.n	80006c8 <USBPD_PE_Request_CtrlMessage+0xec>
 80006a8:	2c12      	cmp	r4, #18
 80006aa:	d012      	beq.n	80006d2 <USBPD_PE_Request_CtrlMessage+0xf6>
 80006ac:	2c14      	cmp	r4, #20
 80006ae:	d012      	beq.n	80006d6 <USBPD_PE_Request_CtrlMessage+0xfa>
 80006b0:	2c15      	cmp	r4, #21
 80006b2:	d017      	beq.n	80006e4 <USBPD_PE_Request_CtrlMessage+0x108>
 80006b4:	2c16      	cmp	r4, #22
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_CtrlMessage+0xf0>
 80006b8:	2c18      	cmp	r4, #24
 80006ba:	d01c      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006bc:	e01f      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006be:	68af      	ldr	r7, [r5, #8]
 80006c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006c2:	b9e0      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006c4:	2602      	movs	r6, #2
 80006c6:	e026      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006c8:	2011      	movs	r0, #17
 80006ca:	e017      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006cc:	2716      	movs	r7, #22
 80006ce:	7017      	strb	r7, [r2, #0]
 80006d0:	e015      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006d2:	2012      	movs	r0, #18
 80006d4:	e012      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006d6:	6828      	ldr	r0, [r5, #0]
 80006d8:	8907      	ldrh	r7, [r0, #8]
 80006da:	f3c7 0080 	ubfx	r0, r7, #2, #1
 80006de:	b970      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006e0:	2610      	movs	r6, #16
 80006e2:	e018      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006e4:	6828      	ldr	r0, [r5, #0]
 80006e6:	8907      	ldrh	r7, [r0, #8]
 80006e8:	f3c7 10c0 	ubfx	r0, r7, #7, #1
 80006ec:	b908      	cbnz	r0, 80006f2 <USBPD_PE_Request_CtrlMessage+0x116>
 80006ee:	2010      	movs	r0, #16
 80006f0:	e012      	b.n	8000718 <USBPD_PE_Request_CtrlMessage+0x13c>
 80006f2:	2015      	movs	r0, #21
 80006f4:	e002      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006f6:	704f      	strb	r7, [r1, #1]
 80006f8:	e001      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006fa:	2005      	movs	r0, #5
 80006fc:	7010      	strb	r0, [r2, #0]
 80006fe:	eb0d 0703 	add.w	r7, sp, r3
 8000702:	7878      	ldrb	r0, [r7, #1]
 8000704:	7050      	strb	r0, [r2, #1]
 8000706:	eb0d 0203 	add.w	r2, sp, r3
 800070a:	7890      	ldrb	r0, [r2, #2]
 800070c:	7008      	strb	r0, [r1, #0]
 800070e:	4640      	mov	r0, r8
 8000710:	68a9      	ldr	r1, [r5, #8]
 8000712:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000714:	4790      	blx	r2
 8000716:	4630      	mov	r0, r6
 8000718:	b013      	add	sp, #76	; 0x4c
 800071a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800071e <USBPD_PE_Request_DataMessage>:
 800071e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000720:	f000 f85f 	bl	80007e2 <.text_20>
 8000724:	b923      	cbnz	r3, 8000730 <USBPD_PE_Request_DataMessage+0x12>
 8000726:	686b      	ldr	r3, [r5, #4]
 8000728:	681f      	ldr	r7, [r3, #0]
 800072a:	f3c7 3300 	ubfx	r3, r7, #12, #1
 800072e:	b90b      	cbnz	r3, 8000734 <USBPD_PE_Request_DataMessage+0x16>
 8000730:	2403      	movs	r4, #3
 8000732:	e01a      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000734:	2300      	movs	r3, #0
 8000736:	7073      	strb	r3, [r6, #1]
 8000738:	2901      	cmp	r1, #1
 800073a:	f240 3302 	movw	r3, #770	; 0x302
 800073e:	f240 7703 	movw	r7, #1795	; 0x703
 8000742:	d004      	beq.n	800074e <USBPD_PE_Request_DataMessage+0x30>
 8000744:	2906      	cmp	r1, #6
 8000746:	d012      	beq.n	800076e <USBPD_PE_Request_DataMessage+0x50>
 8000748:	2907      	cmp	r1, #7
 800074a:	d01a      	beq.n	8000782 <USBPD_PE_Request_DataMessage+0x64>
 800074c:	e025      	b.n	800079a <USBPD_PE_Request_DataMessage+0x7c>
 800074e:	6869      	ldr	r1, [r5, #4]
 8000750:	680a      	ldr	r2, [r1, #0]
 8000752:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8000756:	b141      	cbz	r1, 800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000758:	2101      	movs	r1, #1
 800075a:	f885 125f 	strb.w	r1, [r5, #607]	; 0x25f
 800075e:	2207      	movs	r2, #7
 8000760:	7032      	strb	r2, [r6, #0]
 8000762:	68a9      	ldr	r1, [r5, #8]
 8000764:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000766:	4790      	blx	r2
 8000768:	2400      	movs	r4, #0
 800076a:	4620      	mov	r0, r4
 800076c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800076e:	6869      	ldr	r1, [r5, #4]
 8000770:	6809      	ldr	r1, [r1, #0]
 8000772:	400f      	ands	r7, r1
 8000774:	429f      	cmp	r7, r3
 8000776:	d1f8      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	62aa      	str	r2, [r5, #40]	; 0x28
 800077c:	212b      	movs	r1, #43	; 0x2b
 800077e:	7031      	strb	r1, [r6, #0]
 8000780:	e7ef      	b.n	8000762 <USBPD_PE_Request_DataMessage+0x44>
 8000782:	6869      	ldr	r1, [r5, #4]
 8000784:	6809      	ldr	r1, [r1, #0]
 8000786:	400f      	ands	r7, r1
 8000788:	429f      	cmp	r7, r3
 800078a:	d1ee      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 800078c:	6812      	ldr	r2, [r2, #0]
 800078e:	62aa      	str	r2, [r5, #40]	; 0x28
 8000790:	215d      	movs	r1, #93	; 0x5d
 8000792:	f885 125f 	strb.w	r1, [r5, #607]	; 0x25f
 8000796:	2262      	movs	r2, #98	; 0x62
 8000798:	e7e2      	b.n	8000760 <USBPD_PE_Request_DataMessage+0x42>
 800079a:	2410      	movs	r4, #16
 800079c:	e7e5      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>

0800079e <USBPD_PE_Send_Request>:
 800079e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a0:	f000 f81f 	bl	80007e2 <.text_20>
 80007a4:	b923      	cbnz	r3, 80007b0 <USBPD_PE_Send_Request+0x12>
 80007a6:	686b      	ldr	r3, [r5, #4]
 80007a8:	681f      	ldr	r7, [r3, #0]
 80007aa:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80007ae:	b90b      	cbnz	r3, 80007b4 <USBPD_PE_Send_Request+0x16>
 80007b0:	2403      	movs	r4, #3
 80007b2:	e014      	b.n	80007de <USBPD_PE_Send_Request+0x40>
 80007b4:	686f      	ldr	r7, [r5, #4]
 80007b6:	683f      	ldr	r7, [r7, #0]
 80007b8:	f240 7304 	movw	r3, #1796	; 0x704
 80007bc:	403b      	ands	r3, r7
 80007be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80007c2:	d10c      	bne.n	80007de <USBPD_PE_Send_Request+0x40>
 80007c4:	2445      	movs	r4, #69	; 0x45
 80007c6:	7034      	strb	r4, [r6, #0]
 80007c8:	61a9      	str	r1, [r5, #24]
 80007ca:	2400      	movs	r4, #0
 80007cc:	6969      	ldr	r1, [r5, #20]
 80007ce:	f362 01c4 	bfi	r1, r2, #3, #2
 80007d2:	6169      	str	r1, [r5, #20]
 80007d4:	2200      	movs	r2, #0
 80007d6:	7072      	strb	r2, [r6, #1]
 80007d8:	68a9      	ldr	r1, [r5, #8]
 80007da:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80007dc:	4790      	blx	r2
 80007de:	4620      	mov	r0, r4
 80007e0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080007e2 <.text_20>:
 80007e2:	f8df 3be4 	ldr.w	r3, [pc, #3044]	; 80013c8 <.text_70>
 80007e6:	4604      	mov	r4, r0
 80007e8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80007ec:	f105 0632 	add.w	r6, r5, #50	; 0x32
 80007f0:	2402      	movs	r4, #2
 80007f2:	7833      	ldrb	r3, [r6, #0]
 80007f4:	4770      	bx	lr

080007f6 <USBPD_PE_SendExtendedMessage>:
 80007f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007fa:	4681      	mov	r9, r0
 80007fc:	468a      	mov	sl, r1
 80007fe:	f8df 0bc8 	ldr.w	r0, [pc, #3016]	; 80013c8 <.text_70>
 8000802:	4649      	mov	r1, r9
 8000804:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8000808:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800080c:	469b      	mov	fp, r3
 800080e:	2500      	movs	r5, #0
 8000810:	b920      	cbnz	r0, 800081c <USBPD_PE_SendExtendedMessage+0x26>
 8000812:	6860      	ldr	r0, [r4, #4]
 8000814:	6801      	ldr	r1, [r0, #0]
 8000816:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800081a:	b908      	cbnz	r0, 8000820 <USBPD_PE_SendExtendedMessage+0x2a>
 800081c:	2503      	movs	r5, #3
 800081e:	e066      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000820:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8000824:	2803      	cmp	r0, #3
 8000826:	d10d      	bne.n	8000844 <USBPD_PE_SendExtendedMessage+0x4e>
 8000828:	6860      	ldr	r0, [r4, #4]
 800082a:	7801      	ldrb	r1, [r0, #0]
 800082c:	f001 0103 	and.w	r1, r1, #3
 8000830:	2901      	cmp	r1, #1
 8000832:	bf98      	it	ls
 8000834:	2501      	movls	r5, #1
 8000836:	d95a      	bls.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000838:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800083c:	f240 1105 	movw	r1, #261	; 0x105
 8000840:	4588      	cmp	r8, r1
 8000842:	d301      	bcc.n	8000848 <USBPD_PE_SendExtendedMessage+0x52>
 8000844:	2502      	movs	r5, #2
 8000846:	e052      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000848:	f88d 2000 	strb.w	r2, [sp]
 800084c:	f204 265d 	addw	r6, r4, #605	; 0x25d
 8000850:	6960      	ldr	r0, [r4, #20]
 8000852:	f020 0020 	bic.w	r0, r0, #32
 8000856:	6160      	str	r0, [r4, #20]
 8000858:	f89d 0000 	ldrb.w	r0, [sp]
 800085c:	2803      	cmp	r0, #3
 800085e:	d008      	beq.n	8000872 <USBPD_PE_SendExtendedMessage+0x7c>
 8000860:	2804      	cmp	r0, #4
 8000862:	d018      	beq.n	8000896 <USBPD_PE_SendExtendedMessage+0xa0>
 8000864:	2806      	cmp	r0, #6
 8000866:	d01d      	beq.n	80008a4 <USBPD_PE_SendExtendedMessage+0xae>
 8000868:	2808      	cmp	r0, #8
 800086a:	d01d      	beq.n	80008a8 <USBPD_PE_SendExtendedMessage+0xb2>
 800086c:	280a      	cmp	r0, #10
 800086e:	d01e      	beq.n	80008ae <USBPD_PE_SendExtendedMessage+0xb8>
 8000870:	e020      	b.n	80008b4 <USBPD_PE_SendExtendedMessage+0xbe>
 8000872:	210c      	movs	r1, #12
 8000874:	70b1      	strb	r1, [r6, #2]
 8000876:	6960      	ldr	r0, [r4, #20]
 8000878:	f040 0020 	orr.w	r0, r0, #32
 800087c:	6160      	str	r0, [r4, #20]
 800087e:	ea5f 0008 	movs.w	r0, r8
 8000882:	d025      	beq.n	80008d0 <USBPD_PE_SendExtendedMessage+0xda>
 8000884:	4648      	mov	r0, r9
 8000886:	f000 fa86 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800088a:	2700      	movs	r7, #0
 800088c:	2801      	cmp	r0, #1
 800088e:	bf08      	it	eq
 8000890:	2704      	moveq	r7, #4
 8000892:	2000      	movs	r0, #0
 8000894:	e017      	b.n	80008c6 <USBPD_PE_SendExtendedMessage+0xd0>
 8000896:	200d      	movs	r0, #13
 8000898:	70b0      	strb	r0, [r6, #2]
 800089a:	6961      	ldr	r1, [r4, #20]
 800089c:	f041 0120 	orr.w	r1, r1, #32
 80008a0:	6161      	str	r1, [r4, #20]
 80008a2:	e7ec      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008a4:	200e      	movs	r0, #14
 80008a6:	e7f7      	b.n	8000898 <USBPD_PE_SendExtendedMessage+0xa2>
 80008a8:	205b      	movs	r0, #91	; 0x5b
 80008aa:	70b0      	strb	r0, [r6, #2]
 80008ac:	e7e7      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008ae:	215c      	movs	r1, #92	; 0x5c
 80008b0:	70b1      	strb	r1, [r6, #2]
 80008b2:	e7e4      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008b4:	2510      	movs	r5, #16
 80008b6:	e01a      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 80008b8:	183a      	adds	r2, r7, r0
 80008ba:	f81b 1000 	ldrb.w	r1, [fp, r0]
 80008be:	4422      	add	r2, r4
 80008c0:	1c40      	adds	r0, r0, #1
 80008c2:	f882 1385 	strb.w	r1, [r2, #901]	; 0x385
 80008c6:	4540      	cmp	r0, r8
 80008c8:	d3f6      	bcc.n	80008b8 <USBPD_PE_SendExtendedMessage+0xc2>
 80008ca:	f8a4 8490 	strh.w	r8, [r4, #1168]	; 0x490
 80008ce:	e001      	b.n	80008d4 <USBPD_PE_SendExtendedMessage+0xde>
 80008d0:	f8a4 5490 	strh.w	r5, [r4, #1168]	; 0x490
 80008d4:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80008d8:	2231      	movs	r2, #49	; 0x31
 80008da:	f880 a001 	strb.w	sl, [r0, #1]
 80008de:	f89d 1000 	ldrb.w	r1, [sp]
 80008e2:	7031      	strb	r1, [r6, #0]
 80008e4:	7002      	strb	r2, [r0, #0]
 80008e6:	4648      	mov	r0, r9
 80008e8:	68a3      	ldr	r3, [r4, #8]
 80008ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80008ec:	4788      	blx	r1
 80008ee:	4628      	mov	r0, r5
 80008f0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008f4 <PE_Send_RESET>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	460d      	mov	r5, r1
 80008fa:	2d05      	cmp	r5, #5
 80008fc:	7c20      	ldrb	r0, [r4, #16]
 80008fe:	bf0c      	ite	eq
 8000900:	211f      	moveq	r1, #31
 8000902:	215e      	movne	r1, #94	; 0x5e
 8000904:	f7ff fe27 	bl	8000556 <USBPD_PE_Notification>
 8000908:	7c20      	ldrb	r0, [r4, #16]
 800090a:	4629      	mov	r1, r5
 800090c:	f004 fdd9 	bl	80054c2 <USBPD_PRL_ResetRequestProcess>
 8000910:	f3ef 8010 	mrs	r0, PRIMASK
 8000914:	b672      	cpsid	i
 8000916:	2100      	movs	r1, #0
 8000918:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 800091c:	f380 8810 	msr	PRIMASK, r0
 8000920:	bd31      	pop	{r0, r4, r5, pc}

08000922 <PE_Get_SpecRevision>:
 8000922:	f8df 1aa4 	ldr.w	r1, [pc, #2724]	; 80013c8 <.text_70>
 8000926:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800092a:	6841      	ldr	r1, [r0, #4]
 800092c:	7808      	ldrb	r0, [r1, #0]
 800092e:	f000 0003 	and.w	r0, r0, #3
 8000932:	4770      	bx	lr

08000934 <PE_ChangePowerRole>:
 8000934:	6842      	ldr	r2, [r0, #4]
 8000936:	6813      	ldr	r3, [r2, #0]
 8000938:	f361 0382 	bfi	r3, r1, #2, #1
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	7c00      	ldrb	r0, [r0, #16]
 8000940:	f004 bb45 	b.w	8004fce <USBPD_PRL_SetHeaderPowerRole>

08000944 <PE_Get_RxEvent>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	2114      	movs	r1, #20
 8000948:	f3ef 8410 	mrs	r4, PRIMASK
 800094c:	b672      	cpsid	i
 800094e:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8000952:	7b2a      	ldrb	r2, [r5, #12]
 8000954:	b332      	cbz	r2, 80009a4 <PE_Get_RxEvent+0x60>
 8000956:	f500 7613 	add.w	r6, r0, #588	; 0x24c
 800095a:	5cb3      	ldrb	r3, [r6, r2]
 800095c:	065f      	lsls	r7, r3, #25
 800095e:	bf58      	it	pl
 8000960:	2103      	movpl	r1, #3
 8000962:	d51f      	bpl.n	80009a4 <PE_Get_RxEvent+0x60>
 8000964:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000968:	435a      	muls	r2, r3
 800096a:	4410      	add	r0, r2
 800096c:	38cb      	subs	r0, #203	; 0xcb
 800096e:	60a8      	str	r0, [r5, #8]
 8000970:	7802      	ldrb	r2, [r0, #0]
 8000972:	7840      	ldrb	r0, [r0, #1]
 8000974:	eb02 2300 	add.w	r3, r2, r0, lsl #8
 8000978:	7b28      	ldrb	r0, [r5, #12]
 800097a:	80ab      	strh	r3, [r5, #4]
 800097c:	5c32      	ldrb	r2, [r6, r0]
 800097e:	f002 021f 	and.w	r2, r2, #31
 8000982:	2a01      	cmp	r2, #1
 8000984:	d004      	beq.n	8000990 <PE_Get_RxEvent+0x4c>
 8000986:	2a02      	cmp	r2, #2
 8000988:	d005      	beq.n	8000996 <PE_Get_RxEvent+0x52>
 800098a:	2a04      	cmp	r2, #4
 800098c:	d007      	beq.n	800099e <PE_Get_RxEvent+0x5a>
 800098e:	e009      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 8000990:	2111      	movs	r1, #17
 8000992:	2000      	movs	r0, #0
 8000994:	e005      	b.n	80009a2 <PE_Get_RxEvent+0x5e>
 8000996:	2201      	movs	r2, #1
 8000998:	2112      	movs	r1, #18
 800099a:	702a      	strb	r2, [r5, #0]
 800099c:	e002      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 800099e:	2113      	movs	r1, #19
 80009a0:	2002      	movs	r0, #2
 80009a2:	7028      	strb	r0, [r5, #0]
 80009a4:	f384 8810 	msr	PRIMASK, r4
 80009a8:	4608      	mov	r0, r1
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009ac <PE_Clear_RxEvent>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	4601      	mov	r1, r0
 80009b0:	f3ef 8210 	mrs	r2, PRIMASK
 80009b4:	b672      	cpsid	i
 80009b6:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
 80009ba:	b1c8      	cbz	r0, 80009f0 <__iar_annotation$$tailcall+0x8>
 80009bc:	1e40      	subs	r0, r0, #1
 80009be:	b2c0      	uxtb	r0, r0
 80009c0:	f201 234d 	addw	r3, r1, #589	; 0x24d
 80009c4:	2400      	movs	r4, #0
 80009c6:	541c      	strb	r4, [r3, r0]
 80009c8:	1e40      	subs	r0, r0, #1
 80009ca:	4180      	sbcs	r0, r0
 80009cc:	0fc0      	lsrs	r0, r0, #31
 80009ce:	5c1b      	ldrb	r3, [r3, r0]
 80009d0:	065c      	lsls	r4, r3, #25
 80009d2:	d50a      	bpl.n	80009ea <__iar_annotation$$tailcall+0x2>
 80009d4:	1c40      	adds	r0, r0, #1
 80009d6:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80009da:	f382 8810 	msr	PRIMASK, r2
 80009de:	7c08      	ldrb	r0, [r1, #16]
 80009e0:	6889      	ldr	r1, [r1, #8]
 80009e2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80009e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

080009e8 <__iar_annotation$$tailcall>:
 80009e8:	4710      	bx	r2
 80009ea:	2000      	movs	r0, #0
 80009ec:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80009f0:	f382 8810 	msr	PRIMASK, r2
 80009f4:	bd10      	pop	{r4, pc}

080009f6 <PE_PRL_Control_RxEvent>:
 80009f6:	f8df 19d0 	ldr.w	r1, [pc, #2512]	; 80013c8 <.text_70>
 80009fa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80009fe:	2000      	movs	r0, #0
 8000a00:	f3ef 8210 	mrs	r2, PRIMASK
 8000a04:	b672      	cpsid	i
 8000a06:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 8000a0a:	b101      	cbz	r1, 8000a0e <PE_PRL_Control_RxEvent+0x18>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f382 8810 	msr	PRIMASK, r2
 8000a12:	4770      	bx	lr

08000a14 <PE_Convert_SOPRxEvent>:
 8000a14:	b118      	cbz	r0, 8000a1e <PE_Convert_SOPRxEvent+0xa>
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d005      	beq.n	8000a26 <PE_Convert_SOPRxEvent+0x12>
 8000a1a:	d302      	bcc.n	8000a22 <PE_Convert_SOPRxEvent+0xe>
 8000a1c:	e005      	b.n	8000a2a <PE_Convert_SOPRxEvent+0x16>
 8000a1e:	2011      	movs	r0, #17
 8000a20:	4770      	bx	lr
 8000a22:	2012      	movs	r0, #18
 8000a24:	4770      	bx	lr
 8000a26:	2013      	movs	r0, #19
 8000a28:	4770      	bx	lr
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	4770      	bx	lr

08000a2e <PE_Check_AMSConflict>:
 8000a2e:	b538      	push	{r3, r4, r5, lr}
 8000a30:	4605      	mov	r5, r0
 8000a32:	f24f 001f 	movw	r0, #61471	; 0xf01f
 8000a36:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8000a38:	2400      	movs	r4, #0
 8000a3a:	4001      	ands	r1, r0
 8000a3c:	290d      	cmp	r1, #13
 8000a3e:	d102      	bne.n	8000a46 <PE_Check_AMSConflict+0x18>
 8000a40:	2110      	movs	r1, #16
 8000a42:	7469      	strb	r1, [r5, #17]
 8000a44:	e02c      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a46:	7f28      	ldrb	r0, [r5, #28]
 8000a48:	b188      	cbz	r0, 8000a6e <PE_Check_AMSConflict+0x40>
 8000a4a:	1e40      	subs	r0, r0, #1
 8000a4c:	2801      	cmp	r0, #1
 8000a4e:	d914      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a50:	1e80      	subs	r0, r0, #2
 8000a52:	d014      	beq.n	8000a7e <PE_Check_AMSConflict+0x50>
 8000a54:	1e40      	subs	r0, r0, #1
 8000a56:	d023      	beq.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a58:	1e40      	subs	r0, r0, #1
 8000a5a:	2809      	cmp	r0, #9
 8000a5c:	bf84      	itt	hi
 8000a5e:	380b      	subhi	r0, #11
 8000a60:	2801      	cmphi	r0, #1
 8000a62:	d90a      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a64:	1e80      	subs	r0, r0, #2
 8000a66:	d005      	beq.n	8000a74 <PE_Check_AMSConflict+0x46>
 8000a68:	384d      	subs	r0, #77	; 0x4d
 8000a6a:	d006      	beq.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a6c:	e00a      	b.n	8000a84 <PE_Check_AMSConflict+0x56>
 8000a6e:	2203      	movs	r2, #3
 8000a70:	746a      	strb	r2, [r5, #17]
 8000a72:	e016      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a74:	200f      	movs	r0, #15
 8000a76:	7468      	strb	r0, [r5, #17]
 8000a78:	e013      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a7a:	2011      	movs	r0, #17
 8000a7c:	e000      	b.n	8000a80 <PE_Check_AMSConflict+0x52>
 8000a7e:	200f      	movs	r0, #15
 8000a80:	7468      	strb	r0, [r5, #17]
 8000a82:	e00d      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a84:	7c28      	ldrb	r0, [r5, #16]
 8000a86:	215c      	movs	r1, #92	; 0x5c
 8000a88:	f7ff fd65 	bl	8000556 <USBPD_PE_Notification>
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	686a      	ldr	r2, [r5, #4]
 8000a90:	7469      	strb	r1, [r5, #17]
 8000a92:	f240 7004 	movw	r0, #1796	; 0x704
 8000a96:	6811      	ldr	r1, [r2, #0]
 8000a98:	4001      	ands	r1, r0
 8000a9a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000a9e:	d000      	beq.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000aa0:	2415      	movs	r4, #21
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	bd32      	pop	{r1, r4, r5, pc}

08000aa6 <PE_PRL_ResetReceived>:
 8000aa6:	b538      	push	{r3, r4, r5, lr}
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	f8df 091c 	ldr.w	r0, [pc, #2332]	; 80013c8 <.text_70>
 8000aae:	4622      	mov	r2, r4
 8000ab0:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000ab4:	2905      	cmp	r1, #5
 8000ab6:	d114      	bne.n	8000ae2 <PE_PRL_ResetReceived+0x3c>
 8000ab8:	6868      	ldr	r0, [r5, #4]
 8000aba:	6801      	ldr	r1, [r0, #0]
 8000abc:	f021 0110 	bic.w	r1, r1, #16
 8000ac0:	6001      	str	r1, [r0, #0]
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	6969      	ldr	r1, [r5, #20]
 8000ac6:	f360 214a 	bfi	r1, r0, #9, #2
 8000aca:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8000ace:	6169      	str	r1, [r5, #20]
 8000ad0:	2214      	movs	r2, #20
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	7002      	strb	r2, [r0, #0]
 8000ad6:	7283      	strb	r3, [r0, #10]
 8000ad8:	211e      	movs	r1, #30
 8000ada:	7c28      	ldrb	r0, [r5, #16]
 8000adc:	f7ff fd3b 	bl	8000556 <USBPD_PE_Notification>
 8000ae0:	e003      	b.n	8000aea <PE_PRL_ResetReceived+0x44>
 8000ae2:	6968      	ldr	r0, [r5, #20]
 8000ae4:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8000ae8:	6168      	str	r0, [r5, #20]
 8000aea:	4620      	mov	r0, r4
 8000aec:	68a9      	ldr	r1, [r5, #8]
 8000aee:	e148      	b.n	8000d82 <.text_44>

08000af0 <PE_PRL_BistCompleted>:
 8000af0:	4770      	bx	lr

08000af2 <PE_Reset_HardReset>:
 8000af2:	b510      	push	{r4, lr}
 8000af4:	4604      	mov	r4, r0
 8000af6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8000afa:	b118      	cbz	r0, 8000b04 <PE_Reset_HardReset+0x12>
 8000afc:	7c20      	ldrb	r0, [r4, #16]
 8000afe:	215b      	movs	r1, #91	; 0x5b
 8000b00:	f7ff fd29 	bl	8000556 <USBPD_PE_Notification>
 8000b04:	4620      	mov	r0, r4
 8000b06:	f000 f82a 	bl	8000b5e <PE_Reset_ZI>
 8000b0a:	f000 f88e 	bl	8000c2a <.text_37>
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	7903      	ldrb	r3, [r0, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	d009      	beq.n	8000b2c <PE_Reset_HardReset+0x3a>
 8000b18:	7c20      	ldrb	r0, [r4, #16]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	f004 fa40 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b22:	6860      	ldr	r0, [r4, #4]
 8000b24:	6801      	ldr	r1, [r0, #0]
 8000b26:	f041 0108 	orr.w	r1, r1, #8
 8000b2a:	e008      	b.n	8000b3e <PE_Reset_HardReset+0x4c>
 8000b2c:	7c20      	ldrb	r0, [r4, #16]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	f004 fa36 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b36:	6860      	ldr	r0, [r4, #4]
 8000b38:	6801      	ldr	r1, [r0, #0]
 8000b3a:	f021 0108 	bic.w	r1, r1, #8
 8000b3e:	6001      	str	r1, [r0, #0]
 8000b40:	f000 f840 	bl	8000bc4 <.text_34>
 8000b44:	0892      	lsrs	r2, r2, #2
 8000b46:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 8000b4a:	6008      	str	r0, [r1, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	7c20      	ldrb	r0, [r4, #16]
 8000b50:	f004 fa7e 	bl	8005050 <USBPD_PRL_SOPCapability>
 8000b54:	7c20      	ldrb	r0, [r4, #16]
 8000b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b5a:	f004 bcee 	b.w	800553a <USBPD_PRL_Reset>

08000b5e <PE_Reset_ZI>:
 8000b5e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	2000      	movs	r0, #0
 8000b64:	9001      	str	r0, [sp, #4]
 8000b66:	2100      	movs	r1, #0
 8000b68:	6860      	ldr	r0, [r4, #4]
 8000b6a:	6802      	ldr	r2, [r0, #0]
 8000b6c:	f022 0210 	bic.w	r2, r2, #16
 8000b70:	6002      	str	r2, [r0, #0]
 8000b72:	4620      	mov	r0, r4
 8000b74:	f000 fbd6 	bl	8001324 <PE_SetPowerNegotiation>
 8000b78:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8000b7c:	f104 0014 	add.w	r0, r4, #20
 8000b80:	f01e fe58 	bl	801f834 <__aeabi_memclr>
 8000b84:	68a5      	ldr	r5, [r4, #8]
 8000b86:	7c20      	ldrb	r0, [r4, #16]
 8000b88:	69ae      	ldr	r6, [r5, #24]
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	aa01      	add	r2, sp, #4
 8000b8e:	2102      	movs	r1, #2
 8000b90:	47b0      	blx	r6
 8000b92:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000b96:	9000      	str	r0, [sp, #0]
 8000b98:	2304      	movs	r3, #4
 8000b9a:	68a5      	ldr	r5, [r4, #8]
 8000b9c:	7c20      	ldrb	r0, [r4, #16]
 8000b9e:	69ae      	ldr	r6, [r5, #24]
 8000ba0:	466a      	mov	r2, sp
 8000ba2:	2106      	movs	r1, #6
 8000ba4:	47b0      	blx	r6
 8000ba6:	6820      	ldr	r0, [r4, #0]
 8000ba8:	7901      	ldrb	r1, [r0, #4]
 8000baa:	7c20      	ldrb	r0, [r4, #16]
 8000bac:	f001 0103 	and.w	r1, r1, #3
 8000bb0:	f004 fa28 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000bb4:	f000 f806 	bl	8000bc4 <.text_34>
 8000bb8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8000bbc:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000bc0:	600a      	str	r2, [r1, #0]
 8000bc2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000bc4 <.text_34>:
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	6861      	ldr	r1, [r4, #4]
 8000bc8:	7900      	ldrb	r0, [r0, #4]
 8000bca:	680a      	ldr	r2, [r1, #0]
 8000bcc:	f000 0003 	and.w	r0, r0, #3
 8000bd0:	4770      	bx	lr

08000bd2 <PE_Reset_Counter>:
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8000bd8:	f01e be2c 	b.w	801f834 <__aeabi_memclr>

08000bdc <PE_Reset_StateMachine>:
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4604      	mov	r4, r0
 8000be0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8000be4:	b118      	cbz	r0, 8000bee <PE_Reset_StateMachine+0x12>
 8000be6:	7c20      	ldrb	r0, [r4, #16]
 8000be8:	215b      	movs	r1, #91	; 0x5b
 8000bea:	f7ff fcb4 	bl	8000556 <USBPD_PE_Notification>
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff ffb5 	bl	8000b5e <PE_Reset_ZI>
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f000 fb94 	bl	8001324 <PE_SetPowerNegotiation>
 8000bfc:	7c20      	ldrb	r0, [r4, #16]
 8000bfe:	f004 fc9c 	bl	800553a <USBPD_PRL_Reset>
 8000c02:	f000 f812 	bl	8000c2a <.text_37>
 8000c06:	f001 0303 	and.w	r3, r1, #3
 8000c0a:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8000c0e:	d005      	beq.n	8000c1c <PE_Reset_StateMachine+0x40>
 8000c10:	7c20      	ldrb	r0, [r4, #16]
 8000c12:	2101      	movs	r1, #1
 8000c14:	f004 f9c5 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c18:	2002      	movs	r0, #2
 8000c1a:	e004      	b.n	8000c26 <PE_Reset_StateMachine+0x4a>
 8000c1c:	7c20      	ldrb	r0, [r4, #16]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f004 f9bf 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c24:	203e      	movs	r0, #62	; 0x3e
 8000c26:	7460      	strb	r0, [r4, #17]
 8000c28:	bd10      	pop	{r4, pc}

08000c2a <.text_37>:
 8000c2a:	6860      	ldr	r0, [r4, #4]
 8000c2c:	6801      	ldr	r1, [r0, #0]
 8000c2e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000c32:	2800      	cmp	r0, #0
 8000c34:	4770      	bx	lr

08000c36 <PE_ExtRevisionInteroperability>:
 8000c36:	b538      	push	{r3, r4, r5, lr}
 8000c38:	f8df 378c 	ldr.w	r3, [pc, #1932]	; 80013c8 <.text_70>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000c42:	6865      	ldr	r5, [r4, #4]
 8000c44:	682c      	ldr	r4, [r5, #0]
 8000c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c4a:	f004 0503 	and.w	r5, r4, #3
 8000c4e:	42a9      	cmp	r1, r5
 8000c50:	bfa8      	it	ge
 8000c52:	4629      	movge	r1, r5
 8000c54:	f361 0401 	bfi	r4, r1, #0, #2
 8000c58:	6851      	ldr	r1, [r2, #4]
 8000c5a:	600c      	str	r4, [r1, #0]
 8000c5c:	6851      	ldr	r1, [r2, #4]
 8000c5e:	680b      	ldr	r3, [r1, #0]
 8000c60:	f003 0403 	and.w	r4, r3, #3
 8000c64:	2c01      	cmp	r4, #1
 8000c66:	bf0c      	ite	eq
 8000c68:	2400      	moveq	r4, #0
 8000c6a:	2420      	movne	r4, #32
 8000c6c:	f023 0320 	bic.w	r3, r3, #32
 8000c70:	4323      	orrs	r3, r4
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	6852      	ldr	r2, [r2, #4]
 8000c76:	7811      	ldrb	r1, [r2, #0]
 8000c78:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 8000c7c:	f001 0103 	and.w	r1, r1, #3
 8000c80:	f004 b9b9 	b.w	8004ff6 <USBPD_PRL_SetHeaderSpecification>

08000c84 <PE_PRL_FastRoleSwapReception>:
 8000c84:	f8df 1740 	ldr.w	r1, [pc, #1856]	; 80013c8 <.text_70>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000c8e:	7f0a      	ldrb	r2, [r1, #28]
 8000c90:	2a09      	cmp	r2, #9
 8000c92:	d005      	beq.n	8000ca0 <PE_PRL_FastRoleSwapReception+0x1c>
 8000c94:	684a      	ldr	r2, [r1, #4]
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e354      	b.n	800134a <.text_66>
 8000ca0:	4770      	bx	lr

08000ca2 <PE_PRL_PostReceiveEvent>:
 8000ca2:	b570      	push	{r4, r5, r6, lr}
 8000ca4:	f8df 2720 	ldr.w	r2, [pc, #1824]	; 80013c8 <.text_70>
 8000ca8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8000cac:	2000      	movs	r0, #0
 8000cae:	2400      	movs	r4, #0
 8000cb0:	191a      	adds	r2, r3, r4
 8000cb2:	f892 224d 	ldrb.w	r2, [r2, #589]	; 0x24d
 8000cb6:	b122      	cbz	r2, 8000cc2 <PE_PRL_PostReceiveEvent+0x20>
 8000cb8:	1c64      	adds	r4, r4, #1
 8000cba:	b2e4      	uxtb	r4, r4
 8000cbc:	2c01      	cmp	r4, #1
 8000cbe:	d9f7      	bls.n	8000cb0 <PE_PRL_PostReceiveEvent+0xe>
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
 8000cc2:	191a      	adds	r2, r3, r4
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	191d      	adds	r5, r3, r4
 8000cc8:	f882 024d 	strb.w	r0, [r2, #589]	; 0x24d
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f895 624d 	ldrb.w	r6, [r5, #589]	; 0x24d
 8000cd2:	fa00 f101 	lsl.w	r1, r0, r1
 8000cd6:	1918      	adds	r0, r3, r4
 8000cd8:	4331      	orrs	r1, r6
 8000cda:	f880 124d 	strb.w	r1, [r0, #589]	; 0x24d
 8000cde:	2001      	movs	r0, #1
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}

08000ce2 <PE_PRL_PostReceiveEventError>:
 8000ce2:	f8df 16e4 	ldr.w	r1, [pc, #1764]	; 80013c8 <.text_70>
 8000ce6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000cea:	2100      	movs	r1, #0
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	4402      	add	r2, r0
 8000cf0:	f892 324d 	ldrb.w	r3, [r2, #589]	; 0x24d
 8000cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d004      	beq.n	8000d06 <PE_PRL_PostReceiveEventError+0x24>
 8000cfc:	1c49      	adds	r1, r1, #1
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	2a02      	cmp	r2, #2
 8000d02:	d3f3      	bcc.n	8000cec <PE_PRL_PostReceiveEventError+0xa>
 8000d04:	4770      	bx	lr
 8000d06:	2000      	movs	r0, #0
 8000d08:	f882 024d 	strb.w	r0, [r2, #589]	; 0x24d
 8000d0c:	4770      	bx	lr

08000d0e <PE_PRL_PostReceiveEventCopy>:
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	f8df 26b4 	ldr.w	r2, [pc, #1716]	; 80013c8 <.text_70>
 8000d14:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	b2d3      	uxtb	r3, r2
 8000d1c:	18c4      	adds	r4, r0, r3
 8000d1e:	f894 424d 	ldrb.w	r4, [r4, #589]	; 0x24d
 8000d22:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8000d26:	2c20      	cmp	r4, #32
 8000d28:	d004      	beq.n	8000d34 <PE_PRL_PostReceiveEventCopy+0x26>
 8000d2a:	1c52      	adds	r2, r2, #1
 8000d2c:	b2d3      	uxtb	r3, r2
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d3f3      	bcc.n	8000d1a <PE_PRL_PostReceiveEventCopy+0xc>
 8000d32:	bd10      	pop	{r4, pc}
 8000d34:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d38:	4353      	muls	r3, r2
 8000d3a:	18c4      	adds	r4, r0, r3
 8000d3c:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8000d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d44:	f01e bd74 	b.w	801f830 <__aeabi_memcpy>

08000d48 <PE_PRL_PostReceiveEventComplete>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	f000 f81e 	bl	8000d8a <.text_45>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	1854      	adds	r4, r2, r1
 8000d52:	1c4b      	adds	r3, r1, #1
 8000d54:	f894 524d 	ldrb.w	r5, [r4, #589]	; 0x24d
 8000d58:	f005 0560 	and.w	r5, r5, #96	; 0x60
 8000d5c:	2d20      	cmp	r5, #32
 8000d5e:	d003      	beq.n	8000d68 <PE_PRL_PostReceiveEventComplete+0x20>
 8000d60:	b2d9      	uxtb	r1, r3
 8000d62:	2902      	cmp	r1, #2
 8000d64:	d3f4      	bcc.n	8000d50 <PE_PRL_PostReceiveEventComplete+0x8>
 8000d66:	bd31      	pop	{r0, r4, r5, pc}
 8000d68:	f894 424d 	ldrb.w	r4, [r4, #589]	; 0x24d
 8000d6c:	1855      	adds	r5, r2, r1
 8000d6e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8000d72:	f885 424d 	strb.w	r4, [r5, #589]	; 0x24d
 8000d76:	f892 103c 	ldrb.w	r1, [r2, #60]	; 0x3c
 8000d7a:	b909      	cbnz	r1, 8000d80 <PE_PRL_PostReceiveEventComplete+0x38>
 8000d7c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 8000d80:	6891      	ldr	r1, [r2, #8]

08000d82 <.text_44>:
 8000d82:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000d84:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

08000d88 <__iar_annotation$$tailcall>:
 8000d88:	4710      	bx	r2

08000d8a <.text_45>:
 8000d8a:	f8df 163c 	ldr.w	r1, [pc, #1596]	; 80013c8 <.text_70>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d94:	4770      	bx	lr

08000d96 <PE_Get_UnchunkedSupport>:
 8000d96:	f8df 1630 	ldr.w	r1, [pc, #1584]	; 80013c8 <.text_70>
 8000d9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000d9e:	6841      	ldr	r1, [r0, #4]
 8000da0:	6808      	ldr	r0, [r1, #0]
 8000da2:	0e40      	lsrs	r0, r0, #25
 8000da4:	f000 0001 	and.w	r0, r0, #1
 8000da8:	4770      	bx	lr
	...

08000dac <.text_47>:
 8000dac:	200002c8 	.word	0x200002c8

08000db0 <.text_48>:
 8000db0:	20000000 	.word	0x20000000

08000db4 <.text_49>:
 8000db4:	08020b18 	.word	0x08020b18

08000db8 <PE_SubStateMachine_Generic>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	b08c      	sub	sp, #48	; 0x30
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	9003      	str	r0, [sp, #12]
 8000dc4:	460e      	mov	r6, r1
 8000dc6:	7c63      	ldrb	r3, [r4, #17]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	f04f 0a02 	mov.w	sl, #2
 8000dce:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8000dd2:	f204 2963 	addw	r9, r4, #611	; 0x263
 8000dd6:	f204 2565 	addw	r5, r4, #613	; 0x265
 8000dda:	f204 2267 	addw	r2, r4, #615	; 0x267
 8000dde:	f248 081b 	movw	r8, #32795	; 0x801b
 8000de2:	f000 8163 	beq.w	80010ac <PE_SubStateMachine_Generic+0x2f4>
 8000de6:	2b18      	cmp	r3, #24
 8000de8:	d03f      	beq.n	8000e6a <PE_SubStateMachine_Generic+0xb2>
 8000dea:	2b19      	cmp	r3, #25
 8000dec:	d04e      	beq.n	8000e8c <PE_SubStateMachine_Generic+0xd4>
 8000dee:	2b1d      	cmp	r3, #29
 8000df0:	f000 808e 	beq.w	8000f10 <PE_SubStateMachine_Generic+0x158>
 8000df4:	2b27      	cmp	r3, #39	; 0x27
 8000df6:	f000 80aa 	beq.w	8000f4e <PE_SubStateMachine_Generic+0x196>
 8000dfa:	2b28      	cmp	r3, #40	; 0x28
 8000dfc:	f000 80b5 	beq.w	8000f6a <PE_SubStateMachine_Generic+0x1b2>
 8000e00:	2b29      	cmp	r3, #41	; 0x29
 8000e02:	f000 80bc 	beq.w	8000f7e <PE_SubStateMachine_Generic+0x1c6>
 8000e06:	2b2c      	cmp	r3, #44	; 0x2c
 8000e08:	f000 8205 	beq.w	8001216 <PE_SubStateMachine_Generic+0x45e>
 8000e0c:	2b30      	cmp	r3, #48	; 0x30
 8000e0e:	f000 8179 	beq.w	8001104 <PE_SubStateMachine_Generic+0x34c>
 8000e12:	2b3a      	cmp	r3, #58	; 0x3a
 8000e14:	f000 81ee 	beq.w	80011f4 <PE_SubStateMachine_Generic+0x43c>
 8000e18:	2b3b      	cmp	r3, #59	; 0x3b
 8000e1a:	f000 81d1 	beq.w	80011c0 <PE_SubStateMachine_Generic+0x408>
 8000e1e:	2b3c      	cmp	r3, #60	; 0x3c
 8000e20:	f000 81be 	beq.w	80011a0 <PE_SubStateMachine_Generic+0x3e8>
 8000e24:	2b4b      	cmp	r3, #75	; 0x4b
 8000e26:	f000 80f8 	beq.w	800101a <PE_SubStateMachine_Generic+0x262>
 8000e2a:	2b63      	cmp	r3, #99	; 0x63
 8000e2c:	f000 8144 	beq.w	80010b8 <PE_SubStateMachine_Generic+0x300>
 8000e30:	2b64      	cmp	r3, #100	; 0x64
 8000e32:	f000 8154 	beq.w	80010de <PE_SubStateMachine_Generic+0x326>
 8000e36:	2b67      	cmp	r3, #103	; 0x67
 8000e38:	f000 8102 	beq.w	8001040 <PE_SubStateMachine_Generic+0x288>
 8000e3c:	2b68      	cmp	r3, #104	; 0x68
 8000e3e:	f000 8111 	beq.w	8001064 <PE_SubStateMachine_Generic+0x2ac>
 8000e42:	2b74      	cmp	r3, #116	; 0x74
 8000e44:	f000 8174 	beq.w	8001130 <PE_SubStateMachine_Generic+0x378>
 8000e48:	2b93      	cmp	r3, #147	; 0x93
 8000e4a:	f000 809e 	beq.w	8000f8a <PE_SubStateMachine_Generic+0x1d2>
 8000e4e:	2b94      	cmp	r3, #148	; 0x94
 8000e50:	f000 809f 	beq.w	8000f92 <PE_SubStateMachine_Generic+0x1da>
 8000e54:	2b95      	cmp	r3, #149	; 0x95
 8000e56:	f000 80b0 	beq.w	8000fba <PE_SubStateMachine_Generic+0x202>
 8000e5a:	2b99      	cmp	r3, #153	; 0x99
 8000e5c:	f040 81e0 	bne.w	8001220 <PE_SubStateMachine_Generic+0x468>
 8000e60:	2106      	movs	r1, #6
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fd46 	bl	80008f4 <PE_Send_RESET>
 8000e68:	e195      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000e6a:	f7ff fede 	bl	8000c2a <.text_37>
 8000e6e:	bf1d      	ittte	ne
 8000e70:	6960      	ldrne	r0, [r4, #20]
 8000e72:	0880      	lsrne	r0, r0, #2
 8000e74:	f000 0001 	andne.w	r0, r0, #1
 8000e78:	2002      	moveq	r0, #2
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	2319      	movs	r3, #25
 8000e7e:	2208      	movs	r2, #8
 8000e80:	f000 fa3a 	bl	80012f8 <.text_61>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d16f      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000e88:	2007      	movs	r0, #7
 8000e8a:	e0e8      	b.n	800105e <PE_SubStateMachine_Generic+0x2a6>
 8000e8c:	7830      	ldrb	r0, [r6, #0]
 8000e8e:	2811      	cmp	r0, #17
 8000e90:	d13d      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000e92:	88b9      	ldrh	r1, [r7, #4]
 8000e94:	0bc8      	lsrs	r0, r1, #15
 8000e96:	d121      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000e98:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000e9c:	b1f0      	cbz	r0, 8000edc <PE_SubStateMachine_Generic+0x124>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	f000 011f 	and.w	r1, r0, #31
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d119      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000ea8:	68a5      	ldr	r5, [r4, #8]
 8000eaa:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000eae:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000eb2:	68b8      	ldr	r0, [r7, #8]
 8000eb4:	1c82      	adds	r2, r0, #2
 8000eb6:	7c20      	ldrb	r0, [r4, #16]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	2105      	movs	r1, #5
 8000ebc:	47e0      	blx	ip
 8000ebe:	7830      	ldrb	r0, [r6, #0]
 8000ec0:	2814      	cmp	r0, #20
 8000ec2:	d003      	beq.n	8000ecc <PE_SubStateMachine_Generic+0x114>
 8000ec4:	2114      	movs	r1, #20
 8000ec6:	7031      	strb	r1, [r6, #0]
 8000ec8:	f000 f9d1 	bl	800126e <.text_57+0x4>
 8000ecc:	2003      	movs	r0, #3
 8000ece:	7460      	strb	r0, [r4, #17]
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	7c20      	ldrb	r0, [r4, #16]
 8000ed4:	f7ff fb3f 	bl	8000556 <USBPD_PE_Notification>
 8000ed8:	f04f 0a00 	mov.w	sl, #0
 8000edc:	88b8      	ldrh	r0, [r7, #4]
 8000ede:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8000ee2:	d114      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ee4:	f000 001f 	and.w	r0, r0, #31
 8000ee8:	2804      	cmp	r0, #4
 8000eea:	bf18      	it	ne
 8000eec:	2810      	cmpne	r0, #16
 8000eee:	d10e      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ef0:	7830      	ldrb	r0, [r6, #0]
 8000ef2:	2814      	cmp	r0, #20
 8000ef4:	d003      	beq.n	8000efe <PE_SubStateMachine_Generic+0x146>
 8000ef6:	2114      	movs	r1, #20
 8000ef8:	7031      	strb	r1, [r6, #0]
 8000efa:	f000 f9b8 	bl	800126e <.text_57+0x4>
 8000efe:	2003      	movs	r0, #3
 8000f00:	7460      	strb	r0, [r4, #17]
 8000f02:	2108      	movs	r1, #8
 8000f04:	7c20      	ldrb	r0, [r4, #16]
 8000f06:	f7ff fb26 	bl	8000556 <USBPD_PE_Notification>
 8000f0a:	f04f 0a00 	mov.w	sl, #0
 8000f0e:	e080      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000f10:	9004      	str	r0, [sp, #16]
 8000f12:	ab04      	add	r3, sp, #16
 8000f14:	68a6      	ldr	r6, [r4, #8]
 8000f16:	7c20      	ldrb	r0, [r4, #16]
 8000f18:	6977      	ldr	r7, [r6, #20]
 8000f1a:	aa05      	add	r2, sp, #20
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	47b8      	blx	r7
 8000f20:	9804      	ldr	r0, [sp, #16]
 8000f22:	2104      	movs	r1, #4
 8000f24:	f000 fa40 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8000f28:	b108      	cbz	r0, 8000f2e <PE_SubStateMachine_Generic+0x176>
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	e179      	b.n	8001222 <PE_SubStateMachine_Generic+0x46a>
 8000f2e:	9a04      	ldr	r2, [sp, #16]
 8000f30:	2003      	movs	r0, #3
 8000f32:	0892      	lsrs	r2, r2, #2
 8000f34:	2100      	movs	r1, #0
 8000f36:	9001      	str	r0, [sp, #4]
 8000f38:	9200      	str	r2, [sp, #0]
 8000f3a:	9102      	str	r1, [sp, #8]
 8000f3c:	ab05      	add	r3, sp, #20
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4620      	mov	r0, r4
 8000f42:	f000 fabe 	bl	80014c2 <PE_Send_DataMessage>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d10e      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	e0ec      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000f4e:	2012      	movs	r0, #18
 8000f50:	7720      	strb	r0, [r4, #28]
 8000f52:	2105      	movs	r1, #5
 8000f54:	7c20      	ldrb	r0, [r4, #16]
 8000f56:	f004 fae3 	bl	8005520 <USBDPD_PRL_BistCarrierEyeMode>
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	7460      	strb	r0, [r4, #17]
 8000f5e:	f248 012d 	movw	r1, #32813	; 0x802d
 8000f62:	83e1      	strh	r1, [r4, #30]
 8000f64:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8000f68:	e15c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f6a:	f000 f95f 	bl	800122c <.text_51>
 8000f6e:	d1fb      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f70:	7c20      	ldrb	r0, [r4, #16]
 8000f72:	2105      	movs	r1, #5
 8000f74:	f004 fada 	bl	800552c <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	83e0      	strh	r0, [r4, #30]
 8000f7c:	e10b      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000f7e:	7831      	ldrb	r1, [r6, #0]
 8000f80:	2914      	cmp	r1, #20
 8000f82:	d001      	beq.n	8000f88 <PE_SubStateMachine_Generic+0x1d0>
 8000f84:	f000 f971 	bl	800126a <.text_57>
 8000f88:	e14c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 f990 	bl	80012b0 <PE_SubStateMachine_ReceiveDRS>
 8000f90:	e148      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f92:	f7ff fe4a 	bl	8000c2a <.text_37>
 8000f96:	bf1d      	ittte	ne
 8000f98:	6960      	ldrne	r0, [r4, #20]
 8000f9a:	0880      	lsrne	r0, r0, #2
 8000f9c:	f000 0001 	andne.w	r0, r0, #1
 8000fa0:	2002      	moveq	r0, #2
 8000fa2:	9000      	str	r0, [sp, #0]
 8000fa4:	2395      	movs	r3, #149	; 0x95
 8000fa6:	2209      	movs	r2, #9
 8000fa8:	f000 f9a6 	bl	80012f8 <.text_61>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d1ef      	bne.n	8000f90 <PE_SubStateMachine_Generic+0x1d8>
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f000 f93f 	bl	8001234 <.text_52>
 8000fb6:	2122      	movs	r1, #34	; 0x22
 8000fb8:	e0b6      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000fba:	7830      	ldrb	r0, [r6, #0]
 8000fbc:	2814      	cmp	r0, #20
 8000fbe:	d028      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc0:	88b8      	ldrh	r0, [r7, #4]
 8000fc2:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8000fc6:	d124      	bne.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc8:	f000 011f 	and.w	r1, r0, #31
 8000fcc:	2903      	cmp	r1, #3
 8000fce:	d006      	beq.n	8000fde <PE_SubStateMachine_Generic+0x226>
 8000fd0:	2904      	cmp	r1, #4
 8000fd2:	bf18      	it	ne
 8000fd4:	290c      	cmpne	r1, #12
 8000fd6:	d006      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x22e>
 8000fd8:	2910      	cmp	r1, #16
 8000fda:	d011      	beq.n	8001000 <PE_SubStateMachine_Generic+0x248>
 8000fdc:	e019      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f000 f9f6 	bl	80013d0 <PE_SwitchDataRole>
 8000fe4:	e008      	b.n	8000ff8 <PE_SubStateMachine_Generic+0x240>
 8000fe6:	f000 001f 	and.w	r0, r0, #31
 8000fea:	280c      	cmp	r0, #12
 8000fec:	7c20      	ldrb	r0, [r4, #16]
 8000fee:	bf0c      	ite	eq
 8000ff0:	2126      	moveq	r1, #38	; 0x26
 8000ff2:	2127      	movne	r1, #39	; 0x27
 8000ff4:	f7ff faaf 	bl	8000556 <USBPD_PE_Notification>
 8000ff8:	f000 f922 	bl	8001240 <.text_53>
 8000ffc:	d107      	bne.n	800100e <PE_SubStateMachine_Generic+0x256>
 8000ffe:	e008      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8001000:	7c20      	ldrb	r0, [r4, #16]
 8001002:	2128      	movs	r1, #40	; 0x28
 8001004:	f7ff faa7 	bl	8000556 <USBPD_PE_Notification>
 8001008:	f000 f91a 	bl	8001240 <.text_53>
 800100c:	d001      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 800100e:	f000 f92c 	bl	800126a <.text_57>
 8001012:	f000 f90b 	bl	800122c <.text_51>
 8001016:	d124      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 8001018:	e0bd      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 800101a:	f000 f918 	bl	800124e <.text_54>
 800101e:	aa04      	add	r2, sp, #16
 8001020:	2114      	movs	r1, #20
 8001022:	47b8      	blx	r7
 8001024:	9803      	ldr	r0, [sp, #12]
 8001026:	2800      	cmp	r0, #0
 8001028:	f000 80fa 	beq.w	8001220 <PE_SubStateMachine_Generic+0x468>
 800102c:	9a03      	ldr	r2, [sp, #12]
 800102e:	0892      	lsrs	r2, r2, #2
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	2100      	movs	r1, #0
 8001034:	2003      	movs	r0, #3
 8001036:	9102      	str	r1, [sp, #8]
 8001038:	9001      	str	r0, [sp, #4]
 800103a:	ab04      	add	r3, sp, #16
 800103c:	220c      	movs	r2, #12
 800103e:	e0d5      	b.n	80011ec <PE_SubStateMachine_Generic+0x434>
 8001040:	6860      	ldr	r0, [r4, #4]
 8001042:	6801      	ldr	r1, [r0, #0]
 8001044:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001048:	b900      	cbnz	r0, 800104c <PE_SubStateMachine_Generic+0x294>
 800104a:	2002      	movs	r0, #2
 800104c:	9000      	str	r0, [sp, #0]
 800104e:	2368      	movs	r3, #104	; 0x68
 8001050:	7879      	ldrb	r1, [r7, #1]
 8001052:	2218      	movs	r2, #24
 8001054:	f000 f951 	bl	80012fa <.text_61+0x2>
 8001058:	2800      	cmp	r0, #0
 800105a:	d102      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 800105c:	200f      	movs	r0, #15
 800105e:	f000 f8e9 	bl	8001234 <.text_52>
 8001062:	e0df      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001064:	7830      	ldrb	r0, [r6, #0]
 8001066:	2814      	cmp	r0, #20
 8001068:	d01b      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800106a:	7839      	ldrb	r1, [r7, #0]
 800106c:	7878      	ldrb	r0, [r7, #1]
 800106e:	4281      	cmp	r1, r0
 8001070:	d117      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001072:	88b9      	ldrh	r1, [r7, #4]
 8001074:	0bc8      	lsrs	r0, r1, #15
 8001076:	d114      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001078:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800107c:	b188      	cbz	r0, 80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800107e:	7938      	ldrb	r0, [r7, #4]
 8001080:	f000 001f 	and.w	r0, r0, #31
 8001084:	280c      	cmp	r0, #12
 8001086:	d10c      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	68a5      	ldr	r5, [r4, #8]
 800108c:	69af      	ldr	r7, [r5, #24]
 800108e:	1c82      	adds	r2, r0, #2
 8001090:	7c20      	ldrb	r0, [r4, #16]
 8001092:	2304      	movs	r3, #4
 8001094:	2114      	movs	r1, #20
 8001096:	47b8      	blx	r7
 8001098:	f000 f8d2 	bl	8001240 <.text_53>
 800109c:	d001      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800109e:	f000 f8e4 	bl	800126a <.text_57>
 80010a2:	f000 f8c3 	bl	800122c <.text_51>
 80010a6:	d106      	bne.n	80010b6 <PE_SubStateMachine_Generic+0x2fe>
 80010a8:	2111      	movs	r1, #17
 80010aa:	e075      	b.n	8001198 <PE_SubStateMachine_Generic+0x3e0>
 80010ac:	9000      	str	r0, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	2210      	movs	r2, #16
 80010b2:	f000 f921 	bl	80012f8 <.text_61>
 80010b6:	e0b5      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80010b8:	f000 f8c9 	bl	800124e <.text_54>
 80010bc:	2108      	movs	r1, #8
 80010be:	47b8      	blx	r7
 80010c0:	9803      	ldr	r0, [sp, #12]
 80010c2:	2119      	movs	r1, #25
 80010c4:	f000 f970 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d172      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010cc:	f000 f8c4 	bl	8001258 <.text_55>
 80010d0:	f000 f8df 	bl	8001292 <.text_59>
 80010d4:	2201      	movs	r2, #1
 80010d6:	f000 f8c4 	bl	8001262 <.text_56>
 80010da:	2148      	movs	r1, #72	; 0x48
 80010dc:	e024      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 80010de:	f000 f8b6 	bl	800124e <.text_54>
 80010e2:	2113      	movs	r1, #19
 80010e4:	47b8      	blx	r7
 80010e6:	9803      	ldr	r0, [sp, #12]
 80010e8:	2118      	movs	r1, #24
 80010ea:	f000 f95d 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d15f      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010f2:	f000 f8b1 	bl	8001258 <.text_55>
 80010f6:	f000 f8cc 	bl	8001292 <.text_59>
 80010fa:	220f      	movs	r2, #15
 80010fc:	f000 f8b1 	bl	8001262 <.text_56>
 8001100:	2161      	movs	r1, #97	; 0x61
 8001102:	e011      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8001104:	f000 f8a3 	bl	800124e <.text_54>
 8001108:	2109      	movs	r1, #9
 800110a:	47b8      	blx	r7
 800110c:	9803      	ldr	r0, [sp, #12]
 800110e:	2107      	movs	r1, #7
 8001110:	f000 f94a 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001114:	2800      	cmp	r0, #0
 8001116:	d14c      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 8001118:	f000 f89e 	bl	8001258 <.text_55>
 800111c:	f000 f8b9 	bl	8001292 <.text_59>
 8001120:	2202      	movs	r2, #2
 8001122:	f000 f89e 	bl	8001262 <.text_56>
 8001126:	214f      	movs	r1, #79	; 0x4f
 8001128:	7c20      	ldrb	r0, [r4, #16]
 800112a:	f7ff fa14 	bl	8000556 <USBPD_PE_Notification>
 800112e:	e079      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001130:	7831      	ldrb	r1, [r6, #0]
 8001132:	2914      	cmp	r1, #20
 8001134:	d02c      	beq.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001136:	88b9      	ldrh	r1, [r7, #4]
 8001138:	0bc8      	lsrs	r0, r1, #15
 800113a:	d115      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800113c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001140:	b190      	cbz	r0, 8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001142:	7938      	ldrb	r0, [r7, #4]
 8001144:	f000 001f 	and.w	r0, r0, #31
 8001148:	2805      	cmp	r0, #5
 800114a:	d10d      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	68a5      	ldr	r5, [r4, #8]
 8001150:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8001154:	1d02      	adds	r2, r0, #4
 8001156:	7c20      	ldrb	r0, [r4, #16]
 8001158:	2304      	movs	r3, #4
 800115a:	210f      	movs	r1, #15
 800115c:	47e0      	blx	ip
 800115e:	f000 f86f 	bl	8001240 <.text_53>
 8001162:	d001      	beq.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001164:	f000 f881 	bl	800126a <.text_57>
 8001168:	7938      	ldrb	r0, [r7, #4]
 800116a:	f000 001f 	and.w	r0, r0, #31
 800116e:	2810      	cmp	r0, #16
 8001170:	d10e      	bne.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001172:	7c20      	ldrb	r0, [r4, #16]
 8001174:	2159      	movs	r1, #89	; 0x59
 8001176:	f7ff f9ee 	bl	8000556 <USBPD_PE_Notification>
 800117a:	2000      	movs	r0, #0
 800117c:	83e0      	strh	r0, [r4, #30]
 800117e:	7831      	ldrb	r1, [r6, #0]
 8001180:	2914      	cmp	r1, #20
 8001182:	d001      	beq.n	8001188 <PE_SubStateMachine_Generic+0x3d0>
 8001184:	f000 f871 	bl	800126a <.text_57>
 8001188:	2103      	movs	r1, #3
 800118a:	7461      	strb	r1, [r4, #17]
 800118c:	f04f 0a00 	mov.w	sl, #0
 8001190:	f000 f84c 	bl	800122c <.text_51>
 8001194:	d146      	bne.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001196:	2103      	movs	r1, #3
 8001198:	7461      	strb	r1, [r4, #17]
 800119a:	f04f 0a00 	mov.w	sl, #0
 800119e:	e041      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011a0:	f000 f855 	bl	800124e <.text_54>
 80011a4:	210d      	movs	r1, #13
 80011a6:	47b8      	blx	r7
 80011a8:	9803      	ldr	r0, [sp, #12]
 80011aa:	2104      	movs	r1, #4
 80011ac:	f000 f8fc 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d135      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011b4:	f000 f850 	bl	8001258 <.text_55>
 80011b8:	f000 f85c 	bl	8001274 <.text_58>
 80011bc:	2207      	movs	r2, #7
 80011be:	e027      	b.n	8001210 <PE_SubStateMachine_Generic+0x458>
 80011c0:	9004      	str	r0, [sp, #16]
 80011c2:	ab03      	add	r3, sp, #12
 80011c4:	68a6      	ldr	r6, [r4, #8]
 80011c6:	7c20      	ldrb	r0, [r4, #16]
 80011c8:	6977      	ldr	r7, [r6, #20]
 80011ca:	aa04      	add	r2, sp, #16
 80011cc:	210f      	movs	r1, #15
 80011ce:	47b8      	blx	r7
 80011d0:	9803      	ldr	r0, [sp, #12]
 80011d2:	2104      	movs	r1, #4
 80011d4:	f000 f8e8 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d121      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011dc:	2103      	movs	r1, #3
 80011de:	2201      	movs	r2, #1
 80011e0:	9101      	str	r1, [sp, #4]
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	9002      	str	r0, [sp, #8]
 80011e6:	ab04      	add	r3, sp, #16
 80011e8:	2205      	movs	r2, #5
 80011ea:	2100      	movs	r1, #0
 80011ec:	4620      	mov	r0, r4
 80011ee:	f000 f968 	bl	80014c2 <PE_Send_DataMessage>
 80011f2:	e017      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011f4:	f000 f82b 	bl	800124e <.text_54>
 80011f8:	2111      	movs	r1, #17
 80011fa:	47b8      	blx	r7
 80011fc:	9803      	ldr	r0, [sp, #12]
 80011fe:	2109      	movs	r1, #9
 8001200:	f000 f8d2 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001204:	b960      	cbnz	r0, 8001220 <PE_SubStateMachine_Generic+0x468>
 8001206:	f000 f827 	bl	8001258 <.text_55>
 800120a:	f000 f833 	bl	8001274 <.text_58>
 800120e:	2205      	movs	r2, #5
 8001210:	f000 f827 	bl	8001262 <.text_56>
 8001214:	e006      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001216:	7c20      	ldrb	r0, [r4, #16]
 8001218:	2150      	movs	r1, #80	; 0x50
 800121a:	f7ff f99c 	bl	8000556 <USBPD_PE_Notification>
 800121e:	e7ba      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8001220:	2001      	movs	r0, #1
 8001222:	7460      	strb	r0, [r4, #17]
 8001224:	4650      	mov	r0, sl
 8001226:	b00c      	add	sp, #48	; 0x30
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800122c <.text_51>:
 800122c:	8be0      	ldrh	r0, [r4, #30]
 800122e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001232:	4770      	bx	lr

08001234 <.text_52>:
 8001234:	7720      	strb	r0, [r4, #28]
 8001236:	f8a4 801e 	strh.w	r8, [r4, #30]
 800123a:	f04f 0a1b 	mov.w	sl, #27
 800123e:	4770      	bx	lr

08001240 <.text_53>:
 8001240:	2003      	movs	r0, #3
 8001242:	7460      	strb	r0, [r4, #17]
 8001244:	f04f 0a00 	mov.w	sl, #0
 8001248:	7831      	ldrb	r1, [r6, #0]
 800124a:	2914      	cmp	r1, #20
 800124c:	4770      	bx	lr

0800124e <.text_54>:
 800124e:	68a6      	ldr	r6, [r4, #8]
 8001250:	7c20      	ldrb	r0, [r4, #16]
 8001252:	6977      	ldr	r7, [r6, #20]
 8001254:	ab03      	add	r3, sp, #12
 8001256:	4770      	bx	lr

08001258 <.text_55>:
 8001258:	7028      	strb	r0, [r5, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	7069      	strb	r1, [r5, #1]
 800125e:	7c20      	ldrb	r0, [r4, #16]
 8001260:	e599      	b.n	8000d96 <PE_Get_UnchunkedSupport>

08001262 <.text_56>:
 8001262:	2100      	movs	r1, #0
 8001264:	4620      	mov	r0, r4
 8001266:	f000 ba4b 	b.w	8001700 <PE_Send_ExtendedMessage>

0800126a <.text_57>:
 800126a:	2014      	movs	r0, #20
 800126c:	7030      	strb	r0, [r6, #0]
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff bb9c 	b.w	80009ac <PE_Clear_RxEvent>

08001274 <.text_58>:
 8001274:	b918      	cbnz	r0, 800127e <.text_58+0xa>
 8001276:	7868      	ldrb	r0, [r5, #1]
 8001278:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800127c:	7068      	strb	r0, [r5, #1]
 800127e:	2000      	movs	r0, #0
 8001280:	9a03      	ldr	r2, [sp, #12]
 8001282:	9002      	str	r0, [sp, #8]
 8001284:	1d12      	adds	r2, r2, #4
 8001286:	b292      	uxth	r2, r2
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	2103      	movs	r1, #3
 800128c:	9101      	str	r1, [sp, #4]
 800128e:	464b      	mov	r3, r9
 8001290:	4770      	bx	lr

08001292 <.text_59>:
 8001292:	b918      	cbnz	r0, 800129c <.text_59+0xa>
 8001294:	7868      	ldrb	r0, [r5, #1]
 8001296:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800129a:	7068      	strb	r0, [r5, #1]
 800129c:	2000      	movs	r0, #0
 800129e:	9a03      	ldr	r2, [sp, #12]
 80012a0:	9002      	str	r0, [sp, #8]
 80012a2:	1d12      	adds	r2, r2, #4
 80012a4:	2103      	movs	r1, #3
 80012a6:	b292      	uxth	r2, r2
 80012a8:	9101      	str	r1, [sp, #4]
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	464b      	mov	r3, r9
 80012ae:	4770      	bx	lr

080012b0 <PE_SubStateMachine_ReceiveDRS>:
 80012b0:	b51c      	push	{r2, r3, r4, lr}
 80012b2:	4604      	mov	r4, r0
 80012b4:	68a1      	ldr	r1, [r4, #8]
 80012b6:	7c20      	ldrb	r0, [r4, #16]
 80012b8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80012ba:	4790      	blx	r2
 80012bc:	280a      	cmp	r0, #10
 80012be:	d002      	beq.n	80012c6 <PE_SubStateMachine_ReceiveDRS+0x16>
 80012c0:	280c      	cmp	r0, #12
 80012c2:	d00b      	beq.n	80012dc <PE_SubStateMachine_ReceiveDRS+0x2c>
 80012c4:	e00c      	b.n	80012e0 <PE_SubStateMachine_ReceiveDRS+0x30>
 80012c6:	2000      	movs	r0, #0
 80012c8:	9000      	str	r0, [sp, #0]
 80012ca:	2303      	movs	r3, #3
 80012cc:	2203      	movs	r2, #3
 80012ce:	f000 f813 	bl	80012f8 <.text_61>
 80012d2:	b980      	cbnz	r0, 80012f6 <PE_SubStateMachine_ReceiveDRS+0x46>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e8bd 4016 	ldmia.w	sp!, {r1, r2, r4, lr}
 80012da:	e079      	b.n	80013d0 <PE_SwitchDataRole>
 80012dc:	202a      	movs	r0, #42	; 0x2a
 80012de:	e006      	b.n	80012ee <PE_SubStateMachine_ReceiveDRS+0x3e>
 80012e0:	6860      	ldr	r0, [r4, #4]
 80012e2:	7801      	ldrb	r1, [r0, #0]
 80012e4:	f001 0103 	and.w	r1, r1, #3
 80012e8:	2902      	cmp	r1, #2
 80012ea:	d102      	bne.n	80012f2 <PE_SubStateMachine_ReceiveDRS+0x42>
 80012ec:	2001      	movs	r0, #1
 80012ee:	7460      	strb	r0, [r4, #17]
 80012f0:	bd13      	pop	{r0, r1, r4, pc}
 80012f2:	212a      	movs	r1, #42	; 0x2a
 80012f4:	7461      	strb	r1, [r4, #17]
 80012f6:	bd13      	pop	{r0, r1, r4, pc}

080012f8 <.text_61>:
 80012f8:	2100      	movs	r1, #0
 80012fa:	4620      	mov	r0, r4
 80012fc:	f000 b8b4 	b.w	8001468 <PE_Send_CtrlMessage>

08001300 <PE_UpdateTimer>:
 8001300:	b510      	push	{r4, lr}
 8001302:	4602      	mov	r2, r0
 8001304:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8001308:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800130c:	42a1      	cmp	r1, r4
 800130e:	bfb8      	it	lt
 8001310:	1a50      	sublt	r0, r2, r1
 8001312:	b280      	uxth	r0, r0
 8001314:	bd10      	pop	{r4, pc}

08001316 <PE_CallHardResetCallback>:
 8001316:	6883      	ldr	r3, [r0, #8]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf1c      	itt	ne
 800131e:	7c00      	ldrbne	r0, [r0, #16]

08001320 <__iar_annotation$$tailcall>:
 8001320:	4718      	bxne	r3
 8001322:	4770      	bx	lr

08001324 <PE_SetPowerNegotiation>:
 8001324:	6842      	ldr	r2, [r0, #4]
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f3c3 2202 	ubfx	r2, r3, #8, #3
 800132c:	4291      	cmp	r1, r2
 800132e:	d007      	beq.n	8001340 <PE_SetPowerNegotiation+0x1c>
 8001330:	6842      	ldr	r2, [r0, #4]
 8001332:	f361 230a 	bfi	r3, r1, #8, #3
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	215a      	movs	r1, #90	; 0x5a
 800133a:	7c00      	ldrb	r0, [r0, #16]
 800133c:	f7ff b90b 	b.w	8000556 <USBPD_PE_Notification>
 8001340:	4770      	bx	lr

08001342 <USBPD_PE_ExecFastRoleSwapSignalling>:
 8001342:	4921      	ldr	r1, [pc, #132]	; (80013c8 <.text_70>)
 8001344:	4602      	mov	r2, r0
 8001346:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]

0800134a <.text_66>:
 800134a:	694a      	ldr	r2, [r1, #20]
 800134c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001350:	614a      	str	r2, [r1, #20]
 8001352:	6889      	ldr	r1, [r1, #8]
 8001354:	6a8a      	ldr	r2, [r1, #40]	; 0x28

08001356 <__iar_annotation$$tailcall>:
 8001356:	4710      	bx	r2

08001358 <PE_CalculateMinTiming>:
 8001358:	4601      	mov	r1, r0
 800135a:	f04f 30ff 	mov.w	r0, #4294967295
 800135e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
 8001360:	0453      	lsls	r3, r2, #17
 8001362:	bf1c      	itt	ne
 8001364:	8c88      	ldrhne	r0, [r1, #36]	; 0x24
 8001366:	f3c0 000e 	ubfxne	r0, r0, #0, #15
 800136a:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 800136c:	0453      	lsls	r3, r2, #17
 800136e:	d007      	beq.n	8001380 <PE_CalculateMinTiming+0x28>
 8001370:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8001372:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001376:	4290      	cmp	r0, r2
 8001378:	bf24      	itt	cs
 800137a:	8c48      	ldrhcs	r0, [r1, #34]	; 0x22
 800137c:	f3c0 000e 	ubfxcs	r0, r0, #0, #15
 8001380:	4770      	bx	lr

08001382 <PE_SetPowerNegociation>:
 8001382:	b538      	push	{r3, r4, r5, lr}
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	6860      	ldr	r0, [r4, #4]
 800138a:	6802      	ldr	r2, [r0, #0]
 800138c:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8001390:	4285      	cmp	r5, r0
 8001392:	d003      	beq.n	800139c <PE_SetPowerNegociation+0x1a>
 8001394:	7c20      	ldrb	r0, [r4, #16]
 8001396:	215a      	movs	r1, #90	; 0x5a
 8001398:	f7ff f8dd 	bl	8000556 <USBPD_PE_Notification>
 800139c:	6860      	ldr	r0, [r4, #4]
 800139e:	6801      	ldr	r1, [r0, #0]
 80013a0:	f365 210a 	bfi	r1, r5, #8, #3
 80013a4:	6001      	str	r1, [r0, #0]
 80013a6:	bd31      	pop	{r0, r4, r5, pc}

080013a8 <PE_CheckDataSizeFromGetDataInfo>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	2200      	movs	r2, #0
 80013ac:	4288      	cmp	r0, r1
 80013ae:	d208      	bcs.n	80013c2 <PE_CheckDataSizeFromGetDataInfo+0x1a>
 80013b0:	2018      	movs	r0, #24
 80013b2:	4c06      	ldr	r4, [pc, #24]	; (80013cc <.text_71>)
 80013b4:	a316      	add	r3, pc, #88	; (adr r3, 8001410 <.text_73>)
 80013b6:	6825      	ldr	r5, [r4, #0]
 80013b8:	9000      	str	r0, [sp, #0]
 80013ba:	2100      	movs	r1, #0
 80013bc:	2006      	movs	r0, #6
 80013be:	47a8      	blx	r5
 80013c0:	2202      	movs	r2, #2
 80013c2:	4610      	mov	r0, r2
 80013c4:	bd32      	pop	{r1, r4, r5, pc}
	...

080013c8 <.text_70>:
 80013c8:	200002c8 	.word	0x200002c8

080013cc <.text_71>:
 80013cc:	20000000 	.word	0x20000000

080013d0 <PE_SwitchDataRole>:
 80013d0:	b510      	push	{r4, lr}
 80013d2:	4604      	mov	r4, r0
 80013d4:	6860      	ldr	r0, [r4, #4]
 80013d6:	6801      	ldr	r1, [r0, #0]
 80013d8:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80013dc:	2800      	cmp	r0, #0
 80013de:	6860      	ldr	r0, [r4, #4]
 80013e0:	d109      	bne.n	80013f6 <PE_SwitchDataRole+0x26>
 80013e2:	f041 0108 	orr.w	r1, r1, #8
 80013e6:	6001      	str	r1, [r0, #0]
 80013e8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80013ec:	7c20      	ldrb	r0, [r4, #16]
 80013ee:	f003 fdf5 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 80013f2:	2125      	movs	r1, #37	; 0x25
 80013f4:	e007      	b.n	8001406 <PE_SwitchDataRole+0x36>
 80013f6:	f021 0108 	bic.w	r1, r1, #8
 80013fa:	6001      	str	r1, [r0, #0]
 80013fc:	2100      	movs	r1, #0
 80013fe:	7c20      	ldrb	r0, [r4, #16]
 8001400:	f003 fdec 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 8001404:	2124      	movs	r1, #36	; 0x24
 8001406:	7c20      	ldrb	r0, [r4, #16]
 8001408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140c:	f7ff b8a3 	b.w	8000556 <USBPD_PE_Notification>

08001410 <.text_73>:
 8001410:	61746144 	.word	0x61746144
 8001414:	7a695320 	.word	0x7a695320
 8001418:	73692065 	.word	0x73692065
 800141c:	746f6e20 	.word	0x746f6e20
 8001420:	726f6320 	.word	0x726f6320
 8001424:	74636572 	.word	0x74636572
 8001428:	00          	.byte	0x00
 8001429:	00          	.byte	0x00
	...

0800142c <USBPD_PE_SetTrace>:
 800142c:	0001      	movs	r1, r0
 800142e:	4906      	ldr	r1, [pc, #24]	; (8001448 <.text_5>)
 8001430:	bf08      	it	eq
 8001432:	f20f 0031 	addweq	r0, pc, #49	; 0x31
 8001436:	6008      	str	r0, [r1, #0]
 8001438:	4770      	bx	lr

0800143a <USBPD_PE_CheckLIB>:
 800143a:	4601      	mov	r1, r0
 800143c:	2000      	movs	r0, #0
 800143e:	4a03      	ldr	r2, [pc, #12]	; (800144c <.text_6>)
 8001440:	4291      	cmp	r1, r2
 8001442:	bf08      	it	eq
 8001444:	2001      	moveq	r0, #1
 8001446:	4770      	bx	lr

08001448 <.text_5>:
 8001448:	20000000 	.word	0x20000000

0800144c <.text_6>:
 800144c:	30410000 	.word	0x30410000

08001450 <USBPD_PE_GetMemoryConsumption>:
 8001450:	b510      	push	{r4, lr}
 8001452:	f003 fda3 	bl	8004f9c <USBPD_PRL_GetMemoryConsumption>
 8001456:	4604      	mov	r4, r0
 8001458:	f7fe ffad 	bl	80003b6 <USBPD_CAD_GetMemoryConsumption>
 800145c:	1904      	adds	r4, r0, r4
 800145e:	f504 6061 	add.w	r0, r4, #3600	; 0xe10
 8001462:	bd10      	pop	{r4, pc}

08001464 <PE_Trace_Empty>:
 8001464:	4770      	bx	lr
	...

08001468 <PE_Send_CtrlMessage>:
 8001468:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800146c:	9c08      	ldr	r4, [sp, #32]
 800146e:	4606      	mov	r6, r0
 8001470:	4688      	mov	r8, r1
 8001472:	4617      	mov	r7, r2
 8001474:	461d      	mov	r5, r3
 8001476:	f000 f81f 	bl	80014b8 <.text_3>
 800147a:	b190      	cbz	r0, 80014a2 <PE_Send_CtrlMessage+0x3a>
 800147c:	9401      	str	r4, [sp, #4]
 800147e:	2002      	movs	r0, #2
 8001480:	9000      	str	r0, [sp, #0]
 8001482:	f206 2363 	addw	r3, r6, #611	; 0x263
 8001486:	7c30      	ldrb	r0, [r6, #16]
 8001488:	463a      	mov	r2, r7
 800148a:	4641      	mov	r1, r8
 800148c:	f003 fde2 	bl	8005054 <USBPD_PRL_SendMessage>
 8001490:	2803      	cmp	r0, #3
 8001492:	d0f0      	beq.n	8001476 <PE_Send_CtrlMessage+0xe>
 8001494:	2810      	cmp	r0, #16
 8001496:	d00d      	beq.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 8001498:	2f0d      	cmp	r7, #13
 800149a:	bf0c      	ite	eq
 800149c:	2201      	moveq	r2, #1
 800149e:	2200      	movne	r2, #0
 80014a0:	e002      	b.n	80014a8 <PE_Send_CtrlMessage+0x40>
 80014a2:	7470      	strb	r0, [r6, #17]
 80014a4:	2010      	movs	r0, #16
 80014a6:	e005      	b.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 80014a8:	4603      	mov	r3, r0
 80014aa:	9500      	str	r5, [sp, #0]
 80014ac:	4641      	mov	r1, r8
 80014ae:	4630      	mov	r0, r6
 80014b0:	f000 fbe8 	bl	8001c84 <PE_CheckSendMessageStatus>
 80014b4:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080014b8 <.text_3>:
 80014b8:	6870      	ldr	r0, [r6, #4]
 80014ba:	6801      	ldr	r1, [r0, #0]
 80014bc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80014c0:	4770      	bx	lr

080014c2 <PE_Send_DataMessage>:
 80014c2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80014c4:	4604      	mov	r4, r0
 80014c6:	9f08      	ldr	r7, [sp, #32]
 80014c8:	460d      	mov	r5, r1
 80014ca:	4616      	mov	r6, r2
 80014cc:	2000      	movs	r0, #0
 80014ce:	e010      	b.n	80014f2 <PE_Send_DataMessage+0x30>
 80014d0:	2100      	movs	r1, #0
 80014d2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80014d6:	f8d3 c000 	ldr.w	ip, [r3]
 80014da:	440a      	add	r2, r1
 80014dc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80014e0:	1c49      	adds	r1, r1, #1
 80014e2:	fa2c fc0e 	lsr.w	ip, ip, lr
 80014e6:	2904      	cmp	r1, #4
 80014e8:	f882 c265 	strb.w	ip, [r2, #613]	; 0x265
 80014ec:	d3f1      	bcc.n	80014d2 <PE_Send_DataMessage+0x10>
 80014ee:	1d1b      	adds	r3, r3, #4
 80014f0:	1c40      	adds	r0, r0, #1
 80014f2:	42b8      	cmp	r0, r7
 80014f4:	d3ec      	bcc.n	80014d0 <PE_Send_DataMessage+0xe>
 80014f6:	6860      	ldr	r0, [r4, #4]
 80014f8:	f7ff ffdf 	bl	80014ba <.text_3+0x2>
 80014fc:	b1d8      	cbz	r0, 8001536 <PE_Send_DataMessage+0x74>
 80014fe:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8001502:	9001      	str	r0, [sp, #4]
 8001504:	f204 2363 	addw	r3, r4, #611	; 0x263
 8001508:	00b8      	lsls	r0, r7, #2
 800150a:	1c80      	adds	r0, r0, #2
 800150c:	b280      	uxth	r0, r0
 800150e:	9000      	str	r0, [sp, #0]
 8001510:	4632      	mov	r2, r6
 8001512:	7c20      	ldrb	r0, [r4, #16]
 8001514:	4629      	mov	r1, r5
 8001516:	f003 fd9d 	bl	8005054 <USBPD_PRL_SendMessage>
 800151a:	2803      	cmp	r0, #3
 800151c:	d0eb      	beq.n	80014f6 <PE_Send_DataMessage+0x34>
 800151e:	2810      	cmp	r0, #16
 8001520:	d008      	beq.n	8001534 <PE_Send_DataMessage+0x72>
 8001522:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8001526:	9100      	str	r1, [sp, #0]
 8001528:	4603      	mov	r3, r0
 800152a:	2200      	movs	r2, #0
 800152c:	4629      	mov	r1, r5
 800152e:	4620      	mov	r0, r4
 8001530:	f000 fba8 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001534:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001536:	2010      	movs	r0, #16
 8001538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0800153c <PE_Check_ExtendedMessage>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	f204 265a 	addw	r6, r4, #602	; 0x25a
 8001544:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001546:	7881      	ldrb	r1, [r0, #2]
 8001548:	78c0      	ldrb	r0, [r0, #3]
 800154a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800154e:	8031      	strh	r1, [r6, #0]
 8001550:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001554:	f000 001f 	and.w	r0, r0, #31
 8001558:	70b0      	strb	r0, [r6, #2]
 800155a:	f3c1 20c3 	ubfx	r0, r1, #11, #4
 800155e:	2800      	cmp	r0, #0
 8001560:	bf1e      	ittt	ne
 8001562:	f3c1 2080 	ubfxne	r0, r1, #10, #1
 8001566:	2800      	cmpne	r0, #0
 8001568:	2034      	movne	r0, #52	; 0x34
 800156a:	d126      	bne.n	80015ba <PE_Check_ExtendedMessage+0x7e>
 800156c:	0408      	lsls	r0, r1, #16
 800156e:	0fc0      	lsrs	r0, r0, #31
 8001570:	f204 2281 	addw	r2, r4, #641	; 0x281
 8001574:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8001578:	d10b      	bne.n	8001592 <PE_Check_ExtendedMessage+0x56>
 800157a:	f8a4 348e 	strh.w	r3, [r4, #1166]	; 0x48e
 800157e:	f8b4 148e 	ldrh.w	r1, [r4, #1166]	; 0x48e
 8001582:	4288      	cmp	r0, r1
 8001584:	d21a      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 8001586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001588:	1d19      	adds	r1, r3, #4
 800158a:	5c0d      	ldrb	r5, [r1, r0]
 800158c:	5415      	strb	r5, [r2, r0]
 800158e:	1c40      	adds	r0, r0, #1
 8001590:	e7f5      	b.n	800157e <PE_Check_ExtendedMessage+0x42>
 8001592:	f411 4ff8 	tst.w	r1, #31744	; 0x7c00
 8001596:	d106      	bne.n	80015a6 <PE_Check_ExtendedMessage+0x6a>
 8001598:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800159a:	f3c0 3002 	ubfx	r0, r0, #12, #3
 800159e:	2807      	cmp	r0, #7
 80015a0:	d30c      	bcc.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a2:	2b1a      	cmp	r3, #26
 80015a4:	d90a      	bls.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a6:	f3c1 2080 	ubfx	r0, r1, #10, #1
 80015aa:	b938      	cbnz	r0, 80015bc <PE_Check_ExtendedMessage+0x80>
 80015ac:	f8b4 048e 	ldrh.w	r0, [r4, #1166]	; 0x48e
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d203      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015b4:	2100      	movs	r1, #0
 80015b6:	83e1      	strh	r1, [r4, #30]
 80015b8:	2037      	movs	r0, #55	; 0x37
 80015ba:	e089      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 80015bc:	7f20      	ldrb	r0, [r4, #28]
 80015be:	78b1      	ldrb	r1, [r6, #2]
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d034      	beq.n	800162e <PE_Check_ExtendedMessage+0xf2>
 80015c4:	2901      	cmp	r1, #1
 80015c6:	d008      	beq.n	80015da <PE_Check_ExtendedMessage+0x9e>
 80015c8:	2902      	cmp	r1, #2
 80015ca:	d018      	beq.n	80015fe <PE_Check_ExtendedMessage+0xc2>
 80015cc:	2905      	cmp	r1, #5
 80015ce:	d028      	beq.n	8001622 <PE_Check_ExtendedMessage+0xe6>
 80015d0:	2907      	cmp	r1, #7
 80015d2:	d021      	beq.n	8001618 <PE_Check_ExtendedMessage+0xdc>
 80015d4:	290f      	cmp	r1, #15
 80015d6:	d009      	beq.n	80015ec <PE_Check_ExtendedMessage+0xb0>
 80015d8:	e07c      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80015da:	f000 f884 	bl	80016e6 <.text_7>
 80015de:	2319      	movs	r3, #25
 80015e0:	2108      	movs	r1, #8
 80015e2:	47b8      	blx	r7
 80015e4:	2003      	movs	r0, #3
 80015e6:	7460      	strb	r0, [r4, #17]
 80015e8:	2147      	movs	r1, #71	; 0x47
 80015ea:	e010      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015ec:	f000 f87b 	bl	80016e6 <.text_7>
 80015f0:	2318      	movs	r3, #24
 80015f2:	2113      	movs	r1, #19
 80015f4:	47b8      	blx	r7
 80015f6:	2003      	movs	r0, #3
 80015f8:	7460      	strb	r0, [r4, #17]
 80015fa:	2162      	movs	r1, #98	; 0x62
 80015fc:	e007      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015fe:	f000 f872 	bl	80016e6 <.text_7>
 8001602:	2307      	movs	r3, #7
 8001604:	2109      	movs	r1, #9
 8001606:	47b8      	blx	r7
 8001608:	2003      	movs	r0, #3
 800160a:	7460      	strb	r0, [r4, #17]
 800160c:	214e      	movs	r1, #78	; 0x4e
 800160e:	7c20      	ldrb	r0, [r4, #16]
 8001610:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}
 8001614:	f7fe bf9f 	b.w	8000556 <USBPD_PE_Notification>
 8001618:	f000 f865 	bl	80016e6 <.text_7>
 800161c:	231a      	movs	r3, #26
 800161e:	210d      	movs	r1, #13
 8001620:	e003      	b.n	800162a <PE_Check_ExtendedMessage+0xee>
 8001622:	f000 f860 	bl	80016e6 <.text_7>
 8001626:	2309      	movs	r3, #9
 8001628:	2111      	movs	r1, #17
 800162a:	47b8      	blx	r7
 800162c:	e04f      	b.n	80016ce <PE_Check_ExtendedMessage+0x192>
 800162e:	1ecb      	subs	r3, r1, #3
 8001630:	2b08      	cmp	r3, #8
 8001632:	d84f      	bhi.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001634:	e8df f003 	tbb	[pc, r3]
 8001638:	174e0e05 	.word	0x174e0e05
 800163c:	243a314e 	.word	0x243a314e
 8001640:	0029      	.short	0x0029
 8001642:	f000 f84a 	bl	80016da <.text_6>
 8001646:	d045      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001648:	f000 f853 	bl	80016f2 <.text_8>
 800164c:	2110      	movs	r1, #16
 800164e:	47b8      	blx	r7
 8001650:	203a      	movs	r0, #58	; 0x3a
 8001652:	e03d      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001654:	f000 f841 	bl	80016da <.text_6>
 8001658:	d03c      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 800165a:	f000 f84a 	bl	80016f2 <.text_8>
 800165e:	210e      	movs	r1, #14
 8001660:	47b8      	blx	r7
 8001662:	203b      	movs	r0, #59	; 0x3b
 8001664:	e034      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	8901      	ldrh	r1, [r0, #8]
 800166a:	f3c1 1080 	ubfx	r0, r1, #6, #1
 800166e:	2800      	cmp	r0, #0
 8001670:	d030      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001672:	f000 f838 	bl	80016e6 <.text_7>
 8001676:	2302      	movs	r3, #2
 8001678:	210c      	movs	r1, #12
 800167a:	47b8      	blx	r7
 800167c:	203c      	movs	r0, #60	; 0x3c
 800167e:	e027      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001680:	6820      	ldr	r0, [r4, #0]
 8001682:	8901      	ldrh	r1, [r0, #8]
 8001684:	f3c1 2080 	ubfx	r0, r1, #10, #1
 8001688:	e00b      	b.n	80016a2 <PE_Check_ExtendedMessage+0x166>
 800168a:	68a0      	ldr	r0, [r4, #8]
 800168c:	6905      	ldr	r5, [r0, #16]
 800168e:	b31d      	cbz	r5, 80016d8 <PE_Check_ExtendedMessage+0x19c>
 8001690:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	; 0x48e
 8001694:	7c20      	ldrb	r0, [r4, #16]
 8001696:	47a8      	blx	r5
 8001698:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800169a:	6820      	ldr	r0, [r4, #0]
 800169c:	8901      	ldrh	r1, [r0, #8]
 800169e:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016a2:	b1b8      	cbz	r0, 80016d4 <PE_Check_ExtendedMessage+0x198>
 80016a4:	68a1      	ldr	r1, [r4, #8]
 80016a6:	6908      	ldr	r0, [r1, #16]
 80016a8:	b950      	cbnz	r0, 80016c0 <PE_Check_ExtendedMessage+0x184>
 80016aa:	e013      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80016ac:	6820      	ldr	r0, [r4, #0]
 80016ae:	8901      	ldrh	r1, [r0, #8]
 80016b0:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016b4:	2800      	cmp	r0, #0
 80016b6:	bf1e      	ittt	ne
 80016b8:	68a1      	ldrne	r1, [r4, #8]
 80016ba:	6908      	ldrne	r0, [r1, #16]
 80016bc:	2800      	cmpne	r0, #0
 80016be:	d00b      	beq.n	80016d8 <PE_Check_ExtendedMessage+0x19c>
 80016c0:	68a5      	ldr	r5, [r4, #8]
 80016c2:	78b1      	ldrb	r1, [r6, #2]
 80016c4:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	; 0x48e
 80016c8:	7c20      	ldrb	r0, [r4, #16]
 80016ca:	692e      	ldr	r6, [r5, #16]
 80016cc:	47b0      	blx	r6
 80016ce:	2003      	movs	r0, #3
 80016d0:	7460      	strb	r0, [r4, #17]
 80016d2:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80016d4:	2101      	movs	r1, #1
 80016d6:	7461      	strb	r1, [r4, #17]
 80016d8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080016da <.text_6>:
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	8901      	ldrh	r1, [r0, #8]
 80016de:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80016e2:	2800      	cmp	r0, #0
 80016e4:	4770      	bx	lr

080016e6 <.text_7>:
 80016e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016e8:	68a5      	ldr	r5, [r4, #8]
 80016ea:	69af      	ldr	r7, [r5, #24]
 80016ec:	1d02      	adds	r2, r0, #4
 80016ee:	7c20      	ldrb	r0, [r4, #16]
 80016f0:	4770      	bx	lr

080016f2 <.text_8>:
 80016f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016f4:	68a5      	ldr	r5, [r4, #8]
 80016f6:	69af      	ldr	r7, [r5, #24]
 80016f8:	1d02      	adds	r2, r0, #4
 80016fa:	7c20      	ldrb	r0, [r4, #16]
 80016fc:	2301      	movs	r3, #1
 80016fe:	4770      	bx	lr

08001700 <PE_Send_ExtendedMessage>:
 8001700:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8001704:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001708:	4606      	mov	r6, r0
 800170a:	460f      	mov	r7, r1
 800170c:	4690      	mov	r8, r2
 800170e:	4699      	mov	r9, r3
 8001710:	f7ff fed2 	bl	80014b8 <.text_3>
 8001714:	b1b8      	cbz	r0, 8001746 <PE_Send_ExtendedMessage+0x46>
 8001716:	9501      	str	r5, [sp, #4]
 8001718:	9400      	str	r4, [sp, #0]
 800171a:	464b      	mov	r3, r9
 800171c:	7c30      	ldrb	r0, [r6, #16]
 800171e:	f048 0280 	orr.w	r2, r8, #128	; 0x80
 8001722:	4639      	mov	r1, r7
 8001724:	f003 fc96 	bl	8005054 <USBPD_PRL_SendMessage>
 8001728:	2803      	cmp	r0, #3
 800172a:	d0f1      	beq.n	8001710 <PE_Send_ExtendedMessage+0x10>
 800172c:	2810      	cmp	r0, #16
 800172e:	d008      	beq.n	8001742 <PE_Send_ExtendedMessage+0x42>
 8001730:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8001734:	9100      	str	r1, [sp, #0]
 8001736:	4603      	mov	r3, r0
 8001738:	2200      	movs	r2, #0
 800173a:	4639      	mov	r1, r7
 800173c:	4630      	mov	r0, r6
 800173e:	f000 faa1 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001742:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8001746:	2011      	movs	r0, #17
 8001748:	7470      	strb	r0, [r6, #17]
 800174a:	2010      	movs	r0, #16
 800174c:	e7f9      	b.n	8001742 <PE_Send_ExtendedMessage+0x42>

0800174e <PE_SubStateMachine_ExtendedMessages>:
 800174e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	4604      	mov	r4, r0
 8001756:	f04f 0802 	mov.w	r8, #2
 800175a:	7c61      	ldrb	r1, [r4, #17]
 800175c:	2931      	cmp	r1, #49	; 0x31
 800175e:	f204 2a67 	addw	sl, r4, #615	; 0x267
 8001762:	f204 3b85 	addw	fp, r4, #901	; 0x385
 8001766:	f204 265a 	addw	r6, r4, #602	; 0x25a
 800176a:	f104 0930 	add.w	r9, r4, #48	; 0x30
 800176e:	f204 2563 	addw	r5, r4, #611	; 0x263
 8001772:	f204 478e 	addw	r7, r4, #1166	; 0x48e
 8001776:	f248 001b 	movw	r0, #32795	; 0x801b
 800177a:	d015      	beq.n	80017a8 <PE_SubStateMachine_ExtendedMessages+0x5a>
 800177c:	2933      	cmp	r1, #51	; 0x33
 800177e:	d058      	beq.n	8001832 <PE_SubStateMachine_ExtendedMessages+0xe4>
 8001780:	2934      	cmp	r1, #52	; 0x34
 8001782:	d05f      	beq.n	8001844 <PE_SubStateMachine_ExtendedMessages+0xf6>
 8001784:	2935      	cmp	r1, #53	; 0x35
 8001786:	f000 808a 	beq.w	800189e <PE_SubStateMachine_ExtendedMessages+0x150>
 800178a:	2936      	cmp	r1, #54	; 0x36
 800178c:	f000 809d 	beq.w	80018ca <PE_SubStateMachine_ExtendedMessages+0x17c>
 8001790:	2937      	cmp	r1, #55	; 0x37
 8001792:	f000 809f 	beq.w	80018d4 <PE_SubStateMachine_ExtendedMessages+0x186>
 8001796:	2938      	cmp	r1, #56	; 0x38
 8001798:	bf01      	itttt	eq
 800179a:	2003      	moveq	r0, #3
 800179c:	7460      	strbeq	r0, [r4, #17]
 800179e:	f04f 0800 	moveq.w	r8, #0
 80017a2:	f8a7 8000 	strheq.w	r8, [r7]
 80017a6:	e0c3      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80017a8:	9503      	str	r5, [sp, #12]
 80017aa:	2500      	movs	r5, #0
 80017ac:	803d      	strh	r5, [r7, #0]
 80017ae:	7c20      	ldrb	r0, [r4, #16]
 80017b0:	f7ff faf1 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017b4:	2801      	cmp	r0, #1
 80017b6:	d106      	bne.n	80017c6 <PE_SubStateMachine_ExtendedMessages+0x78>
 80017b8:	f204 3087 	addw	r0, r4, #903	; 0x387
 80017bc:	7005      	strb	r5, [r0, #0]
 80017be:	7045      	strb	r5, [r0, #1]
 80017c0:	f8cd b00c 	str.w	fp, [sp, #12]
 80017c4:	e017      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017c6:	72f5      	strb	r5, [r6, #11]
 80017c8:	7335      	strb	r5, [r6, #12]
 80017ca:	7c20      	ldrb	r0, [r4, #16]
 80017cc:	f7ff fae3 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017d0:	b918      	cbnz	r0, 80017da <PE_SubStateMachine_ExtendedMessages+0x8c>
 80017d2:	7b30      	ldrb	r0, [r6, #12]
 80017d4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80017d8:	7330      	strb	r0, [r6, #12]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	281b      	cmp	r0, #27
 80017de:	4628      	mov	r0, r5
 80017e0:	d306      	bcc.n	80017f0 <PE_SubStateMachine_ExtendedMessages+0xa2>
 80017e2:	f000 f8a9 	bl	8001938 <.text_11>
 80017e6:	281a      	cmp	r0, #26
 80017e8:	d3fb      	bcc.n	80017e2 <PE_SubStateMachine_ExtendedMessages+0x94>
 80017ea:	e004      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017ec:	f000 f8a4 	bl	8001938 <.text_11>
 80017f0:	8879      	ldrh	r1, [r7, #2]
 80017f2:	4288      	cmp	r0, r1
 80017f4:	d3fa      	bcc.n	80017ec <PE_SubStateMachine_ExtendedMessages+0x9e>
 80017f6:	6960      	ldr	r0, [r4, #20]
 80017f8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80017fc:	b130      	cbz	r0, 800180c <PE_SubStateMachine_ExtendedMessages+0xbe>
 80017fe:	f000 f98f 	bl	8001b20 <.text_16>
 8001802:	bf14      	ite	ne
 8001804:	2501      	movne	r5, #1
 8001806:	2502      	moveq	r5, #2
 8001808:	2033      	movs	r0, #51	; 0x33
 800180a:	e000      	b.n	800180e <PE_SubStateMachine_ExtendedMessages+0xc0>
 800180c:	2003      	movs	r0, #3
 800180e:	9502      	str	r5, [sp, #8]
 8001810:	9001      	str	r0, [sp, #4]
 8001812:	8878      	ldrh	r0, [r7, #2]
 8001814:	9b03      	ldr	r3, [sp, #12]
 8001816:	1d00      	adds	r0, r0, #4
 8001818:	b280      	uxth	r0, r0
 800181a:	9000      	str	r0, [sp, #0]
 800181c:	78f2      	ldrb	r2, [r6, #3]
 800181e:	f899 1003 	ldrb.w	r1, [r9, #3]
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff ff6c 	bl	8001700 <PE_Send_ExtendedMessage>
 8001828:	2800      	cmp	r0, #0
 800182a:	d101      	bne.n	8001830 <PE_SubStateMachine_ExtendedMessages+0xe2>
 800182c:	7970      	ldrb	r0, [r6, #5]
 800182e:	7720      	strb	r0, [r4, #28]
 8001830:	e07e      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001832:	83e0      	strh	r0, [r4, #30]
 8001834:	f04f 081b 	mov.w	r8, #27
 8001838:	78f0      	ldrb	r0, [r6, #3]
 800183a:	2804      	cmp	r0, #4
 800183c:	d148      	bne.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0x182>
 800183e:	2174      	movs	r1, #116	; 0x74
 8001840:	7461      	strb	r1, [r4, #17]
 8001842:	e075      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001844:	8831      	ldrh	r1, [r6, #0]
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	f3c1 21c3 	ubfx	r1, r1, #11, #4
 800184c:	201a      	movs	r0, #26
 800184e:	4341      	muls	r1, r0
 8001850:	4291      	cmp	r1, r2
 8001852:	da04      	bge.n	800185e <PE_SubStateMachine_ExtendedMessages+0x110>
 8001854:	8830      	ldrh	r0, [r6, #0]
 8001856:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800185a:	280a      	cmp	r0, #10
 800185c:	d301      	bcc.n	8001862 <PE_SubStateMachine_ExtendedMessages+0x114>
 800185e:	2003      	movs	r0, #3
 8001860:	e019      	b.n	8001896 <PE_SubStateMachine_ExtendedMessages+0x148>
 8001862:	1a50      	subs	r0, r2, r1
 8001864:	281a      	cmp	r0, #26
 8001866:	bf3a      	itte	cc
 8001868:	1a52      	subcc	r2, r2, r1
 800186a:	b2d2      	uxtbcc	r2, r2
 800186c:	221a      	movcs	r2, #26
 800186e:	2000      	movs	r0, #0
 8001870:	e005      	b.n	800187e <PE_SubStateMachine_ExtendedMessages+0x130>
 8001872:	1843      	adds	r3, r0, r1
 8001874:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8001878:	f80a 3000 	strb.w	r3, [sl, r0]
 800187c:	1c40      	adds	r0, r0, #1
 800187e:	4290      	cmp	r0, r2
 8001880:	d3f7      	bcc.n	8001872 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001882:	8831      	ldrh	r1, [r6, #0]
 8001884:	887a      	ldrh	r2, [r7, #2]
 8001886:	7c20      	ldrb	r0, [r4, #16]
 8001888:	0ac9      	lsrs	r1, r1, #11
 800188a:	462b      	mov	r3, r5
 800188c:	f001 010f 	and.w	r1, r1, #15
 8001890:	f004 f86d 	bl	800596e <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001894:	2035      	movs	r0, #53	; 0x35
 8001896:	7460      	strb	r0, [r4, #17]
 8001898:	f04f 0800 	mov.w	r8, #0
 800189c:	e048      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 800189e:	6960      	ldr	r0, [r4, #20]
 80018a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80018a4:	2800      	cmp	r0, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2036      	movne	r0, #54	; 0x36
 80018aa:	2003      	moveq	r0, #3
 80018ac:	2100      	movs	r1, #0
 80018ae:	9001      	str	r0, [sp, #4]
 80018b0:	9102      	str	r1, [sp, #8]
 80018b2:	462b      	mov	r3, r5
 80018b4:	8878      	ldrh	r0, [r7, #2]
 80018b6:	9000      	str	r0, [sp, #0]
 80018b8:	78f2      	ldrb	r2, [r6, #3]
 80018ba:	f899 1000 	ldrb.w	r1, [r9]
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff ff1e 	bl	8001700 <PE_Send_ExtendedMessage>
 80018c4:	2000      	movs	r0, #0
 80018c6:	8038      	strh	r0, [r7, #0]
 80018c8:	e032      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018ca:	83e0      	strh	r0, [r4, #30]
 80018cc:	f04f 081b 	mov.w	r8, #27
 80018d0:	2039      	movs	r0, #57	; 0x39
 80018d2:	e004      	b.n	80018de <PE_SubStateMachine_ExtendedMessages+0x190>
 80018d4:	8be1      	ldrh	r1, [r4, #30]
 80018d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018da:	d102      	bne.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0x194>
 80018dc:	200f      	movs	r0, #15
 80018de:	7460      	strb	r0, [r4, #17]
 80018e0:	e026      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018e2:	83e0      	strh	r0, [r4, #30]
 80018e4:	4629      	mov	r1, r5
 80018e6:	7c20      	ldrb	r0, [r4, #16]
 80018e8:	f004 f86a 	bl	80059c0 <USBPD_PRL_PrepareChunkRequest>
 80018ec:	f04f 081b 	mov.w	r8, #27
 80018f0:	6860      	ldr	r0, [r4, #4]
 80018f2:	f7ff fde2 	bl	80014ba <.text_3+0x2>
 80018f6:	b180      	cbz	r0, 800191a <PE_SubStateMachine_ExtendedMessages+0x1cc>
 80018f8:	2000      	movs	r0, #0
 80018fa:	2106      	movs	r1, #6
 80018fc:	9001      	str	r0, [sp, #4]
 80018fe:	9100      	str	r1, [sp, #0]
 8001900:	462b      	mov	r3, r5
 8001902:	78b2      	ldrb	r2, [r6, #2]
 8001904:	f899 1000 	ldrb.w	r1, [r9]
 8001908:	7c20      	ldrb	r0, [r4, #16]
 800190a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800190e:	f003 fba1 	bl	8005054 <USBPD_PRL_SendMessage>
 8001912:	2803      	cmp	r0, #3
 8001914:	4603      	mov	r3, r0
 8001916:	d0eb      	beq.n	80018f0 <PE_SubStateMachine_ExtendedMessages+0x1a2>
 8001918:	e002      	b.n	8001920 <PE_SubStateMachine_ExtendedMessages+0x1d2>
 800191a:	2011      	movs	r0, #17
 800191c:	7460      	strb	r0, [r4, #17]
 800191e:	2310      	movs	r3, #16
 8001920:	2039      	movs	r0, #57	; 0x39
 8001922:	9000      	str	r0, [sp, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	f899 1000 	ldrb.w	r1, [r9]
 800192a:	4620      	mov	r0, r4
 800192c:	f000 f9aa 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001930:	4640      	mov	r0, r8
 8001932:	b005      	add	sp, #20
 8001934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001938 <.text_11>:
 8001938:	f81b 1000 	ldrb.w	r1, [fp, r0]
 800193c:	f80a 1000 	strb.w	r1, [sl, r0]
 8001940:	1c40      	adds	r0, r0, #1
 8001942:	4770      	bx	lr

08001944 <PE_ManageRXEvent>:
 8001944:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001948:	780a      	ldrb	r2, [r1, #0]
 800194a:	704a      	strb	r2, [r1, #1]
 800194c:	888a      	ldrh	r2, [r1, #4]
 800194e:	0bd1      	lsrs	r1, r2, #15
 8001950:	bf18      	it	ne
 8001952:	f7ff bdf3 	bne.w	800153c <PE_Check_ExtendedMessage>
 8001956:	f412 4f70 	tst.w	r2, #61440	; 0xf000
 800195a:	bf08      	it	eq
 800195c:	f000 b802 	beq.w	8001964 <PE_Check_ControlMessage>
 8001960:	e0e4      	b.n	8001b2c <PE_Check_DataMessage>
	...

08001964 <PE_Check_ControlMessage>:
 8001964:	b510      	push	{r4, lr}
 8001966:	f000 f987 	bl	8001c78 <.text_18>
 800196a:	1e40      	subs	r0, r0, #1
 800196c:	2817      	cmp	r0, #23
 800196e:	d85b      	bhi.n	8001a28 <PE_Check_ControlMessage+0xc4>
 8001970:	e8df f000 	tbb	[pc, r0]
 8001974:	bfbf0ccc 	.word	0xbfbf0ccc
 8001978:	5520bf1e 	.word	0x5520bf1e
 800197c:	bf3b3143 	.word	0xbf3b3143
 8001980:	b9c1c117 	.word	0xb9c1c117
 8001984:	96b18a67 	.word	0x96b18a67
 8001988:	b5c17caa 	.word	0xb5c17caa
 800198c:	f000 f8c8 	bl	8001b20 <.text_16>
 8001990:	f040 80bc 	bne.w	8001b0c <PE_Check_ControlMessage+0x1a8>
 8001994:	2002      	movs	r0, #2
 8001996:	7720      	strb	r0, [r4, #28]
 8001998:	212b      	movs	r1, #43	; 0x2b
 800199a:	f000 f8be 	bl	8001b1a <.text_15>
 800199e:	2198      	movs	r1, #152	; 0x98
 80019a0:	e0b3      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 80019a2:	2003      	movs	r0, #3
 80019a4:	7720      	strb	r0, [r4, #28]
 80019a6:	2132      	movs	r1, #50	; 0x32
 80019a8:	f000 f8b7 	bl	8001b1a <.text_15>
 80019ac:	2010      	movs	r0, #16
 80019ae:	e0a9      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019b0:	2133      	movs	r1, #51	; 0x33
 80019b2:	e099      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 80019b4:	2006      	movs	r0, #6
 80019b6:	7720      	strb	r0, [r4, #28]
 80019b8:	f000 f8b2 	bl	8001b20 <.text_16>
 80019bc:	bf01      	itttt	eq
 80019be:	6820      	ldreq	r0, [r4, #0]
 80019c0:	6841      	ldreq	r1, [r0, #4]
 80019c2:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 80019c6:	2800      	cmpeq	r0, #0
 80019c8:	d024      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019ca:	7c20      	ldrb	r0, [r4, #16]
 80019cc:	210c      	movs	r1, #12
 80019ce:	f7fe fdc2 	bl	8000556 <USBPD_PE_Notification>
 80019d2:	204c      	movs	r0, #76	; 0x4c
 80019d4:	e096      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019d6:	f000 f89a 	bl	8001b0e <.text_14>
 80019da:	d01b      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019dc:	2008      	movs	r0, #8
 80019de:	7720      	strb	r0, [r4, #28]
 80019e0:	213c      	movs	r1, #60	; 0x3c
 80019e2:	f000 f89a 	bl	8001b1a <.text_15>
 80019e6:	2022      	movs	r0, #34	; 0x22
 80019e8:	e08c      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019ea:	68a1      	ldr	r1, [r4, #8]
 80019ec:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d010      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019f2:	2111      	movs	r1, #17
 80019f4:	7721      	strb	r1, [r4, #28]
 80019f6:	209d      	movs	r0, #157	; 0x9d
 80019f8:	e084      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019fa:	7c20      	ldrb	r0, [r4, #16]
 80019fc:	2123      	movs	r1, #35	; 0x23
 80019fe:	f7fe fdaa 	bl	8000556 <USBPD_PE_Notification>
 8001a02:	6960      	ldr	r0, [r4, #20]
 8001a04:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001a08:	b108      	cbz	r0, 8001a0e <PE_Check_ControlMessage+0xaa>
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	e07a      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001a0e:	68a1      	ldr	r1, [r4, #8]
 8001a10:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d06f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a16:	2010      	movs	r0, #16
 8001a18:	7720      	strb	r0, [r4, #28]
 8001a1a:	2193      	movs	r1, #147	; 0x93
 8001a1c:	e075      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001a1e:	6860      	ldr	r0, [r4, #4]
 8001a20:	6801      	ldr	r1, [r0, #0]
 8001a22:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d165      	bne.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a2a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a2e:	b110      	cbz	r0, 8001a36 <PE_Check_ControlMessage+0xd2>
 8001a30:	f000 f86d 	bl	8001b0e <.text_14>
 8001a34:	d05f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a36:	211d      	movs	r1, #29
 8001a38:	7461      	strb	r1, [r4, #17]
 8001a3a:	2007      	movs	r0, #7
 8001a3c:	7720      	strb	r0, [r4, #28]
 8001a3e:	2106      	movs	r1, #6
 8001a40:	e052      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a42:	6820      	ldr	r0, [r4, #0]
 8001a44:	8901      	ldrh	r1, [r0, #8]
 8001a46:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d059      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a4e:	f000 f867 	bl	8001b20 <.text_16>
 8001a52:	bf01      	itttt	eq
 8001a54:	6820      	ldreq	r0, [r4, #0]
 8001a56:	6841      	ldreq	r1, [r0, #4]
 8001a58:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 8001a5c:	2800      	cmpeq	r0, #0
 8001a5e:	d050      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a60:	2163      	movs	r1, #99	; 0x63
 8001a62:	7461      	strb	r1, [r4, #17]
 8001a64:	200a      	movs	r0, #10
 8001a66:	7720      	strb	r0, [r4, #28]
 8001a68:	2146      	movs	r1, #70	; 0x46
 8001a6a:	e03d      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a6c:	6860      	ldr	r0, [r4, #4]
 8001a6e:	6801      	ldr	r1, [r0, #0]
 8001a70:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a74:	b110      	cbz	r0, 8001a7c <PE_Check_ControlMessage+0x118>
 8001a76:	f000 f84a 	bl	8001b0e <.text_14>
 8001a7a:	d042      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a7c:	2164      	movs	r1, #100	; 0x64
 8001a7e:	7461      	strb	r1, [r4, #17]
 8001a80:	205f      	movs	r0, #95	; 0x5f
 8001a82:	7720      	strb	r0, [r4, #28]
 8001a84:	2160      	movs	r1, #96	; 0x60
 8001a86:	e02f      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	8901      	ldrh	r1, [r0, #8]
 8001a8c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001a90:	b318      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001a92:	200b      	movs	r0, #11
 8001a94:	7720      	strb	r0, [r4, #28]
 8001a96:	214d      	movs	r1, #77	; 0x4d
 8001a98:	f000 f83f 	bl	8001b1a <.text_15>
 8001a9c:	2030      	movs	r0, #48	; 0x30
 8001a9e:	e031      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001aa0:	6820      	ldr	r0, [r4, #0]
 8001aa2:	8901      	ldrh	r1, [r0, #8]
 8001aa4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d02a      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001aac:	200b      	movs	r0, #11
 8001aae:	7720      	strb	r0, [r4, #28]
 8001ab0:	2149      	movs	r1, #73	; 0x49
 8001ab2:	f000 f832 	bl	8001b1a <.text_15>
 8001ab6:	6860      	ldr	r0, [r4, #4]
 8001ab8:	6801      	ldr	r1, [r0, #0]
 8001aba:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001abe:	b108      	cbz	r0, 8001ac4 <PE_Check_ControlMessage+0x160>
 8001ac0:	202d      	movs	r0, #45	; 0x2d
 8001ac2:	e01f      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ac4:	2111      	movs	r1, #17
 8001ac6:	e020      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	8901      	ldrh	r1, [r0, #8]
 8001acc:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8001ad0:	b118      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001ad2:	202f      	movs	r0, #47	; 0x2f
 8001ad4:	e016      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ad6:	2009      	movs	r0, #9
 8001ad8:	7720      	strb	r0, [r4, #28]
 8001ada:	2101      	movs	r1, #1
 8001adc:	e015      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ade:	200f      	movs	r0, #15
 8001ae0:	7720      	strb	r0, [r4, #28]
 8001ae2:	214b      	movs	r1, #75	; 0x4b
 8001ae4:	e011      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ae6:	2159      	movs	r1, #89	; 0x59
 8001ae8:	7c20      	ldrb	r0, [r4, #16]
 8001aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aee:	f7fe bd32 	b.w	8000556 <USBPD_PE_Notification>
 8001af2:	2011      	movs	r0, #17
 8001af4:	e006      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001af6:	6860      	ldr	r0, [r4, #4]
 8001af8:	7801      	ldrb	r1, [r0, #0]
 8001afa:	f001 0103 	and.w	r1, r1, #3
 8001afe:	2902      	cmp	r1, #2
 8001b00:	d102      	bne.n	8001b08 <PE_Check_ControlMessage+0x1a4>
 8001b02:	2001      	movs	r0, #1
 8001b04:	7460      	strb	r0, [r4, #17]
 8001b06:	bd10      	pop	{r4, pc}
 8001b08:	212a      	movs	r1, #42	; 0x2a
 8001b0a:	7461      	strb	r1, [r4, #17]
 8001b0c:	bd10      	pop	{r4, pc}

08001b0e <.text_14>:
 8001b0e:	6820      	ldr	r0, [r4, #0]
 8001b10:	6841      	ldr	r1, [r0, #4]
 8001b12:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001b16:	2800      	cmp	r0, #0
 8001b18:	4770      	bx	lr

08001b1a <.text_15>:
 8001b1a:	7c20      	ldrb	r0, [r4, #16]
 8001b1c:	f7fe bd1b 	b.w	8000556 <USBPD_PE_Notification>

08001b20 <.text_16>:
 8001b20:	6860      	ldr	r0, [r4, #4]
 8001b22:	6801      	ldr	r1, [r0, #0]
 8001b24:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	4770      	bx	lr

08001b2c <PE_Check_DataMessage>:
 8001b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001b2e:	f000 f8a3 	bl	8001c78 <.text_18>
 8001b32:	2801      	cmp	r0, #1
 8001b34:	d02a      	beq.n	8001b8c <PE_Check_DataMessage+0x60>
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d00c      	beq.n	8001b54 <PE_Check_DataMessage+0x28>
 8001b3a:	2803      	cmp	r0, #3
 8001b3c:	d03c      	beq.n	8001bb8 <PE_Check_DataMessage+0x8c>
 8001b3e:	2806      	cmp	r0, #6
 8001b40:	d07c      	beq.n	8001c3c <PE_Check_DataMessage+0x110>
 8001b42:	2807      	cmp	r0, #7
 8001b44:	f000 8089 	beq.w	8001c5a <PE_Check_DataMessage+0x12e>
 8001b48:	280a      	cmp	r0, #10
 8001b4a:	f000 808f 	beq.w	8001c6c <PE_Check_DataMessage+0x140>
 8001b4e:	280f      	cmp	r0, #15
 8001b50:	d070      	beq.n	8001c34 <PE_Check_DataMessage+0x108>
 8001b52:	e08e      	b.n	8001c72 <PE_Check_DataMessage+0x146>
 8001b54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b56:	7881      	ldrb	r1, [r0, #2]
 8001b58:	78c2      	ldrb	r2, [r0, #3]
 8001b5a:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8001b5e:	7901      	ldrb	r1, [r0, #4]
 8001b60:	7940      	ldrb	r0, [r0, #5]
 8001b62:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001b66:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f7ff ffd8 	bl	8001b20 <.text_16>
 8001b70:	d063      	beq.n	8001c3a <PE_Check_DataMessage+0x10e>
 8001b72:	68a5      	ldr	r5, [r4, #8]
 8001b74:	7c20      	ldrb	r0, [r4, #16]
 8001b76:	69ae      	ldr	r6, [r5, #24]
 8001b78:	2304      	movs	r3, #4
 8001b7a:	466a      	mov	r2, sp
 8001b7c:	2106      	movs	r1, #6
 8001b7e:	47b0      	blx	r6
 8001b80:	2001      	movs	r0, #1
 8001b82:	7720      	strb	r0, [r4, #28]
 8001b84:	2100      	movs	r1, #0
 8001b86:	84a1      	strh	r1, [r4, #36]	; 0x24
 8001b88:	2009      	movs	r0, #9
 8001b8a:	e070      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001b8c:	f7ff ffc8 	bl	8001b20 <.text_16>
 8001b90:	d171      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001b92:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001b94:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8001b98:	7c20      	ldrb	r0, [r4, #16]
 8001b9a:	f7ff f84c 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8001b9e:	68a5      	ldr	r5, [r4, #8]
 8001ba0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001ba2:	69ae      	ldr	r6, [r5, #24]
 8001ba4:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001ba8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001baa:	1c82      	adds	r2, r0, #2
 8001bac:	7c20      	ldrb	r0, [r4, #16]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	47b0      	blx	r6
 8001bb4:	2044      	movs	r0, #68	; 0x44
 8001bb6:	e05a      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001bb8:	2100      	movs	r1, #0
 8001bba:	9101      	str	r1, [sp, #4]
 8001bbc:	9100      	str	r1, [sp, #0]
 8001bbe:	466b      	mov	r3, sp
 8001bc0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bc2:	7881      	ldrb	r1, [r0, #2]
 8001bc4:	78c2      	ldrb	r2, [r0, #3]
 8001bc6:	68a6      	ldr	r6, [r4, #8]
 8001bc8:	6977      	ldr	r7, [r6, #20]
 8001bca:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 8001bce:	7901      	ldrb	r1, [r0, #4]
 8001bd0:	7940      	ldrb	r0, [r0, #5]
 8001bd2:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001bd6:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8001bda:	7c20      	ldrb	r0, [r4, #16]
 8001bdc:	aa01      	add	r2, sp, #4
 8001bde:	2103      	movs	r1, #3
 8001be0:	47b8      	blx	r7
 8001be2:	9800      	ldr	r0, [sp, #0]
 8001be4:	2104      	movs	r1, #4
 8001be6:	f7ff fbdf 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	bf01      	itttt	eq
 8001bee:	6860      	ldreq	r0, [r4, #4]
 8001bf0:	6801      	ldreq	r1, [r0, #0]
 8001bf2:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001bf6:	2803      	cmpeq	r0, #3
 8001bf8:	d11a      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001bfa:	9801      	ldr	r0, [sp, #4]
 8001bfc:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c00:	4288      	cmp	r0, r1
 8001c02:	d115      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001c04:	0f2d      	lsrs	r5, r5, #28
 8001c06:	2d05      	cmp	r5, #5
 8001c08:	d010      	beq.n	8001c2c <PE_Check_DataMessage+0x100>
 8001c0a:	2d08      	cmp	r5, #8
 8001c0c:	d00c      	beq.n	8001c28 <PE_Check_DataMessage+0xfc>
 8001c0e:	2d09      	cmp	r5, #9
 8001c10:	d004      	beq.n	8001c1c <PE_Check_DataMessage+0xf0>
 8001c12:	2d0a      	cmp	r5, #10
 8001c14:	d12f      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001c16:	7c20      	ldrb	r0, [r4, #16]
 8001c18:	2166      	movs	r1, #102	; 0x66
 8001c1a:	e001      	b.n	8001c20 <PE_Check_DataMessage+0xf4>
 8001c1c:	7c20      	ldrb	r0, [r4, #16]
 8001c1e:	2165      	movs	r1, #101	; 0x65
 8001c20:	f7fe fc99 	bl	8000556 <USBPD_PE_Notification>
 8001c24:	2003      	movs	r0, #3
 8001c26:	e022      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c28:	2129      	movs	r1, #41	; 0x29
 8001c2a:	e023      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c2c:	2027      	movs	r0, #39	; 0x27
 8001c2e:	e01e      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c30:	2103      	movs	r1, #3
 8001c32:	e01f      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c34:	4620      	mov	r0, r4
 8001c36:	f003 f816 	bl	8004c66 <PE_Check_DataMessageVDM>
 8001c3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	8901      	ldrh	r1, [r0, #8]
 8001c40:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8001c44:	b180      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c48:	68a5      	ldr	r5, [r4, #8]
 8001c4a:	69ae      	ldr	r6, [r5, #24]
 8001c4c:	1c82      	adds	r2, r0, #2
 8001c4e:	7c20      	ldrb	r0, [r4, #16]
 8001c50:	2304      	movs	r3, #4
 8001c52:	210b      	movs	r1, #11
 8001c54:	47b0      	blx	r6
 8001c56:	202c      	movs	r0, #44	; 0x2c
 8001c58:	e009      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c5a:	6820      	ldr	r0, [r4, #0]
 8001c5c:	8901      	ldrh	r1, [r0, #8]
 8001c5e:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8001c62:	b108      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c64:	203d      	movs	r0, #61	; 0x3d
 8001c66:	e002      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c68:	2101      	movs	r1, #1
 8001c6a:	e003      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	7460      	strb	r0, [r4, #17]
 8001c70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c72:	2111      	movs	r1, #17
 8001c74:	7461      	strb	r1, [r4, #17]
 8001c76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001c78 <.text_18>:
 8001c78:	4604      	mov	r4, r0
 8001c7a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001c7e:	f000 001f 	and.w	r0, r0, #31
 8001c82:	4770      	bx	lr

08001c84 <PE_CheckSendMessageStatus>:
 8001c84:	b510      	push	{r4, lr}
 8001c86:	2410      	movs	r4, #16
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d007      	beq.n	8001c9c <PE_CheckSendMessageStatus+0x18>
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d00c      	beq.n	8001caa <PE_CheckSendMessageStatus+0x26>
 8001c90:	2b07      	cmp	r3, #7
 8001c92:	d00f      	beq.n	8001cb4 <PE_CheckSendMessageStatus+0x30>
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	bf08      	it	eq
 8001c98:	2409      	moveq	r4, #9
 8001c9a:	e027      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001c9c:	9902      	ldr	r1, [sp, #8]
 8001c9e:	7441      	strb	r1, [r0, #17]
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	6941      	ldr	r1, [r0, #20]
 8001ca4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001ca8:	e002      	b.n	8001cb0 <PE_CheckSendMessageStatus+0x2c>
 8001caa:	6941      	ldr	r1, [r0, #20]
 8001cac:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001cb0:	6141      	str	r1, [r0, #20]
 8001cb2:	e01b      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cb4:	b129      	cbz	r1, 8001cc2 <PE_CheckSendMessageStatus+0x3e>
 8001cb6:	2a01      	cmp	r2, #1
 8001cb8:	bf08      	it	eq
 8001cba:	2199      	moveq	r1, #153	; 0x99
 8001cbc:	d015      	beq.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cbe:	2407      	movs	r4, #7
 8001cc0:	e014      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cc2:	6841      	ldr	r1, [r0, #4]
 8001cc4:	680b      	ldr	r3, [r1, #0]
 8001cc6:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8001cca:	2904      	cmp	r1, #4
 8001ccc:	d003      	beq.n	8001cd6 <PE_CheckSendMessageStatus+0x52>
 8001cce:	2a01      	cmp	r2, #1
 8001cd0:	d10a      	bne.n	8001ce8 <PE_CheckSendMessageStatus+0x64>
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	e009      	b.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	d1fb      	bne.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001cda:	6882      	ldr	r2, [r0, #8]
 8001cdc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001cde:	2900      	cmp	r1, #0
 8001ce0:	d0f7      	beq.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001ce2:	2292      	movs	r2, #146	; 0x92
 8001ce4:	7442      	strb	r2, [r0, #17]
 8001ce6:	e001      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001ce8:	2111      	movs	r1, #17
 8001cea:	7441      	strb	r1, [r0, #17]
 8001cec:	4620      	mov	r0, r4
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <USBPD_PE_StateMachine_SNK>:
 8001cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	f8df 0c2c 	ldr.w	r0, [pc, #3116]	; 8002924 <.text_22>
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001d02:	7c68      	ldrb	r0, [r5, #17]
 8001d04:	2848      	cmp	r0, #72	; 0x48
 8001d06:	d12c      	bne.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f7fe ff28 	bl	8000b5e <PE_Reset_ZI>
 8001d0e:	4628      	mov	r0, r5
 8001d10:	f7fe ff5f 	bl	8000bd2 <PE_Reset_Counter>
 8001d14:	6828      	ldr	r0, [r5, #0]
 8001d16:	7903      	ldrb	r3, [r0, #4]
 8001d18:	7c28      	ldrb	r0, [r5, #16]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	f003 f93e 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8001d26:	6868      	ldr	r0, [r5, #4]
 8001d28:	6801      	ldr	r1, [r0, #0]
 8001d2a:	f021 0108 	bic.w	r1, r1, #8
 8001d2e:	6001      	str	r1, [r0, #0]
 8001d30:	6828      	ldr	r0, [r5, #0]
 8001d32:	6841      	ldr	r1, [r0, #4]
 8001d34:	6868      	ldr	r0, [r5, #4]
 8001d36:	6802      	ldr	r2, [r0, #0]
 8001d38:	f361 0201 	bfi	r2, r1, #0, #2
 8001d3c:	6002      	str	r2, [r0, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	7c28      	ldrb	r0, [r5, #16]
 8001d42:	f003 f985 	bl	8005050 <USBPD_PRL_SOPCapability>
 8001d46:	7c28      	ldrb	r0, [r5, #16]
 8001d48:	f003 fbf7 	bl	800553a <USBPD_PRL_Reset>
 8001d4c:	7ca9      	ldrb	r1, [r5, #18]
 8001d4e:	203e      	movs	r0, #62	; 0x3e
 8001d50:	293e      	cmp	r1, #62	; 0x3e
 8001d52:	7468      	strb	r0, [r5, #17]
 8001d54:	d005      	beq.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d56:	74a8      	strb	r0, [r5, #18]
 8001d58:	f000 fd25 	bl	80027a6 <.text_12>
 8001d5c:	223e      	movs	r2, #62	; 0x3e
 8001d5e:	2004      	movs	r0, #4
 8001d60:	47b8      	blx	r7
 8001d62:	6968      	ldr	r0, [r5, #20]
 8001d64:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001d68:	b130      	cbz	r0, 8001d78 <USBPD_PE_StateMachine_SNK+0x88>
 8001d6a:	6968      	ldr	r0, [r5, #20]
 8001d6c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001d70:	6168      	str	r0, [r5, #20]
 8001d72:	2164      	movs	r1, #100	; 0x64
 8001d74:	f000 fd3b 	bl	80027ee <.text_18>
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f7fe fde3 	bl	8000944 <PE_Get_RxEvent>
 8001d7e:	2803      	cmp	r0, #3
 8001d80:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d84:	d103      	bne.n	8001d8e <USBPD_PE_StateMachine_SNK+0x9e>
 8001d86:	2001      	movs	r0, #1
 8001d88:	b00d      	add	sp, #52	; 0x34
 8001d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d8e:	f88d 400d 	strb.w	r4, [sp, #13]
 8001d92:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 8001d96:	f248 19f4 	movw	r9, #33268	; 0x81f4
 8001d9a:	f248 0b1b 	movw	fp, #32795	; 0x801b
 8001d9e:	6868      	ldr	r0, [r5, #4]
 8001da0:	6801      	ldr	r1, [r0, #0]
 8001da2:	2402      	movs	r4, #2
 8001da4:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f000 8110 	beq.w	8001fce <USBPD_PE_StateMachine_SNK+0x2de>
 8001dae:	6968      	ldr	r0, [r5, #20]
 8001db0:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8001db4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001db8:	b180      	cbz	r0, 8001ddc <USBPD_PE_StateMachine_SNK+0xec>
 8001dba:	20a7      	movs	r0, #167	; 0xa7
 8001dbc:	6969      	ldr	r1, [r5, #20]
 8001dbe:	7468      	strb	r0, [r5, #17]
 8001dc0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8001dc4:	6169      	str	r1, [r5, #20]
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	70b0      	strb	r0, [r6, #2]
 8001dca:	7ca9      	ldrb	r1, [r5, #18]
 8001dcc:	29a7      	cmp	r1, #167	; 0xa7
 8001dce:	d020      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dd0:	20a7      	movs	r0, #167	; 0xa7
 8001dd2:	f000 fcef 	bl	80027b4 <.text_13>
 8001dd6:	22a7      	movs	r2, #167	; 0xa7
 8001dd8:	2004      	movs	r0, #4
 8001dda:	47e0      	blx	ip
 8001ddc:	78b0      	ldrb	r0, [r6, #2]
 8001dde:	280f      	cmp	r0, #15
 8001de0:	bf18      	it	ne
 8001de2:	2814      	cmpne	r0, #20
 8001de4:	d115      	bne.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001de6:	f000 fcce 	bl	8002786 <.text_9+0x2>
 8001dea:	d001      	beq.n	8001df0 <USBPD_PE_StateMachine_SNK+0x100>
 8001dec:	f000 fd06 	bl	80027fc <.text_20>
 8001df0:	78b2      	ldrb	r2, [r6, #2]
 8001df2:	746a      	strb	r2, [r5, #17]
 8001df4:	2000      	movs	r0, #0
 8001df6:	70b0      	strb	r0, [r6, #2]
 8001df8:	7ca9      	ldrb	r1, [r5, #18]
 8001dfa:	4291      	cmp	r1, r2
 8001dfc:	d009      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dfe:	74aa      	strb	r2, [r5, #18]
 8001e00:	9000      	str	r0, [sp, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8df 7b20 	ldr.w	r7, [pc, #2848]	; 8002928 <.text_23>
 8001e08:	7c29      	ldrb	r1, [r5, #16]
 8001e0a:	f8d7 c000 	ldr.w	ip, [r7]
 8001e0e:	2004      	movs	r0, #4
 8001e10:	47e0      	blx	ip
 8001e12:	f000 fcb3 	bl	800277c <.text_8>
 8001e16:	d117      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e18:	6868      	ldr	r0, [r5, #4]
 8001e1a:	6801      	ldr	r1, [r0, #0]
 8001e1c:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001e20:	88b1      	ldrh	r1, [r6, #4]
 8001e22:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001e26:	4288      	cmp	r0, r1
 8001e28:	d10e      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e2a:	f000 fca3 	bl	8002774 <.text_7>
 8001e2e:	f000 fce8 	bl	8002802 <.text_20+0x6>
 8001e32:	7ca9      	ldrb	r1, [r5, #18]
 8001e34:	2092      	movs	r0, #146	; 0x92
 8001e36:	2992      	cmp	r1, #146	; 0x92
 8001e38:	7468      	strb	r0, [r5, #17]
 8001e3a:	f000 80d4 	beq.w	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001e3e:	f000 fcb9 	bl	80027b4 <.text_13>
 8001e42:	2292      	movs	r2, #146	; 0x92
 8001e44:	2004      	movs	r0, #4
 8001e46:	47e0      	blx	ip
 8001e48:	7c68      	ldrb	r0, [r5, #17]
 8001e4a:	0001      	movs	r1, r0
 8001e4c:	f205 275e 	addw	r7, r5, #606	; 0x25e
 8001e50:	f24f 0a1f 	movw	sl, #61471	; 0xf01f
 8001e54:	f000 80bf 	beq.w	8001fd6 <USBPD_PE_StateMachine_SNK+0x2e6>
 8001e58:	1e41      	subs	r1, r0, #1
 8001e5a:	d070      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e5c:	1e89      	subs	r1, r1, #2
 8001e5e:	2901      	cmp	r1, #1
 8001e60:	f240 82aa 	bls.w	80023b8 <USBPD_PE_StateMachine_SNK+0x6c8>
 8001e64:	1e89      	subs	r1, r1, #2
 8001e66:	f000 81bb 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001e6a:	390a      	subs	r1, #10
 8001e6c:	f000 81bd 	beq.w	80021ea <USBPD_PE_StateMachine_SNK+0x4fa>
 8001e70:	1e49      	subs	r1, r1, #1
 8001e72:	f000 8242 	beq.w	80022fa <USBPD_PE_StateMachine_SNK+0x60a>
 8001e76:	1e49      	subs	r1, r1, #1
 8001e78:	f000 8248 	beq.w	800230c <USBPD_PE_StateMachine_SNK+0x61c>
 8001e7c:	1ec9      	subs	r1, r1, #3
 8001e7e:	f000 81e0 	beq.w	8002242 <USBPD_PE_StateMachine_SNK+0x552>
 8001e82:	1f09      	subs	r1, r1, #4
 8001e84:	2901      	cmp	r1, #1
 8001e86:	d95a      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e88:	1e89      	subs	r1, r1, #2
 8001e8a:	f000 826e 	beq.w	800236a <USBPD_PE_StateMachine_SNK+0x67a>
 8001e8e:	1ec9      	subs	r1, r1, #3
 8001e90:	d055      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e92:	1e49      	subs	r1, r1, #1
 8001e94:	f000 8333 	beq.w	80024fe <USBPD_PE_StateMachine_SNK+0x80e>
 8001e98:	1f09      	subs	r1, r1, #4
 8001e9a:	f000 829b 	beq.w	80023d4 <USBPD_PE_StateMachine_SNK+0x6e4>
 8001e9e:	1f49      	subs	r1, r1, #5
 8001ea0:	2902      	cmp	r1, #2
 8001ea2:	d94c      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ea4:	1ec9      	subs	r1, r1, #3
 8001ea6:	f000 8280 	beq.w	80023aa <USBPD_PE_StateMachine_SNK+0x6ba>
 8001eaa:	1e49      	subs	r1, r1, #1
 8001eac:	f000 838f 	beq.w	80025ce <USBPD_PE_StateMachine_SNK+0x8de>
 8001eb0:	1e49      	subs	r1, r1, #1
 8001eb2:	d044      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001eb4:	1e89      	subs	r1, r1, #2
 8001eb6:	f000 83cd 	beq.w	8002654 <USBPD_PE_StateMachine_SNK+0x964>
 8001eba:	1e49      	subs	r1, r1, #1
 8001ebc:	2901      	cmp	r1, #1
 8001ebe:	d93e      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ec0:	1e89      	subs	r1, r1, #2
 8001ec2:	d001      	beq.n	8001ec8 <USBPD_PE_StateMachine_SNK+0x1d8>
 8001ec4:	1e89      	subs	r1, r1, #2
 8001ec6:	2905      	cmp	r1, #5
 8001ec8:	f240 83f3 	bls.w	80026b2 <USBPD_PE_StateMachine_SNK+0x9c2>
 8001ecc:	1f89      	subs	r1, r1, #6
 8001ece:	f000 83ce 	beq.w	800266e <USBPD_PE_StateMachine_SNK+0x97e>
 8001ed2:	1e49      	subs	r1, r1, #1
 8001ed4:	2903      	cmp	r1, #3
 8001ed6:	d932      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ed8:	1f09      	subs	r1, r1, #4
 8001eda:	f000 808d 	beq.w	8001ff8 <USBPD_PE_StateMachine_SNK+0x308>
 8001ede:	1e89      	subs	r1, r1, #2
 8001ee0:	f000 81da 	beq.w	8002298 <USBPD_PE_StateMachine_SNK+0x5a8>
 8001ee4:	1ec9      	subs	r1, r1, #3
 8001ee6:	f000 80a0 	beq.w	800202a <USBPD_PE_StateMachine_SNK+0x33a>
 8001eea:	1e49      	subs	r1, r1, #1
 8001eec:	f000 80d7 	beq.w	800209e <USBPD_PE_StateMachine_SNK+0x3ae>
 8001ef0:	1e49      	subs	r1, r1, #1
 8001ef2:	f000 80e3 	beq.w	80020bc <USBPD_PE_StateMachine_SNK+0x3cc>
 8001ef6:	1e49      	subs	r1, r1, #1
 8001ef8:	f000 80fb 	beq.w	80020f2 <USBPD_PE_StateMachine_SNK+0x402>
 8001efc:	1e49      	subs	r1, r1, #1
 8001efe:	f000 8146 	beq.w	800218e <USBPD_PE_StateMachine_SNK+0x49e>
 8001f02:	1e89      	subs	r1, r1, #2
 8001f04:	d0ac      	beq.n	8001e60 <USBPD_PE_StateMachine_SNK+0x170>
 8001f06:	1e89      	subs	r1, r1, #2
 8001f08:	d019      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f0a:	1e49      	subs	r1, r1, #1
 8001f0c:	f000 8343 	beq.w	8002596 <USBPD_PE_StateMachine_SNK+0x8a6>
 8001f10:	1f09      	subs	r1, r1, #4
 8001f12:	f000 8212 	beq.w	800233a <USBPD_PE_StateMachine_SNK+0x64a>
 8001f16:	1ec9      	subs	r1, r1, #3
 8001f18:	f000 82b2 	beq.w	8002480 <USBPD_PE_StateMachine_SNK+0x790>
 8001f1c:	1f49      	subs	r1, r1, #5
 8001f1e:	f000 82fb 	beq.w	8002518 <USBPD_PE_StateMachine_SNK+0x828>
 8001f22:	1e49      	subs	r1, r1, #1
 8001f24:	f000 8283 	beq.w	800242e <USBPD_PE_StateMachine_SNK+0x73e>
 8001f28:	3909      	subs	r1, #9
 8001f2a:	2902      	cmp	r1, #2
 8001f2c:	d907      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f2e:	1ec9      	subs	r1, r1, #3
 8001f30:	f000 835e 	beq.w	80025f0 <USBPD_PE_StateMachine_SNK+0x900>
 8001f34:	1e49      	subs	r1, r1, #1
 8001f36:	f000 836b 	beq.w	8002610 <USBPD_PE_StateMachine_SNK+0x920>
 8001f3a:	1e49      	subs	r1, r1, #1
 8001f3c:	2901      	cmp	r1, #1
 8001f3e:	f240 83bc 	bls.w	80026ba <USBPD_PE_StateMachine_SNK+0x9ca>
 8001f42:	390d      	subs	r1, #13
 8001f44:	d0fb      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f46:	3912      	subs	r1, #18
 8001f48:	f000 83cc 	beq.w	80026e4 <USBPD_PE_StateMachine_SNK+0x9f4>
 8001f4c:	390c      	subs	r1, #12
 8001f4e:	d04a      	beq.n	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001f50:	1e49      	subs	r1, r1, #1
 8001f52:	2902      	cmp	r1, #2
 8001f54:	d9f3      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f56:	1f49      	subs	r1, r1, #5
 8001f58:	f000 8213 	beq.w	8002382 <USBPD_PE_StateMachine_SNK+0x692>
 8001f5c:	1e49      	subs	r1, r1, #1
 8001f5e:	d0ee      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f60:	1e49      	subs	r1, r1, #1
 8001f62:	f000 813d 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001f66:	1e49      	subs	r1, r1, #1
 8001f68:	f000 817d 	beq.w	8002266 <USBPD_PE_StateMachine_SNK+0x576>
 8001f6c:	1e49      	subs	r1, r1, #1
 8001f6e:	2908      	cmp	r1, #8
 8001f70:	f240 83a8 	bls.w	80026c4 <USBPD_PE_StateMachine_SNK+0x9d4>
 8001f74:	390b      	subs	r1, #11
 8001f76:	f000 83bb 	beq.w	80026f0 <USBPD_PE_StateMachine_SNK+0xa00>
 8001f7a:	a903      	add	r1, sp, #12
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f002 f859 	bl	8004034 <PE_StateMachine_VDM>
 8001f82:	4604      	mov	r4, r0
 8001f84:	7c6a      	ldrb	r2, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	4290      	cmp	r0, r2
 8001f8a:	d004      	beq.n	8001f96 <USBPD_PE_StateMachine_SNK+0x2a6>
 8001f8c:	74aa      	strb	r2, [r5, #18]
 8001f8e:	f000 fc0a 	bl	80027a6 <.text_12>
 8001f92:	2004      	movs	r0, #4
 8001f94:	47b8      	blx	r7
 8001f96:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001f9a:	f8df 698c 	ldr.w	r6, [pc, #2444]	; 8002928 <.text_23>
 8001f9e:	2814      	cmp	r0, #20
 8001fa0:	f000 83b1 	beq.w	8002706 <USBPD_PE_StateMachine_SNK+0xa16>
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f7fe fd42 	bl	8000a2e <PE_Check_AMSConflict>
 8001faa:	2815      	cmp	r0, #21
 8001fac:	d104      	bne.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fae:	f000 fbea 	bl	8002786 <.text_9+0x2>
 8001fb2:	d001      	beq.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fb4:	f000 fc22 	bl	80027fc <.text_20>
 8001fb8:	7c6a      	ldrb	r2, [r5, #17]
 8001fba:	7ca8      	ldrb	r0, [r5, #18]
 8001fbc:	4290      	cmp	r0, r2
 8001fbe:	d004      	beq.n	8001fca <USBPD_PE_StateMachine_SNK+0x2da>
 8001fc0:	74aa      	strb	r2, [r5, #18]
 8001fc2:	f000 fbea 	bl	800279a <.text_11>
 8001fc6:	2004      	movs	r0, #4
 8001fc8:	47a0      	blx	r4
 8001fca:	2400      	movs	r4, #0
 8001fcc:	e3b7      	b.n	800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 8001fce:	f04f 34ff 	mov.w	r4, #4294967295
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	e6d8      	b.n	8001d88 <USBPD_PE_StateMachine_SNK+0x98>
 8001fd6:	f000 fbfc 	bl	80027d2 <.text_15>
 8001fda:	215f      	movs	r1, #95	; 0x5f
 8001fdc:	f000 fc07 	bl	80027ee <.text_18>
 8001fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8001fe4:	e7ce      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8001fe6:	f000 fbf4 	bl	80027d2 <.text_15>
 8001fea:	68a8      	ldr	r0, [r5, #8]
 8001fec:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001fee:	2900      	cmp	r1, #0
 8001ff0:	d0f6      	beq.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff2:	7c28      	ldrb	r0, [r5, #16]
 8001ff4:	4788      	blx	r1
 8001ff6:	e7f3      	b.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff8:	6868      	ldr	r0, [r5, #4]
 8001ffa:	6801      	ldr	r1, [r0, #0]
 8001ffc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002000:	2800      	cmp	r0, #0
 8002002:	d0bf      	beq.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002004:	f001 0203 	and.w	r2, r1, #3
 8002008:	6868      	ldr	r0, [r5, #4]
 800200a:	2a01      	cmp	r2, #1
 800200c:	bf0c      	ite	eq
 800200e:	2200      	moveq	r2, #0
 8002010:	2220      	movne	r2, #32
 8002012:	f021 0120 	bic.w	r1, r1, #32
 8002016:	4311      	orrs	r1, r2
 8002018:	6001      	str	r1, [r0, #0]
 800201a:	2001      	movs	r0, #1
 800201c:	7728      	strb	r0, [r5, #28]
 800201e:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002022:	4644      	mov	r4, r8
 8002024:	2143      	movs	r1, #67	; 0x43
 8002026:	7469      	strb	r1, [r5, #17]
 8002028:	e7ac      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800202a:	f000 fba7 	bl	800277c <.text_8>
 800202e:	d12f      	bne.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002030:	88b1      	ldrh	r1, [r6, #4]
 8002032:	0bc8      	lsrs	r0, r1, #15
 8002034:	d128      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002036:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800203a:	b328      	cbz	r0, 8002088 <USBPD_PE_StateMachine_SNK+0x398>
 800203c:	4608      	mov	r0, r1
 800203e:	f000 011f 	and.w	r1, r0, #31
 8002042:	2901      	cmp	r1, #1
 8002044:	d120      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002046:	2200      	movs	r2, #0
 8002048:	70ba      	strb	r2, [r7, #2]
 800204a:	6969      	ldr	r1, [r5, #20]
 800204c:	f041 0104 	orr.w	r1, r1, #4
 8002050:	6169      	str	r1, [r5, #20]
 8002052:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002056:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800205a:	f7fe fdec 	bl	8000c36 <PE_ExtRevisionInteroperability>
 800205e:	88b0      	ldrh	r0, [r6, #4]
 8002060:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8002064:	68b0      	ldr	r0, [r6, #8]
 8002066:	68ae      	ldr	r6, [r5, #8]
 8002068:	69b7      	ldr	r7, [r6, #24]
 800206a:	1c82      	adds	r2, r0, #2
 800206c:	7c28      	ldrb	r0, [r5, #16]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	2104      	movs	r1, #4
 8002072:	47b8      	blx	r7
 8002074:	2001      	movs	r0, #1
 8002076:	7728      	strb	r0, [r5, #28]
 8002078:	f000 fbab 	bl	80027d2 <.text_15>
 800207c:	2044      	movs	r0, #68	; 0x44
 800207e:	7468      	strb	r0, [r5, #17]
 8002080:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002084:	2914      	cmp	r1, #20
 8002086:	d003      	beq.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002088:	f000 fb74 	bl	8002774 <.text_7>
 800208c:	f000 fbb9 	bl	8002802 <.text_20+0x6>
 8002090:	f000 fb6c 	bl	800276c <.text_6>
 8002094:	d102      	bne.n	800209c <USBPD_PE_StateMachine_SNK+0x3ac>
 8002096:	210f      	movs	r1, #15
 8002098:	7469      	strb	r1, [r5, #17]
 800209a:	2400      	movs	r4, #0
 800209c:	e772      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800209e:	68ab      	ldr	r3, [r5, #8]
 80020a0:	7c28      	ldrb	r0, [r5, #16]
 80020a2:	6a1c      	ldr	r4, [r3, #32]
 80020a4:	466a      	mov	r2, sp
 80020a6:	f105 0118 	add.w	r1, r5, #24
 80020aa:	47a0      	blx	r4
 80020ac:	9800      	ldr	r0, [sp, #0]
 80020ae:	6969      	ldr	r1, [r5, #20]
 80020b0:	f360 01c4 	bfi	r1, r0, #3, #2
 80020b4:	2045      	movs	r0, #69	; 0x45
 80020b6:	6169      	str	r1, [r5, #20]
 80020b8:	7468      	strb	r0, [r5, #17]
 80020ba:	e7ee      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80020bc:	6968      	ldr	r0, [r5, #20]
 80020be:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80020c2:	b100      	cbz	r0, 80020c6 <USBPD_PE_StateMachine_SNK+0x3d6>
 80020c4:	2002      	movs	r0, #2
 80020c6:	9002      	str	r0, [sp, #8]
 80020c8:	2101      	movs	r1, #1
 80020ca:	2046      	movs	r0, #70	; 0x46
 80020cc:	9001      	str	r0, [sp, #4]
 80020ce:	9100      	str	r1, [sp, #0]
 80020d0:	f105 0318 	add.w	r3, r5, #24
 80020d4:	2202      	movs	r2, #2
 80020d6:	2100      	movs	r1, #0
 80020d8:	4628      	mov	r0, r5
 80020da:	f7ff f9f2 	bl	80014c2 <PE_Send_DataMessage>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d106      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 80020e2:	6968      	ldr	r0, [r5, #20]
 80020e4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80020e8:	6168      	str	r0, [r5, #20]
 80020ea:	f8a5 b01e 	strh.w	fp, [r5, #30]
 80020ee:	241b      	movs	r4, #27
 80020f0:	e748      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80020f2:	f000 fb43 	bl	800277c <.text_8>
 80020f6:	bf04      	itt	eq
 80020f8:	88b0      	ldrheq	r0, [r6, #4]
 80020fa:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 80020fe:	d142      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002100:	f000 001f 	and.w	r0, r0, #31
 8002104:	2802      	cmp	r0, #2
 8002106:	bf18      	it	ne
 8002108:	2803      	cmpne	r0, #3
 800210a:	d019      	beq.n	8002140 <USBPD_PE_StateMachine_SNK+0x450>
 800210c:	2804      	cmp	r0, #4
 800210e:	bf18      	it	ne
 8002110:	280c      	cmpne	r0, #12
 8002112:	d124      	bne.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002114:	6868      	ldr	r0, [r5, #4]
 8002116:	6801      	ldr	r1, [r0, #0]
 8002118:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800211c:	2803      	cmp	r0, #3
 800211e:	d005      	beq.n	800212c <USBPD_PE_StateMachine_SNK+0x43c>
 8002120:	2043      	movs	r0, #67	; 0x43
 8002122:	7468      	strb	r0, [r5, #17]
 8002124:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002128:	4644      	mov	r4, r8
 800212a:	e014      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 800212c:	7930      	ldrb	r0, [r6, #4]
 800212e:	f000 001f 	and.w	r0, r0, #31
 8002132:	280c      	cmp	r0, #12
 8002134:	bf0c      	ite	eq
 8002136:	2049      	moveq	r0, #73	; 0x49
 8002138:	2003      	movne	r0, #3
 800213a:	7468      	strb	r0, [r5, #17]
 800213c:	2400      	movs	r4, #0
 800213e:	e00a      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 8002140:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002144:	f000 fb4f 	bl	80027e6 <.text_17>
 8002148:	2047      	movs	r0, #71	; 0x47
 800214a:	7468      	strb	r0, [r5, #17]
 800214c:	4644      	mov	r4, r8
 800214e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002152:	2914      	cmp	r1, #20
 8002154:	d003      	beq.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002156:	f000 fb0d 	bl	8002774 <.text_7>
 800215a:	f000 fb52 	bl	8002802 <.text_20+0x6>
 800215e:	7930      	ldrb	r0, [r6, #4]
 8002160:	f000 001f 	and.w	r0, r0, #31
 8002164:	2802      	cmp	r0, #2
 8002166:	d009      	beq.n	800217c <USBPD_PE_StateMachine_SNK+0x48c>
 8002168:	2803      	cmp	r0, #3
 800216a:	d009      	beq.n	8002180 <USBPD_PE_StateMachine_SNK+0x490>
 800216c:	2804      	cmp	r0, #4
 800216e:	d003      	beq.n	8002178 <USBPD_PE_StateMachine_SNK+0x488>
 8002170:	280c      	cmp	r0, #12
 8002172:	d108      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002174:	2103      	movs	r1, #3
 8002176:	e004      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002178:	2102      	movs	r1, #2
 800217a:	e002      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 800217c:	2104      	movs	r1, #4
 800217e:	e000      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002180:	2101      	movs	r1, #1
 8002182:	f000 fb34 	bl	80027ee <.text_18>
 8002186:	f000 faf1 	bl	800276c <.text_6>
 800218a:	d1b1      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 800218c:	e783      	b.n	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800218e:	f000 faf5 	bl	800277c <.text_8>
 8002192:	bf02      	ittt	eq
 8002194:	88b0      	ldrheq	r0, [r6, #4]
 8002196:	ea0a 0000 	andeq.w	r0, sl, r0
 800219a:	2806      	cmpeq	r0, #6
 800219c:	d1f3      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800219e:	f000 fb2d 	bl	80027fc <.text_20>
 80021a2:	2103      	movs	r1, #3
 80021a4:	f000 fb20 	bl	80027e8 <.text_17+0x2>
 80021a8:	7c28      	ldrb	r0, [r5, #16]
 80021aa:	2110      	movs	r1, #16
 80021ac:	f7fe f9d3 	bl	8000556 <USBPD_PE_Notification>
 80021b0:	f000 fb09 	bl	80027c6 <.text_14>
 80021b4:	bf1a      	itte	ne
 80021b6:	6828      	ldrne	r0, [r5, #0]
 80021b8:	6801      	ldrne	r1, [r0, #0]
 80021ba:	2101      	moveq	r1, #1
 80021bc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80021c0:	f002 ff46 	bl	8005050 <USBPD_PRL_SOPCapability>
 80021c4:	2000      	movs	r0, #0
 80021c6:	84a8      	strh	r0, [r5, #36]	; 0x24
 80021c8:	6968      	ldr	r0, [r5, #20]
 80021ca:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80021ce:	2803      	cmp	r0, #3
 80021d0:	bf04      	itt	eq
 80021d2:	f24a 3028 	movweq	r0, #41768	; 0xa328
 80021d6:	84a8      	strheq	r0, [r5, #36]	; 0x24
 80021d8:	2103      	movs	r1, #3
 80021da:	7469      	strb	r1, [r5, #17]
 80021dc:	2400      	movs	r4, #0
 80021de:	e7d2      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 80021e0:	a903      	add	r1, sp, #12
 80021e2:	4628      	mov	r0, r5
 80021e4:	f001 fadc 	bl	80037a0 <PE_StateMachine_VDMCable>
 80021e8:	e6cb      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80021ea:	f000 faec 	bl	80027c6 <.text_14>
 80021ee:	bf1e      	ittt	ne
 80021f0:	68a8      	ldrne	r0, [r5, #8]
 80021f2:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 80021f4:	2a00      	cmpne	r2, #0
 80021f6:	d002      	beq.n	80021fe <USBPD_PE_StateMachine_SNK+0x50e>
 80021f8:	7c28      	ldrb	r0, [r5, #16]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4790      	blx	r2
 80021fe:	f000 fae8 	bl	80027d2 <.text_15>
 8002202:	4628      	mov	r0, r5
 8002204:	2101      	movs	r1, #1
 8002206:	f7ff f88d 	bl	8001324 <PE_SetPowerNegotiation>
 800220a:	78b8      	ldrb	r0, [r7, #2]
 800220c:	2803      	cmp	r0, #3
 800220e:	d30a      	bcc.n	8002226 <USBPD_PE_StateMachine_SNK+0x536>
 8002210:	6968      	ldr	r0, [r5, #20]
 8002212:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002216:	2800      	cmp	r0, #0
 8002218:	bf1e      	ittt	ne
 800221a:	68a9      	ldrne	r1, [r5, #8]
 800221c:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 800221e:	2800      	cmpne	r0, #0
 8002220:	d166      	bne.n	80022f0 <USBPD_PE_StateMachine_SNK+0x600>
 8002222:	2100      	movs	r1, #0
 8002224:	e6ff      	b.n	8002026 <USBPD_PE_StateMachine_SNK+0x336>
 8002226:	1c40      	adds	r0, r0, #1
 8002228:	70b8      	strb	r0, [r7, #2]
 800222a:	2105      	movs	r1, #5
 800222c:	4628      	mov	r0, r5
 800222e:	f7fe fb61 	bl	80008f4 <PE_Send_RESET>
 8002232:	f248 30e8 	movw	r0, #33768	; 0x83e8
 8002236:	83e8      	strh	r0, [r5, #30]
 8002238:	2201      	movs	r2, #1
 800223a:	f000 fad0 	bl	80027de <.text_16>
 800223e:	209b      	movs	r0, #155	; 0x9b
 8002240:	e73a      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 8002242:	f000 fac0 	bl	80027c6 <.text_14>
 8002246:	bf1e      	ittt	ne
 8002248:	68a8      	ldrne	r0, [r5, #8]
 800224a:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 800224c:	2a00      	cmpne	r2, #0
 800224e:	d002      	beq.n	8002256 <USBPD_PE_StateMachine_SNK+0x566>
 8002250:	7c28      	ldrb	r0, [r5, #16]
 8002252:	2100      	movs	r1, #0
 8002254:	4790      	blx	r2
 8002256:	2200      	movs	r2, #0
 8002258:	f000 fac1 	bl	80027de <.text_16>
 800225c:	f248 30e8 	movw	r0, #33768	; 0x83e8
 8002260:	83e8      	strh	r0, [r5, #30]
 8002262:	219b      	movs	r1, #155	; 0x9b
 8002264:	e718      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002266:	68aa      	ldr	r2, [r5, #8]
 8002268:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800226c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800226e:	4798      	blx	r3
 8002270:	2801      	cmp	r0, #1
 8002272:	d10d      	bne.n	8002290 <USBPD_PE_StateMachine_SNK+0x5a0>
 8002274:	f648 00e3 	movw	r0, #35043	; 0x88e3
 8002278:	83e8      	strh	r0, [r5, #30]
 800227a:	2169      	movs	r1, #105	; 0x69
 800227c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002280:	f7fe f969 	bl	8000556 <USBPD_PE_Notification>
 8002284:	2040      	movs	r0, #64	; 0x40
 8002286:	7468      	strb	r0, [r5, #17]
 8002288:	2113      	movs	r1, #19
 800228a:	f000 fab0 	bl	80027ee <.text_18>
 800228e:	2400      	movs	r4, #0
 8002290:	f000 fa6c 	bl	800276c <.text_6>
 8002294:	d150      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 8002296:	e01b      	b.n	80022d0 <USBPD_PE_StateMachine_SNK+0x5e0>
 8002298:	68aa      	ldr	r2, [r5, #8]
 800229a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800229e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80022a0:	2101      	movs	r1, #1
 80022a2:	4798      	blx	r3
 80022a4:	2801      	cmp	r0, #1
 80022a6:	d110      	bne.n	80022ca <USBPD_PE_StateMachine_SNK+0x5da>
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7fe fc22 	bl	8000af2 <PE_Reset_HardReset>
 80022ae:	2205      	movs	r2, #5
 80022b0:	2100      	movs	r1, #0
 80022b2:	f000 fa95 	bl	80027e0 <.text_16+0x2>
 80022b6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80022ba:	2168      	movs	r1, #104	; 0x68
 80022bc:	f7fe f94b 	bl	8000556 <USBPD_PE_Notification>
 80022c0:	f8a5 901e 	strh.w	r9, [r5, #30]
 80022c4:	2043      	movs	r0, #67	; 0x43
 80022c6:	4644      	mov	r4, r8
 80022c8:	7468      	strb	r0, [r5, #17]
 80022ca:	f000 fa4f 	bl	800276c <.text_6>
 80022ce:	d133      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 80022d0:	2206      	movs	r2, #6
 80022d2:	2100      	movs	r1, #0
 80022d4:	f000 fa84 	bl	80027e0 <.text_16+0x2>
 80022d8:	78b8      	ldrb	r0, [r7, #2]
 80022da:	2803      	cmp	r0, #3
 80022dc:	f4ff aedb 	bcc.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 80022e0:	6968      	ldr	r0, [r5, #20]
 80022e2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80022e6:	2800      	cmp	r0, #0
 80022e8:	bf1e      	ittt	ne
 80022ea:	68a9      	ldrne	r1, [r5, #8]
 80022ec:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 80022ee:	2800      	cmpne	r0, #0
 80022f0:	f040 80c4 	bne.w	800247c <USBPD_PE_StateMachine_SNK+0x78c>
 80022f4:	2100      	movs	r1, #0
 80022f6:	7469      	strb	r1, [r5, #17]
 80022f8:	e6cf      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80022fa:	2000      	movs	r0, #0
 80022fc:	9000      	str	r0, [sp, #0]
 80022fe:	2303      	movs	r3, #3
 8002300:	2203      	movs	r2, #3
 8002302:	f000 fa78 	bl	80027f6 <.text_19+0x2>
 8002306:	2800      	cmp	r0, #0
 8002308:	d116      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800230a:	e686      	b.n	800201a <USBPD_PE_StateMachine_SNK+0x32a>
 800230c:	6868      	ldr	r0, [r5, #4]
 800230e:	6801      	ldr	r1, [r0, #0]
 8002310:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002314:	2804      	cmp	r0, #4
 8002316:	f43f aebe 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800231a:	2000      	movs	r0, #0
 800231c:	9000      	str	r0, [sp, #0]
 800231e:	2350      	movs	r3, #80	; 0x50
 8002320:	7871      	ldrb	r1, [r6, #1]
 8002322:	220d      	movs	r2, #13
 8002324:	f000 fa67 	bl	80027f6 <.text_19+0x2>
 8002328:	2800      	cmp	r0, #0
 800232a:	d105      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fa18 	bl	8002762 <.text_5>
 8002332:	2130      	movs	r1, #48	; 0x30
 8002334:	f000 fa5b 	bl	80027ee <.text_18>
 8002338:	e624      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800233a:	f000 fa24 	bl	8002786 <.text_9+0x2>
 800233e:	d013      	beq.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002340:	7831      	ldrb	r1, [r6, #0]
 8002342:	7870      	ldrb	r0, [r6, #1]
 8002344:	4281      	cmp	r1, r0
 8002346:	bf02      	ittt	eq
 8002348:	88b1      	ldrheq	r1, [r6, #4]
 800234a:	ea0a 0001 	andeq.w	r0, sl, r1
 800234e:	2803      	cmpeq	r0, #3
 8002350:	d10a      	bne.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002352:	2001      	movs	r0, #1
 8002354:	7728      	strb	r0, [r5, #28]
 8002356:	f8a5 901e 	strh.w	r9, [r5, #30]
 800235a:	2143      	movs	r1, #67	; 0x43
 800235c:	7469      	strb	r1, [r5, #17]
 800235e:	f000 fa09 	bl	8002774 <.text_7>
 8002362:	4644      	mov	r4, r8
 8002364:	f000 fa4d 	bl	8002802 <.text_20+0x6>
 8002368:	e70d      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800236a:	9400      	str	r4, [sp, #0]
 800236c:	2343      	movs	r3, #67	; 0x43
 800236e:	2207      	movs	r2, #7
 8002370:	f000 fa40 	bl	80027f4 <.text_19>
 8002374:	2800      	cmp	r0, #0
 8002376:	d117      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002378:	2006      	movs	r0, #6
 800237a:	f000 f9f2 	bl	8002762 <.text_5>
 800237e:	210b      	movs	r1, #11
 8002380:	e7d8      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 8002382:	f000 f9fb 	bl	800277c <.text_8>
 8002386:	bf02      	ittt	eq
 8002388:	88b0      	ldrheq	r0, [r6, #4]
 800238a:	ea0a 0000 	andeq.w	r0, sl, r0
 800238e:	2806      	cmpeq	r0, #6
 8002390:	d10a      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002392:	7c28      	ldrb	r0, [r5, #16]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	f7fe f8de 	bl	8000556 <USBPD_PE_Notification>
 800239a:	2003      	movs	r0, #3
 800239c:	7468      	strb	r0, [r5, #17]
 800239e:	f000 f9f1 	bl	8002784 <.text_9>
 80023a2:	d001      	beq.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 80023a4:	f000 fa2a 	bl	80027fc <.text_20>
 80023a8:	e5ec      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023aa:	2000      	movs	r0, #0
 80023ac:	9000      	str	r0, [sp, #0]
 80023ae:	2303      	movs	r3, #3
 80023b0:	2204      	movs	r2, #4
 80023b2:	f000 fa20 	bl	80027f6 <.text_19+0x2>
 80023b6:	e5e5      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023b8:	2804      	cmp	r0, #4
 80023ba:	d006      	beq.n	80023ca <USBPD_PE_StateMachine_SNK+0x6da>
 80023bc:	2000      	movs	r0, #0
 80023be:	7728      	strb	r0, [r5, #28]
 80023c0:	2104      	movs	r1, #4
 80023c2:	7469      	strb	r1, [r5, #17]
 80023c4:	2120      	movs	r1, #32
 80023c6:	f000 fa12 	bl	80027ee <.text_18>
 80023ca:	a903      	add	r1, sp, #12
 80023cc:	4628      	mov	r0, r5
 80023ce:	f000 fa1b 	bl	8002808 <PE_StateMachine_SNK_ReadyWait>
 80023d2:	e5d6      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80023d4:	68a8      	ldr	r0, [r5, #8]
 80023d6:	6881      	ldr	r1, [r0, #8]
 80023d8:	b339      	cbz	r1, 800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80023de:	4788      	blx	r1
 80023e0:	280a      	cmp	r0, #10
 80023e2:	d002      	beq.n	80023ea <USBPD_PE_StateMachine_SNK+0x6fa>
 80023e4:	280d      	cmp	r0, #13
 80023e6:	d01a      	beq.n	800241e <USBPD_PE_StateMachine_SNK+0x72e>
 80023e8:	e01f      	b.n	800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023ea:	f000 f9b6 	bl	800275a <.text_4>
 80023ee:	2201      	movs	r2, #1
 80023f0:	2100      	movs	r1, #0
 80023f2:	47b0      	blx	r6
 80023f4:	2000      	movs	r0, #0
 80023f6:	9000      	str	r0, [sp, #0]
 80023f8:	2359      	movs	r3, #89	; 0x59
 80023fa:	2203      	movs	r2, #3
 80023fc:	f000 f9fa 	bl	80027f4 <.text_19>
 8002400:	2800      	cmp	r0, #0
 8002402:	d10b      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002404:	2008      	movs	r0, #8
 8002406:	7728      	strb	r0, [r5, #28]
 8002408:	2206      	movs	r2, #6
 800240a:	f000 f9c0 	bl	800278e <.text_10>
 800240e:	2100      	movs	r1, #0
 8002410:	68ab      	ldr	r3, [r5, #8]
 8002412:	7c28      	ldrb	r0, [r5, #16]
 8002414:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002416:	47a0      	blx	r4
 8002418:	f000 f999 	bl	800274e <.text_3>
 800241c:	e5b2      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800241e:	2000      	movs	r0, #0
 8002420:	9000      	str	r0, [sp, #0]
 8002422:	2303      	movs	r3, #3
 8002424:	220c      	movs	r2, #12
 8002426:	2100      	movs	r1, #0
 8002428:	e7c3      	b.n	80023b2 <USBPD_PE_StateMachine_SNK+0x6c2>
 800242a:	202a      	movs	r0, #42	; 0x2a
 800242c:	e644      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 800242e:	f000 f9a5 	bl	800277c <.text_8>
 8002432:	bf02      	ittt	eq
 8002434:	88b0      	ldrheq	r0, [r6, #4]
 8002436:	ea0a 0000 	andeq.w	r0, sl, r0
 800243a:	2806      	cmpeq	r0, #6
 800243c:	d110      	bne.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 800243e:	7f28      	ldrb	r0, [r5, #28]
 8002440:	2809      	cmp	r0, #9
 8002442:	d003      	beq.n	800244c <USBPD_PE_StateMachine_SNK+0x75c>
 8002444:	f000 f989 	bl	800275a <.text_4>
 8002448:	2209      	movs	r2, #9
 800244a:	47b0      	blx	r6
 800244c:	2053      	movs	r0, #83	; 0x53
 800244e:	7468      	strb	r0, [r5, #17]
 8002450:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002454:	2914      	cmp	r1, #20
 8002456:	d003      	beq.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 8002458:	f000 f98c 	bl	8002774 <.text_7>
 800245c:	f000 f9d1 	bl	8002802 <.text_20+0x6>
 8002460:	f000 f984 	bl	800276c <.text_6>
 8002464:	d1da      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002466:	68ab      	ldr	r3, [r5, #8]
 8002468:	7c28      	ldrb	r0, [r5, #16]
 800246a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800246c:	220f      	movs	r2, #15
 800246e:	2100      	movs	r1, #0
 8002470:	47a0      	blx	r4
 8002472:	68a9      	ldr	r1, [r5, #8]
 8002474:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002476:	2800      	cmp	r0, #0
 8002478:	f43f ae0d 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800247c:	2192      	movs	r1, #146	; 0x92
 800247e:	e60b      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002480:	f000 f9b1 	bl	80027e6 <.text_17>
 8002484:	f000 f969 	bl	800275a <.text_4>
 8002488:	220a      	movs	r2, #10
 800248a:	2100      	movs	r1, #0
 800248c:	47b0      	blx	r6
 800248e:	6868      	ldr	r0, [r5, #4]
 8002490:	7801      	ldrb	r1, [r0, #0]
 8002492:	f001 0103 	and.w	r1, r1, #3
 8002496:	2902      	cmp	r1, #2
 8002498:	bf04      	itt	eq
 800249a:	7c28      	ldrbeq	r0, [r5, #16]
 800249c:	f002 fdc5 	bleq	800502a <USBPD_PRL_SRCSetSinkNG>
 80024a0:	2101      	movs	r1, #1
 80024a2:	4628      	mov	r0, r5
 80024a4:	f7fe fa46 	bl	8000934 <PE_ChangePowerRole>
 80024a8:	7f28      	ldrb	r0, [r5, #28]
 80024aa:	2809      	cmp	r0, #9
 80024ac:	d004      	beq.n	80024b8 <USBPD_PE_StateMachine_SNK+0x7c8>
 80024ae:	f000 f954 	bl	800275a <.text_4>
 80024b2:	220b      	movs	r2, #11
 80024b4:	2101      	movs	r1, #1
 80024b6:	47b0      	blx	r6
 80024b8:	2000      	movs	r0, #0
 80024ba:	9000      	str	r0, [sp, #0]
 80024bc:	235b      	movs	r3, #91	; 0x5b
 80024be:	2206      	movs	r2, #6
 80024c0:	f000 f998 	bl	80027f4 <.text_19>
 80024c4:	b948      	cbnz	r0, 80024da <USBPD_PE_StateMachine_SNK+0x7ea>
 80024c6:	68ab      	ldr	r3, [r5, #8]
 80024c8:	7c28      	ldrb	r0, [r5, #16]
 80024ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80024cc:	220c      	movs	r2, #12
 80024ce:	2100      	movs	r1, #0
 80024d0:	47a0      	blx	r4
 80024d2:	f248 0014 	movw	r0, #32788	; 0x8014
 80024d6:	83e8      	strh	r0, [r5, #30]
 80024d8:	2414      	movs	r4, #20
 80024da:	7c68      	ldrb	r0, [r5, #17]
 80024dc:	285b      	cmp	r0, #91	; 0x5b
 80024de:	d00d      	beq.n	80024fc <USBPD_PE_StateMachine_SNK+0x80c>
 80024e0:	2100      	movs	r1, #0
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7fe fa26 	bl	8000934 <PE_ChangePowerRole>
 80024e8:	f000 f937 	bl	800275a <.text_4>
 80024ec:	2206      	movs	r2, #6
 80024ee:	2101      	movs	r1, #1
 80024f0:	47b0      	blx	r6
 80024f2:	2207      	movs	r2, #7
 80024f4:	f000 f931 	bl	800275a <.text_4>
 80024f8:	2100      	movs	r1, #0
 80024fa:	47b0      	blx	r6
 80024fc:	e542      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80024fe:	9400      	str	r4, [sp, #0]
 8002500:	2358      	movs	r3, #88	; 0x58
 8002502:	220a      	movs	r2, #10
 8002504:	f000 f977 	bl	80027f6 <.text_19+0x2>
 8002508:	b920      	cbnz	r0, 8002514 <USBPD_PE_StateMachine_SNK+0x824>
 800250a:	2008      	movs	r0, #8
 800250c:	f000 f929 	bl	8002762 <.text_5>
 8002510:	2202      	movs	r2, #2
 8002512:	e7ef      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002514:	220f      	movs	r2, #15
 8002516:	e7ed      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002518:	f000 f930 	bl	800277c <.text_8>
 800251c:	bf04      	itt	eq
 800251e:	88b0      	ldrheq	r0, [r6, #4]
 8002520:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8002524:	d109      	bne.n	800253a <USBPD_PE_StateMachine_SNK+0x84a>
 8002526:	f000 001f 	and.w	r0, r0, #31
 800252a:	2803      	cmp	r0, #3
 800252c:	d006      	beq.n	800253c <USBPD_PE_StateMachine_SNK+0x84c>
 800252e:	2804      	cmp	r0, #4
 8002530:	d020      	beq.n	8002574 <USBPD_PE_StateMachine_SNK+0x884>
 8002532:	280c      	cmp	r0, #12
 8002534:	d01c      	beq.n	8002570 <USBPD_PE_StateMachine_SNK+0x880>
 8002536:	2810      	cmp	r0, #16
 8002538:	d023      	beq.n	8002582 <USBPD_PE_StateMachine_SNK+0x892>
 800253a:	e087      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800253c:	f000 f927 	bl	800278e <.text_10>
 8002540:	f000 f905 	bl	800274e <.text_3>
 8002544:	7f28      	ldrb	r0, [r5, #28]
 8002546:	2809      	cmp	r0, #9
 8002548:	d004      	beq.n	8002554 <USBPD_PE_StateMachine_SNK+0x864>
 800254a:	f000 f906 	bl	800275a <.text_4>
 800254e:	2206      	movs	r2, #6
 8002550:	2100      	movs	r1, #0
 8002552:	47b0      	blx	r6
 8002554:	f000 f947 	bl	80027e6 <.text_17>
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	213a      	movs	r1, #58	; 0x3a
 800255c:	f7fd fffb 	bl	8000556 <USBPD_PE_Notification>
 8002560:	f000 f911 	bl	8002786 <.text_9+0x2>
 8002564:	d001      	beq.n	800256a <USBPD_PE_StateMachine_SNK+0x87a>
 8002566:	f000 f949 	bl	80027fc <.text_20>
 800256a:	2059      	movs	r0, #89	; 0x59
 800256c:	7468      	strb	r0, [r5, #17]
 800256e:	e06d      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002570:	213b      	movs	r1, #59	; 0x3b
 8002572:	e000      	b.n	8002576 <USBPD_PE_StateMachine_SNK+0x886>
 8002574:	2116      	movs	r1, #22
 8002576:	f000 f93a 	bl	80027ee <.text_18>
 800257a:	f000 f904 	bl	8002786 <.text_9+0x2>
 800257e:	d107      	bne.n	8002590 <USBPD_PE_StateMachine_SNK+0x8a0>
 8002580:	e061      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002582:	7c28      	ldrb	r0, [r5, #16]
 8002584:	2117      	movs	r1, #23
 8002586:	f7fd ffe6 	bl	8000556 <USBPD_PE_Notification>
 800258a:	f000 f8fc 	bl	8002786 <.text_9+0x2>
 800258e:	d05a      	beq.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002590:	f000 f934 	bl	80027fc <.text_20>
 8002594:	e057      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002596:	9104      	str	r1, [sp, #16]
 8002598:	ab04      	add	r3, sp, #16
 800259a:	68ae      	ldr	r6, [r5, #8]
 800259c:	7c28      	ldrb	r0, [r5, #16]
 800259e:	6977      	ldr	r7, [r6, #20]
 80025a0:	aa05      	add	r2, sp, #20
 80025a2:	47b8      	blx	r7
 80025a4:	9804      	ldr	r0, [sp, #16]
 80025a6:	2104      	movs	r1, #4
 80025a8:	f7fe fefe 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80025ac:	b110      	cbz	r0, 80025b4 <USBPD_PE_StateMachine_SNK+0x8c4>
 80025ae:	2003      	movs	r0, #3
 80025b0:	7468      	strb	r0, [r5, #17]
 80025b2:	e4e7      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025b4:	9a04      	ldr	r2, [sp, #16]
 80025b6:	2003      	movs	r0, #3
 80025b8:	0892      	lsrs	r2, r2, #2
 80025ba:	2100      	movs	r1, #0
 80025bc:	9001      	str	r0, [sp, #4]
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	9102      	str	r1, [sp, #8]
 80025c2:	ab05      	add	r3, sp, #20
 80025c4:	2201      	movs	r2, #1
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7fe ff7b 	bl	80014c2 <PE_Send_DataMessage>
 80025cc:	e4da      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025ce:	2000      	movs	r0, #0
 80025d0:	2103      	movs	r1, #3
 80025d2:	2201      	movs	r2, #1
 80025d4:	9002      	str	r0, [sp, #8]
 80025d6:	9101      	str	r1, [sp, #4]
 80025d8:	9200      	str	r2, [sp, #0]
 80025da:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 80025de:	2206      	movs	r2, #6
 80025e0:	2100      	movs	r1, #0
 80025e2:	4628      	mov	r0, r5
 80025e4:	f7fe ff6d 	bl	80014c2 <PE_Send_DataMessage>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d1ef      	bne.n	80025cc <USBPD_PE_StateMachine_SNK+0x8dc>
 80025ec:	215d      	movs	r1, #93	; 0x5d
 80025ee:	e6a1      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 80025f0:	9400      	str	r4, [sp, #0]
 80025f2:	2366      	movs	r3, #102	; 0x66
 80025f4:	2214      	movs	r2, #20
 80025f6:	f000 f8fe 	bl	80027f6 <.text_19+0x2>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d107      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 80025fe:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002602:	214a      	movs	r1, #74	; 0x4a
 8002604:	f000 f8f3 	bl	80027ee <.text_18>
 8002608:	200b      	movs	r0, #11
 800260a:	241b      	movs	r4, #27
 800260c:	7728      	strb	r0, [r5, #28]
 800260e:	e4b9      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002610:	f000 f8b4 	bl	800277c <.text_8>
 8002614:	d11a      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002616:	88b1      	ldrh	r1, [r6, #4]
 8002618:	0bc8      	lsrs	r0, r1, #15
 800261a:	d017      	beq.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800261c:	f001 011f 	and.w	r1, r1, #31
 8002620:	290c      	cmp	r1, #12
 8002622:	d113      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002624:	68b0      	ldr	r0, [r6, #8]
 8002626:	68ac      	ldr	r4, [r5, #8]
 8002628:	69a6      	ldr	r6, [r4, #24]
 800262a:	1d02      	adds	r2, r0, #4
 800262c:	7c28      	ldrb	r0, [r5, #16]
 800262e:	2304      	movs	r3, #4
 8002630:	210a      	movs	r1, #10
 8002632:	47b0      	blx	r6
 8002634:	f000 f8a7 	bl	8002786 <.text_9+0x2>
 8002638:	d001      	beq.n	800263e <USBPD_PE_StateMachine_SNK+0x94e>
 800263a:	f000 f8df 	bl	80027fc <.text_20>
 800263e:	7c28      	ldrb	r0, [r5, #16]
 8002640:	214b      	movs	r1, #75	; 0x4b
 8002642:	f7fd ff88 	bl	8000556 <USBPD_PE_Notification>
 8002646:	2003      	movs	r0, #3
 8002648:	7468      	strb	r0, [r5, #17]
 800264a:	2400      	movs	r4, #0
 800264c:	f000 f88e 	bl	800276c <.text_6>
 8002650:	d1dd      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002652:	e02c      	b.n	80026ae <USBPD_PE_StateMachine_SNK+0x9be>
 8002654:	9400      	str	r4, [sp, #0]
 8002656:	2339      	movs	r3, #57	; 0x39
 8002658:	783a      	ldrb	r2, [r7, #0]
 800265a:	f000 f8cb 	bl	80027f4 <.text_19>
 800265e:	2800      	cmp	r0, #0
 8002660:	d1d5      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002662:	7878      	ldrb	r0, [r7, #1]
 8002664:	7728      	strb	r0, [r5, #28]
 8002666:	2144      	movs	r1, #68	; 0x44
 8002668:	f000 f8c1 	bl	80027ee <.text_18>
 800266c:	e53d      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 800266e:	f000 f88a 	bl	8002786 <.text_9+0x2>
 8002672:	d019      	beq.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002674:	88b0      	ldrh	r0, [r6, #4]
 8002676:	0bc0      	lsrs	r0, r0, #15
 8002678:	d009      	beq.n	800268e <USBPD_PE_StateMachine_SNK+0x99e>
 800267a:	4628      	mov	r0, r5
 800267c:	f7fe ff5e 	bl	800153c <PE_Check_ExtendedMessage>
 8002680:	f000 f881 	bl	8002786 <.text_9+0x2>
 8002684:	d001      	beq.n	800268a <USBPD_PE_StateMachine_SNK+0x99a>
 8002686:	f000 f8b9 	bl	80027fc <.text_20>
 800268a:	2000      	movs	r0, #0
 800268c:	83e8      	strh	r0, [r5, #30]
 800268e:	88b0      	ldrh	r0, [r6, #4]
 8002690:	ea0a 0000 	and.w	r0, sl, r0
 8002694:	2810      	cmp	r0, #16
 8002696:	d107      	bne.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002698:	2103      	movs	r1, #3
 800269a:	7469      	strb	r1, [r5, #17]
 800269c:	f000 f872 	bl	8002784 <.text_9>
 80026a0:	d001      	beq.n	80026a6 <USBPD_PE_StateMachine_SNK+0x9b6>
 80026a2:	f000 f8ab 	bl	80027fc <.text_20>
 80026a6:	83ec      	strh	r4, [r5, #30]
 80026a8:	f000 f860 	bl	800276c <.text_6>
 80026ac:	d119      	bne.n	80026e2 <USBPD_PE_StateMachine_SNK+0x9f2>
 80026ae:	2103      	movs	r1, #3
 80026b0:	e4f2      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7ff f84b 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80026b8:	e463      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026ba:	a903      	add	r1, sp, #12
 80026bc:	4628      	mov	r0, r5
 80026be:	f7fe fb7b 	bl	8000db8 <PE_SubStateMachine_Generic>
 80026c2:	e45e      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026c4:	a903      	add	r1, sp, #12
 80026c6:	4628      	mov	r0, r5
 80026c8:	f001 f98b 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80026cc:	4604      	mov	r4, r0
 80026ce:	f000 f87a 	bl	80027c6 <.text_14>
 80026d2:	bf0e      	itee	eq
 80026d4:	2101      	moveq	r1, #1
 80026d6:	6828      	ldrne	r0, [r5, #0]
 80026d8:	6801      	ldrne	r1, [r0, #0]
 80026da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80026de:	f002 fcb7 	bl	8005050 <USBPD_PRL_SOPCapability>
 80026e2:	e44f      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026e4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80026e8:	4628      	mov	r0, r5
 80026ea:	f002 fa6e 	bl	8004bca <PE_StateMachine_UVDM>
 80026ee:	e449      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026f0:	2000      	movs	r0, #0
 80026f2:	9000      	str	r0, [sp, #0]
 80026f4:	2358      	movs	r3, #88	; 0x58
 80026f6:	2213      	movs	r2, #19
 80026f8:	f000 f87d 	bl	80027f6 <.text_19+0x2>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d1f6      	bne.n	80026ee <USBPD_PE_StateMachine_SNK+0x9fe>
 8002700:	2009      	movs	r0, #9
 8002702:	7728      	strb	r0, [r5, #28]
 8002704:	e4f1      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 8002706:	6968      	ldr	r0, [r5, #20]
 8002708:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800270c:	b1b8      	cbz	r0, 800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 800270e:	6968      	ldr	r0, [r5, #20]
 8002710:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002714:	b138      	cbz	r0, 8002726 <USBPD_PE_StateMachine_SNK+0xa36>
 8002716:	7c28      	ldrb	r0, [r5, #16]
 8002718:	215b      	movs	r1, #91	; 0x5b
 800271a:	f7fd ff1c 	bl	8000556 <USBPD_PE_Notification>
 800271e:	6968      	ldr	r0, [r5, #20]
 8002720:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8002724:	6168      	str	r0, [r5, #20]
 8002726:	2003      	movs	r0, #3
 8002728:	7ca9      	ldrb	r1, [r5, #18]
 800272a:	7468      	strb	r0, [r5, #17]
 800272c:	2903      	cmp	r1, #3
 800272e:	d005      	beq.n	800273c <USBPD_PE_StateMachine_SNK+0xa4c>
 8002730:	74a8      	strb	r0, [r5, #18]
 8002732:	f000 f832 	bl	800279a <.text_11>
 8002736:	2203      	movs	r2, #3
 8002738:	2004      	movs	r0, #4
 800273a:	47a0      	blx	r4
 800273c:	2401      	movs	r4, #1
 800273e:	6968      	ldr	r0, [r5, #20]
 8002740:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8002744:	2c00      	cmp	r4, #0
 8002746:	6168      	str	r0, [r5, #20]
 8002748:	f43f ab29 	beq.w	8001d9e <USBPD_PE_StateMachine_SNK+0xae>
 800274c:	e441      	b.n	8001fd2 <USBPD_PE_StateMachine_SNK+0x2e2>

0800274e <.text_3>:
 800274e:	f248 3084 	movw	r0, #33668	; 0x8384
 8002752:	83e8      	strh	r0, [r5, #30]
 8002754:	f44f 7461 	mov.w	r4, #900	; 0x384
 8002758:	4770      	bx	lr

0800275a <.text_4>:
 800275a:	68ab      	ldr	r3, [r5, #8]
 800275c:	7c28      	ldrb	r0, [r5, #16]
 800275e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8002760:	4770      	bx	lr

08002762 <.text_5>:
 8002762:	7728      	strb	r0, [r5, #28]
 8002764:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002768:	241b      	movs	r4, #27
 800276a:	4770      	bx	lr

0800276c <.text_6>:
 800276c:	8be8      	ldrh	r0, [r5, #30]
 800276e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002772:	4770      	bx	lr

08002774 <.text_7>:
 8002774:	2014      	movs	r0, #20
 8002776:	f88d 000c 	strb.w	r0, [sp, #12]
 800277a:	4770      	bx	lr

0800277c <.text_8>:
 800277c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002780:	2811      	cmp	r0, #17
 8002782:	4770      	bx	lr

08002784 <.text_9>:
 8002784:	2400      	movs	r4, #0
 8002786:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800278a:	2814      	cmp	r0, #20
 800278c:	4770      	bx	lr

0800278e <.text_10>:
 800278e:	6868      	ldr	r0, [r5, #4]
 8002790:	6801      	ldr	r1, [r0, #0]
 8002792:	f041 0110 	orr.w	r1, r1, #16
 8002796:	6001      	str	r1, [r0, #0]
 8002798:	4770      	bx	lr

0800279a <.text_11>:
 800279a:	2100      	movs	r1, #0
 800279c:	9100      	str	r1, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	7c29      	ldrb	r1, [r5, #16]
 80027a2:	6834      	ldr	r4, [r6, #0]
 80027a4:	4770      	bx	lr

080027a6 <.text_12>:
 80027a6:	2100      	movs	r1, #0
 80027a8:	9100      	str	r1, [sp, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	4e5e      	ldr	r6, [pc, #376]	; (8002928 <.text_23>)
 80027ae:	7c29      	ldrb	r1, [r5, #16]
 80027b0:	6837      	ldr	r7, [r6, #0]
 80027b2:	4770      	bx	lr

080027b4 <.text_13>:
 80027b4:	74a8      	strb	r0, [r5, #18]
 80027b6:	2100      	movs	r1, #0
 80027b8:	9100      	str	r1, [sp, #0]
 80027ba:	2300      	movs	r3, #0
 80027bc:	4f5a      	ldr	r7, [pc, #360]	; (8002928 <.text_23>)
 80027be:	7c29      	ldrb	r1, [r5, #16]
 80027c0:	f8d7 c000 	ldr.w	ip, [r7]
 80027c4:	4770      	bx	lr

080027c6 <.text_14>:
 80027c6:	6868      	ldr	r0, [r5, #4]
 80027c8:	6801      	ldr	r1, [r0, #0]
 80027ca:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80027ce:	2800      	cmp	r0, #0
 80027d0:	4770      	bx	lr

080027d2 <.text_15>:
 80027d2:	6868      	ldr	r0, [r5, #4]
 80027d4:	6801      	ldr	r1, [r0, #0]
 80027d6:	f021 0110 	bic.w	r1, r1, #16
 80027da:	6001      	str	r1, [r0, #0]
 80027dc:	4770      	bx	lr

080027de <.text_16>:
 80027de:	2101      	movs	r1, #1
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7fe bd98 	b.w	8001316 <PE_CallHardResetCallback>

080027e6 <.text_17>:
 80027e6:	2104      	movs	r1, #4
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe bd9b 	b.w	8001324 <PE_SetPowerNegotiation>

080027ee <.text_18>:
 80027ee:	7c28      	ldrb	r0, [r5, #16]
 80027f0:	f7fd beb1 	b.w	8000556 <USBPD_PE_Notification>

080027f4 <.text_19>:
 80027f4:	2100      	movs	r1, #0
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7fe be36 	b.w	8001468 <PE_Send_CtrlMessage>

080027fc <.text_20>:
 80027fc:	2114      	movs	r1, #20
 80027fe:	f88d 100c 	strb.w	r1, [sp, #12]
 8002802:	4628      	mov	r0, r5
 8002804:	f7fe b8d2 	b.w	80009ac <PE_Clear_RxEvent>

08002808 <PE_StateMachine_SNK_ReadyWait>:
 8002808:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800280a:	460e      	mov	r6, r1
 800280c:	4604      	mov	r4, r0
 800280e:	7830      	ldrb	r0, [r6, #0]
 8002810:	2502      	movs	r5, #2
 8002812:	2814      	cmp	r0, #20
 8002814:	d00b      	beq.n	800282e <PE_StateMachine_SNK_ReadyWait+0x26>
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff f894 	bl	8001944 <PE_ManageRXEvent>
 800281c:	7830      	ldrb	r0, [r6, #0]
 800281e:	2814      	cmp	r0, #20
 8002820:	d07d      	beq.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002822:	2114      	movs	r1, #20
 8002824:	7031      	strb	r1, [r6, #0]
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe f8c0 	bl	80009ac <PE_Clear_RxEvent>
 800282c:	e077      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800282e:	6961      	ldr	r1, [r4, #20]
 8002830:	0cc8      	lsrs	r0, r1, #19
 8002832:	f504 7518 	add.w	r5, r4, #608	; 0x260
 8002836:	d027      	beq.n	8002888 <PE_StateMachine_SNK_ReadyWait+0x80>
 8002838:	8c20      	ldrh	r0, [r4, #32]
 800283a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800283e:	d10e      	bne.n	800285e <PE_StateMachine_SNK_ReadyWait+0x56>
 8002840:	210f      	movs	r1, #15
 8002842:	7461      	strb	r1, [r4, #17]
 8002844:	2000      	movs	r0, #0
 8002846:	9000      	str	r0, [sp, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	7c21      	ldrb	r1, [r4, #16]
 800284c:	4c36      	ldr	r4, [pc, #216]	; (8002928 <.text_23>)
 800284e:	6826      	ldr	r6, [r4, #0]
 8002850:	2270      	movs	r2, #112	; 0x70
 8002852:	2009      	movs	r0, #9
 8002854:	47b0      	blx	r6
 8002856:	7828      	ldrb	r0, [r5, #0]
 8002858:	1c40      	adds	r0, r0, #1
 800285a:	7028      	strb	r0, [r5, #0]
 800285c:	e054      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 800285e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002860:	6962      	ldr	r2, [r4, #20]
 8002862:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8002866:	2033      	movs	r0, #51	; 0x33
 8002868:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 800286c:	fb11 f100 	smulbb	r1, r1, r0
 8002870:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002874:	8421      	strh	r1, [r4, #32]
 8002876:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002878:	6962      	ldr	r2, [r4, #20]
 800287a:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800287e:	eb01 45d2 	add.w	r5, r1, r2, lsr #19
 8002882:	4345      	muls	r5, r0
 8002884:	b2ad      	uxth	r5, r5
 8002886:	e04a      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002888:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800288a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800288e:	d106      	bne.n	800289e <PE_StateMachine_SNK_ReadyWait+0x96>
 8002890:	2245      	movs	r2, #69	; 0x45
 8002892:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002896:	7462      	strb	r2, [r4, #17]
 8002898:	2500      	movs	r5, #0
 800289a:	6161      	str	r1, [r4, #20]
 800289c:	e03f      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800289e:	7c20      	ldrb	r0, [r4, #16]
 80028a0:	f7fe f8a9 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80028a4:	f104 0631 	add.w	r6, r4, #49	; 0x31
 80028a8:	bb18      	cbnz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028aa:	7870      	ldrb	r0, [r6, #1]
 80028ac:	b308      	cbz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028ae:	6860      	ldr	r0, [r4, #4]
 80028b0:	6800      	ldr	r0, [r0, #0]
 80028b2:	f000 0103 	and.w	r1, r0, #3
 80028b6:	2901      	cmp	r1, #1
 80028b8:	d008      	beq.n	80028cc <PE_StateMachine_SNK_ReadyWait+0xc4>
 80028ba:	f000 0003 	and.w	r0, r0, #3
 80028be:	2802      	cmp	r0, #2
 80028c0:	d117      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028c2:	7c20      	ldrb	r0, [r4, #16]
 80028c4:	f002 fbbe 	bl	8005044 <USBPD_PRL_IsResistor_SinkTxOK>
 80028c8:	2801      	cmp	r0, #1
 80028ca:	d112      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028cc:	78b0      	ldrb	r0, [r6, #2]
 80028ce:	7030      	strb	r0, [r6, #0]
 80028d0:	7870      	ldrb	r0, [r6, #1]
 80028d2:	7460      	strb	r0, [r4, #17]
 80028d4:	2845      	cmp	r0, #69	; 0x45
 80028d6:	d103      	bne.n	80028e0 <PE_StateMachine_SNK_ReadyWait+0xd8>
 80028d8:	6960      	ldr	r0, [r4, #20]
 80028da:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80028de:	6160      	str	r0, [r4, #20]
 80028e0:	2000      	movs	r0, #0
 80028e2:	7070      	strb	r0, [r6, #1]
 80028e4:	6960      	ldr	r0, [r4, #20]
 80028e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028e8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80028ea:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 80028ee:	6160      	str	r0, [r4, #20]
 80028f0:	e00a      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 80028f2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80028f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80028f8:	d108      	bne.n	800290c <PE_StateMachine_SNK_ReadyWait+0x104>
 80028fa:	2100      	movs	r1, #0
 80028fc:	8461      	strh	r1, [r4, #34]	; 0x22
 80028fe:	2105      	movs	r1, #5
 8002900:	78a8      	ldrb	r0, [r5, #2]
 8002902:	1c40      	adds	r0, r0, #1
 8002904:	70a8      	strb	r0, [r5, #2]
 8002906:	7461      	strb	r1, [r4, #17]
 8002908:	2500      	movs	r5, #0
 800290a:	e008      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800290c:	4620      	mov	r0, r4
 800290e:	f7fe fd23 	bl	8001358 <PE_CalculateMinTiming>
 8002912:	4605      	mov	r5, r0
 8002914:	7870      	ldrb	r0, [r6, #1]
 8002916:	b110      	cbz	r0, 800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002918:	2d02      	cmp	r5, #2
 800291a:	bf28      	it	cs
 800291c:	2502      	movcs	r5, #2
 800291e:	4628      	mov	r0, r5
 8002920:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08002924 <.text_22>:
 8002924:	200002c8 	.word	0x200002c8

08002928 <.text_23>:
 8002928:	20000000 	.word	0x20000000

0800292c <USBPD_PE_StateMachine_SRC>:
 800292c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002930:	4680      	mov	r8, r0
 8002932:	481a      	ldr	r0, [pc, #104]	; (800299c <USBPD_PE_StateMachine_SRC+0x70>)
 8002934:	b086      	sub	sp, #24
 8002936:	4641      	mov	r1, r8
 8002938:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
 800293c:	7c70      	ldrb	r0, [r6, #17]
 800293e:	2848      	cmp	r0, #72	; 0x48
 8002940:	d136      	bne.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002942:	4630      	mov	r0, r6
 8002944:	f7fe f90b 	bl	8000b5e <PE_Reset_ZI>
 8002948:	4630      	mov	r0, r6
 800294a:	f7fe f942 	bl	8000bd2 <PE_Reset_Counter>
 800294e:	6830      	ldr	r0, [r6, #0]
 8002950:	7903      	ldrb	r3, [r0, #4]
 8002952:	7c30      	ldrb	r0, [r6, #16]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2201      	movs	r2, #1
 800295a:	2101      	movs	r1, #1
 800295c:	f002 fb21 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8002960:	6870      	ldr	r0, [r6, #4]
 8002962:	6801      	ldr	r1, [r0, #0]
 8002964:	f041 0108 	orr.w	r1, r1, #8
 8002968:	6001      	str	r1, [r0, #0]
 800296a:	6830      	ldr	r0, [r6, #0]
 800296c:	6841      	ldr	r1, [r0, #4]
 800296e:	6870      	ldr	r0, [r6, #4]
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	f361 0201 	bfi	r2, r1, #0, #2
 8002976:	6002      	str	r2, [r0, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	7c30      	ldrb	r0, [r6, #16]
 800297c:	f002 fb68 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002980:	7c30      	ldrb	r0, [r6, #16]
 8002982:	f002 fdda 	bl	800553a <USBPD_PRL_Reset>
 8002986:	7cb1      	ldrb	r1, [r6, #18]
 8002988:	2002      	movs	r0, #2
 800298a:	2902      	cmp	r1, #2
 800298c:	7470      	strb	r0, [r6, #17]
 800298e:	d00f      	beq.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002990:	74b0      	strb	r0, [r6, #18]
 8002992:	2100      	movs	r1, #0
 8002994:	9100      	str	r1, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	4c01      	ldr	r4, [pc, #4]	; (80029a0 <USBPD_PE_StateMachine_SRC+0x74>)
 800299a:	e003      	b.n	80029a4 <USBPD_PE_StateMachine_SRC+0x78>
 800299c:	200002c8 	.word	0x200002c8
 80029a0:	20000000 	.word	0x20000000
 80029a4:	7c31      	ldrb	r1, [r6, #16]
 80029a6:	f8d4 9000 	ldr.w	r9, [r4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	2004      	movs	r0, #4
 80029ae:	47c8      	blx	r9
 80029b0:	6970      	ldr	r0, [r6, #20]
 80029b2:	f3c0 4080 	ubfx	r0, r0, #18, #1
 80029b6:	b130      	cbz	r0, 80029c6 <USBPD_PE_StateMachine_SRC+0x9a>
 80029b8:	6970      	ldr	r0, [r6, #20]
 80029ba:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80029be:	6170      	str	r0, [r6, #20]
 80029c0:	2164      	movs	r1, #100	; 0x64
 80029c2:	f000 feab 	bl	800371c <.text_17>
 80029c6:	4630      	mov	r0, r6
 80029c8:	f7fd ffbc 	bl	8000944 <PE_Get_RxEvent>
 80029cc:	2803      	cmp	r0, #3
 80029ce:	f88d 000c 	strb.w	r0, [sp, #12]
 80029d2:	f206 255e 	addw	r5, r6, #606	; 0x25e
 80029d6:	f8df 9ca8 	ldr.w	r9, [pc, #3240]	; 8003680 <.text_3>
 80029da:	f248 0a1b 	movw	sl, #32795	; 0x801b
 80029de:	f248 0b1e 	movw	fp, #32798	; 0x801e
 80029e2:	d103      	bne.n	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 80029e4:	2001      	movs	r0, #1
 80029e6:	b007      	add	sp, #28
 80029e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ec:	6870      	ldr	r0, [r6, #4]
 80029ee:	6801      	ldr	r1, [r0, #0]
 80029f0:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80029f4:	2800      	cmp	r0, #0
 80029f6:	f000 8117 	beq.w	8002c28 <USBPD_PE_StateMachine_SRC+0x2fc>
 80029fa:	6970      	ldr	r0, [r6, #20]
 80029fc:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f106 0730 	add.w	r7, r6, #48	; 0x30
 8002a06:	f000 8119 	beq.w	8002c3c <USBPD_PE_StateMachine_SRC+0x310>
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f002 fb1c 	bl	8005048 <USBPD_PRL_FastRoleSwapSignalling>
 8002a10:	20a6      	movs	r0, #166	; 0xa6
 8002a12:	7470      	strb	r0, [r6, #17]
 8002a14:	2109      	movs	r1, #9
 8002a16:	7731      	strb	r1, [r6, #28]
 8002a18:	2000      	movs	r0, #0
 8002a1a:	70b8      	strb	r0, [r7, #2]
 8002a1c:	f248 0011 	movw	r0, #32785	; 0x8011
 8002a20:	6971      	ldr	r1, [r6, #20]
 8002a22:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8002a26:	6171      	str	r1, [r6, #20]
 8002a28:	84f0      	strh	r0, [r6, #38]	; 0x26
 8002a2a:	7cb1      	ldrb	r1, [r6, #18]
 8002a2c:	29a6      	cmp	r1, #166	; 0xa6
 8002a2e:	f040 80ff 	bne.w	8002c30 <USBPD_PE_StateMachine_SRC+0x304>
 8002a32:	2402      	movs	r4, #2
 8002a34:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a38:	2811      	cmp	r0, #17
 8002a3a:	d11c      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a3c:	6870      	ldr	r0, [r6, #4]
 8002a3e:	6801      	ldr	r1, [r0, #0]
 8002a40:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8002a44:	88b9      	ldrh	r1, [r7, #4]
 8002a46:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8002a4a:	4288      	cmp	r0, r1
 8002a4c:	d113      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a4e:	f000 fe26 	bl	800369e <.text_7>
 8002a52:	f000 fe72 	bl	800373a <.text_20+0x6>
 8002a56:	7cb1      	ldrb	r1, [r6, #18]
 8002a58:	2092      	movs	r0, #146	; 0x92
 8002a5a:	2992      	cmp	r1, #146	; 0x92
 8002a5c:	7470      	strb	r0, [r6, #17]
 8002a5e:	f000 810e 	beq.w	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002a62:	74b0      	strb	r0, [r6, #18]
 8002a64:	2100      	movs	r1, #0
 8002a66:	9100      	str	r1, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	7c31      	ldrb	r1, [r6, #16]
 8002a6c:	f8d9 c000 	ldr.w	ip, [r9]
 8002a70:	2292      	movs	r2, #146	; 0x92
 8002a72:	2004      	movs	r0, #4
 8002a74:	47e0      	blx	ip
 8002a76:	7c71      	ldrb	r1, [r6, #17]
 8002a78:	000a      	movs	r2, r1
 8002a7a:	f24f 001f 	movw	r0, #61471	; 0xf01f
 8002a7e:	f000 80f6 	beq.w	8002c6e <USBPD_PE_StateMachine_SRC+0x342>
 8002a82:	1e4a      	subs	r2, r1, #1
 8002a84:	d06f      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002a86:	1e52      	subs	r2, r2, #1
 8002a88:	f000 8105 	beq.w	8002c96 <USBPD_PE_StateMachine_SRC+0x36a>
 8002a8c:	1e52      	subs	r2, r2, #1
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	f240 84b2 	bls.w	80033f8 <USBPD_PE_StateMachine_SRC+0xacc>
 8002a94:	1e92      	subs	r2, r2, #2
 8002a96:	f000 8143 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002a9a:	1e52      	subs	r2, r2, #1
 8002a9c:	f000 8145 	beq.w	8002d2a <USBPD_PE_StateMachine_SRC+0x3fe>
 8002aa0:	1e52      	subs	r2, r2, #1
 8002aa2:	f000 814a 	beq.w	8002d3a <USBPD_PE_StateMachine_SRC+0x40e>
 8002aa6:	1e52      	subs	r2, r2, #1
 8002aa8:	f000 819d 	beq.w	8002de6 <USBPD_PE_StateMachine_SRC+0x4ba>
 8002aac:	1e52      	subs	r2, r2, #1
 8002aae:	f000 81e3 	beq.w	8002e78 <USBPD_PE_StateMachine_SRC+0x54c>
 8002ab2:	1ed2      	subs	r2, r2, #3
 8002ab4:	f000 8226 	beq.w	8002f04 <USBPD_PE_StateMachine_SRC+0x5d8>
 8002ab8:	1e52      	subs	r2, r2, #1
 8002aba:	f000 8234 	beq.w	8002f26 <USBPD_PE_StateMachine_SRC+0x5fa>
 8002abe:	1e52      	subs	r2, r2, #1
 8002ac0:	f000 80da 	beq.w	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002ac4:	1e52      	subs	r2, r2, #1
 8002ac6:	f000 82a3 	beq.w	8003010 <USBPD_PE_StateMachine_SRC+0x6e4>
 8002aca:	1e52      	subs	r2, r2, #1
 8002acc:	f000 826a 	beq.w	8002fa4 <USBPD_PE_StateMachine_SRC+0x678>
 8002ad0:	1e52      	subs	r2, r2, #1
 8002ad2:	f000 826c 	beq.w	8002fae <USBPD_PE_StateMachine_SRC+0x682>
 8002ad6:	1e52      	subs	r2, r2, #1
 8002ad8:	f000 8277 	beq.w	8002fca <USBPD_PE_StateMachine_SRC+0x69e>
 8002adc:	1e52      	subs	r2, r2, #1
 8002ade:	f000 8303 	beq.w	80030e8 <USBPD_PE_StateMachine_SRC+0x7bc>
 8002ae2:	1e52      	subs	r2, r2, #1
 8002ae4:	f000 82bb 	beq.w	800305e <USBPD_PE_StateMachine_SRC+0x732>
 8002ae8:	1e52      	subs	r2, r2, #1
 8002aea:	f000 82c2 	beq.w	8003072 <USBPD_PE_StateMachine_SRC+0x746>
 8002aee:	1e52      	subs	r2, r2, #1
 8002af0:	f000 8192 	beq.w	8002e18 <USBPD_PE_StateMachine_SRC+0x4ec>
 8002af4:	1e52      	subs	r2, r2, #1
 8002af6:	f000 82d9 	beq.w	80030ac <USBPD_PE_StateMachine_SRC+0x780>
 8002afa:	1e52      	subs	r2, r2, #1
 8002afc:	2a01      	cmp	r2, #1
 8002afe:	d932      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b00:	1e92      	subs	r2, r2, #2
 8002b02:	f000 8314 	beq.w	800312e <USBPD_PE_StateMachine_SRC+0x802>
 8002b06:	1e52      	subs	r2, r2, #1
 8002b08:	f000 831f 	beq.w	800314a <USBPD_PE_StateMachine_SRC+0x81e>
 8002b0c:	1e92      	subs	r2, r2, #2
 8002b0e:	d02a      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b10:	1e52      	subs	r2, r2, #1
 8002b12:	f000 83ce 	beq.w	80032b2 <USBPD_PE_StateMachine_SRC+0x986>
 8002b16:	1e52      	subs	r2, r2, #1
 8002b18:	f000 83dc 	beq.w	80032d4 <USBPD_PE_StateMachine_SRC+0x9a8>
 8002b1c:	1e52      	subs	r2, r2, #1
 8002b1e:	f000 841a 	beq.w	8003356 <USBPD_PE_StateMachine_SRC+0xa2a>
 8002b22:	1e52      	subs	r2, r2, #1
 8002b24:	f000 843a 	beq.w	800339c <USBPD_PE_StateMachine_SRC+0xa70>
 8002b28:	1e52      	subs	r2, r2, #1
 8002b2a:	f000 834a 	beq.w	80031c2 <USBPD_PE_StateMachine_SRC+0x896>
 8002b2e:	1e92      	subs	r2, r2, #2
 8002b30:	f000 8369 	beq.w	8003206 <USBPD_PE_StateMachine_SRC+0x8da>
 8002b34:	1e52      	subs	r2, r2, #1
 8002b36:	f000 8380 	beq.w	800323a <USBPD_PE_StateMachine_SRC+0x90e>
 8002b3a:	1e52      	subs	r2, r2, #1
 8002b3c:	f000 839a 	beq.w	8003274 <USBPD_PE_StateMachine_SRC+0x948>
 8002b40:	1e52      	subs	r2, r2, #1
 8002b42:	2a02      	cmp	r2, #2
 8002b44:	d90f      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b46:	1ed2      	subs	r2, r2, #3
 8002b48:	f000 8359 	beq.w	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 8002b4c:	1e52      	subs	r2, r2, #1
 8002b4e:	f000 84c5 	beq.w	80034dc <USBPD_PE_StateMachine_SRC+0xbb0>
 8002b52:	1e52      	subs	r2, r2, #1
 8002b54:	d007      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b56:	1e52      	subs	r2, r2, #1
 8002b58:	f000 84d1 	beq.w	80034fe <USBPD_PE_StateMachine_SRC+0xbd2>
 8002b5c:	1e52      	subs	r2, r2, #1
 8002b5e:	f000 8500 	beq.w	8003562 <USBPD_PE_StateMachine_SRC+0xc36>
 8002b62:	1e52      	subs	r2, r2, #1
 8002b64:	2a01      	cmp	r2, #1
 8002b66:	f240 8535 	bls.w	80035d4 <USBPD_PE_StateMachine_SRC+0xca8>
 8002b6a:	1e92      	subs	r2, r2, #2
 8002b6c:	d001      	beq.n	8002b72 <USBPD_PE_StateMachine_SRC+0x246>
 8002b6e:	1e92      	subs	r2, r2, #2
 8002b70:	2a05      	cmp	r2, #5
 8002b72:	f240 852b 	bls.w	80035cc <USBPD_PE_StateMachine_SRC+0xca0>
 8002b76:	1f92      	subs	r2, r2, #6
 8002b78:	f000 8503 	beq.w	8003582 <USBPD_PE_StateMachine_SRC+0xc56>
 8002b7c:	1e52      	subs	r2, r2, #1
 8002b7e:	2a03      	cmp	r2, #3
 8002b80:	d9f1      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b82:	3a11      	subs	r2, #17
 8002b84:	d0ef      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b86:	1e52      	subs	r2, r2, #1
 8002b88:	f000 811b 	beq.w	8002dc2 <USBPD_PE_StateMachine_SRC+0x496>
 8002b8c:	3a0f      	subs	r2, #15
 8002b8e:	f000 841c 	beq.w	80033ca <USBPD_PE_StateMachine_SRC+0xa9e>
 8002b92:	1fd2      	subs	r2, r2, #7
 8002b94:	2a01      	cmp	r2, #1
 8002b96:	bf84      	itt	hi
 8002b98:	1f52      	subhi	r2, r2, #5
 8002b9a:	2a01      	cmphi	r2, #1
 8002b9c:	d9e3      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b9e:	3a0d      	subs	r2, #13
 8002ba0:	d0e1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002ba2:	3a12      	subs	r2, #18
 8002ba4:	f000 8542 	beq.w	800362c <USBPD_PE_StateMachine_SRC+0xd00>
 8002ba8:	3a0c      	subs	r2, #12
 8002baa:	d068      	beq.n	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002bac:	1e52      	subs	r2, r2, #1
 8002bae:	2a02      	cmp	r2, #2
 8002bb0:	d9d9      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bb2:	1ed2      	subs	r2, r2, #3
 8002bb4:	f000 81d1 	beq.w	8002f5a <USBPD_PE_StateMachine_SRC+0x62e>
 8002bb8:	1e52      	subs	r2, r2, #1
 8002bba:	f000 81e1 	beq.w	8002f80 <USBPD_PE_StateMachine_SRC+0x654>
 8002bbe:	1e92      	subs	r2, r2, #2
 8002bc0:	d0d1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bc2:	1e52      	subs	r2, r2, #1
 8002bc4:	f000 80ac 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002bc8:	1e92      	subs	r2, r2, #2
 8002bca:	2a08      	cmp	r2, #8
 8002bcc:	f240 8508 	bls.w	80035e0 <USBPD_PE_StateMachine_SRC+0xcb4>
 8002bd0:	3a0a      	subs	r2, #10
 8002bd2:	f000 8514 	beq.w	80035fe <USBPD_PE_StateMachine_SRC+0xcd2>
 8002bd6:	a903      	add	r1, sp, #12
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f001 fa2b 	bl	8004034 <PE_StateMachine_VDM>
 8002bde:	4604      	mov	r4, r0
 8002be0:	7c72      	ldrb	r2, [r6, #17]
 8002be2:	7cb0      	ldrb	r0, [r6, #18]
 8002be4:	4290      	cmp	r0, r2
 8002be6:	d003      	beq.n	8002bf0 <USBPD_PE_StateMachine_SRC+0x2c4>
 8002be8:	74b2      	strb	r2, [r6, #18]
 8002bea:	2100      	movs	r1, #0
 8002bec:	f000 fd62 	bl	80036b4 <.text_9>
 8002bf0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002bf4:	2814      	cmp	r0, #20
 8002bf6:	f000 851f 	beq.w	8003638 <USBPD_PE_StateMachine_SRC+0xd0c>
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f7fd ff17 	bl	8000a2e <PE_Check_AMSConflict>
 8002c00:	2815      	cmp	r0, #21
 8002c02:	d105      	bne.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c04:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c08:	2814      	cmp	r0, #20
 8002c0a:	d001      	beq.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c0c:	f000 fd92 	bl	8003734 <.text_20>
 8002c10:	7c72      	ldrb	r2, [r6, #17]
 8002c12:	7cb0      	ldrb	r0, [r6, #18]
 8002c14:	4290      	cmp	r0, r2
 8002c16:	d004      	beq.n	8002c22 <USBPD_PE_StateMachine_SRC+0x2f6>
 8002c18:	74b2      	strb	r2, [r6, #18]
 8002c1a:	f000 fd53 	bl	80036c4 <.text_10+0x2>
 8002c1e:	2004      	movs	r0, #4
 8002c20:	47a0      	blx	r4
 8002c22:	2400      	movs	r4, #0
 8002c24:	f000 bd23 	b.w	800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8002c28:	f04f 34ff 	mov.w	r4, #4294967295
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	e6da      	b.n	80029e6 <USBPD_PE_StateMachine_SRC+0xba>
 8002c30:	20a6      	movs	r0, #166	; 0xa6
 8002c32:	f000 fd46 	bl	80036c2 <.text_10>
 8002c36:	22a6      	movs	r2, #166	; 0xa6
 8002c38:	2004      	movs	r0, #4
 8002c3a:	47a0      	blx	r4
 8002c3c:	78b8      	ldrb	r0, [r7, #2]
 8002c3e:	2402      	movs	r4, #2
 8002c40:	280f      	cmp	r0, #15
 8002c42:	bf18      	it	ne
 8002c44:	2814      	cmpne	r0, #20
 8002c46:	d111      	bne.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c48:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c4c:	2814      	cmp	r0, #20
 8002c4e:	d001      	beq.n	8002c54 <USBPD_PE_StateMachine_SRC+0x328>
 8002c50:	f000 fd70 	bl	8003734 <.text_20>
 8002c54:	78ba      	ldrb	r2, [r7, #2]
 8002c56:	7472      	strb	r2, [r6, #17]
 8002c58:	2000      	movs	r0, #0
 8002c5a:	70b8      	strb	r0, [r7, #2]
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	7cb0      	ldrb	r0, [r6, #18]
 8002c60:	62f1      	str	r1, [r6, #44]	; 0x2c
 8002c62:	4290      	cmp	r0, r2
 8002c64:	d002      	beq.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c66:	74b2      	strb	r2, [r6, #18]
 8002c68:	f000 fd24 	bl	80036b4 <.text_9>
 8002c6c:	e6e2      	b.n	8002a34 <USBPD_PE_StateMachine_SRC+0x108>
 8002c6e:	f000 fd3c 	bl	80036ea <.text_13>
 8002c72:	215f      	movs	r1, #95	; 0x5f
 8002c74:	f000 fd52 	bl	800371c <.text_17>
 8002c78:	f04f 34ff 	mov.w	r4, #4294967295
 8002c7c:	e7b0      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002c7e:	6870      	ldr	r0, [r6, #4]
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	f021 0110 	bic.w	r1, r1, #16
 8002c86:	6001      	str	r1, [r0, #0]
 8002c88:	68b0      	ldr	r0, [r6, #8]
 8002c8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d0f3      	beq.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c90:	7c30      	ldrb	r0, [r6, #16]
 8002c92:	4788      	blx	r1
 8002c94:	e7f0      	b.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c96:	f000 fd22 	bl	80036de <.text_12>
 8002c9a:	bf1a      	itte	ne
 8002c9c:	6830      	ldrne	r0, [r6, #0]
 8002c9e:	6801      	ldrne	r1, [r0, #0]
 8002ca0:	2101      	moveq	r1, #1
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	f002 f9d4 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002ca8:	6870      	ldr	r0, [r6, #4]
 8002caa:	6801      	ldr	r1, [r0, #0]
 8002cac:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002cb0:	b388      	cbz	r0, 8002d16 <USBPD_PE_StateMachine_SRC+0x3ea>
 8002cb2:	f001 0203 	and.w	r2, r1, #3
 8002cb6:	6870      	ldr	r0, [r6, #4]
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	bf0c      	ite	eq
 8002cbc:	2200      	moveq	r2, #0
 8002cbe:	2220      	movne	r2, #32
 8002cc0:	f021 0120 	bic.w	r1, r1, #32
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	6001      	str	r1, [r0, #0]
 8002cc8:	2000      	movs	r0, #0
 8002cca:	70e8      	strb	r0, [r5, #3]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	f000 fd29 	bl	8003724 <.text_18+0x2>
 8002cd2:	6870      	ldr	r0, [r6, #4]
 8002cd4:	6801      	ldr	r1, [r0, #0]
 8002cd6:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8002cda:	b130      	cbz	r0, 8002cea <USBPD_PE_StateMachine_SRC+0x3be>
 8002cdc:	f248 0014 	movw	r0, #32788	; 0x8014
 8002ce0:	83f0      	strh	r0, [r6, #30]
 8002ce2:	2414      	movs	r4, #20
 8002ce4:	2106      	movs	r1, #6
 8002ce6:	7471      	strb	r1, [r6, #17]
 8002ce8:	e77a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002cea:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d00a      	beq.n	8002d08 <USBPD_PE_StateMachine_SRC+0x3dc>
 8002cf2:	6830      	ldr	r0, [r6, #0]
 8002cf4:	7801      	ldrb	r1, [r0, #0]
 8002cf6:	078a      	lsls	r2, r1, #30
 8002cf8:	f140 808c 	bpl.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002cfc:	7929      	ldrb	r1, [r5, #4]
 8002cfe:	2914      	cmp	r1, #20
 8002d00:	f080 8088 	bcs.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d04:	68f0      	ldr	r0, [r6, #12]
 8002d06:	2800      	cmp	r0, #0
 8002d08:	f000 8084 	beq.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d0c:	1c49      	adds	r1, r1, #1
 8002d0e:	7129      	strb	r1, [r5, #4]
 8002d10:	2005      	movs	r0, #5
 8002d12:	7470      	strb	r0, [r6, #17]
 8002d14:	e764      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d16:	7c30      	ldrb	r0, [r6, #16]
 8002d18:	2121      	movs	r1, #33	; 0x21
 8002d1a:	f7fd fc1c 	bl	8000556 <USBPD_PE_Notification>
 8002d1e:	e1e1      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 8002d20:	a903      	add	r1, sp, #12
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 fd3c 	bl	80037a0 <PE_StateMachine_VDMCable>
 8002d28:	e759      	b.n	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 8002d2a:	8bf0      	ldrh	r0, [r6, #30]
 8002d2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d30:	d102      	bne.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d32:	2107      	movs	r1, #7
 8002d34:	7471      	strb	r1, [r6, #17]
 8002d36:	2400      	movs	r4, #0
 8002d38:	e752      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d3a:	6971      	ldr	r1, [r6, #20]
 8002d3c:	0889      	lsrs	r1, r1, #2
 8002d3e:	f001 0101 	and.w	r1, r1, #1
 8002d42:	4630      	mov	r0, r6
 8002d44:	f000 fd01 	bl	800374a <PE_Send_SRCCapabilities>
 8002d48:	2805      	cmp	r0, #5
 8002d4a:	d002      	beq.n	8002d52 <USBPD_PE_StateMachine_SRC+0x426>
 8002d4c:	2809      	cmp	r0, #9
 8002d4e:	d0f3      	beq.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d50:	e011      	b.n	8002d76 <USBPD_PE_StateMachine_SRC+0x44a>
 8002d52:	2001      	movs	r0, #1
 8002d54:	6971      	ldr	r1, [r6, #20]
 8002d56:	7730      	strb	r0, [r6, #28]
 8002d58:	f041 0104 	orr.w	r1, r1, #4
 8002d5c:	6171      	str	r1, [r6, #20]
 8002d5e:	2000      	movs	r0, #0
 8002d60:	70e8      	strb	r0, [r5, #3]
 8002d62:	70a8      	strb	r0, [r5, #2]
 8002d64:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002d68:	2016      	movs	r0, #22
 8002d6a:	241b      	movs	r4, #27
 8002d6c:	7470      	strb	r0, [r6, #17]
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f000 fcd4 	bl	800371c <.text_17>
 8002d74:	e734      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d76:	6970      	ldr	r0, [r6, #20]
 8002d78:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002d7c:	b978      	cbnz	r0, 8002d9e <USBPD_PE_StateMachine_SRC+0x472>
 8002d7e:	78e8      	ldrb	r0, [r5, #3]
 8002d80:	2833      	cmp	r0, #51	; 0x33
 8002d82:	d218      	bcs.n	8002db6 <USBPD_PE_StateMachine_SRC+0x48a>
 8002d84:	f248 0196 	movw	r1, #32918	; 0x8096
 8002d88:	83f1      	strh	r1, [r6, #30]
 8002d8a:	2008      	movs	r0, #8
 8002d8c:	7470      	strb	r0, [r6, #17]
 8002d8e:	2496      	movs	r4, #150	; 0x96
 8002d90:	8c71      	ldrh	r1, [r6, #34]	; 0x22
 8002d92:	0448      	lsls	r0, r1, #17
 8002d94:	d002      	beq.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002d96:	8c74      	ldrh	r4, [r6, #34]	; 0x22
 8002d98:	f3c4 040e 	ubfx	r4, r4, #0, #15
 8002d9c:	e720      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d9e:	6870      	ldr	r0, [r6, #4]
 8002da0:	7801      	ldrb	r1, [r0, #0]
 8002da2:	f001 0103 	and.w	r1, r1, #3
 8002da6:	2902      	cmp	r1, #2
 8002da8:	bf04      	itt	eq
 8002daa:	7c30      	ldrbeq	r0, [r6, #16]
 8002dac:	f002 f93f 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8002db0:	2011      	movs	r0, #17
 8002db2:	7470      	strb	r0, [r6, #17]
 8002db4:	e7bf      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8002db6:	7c30      	ldrb	r0, [r6, #16]
 8002db8:	2121      	movs	r1, #33	; 0x21
 8002dba:	f7fd fbcc 	bl	8000556 <USBPD_PE_Notification>
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	e7a7      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f000 fcc0 	bl	800374a <PE_Send_SRCCapabilities>
 8002dca:	2805      	cmp	r0, #5
 8002dcc:	d107      	bne.n	8002dde <USBPD_PE_StateMachine_SRC+0x4b2>
 8002dce:	f000 fca8 	bl	8003722 <.text_18>
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 fc5f 	bl	8003696 <.text_6>
 8002dd8:	2116      	movs	r1, #22
 8002dda:	7471      	strb	r1, [r6, #17]
 8002ddc:	e7c7      	b.n	8002d6e <USBPD_PE_StateMachine_SRC+0x442>
 8002dde:	2000      	movs	r0, #0
 8002de0:	7730      	strb	r0, [r6, #28]
 8002de2:	2111      	movs	r1, #17
 8002de4:	e77f      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 8002de6:	8c70      	ldrh	r0, [r6, #34]	; 0x22
 8002de8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002dec:	d106      	bne.n	8002dfc <USBPD_PE_StateMachine_SRC+0x4d0>
 8002dee:	2100      	movs	r1, #0
 8002df0:	8471      	strh	r1, [r6, #34]	; 0x22
 8002df2:	2105      	movs	r1, #5
 8002df4:	7928      	ldrb	r0, [r5, #4]
 8002df6:	1c40      	adds	r0, r0, #1
 8002df8:	7128      	strb	r0, [r5, #4]
 8002dfa:	7471      	strb	r1, [r6, #17]
 8002dfc:	8bf0      	ldrh	r0, [r6, #30]
 8002dfe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e02:	d1cb      	bne.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002e04:	6830      	ldr	r0, [r6, #0]
 8002e06:	6841      	ldr	r1, [r0, #4]
 8002e08:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8002e0c:	b110      	cbz	r0, 8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002e0e:	78e8      	ldrb	r0, [r5, #3]
 8002e10:	1c40      	adds	r0, r0, #1
 8002e12:	70e8      	strb	r0, [r5, #3]
 8002e14:	2007      	movs	r0, #7
 8002e16:	e77c      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002e18:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002e1c:	2811      	cmp	r0, #17
 8002e1e:	d10b      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e20:	88b9      	ldrh	r1, [r7, #4]
 8002e22:	0bc8      	lsrs	r0, r1, #15
 8002e24:	d108      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e26:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	f000 80eb 	beq.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e30:	7938      	ldrb	r0, [r7, #4]
 8002e32:	f000 001f 	and.w	r0, r0, #31
 8002e36:	2802      	cmp	r0, #2
 8002e38:	f040 80e5 	bne.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	7881      	ldrb	r1, [r0, #2]
 8002e40:	78c2      	ldrb	r2, [r0, #3]
 8002e42:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8002e46:	7901      	ldrb	r1, [r0, #4]
 8002e48:	7940      	ldrb	r0, [r0, #5]
 8002e4a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8002e4e:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	88b8      	ldrh	r0, [r7, #4]
 8002e56:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002e5a:	7c30      	ldrb	r0, [r6, #16]
 8002e5c:	f7fd feeb 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8002e60:	68b4      	ldr	r4, [r6, #8]
 8002e62:	7c30      	ldrb	r0, [r6, #16]
 8002e64:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002e68:	2304      	movs	r3, #4
 8002e6a:	466a      	mov	r2, sp
 8002e6c:	2106      	movs	r1, #6
 8002e6e:	47e0      	blx	ip
 8002e70:	2009      	movs	r0, #9
 8002e72:	7470      	strb	r0, [r6, #17]
 8002e74:	2400      	movs	r4, #0
 8002e76:	e0c0      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002e78:	68b2      	ldr	r2, [r6, #8]
 8002e7a:	7c30      	ldrb	r0, [r6, #16]
 8002e7c:	69d3      	ldr	r3, [r2, #28]
 8002e7e:	a901      	add	r1, sp, #4
 8002e80:	4798      	blx	r3
 8002e82:	280a      	cmp	r0, #10
 8002e84:	d011      	beq.n	8002eaa <USBPD_PE_StateMachine_SRC+0x57e>
 8002e86:	280b      	cmp	r0, #11
 8002e88:	d02f      	beq.n	8002eea <USBPD_PE_StateMachine_SRC+0x5be>
 8002e8a:	280d      	cmp	r0, #13
 8002e8c:	6870      	ldr	r0, [r6, #4]
 8002e8e:	6801      	ldr	r1, [r0, #0]
 8002e90:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002e94:	d12e      	bne.n	8002ef4 <USBPD_PE_StateMachine_SRC+0x5c8>
 8002e96:	2803      	cmp	r0, #3
 8002e98:	bf0c      	ite	eq
 8002e9a:	2303      	moveq	r3, #3
 8002e9c:	230e      	movne	r3, #14
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	9000      	str	r0, [sp, #0]
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	f000 fc4d 	bl	8003742 <.text_21+0x2>
 8002ea8:	e69a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eaa:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8002eae:	241e      	movs	r4, #30
 8002eb0:	6870      	ldr	r0, [r6, #4]
 8002eb2:	6801      	ldr	r1, [r0, #0]
 8002eb4:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002eb8:	2801      	cmp	r0, #1
 8002eba:	d00b      	beq.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ebc:	9801      	ldr	r0, [sp, #4]
 8002ebe:	2803      	cmp	r0, #3
 8002ec0:	bf02      	ittt	eq
 8002ec2:	6970      	ldreq	r0, [r6, #20]
 8002ec4:	f3c0 00c1 	ubfxeq	r0, r0, #3, #2
 8002ec8:	2803      	cmpeq	r0, #3
 8002eca:	d103      	bne.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ecc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ed0:	83f0      	strh	r0, [r6, #30]
 8002ed2:	2400      	movs	r4, #0
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	9000      	str	r0, [sp, #0]
 8002ed8:	230c      	movs	r3, #12
 8002eda:	f000 fc31 	bl	8003740 <.text_21>
 8002ede:	9801      	ldr	r0, [sp, #4]
 8002ee0:	6971      	ldr	r1, [r6, #20]
 8002ee2:	f360 01c4 	bfi	r1, r0, #3, #2
 8002ee6:	6171      	str	r1, [r6, #20]
 8002ee8:	e67a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eea:	2000      	movs	r0, #0
 8002eec:	9000      	str	r0, [sp, #0]
 8002eee:	230c      	movs	r3, #12
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	e7d7      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002ef4:	2803      	cmp	r0, #3
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2303      	moveq	r3, #3
 8002efa:	230e      	movne	r3, #14
 8002efc:	2000      	movs	r0, #0
 8002efe:	9000      	str	r0, [sp, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	e7cf      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002f04:	8bf0      	ldrh	r0, [r6, #30]
 8002f06:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f0a:	d1ed      	bne.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f0c:	f000 fc09 	bl	8003722 <.text_18>
 8002f10:	68b0      	ldr	r0, [r6, #8]
 8002f12:	6801      	ldr	r1, [r0, #0]
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d0e7      	beq.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f18:	7c30      	ldrb	r0, [r6, #16]
 8002f1a:	4788      	blx	r1
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f040 8252 	bne.w	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8002f22:	200d      	movs	r0, #13
 8002f24:	e6f5      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002f26:	2100      	movs	r1, #0
 8002f28:	9100      	str	r1, [sp, #0]
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	f000 fc09 	bl	8003744 <.text_21+0x4>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d110      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f36:	2103      	movs	r1, #3
 8002f38:	f000 fbf4 	bl	8003724 <.text_18+0x2>
 8002f3c:	7c30      	ldrb	r0, [r6, #16]
 8002f3e:	2110      	movs	r1, #16
 8002f40:	f7fd fb09 	bl	8000556 <USBPD_PE_Notification>
 8002f44:	2000      	movs	r0, #0
 8002f46:	84b0      	strh	r0, [r6, #36]	; 0x24
 8002f48:	6970      	ldr	r0, [r6, #20]
 8002f4a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002f4e:	2803      	cmp	r0, #3
 8002f50:	d102      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f52:	f24b 60b0 	movw	r0, #46768	; 0xb6b0
 8002f56:	84b0      	strh	r0, [r6, #36]	; 0x24
 8002f58:	e642      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	9100      	str	r1, [sp, #0]
 8002f5e:	2397      	movs	r3, #151	; 0x97
 8002f60:	2202      	movs	r2, #2
 8002f62:	f000 fbee 	bl	8003742 <.text_21+0x2>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d1f6      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f6a:	7c30      	ldrb	r0, [r6, #16]
 8002f6c:	7734      	strb	r4, [r6, #28]
 8002f6e:	2129      	movs	r1, #41	; 0x29
 8002f70:	f7fd faf1 	bl	8000556 <USBPD_PE_Notification>
 8002f74:	f248 2026 	movw	r0, #33318	; 0x8226
 8002f78:	83f0      	strh	r0, [r6, #30]
 8002f7a:	f240 2426 	movw	r4, #550	; 0x226
 8002f7e:	e62f      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f80:	8bf0      	ldrh	r0, [r6, #30]
 8002f82:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f86:	d1fa      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002f88:	7c30      	ldrb	r0, [r6, #16]
 8002f8a:	212a      	movs	r1, #42	; 0x2a
 8002f8c:	f7fd fae3 	bl	8000556 <USBPD_PE_Notification>
 8002f90:	2000      	movs	r0, #0
 8002f92:	9000      	str	r0, [sp, #0]
 8002f94:	2303      	movs	r3, #3
 8002f96:	2206      	movs	r2, #6
 8002f98:	f000 fbd3 	bl	8003742 <.text_21+0x2>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d1ee      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fa0:	212e      	movs	r1, #46	; 0x2e
 8002fa2:	e6e5      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	9000      	str	r0, [sp, #0]
 8002fa8:	2307      	movs	r3, #7
 8002faa:	2203      	movs	r2, #3
 8002fac:	e77a      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	9000      	str	r0, [sp, #0]
 8002fb2:	2312      	movs	r3, #18
 8002fb4:	7879      	ldrb	r1, [r7, #1]
 8002fb6:	220d      	movs	r2, #13
 8002fb8:	f000 fbc4 	bl	8003744 <.text_21+0x4>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1de      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fc0:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002fc4:	241b      	movs	r4, #27
 8002fc6:	2130      	movs	r1, #48	; 0x30
 8002fc8:	e6d2      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002fce:	2914      	cmp	r1, #20
 8002fd0:	d019      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fd2:	783a      	ldrb	r2, [r7, #0]
 8002fd4:	7879      	ldrb	r1, [r7, #1]
 8002fd6:	428a      	cmp	r2, r1
 8002fd8:	bf02      	ittt	eq
 8002fda:	88ba      	ldrheq	r2, [r7, #4]
 8002fdc:	4010      	andeq	r0, r2
 8002fde:	2803      	cmpeq	r0, #3
 8002fe0:	d111      	bne.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fe2:	7c30      	ldrb	r0, [r6, #16]
 8002fe4:	2131      	movs	r1, #49	; 0x31
 8002fe6:	f7fd fab6 	bl	8000556 <USBPD_PE_Notification>
 8002fea:	7838      	ldrb	r0, [r7, #0]
 8002fec:	b910      	cbnz	r0, 8002ff4 <USBPD_PE_StateMachine_SRC+0x6c8>
 8002fee:	2107      	movs	r1, #7
 8002ff0:	7471      	strb	r1, [r6, #17]
 8002ff2:	e002      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	7470      	strb	r0, [r6, #17]
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002ffe:	2814      	cmp	r0, #20
 8003000:	d001      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8003002:	f000 fb97 	bl	8003734 <.text_20>
 8003006:	8bf0      	ldrh	r0, [r6, #30]
 8003008:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800300c:	d1b7      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 800300e:	e1da      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003010:	6870      	ldr	r0, [r6, #4]
 8003012:	7801      	ldrb	r1, [r0, #0]
 8003014:	f001 0103 	and.w	r1, r1, #3
 8003018:	2902      	cmp	r1, #2
 800301a:	bf04      	itt	eq
 800301c:	7c30      	ldrbeq	r0, [r6, #16]
 800301e:	f002 f806 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003022:	2105      	movs	r1, #5
 8003024:	4630      	mov	r0, r6
 8003026:	f7fd fc65 	bl	80008f4 <PE_Send_RESET>
 800302a:	f000 fb5e 	bl	80036ea <.text_13>
 800302e:	2100      	movs	r1, #0
 8003030:	78a8      	ldrb	r0, [r5, #2]
 8003032:	1c40      	adds	r0, r0, #1
 8003034:	70a8      	strb	r0, [r5, #2]
 8003036:	2202      	movs	r2, #2
 8003038:	6970      	ldr	r0, [r6, #20]
 800303a:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
 800303e:	6170      	str	r0, [r6, #20]
 8003040:	70b9      	strb	r1, [r7, #2]
 8003042:	f420 70e0 	bic.w	r0, r0, #448	; 0x1c0
 8003046:	6170      	str	r0, [r6, #20]
 8003048:	f000 fb70 	bl	800372c <.text_19+0x2>
 800304c:	2169      	movs	r1, #105	; 0x69
 800304e:	4640      	mov	r0, r8
 8003050:	f7fd fa81 	bl	8000556 <USBPD_PE_Notification>
 8003054:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8003058:	241b      	movs	r4, #27
 800305a:	2015      	movs	r0, #21
 800305c:	e659      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 800305e:	6870      	ldr	r0, [r6, #4]
 8003060:	7801      	ldrb	r1, [r0, #0]
 8003062:	f001 0103 	and.w	r1, r1, #3
 8003066:	2902      	cmp	r1, #2
 8003068:	bf04      	itt	eq
 800306a:	7c30      	ldrbeq	r0, [r6, #16]
 800306c:	f001 ffdf 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003070:	e7ec      	b.n	800304c <USBPD_PE_StateMachine_SRC+0x720>
 8003072:	8bf0      	ldrh	r0, [r6, #30]
 8003074:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003078:	d117      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800307a:	78a9      	ldrb	r1, [r5, #2]
 800307c:	6970      	ldr	r0, [r6, #20]
 800307e:	2903      	cmp	r1, #3
 8003080:	d303      	bcc.n	800308a <USBPD_PE_StateMachine_SRC+0x75e>
 8003082:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003086:	bb48      	cbnz	r0, 80030dc <USBPD_PE_StateMachine_SRC+0x7b0>
 8003088:	e02c      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 800308a:	f248 218a 	movw	r1, #33418	; 0x828a
 800308e:	83f1      	strh	r1, [r6, #30]
 8003090:	2217      	movs	r2, #23
 8003092:	7472      	strb	r2, [r6, #17]
 8003094:	2400      	movs	r4, #0
 8003096:	f3c0 2041 	ubfx	r0, r0, #9, #2
 800309a:	1e42      	subs	r2, r0, #1
 800309c:	4192      	sbcs	r2, r2
 800309e:	0fd2      	lsrs	r2, r2, #31
 80030a0:	f000 fb44 	bl	800372c <.text_19+0x2>
 80030a4:	2203      	movs	r2, #3
 80030a6:	f000 fb41 	bl	800372c <.text_19+0x2>
 80030aa:	e599      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80030ac:	68b2      	ldr	r2, [r6, #8]
 80030ae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80030b0:	2100      	movs	r1, #0
 80030b2:	4640      	mov	r0, r8
 80030b4:	4798      	blx	r3
 80030b6:	2801      	cmp	r0, #1
 80030b8:	d106      	bne.n	80030c8 <USBPD_PE_StateMachine_SRC+0x79c>
 80030ba:	f248 3020 	movw	r0, #33568	; 0x8320
 80030be:	83f0      	strh	r0, [r6, #30]
 80030c0:	2113      	movs	r1, #19
 80030c2:	f44f 7448 	mov.w	r4, #800	; 0x320
 80030c6:	7471      	strb	r1, [r6, #17]
 80030c8:	8bf0      	ldrh	r0, [r6, #30]
 80030ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80030ce:	d1ec      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030d0:	f000 fb2b 	bl	800372a <.text_19>
 80030d4:	6970      	ldr	r0, [r6, #20]
 80030d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030da:	b118      	cbz	r0, 80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 80030dc:	68b1      	ldr	r1, [r6, #8]
 80030de:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d11f      	bne.n	8003124 <USBPD_PE_StateMachine_SRC+0x7f8>
 80030e4:	2100      	movs	r1, #0
 80030e6:	e5fe      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 80030e8:	8bf0      	ldrh	r0, [r6, #30]
 80030ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80030ee:	d1dc      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030f0:	2204      	movs	r2, #4
 80030f2:	f000 fb1b 	bl	800372c <.text_19+0x2>
 80030f6:	68b2      	ldr	r2, [r6, #8]
 80030f8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80030fa:	2101      	movs	r1, #1
 80030fc:	4640      	mov	r0, r8
 80030fe:	4798      	blx	r3
 8003100:	2801      	cmp	r0, #1
 8003102:	d10a      	bne.n	800311a <USBPD_PE_StateMachine_SRC+0x7ee>
 8003104:	4630      	mov	r0, r6
 8003106:	f7fd fcf4 	bl	8000af2 <PE_Reset_HardReset>
 800310a:	2168      	movs	r1, #104	; 0x68
 800310c:	4640      	mov	r0, r8
 800310e:	f7fd fa22 	bl	8000556 <USBPD_PE_Notification>
 8003112:	2205      	movs	r2, #5
 8003114:	f000 fb0a 	bl	800372c <.text_19+0x2>
 8003118:	e67c      	b.n	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 800311a:	f000 fb06 	bl	800372a <.text_19>
 800311e:	68b1      	ldr	r1, [r6, #8]
 8003120:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003122:	2800      	cmp	r0, #0
 8003124:	f040 8280 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003128:	2100      	movs	r1, #0
 800312a:	7471      	strb	r1, [r6, #17]
 800312c:	e603      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 800312e:	2001      	movs	r0, #1
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	231b      	movs	r3, #27
 8003134:	2207      	movs	r2, #7
 8003136:	f000 fb04 	bl	8003742 <.text_21+0x2>
 800313a:	2800      	cmp	r0, #0
 800313c:	d1b5      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800313e:	2006      	movs	r0, #6
 8003140:	f000 faa9 	bl	8003696 <.text_6>
 8003144:	241b      	movs	r4, #27
 8003146:	210b      	movs	r1, #11
 8003148:	e612      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 800314a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800314e:	2811      	cmp	r0, #17
 8003150:	d131      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003152:	88b9      	ldrh	r1, [r7, #4]
 8003154:	0bc8      	lsrs	r0, r1, #15
 8003156:	d11b      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003158:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800315c:	b1c0      	cbz	r0, 8003190 <USBPD_PE_StateMachine_SRC+0x864>
 800315e:	4608      	mov	r0, r1
 8003160:	f000 011f 	and.w	r1, r0, #31
 8003164:	2901      	cmp	r1, #1
 8003166:	d113      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003168:	68b4      	ldr	r4, [r6, #8]
 800316a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800316e:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	1c82      	adds	r2, r0, #2
 8003176:	7c30      	ldrb	r0, [r6, #16]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	2104      	movs	r1, #4
 800317c:	47e0      	blx	ip
 800317e:	f000 fa92 	bl	80036a6 <.text_8>
 8003182:	d001      	beq.n	8003188 <USBPD_PE_StateMachine_SRC+0x85c>
 8003184:	f000 fad6 	bl	8003734 <.text_20>
 8003188:	7c30      	ldrb	r0, [r6, #16]
 800318a:	210d      	movs	r1, #13
 800318c:	f7fd f9e3 	bl	8000556 <USBPD_PE_Notification>
 8003190:	88b8      	ldrh	r0, [r7, #4]
 8003192:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8003196:	d10e      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003198:	f000 001f 	and.w	r0, r0, #31
 800319c:	2804      	cmp	r0, #4
 800319e:	bf18      	it	ne
 80031a0:	2810      	cmpne	r0, #16
 80031a2:	d108      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 80031a4:	f000 fa7f 	bl	80036a6 <.text_8>
 80031a8:	d001      	beq.n	80031ae <USBPD_PE_StateMachine_SRC+0x882>
 80031aa:	f000 fac3 	bl	8003734 <.text_20>
 80031ae:	7c30      	ldrb	r0, [r6, #16]
 80031b0:	210e      	movs	r1, #14
 80031b2:	f7fd f9d0 	bl	8000556 <USBPD_PE_Notification>
 80031b6:	8bf0      	ldrh	r0, [r6, #30]
 80031b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80031bc:	d11a      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031be:	2103      	movs	r1, #3
 80031c0:	e5b8      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80031c2:	68b0      	ldr	r0, [r6, #8]
 80031c4:	6881      	ldr	r1, [r0, #8]
 80031c6:	b1d1      	cbz	r1, 80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031c8:	7c30      	ldrb	r0, [r6, #16]
 80031ca:	4788      	blx	r1
 80031cc:	280a      	cmp	r0, #10
 80031ce:	d002      	beq.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8aa>
 80031d0:	280d      	cmp	r0, #13
 80031d2:	d010      	beq.n	80031f6 <USBPD_PE_StateMachine_SRC+0x8ca>
 80031d4:	e013      	b.n	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031d6:	f8a6 b01e 	strh.w	fp, [r6, #30]
 80031da:	2000      	movs	r0, #0
 80031dc:	9000      	str	r0, [sp, #0]
 80031de:	2324      	movs	r3, #36	; 0x24
 80031e0:	f000 faae 	bl	8003740 <.text_21>
 80031e4:	241e      	movs	r4, #30
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d104      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031ea:	f000 fa4f 	bl	800368c <.text_5>
 80031ee:	2201      	movs	r2, #1
 80031f0:	2101      	movs	r1, #1
 80031f2:	47e0      	blx	ip
 80031f4:	e4f4      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80031f6:	2000      	movs	r0, #0
 80031f8:	9000      	str	r0, [sp, #0]
 80031fa:	2303      	movs	r3, #3
 80031fc:	e651      	b.n	8002ea2 <USBPD_PE_StateMachine_SRC+0x576>
 80031fe:	2000      	movs	r0, #0
 8003200:	9000      	str	r0, [sp, #0]
 8003202:	2303      	movs	r3, #3
 8003204:	e67c      	b.n	8002f00 <USBPD_PE_StateMachine_SRC+0x5d4>
 8003206:	8bf0      	ldrh	r0, [r6, #30]
 8003208:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800320c:	d1f2      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800320e:	f000 fa88 	bl	8003722 <.text_18>
 8003212:	f000 fa5e 	bl	80036d2 <.text_11>
 8003216:	2206      	movs	r2, #6
 8003218:	f000 fa73 	bl	8003702 <.text_15>
 800321c:	f000 fa77 	bl	800370e <.text_16>
 8003220:	7c30      	ldrb	r0, [r6, #16]
 8003222:	2100      	movs	r1, #0
 8003224:	f001 fed3 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003228:	2000      	movs	r0, #0
 800322a:	9000      	str	r0, [sp, #0]
 800322c:	2325      	movs	r3, #37	; 0x25
 800322e:	2206      	movs	r2, #6
 8003230:	f000 fa87 	bl	8003742 <.text_21+0x2>
 8003234:	2800      	cmp	r0, #0
 8003236:	d1dd      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 8003238:	e0a5      	b.n	8003386 <USBPD_PE_StateMachine_SRC+0xa5a>
 800323a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800323e:	2911      	cmp	r1, #17
 8003240:	bf02      	ittt	eq
 8003242:	88b9      	ldrheq	r1, [r7, #4]
 8003244:	4008      	andeq	r0, r1
 8003246:	2806      	cmpeq	r0, #6
 8003248:	d105      	bne.n	8003256 <USBPD_PE_StateMachine_SRC+0x92a>
 800324a:	f000 fa28 	bl	800369e <.text_7>
 800324e:	f000 fa74 	bl	800373a <.text_20+0x6>
 8003252:	2026      	movs	r0, #38	; 0x26
 8003254:	7470      	strb	r0, [r6, #17]
 8003256:	8bf0      	ldrh	r0, [r6, #30]
 8003258:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800325c:	d1ca      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800325e:	68b3      	ldr	r3, [r6, #8]
 8003260:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003262:	2800      	cmp	r0, #0
 8003264:	f040 81e0 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003268:	7c30      	ldrb	r0, [r6, #16]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	220a      	movs	r2, #10
 800326e:	2101      	movs	r1, #1
 8003270:	4798      	blx	r3
 8003272:	e0a8      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003274:	2100      	movs	r1, #0
 8003276:	4630      	mov	r0, r6
 8003278:	f7fd fb5c 	bl	8000934 <PE_ChangePowerRole>
 800327c:	f000 fa02 	bl	8003684 <.text_4>
 8003280:	220d      	movs	r2, #13
 8003282:	2100      	movs	r1, #0
 8003284:	47a0      	blx	r4
 8003286:	7c30      	ldrb	r0, [r6, #16]
 8003288:	2114      	movs	r1, #20
 800328a:	f7fd f964 	bl	8000556 <USBPD_PE_Notification>
 800328e:	f000 f9f9 	bl	8003684 <.text_4>
 8003292:	220e      	movs	r2, #14
 8003294:	2100      	movs	r1, #0
 8003296:	47a0      	blx	r4
 8003298:	6870      	ldr	r0, [r6, #4]
 800329a:	7801      	ldrb	r1, [r0, #0]
 800329c:	f001 0103 	and.w	r1, r1, #3
 80032a0:	2901      	cmp	r1, #1
 80032a2:	bf04      	itt	eq
 80032a4:	4640      	moveq	r0, r8
 80032a6:	f001 fed3 	bleq	8005050 <USBPD_PRL_SOPCapability>
 80032aa:	4630      	mov	r0, r6
 80032ac:	f7fd fc96 	bl	8000bdc <PE_Reset_StateMachine>
 80032b0:	e541      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80032b2:	2001      	movs	r0, #1
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	231f      	movs	r3, #31
 80032b8:	220a      	movs	r2, #10
 80032ba:	f000 fa42 	bl	8003742 <.text_21+0x2>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d198      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80032c2:	2008      	movs	r0, #8
 80032c4:	f000 f9e7 	bl	8003696 <.text_6>
 80032c8:	2202      	movs	r2, #2
 80032ca:	f000 fa1a 	bl	8003702 <.text_15>
 80032ce:	241b      	movs	r4, #27
 80032d0:	2139      	movs	r1, #57	; 0x39
 80032d2:	e54d      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80032d4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80032d8:	2811      	cmp	r0, #17
 80032da:	bf04      	itt	eq
 80032dc:	88b8      	ldrheq	r0, [r7, #4]
 80032de:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 80032e2:	d133      	bne.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032e4:	f000 001f 	and.w	r0, r0, #31
 80032e8:	2803      	cmp	r0, #3
 80032ea:	d006      	beq.n	80032fa <USBPD_PE_StateMachine_SRC+0x9ce>
 80032ec:	2804      	cmp	r0, #4
 80032ee:	d011      	beq.n	8003314 <USBPD_PE_StateMachine_SRC+0x9e8>
 80032f0:	280c      	cmp	r0, #12
 80032f2:	d008      	beq.n	8003306 <USBPD_PE_StateMachine_SRC+0x9da>
 80032f4:	2810      	cmp	r0, #16
 80032f6:	d01a      	beq.n	800332e <USBPD_PE_StateMachine_SRC+0xa02>
 80032f8:	e028      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032fa:	7c30      	ldrb	r0, [r6, #16]
 80032fc:	213a      	movs	r1, #58	; 0x3a
 80032fe:	f7fd f92a 	bl	8000556 <USBPD_PE_Notification>
 8003302:	2020      	movs	r0, #32
 8003304:	e00c      	b.n	8003320 <USBPD_PE_StateMachine_SRC+0x9f4>
 8003306:	f000 f9bd 	bl	8003684 <.text_4>
 800330a:	2205      	movs	r2, #5
 800330c:	2101      	movs	r1, #1
 800330e:	47a0      	blx	r4
 8003310:	213b      	movs	r1, #59	; 0x3b
 8003312:	e002      	b.n	800331a <USBPD_PE_StateMachine_SRC+0x9ee>
 8003314:	f000 f9ef 	bl	80036f6 <.text_14>
 8003318:	2116      	movs	r1, #22
 800331a:	f000 f9ff 	bl	800371c <.text_17>
 800331e:	2003      	movs	r0, #3
 8003320:	7470      	strb	r0, [r6, #17]
 8003322:	2400      	movs	r4, #0
 8003324:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003328:	2814      	cmp	r0, #20
 800332a:	d10d      	bne.n	8003348 <USBPD_PE_StateMachine_SRC+0xa1c>
 800332c:	e00e      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 800332e:	f000 f9e2 	bl	80036f6 <.text_14>
 8003332:	7c30      	ldrb	r0, [r6, #16]
 8003334:	2117      	movs	r1, #23
 8003336:	f7fd f90e 	bl	8000556 <USBPD_PE_Notification>
 800333a:	2003      	movs	r0, #3
 800333c:	7470      	strb	r0, [r6, #17]
 800333e:	2400      	movs	r4, #0
 8003340:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003344:	2814      	cmp	r0, #20
 8003346:	d001      	beq.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 8003348:	f000 f9f4 	bl	8003734 <.text_20>
 800334c:	8bf0      	ldrh	r0, [r6, #30]
 800334e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003352:	d122      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003354:	e733      	b.n	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003356:	f000 f9bc 	bl	80036d2 <.text_11>
 800335a:	7f30      	ldrb	r0, [r6, #28]
 800335c:	2809      	cmp	r0, #9
 800335e:	d004      	beq.n	800336a <USBPD_PE_StateMachine_SRC+0xa3e>
 8003360:	f000 f994 	bl	800368c <.text_5>
 8003364:	2206      	movs	r2, #6
 8003366:	2101      	movs	r1, #1
 8003368:	47e0      	blx	ip
 800336a:	f000 f9d0 	bl	800370e <.text_16>
 800336e:	7c30      	ldrb	r0, [r6, #16]
 8003370:	2100      	movs	r1, #0
 8003372:	f001 fe2c 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003376:	2000      	movs	r0, #0
 8003378:	9000      	str	r0, [sp, #0]
 800337a:	2321      	movs	r3, #33	; 0x21
 800337c:	2206      	movs	r2, #6
 800337e:	f000 f9e0 	bl	8003742 <.text_21+0x2>
 8003382:	2800      	cmp	r0, #0
 8003384:	d109      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003386:	f000 f97d 	bl	8003684 <.text_4>
 800338a:	2208      	movs	r2, #8
 800338c:	2101      	movs	r1, #1
 800338e:	47a0      	blx	r4
 8003390:	f248 10d6 	movw	r0, #33238	; 0x81d6
 8003394:	83f0      	strh	r0, [r6, #30]
 8003396:	f44f 74eb 	mov.w	r4, #470	; 0x1d6
 800339a:	e421      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800339c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80033a0:	2911      	cmp	r1, #17
 80033a2:	bf02      	ittt	eq
 80033a4:	88b9      	ldrheq	r1, [r7, #4]
 80033a6:	4008      	andeq	r0, r1
 80033a8:	2806      	cmpeq	r0, #6
 80033aa:	d103      	bne.n	80033b4 <USBPD_PE_StateMachine_SRC+0xa88>
 80033ac:	2026      	movs	r0, #38	; 0x26
 80033ae:	7470      	strb	r0, [r6, #17]
 80033b0:	f000 f9c0 	bl	8003734 <.text_20>
 80033b4:	8bf0      	ldrh	r0, [r6, #30]
 80033b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80033ba:	d1ee      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033bc:	68b1      	ldr	r1, [r6, #8]
 80033be:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f040 8131 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 80033c6:	210f      	movs	r1, #15
 80033c8:	e4b4      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80033ca:	8bf0      	ldrh	r0, [r6, #30]
 80033cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80033d0:	d1e3      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033d2:	f000 f95b 	bl	800368c <.text_5>
 80033d6:	220e      	movs	r2, #14
 80033d8:	2101      	movs	r1, #1
 80033da:	47e0      	blx	ip
 80033dc:	6870      	ldr	r0, [r6, #4]
 80033de:	7801      	ldrb	r1, [r0, #0]
 80033e0:	f001 0103 	and.w	r1, r1, #3
 80033e4:	2902      	cmp	r1, #2
 80033e6:	bf04      	itt	eq
 80033e8:	7c30      	ldrbeq	r0, [r6, #16]
 80033ea:	f001 fe20 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 80033ee:	4630      	mov	r0, r6
 80033f0:	f7fd fbf4 	bl	8000bdc <PE_Reset_StateMachine>
 80033f4:	2115      	movs	r1, #21
 80033f6:	e4bb      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80033f8:	2903      	cmp	r1, #3
 80033fa:	d10f      	bne.n	800341c <USBPD_PE_StateMachine_SRC+0xaf0>
 80033fc:	2000      	movs	r0, #0
 80033fe:	6871      	ldr	r1, [r6, #4]
 8003400:	7730      	strb	r0, [r6, #28]
 8003402:	7808      	ldrb	r0, [r1, #0]
 8003404:	f000 0003 	and.w	r0, r0, #3
 8003408:	2802      	cmp	r0, #2
 800340a:	bf04      	itt	eq
 800340c:	7c30      	ldrbeq	r0, [r6, #16]
 800340e:	f001 fe0e 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003412:	2004      	movs	r0, #4
 8003414:	7470      	strb	r0, [r6, #17]
 8003416:	2167      	movs	r1, #103	; 0x67
 8003418:	f000 f980 	bl	800371c <.text_17>
 800341c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003420:	2814      	cmp	r0, #20
 8003422:	d009      	beq.n	8003438 <USBPD_PE_StateMachine_SRC+0xb0c>
 8003424:	4630      	mov	r0, r6
 8003426:	f7fe fa8d 	bl	8001944 <PE_ManageRXEvent>
 800342a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800342e:	2814      	cmp	r0, #20
 8003430:	d0b3      	beq.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003432:	f000 f97f 	bl	8003734 <.text_20>
 8003436:	e7b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003438:	6970      	ldr	r0, [r6, #20]
 800343a:	0cc0      	lsrs	r0, r0, #19
 800343c:	d027      	beq.n	800348e <USBPD_PE_StateMachine_SRC+0xb62>
 800343e:	8c30      	ldrh	r0, [r6, #32]
 8003440:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003444:	d10e      	bne.n	8003464 <USBPD_PE_StateMachine_SRC+0xb38>
 8003446:	210f      	movs	r1, #15
 8003448:	7471      	strb	r1, [r6, #17]
 800344a:	2000      	movs	r0, #0
 800344c:	9000      	str	r0, [sp, #0]
 800344e:	7c31      	ldrb	r1, [r6, #16]
 8003450:	f8d9 4000 	ldr.w	r4, [r9]
 8003454:	2300      	movs	r3, #0
 8003456:	2270      	movs	r2, #112	; 0x70
 8003458:	2009      	movs	r0, #9
 800345a:	47a0      	blx	r4
 800345c:	78a8      	ldrb	r0, [r5, #2]
 800345e:	1c40      	adds	r0, r0, #1
 8003460:	70a8      	strb	r0, [r5, #2]
 8003462:	e468      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8003464:	88b9      	ldrh	r1, [r7, #4]
 8003466:	6972      	ldr	r2, [r6, #20]
 8003468:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800346c:	2033      	movs	r0, #51	; 0x33
 800346e:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8003472:	fb11 f100 	smulbb	r1, r1, r0
 8003476:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800347a:	8431      	strh	r1, [r6, #32]
 800347c:	88b9      	ldrh	r1, [r7, #4]
 800347e:	6972      	ldr	r2, [r6, #20]
 8003480:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8003484:	eb01 44d2 	add.w	r4, r1, r2, lsr #19
 8003488:	4344      	muls	r4, r0
 800348a:	b2a4      	uxth	r4, r4
 800348c:	e785      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 800348e:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
 8003490:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003494:	bf08      	it	eq
 8003496:	210f      	moveq	r1, #15
 8003498:	d01b      	beq.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800349a:	7c30      	ldrb	r0, [r6, #16]
 800349c:	f7fd faab 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80034a0:	b968      	cbnz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a2:	78b8      	ldrb	r0, [r7, #2]
 80034a4:	b158      	cbz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a6:	78f9      	ldrb	r1, [r7, #3]
 80034a8:	7079      	strb	r1, [r7, #1]
 80034aa:	7470      	strb	r0, [r6, #17]
 80034ac:	2000      	movs	r0, #0
 80034ae:	70b8      	strb	r0, [r7, #2]
 80034b0:	6970      	ldr	r0, [r6, #20]
 80034b2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80034b4:	62f1      	str	r1, [r6, #44]	; 0x2c
 80034b6:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 80034ba:	6170      	str	r0, [r6, #20]
 80034bc:	e43b      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80034be:	8c70      	ldrh	r0, [r6, #34]	; 0x22
 80034c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80034c4:	d106      	bne.n	80034d4 <USBPD_PE_StateMachine_SRC+0xba8>
 80034c6:	2100      	movs	r1, #0
 80034c8:	8471      	strh	r1, [r6, #34]	; 0x22
 80034ca:	2105      	movs	r1, #5
 80034cc:	7928      	ldrb	r0, [r5, #4]
 80034ce:	1c40      	adds	r0, r0, #1
 80034d0:	7128      	strb	r0, [r5, #4]
 80034d2:	e42f      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7fd ff3f 	bl	8001358 <PE_CalculateMinTiming>
 80034da:	e425      	b.n	8002d28 <USBPD_PE_StateMachine_SRC+0x3fc>
 80034dc:	2000      	movs	r0, #0
 80034de:	2103      	movs	r1, #3
 80034e0:	2201      	movs	r2, #1
 80034e2:	9002      	str	r0, [sp, #8]
 80034e4:	9101      	str	r1, [sp, #4]
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 80034ec:	2206      	movs	r2, #6
 80034ee:	2100      	movs	r1, #0
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7fd ffe6 	bl	80014c2 <PE_Send_DataMessage>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d13b      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 80034fa:	215d      	movs	r1, #93	; 0x5d
 80034fc:	e438      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80034fe:	2000      	movs	r0, #0
 8003500:	9004      	str	r0, [sp, #16]
 8003502:	ab04      	add	r3, sp, #16
 8003504:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8003508:	f8dc 7014 	ldr.w	r7, [ip, #20]
 800350c:	aa05      	add	r2, sp, #20
 800350e:	210a      	movs	r1, #10
 8003510:	4640      	mov	r0, r8
 8003512:	47b8      	blx	r7
 8003514:	9804      	ldr	r0, [sp, #16]
 8003516:	2104      	movs	r1, #4
 8003518:	f7fd ff46 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 800351c:	b9f8      	cbnz	r0, 800355e <USBPD_PE_StateMachine_SRC+0xc32>
 800351e:	71e8      	strb	r0, [r5, #7]
 8003520:	2100      	movs	r1, #0
 8003522:	7229      	strb	r1, [r5, #8]
 8003524:	7c30      	ldrb	r0, [r6, #16]
 8003526:	f7fd fc36 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800352a:	b918      	cbnz	r0, 8003534 <USBPD_PE_StateMachine_SRC+0xc08>
 800352c:	7a28      	ldrb	r0, [r5, #8]
 800352e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003532:	7228      	strb	r0, [r5, #8]
 8003534:	a905      	add	r1, sp, #20
 8003536:	9a04      	ldr	r2, [sp, #16]
 8003538:	f206 2067 	addw	r0, r6, #615	; 0x267
 800353c:	f01c f978 	bl	801f830 <__aeabi_memcpy>
 8003540:	2000      	movs	r0, #0
 8003542:	2103      	movs	r1, #3
 8003544:	2208      	movs	r2, #8
 8003546:	9002      	str	r0, [sp, #8]
 8003548:	9101      	str	r1, [sp, #4]
 800354a:	9200      	str	r2, [sp, #0]
 800354c:	f206 2363 	addw	r3, r6, #611	; 0x263
 8003550:	220c      	movs	r2, #12
 8003552:	2100      	movs	r1, #0
 8003554:	4630      	mov	r0, r6
 8003556:	f7fe f8d3 	bl	8001700 <PE_Send_ExtendedMessage>
 800355a:	214c      	movs	r1, #76	; 0x4c
 800355c:	e7ce      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 800355e:	2001      	movs	r0, #1
 8003560:	e57c      	b.n	800305c <USBPD_PE_StateMachine_SRC+0x730>
 8003562:	2101      	movs	r1, #1
 8003564:	9100      	str	r1, [sp, #0]
 8003566:	2339      	movs	r3, #57	; 0x39
 8003568:	782a      	ldrb	r2, [r5, #0]
 800356a:	78f9      	ldrb	r1, [r7, #3]
 800356c:	f000 f8ea 	bl	8003744 <.text_21+0x4>
 8003570:	2800      	cmp	r0, #0
 8003572:	f47f ab35 	bne.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8003576:	7868      	ldrb	r0, [r5, #1]
 8003578:	f000 f88d 	bl	8003696 <.text_6>
 800357c:	241b      	movs	r4, #27
 800357e:	2144      	movs	r1, #68	; 0x44
 8003580:	e7bc      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 8003582:	8bf0      	ldrh	r0, [r6, #30]
 8003584:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003588:	bf04      	itt	eq
 800358a:	f89d 000c 	ldrbeq.w	r0, [sp, #12]
 800358e:	2814      	cmpeq	r0, #20
 8003590:	f43f ae15 	beq.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003594:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003598:	2814      	cmp	r0, #20
 800359a:	f43f ab21 	beq.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800359e:	88b9      	ldrh	r1, [r7, #4]
 80035a0:	0bc8      	lsrs	r0, r1, #15
 80035a2:	d003      	beq.n	80035ac <USBPD_PE_StateMachine_SRC+0xc80>
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7fd ffc9 	bl	800153c <PE_Check_ExtendedMessage>
 80035aa:	e73e      	b.n	800342a <USBPD_PE_StateMachine_SRC+0xafe>
 80035ac:	f001 011f 	and.w	r1, r1, #31
 80035b0:	2910      	cmp	r1, #16
 80035b2:	f47f ae04 	bne.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 80035b6:	f000 f872 	bl	800369e <.text_7>
 80035ba:	2400      	movs	r4, #0
 80035bc:	f000 f8bd 	bl	800373a <.text_20+0x6>
 80035c0:	2000      	movs	r0, #0
 80035c2:	83f0      	strh	r0, [r6, #30]
 80035c4:	2103      	movs	r1, #3
 80035c6:	7471      	strb	r1, [r6, #17]
 80035c8:	2159      	movs	r1, #89	; 0x59
 80035ca:	e797      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 80035cc:	4630      	mov	r0, r6
 80035ce:	f7fe f8be 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80035d2:	e003      	b.n	80035dc <USBPD_PE_StateMachine_SRC+0xcb0>
 80035d4:	a903      	add	r1, sp, #12
 80035d6:	4630      	mov	r0, r6
 80035d8:	f7fd fbee 	bl	8000db8 <PE_SubStateMachine_Generic>
 80035dc:	f7ff baff 	b.w	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 80035e0:	a903      	add	r1, sp, #12
 80035e2:	4630      	mov	r0, r6
 80035e4:	f000 f9fd 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80035e8:	4604      	mov	r4, r0
 80035ea:	f000 f878 	bl	80036de <.text_12>
 80035ee:	bf0e      	itee	eq
 80035f0:	2101      	moveq	r1, #1
 80035f2:	6830      	ldrne	r0, [r6, #0]
 80035f4:	6801      	ldrne	r1, [r0, #0]
 80035f6:	4640      	mov	r0, r8
 80035f8:	f001 fd2a 	bl	8005050 <USBPD_PRL_SOPCapability>
 80035fc:	e6cd      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80035fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003602:	2911      	cmp	r1, #17
 8003604:	bf02      	ittt	eq
 8003606:	88b9      	ldrheq	r1, [r7, #4]
 8003608:	4008      	andeq	r0, r1
 800360a:	2813      	cmpeq	r0, #19
 800360c:	d108      	bne.n	8003620 <USBPD_PE_StateMachine_SRC+0xcf4>
 800360e:	f000 f846 	bl	800369e <.text_7>
 8003612:	f000 f892 	bl	800373a <.text_20+0x6>
 8003616:	2000      	movs	r0, #0
 8003618:	9000      	str	r0, [sp, #0]
 800361a:	2320      	movs	r3, #32
 800361c:	f000 f890 	bl	8003740 <.text_21>
 8003620:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
 8003622:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003626:	d1a4      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 8003628:	2192      	movs	r1, #146	; 0x92
 800362a:	e752      	b.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800362c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003630:	4630      	mov	r0, r6
 8003632:	f001 faca 	bl	8004bca <PE_StateMachine_UVDM>
 8003636:	e6b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003638:	6970      	ldr	r0, [r6, #20]
 800363a:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800363e:	b1b0      	cbz	r0, 800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8003640:	6970      	ldr	r0, [r6, #20]
 8003642:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8003646:	b138      	cbz	r0, 8003658 <USBPD_PE_StateMachine_SRC+0xd2c>
 8003648:	7c30      	ldrb	r0, [r6, #16]
 800364a:	215b      	movs	r1, #91	; 0x5b
 800364c:	f7fc ff83 	bl	8000556 <USBPD_PE_Notification>
 8003650:	6970      	ldr	r0, [r6, #20]
 8003652:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8003656:	6170      	str	r0, [r6, #20]
 8003658:	2003      	movs	r0, #3
 800365a:	7cb1      	ldrb	r1, [r6, #18]
 800365c:	7470      	strb	r0, [r6, #17]
 800365e:	2903      	cmp	r1, #3
 8003660:	d004      	beq.n	800366c <USBPD_PE_StateMachine_SRC+0xd40>
 8003662:	f000 f82e 	bl	80036c2 <.text_10>
 8003666:	2203      	movs	r2, #3
 8003668:	2004      	movs	r0, #4
 800366a:	47a0      	blx	r4
 800366c:	2401      	movs	r4, #1
 800366e:	6970      	ldr	r0, [r6, #20]
 8003670:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8003674:	2c00      	cmp	r4, #0
 8003676:	6170      	str	r0, [r6, #20]
 8003678:	f43f a9b8 	beq.w	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 800367c:	f7ff bad6 	b.w	8002c2c <USBPD_PE_StateMachine_SRC+0x300>

08003680 <.text_3>:
 8003680:	20000000 	.word	0x20000000

08003684 <.text_4>:
 8003684:	68b3      	ldr	r3, [r6, #8]
 8003686:	7c30      	ldrb	r0, [r6, #16]
 8003688:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800368a:	4770      	bx	lr

0800368c <.text_5>:
 800368c:	68b3      	ldr	r3, [r6, #8]
 800368e:	7c30      	ldrb	r0, [r6, #16]
 8003690:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8003694:	4770      	bx	lr

08003696 <.text_6>:
 8003696:	7730      	strb	r0, [r6, #28]
 8003698:	f8a6 a01e 	strh.w	sl, [r6, #30]
 800369c:	4770      	bx	lr

0800369e <.text_7>:
 800369e:	2014      	movs	r0, #20
 80036a0:	f88d 000c 	strb.w	r0, [sp, #12]
 80036a4:	4770      	bx	lr

080036a6 <.text_8>:
 80036a6:	2003      	movs	r0, #3
 80036a8:	7470      	strb	r0, [r6, #17]
 80036aa:	2400      	movs	r4, #0
 80036ac:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80036b0:	2814      	cmp	r0, #20
 80036b2:	4770      	bx	lr

080036b4 <.text_9>:
 80036b4:	9100      	str	r1, [sp, #0]
 80036b6:	2300      	movs	r3, #0
 80036b8:	7c31      	ldrb	r1, [r6, #16]
 80036ba:	f8d9 c000 	ldr.w	ip, [r9]
 80036be:	2004      	movs	r0, #4

080036c0 <__iar_annotation$$tailcall>:
 80036c0:	4760      	bx	ip

080036c2 <.text_10>:
 80036c2:	74b0      	strb	r0, [r6, #18]
 80036c4:	2100      	movs	r1, #0
 80036c6:	9100      	str	r1, [sp, #0]
 80036c8:	2300      	movs	r3, #0
 80036ca:	7c31      	ldrb	r1, [r6, #16]
 80036cc:	f8d9 4000 	ldr.w	r4, [r9]
 80036d0:	4770      	bx	lr

080036d2 <.text_11>:
 80036d2:	6870      	ldr	r0, [r6, #4]
 80036d4:	6801      	ldr	r1, [r0, #0]
 80036d6:	f041 0110 	orr.w	r1, r1, #16
 80036da:	6001      	str	r1, [r0, #0]
 80036dc:	4770      	bx	lr

080036de <.text_12>:
 80036de:	6870      	ldr	r0, [r6, #4]
 80036e0:	6801      	ldr	r1, [r0, #0]
 80036e2:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80036e6:	2800      	cmp	r0, #0
 80036e8:	4770      	bx	lr

080036ea <.text_13>:
 80036ea:	6870      	ldr	r0, [r6, #4]
 80036ec:	6801      	ldr	r1, [r0, #0]
 80036ee:	f021 0110 	bic.w	r1, r1, #16
 80036f2:	6001      	str	r1, [r0, #0]
 80036f4:	4770      	bx	lr

080036f6 <.text_14>:
 80036f6:	68b3      	ldr	r3, [r6, #8]
 80036f8:	7c30      	ldrb	r0, [r6, #16]
 80036fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80036fc:	2204      	movs	r2, #4
 80036fe:	2101      	movs	r1, #1

08003700 <__iar_annotation$$tailcall>:
 8003700:	4720      	bx	r4

08003702 <.text_15>:
 8003702:	68b3      	ldr	r3, [r6, #8]
 8003704:	7c30      	ldrb	r0, [r6, #16]
 8003706:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 800370a:	2101      	movs	r1, #1

0800370c <__iar_annotation$$tailcall>:
 800370c:	4760      	bx	ip

0800370e <.text_16>:
 800370e:	68b3      	ldr	r3, [r6, #8]
 8003710:	7c30      	ldrb	r0, [r6, #16]
 8003712:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8003716:	2207      	movs	r2, #7
 8003718:	2101      	movs	r1, #1

0800371a <__iar_annotation$$tailcall>:
 800371a:	4760      	bx	ip

0800371c <.text_17>:
 800371c:	7c30      	ldrb	r0, [r6, #16]
 800371e:	f7fc bf1a 	b.w	8000556 <USBPD_PE_Notification>

08003722 <.text_18>:
 8003722:	2104      	movs	r1, #4
 8003724:	4630      	mov	r0, r6
 8003726:	f7fd bdfd 	b.w	8001324 <PE_SetPowerNegotiation>

0800372a <.text_19>:
 800372a:	2206      	movs	r2, #6
 800372c:	2101      	movs	r1, #1
 800372e:	4630      	mov	r0, r6
 8003730:	f7fd bdf1 	b.w	8001316 <PE_CallHardResetCallback>

08003734 <.text_20>:
 8003734:	2114      	movs	r1, #20
 8003736:	f88d 100c 	strb.w	r1, [sp, #12]
 800373a:	4630      	mov	r0, r6
 800373c:	f7fd b936 	b.w	80009ac <PE_Clear_RxEvent>

08003740 <.text_21>:
 8003740:	2203      	movs	r2, #3
 8003742:	2100      	movs	r1, #0
 8003744:	4630      	mov	r0, r6
 8003746:	f7fd be8f 	b.w	8001468 <PE_Send_CtrlMessage>

0800374a <PE_Send_SRCCapabilities>:
 800374a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800374c:	4604      	mov	r4, r0
 800374e:	2000      	movs	r0, #0
 8003750:	9002      	str	r0, [sp, #8]
 8003752:	460d      	mov	r5, r1
 8003754:	68a6      	ldr	r6, [r4, #8]
 8003756:	7c20      	ldrb	r0, [r4, #16]
 8003758:	6977      	ldr	r7, [r6, #20]
 800375a:	ab02      	add	r3, sp, #8
 800375c:	f204 2265 	addw	r2, r4, #613	; 0x265
 8003760:	2100      	movs	r1, #0
 8003762:	47b8      	blx	r7
 8003764:	9802      	ldr	r0, [sp, #8]
 8003766:	1c80      	adds	r0, r0, #2
 8003768:	9002      	str	r0, [sp, #8]
 800376a:	9802      	ldr	r0, [sp, #8]
 800376c:	2104      	movs	r1, #4
 800376e:	f7fd fe1b 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8003772:	b998      	cbnz	r0, 800379c <PE_Send_SRCCapabilities+0x52>
 8003774:	6860      	ldr	r0, [r4, #4]
 8003776:	6801      	ldr	r1, [r0, #0]
 8003778:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800377c:	2800      	cmp	r0, #0
 800377e:	d00d      	beq.n	800379c <PE_Send_SRCCapabilities+0x52>
 8003780:	9802      	ldr	r0, [sp, #8]
 8003782:	9501      	str	r5, [sp, #4]
 8003784:	b280      	uxth	r0, r0
 8003786:	9000      	str	r0, [sp, #0]
 8003788:	f204 2363 	addw	r3, r4, #611	; 0x263
 800378c:	7c20      	ldrb	r0, [r4, #16]
 800378e:	2201      	movs	r2, #1
 8003790:	2100      	movs	r1, #0
 8003792:	f001 fc5f 	bl	8005054 <USBPD_PRL_SendMessage>
 8003796:	2803      	cmp	r0, #3
 8003798:	d0e7      	beq.n	800376a <PE_Send_SRCCapabilities+0x20>
 800379a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800379c:	2010      	movs	r0, #16
 800379e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080037a0 <PE_StateMachine_VDMCable>:
 80037a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a4:	b08c      	sub	sp, #48	; 0x30
 80037a6:	2602      	movs	r6, #2
 80037a8:	4605      	mov	r5, r0
 80037aa:	4688      	mov	r8, r1
 80037ac:	7c68      	ldrb	r0, [r5, #17]
 80037ae:	2805      	cmp	r0, #5
 80037b0:	f505 7414 	add.w	r4, r5, #592	; 0x250
 80037b4:	f248 072d 	movw	r7, #32813	; 0x802d
 80037b8:	d002      	beq.n	80037c0 <PE_StateMachine_VDMCable+0x20>
 80037ba:	289a      	cmp	r0, #154	; 0x9a
 80037bc:	d061      	beq.n	8003882 <PE_StateMachine_VDMCable+0xe2>
 80037be:	e0f1      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 80037c0:	686a      	ldr	r2, [r5, #4]
 80037c2:	7811      	ldrb	r1, [r2, #0]
 80037c4:	f001 0103 	and.w	r1, r1, #3
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 fa36 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	0952      	lsrs	r2, r2, #5
 80037d2:	0152      	lsls	r2, r2, #5
 80037d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	6022      	str	r2, [r4, #0]
 80037de:	4623      	mov	r3, r4
 80037e0:	6868      	ldr	r0, [r5, #4]
 80037e2:	6801      	ldr	r1, [r0, #0]
 80037e4:	f649 003f 	movw	r0, #38975	; 0x983f
 80037e8:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80037ec:	4002      	ands	r2, r0
 80037ee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80037f2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80037f6:	6022      	str	r2, [r4, #0]
 80037f8:	6868      	ldr	r0, [r5, #4]
 80037fa:	6801      	ldr	r1, [r0, #0]
 80037fc:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8003800:	2800      	cmp	r0, #0
 8003802:	bf1d      	ittte	ne
 8003804:	6968      	ldrne	r0, [r5, #20]
 8003806:	0880      	lsrne	r0, r0, #2
 8003808:	f000 0001 	andne.w	r0, r0, #1
 800380c:	2002      	moveq	r0, #2
 800380e:	9002      	str	r0, [sp, #8]
 8003810:	2101      	movs	r1, #1
 8003812:	209a      	movs	r0, #154	; 0x9a
 8003814:	9001      	str	r0, [sp, #4]
 8003816:	9100      	str	r1, [sp, #0]
 8003818:	220f      	movs	r2, #15
 800381a:	4628      	mov	r0, r5
 800381c:	f7fd fe51 	bl	80014c2 <PE_Send_DataMessage>
 8003820:	b950      	cbnz	r0, 8003838 <PE_StateMachine_VDMCable+0x98>
 8003822:	6968      	ldr	r0, [r5, #20]
 8003824:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003828:	6168      	str	r0, [r5, #20]
 800382a:	2151      	movs	r1, #81	; 0x51
 800382c:	7729      	strb	r1, [r5, #28]
 800382e:	f248 001e 	movw	r0, #32798	; 0x801e
 8003832:	8468      	strh	r0, [r5, #34]	; 0x22
 8003834:	261e      	movs	r6, #30
 8003836:	e0b5      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003838:	2809      	cmp	r0, #9
 800383a:	d0fc      	beq.n	8003836 <PE_StateMachine_VDMCable+0x96>
 800383c:	7ca0      	ldrb	r0, [r4, #18]
 800383e:	2815      	cmp	r0, #21
 8003840:	bf38      	it	cc
 8003842:	846f      	strhcc	r7, [r5, #34]	; 0x22
 8003844:	d307      	bcc.n	8003856 <PE_StateMachine_VDMCable+0xb6>
 8003846:	68e8      	ldr	r0, [r5, #12]
 8003848:	6944      	ldr	r4, [r0, #20]
 800384a:	b124      	cbz	r4, 8003856 <PE_StateMachine_VDMCable+0xb6>
 800384c:	7c28      	ldrb	r0, [r5, #16]
 800384e:	2300      	movs	r3, #0
 8003850:	2205      	movs	r2, #5
 8003852:	2101      	movs	r1, #1
 8003854:	47a0      	blx	r4
 8003856:	f000 f8ae 	bl	80039b6 <.text_4>
 800385a:	f000 8080 	beq.w	800395e <PE_StateMachine_VDMCable+0x1be>
 800385e:	8be8      	ldrh	r0, [r5, #30]
 8003860:	0441      	lsls	r1, r0, #17
 8003862:	d00b      	beq.n	800387c <PE_StateMachine_VDMCable+0xdc>
 8003864:	2008      	movs	r0, #8
 8003866:	7468      	strb	r0, [r5, #17]
 8003868:	8be9      	ldrh	r1, [r5, #30]
 800386a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800386e:	292d      	cmp	r1, #45	; 0x2d
 8003870:	bf2e      	itee	cs
 8003872:	262d      	movcs	r6, #45	; 0x2d
 8003874:	8bee      	ldrhcc	r6, [r5, #30]
 8003876:	f3c6 060e 	ubfxcc	r6, r6, #0, #15
 800387a:	e093      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800387c:	2007      	movs	r0, #7
 800387e:	7468      	strb	r0, [r5, #17]
 8003880:	e090      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003882:	2001      	movs	r0, #1
 8003884:	f7fd f8c6 	bl	8000a14 <PE_Convert_SOPRxEvent>
 8003888:	f898 2000 	ldrb.w	r2, [r8]
 800388c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800388e:	4282      	cmp	r2, r0
 8003890:	d142      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003892:	0bc8      	lsrs	r0, r1, #15
 8003894:	d140      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003896:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800389a:	2800      	cmp	r0, #0
 800389c:	d03c      	beq.n	8003918 <PE_StateMachine_VDMCable+0x178>
 800389e:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80038a2:	f000 001f 	and.w	r0, r0, #31
 80038a6:	280f      	cmp	r0, #15
 80038a8:	d136      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 80038aa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80038ac:	7887      	ldrb	r7, [r0, #2]
 80038ae:	f007 011f 	and.w	r1, r7, #31
 80038b2:	2901      	cmp	r1, #1
 80038b4:	d12b      	bne.n	800390e <PE_StateMachine_VDMCable+0x16e>
 80038b6:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038ba:	b340      	cbz	r0, 800390e <PE_StateMachine_VDMCable+0x16e>
 80038bc:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80038be:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 f9b9 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80038c8:	68e9      	ldr	r1, [r5, #12]
 80038ca:	6948      	ldr	r0, [r1, #20]
 80038cc:	b1e8      	cbz	r0, 800390a <PE_StateMachine_VDMCable+0x16a>
 80038ce:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038d2:	2801      	cmp	r0, #1
 80038d4:	d119      	bne.n	800390a <PE_StateMachine_VDMCable+0x16a>
 80038d6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80038d8:	1d81      	adds	r1, r0, #6
 80038da:	7c28      	ldrb	r0, [r5, #16]
 80038dc:	aa03      	add	r2, sp, #12
 80038de:	f001 fa25 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80038e2:	b970      	cbnz	r0, 8003902 <PE_StateMachine_VDMCable+0x162>
 80038e4:	68ee      	ldr	r6, [r5, #12]
 80038e6:	7c28      	ldrb	r0, [r5, #16]
 80038e8:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80038ec:	6977      	ldr	r7, [r6, #20]
 80038ee:	ab03      	add	r3, sp, #12
 80038f0:	2101      	movs	r1, #1
 80038f2:	47b8      	blx	r7
 80038f4:	7c28      	ldrb	r0, [r5, #16]
 80038f6:	2152      	movs	r1, #82	; 0x52
 80038f8:	f7fc fe2d 	bl	8000556 <USBPD_PE_Notification>
 80038fc:	2014      	movs	r0, #20
 80038fe:	74a0      	strb	r0, [r4, #18]
 8003900:	e003      	b.n	800390a <PE_StateMachine_VDMCable+0x16a>
 8003902:	7c28      	ldrb	r0, [r5, #16]
 8003904:	211b      	movs	r1, #27
 8003906:	f7fc fe26 	bl	8000556 <USBPD_PE_Notification>
 800390a:	f000 f85a 	bl	80039c2 <.text_5>
 800390e:	f898 0000 	ldrb.w	r0, [r8]
 8003912:	2814      	cmp	r0, #20
 8003914:	d10e      	bne.n	8003934 <PE_StateMachine_VDMCable+0x194>
 8003916:	e045      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003918:	f001 011f 	and.w	r1, r1, #31
 800391c:	2910      	cmp	r1, #16
 800391e:	d110      	bne.n	8003942 <PE_StateMachine_VDMCable+0x1a2>
 8003920:	f000 f84f 	bl	80039c2 <.text_5>
 8003924:	2159      	movs	r1, #89	; 0x59
 8003926:	7c28      	ldrb	r0, [r5, #16]
 8003928:	f7fc fe15 	bl	8000556 <USBPD_PE_Notification>
 800392c:	f898 0000 	ldrb.w	r0, [r8]
 8003930:	2814      	cmp	r0, #20
 8003932:	d037      	beq.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003934:	2114      	movs	r1, #20
 8003936:	f888 1000 	strb.w	r1, [r8]
 800393a:	4628      	mov	r0, r5
 800393c:	f7fd f836 	bl	80009ac <PE_Clear_RxEvent>
 8003940:	e030      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003942:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8003944:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003948:	d12c      	bne.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800394a:	2100      	movs	r1, #0
 800394c:	8469      	strh	r1, [r5, #34]	; 0x22
 800394e:	f000 f832 	bl	80039b6 <.text_4>
 8003952:	d108      	bne.n	8003966 <PE_StateMachine_VDMCable+0x1c6>
 8003954:	68e8      	ldr	r0, [r5, #12]
 8003956:	6944      	ldr	r4, [r0, #20]
 8003958:	b10c      	cbz	r4, 800395e <PE_StateMachine_VDMCable+0x1be>
 800395a:	f000 f827 	bl	80039ac <.text_3>
 800395e:	2003      	movs	r0, #3
 8003960:	7468      	strb	r0, [r5, #17]
 8003962:	2600      	movs	r6, #0
 8003964:	e01e      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003966:	6868      	ldr	r0, [r5, #4]
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f3c1 6081 	ubfx	r0, r1, #26, #2
 800396e:	2802      	cmp	r0, #2
 8003970:	d10e      	bne.n	8003990 <PE_StateMachine_VDMCable+0x1f0>
 8003972:	6869      	ldr	r1, [r5, #4]
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	2001      	movs	r0, #1
 8003978:	f360 629b 	bfi	r2, r0, #26, #2
 800397c:	600a      	str	r2, [r1, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	7c28      	ldrb	r0, [r5, #16]
 8003982:	f001 fb3f 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003986:	846f      	strh	r7, [r5, #34]	; 0x22
 8003988:	2008      	movs	r0, #8
 800398a:	262d      	movs	r6, #45	; 0x2d
 800398c:	7468      	strb	r0, [r5, #17]
 800398e:	e007      	b.n	80039a0 <PE_StateMachine_VDMCable+0x200>
 8003990:	68e8      	ldr	r0, [r5, #12]
 8003992:	6944      	ldr	r4, [r0, #20]
 8003994:	b10c      	cbz	r4, 800399a <PE_StateMachine_VDMCable+0x1fa>
 8003996:	f000 f809 	bl	80039ac <.text_3>
 800399a:	2007      	movs	r0, #7
 800399c:	7468      	strb	r0, [r5, #17]
 800399e:	2600      	movs	r6, #0
 80039a0:	2000      	movs	r0, #0
 80039a2:	7728      	strb	r0, [r5, #28]
 80039a4:	4630      	mov	r0, r6
 80039a6:	b00c      	add	sp, #48	; 0x30
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039ac <.text_3>:
 80039ac:	7c28      	ldrb	r0, [r5, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	2204      	movs	r2, #4
 80039b2:	2101      	movs	r1, #1

080039b4 <__iar_annotation$$tailcall>:
 80039b4:	4720      	bx	r4

080039b6 <.text_4>:
 80039b6:	6868      	ldr	r0, [r5, #4]
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039be:	2803      	cmp	r0, #3
 80039c0:	4770      	bx	lr

080039c2 <.text_5>:
 80039c2:	2000      	movs	r0, #0
 80039c4:	8468      	strh	r0, [r5, #34]	; 0x22
 80039c6:	6868      	ldr	r0, [r5, #4]
 80039c8:	6801      	ldr	r1, [r0, #0]
 80039ca:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039ce:	2803      	cmp	r0, #3
 80039d0:	d102      	bne.n	80039d8 <.text_5+0x16>
 80039d2:	7468      	strb	r0, [r5, #17]
 80039d4:	2600      	movs	r6, #0
 80039d6:	4770      	bx	lr
 80039d8:	2007      	movs	r0, #7
 80039da:	2600      	movs	r6, #0
 80039dc:	7468      	strb	r0, [r5, #17]
 80039de:	772e      	strb	r6, [r5, #28]
 80039e0:	4770      	bx	lr

080039e2 <PE_SubStateMachine_VconnSwap>:
 80039e2:	b538      	push	{r3, r4, r5, lr}
 80039e4:	4604      	mov	r4, r0
 80039e6:	2502      	movs	r5, #2
 80039e8:	7c60      	ldrb	r0, [r4, #17]
 80039ea:	289d      	cmp	r0, #157	; 0x9d
 80039ec:	d010      	beq.n	8003a10 <PE_SubStateMachine_VconnSwap+0x2e>
 80039ee:	d30e      	bcc.n	8003a0e <PE_SubStateMachine_VconnSwap+0x2c>
 80039f0:	289f      	cmp	r0, #159	; 0x9f
 80039f2:	d054      	beq.n	8003a9e <PE_SubStateMachine_VconnSwap+0xbc>
 80039f4:	d33b      	bcc.n	8003a6e <PE_SubStateMachine_VconnSwap+0x8c>
 80039f6:	28a1      	cmp	r0, #161	; 0xa1
 80039f8:	f000 807e 	beq.w	8003af8 <PE_SubStateMachine_VconnSwap+0x116>
 80039fc:	d370      	bcc.n	8003ae0 <PE_SubStateMachine_VconnSwap+0xfe>
 80039fe:	28a3      	cmp	r0, #163	; 0xa3
 8003a00:	f000 809a 	beq.w	8003b38 <PE_SubStateMachine_VconnSwap+0x156>
 8003a04:	f0c0 8086 	bcc.w	8003b14 <PE_SubStateMachine_VconnSwap+0x132>
 8003a08:	28a4      	cmp	r0, #164	; 0xa4
 8003a0a:	f000 80ee 	beq.w	8003bea <PE_SubStateMachine_VconnSwap+0x208>
 8003a0e:	e0f8      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a10:	6861      	ldr	r1, [r4, #4]
 8003a12:	6808      	ldr	r0, [r1, #0]
 8003a14:	f400 50b8 	and.w	r0, r0, #5888	; 0x1700
 8003a18:	f5b0 5f98 	cmp.w	r0, #4864	; 0x1300
 8003a1c:	d11f      	bne.n	8003a5e <PE_SubStateMachine_VconnSwap+0x7c>
 8003a1e:	68a1      	ldr	r1, [r4, #8]
 8003a20:	7c20      	ldrb	r0, [r4, #16]
 8003a22:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003a24:	4790      	blx	r2
 8003a26:	280a      	cmp	r0, #10
 8003a28:	d002      	beq.n	8003a30 <PE_SubStateMachine_VconnSwap+0x4e>
 8003a2a:	280d      	cmp	r0, #13
 8003a2c:	d007      	beq.n	8003a3e <PE_SubStateMachine_VconnSwap+0x5c>
 8003a2e:	e00d      	b.n	8003a4c <PE_SubStateMachine_VconnSwap+0x6a>
 8003a30:	6961      	ldr	r1, [r4, #20]
 8003a32:	209e      	movs	r0, #158	; 0x9e
 8003a34:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003a38:	7460      	strb	r0, [r4, #17]
 8003a3a:	6161      	str	r1, [r4, #20]
 8003a3c:	e0e1      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	9000      	str	r0, [sp, #0]
 8003a42:	2303      	movs	r3, #3
 8003a44:	220c      	movs	r2, #12
 8003a46:	f000 f8f4 	bl	8003c32 <.text_10>
 8003a4a:	e0da      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	9000      	str	r0, [sp, #0]
 8003a50:	2303      	movs	r3, #3
 8003a52:	2204      	movs	r2, #4
 8003a54:	f000 f8ed 	bl	8003c32 <.text_10>
 8003a58:	2003      	movs	r0, #3
 8003a5a:	7460      	strb	r0, [r4, #17]
 8003a5c:	e005      	b.n	8003a6a <PE_SubStateMachine_VconnSwap+0x88>
 8003a5e:	6960      	ldr	r0, [r4, #20]
 8003a60:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003a64:	2103      	movs	r1, #3
 8003a66:	6160      	str	r0, [r4, #20]
 8003a68:	7461      	strb	r1, [r4, #17]
 8003a6a:	2500      	movs	r5, #0
 8003a6c:	e0c9      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	239e      	movs	r3, #158	; 0x9e
 8003a74:	2203      	movs	r2, #3
 8003a76:	f000 f8dc 	bl	8003c32 <.text_10>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d1f6      	bne.n	8003a6c <PE_SubStateMachine_VconnSwap+0x8a>
 8003a7e:	6860      	ldr	r0, [r4, #4]
 8003a80:	6801      	ldr	r1, [r0, #0]
 8003a82:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003a86:	b130      	cbz	r0, 8003a96 <PE_SubStateMachine_VconnSwap+0xb4>
 8003a88:	209f      	movs	r0, #159	; 0x9f
 8003a8a:	7460      	strb	r0, [r4, #17]
 8003a8c:	f248 0196 	movw	r1, #32918	; 0x8096
 8003a90:	83e1      	strh	r1, [r4, #30]
 8003a92:	2596      	movs	r5, #150	; 0x96
 8003a94:	e001      	b.n	8003a9a <PE_SubStateMachine_VconnSwap+0xb8>
 8003a96:	20a0      	movs	r0, #160	; 0xa0
 8003a98:	7460      	strb	r0, [r4, #17]
 8003a9a:	213f      	movs	r1, #63	; 0x3f
 8003a9c:	e0a1      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003a9e:	8be0      	ldrh	r0, [r4, #30]
 8003aa0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003aa4:	f000 8095 	beq.w	8003bd2 <PE_SubStateMachine_VconnSwap+0x1f0>
 8003aa8:	780a      	ldrb	r2, [r1, #0]
 8003aaa:	2a11      	cmp	r2, #17
 8003aac:	bf01      	itttt	eq
 8003aae:	8ea2      	ldrheq	r2, [r4, #52]	; 0x34
 8003ab0:	f24f 001f 	movweq	r0, #61471	; 0xf01f
 8003ab4:	4002      	andeq	r2, r0
 8003ab6:	2a06      	cmpeq	r2, #6
 8003ab8:	d111      	bne.n	8003ade <PE_SubStateMachine_VconnSwap+0xfc>
 8003aba:	f000 f8ab 	bl	8003c14 <.text_8>
 8003abe:	68a0      	ldr	r0, [r4, #8]
 8003ac0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ac2:	b112      	cbz	r2, 8003aca <PE_SubStateMachine_VconnSwap+0xe8>
 8003ac4:	7c20      	ldrb	r0, [r4, #16]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4790      	blx	r2
 8003aca:	f000 f89c 	bl	8003c06 <.text_7>
 8003ace:	2142      	movs	r1, #66	; 0x42
 8003ad0:	7c20      	ldrb	r0, [r4, #16]
 8003ad2:	f7fc fd40 	bl	8000556 <USBPD_PE_Notification>
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	8465      	strh	r5, [r4, #34]	; 0x22
 8003ada:	f884 5262 	strb.w	r5, [r4, #610]	; 0x262
 8003ade:	e090      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003ae0:	68a0      	ldr	r0, [r4, #8]
 8003ae2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ae4:	b112      	cbz	r2, 8003aec <PE_SubStateMachine_VconnSwap+0x10a>
 8003ae6:	7c20      	ldrb	r0, [r4, #16]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4790      	blx	r2
 8003aec:	20a1      	movs	r0, #161	; 0xa1
 8003aee:	2100      	movs	r1, #0
 8003af0:	7460      	strb	r0, [r4, #17]
 8003af2:	f884 1262 	strb.w	r1, [r4, #610]	; 0x262
 8003af6:	e084      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003af8:	2000      	movs	r0, #0
 8003afa:	9000      	str	r0, [sp, #0]
 8003afc:	2303      	movs	r3, #3
 8003afe:	2206      	movs	r2, #6
 8003b00:	f000 f897 	bl	8003c32 <.text_10>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d17c      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b08:	6960      	ldr	r0, [r4, #20]
 8003b0a:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003b0e:	6160      	str	r0, [r4, #20]
 8003b10:	2142      	movs	r1, #66	; 0x42
 8003b12:	e066      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b14:	2000      	movs	r0, #0
 8003b16:	9000      	str	r0, [sp, #0]
 8003b18:	23a3      	movs	r3, #163	; 0xa3
 8003b1a:	220b      	movs	r2, #11
 8003b1c:	f000 f889 	bl	8003c32 <.text_10>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d16e      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b24:	6960      	ldr	r0, [r4, #20]
 8003b26:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8003b2a:	6160      	str	r0, [r4, #20]
 8003b2c:	f248 011b 	movw	r1, #32795	; 0x801b
 8003b30:	83e1      	strh	r1, [r4, #30]
 8003b32:	251b      	movs	r5, #27
 8003b34:	213e      	movs	r1, #62	; 0x3e
 8003b36:	e054      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b38:	7808      	ldrb	r0, [r1, #0]
 8003b3a:	2811      	cmp	r0, #17
 8003b3c:	bf04      	itt	eq
 8003b3e:	8ea0      	ldrheq	r0, [r4, #52]	; 0x34
 8003b40:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8003b44:	d141      	bne.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b46:	f000 001f 	and.w	r0, r0, #31
 8003b4a:	2803      	cmp	r0, #3
 8003b4c:	d006      	beq.n	8003b5c <PE_SubStateMachine_VconnSwap+0x17a>
 8003b4e:	2804      	cmp	r0, #4
 8003b50:	d01c      	beq.n	8003b8c <PE_SubStateMachine_VconnSwap+0x1aa>
 8003b52:	280c      	cmp	r0, #12
 8003b54:	d013      	beq.n	8003b7e <PE_SubStateMachine_VconnSwap+0x19c>
 8003b56:	2810      	cmp	r0, #16
 8003b58:	d01f      	beq.n	8003b9a <PE_SubStateMachine_VconnSwap+0x1b8>
 8003b5a:	e036      	b.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b5c:	6860      	ldr	r0, [r4, #4]
 8003b5e:	6802      	ldr	r2, [r0, #0]
 8003b60:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003b64:	2800      	cmp	r0, #0
 8003b66:	bf19      	ittee	ne
 8003b68:	209f      	movne	r0, #159	; 0x9f
 8003b6a:	7460      	strbne	r0, [r4, #17]
 8003b6c:	22a0      	moveq	r2, #160	; 0xa0
 8003b6e:	7462      	strbeq	r2, [r4, #17]
 8003b70:	7808      	ldrb	r0, [r1, #0]
 8003b72:	2814      	cmp	r0, #20
 8003b74:	d001      	beq.n	8003b7a <PE_SubStateMachine_VconnSwap+0x198>
 8003b76:	f000 f84d 	bl	8003c14 <.text_8>
 8003b7a:	213f      	movs	r1, #63	; 0x3f
 8003b7c:	e022      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b7e:	f000 f84e 	bl	8003c1e <.text_9>
 8003b82:	d001      	beq.n	8003b88 <PE_SubStateMachine_VconnSwap+0x1a6>
 8003b84:	f000 f846 	bl	8003c14 <.text_8>
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	e01b      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b8c:	f000 f847 	bl	8003c1e <.text_9>
 8003b90:	d001      	beq.n	8003b96 <PE_SubStateMachine_VconnSwap+0x1b4>
 8003b92:	f000 f83f 	bl	8003c14 <.text_8>
 8003b96:	2141      	movs	r1, #65	; 0x41
 8003b98:	e014      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b9a:	6860      	ldr	r0, [r4, #4]
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003ba2:	b910      	cbnz	r0, 8003baa <PE_SubStateMachine_VconnSwap+0x1c8>
 8003ba4:	20a4      	movs	r0, #164	; 0xa4
 8003ba6:	7460      	strb	r0, [r4, #17]
 8003ba8:	e006      	b.n	8003bb8 <PE_SubStateMachine_VconnSwap+0x1d6>
 8003baa:	6960      	ldr	r0, [r4, #20]
 8003bac:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	6160      	str	r0, [r4, #20]
 8003bb4:	7462      	strb	r2, [r4, #17]
 8003bb6:	2500      	movs	r5, #0
 8003bb8:	7808      	ldrb	r0, [r1, #0]
 8003bba:	2814      	cmp	r0, #20
 8003bbc:	d001      	beq.n	8003bc2 <PE_SubStateMachine_VconnSwap+0x1e0>
 8003bbe:	f000 f829 	bl	8003c14 <.text_8>
 8003bc2:	2143      	movs	r1, #67	; 0x43
 8003bc4:	7c20      	ldrb	r0, [r4, #16]
 8003bc6:	f7fc fcc6 	bl	8000556 <USBPD_PE_Notification>
 8003bca:	8be0      	ldrh	r0, [r4, #30]
 8003bcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003bd0:	d117      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bd2:	6960      	ldr	r0, [r4, #20]
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	7461      	strb	r1, [r4, #17]
 8003bd8:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003bdc:	6160      	str	r0, [r4, #20]
 8003bde:	2500      	movs	r5, #0
 8003be0:	211c      	movs	r1, #28
 8003be2:	7c20      	ldrb	r0, [r4, #16]
 8003be4:	f7fc fcb7 	bl	8000556 <USBPD_PE_Notification>
 8003be8:	e00b      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bea:	68a0      	ldr	r0, [r4, #8]
 8003bec:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003bee:	b112      	cbz	r2, 8003bf6 <PE_SubStateMachine_VconnSwap+0x214>
 8003bf0:	7c20      	ldrb	r0, [r4, #16]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4790      	blx	r2
 8003bf6:	f000 f806 	bl	8003c06 <.text_7>
 8003bfa:	f248 002d 	movw	r0, #32813	; 0x802d
 8003bfe:	2500      	movs	r5, #0
 8003c00:	8460      	strh	r0, [r4, #34]	; 0x22
 8003c02:	4628      	mov	r0, r5
 8003c04:	bd32      	pop	{r1, r4, r5, pc}

08003c06 <.text_7>:
 8003c06:	6960      	ldr	r0, [r4, #20]
 8003c08:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003c0c:	6160      	str	r0, [r4, #20]
 8003c0e:	2103      	movs	r1, #3
 8003c10:	7461      	strb	r1, [r4, #17]
 8003c12:	4770      	bx	lr

08003c14 <.text_8>:
 8003c14:	2214      	movs	r2, #20
 8003c16:	700a      	strb	r2, [r1, #0]
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7fc bec7 	b.w	80009ac <PE_Clear_RxEvent>

08003c1e <.text_9>:
 8003c1e:	6960      	ldr	r0, [r4, #20]
 8003c20:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003c24:	6160      	str	r0, [r4, #20]
 8003c26:	2203      	movs	r2, #3
 8003c28:	7462      	strb	r2, [r4, #17]
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	7808      	ldrb	r0, [r1, #0]
 8003c2e:	2814      	cmp	r0, #20
 8003c30:	4770      	bx	lr

08003c32 <.text_10>:
 8003c32:	2100      	movs	r1, #0
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7fd bc17 	b.w	8001468 <PE_Send_CtrlMessage>

08003c3a <PE_ExtRevisionInteroperability_Cable>:
 8003c3a:	6842      	ldr	r2, [r0, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	f002 0303 	and.w	r3, r2, #3
 8003c42:	4299      	cmp	r1, r3
 8003c44:	bf28      	it	cs
 8003c46:	4619      	movcs	r1, r3
 8003c48:	f361 629b 	bfi	r2, r1, #26, #2
 8003c4c:	6841      	ldr	r1, [r0, #4]
 8003c4e:	600a      	str	r2, [r1, #0]
 8003c50:	f3c2 6181 	ubfx	r1, r2, #26, #2
 8003c54:	7c00      	ldrb	r0, [r0, #16]
 8003c56:	f001 b9d5 	b.w	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
	...

08003c5c <USBPD_PE_SVDM_RequestIdentity>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4ab4      	ldr	r2, [pc, #720]	; (8003f30 <.text_16>)
 8003c60:	4603      	mov	r3, r0
 8003c62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	685d      	ldr	r5, [r3, #4]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	f3c5 2340 	ubfx	r3, r5, #9, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf1e      	ittt	ne
 8003c74:	68e3      	ldrne	r3, [r4, #12]
 8003c76:	2b00      	cmpne	r3, #0
 8003c78:	2902      	cmpne	r1, #2
 8003c7a:	d101      	bne.n	8003c80 <USBPD_PE_SVDM_RequestIdentity+0x24>
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	e027      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c80:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003c84:	782b      	ldrb	r3, [r5, #0]
 8003c86:	b913      	cbnz	r3, 8003c8e <USBPD_PE_SVDM_RequestIdentity+0x32>
 8003c88:	f000 f849 	bl	8003d1e <.text_4>
 8003c8c:	b90b      	cbnz	r3, 8003c92 <USBPD_PE_SVDM_RequestIdentity+0x36>
 8003c8e:	2203      	movs	r2, #3
 8003c90:	e01e      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c92:	7069      	strb	r1, [r5, #1]
 8003c94:	b111      	cbz	r1, 8003c9c <USBPD_PE_SVDM_RequestIdentity+0x40>
 8003c96:	2901      	cmp	r1, #1
 8003c98:	d008      	beq.n	8003cac <USBPD_PE_SVDM_RequestIdentity+0x50>
 8003c9a:	e019      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c9c:	6861      	ldr	r1, [r4, #4]
 8003c9e:	680b      	ldr	r3, [r1, #0]
 8003ca0:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8003ca4:	2903      	cmp	r1, #3
 8003ca6:	d113      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003ca8:	217d      	movs	r1, #125	; 0x7d
 8003caa:	e00c      	b.n	8003cc6 <USBPD_PE_SVDM_RequestIdentity+0x6a>
 8003cac:	6861      	ldr	r1, [r4, #4]
 8003cae:	6809      	ldr	r1, [r1, #0]
 8003cb0:	f240 7304 	movw	r3, #1796	; 0x704
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cba:	bf1c      	itt	ne
 8003cbc:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 8003cc0:	2903      	cmpne	r1, #3
 8003cc2:	d105      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003cc4:	2105      	movs	r1, #5
 8003cc6:	7029      	strb	r1, [r5, #0]
 8003cc8:	68a2      	ldr	r2, [r4, #8]
 8003cca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ccc:	4788      	blx	r1
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}

08003cd4 <USBPD_PE_SVDM_RequestSVID>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	f000 f923 	bl	8003f20 <.text_15>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2902      	cmpne	r1, #2
 8003ce0:	2202      	moveq	r2, #2
 8003ce2:	d01a      	beq.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003ce4:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003ce8:	782b      	ldrb	r3, [r5, #0]
 8003cea:	b913      	cbnz	r3, 8003cf2 <USBPD_PE_SVDM_RequestSVID+0x1e>
 8003cec:	f000 f817 	bl	8003d1e <.text_4>
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <USBPD_PE_SVDM_RequestSVID+0x22>
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	e011      	b.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cf6:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d10d      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cfe:	237f      	movs	r3, #127	; 0x7f
 8003d00:	7069      	strb	r1, [r5, #1]
 8003d02:	702b      	strb	r3, [r5, #0]
 8003d04:	b129      	cbz	r1, 8003d12 <USBPD_PE_SVDM_RequestSVID+0x3e>
 8003d06:	2901      	cmp	r1, #1
 8003d08:	d107      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d0a:	6961      	ldr	r1, [r4, #20]
 8003d0c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d10:	b119      	cbz	r1, 8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d12:	68a1      	ldr	r1, [r4, #8]
 8003d14:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d16:	4790      	blx	r2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}

08003d1e <.text_4>:
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	681e      	ldr	r6, [r3, #0]
 8003d22:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8003d26:	4770      	bx	lr

08003d28 <USBPD_PE_SVDM_RequestMode>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	f000 f8d3 	bl	8003ed4 <.text_13>
 8003d2e:	68ec      	ldr	r4, [r5, #12]
 8003d30:	2310      	movs	r3, #16
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2902      	cmpne	r1, #2
 8003d38:	2302      	moveq	r3, #2
 8003d3a:	d01e      	beq.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d3c:	f105 0632 	add.w	r6, r5, #50	; 0x32
 8003d40:	7834      	ldrb	r4, [r6, #0]
 8003d42:	b924      	cbnz	r4, 8003d4e <USBPD_PE_SVDM_RequestMode+0x26>
 8003d44:	686c      	ldr	r4, [r5, #4]
 8003d46:	6827      	ldr	r7, [r4, #0]
 8003d48:	f3c7 3400 	ubfx	r4, r7, #12, #1
 8003d4c:	b90c      	cbnz	r4, 8003d52 <USBPD_PE_SVDM_RequestMode+0x2a>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e013      	b.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d52:	f3c7 2402 	ubfx	r4, r7, #8, #3
 8003d56:	2c03      	cmp	r4, #3
 8003d58:	d10f      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d5a:	2481      	movs	r4, #129	; 0x81
 8003d5c:	7071      	strb	r1, [r6, #1]
 8003d5e:	7034      	strb	r4, [r6, #0]
 8003d60:	f8a5 2258 	strh.w	r2, [r5, #600]	; 0x258
 8003d64:	b129      	cbz	r1, 8003d72 <USBPD_PE_SVDM_RequestMode+0x4a>
 8003d66:	2901      	cmp	r1, #1
 8003d68:	d107      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d6a:	6969      	ldr	r1, [r5, #20]
 8003d6c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d70:	b119      	cbz	r1, 8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d72:	68a9      	ldr	r1, [r5, #8]
 8003d74:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d76:	4790      	blx	r2
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003d7e <USBPD_PE_SVDM_RequestModeEnter>:
 8003d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d80:	f000 f854 	bl	8003e2c <.text_10>
 8003d84:	b90d      	cbnz	r5, 8003d8a <USBPD_PE_SVDM_RequestModeEnter+0xc>
 8003d86:	2402      	movs	r4, #2
 8003d88:	e01b      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d8a:	f106 0732 	add.w	r7, r6, #50	; 0x32
 8003d8e:	783d      	ldrb	r5, [r7, #0]
 8003d90:	b915      	cbnz	r5, 8003d98 <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8003d92:	f000 f845 	bl	8003e20 <.text_9>
 8003d96:	b90d      	cbnz	r5, 8003d9c <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 8003d98:	2403      	movs	r4, #3
 8003d9a:	e012      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d9c:	f40c 65e1 	and.w	r5, ip, #1800	; 0x708
 8003da0:	f5b5 7f42 	cmp.w	r5, #776	; 0x308
 8003da4:	d10d      	bne.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003da6:	2582      	movs	r5, #130	; 0x82
 8003da8:	f000 f831 	bl	8003e0e <.text_8>
 8003dac:	b129      	cbz	r1, 8003dba <USBPD_PE_SVDM_RequestModeEnter+0x3c>
 8003dae:	2902      	cmp	r1, #2
 8003db0:	d000      	beq.n	8003db4 <USBPD_PE_SVDM_RequestModeEnter+0x36>
 8003db2:	d206      	bcs.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003db4:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003db8:	b119      	cbz	r1, 8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003dba:	68b1      	ldr	r1, [r6, #8]
 8003dbc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003dbe:	4790      	blx	r2
 8003dc0:	2400      	movs	r4, #0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003dc6 <USBPD_PE_SVDM_RequestModeExit>:
 8003dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc8:	f000 f830 	bl	8003e2c <.text_10>
 8003dcc:	b90d      	cbnz	r5, 8003dd2 <USBPD_PE_SVDM_RequestModeExit+0xc>
 8003dce:	2402      	movs	r4, #2
 8003dd0:	e01b      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dd2:	f106 0732 	add.w	r7, r6, #50	; 0x32
 8003dd6:	783d      	ldrb	r5, [r7, #0]
 8003dd8:	b915      	cbnz	r5, 8003de0 <USBPD_PE_SVDM_RequestModeExit+0x1a>
 8003dda:	f000 f821 	bl	8003e20 <.text_9>
 8003dde:	b90d      	cbnz	r5, 8003de4 <USBPD_PE_SVDM_RequestModeExit+0x1e>
 8003de0:	2403      	movs	r4, #3
 8003de2:	e012      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003de4:	f40c 65e1 	and.w	r5, ip, #1800	; 0x708
 8003de8:	f5b5 7f42 	cmp.w	r5, #776	; 0x308
 8003dec:	d10d      	bne.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dee:	2583      	movs	r5, #131	; 0x83
 8003df0:	f000 f80d 	bl	8003e0e <.text_8>
 8003df4:	b129      	cbz	r1, 8003e02 <USBPD_PE_SVDM_RequestModeExit+0x3c>
 8003df6:	2902      	cmp	r1, #2
 8003df8:	d000      	beq.n	8003dfc <USBPD_PE_SVDM_RequestModeExit+0x36>
 8003dfa:	d206      	bcs.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dfc:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003e00:	b119      	cbz	r1, 8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003e02:	68b1      	ldr	r1, [r6, #8]
 8003e04:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e06:	4790      	blx	r2
 8003e08:	2400      	movs	r4, #0
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e0e <.text_8>:
 8003e0e:	7079      	strb	r1, [r7, #1]
 8003e10:	703d      	strb	r5, [r7, #0]
 8003e12:	f8a6 2258 	strh.w	r2, [r6, #600]	; 0x258
 8003e16:	6972      	ldr	r2, [r6, #20]
 8003e18:	f363 1288 	bfi	r2, r3, #6, #3
 8003e1c:	6172      	str	r2, [r6, #20]
 8003e1e:	4770      	bx	lr

08003e20 <.text_9>:
 8003e20:	6875      	ldr	r5, [r6, #4]
 8003e22:	f8d5 c000 	ldr.w	ip, [r5]
 8003e26:	f3cc 3500 	ubfx	r5, ip, #12, #1
 8003e2a:	4770      	bx	lr

08003e2c <.text_10>:
 8003e2c:	4c40      	ldr	r4, [pc, #256]	; (8003f30 <.text_16>)
 8003e2e:	4605      	mov	r5, r0
 8003e30:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8003e34:	68f5      	ldr	r5, [r6, #12]
 8003e36:	2410      	movs	r4, #16
 8003e38:	4770      	bx	lr

08003e3a <USBPD_PE_SVDM_RequestSpecific>:
 8003e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3c:	f7ff fff6 	bl	8003e2c <.text_10>
 8003e40:	b90d      	cbnz	r5, 8003e46 <USBPD_PE_SVDM_RequestSpecific+0xc>
 8003e42:	2402      	movs	r4, #2
 8003e44:	e01d      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e46:	f106 0732 	add.w	r7, r6, #50	; 0x32
 8003e4a:	783d      	ldrb	r5, [r7, #0]
 8003e4c:	b915      	cbnz	r5, 8003e54 <USBPD_PE_SVDM_RequestSpecific+0x1a>
 8003e4e:	f7ff ffe7 	bl	8003e20 <.text_9>
 8003e52:	b90d      	cbnz	r5, 8003e58 <USBPD_PE_SVDM_RequestSpecific+0x1e>
 8003e54:	2403      	movs	r4, #3
 8003e56:	e014      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e58:	6975      	ldr	r5, [r6, #20]
 8003e5a:	f3c5 4500 	ubfx	r5, r5, #16, #1
 8003e5e:	b90d      	cbnz	r5, 8003e64 <USBPD_PE_SVDM_RequestSpecific+0x2a>
 8003e60:	000d      	movs	r5, r1
 8003e62:	d10e      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e64:	f3cc 2502 	ubfx	r5, ip, #8, #3
 8003e68:	2d03      	cmp	r5, #3
 8003e6a:	d10a      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e6c:	7079      	strb	r1, [r7, #1]
 8003e6e:	2400      	movs	r4, #0
 8003e70:	2185      	movs	r1, #133	; 0x85
 8003e72:	7039      	strb	r1, [r7, #0]
 8003e74:	f506 7115 	add.w	r1, r6, #596	; 0x254
 8003e78:	600a      	str	r2, [r1, #0]
 8003e7a:	808b      	strh	r3, [r1, #4]
 8003e7c:	68b1      	ldr	r1, [r6, #8]
 8003e7e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e80:	4790      	blx	r2
 8003e82:	4620      	mov	r0, r4
 8003e84:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e86 <USBPD_PE_SVDM_RequestAttention>:
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	f000 f824 	bl	8003ed4 <.text_13>
 8003e8c:	68eb      	ldr	r3, [r5, #12]
 8003e8e:	2410      	movs	r4, #16
 8003e90:	b103      	cbz	r3, 8003e94 <USBPD_PE_SVDM_RequestAttention+0xe>
 8003e92:	b109      	cbz	r1, 8003e98 <USBPD_PE_SVDM_RequestAttention+0x12>
 8003e94:	2402      	movs	r4, #2
 8003e96:	e01b      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003e98:	f105 0332 	add.w	r3, r5, #50	; 0x32
 8003e9c:	7819      	ldrb	r1, [r3, #0]
 8003e9e:	b921      	cbnz	r1, 8003eaa <USBPD_PE_SVDM_RequestAttention+0x24>
 8003ea0:	6869      	ldr	r1, [r5, #4]
 8003ea2:	680e      	ldr	r6, [r1, #0]
 8003ea4:	f3c6 3100 	ubfx	r1, r6, #12, #1
 8003ea8:	b909      	cbnz	r1, 8003eae <USBPD_PE_SVDM_RequestAttention+0x28>
 8003eaa:	2403      	movs	r4, #3
 8003eac:	e010      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eae:	f3c6 2102 	ubfx	r1, r6, #8, #3
 8003eb2:	2903      	cmp	r1, #3
 8003eb4:	d10c      	bne.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	7059      	strb	r1, [r3, #1]
 8003eba:	2484      	movs	r4, #132	; 0x84
 8003ebc:	701c      	strb	r4, [r3, #0]
 8003ebe:	f505 7115 	add.w	r1, r5, #596	; 0x254
 8003ec2:	2306      	movs	r3, #6
 8003ec4:	600b      	str	r3, [r1, #0]
 8003ec6:	808a      	strh	r2, [r1, #4]
 8003ec8:	2400      	movs	r4, #0
 8003eca:	68a9      	ldr	r1, [r5, #8]
 8003ecc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003ece:	4790      	blx	r2
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}

08003ed4 <.text_13>:
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <.text_16>)
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003edc:	4770      	bx	lr

08003ede <USBPD_PE_UVDM_RequestMessage>:
 8003ede:	b570      	push	{r4, r5, r6, lr}
 8003ee0:	f000 f81e 	bl	8003f20 <.text_15>
 8003ee4:	b90b      	cbnz	r3, 8003eea <USBPD_PE_UVDM_RequestMessage+0xc>
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	e018      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003eea:	f104 0532 	add.w	r5, r4, #50	; 0x32
 8003eee:	782b      	ldrb	r3, [r5, #0]
 8003ef0:	b913      	cbnz	r3, 8003ef8 <USBPD_PE_UVDM_RequestMessage+0x1a>
 8003ef2:	f7ff ff14 	bl	8003d1e <.text_4>
 8003ef6:	b90b      	cbnz	r3, 8003efc <USBPD_PE_UVDM_RequestMessage+0x1e>
 8003ef8:	2203      	movs	r2, #3
 8003efa:	e00f      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003efc:	f3c6 33c0 	ubfx	r3, r6, #15, #1
 8003f00:	b90b      	cbnz	r3, 8003f06 <USBPD_PE_UVDM_RequestMessage+0x28>
 8003f02:	000b      	movs	r3, r1
 8003f04:	d10a      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f06:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d106      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f0e:	7069      	strb	r1, [r5, #1]
 8003f10:	2186      	movs	r1, #134	; 0x86
 8003f12:	7029      	strb	r1, [r5, #0]
 8003f14:	68a2      	ldr	r2, [r4, #8]
 8003f16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f18:	4788      	blx	r1
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}

08003f20 <.text_15>:
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <.text_16>)
 8003f22:	4603      	mov	r3, r0
 8003f24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003f28:	68e3      	ldr	r3, [r4, #12]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	4770      	bx	lr
	...

08003f30 <.text_16>:
 8003f30:	200002c8 	.word	0x200002c8

08003f34 <PE_Receive_SVDM>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8003f3c:	f204 4294 	addw	r2, r4, #1172	; 0x494
 8003f40:	8808      	ldrh	r0, [r1, #0]
 8003f42:	0b00      	lsrs	r0, r0, #12
 8003f44:	f000 0007 	and.w	r0, r0, #7
 8003f48:	1e43      	subs	r3, r0, #1
 8003f4a:	7613      	strb	r3, [r2, #24]
 8003f4c:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d16e      	bne.n	8004032 <PE_Receive_SVDM+0xfe>
 8003f54:	e010      	b.n	8003f78 <PE_Receive_SVDM+0x44>
 8003f56:	684b      	ldr	r3, [r1, #4]
 8003f58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003f5c:	799d      	ldrb	r5, [r3, #6]
 8003f5e:	79de      	ldrb	r6, [r3, #7]
 8003f60:	eb05 2706 	add.w	r7, r5, r6, lsl #8
 8003f64:	7a1d      	ldrb	r5, [r3, #8]
 8003f66:	7a5b      	ldrb	r3, [r3, #9]
 8003f68:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8003f6c:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 8003f70:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 8003f74:	1c40      	adds	r0, r0, #1
 8003f76:	b2c0      	uxtb	r0, r0
 8003f78:	7e15      	ldrb	r5, [r2, #24]
 8003f7a:	42a8      	cmp	r0, r5
 8003f7c:	dbeb      	blt.n	8003f56 <PE_Receive_SVDM+0x22>
 8003f7e:	f894 3250 	ldrb.w	r3, [r4, #592]	; 0x250
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	1e5b      	subs	r3, r3, #1
 8003f88:	f248 0119 	movw	r1, #32793	; 0x8019
 8003f8c:	f248 000f 	movw	r0, #32783	; 0x800f
 8003f90:	d00d      	beq.n	8003fae <PE_Receive_SVDM+0x7a>
 8003f92:	1e5b      	subs	r3, r3, #1
 8003f94:	d028      	beq.n	8003fe8 <PE_Receive_SVDM+0xb4>
 8003f96:	1e5b      	subs	r3, r3, #1
 8003f98:	d02b      	beq.n	8003ff2 <PE_Receive_SVDM+0xbe>
 8003f9a:	1e5b      	subs	r3, r3, #1
 8003f9c:	d02e      	beq.n	8003ffc <PE_Receive_SVDM+0xc8>
 8003f9e:	1e5b      	subs	r3, r3, #1
 8003fa0:	d031      	beq.n	8004006 <PE_Receive_SVDM+0xd2>
 8003fa2:	1e5b      	subs	r3, r3, #1
 8003fa4:	d034      	beq.n	8004010 <PE_Receive_SVDM+0xdc>
 8003fa6:	3b0a      	subs	r3, #10
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d93d      	bls.n	8004028 <PE_Receive_SVDM+0xf4>
 8003fac:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8003fae:	2150      	movs	r1, #80	; 0x50
 8003fb0:	6862      	ldr	r2, [r4, #4]
 8003fb2:	7721      	strb	r1, [r4, #28]
 8003fb4:	6813      	ldr	r3, [r2, #0]
 8003fb6:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
 8003fba:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fbe:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8003fc2:	4291      	cmp	r1, r2
 8003fc4:	da04      	bge.n	8003fd0 <PE_Receive_SVDM+0x9c>
 8003fc6:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
 8003fca:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fce:	e003      	b.n	8003fd8 <PE_Receive_SVDM+0xa4>
 8003fd0:	6861      	ldr	r1, [r4, #4]
 8003fd2:	680a      	ldr	r2, [r1, #0]
 8003fd4:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8003fd8:	6862      	ldr	r2, [r4, #4]
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	f361 1345 	bfi	r3, r1, #5, #1
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	83e0      	strh	r0, [r4, #30]
 8003fe4:	2075      	movs	r0, #117	; 0x75
 8003fe6:	e023      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003fe8:	2152      	movs	r1, #82	; 0x52
 8003fea:	7721      	strb	r1, [r4, #28]
 8003fec:	83e0      	strh	r0, [r4, #30]
 8003fee:	2076      	movs	r0, #118	; 0x76
 8003ff0:	e01e      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ff2:	2153      	movs	r1, #83	; 0x53
 8003ff4:	7721      	strb	r1, [r4, #28]
 8003ff6:	83e0      	strh	r0, [r4, #30]
 8003ff8:	2078      	movs	r0, #120	; 0x78
 8003ffa:	e019      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ffc:	2254      	movs	r2, #84	; 0x54
 8003ffe:	7722      	strb	r2, [r4, #28]
 8004000:	83e1      	strh	r1, [r4, #30]
 8004002:	2079      	movs	r0, #121	; 0x79
 8004004:	e014      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004006:	2255      	movs	r2, #85	; 0x55
 8004008:	7722      	strb	r2, [r4, #28]
 800400a:	83e1      	strh	r1, [r4, #30]
 800400c:	207a      	movs	r0, #122	; 0x7a
 800400e:	e00f      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004010:	68e0      	ldr	r0, [r4, #12]
 8004012:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004014:	b12b      	cbz	r3, 8004022 <PE_Receive_SVDM+0xee>
 8004016:	0029      	movs	r1, r5
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	7c20      	ldrb	r0, [r4, #16]
 800401c:	bf18      	it	ne
 800401e:	2101      	movne	r1, #1
 8004020:	4798      	blx	r3
 8004022:	2103      	movs	r1, #3
 8004024:	7461      	strb	r1, [r4, #17]
 8004026:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8004028:	225a      	movs	r2, #90	; 0x5a
 800402a:	7722      	strb	r2, [r4, #28]
 800402c:	83e0      	strh	r0, [r4, #30]
 800402e:	207b      	movs	r0, #123	; 0x7b
 8004030:	7460      	strb	r0, [r4, #17]
 8004032:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004034 <PE_StateMachine_VDM>:
 8004034:	e92d 47fb 	stmdb	sp!, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4604      	mov	r4, r0
 800403a:	b099      	sub	sp, #100	; 0x64
 800403c:	f894 c011 	ldrb.w	ip, [r4, #17]
 8004040:	f1ac 0075 	sub.w	r0, ip, #117	; 0x75
 8004044:	2807      	cmp	r0, #7
 8004046:	f04f 0802 	mov.w	r8, #2
 800404a:	d203      	bcs.n	8004054 <PE_StateMachine_VDM+0x20>
 800404c:	7809      	ldrb	r1, [r1, #0]
 800404e:	2914      	cmp	r1, #20
 8004050:	f040 84ea 	bne.w	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004054:	2305      	movs	r3, #5
 8004056:	2003      	movs	r0, #3
 8004058:	2204      	movs	r2, #4
 800405a:	f1bc 0f75 	cmp.w	ip, #117	; 0x75
 800405e:	f104 0534 	add.w	r5, r4, #52	; 0x34
 8004062:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8004066:	f504 7614 	add.w	r6, r4, #592	; 0x250
 800406a:	f04f 0a01 	mov.w	sl, #1
 800406e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8004072:	f248 091e 	movw	r9, #32798	; 0x801e
 8004076:	d04c      	beq.n	8004112 <PE_StateMachine_VDM+0xde>
 8004078:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 800407c:	f000 80a4 	beq.w	80041c8 <PE_StateMachine_VDM+0x194>
 8004080:	f1bc 0f77 	cmp.w	ip, #119	; 0x77
 8004084:	f000 811c 	beq.w	80042c0 <PE_StateMachine_VDM+0x28c>
 8004088:	f1bc 0f78 	cmp.w	ip, #120	; 0x78
 800408c:	f000 8172 	beq.w	8004374 <PE_StateMachine_VDM+0x340>
 8004090:	f1bc 0f79 	cmp.w	ip, #121	; 0x79
 8004094:	f000 81b3 	beq.w	80043fe <PE_StateMachine_VDM+0x3ca>
 8004098:	f1bc 0f7a 	cmp.w	ip, #122	; 0x7a
 800409c:	f000 81cf 	beq.w	800443e <PE_StateMachine_VDM+0x40a>
 80040a0:	f1bc 0f7b 	cmp.w	ip, #123	; 0x7b
 80040a4:	f000 81f9 	beq.w	800449a <PE_StateMachine_VDM+0x466>
 80040a8:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80040ac:	f000 8231 	beq.w	8004512 <PE_StateMachine_VDM+0x4de>
 80040b0:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
 80040b4:	f000 8293 	beq.w	80045de <PE_StateMachine_VDM+0x5aa>
 80040b8:	f1bc 0f81 	cmp.w	ip, #129	; 0x81
 80040bc:	f000 82da 	beq.w	8004674 <PE_StateMachine_VDM+0x640>
 80040c0:	f1bc 0f82 	cmp.w	ip, #130	; 0x82
 80040c4:	f000 8331 	beq.w	800472a <PE_StateMachine_VDM+0x6f6>
 80040c8:	f1bc 0f83 	cmp.w	ip, #131	; 0x83
 80040cc:	f000 8393 	beq.w	80047f6 <PE_StateMachine_VDM+0x7c2>
 80040d0:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
 80040d4:	f000 848c 	beq.w	80049f0 <PE_StateMachine_VDM+0x9bc>
 80040d8:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
 80040dc:	f000 83f9 	beq.w	80048d2 <PE_StateMachine_VDM+0x89e>
 80040e0:	f1bc 0f87 	cmp.w	ip, #135	; 0x87
 80040e4:	f000 8241 	beq.w	800456a <PE_StateMachine_VDM+0x536>
 80040e8:	f1bc 0f89 	cmp.w	ip, #137	; 0x89
 80040ec:	f000 828f 	beq.w	800460e <PE_StateMachine_VDM+0x5da>
 80040f0:	f1bc 0f8b 	cmp.w	ip, #139	; 0x8b
 80040f4:	f000 82de 	beq.w	80046b4 <PE_StateMachine_VDM+0x680>
 80040f8:	f1bc 0f8c 	cmp.w	ip, #140	; 0x8c
 80040fc:	f000 832d 	beq.w	800475a <PE_StateMachine_VDM+0x726>
 8004100:	f1bc 0f8d 	cmp.w	ip, #141	; 0x8d
 8004104:	f000 839a 	beq.w	800483c <PE_StateMachine_VDM+0x808>
 8004108:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 800410c:	f000 8403 	beq.w	8004916 <PE_StateMachine_VDM+0x8e2>
 8004110:	e125      	b.n	800435e <PE_StateMachine_VDM+0x32a>
 8004112:	f000 fd12 	bl	8004b3a <.text_34>
 8004116:	f000 8466 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 800411a:	6830      	ldr	r0, [r6, #0]
 800411c:	f36a 0004 	bfi	r0, sl, #0, #5
 8004120:	f000 fcca 	bl	8004ab8 <.text_28+0x4>
 8004124:	f000 fc9e 	bl	8004a64 <.text_25>
 8004128:	bf1f      	itttt	ne
 800412a:	68e0      	ldrne	r0, [r4, #12]
 800412c:	2800      	cmpne	r0, #0
 800412e:	6802      	ldrne	r2, [r0, #0]
 8004130:	2a00      	cmpne	r2, #0
 8004132:	d03d      	beq.n	80041b0 <PE_StateMachine_VDM+0x17c>
 8004134:	0c09      	lsrs	r1, r1, #16
 8004136:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 800413a:	d139      	bne.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800413c:	7c20      	ldrb	r0, [r4, #16]
 800413e:	a908      	add	r1, sp, #32
 8004140:	4790      	blx	r2
 8004142:	2803      	cmp	r0, #3
 8004144:	d002      	beq.n	800414c <PE_StateMachine_VDM+0x118>
 8004146:	280f      	cmp	r0, #15
 8004148:	d003      	beq.n	8004152 <PE_StateMachine_VDM+0x11e>
 800414a:	e031      	b.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800414c:	f000 fce9 	bl	8004b22 <.text_31>
 8004150:	e030      	b.n	80041b4 <PE_StateMachine_VDM+0x180>
 8004152:	f000 fcf7 	bl	8004b44 <.text_35>
 8004156:	a811      	add	r0, sp, #68	; 0x44
 8004158:	9908      	ldr	r1, [sp, #32]
 800415a:	6041      	str	r1, [r0, #4]
 800415c:	2504      	movs	r5, #4
 800415e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004160:	6081      	str	r1, [r0, #8]
 8004162:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004164:	60c1      	str	r1, [r0, #12]
 8004166:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800416a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800416e:	b111      	cbz	r1, 8004176 <PE_StateMachine_VDM+0x142>
 8004170:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004172:	6101      	str	r1, [r0, #16]
 8004174:	2505      	movs	r5, #5
 8004176:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800417a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800417e:	b121      	cbz	r1, 800418a <PE_StateMachine_VDM+0x156>
 8004180:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004182:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8004186:	1c6d      	adds	r5, r5, #1
 8004188:	b2ed      	uxtb	r5, r5
 800418a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800418e:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8004192:	b181      	cbz	r1, 80041b6 <PE_StateMachine_VDM+0x182>
 8004194:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8004198:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800419c:	b119      	cbz	r1, 80041a6 <PE_StateMachine_VDM+0x172>
 800419e:	2100      	movs	r1, #0
 80041a0:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041a4:	1c6d      	adds	r5, r5, #1
 80041a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80041a8:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041ac:	1c6d      	adds	r5, r5, #1
 80041ae:	e002      	b.n	80041b6 <PE_StateMachine_VDM+0x182>
 80041b0:	f000 fcbb 	bl	8004b2a <.text_32>
 80041b4:	6030      	str	r0, [r6, #0]
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	2000      	movs	r0, #0
 80041ba:	2203      	movs	r2, #3
 80041bc:	9111      	str	r1, [sp, #68]	; 0x44
 80041be:	9002      	str	r0, [sp, #8]
 80041c0:	9201      	str	r2, [sp, #4]
 80041c2:	9500      	str	r5, [sp, #0]
 80041c4:	ab11      	add	r3, sp, #68	; 0x44
 80041c6:	e19f      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80041c8:	f000 fcb7 	bl	8004b3a <.text_34>
 80041cc:	d07a      	beq.n	80042c4 <PE_StateMachine_VDM+0x290>
 80041ce:	6830      	ldr	r0, [r6, #0]
 80041d0:	f368 0004 	bfi	r0, r8, #0, #5
 80041d4:	6030      	str	r0, [r6, #0]
 80041d6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80041da:	6030      	str	r0, [r6, #0]
 80041dc:	6860      	ldr	r0, [r4, #4]
 80041de:	6801      	ldr	r1, [r0, #0]
 80041e0:	6830      	ldr	r0, [r6, #0]
 80041e2:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80041e6:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 80041ea:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 80041ee:	6030      	str	r0, [r6, #0]
 80041f0:	6861      	ldr	r1, [r4, #4]
 80041f2:	780a      	ldrb	r2, [r1, #0]
 80041f4:	f002 020b 	and.w	r2, r2, #11
 80041f8:	2a09      	cmp	r2, #9
 80041fa:	bf1e      	ittt	ne
 80041fc:	68e1      	ldrne	r1, [r4, #12]
 80041fe:	684b      	ldrne	r3, [r1, #4]
 8004200:	2b00      	cmpne	r3, #0
 8004202:	d051      	beq.n	80042a8 <PE_StateMachine_VDM+0x274>
 8004204:	0c00      	lsrs	r0, r0, #16
 8004206:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 800420a:	d14d      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800420c:	7c20      	ldrb	r0, [r4, #16]
 800420e:	f204 42ad 	addw	r2, r4, #1197	; 0x4ad
 8004212:	a903      	add	r1, sp, #12
 8004214:	4798      	blx	r3
 8004216:	2803      	cmp	r0, #3
 8004218:	d043      	beq.n	80042a2 <PE_StateMachine_VDM+0x26e>
 800421a:	280f      	cmp	r0, #15
 800421c:	d144      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800421e:	f000 fc91 	bl	8004b44 <.text_35>
 8004222:	211c      	movs	r1, #28
 8004224:	a804      	add	r0, sp, #16
 8004226:	f01b fb05 	bl	801f834 <__aeabi_memclr>
 800422a:	2500      	movs	r5, #0
 800422c:	2300      	movs	r3, #0
 800422e:	f204 42ac 	addw	r2, r4, #1196	; 0x4ac
 8004232:	e01b      	b.n	800426c <PE_StateMachine_VDM+0x238>
 8004234:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8004238:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800423c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004240:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8004244:	f841 c020 	str.w	ip, [r1, r0, lsl #2]
 8004248:	e00f      	b.n	800426a <PE_StateMachine_VDM+0x236>
 800424a:	1c6d      	adds	r5, r5, #1
 800424c:	0858      	lsrs	r0, r3, #1
 800424e:	ea5f 7cc3 	movs.w	ip, r3, lsl #31
 8004252:	a905      	add	r1, sp, #20
 8004254:	d5ee      	bpl.n	8004234 <PE_StateMachine_VDM+0x200>
 8004256:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800425a:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800425e:	f83c 9013 	ldrh.w	r9, [ip, r3, lsl #1]
 8004262:	ea49 0e0e 	orr.w	lr, r9, lr
 8004266:	f841 e020 	str.w	lr, [r1, r0, lsl #2]
 800426a:	1c5b      	adds	r3, r3, #1
 800426c:	7850      	ldrb	r0, [r2, #1]
 800426e:	4283      	cmp	r3, r0
 8004270:	bf38      	it	cc
 8004272:	2b0c      	cmpcc	r3, #12
 8004274:	d3e9      	bcc.n	800424a <PE_StateMachine_VDM+0x216>
 8004276:	f204 41ac 	addw	r1, r4, #1196	; 0x4ac
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	7048      	strb	r0, [r1, #1]
 800427e:	b2e8      	uxtb	r0, r5
 8004280:	280c      	cmp	r0, #12
 8004282:	d109      	bne.n	8004298 <PE_StateMachine_VDM+0x264>
 8004284:	6831      	ldr	r1, [r6, #0]
 8004286:	9104      	str	r1, [sp, #16]
 8004288:	2000      	movs	r0, #0
 800428a:	2277      	movs	r2, #119	; 0x77
 800428c:	2107      	movs	r1, #7
 800428e:	9002      	str	r0, [sp, #8]
 8004290:	9201      	str	r2, [sp, #4]
 8004292:	9100      	str	r1, [sp, #0]
 8004294:	ab04      	add	r3, sp, #16
 8004296:	e05b      	b.n	8004350 <PE_StateMachine_VDM+0x31c>
 8004298:	062d      	lsls	r5, r5, #24
 800429a:	0e6d      	lsrs	r5, r5, #25
 800429c:	6830      	ldr	r0, [r6, #0]
 800429e:	1cad      	adds	r5, r5, #2
 80042a0:	e005      	b.n	80042ae <PE_StateMachine_VDM+0x27a>
 80042a2:	f000 fc3e 	bl	8004b22 <.text_31>
 80042a6:	e001      	b.n	80042ac <PE_StateMachine_VDM+0x278>
 80042a8:	f000 fc3f 	bl	8004b2a <.text_32>
 80042ac:	6030      	str	r0, [r6, #0]
 80042ae:	9004      	str	r0, [sp, #16]
 80042b0:	2103      	movs	r1, #3
 80042b2:	2000      	movs	r0, #0
 80042b4:	b2ed      	uxtb	r5, r5
 80042b6:	9002      	str	r0, [sp, #8]
 80042b8:	9101      	str	r1, [sp, #4]
 80042ba:	9500      	str	r5, [sp, #0]
 80042bc:	ab04      	add	r3, sp, #16
 80042be:	e123      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80042c0:	f000 fc37 	bl	8004b32 <.text_33>
 80042c4:	f000 838f 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 80042c8:	6830      	ldr	r0, [r6, #0]
 80042ca:	f368 0004 	bfi	r0, r8, #0, #5
 80042ce:	6030      	str	r0, [r6, #0]
 80042d0:	aa03      	add	r2, sp, #12
 80042d2:	f000 fbef 	bl	8004ab4 <.text_28>
 80042d6:	f36a 1187 	bfi	r1, sl, #6, #2
 80042da:	6031      	str	r1, [r6, #0]
 80042dc:	a904      	add	r1, sp, #16
 80042de:	68e3      	ldr	r3, [r4, #12]
 80042e0:	7c20      	ldrb	r0, [r4, #16]
 80042e2:	685d      	ldr	r5, [r3, #4]
 80042e4:	47a8      	blx	r5
 80042e6:	211c      	movs	r1, #28
 80042e8:	a805      	add	r0, sp, #20
 80042ea:	f01b faa3 	bl	801f834 <__aeabi_memclr>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2500      	movs	r5, #0
 80042f2:	f204 42ac 	addw	r2, r4, #1196	; 0x4ac
 80042f6:	e018      	b.n	800432a <PE_StateMachine_VDM+0x2f6>
 80042f8:	f8dd e010 	ldr.w	lr, [sp, #16]
 80042fc:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8004300:	f83e 6015 	ldrh.w	r6, [lr, r5, lsl #1]
 8004304:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 8004308:	e00c      	b.n	8004324 <PE_StateMachine_VDM+0x2f0>
 800430a:	1c5b      	adds	r3, r3, #1
 800430c:	0868      	lsrs	r0, r5, #1
 800430e:	07ee      	lsls	r6, r5, #31
 8004310:	a906      	add	r1, sp, #24
 8004312:	d5f1      	bpl.n	80042f8 <PE_StateMachine_VDM+0x2c4>
 8004314:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004318:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800431c:	f83c 6015 	ldrh.w	r6, [ip, r5, lsl #1]
 8004320:	ea46 060e 	orr.w	r6, r6, lr
 8004324:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
 8004328:	1c6d      	adds	r5, r5, #1
 800432a:	7850      	ldrb	r0, [r2, #1]
 800432c:	4285      	cmp	r5, r0
 800432e:	bf38      	it	cc
 8004330:	2d0c      	cmpcc	r5, #12
 8004332:	d3ea      	bcc.n	800430a <PE_StateMachine_VDM+0x2d6>
 8004334:	f204 41ac 	addw	r1, r4, #1196	; 0x4ac
 8004338:	1ac0      	subs	r0, r0, r3
 800433a:	7048      	strb	r0, [r1, #1]
 800433c:	b2d8      	uxtb	r0, r3
 800433e:	280c      	cmp	r0, #12
 8004340:	d10e      	bne.n	8004360 <PE_StateMachine_VDM+0x32c>
 8004342:	2100      	movs	r1, #0
 8004344:	2077      	movs	r0, #119	; 0x77
 8004346:	2207      	movs	r2, #7
 8004348:	9102      	str	r1, [sp, #8]
 800434a:	9001      	str	r0, [sp, #4]
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	ab05      	add	r3, sp, #20
 8004350:	7839      	ldrb	r1, [r7, #0]
 8004352:	220f      	movs	r2, #15
 8004354:	f000 fc84 	bl	8004c60 <.text_44>
 8004358:	f248 000f 	movw	r0, #32783	; 0x800f
 800435c:	83e0      	strh	r0, [r4, #30]
 800435e:	e363      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	0e5b      	lsrs	r3, r3, #25
 8004364:	1c9b      	adds	r3, r3, #2
 8004366:	b2db      	uxtb	r3, r3
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	2003      	movs	r0, #3
 800436e:	9102      	str	r1, [sp, #8]
 8004370:	9001      	str	r0, [sp, #4]
 8004372:	e042      	b.n	80043fa <PE_StateMachine_VDM+0x3c6>
 8004374:	8be1      	ldrh	r1, [r4, #30]
 8004376:	2501      	movs	r5, #1
 8004378:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800437c:	d061      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	f360 0104 	bfi	r1, r0, #0, #5
 8004384:	f000 fb74 	bl	8004a70 <.text_26>
 8004388:	f000 fb6c 	bl	8004a64 <.text_25>
 800438c:	bf1e      	ittt	ne
 800438e:	68e0      	ldrne	r0, [r4, #12]
 8004390:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8004394:	f1bc 0f00 	cmpne.w	ip, #0
 8004398:	d025      	beq.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 800439a:	7c20      	ldrb	r0, [r4, #16]
 800439c:	ab03      	add	r3, sp, #12
 800439e:	aa04      	add	r2, sp, #16
 80043a0:	0c09      	lsrs	r1, r1, #16
 80043a2:	47e0      	blx	ip
 80043a4:	2803      	cmp	r0, #3
 80043a6:	d002      	beq.n	80043ae <PE_StateMachine_VDM+0x37a>
 80043a8:	280f      	cmp	r0, #15
 80043aa:	d005      	beq.n	80043b8 <PE_StateMachine_VDM+0x384>
 80043ac:	e01b      	b.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043ae:	6832      	ldr	r2, [r6, #0]
 80043b0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80043b4:	6032      	str	r2, [r6, #0]
 80043b6:	e019      	b.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80043bc:	b198      	cbz	r0, 80043e6 <PE_StateMachine_VDM+0x3b2>
 80043be:	2807      	cmp	r0, #7
 80043c0:	d211      	bcs.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043c2:	f000 fbbf 	bl	8004b44 <.text_35>
 80043c6:	ab06      	add	r3, sp, #24
 80043c8:	2000      	movs	r0, #0
 80043ca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80043ce:	4288      	cmp	r0, r1
 80043d0:	d20c      	bcs.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043d2:	9a04      	ldr	r2, [sp, #16]
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80043da:	1c6d      	adds	r5, r5, #1
 80043dc:	9904      	ldr	r1, [sp, #16]
 80043de:	1d0a      	adds	r2, r1, #4
 80043e0:	9204      	str	r2, [sp, #16]
 80043e2:	1c40      	adds	r0, r0, #1
 80043e4:	e7f1      	b.n	80043ca <PE_StateMachine_VDM+0x396>
 80043e6:	f000 fba0 	bl	8004b2a <.text_32>
 80043ea:	6030      	str	r0, [r6, #0]
 80043ec:	2000      	movs	r0, #0
 80043ee:	6831      	ldr	r1, [r6, #0]
 80043f0:	9105      	str	r1, [sp, #20]
 80043f2:	2203      	movs	r2, #3
 80043f4:	9002      	str	r0, [sp, #8]
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	9500      	str	r5, [sp, #0]
 80043fa:	ab05      	add	r3, sp, #20
 80043fc:	e084      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80043fe:	f000 fb98 	bl	8004b32 <.text_33>
 8004402:	d01e      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 8004404:	6830      	ldr	r0, [r6, #0]
 8004406:	f362 0004 	bfi	r0, r2, #0, #5
 800440a:	f000 fb40 	bl	8004a8e <.text_27>
 800440e:	2800      	cmp	r0, #0
 8004410:	d134      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004412:	68e1      	ldr	r1, [r4, #12]
 8004414:	68c8      	ldr	r0, [r1, #12]
 8004416:	2800      	cmp	r0, #0
 8004418:	d030      	beq.n	800447c <PE_StateMachine_VDM+0x448>
 800441a:	f000 fbcf 	bl	8004bbc <.text_40>
 800441e:	68dd      	ldr	r5, [r3, #12]
 8004420:	47a8      	blx	r5
 8004422:	2803      	cmp	r0, #3
 8004424:	d027      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004426:	280f      	cmp	r0, #15
 8004428:	d128      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 800442a:	f000 fb8b 	bl	8004b44 <.text_35>
 800442e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004432:	6961      	ldr	r1, [r4, #20]
 8004434:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8004438:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
 800443c:	e019      	b.n	8004472 <PE_StateMachine_VDM+0x43e>
 800443e:	f000 fb78 	bl	8004b32 <.text_33>
 8004442:	f000 82d0 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 8004446:	6830      	ldr	r0, [r6, #0]
 8004448:	f363 0004 	bfi	r0, r3, #0, #5
 800444c:	f000 fb1f 	bl	8004a8e <.text_27>
 8004450:	b9a0      	cbnz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004452:	68e1      	ldr	r1, [r4, #12]
 8004454:	6908      	ldr	r0, [r1, #16]
 8004456:	b188      	cbz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004458:	f000 fbb0 	bl	8004bbc <.text_40>
 800445c:	691d      	ldr	r5, [r3, #16]
 800445e:	47a8      	blx	r5
 8004460:	2803      	cmp	r0, #3
 8004462:	d008      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004464:	280f      	cmp	r0, #15
 8004466:	d109      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004468:	f000 fb6c 	bl	8004b44 <.text_35>
 800446c:	6961      	ldr	r1, [r4, #20]
 800446e:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8004472:	6161      	str	r1, [r4, #20]
 8004474:	e005      	b.n	8004482 <PE_StateMachine_VDM+0x44e>
 8004476:	f000 fb54 	bl	8004b22 <.text_31>
 800447a:	e001      	b.n	8004480 <PE_StateMachine_VDM+0x44c>
 800447c:	f000 fb55 	bl	8004b2a <.text_32>
 8004480:	6030      	str	r0, [r6, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	9102      	str	r1, [sp, #8]
 8004486:	2203      	movs	r2, #3
 8004488:	9201      	str	r2, [sp, #4]
 800448a:	f8cd a000 	str.w	sl, [sp]
 800448e:	4633      	mov	r3, r6
 8004490:	7839      	ldrb	r1, [r7, #0]
 8004492:	220f      	movs	r2, #15
 8004494:	f000 fb89 	bl	8004baa <.text_38+0x6>
 8004498:	e2c6      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800449a:	f000 fb4e 	bl	8004b3a <.text_34>
 800449e:	d0d0      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
 80044a6:	f1bc 0f00 	cmp.w	ip, #0
 80044aa:	d021      	beq.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044ac:	7831      	ldrb	r1, [r6, #0]
 80044ae:	7c20      	ldrb	r0, [r4, #16]
 80044b0:	f204 49ac 	addw	r9, r4, #1196	; 0x4ac
 80044b4:	f204 4394 	addw	r3, r4, #1172	; 0x494
 80044b8:	464a      	mov	r2, r9
 80044ba:	f001 011f 	and.w	r1, r1, #31
 80044be:	47e0      	blx	ip
 80044c0:	2803      	cmp	r0, #3
 80044c2:	d012      	beq.n	80044ea <PE_StateMachine_VDM+0x4b6>
 80044c4:	280f      	cmp	r0, #15
 80044c6:	d113      	bne.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044c8:	f000 fb3c 	bl	8004b44 <.text_35>
 80044cc:	2000      	movs	r0, #0
 80044ce:	f899 1000 	ldrb.w	r1, [r9]
 80044d2:	4288      	cmp	r0, r1
 80044d4:	d20f      	bcs.n	80044f6 <PE_StateMachine_VDM+0x4c2>
 80044d6:	f204 4294 	addw	r2, r4, #1172	; 0x494
 80044da:	1c6d      	adds	r5, r5, #1
 80044dc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80044e0:	aa04      	add	r2, sp, #16
 80044e2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 80044e6:	1c40      	adds	r0, r0, #1
 80044e8:	e7f1      	b.n	80044ce <PE_StateMachine_VDM+0x49a>
 80044ea:	f000 fb1a 	bl	8004b22 <.text_31>
 80044ee:	e001      	b.n	80044f4 <PE_StateMachine_VDM+0x4c0>
 80044f0:	f000 fb1b 	bl	8004b2a <.text_32>
 80044f4:	6030      	str	r0, [r6, #0]
 80044f6:	6831      	ldr	r1, [r6, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	2203      	movs	r2, #3
 80044fc:	b2ed      	uxtb	r5, r5
 80044fe:	9103      	str	r1, [sp, #12]
 8004500:	9002      	str	r0, [sp, #8]
 8004502:	9201      	str	r2, [sp, #4]
 8004504:	9500      	str	r5, [sp, #0]
 8004506:	ab03      	add	r3, sp, #12
 8004508:	7839      	ldrb	r1, [r7, #0]
 800450a:	220f      	movs	r2, #15
 800450c:	f000 fba8 	bl	8004c60 <.text_44>
 8004510:	e28a      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004512:	6830      	ldr	r0, [r6, #0]
 8004514:	f36a 0004 	bfi	r0, sl, #0, #5
 8004518:	6030      	str	r0, [r6, #0]
 800451a:	4633      	mov	r3, r6
 800451c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004520:	6030      	str	r0, [r6, #0]
 8004522:	6860      	ldr	r0, [r4, #4]
 8004524:	6802      	ldr	r2, [r0, #0]
 8004526:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800452a:	6832      	ldr	r2, [r6, #0]
 800452c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004530:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004534:	6032      	str	r2, [r6, #0]
 8004536:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004540:	6032      	str	r2, [r6, #0]
 8004542:	f361 421f 	bfi	r2, r1, #16, #16
 8004546:	6032      	str	r2, [r6, #0]
 8004548:	f000 fb7e 	bl	8004c48 <.text_42+0x6>
 800454c:	bf1d      	ittte	ne
 800454e:	6960      	ldrne	r0, [r4, #20]
 8004550:	0880      	lsrne	r0, r0, #2
 8004552:	f000 0001 	andne.w	r0, r0, #1
 8004556:	2002      	moveq	r0, #2
 8004558:	f000 fa80 	bl	8004a5c <.text_24>
 800455c:	2087      	movs	r0, #135	; 0x87
 800455e:	f000 fb21 	bl	8004ba4 <.text_38>
 8004562:	2800      	cmp	r0, #0
 8004564:	d1d4      	bne.n	8004510 <PE_StateMachine_VDM+0x4dc>
 8004566:	2050      	movs	r0, #80	; 0x50
 8004568:	e0a1      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800456a:	f000 fa6f 	bl	8004a4c <.text_22>
 800456e:	f000 fa69 	bl	8004a44 <.text_21>
 8004572:	d163      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004574:	8829      	ldrh	r1, [r5, #0]
 8004576:	0bc8      	lsrs	r0, r1, #15
 8004578:	d160      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800457a:	f000 fa5f 	bl	8004a3c <.text_20>
 800457e:	d062      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004580:	f000 fa67 	bl	8004a52 <.text_23>
 8004584:	d15a      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004586:	2a14      	cmp	r2, #20
 8004588:	d001      	beq.n	800458e <PE_StateMachine_VDM+0x55a>
 800458a:	f000 fb11 	bl	8004bb0 <.text_39>
 800458e:	6868      	ldr	r0, [r5, #4]
 8004590:	7887      	ldrb	r7, [r0, #2]
 8004592:	f007 011f 	and.w	r1, r7, #31
 8004596:	2901      	cmp	r1, #1
 8004598:	d150      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800459a:	f3c7 1081 	ubfx	r0, r7, #6, #2
 800459e:	2800      	cmp	r0, #0
 80045a0:	d051      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80045a2:	68e1      	ldr	r1, [r4, #12]
 80045a4:	6948      	ldr	r0, [r1, #20]
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f000 8202 	beq.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045ac:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80045b0:	2801      	cmp	r0, #1
 80045b2:	f040 81fd 	bne.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045b6:	6868      	ldr	r0, [r5, #4]
 80045b8:	1d81      	adds	r1, r0, #6
 80045ba:	7c20      	ldrb	r0, [r4, #16]
 80045bc:	aa08      	add	r2, sp, #32
 80045be:	f000 fbb5 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80045c2:	b950      	cbnz	r0, 80045da <PE_StateMachine_VDM+0x5a6>
 80045c4:	68e5      	ldr	r5, [r4, #12]
 80045c6:	7c20      	ldrb	r0, [r4, #16]
 80045c8:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80045cc:	ab08      	add	r3, sp, #32
 80045ce:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80045d2:	2100      	movs	r1, #0
 80045d4:	47c0      	blx	r8
 80045d6:	2151      	movs	r1, #81	; 0x51
 80045d8:	e0a3      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045da:	211b      	movs	r1, #27
 80045dc:	e0a1      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045de:	f000 fa9a 	bl	8004b16 <.text_30>
 80045e2:	f368 0004 	bfi	r0, r8, #0, #5
 80045e6:	6030      	str	r0, [r6, #0]
 80045e8:	f000 fa64 	bl	8004ab4 <.text_28>
 80045ec:	f000 fb29 	bl	8004c42 <.text_42>
 80045f0:	bf1d      	ittte	ne
 80045f2:	6960      	ldrne	r0, [r4, #20]
 80045f4:	0880      	lsrne	r0, r0, #2
 80045f6:	f000 0001 	andne.w	r0, r0, #1
 80045fa:	2002      	moveq	r0, #2
 80045fc:	f000 fa2e 	bl	8004a5c <.text_24>
 8004600:	2089      	movs	r0, #137	; 0x89
 8004602:	f000 facf 	bl	8004ba4 <.text_38>
 8004606:	2800      	cmp	r0, #0
 8004608:	d153      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 800460a:	2052      	movs	r0, #82	; 0x52
 800460c:	e04f      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800460e:	f000 fa1d 	bl	8004a4c <.text_22>
 8004612:	f000 fa17 	bl	8004a44 <.text_21>
 8004616:	d111      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004618:	8829      	ldrh	r1, [r5, #0]
 800461a:	0bc8      	lsrs	r0, r1, #15
 800461c:	d10e      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800461e:	f000 fa0d 	bl	8004a3c <.text_20>
 8004622:	d010      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004624:	f000 fa15 	bl	8004a52 <.text_23>
 8004628:	d108      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800462a:	2a14      	cmp	r2, #20
 800462c:	d001      	beq.n	8004632 <PE_StateMachine_VDM+0x5fe>
 800462e:	f000 fabf 	bl	8004bb0 <.text_39>
 8004632:	6868      	ldr	r0, [r5, #4]
 8004634:	7886      	ldrb	r6, [r0, #2]
 8004636:	f006 011f 	and.w	r1, r6, #31
 800463a:	2902      	cmp	r1, #2
 800463c:	f040 8140 	bne.w	80048c0 <PE_StateMachine_VDM+0x88c>
 8004640:	f3c6 1081 	ubfx	r0, r6, #6, #2
 8004644:	2800      	cmp	r0, #0
 8004646:	f000 813b 	beq.w	80048c0 <PE_StateMachine_VDM+0x88c>
 800464a:	68e1      	ldr	r1, [r4, #12]
 800464c:	6988      	ldr	r0, [r1, #24]
 800464e:	2800      	cmp	r0, #0
 8004650:	d06a      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004652:	6868      	ldr	r0, [r5, #4]
 8004654:	1d81      	adds	r1, r0, #6
 8004656:	7c20      	ldrb	r0, [r4, #16]
 8004658:	aa08      	add	r2, sp, #32
 800465a:	f000 fc05 	bl	8004e68 <PE_SVDM_CheckSVIDs>
 800465e:	68e5      	ldr	r5, [r4, #12]
 8004660:	7839      	ldrb	r1, [r7, #0]
 8004662:	7c20      	ldrb	r0, [r4, #16]
 8004664:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8004668:	ab08      	add	r3, sp, #32
 800466a:	f3c6 1281 	ubfx	r2, r6, #6, #2
 800466e:	47c0      	blx	r8
 8004670:	2153      	movs	r1, #83	; 0x53
 8004672:	e056      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 8004674:	6831      	ldr	r1, [r6, #0]
 8004676:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800467a:	6031      	str	r1, [r6, #0]
 800467c:	4633      	mov	r3, r6
 800467e:	f360 0104 	bfi	r1, r0, #0, #5
 8004682:	6031      	str	r1, [r6, #0]
 8004684:	8930      	ldrh	r0, [r6, #8]
 8004686:	f360 411f 	bfi	r1, r0, #16, #16
 800468a:	f000 f9f1 	bl	8004a70 <.text_26>
 800468e:	f000 fad8 	bl	8004c42 <.text_42>
 8004692:	bf1d      	ittte	ne
 8004694:	6960      	ldrne	r0, [r4, #20]
 8004696:	0880      	lsrne	r0, r0, #2
 8004698:	f000 0001 	andne.w	r0, r0, #1
 800469c:	2002      	moveq	r0, #2
 800469e:	f000 f9dd 	bl	8004a5c <.text_24>
 80046a2:	208b      	movs	r0, #139	; 0x8b
 80046a4:	f000 fa7e 	bl	8004ba4 <.text_38>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d102      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 80046ac:	2053      	movs	r0, #83	; 0x53
 80046ae:	f000 f9bf 	bl	8004a30 <.text_19>
 80046b2:	e1b9      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80046b4:	f000 f9ca 	bl	8004a4c <.text_22>
 80046b8:	f000 f9c4 	bl	8004a44 <.text_21>
 80046bc:	d1be      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046be:	8829      	ldrh	r1, [r5, #0]
 80046c0:	0bc8      	lsrs	r0, r1, #15
 80046c2:	d1bb      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046c4:	f000 f9ba 	bl	8004a3c <.text_20>
 80046c8:	d0bd      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ca:	f000 f9c2 	bl	8004a52 <.text_23>
 80046ce:	d1b5      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046d0:	2a14      	cmp	r2, #20
 80046d2:	d001      	beq.n	80046d8 <PE_StateMachine_VDM+0x6a4>
 80046d4:	f000 fa6c 	bl	8004bb0 <.text_39>
 80046d8:	6868      	ldr	r0, [r5, #4]
 80046da:	f890 9002 	ldrb.w	r9, [r0, #2]
 80046de:	f009 011f 	and.w	r1, r9, #31
 80046e2:	2903      	cmp	r1, #3
 80046e4:	d1aa      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046e6:	f3c9 1081 	ubfx	r0, r9, #6, #2
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d0ab      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ee:	68e1      	ldr	r1, [r4, #12]
 80046f0:	69c8      	ldr	r0, [r1, #28]
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d018      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 80046f6:	6868      	ldr	r0, [r5, #4]
 80046f8:	6831      	ldr	r1, [r6, #0]
 80046fa:	1d82      	adds	r2, r0, #6
 80046fc:	7c20      	ldrb	r0, [r4, #16]
 80046fe:	ab08      	add	r3, sp, #32
 8004700:	0c09      	lsrs	r1, r1, #16
 8004702:	f000 fbe5 	bl	8004ed0 <PE_SVDM_CheckModes>
 8004706:	68e5      	ldr	r5, [r4, #12]
 8004708:	7839      	ldrb	r1, [r7, #0]
 800470a:	7c20      	ldrb	r0, [r4, #16]
 800470c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8004710:	ab08      	add	r3, sp, #32
 8004712:	f3c9 1281 	ubfx	r2, r9, #6, #2
 8004716:	47c0      	blx	r8
 8004718:	f3c9 1081 	ubfx	r0, r9, #6, #2
 800471c:	2801      	cmp	r0, #1
 800471e:	d103      	bne.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004720:	2154      	movs	r1, #84	; 0x54
 8004722:	7c20      	ldrb	r0, [r4, #16]
 8004724:	f7fb ff17 	bl	8000556 <USBPD_PE_Notification>
 8004728:	e142      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 800472a:	f000 f9f4 	bl	8004b16 <.text_30>
 800472e:	f362 0004 	bfi	r0, r2, #0, #5
 8004732:	6030      	str	r0, [r6, #0]
 8004734:	f000 f9cf 	bl	8004ad6 <.text_29>
 8004738:	bf1d      	ittte	ne
 800473a:	6960      	ldrne	r0, [r4, #20]
 800473c:	0880      	lsrne	r0, r0, #2
 800473e:	f000 0001 	andne.w	r0, r0, #1
 8004742:	2002      	moveq	r0, #2
 8004744:	f000 f98a 	bl	8004a5c <.text_24>
 8004748:	208c      	movs	r0, #140	; 0x8c
 800474a:	f000 fa2b 	bl	8004ba4 <.text_38>
 800474e:	2800      	cmp	r0, #0
 8004750:	d1af      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 8004752:	2054      	movs	r0, #84	; 0x54
 8004754:	7720      	strb	r0, [r4, #28]
 8004756:	2134      	movs	r1, #52	; 0x34
 8004758:	e067      	b.n	800482a <PE_StateMachine_VDM+0x7f6>
 800475a:	f000 f977 	bl	8004a4c <.text_22>
 800475e:	f000 f971 	bl	8004a44 <.text_21>
 8004762:	f04f 0934 	mov.w	r9, #52	; 0x34
 8004766:	d16d      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004768:	8829      	ldrh	r1, [r5, #0]
 800476a:	0bc8      	lsrs	r0, r1, #15
 800476c:	d16a      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800476e:	f000 f965 	bl	8004a3c <.text_20>
 8004772:	d06d      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 8004774:	f000 f96d 	bl	8004a52 <.text_23>
 8004778:	d164      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800477a:	2a14      	cmp	r2, #20
 800477c:	d001      	beq.n	8004782 <PE_StateMachine_VDM+0x74e>
 800477e:	f000 fa17 	bl	8004bb0 <.text_39>
 8004782:	2000      	movs	r0, #0
 8004784:	7720      	strb	r0, [r4, #28]
 8004786:	6869      	ldr	r1, [r5, #4]
 8004788:	f891 a002 	ldrb.w	sl, [r1, #2]
 800478c:	f00a 001f 	and.w	r0, sl, #31
 8004790:	2804      	cmp	r0, #4
 8004792:	d157      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004794:	f3ca 1081 	ubfx	r0, sl, #6, #2
 8004798:	2800      	cmp	r0, #0
 800479a:	d059      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 800479c:	2801      	cmp	r0, #1
 800479e:	d00a      	beq.n	80047b6 <PE_StateMachine_VDM+0x782>
 80047a0:	d312      	bcc.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047a2:	2803      	cmp	r0, #3
 80047a4:	d00a      	beq.n	80047bc <PE_StateMachine_VDM+0x788>
 80047a6:	bf3f      	itttt	cc
 80047a8:	6960      	ldrcc	r0, [r4, #20]
 80047aa:	f420 70e0 	biccc.w	r0, r0, #448	; 0x1c0
 80047ae:	6160      	strcc	r0, [r4, #20]
 80047b0:	f04f 0936 	movcc.w	r9, #54	; 0x36
 80047b4:	e008      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047b6:	f04f 0935 	mov.w	r9, #53	; 0x35
 80047ba:	e005      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047bc:	6960      	ldr	r0, [r4, #20]
 80047be:	f420 70e0 	bic.w	r0, r0, #448	; 0x1c0
 80047c2:	6160      	str	r0, [r4, #20]
 80047c4:	f04f 0937 	mov.w	r9, #55	; 0x37
 80047c8:	7c20      	ldrb	r0, [r4, #16]
 80047ca:	4649      	mov	r1, r9
 80047cc:	f7fb fec3 	bl	8000556 <USBPD_PE_Notification>
 80047d0:	68e1      	ldr	r1, [r4, #12]
 80047d2:	6a08      	ldr	r0, [r1, #32]
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d00d      	beq.n	80047f4 <PE_StateMachine_VDM+0x7c0>
 80047d8:	6830      	ldr	r0, [r6, #0]
 80047da:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80047de:	9000      	str	r0, [sp, #0]
 80047e0:	f3ca 1281 	ubfx	r2, sl, #6, #2
 80047e4:	68e5      	ldr	r5, [r4, #12]
 80047e6:	6833      	ldr	r3, [r6, #0]
 80047e8:	7839      	ldrb	r1, [r7, #0]
 80047ea:	7c20      	ldrb	r0, [r4, #16]
 80047ec:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	47c0      	blx	r8
 80047f4:	e0dc      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80047f6:	6830      	ldr	r0, [r6, #0]
 80047f8:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80047fc:	6030      	str	r0, [r6, #0]
 80047fe:	f363 0004 	bfi	r0, r3, #0, #5
 8004802:	6030      	str	r0, [r6, #0]
 8004804:	4633      	mov	r3, r6
 8004806:	f000 f966 	bl	8004ad6 <.text_29>
 800480a:	bf1d      	ittte	ne
 800480c:	6960      	ldrne	r0, [r4, #20]
 800480e:	0880      	lsrne	r0, r0, #2
 8004810:	f000 0001 	andne.w	r0, r0, #1
 8004814:	2002      	moveq	r0, #2
 8004816:	f000 f921 	bl	8004a5c <.text_24>
 800481a:	208d      	movs	r0, #141	; 0x8d
 800481c:	f000 f9c2 	bl	8004ba4 <.text_38>
 8004820:	2800      	cmp	r0, #0
 8004822:	d10a      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 8004824:	2055      	movs	r0, #85	; 0x55
 8004826:	7720      	strb	r0, [r4, #28]
 8004828:	2155      	movs	r1, #85	; 0x55
 800482a:	7c20      	ldrb	r0, [r4, #16]
 800482c:	f7fb fe93 	bl	8000556 <USBPD_PE_Notification>
 8004830:	f248 0032 	movw	r0, #32818	; 0x8032
 8004834:	83e0      	strh	r0, [r4, #30]
 8004836:	f04f 0832 	mov.w	r8, #50	; 0x32
 800483a:	e0f5      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800483c:	f000 f906 	bl	8004a4c <.text_22>
 8004840:	f000 f900 	bl	8004a44 <.text_21>
 8004844:	d13c      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004846:	8829      	ldrh	r1, [r5, #0]
 8004848:	0bc8      	lsrs	r0, r1, #15
 800484a:	d139      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 800484c:	f000 f8f6 	bl	8004a3c <.text_20>
 8004850:	d036      	beq.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004852:	f000 f8fe 	bl	8004a52 <.text_23>
 8004856:	d133      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004858:	2a14      	cmp	r2, #20
 800485a:	d001      	beq.n	8004860 <PE_StateMachine_VDM+0x82c>
 800485c:	f000 f9a8 	bl	8004bb0 <.text_39>
 8004860:	2000      	movs	r0, #0
 8004862:	7720      	strb	r0, [r4, #28]
 8004864:	6869      	ldr	r1, [r5, #4]
 8004866:	f891 9002 	ldrb.w	r9, [r1, #2]
 800486a:	f009 001f 	and.w	r0, r9, #31
 800486e:	2805      	cmp	r0, #5
 8004870:	d126      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004872:	f3c9 1081 	ubfx	r0, r9, #6, #2
 8004876:	b318      	cbz	r0, 80048c0 <PE_StateMachine_VDM+0x88c>
 8004878:	2801      	cmp	r0, #1
 800487a:	d004      	beq.n	8004886 <PE_StateMachine_VDM+0x852>
 800487c:	d309      	bcc.n	8004892 <PE_StateMachine_VDM+0x85e>
 800487e:	2803      	cmp	r0, #3
 8004880:	d005      	beq.n	800488e <PE_StateMachine_VDM+0x85a>
 8004882:	d302      	bcc.n	800488a <PE_StateMachine_VDM+0x856>
 8004884:	e005      	b.n	8004892 <PE_StateMachine_VDM+0x85e>
 8004886:	2156      	movs	r1, #86	; 0x56
 8004888:	e004      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488a:	2157      	movs	r1, #87	; 0x57
 800488c:	e002      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488e:	2158      	movs	r1, #88	; 0x58
 8004890:	e000      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 8004892:	2155      	movs	r1, #85	; 0x55
 8004894:	7c20      	ldrb	r0, [r4, #16]
 8004896:	f7fb fe5e 	bl	8000556 <USBPD_PE_Notification>
 800489a:	68e1      	ldr	r1, [r4, #12]
 800489c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800489e:	2800      	cmp	r0, #0
 80048a0:	d00d      	beq.n	80048be <PE_StateMachine_VDM+0x88a>
 80048a2:	6830      	ldr	r0, [r6, #0]
 80048a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80048a8:	9000      	str	r0, [sp, #0]
 80048aa:	f3c9 1281 	ubfx	r2, r9, #6, #2
 80048ae:	68e5      	ldr	r5, [r4, #12]
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	7839      	ldrb	r1, [r7, #0]
 80048b4:	7c20      	ldrb	r0, [r4, #16]
 80048b6:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	47c0      	blx	r8
 80048be:	e077      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80048c0:	7828      	ldrb	r0, [r5, #0]
 80048c2:	f000 001f 	and.w	r0, r0, #31
 80048c6:	2810      	cmp	r0, #16
 80048c8:	d07a      	beq.n	80049c0 <PE_StateMachine_VDM+0x98c>
 80048ca:	f000 f932 	bl	8004b32 <.text_33>
 80048ce:	d1b4      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 80048d0:	e089      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80048d2:	2100      	movs	r1, #0
 80048d4:	f88d 100c 	strb.w	r1, [sp, #12]
 80048d8:	f000 f939 	bl	8004b4e <.text_36>
 80048dc:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80048de:	b145      	cbz	r5, 80048f2 <PE_StateMachine_VDM+0x8be>
 80048e0:	a805      	add	r0, sp, #20
 80048e2:	9000      	str	r0, [sp, #0]
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	7832      	ldrb	r2, [r6, #0]
 80048e8:	7839      	ldrb	r1, [r7, #0]
 80048ea:	7c20      	ldrb	r0, [r4, #16]
 80048ec:	f002 021f 	and.w	r2, r2, #31
 80048f0:	47a8      	blx	r5
 80048f2:	f000 f94b 	bl	8004b8c <.text_37>
 80048f6:	bf1d      	ittte	ne
 80048f8:	6960      	ldrne	r0, [r4, #20]
 80048fa:	0880      	lsrne	r0, r0, #2
 80048fc:	f000 0001 	andne.w	r0, r0, #1
 8004900:	2002      	moveq	r0, #2
 8004902:	9002      	str	r0, [sp, #8]
 8004904:	208f      	movs	r0, #143	; 0x8f
 8004906:	f000 f9a5 	bl	8004c54 <.text_43>
 800490a:	2800      	cmp	r0, #0
 800490c:	d102      	bne.n	8004914 <PE_StateMachine_VDM+0x8e0>
 800490e:	205a      	movs	r0, #90	; 0x5a
 8004910:	f000 f88e 	bl	8004a30 <.text_19>
 8004914:	e086      	b.n	8004a24 <PE_StateMachine_VDM+0x9f0>
 8004916:	8828      	ldrh	r0, [r5, #0]
 8004918:	0b00      	lsrs	r0, r0, #12
 800491a:	f000 0007 	and.w	r0, r0, #7
 800491e:	1e41      	subs	r1, r0, #1
 8004920:	f88d 1004 	strb.w	r1, [sp, #4]
 8004924:	f000 f892 	bl	8004a4c <.text_22>
 8004928:	f000 f88c 	bl	8004a44 <.text_21>
 800492c:	d143      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 800492e:	8829      	ldrh	r1, [r5, #0]
 8004930:	0bc8      	lsrs	r0, r1, #15
 8004932:	d140      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004934:	f000 f882 	bl	8004a3c <.text_20>
 8004938:	d03d      	beq.n	80049b6 <PE_StateMachine_VDM+0x982>
 800493a:	f000 f88a 	bl	8004a52 <.text_23>
 800493e:	d13a      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004940:	2a14      	cmp	r2, #20
 8004942:	d001      	beq.n	8004948 <PE_StateMachine_VDM+0x914>
 8004944:	f000 f934 	bl	8004bb0 <.text_39>
 8004948:	6868      	ldr	r0, [r5, #4]
 800494a:	7882      	ldrb	r2, [r0, #2]
 800494c:	6870      	ldr	r0, [r6, #4]
 800494e:	f002 011f 	and.w	r1, r2, #31
 8004952:	4281      	cmp	r1, r0
 8004954:	d12f      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004956:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800495a:	b360      	cbz	r0, 80049b6 <PE_StateMachine_VDM+0x982>
 800495c:	68e1      	ldr	r1, [r4, #12]
 800495e:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8004960:	b330      	cbz	r0, 80049b0 <PE_StateMachine_VDM+0x97c>
 8004962:	2000      	movs	r0, #0
 8004964:	e015      	b.n	8004992 <PE_StateMachine_VDM+0x95e>
 8004966:	6869      	ldr	r1, [r5, #4]
 8004968:	0083      	lsls	r3, r0, #2
 800496a:	eb01 0803 	add.w	r8, r1, r3
 800496e:	3108      	adds	r1, #8
 8004970:	f898 c006 	ldrb.w	ip, [r8, #6]
 8004974:	f898 e007 	ldrb.w	lr, [r8, #7]
 8004978:	5ccb      	ldrb	r3, [r1, r3]
 800497a:	f898 1009 	ldrb.w	r1, [r8, #9]
 800497e:	eb0c 260e 	add.w	r6, ip, lr, lsl #8
 8004982:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8004986:	ab02      	add	r3, sp, #8
 8004988:	eb06 6601 	add.w	r6, r6, r1, lsl #24
 800498c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8004990:	1c40      	adds	r0, r0, #1
 8004992:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004996:	4288      	cmp	r0, r1
 8004998:	d3e5      	bcc.n	8004966 <PE_StateMachine_VDM+0x932>
 800499a:	a802      	add	r0, sp, #8
 800499c:	9000      	str	r0, [sp, #0]
 800499e:	ab01      	add	r3, sp, #4
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	7839      	ldrb	r1, [r7, #0]
 80049a4:	7c20      	ldrb	r0, [r4, #16]
 80049a6:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 80049aa:	f002 021f 	and.w	r2, r2, #31
 80049ae:	47c0      	blx	r8
 80049b0:	2000      	movs	r0, #0
 80049b2:	83e0      	strh	r0, [r4, #30]
 80049b4:	e017      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80049b6:	7829      	ldrb	r1, [r5, #0]
 80049b8:	f001 011f 	and.w	r1, r1, #31
 80049bc:	2910      	cmp	r1, #16
 80049be:	d10f      	bne.n	80049e0 <PE_StateMachine_VDM+0x9ac>
 80049c0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80049c2:	7801      	ldrb	r1, [r0, #0]
 80049c4:	2914      	cmp	r1, #20
 80049c6:	d001      	beq.n	80049cc <PE_StateMachine_VDM+0x998>
 80049c8:	f000 f8f2 	bl	8004bb0 <.text_39>
 80049cc:	2000      	movs	r0, #0
 80049ce:	83e0      	strh	r0, [r4, #30]
 80049d0:	2103      	movs	r1, #3
 80049d2:	7461      	strb	r1, [r4, #17]
 80049d4:	4680      	mov	r8, r0
 80049d6:	7c20      	ldrb	r0, [r4, #16]
 80049d8:	2159      	movs	r1, #89	; 0x59
 80049da:	f7fb fdbc 	bl	8000556 <USBPD_PE_Notification>
 80049de:	e023      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e0:	f000 f8a7 	bl	8004b32 <.text_33>
 80049e4:	d120      	bne.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e6:	2103      	movs	r1, #3
 80049e8:	7461      	strb	r1, [r4, #17]
 80049ea:	f04f 0800 	mov.w	r8, #0
 80049ee:	e01b      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049f0:	2000      	movs	r0, #0
 80049f2:	f88d 000c 	strb.w	r0, [sp, #12]
 80049f6:	f000 f8aa 	bl	8004b4e <.text_36>
 80049fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80049fc:	b11b      	cbz	r3, 8004a06 <PE_StateMachine_VDM+0x9d2>
 80049fe:	7c20      	ldrb	r0, [r4, #16]
 8004a00:	aa05      	add	r2, sp, #20
 8004a02:	a903      	add	r1, sp, #12
 8004a04:	4798      	blx	r3
 8004a06:	f000 f8c1 	bl	8004b8c <.text_37>
 8004a0a:	bf1d      	ittte	ne
 8004a0c:	6960      	ldrne	r0, [r4, #20]
 8004a0e:	0880      	lsrne	r0, r0, #2
 8004a10:	f000 0001 	andne.w	r0, r0, #1
 8004a14:	2002      	moveq	r0, #2
 8004a16:	9002      	str	r0, [sp, #8]
 8004a18:	2003      	movs	r0, #3
 8004a1a:	f000 f91b 	bl	8004c54 <.text_43>
 8004a1e:	b908      	cbnz	r0, 8004a24 <PE_StateMachine_VDM+0x9f0>
 8004a20:	205a      	movs	r0, #90	; 0x5a
 8004a22:	7720      	strb	r0, [r4, #28]
 8004a24:	2100      	movs	r1, #0
 8004a26:	7079      	strb	r1, [r7, #1]
 8004a28:	4640      	mov	r0, r8
 8004a2a:	b01c      	add	sp, #112	; 0x70
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a30 <.text_19>:
 8004a30:	7720      	strb	r0, [r4, #28]
 8004a32:	f8a4 901e 	strh.w	r9, [r4, #30]
 8004a36:	f04f 081e 	mov.w	r8, #30
 8004a3a:	4770      	bx	lr

08004a3c <.text_20>:
 8004a3c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8004a40:	2800      	cmp	r0, #0
 8004a42:	4770      	bx	lr

08004a44 <.text_21>:
 8004a44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a46:	780a      	ldrb	r2, [r1, #0]
 8004a48:	4282      	cmp	r2, r0
 8004a4a:	4770      	bx	lr

08004a4c <.text_22>:
 8004a4c:	7838      	ldrb	r0, [r7, #0]
 8004a4e:	f7fb bfe1 	b.w	8000a14 <PE_Convert_SOPRxEvent>

08004a52 <.text_23>:
 8004a52:	7828      	ldrb	r0, [r5, #0]
 8004a54:	f000 001f 	and.w	r0, r0, #31
 8004a58:	280f      	cmp	r0, #15
 8004a5a:	4770      	bx	lr

08004a5c <.text_24>:
 8004a5c:	9002      	str	r0, [sp, #8]
 8004a5e:	f8cd a000 	str.w	sl, [sp]
 8004a62:	4770      	bx	lr

08004a64 <.text_25>:
 8004a64:	6860      	ldr	r0, [r4, #4]
 8004a66:	7802      	ldrb	r2, [r0, #0]
 8004a68:	f002 020b 	and.w	r2, r2, #11
 8004a6c:	2a09      	cmp	r2, #9
 8004a6e:	4770      	bx	lr

08004a70 <.text_26>:
 8004a70:	6031      	str	r1, [r6, #0]
 8004a72:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	6860      	ldr	r0, [r4, #4]
 8004a7a:	6801      	ldr	r1, [r0, #0]
 8004a7c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004a80:	6831      	ldr	r1, [r6, #0]
 8004a82:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004a86:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004a8a:	6031      	str	r1, [r6, #0]
 8004a8c:	4770      	bx	lr

08004a8e <.text_27>:
 8004a8e:	6030      	str	r0, [r6, #0]
 8004a90:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004a94:	6030      	str	r0, [r6, #0]
 8004a96:	6860      	ldr	r0, [r4, #4]
 8004a98:	6832      	ldr	r2, [r6, #0]
 8004a9a:	6801      	ldr	r1, [r0, #0]
 8004a9c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aa0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004aa4:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004aa8:	6032      	str	r2, [r6, #0]
 8004aaa:	6860      	ldr	r0, [r4, #4]
 8004aac:	6801      	ldr	r1, [r0, #0]
 8004aae:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8004ab2:	4770      	bx	lr

08004ab4 <.text_28>:
 8004ab4:	f361 401f 	bfi	r0, r1, #16, #16
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004abe:	6030      	str	r0, [r6, #0]
 8004ac0:	6860      	ldr	r0, [r4, #4]
 8004ac2:	6801      	ldr	r1, [r0, #0]
 8004ac4:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004ac8:	6831      	ldr	r1, [r6, #0]
 8004aca:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004ace:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004ad2:	6031      	str	r1, [r6, #0]
 8004ad4:	4770      	bx	lr

08004ad6 <.text_29>:
 8004ad6:	8931      	ldrh	r1, [r6, #8]
 8004ad8:	f361 401f 	bfi	r0, r1, #16, #16
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004ae2:	6030      	str	r0, [r6, #0]
 8004ae4:	6860      	ldr	r0, [r4, #4]
 8004ae6:	6832      	ldr	r2, [r6, #0]
 8004ae8:	6801      	ldr	r1, [r0, #0]
 8004aea:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aee:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004af2:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004af6:	6032      	str	r2, [r6, #0]
 8004af8:	6960      	ldr	r0, [r4, #20]
 8004afa:	6831      	ldr	r1, [r6, #0]
 8004afc:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8004b00:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004b04:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8004b08:	6031      	str	r1, [r6, #0]
 8004b0a:	6860      	ldr	r0, [r4, #4]
 8004b0c:	6801      	ldr	r1, [r0, #0]
 8004b0e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004b12:	2800      	cmp	r0, #0
 8004b14:	4770      	bx	lr

08004b16 <.text_30>:
 8004b16:	6830      	ldr	r0, [r6, #0]
 8004b18:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004b1c:	6030      	str	r0, [r6, #0]
 8004b1e:	4633      	mov	r3, r6
 8004b20:	4770      	bx	lr

08004b22 <.text_31>:
 8004b22:	6830      	ldr	r0, [r6, #0]
 8004b24:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8004b28:	4770      	bx	lr

08004b2a <.text_32>:
 8004b2a:	6830      	ldr	r0, [r6, #0]
 8004b2c:	f368 1087 	bfi	r0, r8, #6, #2
 8004b30:	4770      	bx	lr

08004b32 <.text_33>:
 8004b32:	8be0      	ldrh	r0, [r4, #30]
 8004b34:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b38:	4770      	bx	lr

08004b3a <.text_34>:
 8004b3a:	8be0      	ldrh	r0, [r4, #30]
 8004b3c:	2501      	movs	r5, #1
 8004b3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004b42:	4770      	bx	lr

08004b44 <.text_35>:
 8004b44:	6830      	ldr	r0, [r6, #0]
 8004b46:	f36a 1087 	bfi	r0, sl, #6, #2
 8004b4a:	6030      	str	r0, [r6, #0]
 8004b4c:	4770      	bx	lr

08004b4e <.text_36>:
 8004b4e:	6830      	ldr	r0, [r6, #0]
 8004b50:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004b54:	6030      	str	r0, [r6, #0]
 8004b56:	6871      	ldr	r1, [r6, #4]
 8004b58:	f361 0004 	bfi	r0, r1, #0, #5
 8004b5c:	6030      	str	r0, [r6, #0]
 8004b5e:	8931      	ldrh	r1, [r6, #8]
 8004b60:	f361 401f 	bfi	r0, r1, #16, #16
 8004b64:	6030      	str	r0, [r6, #0]
 8004b66:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004b6a:	6030      	str	r0, [r6, #0]
 8004b6c:	6860      	ldr	r0, [r4, #4]
 8004b6e:	6801      	ldr	r1, [r0, #0]
 8004b70:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004b74:	6831      	ldr	r1, [r6, #0]
 8004b76:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004b7a:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004b7e:	6031      	str	r1, [r6, #0]
 8004b80:	f36a 210a 	bfi	r1, sl, #8, #3
 8004b84:	6031      	str	r1, [r6, #0]
 8004b86:	9104      	str	r1, [sp, #16]
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	4770      	bx	lr

08004b8c <.text_37>:
 8004b8c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004b90:	1c40      	adds	r0, r0, #1
 8004b92:	f88d 000c 	strb.w	r0, [sp, #12]
 8004b96:	ab04      	add	r3, sp, #16
 8004b98:	6860      	ldr	r0, [r4, #4]
 8004b9a:	6801      	ldr	r1, [r0, #0]
 8004b9c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	4770      	bx	lr

08004ba4 <.text_38>:
 8004ba4:	9001      	str	r0, [sp, #4]
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	7839      	ldrb	r1, [r7, #0]
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7fc bc89 	b.w	80014c2 <PE_Send_DataMessage>

08004bb0 <.text_39>:
 8004bb0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bb2:	2014      	movs	r0, #20
 8004bb4:	7008      	strb	r0, [r1, #0]
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fb bef8 	b.w	80009ac <PE_Clear_RxEvent>

08004bbc <.text_40>:
 8004bbc:	6830      	ldr	r0, [r6, #0]
 8004bbe:	68e3      	ldr	r3, [r4, #12]
 8004bc0:	f3c0 2202 	ubfx	r2, r0, #8, #3
 8004bc4:	0c01      	lsrs	r1, r0, #16
 8004bc6:	7c20      	ldrb	r0, [r4, #16]
 8004bc8:	4770      	bx	lr

08004bca <PE_StateMachine_UVDM>:
 8004bca:	b570      	push	{r4, r5, r6, lr}
 8004bcc:	2914      	cmp	r1, #20
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	d134      	bne.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004bd4:	68e0      	ldr	r0, [r4, #12]
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	bf1c      	itt	ne
 8004bda:	6bc0      	ldrne	r0, [r0, #60]	; 0x3c
 8004bdc:	2800      	cmpne	r0, #0
 8004bde:	d02e      	beq.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004be0:	2100      	movs	r1, #0
 8004be2:	f88d 100c 	strb.w	r1, [sp, #12]
 8004be6:	ab06      	add	r3, sp, #24
 8004be8:	68e5      	ldr	r5, [r4, #12]
 8004bea:	7c20      	ldrb	r0, [r4, #16]
 8004bec:	6bee      	ldr	r6, [r5, #60]	; 0x3c
 8004bee:	aa03      	add	r2, sp, #12
 8004bf0:	a904      	add	r1, sp, #16
 8004bf2:	47b0      	blx	r6
 8004bf4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004bf8:	9804      	ldr	r0, [sp, #16]
 8004bfa:	1c49      	adds	r1, r1, #1
 8004bfc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004c00:	f88d 100c 	strb.w	r1, [sp, #12]
 8004c04:	9004      	str	r0, [sp, #16]
 8004c06:	f104 0531 	add.w	r5, r4, #49	; 0x31
 8004c0a:	9904      	ldr	r1, [sp, #16]
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	ab05      	add	r3, sp, #20
 8004c10:	f000 f81a 	bl	8004c48 <.text_42+0x6>
 8004c14:	bf1d      	ittte	ne
 8004c16:	6960      	ldrne	r0, [r4, #20]
 8004c18:	0880      	lsrne	r0, r0, #2
 8004c1a:	f000 0001 	andne.w	r0, r0, #1
 8004c1e:	2002      	moveq	r0, #2
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	2003      	movs	r0, #3
 8004c24:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c28:	9100      	str	r1, [sp, #0]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	7829      	ldrb	r1, [r5, #0]
 8004c30:	f000 f816 	bl	8004c60 <.text_44>
 8004c34:	b908      	cbnz	r0, 8004c3a <PE_StateMachine_UVDM+0x70>
 8004c36:	2059      	movs	r0, #89	; 0x59
 8004c38:	7720      	strb	r0, [r4, #28]
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	7069      	strb	r1, [r5, #1]
 8004c3e:	b00c      	add	sp, #48	; 0x30
 8004c40:	bd70      	pop	{r4, r5, r6, pc}

08004c42 <.text_42>:
 8004c42:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004c46:	6031      	str	r1, [r6, #0]
 8004c48:	6860      	ldr	r0, [r4, #4]
 8004c4a:	6801      	ldr	r1, [r0, #0]
 8004c4c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004c50:	2800      	cmp	r0, #0
 8004c52:	4770      	bx	lr

08004c54 <.text_43>:
 8004c54:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c58:	9100      	str	r1, [sp, #0]
 8004c5a:	9001      	str	r0, [sp, #4]
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	7839      	ldrb	r1, [r7, #0]

08004c60 <.text_44>:
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7fc bc2e 	b.w	80014c2 <PE_Send_DataMessage>

08004c66 <PE_Check_DataMessageVDM>:
 8004c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c68:	4605      	mov	r5, r0
 8004c6a:	6828      	ldr	r0, [r5, #0]
 8004c6c:	6841      	ldr	r1, [r0, #4]
 8004c6e:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004c72:	2800      	cmp	r0, #0
 8004c74:	bf1c      	itt	ne
 8004c76:	68e8      	ldrne	r0, [r5, #12]
 8004c78:	2800      	cmpne	r0, #0
 8004c7a:	d04e      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004c7c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004c7e:	7888      	ldrb	r0, [r1, #2]
 8004c80:	78ca      	ldrb	r2, [r1, #3]
 8004c82:	790b      	ldrb	r3, [r1, #4]
 8004c84:	7949      	ldrb	r1, [r1, #5]
 8004c86:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8004c8a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 8004c8e:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8004c92:	4601      	mov	r1, r0
 8004c94:	0bca      	lsrs	r2, r1, #15
 8004c96:	f012 0201 	ands.w	r2, r2, #1
 8004c9a:	d012      	beq.n	8004cc2 <PE_Check_DataMessageVDM+0x5c>
 8004c9c:	2a01      	cmp	r2, #1
 8004c9e:	bf02      	ittt	eq
 8004ca0:	f8c5 1250 	streq.w	r1, [r5, #592]	; 0x250
 8004ca4:	f3c0 1081 	ubfxeq	r0, r0, #6, #2
 8004ca8:	2800      	cmpeq	r0, #0
 8004caa:	d136      	bne.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cac:	6828      	ldr	r0, [r5, #0]
 8004cae:	6841      	ldr	r1, [r0, #4]
 8004cb0:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d030      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	e8bd 40f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, lr}
 8004cbe:	f7ff b939 	b.w	8003f34 <PE_Receive_SVDM>
 8004cc2:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004cc4:	0b00      	lsrs	r0, r0, #12
 8004cc6:	f000 0007 	and.w	r0, r0, #7
 8004cca:	1e42      	subs	r2, r0, #1
 8004ccc:	f885 24ac 	strb.w	r2, [r5, #1196]	; 0x4ac
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f205 4394 	addw	r3, r5, #1172	; 0x494
 8004cd6:	e00f      	b.n	8004cf8 <PE_Check_DataMessageVDM+0x92>
 8004cd8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004cda:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004cde:	7994      	ldrb	r4, [r2, #6]
 8004ce0:	79d6      	ldrb	r6, [r2, #7]
 8004ce2:	eb04 2706 	add.w	r7, r4, r6, lsl #8
 8004ce6:	7a14      	ldrb	r4, [r2, #8]
 8004ce8:	7a52      	ldrb	r2, [r2, #9]
 8004cea:	eb07 4704 	add.w	r7, r7, r4, lsl #16
 8004cee:	eb07 6702 	add.w	r7, r7, r2, lsl #24
 8004cf2:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8004cf6:	1c40      	adds	r0, r0, #1
 8004cf8:	f895 24ac 	ldrb.w	r2, [r5, #1196]	; 0x4ac
 8004cfc:	4290      	cmp	r0, r2
 8004cfe:	d3eb      	bcc.n	8004cd8 <PE_Check_DataMessageVDM+0x72>
 8004d00:	68e8      	ldr	r0, [r5, #12]
 8004d02:	2800      	cmp	r0, #0
 8004d04:	bf1c      	itt	ne
 8004d06:	6c04      	ldrne	r4, [r0, #64]	; 0x40
 8004d08:	2c00      	cmpne	r4, #0
 8004d0a:	d006      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d0c:	7c28      	ldrb	r0, [r5, #16]
 8004d0e:	f205 42ac 	addw	r2, r5, #1196	; 0x4ac
 8004d12:	47a0      	blx	r4
 8004d14:	b908      	cbnz	r0, 8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d16:	2003      	movs	r0, #3
 8004d18:	e006      	b.n	8004d28 <PE_Check_DataMessageVDM+0xc2>
 8004d1a:	6868      	ldr	r0, [r5, #4]
 8004d1c:	7801      	ldrb	r1, [r0, #0]
 8004d1e:	f001 0103 	and.w	r1, r1, #3
 8004d22:	2902      	cmp	r1, #2
 8004d24:	d101      	bne.n	8004d2a <PE_Check_DataMessageVDM+0xc4>
 8004d26:	2001      	movs	r0, #1
 8004d28:	7468      	strb	r0, [r5, #17]
 8004d2a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004d2c <PE_SVDM_CheckIdentity>:
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	f000 f8f3 	bl	8004f18 <.text_51>
 8004d32:	0b24      	lsrs	r4, r4, #12
 8004d34:	f004 0407 	and.w	r4, r4, #7
 8004d38:	1e65      	subs	r5, r4, #1
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	b2ee      	uxtb	r6, r5
 8004d3e:	2e03      	cmp	r6, #3
 8004d40:	f0c0 8081 	bcc.w	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004d44:	780c      	ldrb	r4, [r1, #0]
 8004d46:	784e      	ldrb	r6, [r1, #1]
 8004d48:	788f      	ldrb	r7, [r1, #2]
 8004d4a:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8004d4e:	78ce      	ldrb	r6, [r1, #3]
 8004d50:	eb04 4407 	add.w	r4, r4, r7, lsl #16
 8004d54:	eb04 6406 	add.w	r4, r4, r6, lsl #24
 8004d58:	6014      	str	r4, [r2, #0]
 8004d5a:	790f      	ldrb	r7, [r1, #4]
 8004d5c:	794e      	ldrb	r6, [r1, #5]
 8004d5e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004d62:	798f      	ldrb	r7, [r1, #6]
 8004d64:	eb06 4707 	add.w	r7, r6, r7, lsl #16
 8004d68:	79ce      	ldrb	r6, [r1, #7]
 8004d6a:	eb07 6606 	add.w	r6, r7, r6, lsl #24
 8004d6e:	6056      	str	r6, [r2, #4]
 8004d70:	7a0f      	ldrb	r7, [r1, #8]
 8004d72:	f891 c009 	ldrb.w	ip, [r1, #9]
 8004d76:	eb07 2e0c 	add.w	lr, r7, ip, lsl #8
 8004d7a:	7a8f      	ldrb	r7, [r1, #10]
 8004d7c:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8004d80:	eb0e 4707 	add.w	r7, lr, r7, lsl #16
 8004d84:	eb07 670c 	add.w	r7, r7, ip, lsl #24
 8004d88:	6097      	str	r7, [r2, #8]
 8004d8a:	2608      	movs	r6, #8
 8004d8c:	1eef      	subs	r7, r5, #3
 8004d8e:	f892 5020 	ldrb.w	r5, [r2, #32]
 8004d92:	f005 0ee0 	and.w	lr, r5, #224	; 0xe0
 8004d96:	b2fd      	uxtb	r5, r7
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	f882 e020 	strb.w	lr, [r2, #32]
 8004d9e:	d053      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004da0:	0ee4      	lsrs	r4, r4, #27
 8004da2:	1e7d      	subs	r5, r7, #1
 8004da4:	f004 0407 	and.w	r4, r4, #7
 8004da8:	2c05      	cmp	r4, #5
 8004daa:	d84c      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004dac:	e8df f004 	tbb	[pc, r4]
 8004db0:	2303030c 	.word	0x2303030c
 8004db4:	2f29      	.short	0x2f29
 8004db6:	f04e 0408 	orr.w	r4, lr, #8
 8004dba:	f000 f847 	bl	8004e4c <.text_47>
 8004dbe:	6194      	str	r4, [r2, #24]
 8004dc0:	462f      	mov	r7, r5
 8004dc2:	b2fc      	uxtb	r4, r7
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	d03f      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dc8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8004dca:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	d33a      	bcc.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dd2:	6810      	ldr	r0, [r2, #0]
 8004dd4:	0dc0      	lsrs	r0, r0, #23
 8004dd6:	f010 0007 	ands.w	r0, r0, #7
 8004dda:	d035      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004ddc:	1e40      	subs	r0, r0, #1
 8004dde:	2802      	cmp	r0, #2
 8004de0:	d831      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004de2:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004de6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004dea:	2800      	cmp	r0, #0
 8004dec:	bf1a      	itte	ne
 8004dee:	3608      	addne	r6, #8
 8004df0:	1e7f      	subne	r7, r7, #1
 8004df2:	1d36      	addeq	r6, r6, #4
 8004df4:	e011      	b.n	8004e1a <PE_SVDM_CheckIdentity+0xee>
 8004df6:	f04e 0401 	orr.w	r4, lr, #1
 8004dfa:	f000 f827 	bl	8004e4c <.text_47>
 8004dfe:	60d4      	str	r4, [r2, #12]
 8004e00:	e7de      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e02:	f04e 0404 	orr.w	r4, lr, #4
 8004e06:	f000 f821 	bl	8004e4c <.text_47>
 8004e0a:	6154      	str	r4, [r2, #20]
 8004e0c:	e7d8      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e0e:	f04e 0402 	orr.w	r4, lr, #2
 8004e12:	f000 f81b 	bl	8004e4c <.text_47>
 8004e16:	6114      	str	r4, [r2, #16]
 8004e18:	e7d2      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e1a:	b2ff      	uxtb	r7, r7
 8004e1c:	2f01      	cmp	r7, #1
 8004e1e:	d112      	bne.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004e20:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004e24:	f040 0010 	orr.w	r0, r0, #16
 8004e28:	f882 0020 	strb.w	r0, [r2, #32]
 8004e2c:	1988      	adds	r0, r1, r6
 8004e2e:	7801      	ldrb	r1, [r0, #0]
 8004e30:	7844      	ldrb	r4, [r0, #1]
 8004e32:	eb01 2504 	add.w	r5, r1, r4, lsl #8
 8004e36:	7881      	ldrb	r1, [r0, #2]
 8004e38:	78c0      	ldrb	r0, [r0, #3]
 8004e3a:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8004e3e:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8004e42:	61d5      	str	r5, [r2, #28]
 8004e44:	e000      	b.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004e46:	2302      	movs	r3, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e4c <.text_47>:
 8004e4c:	f882 4020 	strb.w	r4, [r2, #32]
 8004e50:	260c      	movs	r6, #12
 8004e52:	7b0c      	ldrb	r4, [r1, #12]
 8004e54:	7b4f      	ldrb	r7, [r1, #13]
 8004e56:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 8004e5a:	7b8c      	ldrb	r4, [r1, #14]
 8004e5c:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 8004e60:	7bcf      	ldrb	r7, [r1, #15]
 8004e62:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8004e66:	4770      	bx	lr

08004e68 <PE_SVDM_CheckSVIDs>:
 8004e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <.text_52>)
 8004e6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004e70:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8004e72:	0b1b      	lsrs	r3, r3, #12
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	1e5b      	subs	r3, r3, #1
 8004e7a:	2400      	movs	r4, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2500      	movs	r5, #0
 8004e80:	7614      	strb	r4, [r2, #24]
 8004e82:	7654      	strb	r4, [r2, #25]
 8004e84:	f000 f816 	bl	8004eb4 <.text_49>
 8004e88:	bf19      	ittee	ne
 8004e8a:	1c76      	addne	r6, r6, #1
 8004e8c:	7616      	strbne	r6, [r2, #24]
 8004e8e:	2501      	moveq	r5, #1
 8004e90:	7655      	strbeq	r5, [r2, #25]
 8004e92:	1ca4      	adds	r4, r4, #2
 8004e94:	b2e4      	uxtb	r4, r4
 8004e96:	f000 f80d 	bl	8004eb4 <.text_49>
 8004e9a:	bf19      	ittee	ne
 8004e9c:	1c76      	addne	r6, r6, #1
 8004e9e:	7616      	strbne	r6, [r2, #24]
 8004ea0:	2501      	moveq	r5, #1
 8004ea2:	7655      	strbeq	r5, [r2, #25]
 8004ea4:	1ca4      	adds	r4, r4, #2
 8004ea6:	b2e4      	uxtb	r4, r4
 8004ea8:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004eac:	d201      	bcs.n	8004eb2 <PE_SVDM_CheckSVIDs+0x4a>
 8004eae:	0028      	movs	r0, r5
 8004eb0:	d0e8      	beq.n	8004e84 <PE_SVDM_CheckSVIDs+0x1c>
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eb4 <.text_49>:
 8004eb4:	1c4e      	adds	r6, r1, #1
 8004eb6:	5d08      	ldrb	r0, [r1, r4]
 8004eb8:	5d37      	ldrb	r7, [r6, r4]
 8004eba:	eb00 2607 	add.w	r6, r0, r7, lsl #8
 8004ebe:	7e10      	ldrb	r0, [r2, #24]
 8004ec0:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
 8004ec4:	7e16      	ldrb	r6, [r2, #24]
 8004ec6:	4637      	mov	r7, r6
 8004ec8:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <PE_SVDM_CheckModes>:
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	f000 f821 	bl	8004f18 <.text_51>
 8004ed6:	8399      	strh	r1, [r3, #28]
 8004ed8:	0b24      	lsrs	r4, r4, #12
 8004eda:	f004 0407 	and.w	r4, r4, #7
 8004ede:	1e60      	subs	r0, r4, #1
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	b2c0      	uxtb	r0, r0
 8004ee4:	601c      	str	r4, [r3, #0]
 8004ee6:	1916      	adds	r6, r2, r4
 8004ee8:	5d15      	ldrb	r5, [r2, r4]
 8004eea:	7871      	ldrb	r1, [r6, #1]
 8004eec:	eb05 2701 	add.w	r7, r5, r1, lsl #8
 8004ef0:	1911      	adds	r1, r2, r4
 8004ef2:	1d24      	adds	r4, r4, #4
 8004ef4:	788d      	ldrb	r5, [r1, #2]
 8004ef6:	78ce      	ldrb	r6, [r1, #3]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8004efe:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8004f02:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 8004f06:	606f      	str	r7, [r5, #4]
 8004f08:	b2e4      	uxtb	r4, r4
 8004f0a:	681e      	ldr	r6, [r3, #0]
 8004f0c:	1c76      	adds	r6, r6, #1
 8004f0e:	ebb4 0f80 	cmp.w	r4, r0, lsl #2
 8004f12:	601e      	str	r6, [r3, #0]
 8004f14:	d3e7      	bcc.n	8004ee6 <PE_SVDM_CheckModes+0x16>
 8004f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f18 <.text_51>:
 8004f18:	4c02      	ldr	r4, [pc, #8]	; (8004f24 <.text_52>)
 8004f1a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004f1e:	8e84      	ldrh	r4, [r0, #52]	; 0x34
 8004f20:	4770      	bx	lr
	...

08004f24 <.text_52>:
 8004f24:	200002c8 	.word	0x200002c8

08004f28 <USBPD_PRL_TimerCounter>:
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	f000 f879 	bl	8005020 <.text_12>
 8004f2e:	7919      	ldrb	r1, [r3, #4]
 8004f30:	b111      	cbz	r1, 8004f38 <USBPD_PRL_TimerCounter+0x10>
 8004f32:	7919      	ldrb	r1, [r3, #4]
 8004f34:	1e4c      	subs	r4, r1, #1
 8004f36:	711c      	strb	r4, [r3, #4]
 8004f38:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8004f3c:	7848      	ldrb	r0, [r1, #1]
 8004f3e:	b108      	cbz	r0, 8004f44 <USBPD_PRL_TimerCounter+0x1c>
 8004f40:	1e40      	subs	r0, r0, #1
 8004f42:	7048      	strb	r0, [r1, #1]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <USBPD_PRL_Init>:
 8004f46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	4617      	mov	r7, r2
 8004f50:	461d      	mov	r5, r3
 8004f52:	f44f 709c 	mov.w	r0, #312	; 0x138
 8004f56:	f01a fa0b 	bl	801f370 <malloc>
 8004f5a:	0004      	movs	r4, r0
 8004f5c:	f04f 0916 	mov.w	r9, #22
 8004f60:	d019      	beq.n	8004f96 <USBPD_PRL_Init+0x50>
 8004f62:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004f66:	f01a fc65 	bl	801f834 <__aeabi_memclr>
 8004f6a:	f000 fca8 	bl	80058be <.text_34>
 8004f6e:	f8df 0a48 	ldr.w	r0, [pc, #2632]	; 80059b8 <.text_40>
 8004f72:	4641      	mov	r1, r8
 8004f74:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8004f78:	62a7      	str	r7, [r4, #40]	; 0x28
 8004f7a:	62e5      	str	r5, [r4, #44]	; 0x2c
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	9000      	str	r0, [sp, #0]
 8004f80:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8004f84:	6870      	ldr	r0, [r6, #4]
 8004f86:	f60f 21a4 	addw	r1, pc, #2724	; 0xaa4
 8004f8a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f011 fb8c 	bl	80166ac <USBPD_PHY_Init>
 8004f94:	4681      	mov	r9, r0
 8004f96:	4648      	mov	r0, r9
 8004f98:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08004f9c <USBPD_PRL_GetMemoryConsumption>:
 8004f9c:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 8004fa0:	4770      	bx	lr

08004fa2 <USBPD_PRL_SetHeader>:
 8004fa2:	b530      	push	{r4, r5, lr}
 8004fa4:	f8df 4a10 	ldr.w	r4, [pc, #2576]	; 80059b8 <.text_40>
 8004fa8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8004fac:	8a6d      	ldrh	r5, [r5, #18]
 8004fae:	f361 2508 	bfi	r5, r1, #8, #1
 8004fb2:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fb6:	824d      	strh	r5, [r1, #18]
 8004fb8:	f362 1545 	bfi	r5, r2, #5, #1
 8004fbc:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fc0:	824d      	strh	r5, [r1, #18]
 8004fc2:	f363 1587 	bfi	r5, r3, #6, #2
 8004fc6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004fca:	8245      	strh	r5, [r0, #18]
 8004fcc:	bd30      	pop	{r4, r5, pc}

08004fce <USBPD_PRL_SetHeaderPowerRole>:
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	f000 f80b 	bl	8004fea <.text_9>
 8004fd4:	f361 2408 	bfi	r4, r1, #8, #1
 8004fd8:	825c      	strh	r4, [r3, #18]
 8004fda:	bd10      	pop	{r4, pc}

08004fdc <USBPD_PRL_SetHeaderDataRole>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	f000 f804 	bl	8004fea <.text_9>
 8004fe2:	f361 1445 	bfi	r4, r1, #5, #1
 8004fe6:	825c      	strh	r4, [r3, #18]
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <.text_9>:
 8004fea:	f8df 29cc 	ldr.w	r2, [pc, #2508]	; 80059b8 <.text_40>
 8004fee:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8004ff2:	8a5c      	ldrh	r4, [r3, #18]
 8004ff4:	4770      	bx	lr

08004ff6 <USBPD_PRL_SetHeaderSpecification>:
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	f7ff fff7 	bl	8004fea <.text_9>
 8004ffc:	f361 1487 	bfi	r4, r1, #6, #2
 8005000:	825c      	strh	r4, [r3, #18]
 8005002:	bd10      	pop	{r4, pc}

08005004 <USBPD_PRL_CBL_SetHeaderSpecification>:
 8005004:	b540      	push	{r6, lr}
 8005006:	f000 f80b 	bl	8005020 <.text_12>
 800500a:	8a9e      	ldrh	r6, [r3, #20]
 800500c:	f361 1687 	bfi	r6, r1, #6, #2
 8005010:	829e      	strh	r6, [r3, #20]
 8005012:	8adb      	ldrh	r3, [r3, #22]
 8005014:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005018:	f361 1387 	bfi	r3, r1, #6, #2
 800501c:	82c3      	strh	r3, [r0, #22]
 800501e:	bd40      	pop	{r6, pc}

08005020 <.text_12>:
 8005020:	f8df 2994 	ldr.w	r2, [pc, #2452]	; 80059b8 <.text_40>
 8005024:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8005028:	4770      	bx	lr

0800502a <USBPD_PRL_SRCSetSinkNG>:
 800502a:	f011 bc1a 	b.w	8016862 <USBPD_PHY_SetResistor_SinkTxNG>

0800502e <USBPD_PRL_SRCReleaseSinkNG>:
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
 8005032:	f011 fc23 	bl	801687c <USBPD_PHY_SetResistor_SinkTxOK>
 8005036:	f8df 1980 	ldr.w	r1, [pc, #2432]	; 80059b8 <.text_40>
 800503a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 800503e:	2000      	movs	r0, #0
 8005040:	7150      	strb	r0, [r2, #5]
 8005042:	bd10      	pop	{r4, pc}

08005044 <USBPD_PRL_IsResistor_SinkTxOK>:
 8005044:	f011 bc3c 	b.w	80168c0 <USBPD_PHY_IsResistor_SinkTxOk>

08005048 <USBPD_PRL_FastRoleSwapSignalling>:
 8005048:	f011 bc48 	b.w	80168dc <USBPD_PHY_FastRoleSwapSignalling>

0800504c <PRL_FastRoleSwapReception>:
 800504c:	f7fb be1a 	b.w	8000c84 <PE_PRL_FastRoleSwapReception>

08005050 <USBPD_PRL_SOPCapability>:
 8005050:	f011 bc22 	b.w	8016898 <USBPD_PHY_SOPSupported>

08005054 <USBPD_PRL_SendMessage>:
 8005054:	e92d 4dfd 	stmdb	sp!, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
 8005058:	f8df a95c 	ldr.w	sl, [pc, #2396]	; 80059b8 <.text_40>
 800505c:	b083      	sub	sp, #12
 800505e:	4680      	mov	r8, r0
 8005060:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005064:	4694      	mov	ip, r2
 8005066:	f10c 0701 	add.w	r7, ip, #1
 800506a:	2403      	movs	r4, #3
 800506c:	7938      	ldrb	r0, [r7, #4]
 800506e:	b118      	cbz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005070:	7a38      	ldrb	r0, [r7, #8]
 8005072:	b908      	cbnz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005074:	200f      	movs	r0, #15
 8005076:	7150      	strb	r0, [r2, #5]
 8005078:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005080:	f88d 0005 	strb.w	r0, [sp, #5]
 8005084:	f88d 1004 	strb.w	r1, [sp, #4]
 8005088:	9302      	str	r3, [sp, #8]
 800508a:	eb0c 0e01 	add.w	lr, ip, r1
 800508e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005090:	f897 b004 	ldrb.w	fp, [r7, #4]
 8005094:	f1bb 0f10 	cmp.w	fp, #16
 8005098:	f10c 050e 	add.w	r5, ip, #14
 800509c:	f200 81fb 	bhi.w	8005496 <USBPD_PRL_SendMessage+0x442>
 80050a0:	e8df f01b 	tbh	[pc, fp, lsl #1]
 80050a4:	00250011 	.word	0x00250011
 80050a8:	01f90030 	.word	0x01f90030
 80050ac:	00550037 	.word	0x00550037
 80050b0:	00b60045 	.word	0x00b60045
 80050b4:	01f901f9 	.word	0x01f901f9
 80050b8:	0182016d 	.word	0x0182016d
 80050bc:	01b1019b 	.word	0x01b1019b
 80050c0:	01f501f9 	.word	0x01f501f9
 80050c4:	01e0      	.short	0x01e0
 80050c6:	f3ef 8510 	mrs	r5, PRIMASK
 80050ca:	b672      	cpsid	i
 80050cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050d0:	f7fb fc91 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	bf04      	itt	eq
 80050d8:	7a78      	ldrbeq	r0, [r7, #9]
 80050da:	2800      	cmpeq	r0, #0
 80050dc:	bf07      	ittee	eq
 80050de:	21ff      	moveq	r1, #255	; 0xff
 80050e0:	7239      	strbeq	r1, [r7, #8]
 80050e2:	2000      	movne	r0, #0
 80050e4:	7238      	strbne	r0, [r7, #8]
 80050e6:	f385 8810 	msr	PRIMASK, r5
 80050ea:	2106      	movs	r1, #6
 80050ec:	e1a9      	b.n	8005442 <USBPD_PRL_SendMessage+0x3ee>
 80050ee:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050f2:	f011 fbb6 	bl	8016862 <USBPD_PHY_SetResistor_SinkTxNG>
 80050f6:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80050fa:	2002      	movs	r0, #2
 80050fc:	7148      	strb	r0, [r1, #5]
 80050fe:	2013      	movs	r0, #19
 8005100:	7038      	strb	r0, [r7, #0]
 8005102:	e1cb      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005104:	2801      	cmp	r0, #1
 8005106:	d110      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005108:	7838      	ldrb	r0, [r7, #0]
 800510a:	b960      	cbnz	r0, 8005126 <USBPD_PRL_SendMessage+0xd2>
 800510c:	2105      	movs	r1, #5
 800510e:	7151      	strb	r1, [r2, #5]
 8005110:	e1c4      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005112:	2802      	cmp	r0, #2
 8005114:	d109      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005116:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800511a:	f011 fbd1 	bl	80168c0 <USBPD_PHY_IsResistor_SinkTxOk>
 800511e:	2801      	cmp	r0, #1
 8005120:	bf08      	it	eq
 8005122:	2005      	moveq	r0, #5
 8005124:	d070      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005126:	2409      	movs	r4, #9
 8005128:	e1b8      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800512a:	2006      	movs	r0, #6
 800512c:	e153      	b.n	80053d6 <USBPD_PRL_SendMessage+0x382>
 800512e:	f10c 0212 	add.w	r2, ip, #18
 8005132:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8005136:	f3c1 1181 	ubfx	r1, r1, #6, #2
 800513a:	2902      	cmp	r1, #2
 800513c:	d105      	bne.n	800514a <USBPD_PRL_SendMessage+0xf6>
 800513e:	2801      	cmp	r0, #1
 8005140:	d062      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005142:	2802      	cmp	r0, #2
 8005144:	bf08      	it	eq
 8005146:	2004      	moveq	r0, #4
 8005148:	d05e      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514a:	2005      	movs	r0, #5
 800514c:	e05c      	b.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514e:	f10c 0012 	add.w	r0, ip, #18
 8005152:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005156:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800515a:	f10c 0312 	add.w	r3, ip, #18
 800515e:	f362 0004 	bfi	r0, r2, #0, #5
 8005162:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005166:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 800516a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800516e:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8005172:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005176:	2000      	movs	r0, #0
 8005178:	7078      	strb	r0, [r7, #1]
 800517a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800517e:	0bd8      	lsrs	r0, r3, #15
 8005180:	d025      	beq.n	80051ce <USBPD_PRL_SendMessage+0x17a>
 8005182:	9802      	ldr	r0, [sp, #8]
 8005184:	7883      	ldrb	r3, [r0, #2]
 8005186:	78c7      	ldrb	r7, [r0, #3]
 8005188:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800518c:	81eb      	strh	r3, [r5, #14]
 800518e:	89e8      	ldrh	r0, [r5, #14]
 8005190:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005194:	b968      	cbnz	r0, 80051b2 <USBPD_PRL_SendMessage+0x15e>
 8005196:	89e8      	ldrh	r0, [r5, #14]
 8005198:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800519c:	bb08      	cbnz	r0, 80051e2 <USBPD_PRL_SendMessage+0x18e>
 800519e:	1f30      	subs	r0, r6, #4
 80051a0:	82a8      	strh	r0, [r5, #20]
 80051a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80051a6:	89eb      	ldrh	r3, [r5, #14]
 80051a8:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80051ac:	4318      	orrs	r0, r3
 80051ae:	81e8      	strh	r0, [r5, #14]
 80051b0:	e017      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051b2:	2000      	movs	r0, #0
 80051b4:	f10c 0312 	add.w	r3, ip, #18
 80051b8:	82a8      	strh	r0, [r5, #20]
 80051ba:	2001      	movs	r0, #1
 80051bc:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 80051c0:	f360 370e 	bfi	r7, r0, #12, #3
 80051c4:	f10c 0012 	add.w	r0, ip, #18
 80051c8:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 80051cc:	e009      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051ce:	1eb0      	subs	r0, r6, #2
 80051d0:	0880      	lsrs	r0, r0, #2
 80051d2:	f360 330e 	bfi	r3, r0, #12, #3
 80051d6:	f10c 0012 	add.w	r0, ip, #18
 80051da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80051de:	2300      	movs	r3, #0
 80051e0:	82ab      	strh	r3, [r5, #20]
 80051e2:	2a0d      	cmp	r2, #13
 80051e4:	bf02      	ittt	eq
 80051e6:	f10c 0012 	addeq.w	r0, ip, #18
 80051ea:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 80051ee:	f411 4f70 	tsteq.w	r1, #61440	; 0xf000
 80051f2:	d108      	bne.n	8005206 <USBPD_PRL_SendMessage+0x1b2>
 80051f4:	2000      	movs	r0, #0
 80051f6:	f88e 000b 	strb.w	r0, [lr, #11]
 80051fa:	220f      	movs	r2, #15
 80051fc:	2103      	movs	r1, #3
 80051fe:	f10c 0006 	add.w	r0, ip, #6
 8005202:	f000 fc20 	bl	8005a46 <__aeabi_memset>
 8005206:	2007      	movs	r0, #7
 8005208:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800520c:	7148      	strb	r0, [r1, #5]
 800520e:	e145      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005210:	f102 0312 	add.w	r3, r2, #18
 8005214:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005218:	0bc0      	lsrs	r0, r0, #15
 800521a:	d07c      	beq.n	8005316 <USBPD_PRL_SendMessage+0x2c2>
 800521c:	8b90      	ldrh	r0, [r2, #28]
 800521e:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005222:	2800      	cmp	r0, #0
 8005224:	d16c      	bne.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005226:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800522a:	8c57      	ldrh	r7, [r2, #34]	; 0x22
 800522c:	8b93      	ldrh	r3, [r2, #28]
 800522e:	2f1b      	cmp	r7, #27
 8005230:	d30f      	bcc.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005232:	0bd8      	lsrs	r0, r3, #15
 8005234:	d00d      	beq.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005236:	f102 0312 	add.w	r3, r2, #18
 800523a:	261e      	movs	r6, #30
 800523c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005240:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
 8005244:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005248:	8c50      	ldrh	r0, [r2, #34]	; 0x22
 800524a:	f1a0 031a 	sub.w	r3, r0, #26
 800524e:	8453      	strh	r3, [r2, #34]	; 0x22
 8005250:	e056      	b.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005252:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8005256:	b918      	cbnz	r0, 8005260 <USBPD_PRL_SendMessage+0x20c>
 8005258:	4618      	mov	r0, r3
 800525a:	f367 0008 	bfi	r0, r7, #0, #9
 800525e:	8390      	strh	r0, [r2, #28]
 8005260:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8005264:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005268:	f102 0312 	add.w	r3, r2, #18
 800526c:	f102 0712 	add.w	r7, r2, #18
 8005270:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005274:	4003      	ands	r3, r0
 8005276:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 800527a:	8b90      	ldrh	r0, [r2, #28]
 800527c:	0bc0      	lsrs	r0, r0, #15
 800527e:	d03b      	beq.n	80052f8 <USBPD_PRL_SendMessage+0x2a4>
 8005280:	8c50      	ldrh	r0, [r2, #34]	; 0x22
 8005282:	1c80      	adds	r0, r0, #2
 8005284:	0880      	lsrs	r0, r0, #2
 8005286:	0307      	lsls	r7, r0, #12
 8005288:	f407 47e0 	and.w	r7, r7, #28672	; 0x7000
 800528c:	f102 0012 	add.w	r0, r2, #18
 8005290:	433b      	orrs	r3, r7
 8005292:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005296:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8005298:	1c92      	adds	r2, r2, #2
 800529a:	f012 0203 	ands.w	r2, r2, #3
 800529e:	d021      	beq.n	80052e4 <USBPD_PRL_SendMessage+0x290>
 80052a0:	9802      	ldr	r0, [sp, #8]
 80052a2:	2300      	movs	r3, #0
 80052a4:	e005      	b.n	80052b2 <USBPD_PRL_SendMessage+0x25e>
 80052a6:	8c7f      	ldrh	r7, [r7, #34]	; 0x22
 80052a8:	442f      	add	r7, r5
 80052aa:	4407      	add	r7, r0
 80052ac:	2500      	movs	r5, #0
 80052ae:	713d      	strb	r5, [r7, #4]
 80052b0:	1c5b      	adds	r3, r3, #1
 80052b2:	b2dd      	uxtb	r5, r3
 80052b4:	f1c2 0e04 	rsb	lr, r2, #4
 80052b8:	f85a 7028 	ldr.w	r7, [sl, r8, lsl #2]
 80052bc:	4575      	cmp	r5, lr
 80052be:	d3f2      	bcc.n	80052a6 <USBPD_PRL_SendMessage+0x252>
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	f648 72ff 	movw	r2, #36863	; 0x8fff
 80052c6:	f107 0012 	add.w	r0, r7, #18
 80052ca:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80052ce:	4002      	ands	r2, r0
 80052d0:	0b00      	lsrs	r0, r0, #12
 80052d2:	1c40      	adds	r0, r0, #1
 80052d4:	0300      	lsls	r0, r0, #12
 80052d6:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
 80052da:	4310      	orrs	r0, r2
 80052dc:	f107 0212 	add.w	r2, r7, #18
 80052e0:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 80052e4:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 80052e8:	f100 0212 	add.w	r2, r0, #18
 80052ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80052f0:	f3c3 3602 	ubfx	r6, r3, #12, #3
 80052f4:	00b6      	lsls	r6, r6, #2
 80052f6:	1cb6      	adds	r6, r6, #2
 80052f8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 80052fc:	2000      	movs	r0, #0
 80052fe:	8450      	strh	r0, [r2, #34]	; 0x22
 8005300:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005304:	8b82      	ldrh	r2, [r0, #28]
 8005306:	9802      	ldr	r0, [sp, #8]
 8005308:	7082      	strb	r2, [r0, #2]
 800530a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800530e:	8b90      	ldrh	r0, [r2, #28]
 8005310:	9a02      	ldr	r2, [sp, #8]
 8005312:	0a00      	lsrs	r0, r0, #8
 8005314:	70d0      	strb	r0, [r2, #3]
 8005316:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800531a:	f8df 56a0 	ldr.w	r5, [pc, #1696]	; 80059bc <.text_41>
 800531e:	f100 020b 	add.w	r2, r0, #11
 8005322:	3012      	adds	r0, #18
 8005324:	5c53      	ldrb	r3, [r2, r1]
 8005326:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800532a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800532e:	f363 204b 	bfi	r0, r3, #9, #3
 8005332:	f102 0312 	add.w	r3, r2, #18
 8005336:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 800533a:	9a02      	ldr	r2, [sp, #8]
 800533c:	7010      	strb	r0, [r2, #0]
 800533e:	2202      	movs	r2, #2
 8005340:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005344:	f100 0312 	add.w	r3, r0, #18
 8005348:	9802      	ldr	r0, [sp, #8]
 800534a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800534e:	0a09      	lsrs	r1, r1, #8
 8005350:	7041      	strb	r1, [r0, #1]
 8005352:	210a      	movs	r1, #10
 8005354:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005358:	81c6      	strh	r6, [r0, #14]
 800535a:	7141      	strb	r1, [r0, #5]
 800535c:	7402      	strb	r2, [r0, #16]
 800535e:	b2b0      	uxth	r0, r6
 8005360:	9000      	str	r0, [sp, #0]
 8005362:	f000 f8a5 	bl	80054b0 <.text_21>
 8005366:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800536a:	f242 7110 	movw	r1, #10000	; 0x2710
 800536e:	f012 fd61 	bl	8017e34 <USBPD_TIM_Start>
 8005372:	f000 f897 	bl	80054a4 <.text_20>
 8005376:	b2b3      	uxth	r3, r6
 8005378:	f011 fa3b 	bl	80167f2 <USBPD_PHY_SendMessage>
 800537c:	e08e      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800537e:	f3ef 8710 	mrs	r7, PRIMASK
 8005382:	b672      	cpsid	i
 8005384:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005388:	7941      	ldrb	r1, [r0, #5]
 800538a:	290a      	cmp	r1, #10
 800538c:	d109      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800538e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005392:	f012 fdc1 	bl	8017f18 <USBPD_TIM_IsExpired>
 8005396:	2801      	cmp	r0, #1
 8005398:	d103      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800539a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800539e:	200d      	movs	r0, #13
 80053a0:	7148      	strb	r0, [r1, #5]
 80053a2:	f387 8810 	msr	PRIMASK, r7
 80053a6:	e079      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053a8:	89a8      	ldrh	r0, [r5, #12]
 80053aa:	f89e 100b 	ldrb.w	r1, [lr, #11]
 80053ae:	0a43      	lsrs	r3, r0, #9
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4299      	cmp	r1, r3
 80053b6:	bf04      	itt	eq
 80053b8:	f000 001f 	andeq.w	r0, r0, #31
 80053bc:	2801      	cmpeq	r0, #1
 80053be:	d109      	bne.n	80053d4 <USBPD_PRL_SendMessage+0x380>
 80053c0:	1c49      	adds	r1, r1, #1
 80053c2:	f001 0107 	and.w	r1, r1, #7
 80053c6:	f88e 100b 	strb.w	r1, [lr, #11]
 80053ca:	2000      	movs	r0, #0
 80053cc:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053d0:	7148      	strb	r0, [r1, #5]
 80053d2:	e016      	b.n	8005402 <USBPD_PRL_SendMessage+0x3ae>
 80053d4:	200d      	movs	r0, #13
 80053d6:	7150      	strb	r0, [r2, #5]
 80053d8:	e060      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053da:	f89e 000b 	ldrb.w	r0, [lr, #11]
 80053de:	1c40      	adds	r0, r0, #1
 80053e0:	f000 0007 	and.w	r0, r0, #7
 80053e4:	f88e 000b 	strb.w	r0, [lr, #11]
 80053e8:	2000      	movs	r0, #0
 80053ea:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053ee:	7148      	strb	r0, [r1, #5]
 80053f0:	f248 71ff 	movw	r1, #34815	; 0x87ff
 80053f4:	89ea      	ldrh	r2, [r5, #14]
 80053f6:	400a      	ands	r2, r1
 80053f8:	81ea      	strh	r2, [r5, #14]
 80053fa:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 80053fe:	4002      	ands	r2, r0
 8005400:	81ea      	strh	r2, [r5, #14]
 8005402:	2405      	movs	r4, #5
 8005404:	e04a      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005406:	7878      	ldrb	r0, [r7, #1]
 8005408:	1c40      	adds	r0, r0, #1
 800540a:	7078      	strb	r0, [r7, #1]
 800540c:	f10c 0312 	add.w	r3, ip, #18
 8005410:	f10c 0012 	add.w	r0, ip, #18
 8005414:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8005418:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800541c:	2801      	cmp	r0, #1
 800541e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005422:	bf0c      	ite	eq
 8005424:	2203      	moveq	r2, #3
 8005426:	2202      	movne	r2, #2
 8005428:	0bc0      	lsrs	r0, r0, #15
 800542a:	d006      	beq.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 800542c:	89e9      	ldrh	r1, [r5, #14]
 800542e:	0bc8      	lsrs	r0, r1, #15
 8005430:	d103      	bne.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 8005432:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005436:	291b      	cmp	r1, #27
 8005438:	d207      	bcs.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 800543a:	7878      	ldrb	r0, [r7, #1]
 800543c:	4282      	cmp	r2, r0
 800543e:	d304      	bcc.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 8005440:	2110      	movs	r1, #16
 8005442:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005446:	7141      	strb	r1, [r0, #5]
 8005448:	e028      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800544a:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800544e:	2100      	movs	r1, #0
 8005450:	7141      	strb	r1, [r0, #5]
 8005452:	2407      	movs	r4, #7
 8005454:	f89e 100b 	ldrb.w	r1, [lr, #11]
 8005458:	1c49      	adds	r1, r1, #1
 800545a:	f001 0107 	and.w	r1, r1, #7
 800545e:	f88e 100b 	strb.w	r1, [lr, #11]
 8005462:	e01b      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005464:	200a      	movs	r0, #10
 8005466:	7150      	strb	r0, [r2, #5]
 8005468:	2102      	movs	r1, #2
 800546a:	70a9      	strb	r1, [r5, #2]
 800546c:	f242 7110 	movw	r1, #10000	; 0x2710
 8005470:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005474:	f012 fcde 	bl	8017e34 <USBPD_TIM_Start>
 8005478:	882b      	ldrh	r3, [r5, #0]
 800547a:	f000 f813 	bl	80054a4 <.text_20>
 800547e:	f8df 553c 	ldr.w	r5, [pc, #1340]	; 80059bc <.text_41>
 8005482:	f011 f9b6 	bl	80167f2 <USBPD_PHY_SendMessage>
 8005486:	9600      	str	r6, [sp, #0]
 8005488:	f000 f812 	bl	80054b0 <.text_21>
 800548c:	e006      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800548e:	2000      	movs	r0, #0
 8005490:	7150      	strb	r0, [r2, #5]
 8005492:	2406      	movs	r4, #6
 8005494:	e002      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005496:	2000      	movs	r0, #0
 8005498:	7150      	strb	r0, [r2, #5]
 800549a:	2410      	movs	r4, #16
 800549c:	4620      	mov	r0, r4
 800549e:	b006      	add	sp, #24
 80054a0:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

080054a4 <.text_20>:
 80054a4:	9a02      	ldr	r2, [sp, #8]
 80054a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80054aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80054ae:	4770      	bx	lr

080054b0 <.text_21>:
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80054b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80054ba:	f8d5 a000 	ldr.w	sl, [r5]
 80054be:	2002      	movs	r0, #2

080054c0 <__iar_annotation$$tailcall>:
 80054c0:	4750      	bx	sl

080054c2 <USBPD_PRL_ResetRequestProcess>:
 80054c2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	f8df 84ec 	ldr.w	r8, [pc, #1260]	; 80059b8 <.text_40>
 80054cc:	462f      	mov	r7, r5
 80054ce:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 80054d2:	2000      	movs	r0, #0
 80054d4:	70e0      	strb	r0, [r4, #3]
 80054d6:	72e0      	strb	r0, [r4, #11]
 80054d8:	7320      	strb	r0, [r4, #12]
 80054da:	7360      	strb	r0, [r4, #13]
 80054dc:	460e      	mov	r6, r1
 80054de:	f000 f9ee 	bl	80058be <.text_34>
 80054e2:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 80054e6:	f8df 74d4 	ldr.w	r7, [pc, #1236]	; 80059bc <.text_41>
 80054ea:	2200      	movs	r2, #0
 80054ec:	7142      	strb	r2, [r0, #5]
 80054ee:	9200      	str	r2, [sp, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8d7 c000 	ldr.w	ip, [r7]
 80054f6:	4632      	mov	r2, r6
 80054f8:	4629      	mov	r1, r5
 80054fa:	2002      	movs	r0, #2
 80054fc:	47e0      	blx	ip
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f83c 	bl	800557c <PRL_DisableRX>
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	f011 f960 	bl	80167cc <USBPD_PHY_ResetRequest>
 800550c:	2005      	movs	r0, #5
 800550e:	7120      	strb	r0, [r4, #4]
 8005510:	78e0      	ldrb	r0, [r4, #3]
 8005512:	2801      	cmp	r0, #1
 8005514:	bf1c      	itt	ne
 8005516:	7920      	ldrbne	r0, [r4, #4]
 8005518:	2800      	cmpne	r0, #0
 800551a:	d1f9      	bne.n	8005510 <USBPD_PRL_ResetRequestProcess+0x4e>
 800551c:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08005520 <USBDPD_PRL_BistCarrierEyeMode>:
 8005520:	2905      	cmp	r1, #5
 8005522:	bf08      	it	eq
 8005524:	f011 b97b 	beq.w	801681e <USBPD_PHY_Send_BIST_Pattern>
 8005528:	2010      	movs	r0, #16
 800552a:	4770      	bx	lr

0800552c <USBDPD_PRL_BistCarrierEyeModeExit>:
 800552c:	2905      	cmp	r1, #5
 800552e:	bf04      	itt	eq
 8005530:	2107      	moveq	r1, #7
 8005532:	f011 b982 	beq.w	801683a <USBPD_PHY_ExitTransmit>
 8005536:	2010      	movs	r0, #16
 8005538:	4770      	bx	lr

0800553a <USBPD_PRL_Reset>:
 800553a:	b538      	push	{r3, r4, r5, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 80059b8 <.text_40>
 8005542:	4621      	mov	r1, r4
 8005544:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8005548:	2200      	movs	r2, #0
 800554a:	716a      	strb	r2, [r5, #5]
 800554c:	702a      	strb	r2, [r5, #0]
 800554e:	712a      	strb	r2, [r5, #4]
 8005550:	72ea      	strb	r2, [r5, #11]
 8005552:	732a      	strb	r2, [r5, #12]
 8005554:	736a      	strb	r2, [r5, #13]
 8005556:	2103      	movs	r1, #3
 8005558:	220f      	movs	r2, #15
 800555a:	1da8      	adds	r0, r5, #6
 800555c:	f000 fa73 	bl	8005a46 <__aeabi_memset>
 8005560:	2200      	movs	r2, #0
 8005562:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 8005566:	4620      	mov	r0, r4
 8005568:	f011 f925 	bl	80167b6 <USBPD_PHY_Reset>
 800556c:	4620      	mov	r0, r4
 800556e:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8005572:	f011 b9c0 	b.w	80168f6 <USBPD_PHY_EnableRX>

08005576 <USBPD_PRL_Stop>:
 8005576:	f011 b9cb 	b.w	8016910 <USBPD_PHY_DisableRX>

0800557a <USBPD_PRL_DeInit>:
 800557a:	4770      	bx	lr

0800557c <PRL_DisableRX>:
 800557c:	f011 b9c8 	b.w	8016910 <USBPD_PHY_DisableRX>

08005580 <PRL_Received>:
 8005580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	4682      	mov	sl, r0
 8005586:	f8df 9430 	ldr.w	r9, [pc, #1072]	; 80059b8 <.text_40>
 800558a:	b084      	sub	sp, #16
 800558c:	4655      	mov	r5, sl
 800558e:	f859 4025 	ldr.w	r4, [r9, r5, lsl #2]
 8005592:	f8df b428 	ldr.w	fp, [pc, #1064]	; 80059bc <.text_41>
 8005596:	4688      	mov	r8, r1
 8005598:	f011 f901 	bl	801679e <USBPD_PHY_GetMinGOODCRCTimerValue>
 800559c:	4601      	mov	r1, r0
 800559e:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80055a2:	b2c0      	uxtb	r0, r0
 80055a4:	f012 fc46 	bl	8017e34 <USBPD_TIM_Start>
 80055a8:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80055ac:	7a30      	ldrb	r0, [r6, #8]
 80055ae:	7a71      	ldrb	r1, [r6, #9]
 80055b0:	eb00 2701 	add.w	r7, r0, r1, lsl #8
 80055b4:	f24f 001f 	movw	r0, #61471	; 0xf01f
 80055b8:	4038      	ands	r0, r7
 80055ba:	2801      	cmp	r0, #1
 80055bc:	d113      	bne.n	80055e6 <PRL_Received+0x66>
 80055be:	0069      	lsls	r1, r5, #1
 80055c0:	1c49      	adds	r1, r1, #1
 80055c2:	b2c8      	uxtb	r0, r1
 80055c4:	f012 fca8 	bl	8017f18 <USBPD_TIM_IsExpired>
 80055c8:	2801      	cmp	r0, #1
 80055ca:	d040      	beq.n	800564e <PRL_Received+0xce>
 80055cc:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 80055d0:	200b      	movs	r0, #11
 80055d2:	7148      	strb	r0, [r1, #5]
 80055d4:	8367      	strh	r7, [r4, #26]
 80055d6:	f000 f96c 	bl	80058b2 <.text_33>
 80055da:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80055de:	4642      	mov	r2, r8
 80055e0:	4651      	mov	r1, sl
 80055e2:	2001      	movs	r0, #1
 80055e4:	e14d      	b.n	8005882 <PRL_Received+0x302>
 80055e6:	f20f 405c 	addw	r0, pc, #1116	; 0x45c
 80055ea:	8805      	ldrh	r5, [r0, #0]
 80055ec:	f24f 001f 	movw	r0, #61471	; 0xf01f
 80055f0:	2101      	movs	r1, #1
 80055f2:	4038      	ands	r0, r7
 80055f4:	72a1      	strb	r1, [r4, #10]
 80055f6:	eb04 0208 	add.w	r2, r4, r8
 80055fa:	280d      	cmp	r0, #13
 80055fc:	9202      	str	r2, [sp, #8]
 80055fe:	d103      	bne.n	8005608 <PRL_Received+0x88>
 8005600:	2100      	movs	r1, #0
 8005602:	72d1      	strb	r1, [r2, #11]
 8005604:	f000 f95b 	bl	80058be <.text_34>
 8005608:	ea5f 0008 	movs.w	r0, r8
 800560c:	d10c      	bne.n	8005628 <PRL_Received+0xa8>
 800560e:	8a60      	ldrh	r0, [r4, #18]
 8005610:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8005614:	f3c0 2200 	ubfx	r2, r0, #8, #1
 8005618:	f64f 60df 	movw	r0, #65247	; 0xfedf
 800561c:	4005      	ands	r5, r0
 800561e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 8005622:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8005626:	e002      	b.n	800562e <PRL_Received+0xae>
 8005628:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800562c:	4015      	ands	r5, r2
 800562e:	f24f 113f 	movw	r1, #61759	; 0xf13f
 8005632:	400d      	ands	r5, r1
 8005634:	f407 6060 	and.w	r0, r7, #3584	; 0xe00
 8005638:	4305      	orrs	r5, r0
 800563a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800563e:	7625      	strb	r5, [r4, #24]
 8005640:	4641      	mov	r1, r8
 8005642:	0a2d      	lsrs	r5, r5, #8
 8005644:	7665      	strb	r5, [r4, #25]
 8005646:	4650      	mov	r0, sl
 8005648:	f7fb fb2b 	bl	8000ca2 <PE_PRL_PostReceiveEvent>
 800564c:	2800      	cmp	r0, #0
 800564e:	f000 811b 	beq.w	8005888 <PRL_Received+0x308>
 8005652:	2001      	movs	r0, #1
 8005654:	7420      	strb	r0, [r4, #16]
 8005656:	ea4f 004a 	mov.w	r0, sl, lsl #1
 800565a:	b2c0      	uxtb	r0, r0
 800565c:	f012 fc5c 	bl	8017f18 <USBPD_TIM_IsExpired>
 8005660:	2800      	cmp	r0, #0
 8005662:	d0f8      	beq.n	8005656 <PRL_Received+0xd6>
 8005664:	2302      	movs	r3, #2
 8005666:	f104 0218 	add.w	r2, r4, #24
 800566a:	4641      	mov	r1, r8
 800566c:	4650      	mov	r0, sl
 800566e:	f011 f8c0 	bl	80167f2 <USBPD_PHY_SendMessage>
 8005672:	9003      	str	r0, [sp, #12]
 8005674:	f884 8009 	strb.w	r8, [r4, #9]
 8005678:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800567c:	4650      	mov	r0, sl
 800567e:	f7fb fb46 	bl	8000d0e <PE_PRL_PostReceiveEventCopy>
 8005682:	7ab0      	ldrb	r0, [r6, #10]
 8005684:	7af1      	ldrb	r1, [r6, #11]
 8005686:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 800568a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800568e:	0438      	lsls	r0, r7, #16
 8005690:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005694:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8005698:	0bc9      	lsrs	r1, r1, #15
 800569a:	0fc0      	lsrs	r0, r0, #31
 800569c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80056a0:	f8ad 1006 	strh.w	r1, [sp, #6]
 80056a4:	d004      	beq.n	80056b0 <PRL_Received+0x130>
 80056a6:	0008      	movs	r0, r1
 80056a8:	d102      	bne.n	80056b0 <PRL_Received+0x130>
 80056aa:	1d29      	adds	r1, r5, #4
 80056ac:	9100      	str	r1, [sp, #0]
 80056ae:	e019      	b.n	80056e4 <PRL_Received+0x164>
 80056b0:	7821      	ldrb	r1, [r4, #0]
 80056b2:	b9a9      	cbnz	r1, 80056e0 <PRL_Received+0x160>
 80056b4:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80056b8:	b190      	cbz	r0, 80056e0 <PRL_Received+0x160>
 80056ba:	f007 001f 	and.w	r0, r7, #31
 80056be:	2803      	cmp	r0, #3
 80056c0:	d10e      	bne.n	80056e0 <PRL_Received+0x160>
 80056c2:	7ab0      	ldrb	r0, [r6, #10]
 80056c4:	7af1      	ldrb	r1, [r6, #11]
 80056c6:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80056ca:	7b30      	ldrb	r0, [r6, #12]
 80056cc:	7b71      	ldrb	r1, [r6, #13]
 80056ce:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 80056d2:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 80056d6:	0f12      	lsrs	r2, r2, #28
 80056d8:	2a08      	cmp	r2, #8
 80056da:	bf04      	itt	eq
 80056dc:	2001      	moveq	r0, #1
 80056de:	7020      	strbeq	r0, [r4, #0]
 80056e0:	f000 f8e7 	bl	80058b2 <.text_33>
 80056e4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80056e8:	f8db c000 	ldr.w	ip, [fp]
 80056ec:	4642      	mov	r2, r8
 80056ee:	4651      	mov	r1, sl
 80056f0:	2001      	movs	r0, #1
 80056f2:	47e0      	blx	ip
 80056f4:	9803      	ldr	r0, [sp, #12]
 80056f6:	b948      	cbnz	r0, 800570c <PRL_Received+0x18c>
 80056f8:	2102      	movs	r1, #2
 80056fa:	9100      	str	r1, [sp, #0]
 80056fc:	f104 0318 	add.w	r3, r4, #24
 8005700:	f8db c000 	ldr.w	ip, [fp]
 8005704:	4642      	mov	r2, r8
 8005706:	4651      	mov	r1, sl
 8005708:	2002      	movs	r0, #2
 800570a:	47e0      	blx	ip
 800570c:	9802      	ldr	r0, [sp, #8]
 800570e:	7981      	ldrb	r1, [r0, #6]
 8005710:	f3c7 2042 	ubfx	r0, r7, #9, #3
 8005714:	4281      	cmp	r1, r0
 8005716:	bf04      	itt	eq
 8005718:	9803      	ldreq	r0, [sp, #12]
 800571a:	2800      	cmpeq	r0, #0
 800571c:	f000 80a2 	beq.w	8005864 <PRL_Received+0x2e4>
 8005720:	0439      	lsls	r1, r7, #16
 8005722:	9a02      	ldr	r2, [sp, #8]
 8005724:	0e49      	lsrs	r1, r1, #25
 8005726:	f001 0107 	and.w	r1, r1, #7
 800572a:	7191      	strb	r1, [r2, #6]
 800572c:	0438      	lsls	r0, r7, #16
 800572e:	8427      	strh	r7, [r4, #32]
 8005730:	0fc0      	lsrs	r0, r0, #31
 8005732:	bf1c      	itt	ne
 8005734:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 8005738:	2800      	cmpne	r0, #0
 800573a:	d06e      	beq.n	800581a <PRL_Received+0x29a>
 800573c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005740:	83e0      	strh	r0, [r4, #30]
 8005742:	201a      	movs	r0, #26
 8005744:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005748:	f411 4ff8 	tst.w	r1, #31744	; 0x7c00
 800574c:	d13c      	bne.n	80057c8 <PRL_Received+0x248>
 800574e:	f3c7 3102 	ubfx	r1, r7, #12, #3
 8005752:	2907      	cmp	r1, #7
 8005754:	d301      	bcc.n	800575a <PRL_Received+0x1da>
 8005756:	2d1a      	cmp	r5, #26
 8005758:	d820      	bhi.n	800579c <PRL_Received+0x21c>
 800575a:	2100      	movs	r1, #0
 800575c:	3434      	adds	r4, #52	; 0x34
 800575e:	e00c      	b.n	800577a <PRL_Received+0x1fa>
 8005760:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005764:	6832      	ldr	r2, [r6, #0]
 8005766:	f814 e001 	ldrb.w	lr, [r4, r1]
 800576a:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 800576e:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005772:	1c49      	adds	r1, r1, #1
 8005774:	f802 e003 	strb.w	lr, [r2, r3]
 8005778:	b289      	uxth	r1, r1
 800577a:	f000 f894 	bl	80058a6 <.text_32>
 800577e:	d3ef      	bcc.n	8005760 <PRL_Received+0x1e0>
 8005780:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005784:	0080      	lsls	r0, r0, #2
 8005786:	1e80      	subs	r0, r0, #2
 8005788:	42a8      	cmp	r0, r5
 800578a:	d204      	bcs.n	8005796 <PRL_Received+0x216>
 800578c:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005790:	0080      	lsls	r0, r0, #2
 8005792:	1e80      	subs	r0, r0, #2
 8005794:	e00f      	b.n	80057b6 <PRL_Received+0x236>
 8005796:	6870      	ldr	r0, [r6, #4]
 8005798:	8005      	strh	r5, [r0, #0]
 800579a:	e00e      	b.n	80057ba <PRL_Received+0x23a>
 800579c:	2101      	movs	r1, #1
 800579e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 80057a2:	2000      	movs	r0, #0
 80057a4:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80057a8:	6833      	ldr	r3, [r6, #0]
 80057aa:	5c0a      	ldrb	r2, [r1, r0]
 80057ac:	541a      	strb	r2, [r3, r0]
 80057ae:	1c40      	adds	r0, r0, #1
 80057b0:	281a      	cmp	r0, #26
 80057b2:	d3f9      	bcc.n	80057a8 <PRL_Received+0x228>
 80057b4:	201a      	movs	r0, #26
 80057b6:	6871      	ldr	r1, [r6, #4]
 80057b8:	8008      	strh	r0, [r1, #0]
 80057ba:	4641      	mov	r1, r8
 80057bc:	4650      	mov	r0, sl
 80057be:	b005      	add	sp, #20
 80057c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	f7fb ba6d 	b.w	8000ca2 <PE_PRL_PostReceiveEvent>
 80057c8:	6871      	ldr	r1, [r6, #4]
 80057ca:	8809      	ldrh	r1, [r1, #0]
 80057cc:	f240 1205 	movw	r2, #261	; 0x105
 80057d0:	f101 031a 	add.w	r3, r1, #26
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bf3f      	itttt	cc
 80057d8:	f3c7 3302 	ubfxcc	r3, r7, #12, #3
 80057dc:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 80057e0:	1e89      	subcc	r1, r1, #2
 80057e2:	42a9      	cmpcc	r1, r5
 80057e4:	d21a      	bcs.n	800581c <PRL_Received+0x29c>
 80057e6:	2101      	movs	r1, #1
 80057e8:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 80057ec:	3434      	adds	r4, #52	; 0x34
 80057ee:	2100      	movs	r1, #0
 80057f0:	e007      	b.n	8005802 <PRL_Received+0x282>
 80057f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80057f6:	6832      	ldr	r2, [r6, #0]
 80057f8:	5c65      	ldrb	r5, [r4, r1]
 80057fa:	f000 f848 	bl	800588e <.text_30>
 80057fe:	54d5      	strb	r5, [r2, r3]
 8005800:	b289      	uxth	r1, r1
 8005802:	f000 f850 	bl	80058a6 <.text_32>
 8005806:	d3f4      	bcc.n	80057f2 <PRL_Received+0x272>
 8005808:	6871      	ldr	r1, [r6, #4]
 800580a:	880a      	ldrh	r2, [r1, #0]
 800580c:	043f      	lsls	r7, r7, #16
 800580e:	0ebf      	lsrs	r7, r7, #26
 8005810:	f007 071c 	and.w	r7, r7, #28
 8005814:	1eb8      	subs	r0, r7, #2
 8005816:	1882      	adds	r2, r0, r2
 8005818:	800a      	strh	r2, [r1, #0]
 800581a:	e035      	b.n	8005888 <PRL_Received+0x308>
 800581c:	6871      	ldr	r1, [r6, #4]
 800581e:	880b      	ldrh	r3, [r1, #0]
 8005820:	f000 f83b 	bl	800589a <.text_31>
 8005824:	4291      	cmp	r1, r2
 8005826:	d219      	bcs.n	800585c <PRL_Received+0x2dc>
 8005828:	f000 f837 	bl	800589a <.text_31>
 800582c:	42a9      	cmp	r1, r5
 800582e:	d315      	bcc.n	800585c <PRL_Received+0x2dc>
 8005830:	2201      	movs	r2, #1
 8005832:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8005836:	2100      	movs	r1, #0
 8005838:	3434      	adds	r4, #52	; 0x34
 800583a:	e009      	b.n	8005850 <PRL_Received+0x2d0>
 800583c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005840:	6832      	ldr	r2, [r6, #0]
 8005842:	f814 a001 	ldrb.w	sl, [r4, r1]
 8005846:	f000 f822 	bl	800588e <.text_30>
 800584a:	f802 a003 	strb.w	sl, [r2, r3]
 800584e:	b289      	uxth	r1, r1
 8005850:	f000 f829 	bl	80058a6 <.text_32>
 8005854:	d3f2      	bcc.n	800583c <PRL_Received+0x2bc>
 8005856:	6870      	ldr	r0, [r6, #4]
 8005858:	8005      	strh	r5, [r0, #0]
 800585a:	e015      	b.n	8005888 <PRL_Received+0x308>
 800585c:	2100      	movs	r1, #0
 800585e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 8005862:	e011      	b.n	8005888 <PRL_Received+0x308>
 8005864:	20ff      	movs	r0, #255	; 0xff
 8005866:	7260      	strb	r0, [r4, #9]
 8005868:	2100      	movs	r1, #0
 800586a:	7421      	strb	r1, [r4, #16]
 800586c:	4650      	mov	r0, sl
 800586e:	f7fb fa38 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005872:	2000      	movs	r0, #0
 8005874:	72a0      	strb	r0, [r4, #10]
 8005876:	2117      	movs	r1, #23
 8005878:	9100      	str	r1, [sp, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	a365      	add	r3, pc, #404	; (adr r3, 8005a14 <.text_43>)
 800587e:	4651      	mov	r1, sl
 8005880:	2006      	movs	r0, #6
 8005882:	f8db 4000 	ldr.w	r4, [fp]
 8005886:	47a0      	blx	r4
 8005888:	b005      	add	sp, #20
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800588e <.text_30>:
 800588e:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 8005892:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005896:	1c49      	adds	r1, r1, #1
 8005898:	4770      	bx	lr

0800589a <.text_31>:
 800589a:	f3c7 3102 	ubfx	r1, r7, #12, #3
 800589e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80058a2:	1e89      	subs	r1, r1, #2
 80058a4:	4770      	bx	lr

080058a6 <.text_32>:
 80058a6:	f3c7 3202 	ubfx	r2, r7, #12, #3
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	1e92      	subs	r2, r2, #2
 80058ae:	4291      	cmp	r1, r2
 80058b0:	4770      	bx	lr

080058b2 <.text_33>:
 80058b2:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80058b6:	0080      	lsls	r0, r0, #2
 80058b8:	1c80      	adds	r0, r0, #2
 80058ba:	9000      	str	r0, [sp, #0]
 80058bc:	4770      	bx	lr

080058be <.text_34>:
 80058be:	220f      	movs	r2, #15
 80058c0:	2103      	movs	r1, #3
 80058c2:	1da0      	adds	r0, r4, #6
 80058c4:	f000 b8bf 	b.w	8005a46 <__aeabi_memset>

080058c8 <PRL_ResetIndicate>:
 80058c8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80058cc:	460d      	mov	r5, r1
 80058ce:	2d05      	cmp	r5, #5
 80058d0:	4680      	mov	r8, r0
 80058d2:	d116      	bne.n	8005902 <PRL_ResetIndicate+0x3a>
 80058d4:	4f38      	ldr	r7, [pc, #224]	; (80059b8 <.text_40>)
 80058d6:	4646      	mov	r6, r8
 80058d8:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 80058dc:	2000      	movs	r0, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	b2c2      	uxtb	r2, r0
 80058e2:	1c40      	adds	r0, r0, #1
 80058e4:	18a2      	adds	r2, r4, r2
 80058e6:	b2c3      	uxtb	r3, r0
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	72d1      	strb	r1, [r2, #11]
 80058ec:	d3f8      	bcc.n	80058e0 <PRL_ResetIndicate+0x18>
 80058ee:	f7ff ffe6 	bl	80058be <.text_34>
 80058f2:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80058f6:	2200      	movs	r2, #0
 80058f8:	7142      	strb	r2, [r0, #5]
 80058fa:	7022      	strb	r2, [r4, #0]
 80058fc:	4640      	mov	r0, r8
 80058fe:	f7ff fe3d 	bl	800557c <PRL_DisableRX>
 8005902:	2000      	movs	r0, #0
 8005904:	4e2d      	ldr	r6, [pc, #180]	; (80059bc <.text_41>)
 8005906:	6837      	ldr	r7, [r6, #0]
 8005908:	9000      	str	r0, [sp, #0]
 800590a:	2300      	movs	r3, #0
 800590c:	462a      	mov	r2, r5
 800590e:	4641      	mov	r1, r8
 8005910:	2001      	movs	r0, #1
 8005912:	47b8      	blx	r7
 8005914:	4629      	mov	r1, r5
 8005916:	4640      	mov	r0, r8
 8005918:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800591c:	f7fb b8c3 	b.w	8000aa6 <PE_PRL_ResetReceived>

08005920 <PRL_ResetCompleted>:
 8005920:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <.text_40>)
 8005922:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005926:	2101      	movs	r1, #1
 8005928:	70c1      	strb	r1, [r0, #3]
 800592a:	4770      	bx	lr

0800592c <PRL_BistCompleted>:
 800592c:	f7fb b8e0 	b.w	8000af0 <PE_PRL_BistCompleted>

08005930 <PRL_TxCompleted>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <.text_40>)
 8005934:	4604      	mov	r4, r0
 8005936:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800593a:	7c2a      	ldrb	r2, [r5, #16]
 800593c:	2a01      	cmp	r2, #1
 800593e:	d002      	beq.n	8005946 <PRL_TxCompleted+0x16>
 8005940:	2a02      	cmp	r2, #2
 8005942:	d009      	beq.n	8005958 <PRL_TxCompleted+0x28>
 8005944:	e010      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005946:	b911      	cbnz	r1, 800594e <PRL_TxCompleted+0x1e>
 8005948:	f7fb f9fe 	bl	8000d48 <PE_PRL_PostReceiveEventComplete>
 800594c:	e001      	b.n	8005952 <PRL_TxCompleted+0x22>
 800594e:	f7fb f9c8 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005952:	2000      	movs	r0, #0
 8005954:	72a8      	strb	r0, [r5, #10]
 8005956:	e007      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005958:	f010 ff14 	bl	8016784 <USBPD_PHY_GetRetryTimerValue>
 800595c:	0064      	lsls	r4, r4, #1
 800595e:	4601      	mov	r1, r0
 8005960:	1c64      	adds	r4, r4, #1
 8005962:	b2e0      	uxtb	r0, r4
 8005964:	f012 fa66 	bl	8017e34 <USBPD_TIM_Start>
 8005968:	2000      	movs	r0, #0
 800596a:	7428      	strb	r0, [r5, #16]
 800596c:	bd31      	pop	{r0, r4, r5, pc}

0800596e <USBPD_PRL_PrepareExtendedTxChunkSending>:
 800596e:	b530      	push	{r4, r5, lr}
 8005970:	4c11      	ldr	r4, [pc, #68]	; (80059b8 <.text_40>)
 8005972:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8005976:	8ba5      	ldrh	r5, [r4, #28]
 8005978:	f248 30ff 	movw	r0, #33791	; 0x83ff
 800597c:	4005      	ands	r5, r0
 800597e:	8a60      	ldrh	r0, [r4, #18]
 8005980:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 8005984:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005988:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
 800598c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005990:	8260      	strh	r0, [r4, #18]
 8005992:	432a      	orrs	r2, r5
 8005994:	8c21      	ldrh	r1, [r4, #32]
 8005996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800599a:	f361 0004 	bfi	r0, r1, #0, #5
 800599e:	83a2      	strh	r2, [r4, #28]
 80059a0:	8260      	strh	r0, [r4, #18]
 80059a2:	7018      	strb	r0, [r3, #0]
 80059a4:	8a60      	ldrh	r0, [r4, #18]
 80059a6:	0a00      	lsrs	r0, r0, #8
 80059a8:	7058      	strb	r0, [r3, #1]
 80059aa:	8ba0      	ldrh	r0, [r4, #28]
 80059ac:	7098      	strb	r0, [r3, #2]
 80059ae:	8ba1      	ldrh	r1, [r4, #28]
 80059b0:	0a09      	lsrs	r1, r1, #8
 80059b2:	70d9      	strb	r1, [r3, #3]
 80059b4:	bd30      	pop	{r4, r5, pc}
	...

080059b8 <.text_40>:
 80059b8:	200002d4 	.word	0x200002d4

080059bc <.text_41>:
 80059bc:	20000000 	.word	0x20000000

080059c0 <USBPD_PRL_PrepareChunkRequest>:
 80059c0:	b530      	push	{r4, r5, lr}
 80059c2:	f7ff fb2d 	bl	8005020 <.text_12>
 80059c6:	8b9c      	ldrh	r4, [r3, #28]
 80059c8:	8bdd      	ldrh	r5, [r3, #30]
 80059ca:	f444 4404 	orr.w	r4, r4, #33792	; 0x8400
 80059ce:	0aed      	lsrs	r5, r5, #11
 80059d0:	839c      	strh	r4, [r3, #28]
 80059d2:	1c6d      	adds	r5, r5, #1
 80059d4:	02ed      	lsls	r5, r5, #11
 80059d6:	f404 4406 	and.w	r4, r4, #34304	; 0x8600
 80059da:	f405 45f0 	and.w	r5, r5, #30720	; 0x7800
 80059de:	432c      	orrs	r4, r5
 80059e0:	839c      	strh	r4, [r3, #28]
 80059e2:	8a5c      	ldrh	r4, [r3, #18]
 80059e4:	8c1d      	ldrh	r5, [r3, #32]
 80059e6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80059ea:	825c      	strh	r4, [r3, #18]
 80059ec:	f365 0404 	bfi	r4, r5, #0, #5
 80059f0:	825c      	strh	r4, [r3, #18]
 80059f2:	2400      	movs	r4, #0
 80059f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80059f8:	7144      	strb	r4, [r0, #5]
 80059fa:	8a5a      	ldrh	r2, [r3, #18]
 80059fc:	700a      	strb	r2, [r1, #0]
 80059fe:	8a58      	ldrh	r0, [r3, #18]
 8005a00:	0a00      	lsrs	r0, r0, #8
 8005a02:	7048      	strb	r0, [r1, #1]
 8005a04:	8b98      	ldrh	r0, [r3, #28]
 8005a06:	7088      	strb	r0, [r1, #2]
 8005a08:	8b9a      	ldrh	r2, [r3, #28]
 8005a0a:	710c      	strb	r4, [r1, #4]
 8005a0c:	0a12      	lsrs	r2, r2, #8
 8005a0e:	714c      	strb	r4, [r1, #5]
 8005a10:	70ca      	strb	r2, [r1, #3]
 8005a12:	bd30      	pop	{r4, r5, pc}

08005a14 <.text_43>:
 8005a14:	5f4c5250 	.word	0x5f4c5250
 8005a18:	4e455645 	.word	0x4e455645
 8005a1c:	58525f54 	.word	0x58525f54
 8005a20:	5349445f 	.word	0x5349445f
 8005a24:	44524143 	.word	0x44524143
 8005a28:	00004445 	.word	0x00004445

08005a2c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8005a2c:	08005581 080058c9 08005921 0800592d     .U...X..!Y..-Y..
 8005a3c:	08005931 0800504d                       1Y..MP..

08005a44 <.text_45>:
 8005a44:	0001      	.short	0x0001

08005a46 <__aeabi_memset>:
 8005a46:	b470      	push	{r4, r5, r6}
 8005a48:	0784      	lsls	r4, r0, #30
 8005a4a:	d046      	beq.n	8005ada <__aeabi_memset+0x94>
 8005a4c:	1e4c      	subs	r4, r1, #1
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d041      	beq.n	8005ad6 <__aeabi_memset+0x90>
 8005a52:	b2d5      	uxtb	r5, r2
 8005a54:	4603      	mov	r3, r0
 8005a56:	e002      	b.n	8005a5e <__aeabi_memset+0x18>
 8005a58:	1e61      	subs	r1, r4, #1
 8005a5a:	b3e4      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	f803 5b01 	strb.w	r5, [r3], #1
 8005a62:	0799      	lsls	r1, r3, #30
 8005a64:	d1f8      	bne.n	8005a58 <__aeabi_memset+0x12>
 8005a66:	2c03      	cmp	r4, #3
 8005a68:	d92e      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005a6a:	b2d5      	uxtb	r5, r2
 8005a6c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005a70:	2c0f      	cmp	r4, #15
 8005a72:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005a76:	d919      	bls.n	8005aac <__aeabi_memset+0x66>
 8005a78:	4626      	mov	r6, r4
 8005a7a:	f103 0110 	add.w	r1, r3, #16
 8005a7e:	3e10      	subs	r6, #16
 8005a80:	2e0f      	cmp	r6, #15
 8005a82:	f841 5c10 	str.w	r5, [r1, #-16]
 8005a86:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005a8a:	f841 5c08 	str.w	r5, [r1, #-8]
 8005a8e:	f841 5c04 	str.w	r5, [r1, #-4]
 8005a92:	f101 0110 	add.w	r1, r1, #16
 8005a96:	d8f2      	bhi.n	8005a7e <__aeabi_memset+0x38>
 8005a98:	f1a4 0110 	sub.w	r1, r4, #16
 8005a9c:	f021 010f 	bic.w	r1, r1, #15
 8005aa0:	f004 040f 	and.w	r4, r4, #15
 8005aa4:	3110      	adds	r1, #16
 8005aa6:	2c03      	cmp	r4, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	d90d      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005aac:	461e      	mov	r6, r3
 8005aae:	4621      	mov	r1, r4
 8005ab0:	3904      	subs	r1, #4
 8005ab2:	2903      	cmp	r1, #3
 8005ab4:	f846 5b04 	str.w	r5, [r6], #4
 8005ab8:	d8fa      	bhi.n	8005ab0 <__aeabi_memset+0x6a>
 8005aba:	1f21      	subs	r1, r4, #4
 8005abc:	f021 0103 	bic.w	r1, r1, #3
 8005ac0:	3104      	adds	r1, #4
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f004 0403 	and.w	r4, r4, #3
 8005ac8:	b12c      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	441c      	add	r4, r3
 8005ace:	f803 2b01 	strb.w	r2, [r3], #1
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	d1fb      	bne.n	8005ace <__aeabi_memset+0x88>
 8005ad6:	bc70      	pop	{r4, r5, r6}
 8005ad8:	4770      	bx	lr
 8005ada:	460c      	mov	r4, r1
 8005adc:	4603      	mov	r3, r0
 8005ade:	e7c2      	b.n	8005a66 <__aeabi_memset+0x20>

08005ae0 <strlen>:
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	d1fb      	bne.n	8005ae2 <strlen+0x2>
 8005aea:	1a18      	subs	r0, r3, r0
 8005aec:	3801      	subs	r0, #1
 8005aee:	4770      	bx	lr

08005af0 <memchr>:
 8005af0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005af4:	2a10      	cmp	r2, #16
 8005af6:	db2b      	blt.n	8005b50 <memchr+0x60>
 8005af8:	f010 0f07 	tst.w	r0, #7
 8005afc:	d008      	beq.n	8005b10 <memchr+0x20>
 8005afe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b02:	3a01      	subs	r2, #1
 8005b04:	428b      	cmp	r3, r1
 8005b06:	d02d      	beq.n	8005b64 <memchr+0x74>
 8005b08:	f010 0f07 	tst.w	r0, #7
 8005b0c:	b342      	cbz	r2, 8005b60 <memchr+0x70>
 8005b0e:	d1f6      	bne.n	8005afe <memchr+0xe>
 8005b10:	b4f0      	push	{r4, r5, r6, r7}
 8005b12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005b16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005b1a:	f022 0407 	bic.w	r4, r2, #7
 8005b1e:	f07f 0700 	mvns.w	r7, #0
 8005b22:	2300      	movs	r3, #0
 8005b24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005b28:	3c08      	subs	r4, #8
 8005b2a:	ea85 0501 	eor.w	r5, r5, r1
 8005b2e:	ea86 0601 	eor.w	r6, r6, r1
 8005b32:	fa85 f547 	uadd8	r5, r5, r7
 8005b36:	faa3 f587 	sel	r5, r3, r7
 8005b3a:	fa86 f647 	uadd8	r6, r6, r7
 8005b3e:	faa5 f687 	sel	r6, r5, r7
 8005b42:	b98e      	cbnz	r6, 8005b68 <memchr+0x78>
 8005b44:	d1ee      	bne.n	8005b24 <memchr+0x34>
 8005b46:	bcf0      	pop	{r4, r5, r6, r7}
 8005b48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005b4c:	f002 0207 	and.w	r2, r2, #7
 8005b50:	b132      	cbz	r2, 8005b60 <memchr+0x70>
 8005b52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b56:	3a01      	subs	r2, #1
 8005b58:	ea83 0301 	eor.w	r3, r3, r1
 8005b5c:	b113      	cbz	r3, 8005b64 <memchr+0x74>
 8005b5e:	d1f8      	bne.n	8005b52 <memchr+0x62>
 8005b60:	2000      	movs	r0, #0
 8005b62:	4770      	bx	lr
 8005b64:	3801      	subs	r0, #1
 8005b66:	4770      	bx	lr
 8005b68:	2d00      	cmp	r5, #0
 8005b6a:	bf06      	itte	eq
 8005b6c:	4635      	moveq	r5, r6
 8005b6e:	3803      	subeq	r0, #3
 8005b70:	3807      	subne	r0, #7
 8005b72:	f015 0f01 	tst.w	r5, #1
 8005b76:	d107      	bne.n	8005b88 <memchr+0x98>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005b7e:	bf02      	ittt	eq
 8005b80:	3001      	addeq	r0, #1
 8005b82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005b86:	3001      	addeq	r0, #1
 8005b88:	bcf0      	pop	{r4, r5, r6, r7}
 8005b8a:	3801      	subs	r0, #1
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop

08005b90 <__aeabi_drsub>:
 8005b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005b94:	e002      	b.n	8005b9c <__adddf3>
 8005b96:	bf00      	nop

08005b98 <__aeabi_dsub>:
 8005b98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005b9c <__adddf3>:
 8005b9c:	b530      	push	{r4, r5, lr}
 8005b9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005ba2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005ba6:	ea94 0f05 	teq	r4, r5
 8005baa:	bf08      	it	eq
 8005bac:	ea90 0f02 	teqeq	r0, r2
 8005bb0:	bf1f      	itttt	ne
 8005bb2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005bb6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005bba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005bbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005bc2:	f000 80e2 	beq.w	8005d8a <__adddf3+0x1ee>
 8005bc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005bca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005bce:	bfb8      	it	lt
 8005bd0:	426d      	neglt	r5, r5
 8005bd2:	dd0c      	ble.n	8005bee <__adddf3+0x52>
 8005bd4:	442c      	add	r4, r5
 8005bd6:	ea80 0202 	eor.w	r2, r0, r2
 8005bda:	ea81 0303 	eor.w	r3, r1, r3
 8005bde:	ea82 0000 	eor.w	r0, r2, r0
 8005be2:	ea83 0101 	eor.w	r1, r3, r1
 8005be6:	ea80 0202 	eor.w	r2, r0, r2
 8005bea:	ea81 0303 	eor.w	r3, r1, r3
 8005bee:	2d36      	cmp	r5, #54	; 0x36
 8005bf0:	bf88      	it	hi
 8005bf2:	bd30      	pophi	{r4, r5, pc}
 8005bf4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005bf8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005bfc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005c00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005c04:	d002      	beq.n	8005c0c <__adddf3+0x70>
 8005c06:	4240      	negs	r0, r0
 8005c08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005c10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005c14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005c18:	d002      	beq.n	8005c20 <__adddf3+0x84>
 8005c1a:	4252      	negs	r2, r2
 8005c1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005c20:	ea94 0f05 	teq	r4, r5
 8005c24:	f000 80a7 	beq.w	8005d76 <__adddf3+0x1da>
 8005c28:	f1a4 0401 	sub.w	r4, r4, #1
 8005c2c:	f1d5 0e20 	rsbs	lr, r5, #32
 8005c30:	db0d      	blt.n	8005c4e <__adddf3+0xb2>
 8005c32:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005c36:	fa22 f205 	lsr.w	r2, r2, r5
 8005c3a:	1880      	adds	r0, r0, r2
 8005c3c:	f141 0100 	adc.w	r1, r1, #0
 8005c40:	fa03 f20e 	lsl.w	r2, r3, lr
 8005c44:	1880      	adds	r0, r0, r2
 8005c46:	fa43 f305 	asr.w	r3, r3, r5
 8005c4a:	4159      	adcs	r1, r3
 8005c4c:	e00e      	b.n	8005c6c <__adddf3+0xd0>
 8005c4e:	f1a5 0520 	sub.w	r5, r5, #32
 8005c52:	f10e 0e20 	add.w	lr, lr, #32
 8005c56:	2a01      	cmp	r2, #1
 8005c58:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005c5c:	bf28      	it	cs
 8005c5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005c62:	fa43 f305 	asr.w	r3, r3, r5
 8005c66:	18c0      	adds	r0, r0, r3
 8005c68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005c6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005c70:	d507      	bpl.n	8005c82 <__adddf3+0xe6>
 8005c72:	f04f 0e00 	mov.w	lr, #0
 8005c76:	f1dc 0c00 	rsbs	ip, ip, #0
 8005c7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005c7e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005c82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005c86:	d31b      	bcc.n	8005cc0 <__adddf3+0x124>
 8005c88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005c8c:	d30c      	bcc.n	8005ca8 <__adddf3+0x10c>
 8005c8e:	0849      	lsrs	r1, r1, #1
 8005c90:	ea5f 0030 	movs.w	r0, r0, rrx
 8005c94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005c98:	f104 0401 	add.w	r4, r4, #1
 8005c9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005ca0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005ca4:	f080 809a 	bcs.w	8005ddc <__adddf3+0x240>
 8005ca8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005cac:	bf08      	it	eq
 8005cae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005cb2:	f150 0000 	adcs.w	r0, r0, #0
 8005cb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005cba:	ea41 0105 	orr.w	r1, r1, r5
 8005cbe:	bd30      	pop	{r4, r5, pc}
 8005cc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005cc4:	4140      	adcs	r0, r0
 8005cc6:	eb41 0101 	adc.w	r1, r1, r1
 8005cca:	3c01      	subs	r4, #1
 8005ccc:	bf28      	it	cs
 8005cce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005cd2:	d2e9      	bcs.n	8005ca8 <__adddf3+0x10c>
 8005cd4:	f091 0f00 	teq	r1, #0
 8005cd8:	bf04      	itt	eq
 8005cda:	4601      	moveq	r1, r0
 8005cdc:	2000      	moveq	r0, #0
 8005cde:	fab1 f381 	clz	r3, r1
 8005ce2:	bf08      	it	eq
 8005ce4:	3320      	addeq	r3, #32
 8005ce6:	f1a3 030b 	sub.w	r3, r3, #11
 8005cea:	f1b3 0220 	subs.w	r2, r3, #32
 8005cee:	da0c      	bge.n	8005d0a <__adddf3+0x16e>
 8005cf0:	320c      	adds	r2, #12
 8005cf2:	dd08      	ble.n	8005d06 <__adddf3+0x16a>
 8005cf4:	f102 0c14 	add.w	ip, r2, #20
 8005cf8:	f1c2 020c 	rsb	r2, r2, #12
 8005cfc:	fa01 f00c 	lsl.w	r0, r1, ip
 8005d00:	fa21 f102 	lsr.w	r1, r1, r2
 8005d04:	e00c      	b.n	8005d20 <__adddf3+0x184>
 8005d06:	f102 0214 	add.w	r2, r2, #20
 8005d0a:	bfd8      	it	le
 8005d0c:	f1c2 0c20 	rsble	ip, r2, #32
 8005d10:	fa01 f102 	lsl.w	r1, r1, r2
 8005d14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005d18:	bfdc      	itt	le
 8005d1a:	ea41 010c 	orrle.w	r1, r1, ip
 8005d1e:	4090      	lslle	r0, r2
 8005d20:	1ae4      	subs	r4, r4, r3
 8005d22:	bfa2      	ittt	ge
 8005d24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005d28:	4329      	orrge	r1, r5
 8005d2a:	bd30      	popge	{r4, r5, pc}
 8005d2c:	ea6f 0404 	mvn.w	r4, r4
 8005d30:	3c1f      	subs	r4, #31
 8005d32:	da1c      	bge.n	8005d6e <__adddf3+0x1d2>
 8005d34:	340c      	adds	r4, #12
 8005d36:	dc0e      	bgt.n	8005d56 <__adddf3+0x1ba>
 8005d38:	f104 0414 	add.w	r4, r4, #20
 8005d3c:	f1c4 0220 	rsb	r2, r4, #32
 8005d40:	fa20 f004 	lsr.w	r0, r0, r4
 8005d44:	fa01 f302 	lsl.w	r3, r1, r2
 8005d48:	ea40 0003 	orr.w	r0, r0, r3
 8005d4c:	fa21 f304 	lsr.w	r3, r1, r4
 8005d50:	ea45 0103 	orr.w	r1, r5, r3
 8005d54:	bd30      	pop	{r4, r5, pc}
 8005d56:	f1c4 040c 	rsb	r4, r4, #12
 8005d5a:	f1c4 0220 	rsb	r2, r4, #32
 8005d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8005d62:	fa01 f304 	lsl.w	r3, r1, r4
 8005d66:	ea40 0003 	orr.w	r0, r0, r3
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	bd30      	pop	{r4, r5, pc}
 8005d6e:	fa21 f004 	lsr.w	r0, r1, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	bd30      	pop	{r4, r5, pc}
 8005d76:	f094 0f00 	teq	r4, #0
 8005d7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005d7e:	bf06      	itte	eq
 8005d80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005d84:	3401      	addeq	r4, #1
 8005d86:	3d01      	subne	r5, #1
 8005d88:	e74e      	b.n	8005c28 <__adddf3+0x8c>
 8005d8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005d8e:	bf18      	it	ne
 8005d90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005d94:	d029      	beq.n	8005dea <__adddf3+0x24e>
 8005d96:	ea94 0f05 	teq	r4, r5
 8005d9a:	bf08      	it	eq
 8005d9c:	ea90 0f02 	teqeq	r0, r2
 8005da0:	d005      	beq.n	8005dae <__adddf3+0x212>
 8005da2:	ea54 0c00 	orrs.w	ip, r4, r0
 8005da6:	bf04      	itt	eq
 8005da8:	4619      	moveq	r1, r3
 8005daa:	4610      	moveq	r0, r2
 8005dac:	bd30      	pop	{r4, r5, pc}
 8005dae:	ea91 0f03 	teq	r1, r3
 8005db2:	bf1e      	ittt	ne
 8005db4:	2100      	movne	r1, #0
 8005db6:	2000      	movne	r0, #0
 8005db8:	bd30      	popne	{r4, r5, pc}
 8005dba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005dbe:	d105      	bne.n	8005dcc <__adddf3+0x230>
 8005dc0:	0040      	lsls	r0, r0, #1
 8005dc2:	4149      	adcs	r1, r1
 8005dc4:	bf28      	it	cs
 8005dc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005dca:	bd30      	pop	{r4, r5, pc}
 8005dcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005dd0:	bf3c      	itt	cc
 8005dd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005dd6:	bd30      	popcc	{r4, r5, pc}
 8005dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ddc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005de0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005de4:	f04f 0000 	mov.w	r0, #0
 8005de8:	bd30      	pop	{r4, r5, pc}
 8005dea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005dee:	bf1a      	itte	ne
 8005df0:	4619      	movne	r1, r3
 8005df2:	4610      	movne	r0, r2
 8005df4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005df8:	bf1c      	itt	ne
 8005dfa:	460b      	movne	r3, r1
 8005dfc:	4602      	movne	r2, r0
 8005dfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005e02:	bf06      	itte	eq
 8005e04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005e08:	ea91 0f03 	teqeq	r1, r3
 8005e0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005e10:	bd30      	pop	{r4, r5, pc}
 8005e12:	bf00      	nop

08005e14 <__aeabi_ui2d>:
 8005e14:	f090 0f00 	teq	r0, #0
 8005e18:	bf04      	itt	eq
 8005e1a:	2100      	moveq	r1, #0
 8005e1c:	4770      	bxeq	lr
 8005e1e:	b530      	push	{r4, r5, lr}
 8005e20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005e24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005e28:	f04f 0500 	mov.w	r5, #0
 8005e2c:	f04f 0100 	mov.w	r1, #0
 8005e30:	e750      	b.n	8005cd4 <__adddf3+0x138>
 8005e32:	bf00      	nop

08005e34 <__aeabi_i2d>:
 8005e34:	f090 0f00 	teq	r0, #0
 8005e38:	bf04      	itt	eq
 8005e3a:	2100      	moveq	r1, #0
 8005e3c:	4770      	bxeq	lr
 8005e3e:	b530      	push	{r4, r5, lr}
 8005e40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005e44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005e48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005e4c:	bf48      	it	mi
 8005e4e:	4240      	negmi	r0, r0
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	e73e      	b.n	8005cd4 <__adddf3+0x138>
 8005e56:	bf00      	nop

08005e58 <__aeabi_f2d>:
 8005e58:	0042      	lsls	r2, r0, #1
 8005e5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005e5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005e62:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005e66:	bf1f      	itttt	ne
 8005e68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005e6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005e70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005e74:	4770      	bxne	lr
 8005e76:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005e7a:	bf08      	it	eq
 8005e7c:	4770      	bxeq	lr
 8005e7e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005e82:	bf04      	itt	eq
 8005e84:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005e88:	4770      	bxeq	lr
 8005e8a:	b530      	push	{r4, r5, lr}
 8005e8c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005e90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005e94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e98:	e71c      	b.n	8005cd4 <__adddf3+0x138>
 8005e9a:	bf00      	nop

08005e9c <__aeabi_ul2d>:
 8005e9c:	ea50 0201 	orrs.w	r2, r0, r1
 8005ea0:	bf08      	it	eq
 8005ea2:	4770      	bxeq	lr
 8005ea4:	b530      	push	{r4, r5, lr}
 8005ea6:	f04f 0500 	mov.w	r5, #0
 8005eaa:	e00a      	b.n	8005ec2 <__aeabi_l2d+0x16>

08005eac <__aeabi_l2d>:
 8005eac:	ea50 0201 	orrs.w	r2, r0, r1
 8005eb0:	bf08      	it	eq
 8005eb2:	4770      	bxeq	lr
 8005eb4:	b530      	push	{r4, r5, lr}
 8005eb6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005eba:	d502      	bpl.n	8005ec2 <__aeabi_l2d+0x16>
 8005ebc:	4240      	negs	r0, r0
 8005ebe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005ec2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005ec6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005eca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005ece:	f43f aed8 	beq.w	8005c82 <__adddf3+0xe6>
 8005ed2:	f04f 0203 	mov.w	r2, #3
 8005ed6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005eda:	bf18      	it	ne
 8005edc:	3203      	addne	r2, #3
 8005ede:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005ee2:	bf18      	it	ne
 8005ee4:	3203      	addne	r2, #3
 8005ee6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005eea:	f1c2 0320 	rsb	r3, r2, #32
 8005eee:	fa00 fc03 	lsl.w	ip, r0, r3
 8005ef2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ef6:	fa01 fe03 	lsl.w	lr, r1, r3
 8005efa:	ea40 000e 	orr.w	r0, r0, lr
 8005efe:	fa21 f102 	lsr.w	r1, r1, r2
 8005f02:	4414      	add	r4, r2
 8005f04:	e6bd      	b.n	8005c82 <__adddf3+0xe6>
 8005f06:	bf00      	nop

08005f08 <__aeabi_dmul>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005f0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005f12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005f16:	bf1d      	ittte	ne
 8005f18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005f1c:	ea94 0f0c 	teqne	r4, ip
 8005f20:	ea95 0f0c 	teqne	r5, ip
 8005f24:	f000 f8de 	bleq	80060e4 <__aeabi_dmul+0x1dc>
 8005f28:	442c      	add	r4, r5
 8005f2a:	ea81 0603 	eor.w	r6, r1, r3
 8005f2e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005f32:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005f36:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005f3a:	bf18      	it	ne
 8005f3c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005f40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f48:	d038      	beq.n	8005fbc <__aeabi_dmul+0xb4>
 8005f4a:	fba0 ce02 	umull	ip, lr, r0, r2
 8005f4e:	f04f 0500 	mov.w	r5, #0
 8005f52:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005f56:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005f5a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005f5e:	f04f 0600 	mov.w	r6, #0
 8005f62:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005f66:	f09c 0f00 	teq	ip, #0
 8005f6a:	bf18      	it	ne
 8005f6c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005f70:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005f74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005f78:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005f7c:	d204      	bcs.n	8005f88 <__aeabi_dmul+0x80>
 8005f7e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005f82:	416d      	adcs	r5, r5
 8005f84:	eb46 0606 	adc.w	r6, r6, r6
 8005f88:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005f8c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005f90:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005f94:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005f98:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005f9c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005fa0:	bf88      	it	hi
 8005fa2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005fa6:	d81e      	bhi.n	8005fe6 <__aeabi_dmul+0xde>
 8005fa8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005fac:	bf08      	it	eq
 8005fae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005fb2:	f150 0000 	adcs.w	r0, r0, #0
 8005fb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005fc0:	ea46 0101 	orr.w	r1, r6, r1
 8005fc4:	ea40 0002 	orr.w	r0, r0, r2
 8005fc8:	ea81 0103 	eor.w	r1, r1, r3
 8005fcc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005fd0:	bfc2      	ittt	gt
 8005fd2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005fd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005fda:	bd70      	popgt	{r4, r5, r6, pc}
 8005fdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005fe0:	f04f 0e00 	mov.w	lr, #0
 8005fe4:	3c01      	subs	r4, #1
 8005fe6:	f300 80ab 	bgt.w	8006140 <__aeabi_dmul+0x238>
 8005fea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005fee:	bfde      	ittt	le
 8005ff0:	2000      	movle	r0, #0
 8005ff2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005ff6:	bd70      	pople	{r4, r5, r6, pc}
 8005ff8:	f1c4 0400 	rsb	r4, r4, #0
 8005ffc:	3c20      	subs	r4, #32
 8005ffe:	da35      	bge.n	800606c <__aeabi_dmul+0x164>
 8006000:	340c      	adds	r4, #12
 8006002:	dc1b      	bgt.n	800603c <__aeabi_dmul+0x134>
 8006004:	f104 0414 	add.w	r4, r4, #20
 8006008:	f1c4 0520 	rsb	r5, r4, #32
 800600c:	fa00 f305 	lsl.w	r3, r0, r5
 8006010:	fa20 f004 	lsr.w	r0, r0, r4
 8006014:	fa01 f205 	lsl.w	r2, r1, r5
 8006018:	ea40 0002 	orr.w	r0, r0, r2
 800601c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006020:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006024:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006028:	fa21 f604 	lsr.w	r6, r1, r4
 800602c:	eb42 0106 	adc.w	r1, r2, r6
 8006030:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006034:	bf08      	it	eq
 8006036:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f1c4 040c 	rsb	r4, r4, #12
 8006040:	f1c4 0520 	rsb	r5, r4, #32
 8006044:	fa00 f304 	lsl.w	r3, r0, r4
 8006048:	fa20 f005 	lsr.w	r0, r0, r5
 800604c:	fa01 f204 	lsl.w	r2, r1, r4
 8006050:	ea40 0002 	orr.w	r0, r0, r2
 8006054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006058:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800605c:	f141 0100 	adc.w	r1, r1, #0
 8006060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006064:	bf08      	it	eq
 8006066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f1c4 0520 	rsb	r5, r4, #32
 8006070:	fa00 f205 	lsl.w	r2, r0, r5
 8006074:	ea4e 0e02 	orr.w	lr, lr, r2
 8006078:	fa20 f304 	lsr.w	r3, r0, r4
 800607c:	fa01 f205 	lsl.w	r2, r1, r5
 8006080:	ea43 0302 	orr.w	r3, r3, r2
 8006084:	fa21 f004 	lsr.w	r0, r1, r4
 8006088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800608c:	fa21 f204 	lsr.w	r2, r1, r4
 8006090:	ea20 0002 	bic.w	r0, r0, r2
 8006094:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006098:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800609c:	bf08      	it	eq
 800609e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	f094 0f00 	teq	r4, #0
 80060a8:	d10f      	bne.n	80060ca <__aeabi_dmul+0x1c2>
 80060aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80060ae:	0040      	lsls	r0, r0, #1
 80060b0:	eb41 0101 	adc.w	r1, r1, r1
 80060b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80060b8:	bf08      	it	eq
 80060ba:	3c01      	subeq	r4, #1
 80060bc:	d0f7      	beq.n	80060ae <__aeabi_dmul+0x1a6>
 80060be:	ea41 0106 	orr.w	r1, r1, r6
 80060c2:	f095 0f00 	teq	r5, #0
 80060c6:	bf18      	it	ne
 80060c8:	4770      	bxne	lr
 80060ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80060ce:	0052      	lsls	r2, r2, #1
 80060d0:	eb43 0303 	adc.w	r3, r3, r3
 80060d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80060d8:	bf08      	it	eq
 80060da:	3d01      	subeq	r5, #1
 80060dc:	d0f7      	beq.n	80060ce <__aeabi_dmul+0x1c6>
 80060de:	ea43 0306 	orr.w	r3, r3, r6
 80060e2:	4770      	bx	lr
 80060e4:	ea94 0f0c 	teq	r4, ip
 80060e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80060ec:	bf18      	it	ne
 80060ee:	ea95 0f0c 	teqne	r5, ip
 80060f2:	d00c      	beq.n	800610e <__aeabi_dmul+0x206>
 80060f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80060f8:	bf18      	it	ne
 80060fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80060fe:	d1d1      	bne.n	80060a4 <__aeabi_dmul+0x19c>
 8006100:	ea81 0103 	eor.w	r1, r1, r3
 8006104:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006108:	f04f 0000 	mov.w	r0, #0
 800610c:	bd70      	pop	{r4, r5, r6, pc}
 800610e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006112:	bf06      	itte	eq
 8006114:	4610      	moveq	r0, r2
 8006116:	4619      	moveq	r1, r3
 8006118:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800611c:	d019      	beq.n	8006152 <__aeabi_dmul+0x24a>
 800611e:	ea94 0f0c 	teq	r4, ip
 8006122:	d102      	bne.n	800612a <__aeabi_dmul+0x222>
 8006124:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006128:	d113      	bne.n	8006152 <__aeabi_dmul+0x24a>
 800612a:	ea95 0f0c 	teq	r5, ip
 800612e:	d105      	bne.n	800613c <__aeabi_dmul+0x234>
 8006130:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006134:	bf1c      	itt	ne
 8006136:	4610      	movne	r0, r2
 8006138:	4619      	movne	r1, r3
 800613a:	d10a      	bne.n	8006152 <__aeabi_dmul+0x24a>
 800613c:	ea81 0103 	eor.w	r1, r1, r3
 8006140:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006144:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006148:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800614c:	f04f 0000 	mov.w	r0, #0
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006156:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800615a:	bd70      	pop	{r4, r5, r6, pc}

0800615c <__aeabi_ddiv>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800616a:	bf1d      	ittte	ne
 800616c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006170:	ea94 0f0c 	teqne	r4, ip
 8006174:	ea95 0f0c 	teqne	r5, ip
 8006178:	f000 f8a7 	bleq	80062ca <__aeabi_ddiv+0x16e>
 800617c:	eba4 0405 	sub.w	r4, r4, r5
 8006180:	ea81 0e03 	eor.w	lr, r1, r3
 8006184:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006188:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800618c:	f000 8088 	beq.w	80062a0 <__aeabi_ddiv+0x144>
 8006190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006194:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006198:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800619c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80061a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80061a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80061a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80061ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80061b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80061b4:	429d      	cmp	r5, r3
 80061b6:	bf08      	it	eq
 80061b8:	4296      	cmpeq	r6, r2
 80061ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80061be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80061c2:	d202      	bcs.n	80061ca <__aeabi_ddiv+0x6e>
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80061ca:	1ab6      	subs	r6, r6, r2
 80061cc:	eb65 0503 	sbc.w	r5, r5, r3
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80061d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80061da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80061de:	ebb6 0e02 	subs.w	lr, r6, r2
 80061e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80061e6:	bf22      	ittt	cs
 80061e8:	1ab6      	subcs	r6, r6, r2
 80061ea:	4675      	movcs	r5, lr
 80061ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80061f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80061fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80061fe:	bf22      	ittt	cs
 8006200:	1ab6      	subcs	r6, r6, r2
 8006202:	4675      	movcs	r5, lr
 8006204:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	ea4f 0232 	mov.w	r2, r2, rrx
 800620e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006212:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006216:	bf22      	ittt	cs
 8006218:	1ab6      	subcs	r6, r6, r2
 800621a:	4675      	movcs	r5, lr
 800621c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	ea4f 0232 	mov.w	r2, r2, rrx
 8006226:	ebb6 0e02 	subs.w	lr, r6, r2
 800622a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800622e:	bf22      	ittt	cs
 8006230:	1ab6      	subcs	r6, r6, r2
 8006232:	4675      	movcs	r5, lr
 8006234:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006238:	ea55 0e06 	orrs.w	lr, r5, r6
 800623c:	d018      	beq.n	8006270 <__aeabi_ddiv+0x114>
 800623e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006242:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006246:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800624a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800624e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006252:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006256:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800625a:	d1c0      	bne.n	80061de <__aeabi_ddiv+0x82>
 800625c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006260:	d10b      	bne.n	800627a <__aeabi_ddiv+0x11e>
 8006262:	ea41 0100 	orr.w	r1, r1, r0
 8006266:	f04f 0000 	mov.w	r0, #0
 800626a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800626e:	e7b6      	b.n	80061de <__aeabi_ddiv+0x82>
 8006270:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006274:	bf04      	itt	eq
 8006276:	4301      	orreq	r1, r0
 8006278:	2000      	moveq	r0, #0
 800627a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800627e:	bf88      	it	hi
 8006280:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006284:	f63f aeaf 	bhi.w	8005fe6 <__aeabi_dmul+0xde>
 8006288:	ebb5 0c03 	subs.w	ip, r5, r3
 800628c:	bf04      	itt	eq
 800628e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006296:	f150 0000 	adcs.w	r0, r0, #0
 800629a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80062a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80062a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80062ac:	bfc2      	ittt	gt
 80062ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80062b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80062b6:	bd70      	popgt	{r4, r5, r6, pc}
 80062b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80062bc:	f04f 0e00 	mov.w	lr, #0
 80062c0:	3c01      	subs	r4, #1
 80062c2:	e690      	b.n	8005fe6 <__aeabi_dmul+0xde>
 80062c4:	ea45 0e06 	orr.w	lr, r5, r6
 80062c8:	e68d      	b.n	8005fe6 <__aeabi_dmul+0xde>
 80062ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80062ce:	ea94 0f0c 	teq	r4, ip
 80062d2:	bf08      	it	eq
 80062d4:	ea95 0f0c 	teqeq	r5, ip
 80062d8:	f43f af3b 	beq.w	8006152 <__aeabi_dmul+0x24a>
 80062dc:	ea94 0f0c 	teq	r4, ip
 80062e0:	d10a      	bne.n	80062f8 <__aeabi_ddiv+0x19c>
 80062e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80062e6:	f47f af34 	bne.w	8006152 <__aeabi_dmul+0x24a>
 80062ea:	ea95 0f0c 	teq	r5, ip
 80062ee:	f47f af25 	bne.w	800613c <__aeabi_dmul+0x234>
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	e72c      	b.n	8006152 <__aeabi_dmul+0x24a>
 80062f8:	ea95 0f0c 	teq	r5, ip
 80062fc:	d106      	bne.n	800630c <__aeabi_ddiv+0x1b0>
 80062fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006302:	f43f aefd 	beq.w	8006100 <__aeabi_dmul+0x1f8>
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	e722      	b.n	8006152 <__aeabi_dmul+0x24a>
 800630c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006310:	bf18      	it	ne
 8006312:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006316:	f47f aec5 	bne.w	80060a4 <__aeabi_dmul+0x19c>
 800631a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800631e:	f47f af0d 	bne.w	800613c <__aeabi_dmul+0x234>
 8006322:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006326:	f47f aeeb 	bne.w	8006100 <__aeabi_dmul+0x1f8>
 800632a:	e712      	b.n	8006152 <__aeabi_dmul+0x24a>

0800632c <__gedf2>:
 800632c:	f04f 3cff 	mov.w	ip, #4294967295
 8006330:	e006      	b.n	8006340 <__cmpdf2+0x4>
 8006332:	bf00      	nop

08006334 <__ledf2>:
 8006334:	f04f 0c01 	mov.w	ip, #1
 8006338:	e002      	b.n	8006340 <__cmpdf2+0x4>
 800633a:	bf00      	nop

0800633c <__cmpdf2>:
 800633c:	f04f 0c01 	mov.w	ip, #1
 8006340:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006344:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800634c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006350:	bf18      	it	ne
 8006352:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006356:	d01b      	beq.n	8006390 <__cmpdf2+0x54>
 8006358:	b001      	add	sp, #4
 800635a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800635e:	bf0c      	ite	eq
 8006360:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006364:	ea91 0f03 	teqne	r1, r3
 8006368:	bf02      	ittt	eq
 800636a:	ea90 0f02 	teqeq	r0, r2
 800636e:	2000      	moveq	r0, #0
 8006370:	4770      	bxeq	lr
 8006372:	f110 0f00 	cmn.w	r0, #0
 8006376:	ea91 0f03 	teq	r1, r3
 800637a:	bf58      	it	pl
 800637c:	4299      	cmppl	r1, r3
 800637e:	bf08      	it	eq
 8006380:	4290      	cmpeq	r0, r2
 8006382:	bf2c      	ite	cs
 8006384:	17d8      	asrcs	r0, r3, #31
 8006386:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800638a:	f040 0001 	orr.w	r0, r0, #1
 800638e:	4770      	bx	lr
 8006390:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006394:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006398:	d102      	bne.n	80063a0 <__cmpdf2+0x64>
 800639a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800639e:	d107      	bne.n	80063b0 <__cmpdf2+0x74>
 80063a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80063a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80063a8:	d1d6      	bne.n	8006358 <__cmpdf2+0x1c>
 80063aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80063ae:	d0d3      	beq.n	8006358 <__cmpdf2+0x1c>
 80063b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop

080063b8 <__aeabi_cdrcmple>:
 80063b8:	4684      	mov	ip, r0
 80063ba:	4610      	mov	r0, r2
 80063bc:	4662      	mov	r2, ip
 80063be:	468c      	mov	ip, r1
 80063c0:	4619      	mov	r1, r3
 80063c2:	4663      	mov	r3, ip
 80063c4:	e000      	b.n	80063c8 <__aeabi_cdcmpeq>
 80063c6:	bf00      	nop

080063c8 <__aeabi_cdcmpeq>:
 80063c8:	b501      	push	{r0, lr}
 80063ca:	f7ff ffb7 	bl	800633c <__cmpdf2>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	bf48      	it	mi
 80063d2:	f110 0f00 	cmnmi.w	r0, #0
 80063d6:	bd01      	pop	{r0, pc}

080063d8 <__aeabi_dcmpeq>:
 80063d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80063dc:	f7ff fff4 	bl	80063c8 <__aeabi_cdcmpeq>
 80063e0:	bf0c      	ite	eq
 80063e2:	2001      	moveq	r0, #1
 80063e4:	2000      	movne	r0, #0
 80063e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80063ea:	bf00      	nop

080063ec <__aeabi_dcmplt>:
 80063ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80063f0:	f7ff ffea 	bl	80063c8 <__aeabi_cdcmpeq>
 80063f4:	bf34      	ite	cc
 80063f6:	2001      	movcc	r0, #1
 80063f8:	2000      	movcs	r0, #0
 80063fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80063fe:	bf00      	nop

08006400 <__aeabi_dcmple>:
 8006400:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006404:	f7ff ffe0 	bl	80063c8 <__aeabi_cdcmpeq>
 8006408:	bf94      	ite	ls
 800640a:	2001      	movls	r0, #1
 800640c:	2000      	movhi	r0, #0
 800640e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006412:	bf00      	nop

08006414 <__aeabi_dcmpge>:
 8006414:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006418:	f7ff ffce 	bl	80063b8 <__aeabi_cdrcmple>
 800641c:	bf94      	ite	ls
 800641e:	2001      	movls	r0, #1
 8006420:	2000      	movhi	r0, #0
 8006422:	f85d fb08 	ldr.w	pc, [sp], #8
 8006426:	bf00      	nop

08006428 <__aeabi_dcmpgt>:
 8006428:	f84d ed08 	str.w	lr, [sp, #-8]!
 800642c:	f7ff ffc4 	bl	80063b8 <__aeabi_cdrcmple>
 8006430:	bf34      	ite	cc
 8006432:	2001      	movcc	r0, #1
 8006434:	2000      	movcs	r0, #0
 8006436:	f85d fb08 	ldr.w	pc, [sp], #8
 800643a:	bf00      	nop

0800643c <__aeabi_d2uiz>:
 800643c:	004a      	lsls	r2, r1, #1
 800643e:	d211      	bcs.n	8006464 <__aeabi_d2uiz+0x28>
 8006440:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006444:	d211      	bcs.n	800646a <__aeabi_d2uiz+0x2e>
 8006446:	d50d      	bpl.n	8006464 <__aeabi_d2uiz+0x28>
 8006448:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800644c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006450:	d40e      	bmi.n	8006470 <__aeabi_d2uiz+0x34>
 8006452:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800645a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800645e:	fa23 f002 	lsr.w	r0, r3, r2
 8006462:	4770      	bx	lr
 8006464:	f04f 0000 	mov.w	r0, #0
 8006468:	4770      	bx	lr
 800646a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800646e:	d102      	bne.n	8006476 <__aeabi_d2uiz+0x3a>
 8006470:	f04f 30ff 	mov.w	r0, #4294967295
 8006474:	4770      	bx	lr
 8006476:	f04f 0000 	mov.w	r0, #0
 800647a:	4770      	bx	lr

0800647c <__aeabi_d2f>:
 800647c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006480:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006484:	bf24      	itt	cs
 8006486:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800648a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800648e:	d90d      	bls.n	80064ac <__aeabi_d2f+0x30>
 8006490:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006494:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006498:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800649c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80064a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80064a4:	bf08      	it	eq
 80064a6:	f020 0001 	biceq.w	r0, r0, #1
 80064aa:	4770      	bx	lr
 80064ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80064b0:	d121      	bne.n	80064f6 <__aeabi_d2f+0x7a>
 80064b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80064b6:	bfbc      	itt	lt
 80064b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80064bc:	4770      	bxlt	lr
 80064be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80064c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80064c6:	f1c2 0218 	rsb	r2, r2, #24
 80064ca:	f1c2 0c20 	rsb	ip, r2, #32
 80064ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80064d2:	fa20 f002 	lsr.w	r0, r0, r2
 80064d6:	bf18      	it	ne
 80064d8:	f040 0001 	orrne.w	r0, r0, #1
 80064dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80064e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80064e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80064e8:	ea40 000c 	orr.w	r0, r0, ip
 80064ec:	fa23 f302 	lsr.w	r3, r3, r2
 80064f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064f4:	e7cc      	b.n	8006490 <__aeabi_d2f+0x14>
 80064f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80064fa:	d107      	bne.n	800650c <__aeabi_d2f+0x90>
 80064fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006500:	bf1e      	ittt	ne
 8006502:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006506:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800650a:	4770      	bxne	lr
 800650c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006510:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <__aeabi_uldivmod>:
 800651c:	b953      	cbnz	r3, 8006534 <__aeabi_uldivmod+0x18>
 800651e:	b94a      	cbnz	r2, 8006534 <__aeabi_uldivmod+0x18>
 8006520:	2900      	cmp	r1, #0
 8006522:	bf08      	it	eq
 8006524:	2800      	cmpeq	r0, #0
 8006526:	bf1c      	itt	ne
 8006528:	f04f 31ff 	movne.w	r1, #4294967295
 800652c:	f04f 30ff 	movne.w	r0, #4294967295
 8006530:	f000 b970 	b.w	8006814 <__aeabi_idiv0>
 8006534:	f1ad 0c08 	sub.w	ip, sp, #8
 8006538:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800653c:	f000 f806 	bl	800654c <__udivmoddi4>
 8006540:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006548:	b004      	add	sp, #16
 800654a:	4770      	bx	lr

0800654c <__udivmoddi4>:
 800654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006550:	9e08      	ldr	r6, [sp, #32]
 8006552:	460d      	mov	r5, r1
 8006554:	4604      	mov	r4, r0
 8006556:	460f      	mov	r7, r1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d14a      	bne.n	80065f2 <__udivmoddi4+0xa6>
 800655c:	428a      	cmp	r2, r1
 800655e:	4694      	mov	ip, r2
 8006560:	d965      	bls.n	800662e <__udivmoddi4+0xe2>
 8006562:	fab2 f382 	clz	r3, r2
 8006566:	b143      	cbz	r3, 800657a <__udivmoddi4+0x2e>
 8006568:	fa02 fc03 	lsl.w	ip, r2, r3
 800656c:	f1c3 0220 	rsb	r2, r3, #32
 8006570:	409f      	lsls	r7, r3
 8006572:	fa20 f202 	lsr.w	r2, r0, r2
 8006576:	4317      	orrs	r7, r2
 8006578:	409c      	lsls	r4, r3
 800657a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800657e:	fa1f f58c 	uxth.w	r5, ip
 8006582:	fbb7 f1fe 	udiv	r1, r7, lr
 8006586:	0c22      	lsrs	r2, r4, #16
 8006588:	fb0e 7711 	mls	r7, lr, r1, r7
 800658c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006590:	fb01 f005 	mul.w	r0, r1, r5
 8006594:	4290      	cmp	r0, r2
 8006596:	d90a      	bls.n	80065ae <__udivmoddi4+0x62>
 8006598:	eb1c 0202 	adds.w	r2, ip, r2
 800659c:	f101 37ff 	add.w	r7, r1, #4294967295
 80065a0:	f080 811c 	bcs.w	80067dc <__udivmoddi4+0x290>
 80065a4:	4290      	cmp	r0, r2
 80065a6:	f240 8119 	bls.w	80067dc <__udivmoddi4+0x290>
 80065aa:	3902      	subs	r1, #2
 80065ac:	4462      	add	r2, ip
 80065ae:	1a12      	subs	r2, r2, r0
 80065b0:	b2a4      	uxth	r4, r4
 80065b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80065b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80065ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80065be:	fb00 f505 	mul.w	r5, r0, r5
 80065c2:	42a5      	cmp	r5, r4
 80065c4:	d90a      	bls.n	80065dc <__udivmoddi4+0x90>
 80065c6:	eb1c 0404 	adds.w	r4, ip, r4
 80065ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80065ce:	f080 8107 	bcs.w	80067e0 <__udivmoddi4+0x294>
 80065d2:	42a5      	cmp	r5, r4
 80065d4:	f240 8104 	bls.w	80067e0 <__udivmoddi4+0x294>
 80065d8:	4464      	add	r4, ip
 80065da:	3802      	subs	r0, #2
 80065dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80065e0:	1b64      	subs	r4, r4, r5
 80065e2:	2100      	movs	r1, #0
 80065e4:	b11e      	cbz	r6, 80065ee <__udivmoddi4+0xa2>
 80065e6:	40dc      	lsrs	r4, r3
 80065e8:	2300      	movs	r3, #0
 80065ea:	e9c6 4300 	strd	r4, r3, [r6]
 80065ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f2:	428b      	cmp	r3, r1
 80065f4:	d908      	bls.n	8006608 <__udivmoddi4+0xbc>
 80065f6:	2e00      	cmp	r6, #0
 80065f8:	f000 80ed 	beq.w	80067d6 <__udivmoddi4+0x28a>
 80065fc:	2100      	movs	r1, #0
 80065fe:	e9c6 0500 	strd	r0, r5, [r6]
 8006602:	4608      	mov	r0, r1
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006608:	fab3 f183 	clz	r1, r3
 800660c:	2900      	cmp	r1, #0
 800660e:	d149      	bne.n	80066a4 <__udivmoddi4+0x158>
 8006610:	42ab      	cmp	r3, r5
 8006612:	d302      	bcc.n	800661a <__udivmoddi4+0xce>
 8006614:	4282      	cmp	r2, r0
 8006616:	f200 80f8 	bhi.w	800680a <__udivmoddi4+0x2be>
 800661a:	1a84      	subs	r4, r0, r2
 800661c:	eb65 0203 	sbc.w	r2, r5, r3
 8006620:	2001      	movs	r0, #1
 8006622:	4617      	mov	r7, r2
 8006624:	2e00      	cmp	r6, #0
 8006626:	d0e2      	beq.n	80065ee <__udivmoddi4+0xa2>
 8006628:	e9c6 4700 	strd	r4, r7, [r6]
 800662c:	e7df      	b.n	80065ee <__udivmoddi4+0xa2>
 800662e:	b902      	cbnz	r2, 8006632 <__udivmoddi4+0xe6>
 8006630:	deff      	udf	#255	; 0xff
 8006632:	fab2 f382 	clz	r3, r2
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 8090 	bne.w	800675c <__udivmoddi4+0x210>
 800663c:	1a8a      	subs	r2, r1, r2
 800663e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006642:	fa1f fe8c 	uxth.w	lr, ip
 8006646:	2101      	movs	r1, #1
 8006648:	fbb2 f5f7 	udiv	r5, r2, r7
 800664c:	fb07 2015 	mls	r0, r7, r5, r2
 8006650:	0c22      	lsrs	r2, r4, #16
 8006652:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006656:	fb0e f005 	mul.w	r0, lr, r5
 800665a:	4290      	cmp	r0, r2
 800665c:	d908      	bls.n	8006670 <__udivmoddi4+0x124>
 800665e:	eb1c 0202 	adds.w	r2, ip, r2
 8006662:	f105 38ff 	add.w	r8, r5, #4294967295
 8006666:	d202      	bcs.n	800666e <__udivmoddi4+0x122>
 8006668:	4290      	cmp	r0, r2
 800666a:	f200 80cb 	bhi.w	8006804 <__udivmoddi4+0x2b8>
 800666e:	4645      	mov	r5, r8
 8006670:	1a12      	subs	r2, r2, r0
 8006672:	b2a4      	uxth	r4, r4
 8006674:	fbb2 f0f7 	udiv	r0, r2, r7
 8006678:	fb07 2210 	mls	r2, r7, r0, r2
 800667c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006680:	fb0e fe00 	mul.w	lr, lr, r0
 8006684:	45a6      	cmp	lr, r4
 8006686:	d908      	bls.n	800669a <__udivmoddi4+0x14e>
 8006688:	eb1c 0404 	adds.w	r4, ip, r4
 800668c:	f100 32ff 	add.w	r2, r0, #4294967295
 8006690:	d202      	bcs.n	8006698 <__udivmoddi4+0x14c>
 8006692:	45a6      	cmp	lr, r4
 8006694:	f200 80bb 	bhi.w	800680e <__udivmoddi4+0x2c2>
 8006698:	4610      	mov	r0, r2
 800669a:	eba4 040e 	sub.w	r4, r4, lr
 800669e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80066a2:	e79f      	b.n	80065e4 <__udivmoddi4+0x98>
 80066a4:	f1c1 0720 	rsb	r7, r1, #32
 80066a8:	408b      	lsls	r3, r1
 80066aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80066ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80066b2:	fa05 f401 	lsl.w	r4, r5, r1
 80066b6:	fa20 f307 	lsr.w	r3, r0, r7
 80066ba:	40fd      	lsrs	r5, r7
 80066bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80066c0:	4323      	orrs	r3, r4
 80066c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80066c6:	fa1f fe8c 	uxth.w	lr, ip
 80066ca:	fb09 5518 	mls	r5, r9, r8, r5
 80066ce:	0c1c      	lsrs	r4, r3, #16
 80066d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80066d4:	fb08 f50e 	mul.w	r5, r8, lr
 80066d8:	42a5      	cmp	r5, r4
 80066da:	fa02 f201 	lsl.w	r2, r2, r1
 80066de:	fa00 f001 	lsl.w	r0, r0, r1
 80066e2:	d90b      	bls.n	80066fc <__udivmoddi4+0x1b0>
 80066e4:	eb1c 0404 	adds.w	r4, ip, r4
 80066e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80066ec:	f080 8088 	bcs.w	8006800 <__udivmoddi4+0x2b4>
 80066f0:	42a5      	cmp	r5, r4
 80066f2:	f240 8085 	bls.w	8006800 <__udivmoddi4+0x2b4>
 80066f6:	f1a8 0802 	sub.w	r8, r8, #2
 80066fa:	4464      	add	r4, ip
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	b29d      	uxth	r5, r3
 8006700:	fbb4 f3f9 	udiv	r3, r4, r9
 8006704:	fb09 4413 	mls	r4, r9, r3, r4
 8006708:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800670c:	fb03 fe0e 	mul.w	lr, r3, lr
 8006710:	45a6      	cmp	lr, r4
 8006712:	d908      	bls.n	8006726 <__udivmoddi4+0x1da>
 8006714:	eb1c 0404 	adds.w	r4, ip, r4
 8006718:	f103 35ff 	add.w	r5, r3, #4294967295
 800671c:	d26c      	bcs.n	80067f8 <__udivmoddi4+0x2ac>
 800671e:	45a6      	cmp	lr, r4
 8006720:	d96a      	bls.n	80067f8 <__udivmoddi4+0x2ac>
 8006722:	3b02      	subs	r3, #2
 8006724:	4464      	add	r4, ip
 8006726:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800672a:	fba3 9502 	umull	r9, r5, r3, r2
 800672e:	eba4 040e 	sub.w	r4, r4, lr
 8006732:	42ac      	cmp	r4, r5
 8006734:	46c8      	mov	r8, r9
 8006736:	46ae      	mov	lr, r5
 8006738:	d356      	bcc.n	80067e8 <__udivmoddi4+0x29c>
 800673a:	d053      	beq.n	80067e4 <__udivmoddi4+0x298>
 800673c:	b156      	cbz	r6, 8006754 <__udivmoddi4+0x208>
 800673e:	ebb0 0208 	subs.w	r2, r0, r8
 8006742:	eb64 040e 	sbc.w	r4, r4, lr
 8006746:	fa04 f707 	lsl.w	r7, r4, r7
 800674a:	40ca      	lsrs	r2, r1
 800674c:	40cc      	lsrs	r4, r1
 800674e:	4317      	orrs	r7, r2
 8006750:	e9c6 7400 	strd	r7, r4, [r6]
 8006754:	4618      	mov	r0, r3
 8006756:	2100      	movs	r1, #0
 8006758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675c:	f1c3 0120 	rsb	r1, r3, #32
 8006760:	fa02 fc03 	lsl.w	ip, r2, r3
 8006764:	fa20 f201 	lsr.w	r2, r0, r1
 8006768:	fa25 f101 	lsr.w	r1, r5, r1
 800676c:	409d      	lsls	r5, r3
 800676e:	432a      	orrs	r2, r5
 8006770:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006774:	fa1f fe8c 	uxth.w	lr, ip
 8006778:	fbb1 f0f7 	udiv	r0, r1, r7
 800677c:	fb07 1510 	mls	r5, r7, r0, r1
 8006780:	0c11      	lsrs	r1, r2, #16
 8006782:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006786:	fb00 f50e 	mul.w	r5, r0, lr
 800678a:	428d      	cmp	r5, r1
 800678c:	fa04 f403 	lsl.w	r4, r4, r3
 8006790:	d908      	bls.n	80067a4 <__udivmoddi4+0x258>
 8006792:	eb1c 0101 	adds.w	r1, ip, r1
 8006796:	f100 38ff 	add.w	r8, r0, #4294967295
 800679a:	d22f      	bcs.n	80067fc <__udivmoddi4+0x2b0>
 800679c:	428d      	cmp	r5, r1
 800679e:	d92d      	bls.n	80067fc <__udivmoddi4+0x2b0>
 80067a0:	3802      	subs	r0, #2
 80067a2:	4461      	add	r1, ip
 80067a4:	1b49      	subs	r1, r1, r5
 80067a6:	b292      	uxth	r2, r2
 80067a8:	fbb1 f5f7 	udiv	r5, r1, r7
 80067ac:	fb07 1115 	mls	r1, r7, r5, r1
 80067b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80067b4:	fb05 f10e 	mul.w	r1, r5, lr
 80067b8:	4291      	cmp	r1, r2
 80067ba:	d908      	bls.n	80067ce <__udivmoddi4+0x282>
 80067bc:	eb1c 0202 	adds.w	r2, ip, r2
 80067c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80067c4:	d216      	bcs.n	80067f4 <__udivmoddi4+0x2a8>
 80067c6:	4291      	cmp	r1, r2
 80067c8:	d914      	bls.n	80067f4 <__udivmoddi4+0x2a8>
 80067ca:	3d02      	subs	r5, #2
 80067cc:	4462      	add	r2, ip
 80067ce:	1a52      	subs	r2, r2, r1
 80067d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80067d4:	e738      	b.n	8006648 <__udivmoddi4+0xfc>
 80067d6:	4631      	mov	r1, r6
 80067d8:	4630      	mov	r0, r6
 80067da:	e708      	b.n	80065ee <__udivmoddi4+0xa2>
 80067dc:	4639      	mov	r1, r7
 80067de:	e6e6      	b.n	80065ae <__udivmoddi4+0x62>
 80067e0:	4610      	mov	r0, r2
 80067e2:	e6fb      	b.n	80065dc <__udivmoddi4+0x90>
 80067e4:	4548      	cmp	r0, r9
 80067e6:	d2a9      	bcs.n	800673c <__udivmoddi4+0x1f0>
 80067e8:	ebb9 0802 	subs.w	r8, r9, r2
 80067ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80067f0:	3b01      	subs	r3, #1
 80067f2:	e7a3      	b.n	800673c <__udivmoddi4+0x1f0>
 80067f4:	4645      	mov	r5, r8
 80067f6:	e7ea      	b.n	80067ce <__udivmoddi4+0x282>
 80067f8:	462b      	mov	r3, r5
 80067fa:	e794      	b.n	8006726 <__udivmoddi4+0x1da>
 80067fc:	4640      	mov	r0, r8
 80067fe:	e7d1      	b.n	80067a4 <__udivmoddi4+0x258>
 8006800:	46d0      	mov	r8, sl
 8006802:	e77b      	b.n	80066fc <__udivmoddi4+0x1b0>
 8006804:	3d02      	subs	r5, #2
 8006806:	4462      	add	r2, ip
 8006808:	e732      	b.n	8006670 <__udivmoddi4+0x124>
 800680a:	4608      	mov	r0, r1
 800680c:	e70a      	b.n	8006624 <__udivmoddi4+0xd8>
 800680e:	4464      	add	r4, ip
 8006810:	3802      	subs	r0, #2
 8006812:	e742      	b.n	800669a <__udivmoddi4+0x14e>

08006814 <__aeabi_idiv0>:
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop

08006818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <__NVIC_GetPriorityGrouping+0x18>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	0a1b      	lsrs	r3, r3, #8
 8006822:	f003 0307 	and.w	r3, r3, #7
}
 8006826:	4618      	mov	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	e000ed00 	.word	0xe000ed00

08006834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800683e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006842:	2b00      	cmp	r3, #0
 8006844:	db0b      	blt.n	800685e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	f003 021f 	and.w	r2, r3, #31
 800684c:	4907      	ldr	r1, [pc, #28]	; (800686c <__NVIC_EnableIRQ+0x38>)
 800684e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	2001      	movs	r0, #1
 8006856:	fa00 f202 	lsl.w	r2, r0, r2
 800685a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	e000e100 	.word	0xe000e100

08006870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	6039      	str	r1, [r7, #0]
 800687a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800687c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006880:	2b00      	cmp	r3, #0
 8006882:	db0a      	blt.n	800689a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	490c      	ldr	r1, [pc, #48]	; (80068bc <__NVIC_SetPriority+0x4c>)
 800688a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688e:	0112      	lsls	r2, r2, #4
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	440b      	add	r3, r1
 8006894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006898:	e00a      	b.n	80068b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	4908      	ldr	r1, [pc, #32]	; (80068c0 <__NVIC_SetPriority+0x50>)
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	3b04      	subs	r3, #4
 80068a8:	0112      	lsls	r2, r2, #4
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	440b      	add	r3, r1
 80068ae:	761a      	strb	r2, [r3, #24]
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	e000e100 	.word	0xe000e100
 80068c0:	e000ed00 	.word	0xe000ed00

080068c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b089      	sub	sp, #36	; 0x24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f1c3 0307 	rsb	r3, r3, #7
 80068de:	2b04      	cmp	r3, #4
 80068e0:	bf28      	it	cs
 80068e2:	2304      	movcs	r3, #4
 80068e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	3304      	adds	r3, #4
 80068ea:	2b06      	cmp	r3, #6
 80068ec:	d902      	bls.n	80068f4 <NVIC_EncodePriority+0x30>
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	3b03      	subs	r3, #3
 80068f2:	e000      	b.n	80068f6 <NVIC_EncodePriority+0x32>
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006902:	43da      	mvns	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	401a      	ands	r2, r3
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800690c:	f04f 31ff 	mov.w	r1, #4294967295
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	43d9      	mvns	r1, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800691c:	4313      	orrs	r3, r2
         );
}
 800691e:	4618      	mov	r0, r3
 8006920:	3724      	adds	r7, #36	; 0x24
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006930:	f3bf 8f4f 	dsb	sy
}
 8006934:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006936:	4b06      	ldr	r3, [pc, #24]	; (8006950 <__NVIC_SystemReset+0x24>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800693e:	4904      	ldr	r1, [pc, #16]	; (8006950 <__NVIC_SystemReset+0x24>)
 8006940:	4b04      	ldr	r3, [pc, #16]	; (8006954 <__NVIC_SystemReset+0x28>)
 8006942:	4313      	orrs	r3, r2
 8006944:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006946:	f3bf 8f4f 	dsb	sy
}
 800694a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800694c:	bf00      	nop
 800694e:	e7fd      	b.n	800694c <__NVIC_SystemReset+0x20>
 8006950:	e000ed00 	.word	0xe000ed00
 8006954:	05fa0004 	.word	0x05fa0004

08006958 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006960:	4b08      	ldr	r3, [pc, #32]	; (8006984 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006964:	4907      	ldr	r1, [pc, #28]	; (8006984 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4313      	orrs	r3, r2
 800696a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800696e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4013      	ands	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006976:	68fb      	ldr	r3, [r7, #12]
}
 8006978:	bf00      	nop
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40021000 	.word	0x40021000

08006988 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006990:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8006992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006994:	4907      	ldr	r1, [pc, #28]	; (80069b4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4313      	orrs	r3, r2
 800699a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <LL_APB1_GRP2_EnableClock+0x2c>)
 800699e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4013      	ands	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069a6:	68fb      	ldr	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40021000 	.word	0x40021000

080069b8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80069c8:	4a0e      	ldr	r2, [pc, #56]	; (8006a04 <LL_DMA_SetDataTransferDirection+0x4c>)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	4413      	add	r3, r2
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069dc:	f023 0310 	bic.w	r3, r3, #16
 80069e0:	4908      	ldr	r1, [pc, #32]	; (8006a04 <LL_DMA_SetDataTransferDirection+0x4c>)
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	440a      	add	r2, r1
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	4611      	mov	r1, r2
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	440a      	add	r2, r1
 80069ee:	4611      	mov	r1, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	08020b64 	.word	0x08020b64

08006a08 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8006a18:	4a0d      	ldr	r2, [pc, #52]	; (8006a50 <LL_DMA_SetMode+0x48>)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f023 0220 	bic.w	r2, r3, #32
 8006a2c:	4908      	ldr	r1, [pc, #32]	; (8006a50 <LL_DMA_SetMode+0x48>)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	440b      	add	r3, r1
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	4619      	mov	r1, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	440b      	add	r3, r1
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	600b      	str	r3, [r1, #0]
             Mode);
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	08020b64 	.word	0x08020b64

08006a54 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8006a64:	4a0d      	ldr	r2, [pc, #52]	; (8006a9c <LL_DMA_SetPeriphIncMode+0x48>)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4413      	add	r3, r2
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006a78:	4908      	ldr	r1, [pc, #32]	; (8006a9c <LL_DMA_SetPeriphIncMode+0x48>)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	440b      	add	r3, r1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	4619      	mov	r1, r3
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	440b      	add	r3, r1
 8006a86:	4619      	mov	r1, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	08020b64 	.word	0x08020b64

08006aa0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8006ab0:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <LL_DMA_SetMemoryIncMode+0x48>)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ac4:	4908      	ldr	r1, [pc, #32]	; (8006ae8 <LL_DMA_SetMemoryIncMode+0x48>)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	440b      	add	r3, r1
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	4619      	mov	r1, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	440b      	add	r3, r1
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	08020b64 	.word	0x08020b64

08006aec <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8006afc:	4a0d      	ldr	r2, [pc, #52]	; (8006b34 <LL_DMA_SetPeriphSize+0x48>)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b10:	4908      	ldr	r1, [pc, #32]	; (8006b34 <LL_DMA_SetPeriphSize+0x48>)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	440b      	add	r3, r1
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	440b      	add	r3, r1
 8006b1e:	4619      	mov	r1, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	08020b64 	.word	0x08020b64

08006b38 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8006b48:	4a0d      	ldr	r2, [pc, #52]	; (8006b80 <LL_DMA_SetMemorySize+0x48>)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4413      	add	r3, r2
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b5c:	4908      	ldr	r1, [pc, #32]	; (8006b80 <LL_DMA_SetMemorySize+0x48>)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	440b      	add	r3, r1
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	4619      	mov	r1, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	440b      	add	r3, r1
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	08020b64 	.word	0x08020b64

08006b84 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8006b94:	4a0d      	ldr	r2, [pc, #52]	; (8006bcc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4413      	add	r3, r2
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ba8:	4908      	ldr	r1, [pc, #32]	; (8006bcc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	440b      	add	r3, r1
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	440b      	add	r3, r1
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]
             Priority);
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	08020b64 	.word	0x08020b64

08006bd0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	0a9b      	lsrs	r3, r3, #10
 8006be0:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006be4:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bf8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c0e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	601a      	str	r2, [r3, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c28:	f002 faf3 	bl	8009212 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c2c:	f000 f8ee 	bl	8006e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c30:	f000 fdca 	bl	80077c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006c34:	f000 fd42 	bl	80076bc <MX_DMA_Init>
  MX_UART4_Init();
 8006c38:	f000 fbc2 	bl	80073c0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8006c3c:	f000 fc0c 	bl	8007458 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 8006c40:	f000 fcac 	bl	800759c <MX_UCPD1_Init>
  MX_ADC1_Init();
 8006c44:	f000 f92e 	bl	8006ea4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006c48:	f000 f9b4 	bl	8006fb4 <MX_ADC2_Init>
  MX_ADC5_Init();
 8006c4c:	f000 fa18 	bl	8007080 <MX_ADC5_Init>
  MX_I2C4_Init();
 8006c50:	f000 fa7c 	bl	800714c <MX_I2C4_Init>
  MX_TIM3_Init();
 8006c54:	f000 faba 	bl	80071cc <MX_TIM3_Init>
  MX_TIM5_Init();
 8006c58:	f000 fb3a 	bl	80072d0 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8006c5c:	f000 fc4e 	bl	80074fc <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8006c60:	f017 fe62 	bl	801e928 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  //------------------------------------------------------------------------------------- INIT

  while(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin)){}
 8006c64:	bf00      	nop
 8006c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c6a:	4843      	ldr	r0, [pc, #268]	; (8006d78 <main+0x154>)
 8006c6c:	f004 ff22 	bl	800bab4 <HAL_GPIO_ReadPin>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f7      	bne.n	8006c66 <main+0x42>

  LED_init(4);
 8006c76:	2004      	movs	r0, #4
 8006c78:	f016 faee 	bl	801d258 <LED_init>

  UNICARD1data.OCR = UC1OCR_manual;
 8006c7c:	4b3f      	ldr	r3, [pc, #252]	; (8006d7c <main+0x158>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  UNICARD1data.OCRrecoveryTime_ms = 1000;
 8006c84:	4b3d      	ldr	r3, [pc, #244]	; (8006d7c <main+0x158>)
 8006c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  RS485cfg.huart = &huart2;
 8006c8e:	4b3c      	ldr	r3, [pc, #240]	; (8006d80 <main+0x15c>)
 8006c90:	4a3c      	ldr	r2, [pc, #240]	; (8006d84 <main+0x160>)
 8006c92:	601a      	str	r2, [r3, #0]
  RS485cfg.TXbuffSize = TXbuffSIZE;
 8006c94:	4b3a      	ldr	r3, [pc, #232]	; (8006d80 <main+0x15c>)
 8006c96:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006c9a:	811a      	strh	r2, [r3, #8]
  RS485cfg.TXbuffer = RS485TXbuffer;
 8006c9c:	4b38      	ldr	r3, [pc, #224]	; (8006d80 <main+0x15c>)
 8006c9e:	4a3a      	ldr	r2, [pc, #232]	; (8006d88 <main+0x164>)
 8006ca0:	605a      	str	r2, [r3, #4]
  RS485cfg.RXbuffSize = RXbuffSIZE;
 8006ca2:	4b37      	ldr	r3, [pc, #220]	; (8006d80 <main+0x15c>)
 8006ca4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ca8:	821a      	strh	r2, [r3, #16]
  RS485cfg.RXbuffer = RS485RXbuffer;
 8006caa:	4b35      	ldr	r3, [pc, #212]	; (8006d80 <main+0x15c>)
 8006cac:	4a37      	ldr	r2, [pc, #220]	; (8006d8c <main+0x168>)
 8006cae:	60da      	str	r2, [r3, #12]

  RS485_Init(&RS485cfg);
 8006cb0:	4833      	ldr	r0, [pc, #204]	; (8006d80 <main+0x15c>)
 8006cb2:	f016 fa4b 	bl	801d14c <RS485_Init>

  UDEV1SCPI_init();
 8006cb6:	f017 fa37 	bl	801e128 <UDEV1SCPI_init>
  //HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&adc2_data, 1);

  //HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
  //HAL_ADC_Start_DMA(&hadc5, (uint32_t *)&adc5_data, 1);

  HAL_Delay(500);
 8006cba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cbe:	f002 fadf 	bl	8009280 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006cc2:	f012 fde5 	bl	8019890 <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8006cc6:	f017 fa3b 	bl	801e140 <MX_USBPD_Init>
  /* Create the mutex(es) */
  /* creation of mutex_RS485 */
  mutex_RS485Handle = osMutexNew(&mutex_RS485_attributes);
 8006cca:	4831      	ldr	r0, [pc, #196]	; (8006d90 <main+0x16c>)
 8006ccc:	f012 ff04 	bl	8019ad8 <osMutexNew>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4a30      	ldr	r2, [pc, #192]	; (8006d94 <main+0x170>)
 8006cd4:	6013      	str	r3, [r2, #0]

  /* creation of mutex_USB */
  mutex_USBHandle = osMutexNew(&mutex_USB_attributes);
 8006cd6:	4830      	ldr	r0, [pc, #192]	; (8006d98 <main+0x174>)
 8006cd8:	f012 fefe 	bl	8019ad8 <osMutexNew>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	4a2f      	ldr	r2, [pc, #188]	; (8006d9c <main+0x178>)
 8006ce0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_USBcom */
  task_USBcomHandle = osThreadNew(StartDefaultTask, NULL, &task_USBcom_attributes);
 8006ce2:	4a2f      	ldr	r2, [pc, #188]	; (8006da0 <main+0x17c>)
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	482f      	ldr	r0, [pc, #188]	; (8006da4 <main+0x180>)
 8006ce8:	f012 fe1c 	bl	8019924 <osThreadNew>
 8006cec:	4603      	mov	r3, r0
 8006cee:	4a2e      	ldr	r2, [pc, #184]	; (8006da8 <main+0x184>)
 8006cf0:	6013      	str	r3, [r2, #0]

  /* creation of LEDcontrol */
  LEDcontrolHandle = osThreadNew(task_LEDcontrol, NULL, &LEDcontrol_attributes);
 8006cf2:	4a2e      	ldr	r2, [pc, #184]	; (8006dac <main+0x188>)
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	482e      	ldr	r0, [pc, #184]	; (8006db0 <main+0x18c>)
 8006cf8:	f012 fe14 	bl	8019924 <osThreadNew>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4a2d      	ldr	r2, [pc, #180]	; (8006db4 <main+0x190>)
 8006d00:	6013      	str	r3, [r2, #0]

  /* creation of Current_Check */
  Current_CheckHandle = osThreadNew(task_Current_Check, NULL, &Current_Check_attributes);
 8006d02:	4a2d      	ldr	r2, [pc, #180]	; (8006db8 <main+0x194>)
 8006d04:	2100      	movs	r1, #0
 8006d06:	482d      	ldr	r0, [pc, #180]	; (8006dbc <main+0x198>)
 8006d08:	f012 fe0c 	bl	8019924 <osThreadNew>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	4a2c      	ldr	r2, [pc, #176]	; (8006dc0 <main+0x19c>)
 8006d10:	6013      	str	r3, [r2, #0]

  /* creation of BUTTON */
  BUTTONHandle = osThreadNew(task_BUTTON, NULL, &BUTTON_attributes);
 8006d12:	4a2c      	ldr	r2, [pc, #176]	; (8006dc4 <main+0x1a0>)
 8006d14:	2100      	movs	r1, #0
 8006d16:	482c      	ldr	r0, [pc, #176]	; (8006dc8 <main+0x1a4>)
 8006d18:	f012 fe04 	bl	8019924 <osThreadNew>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	4a2b      	ldr	r2, [pc, #172]	; (8006dcc <main+0x1a8>)
 8006d20:	6013      	str	r3, [r2, #0]

  /* creation of StateMachine */
  StateMachineHandle = osThreadNew(task_StateMachine, NULL, &StateMachine_attributes);
 8006d22:	4a2b      	ldr	r2, [pc, #172]	; (8006dd0 <main+0x1ac>)
 8006d24:	2100      	movs	r1, #0
 8006d26:	482b      	ldr	r0, [pc, #172]	; (8006dd4 <main+0x1b0>)
 8006d28:	f012 fdfc 	bl	8019924 <osThreadNew>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <main+0x1b4>)
 8006d30:	6013      	str	r3, [r2, #0]

  /* creation of PCconnectionWat */
  PCconnectionWatHandle = osThreadNew(task_PCconnectionWatchDog, NULL, &PCconnectionWat_attributes);
 8006d32:	4a2a      	ldr	r2, [pc, #168]	; (8006ddc <main+0x1b8>)
 8006d34:	2100      	movs	r1, #0
 8006d36:	482a      	ldr	r0, [pc, #168]	; (8006de0 <main+0x1bc>)
 8006d38:	f012 fdf4 	bl	8019924 <osThreadNew>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <main+0x1c0>)
 8006d40:	6013      	str	r3, [r2, #0]

  /* creation of CardConnectionW */
  CardConnectionWHandle = osThreadNew(taks_CardConnectionWatchDog, NULL, &CardConnectionW_attributes);
 8006d42:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <main+0x1c4>)
 8006d44:	2100      	movs	r1, #0
 8006d46:	4829      	ldr	r0, [pc, #164]	; (8006dec <main+0x1c8>)
 8006d48:	f012 fdec 	bl	8019924 <osThreadNew>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	4a28      	ldr	r2, [pc, #160]	; (8006df0 <main+0x1cc>)
 8006d50:	6013      	str	r3, [r2, #0]

  /* creation of CardConnectionC */
  CardConnectionCHandle = osThreadNew(task_CardConnectionCheck, NULL, &CardConnectionC_attributes);
 8006d52:	4a28      	ldr	r2, [pc, #160]	; (8006df4 <main+0x1d0>)
 8006d54:	2100      	movs	r1, #0
 8006d56:	4828      	ldr	r0, [pc, #160]	; (8006df8 <main+0x1d4>)
 8006d58:	f012 fde4 	bl	8019924 <osThreadNew>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	4a27      	ldr	r2, [pc, #156]	; (8006dfc <main+0x1d8>)
 8006d60:	6013      	str	r3, [r2, #0]

  /* creation of CardUpdateStatu */
  CardUpdateStatuHandle = osThreadNew(task_CardUpdateStatus, NULL, &CardUpdateStatu_attributes);
 8006d62:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <main+0x1dc>)
 8006d64:	2100      	movs	r1, #0
 8006d66:	4827      	ldr	r0, [pc, #156]	; (8006e04 <main+0x1e0>)
 8006d68:	f012 fddc 	bl	8019924 <osThreadNew>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <main+0x1e4>)
 8006d70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8006d72:	f012 fdb1 	bl	80198d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006d76:	e7fe      	b.n	8006d76 <main+0x152>
 8006d78:	48000800 	.word	0x48000800
 8006d7c:	200009c4 	.word	0x200009c4
 8006d80:	20000a18 	.word	0x20000a18
 8006d84:	20000758 	.word	0x20000758
 8006d88:	20000a2c 	.word	0x20000a2c
 8006d8c:	20001008 	.word	0x20001008
 8006d90:	08020cb0 	.word	0x08020cb0
 8006d94:	20000990 	.word	0x20000990
 8006d98:	08020cc0 	.word	0x08020cc0
 8006d9c:	20000994 	.word	0x20000994
 8006da0:	08020b6c 	.word	0x08020b6c
 8006da4:	08007cb1 	.word	0x08007cb1
 8006da8:	2000096c 	.word	0x2000096c
 8006dac:	08020b90 	.word	0x08020b90
 8006db0:	08007cc3 	.word	0x08007cc3
 8006db4:	20000970 	.word	0x20000970
 8006db8:	08020bb4 	.word	0x08020bb4
 8006dbc:	08007cf1 	.word	0x08007cf1
 8006dc0:	20000974 	.word	0x20000974
 8006dc4:	08020bd8 	.word	0x08020bd8
 8006dc8:	08007de1 	.word	0x08007de1
 8006dcc:	20000978 	.word	0x20000978
 8006dd0:	08020bfc 	.word	0x08020bfc
 8006dd4:	08007e45 	.word	0x08007e45
 8006dd8:	2000097c 	.word	0x2000097c
 8006ddc:	08020c20 	.word	0x08020c20
 8006de0:	08008131 	.word	0x08008131
 8006de4:	20000980 	.word	0x20000980
 8006de8:	08020c44 	.word	0x08020c44
 8006dec:	08008175 	.word	0x08008175
 8006df0:	20000984 	.word	0x20000984
 8006df4:	08020c68 	.word	0x08020c68
 8006df8:	080081c5 	.word	0x080081c5
 8006dfc:	20000988 	.word	0x20000988
 8006e00:	08020c8c 	.word	0x08020c8c
 8006e04:	08008311 	.word	0x08008311
 8006e08:	2000098c 	.word	0x2000098c

08006e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b094      	sub	sp, #80	; 0x50
 8006e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e12:	f107 0318 	add.w	r3, r7, #24
 8006e16:	2238      	movs	r2, #56	; 0x38
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f018 fc48 	bl	801f6b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e20:	1d3b      	adds	r3, r7, #4
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	605a      	str	r2, [r3, #4]
 8006e28:	609a      	str	r2, [r3, #8]
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e32:	f006 fcd5 	bl	800d7e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006e36:	2302      	movs	r3, #2
 8006e38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006e40:	2340      	movs	r3, #64	; 0x40
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e44:	2302      	movs	r3, #2
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8006e50:	2312      	movs	r3, #18
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e54:	2302      	movs	r3, #2
 8006e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8006e58:	2306      	movs	r3, #6
 8006e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e60:	f107 0318 	add.w	r3, r7, #24
 8006e64:	4618      	mov	r0, r3
 8006e66:	f006 fd6f 	bl	800d948 <HAL_RCC_OscConfig>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8006e70:	f001 fb2c 	bl	80084cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e74:	230f      	movs	r3, #15
 8006e76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006e88:	1d3b      	adds	r3, r7, #4
 8006e8a:	2104      	movs	r1, #4
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f007 f86d 	bl	800df6c <HAL_RCC_ClockConfig>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8006e98:	f001 fb18 	bl	80084cc <Error_Handler>
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	3750      	adds	r7, #80	; 0x50
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08c      	sub	sp, #48	; 0x30
 8006ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8006eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	605a      	str	r2, [r3, #4]
 8006eb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006eb6:	1d3b      	adds	r3, r7, #4
 8006eb8:	2220      	movs	r2, #32
 8006eba:	2100      	movs	r1, #0
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f018 fbf7 	bl	801f6b0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8006ec2:	4b39      	ldr	r3, [pc, #228]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006ec4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ec8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8006eca:	4b37      	ldr	r3, [pc, #220]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006ecc:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8006ed0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006ed2:	4b35      	ldr	r3, [pc, #212]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ed8:	4b33      	ldr	r3, [pc, #204]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006ede:	4b32      	ldr	r3, [pc, #200]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006ee4:	4b30      	ldr	r3, [pc, #192]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006eea:	4b2f      	ldr	r3, [pc, #188]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006eec:	2204      	movs	r2, #4
 8006eee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006ef0:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006ef6:	4b2c      	ldr	r3, [pc, #176]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8006efc:	4b2a      	ldr	r3, [pc, #168]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006efe:	2202      	movs	r2, #2
 8006f00:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006f02:	4b29      	ldr	r3, [pc, #164]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006f10:	4b25      	ldr	r3, [pc, #148]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006f16:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006f1e:	4b22      	ldr	r3, [pc, #136]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006f24:	4b20      	ldr	r3, [pc, #128]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006f2c:	481e      	ldr	r0, [pc, #120]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f2e:	f002 fc55 	bl	80097dc <HAL_ADC_Init>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8006f38:	f001 fac8 	bl	80084cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f44:	4619      	mov	r1, r3
 8006f46:	4818      	ldr	r0, [pc, #96]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f48:	f003 ff18 	bl	800ad7c <HAL_ADCEx_MultiModeConfigChannel>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8006f52:	f001 fabb 	bl	80084cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006f56:	4b15      	ldr	r3, [pc, #84]	; (8006fac <MX_ADC1_Init+0x108>)
 8006f58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006f5a:	2306      	movs	r3, #6
 8006f5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006f62:	237f      	movs	r3, #127	; 0x7f
 8006f64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006f66:	2304      	movs	r3, #4
 8006f68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f6e:	1d3b      	adds	r3, r7, #4
 8006f70:	4619      	mov	r1, r3
 8006f72:	480d      	ldr	r0, [pc, #52]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f74:	f003 f940 	bl	800a1f8 <HAL_ADC_ConfigChannel>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8006f7e:	f001 faa5 	bl	80084cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <MX_ADC1_Init+0x10c>)
 8006f84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006f86:	230c      	movs	r3, #12
 8006f88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f8a:	1d3b      	adds	r3, r7, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4806      	ldr	r0, [pc, #24]	; (8006fa8 <MX_ADC1_Init+0x104>)
 8006f90:	f003 f932 	bl	800a1f8 <HAL_ADC_ConfigChannel>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8006f9a:	f001 fa97 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006f9e:	bf00      	nop
 8006fa0:	3730      	adds	r7, #48	; 0x30
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200002e0 	.word	0x200002e0
 8006fac:	2e300800 	.word	0x2e300800
 8006fb0:	2a000400 	.word	0x2a000400

08006fb4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006fba:	463b      	mov	r3, r7
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f018 fb75 	bl	801f6b0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8006fc6:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <MX_ADC2_Init+0xc0>)
 8006fc8:	4a2b      	ldr	r2, [pc, #172]	; (8007078 <MX_ADC2_Init+0xc4>)
 8006fca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8006fcc:	4b29      	ldr	r3, [pc, #164]	; (8007074 <MX_ADC2_Init+0xc0>)
 8006fce:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8006fd2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006fd4:	4b27      	ldr	r3, [pc, #156]	; (8007074 <MX_ADC2_Init+0xc0>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006fda:	4b26      	ldr	r3, [pc, #152]	; (8007074 <MX_ADC2_Init+0xc0>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8006fe0:	4b24      	ldr	r3, [pc, #144]	; (8007074 <MX_ADC2_Init+0xc0>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006fe6:	4b23      	ldr	r3, [pc, #140]	; (8007074 <MX_ADC2_Init+0xc0>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006fec:	4b21      	ldr	r3, [pc, #132]	; (8007074 <MX_ADC2_Init+0xc0>)
 8006fee:	2204      	movs	r2, #4
 8006ff0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8006ff2:	4b20      	ldr	r3, [pc, #128]	; (8007074 <MX_ADC2_Init+0xc0>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <MX_ADC2_Init+0xc0>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <MX_ADC2_Init+0xc0>)
 8007000:	2201      	movs	r2, #1
 8007002:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007004:	4b1b      	ldr	r3, [pc, #108]	; (8007074 <MX_ADC2_Init+0xc0>)
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800700c:	4b19      	ldr	r3, [pc, #100]	; (8007074 <MX_ADC2_Init+0xc0>)
 800700e:	2200      	movs	r2, #0
 8007010:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007012:	4b18      	ldr	r3, [pc, #96]	; (8007074 <MX_ADC2_Init+0xc0>)
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8007018:	4b16      	ldr	r3, [pc, #88]	; (8007074 <MX_ADC2_Init+0xc0>)
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007020:	4b14      	ldr	r3, [pc, #80]	; (8007074 <MX_ADC2_Init+0xc0>)
 8007022:	2200      	movs	r2, #0
 8007024:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8007026:	4b13      	ldr	r3, [pc, #76]	; (8007074 <MX_ADC2_Init+0xc0>)
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800702e:	4811      	ldr	r0, [pc, #68]	; (8007074 <MX_ADC2_Init+0xc0>)
 8007030:	f002 fbd4 	bl	80097dc <HAL_ADC_Init>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800703a:	f001 fa47 	bl	80084cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <MX_ADC2_Init+0xc8>)
 8007040:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007042:	2306      	movs	r3, #6
 8007044:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8007046:	2302      	movs	r3, #2
 8007048:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800704a:	237f      	movs	r3, #127	; 0x7f
 800704c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800704e:	2304      	movs	r3, #4
 8007050:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007056:	463b      	mov	r3, r7
 8007058:	4619      	mov	r1, r3
 800705a:	4806      	ldr	r0, [pc, #24]	; (8007074 <MX_ADC2_Init+0xc0>)
 800705c:	f003 f8cc 	bl	800a1f8 <HAL_ADC_ConfigChannel>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8007066:	f001 fa31 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800706a:	bf00      	nop
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	2000034c 	.word	0x2000034c
 8007078:	50000100 	.word	0x50000100
 800707c:	47520000 	.word	0x47520000

08007080 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007086:	463b      	mov	r3, r7
 8007088:	2220      	movs	r2, #32
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f018 fb0f 	bl	801f6b0 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8007092:	4b2b      	ldr	r3, [pc, #172]	; (8007140 <MX_ADC5_Init+0xc0>)
 8007094:	4a2b      	ldr	r2, [pc, #172]	; (8007144 <MX_ADC5_Init+0xc4>)
 8007096:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8007098:	4b29      	ldr	r3, [pc, #164]	; (8007140 <MX_ADC5_Init+0xc0>)
 800709a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800709e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80070a0:	4b27      	ldr	r3, [pc, #156]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070a6:	4b26      	ldr	r3, [pc, #152]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80070ac:	4b24      	ldr	r3, [pc, #144]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80070b2:	4b23      	ldr	r3, [pc, #140]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070b8:	4b21      	ldr	r3, [pc, #132]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070ba:	2204      	movs	r2, #4
 80070bc:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80070be:	4b20      	ldr	r3, [pc, #128]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80070c4:	4b1e      	ldr	r3, [pc, #120]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80070ca:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80070d0:	4b1b      	ldr	r3, [pc, #108]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070d8:	4b19      	ldr	r3, [pc, #100]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070da:	2200      	movs	r2, #0
 80070dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80070de:	4b18      	ldr	r3, [pc, #96]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80070e4:	4b16      	ldr	r3, [pc, #88]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80070ec:	4b14      	ldr	r3, [pc, #80]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80070f2:	4b13      	ldr	r3, [pc, #76]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80070fa:	4811      	ldr	r0, [pc, #68]	; (8007140 <MX_ADC5_Init+0xc0>)
 80070fc:	f002 fb6e 	bl	80097dc <HAL_ADC_Init>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8007106:	f001 f9e1 	bl	80084cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800710a:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <MX_ADC5_Init+0xc8>)
 800710c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800710e:	2306      	movs	r3, #6
 8007110:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8007112:	2302      	movs	r3, #2
 8007114:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007116:	237f      	movs	r3, #127	; 0x7f
 8007118:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800711a:	2304      	movs	r3, #4
 800711c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8007122:	463b      	mov	r3, r7
 8007124:	4619      	mov	r1, r3
 8007126:	4806      	ldr	r0, [pc, #24]	; (8007140 <MX_ADC5_Init+0xc0>)
 8007128:	f003 f866 	bl	800a1f8 <HAL_ADC_ConfigChannel>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8007132:	f001 f9cb 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8007136:	bf00      	nop
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	200003b8 	.word	0x200003b8
 8007144:	50000600 	.word	0x50000600
 8007148:	04300002 	.word	0x04300002

0800714c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8007150:	4b1b      	ldr	r3, [pc, #108]	; (80071c0 <MX_I2C4_Init+0x74>)
 8007152:	4a1c      	ldr	r2, [pc, #112]	; (80071c4 <MX_I2C4_Init+0x78>)
 8007154:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0D9FF;
 8007156:	4b1a      	ldr	r3, [pc, #104]	; (80071c0 <MX_I2C4_Init+0x74>)
 8007158:	4a1b      	ldr	r2, [pc, #108]	; (80071c8 <MX_I2C4_Init+0x7c>)
 800715a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800715c:	4b18      	ldr	r3, [pc, #96]	; (80071c0 <MX_I2C4_Init+0x74>)
 800715e:	2200      	movs	r2, #0
 8007160:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007162:	4b17      	ldr	r3, [pc, #92]	; (80071c0 <MX_I2C4_Init+0x74>)
 8007164:	2201      	movs	r2, #1
 8007166:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007168:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <MX_I2C4_Init+0x74>)
 800716a:	2200      	movs	r2, #0
 800716c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800716e:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <MX_I2C4_Init+0x74>)
 8007170:	2200      	movs	r2, #0
 8007172:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007174:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <MX_I2C4_Init+0x74>)
 8007176:	2200      	movs	r2, #0
 8007178:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800717a:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <MX_I2C4_Init+0x74>)
 800717c:	2200      	movs	r2, #0
 800717e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <MX_I2C4_Init+0x74>)
 8007182:	2200      	movs	r2, #0
 8007184:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8007186:	480e      	ldr	r0, [pc, #56]	; (80071c0 <MX_I2C4_Init+0x74>)
 8007188:	f004 fcc4 	bl	800bb14 <HAL_I2C_Init>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8007192:	f001 f99b 	bl	80084cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007196:	2100      	movs	r1, #0
 8007198:	4809      	ldr	r0, [pc, #36]	; (80071c0 <MX_I2C4_Init+0x74>)
 800719a:	f004 fd56 	bl	800bc4a <HAL_I2CEx_ConfigAnalogFilter>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80071a4:	f001 f992 	bl	80084cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80071a8:	2100      	movs	r1, #0
 80071aa:	4805      	ldr	r0, [pc, #20]	; (80071c0 <MX_I2C4_Init+0x74>)
 80071ac:	f004 fd98 	bl	800bce0 <HAL_I2CEx_ConfigDigitalFilter>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80071b6:	f001 f989 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80071ba:	bf00      	nop
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000544 	.word	0x20000544
 80071c4:	40008400 	.word	0x40008400
 80071c8:	20b0d9ff 	.word	0x20b0d9ff

080071cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08e      	sub	sp, #56	; 0x38
 80071d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80071d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	609a      	str	r2, [r3, #8]
 80071de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071e0:	f107 031c 	add.w	r3, r7, #28
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	605a      	str	r2, [r3, #4]
 80071ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80071ec:	463b      	mov	r3, r7
 80071ee:	2200      	movs	r2, #0
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	605a      	str	r2, [r3, #4]
 80071f4:	609a      	str	r2, [r3, #8]
 80071f6:	60da      	str	r2, [r3, #12]
 80071f8:	611a      	str	r2, [r3, #16]
 80071fa:	615a      	str	r2, [r3, #20]
 80071fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80071fe:	4b32      	ldr	r3, [pc, #200]	; (80072c8 <MX_TIM3_Init+0xfc>)
 8007200:	4a32      	ldr	r2, [pc, #200]	; (80072cc <MX_TIM3_Init+0x100>)
 8007202:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8007204:	4b30      	ldr	r3, [pc, #192]	; (80072c8 <MX_TIM3_Init+0xfc>)
 8007206:	2209      	movs	r2, #9
 8007208:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800720a:	4b2f      	ldr	r3, [pc, #188]	; (80072c8 <MX_TIM3_Init+0xfc>)
 800720c:	2200      	movs	r2, #0
 800720e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8007210:	4b2d      	ldr	r3, [pc, #180]	; (80072c8 <MX_TIM3_Init+0xfc>)
 8007212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007216:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007218:	4b2b      	ldr	r3, [pc, #172]	; (80072c8 <MX_TIM3_Init+0xfc>)
 800721a:	2200      	movs	r2, #0
 800721c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800721e:	4b2a      	ldr	r3, [pc, #168]	; (80072c8 <MX_TIM3_Init+0xfc>)
 8007220:	2280      	movs	r2, #128	; 0x80
 8007222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007224:	4828      	ldr	r0, [pc, #160]	; (80072c8 <MX_TIM3_Init+0xfc>)
 8007226:	f007 fb3d 	bl	800e8a4 <HAL_TIM_Base_Init>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8007230:	f001 f94c 	bl	80084cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007238:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800723a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800723e:	4619      	mov	r1, r3
 8007240:	4821      	ldr	r0, [pc, #132]	; (80072c8 <MX_TIM3_Init+0xfc>)
 8007242:	f007 ffd7 	bl	800f1f4 <HAL_TIM_ConfigClockSource>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800724c:	f001 f93e 	bl	80084cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007250:	481d      	ldr	r0, [pc, #116]	; (80072c8 <MX_TIM3_Init+0xfc>)
 8007252:	f007 fbf7 	bl	800ea44 <HAL_TIM_PWM_Init>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800725c:	f001 f936 	bl	80084cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007264:	2300      	movs	r3, #0
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007268:	f107 031c 	add.w	r3, r7, #28
 800726c:	4619      	mov	r1, r3
 800726e:	4816      	ldr	r0, [pc, #88]	; (80072c8 <MX_TIM3_Init+0xfc>)
 8007270:	f008 fd9e 	bl	800fdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800727a:	f001 f927 	bl	80084cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800727e:	2360      	movs	r3, #96	; 0x60
 8007280:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007286:	2300      	movs	r3, #0
 8007288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800728e:	463b      	mov	r3, r7
 8007290:	2208      	movs	r2, #8
 8007292:	4619      	mov	r1, r3
 8007294:	480c      	ldr	r0, [pc, #48]	; (80072c8 <MX_TIM3_Init+0xfc>)
 8007296:	f007 fe99 	bl	800efcc <HAL_TIM_PWM_ConfigChannel>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80072a0:	f001 f914 	bl	80084cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80072a4:	463b      	mov	r3, r7
 80072a6:	220c      	movs	r2, #12
 80072a8:	4619      	mov	r1, r3
 80072aa:	4807      	ldr	r0, [pc, #28]	; (80072c8 <MX_TIM3_Init+0xfc>)
 80072ac:	f007 fe8e 	bl	800efcc <HAL_TIM_PWM_ConfigChannel>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80072b6:	f001 f909 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80072ba:	4803      	ldr	r0, [pc, #12]	; (80072c8 <MX_TIM3_Init+0xfc>)
 80072bc:	f001 fbe6 	bl	8008a8c <HAL_TIM_MspPostInit>

}
 80072c0:	bf00      	nop
 80072c2:	3738      	adds	r7, #56	; 0x38
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	20000598 	.word	0x20000598
 80072cc:	40000400 	.word	0x40000400

080072d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08e      	sub	sp, #56	; 0x38
 80072d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80072d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	605a      	str	r2, [r3, #4]
 80072e0:	609a      	str	r2, [r3, #8]
 80072e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072e4:	f107 031c 	add.w	r3, r7, #28
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072f0:	463b      	mov	r3, r7
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	605a      	str	r2, [r3, #4]
 80072f8:	609a      	str	r2, [r3, #8]
 80072fa:	60da      	str	r2, [r3, #12]
 80072fc:	611a      	str	r2, [r3, #16]
 80072fe:	615a      	str	r2, [r3, #20]
 8007300:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007302:	4b2d      	ldr	r3, [pc, #180]	; (80073b8 <MX_TIM5_Init+0xe8>)
 8007304:	4a2d      	ldr	r2, [pc, #180]	; (80073bc <MX_TIM5_Init+0xec>)
 8007306:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10-1;
 8007308:	4b2b      	ldr	r3, [pc, #172]	; (80073b8 <MX_TIM5_Init+0xe8>)
 800730a:	2209      	movs	r2, #9
 800730c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800730e:	4b2a      	ldr	r3, [pc, #168]	; (80073b8 <MX_TIM5_Init+0xe8>)
 8007310:	2200      	movs	r2, #0
 8007312:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8007314:	4b28      	ldr	r3, [pc, #160]	; (80073b8 <MX_TIM5_Init+0xe8>)
 8007316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800731a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800731c:	4b26      	ldr	r3, [pc, #152]	; (80073b8 <MX_TIM5_Init+0xe8>)
 800731e:	2200      	movs	r2, #0
 8007320:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007322:	4b25      	ldr	r3, [pc, #148]	; (80073b8 <MX_TIM5_Init+0xe8>)
 8007324:	2280      	movs	r2, #128	; 0x80
 8007326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007328:	4823      	ldr	r0, [pc, #140]	; (80073b8 <MX_TIM5_Init+0xe8>)
 800732a:	f007 fabb 	bl	800e8a4 <HAL_TIM_Base_Init>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8007334:	f001 f8ca 	bl	80084cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800733c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800733e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007342:	4619      	mov	r1, r3
 8007344:	481c      	ldr	r0, [pc, #112]	; (80073b8 <MX_TIM5_Init+0xe8>)
 8007346:	f007 ff55 	bl	800f1f4 <HAL_TIM_ConfigClockSource>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8007350:	f001 f8bc 	bl	80084cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8007354:	4818      	ldr	r0, [pc, #96]	; (80073b8 <MX_TIM5_Init+0xe8>)
 8007356:	f007 fb75 	bl	800ea44 <HAL_TIM_PWM_Init>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8007360:	f001 f8b4 	bl	80084cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007368:	2300      	movs	r3, #0
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800736c:	f107 031c 	add.w	r3, r7, #28
 8007370:	4619      	mov	r1, r3
 8007372:	4811      	ldr	r0, [pc, #68]	; (80073b8 <MX_TIM5_Init+0xe8>)
 8007374:	f008 fd1c 	bl	800fdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800737e:	f001 f8a5 	bl	80084cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007382:	2360      	movs	r3, #96	; 0x60
 8007384:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800738a:	2300      	movs	r3, #0
 800738c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007392:	463b      	mov	r3, r7
 8007394:	2200      	movs	r2, #0
 8007396:	4619      	mov	r1, r3
 8007398:	4807      	ldr	r0, [pc, #28]	; (80073b8 <MX_TIM5_Init+0xe8>)
 800739a:	f007 fe17 	bl	800efcc <HAL_TIM_PWM_ConfigChannel>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80073a4:	f001 f892 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80073a8:	4803      	ldr	r0, [pc, #12]	; (80073b8 <MX_TIM5_Init+0xe8>)
 80073aa:	f001 fb6f 	bl	8008a8c <HAL_TIM_MspPostInit>

}
 80073ae:	bf00      	nop
 80073b0:	3738      	adds	r7, #56	; 0x38
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	200005e4 	.word	0x200005e4
 80073bc:	40000c00 	.word	0x40000c00

080073c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80073c4:	4b22      	ldr	r3, [pc, #136]	; (8007450 <MX_UART4_Init+0x90>)
 80073c6:	4a23      	ldr	r2, [pc, #140]	; (8007454 <MX_UART4_Init+0x94>)
 80073c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80073ca:	4b21      	ldr	r3, [pc, #132]	; (8007450 <MX_UART4_Init+0x90>)
 80073cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80073d2:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <MX_UART4_Init+0x90>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80073d8:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <MX_UART4_Init+0x90>)
 80073da:	2200      	movs	r2, #0
 80073dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80073de:	4b1c      	ldr	r3, [pc, #112]	; (8007450 <MX_UART4_Init+0x90>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80073e4:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <MX_UART4_Init+0x90>)
 80073e6:	220c      	movs	r2, #12
 80073e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073ea:	4b19      	ldr	r3, [pc, #100]	; (8007450 <MX_UART4_Init+0x90>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80073f0:	4b17      	ldr	r3, [pc, #92]	; (8007450 <MX_UART4_Init+0x90>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80073f6:	4b16      	ldr	r3, [pc, #88]	; (8007450 <MX_UART4_Init+0x90>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80073fc:	4b14      	ldr	r3, [pc, #80]	; (8007450 <MX_UART4_Init+0x90>)
 80073fe:	2200      	movs	r2, #0
 8007400:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007402:	4b13      	ldr	r3, [pc, #76]	; (8007450 <MX_UART4_Init+0x90>)
 8007404:	2200      	movs	r2, #0
 8007406:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007408:	4811      	ldr	r0, [pc, #68]	; (8007450 <MX_UART4_Init+0x90>)
 800740a:	f008 fdad 	bl	800ff68 <HAL_UART_Init>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8007414:	f001 f85a 	bl	80084cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007418:	2100      	movs	r1, #0
 800741a:	480d      	ldr	r0, [pc, #52]	; (8007450 <MX_UART4_Init+0x90>)
 800741c:	f00a ff06 	bl	801222c <HAL_UARTEx_SetTxFifoThreshold>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8007426:	f001 f851 	bl	80084cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800742a:	2100      	movs	r1, #0
 800742c:	4808      	ldr	r0, [pc, #32]	; (8007450 <MX_UART4_Init+0x90>)
 800742e:	f00a ff3b 	bl	80122a8 <HAL_UARTEx_SetRxFifoThreshold>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8007438:	f001 f848 	bl	80084cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800743c:	4804      	ldr	r0, [pc, #16]	; (8007450 <MX_UART4_Init+0x90>)
 800743e:	f00a febc 	bl	80121ba <HAL_UARTEx_DisableFifoMode>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8007448:	f001 f840 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800744c:	bf00      	nop
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20000630 	.word	0x20000630
 8007454:	40004c00 	.word	0x40004c00

08007458 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800745c:	4b24      	ldr	r3, [pc, #144]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 800745e:	4a25      	ldr	r2, [pc, #148]	; (80074f4 <MX_USART1_UART_Init+0x9c>)
 8007460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 18000000;
 8007462:	4b23      	ldr	r3, [pc, #140]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 8007464:	4a24      	ldr	r2, [pc, #144]	; (80074f8 <MX_USART1_UART_Init+0xa0>)
 8007466:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8007468:	4b21      	ldr	r3, [pc, #132]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 800746a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800746e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007470:	4b1f      	ldr	r3, [pc, #124]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 8007472:	2200      	movs	r2, #0
 8007474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8007476:	4b1e      	ldr	r3, [pc, #120]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 8007478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800747c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800747e:	4b1c      	ldr	r3, [pc, #112]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 8007480:	220c      	movs	r2, #12
 8007482:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007484:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 8007486:	2200      	movs	r2, #0
 8007488:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800748a:	4b19      	ldr	r3, [pc, #100]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 800748c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007490:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8007492:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 8007494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007498:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800749a:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 800749c:	2200      	movs	r2, #0
 800749e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80074a0:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80074a6:	4812      	ldr	r0, [pc, #72]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 80074a8:	f008 fd5e 	bl	800ff68 <HAL_UART_Init>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80074b2:	f001 f80b 	bl	80084cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80074b6:	2100      	movs	r1, #0
 80074b8:	480d      	ldr	r0, [pc, #52]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 80074ba:	f00a feb7 	bl	801222c <HAL_UARTEx_SetTxFifoThreshold>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 80074c4:	f001 f802 	bl	80084cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80074c8:	2100      	movs	r1, #0
 80074ca:	4809      	ldr	r0, [pc, #36]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 80074cc:	f00a feec 	bl	80122a8 <HAL_UARTEx_SetRxFifoThreshold>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 80074d6:	f000 fff9 	bl	80084cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80074da:	4805      	ldr	r0, [pc, #20]	; (80074f0 <MX_USART1_UART_Init+0x98>)
 80074dc:	f00a fe6d 	bl	80121ba <HAL_UARTEx_DisableFifoMode>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 80074e6:	f000 fff1 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	200006c4 	.word	0x200006c4
 80074f4:	40013800 	.word	0x40013800
 80074f8:	0112a880 	.word	0x0112a880

080074fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007500:	4b24      	ldr	r3, [pc, #144]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007502:	4a25      	ldr	r2, [pc, #148]	; (8007598 <MX_USART2_UART_Init+0x9c>)
 8007504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007506:	4b23      	ldr	r3, [pc, #140]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800750c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800750e:	4b21      	ldr	r3, [pc, #132]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007510:	2200      	movs	r2, #0
 8007512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007514:	4b1f      	ldr	r3, [pc, #124]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007516:	2200      	movs	r2, #0
 8007518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800751a:	4b1e      	ldr	r3, [pc, #120]	; (8007594 <MX_USART2_UART_Init+0x98>)
 800751c:	2200      	movs	r2, #0
 800751e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007520:	4b1c      	ldr	r3, [pc, #112]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007522:	220c      	movs	r2, #12
 8007524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007526:	4b1b      	ldr	r3, [pc, #108]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007528:	2200      	movs	r2, #0
 800752a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800752c:	4b19      	ldr	r3, [pc, #100]	; (8007594 <MX_USART2_UART_Init+0x98>)
 800752e:	2200      	movs	r2, #0
 8007530:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007532:	4b18      	ldr	r3, [pc, #96]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007534:	2200      	movs	r2, #0
 8007536:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007538:	4b16      	ldr	r3, [pc, #88]	; (8007594 <MX_USART2_UART_Init+0x98>)
 800753a:	2200      	movs	r2, #0
 800753c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800753e:	4b15      	ldr	r3, [pc, #84]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007540:	2200      	movs	r2, #0
 8007542:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8007544:	2300      	movs	r3, #0
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	4812      	ldr	r0, [pc, #72]	; (8007594 <MX_USART2_UART_Init+0x98>)
 800754c:	f00a fdae 	bl	80120ac <HAL_RS485Ex_Init>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 8007556:	f000 ffb9 	bl	80084cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800755a:	2100      	movs	r1, #0
 800755c:	480d      	ldr	r0, [pc, #52]	; (8007594 <MX_USART2_UART_Init+0x98>)
 800755e:	f00a fe65 	bl	801222c <HAL_UARTEx_SetTxFifoThreshold>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 8007568:	f000 ffb0 	bl	80084cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800756c:	2100      	movs	r1, #0
 800756e:	4809      	ldr	r0, [pc, #36]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007570:	f00a fe9a 	bl	80122a8 <HAL_UARTEx_SetRxFifoThreshold>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 800757a:	f000 ffa7 	bl	80084cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800757e:	4805      	ldr	r0, [pc, #20]	; (8007594 <MX_USART2_UART_Init+0x98>)
 8007580:	f00a fe1b 	bl	80121ba <HAL_UARTEx_DisableFifoMode>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 800758a:	f000 ff9f 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800758e:	bf00      	nop
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000758 	.word	0x20000758
 8007598:	40004400 	.word	0x40004400

0800759c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a2:	463b      	mov	r3, r7
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	605a      	str	r2, [r3, #4]
 80075aa:	609a      	str	r2, [r3, #8]
 80075ac:	60da      	str	r2, [r3, #12]
 80075ae:	611a      	str	r2, [r3, #16]
 80075b0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80075b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80075b6:	f7ff f9e7 	bl	8006988 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80075ba:	2002      	movs	r0, #2
 80075bc:	f7ff f9cc 	bl	8006958 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80075c0:	2310      	movs	r3, #16
 80075c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80075c4:	2303      	movs	r3, #3
 80075c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80075c8:	2300      	movs	r3, #0
 80075ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075cc:	463b      	mov	r3, r7
 80075ce:	4619      	mov	r1, r3
 80075d0:	4838      	ldr	r0, [pc, #224]	; (80076b4 <MX_UCPD1_Init+0x118>)
 80075d2:	f00b f9a7 	bl	8012924 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80075d6:	2340      	movs	r3, #64	; 0x40
 80075d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80075da:	2303      	movs	r3, #3
 80075dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80075de:	2300      	movs	r3, #0
 80075e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075e2:	463b      	mov	r3, r7
 80075e4:	4619      	mov	r1, r3
 80075e6:	4833      	ldr	r0, [pc, #204]	; (80076b4 <MX_UCPD1_Init+0x118>)
 80075e8:	f00b f99c 	bl	8012924 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_UCPD1_RX);
 80075ec:	2272      	movs	r2, #114	; 0x72
 80075ee:	2102      	movs	r1, #2
 80075f0:	4831      	ldr	r0, [pc, #196]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 80075f2:	f7ff faed 	bl	8006bd0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80075f6:	2200      	movs	r2, #0
 80075f8:	2102      	movs	r1, #2
 80075fa:	482f      	ldr	r0, [pc, #188]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 80075fc:	f7ff f9dc 	bl	80069b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8007600:	2200      	movs	r2, #0
 8007602:	2102      	movs	r1, #2
 8007604:	482c      	ldr	r0, [pc, #176]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 8007606:	f7ff fabd 	bl	8006b84 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800760a:	2200      	movs	r2, #0
 800760c:	2102      	movs	r1, #2
 800760e:	482a      	ldr	r0, [pc, #168]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 8007610:	f7ff f9fa 	bl	8006a08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8007614:	2200      	movs	r2, #0
 8007616:	2102      	movs	r1, #2
 8007618:	4827      	ldr	r0, [pc, #156]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 800761a:	f7ff fa1b 	bl	8006a54 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800761e:	2280      	movs	r2, #128	; 0x80
 8007620:	2102      	movs	r1, #2
 8007622:	4825      	ldr	r0, [pc, #148]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 8007624:	f7ff fa3c 	bl	8006aa0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8007628:	2200      	movs	r2, #0
 800762a:	2102      	movs	r1, #2
 800762c:	4822      	ldr	r0, [pc, #136]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 800762e:	f7ff fa5d 	bl	8006aec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8007632:	2200      	movs	r2, #0
 8007634:	2102      	movs	r1, #2
 8007636:	4820      	ldr	r0, [pc, #128]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 8007638:	f7ff fa7e 	bl	8006b38 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD1_TX);
 800763c:	2273      	movs	r2, #115	; 0x73
 800763e:	2103      	movs	r1, #3
 8007640:	481d      	ldr	r0, [pc, #116]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 8007642:	f7ff fac5 	bl	8006bd0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8007646:	2210      	movs	r2, #16
 8007648:	2103      	movs	r1, #3
 800764a:	481b      	ldr	r0, [pc, #108]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 800764c:	f7ff f9b4 	bl	80069b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8007650:	2200      	movs	r2, #0
 8007652:	2103      	movs	r1, #3
 8007654:	4818      	ldr	r0, [pc, #96]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 8007656:	f7ff fa95 	bl	8006b84 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 800765a:	2200      	movs	r2, #0
 800765c:	2103      	movs	r1, #3
 800765e:	4816      	ldr	r0, [pc, #88]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 8007660:	f7ff f9d2 	bl	8006a08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8007664:	2200      	movs	r2, #0
 8007666:	2103      	movs	r1, #3
 8007668:	4813      	ldr	r0, [pc, #76]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 800766a:	f7ff f9f3 	bl	8006a54 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 800766e:	2280      	movs	r2, #128	; 0x80
 8007670:	2103      	movs	r1, #3
 8007672:	4811      	ldr	r0, [pc, #68]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 8007674:	f7ff fa14 	bl	8006aa0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8007678:	2200      	movs	r2, #0
 800767a:	2103      	movs	r1, #3
 800767c:	480e      	ldr	r0, [pc, #56]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 800767e:	f7ff fa35 	bl	8006aec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8007682:	2200      	movs	r2, #0
 8007684:	2103      	movs	r1, #3
 8007686:	480c      	ldr	r0, [pc, #48]	; (80076b8 <MX_UCPD1_Init+0x11c>)
 8007688:	f7ff fa56 	bl	8006b38 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800768c:	f7ff f8c4 	bl	8006818 <__NVIC_GetPriorityGrouping>
 8007690:	4603      	mov	r3, r0
 8007692:	2200      	movs	r2, #0
 8007694:	2105      	movs	r1, #5
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff f914 	bl	80068c4 <NVIC_EncodePriority>
 800769c:	4603      	mov	r3, r0
 800769e:	4619      	mov	r1, r3
 80076a0:	203f      	movs	r0, #63	; 0x3f
 80076a2:	f7ff f8e5 	bl	8006870 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 80076a6:	203f      	movs	r0, #63	; 0x3f
 80076a8:	f7ff f8c4 	bl	8006834 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80076ac:	bf00      	nop
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	48000400 	.word	0x48000400
 80076b8:	40020000 	.word	0x40020000

080076bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80076c2:	4b40      	ldr	r3, [pc, #256]	; (80077c4 <MX_DMA_Init+0x108>)
 80076c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c6:	4a3f      	ldr	r2, [pc, #252]	; (80077c4 <MX_DMA_Init+0x108>)
 80076c8:	f043 0304 	orr.w	r3, r3, #4
 80076cc:	6493      	str	r3, [r2, #72]	; 0x48
 80076ce:	4b3d      	ldr	r3, [pc, #244]	; (80077c4 <MX_DMA_Init+0x108>)
 80076d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80076da:	4b3a      	ldr	r3, [pc, #232]	; (80077c4 <MX_DMA_Init+0x108>)
 80076dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076de:	4a39      	ldr	r2, [pc, #228]	; (80077c4 <MX_DMA_Init+0x108>)
 80076e0:	f043 0301 	orr.w	r3, r3, #1
 80076e4:	6493      	str	r3, [r2, #72]	; 0x48
 80076e6:	4b37      	ldr	r3, [pc, #220]	; (80077c4 <MX_DMA_Init+0x108>)
 80076e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	60bb      	str	r3, [r7, #8]
 80076f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80076f2:	4b34      	ldr	r3, [pc, #208]	; (80077c4 <MX_DMA_Init+0x108>)
 80076f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f6:	4a33      	ldr	r2, [pc, #204]	; (80077c4 <MX_DMA_Init+0x108>)
 80076f8:	f043 0302 	orr.w	r3, r3, #2
 80076fc:	6493      	str	r3, [r2, #72]	; 0x48
 80076fe:	4b31      	ldr	r3, [pc, #196]	; (80077c4 <MX_DMA_Init+0x108>)
 8007700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	607b      	str	r3, [r7, #4]
 8007708:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800770a:	2200      	movs	r2, #0
 800770c:	2105      	movs	r1, #5
 800770e:	200b      	movs	r0, #11
 8007710:	f003 fcf4 	bl	800b0fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007714:	200b      	movs	r0, #11
 8007716:	f003 fd0b 	bl	800b130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800771a:	2200      	movs	r2, #0
 800771c:	2105      	movs	r1, #5
 800771e:	200c      	movs	r0, #12
 8007720:	f003 fcec 	bl	800b0fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007724:	200c      	movs	r0, #12
 8007726:	f003 fd03 	bl	800b130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800772a:	f7ff f875 	bl	8006818 <__NVIC_GetPriorityGrouping>
 800772e:	4603      	mov	r3, r0
 8007730:	2200      	movs	r2, #0
 8007732:	2105      	movs	r1, #5
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff f8c5 	bl	80068c4 <NVIC_EncodePriority>
 800773a:	4603      	mov	r3, r0
 800773c:	4619      	mov	r1, r3
 800773e:	200d      	movs	r0, #13
 8007740:	f7ff f896 	bl	8006870 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007744:	200d      	movs	r0, #13
 8007746:	f7ff f875 	bl	8006834 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800774a:	f7ff f865 	bl	8006818 <__NVIC_GetPriorityGrouping>
 800774e:	4603      	mov	r3, r0
 8007750:	2200      	movs	r2, #0
 8007752:	2105      	movs	r1, #5
 8007754:	4618      	mov	r0, r3
 8007756:	f7ff f8b5 	bl	80068c4 <NVIC_EncodePriority>
 800775a:	4603      	mov	r3, r0
 800775c:	4619      	mov	r1, r3
 800775e:	200e      	movs	r0, #14
 8007760:	f7ff f886 	bl	8006870 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007764:	200e      	movs	r0, #14
 8007766:	f7ff f865 	bl	8006834 <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800776a:	2200      	movs	r2, #0
 800776c:	2105      	movs	r1, #5
 800776e:	200f      	movs	r0, #15
 8007770:	f003 fcc4 	bl	800b0fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007774:	200f      	movs	r0, #15
 8007776:	f003 fcdb 	bl	800b130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800777a:	2200      	movs	r2, #0
 800777c:	2105      	movs	r1, #5
 800777e:	2010      	movs	r0, #16
 8007780:	f003 fcbc 	bl	800b0fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007784:	2010      	movs	r0, #16
 8007786:	f003 fcd3 	bl	800b130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800778a:	2200      	movs	r2, #0
 800778c:	2105      	movs	r1, #5
 800778e:	2011      	movs	r0, #17
 8007790:	f003 fcb4 	bl	800b0fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8007794:	2011      	movs	r0, #17
 8007796:	f003 fccb 	bl	800b130 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800779a:	2200      	movs	r2, #0
 800779c:	2105      	movs	r1, #5
 800779e:	2038      	movs	r0, #56	; 0x38
 80077a0:	f003 fcac 	bl	800b0fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80077a4:	2038      	movs	r0, #56	; 0x38
 80077a6:	f003 fcc3 	bl	800b130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 5, 0);
 80077aa:	2200      	movs	r2, #0
 80077ac:	2105      	movs	r1, #5
 80077ae:	2060      	movs	r0, #96	; 0x60
 80077b0:	f003 fca4 	bl	800b0fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80077b4:	2060      	movs	r0, #96	; 0x60
 80077b6:	f003 fcbb 	bl	800b130 <HAL_NVIC_EnableIRQ>

}
 80077ba:	bf00      	nop
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40021000 	.word	0x40021000

080077c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ce:	f107 0314 	add.w	r3, r7, #20
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	605a      	str	r2, [r3, #4]
 80077d8:	609a      	str	r2, [r3, #8]
 80077da:	60da      	str	r2, [r3, #12]
 80077dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077de:	4b67      	ldr	r3, [pc, #412]	; (800797c <MX_GPIO_Init+0x1b4>)
 80077e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e2:	4a66      	ldr	r2, [pc, #408]	; (800797c <MX_GPIO_Init+0x1b4>)
 80077e4:	f043 0304 	orr.w	r3, r3, #4
 80077e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077ea:	4b64      	ldr	r3, [pc, #400]	; (800797c <MX_GPIO_Init+0x1b4>)
 80077ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	613b      	str	r3, [r7, #16]
 80077f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80077f6:	4b61      	ldr	r3, [pc, #388]	; (800797c <MX_GPIO_Init+0x1b4>)
 80077f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fa:	4a60      	ldr	r2, [pc, #384]	; (800797c <MX_GPIO_Init+0x1b4>)
 80077fc:	f043 0320 	orr.w	r3, r3, #32
 8007800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007802:	4b5e      	ldr	r3, [pc, #376]	; (800797c <MX_GPIO_Init+0x1b4>)
 8007804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800780e:	4b5b      	ldr	r3, [pc, #364]	; (800797c <MX_GPIO_Init+0x1b4>)
 8007810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007812:	4a5a      	ldr	r2, [pc, #360]	; (800797c <MX_GPIO_Init+0x1b4>)
 8007814:	f043 0301 	orr.w	r3, r3, #1
 8007818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800781a:	4b58      	ldr	r3, [pc, #352]	; (800797c <MX_GPIO_Init+0x1b4>)
 800781c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	60bb      	str	r3, [r7, #8]
 8007824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007826:	4b55      	ldr	r3, [pc, #340]	; (800797c <MX_GPIO_Init+0x1b4>)
 8007828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782a:	4a54      	ldr	r2, [pc, #336]	; (800797c <MX_GPIO_Init+0x1b4>)
 800782c:	f043 0302 	orr.w	r3, r3, #2
 8007830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007832:	4b52      	ldr	r3, [pc, #328]	; (800797c <MX_GPIO_Init+0x1b4>)
 8007834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	607b      	str	r3, [r7, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800783e:	4b4f      	ldr	r3, [pc, #316]	; (800797c <MX_GPIO_Init+0x1b4>)
 8007840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007842:	4a4e      	ldr	r2, [pc, #312]	; (800797c <MX_GPIO_Init+0x1b4>)
 8007844:	f043 0308 	orr.w	r3, r3, #8
 8007848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800784a:	4b4c      	ldr	r3, [pc, #304]	; (800797c <MX_GPIO_Init+0x1b4>)
 800784c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RLANESEL1_OUT_Pin|RLANEEN_OUT_Pin|TDI_OUT_Pin|TCK_OUT_Pin
 8007856:	2200      	movs	r2, #0
 8007858:	f24d 211d 	movw	r1, #53789	; 0xd21d
 800785c:	4848      	ldr	r0, [pc, #288]	; (8007980 <MX_GPIO_Init+0x1b8>)
 800785e:	f004 f941 	bl	800bae4 <HAL_GPIO_WritePin>
                          |TMS_OUT_Pin|PWR5VEN_OUT_Pin|PWR3V3_EN_OUT_Pin|DEN_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RLANESEL2_OUT_GPIO_Port, RLANESEL2_OUT_Pin, GPIO_PIN_RESET);
 8007862:	2200      	movs	r2, #0
 8007864:	2102      	movs	r1, #2
 8007866:	4847      	ldr	r0, [pc, #284]	; (8007984 <MX_GPIO_Init+0x1bc>)
 8007868:	f004 f93c 	bl	800bae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TLANESEL0_OUT_Pin|TLANEEN_OUT_Pin|TLANESEL2_OUT_Pin|TLANESEL1_OUT_Pin
 800786c:	2200      	movs	r2, #0
 800786e:	f248 41e1 	movw	r1, #34017	; 0x84e1
 8007872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007876:	f004 f935 	bl	800bae4 <HAL_GPIO_WritePin>
                          |DFUEN_OUT_Pin|ESP32_EN_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_OUT_Pin|LED2_OUT_Pin|LED3_OUT_Pin, GPIO_PIN_RESET);
 800787a:	2200      	movs	r2, #0
 800787c:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8007880:	4841      	ldr	r0, [pc, #260]	; (8007988 <MX_GPIO_Init+0x1c0>)
 8007882:	f004 f92f 	bl	800bae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRVCC_EN_OUT_GPIO_Port, PWRVCC_EN_OUT_Pin, GPIO_PIN_RESET);
 8007886:	2200      	movs	r2, #0
 8007888:	2104      	movs	r1, #4
 800788a:	4840      	ldr	r0, [pc, #256]	; (800798c <MX_GPIO_Init+0x1c4>)
 800788c:	f004 f92a 	bl	800bae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEST_BUTTON_Pin TDO_IN_Pin */
  GPIO_InitStruct.Pin = TEST_BUTTON_Pin|TDO_IN_Pin;
 8007890:	f242 0302 	movw	r3, #8194	; 0x2002
 8007894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007896:	2300      	movs	r3, #0
 8007898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800789e:	f107 0314 	add.w	r3, r7, #20
 80078a2:	4619      	mov	r1, r3
 80078a4:	4836      	ldr	r0, [pc, #216]	; (8007980 <MX_GPIO_Init+0x1b8>)
 80078a6:	f003 ff83 	bl	800b7b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RLANESEL1_OUT_Pin RLANEEN_OUT_Pin TDI_OUT_Pin TCK_OUT_Pin
                           TMS_OUT_Pin PWR5VEN_OUT_Pin PWR3V3_EN_OUT_Pin DEN_OUT_Pin */
  GPIO_InitStruct.Pin = RLANESEL1_OUT_Pin|RLANEEN_OUT_Pin|TDI_OUT_Pin|TCK_OUT_Pin
 80078aa:	f24d 231d 	movw	r3, #53789	; 0xd21d
 80078ae:	617b      	str	r3, [r7, #20]
                          |TMS_OUT_Pin|PWR5VEN_OUT_Pin|PWR3V3_EN_OUT_Pin|DEN_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078b0:	2301      	movs	r3, #1
 80078b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078b8:	2300      	movs	r3, #0
 80078ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	4619      	mov	r1, r3
 80078c2:	482f      	ldr	r0, [pc, #188]	; (8007980 <MX_GPIO_Init+0x1b8>)
 80078c4:	f003 ff74 	bl	800b7b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RLANESEL2_OUT_Pin */
  GPIO_InitStruct.Pin = RLANESEL2_OUT_Pin;
 80078c8:	2302      	movs	r3, #2
 80078ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078cc:	2301      	movs	r3, #1
 80078ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078d4:	2300      	movs	r3, #0
 80078d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RLANESEL2_OUT_GPIO_Port, &GPIO_InitStruct);
 80078d8:	f107 0314 	add.w	r3, r7, #20
 80078dc:	4619      	mov	r1, r3
 80078de:	4829      	ldr	r0, [pc, #164]	; (8007984 <MX_GPIO_Init+0x1bc>)
 80078e0:	f003 ff66 	bl	800b7b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TLANESEL0_OUT_Pin TLANEEN_OUT_Pin TLANESEL2_OUT_Pin TLANESEL1_OUT_Pin
                           DFUEN_OUT_Pin ESP32_EN_OUT_Pin */
  GPIO_InitStruct.Pin = TLANESEL0_OUT_Pin|TLANEEN_OUT_Pin|TLANESEL2_OUT_Pin|TLANESEL1_OUT_Pin
 80078e4:	f248 43e1 	movw	r3, #34017	; 0x84e1
 80078e8:	617b      	str	r3, [r7, #20]
                          |DFUEN_OUT_Pin|ESP32_EN_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078ea:	2301      	movs	r3, #1
 80078ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078f2:	2300      	movs	r3, #0
 80078f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078f6:	f107 0314 	add.w	r3, r7, #20
 80078fa:	4619      	mov	r1, r3
 80078fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007900:	f003 ff56 	bl	800b7b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_OUT_Pin LED2_OUT_Pin LED3_OUT_Pin */
  GPIO_InitStruct.Pin = LED1_OUT_Pin|LED2_OUT_Pin|LED3_OUT_Pin;
 8007904:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8007908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800790a:	2301      	movs	r3, #1
 800790c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007912:	2300      	movs	r3, #0
 8007914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007916:	f107 0314 	add.w	r3, r7, #20
 800791a:	4619      	mov	r1, r3
 800791c:	481a      	ldr	r0, [pc, #104]	; (8007988 <MX_GPIO_Init+0x1c0>)
 800791e:	f003 ff47 	bl	800b7b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_IN_Pin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 8007922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007928:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800792c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 8007932:	f107 0314 	add.w	r3, r7, #20
 8007936:	4619      	mov	r1, r3
 8007938:	4811      	ldr	r0, [pc, #68]	; (8007980 <MX_GPIO_Init+0x1b8>)
 800793a:	f003 ff39 	bl	800b7b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRVCC_EN_OUT_Pin */
  GPIO_InitStruct.Pin = PWRVCC_EN_OUT_Pin;
 800793e:	2304      	movs	r3, #4
 8007940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007942:	2301      	movs	r3, #1
 8007944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007946:	2300      	movs	r3, #0
 8007948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800794a:	2300      	movs	r3, #0
 800794c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWRVCC_EN_OUT_GPIO_Port, &GPIO_InitStruct);
 800794e:	f107 0314 	add.w	r3, r7, #20
 8007952:	4619      	mov	r1, r3
 8007954:	480d      	ldr	r0, [pc, #52]	; (800798c <MX_GPIO_Init+0x1c4>)
 8007956:	f003 ff2b 	bl	800b7b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CardDetect_IN_Pin */
  GPIO_InitStruct.Pin = CardDetect_IN_Pin;
 800795a:	2320      	movs	r3, #32
 800795c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800795e:	2300      	movs	r3, #0
 8007960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007962:	2301      	movs	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CardDetect_IN_GPIO_Port, &GPIO_InitStruct);
 8007966:	f107 0314 	add.w	r3, r7, #20
 800796a:	4619      	mov	r1, r3
 800796c:	4806      	ldr	r0, [pc, #24]	; (8007988 <MX_GPIO_Init+0x1c0>)
 800796e:	f003 ff1f 	bl	800b7b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007972:	bf00      	nop
 8007974:	3728      	adds	r7, #40	; 0x28
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40021000 	.word	0x40021000
 8007980:	48000800 	.word	0x48000800
 8007984:	48001400 	.word	0x48001400
 8007988:	48000400 	.word	0x48000400
 800798c:	48000c00 	.word	0x48000c00

08007990 <delay>:

/* USER CODE BEGIN 4 */

//---------------------------------- a delay that can be used without irq enabled
void delay(uint32_t delay_ms) {
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
    // Configure the SysTick timer
    SysTick->LOAD = (SystemCoreClock / 1000) * delay_ms - 1; // 50 ms delay
 8007998:	4b10      	ldr	r3, [pc, #64]	; (80079dc <delay+0x4c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a10      	ldr	r2, [pc, #64]	; (80079e0 <delay+0x50>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	099b      	lsrs	r3, r3, #6
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	fb02 f303 	mul.w	r3, r2, r3
 80079aa:	4a0e      	ldr	r2, [pc, #56]	; (80079e4 <delay+0x54>)
 80079ac:	3b01      	subs	r3, #1
 80079ae:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                   // Clear current value
 80079b0:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <delay+0x54>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <delay+0x54>)
 80079b8:	2205      	movs	r2, #5
 80079ba:	601a      	str	r2, [r3, #0]

    // Wait until the COUNTFLAG is set
    while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
 80079bc:	bf00      	nop
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <delay+0x54>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f9      	beq.n	80079be <delay+0x2e>

    // Disable the SysTick timer
    SysTick->CTRL = 0;
 80079ca:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <delay+0x54>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	20000008 	.word	0x20000008
 80079e0:	10624dd3 	.word	0x10624dd3
 80079e4:	e000e010 	.word	0xe000e010

080079e8 <HAL_UARTEx_RxEventCallback>:
{
    CDC_Transmit_FS(Buf, Len);
}*/

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	807b      	strh	r3, [r7, #2]
	if(huart == RS485cfg.huart)
 80079f4:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <HAL_UARTEx_RxEventCallback+0x28>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d102      	bne.n	8007a04 <HAL_UARTEx_RxEventCallback+0x1c>
	{
		RS485receiveFlag = 1;
 80079fe:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <HAL_UARTEx_RxEventCallback+0x2c>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	701a      	strb	r2, [r3, #0]
		//RS485_Receive(&RS485cfg);
	}
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	20000a18 	.word	0x20000a18
 8007a14:	20012a6c 	.word	0x20012a6c

08007a18 <HAL_ADC_ConvCpltCallback>:
//----------------------------------------------------------------------------------------- adc conversion
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	// convert units
	I_3V3 = I_3V3_GAIN * Vref * adc1_data[0]/(float)(1 << 12);
 8007a20:	4b63      	ldr	r3, [pc, #396]	; (8007bb0 <HAL_ADC_ConvCpltCallback+0x198>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe f9f5 	bl	8005e14 <__aeabi_ui2d>
 8007a2a:	a35b      	add	r3, pc, #364	; (adr r3, 8007b98 <HAL_ADC_ConvCpltCallback+0x180>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f7fe fa6a 	bl	8005f08 <__aeabi_dmul>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	4b5c      	ldr	r3, [pc, #368]	; (8007bb4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007a42:	f7fe fb8b 	bl	800615c <__aeabi_ddiv>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f7fe fd15 	bl	800647c <__aeabi_d2f>
 8007a52:	4603      	mov	r3, r0
 8007a54:	4a58      	ldr	r2, [pc, #352]	; (8007bb8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007a56:	6013      	str	r3, [r2, #0]
	V_IN = V_IN_GAIN * Vref * adc1_data[1]/(float)(1 << 12);
 8007a58:	4b55      	ldr	r3, [pc, #340]	; (8007bb0 <HAL_ADC_ConvCpltCallback+0x198>)
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe f9d9 	bl	8005e14 <__aeabi_ui2d>
 8007a62:	a34f      	add	r3, pc, #316	; (adr r3, 8007ba0 <HAL_ADC_ConvCpltCallback+0x188>)
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	f7fe fa4e 	bl	8005f08 <__aeabi_dmul>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4610      	mov	r0, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	4b4e      	ldr	r3, [pc, #312]	; (8007bb4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007a7a:	f7fe fb6f 	bl	800615c <__aeabi_ddiv>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	f7fe fcf9 	bl	800647c <__aeabi_d2f>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4a4b      	ldr	r2, [pc, #300]	; (8007bbc <HAL_ADC_ConvCpltCallback+0x1a4>)
 8007a8e:	6013      	str	r3, [r2, #0]
	I_5V = I_5V_GAIN * Vref * adc2_data/(float)(1 << 12);
 8007a90:	4b4b      	ldr	r3, [pc, #300]	; (8007bc0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe f9bd 	bl	8005e14 <__aeabi_ui2d>
 8007a9a:	a33f      	add	r3, pc, #252	; (adr r3, 8007b98 <HAL_ADC_ConvCpltCallback+0x180>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f7fe fa32 	bl	8005f08 <__aeabi_dmul>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	4b40      	ldr	r3, [pc, #256]	; (8007bb4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007ab2:	f7fe fb53 	bl	800615c <__aeabi_ddiv>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4610      	mov	r0, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	f7fe fcdd 	bl	800647c <__aeabi_d2f>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4a3f      	ldr	r2, [pc, #252]	; (8007bc4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8007ac6:	6013      	str	r3, [r2, #0]
	I_VP = I_VP_GAIN * Vref * adc5_data/(float)(1 << 12);
 8007ac8:	4b3f      	ldr	r3, [pc, #252]	; (8007bc8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe f9a1 	bl	8005e14 <__aeabi_ui2d>
 8007ad2:	a335      	add	r3, pc, #212	; (adr r3, 8007ba8 <HAL_ADC_ConvCpltCallback+0x190>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7fe fa16 	bl	8005f08 <__aeabi_dmul>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	4b32      	ldr	r3, [pc, #200]	; (8007bb4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8007aea:	f7fe fb37 	bl	800615c <__aeabi_ddiv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4610      	mov	r0, r2
 8007af4:	4619      	mov	r1, r3
 8007af6:	f7fe fcc1 	bl	800647c <__aeabi_d2f>
 8007afa:	4603      	mov	r3, r0
 8007afc:	4a33      	ldr	r2, [pc, #204]	; (8007bcc <HAL_ADC_ConvCpltCallback+0x1b4>)
 8007afe:	6013      	str	r3, [r2, #0]

	I_3V3_fault = (I_3V3 > I_3V3_MAX) ? 1 : 0;
 8007b00:	4b2d      	ldr	r3, [pc, #180]	; (8007bb8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8007b02:	edd3 7a00 	vldr	s15, [r3]
 8007b06:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8007b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	bfcc      	ite	gt
 8007b14:	2301      	movgt	r3, #1
 8007b16:	2300      	movle	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4b2c      	ldr	r3, [pc, #176]	; (8007bd0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007b1e:	701a      	strb	r2, [r3, #0]
	I_5V_fault = (I_5V > I_5V_MAX) ? 1 : 0;
 8007b20:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8007b22:	edd3 7a00 	vldr	s15, [r3]
 8007b26:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8007b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b32:	bfcc      	ite	gt
 8007b34:	2301      	movgt	r3, #1
 8007b36:	2300      	movle	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8007b3e:	701a      	strb	r2, [r3, #0]
	//I_VP_fault = (I_VP > I_VP_MAX) || (I_VP > (UNICARD1data.VPmaxCurrent_mA * 1000.0)) ? 1 : 0;
	I_VP_fault = (I_VP > I_VP_MAX) ? 1 : 0;
 8007b40:	4b22      	ldr	r3, [pc, #136]	; (8007bcc <HAL_ADC_ConvCpltCallback+0x1b4>)
 8007b42:	edd3 7a00 	vldr	s15, [r3]
 8007b46:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b52:	bfcc      	ite	gt
 8007b54:	2301      	movgt	r3, #1
 8007b56:	2300      	movle	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4b1e      	ldr	r3, [pc, #120]	; (8007bd8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8007b5e:	701a      	strb	r2, [r3, #0]

	if(I_VP_fault + I_5V_fault + I_3V3_fault > 0)
 8007b60:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	4a18      	ldr	r2, [pc, #96]	; (8007bd0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	4413      	add	r3, r2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd09      	ble.n	8007b8a <HAL_ADC_ConvCpltCallback+0x172>
	{
		CardState = UDEV1CARD_OVERCURRENT;
 8007b76:	4b19      	ldr	r3, [pc, #100]	; (8007bdc <HAL_ADC_ConvCpltCallback+0x1c4>)
 8007b78:	2204      	movs	r2, #4
 8007b7a:	701a      	strb	r2, [r3, #0]
		OCRtimer = UNICARD1data.OCRrecoveryTime_ms + 1;
 8007b7c:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8007b7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b82:	3301      	adds	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	4b17      	ldr	r3, [pc, #92]	; (8007be4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8007b88:	801a      	strh	r2, [r3, #0]
	}
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	f3af 8000 	nop.w
 8007b98:	a4a8c155 	.word	0xa4a8c155
 8007b9c:	4013404e 	.word	0x4013404e
 8007ba0:	29cfdd23 	.word	0x29cfdd23
 8007ba4:	4046cfc8 	.word	0x4046cfc8
 8007ba8:	5fd8adac 	.word	0x5fd8adac
 8007bac:	401e4f76 	.word	0x401e4f76
 8007bb0:	20000998 	.word	0x20000998
 8007bb4:	40b00000 	.word	0x40b00000
 8007bb8:	200009b4 	.word	0x200009b4
 8007bbc:	200009a8 	.word	0x200009a8
 8007bc0:	200009a0 	.word	0x200009a0
 8007bc4:	200009b0 	.word	0x200009b0
 8007bc8:	200009a4 	.word	0x200009a4
 8007bcc:	200009ac 	.word	0x200009ac
 8007bd0:	200009ba 	.word	0x200009ba
 8007bd4:	200009bb 	.word	0x200009bb
 8007bd8:	200009bc 	.word	0x200009bc
 8007bdc:	200009c0 	.word	0x200009c0
 8007be0:	200009c4 	.word	0x200009c4
 8007be4:	200009b8 	.word	0x200009b8

08007be8 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8007be8:	b590      	push	{r4, r7, lr}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
	// add SCPI

	ReformatString(Buf, Len);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f00d faea 	bl	80151d0 <ReformatString>

	strcpy(USBTXbuffer, "ERR:command\n\r");
 8007bfc:	4a2a      	ldr	r2, [pc, #168]	; (8007ca8 <USB_CDC_RxHandler+0xc0>)
 8007bfe:	4b2b      	ldr	r3, [pc, #172]	; (8007cac <USB_CDC_RxHandler+0xc4>)
 8007c00:	4614      	mov	r4, r2
 8007c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c04:	c407      	stmia	r4!, {r0, r1, r2}
 8007c06:	8023      	strh	r3, [r4, #0]

	struct word word = generateWordDirect((char*)Buf);
 8007c08:	f107 0308 	add.w	r3, r7, #8
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f00d fb9e 	bl	8015350 <generateWordDirect>

	executeWord(word);
 8007c14:	f107 0308 	add.w	r3, r7, #8
 8007c18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c1c:	f00d fc4a 	bl	80154b4 <executeWord>

	for(int i = word.subwordsCount; i > 0 ; i--)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	e02a      	b.n	8007c7c <USB_CDC_RxHandler+0x94>
	{
		if (word.subwords[i].paramType == OTHER_P && word.subwords[i].otherParam != NULL)
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	789b      	ldrb	r3, [r3, #2]
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d11d      	bne.n	8007c76 <USB_CDC_RxHandler+0x8e>
 8007c3a:	68f9      	ldr	r1, [r7, #12]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d013      	beq.n	8007c76 <USB_CDC_RxHandler+0x8e>
		{
			free(word.subwords[i].otherParam);
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4613      	mov	r3, r2
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f017 fb8e 	bl	801f380 <free>
			word.subwords[i].otherParam = NULL;
 8007c64:	68f9      	ldr	r1, [r7, #12]
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	2200      	movs	r2, #0
 8007c74:	609a      	str	r2, [r3, #8]
	for(int i = word.subwordsCount; i > 0 ; i--)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	dcd1      	bgt.n	8007c26 <USB_CDC_RxHandler+0x3e>
		}
	}
	free(word.subwords);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f017 fb7b 	bl	801f380 <free>
	word.subwords = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]

	/*const char* response = "Hello, World!\r\n";
	uint32_t response_len = strlen(response);*/

	CDC_Transmit_FS(USBTXbuffer, strlen(USBTXbuffer));
 8007c8e:	4806      	ldr	r0, [pc, #24]	; (8007ca8 <USB_CDC_RxHandler+0xc0>)
 8007c90:	f7fd ff26 	bl	8005ae0 <strlen>
 8007c94:	4603      	mov	r3, r0
 8007c96:	4619      	mov	r1, r3
 8007c98:	4803      	ldr	r0, [pc, #12]	; (8007ca8 <USB_CDC_RxHandler+0xc0>)
 8007c9a:	f016 ff11 	bl	801eac0 <CDC_Transmit_FS>
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd90      	pop	{r4, r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	200015e4 	.word	0x200015e4
 8007cac:	08020a24 	.word	0x08020a24

08007cb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_Delay(1000);
 8007cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cbc:	f001 fae0 	bl	8009280 <HAL_Delay>
 8007cc0:	e7fa      	b.n	8007cb8 <StartDefaultTask+0x8>

08007cc2 <task_LEDcontrol>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_LEDcontrol */
void task_LEDcontrol(void *argument)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_LEDcontrol */
  osDelay(500);
 8007cca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007cce:	f011 fee8 	bl	8019aa2 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  LED_Iterate();
 8007cd2:	f015 ff85 	bl	801dbe0 <LED_Iterate>
	  LED_UpdateEffect();
 8007cd6:	f015 fc1f 	bl	801d518 <LED_UpdateEffect>
	  LED_UpdateTransition();
 8007cda:	f015 fadd 	bl	801d298 <LED_UpdateTransition>
	  osDelay(3);
 8007cde:	2003      	movs	r0, #3
 8007ce0:	f011 fedf 	bl	8019aa2 <osDelay>
	  LED_PWMCLEAR();
 8007ce4:	f016 f882 	bl	801ddec <LED_PWMCLEAR>
	  osDelay(1);
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f011 feda 	bl	8019aa2 <osDelay>
	  LED_Iterate();
 8007cee:	e7f0      	b.n	8007cd2 <task_LEDcontrol+0x10>

08007cf0 <task_Current_Check>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_Current_Check */
void task_Current_Check(void *argument)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_Current_Check */
	uint8_t outEN = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  // this function only triggers adc sampling, check void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
	  HAL_ADC_Start_DMA(&hadc1, adc1_data, 2);
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	492c      	ldr	r1, [pc, #176]	; (8007db0 <task_Current_Check+0xc0>)
 8007d00:	482c      	ldr	r0, [pc, #176]	; (8007db4 <task_Current_Check+0xc4>)
 8007d02:	f001 ff27 	bl	8009b54 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, &adc2_data, 1);
 8007d06:	2201      	movs	r2, #1
 8007d08:	492b      	ldr	r1, [pc, #172]	; (8007db8 <task_Current_Check+0xc8>)
 8007d0a:	482c      	ldr	r0, [pc, #176]	; (8007dbc <task_Current_Check+0xcc>)
 8007d0c:	f001 ff22 	bl	8009b54 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc5, &adc5_data, 1);
 8007d10:	2201      	movs	r2, #1
 8007d12:	492b      	ldr	r1, [pc, #172]	; (8007dc0 <task_Current_Check+0xd0>)
 8007d14:	482b      	ldr	r0, [pc, #172]	; (8007dc4 <task_Current_Check+0xd4>)
 8007d16:	f001 ff1d 	bl	8009b54 <HAL_ADC_Start_DMA>

	  // overcurrent recovery handling
	  if(OCRtimer > 0)
 8007d1a:	4b2b      	ldr	r3, [pc, #172]	; (8007dc8 <task_Current_Check+0xd8>)
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d022      	beq.n	8007d68 <task_Current_Check+0x78>
	  {
		  if(OCRtimer == 1 && !I_VP_fault)
 8007d22:	4b29      	ldr	r3, [pc, #164]	; (8007dc8 <task_Current_Check+0xd8>)
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d118      	bne.n	8007d5c <task_Current_Check+0x6c>
 8007d2a:	4b28      	ldr	r3, [pc, #160]	; (8007dcc <task_Current_Check+0xdc>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d114      	bne.n	8007d5c <task_Current_Check+0x6c>
		  {
			  switch (UNICARD1data.OCR)
 8007d32:	4b27      	ldr	r3, [pc, #156]	; (8007dd0 <task_Current_Check+0xe0>)
 8007d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d002      	beq.n	8007d42 <task_Current_Check+0x52>
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d008      	beq.n	8007d52 <task_Current_Check+0x62>
			  {
			  	  default: /*UC1OCR_manual*/
			  		  //CardState = UDEV1CARD_OFF;
			  		  break;
 8007d40:	e00c      	b.n	8007d5c <task_Current_Check+0x6c>
			  	  case UC1OCR_automatic:
			  		  if(CardState != UDEV1CARD_OFF) CardState = UDEV1CARD_CON;
 8007d42:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <task_Current_Check+0xe4>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d007      	beq.n	8007d5a <task_Current_Check+0x6a>
 8007d4a:	4b22      	ldr	r3, [pc, #136]	; (8007dd4 <task_Current_Check+0xe4>)
 8007d4c:	2203      	movs	r2, #3
 8007d4e:	701a      	strb	r2, [r3, #0]
			  		  break;
 8007d50:	e003      	b.n	8007d5a <task_Current_Check+0x6a>
			  	  case UC1OCR_shutdown:
			  		  CardState = UDEV1CARD_OFF;
 8007d52:	4b20      	ldr	r3, [pc, #128]	; (8007dd4 <task_Current_Check+0xe4>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
			  		  break;
 8007d58:	e000      	b.n	8007d5c <task_Current_Check+0x6c>
			  		  break;
 8007d5a:	bf00      	nop
			  }
		  }
		  OCRtimer--;
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	; (8007dc8 <task_Current_Check+0xd8>)
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	4b18      	ldr	r3, [pc, #96]	; (8007dc8 <task_Current_Check+0xd8>)
 8007d66:	801a      	strh	r2, [r3, #0]
	  }

	  outEN = !((CardState == UDEV1CARD_OFF) || (CardState == UDEV1CARD_OVERCURRENT));
 8007d68:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <task_Current_Check+0xe4>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <task_Current_Check+0x8c>
 8007d70:	4b18      	ldr	r3, [pc, #96]	; (8007dd4 <task_Current_Check+0xe4>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d001      	beq.n	8007d7c <task_Current_Check+0x8c>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <task_Current_Check+0x8e>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73fb      	strb	r3, [r7, #15]

	  HAL_GPIO_WritePin(PWR3V3_EN_OUT_GPIO_Port, PWR3V3_EN_OUT_Pin, outEN);
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	461a      	mov	r2, r3
 8007d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d88:	4813      	ldr	r0, [pc, #76]	; (8007dd8 <task_Current_Check+0xe8>)
 8007d8a:	f003 feab 	bl	800bae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWR5VEN_OUT_GPIO_Port, PWR5VEN_OUT_Pin, outEN);
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	461a      	mov	r2, r3
 8007d92:	2110      	movs	r1, #16
 8007d94:	4810      	ldr	r0, [pc, #64]	; (8007dd8 <task_Current_Check+0xe8>)
 8007d96:	f003 fea5 	bl	800bae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWRVCC_EN_OUT_GPIO_Port, PWRVCC_EN_OUT_Pin, outEN);
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	2104      	movs	r1, #4
 8007da0:	480e      	ldr	r0, [pc, #56]	; (8007ddc <task_Current_Check+0xec>)
 8007da2:	f003 fe9f 	bl	800bae4 <HAL_GPIO_WritePin>

	  osDelay(1);
 8007da6:	2001      	movs	r0, #1
 8007da8:	f011 fe7b 	bl	8019aa2 <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, adc1_data, 2);
 8007dac:	e7a6      	b.n	8007cfc <task_Current_Check+0xc>
 8007dae:	bf00      	nop
 8007db0:	20000998 	.word	0x20000998
 8007db4:	200002e0 	.word	0x200002e0
 8007db8:	200009a0 	.word	0x200009a0
 8007dbc:	2000034c 	.word	0x2000034c
 8007dc0:	200009a4 	.word	0x200009a4
 8007dc4:	200003b8 	.word	0x200003b8
 8007dc8:	200009b8 	.word	0x200009b8
 8007dcc:	200009bc 	.word	0x200009bc
 8007dd0:	200009c4 	.word	0x200009c4
 8007dd4:	200009c0 	.word	0x200009c0
 8007dd8:	48000800 	.word	0x48000800
 8007ddc:	48000c00 	.word	0x48000c00

08007de0 <task_BUTTON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_BUTTON */
void task_BUTTON(void *argument)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_BUTTON */
	uint16_t ButtonTimer = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	81fb      	strh	r3, [r7, #14]
	uint8_t WaitingForRelease = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	737b      	strb	r3, [r7, #13]
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin))
 8007df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007df4:	4811      	ldr	r0, [pc, #68]	; (8007e3c <task_BUTTON+0x5c>)
 8007df6:	f003 fe5d 	bl	800bab4 <HAL_GPIO_ReadPin>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d011      	beq.n	8007e24 <task_BUTTON+0x44>
	{
		if(ButtonTimer <= 20 && !WaitingForRelease)
 8007e00:	89fb      	ldrh	r3, [r7, #14]
 8007e02:	2b14      	cmp	r3, #20
 8007e04:	d806      	bhi.n	8007e14 <task_BUTTON+0x34>
 8007e06:	7b7b      	ldrb	r3, [r7, #13]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d103      	bne.n	8007e14 <task_BUTTON+0x34>
			ButtonTimer++;
 8007e0c:	89fb      	ldrh	r3, [r7, #14]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	81fb      	strh	r3, [r7, #14]
 8007e12:	e00e      	b.n	8007e32 <task_BUTTON+0x52>
		else
		{
			WaitingForRelease = 1;
 8007e14:	2301      	movs	r3, #1
 8007e16:	737b      	strb	r3, [r7, #13]
			lastButtonPressTime = ButtonTimer;
 8007e18:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <task_BUTTON+0x60>)
 8007e1a:	89fb      	ldrh	r3, [r7, #14]
 8007e1c:	8013      	strh	r3, [r2, #0]
			ButtonTimer = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	81fb      	strh	r3, [r7, #14]
 8007e22:	e006      	b.n	8007e32 <task_BUTTON+0x52>
		}
	}
	else
	{
		WaitingForRelease = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	737b      	strb	r3, [r7, #13]
		lastButtonPressTime = ButtonTimer;
 8007e28:	4a05      	ldr	r2, [pc, #20]	; (8007e40 <task_BUTTON+0x60>)
 8007e2a:	89fb      	ldrh	r3, [r7, #14]
 8007e2c:	8013      	strh	r3, [r2, #0]
		ButtonTimer = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	81fb      	strh	r3, [r7, #14]
	}

    osDelay(50);
 8007e32:	2032      	movs	r0, #50	; 0x32
 8007e34:	f011 fe35 	bl	8019aa2 <osDelay>
	if(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin))
 8007e38:	e7da      	b.n	8007df0 <task_BUTTON+0x10>
 8007e3a:	bf00      	nop
 8007e3c:	48000800 	.word	0x48000800
 8007e40:	200009be 	.word	0x200009be

08007e44 <task_StateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_StateMachine */
void task_StateMachine(void *argument)
{
 8007e44:	b5b0      	push	{r4, r5, r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN task_StateMachine */
  /* Infinite loop */
  for(;;)
  {
	  //---------------------------------------------- Device state machine
	  switch (MainState)
 8007e4c:	4bb0      	ldr	r3, [pc, #704]	; (8008110 <task_StateMachine+0x2cc>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d023      	beq.n	8007e9c <task_StateMachine+0x58>
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d04c      	beq.n	8007ef2 <task_StateMachine+0xae>
	  {
	  	  default: //OFF
	  		  leds[0] = LED_Preset(PRESET_OFF);
 8007e58:	4cae      	ldr	r4, [pc, #696]	; (8008114 <task_StateMachine+0x2d0>)
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f015 ffdc 	bl	801de1c <LED_Preset>
 8007e64:	4625      	mov	r5, r4
 8007e66:	463c      	mov	r4, r7
 8007e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e70:	e885 0003 	stmia.w	r5, {r0, r1}
	  		  leds[1] = leds[0];
 8007e74:	4ba7      	ldr	r3, [pc, #668]	; (8008114 <task_StateMachine+0x2d0>)
 8007e76:	4aa7      	ldr	r2, [pc, #668]	; (8008114 <task_StateMachine+0x2d0>)
 8007e78:	f103 0418 	add.w	r4, r3, #24
 8007e7c:	4615      	mov	r5, r2
 8007e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e86:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  CardState = UDEV1CARD_OFF;
 8007e8a:	4ba3      	ldr	r3, [pc, #652]	; (8008118 <task_StateMachine+0x2d4>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
	  		  if(lastButtonPressTime >= 1)
 8007e90:	4ba2      	ldr	r3, [pc, #648]	; (800811c <task_StateMachine+0x2d8>)
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d050      	beq.n	8007f3a <task_StateMachine+0xf6>
	  		  {
	  			/*lastButtonPressTime = 0;
	  			MainState = UDEV1_ON_CON;
	  			CardState = UDEV1CARD_CON;*/
	  			NVIC_SystemReset();
 8007e98:	f7fe fd48 	bl	800692c <__NVIC_SystemReset>
	  		  }
	  		  break;
	  	  case UDEV1_ON_NC:
	  		  leds[0] = LED_Preset(PRESET_NOTLINKEDWITHPC);
 8007e9c:	4c9d      	ldr	r4, [pc, #628]	; (8008114 <task_StateMachine+0x2d0>)
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	2102      	movs	r1, #2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f015 ffba 	bl	801de1c <LED_Preset>
 8007ea8:	4625      	mov	r5, r4
 8007eaa:	463c      	mov	r4, r7
 8007eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007eb4:	e885 0003 	stmia.w	r5, {r0, r1}
	  		  leds[1] = leds[0];
 8007eb8:	4b96      	ldr	r3, [pc, #600]	; (8008114 <task_StateMachine+0x2d0>)
 8007eba:	4a96      	ldr	r2, [pc, #600]	; (8008114 <task_StateMachine+0x2d0>)
 8007ebc:	f103 0418 	add.w	r4, r3, #24
 8007ec0:	4615      	mov	r5, r2
 8007ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ec6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007eca:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(PCcon_Watchdog > 0) MainState = UDEV1_ON_CON;
 8007ece:	4b94      	ldr	r3, [pc, #592]	; (8008120 <task_StateMachine+0x2dc>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dd02      	ble.n	8007edc <task_StateMachine+0x98>
 8007ed6:	4b8e      	ldr	r3, [pc, #568]	; (8008110 <task_StateMachine+0x2cc>)
 8007ed8:	2202      	movs	r2, #2
 8007eda:	701a      	strb	r2, [r3, #0]

	  		  if(lastButtonPressTime >= 10)
 8007edc:	4b8f      	ldr	r3, [pc, #572]	; (800811c <task_StateMachine+0x2d8>)
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	2b09      	cmp	r3, #9
 8007ee2:	d92c      	bls.n	8007f3e <task_StateMachine+0xfa>
	  		  {
	  			lastButtonPressTime = 0;
 8007ee4:	4b8d      	ldr	r3, [pc, #564]	; (800811c <task_StateMachine+0x2d8>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	801a      	strh	r2, [r3, #0]
	  			MainState = UDEV1_OFF;
 8007eea:	4b89      	ldr	r3, [pc, #548]	; (8008110 <task_StateMachine+0x2cc>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007ef0:	e025      	b.n	8007f3e <task_StateMachine+0xfa>
	  	  case UDEV1_ON_CON:
	  		  leds[0] = LED_Preset(PRESET_LINKEDTOPC);
 8007ef2:	4c88      	ldr	r4, [pc, #544]	; (8008114 <task_StateMachine+0x2d0>)
 8007ef4:	463b      	mov	r3, r7
 8007ef6:	2103      	movs	r1, #3
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f015 ff8f 	bl	801de1c <LED_Preset>
 8007efe:	4625      	mov	r5, r4
 8007f00:	463c      	mov	r4, r7
 8007f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f0a:	e885 0003 	stmia.w	r5, {r0, r1}
	  		  leds[1] = leds[0];
 8007f0e:	4b81      	ldr	r3, [pc, #516]	; (8008114 <task_StateMachine+0x2d0>)
 8007f10:	4a80      	ldr	r2, [pc, #512]	; (8008114 <task_StateMachine+0x2d0>)
 8007f12:	f103 0418 	add.w	r4, r3, #24
 8007f16:	4615      	mov	r5, r2
 8007f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007f20:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 10)
 8007f24:	4b7d      	ldr	r3, [pc, #500]	; (800811c <task_StateMachine+0x2d8>)
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	2b09      	cmp	r3, #9
 8007f2a:	d90a      	bls.n	8007f42 <task_StateMachine+0xfe>
	  		  {
	  			lastButtonPressTime = 0;
 8007f2c:	4b7b      	ldr	r3, [pc, #492]	; (800811c <task_StateMachine+0x2d8>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	801a      	strh	r2, [r3, #0]
	  			MainState = UDEV1_OFF;
 8007f32:	4b77      	ldr	r3, [pc, #476]	; (8008110 <task_StateMachine+0x2cc>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007f38:	e003      	b.n	8007f42 <task_StateMachine+0xfe>
	  		  break;
 8007f3a:	bf00      	nop
 8007f3c:	e002      	b.n	8007f44 <task_StateMachine+0x100>
	  		  break;
 8007f3e:	bf00      	nop
 8007f40:	e000      	b.n	8007f44 <task_StateMachine+0x100>
	  		  break;
 8007f42:	bf00      	nop
	  }
	  //---------------------------------------------- Card state machine
	  switch (CardState)
 8007f44:	4b74      	ldr	r3, [pc, #464]	; (8008118 <task_StateMachine+0x2d4>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d80c      	bhi.n	8007f68 <task_StateMachine+0x124>
 8007f4e:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <task_StateMachine+0x110>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007fc3 	.word	0x08007fc3
 8007f58:	08007ff7 	.word	0x08007ff7
 8007f5c:	08008029 	.word	0x08008029
 8007f60:	08008075 	.word	0x08008075
 8007f64:	080080a7 	.word	0x080080a7
	  {
	  	  default: //UDEV1CARD_OFF
	  		  leds[2] = LED_Preset(PRESET_OFF);
 8007f68:	4c6a      	ldr	r4, [pc, #424]	; (8008114 <task_StateMachine+0x2d0>)
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f015 ff54 	bl	801de1c <LED_Preset>
 8007f74:	3430      	adds	r4, #48	; 0x30
 8007f76:	463d      	mov	r5, r7
 8007f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007f80:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1 && MainState != UDEV1_OFF && OCRtimer <= 1)
 8007f84:	4b65      	ldr	r3, [pc, #404]	; (800811c <task_StateMachine+0x2d8>)
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 80b2 	beq.w	80080f2 <task_StateMachine+0x2ae>
 8007f8e:	4b60      	ldr	r3, [pc, #384]	; (8008110 <task_StateMachine+0x2cc>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 80ad 	beq.w	80080f2 <task_StateMachine+0x2ae>
 8007f98:	4b62      	ldr	r3, [pc, #392]	; (8008124 <task_StateMachine+0x2e0>)
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	f200 80a8 	bhi.w	80080f2 <task_StateMachine+0x2ae>
	  		  {
	  			  lastButtonPressTime = 0;
 8007fa2:	4b5e      	ldr	r3, [pc, #376]	; (800811c <task_StateMachine+0x2d8>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	801a      	strh	r2, [r3, #0]
	  			  CardState = !HAL_GPIO_ReadPin(CardDetect_IN_GPIO_Port, CardDetect_IN_Pin) ? UDEV1CARD_CON : UDEV1CARD_NC;
 8007fa8:	2120      	movs	r1, #32
 8007faa:	485f      	ldr	r0, [pc, #380]	; (8008128 <task_StateMachine+0x2e4>)
 8007fac:	f003 fd82 	bl	800bab4 <HAL_GPIO_ReadPin>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <task_StateMachine+0x176>
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	e000      	b.n	8007fbc <task_StateMachine+0x178>
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4b56      	ldr	r3, [pc, #344]	; (8008118 <task_StateMachine+0x2d4>)
 8007fbe:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007fc0:	e097      	b.n	80080f2 <task_StateMachine+0x2ae>
	  	  case UDEV1CARD_NC:
	  		  leds[2] = LED_Preset(PRESET_CARDNOTDETECTED);
 8007fc2:	4c54      	ldr	r4, [pc, #336]	; (8008114 <task_StateMachine+0x2d0>)
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	2105      	movs	r1, #5
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f015 ff27 	bl	801de1c <LED_Preset>
 8007fce:	3430      	adds	r4, #48	; 0x30
 8007fd0:	463d      	mov	r5, r7
 8007fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007fda:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1)
 8007fde:	4b4f      	ldr	r3, [pc, #316]	; (800811c <task_StateMachine+0x2d8>)
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 8087 	beq.w	80080f6 <task_StateMachine+0x2b2>
	  		  {
	  			  lastButtonPressTime = 0;
 8007fe8:	4b4c      	ldr	r3, [pc, #304]	; (800811c <task_StateMachine+0x2d8>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 8007fee:	4b4a      	ldr	r3, [pc, #296]	; (8008118 <task_StateMachine+0x2d4>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8007ff4:	e07f      	b.n	80080f6 <task_StateMachine+0x2b2>
	  	  case UDEV1CARD_NOTRECOGNISED:
	  		  leds[2] = LED_Preset(PRESET_CARDNOTRECOGNISED);
 8007ff6:	4c47      	ldr	r4, [pc, #284]	; (8008114 <task_StateMachine+0x2d0>)
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	2106      	movs	r1, #6
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f015 ff0d 	bl	801de1c <LED_Preset>
 8008002:	3430      	adds	r4, #48	; 0x30
 8008004:	463d      	mov	r5, r7
 8008006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800800a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800800e:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1)
 8008012:	4b42      	ldr	r3, [pc, #264]	; (800811c <task_StateMachine+0x2d8>)
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d06f      	beq.n	80080fa <task_StateMachine+0x2b6>
	  		  {
	  			  lastButtonPressTime = 0;
 800801a:	4b40      	ldr	r3, [pc, #256]	; (800811c <task_StateMachine+0x2d8>)
 800801c:	2200      	movs	r2, #0
 800801e:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 8008020:	4b3d      	ldr	r3, [pc, #244]	; (8008118 <task_StateMachine+0x2d4>)
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
	  		  }
		  	  break;
 8008026:	e068      	b.n	80080fa <task_StateMachine+0x2b6>

	  	case UDEV1CARD_CON:
	  		  leds[2] = LED_Preset(PRESET_CARDRECOGNISED);
 8008028:	4c3a      	ldr	r4, [pc, #232]	; (8008114 <task_StateMachine+0x2d0>)
 800802a:	463b      	mov	r3, r7
 800802c:	2104      	movs	r1, #4
 800802e:	4618      	mov	r0, r3
 8008030:	f015 fef4 	bl	801de1c <LED_Preset>
 8008034:	3430      	adds	r4, #48	; 0x30
 8008036:	463d      	mov	r5, r7
 8008038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800803a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800803c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008040:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(ComFailCounter > 5) CardState = UDEV1CARD_COMFAIL;
 8008044:	4b39      	ldr	r3, [pc, #228]	; (800812c <task_StateMachine+0x2e8>)
 8008046:	edd3 7a00 	vldr	s15, [r3]
 800804a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800804e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008056:	dd02      	ble.n	800805e <task_StateMachine+0x21a>
 8008058:	4b2f      	ldr	r3, [pc, #188]	; (8008118 <task_StateMachine+0x2d4>)
 800805a:	2205      	movs	r2, #5
 800805c:	701a      	strb	r2, [r3, #0]

	  		  if(lastButtonPressTime >= 1)
 800805e:	4b2f      	ldr	r3, [pc, #188]	; (800811c <task_StateMachine+0x2d8>)
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d04b      	beq.n	80080fe <task_StateMachine+0x2ba>
	  		  {
	  			  lastButtonPressTime = 0;
 8008066:	4b2d      	ldr	r3, [pc, #180]	; (800811c <task_StateMachine+0x2d8>)
 8008068:	2200      	movs	r2, #0
 800806a:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 800806c:	4b2a      	ldr	r3, [pc, #168]	; (8008118 <task_StateMachine+0x2d4>)
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8008072:	e044      	b.n	80080fe <task_StateMachine+0x2ba>
	  	case UDEV1CARD_OVERCURRENT:
	  		  leds[2] = LED_Preset(PRESET_OVERCURRENT);
 8008074:	4c27      	ldr	r4, [pc, #156]	; (8008114 <task_StateMachine+0x2d0>)
 8008076:	463b      	mov	r3, r7
 8008078:	2101      	movs	r1, #1
 800807a:	4618      	mov	r0, r3
 800807c:	f015 fece 	bl	801de1c <LED_Preset>
 8008080:	3430      	adds	r4, #48	; 0x30
 8008082:	463d      	mov	r5, r7
 8008084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008088:	e895 0003 	ldmia.w	r5, {r0, r1}
 800808c:	e884 0003 	stmia.w	r4, {r0, r1}

	  		  if(lastButtonPressTime >= 1)
 8008090:	4b22      	ldr	r3, [pc, #136]	; (800811c <task_StateMachine+0x2d8>)
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d034      	beq.n	8008102 <task_StateMachine+0x2be>
	  		  {
	  			  lastButtonPressTime = 0;
 8008098:	4b20      	ldr	r3, [pc, #128]	; (800811c <task_StateMachine+0x2d8>)
 800809a:	2200      	movs	r2, #0
 800809c:	801a      	strh	r2, [r3, #0]
	  			  CardState = UDEV1CARD_OFF;
 800809e:	4b1e      	ldr	r3, [pc, #120]	; (8008118 <task_StateMachine+0x2d4>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 80080a4:	e02d      	b.n	8008102 <task_StateMachine+0x2be>

		case UDEV1CARD_COMFAIL:
		  	leds[2] = LED_Preset(PRESET_CARDCOMFAIL);
 80080a6:	4c1b      	ldr	r4, [pc, #108]	; (8008114 <task_StateMachine+0x2d0>)
 80080a8:	463b      	mov	r3, r7
 80080aa:	2107      	movs	r1, #7
 80080ac:	4618      	mov	r0, r3
 80080ae:	f015 feb5 	bl	801de1c <LED_Preset>
 80080b2:	3430      	adds	r4, #48	; 0x30
 80080b4:	463d      	mov	r5, r7
 80080b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80080be:	e884 0003 	stmia.w	r4, {r0, r1}

		  	if(ComFailCounter < 3)  CardState = UDEV1CARD_CON;
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <task_StateMachine+0x2e8>)
 80080c4:	edd3 7a00 	vldr	s15, [r3]
 80080c8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80080cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d4:	d502      	bpl.n	80080dc <task_StateMachine+0x298>
 80080d6:	4b10      	ldr	r3, [pc, #64]	; (8008118 <task_StateMachine+0x2d4>)
 80080d8:	2203      	movs	r2, #3
 80080da:	701a      	strb	r2, [r3, #0]

		  	if(lastButtonPressTime >= 1)
 80080dc:	4b0f      	ldr	r3, [pc, #60]	; (800811c <task_StateMachine+0x2d8>)
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d010      	beq.n	8008106 <task_StateMachine+0x2c2>
		  	{
		  		lastButtonPressTime = 0;
 80080e4:	4b0d      	ldr	r3, [pc, #52]	; (800811c <task_StateMachine+0x2d8>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	801a      	strh	r2, [r3, #0]
		  		CardState = UDEV1CARD_OFF;
 80080ea:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <task_StateMachine+0x2d4>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
		  	}
		  	break;
 80080f0:	e009      	b.n	8008106 <task_StateMachine+0x2c2>
	  		  break;
 80080f2:	bf00      	nop
 80080f4:	e008      	b.n	8008108 <task_StateMachine+0x2c4>
	  		  break;
 80080f6:	bf00      	nop
 80080f8:	e006      	b.n	8008108 <task_StateMachine+0x2c4>
		  	  break;
 80080fa:	bf00      	nop
 80080fc:	e004      	b.n	8008108 <task_StateMachine+0x2c4>
	  		  break;
 80080fe:	bf00      	nop
 8008100:	e002      	b.n	8008108 <task_StateMachine+0x2c4>
	  		  break;
 8008102:	bf00      	nop
 8008104:	e000      	b.n	8008108 <task_StateMachine+0x2c4>
		  	break;
 8008106:	bf00      	nop
	  }
	  osDelay(10);
 8008108:	200a      	movs	r0, #10
 800810a:	f011 fcca 	bl	8019aa2 <osDelay>
	  switch (MainState)
 800810e:	e69d      	b.n	8007e4c <task_StateMachine+0x8>
 8008110:	20000004 	.word	0x20000004
 8008114:	20012a70 	.word	0x20012a70
 8008118:	200009c0 	.word	0x200009c0
 800811c:	200009be 	.word	0x200009be
 8008120:	20001bc0 	.word	0x20001bc0
 8008124:	200009b8 	.word	0x200009b8
 8008128:	48000400 	.word	0x48000400
 800812c:	20001bc8 	.word	0x20001bc8

08008130 <task_PCconnectionWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_PCconnectionWatchDog */
void task_PCconnectionWatchDog(void *argument)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_PCconnectionWatchDog */
  /* Infinite loop */
  for(;;)
  {
	if(MainState != UDEV1_OFF)
 8008138:	4b0c      	ldr	r3, [pc, #48]	; (800816c <task_PCconnectionWatchDog+0x3c>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00d      	beq.n	800815c <task_PCconnectionWatchDog+0x2c>
	{
		if(PCcon_Watchdog > 0)	PCcon_Watchdog--;
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <task_PCconnectionWatchDog+0x40>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	dd05      	ble.n	8008154 <task_PCconnectionWatchDog+0x24>
 8008148:	4b09      	ldr	r3, [pc, #36]	; (8008170 <task_PCconnectionWatchDog+0x40>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3b01      	subs	r3, #1
 800814e:	4a08      	ldr	r2, [pc, #32]	; (8008170 <task_PCconnectionWatchDog+0x40>)
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	e006      	b.n	8008162 <task_PCconnectionWatchDog+0x32>
		else 					MainState = UDEV1_ON_NC;
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <task_PCconnectionWatchDog+0x3c>)
 8008156:	2201      	movs	r2, #1
 8008158:	701a      	strb	r2, [r3, #0]
 800815a:	e002      	b.n	8008162 <task_PCconnectionWatchDog+0x32>
	}
	else PCcon_Watchdog = PCcon_Watchdog_TIME;
 800815c:	4b04      	ldr	r3, [pc, #16]	; (8008170 <task_PCconnectionWatchDog+0x40>)
 800815e:	220a      	movs	r2, #10
 8008160:	601a      	str	r2, [r3, #0]
    osDelay(100);
 8008162:	2064      	movs	r0, #100	; 0x64
 8008164:	f011 fc9d 	bl	8019aa2 <osDelay>
	if(MainState != UDEV1_OFF)
 8008168:	e7e6      	b.n	8008138 <task_PCconnectionWatchDog+0x8>
 800816a:	bf00      	nop
 800816c:	20000004 	.word	0x20000004
 8008170:	20001bc0 	.word	0x20001bc0

08008174 <taks_CardConnectionWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taks_CardConnectionWatchDog */
void taks_CardConnectionWatchDog(void *argument)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taks_CardConnectionWatchDog */
  /* Infinite loop */
  for(;;)
  {
	if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NC)
 800817c:	4b0e      	ldr	r3, [pc, #56]	; (80081b8 <taks_CardConnectionWatchDog+0x44>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d011      	beq.n	80081a8 <taks_CardConnectionWatchDog+0x34>
 8008184:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <taks_CardConnectionWatchDog+0x48>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d90d      	bls.n	80081a8 <taks_CardConnectionWatchDog+0x34>
	{
		if(CardCon_Watchdog > 0)	CardCon_Watchdog--;
 800818c:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <taks_CardConnectionWatchDog+0x4c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	dd05      	ble.n	80081a0 <taks_CardConnectionWatchDog+0x2c>
 8008194:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <taks_CardConnectionWatchDog+0x4c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3b01      	subs	r3, #1
 800819a:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <taks_CardConnectionWatchDog+0x4c>)
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	e006      	b.n	80081ae <taks_CardConnectionWatchDog+0x3a>
		else 						CardState = UDEV1CARD_NOTRECOGNISED;
 80081a0:	4b06      	ldr	r3, [pc, #24]	; (80081bc <taks_CardConnectionWatchDog+0x48>)
 80081a2:	2202      	movs	r2, #2
 80081a4:	701a      	strb	r2, [r3, #0]
		if(CardCon_Watchdog > 0)	CardCon_Watchdog--;
 80081a6:	e002      	b.n	80081ae <taks_CardConnectionWatchDog+0x3a>
	}
	else CardCon_Watchdog = 0;
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <taks_CardConnectionWatchDog+0x4c>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
    osDelay(100);
 80081ae:	2064      	movs	r0, #100	; 0x64
 80081b0:	f011 fc77 	bl	8019aa2 <osDelay>
	if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NC)
 80081b4:	e7e2      	b.n	800817c <taks_CardConnectionWatchDog+0x8>
 80081b6:	bf00      	nop
 80081b8:	20000004 	.word	0x20000004
 80081bc:	200009c0 	.word	0x200009c0
 80081c0:	20001bc4 	.word	0x20001bc4

080081c4 <task_CardConnectionCheck>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_CardConnectionCheck */
void task_CardConnectionCheck(void *argument)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_CardConnectionCheck */

	uint8_t task_CardConnectionCheck_DONE = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if(!HAL_GPIO_ReadPin(CardDetect_IN_GPIO_Port, CardDetect_IN_Pin))
 80081d0:	2120      	movs	r1, #32
 80081d2:	4843      	ldr	r0, [pc, #268]	; (80082e0 <task_CardConnectionCheck+0x11c>)
 80081d4:	f003 fc6e 	bl	800bab4 <HAL_GPIO_ReadPin>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d107      	bne.n	80081ee <task_CardConnectionCheck+0x2a>
	  {
		  if(CardState == UDEV1CARD_NC) CardState = UDEV1CARD_CON;
 80081de:	4b41      	ldr	r3, [pc, #260]	; (80082e4 <task_CardConnectionCheck+0x120>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d10a      	bne.n	80081fc <task_CardConnectionCheck+0x38>
 80081e6:	4b3f      	ldr	r3, [pc, #252]	; (80082e4 <task_CardConnectionCheck+0x120>)
 80081e8:	2203      	movs	r2, #3
 80081ea:	701a      	strb	r2, [r3, #0]
 80081ec:	e006      	b.n	80081fc <task_CardConnectionCheck+0x38>
	  }
	  else if(CardState != UDEV1CARD_OFF) CardState = UDEV1CARD_NC;
 80081ee:	4b3d      	ldr	r3, [pc, #244]	; (80082e4 <task_CardConnectionCheck+0x120>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <task_CardConnectionCheck+0x38>
 80081f6:	4b3b      	ldr	r3, [pc, #236]	; (80082e4 <task_CardConnectionCheck+0x120>)
 80081f8:	2201      	movs	r2, #1
 80081fa:	701a      	strb	r2, [r3, #0]

	  task_CardConnectionCheck_DONE = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]

	  if(MainState != UDEV1_OFF && (CardState == UDEV1CARD_NOTRECOGNISED || CardState == UDEV1CARD_CON))
 8008200:	4b39      	ldr	r3, [pc, #228]	; (80082e8 <task_CardConnectionCheck+0x124>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d067      	beq.n	80082d8 <task_CardConnectionCheck+0x114>
 8008208:	4b36      	ldr	r3, [pc, #216]	; (80082e4 <task_CardConnectionCheck+0x120>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d003      	beq.n	8008218 <task_CardConnectionCheck+0x54>
 8008210:	4b34      	ldr	r3, [pc, #208]	; (80082e4 <task_CardConnectionCheck+0x120>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2b03      	cmp	r3, #3
 8008216:	d15f      	bne.n	80082d8 <task_CardConnectionCheck+0x114>
	  {
	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardConnectionCheck_DONE; i++)
 8008218:	2300      	movs	r3, #0
 800821a:	73bb      	strb	r3, [r7, #14]
 800821c:	e053      	b.n	80082c6 <task_CardConnectionCheck+0x102>
	  	  {
			  if(osMutexAcquire(mutex_RS485Handle, osWaitForever) == osOK)
 800821e:	4b33      	ldr	r3, [pc, #204]	; (80082ec <task_CardConnectionCheck+0x128>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f04f 31ff 	mov.w	r1, #4294967295
 8008226:	4618      	mov	r0, r3
 8008228:	f011 fcdc 	bl	8019be4 <osMutexAcquire>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d146      	bne.n	80082c0 <task_CardConnectionCheck+0xfc>
			  {
				  sprintf(RS485TXbuffer, "SYS:CON?");
 8008232:	492f      	ldr	r1, [pc, #188]	; (80082f0 <task_CardConnectionCheck+0x12c>)
 8008234:	482f      	ldr	r0, [pc, #188]	; (80082f4 <task_CardConnectionCheck+0x130>)
 8008236:	f017 fa1b 	bl	801f670 <siprintf>
				  RS485_Transmit_DMA(&RS485cfg);
 800823a:	482f      	ldr	r0, [pc, #188]	; (80082f8 <task_CardConnectionCheck+0x134>)
 800823c:	f014 ffa6 	bl	801d18c <RS485_Transmit_DMA>

				  for(uint16_t timer = RS485maxTimeToTransmit_ms; timer > 0 && !RS485_TransmitDone(&RS485cfg); timer--) osDelay(1);
 8008240:	230a      	movs	r3, #10
 8008242:	81bb      	strh	r3, [r7, #12]
 8008244:	e005      	b.n	8008252 <task_CardConnectionCheck+0x8e>
 8008246:	2001      	movs	r0, #1
 8008248:	f011 fc2b 	bl	8019aa2 <osDelay>
 800824c:	89bb      	ldrh	r3, [r7, #12]
 800824e:	3b01      	subs	r3, #1
 8008250:	81bb      	strh	r3, [r7, #12]
 8008252:	89bb      	ldrh	r3, [r7, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <task_CardConnectionCheck+0xa0>
 8008258:	4827      	ldr	r0, [pc, #156]	; (80082f8 <task_CardConnectionCheck+0x134>)
 800825a:	f014 ffdb 	bl	801d214 <RS485_TransmitDone>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0f0      	beq.n	8008246 <task_CardConnectionCheck+0x82>

				  for(uint16_t timer = RS485maxTimeToReceive_ms; timer > 0 && !RS485_IsReceived(); timer--) osDelay(1);
 8008264:	2364      	movs	r3, #100	; 0x64
 8008266:	817b      	strh	r3, [r7, #10]
 8008268:	e005      	b.n	8008276 <task_CardConnectionCheck+0xb2>
 800826a:	2001      	movs	r0, #1
 800826c:	f011 fc19 	bl	8019aa2 <osDelay>
 8008270:	897b      	ldrh	r3, [r7, #10]
 8008272:	3b01      	subs	r3, #1
 8008274:	817b      	strh	r3, [r7, #10]
 8008276:	897b      	ldrh	r3, [r7, #10]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <task_CardConnectionCheck+0xc2>
 800827c:	f014 ffe0 	bl	801d240 <RS485_IsReceived>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f1      	beq.n	800826a <task_CardConnectionCheck+0xa6>

				  if(RS485_IsReceived())// && UC1_CheckCardValidity(&UNICARD1data))
 8008286:	f014 ffdb 	bl	801d240 <RS485_IsReceived>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d010      	beq.n	80082b2 <task_CardConnectionCheck+0xee>
				  {
					  if(!strncmp(RS485RXbuffer, "OK\r\n", 2))
 8008290:	2202      	movs	r2, #2
 8008292:	491a      	ldr	r1, [pc, #104]	; (80082fc <task_CardConnectionCheck+0x138>)
 8008294:	481a      	ldr	r0, [pc, #104]	; (8008300 <task_CardConnectionCheck+0x13c>)
 8008296:	f017 fa13 	bl	801f6c0 <strncmp>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d105      	bne.n	80082ac <task_CardConnectionCheck+0xe8>
					  {
						  CardCon_Watchdog = CardCon_Watchdog_TIME;
 80082a0:	4b18      	ldr	r3, [pc, #96]	; (8008304 <task_CardConnectionCheck+0x140>)
 80082a2:	220a      	movs	r2, #10
 80082a4:	601a      	str	r2, [r3, #0]
						  CardState = UDEV1CARD_CON;
 80082a6:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <task_CardConnectionCheck+0x120>)
 80082a8:	2203      	movs	r2, #3
 80082aa:	701a      	strb	r2, [r3, #0]
					  }
					  RS485receiveFlag = 0;
 80082ac:	4b16      	ldr	r3, [pc, #88]	; (8008308 <task_CardConnectionCheck+0x144>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	701a      	strb	r2, [r3, #0]
				  }
				  task_CardConnectionCheck_DONE = 1;
 80082b2:	2301      	movs	r3, #1
 80082b4:	73fb      	strb	r3, [r7, #15]
				  osMutexRelease(mutex_RS485Handle);
 80082b6:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <task_CardConnectionCheck+0x128>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f011 fcdd 	bl	8019c7a <osMutexRelease>
	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardConnectionCheck_DONE; i++)
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	3301      	adds	r3, #1
 80082c4:	73bb      	strb	r3, [r7, #14]
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	d802      	bhi.n	80082d2 <task_CardConnectionCheck+0x10e>
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0a5      	beq.n	800821e <task_CardConnectionCheck+0x5a>
			  }
		  }
		  osDelay(1);
 80082d2:	2001      	movs	r0, #1
 80082d4:	f011 fbe5 	bl	8019aa2 <osDelay>
	  }
	  osDelay(Card_ConnectionCheckPeriod_ms);
 80082d8:	20c8      	movs	r0, #200	; 0xc8
 80082da:	f011 fbe2 	bl	8019aa2 <osDelay>
	  if(!HAL_GPIO_ReadPin(CardDetect_IN_GPIO_Port, CardDetect_IN_Pin))
 80082de:	e777      	b.n	80081d0 <task_CardConnectionCheck+0xc>
 80082e0:	48000400 	.word	0x48000400
 80082e4:	200009c0 	.word	0x200009c0
 80082e8:	20000004 	.word	0x20000004
 80082ec:	20000990 	.word	0x20000990
 80082f0:	08020a34 	.word	0x08020a34
 80082f4:	20000a2c 	.word	0x20000a2c
 80082f8:	20000a18 	.word	0x20000a18
 80082fc:	08020a40 	.word	0x08020a40
 8008300:	20001008 	.word	0x20001008
 8008304:	20001bc4 	.word	0x20001bc4
 8008308:	20012a6c 	.word	0x20012a6c
 800830c:	00000000 	.word	0x00000000

08008310 <task_CardUpdateStatus>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_CardUpdateStatus */
void task_CardUpdateStatus(void *argument)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_CardUpdateStatus */
	uint8_t task_CardUpdateStatus_DONE = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  	  task_CardUpdateStatus_DONE = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
	  	  if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NOTRECOGNISED)
 8008320:	4b57      	ldr	r3, [pc, #348]	; (8008480 <task_CardUpdateStatus+0x170>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 809c 	beq.w	8008462 <task_CardUpdateStatus+0x152>
 800832a:	4b56      	ldr	r3, [pc, #344]	; (8008484 <task_CardUpdateStatus+0x174>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b02      	cmp	r3, #2
 8008330:	f240 8097 	bls.w	8008462 <task_CardUpdateStatus+0x152>
	  	  {
	  	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardUpdateStatus_DONE; i++)
 8008334:	2300      	movs	r3, #0
 8008336:	73bb      	strb	r3, [r7, #14]
 8008338:	e089      	b.n	800844e <task_CardUpdateStatus+0x13e>
	  	  	  {
	  			  if(osMutexAcquire(mutex_RS485Handle, osWaitForever) == osOK)
 800833a:	4b53      	ldr	r3, [pc, #332]	; (8008488 <task_CardUpdateStatus+0x178>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f04f 31ff 	mov.w	r1, #4294967295
 8008342:	4618      	mov	r0, r3
 8008344:	f011 fc4e 	bl	8019be4 <osMutexAcquire>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d17c      	bne.n	8008448 <task_CardUpdateStatus+0x138>
	  			  {
	  				  sprintf(RS485TXbuffer, "SYS:STATUS:%d",(uint8_t)CardState);
 800834e:	4b4d      	ldr	r3, [pc, #308]	; (8008484 <task_CardUpdateStatus+0x174>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	494d      	ldr	r1, [pc, #308]	; (800848c <task_CardUpdateStatus+0x17c>)
 8008356:	484e      	ldr	r0, [pc, #312]	; (8008490 <task_CardUpdateStatus+0x180>)
 8008358:	f017 f98a 	bl	801f670 <siprintf>
	  				  RS485_Transmit_DMA(&RS485cfg);
 800835c:	484d      	ldr	r0, [pc, #308]	; (8008494 <task_CardUpdateStatus+0x184>)
 800835e:	f014 ff15 	bl	801d18c <RS485_Transmit_DMA>

	  				  for(uint16_t timer = RS485maxTimeToTransmit_ms; timer > 0 && !RS485_TransmitDone(&RS485cfg); timer--) osDelay(1);
 8008362:	230a      	movs	r3, #10
 8008364:	81bb      	strh	r3, [r7, #12]
 8008366:	e005      	b.n	8008374 <task_CardUpdateStatus+0x64>
 8008368:	2001      	movs	r0, #1
 800836a:	f011 fb9a 	bl	8019aa2 <osDelay>
 800836e:	89bb      	ldrh	r3, [r7, #12]
 8008370:	3b01      	subs	r3, #1
 8008372:	81bb      	strh	r3, [r7, #12]
 8008374:	89bb      	ldrh	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d005      	beq.n	8008386 <task_CardUpdateStatus+0x76>
 800837a:	4846      	ldr	r0, [pc, #280]	; (8008494 <task_CardUpdateStatus+0x184>)
 800837c:	f014 ff4a 	bl	801d214 <RS485_TransmitDone>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0f0      	beq.n	8008368 <task_CardUpdateStatus+0x58>

	  				  for(uint16_t timer = RS485maxTimeToReceive_ms; timer > 0 && !RS485_IsReceived(); timer--) osDelay(1);
 8008386:	2364      	movs	r3, #100	; 0x64
 8008388:	817b      	strh	r3, [r7, #10]
 800838a:	e005      	b.n	8008398 <task_CardUpdateStatus+0x88>
 800838c:	2001      	movs	r0, #1
 800838e:	f011 fb88 	bl	8019aa2 <osDelay>
 8008392:	897b      	ldrh	r3, [r7, #10]
 8008394:	3b01      	subs	r3, #1
 8008396:	817b      	strh	r3, [r7, #10]
 8008398:	897b      	ldrh	r3, [r7, #10]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d004      	beq.n	80083a8 <task_CardUpdateStatus+0x98>
 800839e:	f014 ff4f 	bl	801d240 <RS485_IsReceived>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d0f1      	beq.n	800838c <task_CardUpdateStatus+0x7c>

	  				  if(RS485_IsReceived() && !strncmp(RS485RXbuffer, "OK\r\n", 2))// && UC1_CheckCardValidity(&UNICARD1data))
 80083a8:	f014 ff4a 	bl	801d240 <RS485_IsReceived>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d025      	beq.n	80083fe <task_CardUpdateStatus+0xee>
 80083b2:	2202      	movs	r2, #2
 80083b4:	4938      	ldr	r1, [pc, #224]	; (8008498 <task_CardUpdateStatus+0x188>)
 80083b6:	4839      	ldr	r0, [pc, #228]	; (800849c <task_CardUpdateStatus+0x18c>)
 80083b8:	f017 f982 	bl	801f6c0 <strncmp>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d11d      	bne.n	80083fe <task_CardUpdateStatus+0xee>
	  				  {
	  						if(ComFailCounter > 0) ComFailCounter -= Card_acceptableFailedComRatio;
 80083c2:	4b37      	ldr	r3, [pc, #220]	; (80084a0 <task_CardUpdateStatus+0x190>)
 80083c4:	edd3 7a00 	vldr	s15, [r3]
 80083c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d0:	dd12      	ble.n	80083f8 <task_CardUpdateStatus+0xe8>
 80083d2:	4b33      	ldr	r3, [pc, #204]	; (80084a0 <task_CardUpdateStatus+0x190>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fd fd3e 	bl	8005e58 <__aeabi_f2d>
 80083dc:	a324      	add	r3, pc, #144	; (adr r3, 8008470 <task_CardUpdateStatus+0x160>)
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f7fd fbd9 	bl	8005b98 <__aeabi_dsub>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	f7fe f845 	bl	800647c <__aeabi_d2f>
 80083f2:	4603      	mov	r3, r0
 80083f4:	4a2a      	ldr	r2, [pc, #168]	; (80084a0 <task_CardUpdateStatus+0x190>)
 80083f6:	6013      	str	r3, [r2, #0]
	  						task_CardUpdateStatus_DONE = 1;
 80083f8:	2301      	movs	r3, #1
 80083fa:	73fb      	strb	r3, [r7, #15]
 80083fc:	e01c      	b.n	8008438 <task_CardUpdateStatus+0x128>
	  				  }
	  				  else if(ComFailCounter < 10) ComFailCounter += (1-Card_acceptableFailedComRatio);
 80083fe:	4b28      	ldr	r3, [pc, #160]	; (80084a0 <task_CardUpdateStatus+0x190>)
 8008400:	edd3 7a00 	vldr	s15, [r3]
 8008404:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800840c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008410:	d512      	bpl.n	8008438 <task_CardUpdateStatus+0x128>
 8008412:	4b23      	ldr	r3, [pc, #140]	; (80084a0 <task_CardUpdateStatus+0x190>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f7fd fd1e 	bl	8005e58 <__aeabi_f2d>
 800841c:	a316      	add	r3, pc, #88	; (adr r3, 8008478 <task_CardUpdateStatus+0x168>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7fd fbbb 	bl	8005b9c <__adddf3>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4610      	mov	r0, r2
 800842c:	4619      	mov	r1, r3
 800842e:	f7fe f825 	bl	800647c <__aeabi_d2f>
 8008432:	4603      	mov	r3, r0
 8008434:	4a1a      	ldr	r2, [pc, #104]	; (80084a0 <task_CardUpdateStatus+0x190>)
 8008436:	6013      	str	r3, [r2, #0]

	  				  RS485receiveFlag = 0;
 8008438:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <task_CardUpdateStatus+0x194>)
 800843a:	2200      	movs	r2, #0
 800843c:	701a      	strb	r2, [r3, #0]

	  				  osMutexRelease(mutex_RS485Handle);
 800843e:	4b12      	ldr	r3, [pc, #72]	; (8008488 <task_CardUpdateStatus+0x178>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4618      	mov	r0, r3
 8008444:	f011 fc19 	bl	8019c7a <osMutexRelease>
	  	  	  for(uint8_t i = 0; i < Card_CommMaxRetryCount && !task_CardUpdateStatus_DONE; i++)
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	3301      	adds	r3, #1
 800844c:	73bb      	strb	r3, [r7, #14]
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b04      	cmp	r3, #4
 8008452:	d803      	bhi.n	800845c <task_CardUpdateStatus+0x14c>
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f43f af6f 	beq.w	800833a <task_CardUpdateStatus+0x2a>
	  			  }
	  		  }
	  		  osDelay(1);
 800845c:	2001      	movs	r0, #1
 800845e:	f011 fb20 	bl	8019aa2 <osDelay>
	  	  }
    osDelay(Card_StatusUpdatePeriod_ms);
 8008462:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008466:	f011 fb1c 	bl	8019aa2 <osDelay>
	  	  task_CardUpdateStatus_DONE = 0;
 800846a:	e757      	b.n	800831c <task_CardUpdateStatus+0xc>
 800846c:	f3af 8000 	nop.w
 8008470:	9999999a 	.word	0x9999999a
 8008474:	3fb99999 	.word	0x3fb99999
 8008478:	cccccccd 	.word	0xcccccccd
 800847c:	3feccccc 	.word	0x3feccccc
 8008480:	20000004 	.word	0x20000004
 8008484:	200009c0 	.word	0x200009c0
 8008488:	20000990 	.word	0x20000990
 800848c:	08020a48 	.word	0x08020a48
 8008490:	20000a2c 	.word	0x20000a2c
 8008494:	20000a18 	.word	0x20000a18
 8008498:	08020a40 	.word	0x08020a40
 800849c:	20001008 	.word	0x20001008
 80084a0:	20001bc8 	.word	0x20001bc8
 80084a4:	20012a6c 	.word	0x20012a6c

080084a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM20) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a04      	ldr	r2, [pc, #16]	; (80084c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d101      	bne.n	80084be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80084ba:	f000 fec3 	bl	8009244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	40015000 	.word	0x40015000

080084cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80084d2:	b672      	cpsid	i
}
 80084d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t toggler = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	71fb      	strb	r3, [r7, #7]
  int rstTimer = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  HAL_GPIO_WritePin(PWR3V3_EN_OUT_GPIO_Port, PWR3V3_EN_OUT_Pin, 0);
 80084de:	2200      	movs	r2, #0
 80084e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084e4:	482d      	ldr	r0, [pc, #180]	; (800859c <Error_Handler+0xd0>)
 80084e6:	f003 fafd 	bl	800bae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWR5VEN_OUT_GPIO_Port, PWR5VEN_OUT_Pin, 0);
 80084ea:	2200      	movs	r2, #0
 80084ec:	2110      	movs	r1, #16
 80084ee:	482b      	ldr	r0, [pc, #172]	; (800859c <Error_Handler+0xd0>)
 80084f0:	f003 faf8 	bl	800bae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PWRVCC_EN_OUT_GPIO_Port, PWRVCC_EN_OUT_Pin, 0);
 80084f4:	2200      	movs	r2, #0
 80084f6:	2104      	movs	r1, #4
 80084f8:	4829      	ldr	r0, [pc, #164]	; (80085a0 <Error_Handler+0xd4>)
 80084fa:	f003 faf3 	bl	800bae4 <HAL_GPIO_WritePin>

	  LED_PWMSET(1, 0, 0);
 80084fe:	ed9f 1a29 	vldr	s2, [pc, #164]	; 80085a4 <Error_Handler+0xd8>
 8008502:	eddf 0a28 	vldr	s1, [pc, #160]	; 80085a4 <Error_Handler+0xd8>
 8008506:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800850a:	f015 fc1f 	bl	801dd4c <LED_PWMSET>
	  HAL_GPIO_WritePin(LED1_OUT_GPIO_Port, LED1_OUT_Pin, !toggler);
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	2b00      	cmp	r3, #0
 8008512:	bf0c      	ite	eq
 8008514:	2301      	moveq	r3, #1
 8008516:	2300      	movne	r3, #0
 8008518:	b2db      	uxtb	r3, r3
 800851a:	461a      	mov	r2, r3
 800851c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008520:	4821      	ldr	r0, [pc, #132]	; (80085a8 <Error_Handler+0xdc>)
 8008522:	f003 fadf 	bl	800bae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_OUT_GPIO_Port, LED2_OUT_Pin, toggler);
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	461a      	mov	r2, r3
 800852a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800852e:	481e      	ldr	r0, [pc, #120]	; (80085a8 <Error_Handler+0xdc>)
 8008530:	f003 fad8 	bl	800bae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_OUT_GPIO_Port, LED3_OUT_Pin, 0);
 8008534:	2200      	movs	r2, #0
 8008536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800853a:	481b      	ldr	r0, [pc, #108]	; (80085a8 <Error_Handler+0xdc>)
 800853c:	f003 fad2 	bl	800bae4 <HAL_GPIO_WritePin>
	  toggler = !toggler;
 8008540:	79fb      	ldrb	r3, [r7, #7]
 8008542:	2b00      	cmp	r3, #0
 8008544:	bf0c      	ite	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	2300      	movne	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	71fb      	strb	r3, [r7, #7]

	  if(rstTimer >= 1 && !HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin)) NVIC_SystemReset();
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	dd09      	ble.n	8008568 <Error_Handler+0x9c>
 8008554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008558:	4810      	ldr	r0, [pc, #64]	; (800859c <Error_Handler+0xd0>)
 800855a:	f003 faab 	bl	800bab4 <HAL_GPIO_ReadPin>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <Error_Handler+0x9c>
 8008564:	f7fe f9e2 	bl	800692c <__NVIC_SystemReset>

	  if(HAL_GPIO_ReadPin(TEST_BUTTON_GPIO_Port, TEST_BUTTON_Pin)) rstTimer++;
 8008568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800856c:	480b      	ldr	r0, [pc, #44]	; (800859c <Error_Handler+0xd0>)
 800856e:	f003 faa1 	bl	800bab4 <HAL_GPIO_ReadPin>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <Error_Handler+0xb4>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	3301      	adds	r3, #1
 800857c:	603b      	str	r3, [r7, #0]
 800857e:	e008      	b.n	8008592 <Error_Handler+0xc6>
	  else if(rstTimer > 0) rstTimer--;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd03      	ble.n	800858e <Error_Handler+0xc2>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	3b01      	subs	r3, #1
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	e001      	b.n	8008592 <Error_Handler+0xc6>
	  else rstTimer = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	603b      	str	r3, [r7, #0]

	  delay(200);
 8008592:	20c8      	movs	r0, #200	; 0xc8
 8008594:	f7ff f9fc 	bl	8007990 <delay>
	  HAL_GPIO_WritePin(PWR3V3_EN_OUT_GPIO_Port, PWR3V3_EN_OUT_Pin, 0);
 8008598:	e7a1      	b.n	80084de <Error_Handler+0x12>
 800859a:	bf00      	nop
 800859c:	48000800 	.word	0x48000800
 80085a0:	48000c00 	.word	0x48000c00
 80085a4:	00000000 	.word	0x00000000
 80085a8:	48000400 	.word	0x48000400

080085ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085b2:	4b16      	ldr	r3, [pc, #88]	; (800860c <HAL_MspInit+0x60>)
 80085b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b6:	4a15      	ldr	r2, [pc, #84]	; (800860c <HAL_MspInit+0x60>)
 80085b8:	f043 0301 	orr.w	r3, r3, #1
 80085bc:	6613      	str	r3, [r2, #96]	; 0x60
 80085be:	4b13      	ldr	r3, [pc, #76]	; (800860c <HAL_MspInit+0x60>)
 80085c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	607b      	str	r3, [r7, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085ca:	4b10      	ldr	r3, [pc, #64]	; (800860c <HAL_MspInit+0x60>)
 80085cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ce:	4a0f      	ldr	r2, [pc, #60]	; (800860c <HAL_MspInit+0x60>)
 80085d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085d4:	6593      	str	r3, [r2, #88]	; 0x58
 80085d6:	4b0d      	ldr	r3, [pc, #52]	; (800860c <HAL_MspInit+0x60>)
 80085d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80085e2:	2200      	movs	r2, #0
 80085e4:	210f      	movs	r1, #15
 80085e6:	f06f 0001 	mvn.w	r0, #1
 80085ea:	f002 fd87 	bl	800b0fc <HAL_NVIC_SetPriority>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80085ee:	2000      	movs	r0, #0
 80085f0:	f000 fe68 	bl	80092c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80085f4:	f000 fe8e 	bl	8009314 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80085f8:	2000      	movs	r0, #0
 80085fa:	f000 fe77 	bl	80092ec <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80085fe:	f005 f993 	bl	800d928 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	40021000 	.word	0x40021000

08008610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b0a4      	sub	sp, #144	; 0x90
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008618:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800861c:	2200      	movs	r2, #0
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	605a      	str	r2, [r3, #4]
 8008622:	609a      	str	r2, [r3, #8]
 8008624:	60da      	str	r2, [r3, #12]
 8008626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800862c:	2254      	movs	r2, #84	; 0x54
 800862e:	2100      	movs	r1, #0
 8008630:	4618      	mov	r0, r3
 8008632:	f017 f83d 	bl	801f6b0 <memset>
  if(hadc->Instance==ADC1)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800863e:	f040 808e 	bne.w	800875e <HAL_ADC_MspInit+0x14e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008646:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008648:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800864c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800864e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008652:	4618      	mov	r0, r3
 8008654:	f005 fed8 	bl	800e408 <HAL_RCCEx_PeriphCLKConfig>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800865e:	f7ff ff35 	bl	80084cc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8008662:	4b7c      	ldr	r3, [pc, #496]	; (8008854 <HAL_ADC_MspInit+0x244>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3301      	adds	r3, #1
 8008668:	4a7a      	ldr	r2, [pc, #488]	; (8008854 <HAL_ADC_MspInit+0x244>)
 800866a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800866c:	4b79      	ldr	r3, [pc, #484]	; (8008854 <HAL_ADC_MspInit+0x244>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d10b      	bne.n	800868c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8008674:	4b78      	ldr	r3, [pc, #480]	; (8008858 <HAL_ADC_MspInit+0x248>)
 8008676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008678:	4a77      	ldr	r2, [pc, #476]	; (8008858 <HAL_ADC_MspInit+0x248>)
 800867a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800867e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008680:	4b75      	ldr	r3, [pc, #468]	; (8008858 <HAL_ADC_MspInit+0x248>)
 8008682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800868c:	4b72      	ldr	r3, [pc, #456]	; (8008858 <HAL_ADC_MspInit+0x248>)
 800868e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008690:	4a71      	ldr	r2, [pc, #452]	; (8008858 <HAL_ADC_MspInit+0x248>)
 8008692:	f043 0320 	orr.w	r3, r3, #32
 8008696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008698:	4b6f      	ldr	r3, [pc, #444]	; (8008858 <HAL_ADC_MspInit+0x248>)
 800869a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	623b      	str	r3, [r7, #32]
 80086a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086a4:	4b6c      	ldr	r3, [pc, #432]	; (8008858 <HAL_ADC_MspInit+0x248>)
 80086a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a8:	4a6b      	ldr	r2, [pc, #428]	; (8008858 <HAL_ADC_MspInit+0x248>)
 80086aa:	f043 0302 	orr.w	r3, r3, #2
 80086ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086b0:	4b69      	ldr	r3, [pc, #420]	; (8008858 <HAL_ADC_MspInit+0x248>)
 80086b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b4:	f003 0302 	and.w	r3, r3, #2
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = PWR3V3_ISENSE_ADC1IN10_Pin;
 80086bc:	2301      	movs	r3, #1
 80086be:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086c0:	2303      	movs	r3, #3
 80086c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(PWR3V3_ISENSE_ADC1IN10_GPIO_Port, &GPIO_InitStruct);
 80086cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80086d0:	4619      	mov	r1, r3
 80086d2:	4862      	ldr	r0, [pc, #392]	; (800885c <HAL_ADC_MspInit+0x24c>)
 80086d4:	f003 f86c 	bl	800b7b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VIN_SENSE_ADC1_IN11_Pin;
 80086d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086de:	2303      	movs	r3, #3
 80086e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(VIN_SENSE_ADC1_IN11_GPIO_Port, &GPIO_InitStruct);
 80086ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80086ee:	4619      	mov	r1, r3
 80086f0:	485b      	ldr	r0, [pc, #364]	; (8008860 <HAL_ADC_MspInit+0x250>)
 80086f2:	f003 f85d 	bl	800b7b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 80086f6:	4b5b      	ldr	r3, [pc, #364]	; (8008864 <HAL_ADC_MspInit+0x254>)
 80086f8:	4a5b      	ldr	r2, [pc, #364]	; (8008868 <HAL_ADC_MspInit+0x258>)
 80086fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80086fc:	4b59      	ldr	r3, [pc, #356]	; (8008864 <HAL_ADC_MspInit+0x254>)
 80086fe:	2205      	movs	r2, #5
 8008700:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008702:	4b58      	ldr	r3, [pc, #352]	; (8008864 <HAL_ADC_MspInit+0x254>)
 8008704:	2200      	movs	r2, #0
 8008706:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008708:	4b56      	ldr	r3, [pc, #344]	; (8008864 <HAL_ADC_MspInit+0x254>)
 800870a:	2200      	movs	r2, #0
 800870c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800870e:	4b55      	ldr	r3, [pc, #340]	; (8008864 <HAL_ADC_MspInit+0x254>)
 8008710:	2280      	movs	r2, #128	; 0x80
 8008712:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008714:	4b53      	ldr	r3, [pc, #332]	; (8008864 <HAL_ADC_MspInit+0x254>)
 8008716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800871a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800871c:	4b51      	ldr	r3, [pc, #324]	; (8008864 <HAL_ADC_MspInit+0x254>)
 800871e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008722:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008724:	4b4f      	ldr	r3, [pc, #316]	; (8008864 <HAL_ADC_MspInit+0x254>)
 8008726:	2220      	movs	r2, #32
 8008728:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800872a:	4b4e      	ldr	r3, [pc, #312]	; (8008864 <HAL_ADC_MspInit+0x254>)
 800872c:	2200      	movs	r2, #0
 800872e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008730:	484c      	ldr	r0, [pc, #304]	; (8008864 <HAL_ADC_MspInit+0x254>)
 8008732:	f002 fd0b 	bl	800b14c <HAL_DMA_Init>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800873c:	f7ff fec6 	bl	80084cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a48      	ldr	r2, [pc, #288]	; (8008864 <HAL_ADC_MspInit+0x254>)
 8008744:	655a      	str	r2, [r3, #84]	; 0x54
 8008746:	4a47      	ldr	r2, [pc, #284]	; (8008864 <HAL_ADC_MspInit+0x254>)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800874c:	2200      	movs	r2, #0
 800874e:	2105      	movs	r1, #5
 8008750:	2012      	movs	r0, #18
 8008752:	f002 fcd3 	bl	800b0fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008756:	2012      	movs	r0, #18
 8008758:	f002 fcea 	bl	800b130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800875c:	e0fc      	b.n	8008958 <HAL_ADC_MspInit+0x348>
  else if(hadc->Instance==ADC2)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a42      	ldr	r2, [pc, #264]	; (800886c <HAL_ADC_MspInit+0x25c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	f040 8087 	bne.w	8008878 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800876a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008770:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008774:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800877a:	4618      	mov	r0, r3
 800877c:	f005 fe44 	bl	800e408 <HAL_RCCEx_PeriphCLKConfig>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8008786:	f7ff fea1 	bl	80084cc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800878a:	4b32      	ldr	r3, [pc, #200]	; (8008854 <HAL_ADC_MspInit+0x244>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3301      	adds	r3, #1
 8008790:	4a30      	ldr	r2, [pc, #192]	; (8008854 <HAL_ADC_MspInit+0x244>)
 8008792:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8008794:	4b2f      	ldr	r3, [pc, #188]	; (8008854 <HAL_ADC_MspInit+0x244>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d10b      	bne.n	80087b4 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800879c:	4b2e      	ldr	r3, [pc, #184]	; (8008858 <HAL_ADC_MspInit+0x248>)
 800879e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a0:	4a2d      	ldr	r2, [pc, #180]	; (8008858 <HAL_ADC_MspInit+0x248>)
 80087a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80087a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087a8:	4b2b      	ldr	r3, [pc, #172]	; (8008858 <HAL_ADC_MspInit+0x248>)
 80087aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087b0:	61bb      	str	r3, [r7, #24]
 80087b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087b4:	4b28      	ldr	r3, [pc, #160]	; (8008858 <HAL_ADC_MspInit+0x248>)
 80087b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b8:	4a27      	ldr	r2, [pc, #156]	; (8008858 <HAL_ADC_MspInit+0x248>)
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087c0:	4b25      	ldr	r3, [pc, #148]	; (8008858 <HAL_ADC_MspInit+0x248>)
 80087c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWR5VISENSE_ADC2IN17_Pin;
 80087cc:	2310      	movs	r3, #16
 80087ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087d0:	2303      	movs	r3, #3
 80087d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(PWR5VISENSE_ADC2IN17_GPIO_Port, &GPIO_InitStruct);
 80087dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80087e0:	4619      	mov	r1, r3
 80087e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087e6:	f002 ffe3 	bl	800b7b0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 80087ea:	4b21      	ldr	r3, [pc, #132]	; (8008870 <HAL_ADC_MspInit+0x260>)
 80087ec:	4a21      	ldr	r2, [pc, #132]	; (8008874 <HAL_ADC_MspInit+0x264>)
 80087ee:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80087f0:	4b1f      	ldr	r3, [pc, #124]	; (8008870 <HAL_ADC_MspInit+0x260>)
 80087f2:	2224      	movs	r2, #36	; 0x24
 80087f4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087f6:	4b1e      	ldr	r3, [pc, #120]	; (8008870 <HAL_ADC_MspInit+0x260>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80087fc:	4b1c      	ldr	r3, [pc, #112]	; (8008870 <HAL_ADC_MspInit+0x260>)
 80087fe:	2200      	movs	r2, #0
 8008800:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8008802:	4b1b      	ldr	r3, [pc, #108]	; (8008870 <HAL_ADC_MspInit+0x260>)
 8008804:	2280      	movs	r2, #128	; 0x80
 8008806:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008808:	4b19      	ldr	r3, [pc, #100]	; (8008870 <HAL_ADC_MspInit+0x260>)
 800880a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800880e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008810:	4b17      	ldr	r3, [pc, #92]	; (8008870 <HAL_ADC_MspInit+0x260>)
 8008812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008816:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8008818:	4b15      	ldr	r3, [pc, #84]	; (8008870 <HAL_ADC_MspInit+0x260>)
 800881a:	2220      	movs	r2, #32
 800881c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800881e:	4b14      	ldr	r3, [pc, #80]	; (8008870 <HAL_ADC_MspInit+0x260>)
 8008820:	2200      	movs	r2, #0
 8008822:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8008824:	4812      	ldr	r0, [pc, #72]	; (8008870 <HAL_ADC_MspInit+0x260>)
 8008826:	f002 fc91 	bl	800b14c <HAL_DMA_Init>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <HAL_ADC_MspInit+0x224>
      Error_Handler();
 8008830:	f7ff fe4c 	bl	80084cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a0e      	ldr	r2, [pc, #56]	; (8008870 <HAL_ADC_MspInit+0x260>)
 8008838:	655a      	str	r2, [r3, #84]	; 0x54
 800883a:	4a0d      	ldr	r2, [pc, #52]	; (8008870 <HAL_ADC_MspInit+0x260>)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8008840:	2200      	movs	r2, #0
 8008842:	2105      	movs	r1, #5
 8008844:	2012      	movs	r0, #18
 8008846:	f002 fc59 	bl	800b0fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800884a:	2012      	movs	r0, #18
 800884c:	f002 fc70 	bl	800b130 <HAL_NVIC_EnableIRQ>
}
 8008850:	e082      	b.n	8008958 <HAL_ADC_MspInit+0x348>
 8008852:	bf00      	nop
 8008854:	20001bcc 	.word	0x20001bcc
 8008858:	40021000 	.word	0x40021000
 800885c:	48001400 	.word	0x48001400
 8008860:	48000400 	.word	0x48000400
 8008864:	20000424 	.word	0x20000424
 8008868:	40020058 	.word	0x40020058
 800886c:	50000100 	.word	0x50000100
 8008870:	20000484 	.word	0x20000484
 8008874:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC5)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a38      	ldr	r2, [pc, #224]	; (8008960 <HAL_ADC_MspInit+0x350>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d16a      	bne.n	8008958 <HAL_ADC_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8008882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8008888:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800888c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800888e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008892:	4618      	mov	r0, r3
 8008894:	f005 fdb8 	bl	800e408 <HAL_RCCEx_PeriphCLKConfig>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <HAL_ADC_MspInit+0x292>
      Error_Handler();
 800889e:	f7ff fe15 	bl	80084cc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80088a2:	4b30      	ldr	r3, [pc, #192]	; (8008964 <HAL_ADC_MspInit+0x354>)
 80088a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a6:	4a2f      	ldr	r2, [pc, #188]	; (8008964 <HAL_ADC_MspInit+0x354>)
 80088a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088ae:	4b2d      	ldr	r3, [pc, #180]	; (8008964 <HAL_ADC_MspInit+0x354>)
 80088b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088b6:	613b      	str	r3, [r7, #16]
 80088b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ba:	4b2a      	ldr	r3, [pc, #168]	; (8008964 <HAL_ADC_MspInit+0x354>)
 80088bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088be:	4a29      	ldr	r2, [pc, #164]	; (8008964 <HAL_ADC_MspInit+0x354>)
 80088c0:	f043 0301 	orr.w	r3, r3, #1
 80088c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088c6:	4b27      	ldr	r3, [pc, #156]	; (8008964 <HAL_ADC_MspInit+0x354>)
 80088c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCC_ISENSE_ADC5_IN1_Pin;
 80088d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088d8:	2303      	movs	r3, #3
 80088da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(VCC_ISENSE_ADC5_IN1_GPIO_Port, &GPIO_InitStruct);
 80088e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80088e8:	4619      	mov	r1, r3
 80088ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088ee:	f002 ff5f 	bl	800b7b0 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel7;
 80088f2:	4b1d      	ldr	r3, [pc, #116]	; (8008968 <HAL_ADC_MspInit+0x358>)
 80088f4:	4a1d      	ldr	r2, [pc, #116]	; (800896c <HAL_ADC_MspInit+0x35c>)
 80088f6:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80088f8:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <HAL_ADC_MspInit+0x358>)
 80088fa:	2227      	movs	r2, #39	; 0x27
 80088fc:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088fe:	4b1a      	ldr	r3, [pc, #104]	; (8008968 <HAL_ADC_MspInit+0x358>)
 8008900:	2200      	movs	r2, #0
 8008902:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8008904:	4b18      	ldr	r3, [pc, #96]	; (8008968 <HAL_ADC_MspInit+0x358>)
 8008906:	2200      	movs	r2, #0
 8008908:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800890a:	4b17      	ldr	r3, [pc, #92]	; (8008968 <HAL_ADC_MspInit+0x358>)
 800890c:	2280      	movs	r2, #128	; 0x80
 800890e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008910:	4b15      	ldr	r3, [pc, #84]	; (8008968 <HAL_ADC_MspInit+0x358>)
 8008912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008916:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008918:	4b13      	ldr	r3, [pc, #76]	; (8008968 <HAL_ADC_MspInit+0x358>)
 800891a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800891e:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8008920:	4b11      	ldr	r3, [pc, #68]	; (8008968 <HAL_ADC_MspInit+0x358>)
 8008922:	2220      	movs	r2, #32
 8008924:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8008926:	4b10      	ldr	r3, [pc, #64]	; (8008968 <HAL_ADC_MspInit+0x358>)
 8008928:	2200      	movs	r2, #0
 800892a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800892c:	480e      	ldr	r0, [pc, #56]	; (8008968 <HAL_ADC_MspInit+0x358>)
 800892e:	f002 fc0d 	bl	800b14c <HAL_DMA_Init>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <HAL_ADC_MspInit+0x32c>
      Error_Handler();
 8008938:	f7ff fdc8 	bl	80084cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a0a      	ldr	r2, [pc, #40]	; (8008968 <HAL_ADC_MspInit+0x358>)
 8008940:	655a      	str	r2, [r3, #84]	; 0x54
 8008942:	4a09      	ldr	r2, [pc, #36]	; (8008968 <HAL_ADC_MspInit+0x358>)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC5_IRQn, 5, 0);
 8008948:	2200      	movs	r2, #0
 800894a:	2105      	movs	r1, #5
 800894c:	203e      	movs	r0, #62	; 0x3e
 800894e:	f002 fbd5 	bl	800b0fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 8008952:	203e      	movs	r0, #62	; 0x3e
 8008954:	f002 fbec 	bl	800b130 <HAL_NVIC_EnableIRQ>
}
 8008958:	bf00      	nop
 800895a:	3790      	adds	r7, #144	; 0x90
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	50000600 	.word	0x50000600
 8008964:	40021000 	.word	0x40021000
 8008968:	200004e4 	.word	0x200004e4
 800896c:	40020080 	.word	0x40020080

08008970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b09e      	sub	sp, #120	; 0x78
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008978:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	605a      	str	r2, [r3, #4]
 8008982:	609a      	str	r2, [r3, #8]
 8008984:	60da      	str	r2, [r3, #12]
 8008986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008988:	f107 0310 	add.w	r3, r7, #16
 800898c:	2254      	movs	r2, #84	; 0x54
 800898e:	2100      	movs	r1, #0
 8008990:	4618      	mov	r0, r3
 8008992:	f016 fe8d 	bl	801f6b0 <memset>
  if(hi2c->Instance==I2C4)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a1f      	ldr	r2, [pc, #124]	; (8008a18 <HAL_I2C_MspInit+0xa8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d136      	bne.n	8008a0e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80089a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80089a6:	2300      	movs	r3, #0
 80089a8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80089aa:	f107 0310 	add.w	r3, r7, #16
 80089ae:	4618      	mov	r0, r3
 80089b0:	f005 fd2a 	bl	800e408 <HAL_RCCEx_PeriphCLKConfig>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80089ba:	f7ff fd87 	bl	80084cc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80089be:	4b17      	ldr	r3, [pc, #92]	; (8008a1c <HAL_I2C_MspInit+0xac>)
 80089c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c2:	4a16      	ldr	r2, [pc, #88]	; (8008a1c <HAL_I2C_MspInit+0xac>)
 80089c4:	f043 0304 	orr.w	r3, r3, #4
 80089c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089ca:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <HAL_I2C_MspInit+0xac>)
 80089cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PC7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80089d6:	23c0      	movs	r3, #192	; 0xc0
 80089d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80089da:	2312      	movs	r3, #18
 80089dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089e2:	2300      	movs	r3, #0
 80089e4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80089e6:	2308      	movs	r3, #8
 80089e8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80089ee:	4619      	mov	r1, r3
 80089f0:	480b      	ldr	r0, [pc, #44]	; (8008a20 <HAL_I2C_MspInit+0xb0>)
 80089f2:	f002 fedd 	bl	800b7b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80089f6:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <HAL_I2C_MspInit+0xac>)
 80089f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089fa:	4a08      	ldr	r2, [pc, #32]	; (8008a1c <HAL_I2C_MspInit+0xac>)
 80089fc:	f043 0302 	orr.w	r3, r3, #2
 8008a00:	65d3      	str	r3, [r2, #92]	; 0x5c
 8008a02:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <HAL_I2C_MspInit+0xac>)
 8008a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	60bb      	str	r3, [r7, #8]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8008a0e:	bf00      	nop
 8008a10:	3778      	adds	r7, #120	; 0x78
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40008400 	.word	0x40008400
 8008a1c:	40021000 	.word	0x40021000
 8008a20:	48000800 	.word	0x48000800

08008a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a13      	ldr	r2, [pc, #76]	; (8008a80 <HAL_TIM_Base_MspInit+0x5c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d10c      	bne.n	8008a50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008a36:	4b13      	ldr	r3, [pc, #76]	; (8008a84 <HAL_TIM_Base_MspInit+0x60>)
 8008a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3a:	4a12      	ldr	r2, [pc, #72]	; (8008a84 <HAL_TIM_Base_MspInit+0x60>)
 8008a3c:	f043 0302 	orr.w	r3, r3, #2
 8008a40:	6593      	str	r3, [r2, #88]	; 0x58
 8008a42:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <HAL_TIM_Base_MspInit+0x60>)
 8008a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8008a4e:	e010      	b.n	8008a72 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a0c      	ldr	r2, [pc, #48]	; (8008a88 <HAL_TIM_Base_MspInit+0x64>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d10b      	bne.n	8008a72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008a5a:	4b0a      	ldr	r3, [pc, #40]	; (8008a84 <HAL_TIM_Base_MspInit+0x60>)
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5e:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <HAL_TIM_Base_MspInit+0x60>)
 8008a60:	f043 0308 	orr.w	r3, r3, #8
 8008a64:	6593      	str	r3, [r2, #88]	; 0x58
 8008a66:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <HAL_TIM_Base_MspInit+0x60>)
 8008a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	60bb      	str	r3, [r7, #8]
 8008a70:	68bb      	ldr	r3, [r7, #8]
}
 8008a72:	bf00      	nop
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	40000400 	.word	0x40000400
 8008a84:	40021000 	.word	0x40021000
 8008a88:	40000c00 	.word	0x40000c00

08008a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	; 0x28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a94:	f107 0314 	add.w	r3, r7, #20
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	605a      	str	r2, [r3, #4]
 8008a9e:	609a      	str	r2, [r3, #8]
 8008aa0:	60da      	str	r2, [r3, #12]
 8008aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a22      	ldr	r2, [pc, #136]	; (8008b34 <HAL_TIM_MspPostInit+0xa8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d11c      	bne.n	8008ae8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008aae:	4b22      	ldr	r3, [pc, #136]	; (8008b38 <HAL_TIM_MspPostInit+0xac>)
 8008ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab2:	4a21      	ldr	r2, [pc, #132]	; (8008b38 <HAL_TIM_MspPostInit+0xac>)
 8008ab4:	f043 0302 	orr.w	r3, r3, #2
 8008ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008aba:	4b1f      	ldr	r3, [pc, #124]	; (8008b38 <HAL_TIM_MspPostInit+0xac>)
 8008abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	613b      	str	r3, [r7, #16]
 8008ac4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = LEDB_TIM3CH3_Pin|LEDG_TIM3CH4_Pin;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aca:	2302      	movs	r3, #2
 8008acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ada:	f107 0314 	add.w	r3, r7, #20
 8008ade:	4619      	mov	r1, r3
 8008ae0:	4816      	ldr	r0, [pc, #88]	; (8008b3c <HAL_TIM_MspPostInit+0xb0>)
 8008ae2:	f002 fe65 	bl	800b7b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008ae6:	e020      	b.n	8008b2a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM5)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a14      	ldr	r2, [pc, #80]	; (8008b40 <HAL_TIM_MspPostInit+0xb4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d11b      	bne.n	8008b2a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008af2:	4b11      	ldr	r3, [pc, #68]	; (8008b38 <HAL_TIM_MspPostInit+0xac>)
 8008af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af6:	4a10      	ldr	r2, [pc, #64]	; (8008b38 <HAL_TIM_MspPostInit+0xac>)
 8008af8:	f043 0302 	orr.w	r3, r3, #2
 8008afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008afe:	4b0e      	ldr	r3, [pc, #56]	; (8008b38 <HAL_TIM_MspPostInit+0xac>)
 8008b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDR_TIM5CH1_Pin;
 8008b0a:	2304      	movs	r3, #4
 8008b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b0e:	2302      	movs	r3, #2
 8008b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b16:	2300      	movs	r3, #0
 8008b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDR_TIM5CH1_GPIO_Port, &GPIO_InitStruct);
 8008b1e:	f107 0314 	add.w	r3, r7, #20
 8008b22:	4619      	mov	r1, r3
 8008b24:	4805      	ldr	r0, [pc, #20]	; (8008b3c <HAL_TIM_MspPostInit+0xb0>)
 8008b26:	f002 fe43 	bl	800b7b0 <HAL_GPIO_Init>
}
 8008b2a:	bf00      	nop
 8008b2c:	3728      	adds	r7, #40	; 0x28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40000400 	.word	0x40000400
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	48000400 	.word	0x48000400
 8008b40:	40000c00 	.word	0x40000c00

08008b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b0a4      	sub	sp, #144	; 0x90
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	605a      	str	r2, [r3, #4]
 8008b56:	609a      	str	r2, [r3, #8]
 8008b58:	60da      	str	r2, [r3, #12]
 8008b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b60:	2254      	movs	r2, #84	; 0x54
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f016 fda3 	bl	801f6b0 <memset>
  if(huart->Instance==UART4)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a7e      	ldr	r2, [pc, #504]	; (8008d68 <HAL_UART_MspInit+0x224>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	f040 8097 	bne.w	8008ca4 <HAL_UART_MspInit+0x160>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008b76:	2308      	movs	r3, #8
 8008b78:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b82:	4618      	mov	r0, r3
 8008b84:	f005 fc40 	bl	800e408 <HAL_RCCEx_PeriphCLKConfig>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008b8e:	f7ff fc9d 	bl	80084cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008b92:	4b76      	ldr	r3, [pc, #472]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b96:	4a75      	ldr	r2, [pc, #468]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b9e:	4b73      	ldr	r3, [pc, #460]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008baa:	4b70      	ldr	r3, [pc, #448]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bae:	4a6f      	ldr	r2, [pc, #444]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008bb0:	f043 0304 	orr.w	r3, r3, #4
 8008bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bb6:	4b6d      	ldr	r3, [pc, #436]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bba:	f003 0304 	and.w	r3, r3, #4
 8008bbe:	623b      	str	r3, [r7, #32]
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ESP32_TX_UART4_Pin|ESP32_RX_UART4_Pin;
 8008bc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8008bda:	2305      	movs	r3, #5
 8008bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008be0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008be4:	4619      	mov	r1, r3
 8008be6:	4862      	ldr	r0, [pc, #392]	; (8008d70 <HAL_UART_MspInit+0x22c>)
 8008be8:	f002 fde2 	bl	800b7b0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel8;
 8008bec:	4b61      	ldr	r3, [pc, #388]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008bee:	4a62      	ldr	r2, [pc, #392]	; (8008d78 <HAL_UART_MspInit+0x234>)
 8008bf0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8008bf2:	4b60      	ldr	r3, [pc, #384]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008bf4:	221e      	movs	r2, #30
 8008bf6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008bf8:	4b5e      	ldr	r3, [pc, #376]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008bfe:	4b5d      	ldr	r3, [pc, #372]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008c04:	4b5b      	ldr	r3, [pc, #364]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008c06:	2280      	movs	r2, #128	; 0x80
 8008c08:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c0a:	4b5a      	ldr	r3, [pc, #360]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c10:	4b58      	ldr	r3, [pc, #352]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8008c16:	4b57      	ldr	r3, [pc, #348]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008c1c:	4b55      	ldr	r3, [pc, #340]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008c22:	4854      	ldr	r0, [pc, #336]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008c24:	f002 fa92 	bl	800b14c <HAL_DMA_Init>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8008c2e:	f7ff fc4d 	bl	80084cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a4f      	ldr	r2, [pc, #316]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008c3a:	4a4e      	ldr	r2, [pc, #312]	; (8008d74 <HAL_UART_MspInit+0x230>)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel1;
 8008c40:	4b4e      	ldr	r3, [pc, #312]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c42:	4a4f      	ldr	r2, [pc, #316]	; (8008d80 <HAL_UART_MspInit+0x23c>)
 8008c44:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8008c46:	4b4d      	ldr	r3, [pc, #308]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c48:	221f      	movs	r2, #31
 8008c4a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c4c:	4b4b      	ldr	r3, [pc, #300]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c4e:	2210      	movs	r2, #16
 8008c50:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c52:	4b4a      	ldr	r3, [pc, #296]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008c58:	4b48      	ldr	r3, [pc, #288]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c5a:	2280      	movs	r2, #128	; 0x80
 8008c5c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c5e:	4b47      	ldr	r3, [pc, #284]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c64:	4b45      	ldr	r3, [pc, #276]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8008c6a:	4b44      	ldr	r3, [pc, #272]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008c70:	4b42      	ldr	r3, [pc, #264]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008c76:	4841      	ldr	r0, [pc, #260]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c78:	f002 fa68 	bl	800b14c <HAL_DMA_Init>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8008c82:	f7ff fc23 	bl	80084cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a3c      	ldr	r2, [pc, #240]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c8a:	67da      	str	r2, [r3, #124]	; 0x7c
 8008c8c:	4a3b      	ldr	r2, [pc, #236]	; (8008d7c <HAL_UART_MspInit+0x238>)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8008c92:	2200      	movs	r2, #0
 8008c94:	2105      	movs	r1, #5
 8008c96:	2034      	movs	r0, #52	; 0x34
 8008c98:	f002 fa30 	bl	800b0fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008c9c:	2034      	movs	r0, #52	; 0x34
 8008c9e:	f002 fa47 	bl	800b130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008ca2:	e10f      	b.n	8008ec4 <HAL_UART_MspInit+0x380>
  else if(huart->Instance==USART1)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a36      	ldr	r2, [pc, #216]	; (8008d84 <HAL_UART_MspInit+0x240>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d16c      	bne.n	8008d88 <HAL_UART_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f005 fba4 	bl	800e408 <HAL_RCCEx_PeriphCLKConfig>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <HAL_UART_MspInit+0x186>
      Error_Handler();
 8008cc6:	f7ff fc01 	bl	80084cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008cca:	4b28      	ldr	r3, [pc, #160]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cce:	4a27      	ldr	r2, [pc, #156]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8008cd6:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cde:	61fb      	str	r3, [r7, #28]
 8008ce0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ce2:	4b22      	ldr	r3, [pc, #136]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce6:	4a21      	ldr	r2, [pc, #132]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008ce8:	f043 0304 	orr.w	r3, r3, #4
 8008cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cee:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf2:	f003 0304 	and.w	r3, r3, #4
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cfa:	4b1c      	ldr	r3, [pc, #112]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cfe:	4a1b      	ldr	r2, [pc, #108]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008d00:	f043 0301 	orr.w	r3, r3, #1
 8008d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d06:	4b19      	ldr	r3, [pc, #100]	; (8008d6c <HAL_UART_MspInit+0x228>)
 8008d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	617b      	str	r3, [r7, #20]
 8008d10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = FLR_USART1RX_Pin;
 8008d12:	2320      	movs	r3, #32
 8008d14:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d16:	2302      	movs	r3, #2
 8008d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d22:	2303      	movs	r3, #3
 8008d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008d28:	2307      	movs	r3, #7
 8008d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(FLR_USART1RX_GPIO_Port, &GPIO_InitStruct);
 8008d2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008d32:	4619      	mov	r1, r3
 8008d34:	480e      	ldr	r0, [pc, #56]	; (8008d70 <HAL_UART_MspInit+0x22c>)
 8008d36:	f002 fd3b 	bl	800b7b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FLT_USART1TX_Pin;
 8008d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d40:	2302      	movs	r3, #2
 8008d42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008d52:	2307      	movs	r3, #7
 8008d54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(FLT_USART1TX_GPIO_Port, &GPIO_InitStruct);
 8008d58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d62:	f002 fd25 	bl	800b7b0 <HAL_GPIO_Init>
}
 8008d66:	e0ad      	b.n	8008ec4 <HAL_UART_MspInit+0x380>
 8008d68:	40004c00 	.word	0x40004c00
 8008d6c:	40021000 	.word	0x40021000
 8008d70:	48000800 	.word	0x48000800
 8008d74:	200007ec 	.word	0x200007ec
 8008d78:	40020094 	.word	0x40020094
 8008d7c:	2000084c 	.word	0x2000084c
 8008d80:	40020408 	.word	0x40020408
 8008d84:	40013800 	.word	0x40013800
  else if(huart->Instance==USART2)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a4f      	ldr	r2, [pc, #316]	; (8008ecc <HAL_UART_MspInit+0x388>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	f040 8098 	bne.w	8008ec4 <HAL_UART_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008d94:	2302      	movs	r3, #2
 8008d96:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008da0:	4618      	mov	r0, r3
 8008da2:	f005 fb31 	bl	800e408 <HAL_RCCEx_PeriphCLKConfig>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8008dac:	f7ff fb8e 	bl	80084cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008db0:	4b47      	ldr	r3, [pc, #284]	; (8008ed0 <HAL_UART_MspInit+0x38c>)
 8008db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db4:	4a46      	ldr	r2, [pc, #280]	; (8008ed0 <HAL_UART_MspInit+0x38c>)
 8008db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dba:	6593      	str	r3, [r2, #88]	; 0x58
 8008dbc:	4b44      	ldr	r3, [pc, #272]	; (8008ed0 <HAL_UART_MspInit+0x38c>)
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dc4:	613b      	str	r3, [r7, #16]
 8008dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dc8:	4b41      	ldr	r3, [pc, #260]	; (8008ed0 <HAL_UART_MspInit+0x38c>)
 8008dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dcc:	4a40      	ldr	r2, [pc, #256]	; (8008ed0 <HAL_UART_MspInit+0x38c>)
 8008dce:	f043 0301 	orr.w	r3, r3, #1
 8008dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dd4:	4b3e      	ldr	r3, [pc, #248]	; (8008ed0 <HAL_UART_MspInit+0x38c>)
 8008dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_USART2DE_Pin|RS485_USART2TX_Pin|RS485_USART2RX_Pin;
 8008de0:	230e      	movs	r3, #14
 8008de2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de4:	2302      	movs	r3, #2
 8008de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008df0:	2300      	movs	r3, #0
 8008df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008df6:	2307      	movs	r3, #7
 8008df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dfc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008e00:	4619      	mov	r1, r3
 8008e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e06:	f002 fcd3 	bl	800b7b0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8008e0a:	4b32      	ldr	r3, [pc, #200]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e0c:	4a32      	ldr	r2, [pc, #200]	; (8008ed8 <HAL_UART_MspInit+0x394>)
 8008e0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8008e10:	4b30      	ldr	r3, [pc, #192]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e12:	221b      	movs	r2, #27
 8008e14:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008e16:	4b2f      	ldr	r3, [pc, #188]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e18:	2210      	movs	r2, #16
 8008e1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e1c:	4b2d      	ldr	r3, [pc, #180]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e1e:	2200      	movs	r2, #0
 8008e20:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008e22:	4b2c      	ldr	r3, [pc, #176]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e24:	2280      	movs	r2, #128	; 0x80
 8008e26:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e28:	4b2a      	ldr	r3, [pc, #168]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e2e:	4b29      	ldr	r3, [pc, #164]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008e34:	4b27      	ldr	r3, [pc, #156]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008e3a:	4b26      	ldr	r3, [pc, #152]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008e42:	4824      	ldr	r0, [pc, #144]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e44:	f002 f982 	bl	800b14c <HAL_DMA_Init>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <HAL_UART_MspInit+0x30e>
      Error_Handler();
 8008e4e:	f7ff fb3d 	bl	80084cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a1f      	ldr	r2, [pc, #124]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e56:	67da      	str	r2, [r3, #124]	; 0x7c
 8008e58:	4a1e      	ldr	r2, [pc, #120]	; (8008ed4 <HAL_UART_MspInit+0x390>)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8008e5e:	4b1f      	ldr	r3, [pc, #124]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e60:	4a1f      	ldr	r2, [pc, #124]	; (8008ee0 <HAL_UART_MspInit+0x39c>)
 8008e62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008e64:	4b1d      	ldr	r3, [pc, #116]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e66:	221a      	movs	r2, #26
 8008e68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e6a:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e70:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e76:	4b19      	ldr	r3, [pc, #100]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e78:	2280      	movs	r2, #128	; 0x80
 8008e7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e7c:	4b17      	ldr	r3, [pc, #92]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e82:	4b16      	ldr	r3, [pc, #88]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008e88:	4b14      	ldr	r3, [pc, #80]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008e8e:	4b13      	ldr	r3, [pc, #76]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008e96:	4811      	ldr	r0, [pc, #68]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008e98:	f002 f958 	bl	800b14c <HAL_DMA_Init>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <HAL_UART_MspInit+0x362>
      Error_Handler();
 8008ea2:	f7ff fb13 	bl	80084cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a0c      	ldr	r2, [pc, #48]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008eae:	4a0b      	ldr	r2, [pc, #44]	; (8008edc <HAL_UART_MspInit+0x398>)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2105      	movs	r1, #5
 8008eb8:	2026      	movs	r0, #38	; 0x26
 8008eba:	f002 f91f 	bl	800b0fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008ebe:	2026      	movs	r0, #38	; 0x26
 8008ec0:	f002 f936 	bl	800b130 <HAL_NVIC_EnableIRQ>
}
 8008ec4:	bf00      	nop
 8008ec6:	3790      	adds	r7, #144	; 0x90
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	40004400 	.word	0x40004400
 8008ed0:	40021000 	.word	0x40021000
 8008ed4:	200008ac 	.word	0x200008ac
 8008ed8:	40020008 	.word	0x40020008
 8008edc:	2000090c 	.word	0x2000090c
 8008ee0:	4002001c 	.word	0x4002001c

08008ee4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08c      	sub	sp, #48	; 0x30
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM20 clock */
  __HAL_RCC_TIM20_CLK_ENABLE();
 8008ef4:	4b2c      	ldr	r3, [pc, #176]	; (8008fa8 <HAL_InitTick+0xc4>)
 8008ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ef8:	4a2b      	ldr	r2, [pc, #172]	; (8008fa8 <HAL_InitTick+0xc4>)
 8008efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008efe:	6613      	str	r3, [r2, #96]	; 0x60
 8008f00:	4b29      	ldr	r3, [pc, #164]	; (8008fa8 <HAL_InitTick+0xc4>)
 8008f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f08:	60bb      	str	r3, [r7, #8]
 8008f0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008f0c:	f107 020c 	add.w	r2, r7, #12
 8008f10:	f107 0310 	add.w	r3, r7, #16
 8008f14:	4611      	mov	r1, r2
 8008f16:	4618      	mov	r0, r3
 8008f18:	f005 f9fe 	bl	800e318 <HAL_RCC_GetClockConfig>

  /* Compute TIM20 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008f1c:	f005 f9e6 	bl	800e2ec <HAL_RCC_GetPCLK2Freq>
 8008f20:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM20 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	4a21      	ldr	r2, [pc, #132]	; (8008fac <HAL_InitTick+0xc8>)
 8008f26:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2a:	0c9b      	lsrs	r3, r3, #18
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM20 */
  htim20.Instance = TIM20;
 8008f30:	4b1f      	ldr	r3, [pc, #124]	; (8008fb0 <HAL_InitTick+0xcc>)
 8008f32:	4a20      	ldr	r2, [pc, #128]	; (8008fb4 <HAL_InitTick+0xd0>)
 8008f34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM20CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim20.Init.Period = (1000000U / 1000U) - 1U;
 8008f36:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <HAL_InitTick+0xcc>)
 8008f38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008f3c:	60da      	str	r2, [r3, #12]
  htim20.Init.Prescaler = uwPrescalerValue;
 8008f3e:	4a1c      	ldr	r2, [pc, #112]	; (8008fb0 <HAL_InitTick+0xcc>)
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	6053      	str	r3, [r2, #4]
  htim20.Init.ClockDivision = 0;
 8008f44:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <HAL_InitTick+0xcc>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	611a      	str	r2, [r3, #16]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f4a:	4b19      	ldr	r3, [pc, #100]	; (8008fb0 <HAL_InitTick+0xcc>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim20);
 8008f50:	4817      	ldr	r0, [pc, #92]	; (8008fb0 <HAL_InitTick+0xcc>)
 8008f52:	f005 fca7 	bl	800e8a4 <HAL_TIM_Base_Init>
 8008f56:	4603      	mov	r3, r0
 8008f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8008f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d11b      	bne.n	8008f9c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim20);
 8008f64:	4812      	ldr	r0, [pc, #72]	; (8008fb0 <HAL_InitTick+0xcc>)
 8008f66:	f005 fcf5 	bl	800e954 <HAL_TIM_Base_Start_IT>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8008f70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d111      	bne.n	8008f9c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM20 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM20_UP_IRQn);
 8008f78:	204e      	movs	r0, #78	; 0x4e
 8008f7a:	f002 f8d9 	bl	800b130 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b0f      	cmp	r3, #15
 8008f82:	d808      	bhi.n	8008f96 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM20_UP_IRQn, TickPriority, 0U);
 8008f84:	2200      	movs	r2, #0
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	204e      	movs	r0, #78	; 0x4e
 8008f8a:	f002 f8b7 	bl	800b0fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008f8e:	4a0a      	ldr	r2, [pc, #40]	; (8008fb8 <HAL_InitTick+0xd4>)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	e002      	b.n	8008f9c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8008f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3730      	adds	r7, #48	; 0x30
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	431bde83 	.word	0x431bde83
 8008fb0:	20001bd0 	.word	0x20001bd0
 8008fb4:	40015000 	.word	0x40015000
 8008fb8:	2000000c 	.word	0x2000000c

08008fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008fc0:	e7fe      	b.n	8008fc0 <NMI_Handler+0x4>

08008fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008fc6:	e7fe      	b.n	8008fc6 <HardFault_Handler+0x4>

08008fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fcc:	e7fe      	b.n	8008fcc <MemManage_Handler+0x4>

08008fce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008fd2:	e7fe      	b.n	8008fd2 <BusFault_Handler+0x4>

08008fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fd8:	e7fe      	b.n	8008fd8 <UsageFault_Handler+0x4>

08008fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008fde:	bf00      	nop
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008fec:	4802      	ldr	r0, [pc, #8]	; (8008ff8 <DMA1_Channel1_IRQHandler+0x10>)
 8008fee:	f002 fa90 	bl	800b512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008ff2:	bf00      	nop
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	200008ac 	.word	0x200008ac

08008ffc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009000:	4802      	ldr	r0, [pc, #8]	; (800900c <DMA1_Channel2_IRQHandler+0x10>)
 8009002:	f002 fa86 	bl	800b512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009006:	bf00      	nop
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	2000090c 	.word	0x2000090c

08009010 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8009014:	bf00      	nop
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800901e:	b480      	push	{r7}
 8009020:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8009022:	bf00      	nop
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009030:	4802      	ldr	r0, [pc, #8]	; (800903c <DMA1_Channel5_IRQHandler+0x10>)
 8009032:	f002 fa6e 	bl	800b512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8009036:	bf00      	nop
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000424 	.word	0x20000424

08009040 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8009044:	4802      	ldr	r0, [pc, #8]	; (8009050 <DMA1_Channel6_IRQHandler+0x10>)
 8009046:	f002 fa64 	bl	800b512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800904a:	bf00      	nop
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000484 	.word	0x20000484

08009054 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8009058:	4802      	ldr	r0, [pc, #8]	; (8009064 <DMA1_Channel7_IRQHandler+0x10>)
 800905a:	f002 fa5a 	bl	800b512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800905e:	bf00      	nop
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	200004e4 	.word	0x200004e4

08009068 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800906c:	4803      	ldr	r0, [pc, #12]	; (800907c <ADC1_2_IRQHandler+0x14>)
 800906e:	f000 fe45 	bl	8009cfc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8009072:	4803      	ldr	r0, [pc, #12]	; (8009080 <ADC1_2_IRQHandler+0x18>)
 8009074:	f000 fe42 	bl	8009cfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8009078:	bf00      	nop
 800907a:	bd80      	pop	{r7, pc}
 800907c:	200002e0 	.word	0x200002e0
 8009080:	2000034c 	.word	0x2000034c

08009084 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009088:	4802      	ldr	r0, [pc, #8]	; (8009094 <USB_HP_IRQHandler+0x10>)
 800908a:	f002 ff65 	bl	800bf58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800908e:	bf00      	nop
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20014014 	.word	0x20014014

08009098 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800909c:	4802      	ldr	r0, [pc, #8]	; (80090a8 <USB_LP_IRQHandler+0x10>)
 800909e:	f002 ff5b 	bl	800bf58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80090a2:	bf00      	nop
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20014014 	.word	0x20014014

080090ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80090b0:	4802      	ldr	r0, [pc, #8]	; (80090bc <USART2_IRQHandler+0x10>)
 80090b2:	f007 f829 	bl	8010108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80090b6:	bf00      	nop
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000758 	.word	0x20000758

080090c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80090c4:	4802      	ldr	r0, [pc, #8]	; (80090d0 <UART4_IRQHandler+0x10>)
 80090c6:	f007 f81f 	bl	8010108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80090ca:	bf00      	nop
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000630 	.word	0x20000630

080090d4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80090d8:	4802      	ldr	r0, [pc, #8]	; (80090e4 <DMA2_Channel1_IRQHandler+0x10>)
 80090da:	f002 fa1a 	bl	800b512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80090de:	bf00      	nop
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	2000084c 	.word	0x2000084c

080090e8 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 80090ec:	4802      	ldr	r0, [pc, #8]	; (80090f8 <ADC5_IRQHandler+0x10>)
 80090ee:	f000 fe05 	bl	8009cfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 80090f2:	bf00      	nop
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	200003b8 	.word	0x200003b8

080090fc <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 8009100:	f00d f8e3 	bl	80162ca <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 8009104:	bf00      	nop
 8009106:	bd80      	pop	{r7, pc}

08009108 <TIM20_UP_IRQHandler>:

/**
  * @brief This function handles TIM20 update interrupt.
  */
void TIM20_UP_IRQHandler(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_UP_IRQn 0 */

  /* USER CODE END TIM20_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 800910c:	4802      	ldr	r0, [pc, #8]	; (8009118 <TIM20_UP_IRQHandler+0x10>)
 800910e:	f005 fe0d 	bl	800ed2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_UP_IRQn 1 */

  /* USER CODE END TIM20_UP_IRQn 1 */
}
 8009112:	bf00      	nop
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20001bd0 	.word	0x20001bd0

0800911c <DMA1_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA1 channel8 global interrupt.
  */
void DMA1_Channel8_IRQHandler(void)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8009120:	4802      	ldr	r0, [pc, #8]	; (800912c <DMA1_Channel8_IRQHandler+0x10>)
 8009122:	f002 f9f6 	bl	800b512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel8_IRQn 1 */

  /* USER CODE END DMA1_Channel8_IRQn 1 */
}
 8009126:	bf00      	nop
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200007ec 	.word	0x200007ec

08009130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009138:	4a14      	ldr	r2, [pc, #80]	; (800918c <_sbrk+0x5c>)
 800913a:	4b15      	ldr	r3, [pc, #84]	; (8009190 <_sbrk+0x60>)
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009144:	4b13      	ldr	r3, [pc, #76]	; (8009194 <_sbrk+0x64>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800914c:	4b11      	ldr	r3, [pc, #68]	; (8009194 <_sbrk+0x64>)
 800914e:	4a12      	ldr	r2, [pc, #72]	; (8009198 <_sbrk+0x68>)
 8009150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009152:	4b10      	ldr	r3, [pc, #64]	; (8009194 <_sbrk+0x64>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4413      	add	r3, r2
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	429a      	cmp	r2, r3
 800915e:	d207      	bcs.n	8009170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009160:	f016 fb3a 	bl	801f7d8 <__errno>
 8009164:	4603      	mov	r3, r0
 8009166:	220c      	movs	r2, #12
 8009168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800916a:	f04f 33ff 	mov.w	r3, #4294967295
 800916e:	e009      	b.n	8009184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009170:	4b08      	ldr	r3, [pc, #32]	; (8009194 <_sbrk+0x64>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009176:	4b07      	ldr	r3, [pc, #28]	; (8009194 <_sbrk+0x64>)
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	4a05      	ldr	r2, [pc, #20]	; (8009194 <_sbrk+0x64>)
 8009180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009182:	68fb      	ldr	r3, [r7, #12]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20020000 	.word	0x20020000
 8009190:	00000400 	.word	0x00000400
 8009194:	20001c1c 	.word	0x20001c1c
 8009198:	20014658 	.word	0x20014658

0800919c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80091a0:	4b06      	ldr	r3, [pc, #24]	; (80091bc <SystemInit+0x20>)
 80091a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a6:	4a05      	ldr	r2, [pc, #20]	; (80091bc <SystemInit+0x20>)
 80091a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80091b0:	bf00      	nop
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	e000ed00 	.word	0xe000ed00

080091c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80091c0:	480d      	ldr	r0, [pc, #52]	; (80091f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80091c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80091c4:	f7ff ffea 	bl	800919c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091c8:	480c      	ldr	r0, [pc, #48]	; (80091fc <LoopForever+0x6>)
  ldr r1, =_edata
 80091ca:	490d      	ldr	r1, [pc, #52]	; (8009200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80091cc:	4a0d      	ldr	r2, [pc, #52]	; (8009204 <LoopForever+0xe>)
  movs r3, #0
 80091ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80091d0:	e002      	b.n	80091d8 <LoopCopyDataInit>

080091d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091d6:	3304      	adds	r3, #4

080091d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091dc:	d3f9      	bcc.n	80091d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091de:	4a0a      	ldr	r2, [pc, #40]	; (8009208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80091e0:	4c0a      	ldr	r4, [pc, #40]	; (800920c <LoopForever+0x16>)
  movs r3, #0
 80091e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091e4:	e001      	b.n	80091ea <LoopFillZerobss>

080091e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091e8:	3204      	adds	r2, #4

080091ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091ec:	d3fb      	bcc.n	80091e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80091ee:	f016 faf9 	bl	801f7e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80091f2:	f7fd fd17 	bl	8006c24 <main>

080091f6 <LoopForever>:

LoopForever:
    b LoopForever
 80091f6:	e7fe      	b.n	80091f6 <LoopForever>
  ldr   r0, =_estack
 80091f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80091fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009200:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8009204:	08021298 	.word	0x08021298
  ldr r2, =_sbss
 8009208:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 800920c:	20014658 	.word	0x20014658

08009210 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009210:	e7fe      	b.n	8009210 <ADC3_IRQHandler>

08009212 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800921c:	2003      	movs	r0, #3
 800921e:	f001 ff62 	bl	800b0e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009222:	200f      	movs	r0, #15
 8009224:	f7ff fe5e 	bl	8008ee4 <HAL_InitTick>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	71fb      	strb	r3, [r7, #7]
 8009232:	e001      	b.n	8009238 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009234:	f7ff f9ba 	bl	80085ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009238:	79fb      	ldrb	r3, [r7, #7]

}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009248:	4b05      	ldr	r3, [pc, #20]	; (8009260 <HAL_IncTick+0x1c>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	4b05      	ldr	r3, [pc, #20]	; (8009264 <HAL_IncTick+0x20>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4413      	add	r3, r2
 8009252:	4a03      	ldr	r2, [pc, #12]	; (8009260 <HAL_IncTick+0x1c>)
 8009254:	6013      	str	r3, [r2, #0]
}
 8009256:	bf00      	nop
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20001c20 	.word	0x20001c20
 8009264:	20000010 	.word	0x20000010

08009268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009268:	b480      	push	{r7}
 800926a:	af00      	add	r7, sp, #0
  return uwTick;
 800926c:	4b03      	ldr	r3, [pc, #12]	; (800927c <HAL_GetTick+0x14>)
 800926e:	681b      	ldr	r3, [r3, #0]
}
 8009270:	4618      	mov	r0, r3
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	20001c20 	.word	0x20001c20

08009280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009288:	f7ff ffee 	bl	8009268 <HAL_GetTick>
 800928c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009298:	d004      	beq.n	80092a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <HAL_Delay+0x40>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4413      	add	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80092a4:	bf00      	nop
 80092a6:	f7ff ffdf 	bl	8009268 <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d8f7      	bhi.n	80092a6 <HAL_Delay+0x26>
  {
  }
}
 80092b6:	bf00      	nop
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000010 	.word	0x20000010

080092c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80092cc:	4b06      	ldr	r3, [pc, #24]	; (80092e8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80092d4:	4904      	ldr	r1, [pc, #16]	; (80092e8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4313      	orrs	r3, r2
 80092da:	600b      	str	r3, [r1, #0]
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	40010030 	.word	0x40010030

080092ec <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80092f4:	4b06      	ldr	r3, [pc, #24]	; (8009310 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f023 0202 	bic.w	r2, r3, #2
 80092fc:	4904      	ldr	r1, [pc, #16]	; (8009310 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4313      	orrs	r3, r2
 8009302:	600b      	str	r3, [r1, #0]
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	40010030 	.word	0x40010030

08009314 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800931a:	4b0f      	ldr	r3, [pc, #60]	; (8009358 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a0e      	ldr	r2, [pc, #56]	; (8009358 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009326:	f7ff ff9f 	bl	8009268 <HAL_GetTick>
 800932a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800932c:	e008      	b.n	8009340 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800932e:	f7ff ff9b 	bl	8009268 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b0a      	cmp	r3, #10
 800933a:	d901      	bls.n	8009340 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e006      	b.n	800934e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8009340:	4b05      	ldr	r3, [pc, #20]	; (8009358 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0f0      	beq.n	800932e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	40010030 	.word	0x40010030

0800935c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	431a      	orrs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	609a      	str	r2, [r3, #8]
}
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	431a      	orrs	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	609a      	str	r2, [r3, #8]
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3360      	adds	r3, #96	; 0x60
 80093d6:	461a      	mov	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	4b08      	ldr	r3, [pc, #32]	; (8009408 <LL_ADC_SetOffset+0x44>)
 80093e6:	4013      	ands	r3, r2
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	4313      	orrs	r3, r2
 80093f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80093fc:	bf00      	nop
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	03fff000 	.word	0x03fff000

0800940c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3360      	adds	r3, #96	; 0x60
 800941a:	461a      	mov	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3360      	adds	r3, #96	; 0x60
 8009448:	461a      	mov	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	431a      	orrs	r2, r3
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009462:	bf00      	nop
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800946e:	b480      	push	{r7}
 8009470:	b087      	sub	sp, #28
 8009472:	af00      	add	r7, sp, #0
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	60b9      	str	r1, [r7, #8]
 8009478:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3360      	adds	r3, #96	; 0x60
 800947e:	461a      	mov	r2, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	431a      	orrs	r2, r3
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009498:	bf00      	nop
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3360      	adds	r3, #96	; 0x60
 80094b4:	461a      	mov	r2, r3
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	431a      	orrs	r2, r3
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80094ce:	bf00      	nop
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	615a      	str	r2, [r3, #20]
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009526:	b480      	push	{r7}
 8009528:	b087      	sub	sp, #28
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3330      	adds	r3, #48	; 0x30
 8009536:	461a      	mov	r2, r3
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	0a1b      	lsrs	r3, r3, #8
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	f003 030c 	and.w	r3, r3, #12
 8009542:	4413      	add	r3, r2
 8009544:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	211f      	movs	r1, #31
 8009552:	fa01 f303 	lsl.w	r3, r1, r3
 8009556:	43db      	mvns	r3, r3
 8009558:	401a      	ands	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	0e9b      	lsrs	r3, r3, #26
 800955e:	f003 011f 	and.w	r1, r3, #31
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f003 031f 	and.w	r3, r3, #31
 8009568:	fa01 f303 	lsl.w	r3, r1, r3
 800956c:	431a      	orrs	r2, r3
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009572:	bf00      	nop
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800958a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3314      	adds	r3, #20
 80095b4:	461a      	mov	r2, r3
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	0e5b      	lsrs	r3, r3, #25
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	4413      	add	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	0d1b      	lsrs	r3, r3, #20
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	2107      	movs	r1, #7
 80095d2:	fa01 f303 	lsl.w	r3, r1, r3
 80095d6:	43db      	mvns	r3, r3
 80095d8:	401a      	ands	r2, r3
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	0d1b      	lsrs	r3, r3, #20
 80095de:	f003 031f 	and.w	r3, r3, #31
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	fa01 f303 	lsl.w	r3, r1, r3
 80095e8:	431a      	orrs	r2, r3
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80095ee:	bf00      	nop
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
	...

080095fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009614:	43db      	mvns	r3, r3
 8009616:	401a      	ands	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f003 0318 	and.w	r3, r3, #24
 800961e:	4908      	ldr	r1, [pc, #32]	; (8009640 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009620:	40d9      	lsrs	r1, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	400b      	ands	r3, r1
 8009626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800962a:	431a      	orrs	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009632:	bf00      	nop
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	0007ffff 	.word	0x0007ffff

08009644 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f003 031f 	and.w	r3, r3, #31
}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800968c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	6093      	str	r3, [r2, #8]
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b4:	d101      	bne.n	80096ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e000      	b.n	80096bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80096d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80096dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009704:	d101      	bne.n	800970a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800972c:	f043 0201 	orr.w	r2, r3, #1
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <LL_ADC_IsEnabled+0x18>
 8009754:	2301      	movs	r3, #1
 8009756:	e000      	b.n	800975a <LL_ADC_IsEnabled+0x1a>
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009766:	b480      	push	{r7}
 8009768:	b083      	sub	sp, #12
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009776:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800977a:	f043 0204 	orr.w	r2, r3, #4
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009782:	bf00      	nop
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800978e:	b480      	push	{r7}
 8009790:	b083      	sub	sp, #12
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d101      	bne.n	80097a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e000      	b.n	80097a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d101      	bne.n	80097cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e000      	b.n	80097ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80097dc:	b590      	push	{r4, r7, lr}
 80097de:	b089      	sub	sp, #36	; 0x24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e1a9      	b.n	8009b4a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009800:	2b00      	cmp	r3, #0
 8009802:	d109      	bne.n	8009818 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7fe ff03 	bl	8008610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff ff3f 	bl	80096a0 <LL_ADC_IsDeepPowerDownEnabled>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4618      	mov	r0, r3
 800982e:	f7ff ff25 	bl	800967c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff ff5a 	bl	80096f0 <LL_ADC_IsInternalRegulatorEnabled>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d115      	bne.n	800986e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff ff3e 	bl	80096c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800984c:	4b9c      	ldr	r3, [pc, #624]	; (8009ac0 <HAL_ADC_Init+0x2e4>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	099b      	lsrs	r3, r3, #6
 8009852:	4a9c      	ldr	r2, [pc, #624]	; (8009ac4 <HAL_ADC_Init+0x2e8>)
 8009854:	fba2 2303 	umull	r2, r3, r2, r3
 8009858:	099b      	lsrs	r3, r3, #6
 800985a:	3301      	adds	r3, #1
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009860:	e002      	b.n	8009868 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3b01      	subs	r3, #1
 8009866:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1f9      	bne.n	8009862 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f7ff ff3c 	bl	80096f0 <LL_ADC_IsInternalRegulatorEnabled>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10d      	bne.n	800989a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009882:	f043 0210 	orr.w	r2, r3, #16
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800988e:	f043 0201 	orr.w	r2, r3, #1
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff ff75 	bl	800978e <LL_ADC_REG_IsConversionOngoing>
 80098a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098aa:	f003 0310 	and.w	r3, r3, #16
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f040 8142 	bne.w	8009b38 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f040 813e 	bne.w	8009b38 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80098c4:	f043 0202 	orr.w	r2, r3, #2
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff ff35 	bl	8009740 <LL_ADC_IsEnabled>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d141      	bne.n	8009960 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098e4:	d004      	beq.n	80098f0 <HAL_ADC_Init+0x114>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a77      	ldr	r2, [pc, #476]	; (8009ac8 <HAL_ADC_Init+0x2ec>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d10f      	bne.n	8009910 <HAL_ADC_Init+0x134>
 80098f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80098f4:	f7ff ff24 	bl	8009740 <LL_ADC_IsEnabled>
 80098f8:	4604      	mov	r4, r0
 80098fa:	4873      	ldr	r0, [pc, #460]	; (8009ac8 <HAL_ADC_Init+0x2ec>)
 80098fc:	f7ff ff20 	bl	8009740 <LL_ADC_IsEnabled>
 8009900:	4603      	mov	r3, r0
 8009902:	4323      	orrs	r3, r4
 8009904:	2b00      	cmp	r3, #0
 8009906:	bf0c      	ite	eq
 8009908:	2301      	moveq	r3, #1
 800990a:	2300      	movne	r3, #0
 800990c:	b2db      	uxtb	r3, r3
 800990e:	e012      	b.n	8009936 <HAL_ADC_Init+0x15a>
 8009910:	486e      	ldr	r0, [pc, #440]	; (8009acc <HAL_ADC_Init+0x2f0>)
 8009912:	f7ff ff15 	bl	8009740 <LL_ADC_IsEnabled>
 8009916:	4604      	mov	r4, r0
 8009918:	486d      	ldr	r0, [pc, #436]	; (8009ad0 <HAL_ADC_Init+0x2f4>)
 800991a:	f7ff ff11 	bl	8009740 <LL_ADC_IsEnabled>
 800991e:	4603      	mov	r3, r0
 8009920:	431c      	orrs	r4, r3
 8009922:	486c      	ldr	r0, [pc, #432]	; (8009ad4 <HAL_ADC_Init+0x2f8>)
 8009924:	f7ff ff0c 	bl	8009740 <LL_ADC_IsEnabled>
 8009928:	4603      	mov	r3, r0
 800992a:	4323      	orrs	r3, r4
 800992c:	2b00      	cmp	r3, #0
 800992e:	bf0c      	ite	eq
 8009930:	2301      	moveq	r3, #1
 8009932:	2300      	movne	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d012      	beq.n	8009960 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009942:	d004      	beq.n	800994e <HAL_ADC_Init+0x172>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a5f      	ldr	r2, [pc, #380]	; (8009ac8 <HAL_ADC_Init+0x2ec>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d101      	bne.n	8009952 <HAL_ADC_Init+0x176>
 800994e:	4a62      	ldr	r2, [pc, #392]	; (8009ad8 <HAL_ADC_Init+0x2fc>)
 8009950:	e000      	b.n	8009954 <HAL_ADC_Init+0x178>
 8009952:	4a62      	ldr	r2, [pc, #392]	; (8009adc <HAL_ADC_Init+0x300>)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	4619      	mov	r1, r3
 800995a:	4610      	mov	r0, r2
 800995c:	f7ff fcfe 	bl	800935c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	7f5b      	ldrb	r3, [r3, #29]
 8009964:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800996a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009970:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009976:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800997e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009980:	4313      	orrs	r3, r2
 8009982:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800998a:	2b01      	cmp	r3, #1
 800998c:	d106      	bne.n	800999c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009992:	3b01      	subs	r3, #1
 8009994:	045b      	lsls	r3, r3, #17
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	4313      	orrs	r3, r2
 800999a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d009      	beq.n	80099b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68da      	ldr	r2, [r3, #12]
 80099be:	4b48      	ldr	r3, [pc, #288]	; (8009ae0 <HAL_ADC_Init+0x304>)
 80099c0:	4013      	ands	r3, r2
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	6812      	ldr	r2, [r2, #0]
 80099c6:	69b9      	ldr	r1, [r7, #24]
 80099c8:	430b      	orrs	r3, r1
 80099ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff fee4 	bl	80097b4 <LL_ADC_INJ_IsConversionOngoing>
 80099ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d17f      	bne.n	8009af4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d17c      	bne.n	8009af4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80099fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a06:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a16:	f023 0302 	bic.w	r3, r3, #2
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	6812      	ldr	r2, [r2, #0]
 8009a1e:	69b9      	ldr	r1, [r7, #24]
 8009a20:	430b      	orrs	r3, r1
 8009a22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d017      	beq.n	8009a5c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	691a      	ldr	r2, [r3, #16]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009a3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009a44:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	6911      	ldr	r1, [r2, #16]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6812      	ldr	r2, [r2, #0]
 8009a54:	430b      	orrs	r3, r1
 8009a56:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8009a5a:	e013      	b.n	8009a84 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691a      	ldr	r2, [r3, #16]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	6812      	ldr	r2, [r2, #0]
 8009a78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009a7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009a80:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d12a      	bne.n	8009ae4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009a98:	f023 0304 	bic.w	r3, r3, #4
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009aa4:	4311      	orrs	r1, r2
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009aaa:	4311      	orrs	r1, r2
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f042 0201 	orr.w	r2, r2, #1
 8009abc:	611a      	str	r2, [r3, #16]
 8009abe:	e019      	b.n	8009af4 <HAL_ADC_Init+0x318>
 8009ac0:	20000008 	.word	0x20000008
 8009ac4:	053e2d63 	.word	0x053e2d63
 8009ac8:	50000100 	.word	0x50000100
 8009acc:	50000400 	.word	0x50000400
 8009ad0:	50000500 	.word	0x50000500
 8009ad4:	50000600 	.word	0x50000600
 8009ad8:	50000300 	.word	0x50000300
 8009adc:	50000700 	.word	0x50000700
 8009ae0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691a      	ldr	r2, [r3, #16]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 0201 	bic.w	r2, r2, #1
 8009af2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d10c      	bne.n	8009b16 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b02:	f023 010f 	bic.w	r1, r3, #15
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	1e5a      	subs	r2, r3, #1
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	631a      	str	r2, [r3, #48]	; 0x30
 8009b14:	e007      	b.n	8009b26 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 020f 	bic.w	r2, r2, #15
 8009b24:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b2a:	f023 0303 	bic.w	r3, r3, #3
 8009b2e:	f043 0201 	orr.w	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b36:	e007      	b.n	8009b48 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b3c:	f043 0210 	orr.w	r2, r3, #16
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3724      	adds	r7, #36	; 0x24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd90      	pop	{r4, r7, pc}
 8009b52:	bf00      	nop

08009b54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b68:	d004      	beq.n	8009b74 <HAL_ADC_Start_DMA+0x20>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a5a      	ldr	r2, [pc, #360]	; (8009cd8 <HAL_ADC_Start_DMA+0x184>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d101      	bne.n	8009b78 <HAL_ADC_Start_DMA+0x24>
 8009b74:	4b59      	ldr	r3, [pc, #356]	; (8009cdc <HAL_ADC_Start_DMA+0x188>)
 8009b76:	e000      	b.n	8009b7a <HAL_ADC_Start_DMA+0x26>
 8009b78:	4b59      	ldr	r3, [pc, #356]	; (8009ce0 <HAL_ADC_Start_DMA+0x18c>)
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fd62 	bl	8009644 <LL_ADC_GetMultimode>
 8009b80:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fe01 	bl	800978e <LL_ADC_REG_IsConversionOngoing>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f040 809b 	bne.w	8009cca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d101      	bne.n	8009ba2 <HAL_ADC_Start_DMA+0x4e>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	e096      	b.n	8009cd0 <HAL_ADC_Start_DMA+0x17c>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a4d      	ldr	r2, [pc, #308]	; (8009ce4 <HAL_ADC_Start_DMA+0x190>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d008      	beq.n	8009bc6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b05      	cmp	r3, #5
 8009bbe:	d002      	beq.n	8009bc6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b09      	cmp	r3, #9
 8009bc4:	d17a      	bne.n	8009cbc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 ff56 	bl	800aa78 <ADC_Enable>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d16d      	bne.n	8009cb2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009bde:	f023 0301 	bic.w	r3, r3, #1
 8009be2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a3a      	ldr	r2, [pc, #232]	; (8009cd8 <HAL_ADC_Start_DMA+0x184>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d009      	beq.n	8009c08 <HAL_ADC_Start_DMA+0xb4>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a3b      	ldr	r2, [pc, #236]	; (8009ce8 <HAL_ADC_Start_DMA+0x194>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d002      	beq.n	8009c04 <HAL_ADC_Start_DMA+0xb0>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	e003      	b.n	8009c0c <HAL_ADC_Start_DMA+0xb8>
 8009c04:	4b39      	ldr	r3, [pc, #228]	; (8009cec <HAL_ADC_Start_DMA+0x198>)
 8009c06:	e001      	b.n	8009c0c <HAL_ADC_Start_DMA+0xb8>
 8009c08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	6812      	ldr	r2, [r2, #0]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d002      	beq.n	8009c1a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d105      	bne.n	8009c26 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d006      	beq.n	8009c40 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c36:	f023 0206 	bic.w	r2, r3, #6
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	661a      	str	r2, [r3, #96]	; 0x60
 8009c3e:	e002      	b.n	8009c46 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c4a:	4a29      	ldr	r2, [pc, #164]	; (8009cf0 <HAL_ADC_Start_DMA+0x19c>)
 8009c4c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	4a28      	ldr	r2, [pc, #160]	; (8009cf4 <HAL_ADC_Start_DMA+0x1a0>)
 8009c54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5a:	4a27      	ldr	r2, [pc, #156]	; (8009cf8 <HAL_ADC_Start_DMA+0x1a4>)
 8009c5c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	221c      	movs	r2, #28
 8009c64:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f042 0210 	orr.w	r2, r2, #16
 8009c7c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f042 0201 	orr.w	r2, r2, #1
 8009c8c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3340      	adds	r3, #64	; 0x40
 8009c98:	4619      	mov	r1, r3
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f001 fafd 	bl	800b29c <HAL_DMA_Start_IT>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff fd5b 	bl	8009766 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009cb0:	e00d      	b.n	8009cce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009cba:	e008      	b.n	8009cce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009cc8:	e001      	b.n	8009cce <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	50000100 	.word	0x50000100
 8009cdc:	50000300 	.word	0x50000300
 8009ce0:	50000700 	.word	0x50000700
 8009ce4:	50000600 	.word	0x50000600
 8009ce8:	50000500 	.word	0x50000500
 8009cec:	50000400 	.word	0x50000400
 8009cf0:	0800aba5 	.word	0x0800aba5
 8009cf4:	0800ac7d 	.word	0x0800ac7d
 8009cf8:	0800ac99 	.word	0x0800ac99

08009cfc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	; 0x28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009d04:	2300      	movs	r3, #0
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d20:	d004      	beq.n	8009d2c <HAL_ADC_IRQHandler+0x30>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a8e      	ldr	r2, [pc, #568]	; (8009f60 <HAL_ADC_IRQHandler+0x264>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d101      	bne.n	8009d30 <HAL_ADC_IRQHandler+0x34>
 8009d2c:	4b8d      	ldr	r3, [pc, #564]	; (8009f64 <HAL_ADC_IRQHandler+0x268>)
 8009d2e:	e000      	b.n	8009d32 <HAL_ADC_IRQHandler+0x36>
 8009d30:	4b8d      	ldr	r3, [pc, #564]	; (8009f68 <HAL_ADC_IRQHandler+0x26c>)
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7ff fc86 	bl	8009644 <LL_ADC_GetMultimode>
 8009d38:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d017      	beq.n	8009d74 <HAL_ADC_IRQHandler+0x78>
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d012      	beq.n	8009d74 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d105      	bne.n	8009d66 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d5e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fffe 	bl	800ad68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2202      	movs	r2, #2
 8009d72:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	f003 0304 	and.w	r3, r3, #4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d004      	beq.n	8009d88 <HAL_ADC_IRQHandler+0x8c>
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	f003 0304 	and.w	r3, r3, #4
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10b      	bne.n	8009da0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 8094 	beq.w	8009ebc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	f003 0308 	and.w	r3, r3, #8
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 808e 	beq.w	8009ebc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009da4:	f003 0310 	and.w	r3, r3, #16
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d105      	bne.n	8009db8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff fb9f 	bl	8009500 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d072      	beq.n	8009eae <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a64      	ldr	r2, [pc, #400]	; (8009f60 <HAL_ADC_IRQHandler+0x264>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d009      	beq.n	8009de6 <HAL_ADC_IRQHandler+0xea>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a65      	ldr	r2, [pc, #404]	; (8009f6c <HAL_ADC_IRQHandler+0x270>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d002      	beq.n	8009de2 <HAL_ADC_IRQHandler+0xe6>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	e003      	b.n	8009dea <HAL_ADC_IRQHandler+0xee>
 8009de2:	4b63      	ldr	r3, [pc, #396]	; (8009f70 <HAL_ADC_IRQHandler+0x274>)
 8009de4:	e001      	b.n	8009dea <HAL_ADC_IRQHandler+0xee>
 8009de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	6812      	ldr	r2, [r2, #0]
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d008      	beq.n	8009e04 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d005      	beq.n	8009e04 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	d002      	beq.n	8009e04 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b09      	cmp	r3, #9
 8009e02:	d104      	bne.n	8009e0e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	623b      	str	r3, [r7, #32]
 8009e0c:	e014      	b.n	8009e38 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a53      	ldr	r2, [pc, #332]	; (8009f60 <HAL_ADC_IRQHandler+0x264>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d009      	beq.n	8009e2c <HAL_ADC_IRQHandler+0x130>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a53      	ldr	r2, [pc, #332]	; (8009f6c <HAL_ADC_IRQHandler+0x270>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d002      	beq.n	8009e28 <HAL_ADC_IRQHandler+0x12c>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	e003      	b.n	8009e30 <HAL_ADC_IRQHandler+0x134>
 8009e28:	4b51      	ldr	r3, [pc, #324]	; (8009f70 <HAL_ADC_IRQHandler+0x274>)
 8009e2a:	e001      	b.n	8009e30 <HAL_ADC_IRQHandler+0x134>
 8009e2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009e30:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d135      	bne.n	8009eae <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 0308 	and.w	r3, r3, #8
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d12e      	bne.n	8009eae <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff fc9a 	bl	800978e <LL_ADC_REG_IsConversionOngoing>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d11a      	bne.n	8009e96 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 020c 	bic.w	r2, r2, #12
 8009e6e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d112      	bne.n	8009eae <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e8c:	f043 0201 	orr.w	r2, r3, #1
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e94:	e00b      	b.n	8009eae <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9a:	f043 0210 	orr.w	r2, r3, #16
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea6:	f043 0201 	orr.w	r2, r3, #1
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7fd fdb2 	bl	8007a18 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	220c      	movs	r2, #12
 8009eba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	f003 0320 	and.w	r3, r3, #32
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d004      	beq.n	8009ed0 <HAL_ADC_IRQHandler+0x1d4>
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	f003 0320 	and.w	r3, r3, #32
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10b      	bne.n	8009ee8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 80b3 	beq.w	800a042 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 80ad 	beq.w	800a042 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d105      	bne.n	8009f00 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7ff fb3a 	bl	800957e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009f0a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff faf5 	bl	8009500 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009f16:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a10      	ldr	r2, [pc, #64]	; (8009f60 <HAL_ADC_IRQHandler+0x264>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d009      	beq.n	8009f36 <HAL_ADC_IRQHandler+0x23a>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a11      	ldr	r2, [pc, #68]	; (8009f6c <HAL_ADC_IRQHandler+0x270>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d002      	beq.n	8009f32 <HAL_ADC_IRQHandler+0x236>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	e003      	b.n	8009f3a <HAL_ADC_IRQHandler+0x23e>
 8009f32:	4b0f      	ldr	r3, [pc, #60]	; (8009f70 <HAL_ADC_IRQHandler+0x274>)
 8009f34:	e001      	b.n	8009f3a <HAL_ADC_IRQHandler+0x23e>
 8009f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d008      	beq.n	8009f54 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b06      	cmp	r3, #6
 8009f4c:	d002      	beq.n	8009f54 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b07      	cmp	r3, #7
 8009f52:	d10f      	bne.n	8009f74 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	623b      	str	r3, [r7, #32]
 8009f5c:	e01f      	b.n	8009f9e <HAL_ADC_IRQHandler+0x2a2>
 8009f5e:	bf00      	nop
 8009f60:	50000100 	.word	0x50000100
 8009f64:	50000300 	.word	0x50000300
 8009f68:	50000700 	.word	0x50000700
 8009f6c:	50000500 	.word	0x50000500
 8009f70:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a8b      	ldr	r2, [pc, #556]	; (800a1a8 <HAL_ADC_IRQHandler+0x4ac>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d009      	beq.n	8009f92 <HAL_ADC_IRQHandler+0x296>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a8a      	ldr	r2, [pc, #552]	; (800a1ac <HAL_ADC_IRQHandler+0x4b0>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d002      	beq.n	8009f8e <HAL_ADC_IRQHandler+0x292>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	e003      	b.n	8009f96 <HAL_ADC_IRQHandler+0x29a>
 8009f8e:	4b88      	ldr	r3, [pc, #544]	; (800a1b0 <HAL_ADC_IRQHandler+0x4b4>)
 8009f90:	e001      	b.n	8009f96 <HAL_ADC_IRQHandler+0x29a>
 8009f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009f96:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d047      	beq.n	800a034 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <HAL_ADC_IRQHandler+0x2c2>
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d03f      	beq.n	800a034 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d13a      	bne.n	800a034 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc8:	2b40      	cmp	r3, #64	; 0x40
 8009fca:	d133      	bne.n	800a034 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d12e      	bne.n	800a034 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff fbea 	bl	80097b4 <LL_ADC_INJ_IsConversionOngoing>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d11a      	bne.n	800a01c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009ff4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d112      	bne.n	800a034 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a012:	f043 0201 	orr.w	r2, r3, #1
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	65da      	str	r2, [r3, #92]	; 0x5c
 800a01a:	e00b      	b.n	800a034 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a020:	f043 0210 	orr.w	r2, r3, #16
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a02c:	f043 0201 	orr.w	r2, r3, #1
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fe6f 	bl	800ad18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2260      	movs	r2, #96	; 0x60
 800a040:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d011      	beq.n	800a070 <HAL_ADC_IRQHandler+0x374>
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00c      	beq.n	800a070 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a05a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f8b4 	bl	800a1d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2280      	movs	r2, #128	; 0x80
 800a06e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a076:	2b00      	cmp	r3, #0
 800a078:	d012      	beq.n	800a0a0 <HAL_ADC_IRQHandler+0x3a4>
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00d      	beq.n	800a0a0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a088:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fe55 	bl	800ad40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a09e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d012      	beq.n	800a0d0 <HAL_ADC_IRQHandler+0x3d4>
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00d      	beq.n	800a0d0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fe47 	bl	800ad54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f003 0310 	and.w	r3, r3, #16
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d043      	beq.n	800a162 <HAL_ADC_IRQHandler+0x466>
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	f003 0310 	and.w	r3, r3, #16
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d03e      	beq.n	800a162 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f0:	e021      	b.n	800a136 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d015      	beq.n	800a124 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a100:	d004      	beq.n	800a10c <HAL_ADC_IRQHandler+0x410>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a28      	ldr	r2, [pc, #160]	; (800a1a8 <HAL_ADC_IRQHandler+0x4ac>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d101      	bne.n	800a110 <HAL_ADC_IRQHandler+0x414>
 800a10c:	4b29      	ldr	r3, [pc, #164]	; (800a1b4 <HAL_ADC_IRQHandler+0x4b8>)
 800a10e:	e000      	b.n	800a112 <HAL_ADC_IRQHandler+0x416>
 800a110:	4b29      	ldr	r3, [pc, #164]	; (800a1b8 <HAL_ADC_IRQHandler+0x4bc>)
 800a112:	4618      	mov	r0, r3
 800a114:	f7ff faa4 	bl	8009660 <LL_ADC_GetMultiDMATransfer>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800a11e:	2301      	movs	r3, #1
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
 800a122:	e008      	b.n	800a136 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800a132:	2301      	movs	r3, #1
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d10e      	bne.n	800a15a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a14c:	f043 0202 	orr.w	r2, r3, #2
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f845 	bl	800a1e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2210      	movs	r2, #16
 800a160:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d018      	beq.n	800a19e <HAL_ADC_IRQHandler+0x4a2>
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a172:	2b00      	cmp	r3, #0
 800a174:	d013      	beq.n	800a19e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a17a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a186:	f043 0208 	orr.w	r2, r3, #8
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a196:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fdc7 	bl	800ad2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a19e:	bf00      	nop
 800a1a0:	3728      	adds	r7, #40	; 0x28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	50000100 	.word	0x50000100
 800a1ac:	50000500 	.word	0x50000500
 800a1b0:	50000400 	.word	0x50000400
 800a1b4:	50000300 	.word	0x50000300
 800a1b8:	50000700 	.word	0x50000700

0800a1bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b0b6      	sub	sp, #216	; 0xd8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a212:	2b01      	cmp	r3, #1
 800a214:	d102      	bne.n	800a21c <HAL_ADC_ConfigChannel+0x24>
 800a216:	2302      	movs	r3, #2
 800a218:	f000 bc13 	b.w	800aa42 <HAL_ADC_ConfigChannel+0x84a>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff fab0 	bl	800978e <LL_ADC_REG_IsConversionOngoing>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	f040 83f3 	bne.w	800aa1c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	6859      	ldr	r1, [r3, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	f7ff f96f 	bl	8009526 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff fa9e 	bl	800978e <LL_ADC_REG_IsConversionOngoing>
 800a252:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7ff faaa 	bl	80097b4 <LL_ADC_INJ_IsConversionOngoing>
 800a260:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a264:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f040 81d9 	bne.w	800a620 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a26e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a272:	2b00      	cmp	r3, #0
 800a274:	f040 81d4 	bne.w	800a620 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a280:	d10f      	bne.n	800a2a2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2200      	movs	r2, #0
 800a28c:	4619      	mov	r1, r3
 800a28e:	f7ff f989 	bl	80095a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff f91d 	bl	80094da <LL_ADC_SetSamplingTimeCommonConfig>
 800a2a0:	e00e      	b.n	800a2c0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6818      	ldr	r0, [r3, #0]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	6819      	ldr	r1, [r3, #0]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f7ff f978 	bl	80095a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff f90d 	bl	80094da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	695a      	ldr	r2, [r3, #20]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	08db      	lsrs	r3, r3, #3
 800a2cc:	f003 0303 	and.w	r3, r3, #3
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	d022      	beq.n	800a328 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6818      	ldr	r0, [r3, #0]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	6919      	ldr	r1, [r3, #16]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2f2:	f7ff f867 	bl	80093c4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6818      	ldr	r0, [r3, #0]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	6919      	ldr	r1, [r3, #16]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	461a      	mov	r2, r3
 800a304:	f7ff f8b3 	bl	800946e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6818      	ldr	r0, [r3, #0]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a314:	2b01      	cmp	r3, #1
 800a316:	d102      	bne.n	800a31e <HAL_ADC_ConfigChannel+0x126>
 800a318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a31c:	e000      	b.n	800a320 <HAL_ADC_ConfigChannel+0x128>
 800a31e:	2300      	movs	r3, #0
 800a320:	461a      	mov	r2, r3
 800a322:	f7ff f8bf 	bl	80094a4 <LL_ADC_SetOffsetSaturation>
 800a326:	e17b      	b.n	800a620 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2100      	movs	r1, #0
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff f86c 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a334:	4603      	mov	r3, r0
 800a336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10a      	bne.n	800a354 <HAL_ADC_ConfigChannel+0x15c>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2100      	movs	r1, #0
 800a344:	4618      	mov	r0, r3
 800a346:	f7ff f861 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a34a:	4603      	mov	r3, r0
 800a34c:	0e9b      	lsrs	r3, r3, #26
 800a34e:	f003 021f 	and.w	r2, r3, #31
 800a352:	e01e      	b.n	800a392 <HAL_ADC_ConfigChannel+0x19a>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2100      	movs	r1, #0
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff f856 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a360:	4603      	mov	r3, r0
 800a362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a366:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a36a:	fa93 f3a3 	rbit	r3, r3
 800a36e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a376:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a37a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800a382:	2320      	movs	r3, #32
 800a384:	e004      	b.n	800a390 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800a386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a38a:	fab3 f383 	clz	r3, r3
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d105      	bne.n	800a3aa <HAL_ADC_ConfigChannel+0x1b2>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	0e9b      	lsrs	r3, r3, #26
 800a3a4:	f003 031f 	and.w	r3, r3, #31
 800a3a8:	e018      	b.n	800a3dc <HAL_ADC_ConfigChannel+0x1e4>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a3b6:	fa93 f3a3 	rbit	r3, r3
 800a3ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800a3be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800a3c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800a3ce:	2320      	movs	r3, #32
 800a3d0:	e004      	b.n	800a3dc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800a3d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a3d6:	fab3 f383 	clz	r3, r3
 800a3da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d106      	bne.n	800a3ee <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff f825 	bl	8009438 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff f809 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <HAL_ADC_ConfigChannel+0x222>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2101      	movs	r1, #1
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fe fffe 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a410:	4603      	mov	r3, r0
 800a412:	0e9b      	lsrs	r3, r3, #26
 800a414:	f003 021f 	and.w	r2, r3, #31
 800a418:	e01e      	b.n	800a458 <HAL_ADC_ConfigChannel+0x260>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2101      	movs	r1, #1
 800a420:	4618      	mov	r0, r3
 800a422:	f7fe fff3 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a426:	4603      	mov	r3, r0
 800a428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a42c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a430:	fa93 f3a3 	rbit	r3, r3
 800a434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800a438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a43c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800a440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800a448:	2320      	movs	r3, #32
 800a44a:	e004      	b.n	800a456 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800a44c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a450:	fab3 f383 	clz	r3, r3
 800a454:	b2db      	uxtb	r3, r3
 800a456:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a460:	2b00      	cmp	r3, #0
 800a462:	d105      	bne.n	800a470 <HAL_ADC_ConfigChannel+0x278>
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	0e9b      	lsrs	r3, r3, #26
 800a46a:	f003 031f 	and.w	r3, r3, #31
 800a46e:	e018      	b.n	800a4a2 <HAL_ADC_ConfigChannel+0x2aa>
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a47c:	fa93 f3a3 	rbit	r3, r3
 800a480:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800a484:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800a48c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800a494:	2320      	movs	r3, #32
 800a496:	e004      	b.n	800a4a2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800a498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a49c:	fab3 f383 	clz	r3, r3
 800a4a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d106      	bne.n	800a4b4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe ffc2 	bl	8009438 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2102      	movs	r1, #2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe ffa6 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10a      	bne.n	800a4e0 <HAL_ADC_ConfigChannel+0x2e8>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2102      	movs	r1, #2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe ff9b 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	0e9b      	lsrs	r3, r3, #26
 800a4da:	f003 021f 	and.w	r2, r3, #31
 800a4de:	e01e      	b.n	800a51e <HAL_ADC_ConfigChannel+0x326>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2102      	movs	r1, #2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe ff90 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4f6:	fa93 f3a3 	rbit	r3, r3
 800a4fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800a4fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800a506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800a50e:	2320      	movs	r3, #32
 800a510:	e004      	b.n	800a51c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800a512:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a516:	fab3 f383 	clz	r3, r3
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a526:	2b00      	cmp	r3, #0
 800a528:	d105      	bne.n	800a536 <HAL_ADC_ConfigChannel+0x33e>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	0e9b      	lsrs	r3, r3, #26
 800a530:	f003 031f 	and.w	r3, r3, #31
 800a534:	e016      	b.n	800a564 <HAL_ADC_ConfigChannel+0x36c>
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a53e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a542:	fa93 f3a3 	rbit	r3, r3
 800a546:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800a548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a54a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800a54e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800a556:	2320      	movs	r3, #32
 800a558:	e004      	b.n	800a564 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800a55a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a55e:	fab3 f383 	clz	r3, r3
 800a562:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a564:	429a      	cmp	r2, r3
 800a566:	d106      	bne.n	800a576 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2200      	movs	r2, #0
 800a56e:	2102      	movs	r1, #2
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe ff61 	bl	8009438 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2103      	movs	r1, #3
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe ff45 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a582:	4603      	mov	r3, r0
 800a584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <HAL_ADC_ConfigChannel+0x3aa>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2103      	movs	r1, #3
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe ff3a 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a598:	4603      	mov	r3, r0
 800a59a:	0e9b      	lsrs	r3, r3, #26
 800a59c:	f003 021f 	and.w	r2, r3, #31
 800a5a0:	e017      	b.n	800a5d2 <HAL_ADC_ConfigChannel+0x3da>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2103      	movs	r1, #3
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe ff2f 	bl	800940c <LL_ADC_GetOffsetChannel>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5b4:	fa93 f3a3 	rbit	r3, r3
 800a5b8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800a5ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800a5be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800a5c4:	2320      	movs	r3, #32
 800a5c6:	e003      	b.n	800a5d0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800a5c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5ca:	fab3 f383 	clz	r3, r3
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d105      	bne.n	800a5ea <HAL_ADC_ConfigChannel+0x3f2>
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	0e9b      	lsrs	r3, r3, #26
 800a5e4:	f003 031f 	and.w	r3, r3, #31
 800a5e8:	e011      	b.n	800a60e <HAL_ADC_ConfigChannel+0x416>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5f2:	fa93 f3a3 	rbit	r3, r3
 800a5f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800a5f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800a5fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800a602:	2320      	movs	r3, #32
 800a604:	e003      	b.n	800a60e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800a606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a608:	fab3 f383 	clz	r3, r3
 800a60c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a60e:	429a      	cmp	r2, r3
 800a610:	d106      	bne.n	800a620 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2200      	movs	r2, #0
 800a618:	2103      	movs	r1, #3
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe ff0c 	bl	8009438 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff f88b 	bl	8009740 <LL_ADC_IsEnabled>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f040 813d 	bne.w	800a8ac <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	6819      	ldr	r1, [r3, #0]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7fe ffdc 	bl	80095fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	4aa2      	ldr	r2, [pc, #648]	; (800a8d4 <HAL_ADC_ConfigChannel+0x6dc>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	f040 812e 	bne.w	800a8ac <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10b      	bne.n	800a678 <HAL_ADC_ConfigChannel+0x480>
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	0e9b      	lsrs	r3, r3, #26
 800a666:	3301      	adds	r3, #1
 800a668:	f003 031f 	and.w	r3, r3, #31
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	bf94      	ite	ls
 800a670:	2301      	movls	r3, #1
 800a672:	2300      	movhi	r3, #0
 800a674:	b2db      	uxtb	r3, r3
 800a676:	e019      	b.n	800a6ac <HAL_ADC_ConfigChannel+0x4b4>
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a67e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a680:	fa93 f3a3 	rbit	r3, r3
 800a684:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800a686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a688:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800a68a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800a690:	2320      	movs	r3, #32
 800a692:	e003      	b.n	800a69c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800a694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a696:	fab3 f383 	clz	r3, r3
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	3301      	adds	r3, #1
 800a69e:	f003 031f 	and.w	r3, r3, #31
 800a6a2:	2b09      	cmp	r3, #9
 800a6a4:	bf94      	ite	ls
 800a6a6:	2301      	movls	r3, #1
 800a6a8:	2300      	movhi	r3, #0
 800a6aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d079      	beq.n	800a7a4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d107      	bne.n	800a6cc <HAL_ADC_ConfigChannel+0x4d4>
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	0e9b      	lsrs	r3, r3, #26
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	069b      	lsls	r3, r3, #26
 800a6c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a6ca:	e015      	b.n	800a6f8 <HAL_ADC_ConfigChannel+0x500>
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6d4:	fa93 f3a3 	rbit	r3, r3
 800a6d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800a6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800a6e4:	2320      	movs	r3, #32
 800a6e6:	e003      	b.n	800a6f0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800a6e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ea:	fab3 f383 	clz	r3, r3
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	069b      	lsls	r3, r3, #26
 800a6f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a700:	2b00      	cmp	r3, #0
 800a702:	d109      	bne.n	800a718 <HAL_ADC_ConfigChannel+0x520>
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	0e9b      	lsrs	r3, r3, #26
 800a70a:	3301      	adds	r3, #1
 800a70c:	f003 031f 	and.w	r3, r3, #31
 800a710:	2101      	movs	r1, #1
 800a712:	fa01 f303 	lsl.w	r3, r1, r3
 800a716:	e017      	b.n	800a748 <HAL_ADC_ConfigChannel+0x550>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a71e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a720:	fa93 f3a3 	rbit	r3, r3
 800a724:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800a726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a728:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800a72a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800a730:	2320      	movs	r3, #32
 800a732:	e003      	b.n	800a73c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800a734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a736:	fab3 f383 	clz	r3, r3
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	3301      	adds	r3, #1
 800a73e:	f003 031f 	and.w	r3, r3, #31
 800a742:	2101      	movs	r1, #1
 800a744:	fa01 f303 	lsl.w	r3, r1, r3
 800a748:	ea42 0103 	orr.w	r1, r2, r3
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10a      	bne.n	800a76e <HAL_ADC_ConfigChannel+0x576>
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	0e9b      	lsrs	r3, r3, #26
 800a75e:	3301      	adds	r3, #1
 800a760:	f003 021f 	and.w	r2, r3, #31
 800a764:	4613      	mov	r3, r2
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	4413      	add	r3, r2
 800a76a:	051b      	lsls	r3, r3, #20
 800a76c:	e018      	b.n	800a7a0 <HAL_ADC_ConfigChannel+0x5a8>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a776:	fa93 f3a3 	rbit	r3, r3
 800a77a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800a780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800a786:	2320      	movs	r3, #32
 800a788:	e003      	b.n	800a792 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800a78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a78c:	fab3 f383 	clz	r3, r3
 800a790:	b2db      	uxtb	r3, r3
 800a792:	3301      	adds	r3, #1
 800a794:	f003 021f 	and.w	r2, r3, #31
 800a798:	4613      	mov	r3, r2
 800a79a:	005b      	lsls	r3, r3, #1
 800a79c:	4413      	add	r3, r2
 800a79e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a7a0:	430b      	orrs	r3, r1
 800a7a2:	e07e      	b.n	800a8a2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d107      	bne.n	800a7c0 <HAL_ADC_ConfigChannel+0x5c8>
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	0e9b      	lsrs	r3, r3, #26
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	069b      	lsls	r3, r3, #26
 800a7ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a7be:	e015      	b.n	800a7ec <HAL_ADC_ConfigChannel+0x5f4>
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	fa93 f3a3 	rbit	r3, r3
 800a7cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800a7d8:	2320      	movs	r3, #32
 800a7da:	e003      	b.n	800a7e4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7de:	fab3 f383 	clz	r3, r3
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	069b      	lsls	r3, r3, #26
 800a7e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d109      	bne.n	800a80c <HAL_ADC_ConfigChannel+0x614>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	0e9b      	lsrs	r3, r3, #26
 800a7fe:	3301      	adds	r3, #1
 800a800:	f003 031f 	and.w	r3, r3, #31
 800a804:	2101      	movs	r1, #1
 800a806:	fa01 f303 	lsl.w	r3, r1, r3
 800a80a:	e017      	b.n	800a83c <HAL_ADC_ConfigChannel+0x644>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	fa93 f3a3 	rbit	r3, r3
 800a818:	61fb      	str	r3, [r7, #28]
  return result;
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800a824:	2320      	movs	r3, #32
 800a826:	e003      	b.n	800a830 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	fab3 f383 	clz	r3, r3
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	3301      	adds	r3, #1
 800a832:	f003 031f 	and.w	r3, r3, #31
 800a836:	2101      	movs	r1, #1
 800a838:	fa01 f303 	lsl.w	r3, r1, r3
 800a83c:	ea42 0103 	orr.w	r1, r2, r3
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10d      	bne.n	800a868 <HAL_ADC_ConfigChannel+0x670>
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	0e9b      	lsrs	r3, r3, #26
 800a852:	3301      	adds	r3, #1
 800a854:	f003 021f 	and.w	r2, r3, #31
 800a858:	4613      	mov	r3, r2
 800a85a:	005b      	lsls	r3, r3, #1
 800a85c:	4413      	add	r3, r2
 800a85e:	3b1e      	subs	r3, #30
 800a860:	051b      	lsls	r3, r3, #20
 800a862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a866:	e01b      	b.n	800a8a0 <HAL_ADC_ConfigChannel+0x6a8>
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	fa93 f3a3 	rbit	r3, r3
 800a874:	613b      	str	r3, [r7, #16]
  return result;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800a880:	2320      	movs	r3, #32
 800a882:	e003      	b.n	800a88c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	fab3 f383 	clz	r3, r3
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	3301      	adds	r3, #1
 800a88e:	f003 021f 	and.w	r2, r3, #31
 800a892:	4613      	mov	r3, r2
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	4413      	add	r3, r2
 800a898:	3b1e      	subs	r3, #30
 800a89a:	051b      	lsls	r3, r3, #20
 800a89c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a8a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	f7fe fe7c 	bl	80095a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <HAL_ADC_ConfigChannel+0x6e0>)
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 80be 	beq.w	800aa36 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8c2:	d004      	beq.n	800a8ce <HAL_ADC_ConfigChannel+0x6d6>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a04      	ldr	r2, [pc, #16]	; (800a8dc <HAL_ADC_ConfigChannel+0x6e4>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d10a      	bne.n	800a8e4 <HAL_ADC_ConfigChannel+0x6ec>
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <HAL_ADC_ConfigChannel+0x6e8>)
 800a8d0:	e009      	b.n	800a8e6 <HAL_ADC_ConfigChannel+0x6ee>
 800a8d2:	bf00      	nop
 800a8d4:	407f0000 	.word	0x407f0000
 800a8d8:	80080000 	.word	0x80080000
 800a8dc:	50000100 	.word	0x50000100
 800a8e0:	50000300 	.word	0x50000300
 800a8e4:	4b59      	ldr	r3, [pc, #356]	; (800aa4c <HAL_ADC_ConfigChannel+0x854>)
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe fd5e 	bl	80093a8 <LL_ADC_GetCommonPathInternalCh>
 800a8ec:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a56      	ldr	r2, [pc, #344]	; (800aa50 <HAL_ADC_ConfigChannel+0x858>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d004      	beq.n	800a904 <HAL_ADC_ConfigChannel+0x70c>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a55      	ldr	r2, [pc, #340]	; (800aa54 <HAL_ADC_ConfigChannel+0x85c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d13a      	bne.n	800a97a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d134      	bne.n	800a97a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a918:	d005      	beq.n	800a926 <HAL_ADC_ConfigChannel+0x72e>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a4e      	ldr	r2, [pc, #312]	; (800aa58 <HAL_ADC_ConfigChannel+0x860>)
 800a920:	4293      	cmp	r3, r2
 800a922:	f040 8085 	bne.w	800aa30 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a92e:	d004      	beq.n	800a93a <HAL_ADC_ConfigChannel+0x742>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a49      	ldr	r2, [pc, #292]	; (800aa5c <HAL_ADC_ConfigChannel+0x864>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d101      	bne.n	800a93e <HAL_ADC_ConfigChannel+0x746>
 800a93a:	4a49      	ldr	r2, [pc, #292]	; (800aa60 <HAL_ADC_ConfigChannel+0x868>)
 800a93c:	e000      	b.n	800a940 <HAL_ADC_ConfigChannel+0x748>
 800a93e:	4a43      	ldr	r2, [pc, #268]	; (800aa4c <HAL_ADC_ConfigChannel+0x854>)
 800a940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a944:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a948:	4619      	mov	r1, r3
 800a94a:	4610      	mov	r0, r2
 800a94c:	f7fe fd19 	bl	8009382 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a950:	4b44      	ldr	r3, [pc, #272]	; (800aa64 <HAL_ADC_ConfigChannel+0x86c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	099b      	lsrs	r3, r3, #6
 800a956:	4a44      	ldr	r2, [pc, #272]	; (800aa68 <HAL_ADC_ConfigChannel+0x870>)
 800a958:	fba2 2303 	umull	r2, r3, r2, r3
 800a95c:	099b      	lsrs	r3, r3, #6
 800a95e:	1c5a      	adds	r2, r3, #1
 800a960:	4613      	mov	r3, r2
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	4413      	add	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a96a:	e002      	b.n	800a972 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3b01      	subs	r3, #1
 800a970:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1f9      	bne.n	800a96c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a978:	e05a      	b.n	800aa30 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a3b      	ldr	r2, [pc, #236]	; (800aa6c <HAL_ADC_ConfigChannel+0x874>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d125      	bne.n	800a9d0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d11f      	bne.n	800a9d0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a31      	ldr	r2, [pc, #196]	; (800aa5c <HAL_ADC_ConfigChannel+0x864>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d104      	bne.n	800a9a4 <HAL_ADC_ConfigChannel+0x7ac>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a34      	ldr	r2, [pc, #208]	; (800aa70 <HAL_ADC_ConfigChannel+0x878>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d047      	beq.n	800aa34 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9ac:	d004      	beq.n	800a9b8 <HAL_ADC_ConfigChannel+0x7c0>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a2a      	ldr	r2, [pc, #168]	; (800aa5c <HAL_ADC_ConfigChannel+0x864>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d101      	bne.n	800a9bc <HAL_ADC_ConfigChannel+0x7c4>
 800a9b8:	4a29      	ldr	r2, [pc, #164]	; (800aa60 <HAL_ADC_ConfigChannel+0x868>)
 800a9ba:	e000      	b.n	800a9be <HAL_ADC_ConfigChannel+0x7c6>
 800a9bc:	4a23      	ldr	r2, [pc, #140]	; (800aa4c <HAL_ADC_ConfigChannel+0x854>)
 800a9be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	f7fe fcda 	bl	8009382 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a9ce:	e031      	b.n	800aa34 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a27      	ldr	r2, [pc, #156]	; (800aa74 <HAL_ADC_ConfigChannel+0x87c>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d12d      	bne.n	800aa36 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a9da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d127      	bne.n	800aa36 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a1c      	ldr	r2, [pc, #112]	; (800aa5c <HAL_ADC_ConfigChannel+0x864>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d022      	beq.n	800aa36 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9f8:	d004      	beq.n	800aa04 <HAL_ADC_ConfigChannel+0x80c>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a17      	ldr	r2, [pc, #92]	; (800aa5c <HAL_ADC_ConfigChannel+0x864>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d101      	bne.n	800aa08 <HAL_ADC_ConfigChannel+0x810>
 800aa04:	4a16      	ldr	r2, [pc, #88]	; (800aa60 <HAL_ADC_ConfigChannel+0x868>)
 800aa06:	e000      	b.n	800aa0a <HAL_ADC_ConfigChannel+0x812>
 800aa08:	4a10      	ldr	r2, [pc, #64]	; (800aa4c <HAL_ADC_ConfigChannel+0x854>)
 800aa0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa12:	4619      	mov	r1, r3
 800aa14:	4610      	mov	r0, r2
 800aa16:	f7fe fcb4 	bl	8009382 <LL_ADC_SetCommonPathInternalCh>
 800aa1a:	e00c      	b.n	800aa36 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa20:	f043 0220 	orr.w	r2, r3, #32
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800aa2e:	e002      	b.n	800aa36 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aa30:	bf00      	nop
 800aa32:	e000      	b.n	800aa36 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aa34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800aa3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	37d8      	adds	r7, #216	; 0xd8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	50000700 	.word	0x50000700
 800aa50:	c3210000 	.word	0xc3210000
 800aa54:	90c00010 	.word	0x90c00010
 800aa58:	50000600 	.word	0x50000600
 800aa5c:	50000100 	.word	0x50000100
 800aa60:	50000300 	.word	0x50000300
 800aa64:	20000008 	.word	0x20000008
 800aa68:	053e2d63 	.word	0x053e2d63
 800aa6c:	c7520000 	.word	0xc7520000
 800aa70:	50000500 	.word	0x50000500
 800aa74:	cb840000 	.word	0xcb840000

0800aa78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800aa80:	2300      	movs	r3, #0
 800aa82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fe59 	bl	8009740 <LL_ADC_IsEnabled>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d176      	bne.n	800ab82 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689a      	ldr	r2, [r3, #8]
 800aa9a:	4b3c      	ldr	r3, [pc, #240]	; (800ab8c <ADC_Enable+0x114>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00d      	beq.n	800aabe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa6:	f043 0210 	orr.w	r2, r3, #16
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aab2:	f043 0201 	orr.w	r2, r3, #1
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e062      	b.n	800ab84 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fe28 	bl	8009718 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aad0:	d004      	beq.n	800aadc <ADC_Enable+0x64>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a2e      	ldr	r2, [pc, #184]	; (800ab90 <ADC_Enable+0x118>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d101      	bne.n	800aae0 <ADC_Enable+0x68>
 800aadc:	4b2d      	ldr	r3, [pc, #180]	; (800ab94 <ADC_Enable+0x11c>)
 800aade:	e000      	b.n	800aae2 <ADC_Enable+0x6a>
 800aae0:	4b2d      	ldr	r3, [pc, #180]	; (800ab98 <ADC_Enable+0x120>)
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fc60 	bl	80093a8 <LL_ADC_GetCommonPathInternalCh>
 800aae8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800aaea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d013      	beq.n	800ab1a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aaf2:	4b2a      	ldr	r3, [pc, #168]	; (800ab9c <ADC_Enable+0x124>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	099b      	lsrs	r3, r3, #6
 800aaf8:	4a29      	ldr	r2, [pc, #164]	; (800aba0 <ADC_Enable+0x128>)
 800aafa:	fba2 2303 	umull	r2, r3, r2, r3
 800aafe:	099b      	lsrs	r3, r3, #6
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	4613      	mov	r3, r2
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	4413      	add	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ab0c:	e002      	b.n	800ab14 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1f9      	bne.n	800ab0e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ab1a:	f7fe fba5 	bl	8009268 <HAL_GetTick>
 800ab1e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ab20:	e028      	b.n	800ab74 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe fe0a 	bl	8009740 <LL_ADC_IsEnabled>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe fdee 	bl	8009718 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ab3c:	f7fe fb94 	bl	8009268 <HAL_GetTick>
 800ab40:	4602      	mov	r2, r0
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d914      	bls.n	800ab74 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d00d      	beq.n	800ab74 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab5c:	f043 0210 	orr.w	r2, r3, #16
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab68:	f043 0201 	orr.w	r2, r3, #1
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e007      	b.n	800ab84 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d1cf      	bne.n	800ab22 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	8000003f 	.word	0x8000003f
 800ab90:	50000100 	.word	0x50000100
 800ab94:	50000300 	.word	0x50000300
 800ab98:	50000700 	.word	0x50000700
 800ab9c:	20000008 	.word	0x20000008
 800aba0:	053e2d63 	.word	0x053e2d63

0800aba4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d14b      	bne.n	800ac56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0308 	and.w	r3, r3, #8
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d021      	beq.n	800ac1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fc8f 	bl	8009500 <LL_ADC_REG_IsTriggerSourceSWStart>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d032      	beq.n	800ac4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d12b      	bne.n	800ac4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d11f      	bne.n	800ac4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac12:	f043 0201 	orr.w	r2, r3, #1
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac1a:	e018      	b.n	800ac4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	f003 0302 	and.w	r3, r3, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d111      	bne.n	800ac4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d105      	bne.n	800ac4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac46:	f043 0201 	orr.w	r2, r3, #1
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7fc fee2 	bl	8007a18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ac54:	e00e      	b.n	800ac74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5a:	f003 0310 	and.w	r3, r3, #16
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7ff fabe 	bl	800a1e4 <HAL_ADC_ErrorCallback>
}
 800ac68:	e004      	b.n	800ac74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	4798      	blx	r3
}
 800ac74:	bf00      	nop
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f7ff fa96 	bl	800a1bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ac90:	bf00      	nop
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acb6:	f043 0204 	orr.w	r2, r3, #4
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f7ff fa90 	bl	800a1e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800acc4:	bf00      	nop
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <LL_ADC_IsEnabled>:
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d101      	bne.n	800ace4 <LL_ADC_IsEnabled+0x18>
 800ace0:	2301      	movs	r3, #1
 800ace2:	e000      	b.n	800ace6 <LL_ADC_IsEnabled+0x1a>
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <LL_ADC_REG_IsConversionOngoing>:
{
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f003 0304 	and.w	r3, r3, #4
 800ad02:	2b04      	cmp	r3, #4
 800ad04:	d101      	bne.n	800ad0a <LL_ADC_REG_IsConversionOngoing+0x18>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e000      	b.n	800ad0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800ad7c:	b590      	push	{r4, r7, lr}
 800ad7e:	b0a1      	sub	sp, #132	; 0x84
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d101      	bne.n	800ad9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800ad96:	2302      	movs	r3, #2
 800ad98:	e0e7      	b.n	800af6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800ada2:	2300      	movs	r3, #0
 800ada4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800ada6:	2300      	movs	r3, #0
 800ada8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adb2:	d102      	bne.n	800adba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800adb4:	4b6f      	ldr	r3, [pc, #444]	; (800af74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800adb6:	60bb      	str	r3, [r7, #8]
 800adb8:	e009      	b.n	800adce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a6e      	ldr	r2, [pc, #440]	; (800af78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d102      	bne.n	800adca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800adc4:	4b6d      	ldr	r3, [pc, #436]	; (800af7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800adc6:	60bb      	str	r3, [r7, #8]
 800adc8:	e001      	b.n	800adce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800adca:	2300      	movs	r3, #0
 800adcc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10b      	bne.n	800adec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800add8:	f043 0220 	orr.w	r2, r3, #32
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e0be      	b.n	800af6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	4618      	mov	r0, r3
 800adf0:	f7ff ff7f 	bl	800acf2 <LL_ADC_REG_IsConversionOngoing>
 800adf4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff ff79 	bl	800acf2 <LL_ADC_REG_IsConversionOngoing>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f040 80a0 	bne.w	800af48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800ae08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f040 809c 	bne.w	800af48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae18:	d004      	beq.n	800ae24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a55      	ldr	r2, [pc, #340]	; (800af74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d101      	bne.n	800ae28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800ae24:	4b56      	ldr	r3, [pc, #344]	; (800af80 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800ae26:	e000      	b.n	800ae2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800ae28:	4b56      	ldr	r3, [pc, #344]	; (800af84 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800ae2a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d04b      	beq.n	800aecc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800ae34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	6859      	ldr	r1, [r3, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae46:	035b      	lsls	r3, r3, #13
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae58:	d004      	beq.n	800ae64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a45      	ldr	r2, [pc, #276]	; (800af74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d10f      	bne.n	800ae84 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800ae64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800ae68:	f7ff ff30 	bl	800accc <LL_ADC_IsEnabled>
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	4841      	ldr	r0, [pc, #260]	; (800af74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800ae70:	f7ff ff2c 	bl	800accc <LL_ADC_IsEnabled>
 800ae74:	4603      	mov	r3, r0
 800ae76:	4323      	orrs	r3, r4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	bf0c      	ite	eq
 800ae7c:	2301      	moveq	r3, #1
 800ae7e:	2300      	movne	r3, #0
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	e012      	b.n	800aeaa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800ae84:	483c      	ldr	r0, [pc, #240]	; (800af78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800ae86:	f7ff ff21 	bl	800accc <LL_ADC_IsEnabled>
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	483b      	ldr	r0, [pc, #236]	; (800af7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800ae8e:	f7ff ff1d 	bl	800accc <LL_ADC_IsEnabled>
 800ae92:	4603      	mov	r3, r0
 800ae94:	431c      	orrs	r4, r3
 800ae96:	483c      	ldr	r0, [pc, #240]	; (800af88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800ae98:	f7ff ff18 	bl	800accc <LL_ADC_IsEnabled>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	4323      	orrs	r3, r4
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	bf0c      	ite	eq
 800aea4:	2301      	moveq	r3, #1
 800aea6:	2300      	movne	r3, #0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d056      	beq.n	800af5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800aeae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800aeb6:	f023 030f 	bic.w	r3, r3, #15
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	6811      	ldr	r1, [r2, #0]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	6892      	ldr	r2, [r2, #8]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	431a      	orrs	r2, r3
 800aec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aec8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800aeca:	e047      	b.n	800af5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800aecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aed6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aee0:	d004      	beq.n	800aeec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a23      	ldr	r2, [pc, #140]	; (800af74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d10f      	bne.n	800af0c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800aeec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800aef0:	f7ff feec 	bl	800accc <LL_ADC_IsEnabled>
 800aef4:	4604      	mov	r4, r0
 800aef6:	481f      	ldr	r0, [pc, #124]	; (800af74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800aef8:	f7ff fee8 	bl	800accc <LL_ADC_IsEnabled>
 800aefc:	4603      	mov	r3, r0
 800aefe:	4323      	orrs	r3, r4
 800af00:	2b00      	cmp	r3, #0
 800af02:	bf0c      	ite	eq
 800af04:	2301      	moveq	r3, #1
 800af06:	2300      	movne	r3, #0
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	e012      	b.n	800af32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800af0c:	481a      	ldr	r0, [pc, #104]	; (800af78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800af0e:	f7ff fedd 	bl	800accc <LL_ADC_IsEnabled>
 800af12:	4604      	mov	r4, r0
 800af14:	4819      	ldr	r0, [pc, #100]	; (800af7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800af16:	f7ff fed9 	bl	800accc <LL_ADC_IsEnabled>
 800af1a:	4603      	mov	r3, r0
 800af1c:	431c      	orrs	r4, r3
 800af1e:	481a      	ldr	r0, [pc, #104]	; (800af88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800af20:	f7ff fed4 	bl	800accc <LL_ADC_IsEnabled>
 800af24:	4603      	mov	r3, r0
 800af26:	4323      	orrs	r3, r4
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bf0c      	ite	eq
 800af2c:	2301      	moveq	r3, #1
 800af2e:	2300      	movne	r3, #0
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d012      	beq.n	800af5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800af36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800af3e:	f023 030f 	bic.w	r3, r3, #15
 800af42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800af44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800af46:	e009      	b.n	800af5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af4c:	f043 0220 	orr.w	r2, r3, #32
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800af5a:	e000      	b.n	800af5e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800af5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800af66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3784      	adds	r7, #132	; 0x84
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd90      	pop	{r4, r7, pc}
 800af72:	bf00      	nop
 800af74:	50000100 	.word	0x50000100
 800af78:	50000400 	.word	0x50000400
 800af7c:	50000500 	.word	0x50000500
 800af80:	50000300 	.word	0x50000300
 800af84:	50000700 	.word	0x50000700
 800af88:	50000600 	.word	0x50000600

0800af8c <__NVIC_SetPriorityGrouping>:
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f003 0307 	and.w	r3, r3, #7
 800af9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af9c:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <__NVIC_SetPriorityGrouping+0x44>)
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800afa8:	4013      	ands	r3, r2
 800afaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800afb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800afb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800afbe:	4a04      	ldr	r2, [pc, #16]	; (800afd0 <__NVIC_SetPriorityGrouping+0x44>)
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	60d3      	str	r3, [r2, #12]
}
 800afc4:	bf00      	nop
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	e000ed00 	.word	0xe000ed00

0800afd4 <__NVIC_GetPriorityGrouping>:
{
 800afd4:	b480      	push	{r7}
 800afd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800afd8:	4b04      	ldr	r3, [pc, #16]	; (800afec <__NVIC_GetPriorityGrouping+0x18>)
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	0a1b      	lsrs	r3, r3, #8
 800afde:	f003 0307 	and.w	r3, r3, #7
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr
 800afec:	e000ed00 	.word	0xe000ed00

0800aff0 <__NVIC_EnableIRQ>:
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	4603      	mov	r3, r0
 800aff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800affa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800affe:	2b00      	cmp	r3, #0
 800b000:	db0b      	blt.n	800b01a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b002:	79fb      	ldrb	r3, [r7, #7]
 800b004:	f003 021f 	and.w	r2, r3, #31
 800b008:	4907      	ldr	r1, [pc, #28]	; (800b028 <__NVIC_EnableIRQ+0x38>)
 800b00a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b00e:	095b      	lsrs	r3, r3, #5
 800b010:	2001      	movs	r0, #1
 800b012:	fa00 f202 	lsl.w	r2, r0, r2
 800b016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	e000e100 	.word	0xe000e100

0800b02c <__NVIC_SetPriority>:
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	6039      	str	r1, [r7, #0]
 800b036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	db0a      	blt.n	800b056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	b2da      	uxtb	r2, r3
 800b044:	490c      	ldr	r1, [pc, #48]	; (800b078 <__NVIC_SetPriority+0x4c>)
 800b046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b04a:	0112      	lsls	r2, r2, #4
 800b04c:	b2d2      	uxtb	r2, r2
 800b04e:	440b      	add	r3, r1
 800b050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b054:	e00a      	b.n	800b06c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	4908      	ldr	r1, [pc, #32]	; (800b07c <__NVIC_SetPriority+0x50>)
 800b05c:	79fb      	ldrb	r3, [r7, #7]
 800b05e:	f003 030f 	and.w	r3, r3, #15
 800b062:	3b04      	subs	r3, #4
 800b064:	0112      	lsls	r2, r2, #4
 800b066:	b2d2      	uxtb	r2, r2
 800b068:	440b      	add	r3, r1
 800b06a:	761a      	strb	r2, [r3, #24]
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	e000e100 	.word	0xe000e100
 800b07c:	e000ed00 	.word	0xe000ed00

0800b080 <NVIC_EncodePriority>:
{
 800b080:	b480      	push	{r7}
 800b082:	b089      	sub	sp, #36	; 0x24
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f003 0307 	and.w	r3, r3, #7
 800b092:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	f1c3 0307 	rsb	r3, r3, #7
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	bf28      	it	cs
 800b09e:	2304      	movcs	r3, #4
 800b0a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	2b06      	cmp	r3, #6
 800b0a8:	d902      	bls.n	800b0b0 <NVIC_EncodePriority+0x30>
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	3b03      	subs	r3, #3
 800b0ae:	e000      	b.n	800b0b2 <NVIC_EncodePriority+0x32>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b0be:	43da      	mvns	r2, r3
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	401a      	ands	r2, r3
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b0c8:	f04f 31ff 	mov.w	r1, #4294967295
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b0d2:	43d9      	mvns	r1, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0d8:	4313      	orrs	r3, r2
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3724      	adds	r7, #36	; 0x24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7ff ff4c 	bl	800af8c <__NVIC_SetPriorityGrouping>
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	4603      	mov	r3, r0
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
 800b108:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b10a:	f7ff ff63 	bl	800afd4 <__NVIC_GetPriorityGrouping>
 800b10e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	68b9      	ldr	r1, [r7, #8]
 800b114:	6978      	ldr	r0, [r7, #20]
 800b116:	f7ff ffb3 	bl	800b080 <NVIC_EncodePriority>
 800b11a:	4602      	mov	r2, r0
 800b11c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b120:	4611      	mov	r1, r2
 800b122:	4618      	mov	r0, r3
 800b124:	f7ff ff82 	bl	800b02c <__NVIC_SetPriority>
}
 800b128:	bf00      	nop
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b13a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff ff56 	bl	800aff0 <__NVIC_EnableIRQ>
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e08d      	b.n	800b27a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	4b47      	ldr	r3, [pc, #284]	; (800b284 <HAL_DMA_Init+0x138>)
 800b166:	429a      	cmp	r2, r3
 800b168:	d80f      	bhi.n	800b18a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	4b45      	ldr	r3, [pc, #276]	; (800b288 <HAL_DMA_Init+0x13c>)
 800b172:	4413      	add	r3, r2
 800b174:	4a45      	ldr	r2, [pc, #276]	; (800b28c <HAL_DMA_Init+0x140>)
 800b176:	fba2 2303 	umull	r2, r3, r2, r3
 800b17a:	091b      	lsrs	r3, r3, #4
 800b17c:	009a      	lsls	r2, r3, #2
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a42      	ldr	r2, [pc, #264]	; (800b290 <HAL_DMA_Init+0x144>)
 800b186:	641a      	str	r2, [r3, #64]	; 0x40
 800b188:	e00e      	b.n	800b1a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	4b40      	ldr	r3, [pc, #256]	; (800b294 <HAL_DMA_Init+0x148>)
 800b192:	4413      	add	r3, r2
 800b194:	4a3d      	ldr	r2, [pc, #244]	; (800b28c <HAL_DMA_Init+0x140>)
 800b196:	fba2 2303 	umull	r2, r3, r2, r3
 800b19a:	091b      	lsrs	r3, r3, #4
 800b19c:	009a      	lsls	r2, r3, #2
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a3c      	ldr	r2, [pc, #240]	; (800b298 <HAL_DMA_Init+0x14c>)
 800b1a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b1be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b1cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fa76 	bl	800b6ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b208:	d102      	bne.n	800b210 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b218:	b2d2      	uxtb	r2, r2
 800b21a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b224:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d010      	beq.n	800b250 <HAL_DMA_Init+0x104>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	2b04      	cmp	r3, #4
 800b234:	d80c      	bhi.n	800b250 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fa96 	bl	800b768 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b240:	2200      	movs	r2, #0
 800b242:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b24c:	605a      	str	r2, [r3, #4]
 800b24e:	e008      	b.n	800b262 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	40020407 	.word	0x40020407
 800b288:	bffdfff8 	.word	0xbffdfff8
 800b28c:	cccccccd 	.word	0xcccccccd
 800b290:	40020000 	.word	0x40020000
 800b294:	bffdfbf8 	.word	0xbffdfbf8
 800b298:	40020400 	.word	0x40020400

0800b29c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_DMA_Start_IT+0x20>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e066      	b.n	800b38a <HAL_DMA_Start_IT+0xee>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d155      	bne.n	800b37c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f022 0201 	bic.w	r2, r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 f9bb 	bl	800b670 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d008      	beq.n	800b314 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f042 020e 	orr.w	r2, r2, #14
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	e00f      	b.n	800b334 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f022 0204 	bic.w	r2, r2, #4
 800b322:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f042 020a 	orr.w	r2, r2, #10
 800b332:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d007      	beq.n	800b352 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b34c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b350:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b356:	2b00      	cmp	r3, #0
 800b358:	d007      	beq.n	800b36a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b368:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f042 0201 	orr.w	r2, r2, #1
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	e005      	b.n	800b388 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b384:	2302      	movs	r3, #2
 800b386:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b388:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b392:	b480      	push	{r7}
 800b394:	b085      	sub	sp, #20
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d005      	beq.n	800b3b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2204      	movs	r2, #4
 800b3ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	73fb      	strb	r3, [r7, #15]
 800b3b4:	e037      	b.n	800b426 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f022 020e 	bic.w	r2, r2, #14
 800b3c4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3d4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f022 0201 	bic.w	r2, r2, #1
 800b3e4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ea:	f003 021f 	and.w	r2, r3, #31
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f2:	2101      	movs	r1, #1
 800b3f4:	fa01 f202 	lsl.w	r2, r1, r2
 800b3f8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b402:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00c      	beq.n	800b426 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b41a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b424:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b436:	7bfb      	ldrb	r3, [r7, #15]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b456:	b2db      	uxtb	r3, r3
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d00d      	beq.n	800b478 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2204      	movs	r2, #4
 800b460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	73fb      	strb	r3, [r7, #15]
 800b476:	e047      	b.n	800b508 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f022 020e 	bic.w	r2, r2, #14
 800b486:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f022 0201 	bic.w	r2, r2, #1
 800b496:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ac:	f003 021f 	and.w	r2, r3, #31
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	fa01 f202 	lsl.w	r2, r1, r2
 800b4ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b4c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00c      	beq.n	800b4e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b4e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	4798      	blx	r3
    }
  }
  return status;
 800b508:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b52e:	f003 031f 	and.w	r3, r3, #31
 800b532:	2204      	movs	r2, #4
 800b534:	409a      	lsls	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	4013      	ands	r3, r2
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d026      	beq.n	800b58c <HAL_DMA_IRQHandler+0x7a>
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d021      	beq.n	800b58c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0320 	and.w	r3, r3, #32
 800b552:	2b00      	cmp	r3, #0
 800b554:	d107      	bne.n	800b566 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f022 0204 	bic.w	r2, r2, #4
 800b564:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b56a:	f003 021f 	and.w	r2, r3, #31
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	2104      	movs	r1, #4
 800b574:	fa01 f202 	lsl.w	r2, r1, r2
 800b578:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d071      	beq.n	800b666 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b58a:	e06c      	b.n	800b666 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b590:	f003 031f 	and.w	r3, r3, #31
 800b594:	2202      	movs	r2, #2
 800b596:	409a      	lsls	r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	4013      	ands	r3, r2
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d02e      	beq.n	800b5fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	f003 0302 	and.w	r3, r3, #2
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d029      	beq.n	800b5fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0320 	and.w	r3, r3, #32
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10b      	bne.n	800b5d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f022 020a 	bic.w	r2, r2, #10
 800b5c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d4:	f003 021f 	and.w	r2, r3, #31
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5dc:	2102      	movs	r1, #2
 800b5de:	fa01 f202 	lsl.w	r2, r1, r2
 800b5e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d038      	beq.n	800b666 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b5fc:	e033      	b.n	800b666 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b602:	f003 031f 	and.w	r3, r3, #31
 800b606:	2208      	movs	r2, #8
 800b608:	409a      	lsls	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	4013      	ands	r3, r2
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d02a      	beq.n	800b668 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	f003 0308 	and.w	r3, r3, #8
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d025      	beq.n	800b668 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f022 020e 	bic.w	r2, r2, #14
 800b62a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b630:	f003 021f 	and.w	r2, r3, #31
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b638:	2101      	movs	r1, #1
 800b63a:	fa01 f202 	lsl.w	r2, r1, r2
 800b63e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d004      	beq.n	800b668 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b666:	bf00      	nop
 800b668:	bf00      	nop
}
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b686:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d004      	beq.n	800b69a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b698:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b69e:	f003 021f 	and.w	r2, r3, #31
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	fa01 f202 	lsl.w	r2, r1, r2
 800b6ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	2b10      	cmp	r3, #16
 800b6bc:	d108      	bne.n	800b6d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b6ce:	e007      	b.n	800b6e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	60da      	str	r2, [r3, #12]
}
 800b6e0:	bf00      	nop
 800b6e2:	3714      	adds	r7, #20
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4b16      	ldr	r3, [pc, #88]	; (800b754 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d802      	bhi.n	800b706 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b700:	4b15      	ldr	r3, [pc, #84]	; (800b758 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	e001      	b.n	800b70a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b706:	4b15      	ldr	r3, [pc, #84]	; (800b75c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b708:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	b2db      	uxtb	r3, r3
 800b714:	3b08      	subs	r3, #8
 800b716:	4a12      	ldr	r2, [pc, #72]	; (800b760 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b718:	fba2 2303 	umull	r2, r3, r2, r3
 800b71c:	091b      	lsrs	r3, r3, #4
 800b71e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b724:	089b      	lsrs	r3, r3, #2
 800b726:	009a      	lsls	r2, r3, #2
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	4413      	add	r3, r2
 800b72c:	461a      	mov	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a0b      	ldr	r2, [pc, #44]	; (800b764 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b736:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f003 031f 	and.w	r3, r3, #31
 800b73e:	2201      	movs	r2, #1
 800b740:	409a      	lsls	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	40020407 	.word	0x40020407
 800b758:	40020800 	.word	0x40020800
 800b75c:	40020820 	.word	0x40020820
 800b760:	cccccccd 	.word	0xcccccccd
 800b764:	40020880 	.word	0x40020880

0800b768 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4b0b      	ldr	r3, [pc, #44]	; (800b7a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b77c:	4413      	add	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	461a      	mov	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a08      	ldr	r2, [pc, #32]	; (800b7ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b78a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	3b01      	subs	r3, #1
 800b790:	f003 031f 	and.w	r3, r3, #31
 800b794:	2201      	movs	r2, #1
 800b796:	409a      	lsls	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b79c:	bf00      	nop
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	1000823f 	.word	0x1000823f
 800b7ac:	40020940 	.word	0x40020940

0800b7b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b7be:	e15a      	b.n	800ba76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 814c 	beq.w	800ba70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	f003 0303 	and.w	r3, r3, #3
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d005      	beq.n	800b7f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d130      	bne.n	800b852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	005b      	lsls	r3, r3, #1
 800b7fa:	2203      	movs	r2, #3
 800b7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b800:	43db      	mvns	r3, r3
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	4013      	ands	r3, r2
 800b806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	68da      	ldr	r2, [r3, #12]
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	005b      	lsls	r3, r3, #1
 800b810:	fa02 f303 	lsl.w	r3, r2, r3
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	4313      	orrs	r3, r2
 800b818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b826:	2201      	movs	r2, #1
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	fa02 f303 	lsl.w	r3, r2, r3
 800b82e:	43db      	mvns	r3, r3
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	4013      	ands	r3, r2
 800b834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	091b      	lsrs	r3, r3, #4
 800b83c:	f003 0201 	and.w	r2, r3, #1
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	fa02 f303 	lsl.w	r3, r2, r3
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	4313      	orrs	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	f003 0303 	and.w	r3, r3, #3
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d017      	beq.n	800b88e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	005b      	lsls	r3, r3, #1
 800b868:	2203      	movs	r2, #3
 800b86a:	fa02 f303 	lsl.w	r3, r2, r3
 800b86e:	43db      	mvns	r3, r3
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	4013      	ands	r3, r2
 800b874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	689a      	ldr	r2, [r3, #8]
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	005b      	lsls	r3, r3, #1
 800b87e:	fa02 f303 	lsl.w	r3, r2, r3
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	4313      	orrs	r3, r2
 800b886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	f003 0303 	and.w	r3, r3, #3
 800b896:	2b02      	cmp	r3, #2
 800b898:	d123      	bne.n	800b8e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	08da      	lsrs	r2, r3, #3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	3208      	adds	r2, #8
 800b8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f003 0307 	and.w	r3, r3, #7
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	220f      	movs	r2, #15
 800b8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b6:	43db      	mvns	r3, r3
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	691a      	ldr	r2, [r3, #16]
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f003 0307 	and.w	r3, r3, #7
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	08da      	lsrs	r2, r3, #3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	3208      	adds	r2, #8
 800b8dc:	6939      	ldr	r1, [r7, #16]
 800b8de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	2203      	movs	r2, #3
 800b8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f2:	43db      	mvns	r3, r3
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	f003 0203 	and.w	r2, r3, #3
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	fa02 f303 	lsl.w	r3, r2, r3
 800b90a:	693a      	ldr	r2, [r7, #16]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 80a6 	beq.w	800ba70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b924:	4b5b      	ldr	r3, [pc, #364]	; (800ba94 <HAL_GPIO_Init+0x2e4>)
 800b926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b928:	4a5a      	ldr	r2, [pc, #360]	; (800ba94 <HAL_GPIO_Init+0x2e4>)
 800b92a:	f043 0301 	orr.w	r3, r3, #1
 800b92e:	6613      	str	r3, [r2, #96]	; 0x60
 800b930:	4b58      	ldr	r3, [pc, #352]	; (800ba94 <HAL_GPIO_Init+0x2e4>)
 800b932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	60bb      	str	r3, [r7, #8]
 800b93a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b93c:	4a56      	ldr	r2, [pc, #344]	; (800ba98 <HAL_GPIO_Init+0x2e8>)
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	089b      	lsrs	r3, r3, #2
 800b942:	3302      	adds	r3, #2
 800b944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f003 0303 	and.w	r3, r3, #3
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	220f      	movs	r2, #15
 800b954:	fa02 f303 	lsl.w	r3, r2, r3
 800b958:	43db      	mvns	r3, r3
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	4013      	ands	r3, r2
 800b95e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b966:	d01f      	beq.n	800b9a8 <HAL_GPIO_Init+0x1f8>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a4c      	ldr	r2, [pc, #304]	; (800ba9c <HAL_GPIO_Init+0x2ec>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d019      	beq.n	800b9a4 <HAL_GPIO_Init+0x1f4>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a4b      	ldr	r2, [pc, #300]	; (800baa0 <HAL_GPIO_Init+0x2f0>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d013      	beq.n	800b9a0 <HAL_GPIO_Init+0x1f0>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a4a      	ldr	r2, [pc, #296]	; (800baa4 <HAL_GPIO_Init+0x2f4>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d00d      	beq.n	800b99c <HAL_GPIO_Init+0x1ec>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a49      	ldr	r2, [pc, #292]	; (800baa8 <HAL_GPIO_Init+0x2f8>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d007      	beq.n	800b998 <HAL_GPIO_Init+0x1e8>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a48      	ldr	r2, [pc, #288]	; (800baac <HAL_GPIO_Init+0x2fc>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d101      	bne.n	800b994 <HAL_GPIO_Init+0x1e4>
 800b990:	2305      	movs	r3, #5
 800b992:	e00a      	b.n	800b9aa <HAL_GPIO_Init+0x1fa>
 800b994:	2306      	movs	r3, #6
 800b996:	e008      	b.n	800b9aa <HAL_GPIO_Init+0x1fa>
 800b998:	2304      	movs	r3, #4
 800b99a:	e006      	b.n	800b9aa <HAL_GPIO_Init+0x1fa>
 800b99c:	2303      	movs	r3, #3
 800b99e:	e004      	b.n	800b9aa <HAL_GPIO_Init+0x1fa>
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	e002      	b.n	800b9aa <HAL_GPIO_Init+0x1fa>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e000      	b.n	800b9aa <HAL_GPIO_Init+0x1fa>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	697a      	ldr	r2, [r7, #20]
 800b9ac:	f002 0203 	and.w	r2, r2, #3
 800b9b0:	0092      	lsls	r2, r2, #2
 800b9b2:	4093      	lsls	r3, r2
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b9ba:	4937      	ldr	r1, [pc, #220]	; (800ba98 <HAL_GPIO_Init+0x2e8>)
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	089b      	lsrs	r3, r3, #2
 800b9c0:	3302      	adds	r3, #2
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b9c8:	4b39      	ldr	r3, [pc, #228]	; (800bab0 <HAL_GPIO_Init+0x300>)
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	43db      	mvns	r3, r3
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d003      	beq.n	800b9ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b9ec:	4a30      	ldr	r2, [pc, #192]	; (800bab0 <HAL_GPIO_Init+0x300>)
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b9f2:	4b2f      	ldr	r3, [pc, #188]	; (800bab0 <HAL_GPIO_Init+0x300>)
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	43db      	mvns	r3, r3
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	4013      	ands	r3, r2
 800ba00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ba16:	4a26      	ldr	r2, [pc, #152]	; (800bab0 <HAL_GPIO_Init+0x300>)
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800ba1c:	4b24      	ldr	r3, [pc, #144]	; (800bab0 <HAL_GPIO_Init+0x300>)
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	43db      	mvns	r3, r3
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	4013      	ands	r3, r2
 800ba2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d003      	beq.n	800ba40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ba40:	4a1b      	ldr	r2, [pc, #108]	; (800bab0 <HAL_GPIO_Init+0x300>)
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ba46:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <HAL_GPIO_Init+0x300>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	43db      	mvns	r3, r3
 800ba50:	693a      	ldr	r2, [r7, #16]
 800ba52:	4013      	ands	r3, r2
 800ba54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ba6a:	4a11      	ldr	r2, [pc, #68]	; (800bab0 <HAL_GPIO_Init+0x300>)
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	3301      	adds	r3, #1
 800ba74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f47f ae9d 	bne.w	800b7c0 <HAL_GPIO_Init+0x10>
  }
}
 800ba86:	bf00      	nop
 800ba88:	bf00      	nop
 800ba8a:	371c      	adds	r7, #28
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	40021000 	.word	0x40021000
 800ba98:	40010000 	.word	0x40010000
 800ba9c:	48000400 	.word	0x48000400
 800baa0:	48000800 	.word	0x48000800
 800baa4:	48000c00 	.word	0x48000c00
 800baa8:	48001000 	.word	0x48001000
 800baac:	48001400 	.word	0x48001400
 800bab0:	40010400 	.word	0x40010400

0800bab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	460b      	mov	r3, r1
 800babe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	691a      	ldr	r2, [r3, #16]
 800bac4:	887b      	ldrh	r3, [r7, #2]
 800bac6:	4013      	ands	r3, r2
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bacc:	2301      	movs	r3, #1
 800bace:	73fb      	strb	r3, [r7, #15]
 800bad0:	e001      	b.n	800bad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bad2:	2300      	movs	r3, #0
 800bad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	807b      	strh	r3, [r7, #2]
 800baf0:	4613      	mov	r3, r2
 800baf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800baf4:	787b      	ldrb	r3, [r7, #1]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bafa:	887a      	ldrh	r2, [r7, #2]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bb00:	e002      	b.n	800bb08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bb02:	887a      	ldrh	r2, [r7, #2]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d101      	bne.n	800bb26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e08d      	b.n	800bc42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d106      	bne.n	800bb40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7fc ff18 	bl	8008970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2224      	movs	r2, #36	; 0x24
 800bb44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f022 0201 	bic.w	r2, r2, #1
 800bb56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bb64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689a      	ldr	r2, [r3, #8]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d107      	bne.n	800bb8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	689a      	ldr	r2, [r3, #8]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb8a:	609a      	str	r2, [r3, #8]
 800bb8c:	e006      	b.n	800bb9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	689a      	ldr	r2, [r3, #8]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bb9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d108      	bne.n	800bbb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685a      	ldr	r2, [r3, #4]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbb2:	605a      	str	r2, [r3, #4]
 800bbb4:	e007      	b.n	800bbc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	6812      	ldr	r2, [r2, #0]
 800bbd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bbd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68da      	ldr	r2, [r3, #12]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bbe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	691a      	ldr	r2, [r3, #16]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	430a      	orrs	r2, r1
 800bc02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	69d9      	ldr	r1, [r3, #28]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a1a      	ldr	r2, [r3, #32]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	430a      	orrs	r2, r1
 800bc12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f042 0201 	orr.w	r2, r2, #1
 800bc22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b083      	sub	sp, #12
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b20      	cmp	r3, #32
 800bc5e:	d138      	bne.n	800bcd2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d101      	bne.n	800bc6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	e032      	b.n	800bcd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2224      	movs	r2, #36	; 0x24
 800bc7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f022 0201 	bic.w	r2, r2, #1
 800bc8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	6819      	ldr	r1, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	430a      	orrs	r2, r1
 800bcac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f042 0201 	orr.w	r2, r2, #1
 800bcbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2220      	movs	r2, #32
 800bcc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e000      	b.n	800bcd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bcd2:	2302      	movs	r3, #2
  }
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b20      	cmp	r3, #32
 800bcf4:	d139      	bne.n	800bd6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d101      	bne.n	800bd04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bd00:	2302      	movs	r3, #2
 800bd02:	e033      	b.n	800bd6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2224      	movs	r2, #36	; 0x24
 800bd10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f022 0201 	bic.w	r2, r2, #1
 800bd22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bd32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	021b      	lsls	r3, r3, #8
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f042 0201 	orr.w	r2, r2, #1
 800bd54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2220      	movs	r2, #32
 800bd5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	e000      	b.n	800bd6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bd6a:	2302      	movs	r3, #2
  }
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e0c0      	b.n	800bf0c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d106      	bne.n	800bda4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f012 ffd6 	bl	801ed50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2203      	movs	r2, #3
 800bda8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f006 fea9 	bl	8012b08 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	73fb      	strb	r3, [r7, #15]
 800bdba:	e03e      	b.n	800be3a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bdbc:	7bfa      	ldrb	r2, [r7, #15]
 800bdbe:	6879      	ldr	r1, [r7, #4]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	440b      	add	r3, r1
 800bdca:	3311      	adds	r3, #17
 800bdcc:	2201      	movs	r2, #1
 800bdce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bdd0:	7bfa      	ldrb	r2, [r7, #15]
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	440b      	add	r3, r1
 800bdde:	3310      	adds	r3, #16
 800bde0:	7bfa      	ldrb	r2, [r7, #15]
 800bde2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bde4:	7bfa      	ldrb	r2, [r7, #15]
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	440b      	add	r3, r1
 800bdf2:	3313      	adds	r3, #19
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bdf8:	7bfa      	ldrb	r2, [r7, #15]
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4413      	add	r3, r2
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	440b      	add	r3, r1
 800be06:	3320      	adds	r3, #32
 800be08:	2200      	movs	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800be0c:	7bfa      	ldrb	r2, [r7, #15]
 800be0e:	6879      	ldr	r1, [r7, #4]
 800be10:	4613      	mov	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	440b      	add	r3, r1
 800be1a:	3324      	adds	r3, #36	; 0x24
 800be1c:	2200      	movs	r2, #0
 800be1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	6879      	ldr	r1, [r7, #4]
 800be24:	1c5a      	adds	r2, r3, #1
 800be26:	4613      	mov	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	00db      	lsls	r3, r3, #3
 800be2e:	440b      	add	r3, r1
 800be30:	2200      	movs	r2, #0
 800be32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	3301      	adds	r3, #1
 800be38:	73fb      	strb	r3, [r7, #15]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	791b      	ldrb	r3, [r3, #4]
 800be3e:	7bfa      	ldrb	r2, [r7, #15]
 800be40:	429a      	cmp	r2, r3
 800be42:	d3bb      	bcc.n	800bdbc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
 800be48:	e044      	b.n	800bed4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800be4a:	7bfa      	ldrb	r2, [r7, #15]
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	4613      	mov	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	00db      	lsls	r3, r3, #3
 800be56:	440b      	add	r3, r1
 800be58:	f203 1351 	addw	r3, r3, #337	; 0x151
 800be5c:	2200      	movs	r2, #0
 800be5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800be60:	7bfa      	ldrb	r2, [r7, #15]
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	4613      	mov	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	00db      	lsls	r3, r3, #3
 800be6c:	440b      	add	r3, r1
 800be6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be72:	7bfa      	ldrb	r2, [r7, #15]
 800be74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800be76:	7bfa      	ldrb	r2, [r7, #15]
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	440b      	add	r3, r1
 800be84:	f203 1353 	addw	r3, r3, #339	; 0x153
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800be8c:	7bfa      	ldrb	r2, [r7, #15]
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	4613      	mov	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	440b      	add	r3, r1
 800be9a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bea2:	7bfa      	ldrb	r2, [r7, #15]
 800bea4:	6879      	ldr	r1, [r7, #4]
 800bea6:	4613      	mov	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	440b      	add	r3, r1
 800beb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800beb4:	2200      	movs	r2, #0
 800beb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800beb8:	7bfa      	ldrb	r2, [r7, #15]
 800beba:	6879      	ldr	r1, [r7, #4]
 800bebc:	4613      	mov	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	440b      	add	r3, r1
 800bec6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bece:	7bfb      	ldrb	r3, [r7, #15]
 800bed0:	3301      	adds	r3, #1
 800bed2:	73fb      	strb	r3, [r7, #15]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	791b      	ldrb	r3, [r3, #4]
 800bed8:	7bfa      	ldrb	r2, [r7, #15]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d3b5      	bcc.n	800be4a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6818      	ldr	r0, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	3304      	adds	r3, #4
 800bee6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800beea:	f006 fe28 	bl	8012b3e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7a9b      	ldrb	r3, [r3, #10]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d102      	bne.n	800bf0a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f001 fc41 	bl	800d78c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d101      	bne.n	800bf2a <HAL_PCD_Start+0x16>
 800bf26:	2302      	movs	r3, #2
 800bf28:	e012      	b.n	800bf50 <HAL_PCD_Start+0x3c>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f006 fdcf 	bl	8012ada <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f009 f890 	bl	8015066 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f009 f895 	bl	8015094 <USB_ReadInterrupts>
 800bf6a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fb04 	bl	800c584 <PCD_EP_ISR_Handler>

    return;
 800bf7c:	e110      	b.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d013      	beq.n	800bfb0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf9a:	b292      	uxth	r2, r2
 800bf9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f012 ff6e 	bl	801ee82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f8fc 	bl	800c1a6 <HAL_PCD_SetAddress>

    return;
 800bfae:	e0f7      	b.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00c      	beq.n	800bfd4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bfcc:	b292      	uxth	r2, r2
 800bfce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800bfd2:	e0e5      	b.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00c      	beq.n	800bff8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bff0:	b292      	uxth	r2, r2
 800bff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800bff6:	e0d3      	b.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d034      	beq.n	800c06c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f022 0204 	bic.w	r2, r2, #4
 800c014:	b292      	uxth	r2, r2
 800c016:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c022:	b29a      	uxth	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f022 0208 	bic.w	r2, r2, #8
 800c02c:	b292      	uxth	r2, r2
 800c02e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d107      	bne.n	800c04c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c044:	2100      	movs	r1, #0
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f013 f90e 	bl	801f268 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f012 ff51 	bl	801eef4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c064:	b292      	uxth	r2, r2
 800c066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c06a:	e099      	b.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c072:	2b00      	cmp	r3, #0
 800c074:	d027      	beq.n	800c0c6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c07e:	b29a      	uxth	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f042 0208 	orr.w	r2, r2, #8
 800c088:	b292      	uxth	r2, r2
 800c08a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0a0:	b292      	uxth	r2, r2
 800c0a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f042 0204 	orr.w	r2, r2, #4
 800c0b8:	b292      	uxth	r2, r2
 800c0ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f012 fefe 	bl	801eec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c0c4:	e06c      	b.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d040      	beq.n	800c152 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0e2:	b292      	uxth	r2, r2
 800c0e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d12b      	bne.n	800c14a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f042 0204 	orr.w	r2, r2, #4
 800c104:	b292      	uxth	r2, r2
 800c106:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c112:	b29a      	uxth	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f042 0208 	orr.w	r2, r2, #8
 800c11c:	b292      	uxth	r2, r2
 800c11e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2201      	movs	r2, #1
 800c126:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c132:	b29b      	uxth	r3, r3
 800c134:	089b      	lsrs	r3, r3, #2
 800c136:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c140:	2101      	movs	r1, #1
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f013 f890 	bl	801f268 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800c148:	e02a      	b.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f012 feb8 	bl	801eec0 <HAL_PCD_SuspendCallback>
    return;
 800c150:	e026      	b.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00f      	beq.n	800c17c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c164:	b29a      	uxth	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c16e:	b292      	uxth	r2, r2
 800c170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f012 fe76 	bl	801ee66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c17a:	e011      	b.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00c      	beq.n	800c1a0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c18e:	b29a      	uxth	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c198:	b292      	uxth	r2, r2
 800c19a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c19e:	bf00      	nop
  }
}
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d101      	bne.n	800c1c0 <HAL_PCD_SetAddress+0x1a>
 800c1bc:	2302      	movs	r3, #2
 800c1be:	e012      	b.n	800c1e6 <HAL_PCD_SetAddress+0x40>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	78fa      	ldrb	r2, [r7, #3]
 800c1cc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	78fa      	ldrb	r2, [r7, #3]
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f008 ff31 	bl	801503e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b084      	sub	sp, #16
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	70fb      	strb	r3, [r7, #3]
 800c200:	460b      	mov	r3, r1
 800c202:	803b      	strh	r3, [r7, #0]
 800c204:	4613      	mov	r3, r2
 800c206:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c20c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c210:	2b00      	cmp	r3, #0
 800c212:	da0e      	bge.n	800c232 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c214:	78fb      	ldrb	r3, [r7, #3]
 800c216:	f003 0207 	and.w	r2, r3, #7
 800c21a:	4613      	mov	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4413      	add	r3, r2
 800c220:	00db      	lsls	r3, r3, #3
 800c222:	3310      	adds	r3, #16
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	4413      	add	r3, r2
 800c228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2201      	movs	r2, #1
 800c22e:	705a      	strb	r2, [r3, #1]
 800c230:	e00e      	b.n	800c250 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c232:	78fb      	ldrb	r3, [r7, #3]
 800c234:	f003 0207 	and.w	r2, r3, #7
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	4413      	add	r3, r2
 800c248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c250:	78fb      	ldrb	r3, [r7, #3]
 800c252:	f003 0307 	and.w	r3, r3, #7
 800c256:	b2da      	uxtb	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c25c:	883a      	ldrh	r2, [r7, #0]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	78ba      	ldrb	r2, [r7, #2]
 800c266:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c268:	78bb      	ldrb	r3, [r7, #2]
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d102      	bne.n	800c274 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d101      	bne.n	800c282 <HAL_PCD_EP_Open+0x94>
 800c27e:	2302      	movs	r3, #2
 800c280:	e00e      	b.n	800c2a0 <HAL_PCD_EP_Open+0xb2>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68f9      	ldr	r1, [r7, #12]
 800c290:	4618      	mov	r0, r3
 800c292:	f006 fc73 	bl	8012b7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800c29e:	7afb      	ldrb	r3, [r7, #11]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c2b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	da0e      	bge.n	800c2da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	f003 0207 	and.w	r2, r3, #7
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	00db      	lsls	r3, r3, #3
 800c2ca:	3310      	adds	r3, #16
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	705a      	strb	r2, [r3, #1]
 800c2d8:	e00e      	b.n	800c2f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c2da:	78fb      	ldrb	r3, [r7, #3]
 800c2dc:	f003 0207 	and.w	r2, r3, #7
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	4413      	add	r3, r2
 800c2e6:	00db      	lsls	r3, r3, #3
 800c2e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2f8:	78fb      	ldrb	r3, [r7, #3]
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d101      	bne.n	800c312 <HAL_PCD_EP_Close+0x6a>
 800c30e:	2302      	movs	r3, #2
 800c310:	e00e      	b.n	800c330 <HAL_PCD_EP_Close+0x88>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68f9      	ldr	r1, [r7, #12]
 800c320:	4618      	mov	r0, r3
 800c322:	f006 ffef 	bl	8013304 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	607a      	str	r2, [r7, #4]
 800c342:	603b      	str	r3, [r7, #0]
 800c344:	460b      	mov	r3, r1
 800c346:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c348:	7afb      	ldrb	r3, [r7, #11]
 800c34a:	f003 0207 	and.w	r2, r3, #7
 800c34e:	4613      	mov	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	4413      	add	r3, r2
 800c35e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	2200      	movs	r2, #0
 800c370:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2200      	movs	r2, #0
 800c376:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c378:	7afb      	ldrb	r3, [r7, #11]
 800c37a:	f003 0307 	and.w	r3, r3, #7
 800c37e:	b2da      	uxtb	r2, r3
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6979      	ldr	r1, [r7, #20]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f007 f9a7 	bl	80136de <USB_EPStartXfer>

  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3718      	adds	r7, #24
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c39a:	b480      	push	{r7}
 800c39c:	b083      	sub	sp, #12
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c3a6:	78fb      	ldrb	r3, [r7, #3]
 800c3a8:	f003 0207 	and.w	r2, r3, #7
 800c3ac:	6879      	ldr	r1, [r7, #4]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4413      	add	r3, r2
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	440b      	add	r3, r1
 800c3b8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c3bc:	681b      	ldr	r3, [r3, #0]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b086      	sub	sp, #24
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	60f8      	str	r0, [r7, #12]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	603b      	str	r3, [r7, #0]
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3da:	7afb      	ldrb	r3, [r7, #11]
 800c3dc:	f003 0207 	and.w	r2, r3, #7
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	3310      	adds	r3, #16
 800c3ea:	68fa      	ldr	r2, [r7, #12]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2200      	movs	r2, #0
 800c40e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	2201      	movs	r2, #1
 800c414:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c416:	7afb      	ldrb	r3, [r7, #11]
 800c418:	f003 0307 	and.w	r3, r3, #7
 800c41c:	b2da      	uxtb	r2, r3
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6979      	ldr	r1, [r7, #20]
 800c428:	4618      	mov	r0, r3
 800c42a:	f007 f958 	bl	80136de <USB_EPStartXfer>

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3718      	adds	r7, #24
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	460b      	mov	r3, r1
 800c442:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c444:	78fb      	ldrb	r3, [r7, #3]
 800c446:	f003 0307 	and.w	r3, r3, #7
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	7912      	ldrb	r2, [r2, #4]
 800c44e:	4293      	cmp	r3, r2
 800c450:	d901      	bls.n	800c456 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	e03e      	b.n	800c4d4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	da0e      	bge.n	800c47c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c45e:	78fb      	ldrb	r3, [r7, #3]
 800c460:	f003 0207 	and.w	r2, r3, #7
 800c464:	4613      	mov	r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	4413      	add	r3, r2
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	3310      	adds	r3, #16
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	4413      	add	r3, r2
 800c472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2201      	movs	r2, #1
 800c478:	705a      	strb	r2, [r3, #1]
 800c47a:	e00c      	b.n	800c496 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c47c:	78fa      	ldrb	r2, [r7, #3]
 800c47e:	4613      	mov	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4413      	add	r3, r2
 800c484:	00db      	lsls	r3, r3, #3
 800c486:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	4413      	add	r3, r2
 800c48e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2201      	movs	r2, #1
 800c49a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c49c:	78fb      	ldrb	r3, [r7, #3]
 800c49e:	f003 0307 	and.w	r3, r3, #7
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d101      	bne.n	800c4b6 <HAL_PCD_EP_SetStall+0x7e>
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	e00e      	b.n	800c4d4 <HAL_PCD_EP_SetStall+0x9c>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68f9      	ldr	r1, [r7, #12]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f008 fcbb 	bl	8014e40 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c4e8:	78fb      	ldrb	r3, [r7, #3]
 800c4ea:	f003 030f 	and.w	r3, r3, #15
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	7912      	ldrb	r2, [r2, #4]
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d901      	bls.n	800c4fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e040      	b.n	800c57c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c4fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	da0e      	bge.n	800c520 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c502:	78fb      	ldrb	r3, [r7, #3]
 800c504:	f003 0207 	and.w	r2, r3, #7
 800c508:	4613      	mov	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	3310      	adds	r3, #16
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	4413      	add	r3, r2
 800c516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2201      	movs	r2, #1
 800c51c:	705a      	strb	r2, [r3, #1]
 800c51e:	e00e      	b.n	800c53e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	f003 0207 	and.w	r2, r3, #7
 800c526:	4613      	mov	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	4413      	add	r3, r2
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	4413      	add	r3, r2
 800c536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c544:	78fb      	ldrb	r3, [r7, #3]
 800c546:	f003 0307 	and.w	r3, r3, #7
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c556:	2b01      	cmp	r3, #1
 800c558:	d101      	bne.n	800c55e <HAL_PCD_EP_ClrStall+0x82>
 800c55a:	2302      	movs	r3, #2
 800c55c:	e00e      	b.n	800c57c <HAL_PCD_EP_ClrStall+0xa0>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68f9      	ldr	r1, [r7, #12]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f008 fcb8 	bl	8014ee2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b096      	sub	sp, #88	; 0x58
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c58c:	e3ae      	b.n	800ccec <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c596:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800c59a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	f003 030f 	and.w	r3, r3, #15
 800c5a4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800c5a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f040 8170 	bne.w	800c892 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800c5b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c5b6:	f003 0310 	and.w	r3, r3, #16
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d14d      	bne.n	800c65a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5ce:	81fb      	strh	r3, [r7, #14]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	89fb      	ldrh	r3, [r7, #14]
 800c5d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	3310      	adds	r3, #16
 800c5e6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	00db      	lsls	r3, r3, #3
 800c5fa:	4413      	add	r3, r2
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	6812      	ldr	r2, [r2, #0]
 800c600:	4413      	add	r3, r2
 800c602:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c60c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c60e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800c610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c612:	695a      	ldr	r2, [r3, #20]
 800c614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c616:	69db      	ldr	r3, [r3, #28]
 800c618:	441a      	add	r2, r3
 800c61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c61c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800c61e:	2100      	movs	r1, #0
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f012 fc06 	bl	801ee32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	7b1b      	ldrb	r3, [r3, #12]
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 835d 	beq.w	800ccec <PCD_EP_ISR_Handler+0x768>
 800c632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	2b00      	cmp	r3, #0
 800c638:	f040 8358 	bne.w	800ccec <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	7b1b      	ldrb	r3, [r3, #12]
 800c640:	b2db      	uxtb	r3, r3
 800c642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c646:	b2da      	uxtb	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	b292      	uxth	r2, r2
 800c64e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	731a      	strb	r2, [r3, #12]
 800c658:	e348      	b.n	800ccec <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c660:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800c66c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c674:	2b00      	cmp	r3, #0
 800c676:	d032      	beq.n	800c6de <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c680:	b29b      	uxth	r3, r3
 800c682:	461a      	mov	r2, r3
 800c684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	00db      	lsls	r3, r3, #3
 800c68a:	4413      	add	r3, r2
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	6812      	ldr	r2, [r2, #0]
 800c690:	4413      	add	r3, r2
 800c692:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c696:	881b      	ldrh	r3, [r3, #0]
 800c698:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c69c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c69e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800c6aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6ac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800c6ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6b0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	f008 fd40 	bl	8015138 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	823b      	strh	r3, [r7, #16]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	8a3a      	ldrh	r2, [r7, #16]
 800c6ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c6d2:	b292      	uxth	r2, r2
 800c6d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f012 fb7e 	bl	801edd8 <HAL_PCD_SetupStageCallback>
 800c6dc:	e306      	b.n	800ccec <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c6de:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f280 8302 	bge.w	800ccec <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	881b      	ldrh	r3, [r3, #0]
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c6f4:	4013      	ands	r3, r2
 800c6f6:	83fb      	strh	r3, [r7, #30]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	8bfa      	ldrh	r2, [r7, #30]
 800c6fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c702:	b292      	uxth	r2, r2
 800c704:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c70e:	b29b      	uxth	r3, r3
 800c710:	461a      	mov	r2, r3
 800c712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	00db      	lsls	r3, r3, #3
 800c718:	4413      	add	r3, r2
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	6812      	ldr	r2, [r2, #0]
 800c71e:	4413      	add	r3, r2
 800c720:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c724:	881b      	ldrh	r3, [r3, #0]
 800c726:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c72c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800c72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c730:	69db      	ldr	r3, [r3, #28]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d019      	beq.n	800c76a <PCD_EP_ISR_Handler+0x1e6>
 800c736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d015      	beq.n	800c76a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6818      	ldr	r0, [r3, #0]
 800c742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c744:	6959      	ldr	r1, [r3, #20]
 800c746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c748:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800c74a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c74c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c74e:	b29b      	uxth	r3, r3
 800c750:	f008 fcf2 	bl	8015138 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800c754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c756:	695a      	ldr	r2, [r3, #20]
 800c758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	441a      	add	r2, r3
 800c75e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c760:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800c762:	2100      	movs	r1, #0
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f012 fb49 	bl	801edfc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800c774:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f040 82b5 	bne.w	800ccec <PCD_EP_ISR_Handler+0x768>
 800c782:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c786:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c78a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c78e:	f000 82ad 	beq.w	800ccec <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	61bb      	str	r3, [r7, #24]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	61bb      	str	r3, [r7, #24]
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c7b0:	617b      	str	r3, [r7, #20]
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	801a      	strh	r2, [r3, #0]
 800c7c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	2b3e      	cmp	r3, #62	; 0x3e
 800c7c8:	d91d      	bls.n	800c806 <PCD_EP_ISR_Handler+0x282>
 800c7ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	095b      	lsrs	r3, r3, #5
 800c7d0:	647b      	str	r3, [r7, #68]	; 0x44
 800c7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	f003 031f 	and.w	r3, r3, #31
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <PCD_EP_ISR_Handler+0x260>
 800c7de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	029b      	lsls	r3, r3, #10
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	801a      	strh	r2, [r3, #0]
 800c804:	e026      	b.n	800c854 <PCD_EP_ISR_Handler+0x2d0>
 800c806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d10a      	bne.n	800c824 <PCD_EP_ISR_Handler+0x2a0>
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	b29b      	uxth	r3, r3
 800c814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	801a      	strh	r2, [r3, #0]
 800c822:	e017      	b.n	800c854 <PCD_EP_ISR_Handler+0x2d0>
 800c824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	085b      	lsrs	r3, r3, #1
 800c82a:	647b      	str	r3, [r7, #68]	; 0x44
 800c82c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <PCD_EP_ISR_Handler+0x2ba>
 800c838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c83a:	3301      	adds	r3, #1
 800c83c:	647b      	str	r3, [r7, #68]	; 0x44
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	881b      	ldrh	r3, [r3, #0]
 800c842:	b29a      	uxth	r2, r3
 800c844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c846:	b29b      	uxth	r3, r3
 800c848:	029b      	lsls	r3, r3, #10
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	4313      	orrs	r3, r2
 800c84e:	b29a      	uxth	r2, r3
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	881b      	ldrh	r3, [r3, #0]
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c864:	827b      	strh	r3, [r7, #18]
 800c866:	8a7b      	ldrh	r3, [r7, #18]
 800c868:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c86c:	827b      	strh	r3, [r7, #18]
 800c86e:	8a7b      	ldrh	r3, [r7, #18]
 800c870:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c874:	827b      	strh	r3, [r7, #18]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	8a7b      	ldrh	r3, [r7, #18]
 800c87c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	8013      	strh	r3, [r2, #0]
 800c890:	e22c      	b.n	800ccec <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	461a      	mov	r2, r3
 800c898:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4413      	add	r3, r2
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c8a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f280 80f6 	bge.w	800ca9c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4413      	add	r3, r2
 800c8be:	881b      	ldrh	r3, [r3, #0]
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4413      	add	r3, r2
 800c8da:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800c8de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c8e2:	b292      	uxth	r2, r2
 800c8e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800c8e6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	00db      	lsls	r3, r3, #3
 800c8f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800c8fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8fe:	7b1b      	ldrb	r3, [r3, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d123      	bne.n	800c94c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	461a      	mov	r2, r3
 800c910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	00db      	lsls	r3, r3, #3
 800c916:	4413      	add	r3, r2
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	6812      	ldr	r2, [r2, #0]
 800c91c:	4413      	add	r3, r2
 800c91e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c922:	881b      	ldrh	r3, [r3, #0]
 800c924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c928:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800c92c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 808e 	beq.w	800ca52 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6818      	ldr	r0, [r3, #0]
 800c93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c93c:	6959      	ldr	r1, [r3, #20]
 800c93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c940:	88da      	ldrh	r2, [r3, #6]
 800c942:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c946:	f008 fbf7 	bl	8015138 <USB_ReadPMA>
 800c94a:	e082      	b.n	800ca52 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800c94c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c94e:	78db      	ldrb	r3, [r3, #3]
 800c950:	2b02      	cmp	r3, #2
 800c952:	d10a      	bne.n	800c96a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800c954:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c958:	461a      	mov	r2, r3
 800c95a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f9d3 	bl	800cd08 <HAL_PCD_EP_DB_Receive>
 800c962:	4603      	mov	r3, r0
 800c964:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800c968:	e073      	b.n	800ca52 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c984:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	441a      	add	r2, r3
 800c996:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d022      	beq.n	800ca0e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	00db      	lsls	r3, r3, #3
 800c9da:	4413      	add	r3, r2
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	6812      	ldr	r2, [r2, #0]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800c9f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d02c      	beq.n	800ca52 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6818      	ldr	r0, [r3, #0]
 800c9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9fe:	6959      	ldr	r1, [r3, #20]
 800ca00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca02:	891a      	ldrh	r2, [r3, #8]
 800ca04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ca08:	f008 fb96 	bl	8015138 <USB_ReadPMA>
 800ca0c:	e021      	b.n	800ca52 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	461a      	mov	r2, r3
 800ca1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	00db      	lsls	r3, r3, #3
 800ca20:	4413      	add	r3, r2
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	6812      	ldr	r2, [r2, #0]
 800ca26:	4413      	add	r3, r2
 800ca28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800ca36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d009      	beq.n	800ca52 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca44:	6959      	ldr	r1, [r3, #20]
 800ca46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca48:	895a      	ldrh	r2, [r3, #10]
 800ca4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ca4e:	f008 fb73 	bl	8015138 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ca52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca54:	69da      	ldr	r2, [r3, #28]
 800ca56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ca5a:	441a      	add	r2, r3
 800ca5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ca60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca62:	695a      	ldr	r2, [r3, #20]
 800ca64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ca68:	441a      	add	r2, r3
 800ca6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca6c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ca6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca70:	699b      	ldr	r3, [r3, #24]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d005      	beq.n	800ca82 <PCD_EP_ISR_Handler+0x4fe>
 800ca76:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800ca7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d206      	bcs.n	800ca90 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ca82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f012 f9b7 	bl	801edfc <HAL_PCD_DataOutStageCallback>
 800ca8e:	e005      	b.n	800ca9c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca96:	4618      	mov	r0, r3
 800ca98:	f006 fe21 	bl	80136de <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ca9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800caa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f000 8121 	beq.w	800ccec <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800caaa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800caae:	4613      	mov	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	00db      	lsls	r3, r3, #3
 800cab6:	3310      	adds	r3, #16
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	4413      	add	r3, r2
 800cabc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	461a      	mov	r2, r3
 800cac4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4413      	add	r3, r2
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	b29b      	uxth	r3, r3
 800cad0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800cad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cad8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	461a      	mov	r2, r3
 800cae2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	441a      	add	r2, r3
 800caea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800caee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800cafa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cafc:	78db      	ldrb	r3, [r3, #3]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	f040 80a2 	bne.w	800cc48 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800cb04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb06:	2200      	movs	r2, #0
 800cb08:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800cb0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb0c:	7b1b      	ldrb	r3, [r3, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 8093 	beq.w	800cc3a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cb14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cb18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d046      	beq.n	800cbae <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cb20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb22:	785b      	ldrb	r3, [r3, #1]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d126      	bne.n	800cb76 <PCD_EP_ISR_Handler+0x5f2>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	4413      	add	r3, r2
 800cb3e:	627b      	str	r3, [r7, #36]	; 0x24
 800cb40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	00da      	lsls	r2, r3, #3
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	4413      	add	r3, r2
 800cb4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb4e:	623b      	str	r3, [r7, #32]
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	801a      	strh	r2, [r3, #0]
 800cb60:	6a3b      	ldr	r3, [r7, #32]
 800cb62:	881b      	ldrh	r3, [r3, #0]
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	801a      	strh	r2, [r3, #0]
 800cb74:	e061      	b.n	800cc3a <PCD_EP_ISR_Handler+0x6b6>
 800cb76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb78:	785b      	ldrb	r3, [r3, #1]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d15d      	bne.n	800cc3a <PCD_EP_ISR_Handler+0x6b6>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	461a      	mov	r2, r3
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	4413      	add	r3, r2
 800cb94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	00da      	lsls	r2, r3, #3
 800cb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9e:	4413      	add	r3, r2
 800cba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cba4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	2200      	movs	r2, #0
 800cbaa:	801a      	strh	r2, [r3, #0]
 800cbac:	e045      	b.n	800cc3a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbb6:	785b      	ldrb	r3, [r3, #1]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d126      	bne.n	800cc0a <PCD_EP_ISR_Handler+0x686>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	637b      	str	r3, [r7, #52]	; 0x34
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	461a      	mov	r2, r3
 800cbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd0:	4413      	add	r3, r2
 800cbd2:	637b      	str	r3, [r7, #52]	; 0x34
 800cbd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	00da      	lsls	r2, r3, #3
 800cbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbdc:	4413      	add	r3, r2
 800cbde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cbe2:	633b      	str	r3, [r7, #48]	; 0x30
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf2:	801a      	strh	r2, [r3, #0]
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	881b      	ldrh	r3, [r3, #0]
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	801a      	strh	r2, [r3, #0]
 800cc08:	e017      	b.n	800cc3a <PCD_EP_ISR_Handler+0x6b6>
 800cc0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc0c:	785b      	ldrb	r3, [r3, #1]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d113      	bne.n	800cc3a <PCD_EP_ISR_Handler+0x6b6>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc20:	4413      	add	r3, r2
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	00da      	lsls	r2, r3, #3
 800cc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc2c:	4413      	add	r3, r2
 800cc2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cc32:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	2200      	movs	r2, #0
 800cc38:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cc3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f012 f8f6 	bl	801ee32 <HAL_PCD_DataInStageCallback>
 800cc46:	e051      	b.n	800ccec <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800cc48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cc4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d144      	bne.n	800ccde <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	461a      	mov	r2, r3
 800cc60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	4413      	add	r3, r2
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	6812      	ldr	r2, [r2, #0]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc72:	881b      	ldrh	r3, [r3, #0]
 800cc74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800cc7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc7e:	699a      	ldr	r2, [r3, #24]
 800cc80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d907      	bls.n	800cc98 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800cc88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc8a:	699a      	ldr	r2, [r3, #24]
 800cc8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc90:	1ad2      	subs	r2, r2, r3
 800cc92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc94:	619a      	str	r2, [r3, #24]
 800cc96:	e002      	b.n	800cc9e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800cc98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800cc9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d106      	bne.n	800ccb4 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f012 f8c0 	bl	801ee32 <HAL_PCD_DataInStageCallback>
 800ccb2:	e01b      	b.n	800ccec <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ccb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccb6:	695a      	ldr	r2, [r3, #20]
 800ccb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ccbc:	441a      	add	r2, r3
 800ccbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccc0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800ccc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccc4:	69da      	ldr	r2, [r3, #28]
 800ccc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ccca:	441a      	add	r2, r3
 800cccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f006 fd01 	bl	80136de <USB_EPStartXfer>
 800ccdc:	e006      	b.n	800ccec <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ccde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cce2:	461a      	mov	r2, r3
 800cce4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f917 	bl	800cf1a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	b21b      	sxth	r3, r3
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f6ff ac48 	blt.w	800c58e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3758      	adds	r7, #88	; 0x58
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	4613      	mov	r3, r2
 800cd14:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800cd16:	88fb      	ldrh	r3, [r7, #6]
 800cd18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d07c      	beq.n	800ce1a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	00db      	lsls	r3, r3, #3
 800cd32:	4413      	add	r3, r2
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	6812      	ldr	r2, [r2, #0]
 800cd38:	4413      	add	r3, r2
 800cd3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cd3e:	881b      	ldrh	r3, [r3, #0]
 800cd40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	699a      	ldr	r2, [r3, #24]
 800cd4a:	8b7b      	ldrh	r3, [r7, #26]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d306      	bcc.n	800cd5e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	699a      	ldr	r2, [r3, #24]
 800cd54:	8b7b      	ldrh	r3, [r7, #26]
 800cd56:	1ad2      	subs	r2, r2, r3
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	619a      	str	r2, [r3, #24]
 800cd5c:	e002      	b.n	800cd64 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2200      	movs	r2, #0
 800cd62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	699b      	ldr	r3, [r3, #24]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d123      	bne.n	800cdb4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	461a      	mov	r2, r3
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	881b      	ldrh	r3, [r3, #0]
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd86:	833b      	strh	r3, [r7, #24]
 800cd88:	8b3b      	ldrh	r3, [r7, #24]
 800cd8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cd8e:	833b      	strh	r3, [r7, #24]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	461a      	mov	r2, r3
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	441a      	add	r2, r3
 800cd9e:	8b3b      	ldrh	r3, [r7, #24]
 800cda0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cda4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cda8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cdb4:	88fb      	ldrh	r3, [r7, #6]
 800cdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d01f      	beq.n	800cdfe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	4413      	add	r3, r2
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdd8:	82fb      	strh	r3, [r7, #22]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	461a      	mov	r2, r3
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	441a      	add	r2, r3
 800cde8:	8afb      	ldrh	r3, [r7, #22]
 800cdea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800cdfe:	8b7b      	ldrh	r3, [r7, #26]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f000 8085 	beq.w	800cf10 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6818      	ldr	r0, [r3, #0]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	6959      	ldr	r1, [r3, #20]
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	891a      	ldrh	r2, [r3, #8]
 800ce12:	8b7b      	ldrh	r3, [r7, #26]
 800ce14:	f008 f990 	bl	8015138 <USB_ReadPMA>
 800ce18:	e07a      	b.n	800cf10 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	461a      	mov	r2, r3
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	4413      	add	r3, r2
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	6812      	ldr	r2, [r2, #0]
 800ce32:	4413      	add	r3, r2
 800ce34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	699a      	ldr	r2, [r3, #24]
 800ce44:	8b7b      	ldrh	r3, [r7, #26]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d306      	bcc.n	800ce58 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	699a      	ldr	r2, [r3, #24]
 800ce4e:	8b7b      	ldrh	r3, [r7, #26]
 800ce50:	1ad2      	subs	r2, r2, r3
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	619a      	str	r2, [r3, #24]
 800ce56:	e002      	b.n	800ce5e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	699b      	ldr	r3, [r3, #24]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d123      	bne.n	800ceae <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4413      	add	r3, r2
 800ce74:	881b      	ldrh	r3, [r3, #0]
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce80:	83fb      	strh	r3, [r7, #30]
 800ce82:	8bfb      	ldrh	r3, [r7, #30]
 800ce84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ce88:	83fb      	strh	r3, [r7, #30]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	441a      	add	r2, r3
 800ce98:	8bfb      	ldrh	r3, [r7, #30]
 800ce9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ceae:	88fb      	ldrh	r3, [r7, #6]
 800ceb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d11f      	bne.n	800cef8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	461a      	mov	r2, r3
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ced2:	83bb      	strh	r3, [r7, #28]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	461a      	mov	r2, r3
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	441a      	add	r2, r3
 800cee2:	8bbb      	ldrh	r3, [r7, #28]
 800cee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ceec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800cef8:	8b7b      	ldrh	r3, [r7, #26]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d008      	beq.n	800cf10 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6818      	ldr	r0, [r3, #0]
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	6959      	ldr	r1, [r3, #20]
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	895a      	ldrh	r2, [r3, #10]
 800cf0a:	8b7b      	ldrh	r3, [r7, #26]
 800cf0c:	f008 f914 	bl	8015138 <USB_ReadPMA>
    }
  }

  return count;
 800cf10:	8b7b      	ldrh	r3, [r7, #26]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b0a4      	sub	sp, #144	; 0x90
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	60f8      	str	r0, [r7, #12]
 800cf22:	60b9      	str	r1, [r7, #8]
 800cf24:	4613      	mov	r3, r2
 800cf26:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cf28:	88fb      	ldrh	r3, [r7, #6]
 800cf2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 81db 	beq.w	800d2ea <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	461a      	mov	r2, r3
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	4413      	add	r3, r2
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	6812      	ldr	r2, [r2, #0]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf58:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	699a      	ldr	r2, [r3, #24]
 800cf60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d907      	bls.n	800cf78 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	699a      	ldr	r2, [r3, #24]
 800cf6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cf70:	1ad2      	subs	r2, r2, r3
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	619a      	str	r2, [r3, #24]
 800cf76:	e002      	b.n	800cf7e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	699b      	ldr	r3, [r3, #24]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f040 80b9 	bne.w	800d0fa <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	785b      	ldrb	r3, [r3, #1]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d126      	bne.n	800cfde <HAL_PCD_EP_DB_Transmit+0xc4>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa4:	4413      	add	r3, r2
 800cfa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	00da      	lsls	r2, r3, #3
 800cfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cfb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfba:	881b      	ldrh	r3, [r3, #0]
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	801a      	strh	r2, [r3, #0]
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfda:	801a      	strh	r2, [r3, #0]
 800cfdc:	e01a      	b.n	800d014 <HAL_PCD_EP_DB_Transmit+0xfa>
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	785b      	ldrb	r3, [r3, #1]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d116      	bne.n	800d014 <HAL_PCD_EP_DB_Transmit+0xfa>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	637b      	str	r3, [r7, #52]	; 0x34
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	461a      	mov	r2, r3
 800cff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffa:	4413      	add	r3, r2
 800cffc:	637b      	str	r3, [r7, #52]	; 0x34
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	00da      	lsls	r2, r3, #3
 800d004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d006:	4413      	add	r3, r2
 800d008:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d00c:	633b      	str	r3, [r7, #48]	; 0x30
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	2200      	movs	r2, #0
 800d012:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	785b      	ldrb	r3, [r3, #1]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d126      	bne.n	800d070 <HAL_PCD_EP_DB_Transmit+0x156>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	61fb      	str	r3, [r7, #28]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d030:	b29b      	uxth	r3, r3
 800d032:	461a      	mov	r2, r3
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	4413      	add	r3, r2
 800d038:	61fb      	str	r3, [r7, #28]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	00da      	lsls	r2, r3, #3
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	4413      	add	r3, r2
 800d044:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d048:	61bb      	str	r3, [r7, #24]
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d054:	b29a      	uxth	r2, r3
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	801a      	strh	r2, [r3, #0]
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	881b      	ldrh	r3, [r3, #0]
 800d05e:	b29b      	uxth	r3, r3
 800d060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d068:	b29a      	uxth	r2, r3
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	801a      	strh	r2, [r3, #0]
 800d06e:	e017      	b.n	800d0a0 <HAL_PCD_EP_DB_Transmit+0x186>
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	785b      	ldrb	r3, [r3, #1]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d113      	bne.n	800d0a0 <HAL_PCD_EP_DB_Transmit+0x186>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d080:	b29b      	uxth	r3, r3
 800d082:	461a      	mov	r2, r3
 800d084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d086:	4413      	add	r3, r2
 800d088:	627b      	str	r3, [r7, #36]	; 0x24
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	00da      	lsls	r2, r3, #3
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	4413      	add	r3, r2
 800d094:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d098:	623b      	str	r3, [r7, #32]
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	2200      	movs	r2, #0
 800d09e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f011 fec3 	bl	801ee32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d0ac:	88fb      	ldrh	r3, [r7, #6]
 800d0ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f000 82fa 	beq.w	800d6ac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0d2:	82fb      	strh	r3, [r7, #22]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	441a      	add	r2, r3
 800d0e2:	8afb      	ldrh	r3, [r7, #22]
 800d0e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	8013      	strh	r3, [r2, #0]
 800d0f8:	e2d8      	b.n	800d6ac <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d0fa:	88fb      	ldrh	r3, [r7, #6]
 800d0fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d100:	2b00      	cmp	r3, #0
 800d102:	d021      	beq.n	800d148 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	461a      	mov	r2, r3
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4413      	add	r3, r2
 800d112:	881b      	ldrh	r3, [r3, #0]
 800d114:	b29b      	uxth	r3, r3
 800d116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d11e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	441a      	add	r2, r3
 800d130:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d13c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d144:	b29b      	uxth	r3, r3
 800d146:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d14e:	2b01      	cmp	r3, #1
 800d150:	f040 82ac 	bne.w	800d6ac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	695a      	ldr	r2, [r3, #20]
 800d158:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d15c:	441a      	add	r2, r3
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	69da      	ldr	r2, [r3, #28]
 800d166:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d16a:	441a      	add	r2, r3
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	6a1a      	ldr	r2, [r3, #32]
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	691b      	ldr	r3, [r3, #16]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d30b      	bcc.n	800d194 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	691b      	ldr	r3, [r3, #16]
 800d180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	6a1a      	ldr	r2, [r3, #32]
 800d188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d18c:	1ad2      	subs	r2, r2, r3
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	621a      	str	r2, [r3, #32]
 800d192:	e017      	b.n	800d1c4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	6a1b      	ldr	r3, [r3, #32]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d108      	bne.n	800d1ae <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800d19c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d1a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d1ac:	e00a      	b.n	800d1c4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	6a1b      	ldr	r3, [r3, #32]
 800d1ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	785b      	ldrb	r3, [r3, #1]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d165      	bne.n	800d298 <HAL_PCD_EP_DB_Transmit+0x37e>
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	461a      	mov	r2, r3
 800d1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e0:	4413      	add	r3, r2
 800d1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	00da      	lsls	r2, r3, #3
 800d1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d1f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d202:	801a      	strh	r2, [r3, #0]
 800d204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d208:	2b3e      	cmp	r3, #62	; 0x3e
 800d20a:	d91d      	bls.n	800d248 <HAL_PCD_EP_DB_Transmit+0x32e>
 800d20c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d210:	095b      	lsrs	r3, r3, #5
 800d212:	64bb      	str	r3, [r7, #72]	; 0x48
 800d214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d218:	f003 031f 	and.w	r3, r3, #31
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d102      	bne.n	800d226 <HAL_PCD_EP_DB_Transmit+0x30c>
 800d220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d222:	3b01      	subs	r3, #1
 800d224:	64bb      	str	r3, [r7, #72]	; 0x48
 800d226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d22e:	b29b      	uxth	r3, r3
 800d230:	029b      	lsls	r3, r3, #10
 800d232:	b29b      	uxth	r3, r3
 800d234:	4313      	orrs	r3, r2
 800d236:	b29b      	uxth	r3, r3
 800d238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d23c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d240:	b29a      	uxth	r2, r3
 800d242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d244:	801a      	strh	r2, [r3, #0]
 800d246:	e044      	b.n	800d2d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10a      	bne.n	800d266 <HAL_PCD_EP_DB_Transmit+0x34c>
 800d250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d252:	881b      	ldrh	r3, [r3, #0]
 800d254:	b29b      	uxth	r3, r3
 800d256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d25a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d25e:	b29a      	uxth	r2, r3
 800d260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d262:	801a      	strh	r2, [r3, #0]
 800d264:	e035      	b.n	800d2d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d26a:	085b      	lsrs	r3, r3, #1
 800d26c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d26e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	2b00      	cmp	r3, #0
 800d278:	d002      	beq.n	800d280 <HAL_PCD_EP_DB_Transmit+0x366>
 800d27a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d27c:	3301      	adds	r3, #1
 800d27e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d282:	881b      	ldrh	r3, [r3, #0]
 800d284:	b29a      	uxth	r2, r3
 800d286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d288:	b29b      	uxth	r3, r3
 800d28a:	029b      	lsls	r3, r3, #10
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	4313      	orrs	r3, r2
 800d290:	b29a      	uxth	r2, r3
 800d292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d294:	801a      	strh	r2, [r3, #0]
 800d296:	e01c      	b.n	800d2d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	785b      	ldrb	r3, [r3, #1]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d118      	bne.n	800d2d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	647b      	str	r3, [r7, #68]	; 0x44
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2b4:	4413      	add	r3, r2
 800d2b6:	647b      	str	r3, [r7, #68]	; 0x44
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	00da      	lsls	r2, r3, #3
 800d2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2c0:	4413      	add	r3, r2
 800d2c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d2c6:	643b      	str	r3, [r7, #64]	; 0x40
 800d2c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6818      	ldr	r0, [r3, #0]
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	6959      	ldr	r1, [r3, #20]
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	891a      	ldrh	r2, [r3, #8]
 800d2de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	f007 fee6 	bl	80150b4 <USB_WritePMA>
 800d2e8:	e1e0      	b.n	800d6ac <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	4413      	add	r3, r2
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	6812      	ldr	r2, [r2, #0]
 800d302:	4413      	add	r3, r2
 800d304:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d308:	881b      	ldrh	r3, [r3, #0]
 800d30a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d30e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	699a      	ldr	r2, [r3, #24]
 800d316:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d307      	bcc.n	800d32e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	699a      	ldr	r2, [r3, #24]
 800d322:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d326:	1ad2      	subs	r2, r2, r3
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	619a      	str	r2, [r3, #24]
 800d32c:	e002      	b.n	800d334 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	2200      	movs	r2, #0
 800d332:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	699b      	ldr	r3, [r3, #24]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f040 80c0 	bne.w	800d4be <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	785b      	ldrb	r3, [r3, #1]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d126      	bne.n	800d394 <HAL_PCD_EP_DB_Transmit+0x47a>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d354:	b29b      	uxth	r3, r3
 800d356:	461a      	mov	r2, r3
 800d358:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d35a:	4413      	add	r3, r2
 800d35c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	00da      	lsls	r2, r3, #3
 800d364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d366:	4413      	add	r3, r2
 800d368:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d36c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d36e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	b29b      	uxth	r3, r3
 800d374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d378:	b29a      	uxth	r2, r3
 800d37a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d37c:	801a      	strh	r2, [r3, #0]
 800d37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d380:	881b      	ldrh	r3, [r3, #0]
 800d382:	b29b      	uxth	r3, r3
 800d384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d390:	801a      	strh	r2, [r3, #0]
 800d392:	e01a      	b.n	800d3ca <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	785b      	ldrb	r3, [r3, #1]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d116      	bne.n	800d3ca <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	667b      	str	r3, [r7, #100]	; 0x64
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3b0:	4413      	add	r3, r2
 800d3b2:	667b      	str	r3, [r7, #100]	; 0x64
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	00da      	lsls	r2, r3, #3
 800d3ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3bc:	4413      	add	r3, r2
 800d3be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d3c2:	663b      	str	r3, [r7, #96]	; 0x60
 800d3c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	677b      	str	r3, [r7, #116]	; 0x74
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	785b      	ldrb	r3, [r3, #1]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d12b      	bne.n	800d430 <HAL_PCD_EP_DB_Transmit+0x516>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ec:	4413      	add	r3, r2
 800d3ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	00da      	lsls	r2, r3, #3
 800d3f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d3fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d406:	881b      	ldrh	r3, [r3, #0]
 800d408:	b29b      	uxth	r3, r3
 800d40a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d40e:	b29a      	uxth	r2, r3
 800d410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d414:	801a      	strh	r2, [r3, #0]
 800d416:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d41a:	881b      	ldrh	r3, [r3, #0]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d426:	b29a      	uxth	r2, r3
 800d428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d42c:	801a      	strh	r2, [r3, #0]
 800d42e:	e017      	b.n	800d460 <HAL_PCD_EP_DB_Transmit+0x546>
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	785b      	ldrb	r3, [r3, #1]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d113      	bne.n	800d460 <HAL_PCD_EP_DB_Transmit+0x546>
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d440:	b29b      	uxth	r3, r3
 800d442:	461a      	mov	r2, r3
 800d444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d446:	4413      	add	r3, r2
 800d448:	677b      	str	r3, [r7, #116]	; 0x74
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	00da      	lsls	r2, r3, #3
 800d450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d452:	4413      	add	r3, r2
 800d454:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d458:	673b      	str	r3, [r7, #112]	; 0x70
 800d45a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d45c:	2200      	movs	r2, #0
 800d45e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	4619      	mov	r1, r3
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f011 fce3 	bl	801ee32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d46c:	88fb      	ldrh	r3, [r7, #6]
 800d46e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d472:	2b00      	cmp	r3, #0
 800d474:	f040 811a 	bne.w	800d6ac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	461a      	mov	r2, r3
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	881b      	ldrh	r3, [r3, #0]
 800d488:	b29b      	uxth	r3, r3
 800d48a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d48e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d492:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	461a      	mov	r2, r3
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	441a      	add	r2, r3
 800d4a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800d4a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d4b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	8013      	strh	r3, [r2, #0]
 800d4bc:	e0f6      	b.n	800d6ac <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d4be:	88fb      	ldrh	r3, [r7, #6]
 800d4c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d121      	bne.n	800d50c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	4413      	add	r3, r2
 800d4d6:	881b      	ldrh	r3, [r3, #0]
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	441a      	add	r2, r3
 800d4f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d4f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d508:	b29b      	uxth	r3, r3
 800d50a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d512:	2b01      	cmp	r3, #1
 800d514:	f040 80ca 	bne.w	800d6ac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	695a      	ldr	r2, [r3, #20]
 800d51c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d520:	441a      	add	r2, r3
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	69da      	ldr	r2, [r3, #28]
 800d52a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d52e:	441a      	add	r2, r3
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	6a1a      	ldr	r2, [r3, #32]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d30b      	bcc.n	800d558 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	6a1a      	ldr	r2, [r3, #32]
 800d54c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d550:	1ad2      	subs	r2, r2, r3
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	621a      	str	r2, [r3, #32]
 800d556:	e017      	b.n	800d588 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	6a1b      	ldr	r3, [r3, #32]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d108      	bne.n	800d572 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800d560:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d570:	e00a      	b.n	800d588 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	2200      	movs	r2, #0
 800d57e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	657b      	str	r3, [r7, #84]	; 0x54
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	785b      	ldrb	r3, [r3, #1]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d165      	bne.n	800d662 <HAL_PCD_EP_DB_Transmit+0x748>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5aa:	4413      	add	r3, r2
 800d5ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	00da      	lsls	r2, r3, #3
 800d5b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5b6:	4413      	add	r3, r2
 800d5b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d5bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d5be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5c0:	881b      	ldrh	r3, [r3, #0]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5cc:	801a      	strh	r2, [r3, #0]
 800d5ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5d2:	2b3e      	cmp	r3, #62	; 0x3e
 800d5d4:	d91d      	bls.n	800d612 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800d5d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5da:	095b      	lsrs	r3, r3, #5
 800d5dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5e2:	f003 031f 	and.w	r3, r3, #31
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d102      	bne.n	800d5f0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800d5ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	029b      	lsls	r3, r3, #10
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	4313      	orrs	r3, r2
 800d600:	b29b      	uxth	r3, r3
 800d602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d60e:	801a      	strh	r2, [r3, #0]
 800d610:	e041      	b.n	800d696 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d616:	2b00      	cmp	r3, #0
 800d618:	d10a      	bne.n	800d630 <HAL_PCD_EP_DB_Transmit+0x716>
 800d61a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d61c:	881b      	ldrh	r3, [r3, #0]
 800d61e:	b29b      	uxth	r3, r3
 800d620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d628:	b29a      	uxth	r2, r3
 800d62a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d62c:	801a      	strh	r2, [r3, #0]
 800d62e:	e032      	b.n	800d696 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d634:	085b      	lsrs	r3, r3, #1
 800d636:	66bb      	str	r3, [r7, #104]	; 0x68
 800d638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <HAL_PCD_EP_DB_Transmit+0x730>
 800d644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d646:	3301      	adds	r3, #1
 800d648:	66bb      	str	r3, [r7, #104]	; 0x68
 800d64a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	b29a      	uxth	r2, r3
 800d650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d652:	b29b      	uxth	r3, r3
 800d654:	029b      	lsls	r3, r3, #10
 800d656:	b29b      	uxth	r3, r3
 800d658:	4313      	orrs	r3, r2
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d65e:	801a      	strh	r2, [r3, #0]
 800d660:	e019      	b.n	800d696 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	785b      	ldrb	r3, [r3, #1]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d115      	bne.n	800d696 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d672:	b29b      	uxth	r3, r3
 800d674:	461a      	mov	r2, r3
 800d676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d678:	4413      	add	r3, r2
 800d67a:	657b      	str	r3, [r7, #84]	; 0x54
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	00da      	lsls	r2, r3, #3
 800d682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d684:	4413      	add	r3, r2
 800d686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d68a:	653b      	str	r3, [r7, #80]	; 0x50
 800d68c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d690:	b29a      	uxth	r2, r3
 800d692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d694:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6818      	ldr	r0, [r3, #0]
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	6959      	ldr	r1, [r3, #20]
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	895a      	ldrh	r2, [r3, #10]
 800d6a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	f007 fd04 	bl	80150b4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	4413      	add	r3, r2
 800d6ba:	881b      	ldrh	r3, [r3, #0]
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6c6:	82bb      	strh	r3, [r7, #20]
 800d6c8:	8abb      	ldrh	r3, [r7, #20]
 800d6ca:	f083 0310 	eor.w	r3, r3, #16
 800d6ce:	82bb      	strh	r3, [r7, #20]
 800d6d0:	8abb      	ldrh	r3, [r7, #20]
 800d6d2:	f083 0320 	eor.w	r3, r3, #32
 800d6d6:	82bb      	strh	r3, [r7, #20]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	461a      	mov	r2, r3
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	441a      	add	r2, r3
 800d6e6:	8abb      	ldrh	r3, [r7, #20]
 800d6e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800d6fc:	2300      	movs	r3, #0
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3790      	adds	r7, #144	; 0x90
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800d706:	b480      	push	{r7}
 800d708:	b087      	sub	sp, #28
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	60f8      	str	r0, [r7, #12]
 800d70e:	607b      	str	r3, [r7, #4]
 800d710:	460b      	mov	r3, r1
 800d712:	817b      	strh	r3, [r7, #10]
 800d714:	4613      	mov	r3, r2
 800d716:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800d718:	897b      	ldrh	r3, [r7, #10]
 800d71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d71e:	b29b      	uxth	r3, r3
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00b      	beq.n	800d73c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d724:	897b      	ldrh	r3, [r7, #10]
 800d726:	f003 0207 	and.w	r2, r3, #7
 800d72a:	4613      	mov	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4413      	add	r3, r2
 800d730:	00db      	lsls	r3, r3, #3
 800d732:	3310      	adds	r3, #16
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	4413      	add	r3, r2
 800d738:	617b      	str	r3, [r7, #20]
 800d73a:	e009      	b.n	800d750 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d73c:	897a      	ldrh	r2, [r7, #10]
 800d73e:	4613      	mov	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4413      	add	r3, r2
 800d744:	00db      	lsls	r3, r3, #3
 800d746:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	4413      	add	r3, r2
 800d74e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800d750:	893b      	ldrh	r3, [r7, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d107      	bne.n	800d766 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	2200      	movs	r2, #0
 800d75a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	b29a      	uxth	r2, r3
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	80da      	strh	r2, [r3, #6]
 800d764:	e00b      	b.n	800d77e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	2201      	movs	r2, #1
 800d76a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	b29a      	uxth	r2, r3
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	0c1b      	lsrs	r3, r3, #16
 800d778:	b29a      	uxth	r2, r3
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	371c      	adds	r7, #28
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2201      	movs	r2, #1
 800d79e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	f043 0301 	orr.w	r3, r3, #1
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	f043 0302 	orr.w	r3, r3, #2
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d141      	bne.n	800d872 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d7ee:	4b4b      	ldr	r3, [pc, #300]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d7f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7fa:	d131      	bne.n	800d860 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d7fc:	4b47      	ldr	r3, [pc, #284]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d7fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d802:	4a46      	ldr	r2, [pc, #280]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d808:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d80c:	4b43      	ldr	r3, [pc, #268]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d814:	4a41      	ldr	r2, [pc, #260]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d81a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d81c:	4b40      	ldr	r3, [pc, #256]	; (800d920 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2232      	movs	r2, #50	; 0x32
 800d822:	fb02 f303 	mul.w	r3, r2, r3
 800d826:	4a3f      	ldr	r2, [pc, #252]	; (800d924 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d828:	fba2 2303 	umull	r2, r3, r2, r3
 800d82c:	0c9b      	lsrs	r3, r3, #18
 800d82e:	3301      	adds	r3, #1
 800d830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d832:	e002      	b.n	800d83a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	3b01      	subs	r3, #1
 800d838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d83a:	4b38      	ldr	r3, [pc, #224]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d83c:	695b      	ldr	r3, [r3, #20]
 800d83e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d846:	d102      	bne.n	800d84e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1f2      	bne.n	800d834 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d84e:	4b33      	ldr	r3, [pc, #204]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d850:	695b      	ldr	r3, [r3, #20]
 800d852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d85a:	d158      	bne.n	800d90e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d85c:	2303      	movs	r3, #3
 800d85e:	e057      	b.n	800d910 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d860:	4b2e      	ldr	r3, [pc, #184]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d866:	4a2d      	ldr	r2, [pc, #180]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d86c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d870:	e04d      	b.n	800d90e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d878:	d141      	bne.n	800d8fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d87a:	4b28      	ldr	r3, [pc, #160]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d886:	d131      	bne.n	800d8ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d888:	4b24      	ldr	r3, [pc, #144]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d88a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d88e:	4a23      	ldr	r2, [pc, #140]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d898:	4b20      	ldr	r3, [pc, #128]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d8a0:	4a1e      	ldr	r2, [pc, #120]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d8a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d8a8:	4b1d      	ldr	r3, [pc, #116]	; (800d920 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2232      	movs	r2, #50	; 0x32
 800d8ae:	fb02 f303 	mul.w	r3, r2, r3
 800d8b2:	4a1c      	ldr	r2, [pc, #112]	; (800d924 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d8b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d8b8:	0c9b      	lsrs	r3, r3, #18
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d8be:	e002      	b.n	800d8c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	3b01      	subs	r3, #1
 800d8c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d8c6:	4b15      	ldr	r3, [pc, #84]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8d2:	d102      	bne.n	800d8da <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1f2      	bne.n	800d8c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d8da:	4b10      	ldr	r3, [pc, #64]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8dc:	695b      	ldr	r3, [r3, #20]
 800d8de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8e6:	d112      	bne.n	800d90e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d8e8:	2303      	movs	r3, #3
 800d8ea:	e011      	b.n	800d910 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d8ec:	4b0b      	ldr	r3, [pc, #44]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8f2:	4a0a      	ldr	r2, [pc, #40]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d8f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d8fc:	e007      	b.n	800d90e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d8fe:	4b07      	ldr	r3, [pc, #28]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d906:	4a05      	ldr	r2, [pc, #20]	; (800d91c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d90c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	40007000 	.word	0x40007000
 800d920:	20000008 	.word	0x20000008
 800d924:	431bde83 	.word	0x431bde83

0800d928 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d928:	b480      	push	{r7}
 800d92a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d92c:	4b05      	ldr	r3, [pc, #20]	; (800d944 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	4a04      	ldr	r2, [pc, #16]	; (800d944 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d936:	6093      	str	r3, [r2, #8]
}
 800d938:	bf00      	nop
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	40007000 	.word	0x40007000

0800d948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b088      	sub	sp, #32
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d101      	bne.n	800d95a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d956:	2301      	movs	r3, #1
 800d958:	e2fe      	b.n	800df58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f003 0301 	and.w	r3, r3, #1
 800d962:	2b00      	cmp	r3, #0
 800d964:	d075      	beq.n	800da52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d966:	4b97      	ldr	r3, [pc, #604]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	f003 030c 	and.w	r3, r3, #12
 800d96e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d970:	4b94      	ldr	r3, [pc, #592]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	f003 0303 	and.w	r3, r3, #3
 800d978:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	2b0c      	cmp	r3, #12
 800d97e:	d102      	bne.n	800d986 <HAL_RCC_OscConfig+0x3e>
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2b03      	cmp	r3, #3
 800d984:	d002      	beq.n	800d98c <HAL_RCC_OscConfig+0x44>
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	2b08      	cmp	r3, #8
 800d98a:	d10b      	bne.n	800d9a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d98c:	4b8d      	ldr	r3, [pc, #564]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d05b      	beq.n	800da50 <HAL_RCC_OscConfig+0x108>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d157      	bne.n	800da50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e2d9      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9ac:	d106      	bne.n	800d9bc <HAL_RCC_OscConfig+0x74>
 800d9ae:	4b85      	ldr	r3, [pc, #532]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a84      	ldr	r2, [pc, #528]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9b8:	6013      	str	r3, [r2, #0]
 800d9ba:	e01d      	b.n	800d9f8 <HAL_RCC_OscConfig+0xb0>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d9c4:	d10c      	bne.n	800d9e0 <HAL_RCC_OscConfig+0x98>
 800d9c6:	4b7f      	ldr	r3, [pc, #508]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a7e      	ldr	r2, [pc, #504]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d9d0:	6013      	str	r3, [r2, #0]
 800d9d2:	4b7c      	ldr	r3, [pc, #496]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a7b      	ldr	r2, [pc, #492]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9dc:	6013      	str	r3, [r2, #0]
 800d9de:	e00b      	b.n	800d9f8 <HAL_RCC_OscConfig+0xb0>
 800d9e0:	4b78      	ldr	r3, [pc, #480]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a77      	ldr	r2, [pc, #476]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d9ea:	6013      	str	r3, [r2, #0]
 800d9ec:	4b75      	ldr	r3, [pc, #468]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a74      	ldr	r2, [pc, #464]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800d9f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d9f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d013      	beq.n	800da28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da00:	f7fb fc32 	bl	8009268 <HAL_GetTick>
 800da04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800da06:	e008      	b.n	800da1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800da08:	f7fb fc2e 	bl	8009268 <HAL_GetTick>
 800da0c:	4602      	mov	r2, r0
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	2b64      	cmp	r3, #100	; 0x64
 800da14:	d901      	bls.n	800da1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800da16:	2303      	movs	r3, #3
 800da18:	e29e      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800da1a:	4b6a      	ldr	r3, [pc, #424]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da22:	2b00      	cmp	r3, #0
 800da24:	d0f0      	beq.n	800da08 <HAL_RCC_OscConfig+0xc0>
 800da26:	e014      	b.n	800da52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da28:	f7fb fc1e 	bl	8009268 <HAL_GetTick>
 800da2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800da2e:	e008      	b.n	800da42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800da30:	f7fb fc1a 	bl	8009268 <HAL_GetTick>
 800da34:	4602      	mov	r2, r0
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	2b64      	cmp	r3, #100	; 0x64
 800da3c:	d901      	bls.n	800da42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800da3e:	2303      	movs	r3, #3
 800da40:	e28a      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800da42:	4b60      	ldr	r3, [pc, #384]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1f0      	bne.n	800da30 <HAL_RCC_OscConfig+0xe8>
 800da4e:	e000      	b.n	800da52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f003 0302 	and.w	r3, r3, #2
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d075      	beq.n	800db4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da5e:	4b59      	ldr	r3, [pc, #356]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	f003 030c 	and.w	r3, r3, #12
 800da66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800da68:	4b56      	ldr	r3, [pc, #344]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	f003 0303 	and.w	r3, r3, #3
 800da70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	2b0c      	cmp	r3, #12
 800da76:	d102      	bne.n	800da7e <HAL_RCC_OscConfig+0x136>
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d002      	beq.n	800da84 <HAL_RCC_OscConfig+0x13c>
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	2b04      	cmp	r3, #4
 800da82:	d11f      	bne.n	800dac4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da84:	4b4f      	ldr	r3, [pc, #316]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d005      	beq.n	800da9c <HAL_RCC_OscConfig+0x154>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d101      	bne.n	800da9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	e25d      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da9c:	4b49      	ldr	r3, [pc, #292]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	061b      	lsls	r3, r3, #24
 800daaa:	4946      	ldr	r1, [pc, #280]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800daac:	4313      	orrs	r3, r2
 800daae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800dab0:	4b45      	ldr	r3, [pc, #276]	; (800dbc8 <HAL_RCC_OscConfig+0x280>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fb fa15 	bl	8008ee4 <HAL_InitTick>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d043      	beq.n	800db48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800dac0:	2301      	movs	r3, #1
 800dac2:	e249      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d023      	beq.n	800db14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dacc:	4b3d      	ldr	r3, [pc, #244]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a3c      	ldr	r2, [pc, #240]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800dad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dad8:	f7fb fbc6 	bl	8009268 <HAL_GetTick>
 800dadc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dade:	e008      	b.n	800daf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dae0:	f7fb fbc2 	bl	8009268 <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	2b02      	cmp	r3, #2
 800daec:	d901      	bls.n	800daf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	e232      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800daf2:	4b34      	ldr	r3, [pc, #208]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0f0      	beq.n	800dae0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dafe:	4b31      	ldr	r3, [pc, #196]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	061b      	lsls	r3, r3, #24
 800db0c:	492d      	ldr	r1, [pc, #180]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800db0e:	4313      	orrs	r3, r2
 800db10:	604b      	str	r3, [r1, #4]
 800db12:	e01a      	b.n	800db4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800db14:	4b2b      	ldr	r3, [pc, #172]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a2a      	ldr	r2, [pc, #168]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800db1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db20:	f7fb fba2 	bl	8009268 <HAL_GetTick>
 800db24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800db26:	e008      	b.n	800db3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800db28:	f7fb fb9e 	bl	8009268 <HAL_GetTick>
 800db2c:	4602      	mov	r2, r0
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	2b02      	cmp	r3, #2
 800db34:	d901      	bls.n	800db3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800db36:	2303      	movs	r3, #3
 800db38:	e20e      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800db3a:	4b22      	ldr	r3, [pc, #136]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1f0      	bne.n	800db28 <HAL_RCC_OscConfig+0x1e0>
 800db46:	e000      	b.n	800db4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f003 0308 	and.w	r3, r3, #8
 800db52:	2b00      	cmp	r3, #0
 800db54:	d041      	beq.n	800dbda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	695b      	ldr	r3, [r3, #20]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d01c      	beq.n	800db98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800db5e:	4b19      	ldr	r3, [pc, #100]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800db60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db64:	4a17      	ldr	r2, [pc, #92]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800db66:	f043 0301 	orr.w	r3, r3, #1
 800db6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db6e:	f7fb fb7b 	bl	8009268 <HAL_GetTick>
 800db72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800db74:	e008      	b.n	800db88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800db76:	f7fb fb77 	bl	8009268 <HAL_GetTick>
 800db7a:	4602      	mov	r2, r0
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	2b02      	cmp	r3, #2
 800db82:	d901      	bls.n	800db88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800db84:	2303      	movs	r3, #3
 800db86:	e1e7      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800db88:	4b0e      	ldr	r3, [pc, #56]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800db8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db8e:	f003 0302 	and.w	r3, r3, #2
 800db92:	2b00      	cmp	r3, #0
 800db94:	d0ef      	beq.n	800db76 <HAL_RCC_OscConfig+0x22e>
 800db96:	e020      	b.n	800dbda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800db98:	4b0a      	ldr	r3, [pc, #40]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800db9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db9e:	4a09      	ldr	r2, [pc, #36]	; (800dbc4 <HAL_RCC_OscConfig+0x27c>)
 800dba0:	f023 0301 	bic.w	r3, r3, #1
 800dba4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dba8:	f7fb fb5e 	bl	8009268 <HAL_GetTick>
 800dbac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800dbae:	e00d      	b.n	800dbcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dbb0:	f7fb fb5a 	bl	8009268 <HAL_GetTick>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d906      	bls.n	800dbcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	e1ca      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
 800dbc2:	bf00      	nop
 800dbc4:	40021000 	.word	0x40021000
 800dbc8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800dbcc:	4b8c      	ldr	r3, [pc, #560]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dbce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbd2:	f003 0302 	and.w	r3, r3, #2
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1ea      	bne.n	800dbb0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f003 0304 	and.w	r3, r3, #4
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f000 80a6 	beq.w	800dd34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800dbec:	4b84      	ldr	r3, [pc, #528]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dbee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d101      	bne.n	800dbfc <HAL_RCC_OscConfig+0x2b4>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e000      	b.n	800dbfe <HAL_RCC_OscConfig+0x2b6>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00d      	beq.n	800dc1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc02:	4b7f      	ldr	r3, [pc, #508]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dc04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc06:	4a7e      	ldr	r2, [pc, #504]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dc08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc0c:	6593      	str	r3, [r2, #88]	; 0x58
 800dc0e:	4b7c      	ldr	r3, [pc, #496]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dc1e:	4b79      	ldr	r3, [pc, #484]	; (800de04 <HAL_RCC_OscConfig+0x4bc>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d118      	bne.n	800dc5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dc2a:	4b76      	ldr	r3, [pc, #472]	; (800de04 <HAL_RCC_OscConfig+0x4bc>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a75      	ldr	r2, [pc, #468]	; (800de04 <HAL_RCC_OscConfig+0x4bc>)
 800dc30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dc36:	f7fb fb17 	bl	8009268 <HAL_GetTick>
 800dc3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dc3c:	e008      	b.n	800dc50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc3e:	f7fb fb13 	bl	8009268 <HAL_GetTick>
 800dc42:	4602      	mov	r2, r0
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	2b02      	cmp	r3, #2
 800dc4a:	d901      	bls.n	800dc50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	e183      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dc50:	4b6c      	ldr	r3, [pc, #432]	; (800de04 <HAL_RCC_OscConfig+0x4bc>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d0f0      	beq.n	800dc3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d108      	bne.n	800dc76 <HAL_RCC_OscConfig+0x32e>
 800dc64:	4b66      	ldr	r3, [pc, #408]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dc66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc6a:	4a65      	ldr	r2, [pc, #404]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dc6c:	f043 0301 	orr.w	r3, r3, #1
 800dc70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dc74:	e024      	b.n	800dcc0 <HAL_RCC_OscConfig+0x378>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	2b05      	cmp	r3, #5
 800dc7c:	d110      	bne.n	800dca0 <HAL_RCC_OscConfig+0x358>
 800dc7e:	4b60      	ldr	r3, [pc, #384]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dc80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc84:	4a5e      	ldr	r2, [pc, #376]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dc86:	f043 0304 	orr.w	r3, r3, #4
 800dc8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dc8e:	4b5c      	ldr	r3, [pc, #368]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dc90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc94:	4a5a      	ldr	r2, [pc, #360]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dc96:	f043 0301 	orr.w	r3, r3, #1
 800dc9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dc9e:	e00f      	b.n	800dcc0 <HAL_RCC_OscConfig+0x378>
 800dca0:	4b57      	ldr	r3, [pc, #348]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dca6:	4a56      	ldr	r2, [pc, #344]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dca8:	f023 0301 	bic.w	r3, r3, #1
 800dcac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dcb0:	4b53      	ldr	r3, [pc, #332]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dcb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcb6:	4a52      	ldr	r2, [pc, #328]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dcb8:	f023 0304 	bic.w	r3, r3, #4
 800dcbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d016      	beq.n	800dcf6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcc8:	f7fb face 	bl	8009268 <HAL_GetTick>
 800dccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dcce:	e00a      	b.n	800dce6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dcd0:	f7fb faca 	bl	8009268 <HAL_GetTick>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d901      	bls.n	800dce6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800dce2:	2303      	movs	r3, #3
 800dce4:	e138      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dce6:	4b46      	ldr	r3, [pc, #280]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcec:	f003 0302 	and.w	r3, r3, #2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d0ed      	beq.n	800dcd0 <HAL_RCC_OscConfig+0x388>
 800dcf4:	e015      	b.n	800dd22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcf6:	f7fb fab7 	bl	8009268 <HAL_GetTick>
 800dcfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800dcfc:	e00a      	b.n	800dd14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dcfe:	f7fb fab3 	bl	8009268 <HAL_GetTick>
 800dd02:	4602      	mov	r2, r0
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d901      	bls.n	800dd14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800dd10:	2303      	movs	r3, #3
 800dd12:	e121      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800dd14:	4b3a      	ldr	r3, [pc, #232]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dd16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd1a:	f003 0302 	and.w	r3, r3, #2
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1ed      	bne.n	800dcfe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dd22:	7ffb      	ldrb	r3, [r7, #31]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d105      	bne.n	800dd34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dd28:	4b35      	ldr	r3, [pc, #212]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dd2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd2c:	4a34      	ldr	r2, [pc, #208]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dd2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f003 0320 	and.w	r3, r3, #32
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d03c      	beq.n	800ddba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	699b      	ldr	r3, [r3, #24]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d01c      	beq.n	800dd82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dd48:	4b2d      	ldr	r3, [pc, #180]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dd4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dd4e:	4a2c      	ldr	r2, [pc, #176]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dd50:	f043 0301 	orr.w	r3, r3, #1
 800dd54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd58:	f7fb fa86 	bl	8009268 <HAL_GetTick>
 800dd5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dd5e:	e008      	b.n	800dd72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd60:	f7fb fa82 	bl	8009268 <HAL_GetTick>
 800dd64:	4602      	mov	r2, r0
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	2b02      	cmp	r3, #2
 800dd6c:	d901      	bls.n	800dd72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800dd6e:	2303      	movs	r3, #3
 800dd70:	e0f2      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dd72:	4b23      	ldr	r3, [pc, #140]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dd74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dd78:	f003 0302 	and.w	r3, r3, #2
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d0ef      	beq.n	800dd60 <HAL_RCC_OscConfig+0x418>
 800dd80:	e01b      	b.n	800ddba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dd82:	4b1f      	ldr	r3, [pc, #124]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dd84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dd88:	4a1d      	ldr	r2, [pc, #116]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dd8a:	f023 0301 	bic.w	r3, r3, #1
 800dd8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd92:	f7fb fa69 	bl	8009268 <HAL_GetTick>
 800dd96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dd98:	e008      	b.n	800ddac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd9a:	f7fb fa65 	bl	8009268 <HAL_GetTick>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	d901      	bls.n	800ddac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800dda8:	2303      	movs	r3, #3
 800ddaa:	e0d5      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ddac:	4b14      	ldr	r3, [pc, #80]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800ddae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ddb2:	f003 0302 	and.w	r3, r3, #2
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1ef      	bne.n	800dd9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	69db      	ldr	r3, [r3, #28]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 80c9 	beq.w	800df56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ddc4:	4b0e      	ldr	r3, [pc, #56]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	f003 030c 	and.w	r3, r3, #12
 800ddcc:	2b0c      	cmp	r3, #12
 800ddce:	f000 8083 	beq.w	800ded8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	69db      	ldr	r3, [r3, #28]
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	d15e      	bne.n	800de98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ddda:	4b09      	ldr	r3, [pc, #36]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a08      	ldr	r2, [pc, #32]	; (800de00 <HAL_RCC_OscConfig+0x4b8>)
 800dde0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dde4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dde6:	f7fb fa3f 	bl	8009268 <HAL_GetTick>
 800ddea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ddec:	e00c      	b.n	800de08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ddee:	f7fb fa3b 	bl	8009268 <HAL_GetTick>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d905      	bls.n	800de08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e0ab      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
 800de00:	40021000 	.word	0x40021000
 800de04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800de08:	4b55      	ldr	r3, [pc, #340]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de10:	2b00      	cmp	r3, #0
 800de12:	d1ec      	bne.n	800ddee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800de14:	4b52      	ldr	r3, [pc, #328]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	4b52      	ldr	r3, [pc, #328]	; (800df64 <HAL_RCC_OscConfig+0x61c>)
 800de1a:	4013      	ands	r3, r2
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	6a11      	ldr	r1, [r2, #32]
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800de24:	3a01      	subs	r2, #1
 800de26:	0112      	lsls	r2, r2, #4
 800de28:	4311      	orrs	r1, r2
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800de2e:	0212      	lsls	r2, r2, #8
 800de30:	4311      	orrs	r1, r2
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800de36:	0852      	lsrs	r2, r2, #1
 800de38:	3a01      	subs	r2, #1
 800de3a:	0552      	lsls	r2, r2, #21
 800de3c:	4311      	orrs	r1, r2
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800de42:	0852      	lsrs	r2, r2, #1
 800de44:	3a01      	subs	r2, #1
 800de46:	0652      	lsls	r2, r2, #25
 800de48:	4311      	orrs	r1, r2
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800de4e:	06d2      	lsls	r2, r2, #27
 800de50:	430a      	orrs	r2, r1
 800de52:	4943      	ldr	r1, [pc, #268]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de54:	4313      	orrs	r3, r2
 800de56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800de58:	4b41      	ldr	r3, [pc, #260]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a40      	ldr	r2, [pc, #256]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800de64:	4b3e      	ldr	r3, [pc, #248]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	4a3d      	ldr	r2, [pc, #244]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de70:	f7fb f9fa 	bl	8009268 <HAL_GetTick>
 800de74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800de76:	e008      	b.n	800de8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de78:	f7fb f9f6 	bl	8009268 <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	2b02      	cmp	r3, #2
 800de84:	d901      	bls.n	800de8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800de86:	2303      	movs	r3, #3
 800de88:	e066      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800de8a:	4b35      	ldr	r3, [pc, #212]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de92:	2b00      	cmp	r3, #0
 800de94:	d0f0      	beq.n	800de78 <HAL_RCC_OscConfig+0x530>
 800de96:	e05e      	b.n	800df56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de98:	4b31      	ldr	r3, [pc, #196]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a30      	ldr	r2, [pc, #192]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800de9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dea4:	f7fb f9e0 	bl	8009268 <HAL_GetTick>
 800dea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800deaa:	e008      	b.n	800debe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800deac:	f7fb f9dc 	bl	8009268 <HAL_GetTick>
 800deb0:	4602      	mov	r2, r0
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d901      	bls.n	800debe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800deba:	2303      	movs	r3, #3
 800debc:	e04c      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800debe:	4b28      	ldr	r3, [pc, #160]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1f0      	bne.n	800deac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800deca:	4b25      	ldr	r3, [pc, #148]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800decc:	68da      	ldr	r2, [r3, #12]
 800dece:	4924      	ldr	r1, [pc, #144]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800ded0:	4b25      	ldr	r3, [pc, #148]	; (800df68 <HAL_RCC_OscConfig+0x620>)
 800ded2:	4013      	ands	r3, r2
 800ded4:	60cb      	str	r3, [r1, #12]
 800ded6:	e03e      	b.n	800df56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	69db      	ldr	r3, [r3, #28]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d101      	bne.n	800dee4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e039      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800dee4:	4b1e      	ldr	r3, [pc, #120]	; (800df60 <HAL_RCC_OscConfig+0x618>)
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	f003 0203 	and.w	r2, r3, #3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6a1b      	ldr	r3, [r3, #32]
 800def4:	429a      	cmp	r2, r3
 800def6:	d12c      	bne.n	800df52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df02:	3b01      	subs	r3, #1
 800df04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800df06:	429a      	cmp	r2, r3
 800df08:	d123      	bne.n	800df52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800df16:	429a      	cmp	r2, r3
 800df18:	d11b      	bne.n	800df52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800df26:	429a      	cmp	r2, r3
 800df28:	d113      	bne.n	800df52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df34:	085b      	lsrs	r3, r3, #1
 800df36:	3b01      	subs	r3, #1
 800df38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d109      	bne.n	800df52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df48:	085b      	lsrs	r3, r3, #1
 800df4a:	3b01      	subs	r3, #1
 800df4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800df4e:	429a      	cmp	r2, r3
 800df50:	d001      	beq.n	800df56 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e000      	b.n	800df58 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3720      	adds	r7, #32
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	40021000 	.word	0x40021000
 800df64:	019f800c 	.word	0x019f800c
 800df68:	feeefffc 	.word	0xfeeefffc

0800df6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800df76:	2300      	movs	r3, #0
 800df78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d101      	bne.n	800df84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e11e      	b.n	800e1c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800df84:	4b91      	ldr	r3, [pc, #580]	; (800e1cc <HAL_RCC_ClockConfig+0x260>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f003 030f 	and.w	r3, r3, #15
 800df8c:	683a      	ldr	r2, [r7, #0]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d910      	bls.n	800dfb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df92:	4b8e      	ldr	r3, [pc, #568]	; (800e1cc <HAL_RCC_ClockConfig+0x260>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f023 020f 	bic.w	r2, r3, #15
 800df9a:	498c      	ldr	r1, [pc, #560]	; (800e1cc <HAL_RCC_ClockConfig+0x260>)
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dfa2:	4b8a      	ldr	r3, [pc, #552]	; (800e1cc <HAL_RCC_ClockConfig+0x260>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f003 030f 	and.w	r3, r3, #15
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d001      	beq.n	800dfb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e106      	b.n	800e1c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d073      	beq.n	800e0a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	2b03      	cmp	r3, #3
 800dfc6:	d129      	bne.n	800e01c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dfc8:	4b81      	ldr	r3, [pc, #516]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e0f4      	b.n	800e1c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800dfd8:	f000 f9d0 	bl	800e37c <RCC_GetSysClockFreqFromPLLSource>
 800dfdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	4a7c      	ldr	r2, [pc, #496]	; (800e1d4 <HAL_RCC_ClockConfig+0x268>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d93f      	bls.n	800e066 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dfe6:	4b7a      	ldr	r3, [pc, #488]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d009      	beq.n	800e006 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d033      	beq.n	800e066 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800e002:	2b00      	cmp	r3, #0
 800e004:	d12f      	bne.n	800e066 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e006:	4b72      	ldr	r3, [pc, #456]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e00e:	4a70      	ldr	r2, [pc, #448]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e014:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800e016:	2380      	movs	r3, #128	; 0x80
 800e018:	617b      	str	r3, [r7, #20]
 800e01a:	e024      	b.n	800e066 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	2b02      	cmp	r3, #2
 800e022:	d107      	bne.n	800e034 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e024:	4b6a      	ldr	r3, [pc, #424]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d109      	bne.n	800e044 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e030:	2301      	movs	r3, #1
 800e032:	e0c6      	b.n	800e1c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e034:	4b66      	ldr	r3, [pc, #408]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e040:	2301      	movs	r3, #1
 800e042:	e0be      	b.n	800e1c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800e044:	f000 f8ce 	bl	800e1e4 <HAL_RCC_GetSysClockFreq>
 800e048:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	4a61      	ldr	r2, [pc, #388]	; (800e1d4 <HAL_RCC_ClockConfig+0x268>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d909      	bls.n	800e066 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e052:	4b5f      	ldr	r3, [pc, #380]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e05a:	4a5d      	ldr	r2, [pc, #372]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e060:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800e062:	2380      	movs	r3, #128	; 0x80
 800e064:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e066:	4b5a      	ldr	r3, [pc, #360]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	f023 0203 	bic.w	r2, r3, #3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	4957      	ldr	r1, [pc, #348]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e074:	4313      	orrs	r3, r2
 800e076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e078:	f7fb f8f6 	bl	8009268 <HAL_GetTick>
 800e07c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e07e:	e00a      	b.n	800e096 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e080:	f7fb f8f2 	bl	8009268 <HAL_GetTick>
 800e084:	4602      	mov	r2, r0
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	1ad3      	subs	r3, r2, r3
 800e08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e08e:	4293      	cmp	r3, r2
 800e090:	d901      	bls.n	800e096 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800e092:	2303      	movs	r3, #3
 800e094:	e095      	b.n	800e1c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e096:	4b4e      	ldr	r3, [pc, #312]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	f003 020c 	and.w	r2, r3, #12
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d1eb      	bne.n	800e080 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 0302 	and.w	r3, r3, #2
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d023      	beq.n	800e0fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d005      	beq.n	800e0cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e0c0:	4b43      	ldr	r3, [pc, #268]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	4a42      	ldr	r2, [pc, #264]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e0c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e0ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f003 0308 	and.w	r3, r3, #8
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d007      	beq.n	800e0e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800e0d8:	4b3d      	ldr	r3, [pc, #244]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e0e0:	4a3b      	ldr	r2, [pc, #236]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e0e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e0e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e0e8:	4b39      	ldr	r3, [pc, #228]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	689b      	ldr	r3, [r3, #8]
 800e0f4:	4936      	ldr	r1, [pc, #216]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	608b      	str	r3, [r1, #8]
 800e0fa:	e008      	b.n	800e10e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	2b80      	cmp	r3, #128	; 0x80
 800e100:	d105      	bne.n	800e10e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800e102:	4b33      	ldr	r3, [pc, #204]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	4a32      	ldr	r2, [pc, #200]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e10c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e10e:	4b2f      	ldr	r3, [pc, #188]	; (800e1cc <HAL_RCC_ClockConfig+0x260>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f003 030f 	and.w	r3, r3, #15
 800e116:	683a      	ldr	r2, [r7, #0]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d21d      	bcs.n	800e158 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e11c:	4b2b      	ldr	r3, [pc, #172]	; (800e1cc <HAL_RCC_ClockConfig+0x260>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f023 020f 	bic.w	r2, r3, #15
 800e124:	4929      	ldr	r1, [pc, #164]	; (800e1cc <HAL_RCC_ClockConfig+0x260>)
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	4313      	orrs	r3, r2
 800e12a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e12c:	f7fb f89c 	bl	8009268 <HAL_GetTick>
 800e130:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e132:	e00a      	b.n	800e14a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e134:	f7fb f898 	bl	8009268 <HAL_GetTick>
 800e138:	4602      	mov	r2, r0
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e142:	4293      	cmp	r3, r2
 800e144:	d901      	bls.n	800e14a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800e146:	2303      	movs	r3, #3
 800e148:	e03b      	b.n	800e1c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e14a:	4b20      	ldr	r3, [pc, #128]	; (800e1cc <HAL_RCC_ClockConfig+0x260>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f003 030f 	and.w	r3, r3, #15
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	429a      	cmp	r2, r3
 800e156:	d1ed      	bne.n	800e134 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f003 0304 	and.w	r3, r3, #4
 800e160:	2b00      	cmp	r3, #0
 800e162:	d008      	beq.n	800e176 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e164:	4b1a      	ldr	r3, [pc, #104]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	4917      	ldr	r1, [pc, #92]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e172:	4313      	orrs	r3, r2
 800e174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f003 0308 	and.w	r3, r3, #8
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d009      	beq.n	800e196 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e182:	4b13      	ldr	r3, [pc, #76]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	00db      	lsls	r3, r3, #3
 800e190:	490f      	ldr	r1, [pc, #60]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e192:	4313      	orrs	r3, r2
 800e194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e196:	f000 f825 	bl	800e1e4 <HAL_RCC_GetSysClockFreq>
 800e19a:	4602      	mov	r2, r0
 800e19c:	4b0c      	ldr	r3, [pc, #48]	; (800e1d0 <HAL_RCC_ClockConfig+0x264>)
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	091b      	lsrs	r3, r3, #4
 800e1a2:	f003 030f 	and.w	r3, r3, #15
 800e1a6:	490c      	ldr	r1, [pc, #48]	; (800e1d8 <HAL_RCC_ClockConfig+0x26c>)
 800e1a8:	5ccb      	ldrb	r3, [r1, r3]
 800e1aa:	f003 031f 	and.w	r3, r3, #31
 800e1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e1b2:	4a0a      	ldr	r2, [pc, #40]	; (800e1dc <HAL_RCC_ClockConfig+0x270>)
 800e1b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e1b6:	4b0a      	ldr	r3, [pc, #40]	; (800e1e0 <HAL_RCC_ClockConfig+0x274>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fa fe92 	bl	8008ee4 <HAL_InitTick>
 800e1c0:	4603      	mov	r3, r0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3718      	adds	r7, #24
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	40022000 	.word	0x40022000
 800e1d0:	40021000 	.word	0x40021000
 800e1d4:	04c4b400 	.word	0x04c4b400
 800e1d8:	08020cd0 	.word	0x08020cd0
 800e1dc:	20000008 	.word	0x20000008
 800e1e0:	2000000c 	.word	0x2000000c

0800e1e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b087      	sub	sp, #28
 800e1e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e1ea:	4b2c      	ldr	r3, [pc, #176]	; (800e29c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	f003 030c 	and.w	r3, r3, #12
 800e1f2:	2b04      	cmp	r3, #4
 800e1f4:	d102      	bne.n	800e1fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e1f6:	4b2a      	ldr	r3, [pc, #168]	; (800e2a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e1f8:	613b      	str	r3, [r7, #16]
 800e1fa:	e047      	b.n	800e28c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e1fc:	4b27      	ldr	r3, [pc, #156]	; (800e29c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	f003 030c 	and.w	r3, r3, #12
 800e204:	2b08      	cmp	r3, #8
 800e206:	d102      	bne.n	800e20e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e208:	4b26      	ldr	r3, [pc, #152]	; (800e2a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800e20a:	613b      	str	r3, [r7, #16]
 800e20c:	e03e      	b.n	800e28c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800e20e:	4b23      	ldr	r3, [pc, #140]	; (800e29c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	f003 030c 	and.w	r3, r3, #12
 800e216:	2b0c      	cmp	r3, #12
 800e218:	d136      	bne.n	800e288 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e21a:	4b20      	ldr	r3, [pc, #128]	; (800e29c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	f003 0303 	and.w	r3, r3, #3
 800e222:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e224:	4b1d      	ldr	r3, [pc, #116]	; (800e29c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	091b      	lsrs	r3, r3, #4
 800e22a:	f003 030f 	and.w	r3, r3, #15
 800e22e:	3301      	adds	r3, #1
 800e230:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2b03      	cmp	r3, #3
 800e236:	d10c      	bne.n	800e252 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e238:	4a1a      	ldr	r2, [pc, #104]	; (800e2a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e240:	4a16      	ldr	r2, [pc, #88]	; (800e29c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e242:	68d2      	ldr	r2, [r2, #12]
 800e244:	0a12      	lsrs	r2, r2, #8
 800e246:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e24a:	fb02 f303 	mul.w	r3, r2, r3
 800e24e:	617b      	str	r3, [r7, #20]
      break;
 800e250:	e00c      	b.n	800e26c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e252:	4a13      	ldr	r2, [pc, #76]	; (800e2a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	fbb2 f3f3 	udiv	r3, r2, r3
 800e25a:	4a10      	ldr	r2, [pc, #64]	; (800e29c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e25c:	68d2      	ldr	r2, [r2, #12]
 800e25e:	0a12      	lsrs	r2, r2, #8
 800e260:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e264:	fb02 f303 	mul.w	r3, r2, r3
 800e268:	617b      	str	r3, [r7, #20]
      break;
 800e26a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e26c:	4b0b      	ldr	r3, [pc, #44]	; (800e29c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	0e5b      	lsrs	r3, r3, #25
 800e272:	f003 0303 	and.w	r3, r3, #3
 800e276:	3301      	adds	r3, #1
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800e27c:	697a      	ldr	r2, [r7, #20]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	fbb2 f3f3 	udiv	r3, r2, r3
 800e284:	613b      	str	r3, [r7, #16]
 800e286:	e001      	b.n	800e28c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800e288:	2300      	movs	r3, #0
 800e28a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e28c:	693b      	ldr	r3, [r7, #16]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	371c      	adds	r7, #28
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop
 800e29c:	40021000 	.word	0x40021000
 800e2a0:	00f42400 	.word	0x00f42400
 800e2a4:	007a1200 	.word	0x007a1200

0800e2a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e2ac:	4b03      	ldr	r3, [pc, #12]	; (800e2bc <HAL_RCC_GetHCLKFreq+0x14>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	20000008 	.word	0x20000008

0800e2c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e2c4:	f7ff fff0 	bl	800e2a8 <HAL_RCC_GetHCLKFreq>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	4b06      	ldr	r3, [pc, #24]	; (800e2e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	0a1b      	lsrs	r3, r3, #8
 800e2d0:	f003 0307 	and.w	r3, r3, #7
 800e2d4:	4904      	ldr	r1, [pc, #16]	; (800e2e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e2d6:	5ccb      	ldrb	r3, [r1, r3]
 800e2d8:	f003 031f 	and.w	r3, r3, #31
 800e2dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	40021000 	.word	0x40021000
 800e2e8:	08020ce0 	.word	0x08020ce0

0800e2ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e2f0:	f7ff ffda 	bl	800e2a8 <HAL_RCC_GetHCLKFreq>
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	4b06      	ldr	r3, [pc, #24]	; (800e310 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	0adb      	lsrs	r3, r3, #11
 800e2fc:	f003 0307 	and.w	r3, r3, #7
 800e300:	4904      	ldr	r1, [pc, #16]	; (800e314 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e302:	5ccb      	ldrb	r3, [r1, r3]
 800e304:	f003 031f 	and.w	r3, r3, #31
 800e308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	40021000 	.word	0x40021000
 800e314:	08020ce0 	.word	0x08020ce0

0800e318 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	220f      	movs	r2, #15
 800e326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800e328:	4b12      	ldr	r3, [pc, #72]	; (800e374 <HAL_RCC_GetClockConfig+0x5c>)
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	f003 0203 	and.w	r2, r3, #3
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800e334:	4b0f      	ldr	r3, [pc, #60]	; (800e374 <HAL_RCC_GetClockConfig+0x5c>)
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800e340:	4b0c      	ldr	r3, [pc, #48]	; (800e374 <HAL_RCC_GetClockConfig+0x5c>)
 800e342:	689b      	ldr	r3, [r3, #8]
 800e344:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800e34c:	4b09      	ldr	r3, [pc, #36]	; (800e374 <HAL_RCC_GetClockConfig+0x5c>)
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	08db      	lsrs	r3, r3, #3
 800e352:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800e35a:	4b07      	ldr	r3, [pc, #28]	; (800e378 <HAL_RCC_GetClockConfig+0x60>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f003 020f 	and.w	r2, r3, #15
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	601a      	str	r2, [r3, #0]
}
 800e366:	bf00      	nop
 800e368:	370c      	adds	r7, #12
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	40021000 	.word	0x40021000
 800e378:	40022000 	.word	0x40022000

0800e37c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b087      	sub	sp, #28
 800e380:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e382:	4b1e      	ldr	r3, [pc, #120]	; (800e3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	f003 0303 	and.w	r3, r3, #3
 800e38a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e38c:	4b1b      	ldr	r3, [pc, #108]	; (800e3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	091b      	lsrs	r3, r3, #4
 800e392:	f003 030f 	and.w	r3, r3, #15
 800e396:	3301      	adds	r3, #1
 800e398:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	d10c      	bne.n	800e3ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e3a0:	4a17      	ldr	r2, [pc, #92]	; (800e400 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3a8:	4a14      	ldr	r2, [pc, #80]	; (800e3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e3aa:	68d2      	ldr	r2, [r2, #12]
 800e3ac:	0a12      	lsrs	r2, r2, #8
 800e3ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e3b2:	fb02 f303 	mul.w	r3, r2, r3
 800e3b6:	617b      	str	r3, [r7, #20]
    break;
 800e3b8:	e00c      	b.n	800e3d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e3ba:	4a12      	ldr	r2, [pc, #72]	; (800e404 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3c2:	4a0e      	ldr	r2, [pc, #56]	; (800e3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e3c4:	68d2      	ldr	r2, [r2, #12]
 800e3c6:	0a12      	lsrs	r2, r2, #8
 800e3c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e3cc:	fb02 f303 	mul.w	r3, r2, r3
 800e3d0:	617b      	str	r3, [r7, #20]
    break;
 800e3d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e3d4:	4b09      	ldr	r3, [pc, #36]	; (800e3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	0e5b      	lsrs	r3, r3, #25
 800e3da:	f003 0303 	and.w	r3, r3, #3
 800e3de:	3301      	adds	r3, #1
 800e3e0:	005b      	lsls	r3, r3, #1
 800e3e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e3ee:	687b      	ldr	r3, [r7, #4]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	371c      	adds	r7, #28
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	40021000 	.word	0x40021000
 800e400:	007a1200 	.word	0x007a1200
 800e404:	00f42400 	.word	0x00f42400

0800e408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e410:	2300      	movs	r3, #0
 800e412:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e414:	2300      	movs	r3, #0
 800e416:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e420:	2b00      	cmp	r3, #0
 800e422:	f000 8098 	beq.w	800e556 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e426:	2300      	movs	r3, #0
 800e428:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e42a:	4b43      	ldr	r3, [pc, #268]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e42e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10d      	bne.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e436:	4b40      	ldr	r3, [pc, #256]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e43a:	4a3f      	ldr	r2, [pc, #252]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e440:	6593      	str	r3, [r2, #88]	; 0x58
 800e442:	4b3d      	ldr	r3, [pc, #244]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e44a:	60bb      	str	r3, [r7, #8]
 800e44c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e44e:	2301      	movs	r3, #1
 800e450:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e452:	4b3a      	ldr	r3, [pc, #232]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4a39      	ldr	r2, [pc, #228]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e45c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e45e:	f7fa ff03 	bl	8009268 <HAL_GetTick>
 800e462:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e464:	e009      	b.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e466:	f7fa feff 	bl	8009268 <HAL_GetTick>
 800e46a:	4602      	mov	r2, r0
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	2b02      	cmp	r3, #2
 800e472:	d902      	bls.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e474:	2303      	movs	r3, #3
 800e476:	74fb      	strb	r3, [r7, #19]
        break;
 800e478:	e005      	b.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e47a:	4b30      	ldr	r3, [pc, #192]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e482:	2b00      	cmp	r3, #0
 800e484:	d0ef      	beq.n	800e466 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e486:	7cfb      	ldrb	r3, [r7, #19]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d159      	bne.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e48c:	4b2a      	ldr	r3, [pc, #168]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e496:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d01e      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4a2:	697a      	ldr	r2, [r7, #20]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d019      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e4a8:	4b23      	ldr	r3, [pc, #140]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e4b4:	4b20      	ldr	r3, [pc, #128]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ba:	4a1f      	ldr	r2, [pc, #124]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e4c4:	4b1c      	ldr	r3, [pc, #112]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ca:	4a1b      	ldr	r2, [pc, #108]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e4d4:	4a18      	ldr	r2, [pc, #96]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	f003 0301 	and.w	r3, r3, #1
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d016      	beq.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4e6:	f7fa febf 	bl	8009268 <HAL_GetTick>
 800e4ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e4ec:	e00b      	b.n	800e506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e4ee:	f7fa febb 	bl	8009268 <HAL_GetTick>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	1ad3      	subs	r3, r2, r3
 800e4f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d902      	bls.n	800e506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e500:	2303      	movs	r3, #3
 800e502:	74fb      	strb	r3, [r7, #19]
            break;
 800e504:	e006      	b.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e506:	4b0c      	ldr	r3, [pc, #48]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e50c:	f003 0302 	and.w	r3, r3, #2
 800e510:	2b00      	cmp	r3, #0
 800e512:	d0ec      	beq.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e514:	7cfb      	ldrb	r3, [r7, #19]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d10b      	bne.n	800e532 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e51a:	4b07      	ldr	r3, [pc, #28]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e528:	4903      	ldr	r1, [pc, #12]	; (800e538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e52a:	4313      	orrs	r3, r2
 800e52c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e530:	e008      	b.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e532:	7cfb      	ldrb	r3, [r7, #19]
 800e534:	74bb      	strb	r3, [r7, #18]
 800e536:	e005      	b.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e538:	40021000 	.word	0x40021000
 800e53c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e540:	7cfb      	ldrb	r3, [r7, #19]
 800e542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e544:	7c7b      	ldrb	r3, [r7, #17]
 800e546:	2b01      	cmp	r3, #1
 800e548:	d105      	bne.n	800e556 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e54a:	4ba7      	ldr	r3, [pc, #668]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e54e:	4aa6      	ldr	r2, [pc, #664]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e554:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f003 0301 	and.w	r3, r3, #1
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00a      	beq.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e562:	4ba1      	ldr	r3, [pc, #644]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e568:	f023 0203 	bic.w	r2, r3, #3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	499d      	ldr	r1, [pc, #628]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e572:	4313      	orrs	r3, r2
 800e574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f003 0302 	and.w	r3, r3, #2
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00a      	beq.n	800e59a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e584:	4b98      	ldr	r3, [pc, #608]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e58a:	f023 020c 	bic.w	r2, r3, #12
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	4995      	ldr	r1, [pc, #596]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e594:	4313      	orrs	r3, r2
 800e596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f003 0304 	and.w	r3, r3, #4
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00a      	beq.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e5a6:	4b90      	ldr	r3, [pc, #576]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	498c      	ldr	r1, [pc, #560]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 0308 	and.w	r3, r3, #8
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00a      	beq.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e5c8:	4b87      	ldr	r3, [pc, #540]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	4984      	ldr	r1, [pc, #528]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f003 0310 	and.w	r3, r3, #16
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00a      	beq.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e5ea:	4b7f      	ldr	r3, [pc, #508]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	695b      	ldr	r3, [r3, #20]
 800e5f8:	497b      	ldr	r1, [pc, #492]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 0320 	and.w	r3, r3, #32
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d00a      	beq.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e60c:	4b76      	ldr	r3, [pc, #472]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	699b      	ldr	r3, [r3, #24]
 800e61a:	4973      	ldr	r1, [pc, #460]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e61c:	4313      	orrs	r3, r2
 800e61e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00a      	beq.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e62e:	4b6e      	ldr	r3, [pc, #440]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e634:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	69db      	ldr	r3, [r3, #28]
 800e63c:	496a      	ldr	r1, [pc, #424]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e63e:	4313      	orrs	r3, r2
 800e640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00a      	beq.n	800e666 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e650:	4b65      	ldr	r3, [pc, #404]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e656:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a1b      	ldr	r3, [r3, #32]
 800e65e:	4962      	ldr	r1, [pc, #392]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e660:	4313      	orrs	r3, r2
 800e662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00a      	beq.n	800e688 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e672:	4b5d      	ldr	r3, [pc, #372]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e680:	4959      	ldr	r1, [pc, #356]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e682:	4313      	orrs	r3, r2
 800e684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00a      	beq.n	800e6aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e694:	4b54      	ldr	r3, [pc, #336]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e69a:	f023 0203 	bic.w	r2, r3, #3
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a2:	4951      	ldr	r1, [pc, #324]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00a      	beq.n	800e6cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e6b6:	4b4c      	ldr	r3, [pc, #304]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c4:	4948      	ldr	r1, [pc, #288]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d015      	beq.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e6d8:	4b43      	ldr	r3, [pc, #268]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e6:	4940      	ldr	r1, [pc, #256]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6f6:	d105      	bne.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e6f8:	4b3b      	ldr	r3, [pc, #236]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	4a3a      	ldr	r2, [pc, #232]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e702:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d015      	beq.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e710:	4b35      	ldr	r3, [pc, #212]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e71e:	4932      	ldr	r1, [pc, #200]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e720:	4313      	orrs	r3, r2
 800e722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e72a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e72e:	d105      	bne.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e730:	4b2d      	ldr	r3, [pc, #180]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	4a2c      	ldr	r2, [pc, #176]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e73a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d015      	beq.n	800e774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e748:	4b27      	ldr	r3, [pc, #156]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e74e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e756:	4924      	ldr	r1, [pc, #144]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e758:	4313      	orrs	r3, r2
 800e75a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e762:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e766:	d105      	bne.n	800e774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e768:	4b1f      	ldr	r3, [pc, #124]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	4a1e      	ldr	r2, [pc, #120]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e76e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e772:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d015      	beq.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e780:	4b19      	ldr	r3, [pc, #100]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e78e:	4916      	ldr	r1, [pc, #88]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e790:	4313      	orrs	r3, r2
 800e792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e79a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e79e:	d105      	bne.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e7a0:	4b11      	ldr	r3, [pc, #68]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	4a10      	ldr	r2, [pc, #64]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d019      	beq.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e7b8:	4b0b      	ldr	r3, [pc, #44]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c6:	4908      	ldr	r1, [pc, #32]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7d6:	d109      	bne.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e7d8:	4b03      	ldr	r3, [pc, #12]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	4a02      	ldr	r2, [pc, #8]	; (800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e7de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7e2:	60d3      	str	r3, [r2, #12]
 800e7e4:	e002      	b.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e7e6:	bf00      	nop
 800e7e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d015      	beq.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e7f8:	4b29      	ldr	r3, [pc, #164]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e806:	4926      	ldr	r1, [pc, #152]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e808:	4313      	orrs	r3, r2
 800e80a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e816:	d105      	bne.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e818:	4b21      	ldr	r3, [pc, #132]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	4a20      	ldr	r2, [pc, #128]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e81e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e822:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d015      	beq.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e830:	4b1b      	ldr	r3, [pc, #108]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e836:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e83e:	4918      	ldr	r1, [pc, #96]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e840:	4313      	orrs	r3, r2
 800e842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e84a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e84e:	d105      	bne.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e850:	4b13      	ldr	r3, [pc, #76]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	4a12      	ldr	r2, [pc, #72]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e85a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e864:	2b00      	cmp	r3, #0
 800e866:	d015      	beq.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e868:	4b0d      	ldr	r3, [pc, #52]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e86a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e86e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e876:	490a      	ldr	r1, [pc, #40]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e878:	4313      	orrs	r3, r2
 800e87a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e886:	d105      	bne.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e888:	4b05      	ldr	r3, [pc, #20]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	4a04      	ldr	r2, [pc, #16]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e88e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e892:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e894:	7cbb      	ldrb	r3, [r7, #18]
}
 800e896:	4618      	mov	r0, r3
 800e898:	3718      	adds	r7, #24
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	40021000 	.word	0x40021000

0800e8a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d101      	bne.n	800e8b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e049      	b.n	800e94a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d106      	bne.n	800e8d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7fa f8aa 	bl	8008a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2202      	movs	r2, #2
 800e8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	4610      	mov	r0, r2
 800e8e4:	f000 fdc4 	bl	800f470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2201      	movs	r2, #1
 800e92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2201      	movs	r2, #1
 800e934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2201      	movs	r2, #1
 800e93c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2201      	movs	r2, #1
 800e944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3708      	adds	r7, #8
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
	...

0800e954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e954:	b480      	push	{r7}
 800e956:	b085      	sub	sp, #20
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e962:	b2db      	uxtb	r3, r3
 800e964:	2b01      	cmp	r3, #1
 800e966:	d001      	beq.n	800e96c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e968:	2301      	movs	r3, #1
 800e96a:	e054      	b.n	800ea16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2202      	movs	r2, #2
 800e970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	68da      	ldr	r2, [r3, #12]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f042 0201 	orr.w	r2, r2, #1
 800e982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a26      	ldr	r2, [pc, #152]	; (800ea24 <HAL_TIM_Base_Start_IT+0xd0>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d022      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x80>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e996:	d01d      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x80>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a22      	ldr	r2, [pc, #136]	; (800ea28 <HAL_TIM_Base_Start_IT+0xd4>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d018      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x80>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a21      	ldr	r2, [pc, #132]	; (800ea2c <HAL_TIM_Base_Start_IT+0xd8>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d013      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x80>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a1f      	ldr	r2, [pc, #124]	; (800ea30 <HAL_TIM_Base_Start_IT+0xdc>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d00e      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x80>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a1e      	ldr	r2, [pc, #120]	; (800ea34 <HAL_TIM_Base_Start_IT+0xe0>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d009      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x80>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4a1c      	ldr	r2, [pc, #112]	; (800ea38 <HAL_TIM_Base_Start_IT+0xe4>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d004      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x80>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a1b      	ldr	r2, [pc, #108]	; (800ea3c <HAL_TIM_Base_Start_IT+0xe8>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d115      	bne.n	800ea00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	689a      	ldr	r2, [r3, #8]
 800e9da:	4b19      	ldr	r3, [pc, #100]	; (800ea40 <HAL_TIM_Base_Start_IT+0xec>)
 800e9dc:	4013      	ands	r3, r2
 800e9de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2b06      	cmp	r3, #6
 800e9e4:	d015      	beq.n	800ea12 <HAL_TIM_Base_Start_IT+0xbe>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9ec:	d011      	beq.n	800ea12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f042 0201 	orr.w	r2, r2, #1
 800e9fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9fe:	e008      	b.n	800ea12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f042 0201 	orr.w	r2, r2, #1
 800ea0e:	601a      	str	r2, [r3, #0]
 800ea10:	e000      	b.n	800ea14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3714      	adds	r7, #20
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	40012c00 	.word	0x40012c00
 800ea28:	40000400 	.word	0x40000400
 800ea2c:	40000800 	.word	0x40000800
 800ea30:	40000c00 	.word	0x40000c00
 800ea34:	40013400 	.word	0x40013400
 800ea38:	40014000 	.word	0x40014000
 800ea3c:	40015000 	.word	0x40015000
 800ea40:	00010007 	.word	0x00010007

0800ea44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d101      	bne.n	800ea56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea52:	2301      	movs	r3, #1
 800ea54:	e049      	b.n	800eaea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d106      	bne.n	800ea70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f841 	bl	800eaf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2202      	movs	r2, #2
 800ea74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	3304      	adds	r3, #4
 800ea80:	4619      	mov	r1, r3
 800ea82:	4610      	mov	r0, r2
 800ea84:	f000 fcf4 	bl	800f470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2201      	movs	r2, #1
 800ea94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800eaf2:	b480      	push	{r7}
 800eaf4:	b083      	sub	sp, #12
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800eafa:	bf00      	nop
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
	...

0800eb08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d109      	bne.n	800eb2c <HAL_TIM_PWM_Start+0x24>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	bf14      	ite	ne
 800eb24:	2301      	movne	r3, #1
 800eb26:	2300      	moveq	r3, #0
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	e03c      	b.n	800eba6 <HAL_TIM_PWM_Start+0x9e>
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2b04      	cmp	r3, #4
 800eb30:	d109      	bne.n	800eb46 <HAL_TIM_PWM_Start+0x3e>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	bf14      	ite	ne
 800eb3e:	2301      	movne	r3, #1
 800eb40:	2300      	moveq	r3, #0
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	e02f      	b.n	800eba6 <HAL_TIM_PWM_Start+0x9e>
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	2b08      	cmp	r3, #8
 800eb4a:	d109      	bne.n	800eb60 <HAL_TIM_PWM_Start+0x58>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	bf14      	ite	ne
 800eb58:	2301      	movne	r3, #1
 800eb5a:	2300      	moveq	r3, #0
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	e022      	b.n	800eba6 <HAL_TIM_PWM_Start+0x9e>
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b0c      	cmp	r3, #12
 800eb64:	d109      	bne.n	800eb7a <HAL_TIM_PWM_Start+0x72>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	bf14      	ite	ne
 800eb72:	2301      	movne	r3, #1
 800eb74:	2300      	moveq	r3, #0
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	e015      	b.n	800eba6 <HAL_TIM_PWM_Start+0x9e>
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2b10      	cmp	r3, #16
 800eb7e:	d109      	bne.n	800eb94 <HAL_TIM_PWM_Start+0x8c>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	bf14      	ite	ne
 800eb8c:	2301      	movne	r3, #1
 800eb8e:	2300      	moveq	r3, #0
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	e008      	b.n	800eba6 <HAL_TIM_PWM_Start+0x9e>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	bf14      	ite	ne
 800eba0:	2301      	movne	r3, #1
 800eba2:	2300      	moveq	r3, #0
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d001      	beq.n	800ebae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	e0a6      	b.n	800ecfc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d104      	bne.n	800ebbe <HAL_TIM_PWM_Start+0xb6>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2202      	movs	r2, #2
 800ebb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebbc:	e023      	b.n	800ec06 <HAL_TIM_PWM_Start+0xfe>
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	2b04      	cmp	r3, #4
 800ebc2:	d104      	bne.n	800ebce <HAL_TIM_PWM_Start+0xc6>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2202      	movs	r2, #2
 800ebc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebcc:	e01b      	b.n	800ec06 <HAL_TIM_PWM_Start+0xfe>
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	2b08      	cmp	r3, #8
 800ebd2:	d104      	bne.n	800ebde <HAL_TIM_PWM_Start+0xd6>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebdc:	e013      	b.n	800ec06 <HAL_TIM_PWM_Start+0xfe>
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b0c      	cmp	r3, #12
 800ebe2:	d104      	bne.n	800ebee <HAL_TIM_PWM_Start+0xe6>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2202      	movs	r2, #2
 800ebe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ebec:	e00b      	b.n	800ec06 <HAL_TIM_PWM_Start+0xfe>
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	2b10      	cmp	r3, #16
 800ebf2:	d104      	bne.n	800ebfe <HAL_TIM_PWM_Start+0xf6>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2202      	movs	r2, #2
 800ebf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebfc:	e003      	b.n	800ec06 <HAL_TIM_PWM_Start+0xfe>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2202      	movs	r2, #2
 800ec02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	6839      	ldr	r1, [r7, #0]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f001 f8a8 	bl	800fd64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a3a      	ldr	r2, [pc, #232]	; (800ed04 <HAL_TIM_PWM_Start+0x1fc>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d018      	beq.n	800ec50 <HAL_TIM_PWM_Start+0x148>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4a39      	ldr	r2, [pc, #228]	; (800ed08 <HAL_TIM_PWM_Start+0x200>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d013      	beq.n	800ec50 <HAL_TIM_PWM_Start+0x148>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a37      	ldr	r2, [pc, #220]	; (800ed0c <HAL_TIM_PWM_Start+0x204>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d00e      	beq.n	800ec50 <HAL_TIM_PWM_Start+0x148>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a36      	ldr	r2, [pc, #216]	; (800ed10 <HAL_TIM_PWM_Start+0x208>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d009      	beq.n	800ec50 <HAL_TIM_PWM_Start+0x148>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a34      	ldr	r2, [pc, #208]	; (800ed14 <HAL_TIM_PWM_Start+0x20c>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d004      	beq.n	800ec50 <HAL_TIM_PWM_Start+0x148>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a33      	ldr	r2, [pc, #204]	; (800ed18 <HAL_TIM_PWM_Start+0x210>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d101      	bne.n	800ec54 <HAL_TIM_PWM_Start+0x14c>
 800ec50:	2301      	movs	r3, #1
 800ec52:	e000      	b.n	800ec56 <HAL_TIM_PWM_Start+0x14e>
 800ec54:	2300      	movs	r3, #0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d007      	beq.n	800ec6a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4a25      	ldr	r2, [pc, #148]	; (800ed04 <HAL_TIM_PWM_Start+0x1fc>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d022      	beq.n	800ecba <HAL_TIM_PWM_Start+0x1b2>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec7c:	d01d      	beq.n	800ecba <HAL_TIM_PWM_Start+0x1b2>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	4a26      	ldr	r2, [pc, #152]	; (800ed1c <HAL_TIM_PWM_Start+0x214>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d018      	beq.n	800ecba <HAL_TIM_PWM_Start+0x1b2>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4a24      	ldr	r2, [pc, #144]	; (800ed20 <HAL_TIM_PWM_Start+0x218>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d013      	beq.n	800ecba <HAL_TIM_PWM_Start+0x1b2>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a23      	ldr	r2, [pc, #140]	; (800ed24 <HAL_TIM_PWM_Start+0x21c>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d00e      	beq.n	800ecba <HAL_TIM_PWM_Start+0x1b2>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a19      	ldr	r2, [pc, #100]	; (800ed08 <HAL_TIM_PWM_Start+0x200>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d009      	beq.n	800ecba <HAL_TIM_PWM_Start+0x1b2>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a18      	ldr	r2, [pc, #96]	; (800ed0c <HAL_TIM_PWM_Start+0x204>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d004      	beq.n	800ecba <HAL_TIM_PWM_Start+0x1b2>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a18      	ldr	r2, [pc, #96]	; (800ed18 <HAL_TIM_PWM_Start+0x210>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d115      	bne.n	800ece6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	689a      	ldr	r2, [r3, #8]
 800ecc0:	4b19      	ldr	r3, [pc, #100]	; (800ed28 <HAL_TIM_PWM_Start+0x220>)
 800ecc2:	4013      	ands	r3, r2
 800ecc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2b06      	cmp	r3, #6
 800ecca:	d015      	beq.n	800ecf8 <HAL_TIM_PWM_Start+0x1f0>
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecd2:	d011      	beq.n	800ecf8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f042 0201 	orr.w	r2, r2, #1
 800ece2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ece4:	e008      	b.n	800ecf8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f042 0201 	orr.w	r2, r2, #1
 800ecf4:	601a      	str	r2, [r3, #0]
 800ecf6:	e000      	b.n	800ecfa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3710      	adds	r7, #16
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	40012c00 	.word	0x40012c00
 800ed08:	40013400 	.word	0x40013400
 800ed0c:	40014000 	.word	0x40014000
 800ed10:	40014400 	.word	0x40014400
 800ed14:	40014800 	.word	0x40014800
 800ed18:	40015000 	.word	0x40015000
 800ed1c:	40000400 	.word	0x40000400
 800ed20:	40000800 	.word	0x40000800
 800ed24:	40000c00 	.word	0x40000c00
 800ed28:	00010007 	.word	0x00010007

0800ed2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	691b      	ldr	r3, [r3, #16]
 800ed42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	f003 0302 	and.w	r3, r3, #2
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d020      	beq.n	800ed90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f003 0302 	and.w	r3, r3, #2
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d01b      	beq.n	800ed90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f06f 0202 	mvn.w	r2, #2
 800ed60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2201      	movs	r2, #1
 800ed66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	699b      	ldr	r3, [r3, #24]
 800ed6e:	f003 0303 	and.w	r3, r3, #3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d003      	beq.n	800ed7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fb5c 	bl	800f434 <HAL_TIM_IC_CaptureCallback>
 800ed7c:	e005      	b.n	800ed8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 fb4e 	bl	800f420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fb5f 	bl	800f448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	f003 0304 	and.w	r3, r3, #4
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d020      	beq.n	800eddc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f003 0304 	and.w	r3, r3, #4
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d01b      	beq.n	800eddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f06f 0204 	mvn.w	r2, #4
 800edac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2202      	movs	r2, #2
 800edb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	699b      	ldr	r3, [r3, #24]
 800edba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d003      	beq.n	800edca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 fb36 	bl	800f434 <HAL_TIM_IC_CaptureCallback>
 800edc8:	e005      	b.n	800edd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 fb28 	bl	800f420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 fb39 	bl	800f448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	f003 0308 	and.w	r3, r3, #8
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d020      	beq.n	800ee28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f003 0308 	and.w	r3, r3, #8
 800edec:	2b00      	cmp	r3, #0
 800edee:	d01b      	beq.n	800ee28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f06f 0208 	mvn.w	r2, #8
 800edf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2204      	movs	r2, #4
 800edfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	69db      	ldr	r3, [r3, #28]
 800ee06:	f003 0303 	and.w	r3, r3, #3
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d003      	beq.n	800ee16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 fb10 	bl	800f434 <HAL_TIM_IC_CaptureCallback>
 800ee14:	e005      	b.n	800ee22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 fb02 	bl	800f420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 fb13 	bl	800f448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	f003 0310 	and.w	r3, r3, #16
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d020      	beq.n	800ee74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f003 0310 	and.w	r3, r3, #16
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d01b      	beq.n	800ee74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f06f 0210 	mvn.w	r2, #16
 800ee44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2208      	movs	r2, #8
 800ee4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	69db      	ldr	r3, [r3, #28]
 800ee52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d003      	beq.n	800ee62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 faea 	bl	800f434 <HAL_TIM_IC_CaptureCallback>
 800ee60:	e005      	b.n	800ee6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 fadc 	bl	800f420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 faed 	bl	800f448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	f003 0301 	and.w	r3, r3, #1
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00c      	beq.n	800ee98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f003 0301 	and.w	r3, r3, #1
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d007      	beq.n	800ee98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f06f 0201 	mvn.w	r2, #1
 800ee90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f7f9 fb08 	bl	80084a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d104      	bne.n	800eeac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d00c      	beq.n	800eec6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d007      	beq.n	800eec6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800eebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f001 f815 	bl	800fef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00c      	beq.n	800eeea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d007      	beq.n	800eeea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f001 f80d 	bl	800ff04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00c      	beq.n	800ef0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d007      	beq.n	800ef0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 faa7 	bl	800f45c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	f003 0320 	and.w	r3, r3, #32
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00c      	beq.n	800ef32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f003 0320 	and.w	r3, r3, #32
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d007      	beq.n	800ef32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f06f 0220 	mvn.w	r2, #32
 800ef2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 ffd5 	bl	800fedc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00c      	beq.n	800ef56 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d007      	beq.n	800ef56 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ef4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f000 ffe1 	bl	800ff18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00c      	beq.n	800ef7a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d007      	beq.n	800ef7a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ef72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f000 ffd9 	bl	800ff2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00c      	beq.n	800ef9e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d007      	beq.n	800ef9e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ef96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 ffd1 	bl	800ff40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d00c      	beq.n	800efc2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d007      	beq.n	800efc2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800efba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 ffc9 	bl	800ff54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800efc2:	bf00      	nop
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
	...

0800efcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b086      	sub	sp, #24
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	60b9      	str	r1, [r7, #8]
 800efd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800efd8:	2300      	movs	r3, #0
 800efda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d101      	bne.n	800efea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800efe6:	2302      	movs	r3, #2
 800efe8:	e0ff      	b.n	800f1ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2201      	movs	r2, #1
 800efee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2b14      	cmp	r3, #20
 800eff6:	f200 80f0 	bhi.w	800f1da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800effa:	a201      	add	r2, pc, #4	; (adr r2, 800f000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800effc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f000:	0800f055 	.word	0x0800f055
 800f004:	0800f1db 	.word	0x0800f1db
 800f008:	0800f1db 	.word	0x0800f1db
 800f00c:	0800f1db 	.word	0x0800f1db
 800f010:	0800f095 	.word	0x0800f095
 800f014:	0800f1db 	.word	0x0800f1db
 800f018:	0800f1db 	.word	0x0800f1db
 800f01c:	0800f1db 	.word	0x0800f1db
 800f020:	0800f0d7 	.word	0x0800f0d7
 800f024:	0800f1db 	.word	0x0800f1db
 800f028:	0800f1db 	.word	0x0800f1db
 800f02c:	0800f1db 	.word	0x0800f1db
 800f030:	0800f117 	.word	0x0800f117
 800f034:	0800f1db 	.word	0x0800f1db
 800f038:	0800f1db 	.word	0x0800f1db
 800f03c:	0800f1db 	.word	0x0800f1db
 800f040:	0800f159 	.word	0x0800f159
 800f044:	0800f1db 	.word	0x0800f1db
 800f048:	0800f1db 	.word	0x0800f1db
 800f04c:	0800f1db 	.word	0x0800f1db
 800f050:	0800f199 	.word	0x0800f199
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68b9      	ldr	r1, [r7, #8]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f000 fabc 	bl	800f5d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	699a      	ldr	r2, [r3, #24]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f042 0208 	orr.w	r2, r2, #8
 800f06e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	699a      	ldr	r2, [r3, #24]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f022 0204 	bic.w	r2, r2, #4
 800f07e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	6999      	ldr	r1, [r3, #24]
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	691a      	ldr	r2, [r3, #16]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	430a      	orrs	r2, r1
 800f090:	619a      	str	r2, [r3, #24]
      break;
 800f092:	e0a5      	b.n	800f1e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68b9      	ldr	r1, [r7, #8]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 fb36 	bl	800f70c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	699a      	ldr	r2, [r3, #24]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	699a      	ldr	r2, [r3, #24]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	6999      	ldr	r1, [r3, #24]
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	021a      	lsls	r2, r3, #8
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	430a      	orrs	r2, r1
 800f0d2:	619a      	str	r2, [r3, #24]
      break;
 800f0d4:	e084      	b.n	800f1e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	68b9      	ldr	r1, [r7, #8]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f000 fba9 	bl	800f834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	69da      	ldr	r2, [r3, #28]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f042 0208 	orr.w	r2, r2, #8
 800f0f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	69da      	ldr	r2, [r3, #28]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f022 0204 	bic.w	r2, r2, #4
 800f100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	69d9      	ldr	r1, [r3, #28]
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	691a      	ldr	r2, [r3, #16]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	430a      	orrs	r2, r1
 800f112:	61da      	str	r2, [r3, #28]
      break;
 800f114:	e064      	b.n	800f1e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	68b9      	ldr	r1, [r7, #8]
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 fc1b 	bl	800f958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	69da      	ldr	r2, [r3, #28]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	69da      	ldr	r2, [r3, #28]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	69d9      	ldr	r1, [r3, #28]
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	691b      	ldr	r3, [r3, #16]
 800f14c:	021a      	lsls	r2, r3, #8
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	430a      	orrs	r2, r1
 800f154:	61da      	str	r2, [r3, #28]
      break;
 800f156:	e043      	b.n	800f1e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	68b9      	ldr	r1, [r7, #8]
 800f15e:	4618      	mov	r0, r3
 800f160:	f000 fc8e 	bl	800fa80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f042 0208 	orr.w	r2, r2, #8
 800f172:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f022 0204 	bic.w	r2, r2, #4
 800f182:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	691a      	ldr	r2, [r3, #16]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	430a      	orrs	r2, r1
 800f194:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800f196:	e023      	b.n	800f1e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68b9      	ldr	r1, [r7, #8]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f000 fcd8 	bl	800fb54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	691b      	ldr	r3, [r3, #16]
 800f1ce:	021a      	lsls	r2, r3, #8
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	430a      	orrs	r2, r1
 800f1d6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800f1d8:	e002      	b.n	800f1e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f1da:	2301      	movs	r3, #1
 800f1dc:	75fb      	strb	r3, [r7, #23]
      break;
 800f1de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3718      	adds	r7, #24
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop

0800f1f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f1fe:	2300      	movs	r3, #0
 800f200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d101      	bne.n	800f210 <HAL_TIM_ConfigClockSource+0x1c>
 800f20c:	2302      	movs	r3, #2
 800f20e:	e0f6      	b.n	800f3fe <HAL_TIM_ConfigClockSource+0x20a>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2201      	movs	r2, #1
 800f214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2202      	movs	r2, #2
 800f21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800f22e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f23a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4a6f      	ldr	r2, [pc, #444]	; (800f408 <HAL_TIM_ConfigClockSource+0x214>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	f000 80c1 	beq.w	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f250:	4a6d      	ldr	r2, [pc, #436]	; (800f408 <HAL_TIM_ConfigClockSource+0x214>)
 800f252:	4293      	cmp	r3, r2
 800f254:	f200 80c6 	bhi.w	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f258:	4a6c      	ldr	r2, [pc, #432]	; (800f40c <HAL_TIM_ConfigClockSource+0x218>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	f000 80b9 	beq.w	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f260:	4a6a      	ldr	r2, [pc, #424]	; (800f40c <HAL_TIM_ConfigClockSource+0x218>)
 800f262:	4293      	cmp	r3, r2
 800f264:	f200 80be 	bhi.w	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f268:	4a69      	ldr	r2, [pc, #420]	; (800f410 <HAL_TIM_ConfigClockSource+0x21c>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	f000 80b1 	beq.w	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f270:	4a67      	ldr	r2, [pc, #412]	; (800f410 <HAL_TIM_ConfigClockSource+0x21c>)
 800f272:	4293      	cmp	r3, r2
 800f274:	f200 80b6 	bhi.w	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f278:	4a66      	ldr	r2, [pc, #408]	; (800f414 <HAL_TIM_ConfigClockSource+0x220>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	f000 80a9 	beq.w	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f280:	4a64      	ldr	r2, [pc, #400]	; (800f414 <HAL_TIM_ConfigClockSource+0x220>)
 800f282:	4293      	cmp	r3, r2
 800f284:	f200 80ae 	bhi.w	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f288:	4a63      	ldr	r2, [pc, #396]	; (800f418 <HAL_TIM_ConfigClockSource+0x224>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	f000 80a1 	beq.w	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f290:	4a61      	ldr	r2, [pc, #388]	; (800f418 <HAL_TIM_ConfigClockSource+0x224>)
 800f292:	4293      	cmp	r3, r2
 800f294:	f200 80a6 	bhi.w	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f298:	4a60      	ldr	r2, [pc, #384]	; (800f41c <HAL_TIM_ConfigClockSource+0x228>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	f000 8099 	beq.w	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f2a0:	4a5e      	ldr	r2, [pc, #376]	; (800f41c <HAL_TIM_ConfigClockSource+0x228>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	f200 809e 	bhi.w	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f2a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f2ac:	f000 8091 	beq.w	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f2b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f2b4:	f200 8096 	bhi.w	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f2b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2bc:	f000 8089 	beq.w	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f2c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2c4:	f200 808e 	bhi.w	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f2c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2cc:	d03e      	beq.n	800f34c <HAL_TIM_ConfigClockSource+0x158>
 800f2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2d2:	f200 8087 	bhi.w	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2da:	f000 8086 	beq.w	800f3ea <HAL_TIM_ConfigClockSource+0x1f6>
 800f2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2e2:	d87f      	bhi.n	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f2e4:	2b70      	cmp	r3, #112	; 0x70
 800f2e6:	d01a      	beq.n	800f31e <HAL_TIM_ConfigClockSource+0x12a>
 800f2e8:	2b70      	cmp	r3, #112	; 0x70
 800f2ea:	d87b      	bhi.n	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f2ec:	2b60      	cmp	r3, #96	; 0x60
 800f2ee:	d050      	beq.n	800f392 <HAL_TIM_ConfigClockSource+0x19e>
 800f2f0:	2b60      	cmp	r3, #96	; 0x60
 800f2f2:	d877      	bhi.n	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f2f4:	2b50      	cmp	r3, #80	; 0x50
 800f2f6:	d03c      	beq.n	800f372 <HAL_TIM_ConfigClockSource+0x17e>
 800f2f8:	2b50      	cmp	r3, #80	; 0x50
 800f2fa:	d873      	bhi.n	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f2fc:	2b40      	cmp	r3, #64	; 0x40
 800f2fe:	d058      	beq.n	800f3b2 <HAL_TIM_ConfigClockSource+0x1be>
 800f300:	2b40      	cmp	r3, #64	; 0x40
 800f302:	d86f      	bhi.n	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f304:	2b30      	cmp	r3, #48	; 0x30
 800f306:	d064      	beq.n	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f308:	2b30      	cmp	r3, #48	; 0x30
 800f30a:	d86b      	bhi.n	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f30c:	2b20      	cmp	r3, #32
 800f30e:	d060      	beq.n	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f310:	2b20      	cmp	r3, #32
 800f312:	d867      	bhi.n	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800f314:	2b00      	cmp	r3, #0
 800f316:	d05c      	beq.n	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f318:	2b10      	cmp	r3, #16
 800f31a:	d05a      	beq.n	800f3d2 <HAL_TIM_ConfigClockSource+0x1de>
 800f31c:	e062      	b.n	800f3e4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f32e:	f000 fcf9 	bl	800fd24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	68ba      	ldr	r2, [r7, #8]
 800f348:	609a      	str	r2, [r3, #8]
      break;
 800f34a:	e04f      	b.n	800f3ec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f35c:	f000 fce2 	bl	800fd24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	689a      	ldr	r2, [r3, #8]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f36e:	609a      	str	r2, [r3, #8]
      break;
 800f370:	e03c      	b.n	800f3ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f37e:	461a      	mov	r2, r3
 800f380:	f000 fc54 	bl	800fc2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	2150      	movs	r1, #80	; 0x50
 800f38a:	4618      	mov	r0, r3
 800f38c:	f000 fcad 	bl	800fcea <TIM_ITRx_SetConfig>
      break;
 800f390:	e02c      	b.n	800f3ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f39e:	461a      	mov	r2, r3
 800f3a0:	f000 fc73 	bl	800fc8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2160      	movs	r1, #96	; 0x60
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f000 fc9d 	bl	800fcea <TIM_ITRx_SetConfig>
      break;
 800f3b0:	e01c      	b.n	800f3ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3be:	461a      	mov	r2, r3
 800f3c0:	f000 fc34 	bl	800fc2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2140      	movs	r1, #64	; 0x40
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f000 fc8d 	bl	800fcea <TIM_ITRx_SetConfig>
      break;
 800f3d0:	e00c      	b.n	800f3ec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4619      	mov	r1, r3
 800f3dc:	4610      	mov	r0, r2
 800f3de:	f000 fc84 	bl	800fcea <TIM_ITRx_SetConfig>
      break;
 800f3e2:	e003      	b.n	800f3ec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	73fb      	strb	r3, [r7, #15]
      break;
 800f3e8:	e000      	b.n	800f3ec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800f3ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3710      	adds	r7, #16
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	00100070 	.word	0x00100070
 800f40c:	00100060 	.word	0x00100060
 800f410:	00100050 	.word	0x00100050
 800f414:	00100040 	.word	0x00100040
 800f418:	00100030 	.word	0x00100030
 800f41c:	00100020 	.word	0x00100020

0800f420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f428:	bf00      	nop
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f43c:	bf00      	nop
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f450:	bf00      	nop
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f464:	bf00      	nop
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a4c      	ldr	r2, [pc, #304]	; (800f5b4 <TIM_Base_SetConfig+0x144>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d017      	beq.n	800f4b8 <TIM_Base_SetConfig+0x48>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f48e:	d013      	beq.n	800f4b8 <TIM_Base_SetConfig+0x48>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a49      	ldr	r2, [pc, #292]	; (800f5b8 <TIM_Base_SetConfig+0x148>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d00f      	beq.n	800f4b8 <TIM_Base_SetConfig+0x48>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a48      	ldr	r2, [pc, #288]	; (800f5bc <TIM_Base_SetConfig+0x14c>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d00b      	beq.n	800f4b8 <TIM_Base_SetConfig+0x48>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a47      	ldr	r2, [pc, #284]	; (800f5c0 <TIM_Base_SetConfig+0x150>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d007      	beq.n	800f4b8 <TIM_Base_SetConfig+0x48>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a46      	ldr	r2, [pc, #280]	; (800f5c4 <TIM_Base_SetConfig+0x154>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d003      	beq.n	800f4b8 <TIM_Base_SetConfig+0x48>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4a45      	ldr	r2, [pc, #276]	; (800f5c8 <TIM_Base_SetConfig+0x158>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d108      	bne.n	800f4ca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a39      	ldr	r2, [pc, #228]	; (800f5b4 <TIM_Base_SetConfig+0x144>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d023      	beq.n	800f51a <TIM_Base_SetConfig+0xaa>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4d8:	d01f      	beq.n	800f51a <TIM_Base_SetConfig+0xaa>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a36      	ldr	r2, [pc, #216]	; (800f5b8 <TIM_Base_SetConfig+0x148>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d01b      	beq.n	800f51a <TIM_Base_SetConfig+0xaa>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a35      	ldr	r2, [pc, #212]	; (800f5bc <TIM_Base_SetConfig+0x14c>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d017      	beq.n	800f51a <TIM_Base_SetConfig+0xaa>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a34      	ldr	r2, [pc, #208]	; (800f5c0 <TIM_Base_SetConfig+0x150>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d013      	beq.n	800f51a <TIM_Base_SetConfig+0xaa>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4a33      	ldr	r2, [pc, #204]	; (800f5c4 <TIM_Base_SetConfig+0x154>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d00f      	beq.n	800f51a <TIM_Base_SetConfig+0xaa>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a33      	ldr	r2, [pc, #204]	; (800f5cc <TIM_Base_SetConfig+0x15c>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d00b      	beq.n	800f51a <TIM_Base_SetConfig+0xaa>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a32      	ldr	r2, [pc, #200]	; (800f5d0 <TIM_Base_SetConfig+0x160>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d007      	beq.n	800f51a <TIM_Base_SetConfig+0xaa>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4a31      	ldr	r2, [pc, #196]	; (800f5d4 <TIM_Base_SetConfig+0x164>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d003      	beq.n	800f51a <TIM_Base_SetConfig+0xaa>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4a2c      	ldr	r2, [pc, #176]	; (800f5c8 <TIM_Base_SetConfig+0x158>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d108      	bne.n	800f52c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	4313      	orrs	r3, r2
 800f52a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	695b      	ldr	r3, [r3, #20]
 800f536:	4313      	orrs	r3, r2
 800f538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	689a      	ldr	r2, [r3, #8]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4a18      	ldr	r2, [pc, #96]	; (800f5b4 <TIM_Base_SetConfig+0x144>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d013      	beq.n	800f580 <TIM_Base_SetConfig+0x110>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a1a      	ldr	r2, [pc, #104]	; (800f5c4 <TIM_Base_SetConfig+0x154>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d00f      	beq.n	800f580 <TIM_Base_SetConfig+0x110>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a1a      	ldr	r2, [pc, #104]	; (800f5cc <TIM_Base_SetConfig+0x15c>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d00b      	beq.n	800f580 <TIM_Base_SetConfig+0x110>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a19      	ldr	r2, [pc, #100]	; (800f5d0 <TIM_Base_SetConfig+0x160>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d007      	beq.n	800f580 <TIM_Base_SetConfig+0x110>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a18      	ldr	r2, [pc, #96]	; (800f5d4 <TIM_Base_SetConfig+0x164>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d003      	beq.n	800f580 <TIM_Base_SetConfig+0x110>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a13      	ldr	r2, [pc, #76]	; (800f5c8 <TIM_Base_SetConfig+0x158>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d103      	bne.n	800f588 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	691a      	ldr	r2, [r3, #16]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2201      	movs	r2, #1
 800f58c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	f003 0301 	and.w	r3, r3, #1
 800f596:	2b01      	cmp	r3, #1
 800f598:	d105      	bne.n	800f5a6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	691b      	ldr	r3, [r3, #16]
 800f59e:	f023 0201 	bic.w	r2, r3, #1
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	611a      	str	r2, [r3, #16]
  }
}
 800f5a6:	bf00      	nop
 800f5a8:	3714      	adds	r7, #20
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	40012c00 	.word	0x40012c00
 800f5b8:	40000400 	.word	0x40000400
 800f5bc:	40000800 	.word	0x40000800
 800f5c0:	40000c00 	.word	0x40000c00
 800f5c4:	40013400 	.word	0x40013400
 800f5c8:	40015000 	.word	0x40015000
 800f5cc:	40014000 	.word	0x40014000
 800f5d0:	40014400 	.word	0x40014400
 800f5d4:	40014800 	.word	0x40014800

0800f5d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b087      	sub	sp, #28
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a1b      	ldr	r3, [r3, #32]
 800f5e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6a1b      	ldr	r3, [r3, #32]
 800f5ec:	f023 0201 	bic.w	r2, r3, #1
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	699b      	ldr	r3, [r3, #24]
 800f5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f60a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f023 0303 	bic.w	r3, r3, #3
 800f612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68fa      	ldr	r2, [r7, #12]
 800f61a:	4313      	orrs	r3, r2
 800f61c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	f023 0302 	bic.w	r3, r3, #2
 800f624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	689b      	ldr	r3, [r3, #8]
 800f62a:	697a      	ldr	r2, [r7, #20]
 800f62c:	4313      	orrs	r3, r2
 800f62e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a30      	ldr	r2, [pc, #192]	; (800f6f4 <TIM_OC1_SetConfig+0x11c>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d013      	beq.n	800f660 <TIM_OC1_SetConfig+0x88>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4a2f      	ldr	r2, [pc, #188]	; (800f6f8 <TIM_OC1_SetConfig+0x120>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d00f      	beq.n	800f660 <TIM_OC1_SetConfig+0x88>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4a2e      	ldr	r2, [pc, #184]	; (800f6fc <TIM_OC1_SetConfig+0x124>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d00b      	beq.n	800f660 <TIM_OC1_SetConfig+0x88>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4a2d      	ldr	r2, [pc, #180]	; (800f700 <TIM_OC1_SetConfig+0x128>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d007      	beq.n	800f660 <TIM_OC1_SetConfig+0x88>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a2c      	ldr	r2, [pc, #176]	; (800f704 <TIM_OC1_SetConfig+0x12c>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d003      	beq.n	800f660 <TIM_OC1_SetConfig+0x88>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a2b      	ldr	r2, [pc, #172]	; (800f708 <TIM_OC1_SetConfig+0x130>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d10c      	bne.n	800f67a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	f023 0308 	bic.w	r3, r3, #8
 800f666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	4313      	orrs	r3, r2
 800f670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f023 0304 	bic.w	r3, r3, #4
 800f678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4a1d      	ldr	r2, [pc, #116]	; (800f6f4 <TIM_OC1_SetConfig+0x11c>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d013      	beq.n	800f6aa <TIM_OC1_SetConfig+0xd2>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4a1c      	ldr	r2, [pc, #112]	; (800f6f8 <TIM_OC1_SetConfig+0x120>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d00f      	beq.n	800f6aa <TIM_OC1_SetConfig+0xd2>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4a1b      	ldr	r2, [pc, #108]	; (800f6fc <TIM_OC1_SetConfig+0x124>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d00b      	beq.n	800f6aa <TIM_OC1_SetConfig+0xd2>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4a1a      	ldr	r2, [pc, #104]	; (800f700 <TIM_OC1_SetConfig+0x128>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d007      	beq.n	800f6aa <TIM_OC1_SetConfig+0xd2>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4a19      	ldr	r2, [pc, #100]	; (800f704 <TIM_OC1_SetConfig+0x12c>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d003      	beq.n	800f6aa <TIM_OC1_SetConfig+0xd2>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	4a18      	ldr	r2, [pc, #96]	; (800f708 <TIM_OC1_SetConfig+0x130>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d111      	bne.n	800f6ce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	695b      	ldr	r3, [r3, #20]
 800f6be:	693a      	ldr	r2, [r7, #16]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	699b      	ldr	r3, [r3, #24]
 800f6c8:	693a      	ldr	r2, [r7, #16]
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	693a      	ldr	r2, [r7, #16]
 800f6d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	685a      	ldr	r2, [r3, #4]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	697a      	ldr	r2, [r7, #20]
 800f6e6:	621a      	str	r2, [r3, #32]
}
 800f6e8:	bf00      	nop
 800f6ea:	371c      	adds	r7, #28
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	40012c00 	.word	0x40012c00
 800f6f8:	40013400 	.word	0x40013400
 800f6fc:	40014000 	.word	0x40014000
 800f700:	40014400 	.word	0x40014400
 800f704:	40014800 	.word	0x40014800
 800f708:	40015000 	.word	0x40015000

0800f70c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b087      	sub	sp, #28
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6a1b      	ldr	r3, [r3, #32]
 800f71a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6a1b      	ldr	r3, [r3, #32]
 800f720:	f023 0210 	bic.w	r2, r3, #16
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	699b      	ldr	r3, [r3, #24]
 800f732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f73a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f73e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	021b      	lsls	r3, r3, #8
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	4313      	orrs	r3, r2
 800f752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	f023 0320 	bic.w	r3, r3, #32
 800f75a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	011b      	lsls	r3, r3, #4
 800f762:	697a      	ldr	r2, [r7, #20]
 800f764:	4313      	orrs	r3, r2
 800f766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4a2c      	ldr	r2, [pc, #176]	; (800f81c <TIM_OC2_SetConfig+0x110>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d007      	beq.n	800f780 <TIM_OC2_SetConfig+0x74>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4a2b      	ldr	r2, [pc, #172]	; (800f820 <TIM_OC2_SetConfig+0x114>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d003      	beq.n	800f780 <TIM_OC2_SetConfig+0x74>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4a2a      	ldr	r2, [pc, #168]	; (800f824 <TIM_OC2_SetConfig+0x118>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d10d      	bne.n	800f79c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	011b      	lsls	r3, r3, #4
 800f78e:	697a      	ldr	r2, [r7, #20]
 800f790:	4313      	orrs	r3, r2
 800f792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f79a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a1f      	ldr	r2, [pc, #124]	; (800f81c <TIM_OC2_SetConfig+0x110>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d013      	beq.n	800f7cc <TIM_OC2_SetConfig+0xc0>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a1e      	ldr	r2, [pc, #120]	; (800f820 <TIM_OC2_SetConfig+0x114>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d00f      	beq.n	800f7cc <TIM_OC2_SetConfig+0xc0>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a1e      	ldr	r2, [pc, #120]	; (800f828 <TIM_OC2_SetConfig+0x11c>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d00b      	beq.n	800f7cc <TIM_OC2_SetConfig+0xc0>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a1d      	ldr	r2, [pc, #116]	; (800f82c <TIM_OC2_SetConfig+0x120>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d007      	beq.n	800f7cc <TIM_OC2_SetConfig+0xc0>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a1c      	ldr	r2, [pc, #112]	; (800f830 <TIM_OC2_SetConfig+0x124>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d003      	beq.n	800f7cc <TIM_OC2_SetConfig+0xc0>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a17      	ldr	r2, [pc, #92]	; (800f824 <TIM_OC2_SetConfig+0x118>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d113      	bne.n	800f7f4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	695b      	ldr	r3, [r3, #20]
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	699b      	ldr	r3, [r3, #24]
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	693a      	ldr	r2, [r7, #16]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	693a      	ldr	r2, [r7, #16]
 800f7f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	685a      	ldr	r2, [r3, #4]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	697a      	ldr	r2, [r7, #20]
 800f80c:	621a      	str	r2, [r3, #32]
}
 800f80e:	bf00      	nop
 800f810:	371c      	adds	r7, #28
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	40012c00 	.word	0x40012c00
 800f820:	40013400 	.word	0x40013400
 800f824:	40015000 	.word	0x40015000
 800f828:	40014000 	.word	0x40014000
 800f82c:	40014400 	.word	0x40014400
 800f830:	40014800 	.word	0x40014800

0800f834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f834:	b480      	push	{r7}
 800f836:	b087      	sub	sp, #28
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6a1b      	ldr	r3, [r3, #32]
 800f842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6a1b      	ldr	r3, [r3, #32]
 800f848:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	69db      	ldr	r3, [r3, #28]
 800f85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f023 0303 	bic.w	r3, r3, #3
 800f86e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	4313      	orrs	r3, r2
 800f878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	021b      	lsls	r3, r3, #8
 800f888:	697a      	ldr	r2, [r7, #20]
 800f88a:	4313      	orrs	r3, r2
 800f88c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4a2b      	ldr	r2, [pc, #172]	; (800f940 <TIM_OC3_SetConfig+0x10c>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d007      	beq.n	800f8a6 <TIM_OC3_SetConfig+0x72>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4a2a      	ldr	r2, [pc, #168]	; (800f944 <TIM_OC3_SetConfig+0x110>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d003      	beq.n	800f8a6 <TIM_OC3_SetConfig+0x72>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4a29      	ldr	r2, [pc, #164]	; (800f948 <TIM_OC3_SetConfig+0x114>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d10d      	bne.n	800f8c2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	021b      	lsls	r3, r3, #8
 800f8b4:	697a      	ldr	r2, [r7, #20]
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4a1e      	ldr	r2, [pc, #120]	; (800f940 <TIM_OC3_SetConfig+0x10c>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d013      	beq.n	800f8f2 <TIM_OC3_SetConfig+0xbe>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4a1d      	ldr	r2, [pc, #116]	; (800f944 <TIM_OC3_SetConfig+0x110>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d00f      	beq.n	800f8f2 <TIM_OC3_SetConfig+0xbe>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4a1d      	ldr	r2, [pc, #116]	; (800f94c <TIM_OC3_SetConfig+0x118>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d00b      	beq.n	800f8f2 <TIM_OC3_SetConfig+0xbe>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4a1c      	ldr	r2, [pc, #112]	; (800f950 <TIM_OC3_SetConfig+0x11c>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d007      	beq.n	800f8f2 <TIM_OC3_SetConfig+0xbe>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4a1b      	ldr	r2, [pc, #108]	; (800f954 <TIM_OC3_SetConfig+0x120>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d003      	beq.n	800f8f2 <TIM_OC3_SetConfig+0xbe>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	4a16      	ldr	r2, [pc, #88]	; (800f948 <TIM_OC3_SetConfig+0x114>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d113      	bne.n	800f91a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	695b      	ldr	r3, [r3, #20]
 800f906:	011b      	lsls	r3, r3, #4
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	699b      	ldr	r3, [r3, #24]
 800f912:	011b      	lsls	r3, r3, #4
 800f914:	693a      	ldr	r2, [r7, #16]
 800f916:	4313      	orrs	r3, r2
 800f918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	693a      	ldr	r2, [r7, #16]
 800f91e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	68fa      	ldr	r2, [r7, #12]
 800f924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	685a      	ldr	r2, [r3, #4]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	621a      	str	r2, [r3, #32]
}
 800f934:	bf00      	nop
 800f936:	371c      	adds	r7, #28
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr
 800f940:	40012c00 	.word	0x40012c00
 800f944:	40013400 	.word	0x40013400
 800f948:	40015000 	.word	0x40015000
 800f94c:	40014000 	.word	0x40014000
 800f950:	40014400 	.word	0x40014400
 800f954:	40014800 	.word	0x40014800

0800f958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f958:	b480      	push	{r7}
 800f95a:	b087      	sub	sp, #28
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6a1b      	ldr	r3, [r3, #32]
 800f966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a1b      	ldr	r3, [r3, #32]
 800f96c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	69db      	ldr	r3, [r3, #28]
 800f97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	021b      	lsls	r3, r3, #8
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	031b      	lsls	r3, r3, #12
 800f9ae:	697a      	ldr	r2, [r7, #20]
 800f9b0:	4313      	orrs	r3, r2
 800f9b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	4a2c      	ldr	r2, [pc, #176]	; (800fa68 <TIM_OC4_SetConfig+0x110>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d007      	beq.n	800f9cc <TIM_OC4_SetConfig+0x74>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4a2b      	ldr	r2, [pc, #172]	; (800fa6c <TIM_OC4_SetConfig+0x114>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d003      	beq.n	800f9cc <TIM_OC4_SetConfig+0x74>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4a2a      	ldr	r2, [pc, #168]	; (800fa70 <TIM_OC4_SetConfig+0x118>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d10d      	bne.n	800f9e8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f9d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	031b      	lsls	r3, r3, #12
 800f9da:	697a      	ldr	r2, [r7, #20]
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a1f      	ldr	r2, [pc, #124]	; (800fa68 <TIM_OC4_SetConfig+0x110>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d013      	beq.n	800fa18 <TIM_OC4_SetConfig+0xc0>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a1e      	ldr	r2, [pc, #120]	; (800fa6c <TIM_OC4_SetConfig+0x114>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d00f      	beq.n	800fa18 <TIM_OC4_SetConfig+0xc0>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a1e      	ldr	r2, [pc, #120]	; (800fa74 <TIM_OC4_SetConfig+0x11c>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d00b      	beq.n	800fa18 <TIM_OC4_SetConfig+0xc0>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4a1d      	ldr	r2, [pc, #116]	; (800fa78 <TIM_OC4_SetConfig+0x120>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d007      	beq.n	800fa18 <TIM_OC4_SetConfig+0xc0>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4a1c      	ldr	r2, [pc, #112]	; (800fa7c <TIM_OC4_SetConfig+0x124>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d003      	beq.n	800fa18 <TIM_OC4_SetConfig+0xc0>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	4a17      	ldr	r2, [pc, #92]	; (800fa70 <TIM_OC4_SetConfig+0x118>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d113      	bne.n	800fa40 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fa26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	695b      	ldr	r3, [r3, #20]
 800fa2c:	019b      	lsls	r3, r3, #6
 800fa2e:	693a      	ldr	r2, [r7, #16]
 800fa30:	4313      	orrs	r3, r2
 800fa32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	699b      	ldr	r3, [r3, #24]
 800fa38:	019b      	lsls	r3, r3, #6
 800fa3a:	693a      	ldr	r2, [r7, #16]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	693a      	ldr	r2, [r7, #16]
 800fa44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	68fa      	ldr	r2, [r7, #12]
 800fa4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	685a      	ldr	r2, [r3, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	697a      	ldr	r2, [r7, #20]
 800fa58:	621a      	str	r2, [r3, #32]
}
 800fa5a:	bf00      	nop
 800fa5c:	371c      	adds	r7, #28
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	40012c00 	.word	0x40012c00
 800fa6c:	40013400 	.word	0x40013400
 800fa70:	40015000 	.word	0x40015000
 800fa74:	40014000 	.word	0x40014000
 800fa78:	40014400 	.word	0x40014400
 800fa7c:	40014800 	.word	0x40014800

0800fa80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b087      	sub	sp, #28
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a1b      	ldr	r3, [r3, #32]
 800fa8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6a1b      	ldr	r3, [r3, #32]
 800fa94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800faae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	4313      	orrs	r3, r2
 800fabc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	041b      	lsls	r3, r3, #16
 800facc:	693a      	ldr	r2, [r7, #16]
 800face:	4313      	orrs	r3, r2
 800fad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4a19      	ldr	r2, [pc, #100]	; (800fb3c <TIM_OC5_SetConfig+0xbc>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d013      	beq.n	800fb02 <TIM_OC5_SetConfig+0x82>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4a18      	ldr	r2, [pc, #96]	; (800fb40 <TIM_OC5_SetConfig+0xc0>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d00f      	beq.n	800fb02 <TIM_OC5_SetConfig+0x82>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4a17      	ldr	r2, [pc, #92]	; (800fb44 <TIM_OC5_SetConfig+0xc4>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d00b      	beq.n	800fb02 <TIM_OC5_SetConfig+0x82>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4a16      	ldr	r2, [pc, #88]	; (800fb48 <TIM_OC5_SetConfig+0xc8>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d007      	beq.n	800fb02 <TIM_OC5_SetConfig+0x82>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4a15      	ldr	r2, [pc, #84]	; (800fb4c <TIM_OC5_SetConfig+0xcc>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d003      	beq.n	800fb02 <TIM_OC5_SetConfig+0x82>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4a14      	ldr	r2, [pc, #80]	; (800fb50 <TIM_OC5_SetConfig+0xd0>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d109      	bne.n	800fb16 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	695b      	ldr	r3, [r3, #20]
 800fb0e:	021b      	lsls	r3, r3, #8
 800fb10:	697a      	ldr	r2, [r7, #20]
 800fb12:	4313      	orrs	r3, r2
 800fb14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	697a      	ldr	r2, [r7, #20]
 800fb1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	685a      	ldr	r2, [r3, #4]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	693a      	ldr	r2, [r7, #16]
 800fb2e:	621a      	str	r2, [r3, #32]
}
 800fb30:	bf00      	nop
 800fb32:	371c      	adds	r7, #28
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr
 800fb3c:	40012c00 	.word	0x40012c00
 800fb40:	40013400 	.word	0x40013400
 800fb44:	40014000 	.word	0x40014000
 800fb48:	40014400 	.word	0x40014400
 800fb4c:	40014800 	.word	0x40014800
 800fb50:	40015000 	.word	0x40015000

0800fb54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b087      	sub	sp, #28
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a1b      	ldr	r3, [r3, #32]
 800fb62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a1b      	ldr	r3, [r3, #32]
 800fb68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fb82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	021b      	lsls	r3, r3, #8
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	4313      	orrs	r3, r2
 800fb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	051b      	lsls	r3, r3, #20
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	4313      	orrs	r3, r2
 800fba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a1a      	ldr	r2, [pc, #104]	; (800fc14 <TIM_OC6_SetConfig+0xc0>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d013      	beq.n	800fbd8 <TIM_OC6_SetConfig+0x84>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a19      	ldr	r2, [pc, #100]	; (800fc18 <TIM_OC6_SetConfig+0xc4>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d00f      	beq.n	800fbd8 <TIM_OC6_SetConfig+0x84>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a18      	ldr	r2, [pc, #96]	; (800fc1c <TIM_OC6_SetConfig+0xc8>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d00b      	beq.n	800fbd8 <TIM_OC6_SetConfig+0x84>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a17      	ldr	r2, [pc, #92]	; (800fc20 <TIM_OC6_SetConfig+0xcc>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d007      	beq.n	800fbd8 <TIM_OC6_SetConfig+0x84>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a16      	ldr	r2, [pc, #88]	; (800fc24 <TIM_OC6_SetConfig+0xd0>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d003      	beq.n	800fbd8 <TIM_OC6_SetConfig+0x84>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4a15      	ldr	r2, [pc, #84]	; (800fc28 <TIM_OC6_SetConfig+0xd4>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d109      	bne.n	800fbec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fbde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	695b      	ldr	r3, [r3, #20]
 800fbe4:	029b      	lsls	r3, r3, #10
 800fbe6:	697a      	ldr	r2, [r7, #20]
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	697a      	ldr	r2, [r7, #20]
 800fbf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	693a      	ldr	r2, [r7, #16]
 800fc04:	621a      	str	r2, [r3, #32]
}
 800fc06:	bf00      	nop
 800fc08:	371c      	adds	r7, #28
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	40012c00 	.word	0x40012c00
 800fc18:	40013400 	.word	0x40013400
 800fc1c:	40014000 	.word	0x40014000
 800fc20:	40014400 	.word	0x40014400
 800fc24:	40014800 	.word	0x40014800
 800fc28:	40015000 	.word	0x40015000

0800fc2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b087      	sub	sp, #28
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	60f8      	str	r0, [r7, #12]
 800fc34:	60b9      	str	r1, [r7, #8]
 800fc36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	6a1b      	ldr	r3, [r3, #32]
 800fc3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	6a1b      	ldr	r3, [r3, #32]
 800fc42:	f023 0201 	bic.w	r2, r3, #1
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	699b      	ldr	r3, [r3, #24]
 800fc4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fc56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	011b      	lsls	r3, r3, #4
 800fc5c:	693a      	ldr	r2, [r7, #16]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	f023 030a 	bic.w	r3, r3, #10
 800fc68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fc6a:	697a      	ldr	r2, [r7, #20]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	693a      	ldr	r2, [r7, #16]
 800fc76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	697a      	ldr	r2, [r7, #20]
 800fc7c:	621a      	str	r2, [r3, #32]
}
 800fc7e:	bf00      	nop
 800fc80:	371c      	adds	r7, #28
 800fc82:	46bd      	mov	sp, r7
 800fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc88:	4770      	bx	lr

0800fc8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc8a:	b480      	push	{r7}
 800fc8c:	b087      	sub	sp, #28
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	60f8      	str	r0, [r7, #12]
 800fc92:	60b9      	str	r1, [r7, #8]
 800fc94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	6a1b      	ldr	r3, [r3, #32]
 800fc9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6a1b      	ldr	r3, [r3, #32]
 800fca0:	f023 0210 	bic.w	r2, r3, #16
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	699b      	ldr	r3, [r3, #24]
 800fcac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fcb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	031b      	lsls	r3, r3, #12
 800fcba:	693a      	ldr	r2, [r7, #16]
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fcc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	011b      	lsls	r3, r3, #4
 800fccc:	697a      	ldr	r2, [r7, #20]
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	693a      	ldr	r2, [r7, #16]
 800fcd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	697a      	ldr	r2, [r7, #20]
 800fcdc:	621a      	str	r2, [r3, #32]
}
 800fcde:	bf00      	nop
 800fce0:	371c      	adds	r7, #28
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr

0800fcea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fcea:	b480      	push	{r7}
 800fcec:	b085      	sub	sp, #20
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
 800fcf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	689b      	ldr	r3, [r3, #8]
 800fcf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fd00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd06:	683a      	ldr	r2, [r7, #0]
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	f043 0307 	orr.w	r3, r3, #7
 800fd10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	68fa      	ldr	r2, [r7, #12]
 800fd16:	609a      	str	r2, [r3, #8]
}
 800fd18:	bf00      	nop
 800fd1a:	3714      	adds	r7, #20
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b087      	sub	sp, #28
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
 800fd30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	689b      	ldr	r3, [r3, #8]
 800fd36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fd3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	021a      	lsls	r2, r3, #8
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	431a      	orrs	r2, r3
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	697a      	ldr	r2, [r7, #20]
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	697a      	ldr	r2, [r7, #20]
 800fd56:	609a      	str	r2, [r3, #8]
}
 800fd58:	bf00      	nop
 800fd5a:	371c      	adds	r7, #28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b087      	sub	sp, #28
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	f003 031f 	and.w	r3, r3, #31
 800fd76:	2201      	movs	r2, #1
 800fd78:	fa02 f303 	lsl.w	r3, r2, r3
 800fd7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6a1a      	ldr	r2, [r3, #32]
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	43db      	mvns	r3, r3
 800fd86:	401a      	ands	r2, r3
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6a1a      	ldr	r2, [r3, #32]
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	f003 031f 	and.w	r3, r3, #31
 800fd96:	6879      	ldr	r1, [r7, #4]
 800fd98:	fa01 f303 	lsl.w	r3, r1, r3
 800fd9c:	431a      	orrs	r2, r3
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	621a      	str	r2, [r3, #32]
}
 800fda2:	bf00      	nop
 800fda4:	371c      	adds	r7, #28
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr
	...

0800fdb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b085      	sub	sp, #20
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d101      	bne.n	800fdc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fdc4:	2302      	movs	r3, #2
 800fdc6:	e074      	b.n	800feb2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2202      	movs	r2, #2
 800fdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a34      	ldr	r2, [pc, #208]	; (800fec0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d009      	beq.n	800fe06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4a33      	ldr	r2, [pc, #204]	; (800fec4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d004      	beq.n	800fe06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4a31      	ldr	r2, [pc, #196]	; (800fec8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d108      	bne.n	800fe18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fe0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	68fa      	ldr	r2, [r7, #12]
 800fe14:	4313      	orrs	r3, r2
 800fe16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fe1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	68fa      	ldr	r2, [r7, #12]
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68fa      	ldr	r2, [r7, #12]
 800fe34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4a21      	ldr	r2, [pc, #132]	; (800fec0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d022      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe48:	d01d      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	4a1f      	ldr	r2, [pc, #124]	; (800fecc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d018      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4a1d      	ldr	r2, [pc, #116]	; (800fed0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d013      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4a1c      	ldr	r2, [pc, #112]	; (800fed4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d00e      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	4a15      	ldr	r2, [pc, #84]	; (800fec4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d009      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4a18      	ldr	r2, [pc, #96]	; (800fed8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d004      	beq.n	800fe86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4a11      	ldr	r2, [pc, #68]	; (800fec8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d10c      	bne.n	800fea0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	4313      	orrs	r3, r2
 800fe96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	68ba      	ldr	r2, [r7, #8]
 800fe9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2201      	movs	r2, #1
 800fea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3714      	adds	r7, #20
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	40012c00 	.word	0x40012c00
 800fec4:	40013400 	.word	0x40013400
 800fec8:	40015000 	.word	0x40015000
 800fecc:	40000400 	.word	0x40000400
 800fed0:	40000800 	.word	0x40000800
 800fed4:	40000c00 	.word	0x40000c00
 800fed8:	40014000 	.word	0x40014000

0800fedc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ff5c:	bf00      	nop
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d101      	bne.n	800ff7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff76:	2301      	movs	r3, #1
 800ff78:	e042      	b.n	8010000 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d106      	bne.n	800ff92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f7f8 fdd9 	bl	8008b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2224      	movs	r2, #36	; 0x24
 800ff96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f022 0201 	bic.w	r2, r2, #1
 800ffa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d002      	beq.n	800ffb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 fefe 	bl	8010db4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 fbff 	bl	80107bc <UART_SetConfig>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d101      	bne.n	800ffc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e01b      	b.n	8010000 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	685a      	ldr	r2, [r3, #4]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ffd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	689a      	ldr	r2, [r3, #8]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f042 0201 	orr.w	r2, r2, #1
 800fff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 ff7d 	bl	8010ef8 <UART_CheckIdleState>
 800fffe:	4603      	mov	r3, r0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b08a      	sub	sp, #40	; 0x28
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	4613      	mov	r3, r2
 8010014:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801001c:	2b20      	cmp	r3, #32
 801001e:	d167      	bne.n	80100f0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d002      	beq.n	801002c <HAL_UART_Transmit_DMA+0x24>
 8010026:	88fb      	ldrh	r3, [r7, #6]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d101      	bne.n	8010030 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 801002c:	2301      	movs	r3, #1
 801002e:	e060      	b.n	80100f2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	68ba      	ldr	r2, [r7, #8]
 8010034:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	88fa      	ldrh	r2, [r7, #6]
 801003a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	88fa      	ldrh	r2, [r7, #6]
 8010042:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2200      	movs	r2, #0
 801004a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2221      	movs	r2, #33	; 0x21
 8010052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801005a:	2b00      	cmp	r3, #0
 801005c:	d028      	beq.n	80100b0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010062:	4a26      	ldr	r2, [pc, #152]	; (80100fc <HAL_UART_Transmit_DMA+0xf4>)
 8010064:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801006a:	4a25      	ldr	r2, [pc, #148]	; (8010100 <HAL_UART_Transmit_DMA+0xf8>)
 801006c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010072:	4a24      	ldr	r2, [pc, #144]	; (8010104 <HAL_UART_Transmit_DMA+0xfc>)
 8010074:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801007a:	2200      	movs	r2, #0
 801007c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010086:	4619      	mov	r1, r3
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	3328      	adds	r3, #40	; 0x28
 801008e:	461a      	mov	r2, r3
 8010090:	88fb      	ldrh	r3, [r7, #6]
 8010092:	f7fb f903 	bl	800b29c <HAL_DMA_Start_IT>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d009      	beq.n	80100b0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2210      	movs	r2, #16
 80100a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2220      	movs	r2, #32
 80100a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80100ac:	2301      	movs	r3, #1
 80100ae:	e020      	b.n	80100f2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2240      	movs	r2, #64	; 0x40
 80100b6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	3308      	adds	r3, #8
 80100be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	e853 3f00 	ldrex	r3, [r3]
 80100c6:	613b      	str	r3, [r7, #16]
   return(result);
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100ce:	627b      	str	r3, [r7, #36]	; 0x24
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	3308      	adds	r3, #8
 80100d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100d8:	623a      	str	r2, [r7, #32]
 80100da:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100dc:	69f9      	ldr	r1, [r7, #28]
 80100de:	6a3a      	ldr	r2, [r7, #32]
 80100e0:	e841 2300 	strex	r3, r2, [r1]
 80100e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1e5      	bne.n	80100b8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	e000      	b.n	80100f2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80100f0:	2302      	movs	r3, #2
  }
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3728      	adds	r7, #40	; 0x28
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	080114bb 	.word	0x080114bb
 8010100:	08011555 	.word	0x08011555
 8010104:	08011571 	.word	0x08011571

08010108 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b0ba      	sub	sp, #232	; 0xe8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	69db      	ldr	r3, [r3, #28]
 8010116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	689b      	ldr	r3, [r3, #8]
 801012a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801012e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010132:	f640 030f 	movw	r3, #2063	; 0x80f
 8010136:	4013      	ands	r3, r2
 8010138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801013c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010140:	2b00      	cmp	r3, #0
 8010142:	d11b      	bne.n	801017c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010148:	f003 0320 	and.w	r3, r3, #32
 801014c:	2b00      	cmp	r3, #0
 801014e:	d015      	beq.n	801017c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010154:	f003 0320 	and.w	r3, r3, #32
 8010158:	2b00      	cmp	r3, #0
 801015a:	d105      	bne.n	8010168 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801015c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010164:	2b00      	cmp	r3, #0
 8010166:	d009      	beq.n	801017c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801016c:	2b00      	cmp	r3, #0
 801016e:	f000 82e3 	beq.w	8010738 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	4798      	blx	r3
      }
      return;
 801017a:	e2dd      	b.n	8010738 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801017c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010180:	2b00      	cmp	r3, #0
 8010182:	f000 8123 	beq.w	80103cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010186:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801018a:	4b8d      	ldr	r3, [pc, #564]	; (80103c0 <HAL_UART_IRQHandler+0x2b8>)
 801018c:	4013      	ands	r3, r2
 801018e:	2b00      	cmp	r3, #0
 8010190:	d106      	bne.n	80101a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010192:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010196:	4b8b      	ldr	r3, [pc, #556]	; (80103c4 <HAL_UART_IRQHandler+0x2bc>)
 8010198:	4013      	ands	r3, r2
 801019a:	2b00      	cmp	r3, #0
 801019c:	f000 8116 	beq.w	80103cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80101a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101a4:	f003 0301 	and.w	r3, r3, #1
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d011      	beq.n	80101d0 <HAL_UART_IRQHandler+0xc8>
 80101ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d00b      	beq.n	80101d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2201      	movs	r2, #1
 80101be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101c6:	f043 0201 	orr.w	r2, r3, #1
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101d4:	f003 0302 	and.w	r3, r3, #2
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d011      	beq.n	8010200 <HAL_UART_IRQHandler+0xf8>
 80101dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80101e0:	f003 0301 	and.w	r3, r3, #1
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d00b      	beq.n	8010200 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2202      	movs	r2, #2
 80101ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101f6:	f043 0204 	orr.w	r2, r3, #4
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010204:	f003 0304 	and.w	r3, r3, #4
 8010208:	2b00      	cmp	r3, #0
 801020a:	d011      	beq.n	8010230 <HAL_UART_IRQHandler+0x128>
 801020c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010210:	f003 0301 	and.w	r3, r3, #1
 8010214:	2b00      	cmp	r3, #0
 8010216:	d00b      	beq.n	8010230 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2204      	movs	r2, #4
 801021e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010226:	f043 0202 	orr.w	r2, r3, #2
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010234:	f003 0308 	and.w	r3, r3, #8
 8010238:	2b00      	cmp	r3, #0
 801023a:	d017      	beq.n	801026c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801023c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010240:	f003 0320 	and.w	r3, r3, #32
 8010244:	2b00      	cmp	r3, #0
 8010246:	d105      	bne.n	8010254 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010248:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801024c:	4b5c      	ldr	r3, [pc, #368]	; (80103c0 <HAL_UART_IRQHandler+0x2b8>)
 801024e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00b      	beq.n	801026c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	2208      	movs	r2, #8
 801025a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010262:	f043 0208 	orr.w	r2, r3, #8
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801026c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010274:	2b00      	cmp	r3, #0
 8010276:	d012      	beq.n	801029e <HAL_UART_IRQHandler+0x196>
 8010278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801027c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010280:	2b00      	cmp	r3, #0
 8010282:	d00c      	beq.n	801029e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801028c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010294:	f043 0220 	orr.w	r2, r3, #32
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f000 8249 	beq.w	801073c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80102aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102ae:	f003 0320 	and.w	r3, r3, #32
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d013      	beq.n	80102de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80102b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102ba:	f003 0320 	and.w	r3, r3, #32
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d105      	bne.n	80102ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80102c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d007      	beq.n	80102de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d003      	beq.n	80102de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102f2:	2b40      	cmp	r3, #64	; 0x40
 80102f4:	d005      	beq.n	8010302 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80102f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80102fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d054      	beq.n	80103ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f001 f873 	bl	80113ee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010312:	2b40      	cmp	r3, #64	; 0x40
 8010314:	d146      	bne.n	80103a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	3308      	adds	r3, #8
 801031c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010324:	e853 3f00 	ldrex	r3, [r3]
 8010328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801032c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	3308      	adds	r3, #8
 801033e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010342:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801034a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801034e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010352:	e841 2300 	strex	r3, r2, [r1]
 8010356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801035a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1d9      	bne.n	8010316 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010368:	2b00      	cmp	r3, #0
 801036a:	d017      	beq.n	801039c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010372:	4a15      	ldr	r2, [pc, #84]	; (80103c8 <HAL_UART_IRQHandler+0x2c0>)
 8010374:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801037c:	4618      	mov	r0, r3
 801037e:	f7fb f861 	bl	800b444 <HAL_DMA_Abort_IT>
 8010382:	4603      	mov	r3, r0
 8010384:	2b00      	cmp	r3, #0
 8010386:	d019      	beq.n	80103bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801038e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010396:	4610      	mov	r0, r2
 8010398:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801039a:	e00f      	b.n	80103bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 f9f5 	bl	801078c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103a2:	e00b      	b.n	80103bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f000 f9f1 	bl	801078c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103aa:	e007      	b.n	80103bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 f9ed 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80103ba:	e1bf      	b.n	801073c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103bc:	bf00      	nop
    return;
 80103be:	e1bd      	b.n	801073c <HAL_UART_IRQHandler+0x634>
 80103c0:	10000001 	.word	0x10000001
 80103c4:	04000120 	.word	0x04000120
 80103c8:	080115f1 	.word	0x080115f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	f040 8153 	bne.w	801067c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80103d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103da:	f003 0310 	and.w	r3, r3, #16
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f000 814c 	beq.w	801067c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80103e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103e8:	f003 0310 	and.w	r3, r3, #16
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f000 8145 	beq.w	801067c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2210      	movs	r2, #16
 80103f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010404:	2b40      	cmp	r3, #64	; 0x40
 8010406:	f040 80bb 	bne.w	8010580 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801041c:	2b00      	cmp	r3, #0
 801041e:	f000 818f 	beq.w	8010740 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010428:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801042c:	429a      	cmp	r2, r3
 801042e:	f080 8187 	bcs.w	8010740 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	f003 0320 	and.w	r3, r3, #32
 801044a:	2b00      	cmp	r3, #0
 801044c:	f040 8087 	bne.w	801055e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801045c:	e853 3f00 	ldrex	r3, [r3]
 8010460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801046c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	461a      	mov	r2, r3
 8010476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801047a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801047e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801048a:	e841 2300 	strex	r3, r2, [r1]
 801048e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010496:	2b00      	cmp	r3, #0
 8010498:	d1da      	bne.n	8010450 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	3308      	adds	r3, #8
 80104a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104a4:	e853 3f00 	ldrex	r3, [r3]
 80104a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80104aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104ac:	f023 0301 	bic.w	r3, r3, #1
 80104b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	3308      	adds	r3, #8
 80104ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80104be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80104c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80104c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80104ca:	e841 2300 	strex	r3, r2, [r1]
 80104ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80104d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1e1      	bne.n	801049a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	3308      	adds	r3, #8
 80104dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104e0:	e853 3f00 	ldrex	r3, [r3]
 80104e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80104e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	3308      	adds	r3, #8
 80104f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80104fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80104fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010502:	e841 2300 	strex	r3, r2, [r1]
 8010506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1e3      	bne.n	80104d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2220      	movs	r2, #32
 8010512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2200      	movs	r2, #0
 801051a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010524:	e853 3f00 	ldrex	r3, [r3]
 8010528:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801052a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801052c:	f023 0310 	bic.w	r3, r3, #16
 8010530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	461a      	mov	r2, r3
 801053a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801053e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010540:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010542:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010546:	e841 2300 	strex	r3, r2, [r1]
 801054a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801054c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1e4      	bne.n	801051c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010558:	4618      	mov	r0, r3
 801055a:	f7fa ff1a 	bl	800b392 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2202      	movs	r2, #2
 8010562:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010570:	b29b      	uxth	r3, r3
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	b29b      	uxth	r3, r3
 8010576:	4619      	mov	r1, r3
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7f7 fa35 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801057e:	e0df      	b.n	8010740 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801058c:	b29b      	uxth	r3, r3
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801059a:	b29b      	uxth	r3, r3
 801059c:	2b00      	cmp	r3, #0
 801059e:	f000 80d1 	beq.w	8010744 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80105a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	f000 80cc 	beq.w	8010744 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b4:	e853 3f00 	ldrex	r3, [r3]
 80105b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80105ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	461a      	mov	r2, r3
 80105ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80105ce:	647b      	str	r3, [r7, #68]	; 0x44
 80105d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105d6:	e841 2300 	strex	r3, r2, [r1]
 80105da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80105dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1e4      	bne.n	80105ac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	3308      	adds	r3, #8
 80105e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ec:	e853 3f00 	ldrex	r3, [r3]
 80105f0:	623b      	str	r3, [r7, #32]
   return(result);
 80105f2:	6a3b      	ldr	r3, [r7, #32]
 80105f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80105f8:	f023 0301 	bic.w	r3, r3, #1
 80105fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	3308      	adds	r3, #8
 8010606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801060a:	633a      	str	r2, [r7, #48]	; 0x30
 801060c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010612:	e841 2300 	strex	r3, r2, [r1]
 8010616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061a:	2b00      	cmp	r3, #0
 801061c:	d1e1      	bne.n	80105e2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2220      	movs	r2, #32
 8010622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	e853 3f00 	ldrex	r3, [r3]
 801063e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f023 0310 	bic.w	r3, r3, #16
 8010646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	461a      	mov	r2, r3
 8010650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010654:	61fb      	str	r3, [r7, #28]
 8010656:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010658:	69b9      	ldr	r1, [r7, #24]
 801065a:	69fa      	ldr	r2, [r7, #28]
 801065c:	e841 2300 	strex	r3, r2, [r1]
 8010660:	617b      	str	r3, [r7, #20]
   return(result);
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d1e4      	bne.n	8010632 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2202      	movs	r2, #2
 801066c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801066e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010672:	4619      	mov	r1, r3
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f7f7 f9b7 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801067a:	e063      	b.n	8010744 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801067c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00e      	beq.n	80106a6 <HAL_UART_IRQHandler+0x59e>
 8010688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801068c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010690:	2b00      	cmp	r3, #0
 8010692:	d008      	beq.n	80106a6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801069c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f001 fd6d 	bl	801217e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106a4:	e051      	b.n	801074a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80106a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d014      	beq.n	80106dc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80106b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d105      	bne.n	80106ca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80106be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d008      	beq.n	80106dc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d03a      	beq.n	8010748 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	4798      	blx	r3
    }
    return;
 80106da:	e035      	b.n	8010748 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80106dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d009      	beq.n	80106fc <HAL_UART_IRQHandler+0x5f4>
 80106e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d003      	beq.n	80106fc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 ff91 	bl	801161c <UART_EndTransmit_IT>
    return;
 80106fa:	e026      	b.n	801074a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80106fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010700:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010704:	2b00      	cmp	r3, #0
 8010706:	d009      	beq.n	801071c <HAL_UART_IRQHandler+0x614>
 8010708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801070c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010710:	2b00      	cmp	r3, #0
 8010712:	d003      	beq.n	801071c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f001 fd46 	bl	80121a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801071a:	e016      	b.n	801074a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801071c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010724:	2b00      	cmp	r3, #0
 8010726:	d010      	beq.n	801074a <HAL_UART_IRQHandler+0x642>
 8010728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801072c:	2b00      	cmp	r3, #0
 801072e:	da0c      	bge.n	801074a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f001 fd2e 	bl	8012192 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010736:	e008      	b.n	801074a <HAL_UART_IRQHandler+0x642>
      return;
 8010738:	bf00      	nop
 801073a:	e006      	b.n	801074a <HAL_UART_IRQHandler+0x642>
    return;
 801073c:	bf00      	nop
 801073e:	e004      	b.n	801074a <HAL_UART_IRQHandler+0x642>
      return;
 8010740:	bf00      	nop
 8010742:	e002      	b.n	801074a <HAL_UART_IRQHandler+0x642>
      return;
 8010744:	bf00      	nop
 8010746:	e000      	b.n	801074a <HAL_UART_IRQHandler+0x642>
    return;
 8010748:	bf00      	nop
  }
}
 801074a:	37e8      	adds	r7, #232	; 0xe8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010750:	b480      	push	{r7}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010758:	bf00      	nop
 801075a:	370c      	adds	r7, #12
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801076c:	bf00      	nop
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010780:	bf00      	nop
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010794:	bf00      	nop
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	370c      	adds	r7, #12
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
	...

080107bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107c0:	b08c      	sub	sp, #48	; 0x30
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107c6:	2300      	movs	r3, #0
 80107c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	689a      	ldr	r2, [r3, #8]
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	691b      	ldr	r3, [r3, #16]
 80107d4:	431a      	orrs	r2, r3
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	695b      	ldr	r3, [r3, #20]
 80107da:	431a      	orrs	r2, r3
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	69db      	ldr	r3, [r3, #28]
 80107e0:	4313      	orrs	r3, r2
 80107e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	4baa      	ldr	r3, [pc, #680]	; (8010a94 <UART_SetConfig+0x2d8>)
 80107ec:	4013      	ands	r3, r2
 80107ee:	697a      	ldr	r2, [r7, #20]
 80107f0:	6812      	ldr	r2, [r2, #0]
 80107f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107f4:	430b      	orrs	r3, r1
 80107f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	68da      	ldr	r2, [r3, #12]
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	430a      	orrs	r2, r1
 801080c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	699b      	ldr	r3, [r3, #24]
 8010812:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4a9f      	ldr	r2, [pc, #636]	; (8010a98 <UART_SetConfig+0x2dc>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d004      	beq.n	8010828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	6a1b      	ldr	r3, [r3, #32]
 8010822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010824:	4313      	orrs	r3, r2
 8010826:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8010832:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8010836:	697a      	ldr	r2, [r7, #20]
 8010838:	6812      	ldr	r2, [r2, #0]
 801083a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801083c:	430b      	orrs	r3, r1
 801083e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010846:	f023 010f 	bic.w	r1, r3, #15
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	430a      	orrs	r2, r1
 8010854:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4a90      	ldr	r2, [pc, #576]	; (8010a9c <UART_SetConfig+0x2e0>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d125      	bne.n	80108ac <UART_SetConfig+0xf0>
 8010860:	4b8f      	ldr	r3, [pc, #572]	; (8010aa0 <UART_SetConfig+0x2e4>)
 8010862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010866:	f003 0303 	and.w	r3, r3, #3
 801086a:	2b03      	cmp	r3, #3
 801086c:	d81a      	bhi.n	80108a4 <UART_SetConfig+0xe8>
 801086e:	a201      	add	r2, pc, #4	; (adr r2, 8010874 <UART_SetConfig+0xb8>)
 8010870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010874:	08010885 	.word	0x08010885
 8010878:	08010895 	.word	0x08010895
 801087c:	0801088d 	.word	0x0801088d
 8010880:	0801089d 	.word	0x0801089d
 8010884:	2301      	movs	r3, #1
 8010886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801088a:	e116      	b.n	8010aba <UART_SetConfig+0x2fe>
 801088c:	2302      	movs	r3, #2
 801088e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010892:	e112      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010894:	2304      	movs	r3, #4
 8010896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801089a:	e10e      	b.n	8010aba <UART_SetConfig+0x2fe>
 801089c:	2308      	movs	r3, #8
 801089e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80108a2:	e10a      	b.n	8010aba <UART_SetConfig+0x2fe>
 80108a4:	2310      	movs	r3, #16
 80108a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80108aa:	e106      	b.n	8010aba <UART_SetConfig+0x2fe>
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4a7c      	ldr	r2, [pc, #496]	; (8010aa4 <UART_SetConfig+0x2e8>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d138      	bne.n	8010928 <UART_SetConfig+0x16c>
 80108b6:	4b7a      	ldr	r3, [pc, #488]	; (8010aa0 <UART_SetConfig+0x2e4>)
 80108b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108bc:	f003 030c 	and.w	r3, r3, #12
 80108c0:	2b0c      	cmp	r3, #12
 80108c2:	d82d      	bhi.n	8010920 <UART_SetConfig+0x164>
 80108c4:	a201      	add	r2, pc, #4	; (adr r2, 80108cc <UART_SetConfig+0x110>)
 80108c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ca:	bf00      	nop
 80108cc:	08010901 	.word	0x08010901
 80108d0:	08010921 	.word	0x08010921
 80108d4:	08010921 	.word	0x08010921
 80108d8:	08010921 	.word	0x08010921
 80108dc:	08010911 	.word	0x08010911
 80108e0:	08010921 	.word	0x08010921
 80108e4:	08010921 	.word	0x08010921
 80108e8:	08010921 	.word	0x08010921
 80108ec:	08010909 	.word	0x08010909
 80108f0:	08010921 	.word	0x08010921
 80108f4:	08010921 	.word	0x08010921
 80108f8:	08010921 	.word	0x08010921
 80108fc:	08010919 	.word	0x08010919
 8010900:	2300      	movs	r3, #0
 8010902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010906:	e0d8      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010908:	2302      	movs	r3, #2
 801090a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801090e:	e0d4      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010910:	2304      	movs	r3, #4
 8010912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010916:	e0d0      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010918:	2308      	movs	r3, #8
 801091a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801091e:	e0cc      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010920:	2310      	movs	r3, #16
 8010922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010926:	e0c8      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a5e      	ldr	r2, [pc, #376]	; (8010aa8 <UART_SetConfig+0x2ec>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d125      	bne.n	801097e <UART_SetConfig+0x1c2>
 8010932:	4b5b      	ldr	r3, [pc, #364]	; (8010aa0 <UART_SetConfig+0x2e4>)
 8010934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801093c:	2b30      	cmp	r3, #48	; 0x30
 801093e:	d016      	beq.n	801096e <UART_SetConfig+0x1b2>
 8010940:	2b30      	cmp	r3, #48	; 0x30
 8010942:	d818      	bhi.n	8010976 <UART_SetConfig+0x1ba>
 8010944:	2b20      	cmp	r3, #32
 8010946:	d00a      	beq.n	801095e <UART_SetConfig+0x1a2>
 8010948:	2b20      	cmp	r3, #32
 801094a:	d814      	bhi.n	8010976 <UART_SetConfig+0x1ba>
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <UART_SetConfig+0x19a>
 8010950:	2b10      	cmp	r3, #16
 8010952:	d008      	beq.n	8010966 <UART_SetConfig+0x1aa>
 8010954:	e00f      	b.n	8010976 <UART_SetConfig+0x1ba>
 8010956:	2300      	movs	r3, #0
 8010958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801095c:	e0ad      	b.n	8010aba <UART_SetConfig+0x2fe>
 801095e:	2302      	movs	r3, #2
 8010960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010964:	e0a9      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010966:	2304      	movs	r3, #4
 8010968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801096c:	e0a5      	b.n	8010aba <UART_SetConfig+0x2fe>
 801096e:	2308      	movs	r3, #8
 8010970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010974:	e0a1      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010976:	2310      	movs	r3, #16
 8010978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801097c:	e09d      	b.n	8010aba <UART_SetConfig+0x2fe>
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4a4a      	ldr	r2, [pc, #296]	; (8010aac <UART_SetConfig+0x2f0>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d125      	bne.n	80109d4 <UART_SetConfig+0x218>
 8010988:	4b45      	ldr	r3, [pc, #276]	; (8010aa0 <UART_SetConfig+0x2e4>)
 801098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801098e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010992:	2bc0      	cmp	r3, #192	; 0xc0
 8010994:	d016      	beq.n	80109c4 <UART_SetConfig+0x208>
 8010996:	2bc0      	cmp	r3, #192	; 0xc0
 8010998:	d818      	bhi.n	80109cc <UART_SetConfig+0x210>
 801099a:	2b80      	cmp	r3, #128	; 0x80
 801099c:	d00a      	beq.n	80109b4 <UART_SetConfig+0x1f8>
 801099e:	2b80      	cmp	r3, #128	; 0x80
 80109a0:	d814      	bhi.n	80109cc <UART_SetConfig+0x210>
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d002      	beq.n	80109ac <UART_SetConfig+0x1f0>
 80109a6:	2b40      	cmp	r3, #64	; 0x40
 80109a8:	d008      	beq.n	80109bc <UART_SetConfig+0x200>
 80109aa:	e00f      	b.n	80109cc <UART_SetConfig+0x210>
 80109ac:	2300      	movs	r3, #0
 80109ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109b2:	e082      	b.n	8010aba <UART_SetConfig+0x2fe>
 80109b4:	2302      	movs	r3, #2
 80109b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109ba:	e07e      	b.n	8010aba <UART_SetConfig+0x2fe>
 80109bc:	2304      	movs	r3, #4
 80109be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109c2:	e07a      	b.n	8010aba <UART_SetConfig+0x2fe>
 80109c4:	2308      	movs	r3, #8
 80109c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109ca:	e076      	b.n	8010aba <UART_SetConfig+0x2fe>
 80109cc:	2310      	movs	r3, #16
 80109ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109d2:	e072      	b.n	8010aba <UART_SetConfig+0x2fe>
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4a35      	ldr	r2, [pc, #212]	; (8010ab0 <UART_SetConfig+0x2f4>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d12a      	bne.n	8010a34 <UART_SetConfig+0x278>
 80109de:	4b30      	ldr	r3, [pc, #192]	; (8010aa0 <UART_SetConfig+0x2e4>)
 80109e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80109e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80109ec:	d01a      	beq.n	8010a24 <UART_SetConfig+0x268>
 80109ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80109f2:	d81b      	bhi.n	8010a2c <UART_SetConfig+0x270>
 80109f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109f8:	d00c      	beq.n	8010a14 <UART_SetConfig+0x258>
 80109fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109fe:	d815      	bhi.n	8010a2c <UART_SetConfig+0x270>
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d003      	beq.n	8010a0c <UART_SetConfig+0x250>
 8010a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a08:	d008      	beq.n	8010a1c <UART_SetConfig+0x260>
 8010a0a:	e00f      	b.n	8010a2c <UART_SetConfig+0x270>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a12:	e052      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a14:	2302      	movs	r3, #2
 8010a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a1a:	e04e      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a1c:	2304      	movs	r3, #4
 8010a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a22:	e04a      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a24:	2308      	movs	r3, #8
 8010a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a2a:	e046      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a2c:	2310      	movs	r3, #16
 8010a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a32:	e042      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	4a17      	ldr	r2, [pc, #92]	; (8010a98 <UART_SetConfig+0x2dc>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d13a      	bne.n	8010ab4 <UART_SetConfig+0x2f8>
 8010a3e:	4b18      	ldr	r3, [pc, #96]	; (8010aa0 <UART_SetConfig+0x2e4>)
 8010a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010a48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010a4c:	d01a      	beq.n	8010a84 <UART_SetConfig+0x2c8>
 8010a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010a52:	d81b      	bhi.n	8010a8c <UART_SetConfig+0x2d0>
 8010a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a58:	d00c      	beq.n	8010a74 <UART_SetConfig+0x2b8>
 8010a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a5e:	d815      	bhi.n	8010a8c <UART_SetConfig+0x2d0>
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d003      	beq.n	8010a6c <UART_SetConfig+0x2b0>
 8010a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a68:	d008      	beq.n	8010a7c <UART_SetConfig+0x2c0>
 8010a6a:	e00f      	b.n	8010a8c <UART_SetConfig+0x2d0>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a72:	e022      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a74:	2302      	movs	r3, #2
 8010a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a7a:	e01e      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a7c:	2304      	movs	r3, #4
 8010a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a82:	e01a      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a84:	2308      	movs	r3, #8
 8010a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a8a:	e016      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a8c:	2310      	movs	r3, #16
 8010a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a92:	e012      	b.n	8010aba <UART_SetConfig+0x2fe>
 8010a94:	cfff69f3 	.word	0xcfff69f3
 8010a98:	40008000 	.word	0x40008000
 8010a9c:	40013800 	.word	0x40013800
 8010aa0:	40021000 	.word	0x40021000
 8010aa4:	40004400 	.word	0x40004400
 8010aa8:	40004800 	.word	0x40004800
 8010aac:	40004c00 	.word	0x40004c00
 8010ab0:	40005000 	.word	0x40005000
 8010ab4:	2310      	movs	r3, #16
 8010ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4aae      	ldr	r2, [pc, #696]	; (8010d78 <UART_SetConfig+0x5bc>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	f040 8097 	bne.w	8010bf4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010aca:	2b08      	cmp	r3, #8
 8010acc:	d823      	bhi.n	8010b16 <UART_SetConfig+0x35a>
 8010ace:	a201      	add	r2, pc, #4	; (adr r2, 8010ad4 <UART_SetConfig+0x318>)
 8010ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad4:	08010af9 	.word	0x08010af9
 8010ad8:	08010b17 	.word	0x08010b17
 8010adc:	08010b01 	.word	0x08010b01
 8010ae0:	08010b17 	.word	0x08010b17
 8010ae4:	08010b07 	.word	0x08010b07
 8010ae8:	08010b17 	.word	0x08010b17
 8010aec:	08010b17 	.word	0x08010b17
 8010af0:	08010b17 	.word	0x08010b17
 8010af4:	08010b0f 	.word	0x08010b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010af8:	f7fd fbe2 	bl	800e2c0 <HAL_RCC_GetPCLK1Freq>
 8010afc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010afe:	e010      	b.n	8010b22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b00:	4b9e      	ldr	r3, [pc, #632]	; (8010d7c <UART_SetConfig+0x5c0>)
 8010b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010b04:	e00d      	b.n	8010b22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b06:	f7fd fb6d 	bl	800e1e4 <HAL_RCC_GetSysClockFreq>
 8010b0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010b0c:	e009      	b.n	8010b22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010b14:	e005      	b.n	8010b22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010b16:	2300      	movs	r3, #0
 8010b18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010b20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f000 8130 	beq.w	8010d8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b2e:	4a94      	ldr	r2, [pc, #592]	; (8010d80 <UART_SetConfig+0x5c4>)
 8010b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b34:	461a      	mov	r2, r3
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	685a      	ldr	r2, [r3, #4]
 8010b42:	4613      	mov	r3, r2
 8010b44:	005b      	lsls	r3, r3, #1
 8010b46:	4413      	add	r3, r2
 8010b48:	69ba      	ldr	r2, [r7, #24]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d305      	bcc.n	8010b5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b54:	69ba      	ldr	r2, [r7, #24]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d903      	bls.n	8010b62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010b60:	e113      	b.n	8010d8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b64:	2200      	movs	r2, #0
 8010b66:	60bb      	str	r3, [r7, #8]
 8010b68:	60fa      	str	r2, [r7, #12]
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b6e:	4a84      	ldr	r2, [pc, #528]	; (8010d80 <UART_SetConfig+0x5c4>)
 8010b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	2200      	movs	r2, #0
 8010b78:	603b      	str	r3, [r7, #0]
 8010b7a:	607a      	str	r2, [r7, #4]
 8010b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010b84:	f7f5 fcca 	bl	800651c <__aeabi_uldivmod>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	460b      	mov	r3, r1
 8010b8c:	4610      	mov	r0, r2
 8010b8e:	4619      	mov	r1, r3
 8010b90:	f04f 0200 	mov.w	r2, #0
 8010b94:	f04f 0300 	mov.w	r3, #0
 8010b98:	020b      	lsls	r3, r1, #8
 8010b9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010b9e:	0202      	lsls	r2, r0, #8
 8010ba0:	6979      	ldr	r1, [r7, #20]
 8010ba2:	6849      	ldr	r1, [r1, #4]
 8010ba4:	0849      	lsrs	r1, r1, #1
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	460c      	mov	r4, r1
 8010baa:	4605      	mov	r5, r0
 8010bac:	eb12 0804 	adds.w	r8, r2, r4
 8010bb0:	eb43 0905 	adc.w	r9, r3, r5
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	469a      	mov	sl, r3
 8010bbc:	4693      	mov	fp, r2
 8010bbe:	4652      	mov	r2, sl
 8010bc0:	465b      	mov	r3, fp
 8010bc2:	4640      	mov	r0, r8
 8010bc4:	4649      	mov	r1, r9
 8010bc6:	f7f5 fca9 	bl	800651c <__aeabi_uldivmod>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	460b      	mov	r3, r1
 8010bce:	4613      	mov	r3, r2
 8010bd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010bd2:	6a3b      	ldr	r3, [r7, #32]
 8010bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010bd8:	d308      	bcc.n	8010bec <UART_SetConfig+0x430>
 8010bda:	6a3b      	ldr	r3, [r7, #32]
 8010bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010be0:	d204      	bcs.n	8010bec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	6a3a      	ldr	r2, [r7, #32]
 8010be8:	60da      	str	r2, [r3, #12]
 8010bea:	e0ce      	b.n	8010d8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010bec:	2301      	movs	r3, #1
 8010bee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010bf2:	e0ca      	b.n	8010d8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	69db      	ldr	r3, [r3, #28]
 8010bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bfc:	d166      	bne.n	8010ccc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010c02:	2b08      	cmp	r3, #8
 8010c04:	d827      	bhi.n	8010c56 <UART_SetConfig+0x49a>
 8010c06:	a201      	add	r2, pc, #4	; (adr r2, 8010c0c <UART_SetConfig+0x450>)
 8010c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c0c:	08010c31 	.word	0x08010c31
 8010c10:	08010c39 	.word	0x08010c39
 8010c14:	08010c41 	.word	0x08010c41
 8010c18:	08010c57 	.word	0x08010c57
 8010c1c:	08010c47 	.word	0x08010c47
 8010c20:	08010c57 	.word	0x08010c57
 8010c24:	08010c57 	.word	0x08010c57
 8010c28:	08010c57 	.word	0x08010c57
 8010c2c:	08010c4f 	.word	0x08010c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c30:	f7fd fb46 	bl	800e2c0 <HAL_RCC_GetPCLK1Freq>
 8010c34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010c36:	e014      	b.n	8010c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c38:	f7fd fb58 	bl	800e2ec <HAL_RCC_GetPCLK2Freq>
 8010c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010c3e:	e010      	b.n	8010c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c40:	4b4e      	ldr	r3, [pc, #312]	; (8010d7c <UART_SetConfig+0x5c0>)
 8010c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010c44:	e00d      	b.n	8010c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c46:	f7fd facd 	bl	800e1e4 <HAL_RCC_GetSysClockFreq>
 8010c4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010c4c:	e009      	b.n	8010c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010c54:	e005      	b.n	8010c62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010c56:	2300      	movs	r3, #0
 8010c58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	f000 8090 	beq.w	8010d8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6e:	4a44      	ldr	r2, [pc, #272]	; (8010d80 <UART_SetConfig+0x5c4>)
 8010c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c74:	461a      	mov	r2, r3
 8010c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c7c:	005a      	lsls	r2, r3, #1
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	085b      	lsrs	r3, r3, #1
 8010c84:	441a      	add	r2, r3
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c90:	6a3b      	ldr	r3, [r7, #32]
 8010c92:	2b0f      	cmp	r3, #15
 8010c94:	d916      	bls.n	8010cc4 <UART_SetConfig+0x508>
 8010c96:	6a3b      	ldr	r3, [r7, #32]
 8010c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c9c:	d212      	bcs.n	8010cc4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c9e:	6a3b      	ldr	r3, [r7, #32]
 8010ca0:	b29b      	uxth	r3, r3
 8010ca2:	f023 030f 	bic.w	r3, r3, #15
 8010ca6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
 8010caa:	085b      	lsrs	r3, r3, #1
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	f003 0307 	and.w	r3, r3, #7
 8010cb2:	b29a      	uxth	r2, r3
 8010cb4:	8bfb      	ldrh	r3, [r7, #30]
 8010cb6:	4313      	orrs	r3, r2
 8010cb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	8bfa      	ldrh	r2, [r7, #30]
 8010cc0:	60da      	str	r2, [r3, #12]
 8010cc2:	e062      	b.n	8010d8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010cca:	e05e      	b.n	8010d8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010cd0:	2b08      	cmp	r3, #8
 8010cd2:	d828      	bhi.n	8010d26 <UART_SetConfig+0x56a>
 8010cd4:	a201      	add	r2, pc, #4	; (adr r2, 8010cdc <UART_SetConfig+0x520>)
 8010cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cda:	bf00      	nop
 8010cdc:	08010d01 	.word	0x08010d01
 8010ce0:	08010d09 	.word	0x08010d09
 8010ce4:	08010d11 	.word	0x08010d11
 8010ce8:	08010d27 	.word	0x08010d27
 8010cec:	08010d17 	.word	0x08010d17
 8010cf0:	08010d27 	.word	0x08010d27
 8010cf4:	08010d27 	.word	0x08010d27
 8010cf8:	08010d27 	.word	0x08010d27
 8010cfc:	08010d1f 	.word	0x08010d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d00:	f7fd fade 	bl	800e2c0 <HAL_RCC_GetPCLK1Freq>
 8010d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010d06:	e014      	b.n	8010d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d08:	f7fd faf0 	bl	800e2ec <HAL_RCC_GetPCLK2Freq>
 8010d0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010d0e:	e010      	b.n	8010d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d10:	4b1a      	ldr	r3, [pc, #104]	; (8010d7c <UART_SetConfig+0x5c0>)
 8010d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010d14:	e00d      	b.n	8010d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d16:	f7fd fa65 	bl	800e1e4 <HAL_RCC_GetSysClockFreq>
 8010d1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010d1c:	e009      	b.n	8010d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010d24:	e005      	b.n	8010d32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010d26:	2300      	movs	r3, #0
 8010d28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010d30:	bf00      	nop
    }

    if (pclk != 0U)
 8010d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d028      	beq.n	8010d8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d3c:	4a10      	ldr	r2, [pc, #64]	; (8010d80 <UART_SetConfig+0x5c4>)
 8010d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d42:	461a      	mov	r2, r3
 8010d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d46:	fbb3 f2f2 	udiv	r2, r3, r2
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	085b      	lsrs	r3, r3, #1
 8010d50:	441a      	add	r2, r3
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d5c:	6a3b      	ldr	r3, [r7, #32]
 8010d5e:	2b0f      	cmp	r3, #15
 8010d60:	d910      	bls.n	8010d84 <UART_SetConfig+0x5c8>
 8010d62:	6a3b      	ldr	r3, [r7, #32]
 8010d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d68:	d20c      	bcs.n	8010d84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010d6a:	6a3b      	ldr	r3, [r7, #32]
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	60da      	str	r2, [r3, #12]
 8010d74:	e009      	b.n	8010d8a <UART_SetConfig+0x5ce>
 8010d76:	bf00      	nop
 8010d78:	40008000 	.word	0x40008000
 8010d7c:	00f42400 	.word	0x00f42400
 8010d80:	08020ce8 	.word	0x08020ce8
      }
      else
      {
        ret = HAL_ERROR;
 8010d84:	2301      	movs	r3, #1
 8010d86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	2201      	movs	r2, #1
 8010d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	2200      	movs	r2, #0
 8010da4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010da6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3730      	adds	r7, #48	; 0x30
 8010dae:	46bd      	mov	sp, r7
 8010db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dc0:	f003 0308 	and.w	r3, r3, #8
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d00a      	beq.n	8010dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	430a      	orrs	r2, r1
 8010ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010de2:	f003 0301 	and.w	r3, r3, #1
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00a      	beq.n	8010e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	430a      	orrs	r2, r1
 8010dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e04:	f003 0302 	and.w	r3, r3, #2
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d00a      	beq.n	8010e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	430a      	orrs	r2, r1
 8010e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e26:	f003 0304 	and.w	r3, r3, #4
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00a      	beq.n	8010e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	430a      	orrs	r2, r1
 8010e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e48:	f003 0310 	and.w	r3, r3, #16
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00a      	beq.n	8010e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	689b      	ldr	r3, [r3, #8]
 8010e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	430a      	orrs	r2, r1
 8010e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e6a:	f003 0320 	and.w	r3, r3, #32
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d00a      	beq.n	8010e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	689b      	ldr	r3, [r3, #8]
 8010e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	430a      	orrs	r2, r1
 8010e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d01a      	beq.n	8010eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	430a      	orrs	r2, r1
 8010ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010eb2:	d10a      	bne.n	8010eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	430a      	orrs	r2, r1
 8010ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d00a      	beq.n	8010eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	430a      	orrs	r2, r1
 8010eea:	605a      	str	r2, [r3, #4]
  }
}
 8010eec:	bf00      	nop
 8010eee:	370c      	adds	r7, #12
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr

08010ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b098      	sub	sp, #96	; 0x60
 8010efc:	af02      	add	r7, sp, #8
 8010efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2200      	movs	r2, #0
 8010f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010f08:	f7f8 f9ae 	bl	8009268 <HAL_GetTick>
 8010f0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f003 0308 	and.w	r3, r3, #8
 8010f18:	2b08      	cmp	r3, #8
 8010f1a:	d12f      	bne.n	8010f7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010f20:	9300      	str	r3, [sp, #0]
 8010f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f24:	2200      	movs	r2, #0
 8010f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f000 f88e 	bl	801104c <UART_WaitOnFlagUntilTimeout>
 8010f30:	4603      	mov	r3, r0
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d022      	beq.n	8010f7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f3e:	e853 3f00 	ldrex	r3, [r3]
 8010f42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	461a      	mov	r2, r3
 8010f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f54:	647b      	str	r3, [r7, #68]	; 0x44
 8010f56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f5c:	e841 2300 	strex	r3, r2, [r1]
 8010f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d1e6      	bne.n	8010f36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2220      	movs	r2, #32
 8010f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2200      	movs	r2, #0
 8010f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f78:	2303      	movs	r3, #3
 8010f7a:	e063      	b.n	8011044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f003 0304 	and.w	r3, r3, #4
 8010f86:	2b04      	cmp	r3, #4
 8010f88:	d149      	bne.n	801101e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f92:	2200      	movs	r2, #0
 8010f94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 f857 	bl	801104c <UART_WaitOnFlagUntilTimeout>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d03c      	beq.n	801101e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fac:	e853 3f00 	ldrex	r3, [r3]
 8010fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8010fb2:	6a3b      	ldr	r3, [r7, #32]
 8010fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8010fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fca:	e841 2300 	strex	r3, r2, [r1]
 8010fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d1e6      	bne.n	8010fa4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	3308      	adds	r3, #8
 8010fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	e853 3f00 	ldrex	r3, [r3]
 8010fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	f023 0301 	bic.w	r3, r3, #1
 8010fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	3308      	adds	r3, #8
 8010ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ff6:	61fa      	str	r2, [r7, #28]
 8010ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ffa:	69b9      	ldr	r1, [r7, #24]
 8010ffc:	69fa      	ldr	r2, [r7, #28]
 8010ffe:	e841 2300 	strex	r3, r2, [r1]
 8011002:	617b      	str	r3, [r7, #20]
   return(result);
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d1e5      	bne.n	8010fd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2220      	movs	r2, #32
 801100e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2200      	movs	r2, #0
 8011016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801101a:	2303      	movs	r3, #3
 801101c:	e012      	b.n	8011044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2220      	movs	r2, #32
 8011022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2220      	movs	r2, #32
 801102a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2200      	movs	r2, #0
 8011032:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2200      	movs	r2, #0
 801103e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011042:	2300      	movs	r3, #0
}
 8011044:	4618      	mov	r0, r3
 8011046:	3758      	adds	r7, #88	; 0x58
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	603b      	str	r3, [r7, #0]
 8011058:	4613      	mov	r3, r2
 801105a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801105c:	e04f      	b.n	80110fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011064:	d04b      	beq.n	80110fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011066:	f7f8 f8ff 	bl	8009268 <HAL_GetTick>
 801106a:	4602      	mov	r2, r0
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	1ad3      	subs	r3, r2, r3
 8011070:	69ba      	ldr	r2, [r7, #24]
 8011072:	429a      	cmp	r2, r3
 8011074:	d302      	bcc.n	801107c <UART_WaitOnFlagUntilTimeout+0x30>
 8011076:	69bb      	ldr	r3, [r7, #24]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d101      	bne.n	8011080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801107c:	2303      	movs	r3, #3
 801107e:	e04e      	b.n	801111e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f003 0304 	and.w	r3, r3, #4
 801108a:	2b00      	cmp	r3, #0
 801108c:	d037      	beq.n	80110fe <UART_WaitOnFlagUntilTimeout+0xb2>
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	2b80      	cmp	r3, #128	; 0x80
 8011092:	d034      	beq.n	80110fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	2b40      	cmp	r3, #64	; 0x40
 8011098:	d031      	beq.n	80110fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	69db      	ldr	r3, [r3, #28]
 80110a0:	f003 0308 	and.w	r3, r3, #8
 80110a4:	2b08      	cmp	r3, #8
 80110a6:	d110      	bne.n	80110ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2208      	movs	r2, #8
 80110ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f000 f99c 	bl	80113ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2208      	movs	r2, #8
 80110ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2200      	movs	r2, #0
 80110c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80110c6:	2301      	movs	r3, #1
 80110c8:	e029      	b.n	801111e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	69db      	ldr	r3, [r3, #28]
 80110d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80110d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110d8:	d111      	bne.n	80110fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80110e4:	68f8      	ldr	r0, [r7, #12]
 80110e6:	f000 f982 	bl	80113ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	2220      	movs	r2, #32
 80110ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2200      	movs	r2, #0
 80110f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80110fa:	2303      	movs	r3, #3
 80110fc:	e00f      	b.n	801111e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	69da      	ldr	r2, [r3, #28]
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	4013      	ands	r3, r2
 8011108:	68ba      	ldr	r2, [r7, #8]
 801110a:	429a      	cmp	r2, r3
 801110c:	bf0c      	ite	eq
 801110e:	2301      	moveq	r3, #1
 8011110:	2300      	movne	r3, #0
 8011112:	b2db      	uxtb	r3, r3
 8011114:	461a      	mov	r2, r3
 8011116:	79fb      	ldrb	r3, [r7, #7]
 8011118:	429a      	cmp	r2, r3
 801111a:	d0a0      	beq.n	801105e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801111c:	2300      	movs	r3, #0
}
 801111e:	4618      	mov	r0, r3
 8011120:	3710      	adds	r7, #16
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
	...

08011128 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011128:	b480      	push	{r7}
 801112a:	b0a3      	sub	sp, #140	; 0x8c
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	4613      	mov	r3, r2
 8011134:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	68ba      	ldr	r2, [r7, #8]
 801113a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	88fa      	ldrh	r2, [r7, #6]
 8011140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	88fa      	ldrh	r2, [r7, #6]
 8011148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2200      	movs	r2, #0
 8011150:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	689b      	ldr	r3, [r3, #8]
 8011156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801115a:	d10e      	bne.n	801117a <UART_Start_Receive_IT+0x52>
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	691b      	ldr	r3, [r3, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d105      	bne.n	8011170 <UART_Start_Receive_IT+0x48>
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f240 12ff 	movw	r2, #511	; 0x1ff
 801116a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801116e:	e02d      	b.n	80111cc <UART_Start_Receive_IT+0xa4>
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	22ff      	movs	r2, #255	; 0xff
 8011174:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011178:	e028      	b.n	80111cc <UART_Start_Receive_IT+0xa4>
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	689b      	ldr	r3, [r3, #8]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10d      	bne.n	801119e <UART_Start_Receive_IT+0x76>
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d104      	bne.n	8011194 <UART_Start_Receive_IT+0x6c>
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	22ff      	movs	r2, #255	; 0xff
 801118e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011192:	e01b      	b.n	80111cc <UART_Start_Receive_IT+0xa4>
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	227f      	movs	r2, #127	; 0x7f
 8011198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801119c:	e016      	b.n	80111cc <UART_Start_Receive_IT+0xa4>
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	689b      	ldr	r3, [r3, #8]
 80111a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80111a6:	d10d      	bne.n	80111c4 <UART_Start_Receive_IT+0x9c>
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	691b      	ldr	r3, [r3, #16]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d104      	bne.n	80111ba <UART_Start_Receive_IT+0x92>
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	227f      	movs	r2, #127	; 0x7f
 80111b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80111b8:	e008      	b.n	80111cc <UART_Start_Receive_IT+0xa4>
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	223f      	movs	r2, #63	; 0x3f
 80111be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80111c2:	e003      	b.n	80111cc <UART_Start_Receive_IT+0xa4>
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2200      	movs	r2, #0
 80111c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2200      	movs	r2, #0
 80111d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2222      	movs	r2, #34	; 0x22
 80111d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	3308      	adds	r3, #8
 80111e2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111e6:	e853 3f00 	ldrex	r3, [r3]
 80111ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80111ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111ee:	f043 0301 	orr.w	r3, r3, #1
 80111f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	3308      	adds	r3, #8
 80111fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011200:	673a      	str	r2, [r7, #112]	; 0x70
 8011202:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011204:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011206:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011208:	e841 2300 	strex	r3, r2, [r1]
 801120c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801120e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011210:	2b00      	cmp	r3, #0
 8011212:	d1e3      	bne.n	80111dc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801121c:	d14f      	bne.n	80112be <UART_Start_Receive_IT+0x196>
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011224:	88fa      	ldrh	r2, [r7, #6]
 8011226:	429a      	cmp	r2, r3
 8011228:	d349      	bcc.n	80112be <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	689b      	ldr	r3, [r3, #8]
 801122e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011232:	d107      	bne.n	8011244 <UART_Start_Receive_IT+0x11c>
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	691b      	ldr	r3, [r3, #16]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d103      	bne.n	8011244 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	4a47      	ldr	r2, [pc, #284]	; (801135c <UART_Start_Receive_IT+0x234>)
 8011240:	675a      	str	r2, [r3, #116]	; 0x74
 8011242:	e002      	b.n	801124a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	4a46      	ldr	r2, [pc, #280]	; (8011360 <UART_Start_Receive_IT+0x238>)
 8011248:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	691b      	ldr	r3, [r3, #16]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d01a      	beq.n	8011288 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801125a:	e853 3f00 	ldrex	r3, [r3]
 801125e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011266:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	461a      	mov	r2, r3
 8011270:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011276:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011278:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801127a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801127c:	e841 2300 	strex	r3, r2, [r1]
 8011280:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011284:	2b00      	cmp	r3, #0
 8011286:	d1e4      	bne.n	8011252 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	3308      	adds	r3, #8
 801128e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011292:	e853 3f00 	ldrex	r3, [r3]
 8011296:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801129e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	3308      	adds	r3, #8
 80112a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80112a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80112aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80112ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80112b0:	e841 2300 	strex	r3, r2, [r1]
 80112b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80112b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d1e5      	bne.n	8011288 <UART_Start_Receive_IT+0x160>
 80112bc:	e046      	b.n	801134c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	689b      	ldr	r3, [r3, #8]
 80112c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80112c6:	d107      	bne.n	80112d8 <UART_Start_Receive_IT+0x1b0>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	691b      	ldr	r3, [r3, #16]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d103      	bne.n	80112d8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	4a24      	ldr	r2, [pc, #144]	; (8011364 <UART_Start_Receive_IT+0x23c>)
 80112d4:	675a      	str	r2, [r3, #116]	; 0x74
 80112d6:	e002      	b.n	80112de <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	4a23      	ldr	r2, [pc, #140]	; (8011368 <UART_Start_Receive_IT+0x240>)
 80112dc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	691b      	ldr	r3, [r3, #16]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d019      	beq.n	801131a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ee:	e853 3f00 	ldrex	r3, [r3]
 80112f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80112f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80112fa:	677b      	str	r3, [r7, #116]	; 0x74
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	461a      	mov	r2, r3
 8011302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011304:	637b      	str	r3, [r7, #52]	; 0x34
 8011306:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801130a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801130c:	e841 2300 	strex	r3, r2, [r1]
 8011310:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011314:	2b00      	cmp	r3, #0
 8011316:	d1e6      	bne.n	80112e6 <UART_Start_Receive_IT+0x1be>
 8011318:	e018      	b.n	801134c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	e853 3f00 	ldrex	r3, [r3]
 8011326:	613b      	str	r3, [r7, #16]
   return(result);
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	f043 0320 	orr.w	r3, r3, #32
 801132e:	67bb      	str	r3, [r7, #120]	; 0x78
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	461a      	mov	r2, r3
 8011336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011338:	623b      	str	r3, [r7, #32]
 801133a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801133c:	69f9      	ldr	r1, [r7, #28]
 801133e:	6a3a      	ldr	r2, [r7, #32]
 8011340:	e841 2300 	strex	r3, r2, [r1]
 8011344:	61bb      	str	r3, [r7, #24]
   return(result);
 8011346:	69bb      	ldr	r3, [r7, #24]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d1e6      	bne.n	801131a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801134c:	2300      	movs	r3, #0
}
 801134e:	4618      	mov	r0, r3
 8011350:	378c      	adds	r7, #140	; 0x8c
 8011352:	46bd      	mov	sp, r7
 8011354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	08011d45 	.word	0x08011d45
 8011360:	080119e5 	.word	0x080119e5
 8011364:	0801182d 	.word	0x0801182d
 8011368:	08011675 	.word	0x08011675

0801136c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801136c:	b480      	push	{r7}
 801136e:	b08f      	sub	sp, #60	; 0x3c
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801137a:	6a3b      	ldr	r3, [r7, #32]
 801137c:	e853 3f00 	ldrex	r3, [r3]
 8011380:	61fb      	str	r3, [r7, #28]
   return(result);
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011388:	637b      	str	r3, [r7, #52]	; 0x34
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	461a      	mov	r2, r3
 8011390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011394:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801139a:	e841 2300 	strex	r3, r2, [r1]
 801139e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80113a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d1e6      	bne.n	8011374 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	3308      	adds	r3, #8
 80113ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	e853 3f00 	ldrex	r3, [r3]
 80113b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80113bc:	633b      	str	r3, [r7, #48]	; 0x30
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	3308      	adds	r3, #8
 80113c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113c6:	61ba      	str	r2, [r7, #24]
 80113c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ca:	6979      	ldr	r1, [r7, #20]
 80113cc:	69ba      	ldr	r2, [r7, #24]
 80113ce:	e841 2300 	strex	r3, r2, [r1]
 80113d2:	613b      	str	r3, [r7, #16]
   return(result);
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d1e5      	bne.n	80113a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2220      	movs	r2, #32
 80113de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80113e2:	bf00      	nop
 80113e4:	373c      	adds	r7, #60	; 0x3c
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr

080113ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80113ee:	b480      	push	{r7}
 80113f0:	b095      	sub	sp, #84	; 0x54
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113fe:	e853 3f00 	ldrex	r3, [r3]
 8011402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801140a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	461a      	mov	r2, r3
 8011412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011414:	643b      	str	r3, [r7, #64]	; 0x40
 8011416:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801141a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801141c:	e841 2300 	strex	r3, r2, [r1]
 8011420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011424:	2b00      	cmp	r3, #0
 8011426:	d1e6      	bne.n	80113f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	3308      	adds	r3, #8
 801142e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011430:	6a3b      	ldr	r3, [r7, #32]
 8011432:	e853 3f00 	ldrex	r3, [r3]
 8011436:	61fb      	str	r3, [r7, #28]
   return(result);
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801143e:	f023 0301 	bic.w	r3, r3, #1
 8011442:	64bb      	str	r3, [r7, #72]	; 0x48
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	3308      	adds	r3, #8
 801144a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801144c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801144e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011454:	e841 2300 	strex	r3, r2, [r1]
 8011458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145c:	2b00      	cmp	r3, #0
 801145e:	d1e3      	bne.n	8011428 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011464:	2b01      	cmp	r3, #1
 8011466:	d118      	bne.n	801149a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	e853 3f00 	ldrex	r3, [r3]
 8011474:	60bb      	str	r3, [r7, #8]
   return(result);
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	f023 0310 	bic.w	r3, r3, #16
 801147c:	647b      	str	r3, [r7, #68]	; 0x44
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	461a      	mov	r2, r3
 8011484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011486:	61bb      	str	r3, [r7, #24]
 8011488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801148a:	6979      	ldr	r1, [r7, #20]
 801148c:	69ba      	ldr	r2, [r7, #24]
 801148e:	e841 2300 	strex	r3, r2, [r1]
 8011492:	613b      	str	r3, [r7, #16]
   return(result);
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1e6      	bne.n	8011468 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2220      	movs	r2, #32
 801149e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2200      	movs	r2, #0
 80114a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2200      	movs	r2, #0
 80114ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80114ae:	bf00      	nop
 80114b0:	3754      	adds	r7, #84	; 0x54
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b090      	sub	sp, #64	; 0x40
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	f003 0320 	and.w	r3, r3, #32
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d137      	bne.n	8011546 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80114d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d8:	2200      	movs	r2, #0
 80114da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80114de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	3308      	adds	r3, #8
 80114e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e8:	e853 3f00 	ldrex	r3, [r3]
 80114ec:	623b      	str	r3, [r7, #32]
   return(result);
 80114ee:	6a3b      	ldr	r3, [r7, #32]
 80114f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80114f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	3308      	adds	r3, #8
 80114fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114fe:	633a      	str	r2, [r7, #48]	; 0x30
 8011500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011506:	e841 2300 	strex	r3, r2, [r1]
 801150a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1e5      	bne.n	80114de <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	e853 3f00 	ldrex	r3, [r3]
 801151e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011526:	637b      	str	r3, [r7, #52]	; 0x34
 8011528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	461a      	mov	r2, r3
 801152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011530:	61fb      	str	r3, [r7, #28]
 8011532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011534:	69b9      	ldr	r1, [r7, #24]
 8011536:	69fa      	ldr	r2, [r7, #28]
 8011538:	e841 2300 	strex	r3, r2, [r1]
 801153c:	617b      	str	r3, [r7, #20]
   return(result);
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d1e6      	bne.n	8011512 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011544:	e002      	b.n	801154c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011546:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011548:	f7ff f902 	bl	8010750 <HAL_UART_TxCpltCallback>
}
 801154c:	bf00      	nop
 801154e:	3740      	adds	r7, #64	; 0x40
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}

08011554 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011560:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011562:	68f8      	ldr	r0, [r7, #12]
 8011564:	f7ff f8fe 	bl	8010764 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011568:	bf00      	nop
 801156a:	3710      	adds	r7, #16
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b086      	sub	sp, #24
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801157c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011584:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801158c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	689b      	ldr	r3, [r3, #8]
 8011594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011598:	2b80      	cmp	r3, #128	; 0x80
 801159a:	d109      	bne.n	80115b0 <UART_DMAError+0x40>
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	2b21      	cmp	r3, #33	; 0x21
 80115a0:	d106      	bne.n	80115b0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	2200      	movs	r2, #0
 80115a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80115aa:	6978      	ldr	r0, [r7, #20]
 80115ac:	f7ff fede 	bl	801136c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	689b      	ldr	r3, [r3, #8]
 80115b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115ba:	2b40      	cmp	r3, #64	; 0x40
 80115bc:	d109      	bne.n	80115d2 <UART_DMAError+0x62>
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2b22      	cmp	r3, #34	; 0x22
 80115c2:	d106      	bne.n	80115d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	2200      	movs	r2, #0
 80115c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80115cc:	6978      	ldr	r0, [r7, #20]
 80115ce:	f7ff ff0e 	bl	80113ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115d8:	f043 0210 	orr.w	r2, r3, #16
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80115e2:	6978      	ldr	r0, [r7, #20]
 80115e4:	f7ff f8d2 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115e8:	bf00      	nop
 80115ea:	3718      	adds	r7, #24
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2200      	movs	r2, #0
 8011602:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	2200      	movs	r2, #0
 801160a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801160e:	68f8      	ldr	r0, [r7, #12]
 8011610:	f7ff f8bc 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011614:	bf00      	nop
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b088      	sub	sp, #32
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	e853 3f00 	ldrex	r3, [r3]
 8011630:	60bb      	str	r3, [r7, #8]
   return(result);
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011638:	61fb      	str	r3, [r7, #28]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	461a      	mov	r2, r3
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	61bb      	str	r3, [r7, #24]
 8011644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011646:	6979      	ldr	r1, [r7, #20]
 8011648:	69ba      	ldr	r2, [r7, #24]
 801164a:	e841 2300 	strex	r3, r2, [r1]
 801164e:	613b      	str	r3, [r7, #16]
   return(result);
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1e6      	bne.n	8011624 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2220      	movs	r2, #32
 801165a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f7ff f873 	bl	8010750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801166a:	bf00      	nop
 801166c:	3720      	adds	r7, #32
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
	...

08011674 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b09c      	sub	sp, #112	; 0x70
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011682:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801168c:	2b22      	cmp	r3, #34	; 0x22
 801168e:	f040 80be 	bne.w	801180e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011698:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801169c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80116a0:	b2d9      	uxtb	r1, r3
 80116a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80116a6:	b2da      	uxtb	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116ac:	400a      	ands	r2, r1
 80116ae:	b2d2      	uxtb	r2, r2
 80116b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116b6:	1c5a      	adds	r2, r3, #1
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	3b01      	subs	r3, #1
 80116c6:	b29a      	uxth	r2, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f040 80a1 	bne.w	801181e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e4:	e853 3f00 	ldrex	r3, [r3]
 80116e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80116ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80116f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	461a      	mov	r2, r3
 80116f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80116fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011702:	e841 2300 	strex	r3, r2, [r1]
 8011706:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801170a:	2b00      	cmp	r3, #0
 801170c:	d1e6      	bne.n	80116dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	3308      	adds	r3, #8
 8011714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	e853 3f00 	ldrex	r3, [r3]
 801171c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801171e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011720:	f023 0301 	bic.w	r3, r3, #1
 8011724:	667b      	str	r3, [r7, #100]	; 0x64
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	3308      	adds	r3, #8
 801172c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801172e:	647a      	str	r2, [r7, #68]	; 0x44
 8011730:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011736:	e841 2300 	strex	r3, r2, [r1]
 801173a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801173c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1e5      	bne.n	801170e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2220      	movs	r2, #32
 8011746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2200      	movs	r2, #0
 801174e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2200      	movs	r2, #0
 8011754:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	4a33      	ldr	r2, [pc, #204]	; (8011828 <UART_RxISR_8BIT+0x1b4>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d01f      	beq.n	80117a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801176a:	2b00      	cmp	r3, #0
 801176c:	d018      	beq.n	80117a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011776:	e853 3f00 	ldrex	r3, [r3]
 801177a:	623b      	str	r3, [r7, #32]
   return(result);
 801177c:	6a3b      	ldr	r3, [r7, #32]
 801177e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011782:	663b      	str	r3, [r7, #96]	; 0x60
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	461a      	mov	r2, r3
 801178a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801178c:	633b      	str	r3, [r7, #48]	; 0x30
 801178e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011794:	e841 2300 	strex	r3, r2, [r1]
 8011798:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801179c:	2b00      	cmp	r3, #0
 801179e:	d1e6      	bne.n	801176e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d12e      	bne.n	8011806 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	e853 3f00 	ldrex	r3, [r3]
 80117ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	f023 0310 	bic.w	r3, r3, #16
 80117c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	461a      	mov	r2, r3
 80117ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117cc:	61fb      	str	r3, [r7, #28]
 80117ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117d0:	69b9      	ldr	r1, [r7, #24]
 80117d2:	69fa      	ldr	r2, [r7, #28]
 80117d4:	e841 2300 	strex	r3, r2, [r1]
 80117d8:	617b      	str	r3, [r7, #20]
   return(result);
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1e6      	bne.n	80117ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	69db      	ldr	r3, [r3, #28]
 80117e6:	f003 0310 	and.w	r3, r3, #16
 80117ea:	2b10      	cmp	r3, #16
 80117ec:	d103      	bne.n	80117f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2210      	movs	r2, #16
 80117f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80117fc:	4619      	mov	r1, r3
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7f6 f8f2 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011804:	e00b      	b.n	801181e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f7fe ffb6 	bl	8010778 <HAL_UART_RxCpltCallback>
}
 801180c:	e007      	b.n	801181e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	699a      	ldr	r2, [r3, #24]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f042 0208 	orr.w	r2, r2, #8
 801181c:	619a      	str	r2, [r3, #24]
}
 801181e:	bf00      	nop
 8011820:	3770      	adds	r7, #112	; 0x70
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	40008000 	.word	0x40008000

0801182c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b09c      	sub	sp, #112	; 0x70
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801183a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011844:	2b22      	cmp	r3, #34	; 0x22
 8011846:	f040 80be 	bne.w	80119c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011850:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011858:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801185a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801185e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011862:	4013      	ands	r3, r2
 8011864:	b29a      	uxth	r2, r3
 8011866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011868:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801186e:	1c9a      	adds	r2, r3, #2
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801187a:	b29b      	uxth	r3, r3
 801187c:	3b01      	subs	r3, #1
 801187e:	b29a      	uxth	r2, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801188c:	b29b      	uxth	r3, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	f040 80a1 	bne.w	80119d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801189a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801189c:	e853 3f00 	ldrex	r3, [r3]
 80118a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80118a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80118a8:	667b      	str	r3, [r7, #100]	; 0x64
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	461a      	mov	r2, r3
 80118b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80118b2:	657b      	str	r3, [r7, #84]	; 0x54
 80118b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80118b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118ba:	e841 2300 	strex	r3, r2, [r1]
 80118be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80118c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d1e6      	bne.n	8011894 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	3308      	adds	r3, #8
 80118cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d0:	e853 3f00 	ldrex	r3, [r3]
 80118d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80118d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d8:	f023 0301 	bic.w	r3, r3, #1
 80118dc:	663b      	str	r3, [r7, #96]	; 0x60
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	3308      	adds	r3, #8
 80118e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118e6:	643a      	str	r2, [r7, #64]	; 0x40
 80118e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80118ee:	e841 2300 	strex	r3, r2, [r1]
 80118f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80118f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d1e5      	bne.n	80118c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2220      	movs	r2, #32
 80118fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4a33      	ldr	r2, [pc, #204]	; (80119e0 <UART_RxISR_16BIT+0x1b4>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d01f      	beq.n	8011958 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011922:	2b00      	cmp	r3, #0
 8011924:	d018      	beq.n	8011958 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801192c:	6a3b      	ldr	r3, [r7, #32]
 801192e:	e853 3f00 	ldrex	r3, [r3]
 8011932:	61fb      	str	r3, [r7, #28]
   return(result);
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801193a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	461a      	mov	r2, r3
 8011942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011946:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801194a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801194c:	e841 2300 	strex	r3, r2, [r1]
 8011950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011954:	2b00      	cmp	r3, #0
 8011956:	d1e6      	bne.n	8011926 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801195c:	2b01      	cmp	r3, #1
 801195e:	d12e      	bne.n	80119be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	e853 3f00 	ldrex	r3, [r3]
 8011972:	60bb      	str	r3, [r7, #8]
   return(result);
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	f023 0310 	bic.w	r3, r3, #16
 801197a:	65bb      	str	r3, [r7, #88]	; 0x58
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	461a      	mov	r2, r3
 8011982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011984:	61bb      	str	r3, [r7, #24]
 8011986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011988:	6979      	ldr	r1, [r7, #20]
 801198a:	69ba      	ldr	r2, [r7, #24]
 801198c:	e841 2300 	strex	r3, r2, [r1]
 8011990:	613b      	str	r3, [r7, #16]
   return(result);
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d1e6      	bne.n	8011966 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	69db      	ldr	r3, [r3, #28]
 801199e:	f003 0310 	and.w	r3, r3, #16
 80119a2:	2b10      	cmp	r3, #16
 80119a4:	d103      	bne.n	80119ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2210      	movs	r2, #16
 80119ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80119b4:	4619      	mov	r1, r3
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7f6 f816 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80119bc:	e00b      	b.n	80119d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f7fe feda 	bl	8010778 <HAL_UART_RxCpltCallback>
}
 80119c4:	e007      	b.n	80119d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	699a      	ldr	r2, [r3, #24]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f042 0208 	orr.w	r2, r2, #8
 80119d4:	619a      	str	r2, [r3, #24]
}
 80119d6:	bf00      	nop
 80119d8:	3770      	adds	r7, #112	; 0x70
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	40008000 	.word	0x40008000

080119e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b0ac      	sub	sp, #176	; 0xb0
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80119f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	69db      	ldr	r3, [r3, #28]
 80119fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a1a:	2b22      	cmp	r3, #34	; 0x22
 8011a1c:	f040 8182 	bne.w	8011d24 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011a26:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011a2a:	e125      	b.n	8011c78 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a32:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011a36:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011a3a:	b2d9      	uxtb	r1, r3
 8011a3c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011a40:	b2da      	uxtb	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a46:	400a      	ands	r2, r1
 8011a48:	b2d2      	uxtb	r2, r2
 8011a4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a50:	1c5a      	adds	r2, r3, #1
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	69db      	ldr	r3, [r3, #28]
 8011a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011a76:	f003 0307 	and.w	r3, r3, #7
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d053      	beq.n	8011b26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011a82:	f003 0301 	and.w	r3, r3, #1
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d011      	beq.n	8011aae <UART_RxISR_8BIT_FIFOEN+0xca>
 8011a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d00b      	beq.n	8011aae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011aa4:	f043 0201 	orr.w	r2, r3, #1
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ab2:	f003 0302 	and.w	r3, r3, #2
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d011      	beq.n	8011ade <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011abe:	f003 0301 	and.w	r3, r3, #1
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d00b      	beq.n	8011ade <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	2202      	movs	r2, #2
 8011acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ad4:	f043 0204 	orr.w	r2, r3, #4
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ae2:	f003 0304 	and.w	r3, r3, #4
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d011      	beq.n	8011b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011aee:	f003 0301 	and.w	r3, r3, #1
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d00b      	beq.n	8011b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2204      	movs	r2, #4
 8011afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b04:	f043 0202 	orr.w	r2, r3, #2
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d006      	beq.n	8011b26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f7fe fe37 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	f040 80a2 	bne.w	8011c78 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b3c:	e853 3f00 	ldrex	r3, [r3]
 8011b40:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	461a      	mov	r2, r3
 8011b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011b58:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b5a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011b5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011b5e:	e841 2300 	strex	r3, r2, [r1]
 8011b62:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1e4      	bne.n	8011b34 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	3308      	adds	r3, #8
 8011b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b74:	e853 3f00 	ldrex	r3, [r3]
 8011b78:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011b80:	f023 0301 	bic.w	r3, r3, #1
 8011b84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	3308      	adds	r3, #8
 8011b8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011b92:	66ba      	str	r2, [r7, #104]	; 0x68
 8011b94:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b96:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011b98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011b9a:	e841 2300 	strex	r3, r2, [r1]
 8011b9e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d1e1      	bne.n	8011b6a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2220      	movs	r2, #32
 8011baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	4a5f      	ldr	r2, [pc, #380]	; (8011d3c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011bc0:	4293      	cmp	r3, r2
 8011bc2:	d021      	beq.n	8011c08 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d01a      	beq.n	8011c08 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bda:	e853 3f00 	ldrex	r3, [r3]
 8011bde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011bf4:	657b      	str	r3, [r7, #84]	; 0x54
 8011bf6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011bfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011bfc:	e841 2300 	strex	r3, r2, [r1]
 8011c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d1e4      	bne.n	8011bd2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d130      	bne.n	8011c72 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2200      	movs	r2, #0
 8011c14:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1e:	e853 3f00 	ldrex	r3, [r3]
 8011c22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c26:	f023 0310 	bic.w	r3, r3, #16
 8011c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	461a      	mov	r2, r3
 8011c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c38:	643b      	str	r3, [r7, #64]	; 0x40
 8011c3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c40:	e841 2300 	strex	r3, r2, [r1]
 8011c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d1e4      	bne.n	8011c16 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	69db      	ldr	r3, [r3, #28]
 8011c52:	f003 0310 	and.w	r3, r3, #16
 8011c56:	2b10      	cmp	r3, #16
 8011c58:	d103      	bne.n	8011c62 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	2210      	movs	r2, #16
 8011c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011c68:	4619      	mov	r1, r3
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7f5 febc 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
 8011c70:	e002      	b.n	8011c78 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f7fe fd80 	bl	8010778 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011c78:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d006      	beq.n	8011c8e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8011c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011c84:	f003 0320 	and.w	r3, r3, #32
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f47f aecf 	bne.w	8011a2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c94:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011c98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d049      	beq.n	8011d34 <UART_RxISR_8BIT_FIFOEN+0x350>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ca6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d242      	bcs.n	8011d34 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	3308      	adds	r3, #8
 8011cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb6:	6a3b      	ldr	r3, [r7, #32]
 8011cb8:	e853 3f00 	ldrex	r3, [r3]
 8011cbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	3308      	adds	r3, #8
 8011cce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cda:	e841 2300 	strex	r3, r2, [r1]
 8011cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1e3      	bne.n	8011cae <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	4a15      	ldr	r2, [pc, #84]	; (8011d40 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011cea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	e853 3f00 	ldrex	r3, [r3]
 8011cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	f043 0320 	orr.w	r3, r3, #32
 8011d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	461a      	mov	r2, r3
 8011d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d0e:	61bb      	str	r3, [r7, #24]
 8011d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d12:	6979      	ldr	r1, [r7, #20]
 8011d14:	69ba      	ldr	r2, [r7, #24]
 8011d16:	e841 2300 	strex	r3, r2, [r1]
 8011d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d1e4      	bne.n	8011cec <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011d22:	e007      	b.n	8011d34 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	699a      	ldr	r2, [r3, #24]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f042 0208 	orr.w	r2, r2, #8
 8011d32:	619a      	str	r2, [r3, #24]
}
 8011d34:	bf00      	nop
 8011d36:	37b0      	adds	r7, #176	; 0xb0
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	40008000 	.word	0x40008000
 8011d40:	08011675 	.word	0x08011675

08011d44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b0ae      	sub	sp, #184	; 0xb8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d52:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	69db      	ldr	r3, [r3, #28]
 8011d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	689b      	ldr	r3, [r3, #8]
 8011d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d7a:	2b22      	cmp	r3, #34	; 0x22
 8011d7c:	f040 8186 	bne.w	801208c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d86:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011d8a:	e129      	b.n	8011fe0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d92:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011d9e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011da2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011da6:	4013      	ands	r3, r2
 8011da8:	b29a      	uxth	r2, r3
 8011daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011dae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011db4:	1c9a      	adds	r2, r3, #2
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	3b01      	subs	r3, #1
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	69db      	ldr	r3, [r3, #28]
 8011dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011dda:	f003 0307 	and.w	r3, r3, #7
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d053      	beq.n	8011e8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011de6:	f003 0301 	and.w	r3, r3, #1
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d011      	beq.n	8011e12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8011dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d00b      	beq.n	8011e12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e08:	f043 0201 	orr.w	r2, r3, #1
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e16:	f003 0302 	and.w	r3, r3, #2
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d011      	beq.n	8011e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011e22:	f003 0301 	and.w	r3, r3, #1
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d00b      	beq.n	8011e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2202      	movs	r2, #2
 8011e30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e38:	f043 0204 	orr.w	r2, r3, #4
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e46:	f003 0304 	and.w	r3, r3, #4
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d011      	beq.n	8011e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011e52:	f003 0301 	and.w	r3, r3, #1
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d00b      	beq.n	8011e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2204      	movs	r2, #4
 8011e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e68:	f043 0202 	orr.w	r2, r3, #2
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d006      	beq.n	8011e8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7fe fc85 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2200      	movs	r2, #0
 8011e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	f040 80a4 	bne.w	8011fe0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ea0:	e853 3f00 	ldrex	r3, [r3]
 8011ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011ebe:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011ec6:	e841 2300 	strex	r3, r2, [r1]
 8011eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d1e2      	bne.n	8011e98 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	3308      	adds	r3, #8
 8011ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011edc:	e853 3f00 	ldrex	r3, [r3]
 8011ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011ee8:	f023 0301 	bic.w	r3, r3, #1
 8011eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	3308      	adds	r3, #8
 8011ef6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011efa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011efc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011efe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011f00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011f02:	e841 2300 	strex	r3, r2, [r1]
 8011f06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d1e1      	bne.n	8011ed2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2220      	movs	r2, #32
 8011f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4a5f      	ldr	r2, [pc, #380]	; (80120a4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	d021      	beq.n	8011f70 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d01a      	beq.n	8011f70 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f42:	e853 3f00 	ldrex	r3, [r3]
 8011f46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	461a      	mov	r2, r3
 8011f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8011f5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011f64:	e841 2300 	strex	r3, r2, [r1]
 8011f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1e4      	bne.n	8011f3a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d130      	bne.n	8011fda <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f86:	e853 3f00 	ldrex	r3, [r3]
 8011f8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8e:	f023 0310 	bic.w	r3, r3, #16
 8011f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8011fa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fa8:	e841 2300 	strex	r3, r2, [r1]
 8011fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d1e4      	bne.n	8011f7e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	69db      	ldr	r3, [r3, #28]
 8011fba:	f003 0310 	and.w	r3, r3, #16
 8011fbe:	2b10      	cmp	r3, #16
 8011fc0:	d103      	bne.n	8011fca <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2210      	movs	r2, #16
 8011fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f7f5 fd08 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
 8011fd8:	e002      	b.n	8011fe0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7fe fbcc 	bl	8010778 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011fe0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d006      	beq.n	8011ff6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8011fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011fec:	f003 0320 	and.w	r3, r3, #32
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	f47f aecb 	bne.w	8011d8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ffc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012000:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012004:	2b00      	cmp	r3, #0
 8012006:	d049      	beq.n	801209c <UART_RxISR_16BIT_FIFOEN+0x358>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801200e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012012:	429a      	cmp	r2, r3
 8012014:	d242      	bcs.n	801209c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	3308      	adds	r3, #8
 801201c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012020:	e853 3f00 	ldrex	r3, [r3]
 8012024:	623b      	str	r3, [r7, #32]
   return(result);
 8012026:	6a3b      	ldr	r3, [r7, #32]
 8012028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801202c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	3308      	adds	r3, #8
 8012036:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801203a:	633a      	str	r2, [r7, #48]	; 0x30
 801203c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801203e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012042:	e841 2300 	strex	r3, r2, [r1]
 8012046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801204a:	2b00      	cmp	r3, #0
 801204c:	d1e3      	bne.n	8012016 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	4a15      	ldr	r2, [pc, #84]	; (80120a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012052:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	e853 3f00 	ldrex	r3, [r3]
 8012060:	60fb      	str	r3, [r7, #12]
   return(result);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f043 0320 	orr.w	r3, r3, #32
 8012068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	461a      	mov	r2, r3
 8012072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012076:	61fb      	str	r3, [r7, #28]
 8012078:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801207a:	69b9      	ldr	r1, [r7, #24]
 801207c:	69fa      	ldr	r2, [r7, #28]
 801207e:	e841 2300 	strex	r3, r2, [r1]
 8012082:	617b      	str	r3, [r7, #20]
   return(result);
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d1e4      	bne.n	8012054 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801208a:	e007      	b.n	801209c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	699a      	ldr	r2, [r3, #24]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f042 0208 	orr.w	r2, r2, #8
 801209a:	619a      	str	r2, [r3, #24]
}
 801209c:	bf00      	nop
 801209e:	37b8      	adds	r7, #184	; 0xb8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	40008000 	.word	0x40008000
 80120a8:	0801182d 	.word	0x0801182d

080120ac <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b086      	sub	sp, #24
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	607a      	str	r2, [r7, #4]
 80120b8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d101      	bne.n	80120c4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80120c0:	2301      	movs	r3, #1
 80120c2:	e058      	b.n	8012176 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d106      	bne.n	80120dc <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	2200      	movs	r2, #0
 80120d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f7f6 fd34 	bl	8008b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2224      	movs	r2, #36	; 0x24
 80120e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f022 0201 	bic.w	r2, r2, #1
 80120f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d002      	beq.n	8012102 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	f7fe fe59 	bl	8010db4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f7fe fb5a 	bl	80107bc <UART_SetConfig>
 8012108:	4603      	mov	r3, r0
 801210a:	2b01      	cmp	r3, #1
 801210c:	d101      	bne.n	8012112 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 801210e:	2301      	movs	r3, #1
 8012110:	e031      	b.n	8012176 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	689a      	ldr	r2, [r3, #8]
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012120:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	689b      	ldr	r3, [r3, #8]
 8012128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	68ba      	ldr	r2, [r7, #8]
 8012132:	430a      	orrs	r2, r1
 8012134:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	055b      	lsls	r3, r3, #21
 801213a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	041b      	lsls	r3, r3, #16
 8012140:	697a      	ldr	r2, [r7, #20]
 8012142:	4313      	orrs	r3, r2
 8012144:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8012150:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8012154:	68fa      	ldr	r2, [r7, #12]
 8012156:	6812      	ldr	r2, [r2, #0]
 8012158:	6979      	ldr	r1, [r7, #20]
 801215a:	430b      	orrs	r3, r1
 801215c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f042 0201 	orr.w	r2, r2, #1
 801216c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801216e:	68f8      	ldr	r0, [r7, #12]
 8012170:	f7fe fec2 	bl	8010ef8 <UART_CheckIdleState>
 8012174:	4603      	mov	r3, r0
}
 8012176:	4618      	mov	r0, r3
 8012178:	3718      	adds	r7, #24
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801217e:	b480      	push	{r7}
 8012180:	b083      	sub	sp, #12
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012186:	bf00      	nop
 8012188:	370c      	adds	r7, #12
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr

08012192 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012192:	b480      	push	{r7}
 8012194:	b083      	sub	sp, #12
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801219a:	bf00      	nop
 801219c:	370c      	adds	r7, #12
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr

080121a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80121a6:	b480      	push	{r7}
 80121a8:	b083      	sub	sp, #12
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80121ae:	bf00      	nop
 80121b0:	370c      	adds	r7, #12
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80121ba:	b480      	push	{r7}
 80121bc:	b085      	sub	sp, #20
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d101      	bne.n	80121d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80121cc:	2302      	movs	r3, #2
 80121ce:	e027      	b.n	8012220 <HAL_UARTEx_DisableFifoMode+0x66>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2201      	movs	r2, #1
 80121d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2224      	movs	r2, #36	; 0x24
 80121dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	681a      	ldr	r2, [r3, #0]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	f022 0201 	bic.w	r2, r2, #1
 80121f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80121fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2200      	movs	r2, #0
 8012204:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	68fa      	ldr	r2, [r7, #12]
 801220c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2220      	movs	r2, #32
 8012212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2200      	movs	r2, #0
 801221a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801221e:	2300      	movs	r3, #0
}
 8012220:	4618      	mov	r0, r3
 8012222:	3714      	adds	r7, #20
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr

0801222c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801223c:	2b01      	cmp	r3, #1
 801223e:	d101      	bne.n	8012244 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012240:	2302      	movs	r3, #2
 8012242:	e02d      	b.n	80122a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2201      	movs	r2, #1
 8012248:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2224      	movs	r2, #36	; 0x24
 8012250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f022 0201 	bic.w	r2, r2, #1
 801226a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	689b      	ldr	r3, [r3, #8]
 8012272:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	683a      	ldr	r2, [r7, #0]
 801227c:	430a      	orrs	r2, r1
 801227e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f000 f89f 	bl	80123c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	68fa      	ldr	r2, [r7, #12]
 801228c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2220      	movs	r2, #32
 8012292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2200      	movs	r2, #0
 801229a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801229e:	2300      	movs	r3, #0
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3710      	adds	r7, #16
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d101      	bne.n	80122c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80122bc:	2302      	movs	r3, #2
 80122be:	e02d      	b.n	801231c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2201      	movs	r2, #1
 80122c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2224      	movs	r2, #36	; 0x24
 80122cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	f022 0201 	bic.w	r2, r2, #1
 80122e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	689b      	ldr	r3, [r3, #8]
 80122ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	683a      	ldr	r2, [r7, #0]
 80122f8:	430a      	orrs	r2, r1
 80122fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 f861 	bl	80123c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	68fa      	ldr	r2, [r7, #12]
 8012308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2220      	movs	r2, #32
 801230e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2200      	movs	r2, #0
 8012316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3710      	adds	r7, #16
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b08c      	sub	sp, #48	; 0x30
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	4613      	mov	r3, r2
 8012330:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8012332:	2300      	movs	r3, #0
 8012334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801233e:	2b20      	cmp	r3, #32
 8012340:	d13b      	bne.n	80123ba <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d002      	beq.n	801234e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8012348:	88fb      	ldrh	r3, [r7, #6]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d101      	bne.n	8012352 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 801234e:	2301      	movs	r3, #1
 8012350:	e034      	b.n	80123bc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2201      	movs	r2, #1
 8012356:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	2200      	movs	r2, #0
 801235c:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 801235e:	88fb      	ldrh	r3, [r7, #6]
 8012360:	461a      	mov	r2, r3
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	68f8      	ldr	r0, [r7, #12]
 8012366:	f7fe fedf 	bl	8011128 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801236e:	2b01      	cmp	r3, #1
 8012370:	d11d      	bne.n	80123ae <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	2210      	movs	r2, #16
 8012378:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012380:	69bb      	ldr	r3, [r7, #24]
 8012382:	e853 3f00 	ldrex	r3, [r3]
 8012386:	617b      	str	r3, [r7, #20]
   return(result);
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	f043 0310 	orr.w	r3, r3, #16
 801238e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	461a      	mov	r2, r3
 8012396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012398:	627b      	str	r3, [r7, #36]	; 0x24
 801239a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801239c:	6a39      	ldr	r1, [r7, #32]
 801239e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123a0:	e841 2300 	strex	r3, r2, [r1]
 80123a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80123a6:	69fb      	ldr	r3, [r7, #28]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d1e6      	bne.n	801237a <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80123ac:	e002      	b.n	80123b4 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80123ae:	2301      	movs	r3, #1
 80123b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 80123b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123b8:	e000      	b.n	80123bc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80123ba:	2302      	movs	r3, #2
  }
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3730      	adds	r7, #48	; 0x30
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80123c4:	b480      	push	{r7}
 80123c6:	b085      	sub	sp, #20
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d108      	bne.n	80123e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2201      	movs	r2, #1
 80123d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2201      	movs	r2, #1
 80123e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80123e4:	e031      	b.n	801244a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80123e6:	2308      	movs	r3, #8
 80123e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80123ea:	2308      	movs	r3, #8
 80123ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	689b      	ldr	r3, [r3, #8]
 80123f4:	0e5b      	lsrs	r3, r3, #25
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	f003 0307 	and.w	r3, r3, #7
 80123fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	689b      	ldr	r3, [r3, #8]
 8012404:	0f5b      	lsrs	r3, r3, #29
 8012406:	b2db      	uxtb	r3, r3
 8012408:	f003 0307 	and.w	r3, r3, #7
 801240c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801240e:	7bbb      	ldrb	r3, [r7, #14]
 8012410:	7b3a      	ldrb	r2, [r7, #12]
 8012412:	4911      	ldr	r1, [pc, #68]	; (8012458 <UARTEx_SetNbDataToProcess+0x94>)
 8012414:	5c8a      	ldrb	r2, [r1, r2]
 8012416:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801241a:	7b3a      	ldrb	r2, [r7, #12]
 801241c:	490f      	ldr	r1, [pc, #60]	; (801245c <UARTEx_SetNbDataToProcess+0x98>)
 801241e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012420:	fb93 f3f2 	sdiv	r3, r3, r2
 8012424:	b29a      	uxth	r2, r3
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801242c:	7bfb      	ldrb	r3, [r7, #15]
 801242e:	7b7a      	ldrb	r2, [r7, #13]
 8012430:	4909      	ldr	r1, [pc, #36]	; (8012458 <UARTEx_SetNbDataToProcess+0x94>)
 8012432:	5c8a      	ldrb	r2, [r1, r2]
 8012434:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012438:	7b7a      	ldrb	r2, [r7, #13]
 801243a:	4908      	ldr	r1, [pc, #32]	; (801245c <UARTEx_SetNbDataToProcess+0x98>)
 801243c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801243e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012442:	b29a      	uxth	r2, r3
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801244a:	bf00      	nop
 801244c:	3714      	adds	r7, #20
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr
 8012456:	bf00      	nop
 8012458:	08020d00 	.word	0x08020d00
 801245c:	08020d08 	.word	0x08020d08

08012460 <LL_DMA_ConfigTransfer>:
{
 8012460:	b480      	push	{r7}
 8012462:	b087      	sub	sp, #28
 8012464:	af00      	add	r7, sp, #0
 8012466:	60f8      	str	r0, [r7, #12]
 8012468:	60b9      	str	r1, [r7, #8]
 801246a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8012470:	4a0e      	ldr	r2, [pc, #56]	; (80124ac <LL_DMA_ConfigTransfer+0x4c>)
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	4413      	add	r3, r2
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	461a      	mov	r2, r3
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	4413      	add	r3, r2
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8012484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012488:	4908      	ldr	r1, [pc, #32]	; (80124ac <LL_DMA_ConfigTransfer+0x4c>)
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	440a      	add	r2, r1
 801248e:	7812      	ldrb	r2, [r2, #0]
 8012490:	4611      	mov	r1, r2
 8012492:	697a      	ldr	r2, [r7, #20]
 8012494:	440a      	add	r2, r1
 8012496:	4611      	mov	r1, r2
 8012498:	687a      	ldr	r2, [r7, #4]
 801249a:	4313      	orrs	r3, r2
 801249c:	600b      	str	r3, [r1, #0]
}
 801249e:	bf00      	nop
 80124a0:	371c      	adds	r7, #28
 80124a2:	46bd      	mov	sp, r7
 80124a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a8:	4770      	bx	lr
 80124aa:	bf00      	nop
 80124ac:	08020d10 	.word	0x08020d10

080124b0 <LL_DMA_SetDataLength>:
{
 80124b0:	b480      	push	{r7}
 80124b2:	b087      	sub	sp, #28
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80124c0:	4a0d      	ldr	r2, [pc, #52]	; (80124f8 <LL_DMA_SetDataLength+0x48>)
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	4413      	add	r3, r2
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	461a      	mov	r2, r3
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	4413      	add	r3, r2
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	0c1b      	lsrs	r3, r3, #16
 80124d2:	041b      	lsls	r3, r3, #16
 80124d4:	4908      	ldr	r1, [pc, #32]	; (80124f8 <LL_DMA_SetDataLength+0x48>)
 80124d6:	68ba      	ldr	r2, [r7, #8]
 80124d8:	440a      	add	r2, r1
 80124da:	7812      	ldrb	r2, [r2, #0]
 80124dc:	4611      	mov	r1, r2
 80124de:	697a      	ldr	r2, [r7, #20]
 80124e0:	440a      	add	r2, r1
 80124e2:	4611      	mov	r1, r2
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	4313      	orrs	r3, r2
 80124e8:	604b      	str	r3, [r1, #4]
}
 80124ea:	bf00      	nop
 80124ec:	371c      	adds	r7, #28
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr
 80124f6:	bf00      	nop
 80124f8:	08020d10 	.word	0x08020d10

080124fc <LL_DMA_SetMemoryAddress>:
{
 80124fc:	b480      	push	{r7}
 80124fe:	b087      	sub	sp, #28
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 801250c:	4a07      	ldr	r2, [pc, #28]	; (801252c <LL_DMA_SetMemoryAddress+0x30>)
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	4413      	add	r3, r2
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	461a      	mov	r2, r3
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	4413      	add	r3, r2
 801251a:	461a      	mov	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	60d3      	str	r3, [r2, #12]
}
 8012520:	bf00      	nop
 8012522:	371c      	adds	r7, #28
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr
 801252c:	08020d10 	.word	0x08020d10

08012530 <LL_DMA_SetPeriphAddress>:
{
 8012530:	b480      	push	{r7}
 8012532:	b087      	sub	sp, #28
 8012534:	af00      	add	r7, sp, #0
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8012540:	4a07      	ldr	r2, [pc, #28]	; (8012560 <LL_DMA_SetPeriphAddress+0x30>)
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	4413      	add	r3, r2
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	461a      	mov	r2, r3
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	4413      	add	r3, r2
 801254e:	461a      	mov	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6093      	str	r3, [r2, #8]
}
 8012554:	bf00      	nop
 8012556:	371c      	adds	r7, #28
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr
 8012560:	08020d10 	.word	0x08020d10

08012564 <LL_DMA_SetPeriphRequest>:
{
 8012564:	b480      	push	{r7}
 8012566:	b087      	sub	sp, #28
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	60b9      	str	r1, [r7, #8]
 801256e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	0a9b      	lsrs	r3, r3, #10
 8012574:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8012578:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 801257c:	00db      	lsls	r3, r3, #3
 801257e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8012580:	68ba      	ldr	r2, [r7, #8]
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	4413      	add	r3, r2
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801258c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012596:	68ba      	ldr	r2, [r7, #8]
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	4413      	add	r3, r2
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80125a2:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	430a      	orrs	r2, r1
 80125aa:	601a      	str	r2, [r3, #0]
}
 80125ac:	bf00      	nop
 80125ae:	371c      	adds	r7, #28
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b084      	sub	sp, #16
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80125cc:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 80125d2:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80125d8:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80125de:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80125e4:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80125ea:	4313      	orrs	r3, r2
 80125ec:	461a      	mov	r2, r3
 80125ee:	68b9      	ldr	r1, [r7, #8]
 80125f0:	68f8      	ldr	r0, [r7, #12]
 80125f2:	f7ff ff35 	bl	8012460 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	461a      	mov	r2, r3
 80125fc:	68b9      	ldr	r1, [r7, #8]
 80125fe:	68f8      	ldr	r0, [r7, #12]
 8012600:	f7ff ff7c 	bl	80124fc <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	461a      	mov	r2, r3
 801260a:	68b9      	ldr	r1, [r7, #8]
 801260c:	68f8      	ldr	r0, [r7, #12]
 801260e:	f7ff ff8f 	bl	8012530 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6a1b      	ldr	r3, [r3, #32]
 8012616:	461a      	mov	r2, r3
 8012618:	68b9      	ldr	r1, [r7, #8]
 801261a:	68f8      	ldr	r0, [r7, #12]
 801261c:	f7ff ff48 	bl	80124b0 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012624:	461a      	mov	r2, r3
 8012626:	68b9      	ldr	r1, [r7, #8]
 8012628:	68f8      	ldr	r0, [r7, #12]
 801262a:	f7ff ff9b 	bl	8012564 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 801262e:	2300      	movs	r3, #0
}
 8012630:	4618      	mov	r0, r3
 8012632:	3710      	adds	r7, #16
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2200      	movs	r2, #0
 801264a:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2200      	movs	r2, #0
 8012656:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2200      	movs	r2, #0
 801265c:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2200      	movs	r2, #0
 8012662:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2200      	movs	r2, #0
 8012674:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2200      	movs	r2, #0
 801267a:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2200      	movs	r2, #0
 8012680:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012682:	bf00      	nop
 8012684:	370c      	adds	r7, #12
 8012686:	46bd      	mov	sp, r7
 8012688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268c:	4770      	bx	lr

0801268e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801268e:	b480      	push	{r7}
 8012690:	b08b      	sub	sp, #44	; 0x2c
 8012692:	af00      	add	r7, sp, #0
 8012694:	60f8      	str	r0, [r7, #12]
 8012696:	60b9      	str	r1, [r7, #8]
 8012698:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	fa93 f3a3 	rbit	r3, r3
 80126a8:	613b      	str	r3, [r7, #16]
  return result;
 80126aa:	693b      	ldr	r3, [r7, #16]
 80126ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80126ae:	69bb      	ldr	r3, [r7, #24]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d101      	bne.n	80126b8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80126b4:	2320      	movs	r3, #32
 80126b6:	e003      	b.n	80126c0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80126b8:	69bb      	ldr	r3, [r7, #24]
 80126ba:	fab3 f383 	clz	r3, r3
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	005b      	lsls	r3, r3, #1
 80126c2:	2103      	movs	r1, #3
 80126c4:	fa01 f303 	lsl.w	r3, r1, r3
 80126c8:	43db      	mvns	r3, r3
 80126ca:	401a      	ands	r2, r3
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126d0:	6a3b      	ldr	r3, [r7, #32]
 80126d2:	fa93 f3a3 	rbit	r3, r3
 80126d6:	61fb      	str	r3, [r7, #28]
  return result;
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80126dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d101      	bne.n	80126e6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80126e2:	2320      	movs	r3, #32
 80126e4:	e003      	b.n	80126ee <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80126e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e8:	fab3 f383 	clz	r3, r3
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	005b      	lsls	r3, r3, #1
 80126f0:	6879      	ldr	r1, [r7, #4]
 80126f2:	fa01 f303 	lsl.w	r3, r1, r3
 80126f6:	431a      	orrs	r2, r3
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	601a      	str	r2, [r3, #0]
}
 80126fc:	bf00      	nop
 80126fe:	372c      	adds	r7, #44	; 0x2c
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr

08012708 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8012708:	b480      	push	{r7}
 801270a:	b085      	sub	sp, #20
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	685a      	ldr	r2, [r3, #4]
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	43db      	mvns	r3, r3
 801271c:	401a      	ands	r2, r3
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	6879      	ldr	r1, [r7, #4]
 8012722:	fb01 f303 	mul.w	r3, r1, r3
 8012726:	431a      	orrs	r2, r3
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	605a      	str	r2, [r3, #4]
}
 801272c:	bf00      	nop
 801272e:	3714      	adds	r7, #20
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr

08012738 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8012738:	b480      	push	{r7}
 801273a:	b08b      	sub	sp, #44	; 0x2c
 801273c:	af00      	add	r7, sp, #0
 801273e:	60f8      	str	r0, [r7, #12]
 8012740:	60b9      	str	r1, [r7, #8]
 8012742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	689a      	ldr	r2, [r3, #8]
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	fa93 f3a3 	rbit	r3, r3
 8012752:	613b      	str	r3, [r7, #16]
  return result;
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8012758:	69bb      	ldr	r3, [r7, #24]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d101      	bne.n	8012762 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801275e:	2320      	movs	r3, #32
 8012760:	e003      	b.n	801276a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	fab3 f383 	clz	r3, r3
 8012768:	b2db      	uxtb	r3, r3
 801276a:	005b      	lsls	r3, r3, #1
 801276c:	2103      	movs	r1, #3
 801276e:	fa01 f303 	lsl.w	r3, r1, r3
 8012772:	43db      	mvns	r3, r3
 8012774:	401a      	ands	r2, r3
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801277a:	6a3b      	ldr	r3, [r7, #32]
 801277c:	fa93 f3a3 	rbit	r3, r3
 8012780:	61fb      	str	r3, [r7, #28]
  return result;
 8012782:	69fb      	ldr	r3, [r7, #28]
 8012784:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012788:	2b00      	cmp	r3, #0
 801278a:	d101      	bne.n	8012790 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801278c:	2320      	movs	r3, #32
 801278e:	e003      	b.n	8012798 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8012790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012792:	fab3 f383 	clz	r3, r3
 8012796:	b2db      	uxtb	r3, r3
 8012798:	005b      	lsls	r3, r3, #1
 801279a:	6879      	ldr	r1, [r7, #4]
 801279c:	fa01 f303 	lsl.w	r3, r1, r3
 80127a0:	431a      	orrs	r2, r3
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80127a6:	bf00      	nop
 80127a8:	372c      	adds	r7, #44	; 0x2c
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr

080127b2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80127b2:	b480      	push	{r7}
 80127b4:	b08b      	sub	sp, #44	; 0x2c
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	60f8      	str	r0, [r7, #12]
 80127ba:	60b9      	str	r1, [r7, #8]
 80127bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	68da      	ldr	r2, [r3, #12]
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	fa93 f3a3 	rbit	r3, r3
 80127cc:	613b      	str	r3, [r7, #16]
  return result;
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d101      	bne.n	80127dc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80127d8:	2320      	movs	r3, #32
 80127da:	e003      	b.n	80127e4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80127dc:	69bb      	ldr	r3, [r7, #24]
 80127de:	fab3 f383 	clz	r3, r3
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	005b      	lsls	r3, r3, #1
 80127e6:	2103      	movs	r1, #3
 80127e8:	fa01 f303 	lsl.w	r3, r1, r3
 80127ec:	43db      	mvns	r3, r3
 80127ee:	401a      	ands	r2, r3
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80127f4:	6a3b      	ldr	r3, [r7, #32]
 80127f6:	fa93 f3a3 	rbit	r3, r3
 80127fa:	61fb      	str	r3, [r7, #28]
  return result;
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012802:	2b00      	cmp	r3, #0
 8012804:	d101      	bne.n	801280a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8012806:	2320      	movs	r3, #32
 8012808:	e003      	b.n	8012812 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	fab3 f383 	clz	r3, r3
 8012810:	b2db      	uxtb	r3, r3
 8012812:	005b      	lsls	r3, r3, #1
 8012814:	6879      	ldr	r1, [r7, #4]
 8012816:	fa01 f303 	lsl.w	r3, r1, r3
 801281a:	431a      	orrs	r2, r3
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	60da      	str	r2, [r3, #12]
}
 8012820:	bf00      	nop
 8012822:	372c      	adds	r7, #44	; 0x2c
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801282c:	b480      	push	{r7}
 801282e:	b08b      	sub	sp, #44	; 0x2c
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	6a1a      	ldr	r2, [r3, #32]
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	fa93 f3a3 	rbit	r3, r3
 8012846:	613b      	str	r3, [r7, #16]
  return result;
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d101      	bne.n	8012856 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8012852:	2320      	movs	r3, #32
 8012854:	e003      	b.n	801285e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8012856:	69bb      	ldr	r3, [r7, #24]
 8012858:	fab3 f383 	clz	r3, r3
 801285c:	b2db      	uxtb	r3, r3
 801285e:	009b      	lsls	r3, r3, #2
 8012860:	210f      	movs	r1, #15
 8012862:	fa01 f303 	lsl.w	r3, r1, r3
 8012866:	43db      	mvns	r3, r3
 8012868:	401a      	ands	r2, r3
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801286e:	6a3b      	ldr	r3, [r7, #32]
 8012870:	fa93 f3a3 	rbit	r3, r3
 8012874:	61fb      	str	r3, [r7, #28]
  return result;
 8012876:	69fb      	ldr	r3, [r7, #28]
 8012878:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287c:	2b00      	cmp	r3, #0
 801287e:	d101      	bne.n	8012884 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8012880:	2320      	movs	r3, #32
 8012882:	e003      	b.n	801288c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8012884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012886:	fab3 f383 	clz	r3, r3
 801288a:	b2db      	uxtb	r3, r3
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	6879      	ldr	r1, [r7, #4]
 8012890:	fa01 f303 	lsl.w	r3, r1, r3
 8012894:	431a      	orrs	r2, r3
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 801289a:	bf00      	nop
 801289c:	372c      	adds	r7, #44	; 0x2c
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr

080128a6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80128a6:	b480      	push	{r7}
 80128a8:	b08b      	sub	sp, #44	; 0x2c
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	60f8      	str	r0, [r7, #12]
 80128ae:	60b9      	str	r1, [r7, #8]
 80128b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	0a1b      	lsrs	r3, r3, #8
 80128ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	fa93 f3a3 	rbit	r3, r3
 80128c2:	613b      	str	r3, [r7, #16]
  return result;
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80128c8:	69bb      	ldr	r3, [r7, #24]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d101      	bne.n	80128d2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80128ce:	2320      	movs	r3, #32
 80128d0:	e003      	b.n	80128da <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	fab3 f383 	clz	r3, r3
 80128d8:	b2db      	uxtb	r3, r3
 80128da:	009b      	lsls	r3, r3, #2
 80128dc:	210f      	movs	r1, #15
 80128de:	fa01 f303 	lsl.w	r3, r1, r3
 80128e2:	43db      	mvns	r3, r3
 80128e4:	401a      	ands	r2, r3
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	0a1b      	lsrs	r3, r3, #8
 80128ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80128ec:	6a3b      	ldr	r3, [r7, #32]
 80128ee:	fa93 f3a3 	rbit	r3, r3
 80128f2:	61fb      	str	r3, [r7, #28]
  return result;
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80128f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d101      	bne.n	8012902 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80128fe:	2320      	movs	r3, #32
 8012900:	e003      	b.n	801290a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8012902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012904:	fab3 f383 	clz	r3, r3
 8012908:	b2db      	uxtb	r3, r3
 801290a:	009b      	lsls	r3, r3, #2
 801290c:	6879      	ldr	r1, [r7, #4]
 801290e:	fa01 f303 	lsl.w	r3, r1, r3
 8012912:	431a      	orrs	r2, r3
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8012918:	bf00      	nop
 801291a:	372c      	adds	r7, #44	; 0x2c
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b088      	sub	sp, #32
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	fa93 f3a3 	rbit	r3, r3
 801293a:	60fb      	str	r3, [r7, #12]
  return result;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d101      	bne.n	801294a <LL_GPIO_Init+0x26>
    return 32U;
 8012946:	2320      	movs	r3, #32
 8012948:	e003      	b.n	8012952 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	fab3 f383 	clz	r3, r3
 8012950:	b2db      	uxtb	r3, r3
 8012952:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8012954:	e048      	b.n	80129e8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	2101      	movs	r1, #1
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	fa01 f303 	lsl.w	r3, r1, r3
 8012962:	4013      	ands	r3, r2
 8012964:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d03a      	beq.n	80129e2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d003      	beq.n	801297c <LL_GPIO_Init+0x58>
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	2b02      	cmp	r3, #2
 801297a:	d10e      	bne.n	801299a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	689b      	ldr	r3, [r3, #8]
 8012980:	461a      	mov	r2, r3
 8012982:	69b9      	ldr	r1, [r7, #24]
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f7ff fed7 	bl	8012738 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	6819      	ldr	r1, [r3, #0]
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	461a      	mov	r2, r3
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f7ff feb7 	bl	8012708 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	691b      	ldr	r3, [r3, #16]
 801299e:	461a      	mov	r2, r3
 80129a0:	69b9      	ldr	r1, [r7, #24]
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	f7ff ff05 	bl	80127b2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	2b02      	cmp	r3, #2
 80129ae:	d111      	bne.n	80129d4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80129b0:	69bb      	ldr	r3, [r7, #24]
 80129b2:	2bff      	cmp	r3, #255	; 0xff
 80129b4:	d807      	bhi.n	80129c6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	695b      	ldr	r3, [r3, #20]
 80129ba:	461a      	mov	r2, r3
 80129bc:	69b9      	ldr	r1, [r7, #24]
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f7ff ff34 	bl	801282c <LL_GPIO_SetAFPin_0_7>
 80129c4:	e006      	b.n	80129d4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	695b      	ldr	r3, [r3, #20]
 80129ca:	461a      	mov	r2, r3
 80129cc:	69b9      	ldr	r1, [r7, #24]
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f7ff ff69 	bl	80128a6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	461a      	mov	r2, r3
 80129da:	69b9      	ldr	r1, [r7, #24]
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f7ff fe56 	bl	801268e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80129e2:	69fb      	ldr	r3, [r7, #28]
 80129e4:	3301      	adds	r3, #1
 80129e6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	681a      	ldr	r2, [r3, #0]
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	fa22 f303 	lsr.w	r3, r2, r3
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d1af      	bne.n	8012956 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80129f6:	2300      	movs	r3, #0
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3720      	adds	r7, #32
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}

08012a00 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8012a00:	b480      	push	{r7}
 8012a02:	b083      	sub	sp, #12
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	601a      	str	r2, [r3, #0]
}
 8012a14:	bf00      	nop
 8012a16:	370c      	adds	r7, #12
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr

08012a20 <LL_APB1_GRP2_EnableClock>:
{
 8012a20:	b480      	push	{r7}
 8012a22:	b085      	sub	sp, #20
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8012a28:	4b08      	ldr	r3, [pc, #32]	; (8012a4c <LL_APB1_GRP2_EnableClock+0x2c>)
 8012a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012a2c:	4907      	ldr	r1, [pc, #28]	; (8012a4c <LL_APB1_GRP2_EnableClock+0x2c>)
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	4313      	orrs	r3, r2
 8012a32:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8012a34:	4b05      	ldr	r3, [pc, #20]	; (8012a4c <LL_APB1_GRP2_EnableClock+0x2c>)
 8012a36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	4013      	ands	r3, r2
 8012a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
}
 8012a40:	bf00      	nop
 8012a42:	3714      	adds	r7, #20
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr
 8012a4c:	40021000 	.word	0x40021000

08012a50 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	4a11      	ldr	r2, [pc, #68]	; (8012aa4 <LL_UCPD_Init+0x54>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d103      	bne.n	8012a6a <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8012a62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012a66:	f7ff ffdb 	bl	8012a20 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f7ff ffc8 	bl	8012a00 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681a      	ldr	r2, [r3, #0]
 8012a74:	4b0c      	ldr	r3, [pc, #48]	; (8012aa8 <LL_UCPD_Init+0x58>)
 8012a76:	4013      	ands	r3, r2
 8012a78:	683a      	ldr	r2, [r7, #0]
 8012a7a:	6811      	ldr	r1, [r2, #0]
 8012a7c:	683a      	ldr	r2, [r7, #0]
 8012a7e:	6852      	ldr	r2, [r2, #4]
 8012a80:	02d2      	lsls	r2, r2, #11
 8012a82:	4311      	orrs	r1, r2
 8012a84:	683a      	ldr	r2, [r7, #0]
 8012a86:	6892      	ldr	r2, [r2, #8]
 8012a88:	0192      	lsls	r2, r2, #6
 8012a8a:	4311      	orrs	r1, r2
 8012a8c:	683a      	ldr	r2, [r7, #0]
 8012a8e:	68d2      	ldr	r2, [r2, #12]
 8012a90:	430a      	orrs	r2, r1
 8012a92:	431a      	orrs	r2, r3
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8012a98:	2300      	movs	r3, #0
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3708      	adds	r7, #8
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	4000a000 	.word	0x4000a000
 8012aa8:	fff10000 	.word	0xfff10000

08012aac <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8012aac:	b480      	push	{r7}
 8012aae:	b083      	sub	sp, #12
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8012aba:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2207      	movs	r2, #7
 8012ac0:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2210      	movs	r2, #16
 8012ac6:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	220d      	movs	r2, #13
 8012acc:	60da      	str	r2, [r3, #12]
}
 8012ace:	bf00      	nop
 8012ad0:	370c      	adds	r7, #12
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr

08012ada <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012ada:	b480      	push	{r7}
 8012adc:	b085      	sub	sp, #20
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012aea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012aee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b085      	sub	sp, #20
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012b10:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012b14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012b1c:	b29a      	uxth	r2, r3
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	43db      	mvns	r3, r3
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	4013      	ands	r3, r2
 8012b28:	b29a      	uxth	r2, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012b30:	2300      	movs	r3, #0
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3714      	adds	r7, #20
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr

08012b3e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012b3e:	b480      	push	{r7}
 8012b40:	b085      	sub	sp, #20
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	60f8      	str	r0, [r7, #12]
 8012b46:	1d3b      	adds	r3, r7, #4
 8012b48:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2201      	movs	r2, #1
 8012b50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2200      	movs	r2, #0
 8012b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2200      	movs	r2, #0
 8012b68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012b6c:	2300      	movs	r3, #0
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3714      	adds	r7, #20
 8012b72:	46bd      	mov	sp, r7
 8012b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b78:	4770      	bx	lr
	...

08012b7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b09d      	sub	sp, #116	; 0x74
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012b86:	2300      	movs	r3, #0
 8012b88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012b8c:	687a      	ldr	r2, [r7, #4]
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	4413      	add	r3, r2
 8012b96:	881b      	ldrh	r3, [r3, #0]
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8012b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ba2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	78db      	ldrb	r3, [r3, #3]
 8012baa:	2b03      	cmp	r3, #3
 8012bac:	d81f      	bhi.n	8012bee <USB_ActivateEndpoint+0x72>
 8012bae:	a201      	add	r2, pc, #4	; (adr r2, 8012bb4 <USB_ActivateEndpoint+0x38>)
 8012bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bb4:	08012bc5 	.word	0x08012bc5
 8012bb8:	08012be1 	.word	0x08012be1
 8012bbc:	08012bf7 	.word	0x08012bf7
 8012bc0:	08012bd3 	.word	0x08012bd3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012bc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012bcc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012bd0:	e012      	b.n	8012bf8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012bd2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012bd6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8012bda:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012bde:	e00b      	b.n	8012bf8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012be0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012be4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012be8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8012bec:	e004      	b.n	8012bf8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8012bee:	2301      	movs	r3, #1
 8012bf0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8012bf4:	e000      	b.n	8012bf8 <USB_ActivateEndpoint+0x7c>
      break;
 8012bf6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	441a      	add	r2, r3
 8012c02:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8012c1a:	687a      	ldr	r2, [r7, #4]
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	009b      	lsls	r3, r3, #2
 8012c22:	4413      	add	r3, r2
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	b21b      	sxth	r3, r3
 8012c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c32:	b21a      	sxth	r2, r3
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	b21b      	sxth	r3, r3
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	b21b      	sxth	r3, r3
 8012c3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	441a      	add	r2, r3
 8012c4c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	7b1b      	ldrb	r3, [r3, #12]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	f040 8178 	bne.w	8012f5e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	785b      	ldrb	r3, [r3, #1]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	f000 8084 	beq.w	8012d80 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	61bb      	str	r3, [r7, #24]
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	461a      	mov	r2, r3
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	4413      	add	r3, r2
 8012c8a:	61bb      	str	r3, [r7, #24]
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	00da      	lsls	r2, r3, #3
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	4413      	add	r3, r2
 8012c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c9a:	617b      	str	r3, [r7, #20]
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	88db      	ldrh	r3, [r3, #6]
 8012ca0:	085b      	lsrs	r3, r3, #1
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	005b      	lsls	r3, r3, #1
 8012ca6:	b29a      	uxth	r2, r3
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	009b      	lsls	r3, r3, #2
 8012cb4:	4413      	add	r3, r2
 8012cb6:	881b      	ldrh	r3, [r3, #0]
 8012cb8:	827b      	strh	r3, [r7, #18]
 8012cba:	8a7b      	ldrh	r3, [r7, #18]
 8012cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d01b      	beq.n	8012cfc <USB_ActivateEndpoint+0x180>
 8012cc4:	687a      	ldr	r2, [r7, #4]
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	009b      	lsls	r3, r3, #2
 8012ccc:	4413      	add	r3, r2
 8012cce:	881b      	ldrh	r3, [r3, #0]
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012cda:	823b      	strh	r3, [r7, #16]
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	441a      	add	r2, r3
 8012ce6:	8a3b      	ldrh	r3, [r7, #16]
 8012ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	78db      	ldrb	r3, [r3, #3]
 8012d00:	2b01      	cmp	r3, #1
 8012d02:	d020      	beq.n	8012d46 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	4413      	add	r3, r2
 8012d0e:	881b      	ldrh	r3, [r3, #0]
 8012d10:	b29b      	uxth	r3, r3
 8012d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d1a:	81bb      	strh	r3, [r7, #12]
 8012d1c:	89bb      	ldrh	r3, [r7, #12]
 8012d1e:	f083 0320 	eor.w	r3, r3, #32
 8012d22:	81bb      	strh	r3, [r7, #12]
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	441a      	add	r2, r3
 8012d2e:	89bb      	ldrh	r3, [r7, #12]
 8012d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	8013      	strh	r3, [r2, #0]
 8012d44:	e2d5      	b.n	80132f2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	009b      	lsls	r3, r3, #2
 8012d4e:	4413      	add	r3, r2
 8012d50:	881b      	ldrh	r3, [r3, #0]
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d5c:	81fb      	strh	r3, [r7, #14]
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	441a      	add	r2, r3
 8012d68:	89fb      	ldrh	r3, [r7, #14]
 8012d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	8013      	strh	r3, [r2, #0]
 8012d7e:	e2b8      	b.n	80132f2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	633b      	str	r3, [r7, #48]	; 0x30
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d90:	4413      	add	r3, r2
 8012d92:	633b      	str	r3, [r7, #48]	; 0x30
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	00da      	lsls	r2, r3, #3
 8012d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9c:	4413      	add	r3, r2
 8012d9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	88db      	ldrh	r3, [r3, #6]
 8012da8:	085b      	lsrs	r3, r3, #1
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	005b      	lsls	r3, r3, #1
 8012dae:	b29a      	uxth	r2, r3
 8012db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc4:	4413      	add	r3, r2
 8012dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	00da      	lsls	r2, r3, #3
 8012dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd0:	4413      	add	r3, r2
 8012dd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8012dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dda:	881b      	ldrh	r3, [r3, #0]
 8012ddc:	b29b      	uxth	r3, r3
 8012dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012de2:	b29a      	uxth	r2, r3
 8012de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de6:	801a      	strh	r2, [r3, #0]
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	691b      	ldr	r3, [r3, #16]
 8012dec:	2b3e      	cmp	r3, #62	; 0x3e
 8012dee:	d91d      	bls.n	8012e2c <USB_ActivateEndpoint+0x2b0>
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	691b      	ldr	r3, [r3, #16]
 8012df4:	095b      	lsrs	r3, r3, #5
 8012df6:	66bb      	str	r3, [r7, #104]	; 0x68
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	691b      	ldr	r3, [r3, #16]
 8012dfc:	f003 031f 	and.w	r3, r3, #31
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d102      	bne.n	8012e0a <USB_ActivateEndpoint+0x28e>
 8012e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e06:	3b01      	subs	r3, #1
 8012e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8012e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0c:	881b      	ldrh	r3, [r3, #0]
 8012e0e:	b29a      	uxth	r2, r3
 8012e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	029b      	lsls	r3, r3, #10
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	4313      	orrs	r3, r2
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e28:	801a      	strh	r2, [r3, #0]
 8012e2a:	e026      	b.n	8012e7a <USB_ActivateEndpoint+0x2fe>
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d10a      	bne.n	8012e4a <USB_ActivateEndpoint+0x2ce>
 8012e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e36:	881b      	ldrh	r3, [r3, #0]
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e46:	801a      	strh	r2, [r3, #0]
 8012e48:	e017      	b.n	8012e7a <USB_ActivateEndpoint+0x2fe>
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	691b      	ldr	r3, [r3, #16]
 8012e4e:	085b      	lsrs	r3, r3, #1
 8012e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	691b      	ldr	r3, [r3, #16]
 8012e56:	f003 0301 	and.w	r3, r3, #1
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d002      	beq.n	8012e64 <USB_ActivateEndpoint+0x2e8>
 8012e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e60:	3301      	adds	r3, #1
 8012e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8012e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e66:	881b      	ldrh	r3, [r3, #0]
 8012e68:	b29a      	uxth	r2, r3
 8012e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	029b      	lsls	r3, r3, #10
 8012e70:	b29b      	uxth	r3, r3
 8012e72:	4313      	orrs	r3, r2
 8012e74:	b29a      	uxth	r2, r3
 8012e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	009b      	lsls	r3, r3, #2
 8012e82:	4413      	add	r3, r2
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	847b      	strh	r3, [r7, #34]	; 0x22
 8012e88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d01b      	beq.n	8012eca <USB_ActivateEndpoint+0x34e>
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	4413      	add	r3, r2
 8012e9c:	881b      	ldrh	r3, [r3, #0]
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ea8:	843b      	strh	r3, [r7, #32]
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	009b      	lsls	r3, r3, #2
 8012eb2:	441a      	add	r2, r3
 8012eb4:	8c3b      	ldrh	r3, [r7, #32]
 8012eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ec6:	b29b      	uxth	r3, r3
 8012ec8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d124      	bne.n	8012f1c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	009b      	lsls	r3, r3, #2
 8012eda:	4413      	add	r3, r2
 8012edc:	881b      	ldrh	r3, [r3, #0]
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ee8:	83bb      	strh	r3, [r7, #28]
 8012eea:	8bbb      	ldrh	r3, [r7, #28]
 8012eec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012ef0:	83bb      	strh	r3, [r7, #28]
 8012ef2:	8bbb      	ldrh	r3, [r7, #28]
 8012ef4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012ef8:	83bb      	strh	r3, [r7, #28]
 8012efa:	687a      	ldr	r2, [r7, #4]
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	009b      	lsls	r3, r3, #2
 8012f02:	441a      	add	r2, r3
 8012f04:	8bbb      	ldrh	r3, [r7, #28]
 8012f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	8013      	strh	r3, [r2, #0]
 8012f1a:	e1ea      	b.n	80132f2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	4413      	add	r3, r2
 8012f26:	881b      	ldrh	r3, [r3, #0]
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f32:	83fb      	strh	r3, [r7, #30]
 8012f34:	8bfb      	ldrh	r3, [r7, #30]
 8012f36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012f3a:	83fb      	strh	r3, [r7, #30]
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	009b      	lsls	r3, r3, #2
 8012f44:	441a      	add	r2, r3
 8012f46:	8bfb      	ldrh	r3, [r7, #30]
 8012f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	8013      	strh	r3, [r2, #0]
 8012f5c:	e1c9      	b.n	80132f2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	78db      	ldrb	r3, [r3, #3]
 8012f62:	2b02      	cmp	r3, #2
 8012f64:	d11e      	bne.n	8012fa4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	781b      	ldrb	r3, [r3, #0]
 8012f6c:	009b      	lsls	r3, r3, #2
 8012f6e:	4413      	add	r3, r2
 8012f70:	881b      	ldrh	r3, [r3, #0]
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f7c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8012f80:	687a      	ldr	r2, [r7, #4]
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	009b      	lsls	r3, r3, #2
 8012f88:	441a      	add	r2, r3
 8012f8a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012f96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8012f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f9e:	b29b      	uxth	r3, r3
 8012fa0:	8013      	strh	r3, [r2, #0]
 8012fa2:	e01d      	b.n	8012fe0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	4413      	add	r3, r2
 8012fae:	881b      	ldrh	r3, [r3, #0]
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8012fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8012fbe:	687a      	ldr	r2, [r7, #4]
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	441a      	add	r2, r3
 8012fc8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	461a      	mov	r2, r3
 8012fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ff0:	4413      	add	r3, r2
 8012ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	00da      	lsls	r2, r3, #3
 8012ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ffc:	4413      	add	r3, r2
 8012ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013002:	65bb      	str	r3, [r7, #88]	; 0x58
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	891b      	ldrh	r3, [r3, #8]
 8013008:	085b      	lsrs	r3, r3, #1
 801300a:	b29b      	uxth	r3, r3
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	b29a      	uxth	r2, r3
 8013010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013012:	801a      	strh	r2, [r3, #0]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	657b      	str	r3, [r7, #84]	; 0x54
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801301e:	b29b      	uxth	r3, r3
 8013020:	461a      	mov	r2, r3
 8013022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013024:	4413      	add	r3, r2
 8013026:	657b      	str	r3, [r7, #84]	; 0x54
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	00da      	lsls	r2, r3, #3
 801302e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013030:	4413      	add	r3, r2
 8013032:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8013036:	653b      	str	r3, [r7, #80]	; 0x50
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	895b      	ldrh	r3, [r3, #10]
 801303c:	085b      	lsrs	r3, r3, #1
 801303e:	b29b      	uxth	r3, r3
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	b29a      	uxth	r2, r3
 8013044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013046:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	785b      	ldrb	r3, [r3, #1]
 801304c:	2b00      	cmp	r3, #0
 801304e:	f040 8093 	bne.w	8013178 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013052:	687a      	ldr	r2, [r7, #4]
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	009b      	lsls	r3, r3, #2
 801305a:	4413      	add	r3, r2
 801305c:	881b      	ldrh	r3, [r3, #0]
 801305e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013062:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801306a:	2b00      	cmp	r3, #0
 801306c:	d01b      	beq.n	80130a6 <USB_ActivateEndpoint+0x52a>
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	4413      	add	r3, r2
 8013078:	881b      	ldrh	r3, [r3, #0]
 801307a:	b29b      	uxth	r3, r3
 801307c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013084:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	009b      	lsls	r3, r3, #2
 801308e:	441a      	add	r2, r3
 8013090:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801309a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801309e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80130a6:	687a      	ldr	r2, [r7, #4]
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	4413      	add	r3, r2
 80130b0:	881b      	ldrh	r3, [r3, #0]
 80130b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80130b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d01b      	beq.n	80130f6 <USB_ActivateEndpoint+0x57a>
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	009b      	lsls	r3, r3, #2
 80130c6:	4413      	add	r3, r2
 80130c8:	881b      	ldrh	r3, [r3, #0]
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80130d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130d4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	009b      	lsls	r3, r3, #2
 80130de:	441a      	add	r2, r3
 80130e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80130e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80130e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80130ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80130ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80130f6:	687a      	ldr	r2, [r7, #4]
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	4413      	add	r3, r2
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	b29b      	uxth	r3, r3
 8013104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801310c:	873b      	strh	r3, [r7, #56]	; 0x38
 801310e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013110:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013114:	873b      	strh	r3, [r7, #56]	; 0x38
 8013116:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013118:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801311c:	873b      	strh	r3, [r7, #56]	; 0x38
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	009b      	lsls	r3, r3, #2
 8013126:	441a      	add	r2, r3
 8013128:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801312a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801312e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801313a:	b29b      	uxth	r3, r3
 801313c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	4413      	add	r3, r2
 8013148:	881b      	ldrh	r3, [r3, #0]
 801314a:	b29b      	uxth	r3, r3
 801314c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013154:	86fb      	strh	r3, [r7, #54]	; 0x36
 8013156:	687a      	ldr	r2, [r7, #4]
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	009b      	lsls	r3, r3, #2
 801315e:	441a      	add	r2, r3
 8013160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801316a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801316e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013172:	b29b      	uxth	r3, r3
 8013174:	8013      	strh	r3, [r2, #0]
 8013176:	e0bc      	b.n	80132f2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013178:	687a      	ldr	r2, [r7, #4]
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	009b      	lsls	r3, r3, #2
 8013180:	4413      	add	r3, r2
 8013182:	881b      	ldrh	r3, [r3, #0]
 8013184:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801318c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013190:	2b00      	cmp	r3, #0
 8013192:	d01d      	beq.n	80131d0 <USB_ActivateEndpoint+0x654>
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	009b      	lsls	r3, r3, #2
 801319c:	4413      	add	r3, r2
 801319e:	881b      	ldrh	r3, [r3, #0]
 80131a0:	b29b      	uxth	r3, r3
 80131a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80131a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80131aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80131ae:	687a      	ldr	r2, [r7, #4]
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	441a      	add	r2, r3
 80131b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80131bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80131c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80131c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131cc:	b29b      	uxth	r3, r3
 80131ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80131d0:	687a      	ldr	r2, [r7, #4]
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	009b      	lsls	r3, r3, #2
 80131d8:	4413      	add	r3, r2
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80131e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80131e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d01d      	beq.n	8013228 <USB_ActivateEndpoint+0x6ac>
 80131ec:	687a      	ldr	r2, [r7, #4]
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	4413      	add	r3, r2
 80131f6:	881b      	ldrh	r3, [r3, #0]
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80131fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013202:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	009b      	lsls	r3, r3, #2
 801320e:	441a      	add	r2, r3
 8013210:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8013214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801321c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013220:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013224:	b29b      	uxth	r3, r3
 8013226:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	78db      	ldrb	r3, [r3, #3]
 801322c:	2b01      	cmp	r3, #1
 801322e:	d024      	beq.n	801327a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013230:	687a      	ldr	r2, [r7, #4]
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	009b      	lsls	r3, r3, #2
 8013238:	4413      	add	r3, r2
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	b29b      	uxth	r3, r3
 801323e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013246:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801324a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801324e:	f083 0320 	eor.w	r3, r3, #32
 8013252:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	441a      	add	r2, r3
 8013260:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801326c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013274:	b29b      	uxth	r3, r3
 8013276:	8013      	strh	r3, [r2, #0]
 8013278:	e01d      	b.n	80132b6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801327a:	687a      	ldr	r2, [r7, #4]
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	4413      	add	r3, r2
 8013284:	881b      	ldrh	r3, [r3, #0]
 8013286:	b29b      	uxth	r3, r3
 8013288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801328c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013290:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8013294:	687a      	ldr	r2, [r7, #4]
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	441a      	add	r2, r3
 801329e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80132a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	009b      	lsls	r3, r3, #2
 80132be:	4413      	add	r3, r2
 80132c0:	881b      	ldrh	r3, [r3, #0]
 80132c2:	b29b      	uxth	r3, r3
 80132c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80132c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80132d0:	687a      	ldr	r2, [r7, #4]
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	781b      	ldrb	r3, [r3, #0]
 80132d6:	009b      	lsls	r3, r3, #2
 80132d8:	441a      	add	r2, r3
 80132da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80132de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132ee:	b29b      	uxth	r3, r3
 80132f0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80132f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3774      	adds	r7, #116	; 0x74
 80132fa:	46bd      	mov	sp, r7
 80132fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop

08013304 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013304:	b480      	push	{r7}
 8013306:	b08d      	sub	sp, #52	; 0x34
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	7b1b      	ldrb	r3, [r3, #12]
 8013312:	2b00      	cmp	r3, #0
 8013314:	f040 808e 	bne.w	8013434 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	785b      	ldrb	r3, [r3, #1]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d044      	beq.n	80133aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	4413      	add	r3, r2
 801332a:	881b      	ldrh	r3, [r3, #0]
 801332c:	81bb      	strh	r3, [r7, #12]
 801332e:	89bb      	ldrh	r3, [r7, #12]
 8013330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013334:	2b00      	cmp	r3, #0
 8013336:	d01b      	beq.n	8013370 <USB_DeactivateEndpoint+0x6c>
 8013338:	687a      	ldr	r2, [r7, #4]
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	009b      	lsls	r3, r3, #2
 8013340:	4413      	add	r3, r2
 8013342:	881b      	ldrh	r3, [r3, #0]
 8013344:	b29b      	uxth	r3, r3
 8013346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801334e:	817b      	strh	r3, [r7, #10]
 8013350:	687a      	ldr	r2, [r7, #4]
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	009b      	lsls	r3, r3, #2
 8013358:	441a      	add	r2, r3
 801335a:	897b      	ldrh	r3, [r7, #10]
 801335c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801336c:	b29b      	uxth	r3, r3
 801336e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	4413      	add	r3, r2
 801337a:	881b      	ldrh	r3, [r3, #0]
 801337c:	b29b      	uxth	r3, r3
 801337e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013386:	813b      	strh	r3, [r7, #8]
 8013388:	687a      	ldr	r2, [r7, #4]
 801338a:	683b      	ldr	r3, [r7, #0]
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	009b      	lsls	r3, r3, #2
 8013390:	441a      	add	r2, r3
 8013392:	893b      	ldrh	r3, [r7, #8]
 8013394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801339c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80133a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133a4:	b29b      	uxth	r3, r3
 80133a6:	8013      	strh	r3, [r2, #0]
 80133a8:	e192      	b.n	80136d0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	4413      	add	r3, r2
 80133b4:	881b      	ldrh	r3, [r3, #0]
 80133b6:	827b      	strh	r3, [r7, #18]
 80133b8:	8a7b      	ldrh	r3, [r7, #18]
 80133ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d01b      	beq.n	80133fa <USB_DeactivateEndpoint+0xf6>
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	009b      	lsls	r3, r3, #2
 80133ca:	4413      	add	r3, r2
 80133cc:	881b      	ldrh	r3, [r3, #0]
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80133d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133d8:	823b      	strh	r3, [r7, #16]
 80133da:	687a      	ldr	r2, [r7, #4]
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	441a      	add	r2, r3
 80133e4:	8a3b      	ldrh	r3, [r7, #16]
 80133e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80133ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80133ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80133f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80133fa:	687a      	ldr	r2, [r7, #4]
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	4413      	add	r3, r2
 8013404:	881b      	ldrh	r3, [r3, #0]
 8013406:	b29b      	uxth	r3, r3
 8013408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801340c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013410:	81fb      	strh	r3, [r7, #14]
 8013412:	687a      	ldr	r2, [r7, #4]
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	441a      	add	r2, r3
 801341c:	89fb      	ldrh	r3, [r7, #14]
 801341e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801342a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801342e:	b29b      	uxth	r3, r3
 8013430:	8013      	strh	r3, [r2, #0]
 8013432:	e14d      	b.n	80136d0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	785b      	ldrb	r3, [r3, #1]
 8013438:	2b00      	cmp	r3, #0
 801343a:	f040 80a5 	bne.w	8013588 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801343e:	687a      	ldr	r2, [r7, #4]
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	4413      	add	r3, r2
 8013448:	881b      	ldrh	r3, [r3, #0]
 801344a:	843b      	strh	r3, [r7, #32]
 801344c:	8c3b      	ldrh	r3, [r7, #32]
 801344e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013452:	2b00      	cmp	r3, #0
 8013454:	d01b      	beq.n	801348e <USB_DeactivateEndpoint+0x18a>
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	4413      	add	r3, r2
 8013460:	881b      	ldrh	r3, [r3, #0]
 8013462:	b29b      	uxth	r3, r3
 8013464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801346c:	83fb      	strh	r3, [r7, #30]
 801346e:	687a      	ldr	r2, [r7, #4]
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	781b      	ldrb	r3, [r3, #0]
 8013474:	009b      	lsls	r3, r3, #2
 8013476:	441a      	add	r2, r3
 8013478:	8bfb      	ldrh	r3, [r7, #30]
 801347a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801347e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801348a:	b29b      	uxth	r3, r3
 801348c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	4413      	add	r3, r2
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	83bb      	strh	r3, [r7, #28]
 801349c:	8bbb      	ldrh	r3, [r7, #28]
 801349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d01b      	beq.n	80134de <USB_DeactivateEndpoint+0x1da>
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	4413      	add	r3, r2
 80134b0:	881b      	ldrh	r3, [r3, #0]
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80134b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134bc:	837b      	strh	r3, [r7, #26]
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	009b      	lsls	r3, r3, #2
 80134c6:	441a      	add	r2, r3
 80134c8:	8b7b      	ldrh	r3, [r7, #26]
 80134ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80134ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80134d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80134d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80134da:	b29b      	uxth	r3, r3
 80134dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	4413      	add	r3, r2
 80134e8:	881b      	ldrh	r3, [r3, #0]
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80134f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134f4:	833b      	strh	r3, [r7, #24]
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	441a      	add	r2, r3
 8013500:	8b3b      	ldrh	r3, [r7, #24]
 8013502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801350a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801350e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013512:	b29b      	uxth	r3, r3
 8013514:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013516:	687a      	ldr	r2, [r7, #4]
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	009b      	lsls	r3, r3, #2
 801351e:	4413      	add	r3, r2
 8013520:	881b      	ldrh	r3, [r3, #0]
 8013522:	b29b      	uxth	r3, r3
 8013524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801352c:	82fb      	strh	r3, [r7, #22]
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	009b      	lsls	r3, r3, #2
 8013536:	441a      	add	r2, r3
 8013538:	8afb      	ldrh	r3, [r7, #22]
 801353a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801353e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801354a:	b29b      	uxth	r3, r3
 801354c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	4413      	add	r3, r2
 8013558:	881b      	ldrh	r3, [r3, #0]
 801355a:	b29b      	uxth	r3, r3
 801355c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013564:	82bb      	strh	r3, [r7, #20]
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	441a      	add	r2, r3
 8013570:	8abb      	ldrh	r3, [r7, #20]
 8013572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801357a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801357e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013582:	b29b      	uxth	r3, r3
 8013584:	8013      	strh	r3, [r2, #0]
 8013586:	e0a3      	b.n	80136d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	781b      	ldrb	r3, [r3, #0]
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	4413      	add	r3, r2
 8013592:	881b      	ldrh	r3, [r3, #0]
 8013594:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8013596:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801359c:	2b00      	cmp	r3, #0
 801359e:	d01b      	beq.n	80135d8 <USB_DeactivateEndpoint+0x2d4>
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	4413      	add	r3, r2
 80135aa:	881b      	ldrh	r3, [r3, #0]
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80135b8:	687a      	ldr	r2, [r7, #4]
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	441a      	add	r2, r3
 80135c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80135c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80135c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80135cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80135d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80135d8:	687a      	ldr	r2, [r7, #4]
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	4413      	add	r3, r2
 80135e2:	881b      	ldrh	r3, [r3, #0]
 80135e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80135e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d01b      	beq.n	8013628 <USB_DeactivateEndpoint+0x324>
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	4413      	add	r3, r2
 80135fa:	881b      	ldrh	r3, [r3, #0]
 80135fc:	b29b      	uxth	r3, r3
 80135fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013606:	853b      	strh	r3, [r7, #40]	; 0x28
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	441a      	add	r2, r3
 8013612:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801361c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013620:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013624:	b29b      	uxth	r3, r3
 8013626:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	4413      	add	r3, r2
 8013632:	881b      	ldrh	r3, [r3, #0]
 8013634:	b29b      	uxth	r3, r3
 8013636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801363e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	009b      	lsls	r3, r3, #2
 8013648:	441a      	add	r2, r3
 801364a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801364c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801365c:	b29b      	uxth	r3, r3
 801365e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	4413      	add	r3, r2
 801366a:	881b      	ldrh	r3, [r3, #0]
 801366c:	b29b      	uxth	r3, r3
 801366e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013676:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	441a      	add	r2, r3
 8013682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801368c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013694:	b29b      	uxth	r3, r3
 8013696:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013698:	687a      	ldr	r2, [r7, #4]
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	4413      	add	r3, r2
 80136a2:	881b      	ldrh	r3, [r3, #0]
 80136a4:	b29b      	uxth	r3, r3
 80136a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80136aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80136ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	009b      	lsls	r3, r3, #2
 80136b8:	441a      	add	r2, r3
 80136ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80136c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80136c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80136c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80136d0:	2300      	movs	r3, #0
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3734      	adds	r7, #52	; 0x34
 80136d6:	46bd      	mov	sp, r7
 80136d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136dc:	4770      	bx	lr

080136de <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80136de:	b580      	push	{r7, lr}
 80136e0:	b0c2      	sub	sp, #264	; 0x108
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136ec:	6018      	str	r0, [r3, #0]
 80136ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136f6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80136f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	785b      	ldrb	r3, [r3, #1]
 8013704:	2b01      	cmp	r3, #1
 8013706:	f040 86b7 	bne.w	8014478 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801370a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801370e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	699a      	ldr	r2, [r3, #24]
 8013716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801371a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	691b      	ldr	r3, [r3, #16]
 8013722:	429a      	cmp	r2, r3
 8013724:	d908      	bls.n	8013738 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8013726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801372a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	691b      	ldr	r3, [r3, #16]
 8013732:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013736:	e007      	b.n	8013748 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8013738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801373c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	699b      	ldr	r3, [r3, #24]
 8013744:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801374c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	7b1b      	ldrb	r3, [r3, #12]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d13a      	bne.n	80137ce <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801375c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	6959      	ldr	r1, [r3, #20]
 8013764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	88da      	ldrh	r2, [r3, #6]
 8013770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013774:	b29b      	uxth	r3, r3
 8013776:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801377a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801377e:	6800      	ldr	r0, [r0, #0]
 8013780:	f001 fc98 	bl	80150b4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	613b      	str	r3, [r7, #16]
 8013790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801379e:	b29b      	uxth	r3, r3
 80137a0:	461a      	mov	r2, r3
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	4413      	add	r3, r2
 80137a6:	613b      	str	r3, [r7, #16]
 80137a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	00da      	lsls	r2, r3, #3
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	4413      	add	r3, r2
 80137ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80137be:	60fb      	str	r3, [r7, #12]
 80137c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80137c4:	b29a      	uxth	r2, r3
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	801a      	strh	r2, [r3, #0]
 80137ca:	f000 be1f 	b.w	801440c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80137ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	78db      	ldrb	r3, [r3, #3]
 80137da:	2b02      	cmp	r3, #2
 80137dc:	f040 8462 	bne.w	80140a4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80137e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	6a1a      	ldr	r2, [r3, #32]
 80137ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	691b      	ldr	r3, [r3, #16]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	f240 83df 	bls.w	8013fbc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80137fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013802:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801380c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	009b      	lsls	r3, r3, #2
 8013816:	4413      	add	r3, r2
 8013818:	881b      	ldrh	r3, [r3, #0]
 801381a:	b29b      	uxth	r3, r3
 801381c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013824:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801382c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	781b      	ldrb	r3, [r3, #0]
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	441a      	add	r2, r3
 8013842:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801384a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801384e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8013852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013856:	b29b      	uxth	r3, r3
 8013858:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801385a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801385e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	6a1a      	ldr	r2, [r3, #32]
 8013866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801386a:	1ad2      	subs	r2, r2, r3
 801386c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801387c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013880:	681a      	ldr	r2, [r3, #0]
 8013882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	009b      	lsls	r3, r3, #2
 8013890:	4413      	add	r3, r2
 8013892:	881b      	ldrh	r3, [r3, #0]
 8013894:	b29b      	uxth	r3, r3
 8013896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801389a:	2b00      	cmp	r3, #0
 801389c:	f000 81c7 	beq.w	8013c2e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80138a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	633b      	str	r3, [r7, #48]	; 0x30
 80138ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	785b      	ldrb	r3, [r3, #1]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d177      	bne.n	80139ac <USB_EPStartXfer+0x2ce>
 80138bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80138c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	461a      	mov	r2, r3
 80138da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138dc:	4413      	add	r3, r2
 80138de:	62bb      	str	r3, [r7, #40]	; 0x28
 80138e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	00da      	lsls	r2, r3, #3
 80138ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f0:	4413      	add	r3, r2
 80138f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80138f6:	627b      	str	r3, [r7, #36]	; 0x24
 80138f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fa:	881b      	ldrh	r3, [r3, #0]
 80138fc:	b29b      	uxth	r3, r3
 80138fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013902:	b29a      	uxth	r2, r3
 8013904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013906:	801a      	strh	r2, [r3, #0]
 8013908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801390c:	2b3e      	cmp	r3, #62	; 0x3e
 801390e:	d921      	bls.n	8013954 <USB_EPStartXfer+0x276>
 8013910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013914:	095b      	lsrs	r3, r3, #5
 8013916:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801391e:	f003 031f 	and.w	r3, r3, #31
 8013922:	2b00      	cmp	r3, #0
 8013924:	d104      	bne.n	8013930 <USB_EPStartXfer+0x252>
 8013926:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801392a:	3b01      	subs	r3, #1
 801392c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013932:	881b      	ldrh	r3, [r3, #0]
 8013934:	b29a      	uxth	r2, r3
 8013936:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801393a:	b29b      	uxth	r3, r3
 801393c:	029b      	lsls	r3, r3, #10
 801393e:	b29b      	uxth	r3, r3
 8013940:	4313      	orrs	r3, r2
 8013942:	b29b      	uxth	r3, r3
 8013944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801394c:	b29a      	uxth	r2, r3
 801394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013950:	801a      	strh	r2, [r3, #0]
 8013952:	e050      	b.n	80139f6 <USB_EPStartXfer+0x318>
 8013954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013958:	2b00      	cmp	r3, #0
 801395a:	d10a      	bne.n	8013972 <USB_EPStartXfer+0x294>
 801395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801395e:	881b      	ldrh	r3, [r3, #0]
 8013960:	b29b      	uxth	r3, r3
 8013962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801396a:	b29a      	uxth	r2, r3
 801396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396e:	801a      	strh	r2, [r3, #0]
 8013970:	e041      	b.n	80139f6 <USB_EPStartXfer+0x318>
 8013972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013976:	085b      	lsrs	r3, r3, #1
 8013978:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013980:	f003 0301 	and.w	r3, r3, #1
 8013984:	2b00      	cmp	r3, #0
 8013986:	d004      	beq.n	8013992 <USB_EPStartXfer+0x2b4>
 8013988:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801398c:	3301      	adds	r3, #1
 801398e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013994:	881b      	ldrh	r3, [r3, #0]
 8013996:	b29a      	uxth	r2, r3
 8013998:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801399c:	b29b      	uxth	r3, r3
 801399e:	029b      	lsls	r3, r3, #10
 80139a0:	b29b      	uxth	r3, r3
 80139a2:	4313      	orrs	r3, r2
 80139a4:	b29a      	uxth	r2, r3
 80139a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a8:	801a      	strh	r2, [r3, #0]
 80139aa:	e024      	b.n	80139f6 <USB_EPStartXfer+0x318>
 80139ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	785b      	ldrb	r3, [r3, #1]
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d11c      	bne.n	80139f6 <USB_EPStartXfer+0x318>
 80139bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80139ca:	b29b      	uxth	r3, r3
 80139cc:	461a      	mov	r2, r3
 80139ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d0:	4413      	add	r3, r2
 80139d2:	633b      	str	r3, [r7, #48]	; 0x30
 80139d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	00da      	lsls	r2, r3, #3
 80139e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e4:	4413      	add	r3, r2
 80139e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80139ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80139f0:	b29a      	uxth	r2, r3
 80139f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80139f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	895b      	ldrh	r3, [r3, #10]
 8013a02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	6959      	ldr	r1, [r3, #20]
 8013a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013a1c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013a20:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013a24:	6800      	ldr	r0, [r0, #0]
 8013a26:	f001 fb45 	bl	80150b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8013a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	695a      	ldr	r2, [r3, #20]
 8013a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a3a:	441a      	add	r2, r3
 8013a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	6a1a      	ldr	r2, [r3, #32]
 8013a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	691b      	ldr	r3, [r3, #16]
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d90f      	bls.n	8013a84 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8013a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	6a1a      	ldr	r2, [r3, #32]
 8013a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a74:	1ad2      	subs	r2, r2, r3
 8013a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	621a      	str	r2, [r3, #32]
 8013a82:	e00e      	b.n	8013aa2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8013a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	6a1b      	ldr	r3, [r3, #32]
 8013a90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8013a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	785b      	ldrb	r3, [r3, #1]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d177      	bne.n	8013ba2 <USB_EPStartXfer+0x4c4>
 8013ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	61bb      	str	r3, [r7, #24]
 8013abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013acc:	b29b      	uxth	r3, r3
 8013ace:	461a      	mov	r2, r3
 8013ad0:	69bb      	ldr	r3, [r7, #24]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	61bb      	str	r3, [r7, #24]
 8013ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	00da      	lsls	r2, r3, #3
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	4413      	add	r3, r2
 8013ae8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013aec:	617b      	str	r3, [r7, #20]
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	881b      	ldrh	r3, [r3, #0]
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	801a      	strh	r2, [r3, #0]
 8013afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b02:	2b3e      	cmp	r3, #62	; 0x3e
 8013b04:	d921      	bls.n	8013b4a <USB_EPStartXfer+0x46c>
 8013b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b0a:	095b      	lsrs	r3, r3, #5
 8013b0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b14:	f003 031f 	and.w	r3, r3, #31
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d104      	bne.n	8013b26 <USB_EPStartXfer+0x448>
 8013b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013b20:	3b01      	subs	r3, #1
 8013b22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	b29a      	uxth	r2, r3
 8013b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013b30:	b29b      	uxth	r3, r3
 8013b32:	029b      	lsls	r3, r3, #10
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	4313      	orrs	r3, r2
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013b42:	b29a      	uxth	r2, r3
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	801a      	strh	r2, [r3, #0]
 8013b48:	e056      	b.n	8013bf8 <USB_EPStartXfer+0x51a>
 8013b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d10a      	bne.n	8013b68 <USB_EPStartXfer+0x48a>
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	881b      	ldrh	r3, [r3, #0]
 8013b56:	b29b      	uxth	r3, r3
 8013b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013b60:	b29a      	uxth	r2, r3
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	801a      	strh	r2, [r3, #0]
 8013b66:	e047      	b.n	8013bf8 <USB_EPStartXfer+0x51a>
 8013b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b6c:	085b      	lsrs	r3, r3, #1
 8013b6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b76:	f003 0301 	and.w	r3, r3, #1
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d004      	beq.n	8013b88 <USB_EPStartXfer+0x4aa>
 8013b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013b82:	3301      	adds	r3, #1
 8013b84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	881b      	ldrh	r3, [r3, #0]
 8013b8c:	b29a      	uxth	r2, r3
 8013b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	029b      	lsls	r3, r3, #10
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	4313      	orrs	r3, r2
 8013b9a:	b29a      	uxth	r2, r3
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	801a      	strh	r2, [r3, #0]
 8013ba0:	e02a      	b.n	8013bf8 <USB_EPStartXfer+0x51a>
 8013ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	785b      	ldrb	r3, [r3, #1]
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	d122      	bne.n	8013bf8 <USB_EPStartXfer+0x51a>
 8013bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	623b      	str	r3, [r7, #32]
 8013bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	461a      	mov	r2, r3
 8013bd0:	6a3b      	ldr	r3, [r7, #32]
 8013bd2:	4413      	add	r3, r2
 8013bd4:	623b      	str	r3, [r7, #32]
 8013bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	00da      	lsls	r2, r3, #3
 8013be4:	6a3b      	ldr	r3, [r7, #32]
 8013be6:	4413      	add	r3, r2
 8013be8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013bec:	61fb      	str	r3, [r7, #28]
 8013bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013bf2:	b29a      	uxth	r2, r3
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	891b      	ldrh	r3, [r3, #8]
 8013c04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	6959      	ldr	r1, [r3, #20]
 8013c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c18:	b29b      	uxth	r3, r3
 8013c1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013c1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013c22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013c26:	6800      	ldr	r0, [r0, #0]
 8013c28:	f001 fa44 	bl	80150b4 <USB_WritePMA>
 8013c2c:	e3ee      	b.n	801440c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	785b      	ldrb	r3, [r3, #1]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d177      	bne.n	8013d2e <USB_EPStartXfer+0x650>
 8013c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8013c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013c58:	b29b      	uxth	r3, r3
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c5e:	4413      	add	r3, r2
 8013c60:	64bb      	str	r3, [r7, #72]	; 0x48
 8013c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	00da      	lsls	r2, r3, #3
 8013c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c72:	4413      	add	r3, r2
 8013c74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013c78:	647b      	str	r3, [r7, #68]	; 0x44
 8013c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c7c:	881b      	ldrh	r3, [r3, #0]
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c88:	801a      	strh	r2, [r3, #0]
 8013c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8013c90:	d921      	bls.n	8013cd6 <USB_EPStartXfer+0x5f8>
 8013c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013c96:	095b      	lsrs	r3, r3, #5
 8013c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ca0:	f003 031f 	and.w	r3, r3, #31
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d104      	bne.n	8013cb2 <USB_EPStartXfer+0x5d4>
 8013ca8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013cac:	3b01      	subs	r3, #1
 8013cae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cb4:	881b      	ldrh	r3, [r3, #0]
 8013cb6:	b29a      	uxth	r2, r3
 8013cb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	029b      	lsls	r3, r3, #10
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	4313      	orrs	r3, r2
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013cce:	b29a      	uxth	r2, r3
 8013cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cd2:	801a      	strh	r2, [r3, #0]
 8013cd4:	e056      	b.n	8013d84 <USB_EPStartXfer+0x6a6>
 8013cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d10a      	bne.n	8013cf4 <USB_EPStartXfer+0x616>
 8013cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ce0:	881b      	ldrh	r3, [r3, #0]
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cf0:	801a      	strh	r2, [r3, #0]
 8013cf2:	e047      	b.n	8013d84 <USB_EPStartXfer+0x6a6>
 8013cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013cf8:	085b      	lsrs	r3, r3, #1
 8013cfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d02:	f003 0301 	and.w	r3, r3, #1
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d004      	beq.n	8013d14 <USB_EPStartXfer+0x636>
 8013d0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013d0e:	3301      	adds	r3, #1
 8013d10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d16:	881b      	ldrh	r3, [r3, #0]
 8013d18:	b29a      	uxth	r2, r3
 8013d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	029b      	lsls	r3, r3, #10
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	4313      	orrs	r3, r2
 8013d26:	b29a      	uxth	r2, r3
 8013d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d2a:	801a      	strh	r2, [r3, #0]
 8013d2c:	e02a      	b.n	8013d84 <USB_EPStartXfer+0x6a6>
 8013d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	785b      	ldrb	r3, [r3, #1]
 8013d3a:	2b01      	cmp	r3, #1
 8013d3c:	d122      	bne.n	8013d84 <USB_EPStartXfer+0x6a6>
 8013d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	653b      	str	r3, [r7, #80]	; 0x50
 8013d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013d58:	b29b      	uxth	r3, r3
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d5e:	4413      	add	r3, r2
 8013d60:	653b      	str	r3, [r7, #80]	; 0x50
 8013d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	00da      	lsls	r2, r3, #3
 8013d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d72:	4413      	add	r3, r2
 8013d74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013d78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d7e:	b29a      	uxth	r2, r3
 8013d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	891b      	ldrh	r3, [r3, #8]
 8013d90:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	6959      	ldr	r1, [r3, #20]
 8013da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013daa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013dae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013db2:	6800      	ldr	r0, [r0, #0]
 8013db4:	f001 f97e 	bl	80150b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8013db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	695a      	ldr	r2, [r3, #20]
 8013dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013dc8:	441a      	add	r2, r3
 8013dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	6a1a      	ldr	r2, [r3, #32]
 8013de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	691b      	ldr	r3, [r3, #16]
 8013dee:	429a      	cmp	r2, r3
 8013df0:	d90f      	bls.n	8013e12 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8013df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	6a1a      	ldr	r2, [r3, #32]
 8013dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e02:	1ad2      	subs	r2, r2, r3
 8013e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	621a      	str	r2, [r3, #32]
 8013e10:	e00e      	b.n	8013e30 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8013e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	6a1b      	ldr	r3, [r3, #32]
 8013e1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8013e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8013e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	785b      	ldrb	r3, [r3, #1]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d177      	bne.n	8013f3c <USB_EPStartXfer+0x85e>
 8013e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8013e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	461a      	mov	r2, r3
 8013e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e6c:	4413      	add	r3, r2
 8013e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	00da      	lsls	r2, r3, #3
 8013e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e80:	4413      	add	r3, r2
 8013e82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013e86:	637b      	str	r3, [r7, #52]	; 0x34
 8013e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8a:	881b      	ldrh	r3, [r3, #0]
 8013e8c:	b29b      	uxth	r3, r3
 8013e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013e92:	b29a      	uxth	r2, r3
 8013e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e96:	801a      	strh	r2, [r3, #0]
 8013e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e9c:	2b3e      	cmp	r3, #62	; 0x3e
 8013e9e:	d921      	bls.n	8013ee4 <USB_EPStartXfer+0x806>
 8013ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ea4:	095b      	lsrs	r3, r3, #5
 8013ea6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013eae:	f003 031f 	and.w	r3, r3, #31
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d104      	bne.n	8013ec0 <USB_EPStartXfer+0x7e2>
 8013eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013eba:	3b01      	subs	r3, #1
 8013ebc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec2:	881b      	ldrh	r3, [r3, #0]
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	029b      	lsls	r3, r3, #10
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	4313      	orrs	r3, r2
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ee0:	801a      	strh	r2, [r3, #0]
 8013ee2:	e050      	b.n	8013f86 <USB_EPStartXfer+0x8a8>
 8013ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d10a      	bne.n	8013f02 <USB_EPStartXfer+0x824>
 8013eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eee:	881b      	ldrh	r3, [r3, #0]
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013efa:	b29a      	uxth	r2, r3
 8013efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013efe:	801a      	strh	r2, [r3, #0]
 8013f00:	e041      	b.n	8013f86 <USB_EPStartXfer+0x8a8>
 8013f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013f06:	085b      	lsrs	r3, r3, #1
 8013f08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013f10:	f003 0301 	and.w	r3, r3, #1
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d004      	beq.n	8013f22 <USB_EPStartXfer+0x844>
 8013f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f24:	881b      	ldrh	r3, [r3, #0]
 8013f26:	b29a      	uxth	r2, r3
 8013f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	029b      	lsls	r3, r3, #10
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	4313      	orrs	r3, r2
 8013f34:	b29a      	uxth	r2, r3
 8013f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f38:	801a      	strh	r2, [r3, #0]
 8013f3a:	e024      	b.n	8013f86 <USB_EPStartXfer+0x8a8>
 8013f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	785b      	ldrb	r3, [r3, #1]
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d11c      	bne.n	8013f86 <USB_EPStartXfer+0x8a8>
 8013f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f60:	4413      	add	r3, r2
 8013f62:	643b      	str	r3, [r7, #64]	; 0x40
 8013f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	00da      	lsls	r2, r3, #3
 8013f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f74:	4413      	add	r3, r2
 8013f76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013f80:	b29a      	uxth	r2, r3
 8013f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	895b      	ldrh	r3, [r3, #10]
 8013f92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	6959      	ldr	r1, [r3, #20]
 8013fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013fac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013fb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013fb4:	6800      	ldr	r0, [r0, #0]
 8013fb6:	f001 f87d 	bl	80150b4 <USB_WritePMA>
 8013fba:	e227      	b.n	801440c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8013fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	6a1b      	ldr	r3, [r3, #32]
 8013fc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013fd4:	681a      	ldr	r2, [r3, #0]
 8013fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	009b      	lsls	r3, r3, #2
 8013fe4:	4413      	add	r3, r2
 8013fe6:	881b      	ldrh	r3, [r3, #0]
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8013fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013ff2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8013ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	009b      	lsls	r3, r3, #2
 801400e:	441a      	add	r2, r3
 8014010:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8014014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801401c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014024:	b29b      	uxth	r3, r3
 8014026:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8014028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801402c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014042:	b29b      	uxth	r3, r3
 8014044:	461a      	mov	r2, r3
 8014046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014048:	4413      	add	r3, r2
 801404a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801404c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	00da      	lsls	r2, r3, #3
 801405a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801405c:	4413      	add	r3, r2
 801405e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014062:	65bb      	str	r3, [r7, #88]	; 0x58
 8014064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014068:	b29a      	uxth	r2, r3
 801406a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801406c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801406e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	891b      	ldrh	r3, [r3, #8]
 801407a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801407e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	6959      	ldr	r1, [r3, #20]
 801408a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801408e:	b29b      	uxth	r3, r3
 8014090:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8014094:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8014098:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801409c:	6800      	ldr	r0, [r0, #0]
 801409e:	f001 f809 	bl	80150b4 <USB_WritePMA>
 80140a2:	e1b3      	b.n	801440c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80140a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	6a1a      	ldr	r2, [r3, #32]
 80140b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80140b4:	1ad2      	subs	r2, r2, r3
 80140b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80140c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80140ca:	681a      	ldr	r2, [r3, #0]
 80140cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	4413      	add	r3, r2
 80140dc:	881b      	ldrh	r3, [r3, #0]
 80140de:	b29b      	uxth	r3, r3
 80140e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	f000 80c6 	beq.w	8014276 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80140ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	673b      	str	r3, [r7, #112]	; 0x70
 80140f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	785b      	ldrb	r3, [r3, #1]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d177      	bne.n	80141f6 <USB_EPStartXfer+0xb18>
 8014106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801410a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	66bb      	str	r3, [r7, #104]	; 0x68
 8014112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014120:	b29b      	uxth	r3, r3
 8014122:	461a      	mov	r2, r3
 8014124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014126:	4413      	add	r3, r2
 8014128:	66bb      	str	r3, [r7, #104]	; 0x68
 801412a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801412e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	00da      	lsls	r2, r3, #3
 8014138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801413a:	4413      	add	r3, r2
 801413c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014140:	667b      	str	r3, [r7, #100]	; 0x64
 8014142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	b29b      	uxth	r3, r3
 8014148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801414c:	b29a      	uxth	r2, r3
 801414e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014150:	801a      	strh	r2, [r3, #0]
 8014152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014156:	2b3e      	cmp	r3, #62	; 0x3e
 8014158:	d921      	bls.n	801419e <USB_EPStartXfer+0xac0>
 801415a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801415e:	095b      	lsrs	r3, r3, #5
 8014160:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014168:	f003 031f 	and.w	r3, r3, #31
 801416c:	2b00      	cmp	r3, #0
 801416e:	d104      	bne.n	801417a <USB_EPStartXfer+0xa9c>
 8014170:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014174:	3b01      	subs	r3, #1
 8014176:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801417a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801417c:	881b      	ldrh	r3, [r3, #0]
 801417e:	b29a      	uxth	r2, r3
 8014180:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014184:	b29b      	uxth	r3, r3
 8014186:	029b      	lsls	r3, r3, #10
 8014188:	b29b      	uxth	r3, r3
 801418a:	4313      	orrs	r3, r2
 801418c:	b29b      	uxth	r3, r3
 801418e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014196:	b29a      	uxth	r2, r3
 8014198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801419a:	801a      	strh	r2, [r3, #0]
 801419c:	e050      	b.n	8014240 <USB_EPStartXfer+0xb62>
 801419e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d10a      	bne.n	80141bc <USB_EPStartXfer+0xade>
 80141a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141a8:	881b      	ldrh	r3, [r3, #0]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80141b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80141b4:	b29a      	uxth	r2, r3
 80141b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141b8:	801a      	strh	r2, [r3, #0]
 80141ba:	e041      	b.n	8014240 <USB_EPStartXfer+0xb62>
 80141bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141c0:	085b      	lsrs	r3, r3, #1
 80141c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80141c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141ca:	f003 0301 	and.w	r3, r3, #1
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d004      	beq.n	80141dc <USB_EPStartXfer+0xafe>
 80141d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80141d6:	3301      	adds	r3, #1
 80141d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80141dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141de:	881b      	ldrh	r3, [r3, #0]
 80141e0:	b29a      	uxth	r2, r3
 80141e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80141e6:	b29b      	uxth	r3, r3
 80141e8:	029b      	lsls	r3, r3, #10
 80141ea:	b29b      	uxth	r3, r3
 80141ec:	4313      	orrs	r3, r2
 80141ee:	b29a      	uxth	r2, r3
 80141f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141f2:	801a      	strh	r2, [r3, #0]
 80141f4:	e024      	b.n	8014240 <USB_EPStartXfer+0xb62>
 80141f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	785b      	ldrb	r3, [r3, #1]
 8014202:	2b01      	cmp	r3, #1
 8014204:	d11c      	bne.n	8014240 <USB_EPStartXfer+0xb62>
 8014206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801420a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014214:	b29b      	uxth	r3, r3
 8014216:	461a      	mov	r2, r3
 8014218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801421a:	4413      	add	r3, r2
 801421c:	673b      	str	r3, [r7, #112]	; 0x70
 801421e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	781b      	ldrb	r3, [r3, #0]
 801422a:	00da      	lsls	r2, r3, #3
 801422c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801422e:	4413      	add	r3, r2
 8014230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014234:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801423a:	b29a      	uxth	r2, r3
 801423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801423e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8014240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	895b      	ldrh	r3, [r3, #10]
 801424c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	6959      	ldr	r1, [r3, #20]
 801425c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014260:	b29b      	uxth	r3, r3
 8014262:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8014266:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801426a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801426e:	6800      	ldr	r0, [r0, #0]
 8014270:	f000 ff20 	bl	80150b4 <USB_WritePMA>
 8014274:	e0ca      	b.n	801440c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801427a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	785b      	ldrb	r3, [r3, #1]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d177      	bne.n	8014376 <USB_EPStartXfer+0xc98>
 8014286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801428a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80142a0:	b29b      	uxth	r3, r3
 80142a2:	461a      	mov	r2, r3
 80142a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80142a6:	4413      	add	r3, r2
 80142a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80142aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	00da      	lsls	r2, r3, #3
 80142b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80142ba:	4413      	add	r3, r2
 80142bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80142c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80142c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142c4:	881b      	ldrh	r3, [r3, #0]
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80142cc:	b29a      	uxth	r2, r3
 80142ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142d0:	801a      	strh	r2, [r3, #0]
 80142d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142d6:	2b3e      	cmp	r3, #62	; 0x3e
 80142d8:	d921      	bls.n	801431e <USB_EPStartXfer+0xc40>
 80142da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142de:	095b      	lsrs	r3, r3, #5
 80142e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80142e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142e8:	f003 031f 	and.w	r3, r3, #31
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d104      	bne.n	80142fa <USB_EPStartXfer+0xc1c>
 80142f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80142f4:	3b01      	subs	r3, #1
 80142f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80142fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142fc:	881b      	ldrh	r3, [r3, #0]
 80142fe:	b29a      	uxth	r2, r3
 8014300:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014304:	b29b      	uxth	r3, r3
 8014306:	029b      	lsls	r3, r3, #10
 8014308:	b29b      	uxth	r3, r3
 801430a:	4313      	orrs	r3, r2
 801430c:	b29b      	uxth	r3, r3
 801430e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014316:	b29a      	uxth	r2, r3
 8014318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801431a:	801a      	strh	r2, [r3, #0]
 801431c:	e05c      	b.n	80143d8 <USB_EPStartXfer+0xcfa>
 801431e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014322:	2b00      	cmp	r3, #0
 8014324:	d10a      	bne.n	801433c <USB_EPStartXfer+0xc5e>
 8014326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014328:	881b      	ldrh	r3, [r3, #0]
 801432a:	b29b      	uxth	r3, r3
 801432c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014334:	b29a      	uxth	r2, r3
 8014336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014338:	801a      	strh	r2, [r3, #0]
 801433a:	e04d      	b.n	80143d8 <USB_EPStartXfer+0xcfa>
 801433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014340:	085b      	lsrs	r3, r3, #1
 8014342:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801434a:	f003 0301 	and.w	r3, r3, #1
 801434e:	2b00      	cmp	r3, #0
 8014350:	d004      	beq.n	801435c <USB_EPStartXfer+0xc7e>
 8014352:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014356:	3301      	adds	r3, #1
 8014358:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801435c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801435e:	881b      	ldrh	r3, [r3, #0]
 8014360:	b29a      	uxth	r2, r3
 8014362:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014366:	b29b      	uxth	r3, r3
 8014368:	029b      	lsls	r3, r3, #10
 801436a:	b29b      	uxth	r3, r3
 801436c:	4313      	orrs	r3, r2
 801436e:	b29a      	uxth	r2, r3
 8014370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014372:	801a      	strh	r2, [r3, #0]
 8014374:	e030      	b.n	80143d8 <USB_EPStartXfer+0xcfa>
 8014376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801437a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	785b      	ldrb	r3, [r3, #1]
 8014382:	2b01      	cmp	r3, #1
 8014384:	d128      	bne.n	80143d8 <USB_EPStartXfer+0xcfa>
 8014386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801438a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80143a2:	b29b      	uxth	r3, r3
 80143a4:	461a      	mov	r2, r3
 80143a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80143aa:	4413      	add	r3, r2
 80143ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80143b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	00da      	lsls	r2, r3, #3
 80143be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80143c2:	4413      	add	r3, r2
 80143c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80143c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80143cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80143d0:	b29a      	uxth	r2, r3
 80143d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80143d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80143d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	891b      	ldrh	r3, [r3, #8]
 80143e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80143e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80143ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	6959      	ldr	r1, [r3, #20]
 80143f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80143fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8014402:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8014406:	6800      	ldr	r0, [r0, #0]
 8014408:	f000 fe54 	bl	80150b4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801440c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014414:	681a      	ldr	r2, [r3, #0]
 8014416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801441a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	009b      	lsls	r3, r3, #2
 8014424:	4413      	add	r3, r2
 8014426:	881b      	ldrh	r3, [r3, #0]
 8014428:	b29b      	uxth	r3, r3
 801442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801442e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014432:	817b      	strh	r3, [r7, #10]
 8014434:	897b      	ldrh	r3, [r7, #10]
 8014436:	f083 0310 	eor.w	r3, r3, #16
 801443a:	817b      	strh	r3, [r7, #10]
 801443c:	897b      	ldrh	r3, [r7, #10]
 801443e:	f083 0320 	eor.w	r3, r3, #32
 8014442:	817b      	strh	r3, [r7, #10]
 8014444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	781b      	ldrb	r3, [r3, #0]
 801445a:	009b      	lsls	r3, r3, #2
 801445c:	441a      	add	r2, r3
 801445e:	897b      	ldrh	r3, [r7, #10]
 8014460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801446c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014470:	b29b      	uxth	r3, r3
 8014472:	8013      	strh	r3, [r2, #0]
 8014474:	f000 bcde 	b.w	8014e34 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8014478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801447c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	7b1b      	ldrb	r3, [r3, #12]
 8014484:	2b00      	cmp	r3, #0
 8014486:	f040 80bb 	bne.w	8014600 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801448a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801448e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	699a      	ldr	r2, [r3, #24]
 8014496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801449a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	691b      	ldr	r3, [r3, #16]
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d917      	bls.n	80144d6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80144a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80144aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	691b      	ldr	r3, [r3, #16]
 80144b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80144b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80144ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	699a      	ldr	r2, [r3, #24]
 80144c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80144c6:	1ad2      	subs	r2, r2, r3
 80144c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80144cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	619a      	str	r2, [r3, #24]
 80144d4:	e00e      	b.n	80144f4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80144d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80144da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	699b      	ldr	r3, [r3, #24]
 80144e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80144e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80144ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	2200      	movs	r2, #0
 80144f2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80144f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80144f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014510:	b29b      	uxth	r3, r3
 8014512:	461a      	mov	r2, r3
 8014514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014518:	4413      	add	r3, r2
 801451a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801451e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	00da      	lsls	r2, r3, #3
 801452c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014530:	4413      	add	r3, r2
 8014532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801453a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801453e:	881b      	ldrh	r3, [r3, #0]
 8014540:	b29b      	uxth	r3, r3
 8014542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014546:	b29a      	uxth	r2, r3
 8014548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801454c:	801a      	strh	r2, [r3, #0]
 801454e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014552:	2b3e      	cmp	r3, #62	; 0x3e
 8014554:	d924      	bls.n	80145a0 <USB_EPStartXfer+0xec2>
 8014556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801455a:	095b      	lsrs	r3, r3, #5
 801455c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014564:	f003 031f 	and.w	r3, r3, #31
 8014568:	2b00      	cmp	r3, #0
 801456a:	d104      	bne.n	8014576 <USB_EPStartXfer+0xe98>
 801456c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014570:	3b01      	subs	r3, #1
 8014572:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801457a:	881b      	ldrh	r3, [r3, #0]
 801457c:	b29a      	uxth	r2, r3
 801457e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014582:	b29b      	uxth	r3, r3
 8014584:	029b      	lsls	r3, r3, #10
 8014586:	b29b      	uxth	r3, r3
 8014588:	4313      	orrs	r3, r2
 801458a:	b29b      	uxth	r3, r3
 801458c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014594:	b29a      	uxth	r2, r3
 8014596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801459a:	801a      	strh	r2, [r3, #0]
 801459c:	f000 bc10 	b.w	8014dc0 <USB_EPStartXfer+0x16e2>
 80145a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d10c      	bne.n	80145c2 <USB_EPStartXfer+0xee4>
 80145a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145ac:	881b      	ldrh	r3, [r3, #0]
 80145ae:	b29b      	uxth	r3, r3
 80145b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80145b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80145b8:	b29a      	uxth	r2, r3
 80145ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145be:	801a      	strh	r2, [r3, #0]
 80145c0:	e3fe      	b.n	8014dc0 <USB_EPStartXfer+0x16e2>
 80145c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80145c6:	085b      	lsrs	r3, r3, #1
 80145c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80145cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80145d0:	f003 0301 	and.w	r3, r3, #1
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d004      	beq.n	80145e2 <USB_EPStartXfer+0xf04>
 80145d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80145dc:	3301      	adds	r3, #1
 80145de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80145e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145e6:	881b      	ldrh	r3, [r3, #0]
 80145e8:	b29a      	uxth	r2, r3
 80145ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	029b      	lsls	r3, r3, #10
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	4313      	orrs	r3, r2
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145fc:	801a      	strh	r2, [r3, #0]
 80145fe:	e3df      	b.n	8014dc0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8014600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	78db      	ldrb	r3, [r3, #3]
 801460c:	2b02      	cmp	r3, #2
 801460e:	f040 8218 	bne.w	8014a42 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8014612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	785b      	ldrb	r3, [r3, #1]
 801461e:	2b00      	cmp	r3, #0
 8014620:	f040 809d 	bne.w	801475e <USB_EPStartXfer+0x1080>
 8014624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014640:	b29b      	uxth	r3, r3
 8014642:	461a      	mov	r2, r3
 8014644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014648:	4413      	add	r3, r2
 801464a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801464e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	00da      	lsls	r2, r3, #3
 801465c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014660:	4413      	add	r3, r2
 8014662:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801466a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801466e:	881b      	ldrh	r3, [r3, #0]
 8014670:	b29b      	uxth	r3, r3
 8014672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014676:	b29a      	uxth	r2, r3
 8014678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801467c:	801a      	strh	r2, [r3, #0]
 801467e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	691b      	ldr	r3, [r3, #16]
 801468a:	2b3e      	cmp	r3, #62	; 0x3e
 801468c:	d92b      	bls.n	80146e6 <USB_EPStartXfer+0x1008>
 801468e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	691b      	ldr	r3, [r3, #16]
 801469a:	095b      	lsrs	r3, r3, #5
 801469c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80146a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80146a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	691b      	ldr	r3, [r3, #16]
 80146ac:	f003 031f 	and.w	r3, r3, #31
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d104      	bne.n	80146be <USB_EPStartXfer+0xfe0>
 80146b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80146b8:	3b01      	subs	r3, #1
 80146ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80146be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146c2:	881b      	ldrh	r3, [r3, #0]
 80146c4:	b29a      	uxth	r2, r3
 80146c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80146ca:	b29b      	uxth	r3, r3
 80146cc:	029b      	lsls	r3, r3, #10
 80146ce:	b29b      	uxth	r3, r3
 80146d0:	4313      	orrs	r3, r2
 80146d2:	b29b      	uxth	r3, r3
 80146d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80146d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80146dc:	b29a      	uxth	r2, r3
 80146de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146e2:	801a      	strh	r2, [r3, #0]
 80146e4:	e070      	b.n	80147c8 <USB_EPStartXfer+0x10ea>
 80146e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80146ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	691b      	ldr	r3, [r3, #16]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d10c      	bne.n	8014710 <USB_EPStartXfer+0x1032>
 80146f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146fa:	881b      	ldrh	r3, [r3, #0]
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014706:	b29a      	uxth	r2, r3
 8014708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801470c:	801a      	strh	r2, [r3, #0]
 801470e:	e05b      	b.n	80147c8 <USB_EPStartXfer+0x10ea>
 8014710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	691b      	ldr	r3, [r3, #16]
 801471c:	085b      	lsrs	r3, r3, #1
 801471e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	691b      	ldr	r3, [r3, #16]
 801472e:	f003 0301 	and.w	r3, r3, #1
 8014732:	2b00      	cmp	r3, #0
 8014734:	d004      	beq.n	8014740 <USB_EPStartXfer+0x1062>
 8014736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801473a:	3301      	adds	r3, #1
 801473c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014740:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014744:	881b      	ldrh	r3, [r3, #0]
 8014746:	b29a      	uxth	r2, r3
 8014748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801474c:	b29b      	uxth	r3, r3
 801474e:	029b      	lsls	r3, r3, #10
 8014750:	b29b      	uxth	r3, r3
 8014752:	4313      	orrs	r3, r2
 8014754:	b29a      	uxth	r2, r3
 8014756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801475a:	801a      	strh	r2, [r3, #0]
 801475c:	e034      	b.n	80147c8 <USB_EPStartXfer+0x10ea>
 801475e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	785b      	ldrb	r3, [r3, #1]
 801476a:	2b01      	cmp	r3, #1
 801476c:	d12c      	bne.n	80147c8 <USB_EPStartXfer+0x10ea>
 801476e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801477c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801478a:	b29b      	uxth	r3, r3
 801478c:	461a      	mov	r2, r3
 801478e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014792:	4413      	add	r3, r2
 8014794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801479c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	00da      	lsls	r2, r3, #3
 80147a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147aa:	4413      	add	r3, r2
 80147ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80147b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80147b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80147b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	691b      	ldr	r3, [r3, #16]
 80147c0:	b29a      	uxth	r2, r3
 80147c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80147c6:	801a      	strh	r2, [r3, #0]
 80147c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80147cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80147d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80147da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	785b      	ldrb	r3, [r3, #1]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	f040 809d 	bne.w	8014922 <USB_EPStartXfer+0x1244>
 80147e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80147ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80147f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80147fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014804:	b29b      	uxth	r3, r3
 8014806:	461a      	mov	r2, r3
 8014808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801480c:	4413      	add	r3, r2
 801480e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8014812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	00da      	lsls	r2, r3, #3
 8014820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014824:	4413      	add	r3, r2
 8014826:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801482a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801482e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014832:	881b      	ldrh	r3, [r3, #0]
 8014834:	b29b      	uxth	r3, r3
 8014836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801483a:	b29a      	uxth	r2, r3
 801483c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014840:	801a      	strh	r2, [r3, #0]
 8014842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	691b      	ldr	r3, [r3, #16]
 801484e:	2b3e      	cmp	r3, #62	; 0x3e
 8014850:	d92b      	bls.n	80148aa <USB_EPStartXfer+0x11cc>
 8014852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	691b      	ldr	r3, [r3, #16]
 801485e:	095b      	lsrs	r3, r3, #5
 8014860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	691b      	ldr	r3, [r3, #16]
 8014870:	f003 031f 	and.w	r3, r3, #31
 8014874:	2b00      	cmp	r3, #0
 8014876:	d104      	bne.n	8014882 <USB_EPStartXfer+0x11a4>
 8014878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801487c:	3b01      	subs	r3, #1
 801487e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014886:	881b      	ldrh	r3, [r3, #0]
 8014888:	b29a      	uxth	r2, r3
 801488a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801488e:	b29b      	uxth	r3, r3
 8014890:	029b      	lsls	r3, r3, #10
 8014892:	b29b      	uxth	r3, r3
 8014894:	4313      	orrs	r3, r2
 8014896:	b29b      	uxth	r3, r3
 8014898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801489c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80148a0:	b29a      	uxth	r2, r3
 80148a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80148a6:	801a      	strh	r2, [r3, #0]
 80148a8:	e069      	b.n	801497e <USB_EPStartXfer+0x12a0>
 80148aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	691b      	ldr	r3, [r3, #16]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d10c      	bne.n	80148d4 <USB_EPStartXfer+0x11f6>
 80148ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	b29b      	uxth	r3, r3
 80148c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80148c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80148d0:	801a      	strh	r2, [r3, #0]
 80148d2:	e054      	b.n	801497e <USB_EPStartXfer+0x12a0>
 80148d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	691b      	ldr	r3, [r3, #16]
 80148e0:	085b      	lsrs	r3, r3, #1
 80148e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80148e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80148ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	691b      	ldr	r3, [r3, #16]
 80148f2:	f003 0301 	and.w	r3, r3, #1
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d004      	beq.n	8014904 <USB_EPStartXfer+0x1226>
 80148fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80148fe:	3301      	adds	r3, #1
 8014900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014908:	881b      	ldrh	r3, [r3, #0]
 801490a:	b29a      	uxth	r2, r3
 801490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014910:	b29b      	uxth	r3, r3
 8014912:	029b      	lsls	r3, r3, #10
 8014914:	b29b      	uxth	r3, r3
 8014916:	4313      	orrs	r3, r2
 8014918:	b29a      	uxth	r2, r3
 801491a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801491e:	801a      	strh	r2, [r3, #0]
 8014920:	e02d      	b.n	801497e <USB_EPStartXfer+0x12a0>
 8014922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	785b      	ldrb	r3, [r3, #1]
 801492e:	2b01      	cmp	r3, #1
 8014930:	d125      	bne.n	801497e <USB_EPStartXfer+0x12a0>
 8014932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014940:	b29b      	uxth	r3, r3
 8014942:	461a      	mov	r2, r3
 8014944:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014948:	4413      	add	r3, r2
 801494a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801494e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	00da      	lsls	r2, r3, #3
 801495c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014960:	4413      	add	r3, r2
 8014962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801496a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801496e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	691b      	ldr	r3, [r3, #16]
 8014976:	b29a      	uxth	r2, r3
 8014978:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801497c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801497e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	69db      	ldr	r3, [r3, #28]
 801498a:	2b00      	cmp	r3, #0
 801498c:	f000 8218 	beq.w	8014dc0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014998:	681a      	ldr	r2, [r3, #0]
 801499a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801499e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	009b      	lsls	r3, r3, #2
 80149a8:	4413      	add	r3, r2
 80149aa:	881b      	ldrh	r3, [r3, #0]
 80149ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80149b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80149b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d005      	beq.n	80149c8 <USB_EPStartXfer+0x12ea>
 80149bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80149c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d10d      	bne.n	80149e4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80149c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80149cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	f040 81f5 	bne.w	8014dc0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80149d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80149da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149de:	2b00      	cmp	r3, #0
 80149e0:	f040 81ee 	bne.w	8014dc0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80149e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80149ec:	681a      	ldr	r2, [r3, #0]
 80149ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80149f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	4413      	add	r3, r2
 80149fe:	881b      	ldrh	r3, [r3, #0]
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a0a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8014a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014a16:	681a      	ldr	r2, [r3, #0]
 8014a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	009b      	lsls	r3, r3, #2
 8014a26:	441a      	add	r2, r3
 8014a28:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8014a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014a38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014a3c:	b29b      	uxth	r3, r3
 8014a3e:	8013      	strh	r3, [r2, #0]
 8014a40:	e1be      	b.n	8014dc0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8014a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	78db      	ldrb	r3, [r3, #3]
 8014a4e:	2b01      	cmp	r3, #1
 8014a50:	f040 81b4 	bne.w	8014dbc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	699a      	ldr	r2, [r3, #24]
 8014a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	691b      	ldr	r3, [r3, #16]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d917      	bls.n	8014aa0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8014a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	691b      	ldr	r3, [r3, #16]
 8014a7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8014a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	699a      	ldr	r2, [r3, #24]
 8014a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a90:	1ad2      	subs	r2, r2, r3
 8014a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	619a      	str	r2, [r3, #24]
 8014a9e:	e00e      	b.n	8014abe <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8014aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	699b      	ldr	r3, [r3, #24]
 8014aac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8014ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	2200      	movs	r2, #0
 8014abc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	785b      	ldrb	r3, [r3, #1]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	f040 8085 	bne.w	8014bda <USB_EPStartXfer+0x14fc>
 8014ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	461a      	mov	r2, r3
 8014af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014af4:	4413      	add	r3, r2
 8014af6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	781b      	ldrb	r3, [r3, #0]
 8014b06:	00da      	lsls	r2, r3, #3
 8014b08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014b0c:	4413      	add	r3, r2
 8014b0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014b1a:	881b      	ldrh	r3, [r3, #0]
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014b22:	b29a      	uxth	r2, r3
 8014b24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014b28:	801a      	strh	r2, [r3, #0]
 8014b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b2e:	2b3e      	cmp	r3, #62	; 0x3e
 8014b30:	d923      	bls.n	8014b7a <USB_EPStartXfer+0x149c>
 8014b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b36:	095b      	lsrs	r3, r3, #5
 8014b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b40:	f003 031f 	and.w	r3, r3, #31
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d104      	bne.n	8014b52 <USB_EPStartXfer+0x1474>
 8014b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b4c:	3b01      	subs	r3, #1
 8014b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014b52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014b56:	881b      	ldrh	r3, [r3, #0]
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	029b      	lsls	r3, r3, #10
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	4313      	orrs	r3, r2
 8014b66:	b29b      	uxth	r3, r3
 8014b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014b70:	b29a      	uxth	r2, r3
 8014b72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014b76:	801a      	strh	r2, [r3, #0]
 8014b78:	e060      	b.n	8014c3c <USB_EPStartXfer+0x155e>
 8014b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d10c      	bne.n	8014b9c <USB_EPStartXfer+0x14be>
 8014b82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014b86:	881b      	ldrh	r3, [r3, #0]
 8014b88:	b29b      	uxth	r3, r3
 8014b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014b98:	801a      	strh	r2, [r3, #0]
 8014b9a:	e04f      	b.n	8014c3c <USB_EPStartXfer+0x155e>
 8014b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ba0:	085b      	lsrs	r3, r3, #1
 8014ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014baa:	f003 0301 	and.w	r3, r3, #1
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d004      	beq.n	8014bbc <USB_EPStartXfer+0x14de>
 8014bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014bc0:	881b      	ldrh	r3, [r3, #0]
 8014bc2:	b29a      	uxth	r2, r3
 8014bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014bc8:	b29b      	uxth	r3, r3
 8014bca:	029b      	lsls	r3, r3, #10
 8014bcc:	b29b      	uxth	r3, r3
 8014bce:	4313      	orrs	r3, r2
 8014bd0:	b29a      	uxth	r2, r3
 8014bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014bd6:	801a      	strh	r2, [r3, #0]
 8014bd8:	e030      	b.n	8014c3c <USB_EPStartXfer+0x155e>
 8014bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	785b      	ldrb	r3, [r3, #1]
 8014be6:	2b01      	cmp	r3, #1
 8014be8:	d128      	bne.n	8014c3c <USB_EPStartXfer+0x155e>
 8014bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	461a      	mov	r2, r3
 8014c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014c0e:	4413      	add	r3, r2
 8014c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	00da      	lsls	r2, r3, #3
 8014c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014c26:	4413      	add	r3, r2
 8014c28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c34:	b29a      	uxth	r2, r3
 8014c36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014c3a:	801a      	strh	r2, [r3, #0]
 8014c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	785b      	ldrb	r3, [r3, #1]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	f040 8085 	bne.w	8014d66 <USB_EPStartXfer+0x1688>
 8014c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014c60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014c78:	b29b      	uxth	r3, r3
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014c80:	4413      	add	r3, r2
 8014c82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	781b      	ldrb	r3, [r3, #0]
 8014c92:	00da      	lsls	r2, r3, #3
 8014c94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014c98:	4413      	add	r3, r2
 8014c9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014c9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014ca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014ca6:	881b      	ldrh	r3, [r3, #0]
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014cae:	b29a      	uxth	r2, r3
 8014cb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014cb4:	801a      	strh	r2, [r3, #0]
 8014cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014cba:	2b3e      	cmp	r3, #62	; 0x3e
 8014cbc:	d923      	bls.n	8014d06 <USB_EPStartXfer+0x1628>
 8014cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014cc2:	095b      	lsrs	r3, r3, #5
 8014cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ccc:	f003 031f 	and.w	r3, r3, #31
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d104      	bne.n	8014cde <USB_EPStartXfer+0x1600>
 8014cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014cd8:	3b01      	subs	r3, #1
 8014cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014ce2:	881b      	ldrh	r3, [r3, #0]
 8014ce4:	b29a      	uxth	r2, r3
 8014ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	029b      	lsls	r3, r3, #10
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	4313      	orrs	r3, r2
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014cfc:	b29a      	uxth	r2, r3
 8014cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d02:	801a      	strh	r2, [r3, #0]
 8014d04:	e05c      	b.n	8014dc0 <USB_EPStartXfer+0x16e2>
 8014d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d10c      	bne.n	8014d28 <USB_EPStartXfer+0x164a>
 8014d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d12:	881b      	ldrh	r3, [r3, #0]
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014d1e:	b29a      	uxth	r2, r3
 8014d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d24:	801a      	strh	r2, [r3, #0]
 8014d26:	e04b      	b.n	8014dc0 <USB_EPStartXfer+0x16e2>
 8014d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d2c:	085b      	lsrs	r3, r3, #1
 8014d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d36:	f003 0301 	and.w	r3, r3, #1
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d004      	beq.n	8014d48 <USB_EPStartXfer+0x166a>
 8014d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014d42:	3301      	adds	r3, #1
 8014d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014d48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d4c:	881b      	ldrh	r3, [r3, #0]
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	029b      	lsls	r3, r3, #10
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	4313      	orrs	r3, r2
 8014d5c:	b29a      	uxth	r2, r3
 8014d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d62:	801a      	strh	r2, [r3, #0]
 8014d64:	e02c      	b.n	8014dc0 <USB_EPStartXfer+0x16e2>
 8014d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	785b      	ldrb	r3, [r3, #1]
 8014d72:	2b01      	cmp	r3, #1
 8014d74:	d124      	bne.n	8014dc0 <USB_EPStartXfer+0x16e2>
 8014d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014d84:	b29b      	uxth	r3, r3
 8014d86:	461a      	mov	r2, r3
 8014d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014d8c:	4413      	add	r3, r2
 8014d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	00da      	lsls	r2, r3, #3
 8014da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014da4:	4413      	add	r3, r2
 8014da6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014daa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014db8:	801a      	strh	r2, [r3, #0]
 8014dba:	e001      	b.n	8014dc0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8014dbc:	2301      	movs	r3, #1
 8014dbe:	e03a      	b.n	8014e36 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014dc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014dc8:	681a      	ldr	r2, [r3, #0]
 8014dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	009b      	lsls	r3, r3, #2
 8014dd8:	4413      	add	r3, r2
 8014dda:	881b      	ldrh	r3, [r3, #0]
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014de6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014dea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014dee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014df2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014df6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014dfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8014dfe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014e0a:	681a      	ldr	r2, [r3, #0]
 8014e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	009b      	lsls	r3, r3, #2
 8014e1a:	441a      	add	r2, r3
 8014e1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e30:	b29b      	uxth	r3, r3
 8014e32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8014e34:	2300      	movs	r3, #0
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}

08014e40 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014e40:	b480      	push	{r7}
 8014e42:	b085      	sub	sp, #20
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	785b      	ldrb	r3, [r3, #1]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d020      	beq.n	8014e94 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	4413      	add	r3, r2
 8014e5c:	881b      	ldrh	r3, [r3, #0]
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014e68:	81bb      	strh	r3, [r7, #12]
 8014e6a:	89bb      	ldrh	r3, [r7, #12]
 8014e6c:	f083 0310 	eor.w	r3, r3, #16
 8014e70:	81bb      	strh	r3, [r7, #12]
 8014e72:	687a      	ldr	r2, [r7, #4]
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	009b      	lsls	r3, r3, #2
 8014e7a:	441a      	add	r2, r3
 8014e7c:	89bb      	ldrh	r3, [r7, #12]
 8014e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e8e:	b29b      	uxth	r3, r3
 8014e90:	8013      	strh	r3, [r2, #0]
 8014e92:	e01f      	b.n	8014ed4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	009b      	lsls	r3, r3, #2
 8014e9c:	4413      	add	r3, r2
 8014e9e:	881b      	ldrh	r3, [r3, #0]
 8014ea0:	b29b      	uxth	r3, r3
 8014ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014eaa:	81fb      	strh	r3, [r7, #14]
 8014eac:	89fb      	ldrh	r3, [r7, #14]
 8014eae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014eb2:	81fb      	strh	r3, [r7, #14]
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	683b      	ldr	r3, [r7, #0]
 8014eb8:	781b      	ldrb	r3, [r3, #0]
 8014eba:	009b      	lsls	r3, r3, #2
 8014ebc:	441a      	add	r2, r3
 8014ebe:	89fb      	ldrh	r3, [r7, #14]
 8014ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8014ed4:	2300      	movs	r3, #0
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3714      	adds	r7, #20
 8014eda:	46bd      	mov	sp, r7
 8014edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee0:	4770      	bx	lr

08014ee2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014ee2:	b480      	push	{r7}
 8014ee4:	b087      	sub	sp, #28
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
 8014eea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	7b1b      	ldrb	r3, [r3, #12]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	f040 809d 	bne.w	8015030 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	785b      	ldrb	r3, [r3, #1]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d04c      	beq.n	8014f98 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	781b      	ldrb	r3, [r3, #0]
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	4413      	add	r3, r2
 8014f08:	881b      	ldrh	r3, [r3, #0]
 8014f0a:	823b      	strh	r3, [r7, #16]
 8014f0c:	8a3b      	ldrh	r3, [r7, #16]
 8014f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d01b      	beq.n	8014f4e <USB_EPClearStall+0x6c>
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	009b      	lsls	r3, r3, #2
 8014f1e:	4413      	add	r3, r2
 8014f20:	881b      	ldrh	r3, [r3, #0]
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014f2c:	81fb      	strh	r3, [r7, #14]
 8014f2e:	687a      	ldr	r2, [r7, #4]
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	781b      	ldrb	r3, [r3, #0]
 8014f34:	009b      	lsls	r3, r3, #2
 8014f36:	441a      	add	r2, r3
 8014f38:	89fb      	ldrh	r3, [r7, #14]
 8014f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014f4a:	b29b      	uxth	r3, r3
 8014f4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	78db      	ldrb	r3, [r3, #3]
 8014f52:	2b01      	cmp	r3, #1
 8014f54:	d06c      	beq.n	8015030 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014f56:	687a      	ldr	r2, [r7, #4]
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	781b      	ldrb	r3, [r3, #0]
 8014f5c:	009b      	lsls	r3, r3, #2
 8014f5e:	4413      	add	r3, r2
 8014f60:	881b      	ldrh	r3, [r3, #0]
 8014f62:	b29b      	uxth	r3, r3
 8014f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f6c:	81bb      	strh	r3, [r7, #12]
 8014f6e:	89bb      	ldrh	r3, [r7, #12]
 8014f70:	f083 0320 	eor.w	r3, r3, #32
 8014f74:	81bb      	strh	r3, [r7, #12]
 8014f76:	687a      	ldr	r2, [r7, #4]
 8014f78:	683b      	ldr	r3, [r7, #0]
 8014f7a:	781b      	ldrb	r3, [r3, #0]
 8014f7c:	009b      	lsls	r3, r3, #2
 8014f7e:	441a      	add	r2, r3
 8014f80:	89bb      	ldrh	r3, [r7, #12]
 8014f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f92:	b29b      	uxth	r3, r3
 8014f94:	8013      	strh	r3, [r2, #0]
 8014f96:	e04b      	b.n	8015030 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	781b      	ldrb	r3, [r3, #0]
 8014f9e:	009b      	lsls	r3, r3, #2
 8014fa0:	4413      	add	r3, r2
 8014fa2:	881b      	ldrh	r3, [r3, #0]
 8014fa4:	82fb      	strh	r3, [r7, #22]
 8014fa6:	8afb      	ldrh	r3, [r7, #22]
 8014fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d01b      	beq.n	8014fe8 <USB_EPClearStall+0x106>
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	009b      	lsls	r3, r3, #2
 8014fb8:	4413      	add	r3, r2
 8014fba:	881b      	ldrh	r3, [r3, #0]
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014fc6:	82bb      	strh	r3, [r7, #20]
 8014fc8:	687a      	ldr	r2, [r7, #4]
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	781b      	ldrb	r3, [r3, #0]
 8014fce:	009b      	lsls	r3, r3, #2
 8014fd0:	441a      	add	r2, r3
 8014fd2:	8abb      	ldrh	r3, [r7, #20]
 8014fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fe4:	b29b      	uxth	r3, r3
 8014fe6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014fe8:	687a      	ldr	r2, [r7, #4]
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	781b      	ldrb	r3, [r3, #0]
 8014fee:	009b      	lsls	r3, r3, #2
 8014ff0:	4413      	add	r3, r2
 8014ff2:	881b      	ldrh	r3, [r3, #0]
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ffe:	827b      	strh	r3, [r7, #18]
 8015000:	8a7b      	ldrh	r3, [r7, #18]
 8015002:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8015006:	827b      	strh	r3, [r7, #18]
 8015008:	8a7b      	ldrh	r3, [r7, #18]
 801500a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801500e:	827b      	strh	r3, [r7, #18]
 8015010:	687a      	ldr	r2, [r7, #4]
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	781b      	ldrb	r3, [r3, #0]
 8015016:	009b      	lsls	r3, r3, #2
 8015018:	441a      	add	r2, r3
 801501a:	8a7b      	ldrh	r3, [r7, #18]
 801501c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801502c:	b29b      	uxth	r3, r3
 801502e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8015030:	2300      	movs	r3, #0
}
 8015032:	4618      	mov	r0, r3
 8015034:	371c      	adds	r7, #28
 8015036:	46bd      	mov	sp, r7
 8015038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503c:	4770      	bx	lr

0801503e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801503e:	b480      	push	{r7}
 8015040:	b083      	sub	sp, #12
 8015042:	af00      	add	r7, sp, #0
 8015044:	6078      	str	r0, [r7, #4]
 8015046:	460b      	mov	r3, r1
 8015048:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801504a:	78fb      	ldrb	r3, [r7, #3]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d103      	bne.n	8015058 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2280      	movs	r2, #128	; 0x80
 8015054:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	370c      	adds	r7, #12
 801505e:	46bd      	mov	sp, r7
 8015060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015064:	4770      	bx	lr

08015066 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8015066:	b480      	push	{r7}
 8015068:	b083      	sub	sp, #12
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8015074:	b29b      	uxth	r3, r3
 8015076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801507a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801507e:	b29a      	uxth	r2, r3
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8015086:	2300      	movs	r3, #0
}
 8015088:	4618      	mov	r0, r3
 801508a:	370c      	adds	r7, #12
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr

08015094 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8015094:	b480      	push	{r7}
 8015096:	b085      	sub	sp, #20
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80150a6:	68fb      	ldr	r3, [r7, #12]
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3714      	adds	r7, #20
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr

080150b4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80150b4:	b480      	push	{r7}
 80150b6:	b08b      	sub	sp, #44	; 0x2c
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	60f8      	str	r0, [r7, #12]
 80150bc:	60b9      	str	r1, [r7, #8]
 80150be:	4611      	mov	r1, r2
 80150c0:	461a      	mov	r2, r3
 80150c2:	460b      	mov	r3, r1
 80150c4:	80fb      	strh	r3, [r7, #6]
 80150c6:	4613      	mov	r3, r2
 80150c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80150ca:	88bb      	ldrh	r3, [r7, #4]
 80150cc:	3301      	adds	r3, #1
 80150ce:	085b      	lsrs	r3, r3, #1
 80150d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80150da:	88fa      	ldrh	r2, [r7, #6]
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	4413      	add	r3, r2
 80150e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80150e6:	69bb      	ldr	r3, [r7, #24]
 80150e8:	627b      	str	r3, [r7, #36]	; 0x24
 80150ea:	e01b      	b.n	8015124 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80150ec:	69fb      	ldr	r3, [r7, #28]
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80150f2:	69fb      	ldr	r3, [r7, #28]
 80150f4:	3301      	adds	r3, #1
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	021b      	lsls	r3, r3, #8
 80150fa:	b21a      	sxth	r2, r3
 80150fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015100:	4313      	orrs	r3, r2
 8015102:	b21b      	sxth	r3, r3
 8015104:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8015106:	6a3b      	ldr	r3, [r7, #32]
 8015108:	8a7a      	ldrh	r2, [r7, #18]
 801510a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801510c:	6a3b      	ldr	r3, [r7, #32]
 801510e:	3302      	adds	r3, #2
 8015110:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8015112:	69fb      	ldr	r3, [r7, #28]
 8015114:	3301      	adds	r3, #1
 8015116:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8015118:	69fb      	ldr	r3, [r7, #28]
 801511a:	3301      	adds	r3, #1
 801511c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015120:	3b01      	subs	r3, #1
 8015122:	627b      	str	r3, [r7, #36]	; 0x24
 8015124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015126:	2b00      	cmp	r3, #0
 8015128:	d1e0      	bne.n	80150ec <USB_WritePMA+0x38>
  }
}
 801512a:	bf00      	nop
 801512c:	bf00      	nop
 801512e:	372c      	adds	r7, #44	; 0x2c
 8015130:	46bd      	mov	sp, r7
 8015132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015136:	4770      	bx	lr

08015138 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015138:	b480      	push	{r7}
 801513a:	b08b      	sub	sp, #44	; 0x2c
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	4611      	mov	r1, r2
 8015144:	461a      	mov	r2, r3
 8015146:	460b      	mov	r3, r1
 8015148:	80fb      	strh	r3, [r7, #6]
 801514a:	4613      	mov	r3, r2
 801514c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801514e:	88bb      	ldrh	r3, [r7, #4]
 8015150:	085b      	lsrs	r3, r3, #1
 8015152:	b29b      	uxth	r3, r3
 8015154:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801515e:	88fa      	ldrh	r2, [r7, #6]
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	4413      	add	r3, r2
 8015164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015168:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801516a:	69bb      	ldr	r3, [r7, #24]
 801516c:	627b      	str	r3, [r7, #36]	; 0x24
 801516e:	e018      	b.n	80151a2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8015170:	6a3b      	ldr	r3, [r7, #32]
 8015172:	881b      	ldrh	r3, [r3, #0]
 8015174:	b29b      	uxth	r3, r3
 8015176:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8015178:	6a3b      	ldr	r3, [r7, #32]
 801517a:	3302      	adds	r3, #2
 801517c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	b2da      	uxtb	r2, r3
 8015182:	69fb      	ldr	r3, [r7, #28]
 8015184:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8015186:	69fb      	ldr	r3, [r7, #28]
 8015188:	3301      	adds	r3, #1
 801518a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	0a1b      	lsrs	r3, r3, #8
 8015190:	b2da      	uxtb	r2, r3
 8015192:	69fb      	ldr	r3, [r7, #28]
 8015194:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	3301      	adds	r3, #1
 801519a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801519e:	3b01      	subs	r3, #1
 80151a0:	627b      	str	r3, [r7, #36]	; 0x24
 80151a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d1e3      	bne.n	8015170 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80151a8:	88bb      	ldrh	r3, [r7, #4]
 80151aa:	f003 0301 	and.w	r3, r3, #1
 80151ae:	b29b      	uxth	r3, r3
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d007      	beq.n	80151c4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80151b4:	6a3b      	ldr	r3, [r7, #32]
 80151b6:	881b      	ldrh	r3, [r3, #0]
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	b2da      	uxtb	r2, r3
 80151c0:	69fb      	ldr	r3, [r7, #28]
 80151c2:	701a      	strb	r2, [r3, #0]
  }
}
 80151c4:	bf00      	nop
 80151c6:	372c      	adds	r7, #44	; 0x2c
 80151c8:	46bd      	mov	sp, r7
 80151ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ce:	4770      	bx	lr

080151d0 <ReformatString>:

struct function *functionList;
int functionLength = 0;

void ReformatString(char* chararr, int arrMaxSize)
{
 80151d0:	b480      	push	{r7}
 80151d2:	b085      	sub	sp, #20
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 80151da:	2300      	movs	r3, #0
 80151dc:	60fb      	str	r3, [r7, #12]
 80151de:	e014      	b.n	801520a <ReformatString+0x3a>
	{
		if (chararr[i] == '\r' || chararr[i] == '\n')
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	4413      	add	r3, r2
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	2b0d      	cmp	r3, #13
 80151ea:	d005      	beq.n	80151f8 <ReformatString+0x28>
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	687a      	ldr	r2, [r7, #4]
 80151f0:	4413      	add	r3, r2
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	2b0a      	cmp	r3, #10
 80151f6:	d105      	bne.n	8015204 <ReformatString+0x34>
		{
			chararr[i] = '\0';
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	687a      	ldr	r2, [r7, #4]
 80151fc:	4413      	add	r3, r2
 80151fe:	2200      	movs	r2, #0
 8015200:	701a      	strb	r2, [r3, #0]
			return;
 8015202:	e00c      	b.n	801521e <ReformatString+0x4e>
	for (int i = 0; i < arrMaxSize && chararr[i] != '\0'; i++)	// format into proper string so stdlib.h can be used
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	3301      	adds	r3, #1
 8015208:	60fb      	str	r3, [r7, #12]
 801520a:	68fa      	ldr	r2, [r7, #12]
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	429a      	cmp	r2, r3
 8015210:	da05      	bge.n	801521e <ReformatString+0x4e>
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	687a      	ldr	r2, [r7, #4]
 8015216:	4413      	add	r3, r2
 8015218:	781b      	ldrb	r3, [r3, #0]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1e0      	bne.n	80151e0 <ReformatString+0x10>
		}
	}
}
 801521e:	3714      	adds	r7, #20
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr

08015228 <generateSubwordn>:

struct subword generateSubwordn(char* subcommand, int length)
{
 8015228:	b590      	push	{r4, r7, lr}
 801522a:	b08b      	sub	sp, #44	; 0x2c
 801522c:	af00      	add	r7, sp, #0
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	607a      	str	r2, [r7, #4]
	struct subword finalSubword = { .type = params, .function = 0, .integerParam = 0, .otherParam = NULL, .paramType = 0};
 8015234:	2301      	movs	r3, #1
 8015236:	743b      	strb	r3, [r7, #16]
 8015238:	2300      	movs	r3, #0
 801523a:	747b      	strb	r3, [r7, #17]
 801523c:	2300      	movs	r3, #0
 801523e:	74bb      	strb	r3, [r7, #18]
 8015240:	2300      	movs	r3, #0
 8015242:	617b      	str	r3, [r7, #20]
 8015244:	2300      	movs	r3, #0
 8015246:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < functionLength; i++)
 8015248:	2300      	movs	r3, #0
 801524a:	627b      	str	r3, [r7, #36]	; 0x24
 801524c:	e01e      	b.n	801528c <generateSubwordn+0x64>
	{
		if (!strncmp(subcommand, functionList[i].name, length))
 801524e:	4b3c      	ldr	r3, [pc, #240]	; (8015340 <generateSubwordn+0x118>)
 8015250:	681a      	ldr	r2, [r3, #0]
 8015252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015254:	00db      	lsls	r3, r3, #3
 8015256:	4413      	add	r3, r2
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	687a      	ldr	r2, [r7, #4]
 801525c:	4619      	mov	r1, r3
 801525e:	68b8      	ldr	r0, [r7, #8]
 8015260:	f00a fa2e 	bl	801f6c0 <strncmp>
 8015264:	4603      	mov	r3, r0
 8015266:	2b00      	cmp	r3, #0
 8015268:	d10d      	bne.n	8015286 <generateSubwordn+0x5e>
		{
			finalSubword.type = function;
 801526a:	2300      	movs	r3, #0
 801526c:	743b      	strb	r3, [r7, #16]
			finalSubword.function = (enum functionTypes)i;
 801526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015270:	b2db      	uxtb	r3, r3
 8015272:	747b      	strb	r3, [r7, #17]
			return finalSubword;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	461c      	mov	r4, r3
 8015278:	f107 0310 	add.w	r3, r7, #16
 801527c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015284:	e058      	b.n	8015338 <generateSubwordn+0x110>
	for (int i = 0; i < functionLength; i++)
 8015286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015288:	3301      	adds	r3, #1
 801528a:	627b      	str	r3, [r7, #36]	; 0x24
 801528c:	4b2d      	ldr	r3, [pc, #180]	; (8015344 <generateSubwordn+0x11c>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015292:	429a      	cmp	r2, r3
 8015294:	dbdb      	blt.n	801524e <generateSubwordn+0x26>
		}
	}

	for (int i = 0; i < paramsLength; i++)
 8015296:	2300      	movs	r3, #0
 8015298:	623b      	str	r3, [r7, #32]
 801529a:	e01a      	b.n	80152d2 <generateSubwordn+0xaa>
	{
		if (!strncmp(subcommand, paramsList[i], length))
 801529c:	4a2a      	ldr	r2, [pc, #168]	; (8015348 <generateSubwordn+0x120>)
 801529e:	6a3b      	ldr	r3, [r7, #32]
 80152a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152a4:	687a      	ldr	r2, [r7, #4]
 80152a6:	4619      	mov	r1, r3
 80152a8:	68b8      	ldr	r0, [r7, #8]
 80152aa:	f00a fa09 	bl	801f6c0 <strncmp>
 80152ae:	4603      	mov	r3, r0
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d10b      	bne.n	80152cc <generateSubwordn+0xa4>
		{
			finalSubword.paramType = (enum paramTypes)i;
 80152b4:	6a3b      	ldr	r3, [r7, #32]
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	74bb      	strb	r3, [r7, #18]
			return finalSubword;
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	461c      	mov	r4, r3
 80152be:	f107 0310 	add.w	r3, r7, #16
 80152c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80152c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80152ca:	e035      	b.n	8015338 <generateSubwordn+0x110>
	for (int i = 0; i < paramsLength; i++)
 80152cc:	6a3b      	ldr	r3, [r7, #32]
 80152ce:	3301      	adds	r3, #1
 80152d0:	623b      	str	r3, [r7, #32]
 80152d2:	4b1e      	ldr	r3, [pc, #120]	; (801534c <generateSubwordn+0x124>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	6a3a      	ldr	r2, [r7, #32]
 80152d8:	429a      	cmp	r2, r3
 80152da:	dbdf      	blt.n	801529c <generateSubwordn+0x74>
		}
	}

	int n;
	if ((n = atoi(subcommand)))
 80152dc:	68b8      	ldr	r0, [r7, #8]
 80152de:	f00a f843 	bl	801f368 <atoi>
 80152e2:	61f8      	str	r0, [r7, #28]
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d00c      	beq.n	8015304 <generateSubwordn+0xdc>
	{
		finalSubword.paramType = INT_P;
 80152ea:	2303      	movs	r3, #3
 80152ec:	74bb      	strb	r3, [r7, #18]
		finalSubword.integerParam = n;
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	617b      	str	r3, [r7, #20]
		return finalSubword;
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	461c      	mov	r4, r3
 80152f6:	f107 0310 	add.w	r3, r7, #16
 80152fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80152fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015302:	e019      	b.n	8015338 <generateSubwordn+0x110>
	}

	finalSubword.paramType = OTHER_P;
 8015304:	2304      	movs	r3, #4
 8015306:	74bb      	strb	r3, [r7, #18]
	finalSubword.otherParam = (char*) malloc(sizeof(char) * (length + 1));
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	3301      	adds	r3, #1
 801530c:	4618      	mov	r0, r3
 801530e:	f00a f82f 	bl	801f370 <malloc>
 8015312:	4603      	mov	r3, r0
 8015314:	61bb      	str	r3, [r7, #24]
	if(finalSubword.otherParam != NULL) strncpy(finalSubword.otherParam, subcommand, length);
 8015316:	69bb      	ldr	r3, [r7, #24]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d005      	beq.n	8015328 <generateSubwordn+0x100>
 801531c:	69bb      	ldr	r3, [r7, #24]
 801531e:	687a      	ldr	r2, [r7, #4]
 8015320:	68b9      	ldr	r1, [r7, #8]
 8015322:	4618      	mov	r0, r3
 8015324:	f00a f9de 	bl	801f6e4 <strncpy>
	return finalSubword;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	461c      	mov	r4, r3
 801532c:	f107 0310 	add.w	r3, r7, #16
 8015330:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015338:	68f8      	ldr	r0, [r7, #12]
 801533a:	372c      	adds	r7, #44	; 0x2c
 801533c:	46bd      	mov	sp, r7
 801533e:	bd90      	pop	{r4, r7, pc}
 8015340:	20001c24 	.word	0x20001c24
 8015344:	20001c28 	.word	0x20001c28
 8015348:	20000014 	.word	0x20000014
 801534c:	20000020 	.word	0x20000020

08015350 <generateWordDirect>:

struct word generateWordDirect(char* command)
{
 8015350:	b590      	push	{r4, r7, lr}
 8015352:	b08f      	sub	sp, #60	; 0x3c
 8015354:	af00      	add	r7, sp, #0
 8015356:	6178      	str	r0, [r7, #20]
 8015358:	6139      	str	r1, [r7, #16]
	struct word finalWord = { .address = -1, .subwords = NULL, .subwordsCount = 0 };
 801535a:	f04f 33ff 	mov.w	r3, #4294967295
 801535e:	61bb      	str	r3, [r7, #24]
 8015360:	2300      	movs	r3, #0
 8015362:	61fb      	str	r3, [r7, #28]
 8015364:	2300      	movs	r3, #0
 8015366:	623b      	str	r3, [r7, #32]

	char* currSymbol = command;
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	637b      	str	r3, [r7, #52]	; 0x34
	int intermediateLength = 0;
 801536c:	2300      	movs	r3, #0
 801536e:	633b      	str	r3, [r7, #48]	; 0x30

	int isLast = 0;
 8015370:	2300      	movs	r3, #0
 8015372:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (!isLast)
 8015374:	e08b      	b.n	801548e <generateWordDirect+0x13e>
	{
		isLast = *currSymbol == '\0';
 8015376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015378:	781b      	ldrb	r3, [r3, #0]
 801537a:	2b00      	cmp	r3, #0
 801537c:	bf0c      	ite	eq
 801537e:	2301      	moveq	r3, #1
 8015380:	2300      	movne	r3, #0
 8015382:	b2db      	uxtb	r3, r3
 8015384:	62fb      	str	r3, [r7, #44]	; 0x2c
		switch (*currSymbol)
 8015386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015388:	781b      	ldrb	r3, [r3, #0]
 801538a:	2b3f      	cmp	r3, #63	; 0x3f
 801538c:	d005      	beq.n	801539a <generateWordDirect+0x4a>
 801538e:	2b3f      	cmp	r3, #63	; 0x3f
 8015390:	dc42      	bgt.n	8015418 <generateWordDirect+0xc8>
 8015392:	2b00      	cmp	r3, #0
 8015394:	d001      	beq.n	801539a <generateWordDirect+0x4a>
 8015396:	2b3a      	cmp	r3, #58	; 0x3a
 8015398:	d13e      	bne.n	8015418 <generateWordDirect+0xc8>
		{
			case ':'	:
			case '\0'	:
			case '?'	:

				if(intermediateLength == 0) break;
 801539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801539c:	2b00      	cmp	r3, #0
 801539e:	d03f      	beq.n	8015420 <generateWordDirect+0xd0>
				if (finalWord.address == -1)
 80153a0:	69bb      	ldr	r3, [r7, #24]
 80153a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153a6:	d109      	bne.n	80153bc <generateWordDirect+0x6c>
				{
					finalWord.address = atoi(currSymbol - intermediateLength);
 80153a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153aa:	425b      	negs	r3, r3
 80153ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80153ae:	4413      	add	r3, r2
 80153b0:	4618      	mov	r0, r3
 80153b2:	f009 ffd9 	bl	801f368 <atoi>
 80153b6:	4603      	mov	r3, r0
 80153b8:	61bb      	str	r3, [r7, #24]
 80153ba:	e02a      	b.n	8015412 <generateWordDirect+0xc2>
				}

				else
				{
					finalWord.subwordsCount++;
 80153bc:	6a3b      	ldr	r3, [r7, #32]
 80153be:	3301      	adds	r3, #1
 80153c0:	623b      	str	r3, [r7, #32]
					struct subword *intermediate = (struct subword*)realloc(finalWord.subwords, finalWord.subwordsCount * sizeof(struct subword));
 80153c2:	69fa      	ldr	r2, [r7, #28]
 80153c4:	6a3b      	ldr	r3, [r7, #32]
 80153c6:	4619      	mov	r1, r3
 80153c8:	460b      	mov	r3, r1
 80153ca:	005b      	lsls	r3, r3, #1
 80153cc:	440b      	add	r3, r1
 80153ce:	009b      	lsls	r3, r3, #2
 80153d0:	4619      	mov	r1, r3
 80153d2:	4610      	mov	r0, r2
 80153d4:	f00a f888 	bl	801f4e8 <realloc>
 80153d8:	62b8      	str	r0, [r7, #40]	; 0x28
					if (intermediate != NULL)
 80153da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d018      	beq.n	8015412 <generateWordDirect+0xc2>
					{
						finalWord.subwords = intermediate;																				///??????
 80153e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e2:	61fb      	str	r3, [r7, #28]
						finalWord.subwords[finalWord.subwordsCount - 1] = generateSubwordn(currSymbol - intermediateLength, intermediateLength);
 80153e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e6:	425b      	negs	r3, r3
 80153e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80153ea:	18d1      	adds	r1, r2, r3
 80153ec:	69fa      	ldr	r2, [r7, #28]
 80153ee:	6a3b      	ldr	r3, [r7, #32]
 80153f0:	4618      	mov	r0, r3
 80153f2:	4603      	mov	r3, r0
 80153f4:	005b      	lsls	r3, r3, #1
 80153f6:	4403      	add	r3, r0
 80153f8:	009b      	lsls	r3, r3, #2
 80153fa:	3b0c      	subs	r3, #12
 80153fc:	18d4      	adds	r4, r2, r3
 80153fe:	463b      	mov	r3, r7
 8015400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015402:	4618      	mov	r0, r3
 8015404:	f7ff ff10 	bl	8015228 <generateSubwordn>
 8015408:	463b      	mov	r3, r7
 801540a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801540e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					}
				}

				intermediateLength = 0;
 8015412:	2300      	movs	r3, #0
 8015414:	633b      	str	r3, [r7, #48]	; 0x30

				break;
 8015416:	e004      	b.n	8015422 <generateWordDirect+0xd2>

			default:
				intermediateLength++;
 8015418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541a:	3301      	adds	r3, #1
 801541c:	633b      	str	r3, [r7, #48]	; 0x30
				break;
 801541e:	e000      	b.n	8015422 <generateWordDirect+0xd2>
				if(intermediateLength == 0) break;
 8015420:	bf00      	nop

		}

		if(*currSymbol == '?')
 8015422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015424:	781b      	ldrb	r3, [r3, #0]
 8015426:	2b3f      	cmp	r3, #63	; 0x3f
 8015428:	d127      	bne.n	801547a <generateWordDirect+0x12a>
		{
			finalWord.subwordsCount++;
 801542a:	6a3b      	ldr	r3, [r7, #32]
 801542c:	3301      	adds	r3, #1
 801542e:	623b      	str	r3, [r7, #32]
			struct subword* intermediate = (struct subword*)realloc(finalWord.subwords, finalWord.subwordsCount * sizeof(struct subword));
 8015430:	69fa      	ldr	r2, [r7, #28]
 8015432:	6a3b      	ldr	r3, [r7, #32]
 8015434:	4619      	mov	r1, r3
 8015436:	460b      	mov	r3, r1
 8015438:	005b      	lsls	r3, r3, #1
 801543a:	440b      	add	r3, r1
 801543c:	009b      	lsls	r3, r3, #2
 801543e:	4619      	mov	r1, r3
 8015440:	4610      	mov	r0, r2
 8015442:	f00a f851 	bl	801f4e8 <realloc>
 8015446:	6278      	str	r0, [r7, #36]	; 0x24
			if (intermediate != NULL)
 8015448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544a:	2b00      	cmp	r3, #0
 801544c:	d015      	beq.n	801547a <generateWordDirect+0x12a>
			{
				finalWord.subwords = intermediate;																						///??????
 801544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015450:	61fb      	str	r3, [r7, #28]
				finalWord.subwords[finalWord.subwordsCount - 1] = generateSubwordn("?", 1);
 8015452:	69fa      	ldr	r2, [r7, #28]
 8015454:	6a3b      	ldr	r3, [r7, #32]
 8015456:	4619      	mov	r1, r3
 8015458:	460b      	mov	r3, r1
 801545a:	005b      	lsls	r3, r3, #1
 801545c:	440b      	add	r3, r1
 801545e:	009b      	lsls	r3, r3, #2
 8015460:	3b0c      	subs	r3, #12
 8015462:	18d4      	adds	r4, r2, r3
 8015464:	463b      	mov	r3, r7
 8015466:	2201      	movs	r2, #1
 8015468:	4911      	ldr	r1, [pc, #68]	; (80154b0 <generateWordDirect+0x160>)
 801546a:	4618      	mov	r0, r3
 801546c:	f7ff fedc 	bl	8015228 <generateSubwordn>
 8015470:	463b      	mov	r3, r7
 8015472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015476:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			}
		}

		currSymbol += !isLast;
 801547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801547c:	2b00      	cmp	r3, #0
 801547e:	bf0c      	ite	eq
 8015480:	2301      	moveq	r3, #1
 8015482:	2300      	movne	r3, #0
 8015484:	b2db      	uxtb	r3, r3
 8015486:	461a      	mov	r2, r3
 8015488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801548a:	4413      	add	r3, r2
 801548c:	637b      	str	r3, [r7, #52]	; 0x34
	while (!isLast)
 801548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015490:	2b00      	cmp	r3, #0
 8015492:	f43f af70 	beq.w	8015376 <generateWordDirect+0x26>
	}

	return finalWord;
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	461c      	mov	r4, r3
 801549a:	f107 0318 	add.w	r3, r7, #24
 801549e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80154a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80154a6:	6978      	ldr	r0, [r7, #20]
 80154a8:	373c      	adds	r7, #60	; 0x3c
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bd90      	pop	{r4, r7, pc}
 80154ae:	bf00      	nop
 80154b0:	08020a64 	.word	0x08020a64

080154b4 <executeWord>:

void executeWord(struct word word)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b086      	sub	sp, #24
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	1d3b      	adds	r3, r7, #4
 80154bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (word.subwordsCount < 1) return;
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	dd17      	ble.n	80154f6 <executeWord+0x42>
	if (word.subwords == NULL) return;
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d016      	beq.n	80154fa <executeWord+0x46>
	if (word.subwords[0].type != function) return;
 80154cc:	68bb      	ldr	r3, [r7, #8]
 80154ce:	781b      	ldrb	r3, [r3, #0]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d114      	bne.n	80154fe <executeWord+0x4a>
	int listIndex = (int)word.subwords[0].function;
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	785b      	ldrb	r3, [r3, #1]
 80154d8:	617b      	str	r3, [r7, #20]
	functionList[listIndex].run(word.subwords + 1, word.subwordsCount - 1);
 80154da:	4b0b      	ldr	r3, [pc, #44]	; (8015508 <executeWord+0x54>)
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	00db      	lsls	r3, r3, #3
 80154e2:	4413      	add	r3, r2
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	68ba      	ldr	r2, [r7, #8]
 80154e8:	f102 000c 	add.w	r0, r2, #12
 80154ec:	68fa      	ldr	r2, [r7, #12]
 80154ee:	3a01      	subs	r2, #1
 80154f0:	4611      	mov	r1, r2
 80154f2:	4798      	blx	r3
 80154f4:	e004      	b.n	8015500 <executeWord+0x4c>
	if (word.subwordsCount < 1) return;
 80154f6:	bf00      	nop
 80154f8:	e002      	b.n	8015500 <executeWord+0x4c>
	if (word.subwords == NULL) return;
 80154fa:	bf00      	nop
 80154fc:	e000      	b.n	8015500 <executeWord+0x4c>
	if (word.subwords[0].type != function) return;
 80154fe:	bf00      	nop
}
 8015500:	3718      	adds	r7, #24
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}
 8015506:	bf00      	nop
 8015508:	20001c24 	.word	0x20001c24

0801550c <addFunction>:

void addFunction(char *name, void (*func)(struct subword*, int))
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b084      	sub	sp, #16
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	6039      	str	r1, [r7, #0]
	functionLength++;
 8015516:	4b14      	ldr	r3, [pc, #80]	; (8015568 <addFunction+0x5c>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	3301      	adds	r3, #1
 801551c:	4a12      	ldr	r2, [pc, #72]	; (8015568 <addFunction+0x5c>)
 801551e:	6013      	str	r3, [r2, #0]
	struct function newFunc = {.name = name, .run = func};
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	60bb      	str	r3, [r7, #8]
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	60fb      	str	r3, [r7, #12]
	functionList = (struct function*) realloc(functionList, functionLength * sizeof(struct function));
 8015528:	4b10      	ldr	r3, [pc, #64]	; (801556c <addFunction+0x60>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	4a0e      	ldr	r2, [pc, #56]	; (8015568 <addFunction+0x5c>)
 801552e:	6812      	ldr	r2, [r2, #0]
 8015530:	00d2      	lsls	r2, r2, #3
 8015532:	4611      	mov	r1, r2
 8015534:	4618      	mov	r0, r3
 8015536:	f009 ffd7 	bl	801f4e8 <realloc>
 801553a:	4603      	mov	r3, r0
 801553c:	4a0b      	ldr	r2, [pc, #44]	; (801556c <addFunction+0x60>)
 801553e:	6013      	str	r3, [r2, #0]
	functionList[functionLength - 1] = newFunc;
 8015540:	4b0a      	ldr	r3, [pc, #40]	; (801556c <addFunction+0x60>)
 8015542:	681a      	ldr	r2, [r3, #0]
 8015544:	4b08      	ldr	r3, [pc, #32]	; (8015568 <addFunction+0x5c>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801554c:	3b01      	subs	r3, #1
 801554e:	00db      	lsls	r3, r3, #3
 8015550:	4413      	add	r3, r2
 8015552:	461a      	mov	r2, r3
 8015554:	f107 0308 	add.w	r3, r7, #8
 8015558:	e893 0003 	ldmia.w	r3, {r0, r1}
 801555c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8015560:	bf00      	nop
 8015562:	3710      	adds	r7, #16
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}
 8015568:	20001c28 	.word	0x20001c28
 801556c:	20001c24 	.word	0x20001c24

08015570 <__NVIC_EnableIRQ>:
{
 8015570:	b480      	push	{r7}
 8015572:	b083      	sub	sp, #12
 8015574:	af00      	add	r7, sp, #0
 8015576:	4603      	mov	r3, r0
 8015578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801557e:	2b00      	cmp	r3, #0
 8015580:	db0b      	blt.n	801559a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015582:	79fb      	ldrb	r3, [r7, #7]
 8015584:	f003 021f 	and.w	r2, r3, #31
 8015588:	4907      	ldr	r1, [pc, #28]	; (80155a8 <__NVIC_EnableIRQ+0x38>)
 801558a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801558e:	095b      	lsrs	r3, r3, #5
 8015590:	2001      	movs	r0, #1
 8015592:	fa00 f202 	lsl.w	r2, r0, r2
 8015596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801559a:	bf00      	nop
 801559c:	370c      	adds	r7, #12
 801559e:	46bd      	mov	sp, r7
 80155a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a4:	4770      	bx	lr
 80155a6:	bf00      	nop
 80155a8:	e000e100 	.word	0xe000e100

080155ac <__NVIC_SetPriority>:
{
 80155ac:	b480      	push	{r7}
 80155ae:	b083      	sub	sp, #12
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	4603      	mov	r3, r0
 80155b4:	6039      	str	r1, [r7, #0]
 80155b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80155b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	db0a      	blt.n	80155d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	b2da      	uxtb	r2, r3
 80155c4:	490c      	ldr	r1, [pc, #48]	; (80155f8 <__NVIC_SetPriority+0x4c>)
 80155c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155ca:	0112      	lsls	r2, r2, #4
 80155cc:	b2d2      	uxtb	r2, r2
 80155ce:	440b      	add	r3, r1
 80155d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80155d4:	e00a      	b.n	80155ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	b2da      	uxtb	r2, r3
 80155da:	4908      	ldr	r1, [pc, #32]	; (80155fc <__NVIC_SetPriority+0x50>)
 80155dc:	79fb      	ldrb	r3, [r7, #7]
 80155de:	f003 030f 	and.w	r3, r3, #15
 80155e2:	3b04      	subs	r3, #4
 80155e4:	0112      	lsls	r2, r2, #4
 80155e6:	b2d2      	uxtb	r2, r2
 80155e8:	440b      	add	r3, r1
 80155ea:	761a      	strb	r2, [r3, #24]
}
 80155ec:	bf00      	nop
 80155ee:	370c      	adds	r7, #12
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr
 80155f8:	e000e100 	.word	0xe000e100
 80155fc:	e000ed00 	.word	0xe000ed00

08015600 <LL_AHB2_GRP1_EnableClock>:
{
 8015600:	b480      	push	{r7}
 8015602:	b085      	sub	sp, #20
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8015608:	4b08      	ldr	r3, [pc, #32]	; (801562c <LL_AHB2_GRP1_EnableClock+0x2c>)
 801560a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801560c:	4907      	ldr	r1, [pc, #28]	; (801562c <LL_AHB2_GRP1_EnableClock+0x2c>)
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	4313      	orrs	r3, r2
 8015612:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8015614:	4b05      	ldr	r3, [pc, #20]	; (801562c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8015616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	4013      	ands	r3, r2
 801561c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801561e:	68fb      	ldr	r3, [r7, #12]
}
 8015620:	bf00      	nop
 8015622:	3714      	adds	r7, #20
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr
 801562c:	40021000 	.word	0x40021000

08015630 <LL_GPIO_SetPinMode>:
{
 8015630:	b480      	push	{r7}
 8015632:	b08b      	sub	sp, #44	; 0x2c
 8015634:	af00      	add	r7, sp, #0
 8015636:	60f8      	str	r0, [r7, #12]
 8015638:	60b9      	str	r1, [r7, #8]
 801563a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	681a      	ldr	r2, [r3, #0]
 8015640:	68bb      	ldr	r3, [r7, #8]
 8015642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	fa93 f3a3 	rbit	r3, r3
 801564a:	613b      	str	r3, [r7, #16]
  return result;
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015650:	69bb      	ldr	r3, [r7, #24]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d101      	bne.n	801565a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8015656:	2320      	movs	r3, #32
 8015658:	e003      	b.n	8015662 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801565a:	69bb      	ldr	r3, [r7, #24]
 801565c:	fab3 f383 	clz	r3, r3
 8015660:	b2db      	uxtb	r3, r3
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	2103      	movs	r1, #3
 8015666:	fa01 f303 	lsl.w	r3, r1, r3
 801566a:	43db      	mvns	r3, r3
 801566c:	401a      	ands	r2, r3
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015672:	6a3b      	ldr	r3, [r7, #32]
 8015674:	fa93 f3a3 	rbit	r3, r3
 8015678:	61fb      	str	r3, [r7, #28]
  return result;
 801567a:	69fb      	ldr	r3, [r7, #28]
 801567c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015680:	2b00      	cmp	r3, #0
 8015682:	d101      	bne.n	8015688 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8015684:	2320      	movs	r3, #32
 8015686:	e003      	b.n	8015690 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8015688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568a:	fab3 f383 	clz	r3, r3
 801568e:	b2db      	uxtb	r3, r3
 8015690:	005b      	lsls	r3, r3, #1
 8015692:	6879      	ldr	r1, [r7, #4]
 8015694:	fa01 f303 	lsl.w	r3, r1, r3
 8015698:	431a      	orrs	r2, r3
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	601a      	str	r2, [r3, #0]
}
 801569e:	bf00      	nop
 80156a0:	372c      	adds	r7, #44	; 0x2c
 80156a2:	46bd      	mov	sp, r7
 80156a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a8:	4770      	bx	lr

080156aa <LL_GPIO_SetPinPull>:
{
 80156aa:	b480      	push	{r7}
 80156ac:	b08b      	sub	sp, #44	; 0x2c
 80156ae:	af00      	add	r7, sp, #0
 80156b0:	60f8      	str	r0, [r7, #12]
 80156b2:	60b9      	str	r1, [r7, #8]
 80156b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	68da      	ldr	r2, [r3, #12]
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	fa93 f3a3 	rbit	r3, r3
 80156c4:	613b      	str	r3, [r7, #16]
  return result;
 80156c6:	693b      	ldr	r3, [r7, #16]
 80156c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80156ca:	69bb      	ldr	r3, [r7, #24]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d101      	bne.n	80156d4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80156d0:	2320      	movs	r3, #32
 80156d2:	e003      	b.n	80156dc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80156d4:	69bb      	ldr	r3, [r7, #24]
 80156d6:	fab3 f383 	clz	r3, r3
 80156da:	b2db      	uxtb	r3, r3
 80156dc:	005b      	lsls	r3, r3, #1
 80156de:	2103      	movs	r1, #3
 80156e0:	fa01 f303 	lsl.w	r3, r1, r3
 80156e4:	43db      	mvns	r3, r3
 80156e6:	401a      	ands	r2, r3
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80156ec:	6a3b      	ldr	r3, [r7, #32]
 80156ee:	fa93 f3a3 	rbit	r3, r3
 80156f2:	61fb      	str	r3, [r7, #28]
  return result;
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80156f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d101      	bne.n	8015702 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80156fe:	2320      	movs	r3, #32
 8015700:	e003      	b.n	801570a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8015702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015704:	fab3 f383 	clz	r3, r3
 8015708:	b2db      	uxtb	r3, r3
 801570a:	005b      	lsls	r3, r3, #1
 801570c:	6879      	ldr	r1, [r7, #4]
 801570e:	fa01 f303 	lsl.w	r3, r1, r3
 8015712:	431a      	orrs	r2, r3
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	60da      	str	r2, [r3, #12]
}
 8015718:	bf00      	nop
 801571a:	372c      	adds	r7, #44	; 0x2c
 801571c:	46bd      	mov	sp, r7
 801571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015722:	4770      	bx	lr

08015724 <LL_UCPD_Enable>:
{
 8015724:	b480      	push	{r7}
 8015726:	b083      	sub	sp, #12
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	601a      	str	r2, [r3, #0]
}
 8015738:	bf00      	nop
 801573a:	370c      	adds	r7, #12
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr

08015744 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8015744:	b480      	push	{r7}
 8015746:	b083      	sub	sp, #12
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
 801574c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015756:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801575a:	683a      	ldr	r2, [r7, #0]
 801575c:	431a      	orrs	r2, r3
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	601a      	str	r2, [r3, #0]
}
 8015762:	bf00      	nop
 8015764:	370c      	adds	r7, #12
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr

0801576e <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 801576e:	b480      	push	{r7}
 8015770:	b083      	sub	sp, #12
 8015772:	af00      	add	r7, sp, #0
 8015774:	6078      	str	r0, [r7, #4]
 8015776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	68db      	ldr	r3, [r3, #12]
 801577c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	431a      	orrs	r2, r3
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	60da      	str	r2, [r3, #12]
}
 8015788:	bf00      	nop
 801578a:	370c      	adds	r7, #12
 801578c:	46bd      	mov	sp, r7
 801578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015792:	4770      	bx	lr

08015794 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8015794:	b480      	push	{r7}
 8015796:	b083      	sub	sp, #12
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	691b      	ldr	r3, [r3, #16]
 80157a0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	611a      	str	r2, [r3, #16]
}
 80157a8:	bf00      	nop
 80157aa:	370c      	adds	r7, #12
 80157ac:	46bd      	mov	sp, r7
 80157ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b2:	4770      	bx	lr

080157b4 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	691b      	ldr	r3, [r3, #16]
 80157c0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	611a      	str	r2, [r3, #16]
}
 80157c8:	bf00      	nop
 80157ca:	370c      	adds	r7, #12
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr

080157d4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80157d4:	b480      	push	{r7}
 80157d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80157d8:	4b05      	ldr	r3, [pc, #20]	; (80157f0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80157da:	689b      	ldr	r3, [r3, #8]
 80157dc:	4a04      	ldr	r2, [pc, #16]	; (80157f0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80157de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80157e2:	6093      	str	r3, [r2, #8]
}
 80157e4:	bf00      	nop
 80157e6:	46bd      	mov	sp, r7
 80157e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ec:	4770      	bx	lr
 80157ee:	bf00      	nop
 80157f0:	40007000 	.word	0x40007000

080157f4 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 80157f4:	b590      	push	{r4, r7, lr}
 80157f6:	b08b      	sub	sp, #44	; 0x2c
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	60b9      	str	r1, [r7, #8]
 80157fc:	607a      	str	r2, [r7, #4]
 80157fe:	603b      	str	r3, [r7, #0]
 8015800:	4603      	mov	r3, r0
 8015802:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015804:	7bfa      	ldrb	r2, [r7, #15]
 8015806:	4613      	mov	r3, r2
 8015808:	005b      	lsls	r3, r3, #1
 801580a:	4413      	add	r3, r2
 801580c:	009b      	lsls	r3, r3, #2
 801580e:	4a66      	ldr	r2, [pc, #408]	; (80159a8 <CAD_Init+0x1b4>)
 8015810:	4413      	add	r3, r2
 8015812:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8015814:	7bfa      	ldrb	r2, [r7, #15]
 8015816:	4965      	ldr	r1, [pc, #404]	; (80159ac <CAD_Init+0x1b8>)
 8015818:	4613      	mov	r3, r2
 801581a:	011b      	lsls	r3, r3, #4
 801581c:	1a9b      	subs	r3, r3, r2
 801581e:	009b      	lsls	r3, r3, #2
 8015820:	440b      	add	r3, r1
 8015822:	3310      	adds	r3, #16
 8015824:	687a      	ldr	r2, [r7, #4]
 8015826:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8015828:	7bfa      	ldrb	r2, [r7, #15]
 801582a:	4960      	ldr	r1, [pc, #384]	; (80159ac <CAD_Init+0x1b8>)
 801582c:	4613      	mov	r3, r2
 801582e:	011b      	lsls	r3, r3, #4
 8015830:	1a9b      	subs	r3, r3, r2
 8015832:	009b      	lsls	r3, r3, #2
 8015834:	440b      	add	r3, r1
 8015836:	330c      	adds	r3, #12
 8015838:	68ba      	ldr	r2, [r7, #8]
 801583a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 801583c:	7bfa      	ldrb	r2, [r7, #15]
 801583e:	495b      	ldr	r1, [pc, #364]	; (80159ac <CAD_Init+0x1b8>)
 8015840:	4613      	mov	r3, r2
 8015842:	011b      	lsls	r3, r3, #4
 8015844:	1a9b      	subs	r3, r3, r2
 8015846:	009b      	lsls	r3, r3, #2
 8015848:	440b      	add	r3, r1
 801584a:	330c      	adds	r3, #12
 801584c:	6819      	ldr	r1, [r3, #0]
 801584e:	7bfa      	ldrb	r2, [r7, #15]
 8015850:	4856      	ldr	r0, [pc, #344]	; (80159ac <CAD_Init+0x1b8>)
 8015852:	4613      	mov	r3, r2
 8015854:	011b      	lsls	r3, r3, #4
 8015856:	1a9b      	subs	r3, r3, r2
 8015858:	009b      	lsls	r3, r3, #2
 801585a:	4403      	add	r3, r0
 801585c:	3310      	adds	r3, #16
 801585e:	681a      	ldr	r2, [r3, #0]
 8015860:	794b      	ldrb	r3, [r1, #5]
 8015862:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8015866:	b2d9      	uxtb	r1, r3
 8015868:	7893      	ldrb	r3, [r2, #2]
 801586a:	f361 0301 	bfi	r3, r1, #0, #2
 801586e:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8015870:	7bfa      	ldrb	r2, [r7, #15]
 8015872:	494e      	ldr	r1, [pc, #312]	; (80159ac <CAD_Init+0x1b8>)
 8015874:	4613      	mov	r3, r2
 8015876:	011b      	lsls	r3, r3, #4
 8015878:	1a9b      	subs	r3, r3, r2
 801587a:	009b      	lsls	r3, r3, #2
 801587c:	440b      	add	r3, r1
 801587e:	3310      	adds	r3, #16
 8015880:	681a      	ldr	r2, [r3, #0]
 8015882:	7893      	ldrb	r3, [r2, #2]
 8015884:	f36f 0383 	bfc	r3, #2, #2
 8015888:	7093      	strb	r3, [r2, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 801588a:	220c      	movs	r2, #12
 801588c:	2100      	movs	r1, #0
 801588e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015890:	f009 ff0e 	bl	801f6b0 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8015894:	7bfa      	ldrb	r2, [r7, #15]
 8015896:	4945      	ldr	r1, [pc, #276]	; (80159ac <CAD_Init+0x1b8>)
 8015898:	4613      	mov	r3, r2
 801589a:	011b      	lsls	r3, r3, #4
 801589c:	1a9b      	subs	r3, r3, r2
 801589e:	009b      	lsls	r3, r3, #2
 80158a0:	440b      	add	r3, r1
 80158a2:	332c      	adds	r3, #44	; 0x2c
 80158a4:	683a      	ldr	r2, [r7, #0]
 80158a6:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 80158a8:	7bfc      	ldrb	r4, [r7, #15]
 80158aa:	7bfb      	ldrb	r3, [r7, #15]
 80158ac:	4618      	mov	r0, r3
 80158ae:	f000 fbb1 	bl	8016014 <USBPD_HW_GetUSPDInstance>
 80158b2:	4602      	mov	r2, r0
 80158b4:	493d      	ldr	r1, [pc, #244]	; (80159ac <CAD_Init+0x1b8>)
 80158b6:	4623      	mov	r3, r4
 80158b8:	011b      	lsls	r3, r3, #4
 80158ba:	1b1b      	subs	r3, r3, r4
 80158bc:	009b      	lsls	r3, r3, #2
 80158be:	440b      	add	r3, r1
 80158c0:	601a      	str	r2, [r3, #0]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 80158c2:	f107 0314 	add.w	r3, r7, #20
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7fd f8f0 	bl	8012aac <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 80158cc:	7bfa      	ldrb	r2, [r7, #15]
 80158ce:	4937      	ldr	r1, [pc, #220]	; (80159ac <CAD_Init+0x1b8>)
 80158d0:	4613      	mov	r3, r2
 80158d2:	011b      	lsls	r3, r3, #4
 80158d4:	1a9b      	subs	r3, r3, r2
 80158d6:	009b      	lsls	r3, r3, #2
 80158d8:	440b      	add	r3, r1
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	f107 0214 	add.w	r2, r7, #20
 80158e0:	4611      	mov	r1, r2
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7fd f8b4 	bl	8012a50 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 80158e8:	7bfa      	ldrb	r2, [r7, #15]
 80158ea:	4930      	ldr	r1, [pc, #192]	; (80159ac <CAD_Init+0x1b8>)
 80158ec:	4613      	mov	r3, r2
 80158ee:	011b      	lsls	r3, r3, #4
 80158f0:	1a9b      	subs	r3, r3, r2
 80158f2:	009b      	lsls	r3, r3, #2
 80158f4:	440b      	add	r3, r1
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7ff ff21 	bl	8015744 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8015902:	7bfa      	ldrb	r2, [r7, #15]
 8015904:	4929      	ldr	r1, [pc, #164]	; (80159ac <CAD_Init+0x1b8>)
 8015906:	4613      	mov	r3, r2
 8015908:	011b      	lsls	r3, r3, #4
 801590a:	1a9b      	subs	r3, r3, r2
 801590c:	009b      	lsls	r3, r3, #2
 801590e:	440b      	add	r3, r1
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8015916:	4618      	mov	r0, r3
 8015918:	f7ff ff29 	bl	801576e <LL_UCPD_SetccEnable>

#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 801591c:	f7ff ff5a 	bl	80157d4 <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 8015920:	2002      	movs	r0, #2
 8015922:	f7ff fe6d 	bl	8015600 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 8015926:	2203      	movs	r2, #3
 8015928:	2140      	movs	r1, #64	; 0x40
 801592a:	4821      	ldr	r0, [pc, #132]	; (80159b0 <CAD_Init+0x1bc>)
 801592c:	f7ff fe80 	bl	8015630 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 8015930:	2203      	movs	r2, #3
 8015932:	2110      	movs	r1, #16
 8015934:	481e      	ldr	r0, [pc, #120]	; (80159b0 <CAD_Init+0x1bc>)
 8015936:	f7ff fe7b 	bl	8015630 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 801593a:	2200      	movs	r2, #0
 801593c:	2140      	movs	r1, #64	; 0x40
 801593e:	481c      	ldr	r0, [pc, #112]	; (80159b0 <CAD_Init+0x1bc>)
 8015940:	f7ff feb3 	bl	80156aa <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8015944:	2200      	movs	r2, #0
 8015946:	2110      	movs	r1, #16
 8015948:	4819      	ldr	r0, [pc, #100]	; (80159b0 <CAD_Init+0x1bc>)
 801594a:	f7ff feae 	bl	80156aa <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 801594e:	7bfb      	ldrb	r3, [r7, #15]
 8015950:	4618      	mov	r0, r3
 8015952:	f008 ff91 	bl	801e878 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8015956:	7bfa      	ldrb	r2, [r7, #15]
 8015958:	4914      	ldr	r1, [pc, #80]	; (80159ac <CAD_Init+0x1b8>)
 801595a:	4613      	mov	r3, r2
 801595c:	011b      	lsls	r3, r3, #4
 801595e:	1a9b      	subs	r3, r3, r2
 8015960:	009b      	lsls	r3, r3, #2
 8015962:	440b      	add	r3, r1
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4618      	mov	r0, r3
 8015968:	f7ff fedc 	bl	8015724 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 801596c:	7bfb      	ldrb	r3, [r7, #15]
 801596e:	4618      	mov	r0, r3
 8015970:	f001 fc64 	bl	801723c <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8015974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015976:	4a0f      	ldr	r2, [pc, #60]	; (80159b4 <CAD_Init+0x1c0>)
 8015978:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 801597a:	7bfa      	ldrb	r2, [r7, #15]
 801597c:	490b      	ldr	r1, [pc, #44]	; (80159ac <CAD_Init+0x1b8>)
 801597e:	4613      	mov	r3, r2
 8015980:	011b      	lsls	r3, r3, #4
 8015982:	1a9b      	subs	r3, r3, r2
 8015984:	009b      	lsls	r3, r3, #2
 8015986:	440b      	add	r3, r1
 8015988:	330c      	adds	r3, #12
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	795b      	ldrb	r3, [r3, #5]
 801598e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015992:	b2d9      	uxtb	r1, r3
 8015994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015996:	7853      	ldrb	r3, [r2, #1]
 8015998:	f361 13c7 	bfi	r3, r1, #7, #1
 801599c:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 801599e:	bf00      	nop
 80159a0:	372c      	adds	r7, #44	; 0x2c
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd90      	pop	{r4, r7, pc}
 80159a6:	bf00      	nop
 80159a8:	20001c2c 	.word	0x20001c2c
 80159ac:	20001c44 	.word	0x20001c44
 80159b0:	48000400 	.word	0x48000400
 80159b4:	08015a91 	.word	0x08015a91

080159b8 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b082      	sub	sp, #8
 80159bc:	af00      	add	r7, sp, #0
 80159be:	4603      	mov	r3, r0
 80159c0:	71fb      	strb	r3, [r7, #7]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 80159c2:	79fb      	ldrb	r3, [r7, #7]
 80159c4:	4618      	mov	r0, r3
 80159c6:	f001 fccb 	bl	8017360 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 80159ca:	79fa      	ldrb	r2, [r7, #7]
 80159cc:	490b      	ldr	r1, [pc, #44]	; (80159fc <CAD_Enter_ErrorRecovery+0x44>)
 80159ce:	4613      	mov	r3, r2
 80159d0:	005b      	lsls	r3, r3, #1
 80159d2:	4413      	add	r3, r2
 80159d4:	009b      	lsls	r3, r3, #2
 80159d6:	18ca      	adds	r2, r1, r3
 80159d8:	7813      	ldrb	r3, [r2, #0]
 80159da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159de:	7013      	strb	r3, [r2, #0]
  Ports[PortNum].USBPD_CAD_WakeUp();
 80159e0:	79fa      	ldrb	r2, [r7, #7]
 80159e2:	4907      	ldr	r1, [pc, #28]	; (8015a00 <CAD_Enter_ErrorRecovery+0x48>)
 80159e4:	4613      	mov	r3, r2
 80159e6:	011b      	lsls	r3, r3, #4
 80159e8:	1a9b      	subs	r3, r3, r2
 80159ea:	009b      	lsls	r3, r3, #2
 80159ec:	440b      	add	r3, r1
 80159ee:	332c      	adds	r3, #44	; 0x2c
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	4798      	blx	r3
}
 80159f4:	bf00      	nop
 80159f6:	3708      	adds	r7, #8
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}
 80159fc:	20001c2c 	.word	0x20001c2c
 8015a00:	20001c44 	.word	0x20001c44

08015a04 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b082      	sub	sp, #8
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	6039      	str	r1, [r7, #0]
 8015a0e:	71fb      	strb	r3, [r7, #7]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 8015a10:	79fa      	ldrb	r2, [r7, #7]
 8015a12:	4915      	ldr	r1, [pc, #84]	; (8015a68 <CAD_SRC_Set_ResistorRp+0x64>)
 8015a14:	4613      	mov	r3, r2
 8015a16:	011b      	lsls	r3, r3, #4
 8015a18:	1a9b      	subs	r3, r3, r2
 8015a1a:	009b      	lsls	r3, r3, #2
 8015a1c:	440b      	add	r3, r1
 8015a1e:	3310      	adds	r3, #16
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	f003 0303 	and.w	r3, r3, #3
 8015a28:	b2d9      	uxtb	r1, r3
 8015a2a:	7893      	ldrb	r3, [r2, #2]
 8015a2c:	f361 0301 	bfi	r3, r1, #0, #2
 8015a30:	7093      	strb	r3, [r2, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 8015a32:	79fa      	ldrb	r2, [r7, #7]
 8015a34:	490d      	ldr	r1, [pc, #52]	; (8015a6c <CAD_SRC_Set_ResistorRp+0x68>)
 8015a36:	4613      	mov	r3, r2
 8015a38:	005b      	lsls	r3, r3, #1
 8015a3a:	4413      	add	r3, r2
 8015a3c:	009b      	lsls	r3, r3, #2
 8015a3e:	18ca      	adds	r2, r1, r3
 8015a40:	7853      	ldrb	r3, [r2, #1]
 8015a42:	f043 0301 	orr.w	r3, r3, #1
 8015a46:	7053      	strb	r3, [r2, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8015a48:	79fa      	ldrb	r2, [r7, #7]
 8015a4a:	4907      	ldr	r1, [pc, #28]	; (8015a68 <CAD_SRC_Set_ResistorRp+0x64>)
 8015a4c:	4613      	mov	r3, r2
 8015a4e:	011b      	lsls	r3, r3, #4
 8015a50:	1a9b      	subs	r3, r3, r2
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	440b      	add	r3, r1
 8015a56:	332c      	adds	r3, #44	; 0x2c
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	4798      	blx	r3
  return 0;
 8015a5c:	2300      	movs	r3, #0
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3708      	adds	r7, #8
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	20001c44 	.word	0x20001c44
 8015a6c:	20001c2c 	.word	0x20001c2c

08015a70 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b082      	sub	sp, #8
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	6039      	str	r1, [r7, #0]
 8015a7a:	71fb      	strb	r3, [r7, #7]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 8015a7c:	79fb      	ldrb	r3, [r7, #7]
 8015a7e:	6839      	ldr	r1, [r7, #0]
 8015a80:	4618      	mov	r0, r3
 8015a82:	f7ff ffbf 	bl	8015a04 <CAD_SRC_Set_ResistorRp>
 8015a86:	4603      	mov	r3, r0
}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	3708      	adds	r7, #8
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd80      	pop	{r7, pc}

08015a90 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b086      	sub	sp, #24
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	4603      	mov	r3, r0
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	607a      	str	r2, [r7, #4]
 8015a9c:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015a9e:	7bfa      	ldrb	r2, [r7, #15]
 8015aa0:	4613      	mov	r3, r2
 8015aa2:	005b      	lsls	r3, r3, #1
 8015aa4:	4413      	add	r3, r2
 8015aa6:	009b      	lsls	r3, r3, #2
 8015aa8:	4a17      	ldr	r2, [pc, #92]	; (8015b08 <CAD_StateMachine_SNK+0x78>)
 8015aaa:	4413      	add	r3, r2
 8015aac:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015aae:	2302      	movs	r3, #2
 8015ab0:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	785b      	ldrb	r3, [r3, #1]
 8015ab6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8015aba:	b2db      	uxtb	r3, r3
 8015abc:	2b03      	cmp	r3, #3
 8015abe:	d014      	beq.n	8015aea <CAD_StateMachine_SNK+0x5a>
 8015ac0:	2b03      	cmp	r3, #3
 8015ac2:	dc1a      	bgt.n	8015afa <CAD_StateMachine_SNK+0x6a>
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d002      	beq.n	8015ace <CAD_StateMachine_SNK+0x3e>
 8015ac8:	2b02      	cmp	r3, #2
 8015aca:	d006      	beq.n	8015ada <CAD_StateMachine_SNK+0x4a>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 8015acc:	e015      	b.n	8015afa <CAD_StateMachine_SNK+0x6a>
      _timing = ManageStateDetached_SNK(PortNum);
 8015ace:	7bfb      	ldrb	r3, [r7, #15]
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f000 f955 	bl	8015d80 <ManageStateDetached_SNK>
 8015ad6:	6178      	str	r0, [r7, #20]
      break;
 8015ad8:	e010      	b.n	8015afc <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 8015ada:	7bfb      	ldrb	r3, [r7, #15]
 8015adc:	687a      	ldr	r2, [r7, #4]
 8015ade:	68b9      	ldr	r1, [r7, #8]
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f000 f997 	bl	8015e14 <ManageStateAttachedWait_SNK>
 8015ae6:	6178      	str	r0, [r7, #20]
      break;
 8015ae8:	e008      	b.n	8015afc <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	68b9      	ldr	r1, [r7, #8]
 8015af0:	4618      	mov	r0, r3
 8015af2:	f000 fa11 	bl	8015f18 <ManageStateAttached_SNK>
 8015af6:	6178      	str	r0, [r7, #20]
      break;
 8015af8:	e000      	b.n	8015afc <CAD_StateMachine_SNK+0x6c>
      break;
 8015afa:	bf00      	nop
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8015afc:	697b      	ldr	r3, [r7, #20]
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3718      	adds	r7, #24
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop
 8015b08:	20001c2c 	.word	0x20001c2c

08015b0c <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b086      	sub	sp, #24
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	4603      	mov	r3, r0
 8015b14:	60b9      	str	r1, [r7, #8]
 8015b16:	607a      	str	r2, [r7, #4]
 8015b18:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015b1a:	7bfa      	ldrb	r2, [r7, #15]
 8015b1c:	4613      	mov	r3, r2
 8015b1e:	005b      	lsls	r3, r3, #1
 8015b20:	4413      	add	r3, r2
 8015b22:	009b      	lsls	r3, r3, #2
 8015b24:	4a52      	ldr	r2, [pc, #328]	; (8015c70 <CAD_StateMachine+0x164>)
 8015b26:	4413      	add	r3, r2
 8015b28:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015b2a:	2302      	movs	r3, #2
 8015b2c:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	2200      	movs	r2, #0
 8015b32:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8015b34:	7bfa      	ldrb	r2, [r7, #15]
 8015b36:	494f      	ldr	r1, [pc, #316]	; (8015c74 <CAD_StateMachine+0x168>)
 8015b38:	4613      	mov	r3, r2
 8015b3a:	011b      	lsls	r3, r3, #4
 8015b3c:	1a9b      	subs	r3, r3, r2
 8015b3e:	009b      	lsls	r3, r3, #2
 8015b40:	440b      	add	r3, r1
 8015b42:	3310      	adds	r3, #16
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	781b      	ldrb	r3, [r3, #0]
 8015b48:	f003 0310 	and.w	r3, r3, #16
 8015b4c:	b2db      	uxtb	r3, r3
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d001      	beq.n	8015b56 <CAD_StateMachine+0x4a>
  {
    return _timing;
 8015b52:	697b      	ldr	r3, [r7, #20]
 8015b54:	e087      	b.n	8015c66 <CAD_StateMachine+0x15a>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015b5e:	b2db      	uxtb	r3, r3
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d00a      	beq.n	8015b7a <CAD_StateMachine+0x6e>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8015b64:	693a      	ldr	r2, [r7, #16]
 8015b66:	7813      	ldrb	r3, [r2, #0]
 8015b68:	f36f 13c7 	bfc	r3, #7, #1
 8015b6c:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8015b6e:	693a      	ldr	r2, [r7, #16]
 8015b70:	7853      	ldrb	r3, [r2, #1]
 8015b72:	210c      	movs	r1, #12
 8015b74:	f361 0345 	bfi	r3, r1, #1, #5
 8015b78:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	785b      	ldrb	r3, [r3, #1]
 8015b7e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8015b82:	b2db      	uxtb	r3, r3
 8015b84:	2b0d      	cmp	r3, #13
 8015b86:	d051      	beq.n	8015c2c <CAD_StateMachine+0x120>
 8015b88:	2b0d      	cmp	r3, #13
 8015b8a:	dc62      	bgt.n	8015c52 <CAD_StateMachine+0x146>
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d002      	beq.n	8015b96 <CAD_StateMachine+0x8a>
 8015b90:	2b0c      	cmp	r3, #12
 8015b92:	d024      	beq.n	8015bde <CAD_StateMachine+0xd2>
 8015b94:	e05d      	b.n	8015c52 <CAD_StateMachine+0x146>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 8015b96:	7bfa      	ldrb	r2, [r7, #15]
 8015b98:	4936      	ldr	r1, [pc, #216]	; (8015c74 <CAD_StateMachine+0x168>)
 8015b9a:	4613      	mov	r3, r2
 8015b9c:	011b      	lsls	r3, r3, #4
 8015b9e:	1a9b      	subs	r3, r3, r2
 8015ba0:	009b      	lsls	r3, r3, #2
 8015ba2:	440b      	add	r3, r1
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7ff fdf4 	bl	8015794 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8015bac:	7bfa      	ldrb	r2, [r7, #15]
 8015bae:	4931      	ldr	r1, [pc, #196]	; (8015c74 <CAD_StateMachine+0x168>)
 8015bb0:	4613      	mov	r3, r2
 8015bb2:	011b      	lsls	r3, r3, #4
 8015bb4:	1a9b      	subs	r3, r3, r2
 8015bb6:	009b      	lsls	r3, r3, #2
 8015bb8:	440b      	add	r3, r1
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7ff fdf9 	bl	80157b4 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      UCPD_INSTANCE0_ENABLEIRQ;
 8015bc2:	2104      	movs	r1, #4
 8015bc4:	203f      	movs	r0, #63	; 0x3f
 8015bc6:	f7ff fcf1 	bl	80155ac <__NVIC_SetPriority>
 8015bca:	203f      	movs	r0, #63	; 0x3f
 8015bcc:	f7ff fcd0 	bl	8015570 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8015bd0:	693a      	ldr	r2, [r7, #16]
 8015bd2:	7853      	ldrb	r3, [r2, #1]
 8015bd4:	2101      	movs	r1, #1
 8015bd6:	f361 0345 	bfi	r3, r1, #1, #5
 8015bda:	7053      	strb	r3, [r2, #1]
      break;
 8015bdc:	e042      	b.n	8015c64 <CAD_StateMachine+0x158>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8015bde:	7bfb      	ldrb	r3, [r7, #15]
 8015be0:	4618      	mov	r0, r3
 8015be2:	f001 fbbd 	bl	8017360 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8015be6:	7bfa      	ldrb	r2, [r7, #15]
 8015be8:	4922      	ldr	r1, [pc, #136]	; (8015c74 <CAD_StateMachine+0x168>)
 8015bea:	4613      	mov	r3, r2
 8015bec:	011b      	lsls	r3, r3, #4
 8015bee:	1a9b      	subs	r3, r3, r2
 8015bf0:	009b      	lsls	r3, r3, #2
 8015bf2:	440b      	add	r3, r1
 8015bf4:	3334      	adds	r3, #52	; 0x34
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8015c00:	693a      	ldr	r2, [r7, #16]
 8015c02:	7813      	ldrb	r3, [r2, #0]
 8015c04:	f36f 0301 	bfc	r3, #0, #2
 8015c08:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	2201      	movs	r2, #1
 8015c0e:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8015c10:	f7f3 fb2a 	bl	8009268 <HAL_GetTick>
 8015c14:	4602      	mov	r2, r0
 8015c16:	693b      	ldr	r3, [r7, #16]
 8015c18:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8015c1a:	231a      	movs	r3, #26
 8015c1c:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8015c1e:	693a      	ldr	r2, [r7, #16]
 8015c20:	7853      	ldrb	r3, [r2, #1]
 8015c22:	210d      	movs	r1, #13
 8015c24:	f361 0345 	bfi	r3, r1, #1, #5
 8015c28:	7053      	strb	r3, [r2, #1]
      break;
 8015c2a:	e01b      	b.n	8015c64 <CAD_StateMachine+0x158>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8015c2c:	f7f3 fb1c 	bl	8009268 <HAL_GetTick>
 8015c30:	4602      	mov	r2, r0
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	1ad3      	subs	r3, r2, r3
 8015c38:	2b1a      	cmp	r3, #26
 8015c3a:	d912      	bls.n	8015c62 <CAD_StateMachine+0x156>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 8015c3c:	7bfb      	ldrb	r3, [r7, #15]
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f001 fafc 	bl	801723c <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8015c44:	693a      	ldr	r2, [r7, #16]
 8015c46:	7853      	ldrb	r3, [r2, #1]
 8015c48:	2101      	movs	r1, #1
 8015c4a:	f361 0345 	bfi	r3, r1, #1, #5
 8015c4e:	7053      	strb	r3, [r2, #1]
      }
      break;
 8015c50:	e007      	b.n	8015c62 <CAD_StateMachine+0x156>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	689b      	ldr	r3, [r3, #8]
 8015c56:	7bf8      	ldrb	r0, [r7, #15]
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	68b9      	ldr	r1, [r7, #8]
 8015c5c:	4798      	blx	r3
 8015c5e:	6178      	str	r0, [r7, #20]
      break;
 8015c60:	e000      	b.n	8015c64 <CAD_StateMachine+0x158>
      break;
 8015c62:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 8015c64:	697b      	ldr	r3, [r7, #20]
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3718      	adds	r7, #24
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	20001c2c 	.word	0x20001c2c
 8015c74:	20001c44 	.word	0x20001c44

08015c78 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8015c78:	b480      	push	{r7}
 8015c7a:	b087      	sub	sp, #28
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	4603      	mov	r3, r0
 8015c80:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015c82:	79fa      	ldrb	r2, [r7, #7]
 8015c84:	4613      	mov	r3, r2
 8015c86:	005b      	lsls	r3, r3, #1
 8015c88:	4413      	add	r3, r2
 8015c8a:	009b      	lsls	r3, r3, #2
 8015c8c:	4a3a      	ldr	r2, [pc, #232]	; (8015d78 <CAD_Check_HW_SNK+0x100>)
 8015c8e:	4413      	add	r3, r2
 8015c90:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8015c92:	79fa      	ldrb	r2, [r7, #7]
 8015c94:	4939      	ldr	r1, [pc, #228]	; (8015d7c <CAD_Check_HW_SNK+0x104>)
 8015c96:	4613      	mov	r3, r2
 8015c98:	011b      	lsls	r3, r3, #4
 8015c9a:	1a9b      	subs	r3, r3, r2
 8015c9c:	009b      	lsls	r3, r3, #2
 8015c9e:	440b      	add	r3, r1
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	695b      	ldr	r3, [r3, #20]
 8015ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015ca8:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8015caa:	79fa      	ldrb	r2, [r7, #7]
 8015cac:	4933      	ldr	r1, [pc, #204]	; (8015d7c <CAD_Check_HW_SNK+0x104>)
 8015cae:	4613      	mov	r3, r2
 8015cb0:	011b      	lsls	r3, r3, #4
 8015cb2:	1a9b      	subs	r3, r3, r2
 8015cb4:	009b      	lsls	r3, r3, #2
 8015cb6:	440b      	add	r3, r1
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	695b      	ldr	r3, [r3, #20]
 8015cbc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8015cc0:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 8015cc2:	697a      	ldr	r2, [r7, #20]
 8015cc4:	7813      	ldrb	r3, [r2, #0]
 8015cc6:	f36f 0301 	bfc	r3, #0, #2
 8015cca:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8015ccc:	697a      	ldr	r2, [r7, #20]
 8015cce:	7813      	ldrb	r3, [r2, #0]
 8015cd0:	f36f 0384 	bfc	r3, #2, #3
 8015cd4:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d021      	beq.n	8015d20 <CAD_Check_HW_SNK+0xa8>
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d11e      	bne.n	8015d20 <CAD_Check_HW_SNK+0xa8>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8015ce2:	697a      	ldr	r2, [r7, #20]
 8015ce4:	7813      	ldrb	r3, [r2, #0]
 8015ce6:	2101      	movs	r1, #1
 8015ce8:	f361 0384 	bfi	r3, r1, #2, #3
 8015cec:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC1;
 8015cee:	697a      	ldr	r2, [r7, #20]
 8015cf0:	7813      	ldrb	r3, [r2, #0]
 8015cf2:	2101      	movs	r1, #1
 8015cf4:	f361 0301 	bfi	r3, r1, #0, #2
 8015cf8:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	0c18      	lsrs	r0, r3, #16
 8015cfe:	79fa      	ldrb	r2, [r7, #7]
 8015d00:	491e      	ldr	r1, [pc, #120]	; (8015d7c <CAD_Check_HW_SNK+0x104>)
 8015d02:	4613      	mov	r3, r2
 8015d04:	011b      	lsls	r3, r3, #4
 8015d06:	1a9b      	subs	r3, r3, r2
 8015d08:	009b      	lsls	r3, r3, #2
 8015d0a:	440b      	add	r3, r1
 8015d0c:	3310      	adds	r3, #16
 8015d0e:	681a      	ldr	r2, [r3, #0]
 8015d10:	4603      	mov	r3, r0
 8015d12:	f003 0303 	and.w	r3, r3, #3
 8015d16:	b2d9      	uxtb	r1, r3
 8015d18:	7893      	ldrb	r3, [r2, #2]
 8015d1a:	f361 0383 	bfi	r3, r1, #2, #2
 8015d1e:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8015d20:	693b      	ldr	r3, [r7, #16]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d121      	bne.n	8015d6a <CAD_Check_HW_SNK+0xf2>
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d01e      	beq.n	8015d6a <CAD_Check_HW_SNK+0xf2>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8015d2c:	697a      	ldr	r2, [r7, #20]
 8015d2e:	7813      	ldrb	r3, [r2, #0]
 8015d30:	2101      	movs	r1, #1
 8015d32:	f361 0384 	bfi	r3, r1, #2, #3
 8015d36:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC2;
 8015d38:	697a      	ldr	r2, [r7, #20]
 8015d3a:	7813      	ldrb	r3, [r2, #0]
 8015d3c:	2102      	movs	r1, #2
 8015d3e:	f361 0301 	bfi	r3, r1, #0, #2
 8015d42:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	0c98      	lsrs	r0, r3, #18
 8015d48:	79fa      	ldrb	r2, [r7, #7]
 8015d4a:	490c      	ldr	r1, [pc, #48]	; (8015d7c <CAD_Check_HW_SNK+0x104>)
 8015d4c:	4613      	mov	r3, r2
 8015d4e:	011b      	lsls	r3, r3, #4
 8015d50:	1a9b      	subs	r3, r3, r2
 8015d52:	009b      	lsls	r3, r3, #2
 8015d54:	440b      	add	r3, r1
 8015d56:	3310      	adds	r3, #16
 8015d58:	681a      	ldr	r2, [r3, #0]
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	f003 0303 	and.w	r3, r3, #3
 8015d60:	b2d9      	uxtb	r1, r3
 8015d62:	7893      	ldrb	r3, [r2, #2]
 8015d64:	f361 0383 	bfi	r3, r1, #2, #2
 8015d68:	7093      	strb	r3, [r2, #2]
  }
}
 8015d6a:	bf00      	nop
 8015d6c:	371c      	adds	r7, #28
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d74:	4770      	bx	lr
 8015d76:	bf00      	nop
 8015d78:	20001c2c 	.word	0x20001c2c
 8015d7c:	20001c44 	.word	0x20001c44

08015d80 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b084      	sub	sp, #16
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	4603      	mov	r3, r0
 8015d88:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015d8a:	79fa      	ldrb	r2, [r7, #7]
 8015d8c:	4613      	mov	r3, r2
 8015d8e:	005b      	lsls	r3, r3, #1
 8015d90:	4413      	add	r3, r2
 8015d92:	009b      	lsls	r3, r3, #2
 8015d94:	4a1e      	ldr	r2, [pc, #120]	; (8015e10 <ManageStateDetached_SNK+0x90>)
 8015d96:	4413      	add	r3, r2
 8015d98:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015d9a:	2302      	movs	r3, #2
 8015d9c:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8015d9e:	79fb      	ldrb	r3, [r7, #7]
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7ff ff69 	bl	8015c78 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	f003 031c 	and.w	r3, r3, #28
 8015dae:	b2db      	uxtb	r3, r3
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d103      	bne.n	8015dbc <ManageStateDetached_SNK+0x3c>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 8015db4:	f04f 33ff 	mov.w	r3, #4294967295
 8015db8:	60fb      	str	r3, [r7, #12]
 8015dba:	e023      	b.n	8015e04 <ManageStateDetached_SNK+0x84>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8015dbc:	f7f3 fa54 	bl	8009268 <HAL_GetTick>
 8015dc0:	4602      	mov	r2, r0
 8015dc2:	68bb      	ldr	r3, [r7, #8]
 8015dc4:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8015dc6:	68ba      	ldr	r2, [r7, #8]
 8015dc8:	7853      	ldrb	r3, [r2, #1]
 8015dca:	2102      	movs	r1, #2
 8015dcc:	f361 0345 	bfi	r3, r1, #1, #5
 8015dd0:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 8015dd2:	2001      	movs	r0, #1
 8015dd4:	f7f3 fa54 	bl	8009280 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8015dd8:	79fb      	ldrb	r3, [r7, #7]
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7ff ff4c 	bl	8015c78 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	f003 031c 	and.w	r3, r3, #28
 8015de8:	b2db      	uxtb	r3, r3
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d106      	bne.n	8015dfc <ManageStateDetached_SNK+0x7c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8015dee:	68ba      	ldr	r2, [r7, #8]
 8015df0:	7853      	ldrb	r3, [r2, #1]
 8015df2:	2101      	movs	r1, #1
 8015df4:	f361 0345 	bfi	r3, r1, #1, #5
 8015df8:	7053      	strb	r3, [r2, #1]
 8015dfa:	e003      	b.n	8015e04 <ManageStateDetached_SNK+0x84>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8015dfc:	79fb      	ldrb	r3, [r7, #7]
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f008 fd4d 	bl	801e89e <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8015e04:	68fb      	ldr	r3, [r7, #12]
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	20001c2c 	.word	0x20001c2c

08015e14 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b088      	sub	sp, #32
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	60b9      	str	r1, [r7, #8]
 8015e1e:	607a      	str	r2, [r7, #4]
 8015e20:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015e22:	7bfa      	ldrb	r2, [r7, #15]
 8015e24:	4613      	mov	r3, r2
 8015e26:	005b      	lsls	r3, r3, #1
 8015e28:	4413      	add	r3, r2
 8015e2a:	009b      	lsls	r3, r3, #2
 8015e2c:	4a39      	ldr	r2, [pc, #228]	; (8015f14 <ManageStateAttachedWait_SNK+0x100>)
 8015e2e:	4413      	add	r3, r2
 8015e30:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015e32:	2302      	movs	r3, #2
 8015e34:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8015e36:	f7f3 fa17 	bl	8009268 <HAL_GetTick>
 8015e3a:	4602      	mov	r2, r0
 8015e3c:	69bb      	ldr	r3, [r7, #24]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	1ad3      	subs	r3, r2, r3
 8015e42:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 8015e44:	7bfb      	ldrb	r3, [r7, #15]
 8015e46:	4618      	mov	r0, r3
 8015e48:	f7ff ff16 	bl	8015c78 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8015e4c:	69bb      	ldr	r3, [r7, #24]
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	f003 031c 	and.w	r3, r3, #28
 8015e54:	b2db      	uxtb	r3, r3
 8015e56:	2b04      	cmp	r3, #4
 8015e58:	d12c      	bne.n	8015eb4 <ManageStateAttachedWait_SNK+0xa0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8015e5a:	697b      	ldr	r3, [r7, #20]
 8015e5c:	2b78      	cmp	r3, #120	; 0x78
 8015e5e:	d923      	bls.n	8015ea8 <ManageStateAttachedWait_SNK+0x94>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8015e60:	7bfb      	ldrb	r3, [r7, #15]
 8015e62:	2101      	movs	r1, #1
 8015e64:	4618      	mov	r0, r3
 8015e66:	f008 fccb 	bl	801e800 <USBPD_PWR_IF_GetVBUSStatus>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	2b01      	cmp	r3, #1
 8015e6e:	d11b      	bne.n	8015ea8 <ManageStateAttachedWait_SNK+0x94>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8015e70:	69bb      	ldr	r3, [r7, #24]
 8015e72:	781b      	ldrb	r3, [r3, #0]
 8015e74:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	7bfb      	ldrb	r3, [r7, #15]
 8015e7e:	4611      	mov	r1, r2
 8015e80:	4618      	mov	r0, r3
 8015e82:	f001 fae1 	bl	8017448 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8015e86:	69ba      	ldr	r2, [r7, #24]
 8015e88:	7853      	ldrb	r3, [r2, #1]
 8015e8a:	2103      	movs	r1, #3
 8015e8c:	f361 0345 	bfi	r3, r1, #1, #5
 8015e90:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	2202      	movs	r2, #2
 8015e96:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8015e98:	69bb      	ldr	r3, [r7, #24]
 8015e9a:	781b      	ldrb	r3, [r3, #0]
 8015e9c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	461a      	mov	r2, r3
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8015ea8:	69ba      	ldr	r2, [r7, #24]
 8015eaa:	7813      	ldrb	r3, [r2, #0]
 8015eac:	f36f 1345 	bfc	r3, #5, #1
 8015eb0:	7013      	strb	r3, [r2, #0]
 8015eb2:	e02a      	b.n	8015f0a <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	781b      	ldrb	r3, [r3, #0]
 8015eb8:	f003 0320 	and.w	r3, r3, #32
 8015ebc:	b2db      	uxtb	r3, r3
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d10c      	bne.n	8015edc <ManageStateAttachedWait_SNK+0xc8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8015ec2:	f7f3 f9d1 	bl	8009268 <HAL_GetTick>
 8015ec6:	4602      	mov	r2, r0
 8015ec8:	69bb      	ldr	r3, [r7, #24]
 8015eca:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8015ecc:	69ba      	ldr	r2, [r7, #24]
 8015ece:	7813      	ldrb	r3, [r2, #0]
 8015ed0:	f043 0320 	orr.w	r3, r3, #32
 8015ed4:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 8015ed6:	230c      	movs	r3, #12
 8015ed8:	61fb      	str	r3, [r7, #28]
 8015eda:	e016      	b.n	8015f0a <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 8015edc:	f7f3 f9c4 	bl	8009268 <HAL_GetTick>
 8015ee0:	4602      	mov	r2, r0
 8015ee2:	69bb      	ldr	r3, [r7, #24]
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	1ad3      	subs	r3, r2, r3
 8015ee8:	2b0c      	cmp	r3, #12
 8015eea:	d90e      	bls.n	8015f0a <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8015eec:	69ba      	ldr	r2, [r7, #24]
 8015eee:	7813      	ldrb	r3, [r2, #0]
 8015ef0:	f36f 1345 	bfc	r3, #5, #1
 8015ef4:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8015ef6:	69ba      	ldr	r2, [r7, #24]
 8015ef8:	7853      	ldrb	r3, [r2, #1]
 8015efa:	2101      	movs	r1, #1
 8015efc:	f361 0345 	bfi	r3, r1, #1, #5
 8015f00:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8015f02:	7bfb      	ldrb	r3, [r7, #15]
 8015f04:	4618      	mov	r0, r3
 8015f06:	f008 fcdd 	bl	801e8c4 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8015f0a:	69fb      	ldr	r3, [r7, #28]
}
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	3720      	adds	r7, #32
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd80      	pop	{r7, pc}
 8015f14:	20001c2c 	.word	0x20001c2c

08015f18 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b088      	sub	sp, #32
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	4603      	mov	r3, r0
 8015f20:	60b9      	str	r1, [r7, #8]
 8015f22:	607a      	str	r2, [r7, #4]
 8015f24:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015f26:	7bfa      	ldrb	r2, [r7, #15]
 8015f28:	4613      	mov	r3, r2
 8015f2a:	005b      	lsls	r3, r3, #1
 8015f2c:	4413      	add	r3, r2
 8015f2e:	009b      	lsls	r3, r3, #2
 8015f30:	4a2a      	ldr	r2, [pc, #168]	; (8015fdc <ManageStateAttached_SNK+0xc4>)
 8015f32:	4413      	add	r3, r2
 8015f34:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015f36:	2302      	movs	r3, #2
 8015f38:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8015f3e:	7bfa      	ldrb	r2, [r7, #15]
 8015f40:	4927      	ldr	r1, [pc, #156]	; (8015fe0 <ManageStateAttached_SNK+0xc8>)
 8015f42:	4613      	mov	r3, r2
 8015f44:	011b      	lsls	r3, r3, #4
 8015f46:	1a9b      	subs	r3, r3, r2
 8015f48:	009b      	lsls	r3, r3, #2
 8015f4a:	440b      	add	r3, r1
 8015f4c:	3334      	adds	r3, #52	; 0x34
 8015f4e:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8015f50:	2b01      	cmp	r3, #1
 8015f52:	d10b      	bne.n	8015f6c <ManageStateAttached_SNK+0x54>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8015f54:	7bfa      	ldrb	r2, [r7, #15]
 8015f56:	4922      	ldr	r1, [pc, #136]	; (8015fe0 <ManageStateAttached_SNK+0xc8>)
 8015f58:	4613      	mov	r3, r2
 8015f5a:	011b      	lsls	r3, r3, #4
 8015f5c:	1a9b      	subs	r3, r3, r2
 8015f5e:	009b      	lsls	r3, r3, #2
 8015f60:	440b      	add	r3, r1
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	695b      	ldr	r3, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8015f66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015f6a:	e00a      	b.n	8015f82 <ManageStateAttached_SNK+0x6a>
 8015f6c:	7bfa      	ldrb	r2, [r7, #15]
 8015f6e:	491c      	ldr	r1, [pc, #112]	; (8015fe0 <ManageStateAttached_SNK+0xc8>)
 8015f70:	4613      	mov	r3, r2
 8015f72:	011b      	lsls	r3, r3, #4
 8015f74:	1a9b      	subs	r3, r3, r2
 8015f76:	009b      	lsls	r3, r3, #2
 8015f78:	440b      	add	r3, r1
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	695b      	ldr	r3, [r3, #20]
 8015f7e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8015f82:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8015f84:	7bfb      	ldrb	r3, [r7, #15]
 8015f86:	2102      	movs	r1, #2
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f008 fc39 	bl	801e800 <USBPD_PWR_IF_GetVBUSStatus>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d11b      	bne.n	8015fcc <ManageStateAttached_SNK+0xb4>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8015f94:	697a      	ldr	r2, [r7, #20]
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d117      	bne.n	8015fcc <ManageStateAttached_SNK+0xb4>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8015f9c:	7bfb      	ldrb	r3, [r7, #15]
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f001 fb9e 	bl	80176e0 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8015fa4:	69ba      	ldr	r2, [r7, #24]
 8015fa6:	7813      	ldrb	r3, [r2, #0]
 8015fa8:	f36f 0384 	bfc	r3, #2, #3
 8015fac:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8015fae:	69ba      	ldr	r2, [r7, #24]
 8015fb0:	7853      	ldrb	r3, [r2, #1]
 8015fb2:	2101      	movs	r1, #1
 8015fb4:	f361 0345 	bfi	r3, r1, #1, #5
 8015fb8:	7053      	strb	r3, [r2, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	2201      	movs	r2, #1
 8015fbe:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	61fb      	str	r3, [r7, #28]
 8015fca:	e001      	b.n	8015fd0 <ManageStateAttached_SNK+0xb8>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8015fcc:	230a      	movs	r3, #10
 8015fce:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8015fd0:	69fb      	ldr	r3, [r7, #28]
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3720      	adds	r7, #32
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop
 8015fdc:	20001c2c 	.word	0x20001c2c
 8015fe0:	20001c44 	.word	0x20001c44

08015fe4 <LL_AHB1_GRP1_EnableClock>:
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b085      	sub	sp, #20
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8015fec:	4b08      	ldr	r3, [pc, #32]	; (8016010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8015fee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015ff0:	4907      	ldr	r1, [pc, #28]	; (8016010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8015ff8:	4b05      	ldr	r3, [pc, #20]	; (8016010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8015ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	4013      	ands	r3, r2
 8016000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016002:	68fb      	ldr	r3, [r7, #12]
}
 8016004:	bf00      	nop
 8016006:	3714      	adds	r7, #20
 8016008:	46bd      	mov	sp, r7
 801600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600e:	4770      	bx	lr
 8016010:	40021000 	.word	0x40021000

08016014 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8016014:	b480      	push	{r7}
 8016016:	b083      	sub	sp, #12
 8016018:	af00      	add	r7, sp, #0
 801601a:	4603      	mov	r3, r0
 801601c:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 801601e:	4b03      	ldr	r3, [pc, #12]	; (801602c <USBPD_HW_GetUSPDInstance+0x18>)
}
 8016020:	4618      	mov	r0, r3
 8016022:	370c      	adds	r7, #12
 8016024:	46bd      	mov	sp, r7
 8016026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602a:	4770      	bx	lr
 801602c:	4000a000 	.word	0x4000a000

08016030 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b08e      	sub	sp, #56	; 0x38
 8016034:	af00      	add	r7, sp, #0
 8016036:	4603      	mov	r3, r0
 8016038:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 801603a:	f107 030c 	add.w	r3, r7, #12
 801603e:	4618      	mov	r0, r3
 8016040:	f7fc fafa 	bl	8012638 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8016044:	2300      	movs	r3, #0
 8016046:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8016048:	2300      	movs	r3, #0
 801604a:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 801604c:	2300      	movs	r3, #0
 801604e:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8016050:	2380      	movs	r3, #128	; 0x80
 8016052:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8016054:	2300      	movs	r3, #0
 8016056:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8016058:	2300      	movs	r3, #0
 801605a:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 801605c:	2300      	movs	r3, #0
 801605e:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8016060:	2300      	movs	r3, #0
 8016062:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8016064:	2300      	movs	r3, #0
 8016066:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8016068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801606c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 801606e:	2001      	movs	r0, #1
 8016070:	f7ff ffb8 	bl	8015fe4 <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8016074:	2372      	movs	r3, #114	; 0x72
 8016076:	633b      	str	r3, [r7, #48]	; 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8016078:	f107 030c 	add.w	r3, r7, #12
 801607c:	461a      	mov	r2, r3
 801607e:	2102      	movs	r1, #2
 8016080:	4803      	ldr	r0, [pc, #12]	; (8016090 <USBPD_HW_Init_DMARxInstance+0x60>)
 8016082:	f7fc fa99 	bl	80125b8 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 8016086:	4b03      	ldr	r3, [pc, #12]	; (8016094 <USBPD_HW_Init_DMARxInstance+0x64>)
}
 8016088:	4618      	mov	r0, r3
 801608a:	3738      	adds	r7, #56	; 0x38
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}
 8016090:	40020000 	.word	0x40020000
 8016094:	40020030 	.word	0x40020030

08016098 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8016098:	b480      	push	{r7}
 801609a:	b083      	sub	sp, #12
 801609c:	af00      	add	r7, sp, #0
 801609e:	4603      	mov	r3, r0
 80160a0:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 80160a2:	bf00      	nop
 80160a4:	370c      	adds	r7, #12
 80160a6:	46bd      	mov	sp, r7
 80160a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ac:	4770      	bx	lr
	...

080160b0 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b08e      	sub	sp, #56	; 0x38
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	4603      	mov	r3, r0
 80160b8:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 80160ba:	f107 030c 	add.w	r3, r7, #12
 80160be:	4618      	mov	r0, r3
 80160c0:	f7fc faba 	bl	8012638 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80160c4:	2310      	movs	r3, #16
 80160c6:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80160c8:	2300      	movs	r3, #0
 80160ca:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80160cc:	2300      	movs	r3, #0
 80160ce:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80160d0:	2380      	movs	r3, #128	; 0x80
 80160d2:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80160d4:	2300      	movs	r3, #0
 80160d6:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80160d8:	2300      	movs	r3, #0
 80160da:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 80160dc:	2300      	movs	r3, #0
 80160de:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 80160e0:	2300      	movs	r3, #0
 80160e2:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 80160e4:	2300      	movs	r3, #0
 80160e6:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 80160e8:	2001      	movs	r0, #1
 80160ea:	f7ff ff7b 	bl	8015fe4 <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 80160ee:	2373      	movs	r3, #115	; 0x73
 80160f0:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 80160f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80160f6:	637b      	str	r3, [r7, #52]	; 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 80160f8:	f107 030c 	add.w	r3, r7, #12
 80160fc:	461a      	mov	r2, r3
 80160fe:	2103      	movs	r1, #3
 8016100:	4803      	ldr	r0, [pc, #12]	; (8016110 <USBPD_HW_Init_DMATxInstance+0x60>)
 8016102:	f7fc fa59 	bl	80125b8 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8016106:	4b03      	ldr	r3, [pc, #12]	; (8016114 <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8016108:	4618      	mov	r0, r3
 801610a:	3738      	adds	r7, #56	; 0x38
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}
 8016110:	40020000 	.word	0x40020000
 8016114:	40020044 	.word	0x40020044

08016118 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8016118:	b480      	push	{r7}
 801611a:	b083      	sub	sp, #12
 801611c:	af00      	add	r7, sp, #0
 801611e:	4603      	mov	r3, r0
 8016120:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8016122:	bf00      	nop
 8016124:	370c      	adds	r7, #12
 8016126:	46bd      	mov	sp, r7
 8016128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612c:	4770      	bx	lr

0801612e <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 801612e:	b480      	push	{r7}
 8016130:	b083      	sub	sp, #12
 8016132:	af00      	add	r7, sp, #0
 8016134:	4603      	mov	r3, r0
 8016136:	460a      	mov	r2, r1
 8016138:	71fb      	strb	r3, [r7, #7]
 801613a:	4613      	mov	r3, r2
 801613c:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 801613e:	bf00      	nop
 8016140:	370c      	adds	r7, #12
 8016142:	46bd      	mov	sp, r7
 8016144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016148:	4770      	bx	lr

0801614a <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 801614a:	b480      	push	{r7}
 801614c:	b083      	sub	sp, #12
 801614e:	af00      	add	r7, sp, #0
 8016150:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	699b      	ldr	r3, [r3, #24]
 8016156:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	619a      	str	r2, [r3, #24]
}
 801615e:	bf00      	nop
 8016160:	370c      	adds	r7, #12
 8016162:	46bd      	mov	sp, r7
 8016164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016168:	4770      	bx	lr

0801616a <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 801616a:	b480      	push	{r7}
 801616c:	b083      	sub	sp, #12
 801616e:	af00      	add	r7, sp, #0
 8016170:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	699b      	ldr	r3, [r3, #24]
 8016176:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	619a      	str	r2, [r3, #24]
}
 801617e:	bf00      	nop
 8016180:	370c      	adds	r7, #12
 8016182:	46bd      	mov	sp, r7
 8016184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016188:	4770      	bx	lr

0801618a <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 801618a:	b480      	push	{r7}
 801618c:	b083      	sub	sp, #12
 801618e:	af00      	add	r7, sp, #0
 8016190:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	699b      	ldr	r3, [r3, #24]
 8016196:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	619a      	str	r2, [r3, #24]
}
 801619e:	bf00      	nop
 80161a0:	370c      	adds	r7, #12
 80161a2:	46bd      	mov	sp, r7
 80161a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a8:	4770      	bx	lr

080161aa <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 80161aa:	b480      	push	{r7}
 80161ac:	b083      	sub	sp, #12
 80161ae:	af00      	add	r7, sp, #0
 80161b0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	699b      	ldr	r3, [r3, #24]
 80161b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	619a      	str	r2, [r3, #24]
}
 80161be:	bf00      	nop
 80161c0:	370c      	adds	r7, #12
 80161c2:	46bd      	mov	sp, r7
 80161c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c8:	4770      	bx	lr

080161ca <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 80161ca:	b480      	push	{r7}
 80161cc:	b083      	sub	sp, #12
 80161ce:	af00      	add	r7, sp, #0
 80161d0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	699b      	ldr	r3, [r3, #24]
 80161d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	619a      	str	r2, [r3, #24]
}
 80161de:	bf00      	nop
 80161e0:	370c      	adds	r7, #12
 80161e2:	46bd      	mov	sp, r7
 80161e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e8:	4770      	bx	lr

080161ea <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 80161ea:	b480      	push	{r7}
 80161ec:	b083      	sub	sp, #12
 80161ee:	af00      	add	r7, sp, #0
 80161f0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	699b      	ldr	r3, [r3, #24]
 80161f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	619a      	str	r2, [r3, #24]
}
 80161fe:	bf00      	nop
 8016200:	370c      	adds	r7, #12
 8016202:	46bd      	mov	sp, r7
 8016204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016208:	4770      	bx	lr

0801620a <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 801620a:	b480      	push	{r7}
 801620c:	b083      	sub	sp, #12
 801620e:	af00      	add	r7, sp, #0
 8016210:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	699b      	ldr	r3, [r3, #24]
 8016216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	619a      	str	r2, [r3, #24]
}
 801621e:	bf00      	nop
 8016220:	370c      	adds	r7, #12
 8016222:	46bd      	mov	sp, r7
 8016224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016228:	4770      	bx	lr

0801622a <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 801622a:	b480      	push	{r7}
 801622c:	b083      	sub	sp, #12
 801622e:	af00      	add	r7, sp, #0
 8016230:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	699b      	ldr	r3, [r3, #24]
 8016236:	f043 0220 	orr.w	r2, r3, #32
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	619a      	str	r2, [r3, #24]
}
 801623e:	bf00      	nop
 8016240:	370c      	adds	r7, #12
 8016242:	46bd      	mov	sp, r7
 8016244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016248:	4770      	bx	lr

0801624a <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 801624a:	b480      	push	{r7}
 801624c:	b083      	sub	sp, #12
 801624e:	af00      	add	r7, sp, #0
 8016250:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	699b      	ldr	r3, [r3, #24]
 8016256:	f043 0210 	orr.w	r2, r3, #16
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	619a      	str	r2, [r3, #24]
}
 801625e:	bf00      	nop
 8016260:	370c      	adds	r7, #12
 8016262:	46bd      	mov	sp, r7
 8016264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016268:	4770      	bx	lr

0801626a <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 801626a:	b480      	push	{r7}
 801626c:	b083      	sub	sp, #12
 801626e:	af00      	add	r7, sp, #0
 8016270:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	699b      	ldr	r3, [r3, #24]
 8016276:	f043 0208 	orr.w	r2, r3, #8
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	619a      	str	r2, [r3, #24]
}
 801627e:	bf00      	nop
 8016280:	370c      	adds	r7, #12
 8016282:	46bd      	mov	sp, r7
 8016284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016288:	4770      	bx	lr

0801628a <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 801628a:	b480      	push	{r7}
 801628c:	b083      	sub	sp, #12
 801628e:	af00      	add	r7, sp, #0
 8016290:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	699b      	ldr	r3, [r3, #24]
 8016296:	f043 0204 	orr.w	r2, r3, #4
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	619a      	str	r2, [r3, #24]
}
 801629e:	bf00      	nop
 80162a0:	370c      	adds	r7, #12
 80162a2:	46bd      	mov	sp, r7
 80162a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a8:	4770      	bx	lr

080162aa <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 80162aa:	b480      	push	{r7}
 80162ac:	b083      	sub	sp, #12
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	699b      	ldr	r3, [r3, #24]
 80162b6:	f043 0202 	orr.w	r2, r3, #2
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	619a      	str	r2, [r3, #24]
}
 80162be:	bf00      	nop
 80162c0:	370c      	adds	r7, #12
 80162c2:	46bd      	mov	sp, r7
 80162c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c8:	4770      	bx	lr

080162ca <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 80162ca:	b580      	push	{r7, lr}
 80162cc:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 80162ce:	2000      	movs	r0, #0
 80162d0:	f000 f802 	bl	80162d8 <PORTx_IRQHandler>
}
 80162d4:	bf00      	nop
 80162d6:	bd80      	pop	{r7, pc}

080162d8 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	4603      	mov	r3, r0
 80162e0:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 80162e2:	79fa      	ldrb	r2, [r7, #7]
 80162e4:	4998      	ldr	r1, [pc, #608]	; (8016548 <PORTx_IRQHandler+0x270>)
 80162e6:	4613      	mov	r3, r2
 80162e8:	011b      	lsls	r3, r3, #4
 80162ea:	1a9b      	subs	r3, r3, r2
 80162ec:	009b      	lsls	r3, r3, #2
 80162ee:	440b      	add	r3, r1
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	695b      	ldr	r3, [r3, #20]
 80162f8:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	691a      	ldr	r2, [r3, #16]
 80162fe:	68bb      	ldr	r3, [r7, #8]
 8016300:	4013      	ands	r3, r2
 8016302:	2b00      	cmp	r3, #0
 8016304:	f000 81ca 	beq.w	801669c <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	f003 0302 	and.w	r3, r3, #2
 801630e:	2b00      	cmp	r3, #0
 8016310:	d035      	beq.n	801637e <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8016312:	68f8      	ldr	r0, [r7, #12]
 8016314:	f7ff ffc9 	bl	80162aa <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016318:	79fa      	ldrb	r2, [r7, #7]
 801631a:	498b      	ldr	r1, [pc, #556]	; (8016548 <PORTx_IRQHandler+0x270>)
 801631c:	4613      	mov	r3, r2
 801631e:	011b      	lsls	r3, r3, #4
 8016320:	1a9b      	subs	r3, r3, r2
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	440b      	add	r3, r1
 8016326:	3304      	adds	r3, #4
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	6819      	ldr	r1, [r3, #0]
 801632c:	79fa      	ldrb	r2, [r7, #7]
 801632e:	4886      	ldr	r0, [pc, #536]	; (8016548 <PORTx_IRQHandler+0x270>)
 8016330:	4613      	mov	r3, r2
 8016332:	011b      	lsls	r3, r3, #4
 8016334:	1a9b      	subs	r3, r3, r2
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	4403      	add	r3, r0
 801633a:	3304      	adds	r3, #4
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	f021 0201 	bic.w	r2, r1, #1
 8016342:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8016344:	bf00      	nop
 8016346:	79fa      	ldrb	r2, [r7, #7]
 8016348:	497f      	ldr	r1, [pc, #508]	; (8016548 <PORTx_IRQHandler+0x270>)
 801634a:	4613      	mov	r3, r2
 801634c:	011b      	lsls	r3, r3, #4
 801634e:	1a9b      	subs	r3, r3, r2
 8016350:	009b      	lsls	r3, r3, #2
 8016352:	440b      	add	r3, r1
 8016354:	3304      	adds	r3, #4
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	f003 0301 	and.w	r3, r3, #1
 801635e:	2b01      	cmp	r3, #1
 8016360:	d0f1      	beq.n	8016346 <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8016362:	79fa      	ldrb	r2, [r7, #7]
 8016364:	4978      	ldr	r1, [pc, #480]	; (8016548 <PORTx_IRQHandler+0x270>)
 8016366:	4613      	mov	r3, r2
 8016368:	011b      	lsls	r3, r3, #4
 801636a:	1a9b      	subs	r3, r3, r2
 801636c:	009b      	lsls	r3, r3, #2
 801636e:	440b      	add	r3, r1
 8016370:	3314      	adds	r3, #20
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	79fa      	ldrb	r2, [r7, #7]
 8016376:	2101      	movs	r1, #1
 8016378:	4610      	mov	r0, r2
 801637a:	4798      	blx	r3
      return;
 801637c:	e18e      	b.n	801669c <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	f003 0304 	and.w	r3, r3, #4
 8016384:	2b00      	cmp	r3, #0
 8016386:	d035      	beq.n	80163f4 <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8016388:	68f8      	ldr	r0, [r7, #12]
 801638a:	f7ff ff7e 	bl	801628a <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801638e:	79fa      	ldrb	r2, [r7, #7]
 8016390:	496d      	ldr	r1, [pc, #436]	; (8016548 <PORTx_IRQHandler+0x270>)
 8016392:	4613      	mov	r3, r2
 8016394:	011b      	lsls	r3, r3, #4
 8016396:	1a9b      	subs	r3, r3, r2
 8016398:	009b      	lsls	r3, r3, #2
 801639a:	440b      	add	r3, r1
 801639c:	3304      	adds	r3, #4
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	6819      	ldr	r1, [r3, #0]
 80163a2:	79fa      	ldrb	r2, [r7, #7]
 80163a4:	4868      	ldr	r0, [pc, #416]	; (8016548 <PORTx_IRQHandler+0x270>)
 80163a6:	4613      	mov	r3, r2
 80163a8:	011b      	lsls	r3, r3, #4
 80163aa:	1a9b      	subs	r3, r3, r2
 80163ac:	009b      	lsls	r3, r3, #2
 80163ae:	4403      	add	r3, r0
 80163b0:	3304      	adds	r3, #4
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	f021 0201 	bic.w	r2, r1, #1
 80163b8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 80163ba:	bf00      	nop
 80163bc:	79fa      	ldrb	r2, [r7, #7]
 80163be:	4962      	ldr	r1, [pc, #392]	; (8016548 <PORTx_IRQHandler+0x270>)
 80163c0:	4613      	mov	r3, r2
 80163c2:	011b      	lsls	r3, r3, #4
 80163c4:	1a9b      	subs	r3, r3, r2
 80163c6:	009b      	lsls	r3, r3, #2
 80163c8:	440b      	add	r3, r1
 80163ca:	3304      	adds	r3, #4
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	f003 0301 	and.w	r3, r3, #1
 80163d4:	2b01      	cmp	r3, #1
 80163d6:	d0f1      	beq.n	80163bc <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 80163d8:	79fa      	ldrb	r2, [r7, #7]
 80163da:	495b      	ldr	r1, [pc, #364]	; (8016548 <PORTx_IRQHandler+0x270>)
 80163dc:	4613      	mov	r3, r2
 80163de:	011b      	lsls	r3, r3, #4
 80163e0:	1a9b      	subs	r3, r3, r2
 80163e2:	009b      	lsls	r3, r3, #2
 80163e4:	440b      	add	r3, r1
 80163e6:	3314      	adds	r3, #20
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	79fa      	ldrb	r2, [r7, #7]
 80163ec:	2100      	movs	r1, #0
 80163ee:	4610      	mov	r0, r2
 80163f0:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 80163f2:	e153      	b.n	801669c <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	f003 0308 	and.w	r3, r3, #8
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d035      	beq.n	801646a <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 80163fe:	68f8      	ldr	r0, [r7, #12]
 8016400:	f7ff ff33 	bl	801626a <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016404:	79fa      	ldrb	r2, [r7, #7]
 8016406:	4950      	ldr	r1, [pc, #320]	; (8016548 <PORTx_IRQHandler+0x270>)
 8016408:	4613      	mov	r3, r2
 801640a:	011b      	lsls	r3, r3, #4
 801640c:	1a9b      	subs	r3, r3, r2
 801640e:	009b      	lsls	r3, r3, #2
 8016410:	440b      	add	r3, r1
 8016412:	3304      	adds	r3, #4
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	6819      	ldr	r1, [r3, #0]
 8016418:	79fa      	ldrb	r2, [r7, #7]
 801641a:	484b      	ldr	r0, [pc, #300]	; (8016548 <PORTx_IRQHandler+0x270>)
 801641c:	4613      	mov	r3, r2
 801641e:	011b      	lsls	r3, r3, #4
 8016420:	1a9b      	subs	r3, r3, r2
 8016422:	009b      	lsls	r3, r3, #2
 8016424:	4403      	add	r3, r0
 8016426:	3304      	adds	r3, #4
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	f021 0201 	bic.w	r2, r1, #1
 801642e:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8016430:	bf00      	nop
 8016432:	79fa      	ldrb	r2, [r7, #7]
 8016434:	4944      	ldr	r1, [pc, #272]	; (8016548 <PORTx_IRQHandler+0x270>)
 8016436:	4613      	mov	r3, r2
 8016438:	011b      	lsls	r3, r3, #4
 801643a:	1a9b      	subs	r3, r3, r2
 801643c:	009b      	lsls	r3, r3, #2
 801643e:	440b      	add	r3, r1
 8016440:	3304      	adds	r3, #4
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	f003 0301 	and.w	r3, r3, #1
 801644a:	2b01      	cmp	r3, #1
 801644c:	d0f1      	beq.n	8016432 <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 801644e:	79fa      	ldrb	r2, [r7, #7]
 8016450:	493d      	ldr	r1, [pc, #244]	; (8016548 <PORTx_IRQHandler+0x270>)
 8016452:	4613      	mov	r3, r2
 8016454:	011b      	lsls	r3, r3, #4
 8016456:	1a9b      	subs	r3, r3, r2
 8016458:	009b      	lsls	r3, r3, #2
 801645a:	440b      	add	r3, r1
 801645c:	3314      	adds	r3, #20
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	79fa      	ldrb	r2, [r7, #7]
 8016462:	2102      	movs	r1, #2
 8016464:	4610      	mov	r0, r2
 8016466:	4798      	blx	r3
      return;
 8016468:	e118      	b.n	801669c <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	f003 0310 	and.w	r3, r3, #16
 8016470:	2b00      	cmp	r3, #0
 8016472:	d003      	beq.n	801647c <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8016474:	68f8      	ldr	r0, [r7, #12]
 8016476:	f7ff fee8 	bl	801624a <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 801647a:	e10f      	b.n	801669c <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	f003 0320 	and.w	r3, r3, #32
 8016482:	2b00      	cmp	r3, #0
 8016484:	d010      	beq.n	80164a8 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8016486:	68f8      	ldr	r0, [r7, #12]
 8016488:	f7ff fecf 	bl	801622a <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 801648c:	79fa      	ldrb	r2, [r7, #7]
 801648e:	492e      	ldr	r1, [pc, #184]	; (8016548 <PORTx_IRQHandler+0x270>)
 8016490:	4613      	mov	r3, r2
 8016492:	011b      	lsls	r3, r3, #4
 8016494:	1a9b      	subs	r3, r3, r2
 8016496:	009b      	lsls	r3, r3, #2
 8016498:	440b      	add	r3, r1
 801649a:	3324      	adds	r3, #36	; 0x24
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	79fa      	ldrb	r2, [r7, #7]
 80164a0:	2105      	movs	r1, #5
 80164a2:	4610      	mov	r0, r2
 80164a4:	4798      	blx	r3
      return;
 80164a6:	e0f9      	b.n	801669c <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d003      	beq.n	80164ba <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 80164b2:	68f8      	ldr	r0, [r7, #12]
 80164b4:	f7ff fea9 	bl	801620a <LL_UCPD_ClearFlag_TxUND>
      return;
 80164b8:	e0f0      	b.n	801669c <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 80164ba:	68bb      	ldr	r3, [r7, #8]
 80164bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d01e      	beq.n	8016502 <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164c8:	2b05      	cmp	r3, #5
 80164ca:	d10c      	bne.n	80164e6 <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 80164cc:	79fa      	ldrb	r2, [r7, #7]
 80164ce:	491e      	ldr	r1, [pc, #120]	; (8016548 <PORTx_IRQHandler+0x270>)
 80164d0:	4613      	mov	r3, r2
 80164d2:	011b      	lsls	r3, r3, #4
 80164d4:	1a9b      	subs	r3, r3, r2
 80164d6:	009b      	lsls	r3, r3, #2
 80164d8:	440b      	add	r3, r1
 80164da:	331c      	adds	r3, #28
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	79fa      	ldrb	r2, [r7, #7]
 80164e0:	2106      	movs	r1, #6
 80164e2:	4610      	mov	r0, r2
 80164e4:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 80164e6:	68f8      	ldr	r0, [r7, #12]
 80164e8:	f7ff fe7f 	bl	80161ea <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 80164ec:	79fa      	ldrb	r2, [r7, #7]
 80164ee:	4916      	ldr	r1, [pc, #88]	; (8016548 <PORTx_IRQHandler+0x270>)
 80164f0:	4613      	mov	r3, r2
 80164f2:	011b      	lsls	r3, r3, #4
 80164f4:	1a9b      	subs	r3, r3, r2
 80164f6:	009b      	lsls	r3, r3, #2
 80164f8:	440b      	add	r3, r1
 80164fa:	3338      	adds	r3, #56	; 0x38
 80164fc:	2201      	movs	r2, #1
 80164fe:	701a      	strb	r2, [r3, #0]
      return;
 8016500:	e0cc      	b.n	801669c <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016508:	2b00      	cmp	r3, #0
 801650a:	d010      	beq.n	801652e <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 801650c:	79fa      	ldrb	r2, [r7, #7]
 801650e:	490e      	ldr	r1, [pc, #56]	; (8016548 <PORTx_IRQHandler+0x270>)
 8016510:	4613      	mov	r3, r2
 8016512:	011b      	lsls	r3, r3, #4
 8016514:	1a9b      	subs	r3, r3, r2
 8016516:	009b      	lsls	r3, r3, #2
 8016518:	440b      	add	r3, r1
 801651a:	331c      	adds	r3, #28
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	79fa      	ldrb	r2, [r7, #7]
 8016520:	2105      	movs	r1, #5
 8016522:	4610      	mov	r0, r2
 8016524:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8016526:	68f8      	ldr	r0, [r7, #12]
 8016528:	f7ff fe4f 	bl	80161ca <LL_UCPD_ClearFlag_RxHRST>
      return;
 801652c:	e0b6      	b.n	801669c <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016534:	2b00      	cmp	r3, #0
 8016536:	d00b      	beq.n	8016550 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 8016538:	4b04      	ldr	r3, [pc, #16]	; (801654c <PORTx_IRQHandler+0x274>)
 801653a:	2201      	movs	r2, #1
 801653c:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 801653e:	68f8      	ldr	r0, [r7, #12]
 8016540:	f7ff fe33 	bl	80161aa <LL_UCPD_ClearFlag_RxOvr>
      return;
 8016544:	e0aa      	b.n	801669c <PORTx_IRQHandler+0x3c4>
 8016546:	bf00      	nop
 8016548:	20001c44 	.word	0x20001c44
 801654c:	20001c38 	.word	0x20001c38
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016556:	2b00      	cmp	r3, #0
 8016558:	f000 8085 	beq.w	8016666 <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 801655c:	79fa      	ldrb	r2, [r7, #7]
 801655e:	4951      	ldr	r1, [pc, #324]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 8016560:	4613      	mov	r3, r2
 8016562:	011b      	lsls	r3, r3, #4
 8016564:	1a9b      	subs	r3, r3, r2
 8016566:	009b      	lsls	r3, r3, #2
 8016568:	440b      	add	r3, r1
 801656a:	3338      	adds	r3, #56	; 0x38
 801656c:	2200      	movs	r2, #0
 801656e:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8016570:	68f8      	ldr	r0, [r7, #12]
 8016572:	f7ff fe0a 	bl	801618a <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8016576:	79fa      	ldrb	r2, [r7, #7]
 8016578:	494a      	ldr	r1, [pc, #296]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 801657a:	4613      	mov	r3, r2
 801657c:	011b      	lsls	r3, r3, #4
 801657e:	1a9b      	subs	r3, r3, r2
 8016580:	009b      	lsls	r3, r3, #2
 8016582:	440b      	add	r3, r1
 8016584:	3308      	adds	r3, #8
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	6819      	ldr	r1, [r3, #0]
 801658a:	79fa      	ldrb	r2, [r7, #7]
 801658c:	4845      	ldr	r0, [pc, #276]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 801658e:	4613      	mov	r3, r2
 8016590:	011b      	lsls	r3, r3, #4
 8016592:	1a9b      	subs	r3, r3, r2
 8016594:	009b      	lsls	r3, r3, #2
 8016596:	4403      	add	r3, r0
 8016598:	3308      	adds	r3, #8
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	f021 0201 	bic.w	r2, r1, #1
 80165a0:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 80165a2:	bf00      	nop
 80165a4:	79fa      	ldrb	r2, [r7, #7]
 80165a6:	493f      	ldr	r1, [pc, #252]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 80165a8:	4613      	mov	r3, r2
 80165aa:	011b      	lsls	r3, r3, #4
 80165ac:	1a9b      	subs	r3, r3, r2
 80165ae:	009b      	lsls	r3, r3, #2
 80165b0:	440b      	add	r3, r1
 80165b2:	3308      	adds	r3, #8
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	f003 0301 	and.w	r3, r3, #1
 80165bc:	2b01      	cmp	r3, #1
 80165be:	d0f1      	beq.n	80165a4 <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80165c0:	79fa      	ldrb	r2, [r7, #7]
 80165c2:	4938      	ldr	r1, [pc, #224]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 80165c4:	4613      	mov	r3, r2
 80165c6:	011b      	lsls	r3, r3, #4
 80165c8:	1a9b      	subs	r3, r3, r2
 80165ca:	009b      	lsls	r3, r3, #2
 80165cc:	440b      	add	r3, r1
 80165ce:	3330      	adds	r3, #48	; 0x30
 80165d0:	6818      	ldr	r0, [r3, #0]
 80165d2:	79fa      	ldrb	r2, [r7, #7]
 80165d4:	4933      	ldr	r1, [pc, #204]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 80165d6:	4613      	mov	r3, r2
 80165d8:	011b      	lsls	r3, r3, #4
 80165da:	1a9b      	subs	r3, r3, r2
 80165dc:	009b      	lsls	r3, r3, #2
 80165de:	440b      	add	r3, r1
 80165e0:	3308      	adds	r3, #8
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	4602      	mov	r2, r0
 80165e6:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 80165e8:	79fa      	ldrb	r2, [r7, #7]
 80165ea:	492e      	ldr	r1, [pc, #184]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 80165ec:	4613      	mov	r3, r2
 80165ee:	011b      	lsls	r3, r3, #4
 80165f0:	1a9b      	subs	r3, r3, r2
 80165f2:	009b      	lsls	r3, r3, #2
 80165f4:	440b      	add	r3, r1
 80165f6:	3308      	adds	r3, #8
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	f44f 7284 	mov.w	r2, #264	; 0x108
 80165fe:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8016600:	79fa      	ldrb	r2, [r7, #7]
 8016602:	4928      	ldr	r1, [pc, #160]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 8016604:	4613      	mov	r3, r2
 8016606:	011b      	lsls	r3, r3, #4
 8016608:	1a9b      	subs	r3, r3, r2
 801660a:	009b      	lsls	r3, r3, #2
 801660c:	440b      	add	r3, r1
 801660e:	3308      	adds	r3, #8
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	6819      	ldr	r1, [r3, #0]
 8016614:	79fa      	ldrb	r2, [r7, #7]
 8016616:	4823      	ldr	r0, [pc, #140]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 8016618:	4613      	mov	r3, r2
 801661a:	011b      	lsls	r3, r3, #4
 801661c:	1a9b      	subs	r3, r3, r2
 801661e:	009b      	lsls	r3, r3, #2
 8016620:	4403      	add	r3, r0
 8016622:	3308      	adds	r3, #8
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	f041 0201 	orr.w	r2, r1, #1
 801662a:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016632:	2b00      	cmp	r3, #0
 8016634:	d113      	bne.n	801665e <PORTx_IRQHandler+0x386>
 8016636:	4b1c      	ldr	r3, [pc, #112]	; (80166a8 <PORTx_IRQHandler+0x3d0>)
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d10f      	bne.n	801665e <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 801663e:	79fa      	ldrb	r2, [r7, #7]
 8016640:	4918      	ldr	r1, [pc, #96]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 8016642:	4613      	mov	r3, r2
 8016644:	011b      	lsls	r3, r3, #4
 8016646:	1a9b      	subs	r3, r3, r2
 8016648:	009b      	lsls	r3, r3, #2
 801664a:	440b      	add	r3, r1
 801664c:	3320      	adds	r3, #32
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	68fa      	ldr	r2, [r7, #12]
 8016652:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8016654:	f002 0107 	and.w	r1, r2, #7
 8016658:	79fa      	ldrb	r2, [r7, #7]
 801665a:	4610      	mov	r0, r2
 801665c:	4798      	blx	r3
      }
      ovrflag = 0;
 801665e:	4b12      	ldr	r3, [pc, #72]	; (80166a8 <PORTx_IRQHandler+0x3d0>)
 8016660:	2200      	movs	r2, #0
 8016662:	701a      	strb	r2, [r3, #0]
      return;
 8016664:	e01a      	b.n	801669c <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8016666:	68bb      	ldr	r3, [r7, #8]
 8016668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801666c:	2b00      	cmp	r3, #0
 801666e:	d104      	bne.n	801667a <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016676:	2b00      	cmp	r3, #0
 8016678:	d010      	beq.n	801669c <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 801667a:	68f8      	ldr	r0, [r7, #12]
 801667c:	f7ff fd75 	bl	801616a <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8016680:	68f8      	ldr	r0, [r7, #12]
 8016682:	f7ff fd62 	bl	801614a <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8016686:	79fa      	ldrb	r2, [r7, #7]
 8016688:	4906      	ldr	r1, [pc, #24]	; (80166a4 <PORTx_IRQHandler+0x3cc>)
 801668a:	4613      	mov	r3, r2
 801668c:	011b      	lsls	r3, r3, #4
 801668e:	1a9b      	subs	r3, r3, r2
 8016690:	009b      	lsls	r3, r3, #2
 8016692:	440b      	add	r3, r1
 8016694:	332c      	adds	r3, #44	; 0x2c
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 801669a:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 801669c:	3710      	adds	r7, #16
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	20001c44 	.word	0x20001c44
 80166a8:	20001c38 	.word	0x20001c38

080166ac <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 80166ac:	b480      	push	{r7}
 80166ae:	b085      	sub	sp, #20
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	60b9      	str	r1, [r7, #8]
 80166b4:	607a      	str	r2, [r7, #4]
 80166b6:	603b      	str	r3, [r7, #0]
 80166b8:	4603      	mov	r3, r0
 80166ba:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 80166bc:	7bfa      	ldrb	r2, [r7, #15]
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	6919      	ldr	r1, [r3, #16]
 80166c2:	482d      	ldr	r0, [pc, #180]	; (8016778 <USBPD_PHY_Init+0xcc>)
 80166c4:	4613      	mov	r3, r2
 80166c6:	011b      	lsls	r3, r3, #4
 80166c8:	1a9b      	subs	r3, r3, r2
 80166ca:	009b      	lsls	r3, r3, #2
 80166cc:	4403      	add	r3, r0
 80166ce:	3314      	adds	r3, #20
 80166d0:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 80166d2:	7bfa      	ldrb	r2, [r7, #15]
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	68d9      	ldr	r1, [r3, #12]
 80166d8:	4827      	ldr	r0, [pc, #156]	; (8016778 <USBPD_PHY_Init+0xcc>)
 80166da:	4613      	mov	r3, r2
 80166dc:	011b      	lsls	r3, r3, #4
 80166de:	1a9b      	subs	r3, r3, r2
 80166e0:	009b      	lsls	r3, r3, #2
 80166e2:	4403      	add	r3, r0
 80166e4:	3318      	adds	r3, #24
 80166e6:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 80166e8:	7bfa      	ldrb	r2, [r7, #15]
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	6859      	ldr	r1, [r3, #4]
 80166ee:	4822      	ldr	r0, [pc, #136]	; (8016778 <USBPD_PHY_Init+0xcc>)
 80166f0:	4613      	mov	r3, r2
 80166f2:	011b      	lsls	r3, r3, #4
 80166f4:	1a9b      	subs	r3, r3, r2
 80166f6:	009b      	lsls	r3, r3, #2
 80166f8:	4403      	add	r3, r0
 80166fa:	331c      	adds	r3, #28
 80166fc:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 80166fe:	7bfa      	ldrb	r2, [r7, #15]
 8016700:	491d      	ldr	r1, [pc, #116]	; (8016778 <USBPD_PHY_Init+0xcc>)
 8016702:	4613      	mov	r3, r2
 8016704:	011b      	lsls	r3, r3, #4
 8016706:	1a9b      	subs	r3, r3, r2
 8016708:	009b      	lsls	r3, r3, #2
 801670a:	440b      	add	r3, r1
 801670c:	3320      	adds	r3, #32
 801670e:	4a1b      	ldr	r2, [pc, #108]	; (801677c <USBPD_PHY_Init+0xd0>)
 8016710:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8016712:	7bfa      	ldrb	r2, [r7, #15]
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	6899      	ldr	r1, [r3, #8]
 8016718:	4817      	ldr	r0, [pc, #92]	; (8016778 <USBPD_PHY_Init+0xcc>)
 801671a:	4613      	mov	r3, r2
 801671c:	011b      	lsls	r3, r3, #4
 801671e:	1a9b      	subs	r3, r3, r2
 8016720:	009b      	lsls	r3, r3, #2
 8016722:	4403      	add	r3, r0
 8016724:	3324      	adds	r3, #36	; 0x24
 8016726:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8016728:	7bfa      	ldrb	r2, [r7, #15]
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	6959      	ldr	r1, [r3, #20]
 801672e:	4812      	ldr	r0, [pc, #72]	; (8016778 <USBPD_PHY_Init+0xcc>)
 8016730:	4613      	mov	r3, r2
 8016732:	011b      	lsls	r3, r3, #4
 8016734:	1a9b      	subs	r3, r3, r2
 8016736:	009b      	lsls	r3, r3, #2
 8016738:	4403      	add	r3, r0
 801673a:	3328      	adds	r3, #40	; 0x28
 801673c:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 801673e:	7bfa      	ldrb	r2, [r7, #15]
 8016740:	490d      	ldr	r1, [pc, #52]	; (8016778 <USBPD_PHY_Init+0xcc>)
 8016742:	4613      	mov	r3, r2
 8016744:	011b      	lsls	r3, r3, #4
 8016746:	1a9b      	subs	r3, r3, r2
 8016748:	009b      	lsls	r3, r3, #2
 801674a:	440b      	add	r3, r1
 801674c:	3330      	adds	r3, #48	; 0x30
 801674e:	687a      	ldr	r2, [r7, #4]
 8016750:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8016752:	7bfb      	ldrb	r3, [r7, #15]
 8016754:	4a0a      	ldr	r2, [pc, #40]	; (8016780 <USBPD_PHY_Init+0xd4>)
 8016756:	00db      	lsls	r3, r3, #3
 8016758:	4413      	add	r3, r2
 801675a:	69ba      	ldr	r2, [r7, #24]
 801675c:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 801675e:	7bfb      	ldrb	r3, [r7, #15]
 8016760:	68ba      	ldr	r2, [r7, #8]
 8016762:	6812      	ldr	r2, [r2, #0]
 8016764:	4906      	ldr	r1, [pc, #24]	; (8016780 <USBPD_PHY_Init+0xd4>)
 8016766:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 801676a:	2300      	movs	r3, #0
}
 801676c:	4618      	mov	r0, r3
 801676e:	3714      	adds	r7, #20
 8016770:	46bd      	mov	sp, r7
 8016772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016776:	4770      	bx	lr
 8016778:	20001c44 	.word	0x20001c44
 801677c:	0801692d 	.word	0x0801692d
 8016780:	20001c3c 	.word	0x20001c3c

08016784 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 8016784:	b480      	push	{r7}
 8016786:	b083      	sub	sp, #12
 8016788:	af00      	add	r7, sp, #0
 801678a:	4603      	mov	r3, r0
 801678c:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 801678e:	f240 3389 	movw	r3, #905	; 0x389
}
 8016792:	4618      	mov	r0, r3
 8016794:	370c      	adds	r7, #12
 8016796:	46bd      	mov	sp, r7
 8016798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679c:	4770      	bx	lr

0801679e <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 801679e:	b480      	push	{r7}
 80167a0:	b083      	sub	sp, #12
 80167a2:	af00      	add	r7, sp, #0
 80167a4:	4603      	mov	r3, r0
 80167a6:	71fb      	strb	r3, [r7, #7]
  return 30u;
 80167a8:	231e      	movs	r3, #30
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	370c      	adds	r7, #12
 80167ae:	46bd      	mov	sp, r7
 80167b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b4:	4770      	bx	lr

080167b6 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 80167b6:	b480      	push	{r7}
 80167b8:	b083      	sub	sp, #12
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	4603      	mov	r3, r0
 80167be:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 80167c0:	bf00      	nop
 80167c2:	370c      	adds	r7, #12
 80167c4:	46bd      	mov	sp, r7
 80167c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ca:	4770      	bx	lr

080167cc <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b082      	sub	sp, #8
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	4603      	mov	r3, r0
 80167d4:	460a      	mov	r2, r1
 80167d6:	71fb      	strb	r3, [r7, #7]
 80167d8:	4613      	mov	r3, r2
 80167da:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 80167dc:	79b9      	ldrb	r1, [r7, #6]
 80167de:	79f8      	ldrb	r0, [r7, #7]
 80167e0:	2300      	movs	r3, #0
 80167e2:	2200      	movs	r2, #0
 80167e4:	f000 f805 	bl	80167f2 <USBPD_PHY_SendMessage>
 80167e8:	4603      	mov	r3, r0
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3708      	adds	r7, #8
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}

080167f2 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 80167f2:	b580      	push	{r7, lr}
 80167f4:	b082      	sub	sp, #8
 80167f6:	af00      	add	r7, sp, #0
 80167f8:	603a      	str	r2, [r7, #0]
 80167fa:	461a      	mov	r2, r3
 80167fc:	4603      	mov	r3, r0
 80167fe:	71fb      	strb	r3, [r7, #7]
 8016800:	460b      	mov	r3, r1
 8016802:	71bb      	strb	r3, [r7, #6]
 8016804:	4613      	mov	r3, r2
 8016806:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8016808:	88bb      	ldrh	r3, [r7, #4]
 801680a:	79b9      	ldrb	r1, [r7, #6]
 801680c:	79f8      	ldrb	r0, [r7, #7]
 801680e:	683a      	ldr	r2, [r7, #0]
 8016810:	f000 fb0a 	bl	8016e28 <USBPD_HW_IF_SendBuffer>
 8016814:	4603      	mov	r3, r0
}
 8016816:	4618      	mov	r0, r3
 8016818:	3708      	adds	r7, #8
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}

0801681e <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 801681e:	b580      	push	{r7, lr}
 8016820:	b082      	sub	sp, #8
 8016822:	af00      	add	r7, sp, #0
 8016824:	4603      	mov	r3, r0
 8016826:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8016828:	79fb      	ldrb	r3, [r7, #7]
 801682a:	4618      	mov	r0, r3
 801682c:	f000 fc42 	bl	80170b4 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 8016830:	2300      	movs	r3, #0
}
 8016832:	4618      	mov	r0, r3
 8016834:	3708      	adds	r7, #8
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}

0801683a <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 801683a:	b580      	push	{r7, lr}
 801683c:	b082      	sub	sp, #8
 801683e:	af00      	add	r7, sp, #0
 8016840:	4603      	mov	r3, r0
 8016842:	460a      	mov	r2, r1
 8016844:	71fb      	strb	r3, [r7, #7]
 8016846:	4613      	mov	r3, r2
 8016848:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 801684a:	79bb      	ldrb	r3, [r7, #6]
 801684c:	2b07      	cmp	r3, #7
 801684e:	d103      	bne.n	8016858 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 8016850:	79fb      	ldrb	r3, [r7, #7]
 8016852:	4618      	mov	r0, r3
 8016854:	f000 fab0 	bl	8016db8 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 8016858:	2300      	movs	r3, #0
}
 801685a:	4618      	mov	r0, r3
 801685c:	3708      	adds	r7, #8
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}

08016862 <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8016862:	b580      	push	{r7, lr}
 8016864:	b082      	sub	sp, #8
 8016866:	af00      	add	r7, sp, #0
 8016868:	4603      	mov	r3, r0
 801686a:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 801686c:	79fb      	ldrb	r3, [r7, #7]
 801686e:	4618      	mov	r0, r3
 8016870:	f000 ffbc 	bl	80177ec <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 8016874:	bf00      	nop
 8016876:	3708      	adds	r7, #8
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}

0801687c <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b082      	sub	sp, #8
 8016880:	af00      	add	r7, sp, #0
 8016882:	4603      	mov	r3, r0
 8016884:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 8016886:	79fb      	ldrb	r3, [r7, #7]
 8016888:	4618      	mov	r0, r3
 801688a:	f000 ffc7 	bl	801781c <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 801688e:	bf00      	nop
 8016890:	3708      	adds	r7, #8
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}
	...

08016898 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 8016898:	b480      	push	{r7}
 801689a:	b083      	sub	sp, #12
 801689c:	af00      	add	r7, sp, #0
 801689e:	4603      	mov	r3, r0
 80168a0:	6039      	str	r1, [r7, #0]
 80168a2:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 80168a4:	79fb      	ldrb	r3, [r7, #7]
 80168a6:	4a05      	ldr	r2, [pc, #20]	; (80168bc <USBPD_PHY_SOPSupported+0x24>)
 80168a8:	00db      	lsls	r3, r3, #3
 80168aa:	4413      	add	r3, r2
 80168ac:	683a      	ldr	r2, [r7, #0]
 80168ae:	605a      	str	r2, [r3, #4]
}
 80168b0:	bf00      	nop
 80168b2:	370c      	adds	r7, #12
 80168b4:	46bd      	mov	sp, r7
 80168b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ba:	4770      	bx	lr
 80168bc:	20001c3c 	.word	0x20001c3c

080168c0 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	4603      	mov	r3, r0
 80168c8:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 80168ca:	79fb      	ldrb	r3, [r7, #7]
 80168cc:	4618      	mov	r0, r3
 80168ce:	f000 ffbd 	bl	801784c <USBPD_HW_IF_IsResistor_SinkTxOk>
 80168d2:	4603      	mov	r3, r0
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3708      	adds	r7, #8
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}

080168dc <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	4603      	mov	r3, r0
 80168e4:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 80168e6:	79fb      	ldrb	r3, [r7, #7]
 80168e8:	4618      	mov	r0, r3
 80168ea:	f000 ffef 	bl	80178cc <USBPD_HW_IF_FastRoleSwapSignalling>
}
 80168ee:	bf00      	nop
 80168f0:	3708      	adds	r7, #8
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}

080168f6 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 80168f6:	b580      	push	{r7, lr}
 80168f8:	b082      	sub	sp, #8
 80168fa:	af00      	add	r7, sp, #0
 80168fc:	4603      	mov	r3, r0
 80168fe:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 8016900:	79fb      	ldrb	r3, [r7, #7]
 8016902:	4618      	mov	r0, r3
 8016904:	f000 fd74 	bl	80173f0 <USBPD_HW_IF_EnableRX>
}
 8016908:	bf00      	nop
 801690a:	3708      	adds	r7, #8
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}

08016910 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	4603      	mov	r3, r0
 8016918:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 801691a:	79fb      	ldrb	r3, [r7, #7]
 801691c:	4618      	mov	r0, r3
 801691e:	f000 fd7d 	bl	801741c <USBPD_HW_IF_DisableRX>
}
 8016922:	bf00      	nop
 8016924:	3708      	adds	r7, #8
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
	...

0801692c <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b084      	sub	sp, #16
 8016930:	af00      	add	r7, sp, #0
 8016932:	4603      	mov	r3, r0
 8016934:	6039      	str	r1, [r7, #0]
 8016936:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8016938:	4a28      	ldr	r2, [pc, #160]	; (80169dc <PHY_Rx_Completed+0xb0>)
 801693a:	f107 0308 	add.w	r3, r7, #8
 801693e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016942:	6018      	str	r0, [r3, #0]
 8016944:	3304      	adds	r3, #4
 8016946:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8016948:	f107 0208 	add.w	r2, r7, #8
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	4413      	add	r3, r2
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	73fb      	strb	r3, [r7, #15]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8016954:	7bfb      	ldrb	r3, [r7, #15]
 8016956:	2b04      	cmp	r3, #4
 8016958:	dc02      	bgt.n	8016960 <PHY_Rx_Completed+0x34>
 801695a:	2b00      	cmp	r3, #0
 801695c:	da19      	bge.n	8016992 <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 801695e:	e034      	b.n	80169ca <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 8016960:	2b06      	cmp	r3, #6
 8016962:	d132      	bne.n	80169ca <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8016964:	79fb      	ldrb	r3, [r7, #7]
 8016966:	4a1e      	ldr	r2, [pc, #120]	; (80169e0 <PHY_Rx_Completed+0xb4>)
 8016968:	00db      	lsls	r3, r3, #3
 801696a:	4413      	add	r3, r2
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	f003 031e 	and.w	r3, r3, #30
 8016972:	2b1e      	cmp	r3, #30
 8016974:	d12b      	bne.n	80169ce <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8016976:	79fa      	ldrb	r2, [r7, #7]
 8016978:	491a      	ldr	r1, [pc, #104]	; (80169e4 <PHY_Rx_Completed+0xb8>)
 801697a:	4613      	mov	r3, r2
 801697c:	011b      	lsls	r3, r3, #4
 801697e:	1a9b      	subs	r3, r3, r2
 8016980:	009b      	lsls	r3, r3, #2
 8016982:	440b      	add	r3, r1
 8016984:	331c      	adds	r3, #28
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	79fa      	ldrb	r2, [r7, #7]
 801698a:	2106      	movs	r1, #6
 801698c:	4610      	mov	r0, r2
 801698e:	4798      	blx	r3
      break;
 8016990:	e01d      	b.n	80169ce <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 8016992:	7bfb      	ldrb	r3, [r7, #15]
 8016994:	2201      	movs	r2, #1
 8016996:	fa02 f303 	lsl.w	r3, r2, r3
 801699a:	b2db      	uxtb	r3, r3
 801699c:	4618      	mov	r0, r3
 801699e:	79fb      	ldrb	r3, [r7, #7]
 80169a0:	4a0f      	ldr	r2, [pc, #60]	; (80169e0 <PHY_Rx_Completed+0xb4>)
 80169a2:	00db      	lsls	r3, r3, #3
 80169a4:	4413      	add	r3, r2
 80169a6:	685b      	ldr	r3, [r3, #4]
 80169a8:	7bfa      	ldrb	r2, [r7, #15]
 80169aa:	2101      	movs	r1, #1
 80169ac:	fa01 f202 	lsl.w	r2, r1, r2
 80169b0:	b2d2      	uxtb	r2, r2
 80169b2:	4013      	ands	r3, r2
 80169b4:	4298      	cmp	r0, r3
 80169b6:	d10c      	bne.n	80169d2 <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 80169b8:	79fb      	ldrb	r3, [r7, #7]
 80169ba:	4a09      	ldr	r2, [pc, #36]	; (80169e0 <PHY_Rx_Completed+0xb4>)
 80169bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80169c0:	7bf9      	ldrb	r1, [r7, #15]
 80169c2:	79fa      	ldrb	r2, [r7, #7]
 80169c4:	4610      	mov	r0, r2
 80169c6:	4798      	blx	r3
      break;
 80169c8:	e003      	b.n	80169d2 <PHY_Rx_Completed+0xa6>
      break;
 80169ca:	bf00      	nop
 80169cc:	e002      	b.n	80169d4 <PHY_Rx_Completed+0xa8>
      break;
 80169ce:	bf00      	nop
 80169d0:	e000      	b.n	80169d4 <PHY_Rx_Completed+0xa8>
      break;
 80169d2:	bf00      	nop
  }
}
 80169d4:	bf00      	nop
 80169d6:	3710      	adds	r7, #16
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}
 80169dc:	08020a68 	.word	0x08020a68
 80169e0:	20001c3c 	.word	0x20001c3c
 80169e4:	20001c44 	.word	0x20001c44

080169e8 <LL_AHB1_GRP1_EnableClock>:
{
 80169e8:	b480      	push	{r7}
 80169ea:	b085      	sub	sp, #20
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80169f0:	4b08      	ldr	r3, [pc, #32]	; (8016a14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80169f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80169f4:	4907      	ldr	r1, [pc, #28]	; (8016a14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	4313      	orrs	r3, r2
 80169fa:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80169fc:	4b05      	ldr	r3, [pc, #20]	; (8016a14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80169fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	4013      	ands	r3, r2
 8016a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016a06:	68fb      	ldr	r3, [r7, #12]
}
 8016a08:	bf00      	nop
 8016a0a:	3714      	adds	r7, #20
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a12:	4770      	bx	lr
 8016a14:	40021000 	.word	0x40021000

08016a18 <LL_APB1_GRP1_EnableClock>:
{
 8016a18:	b480      	push	{r7}
 8016a1a:	b085      	sub	sp, #20
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8016a20:	4b08      	ldr	r3, [pc, #32]	; (8016a44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8016a22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016a24:	4907      	ldr	r1, [pc, #28]	; (8016a44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	4313      	orrs	r3, r2
 8016a2a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8016a2c:	4b05      	ldr	r3, [pc, #20]	; (8016a44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8016a2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	4013      	ands	r3, r2
 8016a34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016a36:	68fb      	ldr	r3, [r7, #12]
}
 8016a38:	bf00      	nop
 8016a3a:	3714      	adds	r7, #20
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a42:	4770      	bx	lr
 8016a44:	40021000 	.word	0x40021000

08016a48 <LL_UCPD_Enable>:
{
 8016a48:	b480      	push	{r7}
 8016a4a:	b083      	sub	sp, #12
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	601a      	str	r2, [r3, #0]
}
 8016a5c:	bf00      	nop
 8016a5e:	370c      	adds	r7, #12
 8016a60:	46bd      	mov	sp, r7
 8016a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a66:	4770      	bx	lr

08016a68 <LL_UCPD_Disable>:
{
 8016a68:	b480      	push	{r7}
 8016a6a:	b083      	sub	sp, #12
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	601a      	str	r2, [r3, #0]
}
 8016a7c:	bf00      	nop
 8016a7e:	370c      	adds	r7, #12
 8016a80:	46bd      	mov	sp, r7
 8016a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a86:	4770      	bx	lr

08016a88 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b083      	sub	sp, #12
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	68db      	ldr	r3, [r3, #12]
 8016a94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	60da      	str	r2, [r3, #12]
}
 8016a9c:	bf00      	nop
 8016a9e:	370c      	adds	r7, #12
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa6:	4770      	bx	lr

08016aa8 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b083      	sub	sp, #12
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	68db      	ldr	r3, [r3, #12]
 8016ab4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	60da      	str	r2, [r3, #12]
}
 8016abc:	bf00      	nop
 8016abe:	370c      	adds	r7, #12
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8016ac8:	b480      	push	{r7}
 8016aca:	b083      	sub	sp, #12
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	68db      	ldr	r3, [r3, #12]
 8016ad4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	60da      	str	r2, [r3, #12]
}
 8016adc:	bf00      	nop
 8016ade:	370c      	adds	r7, #12
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae6:	4770      	bx	lr

08016ae8 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8016ae8:	b480      	push	{r7}
 8016aea:	b083      	sub	sp, #12
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	68db      	ldr	r3, [r3, #12]
 8016af4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	60da      	str	r2, [r3, #12]
}
 8016afc:	bf00      	nop
 8016afe:	370c      	adds	r7, #12
 8016b00:	46bd      	mov	sp, r7
 8016b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b06:	4770      	bx	lr

08016b08 <LL_UCPD_SignalFRSTX>:
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b083      	sub	sp, #12
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	68db      	ldr	r3, [r3, #12]
 8016b14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	60da      	str	r2, [r3, #12]
}
 8016b1c:	bf00      	nop
 8016b1e:	370c      	adds	r7, #12
 8016b20:	46bd      	mov	sp, r7
 8016b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b26:	4770      	bx	lr

08016b28 <LL_UCPD_FRSDetectionEnable>:
{
 8016b28:	b480      	push	{r7}
 8016b2a:	b083      	sub	sp, #12
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	68db      	ldr	r3, [r3, #12]
 8016b34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	60da      	str	r2, [r3, #12]
}
 8016b3c:	bf00      	nop
 8016b3e:	370c      	adds	r7, #12
 8016b40:	46bd      	mov	sp, r7
 8016b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b46:	4770      	bx	lr

08016b48 <LL_UCPD_FRSDetectionDisable>:
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b083      	sub	sp, #12
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	68db      	ldr	r3, [r3, #12]
 8016b54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	60da      	str	r2, [r3, #12]
}
 8016b5c:	bf00      	nop
 8016b5e:	370c      	adds	r7, #12
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr

08016b68 <LL_UCPD_SetccEnable>:
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b083      	sub	sp, #12
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
 8016b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	68db      	ldr	r3, [r3, #12]
 8016b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8016b7a:	683b      	ldr	r3, [r7, #0]
 8016b7c:	431a      	orrs	r2, r3
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	60da      	str	r2, [r3, #12]
}
 8016b82:	bf00      	nop
 8016b84:	370c      	adds	r7, #12
 8016b86:	46bd      	mov	sp, r7
 8016b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8c:	4770      	bx	lr

08016b8e <LL_UCPD_SetSNKRole>:
{
 8016b8e:	b480      	push	{r7}
 8016b90:	b083      	sub	sp, #12
 8016b92:	af00      	add	r7, sp, #0
 8016b94:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	68db      	ldr	r3, [r3, #12]
 8016b9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	60da      	str	r2, [r3, #12]
}
 8016ba2:	bf00      	nop
 8016ba4:	370c      	adds	r7, #12
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bac:	4770      	bx	lr

08016bae <LL_UCPD_SetSRCRole>:
{
 8016bae:	b480      	push	{r7}
 8016bb0:	b083      	sub	sp, #12
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	68db      	ldr	r3, [r3, #12]
 8016bba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	60da      	str	r2, [r3, #12]
}
 8016bc2:	bf00      	nop
 8016bc4:	370c      	adds	r7, #12
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bcc:	4770      	bx	lr

08016bce <LL_UCPD_SetRpResistor>:
{
 8016bce:	b480      	push	{r7}
 8016bd0:	b083      	sub	sp, #12
 8016bd2:	af00      	add	r7, sp, #0
 8016bd4:	6078      	str	r0, [r7, #4]
 8016bd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	68db      	ldr	r3, [r3, #12]
 8016bdc:	f423 72c0 	bic.w	r2, r3, #384	; 0x180
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	431a      	orrs	r2, r3
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	60da      	str	r2, [r3, #12]
}
 8016be8:	bf00      	nop
 8016bea:	370c      	adds	r7, #12
 8016bec:	46bd      	mov	sp, r7
 8016bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf2:	4770      	bx	lr

08016bf4 <LL_UCPD_SetCCPin>:
{
 8016bf4:	b480      	push	{r7}
 8016bf6:	b083      	sub	sp, #12
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	68db      	ldr	r3, [r3, #12]
 8016c02:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8016c06:	683b      	ldr	r3, [r7, #0]
 8016c08:	431a      	orrs	r2, r3
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	60da      	str	r2, [r3, #12]
}
 8016c0e:	bf00      	nop
 8016c10:	370c      	adds	r7, #12
 8016c12:	46bd      	mov	sp, r7
 8016c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c18:	4770      	bx	lr

08016c1a <LL_UCPD_RxEnable>:
{
 8016c1a:	b480      	push	{r7}
 8016c1c:	b083      	sub	sp, #12
 8016c1e:	af00      	add	r7, sp, #0
 8016c20:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	68db      	ldr	r3, [r3, #12]
 8016c26:	f043 0220 	orr.w	r2, r3, #32
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	60da      	str	r2, [r3, #12]
}
 8016c2e:	bf00      	nop
 8016c30:	370c      	adds	r7, #12
 8016c32:	46bd      	mov	sp, r7
 8016c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c38:	4770      	bx	lr

08016c3a <LL_UCPD_RxDisable>:
{
 8016c3a:	b480      	push	{r7}
 8016c3c:	b083      	sub	sp, #12
 8016c3e:	af00      	add	r7, sp, #0
 8016c40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	68db      	ldr	r3, [r3, #12]
 8016c46:	f023 0220 	bic.w	r2, r3, #32
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	60da      	str	r2, [r3, #12]
}
 8016c4e:	bf00      	nop
 8016c50:	370c      	adds	r7, #12
 8016c52:	46bd      	mov	sp, r7
 8016c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c58:	4770      	bx	lr

08016c5a <LL_UCPD_SetRxMode>:
{
 8016c5a:	b480      	push	{r7}
 8016c5c:	b083      	sub	sp, #12
 8016c5e:	af00      	add	r7, sp, #0
 8016c60:	6078      	str	r0, [r7, #4]
 8016c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	68db      	ldr	r3, [r3, #12]
 8016c68:	f023 0210 	bic.w	r2, r3, #16
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	431a      	orrs	r2, r3
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	60da      	str	r2, [r3, #12]
}
 8016c74:	bf00      	nop
 8016c76:	370c      	adds	r7, #12
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7e:	4770      	bx	lr

08016c80 <LL_UCPD_SendHardReset>:
{
 8016c80:	b480      	push	{r7}
 8016c82:	b083      	sub	sp, #12
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	68db      	ldr	r3, [r3, #12]
 8016c8c:	f043 0208 	orr.w	r2, r3, #8
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	60da      	str	r2, [r3, #12]
}
 8016c94:	bf00      	nop
 8016c96:	370c      	adds	r7, #12
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9e:	4770      	bx	lr

08016ca0 <LL_UCPD_SendMessage>:
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b083      	sub	sp, #12
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	68db      	ldr	r3, [r3, #12]
 8016cac:	f043 0204 	orr.w	r2, r3, #4
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	60da      	str	r2, [r3, #12]
}
 8016cb4:	bf00      	nop
 8016cb6:	370c      	adds	r7, #12
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbe:	4770      	bx	lr

08016cc0 <LL_UCPD_SetTxMode>:
{
 8016cc0:	b480      	push	{r7}
 8016cc2:	b083      	sub	sp, #12
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
 8016cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	68db      	ldr	r3, [r3, #12]
 8016cce:	f023 0203 	bic.w	r2, r3, #3
 8016cd2:	683b      	ldr	r3, [r7, #0]
 8016cd4:	431a      	orrs	r2, r3
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	60da      	str	r2, [r3, #12]
}
 8016cda:	bf00      	nop
 8016cdc:	370c      	adds	r7, #12
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce4:	4770      	bx	lr

08016ce6 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8016ce6:	b480      	push	{r7}
 8016ce8:	b083      	sub	sp, #12
 8016cea:	af00      	add	r7, sp, #0
 8016cec:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	601a      	str	r2, [r3, #0]
}
 8016cfa:	bf00      	nop
 8016cfc:	370c      	adds	r7, #12
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d04:	4770      	bx	lr

08016d06 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 8016d06:	b480      	push	{r7}
 8016d08:	b083      	sub	sp, #12
 8016d0a:	af00      	add	r7, sp, #0
 8016d0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	601a      	str	r2, [r3, #0]
}
 8016d1a:	bf00      	nop
 8016d1c:	370c      	adds	r7, #12
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d24:	4770      	bx	lr

08016d26 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8016d26:	b480      	push	{r7}
 8016d28:	b083      	sub	sp, #12
 8016d2a:	af00      	add	r7, sp, #0
 8016d2c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	601a      	str	r2, [r3, #0]
}
 8016d3a:	bf00      	nop
 8016d3c:	370c      	adds	r7, #12
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d44:	4770      	bx	lr

08016d46 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8016d46:	b480      	push	{r7}
 8016d48:	b083      	sub	sp, #12
 8016d4a:	af00      	add	r7, sp, #0
 8016d4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	601a      	str	r2, [r3, #0]
}
 8016d5a:	bf00      	nop
 8016d5c:	370c      	adds	r7, #12
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d64:	4770      	bx	lr

08016d66 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8016d66:	b480      	push	{r7}
 8016d68:	b083      	sub	sp, #12
 8016d6a:	af00      	add	r7, sp, #0
 8016d6c:	6078      	str	r0, [r7, #4]
 8016d6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	683a      	ldr	r2, [r7, #0]
 8016d74:	61da      	str	r2, [r3, #28]
}
 8016d76:	bf00      	nop
 8016d78:	370c      	adds	r7, #12
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d80:	4770      	bx	lr

08016d82 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8016d82:	b480      	push	{r7}
 8016d84:	b083      	sub	sp, #12
 8016d86:	af00      	add	r7, sp, #0
 8016d88:	6078      	str	r0, [r7, #4]
 8016d8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	683a      	ldr	r2, [r7, #0]
 8016d90:	621a      	str	r2, [r3, #32]
}
 8016d92:	bf00      	nop
 8016d94:	370c      	adds	r7, #12
 8016d96:	46bd      	mov	sp, r7
 8016d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9c:	4770      	bx	lr

08016d9e <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8016d9e:	b580      	push	{r7, lr}
 8016da0:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8016da2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8016da6:	f7ff fe37 	bl	8016a18 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8016daa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8016dae:	f7ff fe1b 	bl	80169e8 <LL_AHB1_GRP1_EnableClock>
}
 8016db2:	bf00      	nop
 8016db4:	bd80      	pop	{r7, pc}
	...

08016db8 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 8016dc2:	79fa      	ldrb	r2, [r7, #7]
 8016dc4:	4917      	ldr	r1, [pc, #92]	; (8016e24 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8016dc6:	4613      	mov	r3, r2
 8016dc8:	011b      	lsls	r3, r3, #4
 8016dca:	1a9b      	subs	r3, r3, r2
 8016dcc:	009b      	lsls	r3, r3, #2
 8016dce:	440b      	add	r3, r1
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	68db      	ldr	r3, [r3, #12]
 8016dd4:	f023 0307 	bic.w	r3, r3, #7
 8016dd8:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8016dda:	79fa      	ldrb	r2, [r7, #7]
 8016ddc:	4911      	ldr	r1, [pc, #68]	; (8016e24 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8016dde:	4613      	mov	r3, r2
 8016de0:	011b      	lsls	r3, r3, #4
 8016de2:	1a9b      	subs	r3, r3, r2
 8016de4:	009b      	lsls	r3, r3, #2
 8016de6:	440b      	add	r3, r1
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	4618      	mov	r0, r3
 8016dec:	f7ff fe3c 	bl	8016a68 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8016df0:	79fa      	ldrb	r2, [r7, #7]
 8016df2:	490c      	ldr	r1, [pc, #48]	; (8016e24 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8016df4:	4613      	mov	r3, r2
 8016df6:	011b      	lsls	r3, r3, #4
 8016df8:	1a9b      	subs	r3, r3, r2
 8016dfa:	009b      	lsls	r3, r3, #2
 8016dfc:	440b      	add	r3, r1
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	4618      	mov	r0, r3
 8016e02:	f7ff fe21 	bl	8016a48 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 8016e06:	79fa      	ldrb	r2, [r7, #7]
 8016e08:	4906      	ldr	r1, [pc, #24]	; (8016e24 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8016e0a:	4613      	mov	r3, r2
 8016e0c:	011b      	lsls	r3, r3, #4
 8016e0e:	1a9b      	subs	r3, r3, r2
 8016e10:	009b      	lsls	r3, r3, #2
 8016e12:	440b      	add	r3, r1
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	68fa      	ldr	r2, [r7, #12]
 8016e18:	60da      	str	r2, [r3, #12]
}
 8016e1a:	bf00      	nop
 8016e1c:	3710      	adds	r7, #16
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	20001c44 	.word	0x20001c44

08016e28 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b08a      	sub	sp, #40	; 0x28
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60ba      	str	r2, [r7, #8]
 8016e30:	607b      	str	r3, [r7, #4]
 8016e32:	4603      	mov	r3, r0
 8016e34:	73fb      	strb	r3, [r7, #15]
 8016e36:	460b      	mov	r3, r1
 8016e38:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8016e40:	7bbb      	ldrb	r3, [r7, #14]
 8016e42:	2b05      	cmp	r3, #5
 8016e44:	d10b      	bne.n	8016e5e <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8016e46:	7bfa      	ldrb	r2, [r7, #15]
 8016e48:	4996      	ldr	r1, [pc, #600]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016e4a:	4613      	mov	r3, r2
 8016e4c:	011b      	lsls	r3, r3, #4
 8016e4e:	1a9b      	subs	r3, r3, r2
 8016e50:	009b      	lsls	r3, r3, #2
 8016e52:	440b      	add	r3, r1
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	4618      	mov	r0, r3
 8016e58:	f7ff ff12 	bl	8016c80 <LL_UCPD_SendHardReset>
 8016e5c:	e11b      	b.n	8017096 <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8016e62:	61fb      	str	r3, [r7, #28]
  return(result);
 8016e64:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8016e66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8016e68:	b672      	cpsid	i
}
 8016e6a:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8016e6c:	7bfa      	ldrb	r2, [r7, #15]
 8016e6e:	498d      	ldr	r1, [pc, #564]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016e70:	4613      	mov	r3, r2
 8016e72:	011b      	lsls	r3, r3, #4
 8016e74:	1a9b      	subs	r3, r3, r2
 8016e76:	009b      	lsls	r3, r3, #2
 8016e78:	440b      	add	r3, r1
 8016e7a:	3338      	adds	r3, #56	; 0x38
 8016e7c:	781b      	ldrb	r3, [r3, #0]
 8016e7e:	b2db      	uxtb	r3, r3
 8016e80:	2b01      	cmp	r3, #1
 8016e82:	d00d      	beq.n	8016ea0 <USBPD_HW_IF_SendBuffer+0x78>
 8016e84:	7bfa      	ldrb	r2, [r7, #15]
 8016e86:	4987      	ldr	r1, [pc, #540]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016e88:	4613      	mov	r3, r2
 8016e8a:	011b      	lsls	r3, r3, #4
 8016e8c:	1a9b      	subs	r3, r3, r2
 8016e8e:	009b      	lsls	r3, r3, #2
 8016e90:	440b      	add	r3, r1
 8016e92:	3304      	adds	r3, #4
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	f003 0301 	and.w	r3, r3, #1
 8016e9c:	2b01      	cmp	r3, #1
 8016e9e:	d109      	bne.n	8016eb4 <USBPD_HW_IF_SendBuffer+0x8c>
 8016ea0:	6a3b      	ldr	r3, [r7, #32]
 8016ea2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ea4:	69bb      	ldr	r3, [r7, #24]
 8016ea6:	f383 8810 	msr	PRIMASK, r3
}
 8016eaa:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8016eac:	2302      	movs	r3, #2
 8016eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016eb2:	e0f0      	b.n	8017096 <USBPD_HW_IF_SendBuffer+0x26e>
 8016eb4:	6a3b      	ldr	r3, [r7, #32]
 8016eb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	f383 8810 	msr	PRIMASK, r3
}
 8016ebe:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8016ec0:	7bbb      	ldrb	r3, [r7, #14]
 8016ec2:	2b07      	cmp	r3, #7
 8016ec4:	d877      	bhi.n	8016fb6 <USBPD_HW_IF_SendBuffer+0x18e>
 8016ec6:	a201      	add	r2, pc, #4	; (adr r2, 8016ecc <USBPD_HW_IF_SendBuffer+0xa4>)
 8016ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ecc:	08016eed 	.word	0x08016eed
 8016ed0:	08016f1f 	.word	0x08016f1f
 8016ed4:	08016f51 	.word	0x08016f51
 8016ed8:	08016fb7 	.word	0x08016fb7
 8016edc:	08016fb7 	.word	0x08016fb7
 8016ee0:	08016fb7 	.word	0x08016fb7
 8016ee4:	08016f83 	.word	0x08016f83
 8016ee8:	08016f9d 	.word	0x08016f9d
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8016eec:	7bfa      	ldrb	r2, [r7, #15]
 8016eee:	496d      	ldr	r1, [pc, #436]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016ef0:	4613      	mov	r3, r2
 8016ef2:	011b      	lsls	r3, r3, #4
 8016ef4:	1a9b      	subs	r3, r3, r2
 8016ef6:	009b      	lsls	r3, r3, #2
 8016ef8:	440b      	add	r3, r1
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	496a      	ldr	r1, [pc, #424]	; (80170a8 <USBPD_HW_IF_SendBuffer+0x280>)
 8016efe:	4618      	mov	r0, r3
 8016f00:	f7ff ff31 	bl	8016d66 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8016f04:	7bfa      	ldrb	r2, [r7, #15]
 8016f06:	4967      	ldr	r1, [pc, #412]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016f08:	4613      	mov	r3, r2
 8016f0a:	011b      	lsls	r3, r3, #4
 8016f0c:	1a9b      	subs	r3, r3, r2
 8016f0e:	009b      	lsls	r3, r3, #2
 8016f10:	440b      	add	r3, r1
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	2100      	movs	r1, #0
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7ff fed2 	bl	8016cc0 <LL_UCPD_SetTxMode>
          break;
 8016f1c:	e04f      	b.n	8016fbe <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8016f1e:	7bfa      	ldrb	r2, [r7, #15]
 8016f20:	4960      	ldr	r1, [pc, #384]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016f22:	4613      	mov	r3, r2
 8016f24:	011b      	lsls	r3, r3, #4
 8016f26:	1a9b      	subs	r3, r3, r2
 8016f28:	009b      	lsls	r3, r3, #2
 8016f2a:	440b      	add	r3, r1
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	495f      	ldr	r1, [pc, #380]	; (80170ac <USBPD_HW_IF_SendBuffer+0x284>)
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7ff ff18 	bl	8016d66 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8016f36:	7bfa      	ldrb	r2, [r7, #15]
 8016f38:	495a      	ldr	r1, [pc, #360]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016f3a:	4613      	mov	r3, r2
 8016f3c:	011b      	lsls	r3, r3, #4
 8016f3e:	1a9b      	subs	r3, r3, r2
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	440b      	add	r3, r1
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	2100      	movs	r1, #0
 8016f48:	4618      	mov	r0, r3
 8016f4a:	f7ff feb9 	bl	8016cc0 <LL_UCPD_SetTxMode>
          break;
 8016f4e:	e036      	b.n	8016fbe <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8016f50:	7bfa      	ldrb	r2, [r7, #15]
 8016f52:	4954      	ldr	r1, [pc, #336]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016f54:	4613      	mov	r3, r2
 8016f56:	011b      	lsls	r3, r3, #4
 8016f58:	1a9b      	subs	r3, r3, r2
 8016f5a:	009b      	lsls	r3, r3, #2
 8016f5c:	440b      	add	r3, r1
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	4953      	ldr	r1, [pc, #332]	; (80170b0 <USBPD_HW_IF_SendBuffer+0x288>)
 8016f62:	4618      	mov	r0, r3
 8016f64:	f7ff feff 	bl	8016d66 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8016f68:	7bfa      	ldrb	r2, [r7, #15]
 8016f6a:	494e      	ldr	r1, [pc, #312]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016f6c:	4613      	mov	r3, r2
 8016f6e:	011b      	lsls	r3, r3, #4
 8016f70:	1a9b      	subs	r3, r3, r2
 8016f72:	009b      	lsls	r3, r3, #2
 8016f74:	440b      	add	r3, r1
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	2100      	movs	r1, #0
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f7ff fea0 	bl	8016cc0 <LL_UCPD_SetTxMode>
          break;
 8016f80:	e01d      	b.n	8016fbe <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8016f82:	7bfa      	ldrb	r2, [r7, #15]
 8016f84:	4947      	ldr	r1, [pc, #284]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016f86:	4613      	mov	r3, r2
 8016f88:	011b      	lsls	r3, r3, #4
 8016f8a:	1a9b      	subs	r3, r3, r2
 8016f8c:	009b      	lsls	r3, r3, #2
 8016f8e:	440b      	add	r3, r1
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	2101      	movs	r1, #1
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7ff fe93 	bl	8016cc0 <LL_UCPD_SetTxMode>
          break;
 8016f9a:	e010      	b.n	8016fbe <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8016f9c:	7bfa      	ldrb	r2, [r7, #15]
 8016f9e:	4941      	ldr	r1, [pc, #260]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016fa0:	4613      	mov	r3, r2
 8016fa2:	011b      	lsls	r3, r3, #4
 8016fa4:	1a9b      	subs	r3, r3, r2
 8016fa6:	009b      	lsls	r3, r3, #2
 8016fa8:	440b      	add	r3, r1
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	2102      	movs	r1, #2
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7ff fe86 	bl	8016cc0 <LL_UCPD_SetTxMode>
          break;
 8016fb4:	e003      	b.n	8016fbe <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 8016fb6:	2302      	movs	r3, #2
 8016fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8016fbc:	bf00      	nop
      }

      if (USBPD_OK == _status)
 8016fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d167      	bne.n	8017096 <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016fc6:	7bfa      	ldrb	r2, [r7, #15]
 8016fc8:	4936      	ldr	r1, [pc, #216]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016fca:	4613      	mov	r3, r2
 8016fcc:	011b      	lsls	r3, r3, #4
 8016fce:	1a9b      	subs	r3, r3, r2
 8016fd0:	009b      	lsls	r3, r3, #2
 8016fd2:	440b      	add	r3, r1
 8016fd4:	3304      	adds	r3, #4
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	6819      	ldr	r1, [r3, #0]
 8016fda:	7bfa      	ldrb	r2, [r7, #15]
 8016fdc:	4831      	ldr	r0, [pc, #196]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016fde:	4613      	mov	r3, r2
 8016fe0:	011b      	lsls	r3, r3, #4
 8016fe2:	1a9b      	subs	r3, r3, r2
 8016fe4:	009b      	lsls	r3, r3, #2
 8016fe6:	4403      	add	r3, r0
 8016fe8:	3304      	adds	r3, #4
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	f021 0201 	bic.w	r2, r1, #1
 8016ff0:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8016ff2:	bf00      	nop
 8016ff4:	7bfa      	ldrb	r2, [r7, #15]
 8016ff6:	492b      	ldr	r1, [pc, #172]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8016ff8:	4613      	mov	r3, r2
 8016ffa:	011b      	lsls	r3, r3, #4
 8016ffc:	1a9b      	subs	r3, r3, r2
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	440b      	add	r3, r1
 8017002:	3304      	adds	r3, #4
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	f003 0301 	and.w	r3, r3, #1
 801700c:	2b01      	cmp	r3, #1
 801700e:	d0f1      	beq.n	8016ff4 <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8017010:	7bfa      	ldrb	r2, [r7, #15]
 8017012:	4924      	ldr	r1, [pc, #144]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017014:	4613      	mov	r3, r2
 8017016:	011b      	lsls	r3, r3, #4
 8017018:	1a9b      	subs	r3, r3, r2
 801701a:	009b      	lsls	r3, r3, #2
 801701c:	440b      	add	r3, r1
 801701e:	3304      	adds	r3, #4
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	68ba      	ldr	r2, [r7, #8]
 8017024:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8017026:	7bfa      	ldrb	r2, [r7, #15]
 8017028:	491e      	ldr	r1, [pc, #120]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 801702a:	4613      	mov	r3, r2
 801702c:	011b      	lsls	r3, r3, #4
 801702e:	1a9b      	subs	r3, r3, r2
 8017030:	009b      	lsls	r3, r3, #2
 8017032:	440b      	add	r3, r1
 8017034:	3304      	adds	r3, #4
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	687a      	ldr	r2, [r7, #4]
 801703a:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801703c:	7bfa      	ldrb	r2, [r7, #15]
 801703e:	4919      	ldr	r1, [pc, #100]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017040:	4613      	mov	r3, r2
 8017042:	011b      	lsls	r3, r3, #4
 8017044:	1a9b      	subs	r3, r3, r2
 8017046:	009b      	lsls	r3, r3, #2
 8017048:	440b      	add	r3, r1
 801704a:	3304      	adds	r3, #4
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	6819      	ldr	r1, [r3, #0]
 8017050:	7bfa      	ldrb	r2, [r7, #15]
 8017052:	4814      	ldr	r0, [pc, #80]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017054:	4613      	mov	r3, r2
 8017056:	011b      	lsls	r3, r3, #4
 8017058:	1a9b      	subs	r3, r3, r2
 801705a:	009b      	lsls	r3, r3, #2
 801705c:	4403      	add	r3, r0
 801705e:	3304      	adds	r3, #4
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	f041 0201 	orr.w	r2, r1, #1
 8017066:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8017068:	7bfa      	ldrb	r2, [r7, #15]
 801706a:	490e      	ldr	r1, [pc, #56]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 801706c:	4613      	mov	r3, r2
 801706e:	011b      	lsls	r3, r3, #4
 8017070:	1a9b      	subs	r3, r3, r2
 8017072:	009b      	lsls	r3, r3, #2
 8017074:	440b      	add	r3, r1
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	6879      	ldr	r1, [r7, #4]
 801707a:	4618      	mov	r0, r3
 801707c:	f7ff fe81 	bl	8016d82 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8017080:	7bfa      	ldrb	r2, [r7, #15]
 8017082:	4908      	ldr	r1, [pc, #32]	; (80170a4 <USBPD_HW_IF_SendBuffer+0x27c>)
 8017084:	4613      	mov	r3, r2
 8017086:	011b      	lsls	r3, r3, #4
 8017088:	1a9b      	subs	r3, r3, r2
 801708a:	009b      	lsls	r3, r3, #2
 801708c:	440b      	add	r3, r1
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	4618      	mov	r0, r3
 8017092:	f7ff fe05 	bl	8016ca0 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8017096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801709a:	4618      	mov	r0, r3
 801709c:	3728      	adds	r7, #40	; 0x28
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd80      	pop	{r7, pc}
 80170a2:	bf00      	nop
 80170a4:	20001c44 	.word	0x20001c44
 80170a8:	0008e318 	.word	0x0008e318
 80170ac:	00031b18 	.word	0x00031b18
 80170b0:	000360d8 	.word	0x000360d8

080170b4 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b082      	sub	sp, #8
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	4603      	mov	r3, r0
 80170bc:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 80170be:	79fa      	ldrb	r2, [r7, #7]
 80170c0:	490c      	ldr	r1, [pc, #48]	; (80170f4 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 80170c2:	4613      	mov	r3, r2
 80170c4:	011b      	lsls	r3, r3, #4
 80170c6:	1a9b      	subs	r3, r3, r2
 80170c8:	009b      	lsls	r3, r3, #2
 80170ca:	440b      	add	r3, r1
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	2102      	movs	r1, #2
 80170d0:	4618      	mov	r0, r3
 80170d2:	f7ff fdf5 	bl	8016cc0 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80170d6:	79fa      	ldrb	r2, [r7, #7]
 80170d8:	4906      	ldr	r1, [pc, #24]	; (80170f4 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 80170da:	4613      	mov	r3, r2
 80170dc:	011b      	lsls	r3, r3, #4
 80170de:	1a9b      	subs	r3, r3, r2
 80170e0:	009b      	lsls	r3, r3, #2
 80170e2:	440b      	add	r3, r1
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	4618      	mov	r0, r3
 80170e8:	f7ff fdda 	bl	8016ca0 <LL_UCPD_SendMessage>
}
 80170ec:	bf00      	nop
 80170ee:	3708      	adds	r7, #8
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	20001c44 	.word	0x20001c44

080170f8 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	4603      	mov	r3, r0
 8017100:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 8017102:	79fa      	ldrb	r2, [r7, #7]
 8017104:	4946      	ldr	r1, [pc, #280]	; (8017220 <USBPDM1_AssertRp+0x128>)
 8017106:	4613      	mov	r3, r2
 8017108:	011b      	lsls	r3, r3, #4
 801710a:	1a9b      	subs	r3, r3, r2
 801710c:	009b      	lsls	r3, r3, #2
 801710e:	440b      	add	r3, r1
 8017110:	3310      	adds	r3, #16
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	789b      	ldrb	r3, [r3, #2]
 8017116:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801711a:	b2db      	uxtb	r3, r3
 801711c:	2b02      	cmp	r3, #2
 801711e:	d021      	beq.n	8017164 <USBPDM1_AssertRp+0x6c>
 8017120:	2b02      	cmp	r3, #2
 8017122:	dc2d      	bgt.n	8017180 <USBPDM1_AssertRp+0x88>
 8017124:	2b00      	cmp	r3, #0
 8017126:	d002      	beq.n	801712e <USBPDM1_AssertRp+0x36>
 8017128:	2b01      	cmp	r3, #1
 801712a:	d00d      	beq.n	8017148 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 801712c:	e028      	b.n	8017180 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 801712e:	79fa      	ldrb	r2, [r7, #7]
 8017130:	493b      	ldr	r1, [pc, #236]	; (8017220 <USBPDM1_AssertRp+0x128>)
 8017132:	4613      	mov	r3, r2
 8017134:	011b      	lsls	r3, r3, #4
 8017136:	1a9b      	subs	r3, r3, r2
 8017138:	009b      	lsls	r3, r3, #2
 801713a:	440b      	add	r3, r1
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	2180      	movs	r1, #128	; 0x80
 8017140:	4618      	mov	r0, r3
 8017142:	f7ff fd44 	bl	8016bce <LL_UCPD_SetRpResistor>
      break;
 8017146:	e01c      	b.n	8017182 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8017148:	79fa      	ldrb	r2, [r7, #7]
 801714a:	4935      	ldr	r1, [pc, #212]	; (8017220 <USBPDM1_AssertRp+0x128>)
 801714c:	4613      	mov	r3, r2
 801714e:	011b      	lsls	r3, r3, #4
 8017150:	1a9b      	subs	r3, r3, r2
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	440b      	add	r3, r1
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	f44f 7180 	mov.w	r1, #256	; 0x100
 801715c:	4618      	mov	r0, r3
 801715e:	f7ff fd36 	bl	8016bce <LL_UCPD_SetRpResistor>
      break;
 8017162:	e00e      	b.n	8017182 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8017164:	79fa      	ldrb	r2, [r7, #7]
 8017166:	492e      	ldr	r1, [pc, #184]	; (8017220 <USBPDM1_AssertRp+0x128>)
 8017168:	4613      	mov	r3, r2
 801716a:	011b      	lsls	r3, r3, #4
 801716c:	1a9b      	subs	r3, r3, r2
 801716e:	009b      	lsls	r3, r3, #2
 8017170:	440b      	add	r3, r1
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017178:	4618      	mov	r0, r3
 801717a:	f7ff fd28 	bl	8016bce <LL_UCPD_SetRpResistor>
      break;
 801717e:	e000      	b.n	8017182 <USBPDM1_AssertRp+0x8a>
      break;
 8017180:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8017182:	79fa      	ldrb	r2, [r7, #7]
 8017184:	4926      	ldr	r1, [pc, #152]	; (8017220 <USBPDM1_AssertRp+0x128>)
 8017186:	4613      	mov	r3, r2
 8017188:	011b      	lsls	r3, r3, #4
 801718a:	1a9b      	subs	r3, r3, r2
 801718c:	009b      	lsls	r3, r3, #2
 801718e:	440b      	add	r3, r1
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	2100      	movs	r1, #0
 8017194:	4618      	mov	r0, r3
 8017196:	f7ff fce7 	bl	8016b68 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801719a:	79fa      	ldrb	r2, [r7, #7]
 801719c:	4920      	ldr	r1, [pc, #128]	; (8017220 <USBPDM1_AssertRp+0x128>)
 801719e:	4613      	mov	r3, r2
 80171a0:	011b      	lsls	r3, r3, #4
 80171a2:	1a9b      	subs	r3, r3, r2
 80171a4:	009b      	lsls	r3, r3, #2
 80171a6:	440b      	add	r3, r1
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	4618      	mov	r0, r3
 80171ac:	f7ff fcff 	bl	8016bae <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 80171b0:	79fa      	ldrb	r2, [r7, #7]
 80171b2:	491b      	ldr	r1, [pc, #108]	; (8017220 <USBPDM1_AssertRp+0x128>)
 80171b4:	4613      	mov	r3, r2
 80171b6:	011b      	lsls	r3, r3, #4
 80171b8:	1a9b      	subs	r3, r3, r2
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	440b      	add	r3, r1
 80171be:	3334      	adds	r3, #52	; 0x34
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d10d      	bne.n	80171e2 <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80171c6:	79fa      	ldrb	r2, [r7, #7]
 80171c8:	4915      	ldr	r1, [pc, #84]	; (8017220 <USBPDM1_AssertRp+0x128>)
 80171ca:	4613      	mov	r3, r2
 80171cc:	011b      	lsls	r3, r3, #4
 80171ce:	1a9b      	subs	r3, r3, r2
 80171d0:	009b      	lsls	r3, r3, #2
 80171d2:	440b      	add	r3, r1
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80171da:	4618      	mov	r0, r3
 80171dc:	f7ff fcc4 	bl	8016b68 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 80171e0:	e01a      	b.n	8017218 <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80171e2:	79fa      	ldrb	r2, [r7, #7]
 80171e4:	490e      	ldr	r1, [pc, #56]	; (8017220 <USBPDM1_AssertRp+0x128>)
 80171e6:	4613      	mov	r3, r2
 80171e8:	011b      	lsls	r3, r3, #4
 80171ea:	1a9b      	subs	r3, r3, r2
 80171ec:	009b      	lsls	r3, r3, #2
 80171ee:	440b      	add	r3, r1
 80171f0:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80171f2:	79fa      	ldrb	r2, [r7, #7]
 80171f4:	490a      	ldr	r1, [pc, #40]	; (8017220 <USBPDM1_AssertRp+0x128>)
 80171f6:	4613      	mov	r3, r2
 80171f8:	011b      	lsls	r3, r3, #4
 80171fa:	1a9b      	subs	r3, r3, r2
 80171fc:	009b      	lsls	r3, r3, #2
 80171fe:	440b      	add	r3, r1
 8017200:	3334      	adds	r3, #52	; 0x34
 8017202:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8017204:	2b01      	cmp	r3, #1
 8017206:	d102      	bne.n	801720e <USBPDM1_AssertRp+0x116>
 8017208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801720c:	e001      	b.n	8017212 <USBPDM1_AssertRp+0x11a>
 801720e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017212:	4619      	mov	r1, r3
 8017214:	f7ff fca8 	bl	8016b68 <LL_UCPD_SetccEnable>
}
 8017218:	bf00      	nop
 801721a:	3708      	adds	r7, #8
 801721c:	46bd      	mov	sp, r7
 801721e:	bd80      	pop	{r7, pc}
 8017220:	20001c44 	.word	0x20001c44

08017224 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8017224:	b480      	push	{r7}
 8017226:	b083      	sub	sp, #12
 8017228:	af00      	add	r7, sp, #0
 801722a:	4603      	mov	r3, r0
 801722c:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 801722e:	bf00      	nop
 8017230:	370c      	adds	r7, #12
 8017232:	46bd      	mov	sp, r7
 8017234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017238:	4770      	bx	lr
	...

0801723c <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b082      	sub	sp, #8
 8017240:	af00      	add	r7, sp, #0
 8017242:	4603      	mov	r3, r0
 8017244:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8017246:	79fa      	ldrb	r2, [r7, #7]
 8017248:	493e      	ldr	r1, [pc, #248]	; (8017344 <USBPDM1_AssertRd+0x108>)
 801724a:	4613      	mov	r3, r2
 801724c:	011b      	lsls	r3, r3, #4
 801724e:	1a9b      	subs	r3, r3, r2
 8017250:	009b      	lsls	r3, r3, #2
 8017252:	440b      	add	r3, r1
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	4618      	mov	r0, r3
 8017258:	f7ff fc26 	bl	8016aa8 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 801725c:	79fa      	ldrb	r2, [r7, #7]
 801725e:	4939      	ldr	r1, [pc, #228]	; (8017344 <USBPDM1_AssertRd+0x108>)
 8017260:	4613      	mov	r3, r2
 8017262:	011b      	lsls	r3, r3, #4
 8017264:	1a9b      	subs	r3, r3, r2
 8017266:	009b      	lsls	r3, r3, #2
 8017268:	440b      	add	r3, r1
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	4618      	mov	r0, r3
 801726e:	f7ff fc3b 	bl	8016ae8 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8017272:	79fa      	ldrb	r2, [r7, #7]
 8017274:	4933      	ldr	r1, [pc, #204]	; (8017344 <USBPDM1_AssertRd+0x108>)
 8017276:	4613      	mov	r3, r2
 8017278:	011b      	lsls	r3, r3, #4
 801727a:	1a9b      	subs	r3, r3, r2
 801727c:	009b      	lsls	r3, r3, #2
 801727e:	440b      	add	r3, r1
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	2100      	movs	r1, #0
 8017284:	4618      	mov	r0, r3
 8017286:	f7ff fc6f 	bl	8016b68 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 801728a:	79fa      	ldrb	r2, [r7, #7]
 801728c:	492d      	ldr	r1, [pc, #180]	; (8017344 <USBPDM1_AssertRd+0x108>)
 801728e:	4613      	mov	r3, r2
 8017290:	011b      	lsls	r3, r3, #4
 8017292:	1a9b      	subs	r3, r3, r2
 8017294:	009b      	lsls	r3, r3, #2
 8017296:	440b      	add	r3, r1
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	4618      	mov	r0, r3
 801729c:	f7ff fc77 	bl	8016b8e <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 80172a0:	79fa      	ldrb	r2, [r7, #7]
 80172a2:	4928      	ldr	r1, [pc, #160]	; (8017344 <USBPDM1_AssertRd+0x108>)
 80172a4:	4613      	mov	r3, r2
 80172a6:	011b      	lsls	r3, r3, #4
 80172a8:	1a9b      	subs	r3, r3, r2
 80172aa:	009b      	lsls	r3, r3, #2
 80172ac:	440b      	add	r3, r1
 80172ae:	3334      	adds	r3, #52	; 0x34
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d10d      	bne.n	80172d2 <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80172b6:	79fa      	ldrb	r2, [r7, #7]
 80172b8:	4922      	ldr	r1, [pc, #136]	; (8017344 <USBPDM1_AssertRd+0x108>)
 80172ba:	4613      	mov	r3, r2
 80172bc:	011b      	lsls	r3, r3, #4
 80172be:	1a9b      	subs	r3, r3, r2
 80172c0:	009b      	lsls	r3, r3, #2
 80172c2:	440b      	add	r3, r1
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80172ca:	4618      	mov	r0, r3
 80172cc:	f7ff fc4c 	bl	8016b68 <LL_UCPD_SetccEnable>
 80172d0:	e01a      	b.n	8017308 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80172d2:	79fa      	ldrb	r2, [r7, #7]
 80172d4:	491b      	ldr	r1, [pc, #108]	; (8017344 <USBPDM1_AssertRd+0x108>)
 80172d6:	4613      	mov	r3, r2
 80172d8:	011b      	lsls	r3, r3, #4
 80172da:	1a9b      	subs	r3, r3, r2
 80172dc:	009b      	lsls	r3, r3, #2
 80172de:	440b      	add	r3, r1
 80172e0:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80172e2:	79fa      	ldrb	r2, [r7, #7]
 80172e4:	4917      	ldr	r1, [pc, #92]	; (8017344 <USBPDM1_AssertRd+0x108>)
 80172e6:	4613      	mov	r3, r2
 80172e8:	011b      	lsls	r3, r3, #4
 80172ea:	1a9b      	subs	r3, r3, r2
 80172ec:	009b      	lsls	r3, r3, #2
 80172ee:	440b      	add	r3, r1
 80172f0:	3334      	adds	r3, #52	; 0x34
 80172f2:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80172f4:	2b01      	cmp	r3, #1
 80172f6:	d102      	bne.n	80172fe <USBPDM1_AssertRd+0xc2>
 80172f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80172fc:	e001      	b.n	8017302 <USBPDM1_AssertRd+0xc6>
 80172fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017302:	4619      	mov	r1, r3
 8017304:	f7ff fc30 	bl	8016b68 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 8017308:	2001      	movs	r0, #1
 801730a:	f7f1 ffb9 	bl	8009280 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 801730e:	79fa      	ldrb	r2, [r7, #7]
 8017310:	490c      	ldr	r1, [pc, #48]	; (8017344 <USBPDM1_AssertRd+0x108>)
 8017312:	4613      	mov	r3, r2
 8017314:	011b      	lsls	r3, r3, #4
 8017316:	1a9b      	subs	r3, r3, r2
 8017318:	009b      	lsls	r3, r3, #2
 801731a:	440b      	add	r3, r1
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	4618      	mov	r0, r3
 8017320:	f7ff fbb2 	bl	8016a88 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8017324:	79fa      	ldrb	r2, [r7, #7]
 8017326:	4907      	ldr	r1, [pc, #28]	; (8017344 <USBPDM1_AssertRd+0x108>)
 8017328:	4613      	mov	r3, r2
 801732a:	011b      	lsls	r3, r3, #4
 801732c:	1a9b      	subs	r3, r3, r2
 801732e:	009b      	lsls	r3, r3, #2
 8017330:	440b      	add	r3, r1
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	4618      	mov	r0, r3
 8017336:	f7ff fbc7 	bl	8016ac8 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 801733a:	bf00      	nop
 801733c:	3708      	adds	r7, #8
 801733e:	46bd      	mov	sp, r7
 8017340:	bd80      	pop	{r7, pc}
 8017342:	bf00      	nop
 8017344:	20001c44 	.word	0x20001c44

08017348 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8017348:	b480      	push	{r7}
 801734a:	b083      	sub	sp, #12
 801734c:	af00      	add	r7, sp, #0
 801734e:	4603      	mov	r3, r0
 8017350:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8017352:	bf00      	nop
 8017354:	370c      	adds	r7, #12
 8017356:	46bd      	mov	sp, r7
 8017358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735c:	4770      	bx	lr
	...

08017360 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b082      	sub	sp, #8
 8017364:	af00      	add	r7, sp, #0
 8017366:	4603      	mov	r3, r0
 8017368:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801736a:	79fa      	ldrb	r2, [r7, #7]
 801736c:	491f      	ldr	r1, [pc, #124]	; (80173ec <USBPDM1_EnterErrorRecovery+0x8c>)
 801736e:	4613      	mov	r3, r2
 8017370:	011b      	lsls	r3, r3, #4
 8017372:	1a9b      	subs	r3, r3, r2
 8017374:	009b      	lsls	r3, r3, #2
 8017376:	440b      	add	r3, r1
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	4618      	mov	r0, r3
 801737c:	f7ff fc17 	bl	8016bae <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8017380:	79fa      	ldrb	r2, [r7, #7]
 8017382:	491a      	ldr	r1, [pc, #104]	; (80173ec <USBPDM1_EnterErrorRecovery+0x8c>)
 8017384:	4613      	mov	r3, r2
 8017386:	011b      	lsls	r3, r3, #4
 8017388:	1a9b      	subs	r3, r3, r2
 801738a:	009b      	lsls	r3, r3, #2
 801738c:	440b      	add	r3, r1
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	2100      	movs	r1, #0
 8017392:	4618      	mov	r0, r3
 8017394:	f7ff fc1b 	bl	8016bce <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8017398:	79fa      	ldrb	r2, [r7, #7]
 801739a:	4914      	ldr	r1, [pc, #80]	; (80173ec <USBPDM1_EnterErrorRecovery+0x8c>)
 801739c:	4613      	mov	r3, r2
 801739e:	011b      	lsls	r3, r3, #4
 80173a0:	1a9b      	subs	r3, r3, r2
 80173a2:	009b      	lsls	r3, r3, #2
 80173a4:	440b      	add	r3, r1
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	4618      	mov	r0, r3
 80173aa:	f7ff fc46 	bl	8016c3a <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80173ae:	79fa      	ldrb	r2, [r7, #7]
 80173b0:	490e      	ldr	r1, [pc, #56]	; (80173ec <USBPDM1_EnterErrorRecovery+0x8c>)
 80173b2:	4613      	mov	r3, r2
 80173b4:	011b      	lsls	r3, r3, #4
 80173b6:	1a9b      	subs	r3, r3, r2
 80173b8:	009b      	lsls	r3, r3, #2
 80173ba:	440b      	add	r3, r1
 80173bc:	330c      	adds	r3, #12
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	7a1b      	ldrb	r3, [r3, #8]
 80173c2:	f003 0302 	and.w	r3, r3, #2
 80173c6:	b2db      	uxtb	r3, r3
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d00a      	beq.n	80173e2 <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 80173cc:	79fa      	ldrb	r2, [r7, #7]
 80173ce:	4907      	ldr	r1, [pc, #28]	; (80173ec <USBPDM1_EnterErrorRecovery+0x8c>)
 80173d0:	4613      	mov	r3, r2
 80173d2:	011b      	lsls	r3, r3, #4
 80173d4:	1a9b      	subs	r3, r3, r2
 80173d6:	009b      	lsls	r3, r3, #2
 80173d8:	440b      	add	r3, r1
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	4618      	mov	r0, r3
 80173de:	f7ff fbb3 	bl	8016b48 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 80173e2:	bf00      	nop
 80173e4:	3708      	adds	r7, #8
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bd80      	pop	{r7, pc}
 80173ea:	bf00      	nop
 80173ec:	20001c44 	.word	0x20001c44

080173f0 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	4603      	mov	r3, r0
 80173f8:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 80173fa:	79fa      	ldrb	r2, [r7, #7]
 80173fc:	4906      	ldr	r1, [pc, #24]	; (8017418 <USBPD_HW_IF_EnableRX+0x28>)
 80173fe:	4613      	mov	r3, r2
 8017400:	011b      	lsls	r3, r3, #4
 8017402:	1a9b      	subs	r3, r3, r2
 8017404:	009b      	lsls	r3, r3, #2
 8017406:	440b      	add	r3, r1
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	4618      	mov	r0, r3
 801740c:	f7ff fc05 	bl	8016c1a <LL_UCPD_RxEnable>
}
 8017410:	bf00      	nop
 8017412:	3708      	adds	r7, #8
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}
 8017418:	20001c44 	.word	0x20001c44

0801741c <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b082      	sub	sp, #8
 8017420:	af00      	add	r7, sp, #0
 8017422:	4603      	mov	r3, r0
 8017424:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8017426:	79fa      	ldrb	r2, [r7, #7]
 8017428:	4906      	ldr	r1, [pc, #24]	; (8017444 <USBPD_HW_IF_DisableRX+0x28>)
 801742a:	4613      	mov	r3, r2
 801742c:	011b      	lsls	r3, r3, #4
 801742e:	1a9b      	subs	r3, r3, r2
 8017430:	009b      	lsls	r3, r3, #2
 8017432:	440b      	add	r3, r1
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	4618      	mov	r0, r3
 8017438:	f7ff fbff 	bl	8016c3a <LL_UCPD_RxDisable>
}
 801743c:	bf00      	nop
 801743e:	3708      	adds	r7, #8
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}
 8017444:	20001c44 	.word	0x20001c44

08017448 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8017448:	b590      	push	{r4, r7, lr}
 801744a:	b085      	sub	sp, #20
 801744c:	af00      	add	r7, sp, #0
 801744e:	4603      	mov	r3, r0
 8017450:	6039      	str	r1, [r7, #0]
 8017452:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8017454:	f000 fc4e 	bl	8017cf4 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8017458:	79fc      	ldrb	r4, [r7, #7]
 801745a:	79fb      	ldrb	r3, [r7, #7]
 801745c:	4618      	mov	r0, r3
 801745e:	f7fe fe27 	bl	80160b0 <USBPD_HW_Init_DMATxInstance>
 8017462:	4602      	mov	r2, r0
 8017464:	499d      	ldr	r1, [pc, #628]	; (80176dc <HW_SignalAttachement+0x294>)
 8017466:	4623      	mov	r3, r4
 8017468:	011b      	lsls	r3, r3, #4
 801746a:	1b1b      	subs	r3, r3, r4
 801746c:	009b      	lsls	r3, r3, #2
 801746e:	440b      	add	r3, r1
 8017470:	3304      	adds	r3, #4
 8017472:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8017474:	79fc      	ldrb	r4, [r7, #7]
 8017476:	79fb      	ldrb	r3, [r7, #7]
 8017478:	4618      	mov	r0, r3
 801747a:	f7fe fdd9 	bl	8016030 <USBPD_HW_Init_DMARxInstance>
 801747e:	4602      	mov	r2, r0
 8017480:	4996      	ldr	r1, [pc, #600]	; (80176dc <HW_SignalAttachement+0x294>)
 8017482:	4623      	mov	r3, r4
 8017484:	011b      	lsls	r3, r3, #4
 8017486:	1b1b      	subs	r3, r3, r4
 8017488:	009b      	lsls	r3, r3, #2
 801748a:	440b      	add	r3, r1
 801748c:	3308      	adds	r3, #8
 801748e:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8017490:	79fa      	ldrb	r2, [r7, #7]
 8017492:	4992      	ldr	r1, [pc, #584]	; (80176dc <HW_SignalAttachement+0x294>)
 8017494:	4613      	mov	r3, r2
 8017496:	011b      	lsls	r3, r3, #4
 8017498:	1a9b      	subs	r3, r3, r2
 801749a:	009b      	lsls	r3, r3, #2
 801749c:	440b      	add	r3, r1
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	3330      	adds	r3, #48	; 0x30
 80174a2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 80174a4:	79fa      	ldrb	r2, [r7, #7]
 80174a6:	498d      	ldr	r1, [pc, #564]	; (80176dc <HW_SignalAttachement+0x294>)
 80174a8:	4613      	mov	r3, r2
 80174aa:	011b      	lsls	r3, r3, #4
 80174ac:	1a9b      	subs	r3, r3, r2
 80174ae:	009b      	lsls	r3, r3, #2
 80174b0:	440b      	add	r3, r1
 80174b2:	3308      	adds	r3, #8
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	68fa      	ldr	r2, [r7, #12]
 80174b8:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80174ba:	79fa      	ldrb	r2, [r7, #7]
 80174bc:	4987      	ldr	r1, [pc, #540]	; (80176dc <HW_SignalAttachement+0x294>)
 80174be:	4613      	mov	r3, r2
 80174c0:	011b      	lsls	r3, r3, #4
 80174c2:	1a9b      	subs	r3, r3, r2
 80174c4:	009b      	lsls	r3, r3, #2
 80174c6:	440b      	add	r3, r1
 80174c8:	3330      	adds	r3, #48	; 0x30
 80174ca:	6818      	ldr	r0, [r3, #0]
 80174cc:	79fa      	ldrb	r2, [r7, #7]
 80174ce:	4983      	ldr	r1, [pc, #524]	; (80176dc <HW_SignalAttachement+0x294>)
 80174d0:	4613      	mov	r3, r2
 80174d2:	011b      	lsls	r3, r3, #4
 80174d4:	1a9b      	subs	r3, r3, r2
 80174d6:	009b      	lsls	r3, r3, #2
 80174d8:	440b      	add	r3, r1
 80174da:	3308      	adds	r3, #8
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	4602      	mov	r2, r0
 80174e0:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 80174e2:	79fa      	ldrb	r2, [r7, #7]
 80174e4:	497d      	ldr	r1, [pc, #500]	; (80176dc <HW_SignalAttachement+0x294>)
 80174e6:	4613      	mov	r3, r2
 80174e8:	011b      	lsls	r3, r3, #4
 80174ea:	1a9b      	subs	r3, r3, r2
 80174ec:	009b      	lsls	r3, r3, #2
 80174ee:	440b      	add	r3, r1
 80174f0:	3308      	adds	r3, #8
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	f44f 7284 	mov.w	r2, #264	; 0x108
 80174f8:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 80174fa:	79fa      	ldrb	r2, [r7, #7]
 80174fc:	4977      	ldr	r1, [pc, #476]	; (80176dc <HW_SignalAttachement+0x294>)
 80174fe:	4613      	mov	r3, r2
 8017500:	011b      	lsls	r3, r3, #4
 8017502:	1a9b      	subs	r3, r3, r2
 8017504:	009b      	lsls	r3, r3, #2
 8017506:	440b      	add	r3, r1
 8017508:	3308      	adds	r3, #8
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	6819      	ldr	r1, [r3, #0]
 801750e:	79fa      	ldrb	r2, [r7, #7]
 8017510:	4872      	ldr	r0, [pc, #456]	; (80176dc <HW_SignalAttachement+0x294>)
 8017512:	4613      	mov	r3, r2
 8017514:	011b      	lsls	r3, r3, #4
 8017516:	1a9b      	subs	r3, r3, r2
 8017518:	009b      	lsls	r3, r3, #2
 801751a:	4403      	add	r3, r0
 801751c:	3308      	adds	r3, #8
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	f041 0201 	orr.w	r2, r1, #1
 8017524:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8017526:	79fa      	ldrb	r2, [r7, #7]
 8017528:	496c      	ldr	r1, [pc, #432]	; (80176dc <HW_SignalAttachement+0x294>)
 801752a:	4613      	mov	r3, r2
 801752c:	011b      	lsls	r3, r3, #4
 801752e:	1a9b      	subs	r3, r3, r2
 8017530:	009b      	lsls	r3, r3, #2
 8017532:	440b      	add	r3, r1
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	3324      	adds	r3, #36	; 0x24
 8017538:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 801753a:	79fa      	ldrb	r2, [r7, #7]
 801753c:	4967      	ldr	r1, [pc, #412]	; (80176dc <HW_SignalAttachement+0x294>)
 801753e:	4613      	mov	r3, r2
 8017540:	011b      	lsls	r3, r3, #4
 8017542:	1a9b      	subs	r3, r3, r2
 8017544:	009b      	lsls	r3, r3, #2
 8017546:	440b      	add	r3, r1
 8017548:	3304      	adds	r3, #4
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	68fa      	ldr	r2, [r7, #12]
 801754e:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8017550:	79fa      	ldrb	r2, [r7, #7]
 8017552:	4962      	ldr	r1, [pc, #392]	; (80176dc <HW_SignalAttachement+0x294>)
 8017554:	4613      	mov	r3, r2
 8017556:	011b      	lsls	r3, r3, #4
 8017558:	1a9b      	subs	r3, r3, r2
 801755a:	009b      	lsls	r3, r3, #2
 801755c:	440b      	add	r3, r1
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	6919      	ldr	r1, [r3, #16]
 8017562:	79fa      	ldrb	r2, [r7, #7]
 8017564:	485d      	ldr	r0, [pc, #372]	; (80176dc <HW_SignalAttachement+0x294>)
 8017566:	4613      	mov	r3, r2
 8017568:	011b      	lsls	r3, r3, #4
 801756a:	1a9b      	subs	r3, r3, r2
 801756c:	009b      	lsls	r3, r3, #2
 801756e:	4403      	add	r3, r0
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	f441 53f3 	orr.w	r3, r1, #7776	; 0x1e60
 8017576:	f043 031e 	orr.w	r3, r3, #30
 801757a:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 801757c:	79fa      	ldrb	r2, [r7, #7]
 801757e:	4957      	ldr	r1, [pc, #348]	; (80176dc <HW_SignalAttachement+0x294>)
 8017580:	4613      	mov	r3, r2
 8017582:	011b      	lsls	r3, r3, #4
 8017584:	1a9b      	subs	r3, r3, r2
 8017586:	009b      	lsls	r3, r3, #2
 8017588:	440b      	add	r3, r1
 801758a:	3334      	adds	r3, #52	; 0x34
 801758c:	683a      	ldr	r2, [r7, #0]
 801758e:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8017590:	79fa      	ldrb	r2, [r7, #7]
 8017592:	4952      	ldr	r1, [pc, #328]	; (80176dc <HW_SignalAttachement+0x294>)
 8017594:	4613      	mov	r3, r2
 8017596:	011b      	lsls	r3, r3, #4
 8017598:	1a9b      	subs	r3, r3, r2
 801759a:	009b      	lsls	r3, r3, #2
 801759c:	440b      	add	r3, r1
 801759e:	6818      	ldr	r0, [r3, #0]
 80175a0:	79fa      	ldrb	r2, [r7, #7]
 80175a2:	494e      	ldr	r1, [pc, #312]	; (80176dc <HW_SignalAttachement+0x294>)
 80175a4:	4613      	mov	r3, r2
 80175a6:	011b      	lsls	r3, r3, #4
 80175a8:	1a9b      	subs	r3, r3, r2
 80175aa:	009b      	lsls	r3, r3, #2
 80175ac:	440b      	add	r3, r1
 80175ae:	3334      	adds	r3, #52	; 0x34
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	2b01      	cmp	r3, #1
 80175b4:	d101      	bne.n	80175ba <HW_SignalAttachement+0x172>
 80175b6:	2300      	movs	r3, #0
 80175b8:	e000      	b.n	80175bc <HW_SignalAttachement+0x174>
 80175ba:	2340      	movs	r3, #64	; 0x40
 80175bc:	4619      	mov	r1, r3
 80175be:	f7ff fb19 	bl	8016bf4 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80175c2:	79fa      	ldrb	r2, [r7, #7]
 80175c4:	4945      	ldr	r1, [pc, #276]	; (80176dc <HW_SignalAttachement+0x294>)
 80175c6:	4613      	mov	r3, r2
 80175c8:	011b      	lsls	r3, r3, #4
 80175ca:	1a9b      	subs	r3, r3, r2
 80175cc:	009b      	lsls	r3, r3, #2
 80175ce:	440b      	add	r3, r1
 80175d0:	330c      	adds	r3, #12
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	7a1b      	ldrb	r3, [r3, #8]
 80175d6:	f003 0302 	and.w	r3, r3, #2
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d031      	beq.n	8017644 <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 80175e0:	79fa      	ldrb	r2, [r7, #7]
 80175e2:	493e      	ldr	r1, [pc, #248]	; (80176dc <HW_SignalAttachement+0x294>)
 80175e4:	4613      	mov	r3, r2
 80175e6:	011b      	lsls	r3, r3, #4
 80175e8:	1a9b      	subs	r3, r3, r2
 80175ea:	009b      	lsls	r3, r3, #2
 80175ec:	440b      	add	r3, r1
 80175ee:	3334      	adds	r3, #52	; 0x34
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	2b01      	cmp	r3, #1
 80175f4:	d101      	bne.n	80175fa <HW_SignalAttachement+0x1b2>
 80175f6:	2201      	movs	r2, #1
 80175f8:	e000      	b.n	80175fc <HW_SignalAttachement+0x1b4>
 80175fa:	2202      	movs	r2, #2
 80175fc:	79fb      	ldrb	r3, [r7, #7]
 80175fe:	4611      	mov	r1, r2
 8017600:	4618      	mov	r0, r3
 8017602:	f7fe fd94 	bl	801612e <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8017606:	79fa      	ldrb	r2, [r7, #7]
 8017608:	4934      	ldr	r1, [pc, #208]	; (80176dc <HW_SignalAttachement+0x294>)
 801760a:	4613      	mov	r3, r2
 801760c:	011b      	lsls	r3, r3, #4
 801760e:	1a9b      	subs	r3, r3, r2
 8017610:	009b      	lsls	r3, r3, #2
 8017612:	440b      	add	r3, r1
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	4618      	mov	r0, r3
 8017618:	f7ff fa86 	bl	8016b28 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 801761c:	79fa      	ldrb	r2, [r7, #7]
 801761e:	492f      	ldr	r1, [pc, #188]	; (80176dc <HW_SignalAttachement+0x294>)
 8017620:	4613      	mov	r3, r2
 8017622:	011b      	lsls	r3, r3, #4
 8017624:	1a9b      	subs	r3, r3, r2
 8017626:	009b      	lsls	r3, r3, #2
 8017628:	440b      	add	r3, r1
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	6919      	ldr	r1, [r3, #16]
 801762e:	79fa      	ldrb	r2, [r7, #7]
 8017630:	482a      	ldr	r0, [pc, #168]	; (80176dc <HW_SignalAttachement+0x294>)
 8017632:	4613      	mov	r3, r2
 8017634:	011b      	lsls	r3, r3, #4
 8017636:	1a9b      	subs	r3, r3, r2
 8017638:	009b      	lsls	r3, r3, #2
 801763a:	4403      	add	r3, r0
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	f441 1280 	orr.w	r2, r1, #1048576	; 0x100000
 8017642:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8017644:	79fa      	ldrb	r2, [r7, #7]
 8017646:	4925      	ldr	r1, [pc, #148]	; (80176dc <HW_SignalAttachement+0x294>)
 8017648:	4613      	mov	r3, r2
 801764a:	011b      	lsls	r3, r3, #4
 801764c:	1a9b      	subs	r3, r3, r2
 801764e:	009b      	lsls	r3, r3, #2
 8017650:	440b      	add	r3, r1
 8017652:	3334      	adds	r3, #52	; 0x34
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	2b01      	cmp	r3, #1
 8017658:	d10d      	bne.n	8017676 <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 801765a:	79fa      	ldrb	r2, [r7, #7]
 801765c:	491f      	ldr	r1, [pc, #124]	; (80176dc <HW_SignalAttachement+0x294>)
 801765e:	4613      	mov	r3, r2
 8017660:	011b      	lsls	r3, r3, #4
 8017662:	1a9b      	subs	r3, r3, r2
 8017664:	009b      	lsls	r3, r3, #2
 8017666:	440b      	add	r3, r1
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801766e:	4618      	mov	r0, r3
 8017670:	f7ff fa7a 	bl	8016b68 <LL_UCPD_SetccEnable>
 8017674:	e00c      	b.n	8017690 <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8017676:	79fa      	ldrb	r2, [r7, #7]
 8017678:	4918      	ldr	r1, [pc, #96]	; (80176dc <HW_SignalAttachement+0x294>)
 801767a:	4613      	mov	r3, r2
 801767c:	011b      	lsls	r3, r3, #4
 801767e:	1a9b      	subs	r3, r3, r2
 8017680:	009b      	lsls	r3, r3, #2
 8017682:	440b      	add	r3, r1
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801768a:	4618      	mov	r0, r3
 801768c:	f7ff fa6c 	bl	8016b68 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8017690:	79fa      	ldrb	r2, [r7, #7]
 8017692:	4912      	ldr	r1, [pc, #72]	; (80176dc <HW_SignalAttachement+0x294>)
 8017694:	4613      	mov	r3, r2
 8017696:	011b      	lsls	r3, r3, #4
 8017698:	1a9b      	subs	r3, r3, r2
 801769a:	009b      	lsls	r3, r3, #2
 801769c:	440b      	add	r3, r1
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	2100      	movs	r1, #0
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7ff fad9 	bl	8016c5a <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 80176a8:	79fa      	ldrb	r2, [r7, #7]
 80176aa:	490c      	ldr	r1, [pc, #48]	; (80176dc <HW_SignalAttachement+0x294>)
 80176ac:	4613      	mov	r3, r2
 80176ae:	011b      	lsls	r3, r3, #4
 80176b0:	1a9b      	subs	r3, r3, r2
 80176b2:	009b      	lsls	r3, r3, #2
 80176b4:	440b      	add	r3, r1
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	4618      	mov	r0, r3
 80176ba:	f7ff fb14 	bl	8016ce6 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 80176be:	79fa      	ldrb	r2, [r7, #7]
 80176c0:	4906      	ldr	r1, [pc, #24]	; (80176dc <HW_SignalAttachement+0x294>)
 80176c2:	4613      	mov	r3, r2
 80176c4:	011b      	lsls	r3, r3, #4
 80176c6:	1a9b      	subs	r3, r3, r2
 80176c8:	009b      	lsls	r3, r3, #2
 80176ca:	440b      	add	r3, r1
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	4618      	mov	r0, r3
 80176d0:	f7ff fb29 	bl	8016d26 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80176d4:	bf00      	nop
 80176d6:	3714      	adds	r7, #20
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd90      	pop	{r4, r7, pc}
 80176dc:	20001c44 	.word	0x20001c44

080176e0 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	4603      	mov	r3, r0
 80176e8:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 80176ea:	79fa      	ldrb	r2, [r7, #7]
 80176ec:	493e      	ldr	r1, [pc, #248]	; (80177e8 <HW_SignalDetachment+0x108>)
 80176ee:	4613      	mov	r3, r2
 80176f0:	011b      	lsls	r3, r3, #4
 80176f2:	1a9b      	subs	r3, r3, r2
 80176f4:	009b      	lsls	r3, r3, #2
 80176f6:	440b      	add	r3, r1
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7ff fb03 	bl	8016d06 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 8017700:	79fa      	ldrb	r2, [r7, #7]
 8017702:	4939      	ldr	r1, [pc, #228]	; (80177e8 <HW_SignalDetachment+0x108>)
 8017704:	4613      	mov	r3, r2
 8017706:	011b      	lsls	r3, r3, #4
 8017708:	1a9b      	subs	r3, r3, r2
 801770a:	009b      	lsls	r3, r3, #2
 801770c:	440b      	add	r3, r1
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4618      	mov	r0, r3
 8017712:	f7ff fb18 	bl	8016d46 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8017716:	79fa      	ldrb	r2, [r7, #7]
 8017718:	4933      	ldr	r1, [pc, #204]	; (80177e8 <HW_SignalDetachment+0x108>)
 801771a:	4613      	mov	r3, r2
 801771c:	011b      	lsls	r3, r3, #4
 801771e:	1a9b      	subs	r3, r3, r2
 8017720:	009b      	lsls	r3, r3, #2
 8017722:	440b      	add	r3, r1
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	4618      	mov	r0, r3
 8017728:	f7ff fa87 	bl	8016c3a <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 801772c:	79fa      	ldrb	r2, [r7, #7]
 801772e:	492e      	ldr	r1, [pc, #184]	; (80177e8 <HW_SignalDetachment+0x108>)
 8017730:	4613      	mov	r3, r2
 8017732:	011b      	lsls	r3, r3, #4
 8017734:	1a9b      	subs	r3, r3, r2
 8017736:	009b      	lsls	r3, r3, #2
 8017738:	440b      	add	r3, r1
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017740:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8017742:	79fb      	ldrb	r3, [r7, #7]
 8017744:	4618      	mov	r0, r3
 8017746:	f7fe fce7 	bl	8016118 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 801774a:	79fb      	ldrb	r3, [r7, #7]
 801774c:	4618      	mov	r0, r3
 801774e:	f7fe fca3 	bl	8016098 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8017752:	79fa      	ldrb	r2, [r7, #7]
 8017754:	4924      	ldr	r1, [pc, #144]	; (80177e8 <HW_SignalDetachment+0x108>)
 8017756:	4613      	mov	r3, r2
 8017758:	011b      	lsls	r3, r3, #4
 801775a:	1a9b      	subs	r3, r3, r2
 801775c:	009b      	lsls	r3, r3, #2
 801775e:	440b      	add	r3, r1
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8017766:	4618      	mov	r0, r3
 8017768:	f7ff f9fe 	bl	8016b68 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 801776c:	79fa      	ldrb	r2, [r7, #7]
 801776e:	491e      	ldr	r1, [pc, #120]	; (80177e8 <HW_SignalDetachment+0x108>)
 8017770:	4613      	mov	r3, r2
 8017772:	011b      	lsls	r3, r3, #4
 8017774:	1a9b      	subs	r3, r3, r2
 8017776:	009b      	lsls	r3, r3, #2
 8017778:	440b      	add	r3, r1
 801777a:	3310      	adds	r3, #16
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	f003 0304 	and.w	r3, r3, #4
 8017784:	b2db      	uxtb	r3, r3
 8017786:	2b00      	cmp	r3, #0
 8017788:	d103      	bne.n	8017792 <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801778a:	79fb      	ldrb	r3, [r7, #7]
 801778c:	4618      	mov	r0, r3
 801778e:	f007 f899 	bl	801e8c4 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8017792:	79fa      	ldrb	r2, [r7, #7]
 8017794:	4914      	ldr	r1, [pc, #80]	; (80177e8 <HW_SignalDetachment+0x108>)
 8017796:	4613      	mov	r3, r2
 8017798:	011b      	lsls	r3, r3, #4
 801779a:	1a9b      	subs	r3, r3, r2
 801779c:	009b      	lsls	r3, r3, #2
 801779e:	440b      	add	r3, r1
 80177a0:	330c      	adds	r3, #12
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	7a1b      	ldrb	r3, [r3, #8]
 80177a6:	f003 0302 	and.w	r3, r3, #2
 80177aa:	b2db      	uxtb	r3, r3
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d00a      	beq.n	80177c6 <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 80177b0:	79fa      	ldrb	r2, [r7, #7]
 80177b2:	490d      	ldr	r1, [pc, #52]	; (80177e8 <HW_SignalDetachment+0x108>)
 80177b4:	4613      	mov	r3, r2
 80177b6:	011b      	lsls	r3, r3, #4
 80177b8:	1a9b      	subs	r3, r3, r2
 80177ba:	009b      	lsls	r3, r3, #2
 80177bc:	440b      	add	r3, r1
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7ff f9c1 	bl	8016b48 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80177c6:	79fa      	ldrb	r2, [r7, #7]
 80177c8:	4907      	ldr	r1, [pc, #28]	; (80177e8 <HW_SignalDetachment+0x108>)
 80177ca:	4613      	mov	r3, r2
 80177cc:	011b      	lsls	r3, r3, #4
 80177ce:	1a9b      	subs	r3, r3, r2
 80177d0:	009b      	lsls	r3, r3, #2
 80177d2:	440b      	add	r3, r1
 80177d4:	3334      	adds	r3, #52	; 0x34
 80177d6:	2200      	movs	r2, #0
 80177d8:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80177da:	f000 fb13 	bl	8017e04 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80177de:	bf00      	nop
 80177e0:	3708      	adds	r7, #8
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}
 80177e6:	bf00      	nop
 80177e8:	20001c44 	.word	0x20001c44

080177ec <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b082      	sub	sp, #8
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	4603      	mov	r3, r0
 80177f4:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80177f6:	79fa      	ldrb	r2, [r7, #7]
 80177f8:	4907      	ldr	r1, [pc, #28]	; (8017818 <USBPD_HW_IF_SetResistor_SinkTxNG+0x2c>)
 80177fa:	4613      	mov	r3, r2
 80177fc:	011b      	lsls	r3, r3, #4
 80177fe:	1a9b      	subs	r3, r3, r2
 8017800:	009b      	lsls	r3, r3, #2
 8017802:	440b      	add	r3, r1
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	f44f 7180 	mov.w	r1, #256	; 0x100
 801780a:	4618      	mov	r0, r3
 801780c:	f7ff f9df 	bl	8016bce <LL_UCPD_SetRpResistor>
}
 8017810:	bf00      	nop
 8017812:	3708      	adds	r7, #8
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}
 8017818:	20001c44 	.word	0x20001c44

0801781c <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b082      	sub	sp, #8
 8017820:	af00      	add	r7, sp, #0
 8017822:	4603      	mov	r3, r0
 8017824:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8017826:	79fa      	ldrb	r2, [r7, #7]
 8017828:	4907      	ldr	r1, [pc, #28]	; (8017848 <USBPD_HW_IF_SetResistor_SinkTxOK+0x2c>)
 801782a:	4613      	mov	r3, r2
 801782c:	011b      	lsls	r3, r3, #4
 801782e:	1a9b      	subs	r3, r3, r2
 8017830:	009b      	lsls	r3, r3, #2
 8017832:	440b      	add	r3, r1
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801783a:	4618      	mov	r0, r3
 801783c:	f7ff f9c7 	bl	8016bce <LL_UCPD_SetRpResistor>
}
 8017840:	bf00      	nop
 8017842:	3708      	adds	r7, #8
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}
 8017848:	20001c44 	.word	0x20001c44

0801784c <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 801784c:	b480      	push	{r7}
 801784e:	b083      	sub	sp, #12
 8017850:	af00      	add	r7, sp, #0
 8017852:	4603      	mov	r3, r0
 8017854:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8017856:	79fa      	ldrb	r2, [r7, #7]
 8017858:	491b      	ldr	r1, [pc, #108]	; (80178c8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 801785a:	4613      	mov	r3, r2
 801785c:	011b      	lsls	r3, r3, #4
 801785e:	1a9b      	subs	r3, r3, r2
 8017860:	009b      	lsls	r3, r3, #2
 8017862:	440b      	add	r3, r1
 8017864:	3334      	adds	r3, #52	; 0x34
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	2b01      	cmp	r3, #1
 801786a:	d002      	beq.n	8017872 <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 801786c:	2b02      	cmp	r3, #2
 801786e:	d010      	beq.n	8017892 <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 8017870:	e022      	b.n	80178b8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 8017872:	79fa      	ldrb	r2, [r7, #7]
 8017874:	4914      	ldr	r1, [pc, #80]	; (80178c8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8017876:	4613      	mov	r3, r2
 8017878:	011b      	lsls	r3, r3, #4
 801787a:	1a9b      	subs	r3, r3, r2
 801787c:	009b      	lsls	r3, r3, #2
 801787e:	440b      	add	r3, r1
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	695b      	ldr	r3, [r3, #20]
 8017884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017888:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801788c:	d111      	bne.n	80178b2 <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 801788e:	2301      	movs	r3, #1
 8017890:	e013      	b.n	80178ba <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8017892:	79fa      	ldrb	r2, [r7, #7]
 8017894:	490c      	ldr	r1, [pc, #48]	; (80178c8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8017896:	4613      	mov	r3, r2
 8017898:	011b      	lsls	r3, r3, #4
 801789a:	1a9b      	subs	r3, r3, r2
 801789c:	009b      	lsls	r3, r3, #2
 801789e:	440b      	add	r3, r1
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	695b      	ldr	r3, [r3, #20]
 80178a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80178a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80178ac:	d103      	bne.n	80178b6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 80178ae:	2301      	movs	r3, #1
 80178b0:	e003      	b.n	80178ba <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 80178b2:	bf00      	nop
 80178b4:	e000      	b.n	80178b8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 80178b6:	bf00      	nop
  }

  return USBPD_FALSE;
 80178b8:	2300      	movs	r3, #0
}
 80178ba:	4618      	mov	r0, r3
 80178bc:	370c      	adds	r7, #12
 80178be:	46bd      	mov	sp, r7
 80178c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c4:	4770      	bx	lr
 80178c6:	bf00      	nop
 80178c8:	20001c44 	.word	0x20001c44

080178cc <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b082      	sub	sp, #8
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	4603      	mov	r3, r0
 80178d4:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 80178d6:	79fa      	ldrb	r2, [r7, #7]
 80178d8:	4906      	ldr	r1, [pc, #24]	; (80178f4 <USBPD_HW_IF_FastRoleSwapSignalling+0x28>)
 80178da:	4613      	mov	r3, r2
 80178dc:	011b      	lsls	r3, r3, #4
 80178de:	1a9b      	subs	r3, r3, r2
 80178e0:	009b      	lsls	r3, r3, #2
 80178e2:	440b      	add	r3, r1
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	4618      	mov	r0, r3
 80178e8:	f7ff f90e 	bl	8016b08 <LL_UCPD_SignalFRSTX>
}
 80178ec:	bf00      	nop
 80178ee:	3708      	adds	r7, #8
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	20001c44 	.word	0x20001c44

080178f8 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b084      	sub	sp, #16
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	4603      	mov	r3, r0
 8017900:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8017902:	79fb      	ldrb	r3, [r7, #7]
 8017904:	f107 020c 	add.w	r2, r7, #12
 8017908:	4611      	mov	r1, r2
 801790a:	4618      	mov	r0, r3
 801790c:	f006 ffee 	bl	801e8ec <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	b29b      	uxth	r3, r3
}
 8017914:	4618      	mov	r0, r3
 8017916:	3710      	adds	r7, #16
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}

0801791c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 801791c:	b480      	push	{r7}
 801791e:	b085      	sub	sp, #20
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8017924:	4b08      	ldr	r3, [pc, #32]	; (8017948 <LL_APB2_GRP1_EnableClock+0x2c>)
 8017926:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017928:	4907      	ldr	r1, [pc, #28]	; (8017948 <LL_APB2_GRP1_EnableClock+0x2c>)
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	4313      	orrs	r3, r2
 801792e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8017930:	4b05      	ldr	r3, [pc, #20]	; (8017948 <LL_APB2_GRP1_EnableClock+0x2c>)
 8017932:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	4013      	ands	r3, r2
 8017938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801793a:	68fb      	ldr	r3, [r7, #12]
}
 801793c:	bf00      	nop
 801793e:	3714      	adds	r7, #20
 8017940:	46bd      	mov	sp, r7
 8017942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017946:	4770      	bx	lr
 8017948:	40021000 	.word	0x40021000

0801794c <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 801794c:	b480      	push	{r7}
 801794e:	b083      	sub	sp, #12
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8017954:	4b06      	ldr	r3, [pc, #24]	; (8017970 <LL_APB2_GRP1_DisableClock+0x24>)
 8017956:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	43db      	mvns	r3, r3
 801795c:	4904      	ldr	r1, [pc, #16]	; (8017970 <LL_APB2_GRP1_DisableClock+0x24>)
 801795e:	4013      	ands	r3, r2
 8017960:	660b      	str	r3, [r1, #96]	; 0x60
}
 8017962:	bf00      	nop
 8017964:	370c      	adds	r7, #12
 8017966:	46bd      	mov	sp, r7
 8017968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796c:	4770      	bx	lr
 801796e:	bf00      	nop
 8017970:	40021000 	.word	0x40021000

08017974 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8017974:	b480      	push	{r7}
 8017976:	b083      	sub	sp, #12
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	f043 0201 	orr.w	r2, r3, #1
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	601a      	str	r2, [r3, #0]
}
 8017988:	bf00      	nop
 801798a:	370c      	adds	r7, #12
 801798c:	46bd      	mov	sp, r7
 801798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017992:	4770      	bx	lr

08017994 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8017994:	b480      	push	{r7}
 8017996:	b083      	sub	sp, #12
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
 801799c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	431a      	orrs	r2, r3
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	601a      	str	r2, [r3, #0]
}
 80179ae:	bf00      	nop
 80179b0:	370c      	adds	r7, #12
 80179b2:	46bd      	mov	sp, r7
 80179b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b8:	4770      	bx	lr

080179ba <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80179ba:	b480      	push	{r7}
 80179bc:	b083      	sub	sp, #12
 80179be:	af00      	add	r7, sp, #0
 80179c0:	6078      	str	r0, [r7, #4]
 80179c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	683a      	ldr	r2, [r7, #0]
 80179c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80179ca:	bf00      	nop
 80179cc:	370c      	adds	r7, #12
 80179ce:	46bd      	mov	sp, r7
 80179d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d4:	4770      	bx	lr

080179d6 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 80179d6:	b480      	push	{r7}
 80179d8:	b083      	sub	sp, #12
 80179da:	af00      	add	r7, sp, #0
 80179dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80179e2:	4618      	mov	r0, r3
 80179e4:	370c      	adds	r7, #12
 80179e6:	46bd      	mov	sp, r7
 80179e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ec:	4770      	bx	lr

080179ee <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80179ee:	b480      	push	{r7}
 80179f0:	b083      	sub	sp, #12
 80179f2:	af00      	add	r7, sp, #0
 80179f4:	6078      	str	r0, [r7, #4]
 80179f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	683a      	ldr	r2, [r7, #0]
 80179fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80179fe:	bf00      	nop
 8017a00:	370c      	adds	r7, #12
 8017a02:	46bd      	mov	sp, r7
 8017a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a08:	4770      	bx	lr
	...

08017a0c <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8017a0c:	b480      	push	{r7}
 8017a0e:	b087      	sub	sp, #28
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	60f8      	str	r0, [r7, #12]
 8017a14:	60b9      	str	r1, [r7, #8]
 8017a16:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8017a18:	68bb      	ldr	r3, [r7, #8]
 8017a1a:	2b01      	cmp	r3, #1
 8017a1c:	d02e      	beq.n	8017a7c <LL_TIM_OC_SetMode+0x70>
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	2b04      	cmp	r3, #4
 8017a22:	d029      	beq.n	8017a78 <LL_TIM_OC_SetMode+0x6c>
 8017a24:	68bb      	ldr	r3, [r7, #8]
 8017a26:	2b10      	cmp	r3, #16
 8017a28:	d024      	beq.n	8017a74 <LL_TIM_OC_SetMode+0x68>
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	2b40      	cmp	r3, #64	; 0x40
 8017a2e:	d01f      	beq.n	8017a70 <LL_TIM_OC_SetMode+0x64>
 8017a30:	68bb      	ldr	r3, [r7, #8]
 8017a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a36:	d019      	beq.n	8017a6c <LL_TIM_OC_SetMode+0x60>
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017a3e:	d013      	beq.n	8017a68 <LL_TIM_OC_SetMode+0x5c>
 8017a40:	68bb      	ldr	r3, [r7, #8]
 8017a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017a46:	d00d      	beq.n	8017a64 <LL_TIM_OC_SetMode+0x58>
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017a4e:	d007      	beq.n	8017a60 <LL_TIM_OC_SetMode+0x54>
 8017a50:	68bb      	ldr	r3, [r7, #8]
 8017a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017a56:	d101      	bne.n	8017a5c <LL_TIM_OC_SetMode+0x50>
 8017a58:	2308      	movs	r3, #8
 8017a5a:	e010      	b.n	8017a7e <LL_TIM_OC_SetMode+0x72>
 8017a5c:	2309      	movs	r3, #9
 8017a5e:	e00e      	b.n	8017a7e <LL_TIM_OC_SetMode+0x72>
 8017a60:	2307      	movs	r3, #7
 8017a62:	e00c      	b.n	8017a7e <LL_TIM_OC_SetMode+0x72>
 8017a64:	2306      	movs	r3, #6
 8017a66:	e00a      	b.n	8017a7e <LL_TIM_OC_SetMode+0x72>
 8017a68:	2305      	movs	r3, #5
 8017a6a:	e008      	b.n	8017a7e <LL_TIM_OC_SetMode+0x72>
 8017a6c:	2304      	movs	r3, #4
 8017a6e:	e006      	b.n	8017a7e <LL_TIM_OC_SetMode+0x72>
 8017a70:	2303      	movs	r3, #3
 8017a72:	e004      	b.n	8017a7e <LL_TIM_OC_SetMode+0x72>
 8017a74:	2302      	movs	r3, #2
 8017a76:	e002      	b.n	8017a7e <LL_TIM_OC_SetMode+0x72>
 8017a78:	2301      	movs	r3, #1
 8017a7a:	e000      	b.n	8017a7e <LL_TIM_OC_SetMode+0x72>
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	3318      	adds	r3, #24
 8017a84:	4619      	mov	r1, r3
 8017a86:	7dfb      	ldrb	r3, [r7, #23]
 8017a88:	4a0e      	ldr	r2, [pc, #56]	; (8017ac4 <LL_TIM_OC_SetMode+0xb8>)
 8017a8a:	5cd3      	ldrb	r3, [r2, r3]
 8017a8c:	440b      	add	r3, r1
 8017a8e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8017a90:	693b      	ldr	r3, [r7, #16]
 8017a92:	681a      	ldr	r2, [r3, #0]
 8017a94:	7dfb      	ldrb	r3, [r7, #23]
 8017a96:	490c      	ldr	r1, [pc, #48]	; (8017ac8 <LL_TIM_OC_SetMode+0xbc>)
 8017a98:	5ccb      	ldrb	r3, [r1, r3]
 8017a9a:	4619      	mov	r1, r3
 8017a9c:	4b0b      	ldr	r3, [pc, #44]	; (8017acc <LL_TIM_OC_SetMode+0xc0>)
 8017a9e:	408b      	lsls	r3, r1
 8017aa0:	43db      	mvns	r3, r3
 8017aa2:	401a      	ands	r2, r3
 8017aa4:	7dfb      	ldrb	r3, [r7, #23]
 8017aa6:	4908      	ldr	r1, [pc, #32]	; (8017ac8 <LL_TIM_OC_SetMode+0xbc>)
 8017aa8:	5ccb      	ldrb	r3, [r1, r3]
 8017aaa:	4619      	mov	r1, r3
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	408b      	lsls	r3, r1
 8017ab0:	431a      	orrs	r2, r3
 8017ab2:	693b      	ldr	r3, [r7, #16]
 8017ab4:	601a      	str	r2, [r3, #0]
}
 8017ab6:	bf00      	nop
 8017ab8:	371c      	adds	r7, #28
 8017aba:	46bd      	mov	sp, r7
 8017abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac0:	4770      	bx	lr
 8017ac2:	bf00      	nop
 8017ac4:	08020d18 	.word	0x08020d18
 8017ac8:	08020d24 	.word	0x08020d24
 8017acc:	00010073 	.word	0x00010073

08017ad0 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	b087      	sub	sp, #28
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	60f8      	str	r0, [r7, #12]
 8017ad8:	60b9      	str	r1, [r7, #8]
 8017ada:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8017adc:	68bb      	ldr	r3, [r7, #8]
 8017ade:	2b01      	cmp	r3, #1
 8017ae0:	d02e      	beq.n	8017b40 <LL_TIM_OC_SetPolarity+0x70>
 8017ae2:	68bb      	ldr	r3, [r7, #8]
 8017ae4:	2b04      	cmp	r3, #4
 8017ae6:	d029      	beq.n	8017b3c <LL_TIM_OC_SetPolarity+0x6c>
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	2b10      	cmp	r3, #16
 8017aec:	d024      	beq.n	8017b38 <LL_TIM_OC_SetPolarity+0x68>
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	2b40      	cmp	r3, #64	; 0x40
 8017af2:	d01f      	beq.n	8017b34 <LL_TIM_OC_SetPolarity+0x64>
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017afa:	d019      	beq.n	8017b30 <LL_TIM_OC_SetPolarity+0x60>
 8017afc:	68bb      	ldr	r3, [r7, #8]
 8017afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017b02:	d013      	beq.n	8017b2c <LL_TIM_OC_SetPolarity+0x5c>
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017b0a:	d00d      	beq.n	8017b28 <LL_TIM_OC_SetPolarity+0x58>
 8017b0c:	68bb      	ldr	r3, [r7, #8]
 8017b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017b12:	d007      	beq.n	8017b24 <LL_TIM_OC_SetPolarity+0x54>
 8017b14:	68bb      	ldr	r3, [r7, #8]
 8017b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017b1a:	d101      	bne.n	8017b20 <LL_TIM_OC_SetPolarity+0x50>
 8017b1c:	2308      	movs	r3, #8
 8017b1e:	e010      	b.n	8017b42 <LL_TIM_OC_SetPolarity+0x72>
 8017b20:	2309      	movs	r3, #9
 8017b22:	e00e      	b.n	8017b42 <LL_TIM_OC_SetPolarity+0x72>
 8017b24:	2307      	movs	r3, #7
 8017b26:	e00c      	b.n	8017b42 <LL_TIM_OC_SetPolarity+0x72>
 8017b28:	2306      	movs	r3, #6
 8017b2a:	e00a      	b.n	8017b42 <LL_TIM_OC_SetPolarity+0x72>
 8017b2c:	2305      	movs	r3, #5
 8017b2e:	e008      	b.n	8017b42 <LL_TIM_OC_SetPolarity+0x72>
 8017b30:	2304      	movs	r3, #4
 8017b32:	e006      	b.n	8017b42 <LL_TIM_OC_SetPolarity+0x72>
 8017b34:	2303      	movs	r3, #3
 8017b36:	e004      	b.n	8017b42 <LL_TIM_OC_SetPolarity+0x72>
 8017b38:	2302      	movs	r3, #2
 8017b3a:	e002      	b.n	8017b42 <LL_TIM_OC_SetPolarity+0x72>
 8017b3c:	2301      	movs	r3, #1
 8017b3e:	e000      	b.n	8017b42 <LL_TIM_OC_SetPolarity+0x72>
 8017b40:	2300      	movs	r3, #0
 8017b42:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	6a1a      	ldr	r2, [r3, #32]
 8017b48:	7dfb      	ldrb	r3, [r7, #23]
 8017b4a:	490b      	ldr	r1, [pc, #44]	; (8017b78 <LL_TIM_OC_SetPolarity+0xa8>)
 8017b4c:	5ccb      	ldrb	r3, [r1, r3]
 8017b4e:	4619      	mov	r1, r3
 8017b50:	2302      	movs	r3, #2
 8017b52:	408b      	lsls	r3, r1
 8017b54:	43db      	mvns	r3, r3
 8017b56:	401a      	ands	r2, r3
 8017b58:	7dfb      	ldrb	r3, [r7, #23]
 8017b5a:	4907      	ldr	r1, [pc, #28]	; (8017b78 <LL_TIM_OC_SetPolarity+0xa8>)
 8017b5c:	5ccb      	ldrb	r3, [r1, r3]
 8017b5e:	4619      	mov	r1, r3
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	408b      	lsls	r3, r1
 8017b64:	431a      	orrs	r2, r3
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	621a      	str	r2, [r3, #32]
}
 8017b6a:	bf00      	nop
 8017b6c:	371c      	adds	r7, #28
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b74:	4770      	bx	lr
 8017b76:	bf00      	nop
 8017b78:	08020d30 	.word	0x08020d30

08017b7c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017b7c:	b480      	push	{r7}
 8017b7e:	b083      	sub	sp, #12
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
 8017b84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	683a      	ldr	r2, [r7, #0]
 8017b8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8017b8c:	bf00      	nop
 8017b8e:	370c      	adds	r7, #12
 8017b90:	46bd      	mov	sp, r7
 8017b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b96:	4770      	bx	lr

08017b98 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017b98:	b480      	push	{r7}
 8017b9a:	b083      	sub	sp, #12
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	683a      	ldr	r2, [r7, #0]
 8017ba6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8017ba8:	bf00      	nop
 8017baa:	370c      	adds	r7, #12
 8017bac:	46bd      	mov	sp, r7
 8017bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb2:	4770      	bx	lr

08017bb4 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017bb4:	b480      	push	{r7}
 8017bb6:	b083      	sub	sp, #12
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	683a      	ldr	r2, [r7, #0]
 8017bc2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8017bc4:	bf00      	nop
 8017bc6:	370c      	adds	r7, #12
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bce:	4770      	bx	lr

08017bd0 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017bd0:	b480      	push	{r7}
 8017bd2:	b083      	sub	sp, #12
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
 8017bd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	683a      	ldr	r2, [r7, #0]
 8017bde:	641a      	str	r2, [r3, #64]	; 0x40
}
 8017be0:	bf00      	nop
 8017be2:	370c      	adds	r7, #12
 8017be4:	46bd      	mov	sp, r7
 8017be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bea:	4770      	bx	lr

08017bec <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8017bec:	b480      	push	{r7}
 8017bee:	b083      	sub	sp, #12
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	f06f 0202 	mvn.w	r2, #2
 8017bfa:	611a      	str	r2, [r3, #16]
}
 8017bfc:	bf00      	nop
 8017bfe:	370c      	adds	r7, #12
 8017c00:	46bd      	mov	sp, r7
 8017c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c06:	4770      	bx	lr

08017c08 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8017c08:	b480      	push	{r7}
 8017c0a:	b083      	sub	sp, #12
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	691b      	ldr	r3, [r3, #16]
 8017c14:	f003 0302 	and.w	r3, r3, #2
 8017c18:	2b02      	cmp	r3, #2
 8017c1a:	d101      	bne.n	8017c20 <LL_TIM_IsActiveFlag_CC1+0x18>
 8017c1c:	2301      	movs	r3, #1
 8017c1e:	e000      	b.n	8017c22 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8017c20:	2300      	movs	r3, #0
}
 8017c22:	4618      	mov	r0, r3
 8017c24:	370c      	adds	r7, #12
 8017c26:	46bd      	mov	sp, r7
 8017c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2c:	4770      	bx	lr

08017c2e <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8017c2e:	b480      	push	{r7}
 8017c30:	b083      	sub	sp, #12
 8017c32:	af00      	add	r7, sp, #0
 8017c34:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	f06f 0204 	mvn.w	r2, #4
 8017c3c:	611a      	str	r2, [r3, #16]
}
 8017c3e:	bf00      	nop
 8017c40:	370c      	adds	r7, #12
 8017c42:	46bd      	mov	sp, r7
 8017c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c48:	4770      	bx	lr

08017c4a <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8017c4a:	b480      	push	{r7}
 8017c4c:	b083      	sub	sp, #12
 8017c4e:	af00      	add	r7, sp, #0
 8017c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	691b      	ldr	r3, [r3, #16]
 8017c56:	f003 0304 	and.w	r3, r3, #4
 8017c5a:	2b04      	cmp	r3, #4
 8017c5c:	d101      	bne.n	8017c62 <LL_TIM_IsActiveFlag_CC2+0x18>
 8017c5e:	2301      	movs	r3, #1
 8017c60:	e000      	b.n	8017c64 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8017c62:	2300      	movs	r3, #0
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	370c      	adds	r7, #12
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6e:	4770      	bx	lr

08017c70 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8017c70:	b480      	push	{r7}
 8017c72:	b083      	sub	sp, #12
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f06f 0208 	mvn.w	r2, #8
 8017c7e:	611a      	str	r2, [r3, #16]
}
 8017c80:	bf00      	nop
 8017c82:	370c      	adds	r7, #12
 8017c84:	46bd      	mov	sp, r7
 8017c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8a:	4770      	bx	lr

08017c8c <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8017c8c:	b480      	push	{r7}
 8017c8e:	b083      	sub	sp, #12
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	691b      	ldr	r3, [r3, #16]
 8017c98:	f003 0308 	and.w	r3, r3, #8
 8017c9c:	2b08      	cmp	r3, #8
 8017c9e:	d101      	bne.n	8017ca4 <LL_TIM_IsActiveFlag_CC3+0x18>
 8017ca0:	2301      	movs	r3, #1
 8017ca2:	e000      	b.n	8017ca6 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8017ca4:	2300      	movs	r3, #0
}
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	370c      	adds	r7, #12
 8017caa:	46bd      	mov	sp, r7
 8017cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb0:	4770      	bx	lr

08017cb2 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8017cb2:	b480      	push	{r7}
 8017cb4:	b083      	sub	sp, #12
 8017cb6:	af00      	add	r7, sp, #0
 8017cb8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	f06f 0210 	mvn.w	r2, #16
 8017cc0:	611a      	str	r2, [r3, #16]
}
 8017cc2:	bf00      	nop
 8017cc4:	370c      	adds	r7, #12
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ccc:	4770      	bx	lr

08017cce <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8017cce:	b480      	push	{r7}
 8017cd0:	b083      	sub	sp, #12
 8017cd2:	af00      	add	r7, sp, #0
 8017cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	691b      	ldr	r3, [r3, #16]
 8017cda:	f003 0310 	and.w	r3, r3, #16
 8017cde:	2b10      	cmp	r3, #16
 8017ce0:	d101      	bne.n	8017ce6 <LL_TIM_IsActiveFlag_CC4+0x18>
 8017ce2:	2301      	movs	r3, #1
 8017ce4:	e000      	b.n	8017ce8 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8017ce6:	2300      	movs	r3, #0
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	370c      	adds	r7, #12
 8017cec:	46bd      	mov	sp, r7
 8017cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf2:	4770      	bx	lr

08017cf4 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8017cf4:	b598      	push	{r3, r4, r7, lr}
 8017cf6:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8017cf8:	4b3d      	ldr	r3, [pc, #244]	; (8017df0 <USBPD_TIM_Init+0xfc>)
 8017cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d16a      	bne.n	8017dd8 <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 8017d02:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017d06:	f7ff fe09 	bl	801791c <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8017d0a:	2100      	movs	r1, #0
 8017d0c:	4839      	ldr	r0, [pc, #228]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017d0e:	f7ff fe41 	bl	8017994 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8017d12:	4b39      	ldr	r3, [pc, #228]	; (8017df8 <USBPD_TIM_Init+0x104>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	4a39      	ldr	r2, [pc, #228]	; (8017dfc <USBPD_TIM_Init+0x108>)
 8017d18:	4293      	cmp	r3, r2
 8017d1a:	d90b      	bls.n	8017d34 <USBPD_TIM_Init+0x40>
 8017d1c:	4b36      	ldr	r3, [pc, #216]	; (8017df8 <USBPD_TIM_Init+0x104>)
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8017d24:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8017d28:	4a35      	ldr	r2, [pc, #212]	; (8017e00 <USBPD_TIM_Init+0x10c>)
 8017d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8017d2e:	0c9b      	lsrs	r3, r3, #18
 8017d30:	3b01      	subs	r3, #1
 8017d32:	e000      	b.n	8017d36 <USBPD_TIM_Init+0x42>
 8017d34:	2300      	movs	r3, #0
 8017d36:	4619      	mov	r1, r3
 8017d38:	482e      	ldr	r0, [pc, #184]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017d3a:	f7ff fe3e 	bl	80179ba <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8017d3e:	4b2e      	ldr	r3, [pc, #184]	; (8017df8 <USBPD_TIM_Init+0x104>)
 8017d40:	681c      	ldr	r4, [r3, #0]
 8017d42:	482c      	ldr	r0, [pc, #176]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017d44:	f7ff fe47 	bl	80179d6 <LL_TIM_GetPrescaler>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	3301      	adds	r3, #1
 8017d4c:	fbb4 f3f3 	udiv	r3, r4, r3
 8017d50:	2b63      	cmp	r3, #99	; 0x63
 8017d52:	d90d      	bls.n	8017d70 <USBPD_TIM_Init+0x7c>
 8017d54:	4b28      	ldr	r3, [pc, #160]	; (8017df8 <USBPD_TIM_Init+0x104>)
 8017d56:	681c      	ldr	r4, [r3, #0]
 8017d58:	4826      	ldr	r0, [pc, #152]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017d5a:	f7ff fe3c 	bl	80179d6 <LL_TIM_GetPrescaler>
 8017d5e:	4603      	mov	r3, r0
 8017d60:	3301      	adds	r3, #1
 8017d62:	2264      	movs	r2, #100	; 0x64
 8017d64:	fb02 f303 	mul.w	r3, r2, r3
 8017d68:	fbb4 f3f3 	udiv	r3, r4, r3
 8017d6c:	3b01      	subs	r3, #1
 8017d6e:	e000      	b.n	8017d72 <USBPD_TIM_Init+0x7e>
 8017d70:	2300      	movs	r3, #0
 8017d72:	4619      	mov	r1, r3
 8017d74:	481f      	ldr	r0, [pc, #124]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017d76:	f7ff fe3a 	bl	80179ee <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8017d7a:	2230      	movs	r2, #48	; 0x30
 8017d7c:	2101      	movs	r1, #1
 8017d7e:	481d      	ldr	r0, [pc, #116]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017d80:	f7ff fe44 	bl	8017a0c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8017d84:	2230      	movs	r2, #48	; 0x30
 8017d86:	2110      	movs	r1, #16
 8017d88:	481a      	ldr	r0, [pc, #104]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017d8a:	f7ff fe3f 	bl	8017a0c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8017d8e:	2230      	movs	r2, #48	; 0x30
 8017d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017d94:	4817      	ldr	r0, [pc, #92]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017d96:	f7ff fe39 	bl	8017a0c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8017d9a:	2230      	movs	r2, #48	; 0x30
 8017d9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017da0:	4814      	ldr	r0, [pc, #80]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017da2:	f7ff fe33 	bl	8017a0c <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8017da6:	2200      	movs	r2, #0
 8017da8:	2101      	movs	r1, #1
 8017daa:	4812      	ldr	r0, [pc, #72]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017dac:	f7ff fe90 	bl	8017ad0 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8017db0:	2200      	movs	r2, #0
 8017db2:	2110      	movs	r1, #16
 8017db4:	480f      	ldr	r0, [pc, #60]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017db6:	f7ff fe8b 	bl	8017ad0 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8017dba:	2200      	movs	r2, #0
 8017dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017dc0:	480c      	ldr	r0, [pc, #48]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017dc2:	f7ff fe85 	bl	8017ad0 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017dcc:	4809      	ldr	r0, [pc, #36]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017dce:	f7ff fe7f 	bl	8017ad0 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 8017dd2:	4808      	ldr	r0, [pc, #32]	; (8017df4 <USBPD_TIM_Init+0x100>)
 8017dd4:	f7ff fdce 	bl	8017974 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8017dd8:	4b05      	ldr	r3, [pc, #20]	; (8017df0 <USBPD_TIM_Init+0xfc>)
 8017dda:	f993 3000 	ldrsb.w	r3, [r3]
 8017dde:	b2db      	uxtb	r3, r3
 8017de0:	3301      	adds	r3, #1
 8017de2:	b2db      	uxtb	r3, r3
 8017de4:	b25a      	sxtb	r2, r3
 8017de6:	4b02      	ldr	r3, [pc, #8]	; (8017df0 <USBPD_TIM_Init+0xfc>)
 8017de8:	701a      	strb	r2, [r3, #0]
}
 8017dea:	bf00      	nop
 8017dec:	bd98      	pop	{r3, r4, r7, pc}
 8017dee:	bf00      	nop
 8017df0:	20001c80 	.word	0x20001c80
 8017df4:	40012c00 	.word	0x40012c00
 8017df8:	20000008 	.word	0x20000008
 8017dfc:	000f423f 	.word	0x000f423f
 8017e00:	431bde83 	.word	0x431bde83

08017e04 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8017e08:	4b09      	ldr	r3, [pc, #36]	; (8017e30 <USBPD_TIM_DeInit+0x2c>)
 8017e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8017e0e:	b2db      	uxtb	r3, r3
 8017e10:	3b01      	subs	r3, #1
 8017e12:	b2db      	uxtb	r3, r3
 8017e14:	b25a      	sxtb	r2, r3
 8017e16:	4b06      	ldr	r3, [pc, #24]	; (8017e30 <USBPD_TIM_DeInit+0x2c>)
 8017e18:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8017e1a:	4b05      	ldr	r3, [pc, #20]	; (8017e30 <USBPD_TIM_DeInit+0x2c>)
 8017e1c:	f993 3000 	ldrsb.w	r3, [r3]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d103      	bne.n	8017e2c <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 8017e24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017e28:	f7ff fd90 	bl	801794c <LL_APB2_GRP1_DisableClock>
  }
}
 8017e2c:	bf00      	nop
 8017e2e:	bd80      	pop	{r7, pc}
 8017e30:	20001c80 	.word	0x20001c80

08017e34 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b082      	sub	sp, #8
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	6039      	str	r1, [r7, #0]
 8017e3e:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8017e40:	79fb      	ldrb	r3, [r7, #7]
 8017e42:	2b03      	cmp	r3, #3
 8017e44:	d85e      	bhi.n	8017f04 <USBPD_TIM_Start+0xd0>
 8017e46:	a201      	add	r2, pc, #4	; (adr r2, 8017e4c <USBPD_TIM_Start+0x18>)
 8017e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e4c:	08017e5d 	.word	0x08017e5d
 8017e50:	08017e87 	.word	0x08017e87
 8017e54:	08017eb1 	.word	0x08017eb1
 8017e58:	08017edb 	.word	0x08017edb
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 8017e5c:	4b2c      	ldr	r3, [pc, #176]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	441a      	add	r2, r3
 8017e64:	4b2b      	ldr	r3, [pc, #172]	; (8017f14 <USBPD_TIM_Start+0xe0>)
 8017e66:	fba3 1302 	umull	r1, r3, r3, r2
 8017e6a:	0b5b      	lsrs	r3, r3, #13
 8017e6c:	f242 7110 	movw	r1, #10000	; 0x2710
 8017e70:	fb01 f303 	mul.w	r3, r1, r3
 8017e74:	1ad3      	subs	r3, r2, r3
 8017e76:	4619      	mov	r1, r3
 8017e78:	4825      	ldr	r0, [pc, #148]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017e7a:	f7ff fe7f 	bl	8017b7c <LL_TIM_OC_SetCompareCH1>
 8017e7e:	4824      	ldr	r0, [pc, #144]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017e80:	f7ff feb4 	bl	8017bec <LL_TIM_ClearFlag_CC1>
      break;
 8017e84:	e03f      	b.n	8017f06 <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 8017e86:	4b22      	ldr	r3, [pc, #136]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e8a:	683b      	ldr	r3, [r7, #0]
 8017e8c:	441a      	add	r2, r3
 8017e8e:	4b21      	ldr	r3, [pc, #132]	; (8017f14 <USBPD_TIM_Start+0xe0>)
 8017e90:	fba3 1302 	umull	r1, r3, r3, r2
 8017e94:	0b5b      	lsrs	r3, r3, #13
 8017e96:	f242 7110 	movw	r1, #10000	; 0x2710
 8017e9a:	fb01 f303 	mul.w	r3, r1, r3
 8017e9e:	1ad3      	subs	r3, r2, r3
 8017ea0:	4619      	mov	r1, r3
 8017ea2:	481b      	ldr	r0, [pc, #108]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017ea4:	f7ff fe78 	bl	8017b98 <LL_TIM_OC_SetCompareCH2>
 8017ea8:	4819      	ldr	r0, [pc, #100]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017eaa:	f7ff fec0 	bl	8017c2e <LL_TIM_ClearFlag_CC2>
      break;
 8017eae:	e02a      	b.n	8017f06 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 8017eb0:	4b17      	ldr	r3, [pc, #92]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	441a      	add	r2, r3
 8017eb8:	4b16      	ldr	r3, [pc, #88]	; (8017f14 <USBPD_TIM_Start+0xe0>)
 8017eba:	fba3 1302 	umull	r1, r3, r3, r2
 8017ebe:	0b5b      	lsrs	r3, r3, #13
 8017ec0:	f242 7110 	movw	r1, #10000	; 0x2710
 8017ec4:	fb01 f303 	mul.w	r3, r1, r3
 8017ec8:	1ad3      	subs	r3, r2, r3
 8017eca:	4619      	mov	r1, r3
 8017ecc:	4810      	ldr	r0, [pc, #64]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017ece:	f7ff fe71 	bl	8017bb4 <LL_TIM_OC_SetCompareCH3>
 8017ed2:	480f      	ldr	r0, [pc, #60]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017ed4:	f7ff fecc 	bl	8017c70 <LL_TIM_ClearFlag_CC3>
      break;
 8017ed8:	e015      	b.n	8017f06 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 8017eda:	4b0d      	ldr	r3, [pc, #52]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017ede:	683b      	ldr	r3, [r7, #0]
 8017ee0:	441a      	add	r2, r3
 8017ee2:	4b0c      	ldr	r3, [pc, #48]	; (8017f14 <USBPD_TIM_Start+0xe0>)
 8017ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8017ee8:	0b5b      	lsrs	r3, r3, #13
 8017eea:	f242 7110 	movw	r1, #10000	; 0x2710
 8017eee:	fb01 f303 	mul.w	r3, r1, r3
 8017ef2:	1ad3      	subs	r3, r2, r3
 8017ef4:	4619      	mov	r1, r3
 8017ef6:	4806      	ldr	r0, [pc, #24]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017ef8:	f7ff fe6a 	bl	8017bd0 <LL_TIM_OC_SetCompareCH4>
 8017efc:	4804      	ldr	r0, [pc, #16]	; (8017f10 <USBPD_TIM_Start+0xdc>)
 8017efe:	f7ff fed8 	bl	8017cb2 <LL_TIM_ClearFlag_CC4>
      break;
 8017f02:	e000      	b.n	8017f06 <USBPD_TIM_Start+0xd2>
    default:
      break;
 8017f04:	bf00      	nop
  }
}
 8017f06:	bf00      	nop
 8017f08:	3708      	adds	r7, #8
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	bd80      	pop	{r7, pc}
 8017f0e:	bf00      	nop
 8017f10:	40012c00 	.word	0x40012c00
 8017f14:	d1b71759 	.word	0xd1b71759

08017f18 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b084      	sub	sp, #16
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	4603      	mov	r3, r0
 8017f20:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 8017f22:	2301      	movs	r3, #1
 8017f24:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8017f26:	79fb      	ldrb	r3, [r7, #7]
 8017f28:	2b03      	cmp	r3, #3
 8017f2a:	d81f      	bhi.n	8017f6c <USBPD_TIM_IsExpired+0x54>
 8017f2c:	a201      	add	r2, pc, #4	; (adr r2, 8017f34 <USBPD_TIM_IsExpired+0x1c>)
 8017f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f32:	bf00      	nop
 8017f34:	08017f45 	.word	0x08017f45
 8017f38:	08017f4f 	.word	0x08017f4f
 8017f3c:	08017f59 	.word	0x08017f59
 8017f40:	08017f63 	.word	0x08017f63
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8017f44:	480c      	ldr	r0, [pc, #48]	; (8017f78 <USBPD_TIM_IsExpired+0x60>)
 8017f46:	f7ff fe5f 	bl	8017c08 <LL_TIM_IsActiveFlag_CC1>
 8017f4a:	60f8      	str	r0, [r7, #12]
      break;
 8017f4c:	e00f      	b.n	8017f6e <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8017f4e:	480a      	ldr	r0, [pc, #40]	; (8017f78 <USBPD_TIM_IsExpired+0x60>)
 8017f50:	f7ff fe7b 	bl	8017c4a <LL_TIM_IsActiveFlag_CC2>
 8017f54:	60f8      	str	r0, [r7, #12]
      break;
 8017f56:	e00a      	b.n	8017f6e <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8017f58:	4807      	ldr	r0, [pc, #28]	; (8017f78 <USBPD_TIM_IsExpired+0x60>)
 8017f5a:	f7ff fe97 	bl	8017c8c <LL_TIM_IsActiveFlag_CC3>
 8017f5e:	60f8      	str	r0, [r7, #12]
      break;
 8017f60:	e005      	b.n	8017f6e <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8017f62:	4805      	ldr	r0, [pc, #20]	; (8017f78 <USBPD_TIM_IsExpired+0x60>)
 8017f64:	f7ff feb3 	bl	8017cce <LL_TIM_IsActiveFlag_CC4>
 8017f68:	60f8      	str	r0, [r7, #12]
      break;
 8017f6a:	e000      	b.n	8017f6e <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 8017f6c:	bf00      	nop
  }
  return _expired;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
}
 8017f70:	4618      	mov	r0, r3
 8017f72:	3710      	adds	r7, #16
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}
 8017f78:	40012c00 	.word	0x40012c00

08017f7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b084      	sub	sp, #16
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
 8017f84:	460b      	mov	r3, r1
 8017f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017f88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8017f8c:	f007 f9a2 	bl	801f2d4 <USBD_static_malloc>
 8017f90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d105      	bne.n	8017fa4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8017fa0:	2302      	movs	r3, #2
 8017fa2:	e066      	b.n	8018072 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	68fa      	ldr	r2, [r7, #12]
 8017fa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	7c1b      	ldrb	r3, [r3, #16]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d119      	bne.n	8017fe8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017fb8:	2202      	movs	r2, #2
 8017fba:	2181      	movs	r1, #129	; 0x81
 8017fbc:	6878      	ldr	r0, [r7, #4]
 8017fbe:	f007 f830 	bl	801f022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	2201      	movs	r2, #1
 8017fc6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017fcc:	2202      	movs	r2, #2
 8017fce:	2101      	movs	r1, #1
 8017fd0:	6878      	ldr	r0, [r7, #4]
 8017fd2:	f007 f826 	bl	801f022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2201      	movs	r2, #1
 8017fda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	2210      	movs	r2, #16
 8017fe2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8017fe6:	e016      	b.n	8018016 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017fe8:	2340      	movs	r3, #64	; 0x40
 8017fea:	2202      	movs	r2, #2
 8017fec:	2181      	movs	r1, #129	; 0x81
 8017fee:	6878      	ldr	r0, [r7, #4]
 8017ff0:	f007 f817 	bl	801f022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	2201      	movs	r2, #1
 8017ff8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017ffa:	2340      	movs	r3, #64	; 0x40
 8017ffc:	2202      	movs	r2, #2
 8017ffe:	2101      	movs	r1, #1
 8018000:	6878      	ldr	r0, [r7, #4]
 8018002:	f007 f80e 	bl	801f022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	2201      	movs	r2, #1
 801800a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	2210      	movs	r2, #16
 8018012:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018016:	2308      	movs	r3, #8
 8018018:	2203      	movs	r2, #3
 801801a:	2182      	movs	r1, #130	; 0x82
 801801c:	6878      	ldr	r0, [r7, #4]
 801801e:	f007 f800 	bl	801f022 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	2201      	movs	r2, #1
 8018026:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	2200      	movs	r2, #0
 8018038:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	2200      	movs	r2, #0
 8018040:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	7c1b      	ldrb	r3, [r3, #16]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d109      	bne.n	8018060 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018056:	2101      	movs	r1, #1
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f007 f8d1 	bl	801f200 <USBD_LL_PrepareReceive>
 801805e:	e007      	b.n	8018070 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018066:	2340      	movs	r3, #64	; 0x40
 8018068:	2101      	movs	r1, #1
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	f007 f8c8 	bl	801f200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018070:	2300      	movs	r3, #0
}
 8018072:	4618      	mov	r0, r3
 8018074:	3710      	adds	r7, #16
 8018076:	46bd      	mov	sp, r7
 8018078:	bd80      	pop	{r7, pc}

0801807a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801807a:	b580      	push	{r7, lr}
 801807c:	b082      	sub	sp, #8
 801807e:	af00      	add	r7, sp, #0
 8018080:	6078      	str	r0, [r7, #4]
 8018082:	460b      	mov	r3, r1
 8018084:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8018086:	2181      	movs	r1, #129	; 0x81
 8018088:	6878      	ldr	r0, [r7, #4]
 801808a:	f006 fff0 	bl	801f06e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	2200      	movs	r2, #0
 8018092:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8018094:	2101      	movs	r1, #1
 8018096:	6878      	ldr	r0, [r7, #4]
 8018098:	f006 ffe9 	bl	801f06e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2200      	movs	r2, #0
 80180a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80180a4:	2182      	movs	r1, #130	; 0x82
 80180a6:	6878      	ldr	r0, [r7, #4]
 80180a8:	f006 ffe1 	bl	801f06e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2200      	movs	r2, #0
 80180b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	2200      	movs	r2, #0
 80180b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d00e      	beq.n	80180e4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180d6:	4618      	mov	r0, r3
 80180d8:	f007 f90a 	bl	801f2f0 <USBD_static_free>
    pdev->pClassData = NULL;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2200      	movs	r2, #0
 80180e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80180e4:	2300      	movs	r3, #0
}
 80180e6:	4618      	mov	r0, r3
 80180e8:	3708      	adds	r7, #8
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
	...

080180f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b086      	sub	sp, #24
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018100:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8018102:	2300      	movs	r3, #0
 8018104:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8018106:	2300      	movs	r3, #0
 8018108:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801810a:	2300      	movs	r3, #0
 801810c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801810e:	693b      	ldr	r3, [r7, #16]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d101      	bne.n	8018118 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8018114:	2303      	movs	r3, #3
 8018116:	e0af      	b.n	8018278 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018118:	683b      	ldr	r3, [r7, #0]
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018120:	2b00      	cmp	r3, #0
 8018122:	d03f      	beq.n	80181a4 <USBD_CDC_Setup+0xb4>
 8018124:	2b20      	cmp	r3, #32
 8018126:	f040 809f 	bne.w	8018268 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	88db      	ldrh	r3, [r3, #6]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d02e      	beq.n	8018190 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	781b      	ldrb	r3, [r3, #0]
 8018136:	b25b      	sxtb	r3, r3
 8018138:	2b00      	cmp	r3, #0
 801813a:	da16      	bge.n	801816a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018142:	689b      	ldr	r3, [r3, #8]
 8018144:	683a      	ldr	r2, [r7, #0]
 8018146:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8018148:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801814a:	683a      	ldr	r2, [r7, #0]
 801814c:	88d2      	ldrh	r2, [r2, #6]
 801814e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8018150:	683b      	ldr	r3, [r7, #0]
 8018152:	88db      	ldrh	r3, [r3, #6]
 8018154:	2b07      	cmp	r3, #7
 8018156:	bf28      	it	cs
 8018158:	2307      	movcs	r3, #7
 801815a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801815c:	693b      	ldr	r3, [r7, #16]
 801815e:	89fa      	ldrh	r2, [r7, #14]
 8018160:	4619      	mov	r1, r3
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f001 facf 	bl	8019706 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8018168:	e085      	b.n	8018276 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	785a      	ldrb	r2, [r3, #1]
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	88db      	ldrh	r3, [r3, #6]
 8018178:	b2da      	uxtb	r2, r3
 801817a:	693b      	ldr	r3, [r7, #16]
 801817c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8018180:	6939      	ldr	r1, [r7, #16]
 8018182:	683b      	ldr	r3, [r7, #0]
 8018184:	88db      	ldrh	r3, [r3, #6]
 8018186:	461a      	mov	r2, r3
 8018188:	6878      	ldr	r0, [r7, #4]
 801818a:	f001 fae8 	bl	801975e <USBD_CtlPrepareRx>
      break;
 801818e:	e072      	b.n	8018276 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018196:	689b      	ldr	r3, [r3, #8]
 8018198:	683a      	ldr	r2, [r7, #0]
 801819a:	7850      	ldrb	r0, [r2, #1]
 801819c:	2200      	movs	r2, #0
 801819e:	6839      	ldr	r1, [r7, #0]
 80181a0:	4798      	blx	r3
      break;
 80181a2:	e068      	b.n	8018276 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	785b      	ldrb	r3, [r3, #1]
 80181a8:	2b0b      	cmp	r3, #11
 80181aa:	d852      	bhi.n	8018252 <USBD_CDC_Setup+0x162>
 80181ac:	a201      	add	r2, pc, #4	; (adr r2, 80181b4 <USBD_CDC_Setup+0xc4>)
 80181ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181b2:	bf00      	nop
 80181b4:	080181e5 	.word	0x080181e5
 80181b8:	08018261 	.word	0x08018261
 80181bc:	08018253 	.word	0x08018253
 80181c0:	08018253 	.word	0x08018253
 80181c4:	08018253 	.word	0x08018253
 80181c8:	08018253 	.word	0x08018253
 80181cc:	08018253 	.word	0x08018253
 80181d0:	08018253 	.word	0x08018253
 80181d4:	08018253 	.word	0x08018253
 80181d8:	08018253 	.word	0x08018253
 80181dc:	0801820f 	.word	0x0801820f
 80181e0:	08018239 	.word	0x08018239
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80181ea:	b2db      	uxtb	r3, r3
 80181ec:	2b03      	cmp	r3, #3
 80181ee:	d107      	bne.n	8018200 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80181f0:	f107 030a 	add.w	r3, r7, #10
 80181f4:	2202      	movs	r2, #2
 80181f6:	4619      	mov	r1, r3
 80181f8:	6878      	ldr	r0, [r7, #4]
 80181fa:	f001 fa84 	bl	8019706 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80181fe:	e032      	b.n	8018266 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8018200:	6839      	ldr	r1, [r7, #0]
 8018202:	6878      	ldr	r0, [r7, #4]
 8018204:	f001 fa0e 	bl	8019624 <USBD_CtlError>
            ret = USBD_FAIL;
 8018208:	2303      	movs	r3, #3
 801820a:	75fb      	strb	r3, [r7, #23]
          break;
 801820c:	e02b      	b.n	8018266 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018214:	b2db      	uxtb	r3, r3
 8018216:	2b03      	cmp	r3, #3
 8018218:	d107      	bne.n	801822a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801821a:	f107 030d 	add.w	r3, r7, #13
 801821e:	2201      	movs	r2, #1
 8018220:	4619      	mov	r1, r3
 8018222:	6878      	ldr	r0, [r7, #4]
 8018224:	f001 fa6f 	bl	8019706 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018228:	e01d      	b.n	8018266 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801822a:	6839      	ldr	r1, [r7, #0]
 801822c:	6878      	ldr	r0, [r7, #4]
 801822e:	f001 f9f9 	bl	8019624 <USBD_CtlError>
            ret = USBD_FAIL;
 8018232:	2303      	movs	r3, #3
 8018234:	75fb      	strb	r3, [r7, #23]
          break;
 8018236:	e016      	b.n	8018266 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801823e:	b2db      	uxtb	r3, r3
 8018240:	2b03      	cmp	r3, #3
 8018242:	d00f      	beq.n	8018264 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8018244:	6839      	ldr	r1, [r7, #0]
 8018246:	6878      	ldr	r0, [r7, #4]
 8018248:	f001 f9ec 	bl	8019624 <USBD_CtlError>
            ret = USBD_FAIL;
 801824c:	2303      	movs	r3, #3
 801824e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8018250:	e008      	b.n	8018264 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8018252:	6839      	ldr	r1, [r7, #0]
 8018254:	6878      	ldr	r0, [r7, #4]
 8018256:	f001 f9e5 	bl	8019624 <USBD_CtlError>
          ret = USBD_FAIL;
 801825a:	2303      	movs	r3, #3
 801825c:	75fb      	strb	r3, [r7, #23]
          break;
 801825e:	e002      	b.n	8018266 <USBD_CDC_Setup+0x176>
          break;
 8018260:	bf00      	nop
 8018262:	e008      	b.n	8018276 <USBD_CDC_Setup+0x186>
          break;
 8018264:	bf00      	nop
      }
      break;
 8018266:	e006      	b.n	8018276 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8018268:	6839      	ldr	r1, [r7, #0]
 801826a:	6878      	ldr	r0, [r7, #4]
 801826c:	f001 f9da 	bl	8019624 <USBD_CtlError>
      ret = USBD_FAIL;
 8018270:	2303      	movs	r3, #3
 8018272:	75fb      	strb	r3, [r7, #23]
      break;
 8018274:	bf00      	nop
  }

  return (uint8_t)ret;
 8018276:	7dfb      	ldrb	r3, [r7, #23]
}
 8018278:	4618      	mov	r0, r3
 801827a:	3718      	adds	r7, #24
 801827c:	46bd      	mov	sp, r7
 801827e:	bd80      	pop	{r7, pc}

08018280 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b084      	sub	sp, #16
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
 8018288:	460b      	mov	r3, r1
 801828a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018292:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801829a:	2b00      	cmp	r3, #0
 801829c:	d101      	bne.n	80182a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801829e:	2303      	movs	r3, #3
 80182a0:	e04f      	b.n	8018342 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80182a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80182aa:	78fa      	ldrb	r2, [r7, #3]
 80182ac:	6879      	ldr	r1, [r7, #4]
 80182ae:	4613      	mov	r3, r2
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	4413      	add	r3, r2
 80182b4:	009b      	lsls	r3, r3, #2
 80182b6:	440b      	add	r3, r1
 80182b8:	3318      	adds	r3, #24
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d029      	beq.n	8018314 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80182c0:	78fa      	ldrb	r2, [r7, #3]
 80182c2:	6879      	ldr	r1, [r7, #4]
 80182c4:	4613      	mov	r3, r2
 80182c6:	009b      	lsls	r3, r3, #2
 80182c8:	4413      	add	r3, r2
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	440b      	add	r3, r1
 80182ce:	3318      	adds	r3, #24
 80182d0:	681a      	ldr	r2, [r3, #0]
 80182d2:	78f9      	ldrb	r1, [r7, #3]
 80182d4:	68f8      	ldr	r0, [r7, #12]
 80182d6:	460b      	mov	r3, r1
 80182d8:	009b      	lsls	r3, r3, #2
 80182da:	440b      	add	r3, r1
 80182dc:	00db      	lsls	r3, r3, #3
 80182de:	4403      	add	r3, r0
 80182e0:	3320      	adds	r3, #32
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80182e8:	fb01 f303 	mul.w	r3, r1, r3
 80182ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d110      	bne.n	8018314 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80182f2:	78fa      	ldrb	r2, [r7, #3]
 80182f4:	6879      	ldr	r1, [r7, #4]
 80182f6:	4613      	mov	r3, r2
 80182f8:	009b      	lsls	r3, r3, #2
 80182fa:	4413      	add	r3, r2
 80182fc:	009b      	lsls	r3, r3, #2
 80182fe:	440b      	add	r3, r1
 8018300:	3318      	adds	r3, #24
 8018302:	2200      	movs	r2, #0
 8018304:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8018306:	78f9      	ldrb	r1, [r7, #3]
 8018308:	2300      	movs	r3, #0
 801830a:	2200      	movs	r2, #0
 801830c:	6878      	ldr	r0, [r7, #4]
 801830e:	f006 ff56 	bl	801f1be <USBD_LL_Transmit>
 8018312:	e015      	b.n	8018340 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8018314:	68bb      	ldr	r3, [r7, #8]
 8018316:	2200      	movs	r2, #0
 8018318:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018322:	691b      	ldr	r3, [r3, #16]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d00b      	beq.n	8018340 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801832e:	691b      	ldr	r3, [r3, #16]
 8018330:	68ba      	ldr	r2, [r7, #8]
 8018332:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8018336:	68ba      	ldr	r2, [r7, #8]
 8018338:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801833c:	78fa      	ldrb	r2, [r7, #3]
 801833e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8018340:	2300      	movs	r3, #0
}
 8018342:	4618      	mov	r0, r3
 8018344:	3710      	adds	r7, #16
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}

0801834a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801834a:	b580      	push	{r7, lr}
 801834c:	b084      	sub	sp, #16
 801834e:	af00      	add	r7, sp, #0
 8018350:	6078      	str	r0, [r7, #4]
 8018352:	460b      	mov	r3, r1
 8018354:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801835c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018364:	2b00      	cmp	r3, #0
 8018366:	d101      	bne.n	801836c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018368:	2303      	movs	r3, #3
 801836a:	e015      	b.n	8018398 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801836c:	78fb      	ldrb	r3, [r7, #3]
 801836e:	4619      	mov	r1, r3
 8018370:	6878      	ldr	r0, [r7, #4]
 8018372:	f006 ff66 	bl	801f242 <USBD_LL_GetRxDataSize>
 8018376:	4602      	mov	r2, r0
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018384:	68db      	ldr	r3, [r3, #12]
 8018386:	68fa      	ldr	r2, [r7, #12]
 8018388:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801838c:	68fa      	ldr	r2, [r7, #12]
 801838e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8018392:	4611      	mov	r1, r2
 8018394:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8018396:	2300      	movs	r3, #0
}
 8018398:	4618      	mov	r0, r3
 801839a:	3710      	adds	r7, #16
 801839c:	46bd      	mov	sp, r7
 801839e:	bd80      	pop	{r7, pc}

080183a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b084      	sub	sp, #16
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80183ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d101      	bne.n	80183ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80183b6:	2303      	movs	r3, #3
 80183b8:	e01b      	b.n	80183f2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d015      	beq.n	80183f0 <USBD_CDC_EP0_RxReady+0x50>
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80183ca:	2bff      	cmp	r3, #255	; 0xff
 80183cc:	d010      	beq.n	80183f0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80183d4:	689b      	ldr	r3, [r3, #8]
 80183d6:	68fa      	ldr	r2, [r7, #12]
 80183d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80183dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80183de:	68fa      	ldr	r2, [r7, #12]
 80183e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80183e4:	b292      	uxth	r2, r2
 80183e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	22ff      	movs	r2, #255	; 0xff
 80183ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80183f0:	2300      	movs	r3, #0
}
 80183f2:	4618      	mov	r0, r3
 80183f4:	3710      	adds	r7, #16
 80183f6:	46bd      	mov	sp, r7
 80183f8:	bd80      	pop	{r7, pc}
	...

080183fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80183fc:	b480      	push	{r7}
 80183fe:	b083      	sub	sp, #12
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	2243      	movs	r2, #67	; 0x43
 8018408:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801840a:	4b03      	ldr	r3, [pc, #12]	; (8018418 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801840c:	4618      	mov	r0, r3
 801840e:	370c      	adds	r7, #12
 8018410:	46bd      	mov	sp, r7
 8018412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018416:	4770      	bx	lr
 8018418:	200000ac 	.word	0x200000ac

0801841c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801841c:	b480      	push	{r7}
 801841e:	b083      	sub	sp, #12
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	2243      	movs	r2, #67	; 0x43
 8018428:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801842a:	4b03      	ldr	r3, [pc, #12]	; (8018438 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801842c:	4618      	mov	r0, r3
 801842e:	370c      	adds	r7, #12
 8018430:	46bd      	mov	sp, r7
 8018432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018436:	4770      	bx	lr
 8018438:	20000068 	.word	0x20000068

0801843c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801843c:	b480      	push	{r7}
 801843e:	b083      	sub	sp, #12
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2243      	movs	r2, #67	; 0x43
 8018448:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801844a:	4b03      	ldr	r3, [pc, #12]	; (8018458 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801844c:	4618      	mov	r0, r3
 801844e:	370c      	adds	r7, #12
 8018450:	46bd      	mov	sp, r7
 8018452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018456:	4770      	bx	lr
 8018458:	200000f0 	.word	0x200000f0

0801845c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801845c:	b480      	push	{r7}
 801845e:	b083      	sub	sp, #12
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	220a      	movs	r2, #10
 8018468:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801846a:	4b03      	ldr	r3, [pc, #12]	; (8018478 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801846c:	4618      	mov	r0, r3
 801846e:	370c      	adds	r7, #12
 8018470:	46bd      	mov	sp, r7
 8018472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018476:	4770      	bx	lr
 8018478:	20000024 	.word	0x20000024

0801847c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801847c:	b480      	push	{r7}
 801847e:	b083      	sub	sp, #12
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
 8018484:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8018486:	683b      	ldr	r3, [r7, #0]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d101      	bne.n	8018490 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801848c:	2303      	movs	r3, #3
 801848e:	e004      	b.n	801849a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	683a      	ldr	r2, [r7, #0]
 8018494:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8018498:	2300      	movs	r3, #0
}
 801849a:	4618      	mov	r0, r3
 801849c:	370c      	adds	r7, #12
 801849e:	46bd      	mov	sp, r7
 80184a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a4:	4770      	bx	lr

080184a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80184a6:	b480      	push	{r7}
 80184a8:	b087      	sub	sp, #28
 80184aa:	af00      	add	r7, sp, #0
 80184ac:	60f8      	str	r0, [r7, #12]
 80184ae:	60b9      	str	r1, [r7, #8]
 80184b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80184b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80184ba:	697b      	ldr	r3, [r7, #20]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d101      	bne.n	80184c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80184c0:	2303      	movs	r3, #3
 80184c2:	e008      	b.n	80184d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80184c4:	697b      	ldr	r3, [r7, #20]
 80184c6:	68ba      	ldr	r2, [r7, #8]
 80184c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80184cc:	697b      	ldr	r3, [r7, #20]
 80184ce:	687a      	ldr	r2, [r7, #4]
 80184d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80184d4:	2300      	movs	r3, #0
}
 80184d6:	4618      	mov	r0, r3
 80184d8:	371c      	adds	r7, #28
 80184da:	46bd      	mov	sp, r7
 80184dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e0:	4770      	bx	lr

080184e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80184e2:	b480      	push	{r7}
 80184e4:	b085      	sub	sp, #20
 80184e6:	af00      	add	r7, sp, #0
 80184e8:	6078      	str	r0, [r7, #4]
 80184ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80184f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d101      	bne.n	80184fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80184fa:	2303      	movs	r3, #3
 80184fc:	e004      	b.n	8018508 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	683a      	ldr	r2, [r7, #0]
 8018502:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8018506:	2300      	movs	r3, #0
}
 8018508:	4618      	mov	r0, r3
 801850a:	3714      	adds	r7, #20
 801850c:	46bd      	mov	sp, r7
 801850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018512:	4770      	bx	lr

08018514 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b084      	sub	sp, #16
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018522:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8018524:	2301      	movs	r3, #1
 8018526:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801852e:	2b00      	cmp	r3, #0
 8018530:	d101      	bne.n	8018536 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018532:	2303      	movs	r3, #3
 8018534:	e01a      	b.n	801856c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8018536:	68bb      	ldr	r3, [r7, #8]
 8018538:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801853c:	2b00      	cmp	r3, #0
 801853e:	d114      	bne.n	801856a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8018540:	68bb      	ldr	r3, [r7, #8]
 8018542:	2201      	movs	r2, #1
 8018544:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8018548:	68bb      	ldr	r3, [r7, #8]
 801854a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8018552:	68bb      	ldr	r3, [r7, #8]
 8018554:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801855e:	2181      	movs	r1, #129	; 0x81
 8018560:	6878      	ldr	r0, [r7, #4]
 8018562:	f006 fe2c 	bl	801f1be <USBD_LL_Transmit>

    ret = USBD_OK;
 8018566:	2300      	movs	r3, #0
 8018568:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801856a:	7bfb      	ldrb	r3, [r7, #15]
}
 801856c:	4618      	mov	r0, r3
 801856e:	3710      	adds	r7, #16
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}

08018574 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b084      	sub	sp, #16
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018582:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801858a:	2b00      	cmp	r3, #0
 801858c:	d101      	bne.n	8018592 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801858e:	2303      	movs	r3, #3
 8018590:	e016      	b.n	80185c0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	7c1b      	ldrb	r3, [r3, #16]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d109      	bne.n	80185ae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80185a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80185a4:	2101      	movs	r1, #1
 80185a6:	6878      	ldr	r0, [r7, #4]
 80185a8:	f006 fe2a 	bl	801f200 <USBD_LL_PrepareReceive>
 80185ac:	e007      	b.n	80185be <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80185b4:	2340      	movs	r3, #64	; 0x40
 80185b6:	2101      	movs	r1, #1
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f006 fe21 	bl	801f200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80185be:	2300      	movs	r3, #0
}
 80185c0:	4618      	mov	r0, r3
 80185c2:	3710      	adds	r7, #16
 80185c4:	46bd      	mov	sp, r7
 80185c6:	bd80      	pop	{r7, pc}

080185c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b086      	sub	sp, #24
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	60f8      	str	r0, [r7, #12]
 80185d0:	60b9      	str	r1, [r7, #8]
 80185d2:	4613      	mov	r3, r2
 80185d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d101      	bne.n	80185e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80185dc:	2303      	movs	r3, #3
 80185de:	e01f      	b.n	8018620 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	2200      	movs	r2, #0
 80185e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	2200      	movs	r2, #0
 80185ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	2200      	movs	r2, #0
 80185f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80185f8:	68bb      	ldr	r3, [r7, #8]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d003      	beq.n	8018606 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	68ba      	ldr	r2, [r7, #8]
 8018602:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	2201      	movs	r2, #1
 801860a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	79fa      	ldrb	r2, [r7, #7]
 8018612:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8018614:	68f8      	ldr	r0, [r7, #12]
 8018616:	f006 fc89 	bl	801ef2c <USBD_LL_Init>
 801861a:	4603      	mov	r3, r0
 801861c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801861e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018620:	4618      	mov	r0, r3
 8018622:	3718      	adds	r7, #24
 8018624:	46bd      	mov	sp, r7
 8018626:	bd80      	pop	{r7, pc}

08018628 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b084      	sub	sp, #16
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
 8018630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018632:	2300      	movs	r3, #0
 8018634:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d101      	bne.n	8018640 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801863c:	2303      	movs	r3, #3
 801863e:	e016      	b.n	801866e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	683a      	ldr	r2, [r7, #0]
 8018644:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018650:	2b00      	cmp	r3, #0
 8018652:	d00b      	beq.n	801866c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801865c:	f107 020e 	add.w	r2, r7, #14
 8018660:	4610      	mov	r0, r2
 8018662:	4798      	blx	r3
 8018664:	4602      	mov	r2, r0
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801866c:	2300      	movs	r3, #0
}
 801866e:	4618      	mov	r0, r3
 8018670:	3710      	adds	r7, #16
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}

08018676 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8018676:	b580      	push	{r7, lr}
 8018678:	b082      	sub	sp, #8
 801867a:	af00      	add	r7, sp, #0
 801867c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	f006 fcb4 	bl	801efec <USBD_LL_Start>
 8018684:	4603      	mov	r3, r0
}
 8018686:	4618      	mov	r0, r3
 8018688:	3708      	adds	r7, #8
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}

0801868e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801868e:	b480      	push	{r7}
 8018690:	b083      	sub	sp, #12
 8018692:	af00      	add	r7, sp, #0
 8018694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018696:	2300      	movs	r3, #0
}
 8018698:	4618      	mov	r0, r3
 801869a:	370c      	adds	r7, #12
 801869c:	46bd      	mov	sp, r7
 801869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a2:	4770      	bx	lr

080186a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b084      	sub	sp, #16
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
 80186ac:	460b      	mov	r3, r1
 80186ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80186b0:	2303      	movs	r3, #3
 80186b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d009      	beq.n	80186d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	78fa      	ldrb	r2, [r7, #3]
 80186c8:	4611      	mov	r1, r2
 80186ca:	6878      	ldr	r0, [r7, #4]
 80186cc:	4798      	blx	r3
 80186ce:	4603      	mov	r3, r0
 80186d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80186d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80186d4:	4618      	mov	r0, r3
 80186d6:	3710      	adds	r7, #16
 80186d8:	46bd      	mov	sp, r7
 80186da:	bd80      	pop	{r7, pc}

080186dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b082      	sub	sp, #8
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
 80186e4:	460b      	mov	r3, r1
 80186e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d007      	beq.n	8018702 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186f8:	685b      	ldr	r3, [r3, #4]
 80186fa:	78fa      	ldrb	r2, [r7, #3]
 80186fc:	4611      	mov	r1, r2
 80186fe:	6878      	ldr	r0, [r7, #4]
 8018700:	4798      	blx	r3
  }

  return USBD_OK;
 8018702:	2300      	movs	r3, #0
}
 8018704:	4618      	mov	r0, r3
 8018706:	3708      	adds	r7, #8
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}

0801870c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
 8018714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801871c:	6839      	ldr	r1, [r7, #0]
 801871e:	4618      	mov	r0, r3
 8018720:	f000 ff46 	bl	80195b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	2201      	movs	r2, #1
 8018728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8018732:	461a      	mov	r2, r3
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018740:	f003 031f 	and.w	r3, r3, #31
 8018744:	2b02      	cmp	r3, #2
 8018746:	d01a      	beq.n	801877e <USBD_LL_SetupStage+0x72>
 8018748:	2b02      	cmp	r3, #2
 801874a:	d822      	bhi.n	8018792 <USBD_LL_SetupStage+0x86>
 801874c:	2b00      	cmp	r3, #0
 801874e:	d002      	beq.n	8018756 <USBD_LL_SetupStage+0x4a>
 8018750:	2b01      	cmp	r3, #1
 8018752:	d00a      	beq.n	801876a <USBD_LL_SetupStage+0x5e>
 8018754:	e01d      	b.n	8018792 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801875c:	4619      	mov	r1, r3
 801875e:	6878      	ldr	r0, [r7, #4]
 8018760:	f000 f9ee 	bl	8018b40 <USBD_StdDevReq>
 8018764:	4603      	mov	r3, r0
 8018766:	73fb      	strb	r3, [r7, #15]
      break;
 8018768:	e020      	b.n	80187ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018770:	4619      	mov	r1, r3
 8018772:	6878      	ldr	r0, [r7, #4]
 8018774:	f000 fa52 	bl	8018c1c <USBD_StdItfReq>
 8018778:	4603      	mov	r3, r0
 801877a:	73fb      	strb	r3, [r7, #15]
      break;
 801877c:	e016      	b.n	80187ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018784:	4619      	mov	r1, r3
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f000 fa91 	bl	8018cae <USBD_StdEPReq>
 801878c:	4603      	mov	r3, r0
 801878e:	73fb      	strb	r3, [r7, #15]
      break;
 8018790:	e00c      	b.n	80187ac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018798:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801879c:	b2db      	uxtb	r3, r3
 801879e:	4619      	mov	r1, r3
 80187a0:	6878      	ldr	r0, [r7, #4]
 80187a2:	f006 fc83 	bl	801f0ac <USBD_LL_StallEP>
 80187a6:	4603      	mov	r3, r0
 80187a8:	73fb      	strb	r3, [r7, #15]
      break;
 80187aa:	bf00      	nop
  }

  return ret;
 80187ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80187ae:	4618      	mov	r0, r3
 80187b0:	3710      	adds	r7, #16
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}

080187b6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80187b6:	b580      	push	{r7, lr}
 80187b8:	b086      	sub	sp, #24
 80187ba:	af00      	add	r7, sp, #0
 80187bc:	60f8      	str	r0, [r7, #12]
 80187be:	460b      	mov	r3, r1
 80187c0:	607a      	str	r2, [r7, #4]
 80187c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80187c4:	7afb      	ldrb	r3, [r7, #11]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d138      	bne.n	801883c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80187d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80187d8:	2b03      	cmp	r3, #3
 80187da:	d14a      	bne.n	8018872 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80187dc:	693b      	ldr	r3, [r7, #16]
 80187de:	689a      	ldr	r2, [r3, #8]
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	68db      	ldr	r3, [r3, #12]
 80187e4:	429a      	cmp	r2, r3
 80187e6:	d913      	bls.n	8018810 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80187e8:	693b      	ldr	r3, [r7, #16]
 80187ea:	689a      	ldr	r2, [r3, #8]
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	68db      	ldr	r3, [r3, #12]
 80187f0:	1ad2      	subs	r2, r2, r3
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80187f6:	693b      	ldr	r3, [r7, #16]
 80187f8:	68da      	ldr	r2, [r3, #12]
 80187fa:	693b      	ldr	r3, [r7, #16]
 80187fc:	689b      	ldr	r3, [r3, #8]
 80187fe:	4293      	cmp	r3, r2
 8018800:	bf28      	it	cs
 8018802:	4613      	movcs	r3, r2
 8018804:	461a      	mov	r2, r3
 8018806:	6879      	ldr	r1, [r7, #4]
 8018808:	68f8      	ldr	r0, [r7, #12]
 801880a:	f000 ffc5 	bl	8019798 <USBD_CtlContinueRx>
 801880e:	e030      	b.n	8018872 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018816:	b2db      	uxtb	r3, r3
 8018818:	2b03      	cmp	r3, #3
 801881a:	d10b      	bne.n	8018834 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018822:	691b      	ldr	r3, [r3, #16]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d005      	beq.n	8018834 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801882e:	691b      	ldr	r3, [r3, #16]
 8018830:	68f8      	ldr	r0, [r7, #12]
 8018832:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8018834:	68f8      	ldr	r0, [r7, #12]
 8018836:	f000 ffc0 	bl	80197ba <USBD_CtlSendStatus>
 801883a:	e01a      	b.n	8018872 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018842:	b2db      	uxtb	r3, r3
 8018844:	2b03      	cmp	r3, #3
 8018846:	d114      	bne.n	8018872 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801884e:	699b      	ldr	r3, [r3, #24]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d00e      	beq.n	8018872 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801885a:	699b      	ldr	r3, [r3, #24]
 801885c:	7afa      	ldrb	r2, [r7, #11]
 801885e:	4611      	mov	r1, r2
 8018860:	68f8      	ldr	r0, [r7, #12]
 8018862:	4798      	blx	r3
 8018864:	4603      	mov	r3, r0
 8018866:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8018868:	7dfb      	ldrb	r3, [r7, #23]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d001      	beq.n	8018872 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801886e:	7dfb      	ldrb	r3, [r7, #23]
 8018870:	e000      	b.n	8018874 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8018872:	2300      	movs	r3, #0
}
 8018874:	4618      	mov	r0, r3
 8018876:	3718      	adds	r7, #24
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}

0801887c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b086      	sub	sp, #24
 8018880:	af00      	add	r7, sp, #0
 8018882:	60f8      	str	r0, [r7, #12]
 8018884:	460b      	mov	r3, r1
 8018886:	607a      	str	r2, [r7, #4]
 8018888:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801888a:	7afb      	ldrb	r3, [r7, #11]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d16b      	bne.n	8018968 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	3314      	adds	r3, #20
 8018894:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801889c:	2b02      	cmp	r3, #2
 801889e:	d156      	bne.n	801894e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80188a0:	693b      	ldr	r3, [r7, #16]
 80188a2:	689a      	ldr	r2, [r3, #8]
 80188a4:	693b      	ldr	r3, [r7, #16]
 80188a6:	68db      	ldr	r3, [r3, #12]
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d914      	bls.n	80188d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80188ac:	693b      	ldr	r3, [r7, #16]
 80188ae:	689a      	ldr	r2, [r3, #8]
 80188b0:	693b      	ldr	r3, [r7, #16]
 80188b2:	68db      	ldr	r3, [r3, #12]
 80188b4:	1ad2      	subs	r2, r2, r3
 80188b6:	693b      	ldr	r3, [r7, #16]
 80188b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80188ba:	693b      	ldr	r3, [r7, #16]
 80188bc:	689b      	ldr	r3, [r3, #8]
 80188be:	461a      	mov	r2, r3
 80188c0:	6879      	ldr	r1, [r7, #4]
 80188c2:	68f8      	ldr	r0, [r7, #12]
 80188c4:	f000 ff3a 	bl	801973c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80188c8:	2300      	movs	r3, #0
 80188ca:	2200      	movs	r2, #0
 80188cc:	2100      	movs	r1, #0
 80188ce:	68f8      	ldr	r0, [r7, #12]
 80188d0:	f006 fc96 	bl	801f200 <USBD_LL_PrepareReceive>
 80188d4:	e03b      	b.n	801894e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80188d6:	693b      	ldr	r3, [r7, #16]
 80188d8:	68da      	ldr	r2, [r3, #12]
 80188da:	693b      	ldr	r3, [r7, #16]
 80188dc:	689b      	ldr	r3, [r3, #8]
 80188de:	429a      	cmp	r2, r3
 80188e0:	d11c      	bne.n	801891c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80188e2:	693b      	ldr	r3, [r7, #16]
 80188e4:	685a      	ldr	r2, [r3, #4]
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80188ea:	429a      	cmp	r2, r3
 80188ec:	d316      	bcc.n	801891c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80188ee:	693b      	ldr	r3, [r7, #16]
 80188f0:	685a      	ldr	r2, [r3, #4]
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80188f8:	429a      	cmp	r2, r3
 80188fa:	d20f      	bcs.n	801891c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80188fc:	2200      	movs	r2, #0
 80188fe:	2100      	movs	r1, #0
 8018900:	68f8      	ldr	r0, [r7, #12]
 8018902:	f000 ff1b 	bl	801973c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	2200      	movs	r2, #0
 801890a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801890e:	2300      	movs	r3, #0
 8018910:	2200      	movs	r2, #0
 8018912:	2100      	movs	r1, #0
 8018914:	68f8      	ldr	r0, [r7, #12]
 8018916:	f006 fc73 	bl	801f200 <USBD_LL_PrepareReceive>
 801891a:	e018      	b.n	801894e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018922:	b2db      	uxtb	r3, r3
 8018924:	2b03      	cmp	r3, #3
 8018926:	d10b      	bne.n	8018940 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801892e:	68db      	ldr	r3, [r3, #12]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d005      	beq.n	8018940 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801893a:	68db      	ldr	r3, [r3, #12]
 801893c:	68f8      	ldr	r0, [r7, #12]
 801893e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018940:	2180      	movs	r1, #128	; 0x80
 8018942:	68f8      	ldr	r0, [r7, #12]
 8018944:	f006 fbb2 	bl	801f0ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8018948:	68f8      	ldr	r0, [r7, #12]
 801894a:	f000 ff49 	bl	80197e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8018954:	2b01      	cmp	r3, #1
 8018956:	d122      	bne.n	801899e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8018958:	68f8      	ldr	r0, [r7, #12]
 801895a:	f7ff fe98 	bl	801868e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	2200      	movs	r2, #0
 8018962:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8018966:	e01a      	b.n	801899e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801896e:	b2db      	uxtb	r3, r3
 8018970:	2b03      	cmp	r3, #3
 8018972:	d114      	bne.n	801899e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801897a:	695b      	ldr	r3, [r3, #20]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d00e      	beq.n	801899e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018986:	695b      	ldr	r3, [r3, #20]
 8018988:	7afa      	ldrb	r2, [r7, #11]
 801898a:	4611      	mov	r1, r2
 801898c:	68f8      	ldr	r0, [r7, #12]
 801898e:	4798      	blx	r3
 8018990:	4603      	mov	r3, r0
 8018992:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8018994:	7dfb      	ldrb	r3, [r7, #23]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d001      	beq.n	801899e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801899a:	7dfb      	ldrb	r3, [r7, #23]
 801899c:	e000      	b.n	80189a0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801899e:	2300      	movs	r3, #0
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3718      	adds	r7, #24
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}

080189a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	2201      	movs	r2, #1
 80189b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	2200      	movs	r2, #0
 80189bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	2200      	movs	r2, #0
 80189c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	2200      	movs	r2, #0
 80189ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d101      	bne.n	80189dc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80189d8:	2303      	movs	r3, #3
 80189da:	e02f      	b.n	8018a3c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d00f      	beq.n	8018a06 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189ec:	685b      	ldr	r3, [r3, #4]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d009      	beq.n	8018a06 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80189f8:	685b      	ldr	r3, [r3, #4]
 80189fa:	687a      	ldr	r2, [r7, #4]
 80189fc:	6852      	ldr	r2, [r2, #4]
 80189fe:	b2d2      	uxtb	r2, r2
 8018a00:	4611      	mov	r1, r2
 8018a02:	6878      	ldr	r0, [r7, #4]
 8018a04:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018a06:	2340      	movs	r3, #64	; 0x40
 8018a08:	2200      	movs	r2, #0
 8018a0a:	2100      	movs	r1, #0
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f006 fb08 	bl	801f022 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	2201      	movs	r2, #1
 8018a16:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	2240      	movs	r2, #64	; 0x40
 8018a1e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018a22:	2340      	movs	r3, #64	; 0x40
 8018a24:	2200      	movs	r2, #0
 8018a26:	2180      	movs	r1, #128	; 0x80
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f006 fafa 	bl	801f022 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	2201      	movs	r2, #1
 8018a32:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	2240      	movs	r2, #64	; 0x40
 8018a38:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8018a3a:	2300      	movs	r3, #0
}
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	3708      	adds	r7, #8
 8018a40:	46bd      	mov	sp, r7
 8018a42:	bd80      	pop	{r7, pc}

08018a44 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018a44:	b480      	push	{r7}
 8018a46:	b083      	sub	sp, #12
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	460b      	mov	r3, r1
 8018a4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	78fa      	ldrb	r2, [r7, #3]
 8018a54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018a56:	2300      	movs	r3, #0
}
 8018a58:	4618      	mov	r0, r3
 8018a5a:	370c      	adds	r7, #12
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a62:	4770      	bx	lr

08018a64 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018a64:	b480      	push	{r7}
 8018a66:	b083      	sub	sp, #12
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a72:	b2da      	uxtb	r2, r3
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2204      	movs	r2, #4
 8018a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8018a82:	2300      	movs	r3, #0
}
 8018a84:	4618      	mov	r0, r3
 8018a86:	370c      	adds	r7, #12
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8e:	4770      	bx	lr

08018a90 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018a90:	b480      	push	{r7}
 8018a92:	b083      	sub	sp, #12
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a9e:	b2db      	uxtb	r3, r3
 8018aa0:	2b04      	cmp	r3, #4
 8018aa2:	d106      	bne.n	8018ab2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8018aaa:	b2da      	uxtb	r2, r3
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8018ab2:	2300      	movs	r3, #0
}
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	370c      	adds	r7, #12
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018abe:	4770      	bx	lr

08018ac0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b082      	sub	sp, #8
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d101      	bne.n	8018ad6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8018ad2:	2303      	movs	r3, #3
 8018ad4:	e012      	b.n	8018afc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018adc:	b2db      	uxtb	r3, r3
 8018ade:	2b03      	cmp	r3, #3
 8018ae0:	d10b      	bne.n	8018afa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018ae8:	69db      	ldr	r3, [r3, #28]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d005      	beq.n	8018afa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018af4:	69db      	ldr	r3, [r3, #28]
 8018af6:	6878      	ldr	r0, [r7, #4]
 8018af8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018afa:	2300      	movs	r3, #0
}
 8018afc:	4618      	mov	r0, r3
 8018afe:	3708      	adds	r7, #8
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}

08018b04 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018b04:	b480      	push	{r7}
 8018b06:	b087      	sub	sp, #28
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018b10:	697b      	ldr	r3, [r7, #20]
 8018b12:	781b      	ldrb	r3, [r3, #0]
 8018b14:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018b16:	697b      	ldr	r3, [r7, #20]
 8018b18:	3301      	adds	r3, #1
 8018b1a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018b1c:	697b      	ldr	r3, [r7, #20]
 8018b1e:	781b      	ldrb	r3, [r3, #0]
 8018b20:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018b22:	8a3b      	ldrh	r3, [r7, #16]
 8018b24:	021b      	lsls	r3, r3, #8
 8018b26:	b21a      	sxth	r2, r3
 8018b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018b2c:	4313      	orrs	r3, r2
 8018b2e:	b21b      	sxth	r3, r3
 8018b30:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018b32:	89fb      	ldrh	r3, [r7, #14]
}
 8018b34:	4618      	mov	r0, r3
 8018b36:	371c      	adds	r7, #28
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3e:	4770      	bx	lr

08018b40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b084      	sub	sp, #16
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
 8018b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018b4e:	683b      	ldr	r3, [r7, #0]
 8018b50:	781b      	ldrb	r3, [r3, #0]
 8018b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018b56:	2b40      	cmp	r3, #64	; 0x40
 8018b58:	d005      	beq.n	8018b66 <USBD_StdDevReq+0x26>
 8018b5a:	2b40      	cmp	r3, #64	; 0x40
 8018b5c:	d853      	bhi.n	8018c06 <USBD_StdDevReq+0xc6>
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d00b      	beq.n	8018b7a <USBD_StdDevReq+0x3a>
 8018b62:	2b20      	cmp	r3, #32
 8018b64:	d14f      	bne.n	8018c06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b6c:	689b      	ldr	r3, [r3, #8]
 8018b6e:	6839      	ldr	r1, [r7, #0]
 8018b70:	6878      	ldr	r0, [r7, #4]
 8018b72:	4798      	blx	r3
 8018b74:	4603      	mov	r3, r0
 8018b76:	73fb      	strb	r3, [r7, #15]
      break;
 8018b78:	e04a      	b.n	8018c10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018b7a:	683b      	ldr	r3, [r7, #0]
 8018b7c:	785b      	ldrb	r3, [r3, #1]
 8018b7e:	2b09      	cmp	r3, #9
 8018b80:	d83b      	bhi.n	8018bfa <USBD_StdDevReq+0xba>
 8018b82:	a201      	add	r2, pc, #4	; (adr r2, 8018b88 <USBD_StdDevReq+0x48>)
 8018b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b88:	08018bdd 	.word	0x08018bdd
 8018b8c:	08018bf1 	.word	0x08018bf1
 8018b90:	08018bfb 	.word	0x08018bfb
 8018b94:	08018be7 	.word	0x08018be7
 8018b98:	08018bfb 	.word	0x08018bfb
 8018b9c:	08018bbb 	.word	0x08018bbb
 8018ba0:	08018bb1 	.word	0x08018bb1
 8018ba4:	08018bfb 	.word	0x08018bfb
 8018ba8:	08018bd3 	.word	0x08018bd3
 8018bac:	08018bc5 	.word	0x08018bc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018bb0:	6839      	ldr	r1, [r7, #0]
 8018bb2:	6878      	ldr	r0, [r7, #4]
 8018bb4:	f000 f9de 	bl	8018f74 <USBD_GetDescriptor>
          break;
 8018bb8:	e024      	b.n	8018c04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018bba:	6839      	ldr	r1, [r7, #0]
 8018bbc:	6878      	ldr	r0, [r7, #4]
 8018bbe:	f000 fb6d 	bl	801929c <USBD_SetAddress>
          break;
 8018bc2:	e01f      	b.n	8018c04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018bc4:	6839      	ldr	r1, [r7, #0]
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f000 fbac 	bl	8019324 <USBD_SetConfig>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	73fb      	strb	r3, [r7, #15]
          break;
 8018bd0:	e018      	b.n	8018c04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018bd2:	6839      	ldr	r1, [r7, #0]
 8018bd4:	6878      	ldr	r0, [r7, #4]
 8018bd6:	f000 fc4b 	bl	8019470 <USBD_GetConfig>
          break;
 8018bda:	e013      	b.n	8018c04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018bdc:	6839      	ldr	r1, [r7, #0]
 8018bde:	6878      	ldr	r0, [r7, #4]
 8018be0:	f000 fc7c 	bl	80194dc <USBD_GetStatus>
          break;
 8018be4:	e00e      	b.n	8018c04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018be6:	6839      	ldr	r1, [r7, #0]
 8018be8:	6878      	ldr	r0, [r7, #4]
 8018bea:	f000 fcab 	bl	8019544 <USBD_SetFeature>
          break;
 8018bee:	e009      	b.n	8018c04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018bf0:	6839      	ldr	r1, [r7, #0]
 8018bf2:	6878      	ldr	r0, [r7, #4]
 8018bf4:	f000 fcba 	bl	801956c <USBD_ClrFeature>
          break;
 8018bf8:	e004      	b.n	8018c04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8018bfa:	6839      	ldr	r1, [r7, #0]
 8018bfc:	6878      	ldr	r0, [r7, #4]
 8018bfe:	f000 fd11 	bl	8019624 <USBD_CtlError>
          break;
 8018c02:	bf00      	nop
      }
      break;
 8018c04:	e004      	b.n	8018c10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8018c06:	6839      	ldr	r1, [r7, #0]
 8018c08:	6878      	ldr	r0, [r7, #4]
 8018c0a:	f000 fd0b 	bl	8019624 <USBD_CtlError>
      break;
 8018c0e:	bf00      	nop
  }

  return ret;
 8018c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c12:	4618      	mov	r0, r3
 8018c14:	3710      	adds	r7, #16
 8018c16:	46bd      	mov	sp, r7
 8018c18:	bd80      	pop	{r7, pc}
 8018c1a:	bf00      	nop

08018c1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b084      	sub	sp, #16
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
 8018c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018c26:	2300      	movs	r3, #0
 8018c28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	781b      	ldrb	r3, [r3, #0]
 8018c2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018c32:	2b40      	cmp	r3, #64	; 0x40
 8018c34:	d005      	beq.n	8018c42 <USBD_StdItfReq+0x26>
 8018c36:	2b40      	cmp	r3, #64	; 0x40
 8018c38:	d82f      	bhi.n	8018c9a <USBD_StdItfReq+0x7e>
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d001      	beq.n	8018c42 <USBD_StdItfReq+0x26>
 8018c3e:	2b20      	cmp	r3, #32
 8018c40:	d12b      	bne.n	8018c9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018c48:	b2db      	uxtb	r3, r3
 8018c4a:	3b01      	subs	r3, #1
 8018c4c:	2b02      	cmp	r3, #2
 8018c4e:	d81d      	bhi.n	8018c8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018c50:	683b      	ldr	r3, [r7, #0]
 8018c52:	889b      	ldrh	r3, [r3, #4]
 8018c54:	b2db      	uxtb	r3, r3
 8018c56:	2b01      	cmp	r3, #1
 8018c58:	d813      	bhi.n	8018c82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c60:	689b      	ldr	r3, [r3, #8]
 8018c62:	6839      	ldr	r1, [r7, #0]
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	4798      	blx	r3
 8018c68:	4603      	mov	r3, r0
 8018c6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018c6c:	683b      	ldr	r3, [r7, #0]
 8018c6e:	88db      	ldrh	r3, [r3, #6]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d110      	bne.n	8018c96 <USBD_StdItfReq+0x7a>
 8018c74:	7bfb      	ldrb	r3, [r7, #15]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d10d      	bne.n	8018c96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018c7a:	6878      	ldr	r0, [r7, #4]
 8018c7c:	f000 fd9d 	bl	80197ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018c80:	e009      	b.n	8018c96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8018c82:	6839      	ldr	r1, [r7, #0]
 8018c84:	6878      	ldr	r0, [r7, #4]
 8018c86:	f000 fccd 	bl	8019624 <USBD_CtlError>
          break;
 8018c8a:	e004      	b.n	8018c96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8018c8c:	6839      	ldr	r1, [r7, #0]
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	f000 fcc8 	bl	8019624 <USBD_CtlError>
          break;
 8018c94:	e000      	b.n	8018c98 <USBD_StdItfReq+0x7c>
          break;
 8018c96:	bf00      	nop
      }
      break;
 8018c98:	e004      	b.n	8018ca4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8018c9a:	6839      	ldr	r1, [r7, #0]
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	f000 fcc1 	bl	8019624 <USBD_CtlError>
      break;
 8018ca2:	bf00      	nop
  }

  return ret;
 8018ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	3710      	adds	r7, #16
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}

08018cae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018cae:	b580      	push	{r7, lr}
 8018cb0:	b084      	sub	sp, #16
 8018cb2:	af00      	add	r7, sp, #0
 8018cb4:	6078      	str	r0, [r7, #4]
 8018cb6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8018cb8:	2300      	movs	r3, #0
 8018cba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	889b      	ldrh	r3, [r3, #4]
 8018cc0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	781b      	ldrb	r3, [r3, #0]
 8018cc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018cca:	2b40      	cmp	r3, #64	; 0x40
 8018ccc:	d007      	beq.n	8018cde <USBD_StdEPReq+0x30>
 8018cce:	2b40      	cmp	r3, #64	; 0x40
 8018cd0:	f200 8145 	bhi.w	8018f5e <USBD_StdEPReq+0x2b0>
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d00c      	beq.n	8018cf2 <USBD_StdEPReq+0x44>
 8018cd8:	2b20      	cmp	r3, #32
 8018cda:	f040 8140 	bne.w	8018f5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018ce4:	689b      	ldr	r3, [r3, #8]
 8018ce6:	6839      	ldr	r1, [r7, #0]
 8018ce8:	6878      	ldr	r0, [r7, #4]
 8018cea:	4798      	blx	r3
 8018cec:	4603      	mov	r3, r0
 8018cee:	73fb      	strb	r3, [r7, #15]
      break;
 8018cf0:	e13a      	b.n	8018f68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	785b      	ldrb	r3, [r3, #1]
 8018cf6:	2b03      	cmp	r3, #3
 8018cf8:	d007      	beq.n	8018d0a <USBD_StdEPReq+0x5c>
 8018cfa:	2b03      	cmp	r3, #3
 8018cfc:	f300 8129 	bgt.w	8018f52 <USBD_StdEPReq+0x2a4>
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d07f      	beq.n	8018e04 <USBD_StdEPReq+0x156>
 8018d04:	2b01      	cmp	r3, #1
 8018d06:	d03c      	beq.n	8018d82 <USBD_StdEPReq+0xd4>
 8018d08:	e123      	b.n	8018f52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018d10:	b2db      	uxtb	r3, r3
 8018d12:	2b02      	cmp	r3, #2
 8018d14:	d002      	beq.n	8018d1c <USBD_StdEPReq+0x6e>
 8018d16:	2b03      	cmp	r3, #3
 8018d18:	d016      	beq.n	8018d48 <USBD_StdEPReq+0x9a>
 8018d1a:	e02c      	b.n	8018d76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018d1c:	7bbb      	ldrb	r3, [r7, #14]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d00d      	beq.n	8018d3e <USBD_StdEPReq+0x90>
 8018d22:	7bbb      	ldrb	r3, [r7, #14]
 8018d24:	2b80      	cmp	r3, #128	; 0x80
 8018d26:	d00a      	beq.n	8018d3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018d28:	7bbb      	ldrb	r3, [r7, #14]
 8018d2a:	4619      	mov	r1, r3
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f006 f9bd 	bl	801f0ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018d32:	2180      	movs	r1, #128	; 0x80
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	f006 f9b9 	bl	801f0ac <USBD_LL_StallEP>
 8018d3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018d3c:	e020      	b.n	8018d80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8018d3e:	6839      	ldr	r1, [r7, #0]
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f000 fc6f 	bl	8019624 <USBD_CtlError>
              break;
 8018d46:	e01b      	b.n	8018d80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	885b      	ldrh	r3, [r3, #2]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d10e      	bne.n	8018d6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018d50:	7bbb      	ldrb	r3, [r7, #14]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d00b      	beq.n	8018d6e <USBD_StdEPReq+0xc0>
 8018d56:	7bbb      	ldrb	r3, [r7, #14]
 8018d58:	2b80      	cmp	r3, #128	; 0x80
 8018d5a:	d008      	beq.n	8018d6e <USBD_StdEPReq+0xc0>
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	88db      	ldrh	r3, [r3, #6]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d104      	bne.n	8018d6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8018d64:	7bbb      	ldrb	r3, [r7, #14]
 8018d66:	4619      	mov	r1, r3
 8018d68:	6878      	ldr	r0, [r7, #4]
 8018d6a:	f006 f99f 	bl	801f0ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f000 fd23 	bl	80197ba <USBD_CtlSendStatus>

              break;
 8018d74:	e004      	b.n	8018d80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8018d76:	6839      	ldr	r1, [r7, #0]
 8018d78:	6878      	ldr	r0, [r7, #4]
 8018d7a:	f000 fc53 	bl	8019624 <USBD_CtlError>
              break;
 8018d7e:	bf00      	nop
          }
          break;
 8018d80:	e0ec      	b.n	8018f5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	2b02      	cmp	r3, #2
 8018d8c:	d002      	beq.n	8018d94 <USBD_StdEPReq+0xe6>
 8018d8e:	2b03      	cmp	r3, #3
 8018d90:	d016      	beq.n	8018dc0 <USBD_StdEPReq+0x112>
 8018d92:	e030      	b.n	8018df6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018d94:	7bbb      	ldrb	r3, [r7, #14]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d00d      	beq.n	8018db6 <USBD_StdEPReq+0x108>
 8018d9a:	7bbb      	ldrb	r3, [r7, #14]
 8018d9c:	2b80      	cmp	r3, #128	; 0x80
 8018d9e:	d00a      	beq.n	8018db6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018da0:	7bbb      	ldrb	r3, [r7, #14]
 8018da2:	4619      	mov	r1, r3
 8018da4:	6878      	ldr	r0, [r7, #4]
 8018da6:	f006 f981 	bl	801f0ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018daa:	2180      	movs	r1, #128	; 0x80
 8018dac:	6878      	ldr	r0, [r7, #4]
 8018dae:	f006 f97d 	bl	801f0ac <USBD_LL_StallEP>
 8018db2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018db4:	e025      	b.n	8018e02 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8018db6:	6839      	ldr	r1, [r7, #0]
 8018db8:	6878      	ldr	r0, [r7, #4]
 8018dba:	f000 fc33 	bl	8019624 <USBD_CtlError>
              break;
 8018dbe:	e020      	b.n	8018e02 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018dc0:	683b      	ldr	r3, [r7, #0]
 8018dc2:	885b      	ldrh	r3, [r3, #2]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d11b      	bne.n	8018e00 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018dc8:	7bbb      	ldrb	r3, [r7, #14]
 8018dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d004      	beq.n	8018ddc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018dd2:	7bbb      	ldrb	r3, [r7, #14]
 8018dd4:	4619      	mov	r1, r3
 8018dd6:	6878      	ldr	r0, [r7, #4]
 8018dd8:	f006 f987 	bl	801f0ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018ddc:	6878      	ldr	r0, [r7, #4]
 8018dde:	f000 fcec 	bl	80197ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018de8:	689b      	ldr	r3, [r3, #8]
 8018dea:	6839      	ldr	r1, [r7, #0]
 8018dec:	6878      	ldr	r0, [r7, #4]
 8018dee:	4798      	blx	r3
 8018df0:	4603      	mov	r3, r0
 8018df2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8018df4:	e004      	b.n	8018e00 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8018df6:	6839      	ldr	r1, [r7, #0]
 8018df8:	6878      	ldr	r0, [r7, #4]
 8018dfa:	f000 fc13 	bl	8019624 <USBD_CtlError>
              break;
 8018dfe:	e000      	b.n	8018e02 <USBD_StdEPReq+0x154>
              break;
 8018e00:	bf00      	nop
          }
          break;
 8018e02:	e0ab      	b.n	8018f5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018e0a:	b2db      	uxtb	r3, r3
 8018e0c:	2b02      	cmp	r3, #2
 8018e0e:	d002      	beq.n	8018e16 <USBD_StdEPReq+0x168>
 8018e10:	2b03      	cmp	r3, #3
 8018e12:	d032      	beq.n	8018e7a <USBD_StdEPReq+0x1cc>
 8018e14:	e097      	b.n	8018f46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018e16:	7bbb      	ldrb	r3, [r7, #14]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d007      	beq.n	8018e2c <USBD_StdEPReq+0x17e>
 8018e1c:	7bbb      	ldrb	r3, [r7, #14]
 8018e1e:	2b80      	cmp	r3, #128	; 0x80
 8018e20:	d004      	beq.n	8018e2c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8018e22:	6839      	ldr	r1, [r7, #0]
 8018e24:	6878      	ldr	r0, [r7, #4]
 8018e26:	f000 fbfd 	bl	8019624 <USBD_CtlError>
                break;
 8018e2a:	e091      	b.n	8018f50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	da0b      	bge.n	8018e4c <USBD_StdEPReq+0x19e>
 8018e34:	7bbb      	ldrb	r3, [r7, #14]
 8018e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	009b      	lsls	r3, r3, #2
 8018e3e:	4413      	add	r3, r2
 8018e40:	009b      	lsls	r3, r3, #2
 8018e42:	3310      	adds	r3, #16
 8018e44:	687a      	ldr	r2, [r7, #4]
 8018e46:	4413      	add	r3, r2
 8018e48:	3304      	adds	r3, #4
 8018e4a:	e00b      	b.n	8018e64 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018e4c:	7bbb      	ldrb	r3, [r7, #14]
 8018e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018e52:	4613      	mov	r3, r2
 8018e54:	009b      	lsls	r3, r3, #2
 8018e56:	4413      	add	r3, r2
 8018e58:	009b      	lsls	r3, r3, #2
 8018e5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018e5e:	687a      	ldr	r2, [r7, #4]
 8018e60:	4413      	add	r3, r2
 8018e62:	3304      	adds	r3, #4
 8018e64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8018e66:	68bb      	ldr	r3, [r7, #8]
 8018e68:	2200      	movs	r2, #0
 8018e6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	2202      	movs	r2, #2
 8018e70:	4619      	mov	r1, r3
 8018e72:	6878      	ldr	r0, [r7, #4]
 8018e74:	f000 fc47 	bl	8019706 <USBD_CtlSendData>
              break;
 8018e78:	e06a      	b.n	8018f50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018e7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	da11      	bge.n	8018ea6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018e82:	7bbb      	ldrb	r3, [r7, #14]
 8018e84:	f003 020f 	and.w	r2, r3, #15
 8018e88:	6879      	ldr	r1, [r7, #4]
 8018e8a:	4613      	mov	r3, r2
 8018e8c:	009b      	lsls	r3, r3, #2
 8018e8e:	4413      	add	r3, r2
 8018e90:	009b      	lsls	r3, r3, #2
 8018e92:	440b      	add	r3, r1
 8018e94:	3324      	adds	r3, #36	; 0x24
 8018e96:	881b      	ldrh	r3, [r3, #0]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d117      	bne.n	8018ecc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018e9c:	6839      	ldr	r1, [r7, #0]
 8018e9e:	6878      	ldr	r0, [r7, #4]
 8018ea0:	f000 fbc0 	bl	8019624 <USBD_CtlError>
                  break;
 8018ea4:	e054      	b.n	8018f50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018ea6:	7bbb      	ldrb	r3, [r7, #14]
 8018ea8:	f003 020f 	and.w	r2, r3, #15
 8018eac:	6879      	ldr	r1, [r7, #4]
 8018eae:	4613      	mov	r3, r2
 8018eb0:	009b      	lsls	r3, r3, #2
 8018eb2:	4413      	add	r3, r2
 8018eb4:	009b      	lsls	r3, r3, #2
 8018eb6:	440b      	add	r3, r1
 8018eb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018ebc:	881b      	ldrh	r3, [r3, #0]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d104      	bne.n	8018ecc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018ec2:	6839      	ldr	r1, [r7, #0]
 8018ec4:	6878      	ldr	r0, [r7, #4]
 8018ec6:	f000 fbad 	bl	8019624 <USBD_CtlError>
                  break;
 8018eca:	e041      	b.n	8018f50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	da0b      	bge.n	8018eec <USBD_StdEPReq+0x23e>
 8018ed4:	7bbb      	ldrb	r3, [r7, #14]
 8018ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018eda:	4613      	mov	r3, r2
 8018edc:	009b      	lsls	r3, r3, #2
 8018ede:	4413      	add	r3, r2
 8018ee0:	009b      	lsls	r3, r3, #2
 8018ee2:	3310      	adds	r3, #16
 8018ee4:	687a      	ldr	r2, [r7, #4]
 8018ee6:	4413      	add	r3, r2
 8018ee8:	3304      	adds	r3, #4
 8018eea:	e00b      	b.n	8018f04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018eec:	7bbb      	ldrb	r3, [r7, #14]
 8018eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018ef2:	4613      	mov	r3, r2
 8018ef4:	009b      	lsls	r3, r3, #2
 8018ef6:	4413      	add	r3, r2
 8018ef8:	009b      	lsls	r3, r3, #2
 8018efa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	4413      	add	r3, r2
 8018f02:	3304      	adds	r3, #4
 8018f04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018f06:	7bbb      	ldrb	r3, [r7, #14]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d002      	beq.n	8018f12 <USBD_StdEPReq+0x264>
 8018f0c:	7bbb      	ldrb	r3, [r7, #14]
 8018f0e:	2b80      	cmp	r3, #128	; 0x80
 8018f10:	d103      	bne.n	8018f1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8018f12:	68bb      	ldr	r3, [r7, #8]
 8018f14:	2200      	movs	r2, #0
 8018f16:	601a      	str	r2, [r3, #0]
 8018f18:	e00e      	b.n	8018f38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8018f1a:	7bbb      	ldrb	r3, [r7, #14]
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	6878      	ldr	r0, [r7, #4]
 8018f20:	f006 f902 	bl	801f128 <USBD_LL_IsStallEP>
 8018f24:	4603      	mov	r3, r0
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d003      	beq.n	8018f32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8018f2a:	68bb      	ldr	r3, [r7, #8]
 8018f2c:	2201      	movs	r2, #1
 8018f2e:	601a      	str	r2, [r3, #0]
 8018f30:	e002      	b.n	8018f38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8018f32:	68bb      	ldr	r3, [r7, #8]
 8018f34:	2200      	movs	r2, #0
 8018f36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018f38:	68bb      	ldr	r3, [r7, #8]
 8018f3a:	2202      	movs	r2, #2
 8018f3c:	4619      	mov	r1, r3
 8018f3e:	6878      	ldr	r0, [r7, #4]
 8018f40:	f000 fbe1 	bl	8019706 <USBD_CtlSendData>
              break;
 8018f44:	e004      	b.n	8018f50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8018f46:	6839      	ldr	r1, [r7, #0]
 8018f48:	6878      	ldr	r0, [r7, #4]
 8018f4a:	f000 fb6b 	bl	8019624 <USBD_CtlError>
              break;
 8018f4e:	bf00      	nop
          }
          break;
 8018f50:	e004      	b.n	8018f5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8018f52:	6839      	ldr	r1, [r7, #0]
 8018f54:	6878      	ldr	r0, [r7, #4]
 8018f56:	f000 fb65 	bl	8019624 <USBD_CtlError>
          break;
 8018f5a:	bf00      	nop
      }
      break;
 8018f5c:	e004      	b.n	8018f68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8018f5e:	6839      	ldr	r1, [r7, #0]
 8018f60:	6878      	ldr	r0, [r7, #4]
 8018f62:	f000 fb5f 	bl	8019624 <USBD_CtlError>
      break;
 8018f66:	bf00      	nop
  }

  return ret;
 8018f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	3710      	adds	r7, #16
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bd80      	pop	{r7, pc}
	...

08018f74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b084      	sub	sp, #16
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
 8018f7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018f7e:	2300      	movs	r3, #0
 8018f80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018f82:	2300      	movs	r3, #0
 8018f84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018f86:	2300      	movs	r3, #0
 8018f88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	885b      	ldrh	r3, [r3, #2]
 8018f8e:	0a1b      	lsrs	r3, r3, #8
 8018f90:	b29b      	uxth	r3, r3
 8018f92:	3b01      	subs	r3, #1
 8018f94:	2b0e      	cmp	r3, #14
 8018f96:	f200 8152 	bhi.w	801923e <USBD_GetDescriptor+0x2ca>
 8018f9a:	a201      	add	r2, pc, #4	; (adr r2, 8018fa0 <USBD_GetDescriptor+0x2c>)
 8018f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fa0:	08019011 	.word	0x08019011
 8018fa4:	08019029 	.word	0x08019029
 8018fa8:	08019069 	.word	0x08019069
 8018fac:	0801923f 	.word	0x0801923f
 8018fb0:	0801923f 	.word	0x0801923f
 8018fb4:	080191df 	.word	0x080191df
 8018fb8:	0801920b 	.word	0x0801920b
 8018fbc:	0801923f 	.word	0x0801923f
 8018fc0:	0801923f 	.word	0x0801923f
 8018fc4:	0801923f 	.word	0x0801923f
 8018fc8:	0801923f 	.word	0x0801923f
 8018fcc:	0801923f 	.word	0x0801923f
 8018fd0:	0801923f 	.word	0x0801923f
 8018fd4:	0801923f 	.word	0x0801923f
 8018fd8:	08018fdd 	.word	0x08018fdd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018fe2:	69db      	ldr	r3, [r3, #28]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d00b      	beq.n	8019000 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018fee:	69db      	ldr	r3, [r3, #28]
 8018ff0:	687a      	ldr	r2, [r7, #4]
 8018ff2:	7c12      	ldrb	r2, [r2, #16]
 8018ff4:	f107 0108 	add.w	r1, r7, #8
 8018ff8:	4610      	mov	r0, r2
 8018ffa:	4798      	blx	r3
 8018ffc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018ffe:	e126      	b.n	801924e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019000:	6839      	ldr	r1, [r7, #0]
 8019002:	6878      	ldr	r0, [r7, #4]
 8019004:	f000 fb0e 	bl	8019624 <USBD_CtlError>
        err++;
 8019008:	7afb      	ldrb	r3, [r7, #11]
 801900a:	3301      	adds	r3, #1
 801900c:	72fb      	strb	r3, [r7, #11]
      break;
 801900e:	e11e      	b.n	801924e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	687a      	ldr	r2, [r7, #4]
 801901a:	7c12      	ldrb	r2, [r2, #16]
 801901c:	f107 0108 	add.w	r1, r7, #8
 8019020:	4610      	mov	r0, r2
 8019022:	4798      	blx	r3
 8019024:	60f8      	str	r0, [r7, #12]
      break;
 8019026:	e112      	b.n	801924e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	7c1b      	ldrb	r3, [r3, #16]
 801902c:	2b00      	cmp	r3, #0
 801902e:	d10d      	bne.n	801904c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019038:	f107 0208 	add.w	r2, r7, #8
 801903c:	4610      	mov	r0, r2
 801903e:	4798      	blx	r3
 8019040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	3301      	adds	r3, #1
 8019046:	2202      	movs	r2, #2
 8019048:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801904a:	e100      	b.n	801924e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019054:	f107 0208 	add.w	r2, r7, #8
 8019058:	4610      	mov	r0, r2
 801905a:	4798      	blx	r3
 801905c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	3301      	adds	r3, #1
 8019062:	2202      	movs	r2, #2
 8019064:	701a      	strb	r2, [r3, #0]
      break;
 8019066:	e0f2      	b.n	801924e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	885b      	ldrh	r3, [r3, #2]
 801906c:	b2db      	uxtb	r3, r3
 801906e:	2b05      	cmp	r3, #5
 8019070:	f200 80ac 	bhi.w	80191cc <USBD_GetDescriptor+0x258>
 8019074:	a201      	add	r2, pc, #4	; (adr r2, 801907c <USBD_GetDescriptor+0x108>)
 8019076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801907a:	bf00      	nop
 801907c:	08019095 	.word	0x08019095
 8019080:	080190c9 	.word	0x080190c9
 8019084:	080190fd 	.word	0x080190fd
 8019088:	08019131 	.word	0x08019131
 801908c:	08019165 	.word	0x08019165
 8019090:	08019199 	.word	0x08019199
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801909a:	685b      	ldr	r3, [r3, #4]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d00b      	beq.n	80190b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80190a6:	685b      	ldr	r3, [r3, #4]
 80190a8:	687a      	ldr	r2, [r7, #4]
 80190aa:	7c12      	ldrb	r2, [r2, #16]
 80190ac:	f107 0108 	add.w	r1, r7, #8
 80190b0:	4610      	mov	r0, r2
 80190b2:	4798      	blx	r3
 80190b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80190b6:	e091      	b.n	80191dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80190b8:	6839      	ldr	r1, [r7, #0]
 80190ba:	6878      	ldr	r0, [r7, #4]
 80190bc:	f000 fab2 	bl	8019624 <USBD_CtlError>
            err++;
 80190c0:	7afb      	ldrb	r3, [r7, #11]
 80190c2:	3301      	adds	r3, #1
 80190c4:	72fb      	strb	r3, [r7, #11]
          break;
 80190c6:	e089      	b.n	80191dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80190ce:	689b      	ldr	r3, [r3, #8]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d00b      	beq.n	80190ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80190da:	689b      	ldr	r3, [r3, #8]
 80190dc:	687a      	ldr	r2, [r7, #4]
 80190de:	7c12      	ldrb	r2, [r2, #16]
 80190e0:	f107 0108 	add.w	r1, r7, #8
 80190e4:	4610      	mov	r0, r2
 80190e6:	4798      	blx	r3
 80190e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80190ea:	e077      	b.n	80191dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80190ec:	6839      	ldr	r1, [r7, #0]
 80190ee:	6878      	ldr	r0, [r7, #4]
 80190f0:	f000 fa98 	bl	8019624 <USBD_CtlError>
            err++;
 80190f4:	7afb      	ldrb	r3, [r7, #11]
 80190f6:	3301      	adds	r3, #1
 80190f8:	72fb      	strb	r3, [r7, #11]
          break;
 80190fa:	e06f      	b.n	80191dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019102:	68db      	ldr	r3, [r3, #12]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d00b      	beq.n	8019120 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801910e:	68db      	ldr	r3, [r3, #12]
 8019110:	687a      	ldr	r2, [r7, #4]
 8019112:	7c12      	ldrb	r2, [r2, #16]
 8019114:	f107 0108 	add.w	r1, r7, #8
 8019118:	4610      	mov	r0, r2
 801911a:	4798      	blx	r3
 801911c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801911e:	e05d      	b.n	80191dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019120:	6839      	ldr	r1, [r7, #0]
 8019122:	6878      	ldr	r0, [r7, #4]
 8019124:	f000 fa7e 	bl	8019624 <USBD_CtlError>
            err++;
 8019128:	7afb      	ldrb	r3, [r7, #11]
 801912a:	3301      	adds	r3, #1
 801912c:	72fb      	strb	r3, [r7, #11]
          break;
 801912e:	e055      	b.n	80191dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019136:	691b      	ldr	r3, [r3, #16]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d00b      	beq.n	8019154 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019142:	691b      	ldr	r3, [r3, #16]
 8019144:	687a      	ldr	r2, [r7, #4]
 8019146:	7c12      	ldrb	r2, [r2, #16]
 8019148:	f107 0108 	add.w	r1, r7, #8
 801914c:	4610      	mov	r0, r2
 801914e:	4798      	blx	r3
 8019150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019152:	e043      	b.n	80191dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019154:	6839      	ldr	r1, [r7, #0]
 8019156:	6878      	ldr	r0, [r7, #4]
 8019158:	f000 fa64 	bl	8019624 <USBD_CtlError>
            err++;
 801915c:	7afb      	ldrb	r3, [r7, #11]
 801915e:	3301      	adds	r3, #1
 8019160:	72fb      	strb	r3, [r7, #11]
          break;
 8019162:	e03b      	b.n	80191dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801916a:	695b      	ldr	r3, [r3, #20]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d00b      	beq.n	8019188 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019176:	695b      	ldr	r3, [r3, #20]
 8019178:	687a      	ldr	r2, [r7, #4]
 801917a:	7c12      	ldrb	r2, [r2, #16]
 801917c:	f107 0108 	add.w	r1, r7, #8
 8019180:	4610      	mov	r0, r2
 8019182:	4798      	blx	r3
 8019184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019186:	e029      	b.n	80191dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019188:	6839      	ldr	r1, [r7, #0]
 801918a:	6878      	ldr	r0, [r7, #4]
 801918c:	f000 fa4a 	bl	8019624 <USBD_CtlError>
            err++;
 8019190:	7afb      	ldrb	r3, [r7, #11]
 8019192:	3301      	adds	r3, #1
 8019194:	72fb      	strb	r3, [r7, #11]
          break;
 8019196:	e021      	b.n	80191dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801919e:	699b      	ldr	r3, [r3, #24]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d00b      	beq.n	80191bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80191aa:	699b      	ldr	r3, [r3, #24]
 80191ac:	687a      	ldr	r2, [r7, #4]
 80191ae:	7c12      	ldrb	r2, [r2, #16]
 80191b0:	f107 0108 	add.w	r1, r7, #8
 80191b4:	4610      	mov	r0, r2
 80191b6:	4798      	blx	r3
 80191b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80191ba:	e00f      	b.n	80191dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80191bc:	6839      	ldr	r1, [r7, #0]
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f000 fa30 	bl	8019624 <USBD_CtlError>
            err++;
 80191c4:	7afb      	ldrb	r3, [r7, #11]
 80191c6:	3301      	adds	r3, #1
 80191c8:	72fb      	strb	r3, [r7, #11]
          break;
 80191ca:	e007      	b.n	80191dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80191cc:	6839      	ldr	r1, [r7, #0]
 80191ce:	6878      	ldr	r0, [r7, #4]
 80191d0:	f000 fa28 	bl	8019624 <USBD_CtlError>
          err++;
 80191d4:	7afb      	ldrb	r3, [r7, #11]
 80191d6:	3301      	adds	r3, #1
 80191d8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80191da:	bf00      	nop
      }
      break;
 80191dc:	e037      	b.n	801924e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	7c1b      	ldrb	r3, [r3, #16]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d109      	bne.n	80191fa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80191ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191ee:	f107 0208 	add.w	r2, r7, #8
 80191f2:	4610      	mov	r0, r2
 80191f4:	4798      	blx	r3
 80191f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80191f8:	e029      	b.n	801924e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80191fa:	6839      	ldr	r1, [r7, #0]
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f000 fa11 	bl	8019624 <USBD_CtlError>
        err++;
 8019202:	7afb      	ldrb	r3, [r7, #11]
 8019204:	3301      	adds	r3, #1
 8019206:	72fb      	strb	r3, [r7, #11]
      break;
 8019208:	e021      	b.n	801924e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	7c1b      	ldrb	r3, [r3, #16]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d10d      	bne.n	801922e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801921a:	f107 0208 	add.w	r2, r7, #8
 801921e:	4610      	mov	r0, r2
 8019220:	4798      	blx	r3
 8019222:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	3301      	adds	r3, #1
 8019228:	2207      	movs	r2, #7
 801922a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801922c:	e00f      	b.n	801924e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801922e:	6839      	ldr	r1, [r7, #0]
 8019230:	6878      	ldr	r0, [r7, #4]
 8019232:	f000 f9f7 	bl	8019624 <USBD_CtlError>
        err++;
 8019236:	7afb      	ldrb	r3, [r7, #11]
 8019238:	3301      	adds	r3, #1
 801923a:	72fb      	strb	r3, [r7, #11]
      break;
 801923c:	e007      	b.n	801924e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801923e:	6839      	ldr	r1, [r7, #0]
 8019240:	6878      	ldr	r0, [r7, #4]
 8019242:	f000 f9ef 	bl	8019624 <USBD_CtlError>
      err++;
 8019246:	7afb      	ldrb	r3, [r7, #11]
 8019248:	3301      	adds	r3, #1
 801924a:	72fb      	strb	r3, [r7, #11]
      break;
 801924c:	bf00      	nop
  }

  if (err != 0U)
 801924e:	7afb      	ldrb	r3, [r7, #11]
 8019250:	2b00      	cmp	r3, #0
 8019252:	d11e      	bne.n	8019292 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8019254:	683b      	ldr	r3, [r7, #0]
 8019256:	88db      	ldrh	r3, [r3, #6]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d016      	beq.n	801928a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801925c:	893b      	ldrh	r3, [r7, #8]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d00e      	beq.n	8019280 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8019262:	683b      	ldr	r3, [r7, #0]
 8019264:	88da      	ldrh	r2, [r3, #6]
 8019266:	893b      	ldrh	r3, [r7, #8]
 8019268:	4293      	cmp	r3, r2
 801926a:	bf28      	it	cs
 801926c:	4613      	movcs	r3, r2
 801926e:	b29b      	uxth	r3, r3
 8019270:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8019272:	893b      	ldrh	r3, [r7, #8]
 8019274:	461a      	mov	r2, r3
 8019276:	68f9      	ldr	r1, [r7, #12]
 8019278:	6878      	ldr	r0, [r7, #4]
 801927a:	f000 fa44 	bl	8019706 <USBD_CtlSendData>
 801927e:	e009      	b.n	8019294 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8019280:	6839      	ldr	r1, [r7, #0]
 8019282:	6878      	ldr	r0, [r7, #4]
 8019284:	f000 f9ce 	bl	8019624 <USBD_CtlError>
 8019288:	e004      	b.n	8019294 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801928a:	6878      	ldr	r0, [r7, #4]
 801928c:	f000 fa95 	bl	80197ba <USBD_CtlSendStatus>
 8019290:	e000      	b.n	8019294 <USBD_GetDescriptor+0x320>
    return;
 8019292:	bf00      	nop
  }
}
 8019294:	3710      	adds	r7, #16
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}
 801929a:	bf00      	nop

0801929c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b084      	sub	sp, #16
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
 80192a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80192a6:	683b      	ldr	r3, [r7, #0]
 80192a8:	889b      	ldrh	r3, [r3, #4]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d131      	bne.n	8019312 <USBD_SetAddress+0x76>
 80192ae:	683b      	ldr	r3, [r7, #0]
 80192b0:	88db      	ldrh	r3, [r3, #6]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d12d      	bne.n	8019312 <USBD_SetAddress+0x76>
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	885b      	ldrh	r3, [r3, #2]
 80192ba:	2b7f      	cmp	r3, #127	; 0x7f
 80192bc:	d829      	bhi.n	8019312 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80192be:	683b      	ldr	r3, [r7, #0]
 80192c0:	885b      	ldrh	r3, [r3, #2]
 80192c2:	b2db      	uxtb	r3, r3
 80192c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80192c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80192d0:	b2db      	uxtb	r3, r3
 80192d2:	2b03      	cmp	r3, #3
 80192d4:	d104      	bne.n	80192e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80192d6:	6839      	ldr	r1, [r7, #0]
 80192d8:	6878      	ldr	r0, [r7, #4]
 80192da:	f000 f9a3 	bl	8019624 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80192de:	e01d      	b.n	801931c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	7bfa      	ldrb	r2, [r7, #15]
 80192e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80192e8:	7bfb      	ldrb	r3, [r7, #15]
 80192ea:	4619      	mov	r1, r3
 80192ec:	6878      	ldr	r0, [r7, #4]
 80192ee:	f005 ff47 	bl	801f180 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80192f2:	6878      	ldr	r0, [r7, #4]
 80192f4:	f000 fa61 	bl	80197ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80192f8:	7bfb      	ldrb	r3, [r7, #15]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d004      	beq.n	8019308 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	2202      	movs	r2, #2
 8019302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019306:	e009      	b.n	801931c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	2201      	movs	r2, #1
 801930c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019310:	e004      	b.n	801931c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8019312:	6839      	ldr	r1, [r7, #0]
 8019314:	6878      	ldr	r0, [r7, #4]
 8019316:	f000 f985 	bl	8019624 <USBD_CtlError>
  }
}
 801931a:	bf00      	nop
 801931c:	bf00      	nop
 801931e:	3710      	adds	r7, #16
 8019320:	46bd      	mov	sp, r7
 8019322:	bd80      	pop	{r7, pc}

08019324 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b084      	sub	sp, #16
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
 801932c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801932e:	2300      	movs	r3, #0
 8019330:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8019332:	683b      	ldr	r3, [r7, #0]
 8019334:	885b      	ldrh	r3, [r3, #2]
 8019336:	b2da      	uxtb	r2, r3
 8019338:	4b4c      	ldr	r3, [pc, #304]	; (801946c <USBD_SetConfig+0x148>)
 801933a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801933c:	4b4b      	ldr	r3, [pc, #300]	; (801946c <USBD_SetConfig+0x148>)
 801933e:	781b      	ldrb	r3, [r3, #0]
 8019340:	2b01      	cmp	r3, #1
 8019342:	d905      	bls.n	8019350 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8019344:	6839      	ldr	r1, [r7, #0]
 8019346:	6878      	ldr	r0, [r7, #4]
 8019348:	f000 f96c 	bl	8019624 <USBD_CtlError>
    return USBD_FAIL;
 801934c:	2303      	movs	r3, #3
 801934e:	e088      	b.n	8019462 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019356:	b2db      	uxtb	r3, r3
 8019358:	2b02      	cmp	r3, #2
 801935a:	d002      	beq.n	8019362 <USBD_SetConfig+0x3e>
 801935c:	2b03      	cmp	r3, #3
 801935e:	d025      	beq.n	80193ac <USBD_SetConfig+0x88>
 8019360:	e071      	b.n	8019446 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8019362:	4b42      	ldr	r3, [pc, #264]	; (801946c <USBD_SetConfig+0x148>)
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d01c      	beq.n	80193a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801936a:	4b40      	ldr	r3, [pc, #256]	; (801946c <USBD_SetConfig+0x148>)
 801936c:	781b      	ldrb	r3, [r3, #0]
 801936e:	461a      	mov	r2, r3
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019374:	4b3d      	ldr	r3, [pc, #244]	; (801946c <USBD_SetConfig+0x148>)
 8019376:	781b      	ldrb	r3, [r3, #0]
 8019378:	4619      	mov	r1, r3
 801937a:	6878      	ldr	r0, [r7, #4]
 801937c:	f7ff f992 	bl	80186a4 <USBD_SetClassConfig>
 8019380:	4603      	mov	r3, r0
 8019382:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8019384:	7bfb      	ldrb	r3, [r7, #15]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d004      	beq.n	8019394 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801938a:	6839      	ldr	r1, [r7, #0]
 801938c:	6878      	ldr	r0, [r7, #4]
 801938e:	f000 f949 	bl	8019624 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019392:	e065      	b.n	8019460 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8019394:	6878      	ldr	r0, [r7, #4]
 8019396:	f000 fa10 	bl	80197ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2203      	movs	r2, #3
 801939e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80193a2:	e05d      	b.n	8019460 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80193a4:	6878      	ldr	r0, [r7, #4]
 80193a6:	f000 fa08 	bl	80197ba <USBD_CtlSendStatus>
      break;
 80193aa:	e059      	b.n	8019460 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80193ac:	4b2f      	ldr	r3, [pc, #188]	; (801946c <USBD_SetConfig+0x148>)
 80193ae:	781b      	ldrb	r3, [r3, #0]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d112      	bne.n	80193da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2202      	movs	r2, #2
 80193b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80193bc:	4b2b      	ldr	r3, [pc, #172]	; (801946c <USBD_SetConfig+0x148>)
 80193be:	781b      	ldrb	r3, [r3, #0]
 80193c0:	461a      	mov	r2, r3
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80193c6:	4b29      	ldr	r3, [pc, #164]	; (801946c <USBD_SetConfig+0x148>)
 80193c8:	781b      	ldrb	r3, [r3, #0]
 80193ca:	4619      	mov	r1, r3
 80193cc:	6878      	ldr	r0, [r7, #4]
 80193ce:	f7ff f985 	bl	80186dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80193d2:	6878      	ldr	r0, [r7, #4]
 80193d4:	f000 f9f1 	bl	80197ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80193d8:	e042      	b.n	8019460 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80193da:	4b24      	ldr	r3, [pc, #144]	; (801946c <USBD_SetConfig+0x148>)
 80193dc:	781b      	ldrb	r3, [r3, #0]
 80193de:	461a      	mov	r2, r3
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d02a      	beq.n	801943e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	685b      	ldr	r3, [r3, #4]
 80193ec:	b2db      	uxtb	r3, r3
 80193ee:	4619      	mov	r1, r3
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	f7ff f973 	bl	80186dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80193f6:	4b1d      	ldr	r3, [pc, #116]	; (801946c <USBD_SetConfig+0x148>)
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	461a      	mov	r2, r3
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019400:	4b1a      	ldr	r3, [pc, #104]	; (801946c <USBD_SetConfig+0x148>)
 8019402:	781b      	ldrb	r3, [r3, #0]
 8019404:	4619      	mov	r1, r3
 8019406:	6878      	ldr	r0, [r7, #4]
 8019408:	f7ff f94c 	bl	80186a4 <USBD_SetClassConfig>
 801940c:	4603      	mov	r3, r0
 801940e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8019410:	7bfb      	ldrb	r3, [r7, #15]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d00f      	beq.n	8019436 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8019416:	6839      	ldr	r1, [r7, #0]
 8019418:	6878      	ldr	r0, [r7, #4]
 801941a:	f000 f903 	bl	8019624 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	685b      	ldr	r3, [r3, #4]
 8019422:	b2db      	uxtb	r3, r3
 8019424:	4619      	mov	r1, r3
 8019426:	6878      	ldr	r0, [r7, #4]
 8019428:	f7ff f958 	bl	80186dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2202      	movs	r2, #2
 8019430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8019434:	e014      	b.n	8019460 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8019436:	6878      	ldr	r0, [r7, #4]
 8019438:	f000 f9bf 	bl	80197ba <USBD_CtlSendStatus>
      break;
 801943c:	e010      	b.n	8019460 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801943e:	6878      	ldr	r0, [r7, #4]
 8019440:	f000 f9bb 	bl	80197ba <USBD_CtlSendStatus>
      break;
 8019444:	e00c      	b.n	8019460 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8019446:	6839      	ldr	r1, [r7, #0]
 8019448:	6878      	ldr	r0, [r7, #4]
 801944a:	f000 f8eb 	bl	8019624 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801944e:	4b07      	ldr	r3, [pc, #28]	; (801946c <USBD_SetConfig+0x148>)
 8019450:	781b      	ldrb	r3, [r3, #0]
 8019452:	4619      	mov	r1, r3
 8019454:	6878      	ldr	r0, [r7, #4]
 8019456:	f7ff f941 	bl	80186dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801945a:	2303      	movs	r3, #3
 801945c:	73fb      	strb	r3, [r7, #15]
      break;
 801945e:	bf00      	nop
  }

  return ret;
 8019460:	7bfb      	ldrb	r3, [r7, #15]
}
 8019462:	4618      	mov	r0, r3
 8019464:	3710      	adds	r7, #16
 8019466:	46bd      	mov	sp, r7
 8019468:	bd80      	pop	{r7, pc}
 801946a:	bf00      	nop
 801946c:	20001c81 	.word	0x20001c81

08019470 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b082      	sub	sp, #8
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
 8019478:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801947a:	683b      	ldr	r3, [r7, #0]
 801947c:	88db      	ldrh	r3, [r3, #6]
 801947e:	2b01      	cmp	r3, #1
 8019480:	d004      	beq.n	801948c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8019482:	6839      	ldr	r1, [r7, #0]
 8019484:	6878      	ldr	r0, [r7, #4]
 8019486:	f000 f8cd 	bl	8019624 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801948a:	e023      	b.n	80194d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019492:	b2db      	uxtb	r3, r3
 8019494:	2b02      	cmp	r3, #2
 8019496:	dc02      	bgt.n	801949e <USBD_GetConfig+0x2e>
 8019498:	2b00      	cmp	r3, #0
 801949a:	dc03      	bgt.n	80194a4 <USBD_GetConfig+0x34>
 801949c:	e015      	b.n	80194ca <USBD_GetConfig+0x5a>
 801949e:	2b03      	cmp	r3, #3
 80194a0:	d00b      	beq.n	80194ba <USBD_GetConfig+0x4a>
 80194a2:	e012      	b.n	80194ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	2200      	movs	r2, #0
 80194a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	3308      	adds	r3, #8
 80194ae:	2201      	movs	r2, #1
 80194b0:	4619      	mov	r1, r3
 80194b2:	6878      	ldr	r0, [r7, #4]
 80194b4:	f000 f927 	bl	8019706 <USBD_CtlSendData>
        break;
 80194b8:	e00c      	b.n	80194d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	3304      	adds	r3, #4
 80194be:	2201      	movs	r2, #1
 80194c0:	4619      	mov	r1, r3
 80194c2:	6878      	ldr	r0, [r7, #4]
 80194c4:	f000 f91f 	bl	8019706 <USBD_CtlSendData>
        break;
 80194c8:	e004      	b.n	80194d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80194ca:	6839      	ldr	r1, [r7, #0]
 80194cc:	6878      	ldr	r0, [r7, #4]
 80194ce:	f000 f8a9 	bl	8019624 <USBD_CtlError>
        break;
 80194d2:	bf00      	nop
}
 80194d4:	bf00      	nop
 80194d6:	3708      	adds	r7, #8
 80194d8:	46bd      	mov	sp, r7
 80194da:	bd80      	pop	{r7, pc}

080194dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b082      	sub	sp, #8
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]
 80194e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	3b01      	subs	r3, #1
 80194f0:	2b02      	cmp	r3, #2
 80194f2:	d81e      	bhi.n	8019532 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	88db      	ldrh	r3, [r3, #6]
 80194f8:	2b02      	cmp	r3, #2
 80194fa:	d004      	beq.n	8019506 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80194fc:	6839      	ldr	r1, [r7, #0]
 80194fe:	6878      	ldr	r0, [r7, #4]
 8019500:	f000 f890 	bl	8019624 <USBD_CtlError>
        break;
 8019504:	e01a      	b.n	801953c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	2201      	movs	r2, #1
 801950a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8019512:	2b00      	cmp	r3, #0
 8019514:	d005      	beq.n	8019522 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	68db      	ldr	r3, [r3, #12]
 801951a:	f043 0202 	orr.w	r2, r3, #2
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	330c      	adds	r3, #12
 8019526:	2202      	movs	r2, #2
 8019528:	4619      	mov	r1, r3
 801952a:	6878      	ldr	r0, [r7, #4]
 801952c:	f000 f8eb 	bl	8019706 <USBD_CtlSendData>
      break;
 8019530:	e004      	b.n	801953c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8019532:	6839      	ldr	r1, [r7, #0]
 8019534:	6878      	ldr	r0, [r7, #4]
 8019536:	f000 f875 	bl	8019624 <USBD_CtlError>
      break;
 801953a:	bf00      	nop
  }
}
 801953c:	bf00      	nop
 801953e:	3708      	adds	r7, #8
 8019540:	46bd      	mov	sp, r7
 8019542:	bd80      	pop	{r7, pc}

08019544 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b082      	sub	sp, #8
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	885b      	ldrh	r3, [r3, #2]
 8019552:	2b01      	cmp	r3, #1
 8019554:	d106      	bne.n	8019564 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	2201      	movs	r2, #1
 801955a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801955e:	6878      	ldr	r0, [r7, #4]
 8019560:	f000 f92b 	bl	80197ba <USBD_CtlSendStatus>
  }
}
 8019564:	bf00      	nop
 8019566:	3708      	adds	r7, #8
 8019568:	46bd      	mov	sp, r7
 801956a:	bd80      	pop	{r7, pc}

0801956c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b082      	sub	sp, #8
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
 8019574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801957c:	b2db      	uxtb	r3, r3
 801957e:	3b01      	subs	r3, #1
 8019580:	2b02      	cmp	r3, #2
 8019582:	d80b      	bhi.n	801959c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	885b      	ldrh	r3, [r3, #2]
 8019588:	2b01      	cmp	r3, #1
 801958a:	d10c      	bne.n	80195a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	2200      	movs	r2, #0
 8019590:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8019594:	6878      	ldr	r0, [r7, #4]
 8019596:	f000 f910 	bl	80197ba <USBD_CtlSendStatus>
      }
      break;
 801959a:	e004      	b.n	80195a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801959c:	6839      	ldr	r1, [r7, #0]
 801959e:	6878      	ldr	r0, [r7, #4]
 80195a0:	f000 f840 	bl	8019624 <USBD_CtlError>
      break;
 80195a4:	e000      	b.n	80195a8 <USBD_ClrFeature+0x3c>
      break;
 80195a6:	bf00      	nop
  }
}
 80195a8:	bf00      	nop
 80195aa:	3708      	adds	r7, #8
 80195ac:	46bd      	mov	sp, r7
 80195ae:	bd80      	pop	{r7, pc}

080195b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b084      	sub	sp, #16
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
 80195b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80195ba:	683b      	ldr	r3, [r7, #0]
 80195bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	781a      	ldrb	r2, [r3, #0]
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	3301      	adds	r3, #1
 80195ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	781a      	ldrb	r2, [r3, #0]
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	3301      	adds	r3, #1
 80195d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80195da:	68f8      	ldr	r0, [r7, #12]
 80195dc:	f7ff fa92 	bl	8018b04 <SWAPBYTE>
 80195e0:	4603      	mov	r3, r0
 80195e2:	461a      	mov	r2, r3
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	3301      	adds	r3, #1
 80195ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	3301      	adds	r3, #1
 80195f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80195f4:	68f8      	ldr	r0, [r7, #12]
 80195f6:	f7ff fa85 	bl	8018b04 <SWAPBYTE>
 80195fa:	4603      	mov	r3, r0
 80195fc:	461a      	mov	r2, r3
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	3301      	adds	r3, #1
 8019606:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	3301      	adds	r3, #1
 801960c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801960e:	68f8      	ldr	r0, [r7, #12]
 8019610:	f7ff fa78 	bl	8018b04 <SWAPBYTE>
 8019614:	4603      	mov	r3, r0
 8019616:	461a      	mov	r2, r3
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	80da      	strh	r2, [r3, #6]
}
 801961c:	bf00      	nop
 801961e:	3710      	adds	r7, #16
 8019620:	46bd      	mov	sp, r7
 8019622:	bd80      	pop	{r7, pc}

08019624 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019624:	b580      	push	{r7, lr}
 8019626:	b082      	sub	sp, #8
 8019628:	af00      	add	r7, sp, #0
 801962a:	6078      	str	r0, [r7, #4]
 801962c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801962e:	2180      	movs	r1, #128	; 0x80
 8019630:	6878      	ldr	r0, [r7, #4]
 8019632:	f005 fd3b 	bl	801f0ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8019636:	2100      	movs	r1, #0
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f005 fd37 	bl	801f0ac <USBD_LL_StallEP>
}
 801963e:	bf00      	nop
 8019640:	3708      	adds	r7, #8
 8019642:	46bd      	mov	sp, r7
 8019644:	bd80      	pop	{r7, pc}

08019646 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8019646:	b580      	push	{r7, lr}
 8019648:	b086      	sub	sp, #24
 801964a:	af00      	add	r7, sp, #0
 801964c:	60f8      	str	r0, [r7, #12]
 801964e:	60b9      	str	r1, [r7, #8]
 8019650:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8019652:	2300      	movs	r3, #0
 8019654:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d036      	beq.n	80196ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8019660:	6938      	ldr	r0, [r7, #16]
 8019662:	f000 f836 	bl	80196d2 <USBD_GetLen>
 8019666:	4603      	mov	r3, r0
 8019668:	3301      	adds	r3, #1
 801966a:	b29b      	uxth	r3, r3
 801966c:	005b      	lsls	r3, r3, #1
 801966e:	b29a      	uxth	r2, r3
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8019674:	7dfb      	ldrb	r3, [r7, #23]
 8019676:	68ba      	ldr	r2, [r7, #8]
 8019678:	4413      	add	r3, r2
 801967a:	687a      	ldr	r2, [r7, #4]
 801967c:	7812      	ldrb	r2, [r2, #0]
 801967e:	701a      	strb	r2, [r3, #0]
  idx++;
 8019680:	7dfb      	ldrb	r3, [r7, #23]
 8019682:	3301      	adds	r3, #1
 8019684:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019686:	7dfb      	ldrb	r3, [r7, #23]
 8019688:	68ba      	ldr	r2, [r7, #8]
 801968a:	4413      	add	r3, r2
 801968c:	2203      	movs	r2, #3
 801968e:	701a      	strb	r2, [r3, #0]
  idx++;
 8019690:	7dfb      	ldrb	r3, [r7, #23]
 8019692:	3301      	adds	r3, #1
 8019694:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019696:	e013      	b.n	80196c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8019698:	7dfb      	ldrb	r3, [r7, #23]
 801969a:	68ba      	ldr	r2, [r7, #8]
 801969c:	4413      	add	r3, r2
 801969e:	693a      	ldr	r2, [r7, #16]
 80196a0:	7812      	ldrb	r2, [r2, #0]
 80196a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80196a4:	693b      	ldr	r3, [r7, #16]
 80196a6:	3301      	adds	r3, #1
 80196a8:	613b      	str	r3, [r7, #16]
    idx++;
 80196aa:	7dfb      	ldrb	r3, [r7, #23]
 80196ac:	3301      	adds	r3, #1
 80196ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80196b0:	7dfb      	ldrb	r3, [r7, #23]
 80196b2:	68ba      	ldr	r2, [r7, #8]
 80196b4:	4413      	add	r3, r2
 80196b6:	2200      	movs	r2, #0
 80196b8:	701a      	strb	r2, [r3, #0]
    idx++;
 80196ba:	7dfb      	ldrb	r3, [r7, #23]
 80196bc:	3301      	adds	r3, #1
 80196be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80196c0:	693b      	ldr	r3, [r7, #16]
 80196c2:	781b      	ldrb	r3, [r3, #0]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d1e7      	bne.n	8019698 <USBD_GetString+0x52>
 80196c8:	e000      	b.n	80196cc <USBD_GetString+0x86>
    return;
 80196ca:	bf00      	nop
  }
}
 80196cc:	3718      	adds	r7, #24
 80196ce:	46bd      	mov	sp, r7
 80196d0:	bd80      	pop	{r7, pc}

080196d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80196d2:	b480      	push	{r7}
 80196d4:	b085      	sub	sp, #20
 80196d6:	af00      	add	r7, sp, #0
 80196d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80196da:	2300      	movs	r3, #0
 80196dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80196e2:	e005      	b.n	80196f0 <USBD_GetLen+0x1e>
  {
    len++;
 80196e4:	7bfb      	ldrb	r3, [r7, #15]
 80196e6:	3301      	adds	r3, #1
 80196e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80196ea:	68bb      	ldr	r3, [r7, #8]
 80196ec:	3301      	adds	r3, #1
 80196ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80196f0:	68bb      	ldr	r3, [r7, #8]
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d1f5      	bne.n	80196e4 <USBD_GetLen+0x12>
  }

  return len;
 80196f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80196fa:	4618      	mov	r0, r3
 80196fc:	3714      	adds	r7, #20
 80196fe:	46bd      	mov	sp, r7
 8019700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019704:	4770      	bx	lr

08019706 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019706:	b580      	push	{r7, lr}
 8019708:	b084      	sub	sp, #16
 801970a:	af00      	add	r7, sp, #0
 801970c:	60f8      	str	r0, [r7, #12]
 801970e:	60b9      	str	r1, [r7, #8]
 8019710:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	2202      	movs	r2, #2
 8019716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	687a      	ldr	r2, [r7, #4]
 801971e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	687a      	ldr	r2, [r7, #4]
 8019724:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	68ba      	ldr	r2, [r7, #8]
 801972a:	2100      	movs	r1, #0
 801972c:	68f8      	ldr	r0, [r7, #12]
 801972e:	f005 fd46 	bl	801f1be <USBD_LL_Transmit>

  return USBD_OK;
 8019732:	2300      	movs	r3, #0
}
 8019734:	4618      	mov	r0, r3
 8019736:	3710      	adds	r7, #16
 8019738:	46bd      	mov	sp, r7
 801973a:	bd80      	pop	{r7, pc}

0801973c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801973c:	b580      	push	{r7, lr}
 801973e:	b084      	sub	sp, #16
 8019740:	af00      	add	r7, sp, #0
 8019742:	60f8      	str	r0, [r7, #12]
 8019744:	60b9      	str	r1, [r7, #8]
 8019746:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	68ba      	ldr	r2, [r7, #8]
 801974c:	2100      	movs	r1, #0
 801974e:	68f8      	ldr	r0, [r7, #12]
 8019750:	f005 fd35 	bl	801f1be <USBD_LL_Transmit>

  return USBD_OK;
 8019754:	2300      	movs	r3, #0
}
 8019756:	4618      	mov	r0, r3
 8019758:	3710      	adds	r7, #16
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}

0801975e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801975e:	b580      	push	{r7, lr}
 8019760:	b084      	sub	sp, #16
 8019762:	af00      	add	r7, sp, #0
 8019764:	60f8      	str	r0, [r7, #12]
 8019766:	60b9      	str	r1, [r7, #8]
 8019768:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	2203      	movs	r2, #3
 801976e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	687a      	ldr	r2, [r7, #4]
 8019776:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	687a      	ldr	r2, [r7, #4]
 801977e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	68ba      	ldr	r2, [r7, #8]
 8019786:	2100      	movs	r1, #0
 8019788:	68f8      	ldr	r0, [r7, #12]
 801978a:	f005 fd39 	bl	801f200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801978e:	2300      	movs	r3, #0
}
 8019790:	4618      	mov	r0, r3
 8019792:	3710      	adds	r7, #16
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}

08019798 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b084      	sub	sp, #16
 801979c:	af00      	add	r7, sp, #0
 801979e:	60f8      	str	r0, [r7, #12]
 80197a0:	60b9      	str	r1, [r7, #8]
 80197a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	68ba      	ldr	r2, [r7, #8]
 80197a8:	2100      	movs	r1, #0
 80197aa:	68f8      	ldr	r0, [r7, #12]
 80197ac:	f005 fd28 	bl	801f200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80197b0:	2300      	movs	r3, #0
}
 80197b2:	4618      	mov	r0, r3
 80197b4:	3710      	adds	r7, #16
 80197b6:	46bd      	mov	sp, r7
 80197b8:	bd80      	pop	{r7, pc}

080197ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80197ba:	b580      	push	{r7, lr}
 80197bc:	b082      	sub	sp, #8
 80197be:	af00      	add	r7, sp, #0
 80197c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	2204      	movs	r2, #4
 80197c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80197ca:	2300      	movs	r3, #0
 80197cc:	2200      	movs	r2, #0
 80197ce:	2100      	movs	r1, #0
 80197d0:	6878      	ldr	r0, [r7, #4]
 80197d2:	f005 fcf4 	bl	801f1be <USBD_LL_Transmit>

  return USBD_OK;
 80197d6:	2300      	movs	r3, #0
}
 80197d8:	4618      	mov	r0, r3
 80197da:	3708      	adds	r7, #8
 80197dc:	46bd      	mov	sp, r7
 80197de:	bd80      	pop	{r7, pc}

080197e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b082      	sub	sp, #8
 80197e4:	af00      	add	r7, sp, #0
 80197e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	2205      	movs	r2, #5
 80197ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80197f0:	2300      	movs	r3, #0
 80197f2:	2200      	movs	r2, #0
 80197f4:	2100      	movs	r1, #0
 80197f6:	6878      	ldr	r0, [r7, #4]
 80197f8:	f005 fd02 	bl	801f200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80197fc:	2300      	movs	r3, #0
}
 80197fe:	4618      	mov	r0, r3
 8019800:	3708      	adds	r7, #8
 8019802:	46bd      	mov	sp, r7
 8019804:	bd80      	pop	{r7, pc}
	...

08019808 <__NVIC_SetPriority>:
{
 8019808:	b480      	push	{r7}
 801980a:	b083      	sub	sp, #12
 801980c:	af00      	add	r7, sp, #0
 801980e:	4603      	mov	r3, r0
 8019810:	6039      	str	r1, [r7, #0]
 8019812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019818:	2b00      	cmp	r3, #0
 801981a:	db0a      	blt.n	8019832 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	b2da      	uxtb	r2, r3
 8019820:	490c      	ldr	r1, [pc, #48]	; (8019854 <__NVIC_SetPriority+0x4c>)
 8019822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019826:	0112      	lsls	r2, r2, #4
 8019828:	b2d2      	uxtb	r2, r2
 801982a:	440b      	add	r3, r1
 801982c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019830:	e00a      	b.n	8019848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	b2da      	uxtb	r2, r3
 8019836:	4908      	ldr	r1, [pc, #32]	; (8019858 <__NVIC_SetPriority+0x50>)
 8019838:	79fb      	ldrb	r3, [r7, #7]
 801983a:	f003 030f 	and.w	r3, r3, #15
 801983e:	3b04      	subs	r3, #4
 8019840:	0112      	lsls	r2, r2, #4
 8019842:	b2d2      	uxtb	r2, r2
 8019844:	440b      	add	r3, r1
 8019846:	761a      	strb	r2, [r3, #24]
}
 8019848:	bf00      	nop
 801984a:	370c      	adds	r7, #12
 801984c:	46bd      	mov	sp, r7
 801984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019852:	4770      	bx	lr
 8019854:	e000e100 	.word	0xe000e100
 8019858:	e000ed00 	.word	0xe000ed00

0801985c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801985c:	b580      	push	{r7, lr}
 801985e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8019860:	4b05      	ldr	r3, [pc, #20]	; (8019878 <SysTick_Handler+0x1c>)
 8019862:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8019864:	f002 fb10 	bl	801be88 <xTaskGetSchedulerState>
 8019868:	4603      	mov	r3, r0
 801986a:	2b01      	cmp	r3, #1
 801986c:	d001      	beq.n	8019872 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801986e:	f003 f9f3 	bl	801cc58 <xPortSysTickHandler>
  }
}
 8019872:	bf00      	nop
 8019874:	bd80      	pop	{r7, pc}
 8019876:	bf00      	nop
 8019878:	e000e010 	.word	0xe000e010

0801987c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801987c:	b580      	push	{r7, lr}
 801987e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8019880:	2100      	movs	r1, #0
 8019882:	f06f 0004 	mvn.w	r0, #4
 8019886:	f7ff ffbf 	bl	8019808 <__NVIC_SetPriority>
#endif
}
 801988a:	bf00      	nop
 801988c:	bd80      	pop	{r7, pc}
	...

08019890 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8019890:	b480      	push	{r7}
 8019892:	b083      	sub	sp, #12
 8019894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019896:	f3ef 8305 	mrs	r3, IPSR
 801989a:	603b      	str	r3, [r7, #0]
  return(result);
 801989c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d003      	beq.n	80198aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80198a2:	f06f 0305 	mvn.w	r3, #5
 80198a6:	607b      	str	r3, [r7, #4]
 80198a8:	e00c      	b.n	80198c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80198aa:	4b0a      	ldr	r3, [pc, #40]	; (80198d4 <osKernelInitialize+0x44>)
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d105      	bne.n	80198be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80198b2:	4b08      	ldr	r3, [pc, #32]	; (80198d4 <osKernelInitialize+0x44>)
 80198b4:	2201      	movs	r2, #1
 80198b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80198b8:	2300      	movs	r3, #0
 80198ba:	607b      	str	r3, [r7, #4]
 80198bc:	e002      	b.n	80198c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80198be:	f04f 33ff 	mov.w	r3, #4294967295
 80198c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80198c4:	687b      	ldr	r3, [r7, #4]
}
 80198c6:	4618      	mov	r0, r3
 80198c8:	370c      	adds	r7, #12
 80198ca:	46bd      	mov	sp, r7
 80198cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d0:	4770      	bx	lr
 80198d2:	bf00      	nop
 80198d4:	20001c84 	.word	0x20001c84

080198d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80198d8:	b580      	push	{r7, lr}
 80198da:	b082      	sub	sp, #8
 80198dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80198de:	f3ef 8305 	mrs	r3, IPSR
 80198e2:	603b      	str	r3, [r7, #0]
  return(result);
 80198e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d003      	beq.n	80198f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80198ea:	f06f 0305 	mvn.w	r3, #5
 80198ee:	607b      	str	r3, [r7, #4]
 80198f0:	e010      	b.n	8019914 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80198f2:	4b0b      	ldr	r3, [pc, #44]	; (8019920 <osKernelStart+0x48>)
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	2b01      	cmp	r3, #1
 80198f8:	d109      	bne.n	801990e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80198fa:	f7ff ffbf 	bl	801987c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80198fe:	4b08      	ldr	r3, [pc, #32]	; (8019920 <osKernelStart+0x48>)
 8019900:	2202      	movs	r2, #2
 8019902:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8019904:	f001 fe54 	bl	801b5b0 <vTaskStartScheduler>
      stat = osOK;
 8019908:	2300      	movs	r3, #0
 801990a:	607b      	str	r3, [r7, #4]
 801990c:	e002      	b.n	8019914 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801990e:	f04f 33ff 	mov.w	r3, #4294967295
 8019912:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019914:	687b      	ldr	r3, [r7, #4]
}
 8019916:	4618      	mov	r0, r3
 8019918:	3708      	adds	r7, #8
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
 801991e:	bf00      	nop
 8019920:	20001c84 	.word	0x20001c84

08019924 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8019924:	b580      	push	{r7, lr}
 8019926:	b08e      	sub	sp, #56	; 0x38
 8019928:	af04      	add	r7, sp, #16
 801992a:	60f8      	str	r0, [r7, #12]
 801992c:	60b9      	str	r1, [r7, #8]
 801992e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8019930:	2300      	movs	r3, #0
 8019932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019934:	f3ef 8305 	mrs	r3, IPSR
 8019938:	617b      	str	r3, [r7, #20]
  return(result);
 801993a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801993c:	2b00      	cmp	r3, #0
 801993e:	d17e      	bne.n	8019a3e <osThreadNew+0x11a>
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d07b      	beq.n	8019a3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8019946:	2380      	movs	r3, #128	; 0x80
 8019948:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801994a:	2318      	movs	r3, #24
 801994c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801994e:	2300      	movs	r3, #0
 8019950:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8019952:	f04f 33ff 	mov.w	r3, #4294967295
 8019956:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	2b00      	cmp	r3, #0
 801995c:	d045      	beq.n	80199ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d002      	beq.n	801996c <osThreadNew+0x48>
        name = attr->name;
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	699b      	ldr	r3, [r3, #24]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d002      	beq.n	801997a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	699b      	ldr	r3, [r3, #24]
 8019978:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801997a:	69fb      	ldr	r3, [r7, #28]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d008      	beq.n	8019992 <osThreadNew+0x6e>
 8019980:	69fb      	ldr	r3, [r7, #28]
 8019982:	2b38      	cmp	r3, #56	; 0x38
 8019984:	d805      	bhi.n	8019992 <osThreadNew+0x6e>
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	685b      	ldr	r3, [r3, #4]
 801998a:	f003 0301 	and.w	r3, r3, #1
 801998e:	2b00      	cmp	r3, #0
 8019990:	d001      	beq.n	8019996 <osThreadNew+0x72>
        return (NULL);
 8019992:	2300      	movs	r3, #0
 8019994:	e054      	b.n	8019a40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	695b      	ldr	r3, [r3, #20]
 801999a:	2b00      	cmp	r3, #0
 801999c:	d003      	beq.n	80199a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	695b      	ldr	r3, [r3, #20]
 80199a2:	089b      	lsrs	r3, r3, #2
 80199a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	689b      	ldr	r3, [r3, #8]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d00e      	beq.n	80199cc <osThreadNew+0xa8>
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	68db      	ldr	r3, [r3, #12]
 80199b2:	2ba7      	cmp	r3, #167	; 0xa7
 80199b4:	d90a      	bls.n	80199cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d006      	beq.n	80199cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	695b      	ldr	r3, [r3, #20]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d002      	beq.n	80199cc <osThreadNew+0xa8>
        mem = 1;
 80199c6:	2301      	movs	r3, #1
 80199c8:	61bb      	str	r3, [r7, #24]
 80199ca:	e010      	b.n	80199ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	689b      	ldr	r3, [r3, #8]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d10c      	bne.n	80199ee <osThreadNew+0xca>
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	68db      	ldr	r3, [r3, #12]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d108      	bne.n	80199ee <osThreadNew+0xca>
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	691b      	ldr	r3, [r3, #16]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d104      	bne.n	80199ee <osThreadNew+0xca>
          mem = 0;
 80199e4:	2300      	movs	r3, #0
 80199e6:	61bb      	str	r3, [r7, #24]
 80199e8:	e001      	b.n	80199ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80199ea:	2300      	movs	r3, #0
 80199ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80199ee:	69bb      	ldr	r3, [r7, #24]
 80199f0:	2b01      	cmp	r3, #1
 80199f2:	d110      	bne.n	8019a16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80199f8:	687a      	ldr	r2, [r7, #4]
 80199fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80199fc:	9202      	str	r2, [sp, #8]
 80199fe:	9301      	str	r3, [sp, #4]
 8019a00:	69fb      	ldr	r3, [r7, #28]
 8019a02:	9300      	str	r3, [sp, #0]
 8019a04:	68bb      	ldr	r3, [r7, #8]
 8019a06:	6a3a      	ldr	r2, [r7, #32]
 8019a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019a0a:	68f8      	ldr	r0, [r7, #12]
 8019a0c:	f001 fb0c 	bl	801b028 <xTaskCreateStatic>
 8019a10:	4603      	mov	r3, r0
 8019a12:	613b      	str	r3, [r7, #16]
 8019a14:	e013      	b.n	8019a3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8019a16:	69bb      	ldr	r3, [r7, #24]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d110      	bne.n	8019a3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8019a1c:	6a3b      	ldr	r3, [r7, #32]
 8019a1e:	b29a      	uxth	r2, r3
 8019a20:	f107 0310 	add.w	r3, r7, #16
 8019a24:	9301      	str	r3, [sp, #4]
 8019a26:	69fb      	ldr	r3, [r7, #28]
 8019a28:	9300      	str	r3, [sp, #0]
 8019a2a:	68bb      	ldr	r3, [r7, #8]
 8019a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019a2e:	68f8      	ldr	r0, [r7, #12]
 8019a30:	f001 fb57 	bl	801b0e2 <xTaskCreate>
 8019a34:	4603      	mov	r3, r0
 8019a36:	2b01      	cmp	r3, #1
 8019a38:	d001      	beq.n	8019a3e <osThreadNew+0x11a>
            hTask = NULL;
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019a3e:	693b      	ldr	r3, [r7, #16]
}
 8019a40:	4618      	mov	r0, r3
 8019a42:	3728      	adds	r7, #40	; 0x28
 8019a44:	46bd      	mov	sp, r7
 8019a46:	bd80      	pop	{r7, pc}

08019a48 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b086      	sub	sp, #24
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019a54:	f3ef 8305 	mrs	r3, IPSR
 8019a58:	60bb      	str	r3, [r7, #8]
  return(result);
 8019a5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d003      	beq.n	8019a68 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8019a60:	f06f 0305 	mvn.w	r3, #5
 8019a64:	617b      	str	r3, [r7, #20]
 8019a66:	e017      	b.n	8019a98 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8019a68:	693b      	ldr	r3, [r7, #16]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d103      	bne.n	8019a76 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8019a6e:	f06f 0303 	mvn.w	r3, #3
 8019a72:	617b      	str	r3, [r7, #20]
 8019a74:	e010      	b.n	8019a98 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8019a76:	6938      	ldr	r0, [r7, #16]
 8019a78:	f001 fd34 	bl	801b4e4 <eTaskGetState>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8019a80:	7bfb      	ldrb	r3, [r7, #15]
 8019a82:	2b04      	cmp	r3, #4
 8019a84:	d005      	beq.n	8019a92 <osThreadTerminate+0x4a>
      stat = osOK;
 8019a86:	2300      	movs	r3, #0
 8019a88:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8019a8a:	6938      	ldr	r0, [r7, #16]
 8019a8c:	f001 fc84 	bl	801b398 <vTaskDelete>
 8019a90:	e002      	b.n	8019a98 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8019a92:	f06f 0302 	mvn.w	r3, #2
 8019a96:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8019a98:	697b      	ldr	r3, [r7, #20]
}
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	3718      	adds	r7, #24
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}

08019aa2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8019aa2:	b580      	push	{r7, lr}
 8019aa4:	b084      	sub	sp, #16
 8019aa6:	af00      	add	r7, sp, #0
 8019aa8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019aaa:	f3ef 8305 	mrs	r3, IPSR
 8019aae:	60bb      	str	r3, [r7, #8]
  return(result);
 8019ab0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d003      	beq.n	8019abe <osDelay+0x1c>
    stat = osErrorISR;
 8019ab6:	f06f 0305 	mvn.w	r3, #5
 8019aba:	60fb      	str	r3, [r7, #12]
 8019abc:	e007      	b.n	8019ace <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8019abe:	2300      	movs	r3, #0
 8019ac0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d002      	beq.n	8019ace <osDelay+0x2c>
      vTaskDelay(ticks);
 8019ac8:	6878      	ldr	r0, [r7, #4]
 8019aca:	f001 fcd7 	bl	801b47c <vTaskDelay>
    }
  }

  return (stat);
 8019ace:	68fb      	ldr	r3, [r7, #12]
}
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	3710      	adds	r7, #16
 8019ad4:	46bd      	mov	sp, r7
 8019ad6:	bd80      	pop	{r7, pc}

08019ad8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b088      	sub	sp, #32
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019ae4:	f3ef 8305 	mrs	r3, IPSR
 8019ae8:	60bb      	str	r3, [r7, #8]
  return(result);
 8019aea:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d174      	bne.n	8019bda <osMutexNew+0x102>
    if (attr != NULL) {
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d003      	beq.n	8019afe <osMutexNew+0x26>
      type = attr->attr_bits;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	685b      	ldr	r3, [r3, #4]
 8019afa:	61bb      	str	r3, [r7, #24]
 8019afc:	e001      	b.n	8019b02 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8019afe:	2300      	movs	r3, #0
 8019b00:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8019b02:	69bb      	ldr	r3, [r7, #24]
 8019b04:	f003 0301 	and.w	r3, r3, #1
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d002      	beq.n	8019b12 <osMutexNew+0x3a>
      rmtx = 1U;
 8019b0c:	2301      	movs	r3, #1
 8019b0e:	617b      	str	r3, [r7, #20]
 8019b10:	e001      	b.n	8019b16 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8019b12:	2300      	movs	r3, #0
 8019b14:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8019b16:	69bb      	ldr	r3, [r7, #24]
 8019b18:	f003 0308 	and.w	r3, r3, #8
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d15c      	bne.n	8019bda <osMutexNew+0x102>
      mem = -1;
 8019b20:	f04f 33ff 	mov.w	r3, #4294967295
 8019b24:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d015      	beq.n	8019b58 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	689b      	ldr	r3, [r3, #8]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d006      	beq.n	8019b42 <osMutexNew+0x6a>
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	68db      	ldr	r3, [r3, #12]
 8019b38:	2b4f      	cmp	r3, #79	; 0x4f
 8019b3a:	d902      	bls.n	8019b42 <osMutexNew+0x6a>
          mem = 1;
 8019b3c:	2301      	movs	r3, #1
 8019b3e:	613b      	str	r3, [r7, #16]
 8019b40:	e00c      	b.n	8019b5c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	689b      	ldr	r3, [r3, #8]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d108      	bne.n	8019b5c <osMutexNew+0x84>
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	68db      	ldr	r3, [r3, #12]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d104      	bne.n	8019b5c <osMutexNew+0x84>
            mem = 0;
 8019b52:	2300      	movs	r3, #0
 8019b54:	613b      	str	r3, [r7, #16]
 8019b56:	e001      	b.n	8019b5c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8019b58:	2300      	movs	r3, #0
 8019b5a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8019b5c:	693b      	ldr	r3, [r7, #16]
 8019b5e:	2b01      	cmp	r3, #1
 8019b60:	d112      	bne.n	8019b88 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8019b62:	697b      	ldr	r3, [r7, #20]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d007      	beq.n	8019b78 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	689b      	ldr	r3, [r3, #8]
 8019b6c:	4619      	mov	r1, r3
 8019b6e:	2004      	movs	r0, #4
 8019b70:	f000 fc49 	bl	801a406 <xQueueCreateMutexStatic>
 8019b74:	61f8      	str	r0, [r7, #28]
 8019b76:	e016      	b.n	8019ba6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	689b      	ldr	r3, [r3, #8]
 8019b7c:	4619      	mov	r1, r3
 8019b7e:	2001      	movs	r0, #1
 8019b80:	f000 fc41 	bl	801a406 <xQueueCreateMutexStatic>
 8019b84:	61f8      	str	r0, [r7, #28]
 8019b86:	e00e      	b.n	8019ba6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8019b88:	693b      	ldr	r3, [r7, #16]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d10b      	bne.n	8019ba6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8019b8e:	697b      	ldr	r3, [r7, #20]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d004      	beq.n	8019b9e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8019b94:	2004      	movs	r0, #4
 8019b96:	f000 fc1e 	bl	801a3d6 <xQueueCreateMutex>
 8019b9a:	61f8      	str	r0, [r7, #28]
 8019b9c:	e003      	b.n	8019ba6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8019b9e:	2001      	movs	r0, #1
 8019ba0:	f000 fc19 	bl	801a3d6 <xQueueCreateMutex>
 8019ba4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8019ba6:	69fb      	ldr	r3, [r7, #28]
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d00c      	beq.n	8019bc6 <osMutexNew+0xee>
        if (attr != NULL) {
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d003      	beq.n	8019bba <osMutexNew+0xe2>
          name = attr->name;
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	60fb      	str	r3, [r7, #12]
 8019bb8:	e001      	b.n	8019bbe <osMutexNew+0xe6>
        } else {
          name = NULL;
 8019bba:	2300      	movs	r3, #0
 8019bbc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8019bbe:	68f9      	ldr	r1, [r7, #12]
 8019bc0:	69f8      	ldr	r0, [r7, #28]
 8019bc2:	f001 f9d3 	bl	801af6c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8019bc6:	69fb      	ldr	r3, [r7, #28]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d006      	beq.n	8019bda <osMutexNew+0x102>
 8019bcc:	697b      	ldr	r3, [r7, #20]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d003      	beq.n	8019bda <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8019bd2:	69fb      	ldr	r3, [r7, #28]
 8019bd4:	f043 0301 	orr.w	r3, r3, #1
 8019bd8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8019bda:	69fb      	ldr	r3, [r7, #28]
}
 8019bdc:	4618      	mov	r0, r3
 8019bde:	3720      	adds	r7, #32
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}

08019be4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8019be4:	b580      	push	{r7, lr}
 8019be6:	b086      	sub	sp, #24
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	6078      	str	r0, [r7, #4]
 8019bec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	f023 0301 	bic.w	r3, r3, #1
 8019bf4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	f003 0301 	and.w	r3, r3, #1
 8019bfc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8019bfe:	2300      	movs	r3, #0
 8019c00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019c02:	f3ef 8305 	mrs	r3, IPSR
 8019c06:	60bb      	str	r3, [r7, #8]
  return(result);
 8019c08:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d003      	beq.n	8019c16 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8019c0e:	f06f 0305 	mvn.w	r3, #5
 8019c12:	617b      	str	r3, [r7, #20]
 8019c14:	e02c      	b.n	8019c70 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8019c16:	693b      	ldr	r3, [r7, #16]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d103      	bne.n	8019c24 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8019c1c:	f06f 0303 	mvn.w	r3, #3
 8019c20:	617b      	str	r3, [r7, #20]
 8019c22:	e025      	b.n	8019c70 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d011      	beq.n	8019c4e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8019c2a:	6839      	ldr	r1, [r7, #0]
 8019c2c:	6938      	ldr	r0, [r7, #16]
 8019c2e:	f000 fc39 	bl	801a4a4 <xQueueTakeMutexRecursive>
 8019c32:	4603      	mov	r3, r0
 8019c34:	2b01      	cmp	r3, #1
 8019c36:	d01b      	beq.n	8019c70 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d003      	beq.n	8019c46 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8019c3e:	f06f 0301 	mvn.w	r3, #1
 8019c42:	617b      	str	r3, [r7, #20]
 8019c44:	e014      	b.n	8019c70 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8019c46:	f06f 0302 	mvn.w	r3, #2
 8019c4a:	617b      	str	r3, [r7, #20]
 8019c4c:	e010      	b.n	8019c70 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8019c4e:	6839      	ldr	r1, [r7, #0]
 8019c50:	6938      	ldr	r0, [r7, #16]
 8019c52:	f000 fed7 	bl	801aa04 <xQueueSemaphoreTake>
 8019c56:	4603      	mov	r3, r0
 8019c58:	2b01      	cmp	r3, #1
 8019c5a:	d009      	beq.n	8019c70 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019c5c:	683b      	ldr	r3, [r7, #0]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d003      	beq.n	8019c6a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8019c62:	f06f 0301 	mvn.w	r3, #1
 8019c66:	617b      	str	r3, [r7, #20]
 8019c68:	e002      	b.n	8019c70 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8019c6a:	f06f 0302 	mvn.w	r3, #2
 8019c6e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8019c70:	697b      	ldr	r3, [r7, #20]
}
 8019c72:	4618      	mov	r0, r3
 8019c74:	3718      	adds	r7, #24
 8019c76:	46bd      	mov	sp, r7
 8019c78:	bd80      	pop	{r7, pc}

08019c7a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8019c7a:	b580      	push	{r7, lr}
 8019c7c:	b086      	sub	sp, #24
 8019c7e:	af00      	add	r7, sp, #0
 8019c80:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	f023 0301 	bic.w	r3, r3, #1
 8019c88:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	f003 0301 	and.w	r3, r3, #1
 8019c90:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8019c92:	2300      	movs	r3, #0
 8019c94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019c96:	f3ef 8305 	mrs	r3, IPSR
 8019c9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8019c9c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d003      	beq.n	8019caa <osMutexRelease+0x30>
    stat = osErrorISR;
 8019ca2:	f06f 0305 	mvn.w	r3, #5
 8019ca6:	617b      	str	r3, [r7, #20]
 8019ca8:	e01f      	b.n	8019cea <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8019caa:	693b      	ldr	r3, [r7, #16]
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d103      	bne.n	8019cb8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8019cb0:	f06f 0303 	mvn.w	r3, #3
 8019cb4:	617b      	str	r3, [r7, #20]
 8019cb6:	e018      	b.n	8019cea <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d009      	beq.n	8019cd2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8019cbe:	6938      	ldr	r0, [r7, #16]
 8019cc0:	f000 fbbc 	bl	801a43c <xQueueGiveMutexRecursive>
 8019cc4:	4603      	mov	r3, r0
 8019cc6:	2b01      	cmp	r3, #1
 8019cc8:	d00f      	beq.n	8019cea <osMutexRelease+0x70>
        stat = osErrorResource;
 8019cca:	f06f 0302 	mvn.w	r3, #2
 8019cce:	617b      	str	r3, [r7, #20]
 8019cd0:	e00b      	b.n	8019cea <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	2100      	movs	r1, #0
 8019cd8:	6938      	ldr	r0, [r7, #16]
 8019cda:	f000 fc19 	bl	801a510 <xQueueGenericSend>
 8019cde:	4603      	mov	r3, r0
 8019ce0:	2b01      	cmp	r3, #1
 8019ce2:	d002      	beq.n	8019cea <osMutexRelease+0x70>
        stat = osErrorResource;
 8019ce4:	f06f 0302 	mvn.w	r3, #2
 8019ce8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8019cea:	697b      	ldr	r3, [r7, #20]
}
 8019cec:	4618      	mov	r0, r3
 8019cee:	3718      	adds	r7, #24
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bd80      	pop	{r7, pc}

08019cf4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b08a      	sub	sp, #40	; 0x28
 8019cf8:	af02      	add	r7, sp, #8
 8019cfa:	60f8      	str	r0, [r7, #12]
 8019cfc:	60b9      	str	r1, [r7, #8]
 8019cfe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8019d00:	2300      	movs	r3, #0
 8019d02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019d04:	f3ef 8305 	mrs	r3, IPSR
 8019d08:	613b      	str	r3, [r7, #16]
  return(result);
 8019d0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d15f      	bne.n	8019dd0 <osMessageQueueNew+0xdc>
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d05c      	beq.n	8019dd0 <osMessageQueueNew+0xdc>
 8019d16:	68bb      	ldr	r3, [r7, #8]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d059      	beq.n	8019dd0 <osMessageQueueNew+0xdc>
    mem = -1;
 8019d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d029      	beq.n	8019d7c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	689b      	ldr	r3, [r3, #8]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d012      	beq.n	8019d56 <osMessageQueueNew+0x62>
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	68db      	ldr	r3, [r3, #12]
 8019d34:	2b4f      	cmp	r3, #79	; 0x4f
 8019d36:	d90e      	bls.n	8019d56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d00a      	beq.n	8019d56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	695a      	ldr	r2, [r3, #20]
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	68b9      	ldr	r1, [r7, #8]
 8019d48:	fb01 f303 	mul.w	r3, r1, r3
 8019d4c:	429a      	cmp	r2, r3
 8019d4e:	d302      	bcc.n	8019d56 <osMessageQueueNew+0x62>
        mem = 1;
 8019d50:	2301      	movs	r3, #1
 8019d52:	61bb      	str	r3, [r7, #24]
 8019d54:	e014      	b.n	8019d80 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	689b      	ldr	r3, [r3, #8]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d110      	bne.n	8019d80 <osMessageQueueNew+0x8c>
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	68db      	ldr	r3, [r3, #12]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d10c      	bne.n	8019d80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d108      	bne.n	8019d80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	695b      	ldr	r3, [r3, #20]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d104      	bne.n	8019d80 <osMessageQueueNew+0x8c>
          mem = 0;
 8019d76:	2300      	movs	r3, #0
 8019d78:	61bb      	str	r3, [r7, #24]
 8019d7a:	e001      	b.n	8019d80 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8019d80:	69bb      	ldr	r3, [r7, #24]
 8019d82:	2b01      	cmp	r3, #1
 8019d84:	d10b      	bne.n	8019d9e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	691a      	ldr	r2, [r3, #16]
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	689b      	ldr	r3, [r3, #8]
 8019d8e:	2100      	movs	r1, #0
 8019d90:	9100      	str	r1, [sp, #0]
 8019d92:	68b9      	ldr	r1, [r7, #8]
 8019d94:	68f8      	ldr	r0, [r7, #12]
 8019d96:	f000 fa2f 	bl	801a1f8 <xQueueGenericCreateStatic>
 8019d9a:	61f8      	str	r0, [r7, #28]
 8019d9c:	e008      	b.n	8019db0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8019d9e:	69bb      	ldr	r3, [r7, #24]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d105      	bne.n	8019db0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8019da4:	2200      	movs	r2, #0
 8019da6:	68b9      	ldr	r1, [r7, #8]
 8019da8:	68f8      	ldr	r0, [r7, #12]
 8019daa:	f000 fa9d 	bl	801a2e8 <xQueueGenericCreate>
 8019dae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8019db0:	69fb      	ldr	r3, [r7, #28]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d00c      	beq.n	8019dd0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d003      	beq.n	8019dc4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	617b      	str	r3, [r7, #20]
 8019dc2:	e001      	b.n	8019dc8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8019dc8:	6979      	ldr	r1, [r7, #20]
 8019dca:	69f8      	ldr	r0, [r7, #28]
 8019dcc:	f001 f8ce 	bl	801af6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8019dd0:	69fb      	ldr	r3, [r7, #28]
}
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	3720      	adds	r7, #32
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	bd80      	pop	{r7, pc}
	...

08019ddc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b088      	sub	sp, #32
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	60f8      	str	r0, [r7, #12]
 8019de4:	60b9      	str	r1, [r7, #8]
 8019de6:	603b      	str	r3, [r7, #0]
 8019de8:	4613      	mov	r3, r2
 8019dea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8019df0:	2300      	movs	r3, #0
 8019df2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019df4:	f3ef 8305 	mrs	r3, IPSR
 8019df8:	617b      	str	r3, [r7, #20]
  return(result);
 8019dfa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d028      	beq.n	8019e52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019e00:	69bb      	ldr	r3, [r7, #24]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d005      	beq.n	8019e12 <osMessageQueuePut+0x36>
 8019e06:	68bb      	ldr	r3, [r7, #8]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d002      	beq.n	8019e12 <osMessageQueuePut+0x36>
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d003      	beq.n	8019e1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8019e12:	f06f 0303 	mvn.w	r3, #3
 8019e16:	61fb      	str	r3, [r7, #28]
 8019e18:	e038      	b.n	8019e8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8019e1a:	2300      	movs	r3, #0
 8019e1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8019e1e:	f107 0210 	add.w	r2, r7, #16
 8019e22:	2300      	movs	r3, #0
 8019e24:	68b9      	ldr	r1, [r7, #8]
 8019e26:	69b8      	ldr	r0, [r7, #24]
 8019e28:	f000 fc70 	bl	801a70c <xQueueGenericSendFromISR>
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	2b01      	cmp	r3, #1
 8019e30:	d003      	beq.n	8019e3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8019e32:	f06f 0302 	mvn.w	r3, #2
 8019e36:	61fb      	str	r3, [r7, #28]
 8019e38:	e028      	b.n	8019e8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8019e3a:	693b      	ldr	r3, [r7, #16]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d025      	beq.n	8019e8c <osMessageQueuePut+0xb0>
 8019e40:	4b15      	ldr	r3, [pc, #84]	; (8019e98 <osMessageQueuePut+0xbc>)
 8019e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e46:	601a      	str	r2, [r3, #0]
 8019e48:	f3bf 8f4f 	dsb	sy
 8019e4c:	f3bf 8f6f 	isb	sy
 8019e50:	e01c      	b.n	8019e8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019e52:	69bb      	ldr	r3, [r7, #24]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d002      	beq.n	8019e5e <osMessageQueuePut+0x82>
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d103      	bne.n	8019e66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8019e5e:	f06f 0303 	mvn.w	r3, #3
 8019e62:	61fb      	str	r3, [r7, #28]
 8019e64:	e012      	b.n	8019e8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8019e66:	2300      	movs	r3, #0
 8019e68:	683a      	ldr	r2, [r7, #0]
 8019e6a:	68b9      	ldr	r1, [r7, #8]
 8019e6c:	69b8      	ldr	r0, [r7, #24]
 8019e6e:	f000 fb4f 	bl	801a510 <xQueueGenericSend>
 8019e72:	4603      	mov	r3, r0
 8019e74:	2b01      	cmp	r3, #1
 8019e76:	d009      	beq.n	8019e8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8019e78:	683b      	ldr	r3, [r7, #0]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d003      	beq.n	8019e86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8019e7e:	f06f 0301 	mvn.w	r3, #1
 8019e82:	61fb      	str	r3, [r7, #28]
 8019e84:	e002      	b.n	8019e8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8019e86:	f06f 0302 	mvn.w	r3, #2
 8019e8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8019e8c:	69fb      	ldr	r3, [r7, #28]
}
 8019e8e:	4618      	mov	r0, r3
 8019e90:	3720      	adds	r7, #32
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bd80      	pop	{r7, pc}
 8019e96:	bf00      	nop
 8019e98:	e000ed04 	.word	0xe000ed04

08019e9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b088      	sub	sp, #32
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	60f8      	str	r0, [r7, #12]
 8019ea4:	60b9      	str	r1, [r7, #8]
 8019ea6:	607a      	str	r2, [r7, #4]
 8019ea8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8019eae:	2300      	movs	r3, #0
 8019eb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019eb2:	f3ef 8305 	mrs	r3, IPSR
 8019eb6:	617b      	str	r3, [r7, #20]
  return(result);
 8019eb8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d028      	beq.n	8019f10 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019ebe:	69bb      	ldr	r3, [r7, #24]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d005      	beq.n	8019ed0 <osMessageQueueGet+0x34>
 8019ec4:	68bb      	ldr	r3, [r7, #8]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d002      	beq.n	8019ed0 <osMessageQueueGet+0x34>
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d003      	beq.n	8019ed8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8019ed0:	f06f 0303 	mvn.w	r3, #3
 8019ed4:	61fb      	str	r3, [r7, #28]
 8019ed6:	e037      	b.n	8019f48 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8019ed8:	2300      	movs	r3, #0
 8019eda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8019edc:	f107 0310 	add.w	r3, r7, #16
 8019ee0:	461a      	mov	r2, r3
 8019ee2:	68b9      	ldr	r1, [r7, #8]
 8019ee4:	69b8      	ldr	r0, [r7, #24]
 8019ee6:	f000 fe99 	bl	801ac1c <xQueueReceiveFromISR>
 8019eea:	4603      	mov	r3, r0
 8019eec:	2b01      	cmp	r3, #1
 8019eee:	d003      	beq.n	8019ef8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8019ef0:	f06f 0302 	mvn.w	r3, #2
 8019ef4:	61fb      	str	r3, [r7, #28]
 8019ef6:	e027      	b.n	8019f48 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8019ef8:	693b      	ldr	r3, [r7, #16]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d024      	beq.n	8019f48 <osMessageQueueGet+0xac>
 8019efe:	4b15      	ldr	r3, [pc, #84]	; (8019f54 <osMessageQueueGet+0xb8>)
 8019f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f04:	601a      	str	r2, [r3, #0]
 8019f06:	f3bf 8f4f 	dsb	sy
 8019f0a:	f3bf 8f6f 	isb	sy
 8019f0e:	e01b      	b.n	8019f48 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019f10:	69bb      	ldr	r3, [r7, #24]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d002      	beq.n	8019f1c <osMessageQueueGet+0x80>
 8019f16:	68bb      	ldr	r3, [r7, #8]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d103      	bne.n	8019f24 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8019f1c:	f06f 0303 	mvn.w	r3, #3
 8019f20:	61fb      	str	r3, [r7, #28]
 8019f22:	e011      	b.n	8019f48 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8019f24:	683a      	ldr	r2, [r7, #0]
 8019f26:	68b9      	ldr	r1, [r7, #8]
 8019f28:	69b8      	ldr	r0, [r7, #24]
 8019f2a:	f000 fc8b 	bl	801a844 <xQueueReceive>
 8019f2e:	4603      	mov	r3, r0
 8019f30:	2b01      	cmp	r3, #1
 8019f32:	d009      	beq.n	8019f48 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d003      	beq.n	8019f42 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8019f3a:	f06f 0301 	mvn.w	r3, #1
 8019f3e:	61fb      	str	r3, [r7, #28]
 8019f40:	e002      	b.n	8019f48 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8019f42:	f06f 0302 	mvn.w	r3, #2
 8019f46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8019f48:	69fb      	ldr	r3, [r7, #28]
}
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	3720      	adds	r7, #32
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	bd80      	pop	{r7, pc}
 8019f52:	bf00      	nop
 8019f54:	e000ed04 	.word	0xe000ed04

08019f58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019f58:	b480      	push	{r7}
 8019f5a:	b085      	sub	sp, #20
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	60f8      	str	r0, [r7, #12]
 8019f60:	60b9      	str	r1, [r7, #8]
 8019f62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	4a07      	ldr	r2, [pc, #28]	; (8019f84 <vApplicationGetIdleTaskMemory+0x2c>)
 8019f68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019f6a:	68bb      	ldr	r3, [r7, #8]
 8019f6c:	4a06      	ldr	r2, [pc, #24]	; (8019f88 <vApplicationGetIdleTaskMemory+0x30>)
 8019f6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	2280      	movs	r2, #128	; 0x80
 8019f74:	601a      	str	r2, [r3, #0]
}
 8019f76:	bf00      	nop
 8019f78:	3714      	adds	r7, #20
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f80:	4770      	bx	lr
 8019f82:	bf00      	nop
 8019f84:	20001c88 	.word	0x20001c88
 8019f88:	20001d30 	.word	0x20001d30

08019f8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019f8c:	b480      	push	{r7}
 8019f8e:	b085      	sub	sp, #20
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	60f8      	str	r0, [r7, #12]
 8019f94:	60b9      	str	r1, [r7, #8]
 8019f96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	4a07      	ldr	r2, [pc, #28]	; (8019fb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8019f9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8019f9e:	68bb      	ldr	r3, [r7, #8]
 8019fa0:	4a06      	ldr	r2, [pc, #24]	; (8019fbc <vApplicationGetTimerTaskMemory+0x30>)
 8019fa2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019faa:	601a      	str	r2, [r3, #0]
}
 8019fac:	bf00      	nop
 8019fae:	3714      	adds	r7, #20
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb6:	4770      	bx	lr
 8019fb8:	20001f30 	.word	0x20001f30
 8019fbc:	20001fd8 	.word	0x20001fd8

08019fc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019fc0:	b480      	push	{r7}
 8019fc2:	b083      	sub	sp, #12
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	f103 0208 	add.w	r2, r3, #8
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8019fd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	f103 0208 	add.w	r2, r3, #8
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	f103 0208 	add.w	r2, r3, #8
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	2200      	movs	r2, #0
 8019ff2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019ff4:	bf00      	nop
 8019ff6:	370c      	adds	r7, #12
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ffe:	4770      	bx	lr

0801a000 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801a000:	b480      	push	{r7}
 801a002:	b083      	sub	sp, #12
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	2200      	movs	r2, #0
 801a00c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801a00e:	bf00      	nop
 801a010:	370c      	adds	r7, #12
 801a012:	46bd      	mov	sp, r7
 801a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a018:	4770      	bx	lr

0801a01a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a01a:	b480      	push	{r7}
 801a01c:	b085      	sub	sp, #20
 801a01e:	af00      	add	r7, sp, #0
 801a020:	6078      	str	r0, [r7, #4]
 801a022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	685b      	ldr	r3, [r3, #4]
 801a028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	68fa      	ldr	r2, [r7, #12]
 801a02e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	689a      	ldr	r2, [r3, #8]
 801a034:	683b      	ldr	r3, [r7, #0]
 801a036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	689b      	ldr	r3, [r3, #8]
 801a03c:	683a      	ldr	r2, [r7, #0]
 801a03e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	683a      	ldr	r2, [r7, #0]
 801a044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801a046:	683b      	ldr	r3, [r7, #0]
 801a048:	687a      	ldr	r2, [r7, #4]
 801a04a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	1c5a      	adds	r2, r3, #1
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	601a      	str	r2, [r3, #0]
}
 801a056:	bf00      	nop
 801a058:	3714      	adds	r7, #20
 801a05a:	46bd      	mov	sp, r7
 801a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a060:	4770      	bx	lr

0801a062 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a062:	b480      	push	{r7}
 801a064:	b085      	sub	sp, #20
 801a066:	af00      	add	r7, sp, #0
 801a068:	6078      	str	r0, [r7, #4]
 801a06a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801a06c:	683b      	ldr	r3, [r7, #0]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801a072:	68bb      	ldr	r3, [r7, #8]
 801a074:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a078:	d103      	bne.n	801a082 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	691b      	ldr	r3, [r3, #16]
 801a07e:	60fb      	str	r3, [r7, #12]
 801a080:	e00c      	b.n	801a09c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	3308      	adds	r3, #8
 801a086:	60fb      	str	r3, [r7, #12]
 801a088:	e002      	b.n	801a090 <vListInsert+0x2e>
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	685b      	ldr	r3, [r3, #4]
 801a08e:	60fb      	str	r3, [r7, #12]
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	685b      	ldr	r3, [r3, #4]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	68ba      	ldr	r2, [r7, #8]
 801a098:	429a      	cmp	r2, r3
 801a09a:	d2f6      	bcs.n	801a08a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	685a      	ldr	r2, [r3, #4]
 801a0a0:	683b      	ldr	r3, [r7, #0]
 801a0a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801a0a4:	683b      	ldr	r3, [r7, #0]
 801a0a6:	685b      	ldr	r3, [r3, #4]
 801a0a8:	683a      	ldr	r2, [r7, #0]
 801a0aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801a0ac:	683b      	ldr	r3, [r7, #0]
 801a0ae:	68fa      	ldr	r2, [r7, #12]
 801a0b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	683a      	ldr	r2, [r7, #0]
 801a0b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	687a      	ldr	r2, [r7, #4]
 801a0bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	1c5a      	adds	r2, r3, #1
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	601a      	str	r2, [r3, #0]
}
 801a0c8:	bf00      	nop
 801a0ca:	3714      	adds	r7, #20
 801a0cc:	46bd      	mov	sp, r7
 801a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d2:	4770      	bx	lr

0801a0d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801a0d4:	b480      	push	{r7}
 801a0d6:	b085      	sub	sp, #20
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	691b      	ldr	r3, [r3, #16]
 801a0e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	687a      	ldr	r2, [r7, #4]
 801a0e8:	6892      	ldr	r2, [r2, #8]
 801a0ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	689b      	ldr	r3, [r3, #8]
 801a0f0:	687a      	ldr	r2, [r7, #4]
 801a0f2:	6852      	ldr	r2, [r2, #4]
 801a0f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	685b      	ldr	r3, [r3, #4]
 801a0fa:	687a      	ldr	r2, [r7, #4]
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	d103      	bne.n	801a108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	689a      	ldr	r2, [r3, #8]
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	2200      	movs	r2, #0
 801a10c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	1e5a      	subs	r2, r3, #1
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	681b      	ldr	r3, [r3, #0]
}
 801a11c:	4618      	mov	r0, r3
 801a11e:	3714      	adds	r7, #20
 801a120:	46bd      	mov	sp, r7
 801a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a126:	4770      	bx	lr

0801a128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801a128:	b580      	push	{r7, lr}
 801a12a:	b084      	sub	sp, #16
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	6078      	str	r0, [r7, #4]
 801a130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d10a      	bne.n	801a152 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a140:	f383 8811 	msr	BASEPRI, r3
 801a144:	f3bf 8f6f 	isb	sy
 801a148:	f3bf 8f4f 	dsb	sy
 801a14c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801a14e:	bf00      	nop
 801a150:	e7fe      	b.n	801a150 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801a152:	f002 fcef 	bl	801cb34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	681a      	ldr	r2, [r3, #0]
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a15e:	68f9      	ldr	r1, [r7, #12]
 801a160:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a162:	fb01 f303 	mul.w	r3, r1, r3
 801a166:	441a      	add	r2, r3
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	2200      	movs	r2, #0
 801a170:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	681a      	ldr	r2, [r3, #0]
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	681a      	ldr	r2, [r3, #0]
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a182:	3b01      	subs	r3, #1
 801a184:	68f9      	ldr	r1, [r7, #12]
 801a186:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a188:	fb01 f303 	mul.w	r3, r1, r3
 801a18c:	441a      	add	r2, r3
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	22ff      	movs	r2, #255	; 0xff
 801a196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	22ff      	movs	r2, #255	; 0xff
 801a19e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801a1a2:	683b      	ldr	r3, [r7, #0]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d114      	bne.n	801a1d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	691b      	ldr	r3, [r3, #16]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d01a      	beq.n	801a1e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	3310      	adds	r3, #16
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	f001 fc95 	bl	801bae4 <xTaskRemoveFromEventList>
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d012      	beq.n	801a1e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801a1c0:	4b0c      	ldr	r3, [pc, #48]	; (801a1f4 <xQueueGenericReset+0xcc>)
 801a1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1c6:	601a      	str	r2, [r3, #0]
 801a1c8:	f3bf 8f4f 	dsb	sy
 801a1cc:	f3bf 8f6f 	isb	sy
 801a1d0:	e009      	b.n	801a1e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	3310      	adds	r3, #16
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f7ff fef2 	bl	8019fc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	3324      	adds	r3, #36	; 0x24
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7ff feed 	bl	8019fc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801a1e6:	f002 fcd5 	bl	801cb94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801a1ea:	2301      	movs	r3, #1
}
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	3710      	adds	r7, #16
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	bd80      	pop	{r7, pc}
 801a1f4:	e000ed04 	.word	0xe000ed04

0801a1f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b08e      	sub	sp, #56	; 0x38
 801a1fc:	af02      	add	r7, sp, #8
 801a1fe:	60f8      	str	r0, [r7, #12]
 801a200:	60b9      	str	r1, [r7, #8]
 801a202:	607a      	str	r2, [r7, #4]
 801a204:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d10a      	bne.n	801a222 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a210:	f383 8811 	msr	BASEPRI, r3
 801a214:	f3bf 8f6f 	isb	sy
 801a218:	f3bf 8f4f 	dsb	sy
 801a21c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a21e:	bf00      	nop
 801a220:	e7fe      	b.n	801a220 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801a222:	683b      	ldr	r3, [r7, #0]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d10a      	bne.n	801a23e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a22c:	f383 8811 	msr	BASEPRI, r3
 801a230:	f3bf 8f6f 	isb	sy
 801a234:	f3bf 8f4f 	dsb	sy
 801a238:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a23a:	bf00      	nop
 801a23c:	e7fe      	b.n	801a23c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d002      	beq.n	801a24a <xQueueGenericCreateStatic+0x52>
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d001      	beq.n	801a24e <xQueueGenericCreateStatic+0x56>
 801a24a:	2301      	movs	r3, #1
 801a24c:	e000      	b.n	801a250 <xQueueGenericCreateStatic+0x58>
 801a24e:	2300      	movs	r3, #0
 801a250:	2b00      	cmp	r3, #0
 801a252:	d10a      	bne.n	801a26a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a258:	f383 8811 	msr	BASEPRI, r3
 801a25c:	f3bf 8f6f 	isb	sy
 801a260:	f3bf 8f4f 	dsb	sy
 801a264:	623b      	str	r3, [r7, #32]
}
 801a266:	bf00      	nop
 801a268:	e7fe      	b.n	801a268 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d102      	bne.n	801a276 <xQueueGenericCreateStatic+0x7e>
 801a270:	68bb      	ldr	r3, [r7, #8]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d101      	bne.n	801a27a <xQueueGenericCreateStatic+0x82>
 801a276:	2301      	movs	r3, #1
 801a278:	e000      	b.n	801a27c <xQueueGenericCreateStatic+0x84>
 801a27a:	2300      	movs	r3, #0
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d10a      	bne.n	801a296 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a284:	f383 8811 	msr	BASEPRI, r3
 801a288:	f3bf 8f6f 	isb	sy
 801a28c:	f3bf 8f4f 	dsb	sy
 801a290:	61fb      	str	r3, [r7, #28]
}
 801a292:	bf00      	nop
 801a294:	e7fe      	b.n	801a294 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801a296:	2350      	movs	r3, #80	; 0x50
 801a298:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801a29a:	697b      	ldr	r3, [r7, #20]
 801a29c:	2b50      	cmp	r3, #80	; 0x50
 801a29e:	d00a      	beq.n	801a2b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2a4:	f383 8811 	msr	BASEPRI, r3
 801a2a8:	f3bf 8f6f 	isb	sy
 801a2ac:	f3bf 8f4f 	dsb	sy
 801a2b0:	61bb      	str	r3, [r7, #24]
}
 801a2b2:	bf00      	nop
 801a2b4:	e7fe      	b.n	801a2b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a2b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a2b8:	683b      	ldr	r3, [r7, #0]
 801a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d00d      	beq.n	801a2de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801a2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2c4:	2201      	movs	r2, #1
 801a2c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a2ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d0:	9300      	str	r3, [sp, #0]
 801a2d2:	4613      	mov	r3, r2
 801a2d4:	687a      	ldr	r2, [r7, #4]
 801a2d6:	68b9      	ldr	r1, [r7, #8]
 801a2d8:	68f8      	ldr	r0, [r7, #12]
 801a2da:	f000 f83f 	bl	801a35c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	3730      	adds	r7, #48	; 0x30
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}

0801a2e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b08a      	sub	sp, #40	; 0x28
 801a2ec:	af02      	add	r7, sp, #8
 801a2ee:	60f8      	str	r0, [r7, #12]
 801a2f0:	60b9      	str	r1, [r7, #8]
 801a2f2:	4613      	mov	r3, r2
 801a2f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d10a      	bne.n	801a312 <xQueueGenericCreate+0x2a>
	__asm volatile
 801a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a300:	f383 8811 	msr	BASEPRI, r3
 801a304:	f3bf 8f6f 	isb	sy
 801a308:	f3bf 8f4f 	dsb	sy
 801a30c:	613b      	str	r3, [r7, #16]
}
 801a30e:	bf00      	nop
 801a310:	e7fe      	b.n	801a310 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	68ba      	ldr	r2, [r7, #8]
 801a316:	fb02 f303 	mul.w	r3, r2, r3
 801a31a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801a31c:	69fb      	ldr	r3, [r7, #28]
 801a31e:	3350      	adds	r3, #80	; 0x50
 801a320:	4618      	mov	r0, r3
 801a322:	f002 fd29 	bl	801cd78 <pvPortMalloc>
 801a326:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801a328:	69bb      	ldr	r3, [r7, #24]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d011      	beq.n	801a352 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801a32e:	69bb      	ldr	r3, [r7, #24]
 801a330:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a332:	697b      	ldr	r3, [r7, #20]
 801a334:	3350      	adds	r3, #80	; 0x50
 801a336:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801a338:	69bb      	ldr	r3, [r7, #24]
 801a33a:	2200      	movs	r2, #0
 801a33c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a340:	79fa      	ldrb	r2, [r7, #7]
 801a342:	69bb      	ldr	r3, [r7, #24]
 801a344:	9300      	str	r3, [sp, #0]
 801a346:	4613      	mov	r3, r2
 801a348:	697a      	ldr	r2, [r7, #20]
 801a34a:	68b9      	ldr	r1, [r7, #8]
 801a34c:	68f8      	ldr	r0, [r7, #12]
 801a34e:	f000 f805 	bl	801a35c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a352:	69bb      	ldr	r3, [r7, #24]
	}
 801a354:	4618      	mov	r0, r3
 801a356:	3720      	adds	r7, #32
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}

0801a35c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b084      	sub	sp, #16
 801a360:	af00      	add	r7, sp, #0
 801a362:	60f8      	str	r0, [r7, #12]
 801a364:	60b9      	str	r1, [r7, #8]
 801a366:	607a      	str	r2, [r7, #4]
 801a368:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801a36a:	68bb      	ldr	r3, [r7, #8]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d103      	bne.n	801a378 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801a370:	69bb      	ldr	r3, [r7, #24]
 801a372:	69ba      	ldr	r2, [r7, #24]
 801a374:	601a      	str	r2, [r3, #0]
 801a376:	e002      	b.n	801a37e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801a378:	69bb      	ldr	r3, [r7, #24]
 801a37a:	687a      	ldr	r2, [r7, #4]
 801a37c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801a37e:	69bb      	ldr	r3, [r7, #24]
 801a380:	68fa      	ldr	r2, [r7, #12]
 801a382:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801a384:	69bb      	ldr	r3, [r7, #24]
 801a386:	68ba      	ldr	r2, [r7, #8]
 801a388:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801a38a:	2101      	movs	r1, #1
 801a38c:	69b8      	ldr	r0, [r7, #24]
 801a38e:	f7ff fecb 	bl	801a128 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801a392:	69bb      	ldr	r3, [r7, #24]
 801a394:	78fa      	ldrb	r2, [r7, #3]
 801a396:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801a39a:	bf00      	nop
 801a39c:	3710      	adds	r7, #16
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	bd80      	pop	{r7, pc}

0801a3a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801a3a2:	b580      	push	{r7, lr}
 801a3a4:	b082      	sub	sp, #8
 801a3a6:	af00      	add	r7, sp, #0
 801a3a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d00e      	beq.n	801a3ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	2200      	movs	r2, #0
 801a3c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	2100      	movs	r1, #0
 801a3c8:	6878      	ldr	r0, [r7, #4]
 801a3ca:	f000 f8a1 	bl	801a510 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801a3ce:	bf00      	nop
 801a3d0:	3708      	adds	r7, #8
 801a3d2:	46bd      	mov	sp, r7
 801a3d4:	bd80      	pop	{r7, pc}

0801a3d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801a3d6:	b580      	push	{r7, lr}
 801a3d8:	b086      	sub	sp, #24
 801a3da:	af00      	add	r7, sp, #0
 801a3dc:	4603      	mov	r3, r0
 801a3de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801a3e0:	2301      	movs	r3, #1
 801a3e2:	617b      	str	r3, [r7, #20]
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801a3e8:	79fb      	ldrb	r3, [r7, #7]
 801a3ea:	461a      	mov	r2, r3
 801a3ec:	6939      	ldr	r1, [r7, #16]
 801a3ee:	6978      	ldr	r0, [r7, #20]
 801a3f0:	f7ff ff7a 	bl	801a2e8 <xQueueGenericCreate>
 801a3f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a3f6:	68f8      	ldr	r0, [r7, #12]
 801a3f8:	f7ff ffd3 	bl	801a3a2 <prvInitialiseMutex>

		return xNewQueue;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
	}
 801a3fe:	4618      	mov	r0, r3
 801a400:	3718      	adds	r7, #24
 801a402:	46bd      	mov	sp, r7
 801a404:	bd80      	pop	{r7, pc}

0801a406 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801a406:	b580      	push	{r7, lr}
 801a408:	b088      	sub	sp, #32
 801a40a:	af02      	add	r7, sp, #8
 801a40c:	4603      	mov	r3, r0
 801a40e:	6039      	str	r1, [r7, #0]
 801a410:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801a412:	2301      	movs	r3, #1
 801a414:	617b      	str	r3, [r7, #20]
 801a416:	2300      	movs	r3, #0
 801a418:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801a41a:	79fb      	ldrb	r3, [r7, #7]
 801a41c:	9300      	str	r3, [sp, #0]
 801a41e:	683b      	ldr	r3, [r7, #0]
 801a420:	2200      	movs	r2, #0
 801a422:	6939      	ldr	r1, [r7, #16]
 801a424:	6978      	ldr	r0, [r7, #20]
 801a426:	f7ff fee7 	bl	801a1f8 <xQueueGenericCreateStatic>
 801a42a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a42c:	68f8      	ldr	r0, [r7, #12]
 801a42e:	f7ff ffb8 	bl	801a3a2 <prvInitialiseMutex>

		return xNewQueue;
 801a432:	68fb      	ldr	r3, [r7, #12]
	}
 801a434:	4618      	mov	r0, r3
 801a436:	3718      	adds	r7, #24
 801a438:	46bd      	mov	sp, r7
 801a43a:	bd80      	pop	{r7, pc}

0801a43c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801a43c:	b590      	push	{r4, r7, lr}
 801a43e:	b087      	sub	sp, #28
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801a448:	693b      	ldr	r3, [r7, #16]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d10a      	bne.n	801a464 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 801a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a452:	f383 8811 	msr	BASEPRI, r3
 801a456:	f3bf 8f6f 	isb	sy
 801a45a:	f3bf 8f4f 	dsb	sy
 801a45e:	60fb      	str	r3, [r7, #12]
}
 801a460:	bf00      	nop
 801a462:	e7fe      	b.n	801a462 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a464:	693b      	ldr	r3, [r7, #16]
 801a466:	689c      	ldr	r4, [r3, #8]
 801a468:	f001 fcfe 	bl	801be68 <xTaskGetCurrentTaskHandle>
 801a46c:	4603      	mov	r3, r0
 801a46e:	429c      	cmp	r4, r3
 801a470:	d111      	bne.n	801a496 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801a472:	693b      	ldr	r3, [r7, #16]
 801a474:	68db      	ldr	r3, [r3, #12]
 801a476:	1e5a      	subs	r2, r3, #1
 801a478:	693b      	ldr	r3, [r7, #16]
 801a47a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801a47c:	693b      	ldr	r3, [r7, #16]
 801a47e:	68db      	ldr	r3, [r3, #12]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d105      	bne.n	801a490 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801a484:	2300      	movs	r3, #0
 801a486:	2200      	movs	r2, #0
 801a488:	2100      	movs	r1, #0
 801a48a:	6938      	ldr	r0, [r7, #16]
 801a48c:	f000 f840 	bl	801a510 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801a490:	2301      	movs	r3, #1
 801a492:	617b      	str	r3, [r7, #20]
 801a494:	e001      	b.n	801a49a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801a496:	2300      	movs	r3, #0
 801a498:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801a49a:	697b      	ldr	r3, [r7, #20]
	}
 801a49c:	4618      	mov	r0, r3
 801a49e:	371c      	adds	r7, #28
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	bd90      	pop	{r4, r7, pc}

0801a4a4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801a4a4:	b590      	push	{r4, r7, lr}
 801a4a6:	b087      	sub	sp, #28
 801a4a8:	af00      	add	r7, sp, #0
 801a4aa:	6078      	str	r0, [r7, #4]
 801a4ac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801a4b2:	693b      	ldr	r3, [r7, #16]
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d10a      	bne.n	801a4ce <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 801a4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4bc:	f383 8811 	msr	BASEPRI, r3
 801a4c0:	f3bf 8f6f 	isb	sy
 801a4c4:	f3bf 8f4f 	dsb	sy
 801a4c8:	60fb      	str	r3, [r7, #12]
}
 801a4ca:	bf00      	nop
 801a4cc:	e7fe      	b.n	801a4cc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801a4ce:	693b      	ldr	r3, [r7, #16]
 801a4d0:	689c      	ldr	r4, [r3, #8]
 801a4d2:	f001 fcc9 	bl	801be68 <xTaskGetCurrentTaskHandle>
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	429c      	cmp	r4, r3
 801a4da:	d107      	bne.n	801a4ec <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a4dc:	693b      	ldr	r3, [r7, #16]
 801a4de:	68db      	ldr	r3, [r3, #12]
 801a4e0:	1c5a      	adds	r2, r3, #1
 801a4e2:	693b      	ldr	r3, [r7, #16]
 801a4e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	617b      	str	r3, [r7, #20]
 801a4ea:	e00c      	b.n	801a506 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801a4ec:	6839      	ldr	r1, [r7, #0]
 801a4ee:	6938      	ldr	r0, [r7, #16]
 801a4f0:	f000 fa88 	bl	801aa04 <xQueueSemaphoreTake>
 801a4f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801a4f6:	697b      	ldr	r3, [r7, #20]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d004      	beq.n	801a506 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801a4fc:	693b      	ldr	r3, [r7, #16]
 801a4fe:	68db      	ldr	r3, [r3, #12]
 801a500:	1c5a      	adds	r2, r3, #1
 801a502:	693b      	ldr	r3, [r7, #16]
 801a504:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801a506:	697b      	ldr	r3, [r7, #20]
	}
 801a508:	4618      	mov	r0, r3
 801a50a:	371c      	adds	r7, #28
 801a50c:	46bd      	mov	sp, r7
 801a50e:	bd90      	pop	{r4, r7, pc}

0801a510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a510:	b580      	push	{r7, lr}
 801a512:	b08e      	sub	sp, #56	; 0x38
 801a514:	af00      	add	r7, sp, #0
 801a516:	60f8      	str	r0, [r7, #12]
 801a518:	60b9      	str	r1, [r7, #8]
 801a51a:	607a      	str	r2, [r7, #4]
 801a51c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a51e:	2300      	movs	r3, #0
 801a520:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d10a      	bne.n	801a542 <xQueueGenericSend+0x32>
	__asm volatile
 801a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a530:	f383 8811 	msr	BASEPRI, r3
 801a534:	f3bf 8f6f 	isb	sy
 801a538:	f3bf 8f4f 	dsb	sy
 801a53c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a53e:	bf00      	nop
 801a540:	e7fe      	b.n	801a540 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a542:	68bb      	ldr	r3, [r7, #8]
 801a544:	2b00      	cmp	r3, #0
 801a546:	d103      	bne.n	801a550 <xQueueGenericSend+0x40>
 801a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d101      	bne.n	801a554 <xQueueGenericSend+0x44>
 801a550:	2301      	movs	r3, #1
 801a552:	e000      	b.n	801a556 <xQueueGenericSend+0x46>
 801a554:	2300      	movs	r3, #0
 801a556:	2b00      	cmp	r3, #0
 801a558:	d10a      	bne.n	801a570 <xQueueGenericSend+0x60>
	__asm volatile
 801a55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a55e:	f383 8811 	msr	BASEPRI, r3
 801a562:	f3bf 8f6f 	isb	sy
 801a566:	f3bf 8f4f 	dsb	sy
 801a56a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a56c:	bf00      	nop
 801a56e:	e7fe      	b.n	801a56e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a570:	683b      	ldr	r3, [r7, #0]
 801a572:	2b02      	cmp	r3, #2
 801a574:	d103      	bne.n	801a57e <xQueueGenericSend+0x6e>
 801a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a57a:	2b01      	cmp	r3, #1
 801a57c:	d101      	bne.n	801a582 <xQueueGenericSend+0x72>
 801a57e:	2301      	movs	r3, #1
 801a580:	e000      	b.n	801a584 <xQueueGenericSend+0x74>
 801a582:	2300      	movs	r3, #0
 801a584:	2b00      	cmp	r3, #0
 801a586:	d10a      	bne.n	801a59e <xQueueGenericSend+0x8e>
	__asm volatile
 801a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a58c:	f383 8811 	msr	BASEPRI, r3
 801a590:	f3bf 8f6f 	isb	sy
 801a594:	f3bf 8f4f 	dsb	sy
 801a598:	623b      	str	r3, [r7, #32]
}
 801a59a:	bf00      	nop
 801a59c:	e7fe      	b.n	801a59c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a59e:	f001 fc73 	bl	801be88 <xTaskGetSchedulerState>
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d102      	bne.n	801a5ae <xQueueGenericSend+0x9e>
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d101      	bne.n	801a5b2 <xQueueGenericSend+0xa2>
 801a5ae:	2301      	movs	r3, #1
 801a5b0:	e000      	b.n	801a5b4 <xQueueGenericSend+0xa4>
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d10a      	bne.n	801a5ce <xQueueGenericSend+0xbe>
	__asm volatile
 801a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5bc:	f383 8811 	msr	BASEPRI, r3
 801a5c0:	f3bf 8f6f 	isb	sy
 801a5c4:	f3bf 8f4f 	dsb	sy
 801a5c8:	61fb      	str	r3, [r7, #28]
}
 801a5ca:	bf00      	nop
 801a5cc:	e7fe      	b.n	801a5cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a5ce:	f002 fab1 	bl	801cb34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5da:	429a      	cmp	r2, r3
 801a5dc:	d302      	bcc.n	801a5e4 <xQueueGenericSend+0xd4>
 801a5de:	683b      	ldr	r3, [r7, #0]
 801a5e0:	2b02      	cmp	r3, #2
 801a5e2:	d129      	bne.n	801a638 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a5e4:	683a      	ldr	r2, [r7, #0]
 801a5e6:	68b9      	ldr	r1, [r7, #8]
 801a5e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5ea:	f000 fbaf 	bl	801ad4c <prvCopyDataToQueue>
 801a5ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d010      	beq.n	801a61a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5fa:	3324      	adds	r3, #36	; 0x24
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	f001 fa71 	bl	801bae4 <xTaskRemoveFromEventList>
 801a602:	4603      	mov	r3, r0
 801a604:	2b00      	cmp	r3, #0
 801a606:	d013      	beq.n	801a630 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a608:	4b3f      	ldr	r3, [pc, #252]	; (801a708 <xQueueGenericSend+0x1f8>)
 801a60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a60e:	601a      	str	r2, [r3, #0]
 801a610:	f3bf 8f4f 	dsb	sy
 801a614:	f3bf 8f6f 	isb	sy
 801a618:	e00a      	b.n	801a630 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d007      	beq.n	801a630 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a620:	4b39      	ldr	r3, [pc, #228]	; (801a708 <xQueueGenericSend+0x1f8>)
 801a622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a626:	601a      	str	r2, [r3, #0]
 801a628:	f3bf 8f4f 	dsb	sy
 801a62c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a630:	f002 fab0 	bl	801cb94 <vPortExitCritical>
				return pdPASS;
 801a634:	2301      	movs	r3, #1
 801a636:	e063      	b.n	801a700 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d103      	bne.n	801a646 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a63e:	f002 faa9 	bl	801cb94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a642:	2300      	movs	r3, #0
 801a644:	e05c      	b.n	801a700 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d106      	bne.n	801a65a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a64c:	f107 0314 	add.w	r3, r7, #20
 801a650:	4618      	mov	r0, r3
 801a652:	f001 faab 	bl	801bbac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a656:	2301      	movs	r3, #1
 801a658:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a65a:	f002 fa9b 	bl	801cb94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a65e:	f001 f817 	bl	801b690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a662:	f002 fa67 	bl	801cb34 <vPortEnterCritical>
 801a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a66c:	b25b      	sxtb	r3, r3
 801a66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a672:	d103      	bne.n	801a67c <xQueueGenericSend+0x16c>
 801a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a676:	2200      	movs	r2, #0
 801a678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a67e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a682:	b25b      	sxtb	r3, r3
 801a684:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a688:	d103      	bne.n	801a692 <xQueueGenericSend+0x182>
 801a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a68c:	2200      	movs	r2, #0
 801a68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a692:	f002 fa7f 	bl	801cb94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a696:	1d3a      	adds	r2, r7, #4
 801a698:	f107 0314 	add.w	r3, r7, #20
 801a69c:	4611      	mov	r1, r2
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f001 fa9a 	bl	801bbd8 <xTaskCheckForTimeOut>
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d124      	bne.n	801a6f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a6aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6ac:	f000 fc46 	bl	801af3c <prvIsQueueFull>
 801a6b0:	4603      	mov	r3, r0
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d018      	beq.n	801a6e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6b8:	3310      	adds	r3, #16
 801a6ba:	687a      	ldr	r2, [r7, #4]
 801a6bc:	4611      	mov	r1, r2
 801a6be:	4618      	mov	r0, r3
 801a6c0:	f001 f9c0 	bl	801ba44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a6c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6c6:	f000 fbd1 	bl	801ae6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a6ca:	f000 ffef 	bl	801b6ac <xTaskResumeAll>
 801a6ce:	4603      	mov	r3, r0
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	f47f af7c 	bne.w	801a5ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801a6d6:	4b0c      	ldr	r3, [pc, #48]	; (801a708 <xQueueGenericSend+0x1f8>)
 801a6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a6dc:	601a      	str	r2, [r3, #0]
 801a6de:	f3bf 8f4f 	dsb	sy
 801a6e2:	f3bf 8f6f 	isb	sy
 801a6e6:	e772      	b.n	801a5ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a6e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6ea:	f000 fbbf 	bl	801ae6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a6ee:	f000 ffdd 	bl	801b6ac <xTaskResumeAll>
 801a6f2:	e76c      	b.n	801a5ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a6f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6f6:	f000 fbb9 	bl	801ae6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a6fa:	f000 ffd7 	bl	801b6ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a6fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a700:	4618      	mov	r0, r3
 801a702:	3738      	adds	r7, #56	; 0x38
 801a704:	46bd      	mov	sp, r7
 801a706:	bd80      	pop	{r7, pc}
 801a708:	e000ed04 	.word	0xe000ed04

0801a70c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b090      	sub	sp, #64	; 0x40
 801a710:	af00      	add	r7, sp, #0
 801a712:	60f8      	str	r0, [r7, #12]
 801a714:	60b9      	str	r1, [r7, #8]
 801a716:	607a      	str	r2, [r7, #4]
 801a718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801a71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a720:	2b00      	cmp	r3, #0
 801a722:	d10a      	bne.n	801a73a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801a724:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a728:	f383 8811 	msr	BASEPRI, r3
 801a72c:	f3bf 8f6f 	isb	sy
 801a730:	f3bf 8f4f 	dsb	sy
 801a734:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a736:	bf00      	nop
 801a738:	e7fe      	b.n	801a738 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a73a:	68bb      	ldr	r3, [r7, #8]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d103      	bne.n	801a748 <xQueueGenericSendFromISR+0x3c>
 801a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a744:	2b00      	cmp	r3, #0
 801a746:	d101      	bne.n	801a74c <xQueueGenericSendFromISR+0x40>
 801a748:	2301      	movs	r3, #1
 801a74a:	e000      	b.n	801a74e <xQueueGenericSendFromISR+0x42>
 801a74c:	2300      	movs	r3, #0
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d10a      	bne.n	801a768 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a756:	f383 8811 	msr	BASEPRI, r3
 801a75a:	f3bf 8f6f 	isb	sy
 801a75e:	f3bf 8f4f 	dsb	sy
 801a762:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a764:	bf00      	nop
 801a766:	e7fe      	b.n	801a766 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a768:	683b      	ldr	r3, [r7, #0]
 801a76a:	2b02      	cmp	r3, #2
 801a76c:	d103      	bne.n	801a776 <xQueueGenericSendFromISR+0x6a>
 801a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a772:	2b01      	cmp	r3, #1
 801a774:	d101      	bne.n	801a77a <xQueueGenericSendFromISR+0x6e>
 801a776:	2301      	movs	r3, #1
 801a778:	e000      	b.n	801a77c <xQueueGenericSendFromISR+0x70>
 801a77a:	2300      	movs	r3, #0
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d10a      	bne.n	801a796 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a784:	f383 8811 	msr	BASEPRI, r3
 801a788:	f3bf 8f6f 	isb	sy
 801a78c:	f3bf 8f4f 	dsb	sy
 801a790:	623b      	str	r3, [r7, #32]
}
 801a792:	bf00      	nop
 801a794:	e7fe      	b.n	801a794 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a796:	f002 faaf 	bl	801ccf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a79a:	f3ef 8211 	mrs	r2, BASEPRI
 801a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7a2:	f383 8811 	msr	BASEPRI, r3
 801a7a6:	f3bf 8f6f 	isb	sy
 801a7aa:	f3bf 8f4f 	dsb	sy
 801a7ae:	61fa      	str	r2, [r7, #28]
 801a7b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a7b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a7b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a7be:	429a      	cmp	r2, r3
 801a7c0:	d302      	bcc.n	801a7c8 <xQueueGenericSendFromISR+0xbc>
 801a7c2:	683b      	ldr	r3, [r7, #0]
 801a7c4:	2b02      	cmp	r3, #2
 801a7c6:	d12f      	bne.n	801a828 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a7d8:	683a      	ldr	r2, [r7, #0]
 801a7da:	68b9      	ldr	r1, [r7, #8]
 801a7dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a7de:	f000 fab5 	bl	801ad4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a7e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7ea:	d112      	bne.n	801a812 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d016      	beq.n	801a822 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7f6:	3324      	adds	r3, #36	; 0x24
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f001 f973 	bl	801bae4 <xTaskRemoveFromEventList>
 801a7fe:	4603      	mov	r3, r0
 801a800:	2b00      	cmp	r3, #0
 801a802:	d00e      	beq.n	801a822 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d00b      	beq.n	801a822 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	2201      	movs	r2, #1
 801a80e:	601a      	str	r2, [r3, #0]
 801a810:	e007      	b.n	801a822 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a812:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801a816:	3301      	adds	r3, #1
 801a818:	b2db      	uxtb	r3, r3
 801a81a:	b25a      	sxtb	r2, r3
 801a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a81e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a822:	2301      	movs	r3, #1
 801a824:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801a826:	e001      	b.n	801a82c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a828:	2300      	movs	r3, #0
 801a82a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a82e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a830:	697b      	ldr	r3, [r7, #20]
 801a832:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a836:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a83a:	4618      	mov	r0, r3
 801a83c:	3740      	adds	r7, #64	; 0x40
 801a83e:	46bd      	mov	sp, r7
 801a840:	bd80      	pop	{r7, pc}
	...

0801a844 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a844:	b580      	push	{r7, lr}
 801a846:	b08c      	sub	sp, #48	; 0x30
 801a848:	af00      	add	r7, sp, #0
 801a84a:	60f8      	str	r0, [r7, #12]
 801a84c:	60b9      	str	r1, [r7, #8]
 801a84e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a850:	2300      	movs	r3, #0
 801a852:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d10a      	bne.n	801a874 <xQueueReceive+0x30>
	__asm volatile
 801a85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a862:	f383 8811 	msr	BASEPRI, r3
 801a866:	f3bf 8f6f 	isb	sy
 801a86a:	f3bf 8f4f 	dsb	sy
 801a86e:	623b      	str	r3, [r7, #32]
}
 801a870:	bf00      	nop
 801a872:	e7fe      	b.n	801a872 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a874:	68bb      	ldr	r3, [r7, #8]
 801a876:	2b00      	cmp	r3, #0
 801a878:	d103      	bne.n	801a882 <xQueueReceive+0x3e>
 801a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d101      	bne.n	801a886 <xQueueReceive+0x42>
 801a882:	2301      	movs	r3, #1
 801a884:	e000      	b.n	801a888 <xQueueReceive+0x44>
 801a886:	2300      	movs	r3, #0
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d10a      	bne.n	801a8a2 <xQueueReceive+0x5e>
	__asm volatile
 801a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a890:	f383 8811 	msr	BASEPRI, r3
 801a894:	f3bf 8f6f 	isb	sy
 801a898:	f3bf 8f4f 	dsb	sy
 801a89c:	61fb      	str	r3, [r7, #28]
}
 801a89e:	bf00      	nop
 801a8a0:	e7fe      	b.n	801a8a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a8a2:	f001 faf1 	bl	801be88 <xTaskGetSchedulerState>
 801a8a6:	4603      	mov	r3, r0
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d102      	bne.n	801a8b2 <xQueueReceive+0x6e>
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d101      	bne.n	801a8b6 <xQueueReceive+0x72>
 801a8b2:	2301      	movs	r3, #1
 801a8b4:	e000      	b.n	801a8b8 <xQueueReceive+0x74>
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d10a      	bne.n	801a8d2 <xQueueReceive+0x8e>
	__asm volatile
 801a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8c0:	f383 8811 	msr	BASEPRI, r3
 801a8c4:	f3bf 8f6f 	isb	sy
 801a8c8:	f3bf 8f4f 	dsb	sy
 801a8cc:	61bb      	str	r3, [r7, #24]
}
 801a8ce:	bf00      	nop
 801a8d0:	e7fe      	b.n	801a8d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a8d2:	f002 f92f 	bl	801cb34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d01f      	beq.n	801a922 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a8e2:	68b9      	ldr	r1, [r7, #8]
 801a8e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a8e6:	f000 fa9b 	bl	801ae20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8ec:	1e5a      	subs	r2, r3, #1
 801a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8f4:	691b      	ldr	r3, [r3, #16]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d00f      	beq.n	801a91a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8fc:	3310      	adds	r3, #16
 801a8fe:	4618      	mov	r0, r3
 801a900:	f001 f8f0 	bl	801bae4 <xTaskRemoveFromEventList>
 801a904:	4603      	mov	r3, r0
 801a906:	2b00      	cmp	r3, #0
 801a908:	d007      	beq.n	801a91a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a90a:	4b3d      	ldr	r3, [pc, #244]	; (801aa00 <xQueueReceive+0x1bc>)
 801a90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a910:	601a      	str	r2, [r3, #0]
 801a912:	f3bf 8f4f 	dsb	sy
 801a916:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a91a:	f002 f93b 	bl	801cb94 <vPortExitCritical>
				return pdPASS;
 801a91e:	2301      	movs	r3, #1
 801a920:	e069      	b.n	801a9f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	2b00      	cmp	r3, #0
 801a926:	d103      	bne.n	801a930 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a928:	f002 f934 	bl	801cb94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a92c:	2300      	movs	r3, #0
 801a92e:	e062      	b.n	801a9f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a932:	2b00      	cmp	r3, #0
 801a934:	d106      	bne.n	801a944 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a936:	f107 0310 	add.w	r3, r7, #16
 801a93a:	4618      	mov	r0, r3
 801a93c:	f001 f936 	bl	801bbac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a940:	2301      	movs	r3, #1
 801a942:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a944:	f002 f926 	bl	801cb94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a948:	f000 fea2 	bl	801b690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a94c:	f002 f8f2 	bl	801cb34 <vPortEnterCritical>
 801a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a956:	b25b      	sxtb	r3, r3
 801a958:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a95c:	d103      	bne.n	801a966 <xQueueReceive+0x122>
 801a95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a960:	2200      	movs	r2, #0
 801a962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a96c:	b25b      	sxtb	r3, r3
 801a96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a972:	d103      	bne.n	801a97c <xQueueReceive+0x138>
 801a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a976:	2200      	movs	r2, #0
 801a978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a97c:	f002 f90a 	bl	801cb94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a980:	1d3a      	adds	r2, r7, #4
 801a982:	f107 0310 	add.w	r3, r7, #16
 801a986:	4611      	mov	r1, r2
 801a988:	4618      	mov	r0, r3
 801a98a:	f001 f925 	bl	801bbd8 <xTaskCheckForTimeOut>
 801a98e:	4603      	mov	r3, r0
 801a990:	2b00      	cmp	r3, #0
 801a992:	d123      	bne.n	801a9dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a996:	f000 fabb 	bl	801af10 <prvIsQueueEmpty>
 801a99a:	4603      	mov	r3, r0
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d017      	beq.n	801a9d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9a2:	3324      	adds	r3, #36	; 0x24
 801a9a4:	687a      	ldr	r2, [r7, #4]
 801a9a6:	4611      	mov	r1, r2
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f001 f84b 	bl	801ba44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a9ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9b0:	f000 fa5c 	bl	801ae6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a9b4:	f000 fe7a 	bl	801b6ac <xTaskResumeAll>
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d189      	bne.n	801a8d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801a9be:	4b10      	ldr	r3, [pc, #64]	; (801aa00 <xQueueReceive+0x1bc>)
 801a9c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a9c4:	601a      	str	r2, [r3, #0]
 801a9c6:	f3bf 8f4f 	dsb	sy
 801a9ca:	f3bf 8f6f 	isb	sy
 801a9ce:	e780      	b.n	801a8d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a9d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9d2:	f000 fa4b 	bl	801ae6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a9d6:	f000 fe69 	bl	801b6ac <xTaskResumeAll>
 801a9da:	e77a      	b.n	801a8d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9de:	f000 fa45 	bl	801ae6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a9e2:	f000 fe63 	bl	801b6ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9e8:	f000 fa92 	bl	801af10 <prvIsQueueEmpty>
 801a9ec:	4603      	mov	r3, r0
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	f43f af6f 	beq.w	801a8d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a9f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	3730      	adds	r7, #48	; 0x30
 801a9fa:	46bd      	mov	sp, r7
 801a9fc:	bd80      	pop	{r7, pc}
 801a9fe:	bf00      	nop
 801aa00:	e000ed04 	.word	0xe000ed04

0801aa04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b08e      	sub	sp, #56	; 0x38
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
 801aa0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801aa0e:	2300      	movs	r3, #0
 801aa10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801aa16:	2300      	movs	r3, #0
 801aa18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801aa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d10a      	bne.n	801aa36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa24:	f383 8811 	msr	BASEPRI, r3
 801aa28:	f3bf 8f6f 	isb	sy
 801aa2c:	f3bf 8f4f 	dsb	sy
 801aa30:	623b      	str	r3, [r7, #32]
}
 801aa32:	bf00      	nop
 801aa34:	e7fe      	b.n	801aa34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d00a      	beq.n	801aa54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa42:	f383 8811 	msr	BASEPRI, r3
 801aa46:	f3bf 8f6f 	isb	sy
 801aa4a:	f3bf 8f4f 	dsb	sy
 801aa4e:	61fb      	str	r3, [r7, #28]
}
 801aa50:	bf00      	nop
 801aa52:	e7fe      	b.n	801aa52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801aa54:	f001 fa18 	bl	801be88 <xTaskGetSchedulerState>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d102      	bne.n	801aa64 <xQueueSemaphoreTake+0x60>
 801aa5e:	683b      	ldr	r3, [r7, #0]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d101      	bne.n	801aa68 <xQueueSemaphoreTake+0x64>
 801aa64:	2301      	movs	r3, #1
 801aa66:	e000      	b.n	801aa6a <xQueueSemaphoreTake+0x66>
 801aa68:	2300      	movs	r3, #0
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d10a      	bne.n	801aa84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa72:	f383 8811 	msr	BASEPRI, r3
 801aa76:	f3bf 8f6f 	isb	sy
 801aa7a:	f3bf 8f4f 	dsb	sy
 801aa7e:	61bb      	str	r3, [r7, #24]
}
 801aa80:	bf00      	nop
 801aa82:	e7fe      	b.n	801aa82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801aa84:	f002 f856 	bl	801cb34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d024      	beq.n	801aade <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa96:	1e5a      	subs	r2, r3, #1
 801aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d104      	bne.n	801aaae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801aaa4:	f001 fb66 	bl	801c174 <pvTaskIncrementMutexHeldCount>
 801aaa8:	4602      	mov	r2, r0
 801aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab0:	691b      	ldr	r3, [r3, #16]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d00f      	beq.n	801aad6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab8:	3310      	adds	r3, #16
 801aaba:	4618      	mov	r0, r3
 801aabc:	f001 f812 	bl	801bae4 <xTaskRemoveFromEventList>
 801aac0:	4603      	mov	r3, r0
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d007      	beq.n	801aad6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801aac6:	4b54      	ldr	r3, [pc, #336]	; (801ac18 <xQueueSemaphoreTake+0x214>)
 801aac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aacc:	601a      	str	r2, [r3, #0]
 801aace:	f3bf 8f4f 	dsb	sy
 801aad2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801aad6:	f002 f85d 	bl	801cb94 <vPortExitCritical>
				return pdPASS;
 801aada:	2301      	movs	r3, #1
 801aadc:	e097      	b.n	801ac0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801aade:	683b      	ldr	r3, [r7, #0]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d111      	bne.n	801ab08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d00a      	beq.n	801ab00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aaee:	f383 8811 	msr	BASEPRI, r3
 801aaf2:	f3bf 8f6f 	isb	sy
 801aaf6:	f3bf 8f4f 	dsb	sy
 801aafa:	617b      	str	r3, [r7, #20]
}
 801aafc:	bf00      	nop
 801aafe:	e7fe      	b.n	801aafe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801ab00:	f002 f848 	bl	801cb94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ab04:	2300      	movs	r3, #0
 801ab06:	e082      	b.n	801ac0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ab08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d106      	bne.n	801ab1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ab0e:	f107 030c 	add.w	r3, r7, #12
 801ab12:	4618      	mov	r0, r3
 801ab14:	f001 f84a 	bl	801bbac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ab18:	2301      	movs	r3, #1
 801ab1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ab1c:	f002 f83a 	bl	801cb94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ab20:	f000 fdb6 	bl	801b690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ab24:	f002 f806 	bl	801cb34 <vPortEnterCritical>
 801ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ab2e:	b25b      	sxtb	r3, r3
 801ab30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab34:	d103      	bne.n	801ab3e <xQueueSemaphoreTake+0x13a>
 801ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab38:	2200      	movs	r2, #0
 801ab3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ab44:	b25b      	sxtb	r3, r3
 801ab46:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab4a:	d103      	bne.n	801ab54 <xQueueSemaphoreTake+0x150>
 801ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab4e:	2200      	movs	r2, #0
 801ab50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ab54:	f002 f81e 	bl	801cb94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ab58:	463a      	mov	r2, r7
 801ab5a:	f107 030c 	add.w	r3, r7, #12
 801ab5e:	4611      	mov	r1, r2
 801ab60:	4618      	mov	r0, r3
 801ab62:	f001 f839 	bl	801bbd8 <xTaskCheckForTimeOut>
 801ab66:	4603      	mov	r3, r0
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d132      	bne.n	801abd2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ab6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ab6e:	f000 f9cf 	bl	801af10 <prvIsQueueEmpty>
 801ab72:	4603      	mov	r3, r0
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d026      	beq.n	801abc6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ab78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d109      	bne.n	801ab94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801ab80:	f001 ffd8 	bl	801cb34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab86:	689b      	ldr	r3, [r3, #8]
 801ab88:	4618      	mov	r0, r3
 801ab8a:	f001 f99b 	bl	801bec4 <xTaskPriorityInherit>
 801ab8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801ab90:	f002 f800 	bl	801cb94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab96:	3324      	adds	r3, #36	; 0x24
 801ab98:	683a      	ldr	r2, [r7, #0]
 801ab9a:	4611      	mov	r1, r2
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	f000 ff51 	bl	801ba44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801aba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aba4:	f000 f962 	bl	801ae6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801aba8:	f000 fd80 	bl	801b6ac <xTaskResumeAll>
 801abac:	4603      	mov	r3, r0
 801abae:	2b00      	cmp	r3, #0
 801abb0:	f47f af68 	bne.w	801aa84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801abb4:	4b18      	ldr	r3, [pc, #96]	; (801ac18 <xQueueSemaphoreTake+0x214>)
 801abb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801abba:	601a      	str	r2, [r3, #0]
 801abbc:	f3bf 8f4f 	dsb	sy
 801abc0:	f3bf 8f6f 	isb	sy
 801abc4:	e75e      	b.n	801aa84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801abc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801abc8:	f000 f950 	bl	801ae6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801abcc:	f000 fd6e 	bl	801b6ac <xTaskResumeAll>
 801abd0:	e758      	b.n	801aa84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801abd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801abd4:	f000 f94a 	bl	801ae6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801abd8:	f000 fd68 	bl	801b6ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801abdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801abde:	f000 f997 	bl	801af10 <prvIsQueueEmpty>
 801abe2:	4603      	mov	r3, r0
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	f43f af4d 	beq.w	801aa84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801abec:	2b00      	cmp	r3, #0
 801abee:	d00d      	beq.n	801ac0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801abf0:	f001 ffa0 	bl	801cb34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801abf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801abf6:	f000 f891 	bl	801ad1c <prvGetDisinheritPriorityAfterTimeout>
 801abfa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abfe:	689b      	ldr	r3, [r3, #8]
 801ac00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ac02:	4618      	mov	r0, r3
 801ac04:	f001 fa34 	bl	801c070 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801ac08:	f001 ffc4 	bl	801cb94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801ac0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	3738      	adds	r7, #56	; 0x38
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bd80      	pop	{r7, pc}
 801ac16:	bf00      	nop
 801ac18:	e000ed04 	.word	0xe000ed04

0801ac1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b08e      	sub	sp, #56	; 0x38
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	60f8      	str	r0, [r7, #12]
 801ac24:	60b9      	str	r1, [r7, #8]
 801ac26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d10a      	bne.n	801ac48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac36:	f383 8811 	msr	BASEPRI, r3
 801ac3a:	f3bf 8f6f 	isb	sy
 801ac3e:	f3bf 8f4f 	dsb	sy
 801ac42:	623b      	str	r3, [r7, #32]
}
 801ac44:	bf00      	nop
 801ac46:	e7fe      	b.n	801ac46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ac48:	68bb      	ldr	r3, [r7, #8]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d103      	bne.n	801ac56 <xQueueReceiveFromISR+0x3a>
 801ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d101      	bne.n	801ac5a <xQueueReceiveFromISR+0x3e>
 801ac56:	2301      	movs	r3, #1
 801ac58:	e000      	b.n	801ac5c <xQueueReceiveFromISR+0x40>
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d10a      	bne.n	801ac76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac64:	f383 8811 	msr	BASEPRI, r3
 801ac68:	f3bf 8f6f 	isb	sy
 801ac6c:	f3bf 8f4f 	dsb	sy
 801ac70:	61fb      	str	r3, [r7, #28]
}
 801ac72:	bf00      	nop
 801ac74:	e7fe      	b.n	801ac74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ac76:	f002 f83f 	bl	801ccf8 <vPortValidateInterruptPriority>
	__asm volatile
 801ac7a:	f3ef 8211 	mrs	r2, BASEPRI
 801ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac82:	f383 8811 	msr	BASEPRI, r3
 801ac86:	f3bf 8f6f 	isb	sy
 801ac8a:	f3bf 8f4f 	dsb	sy
 801ac8e:	61ba      	str	r2, [r7, #24]
 801ac90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801ac92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801ac94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ac96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ac9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d02f      	beq.n	801ad02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801acac:	68b9      	ldr	r1, [r7, #8]
 801acae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801acb0:	f000 f8b6 	bl	801ae20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acb6:	1e5a      	subs	r2, r3, #1
 801acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801acbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801acc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801acc4:	d112      	bne.n	801acec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acc8:	691b      	ldr	r3, [r3, #16]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d016      	beq.n	801acfc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acd0:	3310      	adds	r3, #16
 801acd2:	4618      	mov	r0, r3
 801acd4:	f000 ff06 	bl	801bae4 <xTaskRemoveFromEventList>
 801acd8:	4603      	mov	r3, r0
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d00e      	beq.n	801acfc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d00b      	beq.n	801acfc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	2201      	movs	r2, #1
 801ace8:	601a      	str	r2, [r3, #0]
 801acea:	e007      	b.n	801acfc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801acec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801acf0:	3301      	adds	r3, #1
 801acf2:	b2db      	uxtb	r3, r3
 801acf4:	b25a      	sxtb	r2, r3
 801acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801acfc:	2301      	movs	r3, #1
 801acfe:	637b      	str	r3, [r7, #52]	; 0x34
 801ad00:	e001      	b.n	801ad06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801ad02:	2300      	movs	r3, #0
 801ad04:	637b      	str	r3, [r7, #52]	; 0x34
 801ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad08:	613b      	str	r3, [r7, #16]
	__asm volatile
 801ad0a:	693b      	ldr	r3, [r7, #16]
 801ad0c:	f383 8811 	msr	BASEPRI, r3
}
 801ad10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801ad12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801ad14:	4618      	mov	r0, r3
 801ad16:	3738      	adds	r7, #56	; 0x38
 801ad18:	46bd      	mov	sp, r7
 801ad1a:	bd80      	pop	{r7, pc}

0801ad1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801ad1c:	b480      	push	{r7}
 801ad1e:	b085      	sub	sp, #20
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d006      	beq.n	801ad3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801ad36:	60fb      	str	r3, [r7, #12]
 801ad38:	e001      	b.n	801ad3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801ad3e:	68fb      	ldr	r3, [r7, #12]
	}
 801ad40:	4618      	mov	r0, r3
 801ad42:	3714      	adds	r7, #20
 801ad44:	46bd      	mov	sp, r7
 801ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad4a:	4770      	bx	lr

0801ad4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b086      	sub	sp, #24
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	60f8      	str	r0, [r7, #12]
 801ad54:	60b9      	str	r1, [r7, #8]
 801ad56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801ad58:	2300      	movs	r3, #0
 801ad5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d10d      	bne.n	801ad86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d14d      	bne.n	801ae0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	689b      	ldr	r3, [r3, #8]
 801ad76:	4618      	mov	r0, r3
 801ad78:	f001 f90c 	bl	801bf94 <xTaskPriorityDisinherit>
 801ad7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	2200      	movs	r2, #0
 801ad82:	609a      	str	r2, [r3, #8]
 801ad84:	e043      	b.n	801ae0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d119      	bne.n	801adc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	6858      	ldr	r0, [r3, #4]
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad94:	461a      	mov	r2, r3
 801ad96:	68b9      	ldr	r1, [r7, #8]
 801ad98:	f004 fd4f 	bl	801f83a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	685a      	ldr	r2, [r3, #4]
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ada4:	441a      	add	r2, r3
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	685a      	ldr	r2, [r3, #4]
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	689b      	ldr	r3, [r3, #8]
 801adb2:	429a      	cmp	r2, r3
 801adb4:	d32b      	bcc.n	801ae0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	681a      	ldr	r2, [r3, #0]
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	605a      	str	r2, [r3, #4]
 801adbe:	e026      	b.n	801ae0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801adc0:	68fb      	ldr	r3, [r7, #12]
 801adc2:	68d8      	ldr	r0, [r3, #12]
 801adc4:	68fb      	ldr	r3, [r7, #12]
 801adc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adc8:	461a      	mov	r2, r3
 801adca:	68b9      	ldr	r1, [r7, #8]
 801adcc:	f004 fd35 	bl	801f83a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	68da      	ldr	r2, [r3, #12]
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801add8:	425b      	negs	r3, r3
 801adda:	441a      	add	r2, r3
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	68da      	ldr	r2, [r3, #12]
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	429a      	cmp	r2, r3
 801adea:	d207      	bcs.n	801adfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	689a      	ldr	r2, [r3, #8]
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adf4:	425b      	negs	r3, r3
 801adf6:	441a      	add	r2, r3
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	2b02      	cmp	r3, #2
 801ae00:	d105      	bne.n	801ae0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ae02:	693b      	ldr	r3, [r7, #16]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d002      	beq.n	801ae0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801ae08:	693b      	ldr	r3, [r7, #16]
 801ae0a:	3b01      	subs	r3, #1
 801ae0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801ae0e:	693b      	ldr	r3, [r7, #16]
 801ae10:	1c5a      	adds	r2, r3, #1
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801ae16:	697b      	ldr	r3, [r7, #20]
}
 801ae18:	4618      	mov	r0, r3
 801ae1a:	3718      	adds	r7, #24
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bd80      	pop	{r7, pc}

0801ae20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b082      	sub	sp, #8
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]
 801ae28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d018      	beq.n	801ae64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	68da      	ldr	r2, [r3, #12]
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae3a:	441a      	add	r2, r3
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	68da      	ldr	r2, [r3, #12]
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	689b      	ldr	r3, [r3, #8]
 801ae48:	429a      	cmp	r2, r3
 801ae4a:	d303      	bcc.n	801ae54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	681a      	ldr	r2, [r3, #0]
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	68d9      	ldr	r1, [r3, #12]
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae5c:	461a      	mov	r2, r3
 801ae5e:	6838      	ldr	r0, [r7, #0]
 801ae60:	f004 fceb 	bl	801f83a <memcpy>
	}
}
 801ae64:	bf00      	nop
 801ae66:	3708      	adds	r7, #8
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}

0801ae6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b084      	sub	sp, #16
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801ae74:	f001 fe5e 	bl	801cb34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ae7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ae80:	e011      	b.n	801aea6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d012      	beq.n	801aeb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	3324      	adds	r3, #36	; 0x24
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f000 fe28 	bl	801bae4 <xTaskRemoveFromEventList>
 801ae94:	4603      	mov	r3, r0
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d001      	beq.n	801ae9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801ae9a:	f000 feff 	bl	801bc9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801ae9e:	7bfb      	ldrb	r3, [r7, #15]
 801aea0:	3b01      	subs	r3, #1
 801aea2:	b2db      	uxtb	r3, r3
 801aea4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801aea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	dce9      	bgt.n	801ae82 <prvUnlockQueue+0x16>
 801aeae:	e000      	b.n	801aeb2 <prvUnlockQueue+0x46>
					break;
 801aeb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	22ff      	movs	r2, #255	; 0xff
 801aeb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801aeba:	f001 fe6b 	bl	801cb94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801aebe:	f001 fe39 	bl	801cb34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aec8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801aeca:	e011      	b.n	801aef0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	691b      	ldr	r3, [r3, #16]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d012      	beq.n	801aefa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	3310      	adds	r3, #16
 801aed8:	4618      	mov	r0, r3
 801aeda:	f000 fe03 	bl	801bae4 <xTaskRemoveFromEventList>
 801aede:	4603      	mov	r3, r0
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d001      	beq.n	801aee8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801aee4:	f000 feda 	bl	801bc9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801aee8:	7bbb      	ldrb	r3, [r7, #14]
 801aeea:	3b01      	subs	r3, #1
 801aeec:	b2db      	uxtb	r3, r3
 801aeee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801aef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	dce9      	bgt.n	801aecc <prvUnlockQueue+0x60>
 801aef8:	e000      	b.n	801aefc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801aefa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	22ff      	movs	r2, #255	; 0xff
 801af00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801af04:	f001 fe46 	bl	801cb94 <vPortExitCritical>
}
 801af08:	bf00      	nop
 801af0a:	3710      	adds	r7, #16
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bd80      	pop	{r7, pc}

0801af10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801af10:	b580      	push	{r7, lr}
 801af12:	b084      	sub	sp, #16
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801af18:	f001 fe0c 	bl	801cb34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af20:	2b00      	cmp	r3, #0
 801af22:	d102      	bne.n	801af2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801af24:	2301      	movs	r3, #1
 801af26:	60fb      	str	r3, [r7, #12]
 801af28:	e001      	b.n	801af2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801af2a:	2300      	movs	r3, #0
 801af2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801af2e:	f001 fe31 	bl	801cb94 <vPortExitCritical>

	return xReturn;
 801af32:	68fb      	ldr	r3, [r7, #12]
}
 801af34:	4618      	mov	r0, r3
 801af36:	3710      	adds	r7, #16
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}

0801af3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	b084      	sub	sp, #16
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801af44:	f001 fdf6 	bl	801cb34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af50:	429a      	cmp	r2, r3
 801af52:	d102      	bne.n	801af5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801af54:	2301      	movs	r3, #1
 801af56:	60fb      	str	r3, [r7, #12]
 801af58:	e001      	b.n	801af5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801af5a:	2300      	movs	r3, #0
 801af5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801af5e:	f001 fe19 	bl	801cb94 <vPortExitCritical>

	return xReturn;
 801af62:	68fb      	ldr	r3, [r7, #12]
}
 801af64:	4618      	mov	r0, r3
 801af66:	3710      	adds	r7, #16
 801af68:	46bd      	mov	sp, r7
 801af6a:	bd80      	pop	{r7, pc}

0801af6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801af6c:	b480      	push	{r7}
 801af6e:	b085      	sub	sp, #20
 801af70:	af00      	add	r7, sp, #0
 801af72:	6078      	str	r0, [r7, #4]
 801af74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801af76:	2300      	movs	r3, #0
 801af78:	60fb      	str	r3, [r7, #12]
 801af7a:	e014      	b.n	801afa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801af7c:	4a0f      	ldr	r2, [pc, #60]	; (801afbc <vQueueAddToRegistry+0x50>)
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801af84:	2b00      	cmp	r3, #0
 801af86:	d10b      	bne.n	801afa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801af88:	490c      	ldr	r1, [pc, #48]	; (801afbc <vQueueAddToRegistry+0x50>)
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	683a      	ldr	r2, [r7, #0]
 801af8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801af92:	4a0a      	ldr	r2, [pc, #40]	; (801afbc <vQueueAddToRegistry+0x50>)
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	00db      	lsls	r3, r3, #3
 801af98:	4413      	add	r3, r2
 801af9a:	687a      	ldr	r2, [r7, #4]
 801af9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801af9e:	e006      	b.n	801afae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	3301      	adds	r3, #1
 801afa4:	60fb      	str	r3, [r7, #12]
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	2b07      	cmp	r3, #7
 801afaa:	d9e7      	bls.n	801af7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801afac:	bf00      	nop
 801afae:	bf00      	nop
 801afb0:	3714      	adds	r7, #20
 801afb2:	46bd      	mov	sp, r7
 801afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb8:	4770      	bx	lr
 801afba:	bf00      	nop
 801afbc:	200023d8 	.word	0x200023d8

0801afc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b086      	sub	sp, #24
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	60f8      	str	r0, [r7, #12]
 801afc8:	60b9      	str	r1, [r7, #8]
 801afca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801afd0:	f001 fdb0 	bl	801cb34 <vPortEnterCritical>
 801afd4:	697b      	ldr	r3, [r7, #20]
 801afd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801afda:	b25b      	sxtb	r3, r3
 801afdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afe0:	d103      	bne.n	801afea <vQueueWaitForMessageRestricted+0x2a>
 801afe2:	697b      	ldr	r3, [r7, #20]
 801afe4:	2200      	movs	r2, #0
 801afe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801afea:	697b      	ldr	r3, [r7, #20]
 801afec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aff0:	b25b      	sxtb	r3, r3
 801aff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aff6:	d103      	bne.n	801b000 <vQueueWaitForMessageRestricted+0x40>
 801aff8:	697b      	ldr	r3, [r7, #20]
 801affa:	2200      	movs	r2, #0
 801affc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801b000:	f001 fdc8 	bl	801cb94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801b004:	697b      	ldr	r3, [r7, #20]
 801b006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d106      	bne.n	801b01a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801b00c:	697b      	ldr	r3, [r7, #20]
 801b00e:	3324      	adds	r3, #36	; 0x24
 801b010:	687a      	ldr	r2, [r7, #4]
 801b012:	68b9      	ldr	r1, [r7, #8]
 801b014:	4618      	mov	r0, r3
 801b016:	f000 fd39 	bl	801ba8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801b01a:	6978      	ldr	r0, [r7, #20]
 801b01c:	f7ff ff26 	bl	801ae6c <prvUnlockQueue>
	}
 801b020:	bf00      	nop
 801b022:	3718      	adds	r7, #24
 801b024:	46bd      	mov	sp, r7
 801b026:	bd80      	pop	{r7, pc}

0801b028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801b028:	b580      	push	{r7, lr}
 801b02a:	b08e      	sub	sp, #56	; 0x38
 801b02c:	af04      	add	r7, sp, #16
 801b02e:	60f8      	str	r0, [r7, #12]
 801b030:	60b9      	str	r1, [r7, #8]
 801b032:	607a      	str	r2, [r7, #4]
 801b034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801b036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d10a      	bne.n	801b052 <xTaskCreateStatic+0x2a>
	__asm volatile
 801b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b040:	f383 8811 	msr	BASEPRI, r3
 801b044:	f3bf 8f6f 	isb	sy
 801b048:	f3bf 8f4f 	dsb	sy
 801b04c:	623b      	str	r3, [r7, #32]
}
 801b04e:	bf00      	nop
 801b050:	e7fe      	b.n	801b050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b054:	2b00      	cmp	r3, #0
 801b056:	d10a      	bne.n	801b06e <xTaskCreateStatic+0x46>
	__asm volatile
 801b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b05c:	f383 8811 	msr	BASEPRI, r3
 801b060:	f3bf 8f6f 	isb	sy
 801b064:	f3bf 8f4f 	dsb	sy
 801b068:	61fb      	str	r3, [r7, #28]
}
 801b06a:	bf00      	nop
 801b06c:	e7fe      	b.n	801b06c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801b06e:	23a8      	movs	r3, #168	; 0xa8
 801b070:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801b072:	693b      	ldr	r3, [r7, #16]
 801b074:	2ba8      	cmp	r3, #168	; 0xa8
 801b076:	d00a      	beq.n	801b08e <xTaskCreateStatic+0x66>
	__asm volatile
 801b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b07c:	f383 8811 	msr	BASEPRI, r3
 801b080:	f3bf 8f6f 	isb	sy
 801b084:	f3bf 8f4f 	dsb	sy
 801b088:	61bb      	str	r3, [r7, #24]
}
 801b08a:	bf00      	nop
 801b08c:	e7fe      	b.n	801b08c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801b08e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b092:	2b00      	cmp	r3, #0
 801b094:	d01e      	beq.n	801b0d4 <xTaskCreateStatic+0xac>
 801b096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d01b      	beq.n	801b0d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b09e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b0a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0a8:	2202      	movs	r2, #2
 801b0aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	9303      	str	r3, [sp, #12]
 801b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0b4:	9302      	str	r3, [sp, #8]
 801b0b6:	f107 0314 	add.w	r3, r7, #20
 801b0ba:	9301      	str	r3, [sp, #4]
 801b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0be:	9300      	str	r3, [sp, #0]
 801b0c0:	683b      	ldr	r3, [r7, #0]
 801b0c2:	687a      	ldr	r2, [r7, #4]
 801b0c4:	68b9      	ldr	r1, [r7, #8]
 801b0c6:	68f8      	ldr	r0, [r7, #12]
 801b0c8:	f000 f850 	bl	801b16c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b0cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b0ce:	f000 f8f3 	bl	801b2b8 <prvAddNewTaskToReadyList>
 801b0d2:	e001      	b.n	801b0d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801b0d8:	697b      	ldr	r3, [r7, #20]
	}
 801b0da:	4618      	mov	r0, r3
 801b0dc:	3728      	adds	r7, #40	; 0x28
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	bd80      	pop	{r7, pc}

0801b0e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801b0e2:	b580      	push	{r7, lr}
 801b0e4:	b08c      	sub	sp, #48	; 0x30
 801b0e6:	af04      	add	r7, sp, #16
 801b0e8:	60f8      	str	r0, [r7, #12]
 801b0ea:	60b9      	str	r1, [r7, #8]
 801b0ec:	603b      	str	r3, [r7, #0]
 801b0ee:	4613      	mov	r3, r2
 801b0f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801b0f2:	88fb      	ldrh	r3, [r7, #6]
 801b0f4:	009b      	lsls	r3, r3, #2
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	f001 fe3e 	bl	801cd78 <pvPortMalloc>
 801b0fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801b0fe:	697b      	ldr	r3, [r7, #20]
 801b100:	2b00      	cmp	r3, #0
 801b102:	d00e      	beq.n	801b122 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801b104:	20a8      	movs	r0, #168	; 0xa8
 801b106:	f001 fe37 	bl	801cd78 <pvPortMalloc>
 801b10a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801b10c:	69fb      	ldr	r3, [r7, #28]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d003      	beq.n	801b11a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801b112:	69fb      	ldr	r3, [r7, #28]
 801b114:	697a      	ldr	r2, [r7, #20]
 801b116:	631a      	str	r2, [r3, #48]	; 0x30
 801b118:	e005      	b.n	801b126 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801b11a:	6978      	ldr	r0, [r7, #20]
 801b11c:	f001 fef8 	bl	801cf10 <vPortFree>
 801b120:	e001      	b.n	801b126 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801b122:	2300      	movs	r3, #0
 801b124:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801b126:	69fb      	ldr	r3, [r7, #28]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d017      	beq.n	801b15c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801b12c:	69fb      	ldr	r3, [r7, #28]
 801b12e:	2200      	movs	r2, #0
 801b130:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801b134:	88fa      	ldrh	r2, [r7, #6]
 801b136:	2300      	movs	r3, #0
 801b138:	9303      	str	r3, [sp, #12]
 801b13a:	69fb      	ldr	r3, [r7, #28]
 801b13c:	9302      	str	r3, [sp, #8]
 801b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b140:	9301      	str	r3, [sp, #4]
 801b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b144:	9300      	str	r3, [sp, #0]
 801b146:	683b      	ldr	r3, [r7, #0]
 801b148:	68b9      	ldr	r1, [r7, #8]
 801b14a:	68f8      	ldr	r0, [r7, #12]
 801b14c:	f000 f80e 	bl	801b16c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b150:	69f8      	ldr	r0, [r7, #28]
 801b152:	f000 f8b1 	bl	801b2b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801b156:	2301      	movs	r3, #1
 801b158:	61bb      	str	r3, [r7, #24]
 801b15a:	e002      	b.n	801b162 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801b15c:	f04f 33ff 	mov.w	r3, #4294967295
 801b160:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801b162:	69bb      	ldr	r3, [r7, #24]
	}
 801b164:	4618      	mov	r0, r3
 801b166:	3720      	adds	r7, #32
 801b168:	46bd      	mov	sp, r7
 801b16a:	bd80      	pop	{r7, pc}

0801b16c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b088      	sub	sp, #32
 801b170:	af00      	add	r7, sp, #0
 801b172:	60f8      	str	r0, [r7, #12]
 801b174:	60b9      	str	r1, [r7, #8]
 801b176:	607a      	str	r2, [r7, #4]
 801b178:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b17c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	009b      	lsls	r3, r3, #2
 801b182:	461a      	mov	r2, r3
 801b184:	21a5      	movs	r1, #165	; 0xa5
 801b186:	f004 fa93 	bl	801f6b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b18c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b194:	3b01      	subs	r3, #1
 801b196:	009b      	lsls	r3, r3, #2
 801b198:	4413      	add	r3, r2
 801b19a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801b19c:	69bb      	ldr	r3, [r7, #24]
 801b19e:	f023 0307 	bic.w	r3, r3, #7
 801b1a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801b1a4:	69bb      	ldr	r3, [r7, #24]
 801b1a6:	f003 0307 	and.w	r3, r3, #7
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d00a      	beq.n	801b1c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 801b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1b2:	f383 8811 	msr	BASEPRI, r3
 801b1b6:	f3bf 8f6f 	isb	sy
 801b1ba:	f3bf 8f4f 	dsb	sy
 801b1be:	617b      	str	r3, [r7, #20]
}
 801b1c0:	bf00      	nop
 801b1c2:	e7fe      	b.n	801b1c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801b1c4:	68bb      	ldr	r3, [r7, #8]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d01f      	beq.n	801b20a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b1ca:	2300      	movs	r3, #0
 801b1cc:	61fb      	str	r3, [r7, #28]
 801b1ce:	e012      	b.n	801b1f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801b1d0:	68ba      	ldr	r2, [r7, #8]
 801b1d2:	69fb      	ldr	r3, [r7, #28]
 801b1d4:	4413      	add	r3, r2
 801b1d6:	7819      	ldrb	r1, [r3, #0]
 801b1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b1da:	69fb      	ldr	r3, [r7, #28]
 801b1dc:	4413      	add	r3, r2
 801b1de:	3334      	adds	r3, #52	; 0x34
 801b1e0:	460a      	mov	r2, r1
 801b1e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801b1e4:	68ba      	ldr	r2, [r7, #8]
 801b1e6:	69fb      	ldr	r3, [r7, #28]
 801b1e8:	4413      	add	r3, r2
 801b1ea:	781b      	ldrb	r3, [r3, #0]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d006      	beq.n	801b1fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b1f0:	69fb      	ldr	r3, [r7, #28]
 801b1f2:	3301      	adds	r3, #1
 801b1f4:	61fb      	str	r3, [r7, #28]
 801b1f6:	69fb      	ldr	r3, [r7, #28]
 801b1f8:	2b0f      	cmp	r3, #15
 801b1fa:	d9e9      	bls.n	801b1d0 <prvInitialiseNewTask+0x64>
 801b1fc:	e000      	b.n	801b200 <prvInitialiseNewTask+0x94>
			{
				break;
 801b1fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b202:	2200      	movs	r2, #0
 801b204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b208:	e003      	b.n	801b212 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b20c:	2200      	movs	r2, #0
 801b20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b214:	2b37      	cmp	r3, #55	; 0x37
 801b216:	d901      	bls.n	801b21c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801b218:	2337      	movs	r3, #55	; 0x37
 801b21a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b21e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b220:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b226:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b22a:	2200      	movs	r2, #0
 801b22c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b230:	3304      	adds	r3, #4
 801b232:	4618      	mov	r0, r3
 801b234:	f7fe fee4 	bl	801a000 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801b238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b23a:	3318      	adds	r3, #24
 801b23c:	4618      	mov	r0, r3
 801b23e:	f7fe fedf 	bl	801a000 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b24a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b256:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b25a:	2200      	movs	r2, #0
 801b25c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b262:	2200      	movs	r2, #0
 801b264:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b26a:	3354      	adds	r3, #84	; 0x54
 801b26c:	224c      	movs	r2, #76	; 0x4c
 801b26e:	2100      	movs	r1, #0
 801b270:	4618      	mov	r0, r3
 801b272:	f004 fa1d 	bl	801f6b0 <memset>
 801b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b278:	4a0c      	ldr	r2, [pc, #48]	; (801b2ac <prvInitialiseNewTask+0x140>)
 801b27a:	659a      	str	r2, [r3, #88]	; 0x58
 801b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b27e:	4a0c      	ldr	r2, [pc, #48]	; (801b2b0 <prvInitialiseNewTask+0x144>)
 801b280:	65da      	str	r2, [r3, #92]	; 0x5c
 801b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b284:	4a0b      	ldr	r2, [pc, #44]	; (801b2b4 <prvInitialiseNewTask+0x148>)
 801b286:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801b288:	683a      	ldr	r2, [r7, #0]
 801b28a:	68f9      	ldr	r1, [r7, #12]
 801b28c:	69b8      	ldr	r0, [r7, #24]
 801b28e:	f001 fb27 	bl	801c8e0 <pxPortInitialiseStack>
 801b292:	4602      	mov	r2, r0
 801b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b296:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d002      	beq.n	801b2a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801b29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b2a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b2a4:	bf00      	nop
 801b2a6:	3720      	adds	r7, #32
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	bd80      	pop	{r7, pc}
 801b2ac:	20014518 	.word	0x20014518
 801b2b0:	20014580 	.word	0x20014580
 801b2b4:	200145e8 	.word	0x200145e8

0801b2b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	b082      	sub	sp, #8
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801b2c0:	f001 fc38 	bl	801cb34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801b2c4:	4b2d      	ldr	r3, [pc, #180]	; (801b37c <prvAddNewTaskToReadyList+0xc4>)
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	3301      	adds	r3, #1
 801b2ca:	4a2c      	ldr	r2, [pc, #176]	; (801b37c <prvAddNewTaskToReadyList+0xc4>)
 801b2cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801b2ce:	4b2c      	ldr	r3, [pc, #176]	; (801b380 <prvAddNewTaskToReadyList+0xc8>)
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d109      	bne.n	801b2ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801b2d6:	4a2a      	ldr	r2, [pc, #168]	; (801b380 <prvAddNewTaskToReadyList+0xc8>)
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801b2dc:	4b27      	ldr	r3, [pc, #156]	; (801b37c <prvAddNewTaskToReadyList+0xc4>)
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	2b01      	cmp	r3, #1
 801b2e2:	d110      	bne.n	801b306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801b2e4:	f000 fcfe 	bl	801bce4 <prvInitialiseTaskLists>
 801b2e8:	e00d      	b.n	801b306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801b2ea:	4b26      	ldr	r3, [pc, #152]	; (801b384 <prvAddNewTaskToReadyList+0xcc>)
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d109      	bne.n	801b306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801b2f2:	4b23      	ldr	r3, [pc, #140]	; (801b380 <prvAddNewTaskToReadyList+0xc8>)
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2fc:	429a      	cmp	r2, r3
 801b2fe:	d802      	bhi.n	801b306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801b300:	4a1f      	ldr	r2, [pc, #124]	; (801b380 <prvAddNewTaskToReadyList+0xc8>)
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801b306:	4b20      	ldr	r3, [pc, #128]	; (801b388 <prvAddNewTaskToReadyList+0xd0>)
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	3301      	adds	r3, #1
 801b30c:	4a1e      	ldr	r2, [pc, #120]	; (801b388 <prvAddNewTaskToReadyList+0xd0>)
 801b30e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801b310:	4b1d      	ldr	r3, [pc, #116]	; (801b388 <prvAddNewTaskToReadyList+0xd0>)
 801b312:	681a      	ldr	r2, [r3, #0]
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b31c:	4b1b      	ldr	r3, [pc, #108]	; (801b38c <prvAddNewTaskToReadyList+0xd4>)
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	429a      	cmp	r2, r3
 801b322:	d903      	bls.n	801b32c <prvAddNewTaskToReadyList+0x74>
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b328:	4a18      	ldr	r2, [pc, #96]	; (801b38c <prvAddNewTaskToReadyList+0xd4>)
 801b32a:	6013      	str	r3, [r2, #0]
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b330:	4613      	mov	r3, r2
 801b332:	009b      	lsls	r3, r3, #2
 801b334:	4413      	add	r3, r2
 801b336:	009b      	lsls	r3, r3, #2
 801b338:	4a15      	ldr	r2, [pc, #84]	; (801b390 <prvAddNewTaskToReadyList+0xd8>)
 801b33a:	441a      	add	r2, r3
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	3304      	adds	r3, #4
 801b340:	4619      	mov	r1, r3
 801b342:	4610      	mov	r0, r2
 801b344:	f7fe fe69 	bl	801a01a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801b348:	f001 fc24 	bl	801cb94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801b34c:	4b0d      	ldr	r3, [pc, #52]	; (801b384 <prvAddNewTaskToReadyList+0xcc>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d00e      	beq.n	801b372 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b354:	4b0a      	ldr	r3, [pc, #40]	; (801b380 <prvAddNewTaskToReadyList+0xc8>)
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b35e:	429a      	cmp	r2, r3
 801b360:	d207      	bcs.n	801b372 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801b362:	4b0c      	ldr	r3, [pc, #48]	; (801b394 <prvAddNewTaskToReadyList+0xdc>)
 801b364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b368:	601a      	str	r2, [r3, #0]
 801b36a:	f3bf 8f4f 	dsb	sy
 801b36e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b372:	bf00      	nop
 801b374:	3708      	adds	r7, #8
 801b376:	46bd      	mov	sp, r7
 801b378:	bd80      	pop	{r7, pc}
 801b37a:	bf00      	nop
 801b37c:	200028ec 	.word	0x200028ec
 801b380:	20002418 	.word	0x20002418
 801b384:	200028f8 	.word	0x200028f8
 801b388:	20002908 	.word	0x20002908
 801b38c:	200028f4 	.word	0x200028f4
 801b390:	2000241c 	.word	0x2000241c
 801b394:	e000ed04 	.word	0xe000ed04

0801b398 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801b398:	b580      	push	{r7, lr}
 801b39a:	b084      	sub	sp, #16
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801b3a0:	f001 fbc8 	bl	801cb34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d102      	bne.n	801b3b0 <vTaskDelete+0x18>
 801b3aa:	4b2c      	ldr	r3, [pc, #176]	; (801b45c <vTaskDelete+0xc4>)
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	e000      	b.n	801b3b2 <vTaskDelete+0x1a>
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	3304      	adds	r3, #4
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7fe fe8b 	bl	801a0d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d004      	beq.n	801b3d0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	3318      	adds	r3, #24
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	f7fe fe82 	bl	801a0d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801b3d0:	4b23      	ldr	r3, [pc, #140]	; (801b460 <vTaskDelete+0xc8>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	3301      	adds	r3, #1
 801b3d6:	4a22      	ldr	r2, [pc, #136]	; (801b460 <vTaskDelete+0xc8>)
 801b3d8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801b3da:	4b20      	ldr	r3, [pc, #128]	; (801b45c <vTaskDelete+0xc4>)
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	68fa      	ldr	r2, [r7, #12]
 801b3e0:	429a      	cmp	r2, r3
 801b3e2:	d10b      	bne.n	801b3fc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	3304      	adds	r3, #4
 801b3e8:	4619      	mov	r1, r3
 801b3ea:	481e      	ldr	r0, [pc, #120]	; (801b464 <vTaskDelete+0xcc>)
 801b3ec:	f7fe fe15 	bl	801a01a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801b3f0:	4b1d      	ldr	r3, [pc, #116]	; (801b468 <vTaskDelete+0xd0>)
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	3301      	adds	r3, #1
 801b3f6:	4a1c      	ldr	r2, [pc, #112]	; (801b468 <vTaskDelete+0xd0>)
 801b3f8:	6013      	str	r3, [r2, #0]
 801b3fa:	e009      	b.n	801b410 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801b3fc:	4b1b      	ldr	r3, [pc, #108]	; (801b46c <vTaskDelete+0xd4>)
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	3b01      	subs	r3, #1
 801b402:	4a1a      	ldr	r2, [pc, #104]	; (801b46c <vTaskDelete+0xd4>)
 801b404:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801b406:	68f8      	ldr	r0, [r7, #12]
 801b408:	f000 fcda 	bl	801bdc0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801b40c:	f000 fd0c 	bl	801be28 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801b410:	f001 fbc0 	bl	801cb94 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801b414:	4b16      	ldr	r3, [pc, #88]	; (801b470 <vTaskDelete+0xd8>)
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d01b      	beq.n	801b454 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801b41c:	4b0f      	ldr	r3, [pc, #60]	; (801b45c <vTaskDelete+0xc4>)
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	68fa      	ldr	r2, [r7, #12]
 801b422:	429a      	cmp	r2, r3
 801b424:	d116      	bne.n	801b454 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801b426:	4b13      	ldr	r3, [pc, #76]	; (801b474 <vTaskDelete+0xdc>)
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d00a      	beq.n	801b444 <vTaskDelete+0xac>
	__asm volatile
 801b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b432:	f383 8811 	msr	BASEPRI, r3
 801b436:	f3bf 8f6f 	isb	sy
 801b43a:	f3bf 8f4f 	dsb	sy
 801b43e:	60bb      	str	r3, [r7, #8]
}
 801b440:	bf00      	nop
 801b442:	e7fe      	b.n	801b442 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801b444:	4b0c      	ldr	r3, [pc, #48]	; (801b478 <vTaskDelete+0xe0>)
 801b446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b44a:	601a      	str	r2, [r3, #0]
 801b44c:	f3bf 8f4f 	dsb	sy
 801b450:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801b454:	bf00      	nop
 801b456:	3710      	adds	r7, #16
 801b458:	46bd      	mov	sp, r7
 801b45a:	bd80      	pop	{r7, pc}
 801b45c:	20002418 	.word	0x20002418
 801b460:	20002908 	.word	0x20002908
 801b464:	200028c0 	.word	0x200028c0
 801b468:	200028d4 	.word	0x200028d4
 801b46c:	200028ec 	.word	0x200028ec
 801b470:	200028f8 	.word	0x200028f8
 801b474:	20002914 	.word	0x20002914
 801b478:	e000ed04 	.word	0xe000ed04

0801b47c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b47c:	b580      	push	{r7, lr}
 801b47e:	b084      	sub	sp, #16
 801b480:	af00      	add	r7, sp, #0
 801b482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b484:	2300      	movs	r3, #0
 801b486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d017      	beq.n	801b4be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b48e:	4b13      	ldr	r3, [pc, #76]	; (801b4dc <vTaskDelay+0x60>)
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d00a      	beq.n	801b4ac <vTaskDelay+0x30>
	__asm volatile
 801b496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b49a:	f383 8811 	msr	BASEPRI, r3
 801b49e:	f3bf 8f6f 	isb	sy
 801b4a2:	f3bf 8f4f 	dsb	sy
 801b4a6:	60bb      	str	r3, [r7, #8]
}
 801b4a8:	bf00      	nop
 801b4aa:	e7fe      	b.n	801b4aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801b4ac:	f000 f8f0 	bl	801b690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b4b0:	2100      	movs	r1, #0
 801b4b2:	6878      	ldr	r0, [r7, #4]
 801b4b4:	f000 fe72 	bl	801c19c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b4b8:	f000 f8f8 	bl	801b6ac <xTaskResumeAll>
 801b4bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d107      	bne.n	801b4d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801b4c4:	4b06      	ldr	r3, [pc, #24]	; (801b4e0 <vTaskDelay+0x64>)
 801b4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b4ca:	601a      	str	r2, [r3, #0]
 801b4cc:	f3bf 8f4f 	dsb	sy
 801b4d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b4d4:	bf00      	nop
 801b4d6:	3710      	adds	r7, #16
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	bd80      	pop	{r7, pc}
 801b4dc:	20002914 	.word	0x20002914
 801b4e0:	e000ed04 	.word	0xe000ed04

0801b4e4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801b4e4:	b580      	push	{r7, lr}
 801b4e6:	b088      	sub	sp, #32
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801b4f0:	69bb      	ldr	r3, [r7, #24]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d10a      	bne.n	801b50c <eTaskGetState+0x28>
	__asm volatile
 801b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4fa:	f383 8811 	msr	BASEPRI, r3
 801b4fe:	f3bf 8f6f 	isb	sy
 801b502:	f3bf 8f4f 	dsb	sy
 801b506:	60bb      	str	r3, [r7, #8]
}
 801b508:	bf00      	nop
 801b50a:	e7fe      	b.n	801b50a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801b50c:	4b23      	ldr	r3, [pc, #140]	; (801b59c <eTaskGetState+0xb8>)
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	69ba      	ldr	r2, [r7, #24]
 801b512:	429a      	cmp	r2, r3
 801b514:	d102      	bne.n	801b51c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801b516:	2300      	movs	r3, #0
 801b518:	77fb      	strb	r3, [r7, #31]
 801b51a:	e03a      	b.n	801b592 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801b51c:	f001 fb0a 	bl	801cb34 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801b520:	69bb      	ldr	r3, [r7, #24]
 801b522:	695b      	ldr	r3, [r3, #20]
 801b524:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801b526:	4b1e      	ldr	r3, [pc, #120]	; (801b5a0 <eTaskGetState+0xbc>)
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801b52c:	4b1d      	ldr	r3, [pc, #116]	; (801b5a4 <eTaskGetState+0xc0>)
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801b532:	f001 fb2f 	bl	801cb94 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801b536:	697a      	ldr	r2, [r7, #20]
 801b538:	693b      	ldr	r3, [r7, #16]
 801b53a:	429a      	cmp	r2, r3
 801b53c:	d003      	beq.n	801b546 <eTaskGetState+0x62>
 801b53e:	697a      	ldr	r2, [r7, #20]
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	429a      	cmp	r2, r3
 801b544:	d102      	bne.n	801b54c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801b546:	2302      	movs	r3, #2
 801b548:	77fb      	strb	r3, [r7, #31]
 801b54a:	e022      	b.n	801b592 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801b54c:	697b      	ldr	r3, [r7, #20]
 801b54e:	4a16      	ldr	r2, [pc, #88]	; (801b5a8 <eTaskGetState+0xc4>)
 801b550:	4293      	cmp	r3, r2
 801b552:	d112      	bne.n	801b57a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801b554:	69bb      	ldr	r3, [r7, #24]
 801b556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d10b      	bne.n	801b574 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801b55c:	69bb      	ldr	r3, [r7, #24]
 801b55e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 801b562:	b2db      	uxtb	r3, r3
 801b564:	2b01      	cmp	r3, #1
 801b566:	d102      	bne.n	801b56e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801b568:	2302      	movs	r3, #2
 801b56a:	77fb      	strb	r3, [r7, #31]
 801b56c:	e011      	b.n	801b592 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801b56e:	2303      	movs	r3, #3
 801b570:	77fb      	strb	r3, [r7, #31]
 801b572:	e00e      	b.n	801b592 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801b574:	2302      	movs	r3, #2
 801b576:	77fb      	strb	r3, [r7, #31]
 801b578:	e00b      	b.n	801b592 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801b57a:	697b      	ldr	r3, [r7, #20]
 801b57c:	4a0b      	ldr	r2, [pc, #44]	; (801b5ac <eTaskGetState+0xc8>)
 801b57e:	4293      	cmp	r3, r2
 801b580:	d002      	beq.n	801b588 <eTaskGetState+0xa4>
 801b582:	697b      	ldr	r3, [r7, #20]
 801b584:	2b00      	cmp	r3, #0
 801b586:	d102      	bne.n	801b58e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801b588:	2304      	movs	r3, #4
 801b58a:	77fb      	strb	r3, [r7, #31]
 801b58c:	e001      	b.n	801b592 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801b58e:	2301      	movs	r3, #1
 801b590:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801b592:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801b594:	4618      	mov	r0, r3
 801b596:	3720      	adds	r7, #32
 801b598:	46bd      	mov	sp, r7
 801b59a:	bd80      	pop	{r7, pc}
 801b59c:	20002418 	.word	0x20002418
 801b5a0:	200028a4 	.word	0x200028a4
 801b5a4:	200028a8 	.word	0x200028a8
 801b5a8:	200028d8 	.word	0x200028d8
 801b5ac:	200028c0 	.word	0x200028c0

0801b5b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b08a      	sub	sp, #40	; 0x28
 801b5b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b5be:	463a      	mov	r2, r7
 801b5c0:	1d39      	adds	r1, r7, #4
 801b5c2:	f107 0308 	add.w	r3, r7, #8
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f7fe fcc6 	bl	8019f58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b5cc:	6839      	ldr	r1, [r7, #0]
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	68ba      	ldr	r2, [r7, #8]
 801b5d2:	9202      	str	r2, [sp, #8]
 801b5d4:	9301      	str	r3, [sp, #4]
 801b5d6:	2300      	movs	r3, #0
 801b5d8:	9300      	str	r3, [sp, #0]
 801b5da:	2300      	movs	r3, #0
 801b5dc:	460a      	mov	r2, r1
 801b5de:	4924      	ldr	r1, [pc, #144]	; (801b670 <vTaskStartScheduler+0xc0>)
 801b5e0:	4824      	ldr	r0, [pc, #144]	; (801b674 <vTaskStartScheduler+0xc4>)
 801b5e2:	f7ff fd21 	bl	801b028 <xTaskCreateStatic>
 801b5e6:	4603      	mov	r3, r0
 801b5e8:	4a23      	ldr	r2, [pc, #140]	; (801b678 <vTaskStartScheduler+0xc8>)
 801b5ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b5ec:	4b22      	ldr	r3, [pc, #136]	; (801b678 <vTaskStartScheduler+0xc8>)
 801b5ee:	681b      	ldr	r3, [r3, #0]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d002      	beq.n	801b5fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b5f4:	2301      	movs	r3, #1
 801b5f6:	617b      	str	r3, [r7, #20]
 801b5f8:	e001      	b.n	801b5fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b5fa:	2300      	movs	r3, #0
 801b5fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801b5fe:	697b      	ldr	r3, [r7, #20]
 801b600:	2b01      	cmp	r3, #1
 801b602:	d102      	bne.n	801b60a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801b604:	f000 fe1e 	bl	801c244 <xTimerCreateTimerTask>
 801b608:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b60a:	697b      	ldr	r3, [r7, #20]
 801b60c:	2b01      	cmp	r3, #1
 801b60e:	d11b      	bne.n	801b648 <vTaskStartScheduler+0x98>
	__asm volatile
 801b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b614:	f383 8811 	msr	BASEPRI, r3
 801b618:	f3bf 8f6f 	isb	sy
 801b61c:	f3bf 8f4f 	dsb	sy
 801b620:	613b      	str	r3, [r7, #16]
}
 801b622:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b624:	4b15      	ldr	r3, [pc, #84]	; (801b67c <vTaskStartScheduler+0xcc>)
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	3354      	adds	r3, #84	; 0x54
 801b62a:	4a15      	ldr	r2, [pc, #84]	; (801b680 <vTaskStartScheduler+0xd0>)
 801b62c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b62e:	4b15      	ldr	r3, [pc, #84]	; (801b684 <vTaskStartScheduler+0xd4>)
 801b630:	f04f 32ff 	mov.w	r2, #4294967295
 801b634:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b636:	4b14      	ldr	r3, [pc, #80]	; (801b688 <vTaskStartScheduler+0xd8>)
 801b638:	2201      	movs	r2, #1
 801b63a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b63c:	4b13      	ldr	r3, [pc, #76]	; (801b68c <vTaskStartScheduler+0xdc>)
 801b63e:	2200      	movs	r2, #0
 801b640:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b642:	f001 f9d5 	bl	801c9f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b646:	e00e      	b.n	801b666 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b648:	697b      	ldr	r3, [r7, #20]
 801b64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b64e:	d10a      	bne.n	801b666 <vTaskStartScheduler+0xb6>
	__asm volatile
 801b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b654:	f383 8811 	msr	BASEPRI, r3
 801b658:	f3bf 8f6f 	isb	sy
 801b65c:	f3bf 8f4f 	dsb	sy
 801b660:	60fb      	str	r3, [r7, #12]
}
 801b662:	bf00      	nop
 801b664:	e7fe      	b.n	801b664 <vTaskStartScheduler+0xb4>
}
 801b666:	bf00      	nop
 801b668:	3718      	adds	r7, #24
 801b66a:	46bd      	mov	sp, r7
 801b66c:	bd80      	pop	{r7, pc}
 801b66e:	bf00      	nop
 801b670:	08020a70 	.word	0x08020a70
 801b674:	0801bcb5 	.word	0x0801bcb5
 801b678:	20002910 	.word	0x20002910
 801b67c:	20002418 	.word	0x20002418
 801b680:	2000029c 	.word	0x2000029c
 801b684:	2000290c 	.word	0x2000290c
 801b688:	200028f8 	.word	0x200028f8
 801b68c:	200028f0 	.word	0x200028f0

0801b690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b690:	b480      	push	{r7}
 801b692:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b694:	4b04      	ldr	r3, [pc, #16]	; (801b6a8 <vTaskSuspendAll+0x18>)
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	3301      	adds	r3, #1
 801b69a:	4a03      	ldr	r2, [pc, #12]	; (801b6a8 <vTaskSuspendAll+0x18>)
 801b69c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b69e:	bf00      	nop
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a6:	4770      	bx	lr
 801b6a8:	20002914 	.word	0x20002914

0801b6ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	b084      	sub	sp, #16
 801b6b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b6ba:	4b42      	ldr	r3, [pc, #264]	; (801b7c4 <xTaskResumeAll+0x118>)
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d10a      	bne.n	801b6d8 <xTaskResumeAll+0x2c>
	__asm volatile
 801b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6c6:	f383 8811 	msr	BASEPRI, r3
 801b6ca:	f3bf 8f6f 	isb	sy
 801b6ce:	f3bf 8f4f 	dsb	sy
 801b6d2:	603b      	str	r3, [r7, #0]
}
 801b6d4:	bf00      	nop
 801b6d6:	e7fe      	b.n	801b6d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b6d8:	f001 fa2c 	bl	801cb34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b6dc:	4b39      	ldr	r3, [pc, #228]	; (801b7c4 <xTaskResumeAll+0x118>)
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	3b01      	subs	r3, #1
 801b6e2:	4a38      	ldr	r2, [pc, #224]	; (801b7c4 <xTaskResumeAll+0x118>)
 801b6e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b6e6:	4b37      	ldr	r3, [pc, #220]	; (801b7c4 <xTaskResumeAll+0x118>)
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d162      	bne.n	801b7b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b6ee:	4b36      	ldr	r3, [pc, #216]	; (801b7c8 <xTaskResumeAll+0x11c>)
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d05e      	beq.n	801b7b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b6f6:	e02f      	b.n	801b758 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b6f8:	4b34      	ldr	r3, [pc, #208]	; (801b7cc <xTaskResumeAll+0x120>)
 801b6fa:	68db      	ldr	r3, [r3, #12]
 801b6fc:	68db      	ldr	r3, [r3, #12]
 801b6fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	3318      	adds	r3, #24
 801b704:	4618      	mov	r0, r3
 801b706:	f7fe fce5 	bl	801a0d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	3304      	adds	r3, #4
 801b70e:	4618      	mov	r0, r3
 801b710:	f7fe fce0 	bl	801a0d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b718:	4b2d      	ldr	r3, [pc, #180]	; (801b7d0 <xTaskResumeAll+0x124>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	429a      	cmp	r2, r3
 801b71e:	d903      	bls.n	801b728 <xTaskResumeAll+0x7c>
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b724:	4a2a      	ldr	r2, [pc, #168]	; (801b7d0 <xTaskResumeAll+0x124>)
 801b726:	6013      	str	r3, [r2, #0]
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b72c:	4613      	mov	r3, r2
 801b72e:	009b      	lsls	r3, r3, #2
 801b730:	4413      	add	r3, r2
 801b732:	009b      	lsls	r3, r3, #2
 801b734:	4a27      	ldr	r2, [pc, #156]	; (801b7d4 <xTaskResumeAll+0x128>)
 801b736:	441a      	add	r2, r3
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	3304      	adds	r3, #4
 801b73c:	4619      	mov	r1, r3
 801b73e:	4610      	mov	r0, r2
 801b740:	f7fe fc6b 	bl	801a01a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b748:	4b23      	ldr	r3, [pc, #140]	; (801b7d8 <xTaskResumeAll+0x12c>)
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b74e:	429a      	cmp	r2, r3
 801b750:	d302      	bcc.n	801b758 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801b752:	4b22      	ldr	r3, [pc, #136]	; (801b7dc <xTaskResumeAll+0x130>)
 801b754:	2201      	movs	r2, #1
 801b756:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b758:	4b1c      	ldr	r3, [pc, #112]	; (801b7cc <xTaskResumeAll+0x120>)
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d1cb      	bne.n	801b6f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d001      	beq.n	801b76a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b766:	f000 fb5f 	bl	801be28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b76a:	4b1d      	ldr	r3, [pc, #116]	; (801b7e0 <xTaskResumeAll+0x134>)
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d010      	beq.n	801b798 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b776:	f000 f847 	bl	801b808 <xTaskIncrementTick>
 801b77a:	4603      	mov	r3, r0
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d002      	beq.n	801b786 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801b780:	4b16      	ldr	r3, [pc, #88]	; (801b7dc <xTaskResumeAll+0x130>)
 801b782:	2201      	movs	r2, #1
 801b784:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	3b01      	subs	r3, #1
 801b78a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d1f1      	bne.n	801b776 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801b792:	4b13      	ldr	r3, [pc, #76]	; (801b7e0 <xTaskResumeAll+0x134>)
 801b794:	2200      	movs	r2, #0
 801b796:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b798:	4b10      	ldr	r3, [pc, #64]	; (801b7dc <xTaskResumeAll+0x130>)
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d009      	beq.n	801b7b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b7a0:	2301      	movs	r3, #1
 801b7a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b7a4:	4b0f      	ldr	r3, [pc, #60]	; (801b7e4 <xTaskResumeAll+0x138>)
 801b7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b7aa:	601a      	str	r2, [r3, #0]
 801b7ac:	f3bf 8f4f 	dsb	sy
 801b7b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b7b4:	f001 f9ee 	bl	801cb94 <vPortExitCritical>

	return xAlreadyYielded;
 801b7b8:	68bb      	ldr	r3, [r7, #8]
}
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	3710      	adds	r7, #16
 801b7be:	46bd      	mov	sp, r7
 801b7c0:	bd80      	pop	{r7, pc}
 801b7c2:	bf00      	nop
 801b7c4:	20002914 	.word	0x20002914
 801b7c8:	200028ec 	.word	0x200028ec
 801b7cc:	200028ac 	.word	0x200028ac
 801b7d0:	200028f4 	.word	0x200028f4
 801b7d4:	2000241c 	.word	0x2000241c
 801b7d8:	20002418 	.word	0x20002418
 801b7dc:	20002900 	.word	0x20002900
 801b7e0:	200028fc 	.word	0x200028fc
 801b7e4:	e000ed04 	.word	0xe000ed04

0801b7e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b7e8:	b480      	push	{r7}
 801b7ea:	b083      	sub	sp, #12
 801b7ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b7ee:	4b05      	ldr	r3, [pc, #20]	; (801b804 <xTaskGetTickCount+0x1c>)
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b7f4:	687b      	ldr	r3, [r7, #4]
}
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	370c      	adds	r7, #12
 801b7fa:	46bd      	mov	sp, r7
 801b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b800:	4770      	bx	lr
 801b802:	bf00      	nop
 801b804:	200028f0 	.word	0x200028f0

0801b808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	b086      	sub	sp, #24
 801b80c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b80e:	2300      	movs	r3, #0
 801b810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b812:	4b4f      	ldr	r3, [pc, #316]	; (801b950 <xTaskIncrementTick+0x148>)
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	2b00      	cmp	r3, #0
 801b818:	f040 808f 	bne.w	801b93a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b81c:	4b4d      	ldr	r3, [pc, #308]	; (801b954 <xTaskIncrementTick+0x14c>)
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	3301      	adds	r3, #1
 801b822:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b824:	4a4b      	ldr	r2, [pc, #300]	; (801b954 <xTaskIncrementTick+0x14c>)
 801b826:	693b      	ldr	r3, [r7, #16]
 801b828:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b82a:	693b      	ldr	r3, [r7, #16]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d120      	bne.n	801b872 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801b830:	4b49      	ldr	r3, [pc, #292]	; (801b958 <xTaskIncrementTick+0x150>)
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d00a      	beq.n	801b850 <xTaskIncrementTick+0x48>
	__asm volatile
 801b83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b83e:	f383 8811 	msr	BASEPRI, r3
 801b842:	f3bf 8f6f 	isb	sy
 801b846:	f3bf 8f4f 	dsb	sy
 801b84a:	603b      	str	r3, [r7, #0]
}
 801b84c:	bf00      	nop
 801b84e:	e7fe      	b.n	801b84e <xTaskIncrementTick+0x46>
 801b850:	4b41      	ldr	r3, [pc, #260]	; (801b958 <xTaskIncrementTick+0x150>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	60fb      	str	r3, [r7, #12]
 801b856:	4b41      	ldr	r3, [pc, #260]	; (801b95c <xTaskIncrementTick+0x154>)
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	4a3f      	ldr	r2, [pc, #252]	; (801b958 <xTaskIncrementTick+0x150>)
 801b85c:	6013      	str	r3, [r2, #0]
 801b85e:	4a3f      	ldr	r2, [pc, #252]	; (801b95c <xTaskIncrementTick+0x154>)
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	6013      	str	r3, [r2, #0]
 801b864:	4b3e      	ldr	r3, [pc, #248]	; (801b960 <xTaskIncrementTick+0x158>)
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	3301      	adds	r3, #1
 801b86a:	4a3d      	ldr	r2, [pc, #244]	; (801b960 <xTaskIncrementTick+0x158>)
 801b86c:	6013      	str	r3, [r2, #0]
 801b86e:	f000 fadb 	bl	801be28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b872:	4b3c      	ldr	r3, [pc, #240]	; (801b964 <xTaskIncrementTick+0x15c>)
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	693a      	ldr	r2, [r7, #16]
 801b878:	429a      	cmp	r2, r3
 801b87a:	d349      	bcc.n	801b910 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b87c:	4b36      	ldr	r3, [pc, #216]	; (801b958 <xTaskIncrementTick+0x150>)
 801b87e:	681b      	ldr	r3, [r3, #0]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	2b00      	cmp	r3, #0
 801b884:	d104      	bne.n	801b890 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b886:	4b37      	ldr	r3, [pc, #220]	; (801b964 <xTaskIncrementTick+0x15c>)
 801b888:	f04f 32ff 	mov.w	r2, #4294967295
 801b88c:	601a      	str	r2, [r3, #0]
					break;
 801b88e:	e03f      	b.n	801b910 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b890:	4b31      	ldr	r3, [pc, #196]	; (801b958 <xTaskIncrementTick+0x150>)
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	68db      	ldr	r3, [r3, #12]
 801b896:	68db      	ldr	r3, [r3, #12]
 801b898:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b89a:	68bb      	ldr	r3, [r7, #8]
 801b89c:	685b      	ldr	r3, [r3, #4]
 801b89e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b8a0:	693a      	ldr	r2, [r7, #16]
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	429a      	cmp	r2, r3
 801b8a6:	d203      	bcs.n	801b8b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b8a8:	4a2e      	ldr	r2, [pc, #184]	; (801b964 <xTaskIncrementTick+0x15c>)
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b8ae:	e02f      	b.n	801b910 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b8b0:	68bb      	ldr	r3, [r7, #8]
 801b8b2:	3304      	adds	r3, #4
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	f7fe fc0d 	bl	801a0d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b8ba:	68bb      	ldr	r3, [r7, #8]
 801b8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d004      	beq.n	801b8cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	3318      	adds	r3, #24
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	f7fe fc04 	bl	801a0d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8d0:	4b25      	ldr	r3, [pc, #148]	; (801b968 <xTaskIncrementTick+0x160>)
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	429a      	cmp	r2, r3
 801b8d6:	d903      	bls.n	801b8e0 <xTaskIncrementTick+0xd8>
 801b8d8:	68bb      	ldr	r3, [r7, #8]
 801b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8dc:	4a22      	ldr	r2, [pc, #136]	; (801b968 <xTaskIncrementTick+0x160>)
 801b8de:	6013      	str	r3, [r2, #0]
 801b8e0:	68bb      	ldr	r3, [r7, #8]
 801b8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8e4:	4613      	mov	r3, r2
 801b8e6:	009b      	lsls	r3, r3, #2
 801b8e8:	4413      	add	r3, r2
 801b8ea:	009b      	lsls	r3, r3, #2
 801b8ec:	4a1f      	ldr	r2, [pc, #124]	; (801b96c <xTaskIncrementTick+0x164>)
 801b8ee:	441a      	add	r2, r3
 801b8f0:	68bb      	ldr	r3, [r7, #8]
 801b8f2:	3304      	adds	r3, #4
 801b8f4:	4619      	mov	r1, r3
 801b8f6:	4610      	mov	r0, r2
 801b8f8:	f7fe fb8f 	bl	801a01a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b8fc:	68bb      	ldr	r3, [r7, #8]
 801b8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b900:	4b1b      	ldr	r3, [pc, #108]	; (801b970 <xTaskIncrementTick+0x168>)
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b906:	429a      	cmp	r2, r3
 801b908:	d3b8      	bcc.n	801b87c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801b90a:	2301      	movs	r3, #1
 801b90c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b90e:	e7b5      	b.n	801b87c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b910:	4b17      	ldr	r3, [pc, #92]	; (801b970 <xTaskIncrementTick+0x168>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b916:	4915      	ldr	r1, [pc, #84]	; (801b96c <xTaskIncrementTick+0x164>)
 801b918:	4613      	mov	r3, r2
 801b91a:	009b      	lsls	r3, r3, #2
 801b91c:	4413      	add	r3, r2
 801b91e:	009b      	lsls	r3, r3, #2
 801b920:	440b      	add	r3, r1
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	2b01      	cmp	r3, #1
 801b926:	d901      	bls.n	801b92c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801b928:	2301      	movs	r3, #1
 801b92a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b92c:	4b11      	ldr	r3, [pc, #68]	; (801b974 <xTaskIncrementTick+0x16c>)
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	2b00      	cmp	r3, #0
 801b932:	d007      	beq.n	801b944 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801b934:	2301      	movs	r3, #1
 801b936:	617b      	str	r3, [r7, #20]
 801b938:	e004      	b.n	801b944 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b93a:	4b0f      	ldr	r3, [pc, #60]	; (801b978 <xTaskIncrementTick+0x170>)
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	3301      	adds	r3, #1
 801b940:	4a0d      	ldr	r2, [pc, #52]	; (801b978 <xTaskIncrementTick+0x170>)
 801b942:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b944:	697b      	ldr	r3, [r7, #20]
}
 801b946:	4618      	mov	r0, r3
 801b948:	3718      	adds	r7, #24
 801b94a:	46bd      	mov	sp, r7
 801b94c:	bd80      	pop	{r7, pc}
 801b94e:	bf00      	nop
 801b950:	20002914 	.word	0x20002914
 801b954:	200028f0 	.word	0x200028f0
 801b958:	200028a4 	.word	0x200028a4
 801b95c:	200028a8 	.word	0x200028a8
 801b960:	20002904 	.word	0x20002904
 801b964:	2000290c 	.word	0x2000290c
 801b968:	200028f4 	.word	0x200028f4
 801b96c:	2000241c 	.word	0x2000241c
 801b970:	20002418 	.word	0x20002418
 801b974:	20002900 	.word	0x20002900
 801b978:	200028fc 	.word	0x200028fc

0801b97c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b97c:	b480      	push	{r7}
 801b97e:	b085      	sub	sp, #20
 801b980:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b982:	4b2a      	ldr	r3, [pc, #168]	; (801ba2c <vTaskSwitchContext+0xb0>)
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	2b00      	cmp	r3, #0
 801b988:	d003      	beq.n	801b992 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b98a:	4b29      	ldr	r3, [pc, #164]	; (801ba30 <vTaskSwitchContext+0xb4>)
 801b98c:	2201      	movs	r2, #1
 801b98e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b990:	e046      	b.n	801ba20 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801b992:	4b27      	ldr	r3, [pc, #156]	; (801ba30 <vTaskSwitchContext+0xb4>)
 801b994:	2200      	movs	r2, #0
 801b996:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b998:	4b26      	ldr	r3, [pc, #152]	; (801ba34 <vTaskSwitchContext+0xb8>)
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	60fb      	str	r3, [r7, #12]
 801b99e:	e010      	b.n	801b9c2 <vTaskSwitchContext+0x46>
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d10a      	bne.n	801b9bc <vTaskSwitchContext+0x40>
	__asm volatile
 801b9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9aa:	f383 8811 	msr	BASEPRI, r3
 801b9ae:	f3bf 8f6f 	isb	sy
 801b9b2:	f3bf 8f4f 	dsb	sy
 801b9b6:	607b      	str	r3, [r7, #4]
}
 801b9b8:	bf00      	nop
 801b9ba:	e7fe      	b.n	801b9ba <vTaskSwitchContext+0x3e>
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	3b01      	subs	r3, #1
 801b9c0:	60fb      	str	r3, [r7, #12]
 801b9c2:	491d      	ldr	r1, [pc, #116]	; (801ba38 <vTaskSwitchContext+0xbc>)
 801b9c4:	68fa      	ldr	r2, [r7, #12]
 801b9c6:	4613      	mov	r3, r2
 801b9c8:	009b      	lsls	r3, r3, #2
 801b9ca:	4413      	add	r3, r2
 801b9cc:	009b      	lsls	r3, r3, #2
 801b9ce:	440b      	add	r3, r1
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d0e4      	beq.n	801b9a0 <vTaskSwitchContext+0x24>
 801b9d6:	68fa      	ldr	r2, [r7, #12]
 801b9d8:	4613      	mov	r3, r2
 801b9da:	009b      	lsls	r3, r3, #2
 801b9dc:	4413      	add	r3, r2
 801b9de:	009b      	lsls	r3, r3, #2
 801b9e0:	4a15      	ldr	r2, [pc, #84]	; (801ba38 <vTaskSwitchContext+0xbc>)
 801b9e2:	4413      	add	r3, r2
 801b9e4:	60bb      	str	r3, [r7, #8]
 801b9e6:	68bb      	ldr	r3, [r7, #8]
 801b9e8:	685b      	ldr	r3, [r3, #4]
 801b9ea:	685a      	ldr	r2, [r3, #4]
 801b9ec:	68bb      	ldr	r3, [r7, #8]
 801b9ee:	605a      	str	r2, [r3, #4]
 801b9f0:	68bb      	ldr	r3, [r7, #8]
 801b9f2:	685a      	ldr	r2, [r3, #4]
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	3308      	adds	r3, #8
 801b9f8:	429a      	cmp	r2, r3
 801b9fa:	d104      	bne.n	801ba06 <vTaskSwitchContext+0x8a>
 801b9fc:	68bb      	ldr	r3, [r7, #8]
 801b9fe:	685b      	ldr	r3, [r3, #4]
 801ba00:	685a      	ldr	r2, [r3, #4]
 801ba02:	68bb      	ldr	r3, [r7, #8]
 801ba04:	605a      	str	r2, [r3, #4]
 801ba06:	68bb      	ldr	r3, [r7, #8]
 801ba08:	685b      	ldr	r3, [r3, #4]
 801ba0a:	68db      	ldr	r3, [r3, #12]
 801ba0c:	4a0b      	ldr	r2, [pc, #44]	; (801ba3c <vTaskSwitchContext+0xc0>)
 801ba0e:	6013      	str	r3, [r2, #0]
 801ba10:	4a08      	ldr	r2, [pc, #32]	; (801ba34 <vTaskSwitchContext+0xb8>)
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801ba16:	4b09      	ldr	r3, [pc, #36]	; (801ba3c <vTaskSwitchContext+0xc0>)
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	3354      	adds	r3, #84	; 0x54
 801ba1c:	4a08      	ldr	r2, [pc, #32]	; (801ba40 <vTaskSwitchContext+0xc4>)
 801ba1e:	6013      	str	r3, [r2, #0]
}
 801ba20:	bf00      	nop
 801ba22:	3714      	adds	r7, #20
 801ba24:	46bd      	mov	sp, r7
 801ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba2a:	4770      	bx	lr
 801ba2c:	20002914 	.word	0x20002914
 801ba30:	20002900 	.word	0x20002900
 801ba34:	200028f4 	.word	0x200028f4
 801ba38:	2000241c 	.word	0x2000241c
 801ba3c:	20002418 	.word	0x20002418
 801ba40:	2000029c 	.word	0x2000029c

0801ba44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b084      	sub	sp, #16
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	6078      	str	r0, [r7, #4]
 801ba4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d10a      	bne.n	801ba6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801ba54:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba58:	f383 8811 	msr	BASEPRI, r3
 801ba5c:	f3bf 8f6f 	isb	sy
 801ba60:	f3bf 8f4f 	dsb	sy
 801ba64:	60fb      	str	r3, [r7, #12]
}
 801ba66:	bf00      	nop
 801ba68:	e7fe      	b.n	801ba68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ba6a:	4b07      	ldr	r3, [pc, #28]	; (801ba88 <vTaskPlaceOnEventList+0x44>)
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	3318      	adds	r3, #24
 801ba70:	4619      	mov	r1, r3
 801ba72:	6878      	ldr	r0, [r7, #4]
 801ba74:	f7fe faf5 	bl	801a062 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ba78:	2101      	movs	r1, #1
 801ba7a:	6838      	ldr	r0, [r7, #0]
 801ba7c:	f000 fb8e 	bl	801c19c <prvAddCurrentTaskToDelayedList>
}
 801ba80:	bf00      	nop
 801ba82:	3710      	adds	r7, #16
 801ba84:	46bd      	mov	sp, r7
 801ba86:	bd80      	pop	{r7, pc}
 801ba88:	20002418 	.word	0x20002418

0801ba8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ba8c:	b580      	push	{r7, lr}
 801ba8e:	b086      	sub	sp, #24
 801ba90:	af00      	add	r7, sp, #0
 801ba92:	60f8      	str	r0, [r7, #12]
 801ba94:	60b9      	str	r1, [r7, #8]
 801ba96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d10a      	bne.n	801bab4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801baa2:	f383 8811 	msr	BASEPRI, r3
 801baa6:	f3bf 8f6f 	isb	sy
 801baaa:	f3bf 8f4f 	dsb	sy
 801baae:	617b      	str	r3, [r7, #20]
}
 801bab0:	bf00      	nop
 801bab2:	e7fe      	b.n	801bab2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801bab4:	4b0a      	ldr	r3, [pc, #40]	; (801bae0 <vTaskPlaceOnEventListRestricted+0x54>)
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	3318      	adds	r3, #24
 801baba:	4619      	mov	r1, r3
 801babc:	68f8      	ldr	r0, [r7, #12]
 801babe:	f7fe faac 	bl	801a01a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d002      	beq.n	801bace <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801bac8:	f04f 33ff 	mov.w	r3, #4294967295
 801bacc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801bace:	6879      	ldr	r1, [r7, #4]
 801bad0:	68b8      	ldr	r0, [r7, #8]
 801bad2:	f000 fb63 	bl	801c19c <prvAddCurrentTaskToDelayedList>
	}
 801bad6:	bf00      	nop
 801bad8:	3718      	adds	r7, #24
 801bada:	46bd      	mov	sp, r7
 801badc:	bd80      	pop	{r7, pc}
 801bade:	bf00      	nop
 801bae0:	20002418 	.word	0x20002418

0801bae4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801bae4:	b580      	push	{r7, lr}
 801bae6:	b086      	sub	sp, #24
 801bae8:	af00      	add	r7, sp, #0
 801baea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	68db      	ldr	r3, [r3, #12]
 801baf0:	68db      	ldr	r3, [r3, #12]
 801baf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801baf4:	693b      	ldr	r3, [r7, #16]
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d10a      	bne.n	801bb10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801bafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bafe:	f383 8811 	msr	BASEPRI, r3
 801bb02:	f3bf 8f6f 	isb	sy
 801bb06:	f3bf 8f4f 	dsb	sy
 801bb0a:	60fb      	str	r3, [r7, #12]
}
 801bb0c:	bf00      	nop
 801bb0e:	e7fe      	b.n	801bb0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801bb10:	693b      	ldr	r3, [r7, #16]
 801bb12:	3318      	adds	r3, #24
 801bb14:	4618      	mov	r0, r3
 801bb16:	f7fe fadd 	bl	801a0d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bb1a:	4b1e      	ldr	r3, [pc, #120]	; (801bb94 <xTaskRemoveFromEventList+0xb0>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d11d      	bne.n	801bb5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801bb22:	693b      	ldr	r3, [r7, #16]
 801bb24:	3304      	adds	r3, #4
 801bb26:	4618      	mov	r0, r3
 801bb28:	f7fe fad4 	bl	801a0d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801bb2c:	693b      	ldr	r3, [r7, #16]
 801bb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb30:	4b19      	ldr	r3, [pc, #100]	; (801bb98 <xTaskRemoveFromEventList+0xb4>)
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	429a      	cmp	r2, r3
 801bb36:	d903      	bls.n	801bb40 <xTaskRemoveFromEventList+0x5c>
 801bb38:	693b      	ldr	r3, [r7, #16]
 801bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb3c:	4a16      	ldr	r2, [pc, #88]	; (801bb98 <xTaskRemoveFromEventList+0xb4>)
 801bb3e:	6013      	str	r3, [r2, #0]
 801bb40:	693b      	ldr	r3, [r7, #16]
 801bb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb44:	4613      	mov	r3, r2
 801bb46:	009b      	lsls	r3, r3, #2
 801bb48:	4413      	add	r3, r2
 801bb4a:	009b      	lsls	r3, r3, #2
 801bb4c:	4a13      	ldr	r2, [pc, #76]	; (801bb9c <xTaskRemoveFromEventList+0xb8>)
 801bb4e:	441a      	add	r2, r3
 801bb50:	693b      	ldr	r3, [r7, #16]
 801bb52:	3304      	adds	r3, #4
 801bb54:	4619      	mov	r1, r3
 801bb56:	4610      	mov	r0, r2
 801bb58:	f7fe fa5f 	bl	801a01a <vListInsertEnd>
 801bb5c:	e005      	b.n	801bb6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801bb5e:	693b      	ldr	r3, [r7, #16]
 801bb60:	3318      	adds	r3, #24
 801bb62:	4619      	mov	r1, r3
 801bb64:	480e      	ldr	r0, [pc, #56]	; (801bba0 <xTaskRemoveFromEventList+0xbc>)
 801bb66:	f7fe fa58 	bl	801a01a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801bb6a:	693b      	ldr	r3, [r7, #16]
 801bb6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb6e:	4b0d      	ldr	r3, [pc, #52]	; (801bba4 <xTaskRemoveFromEventList+0xc0>)
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb74:	429a      	cmp	r2, r3
 801bb76:	d905      	bls.n	801bb84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801bb78:	2301      	movs	r3, #1
 801bb7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801bb7c:	4b0a      	ldr	r3, [pc, #40]	; (801bba8 <xTaskRemoveFromEventList+0xc4>)
 801bb7e:	2201      	movs	r2, #1
 801bb80:	601a      	str	r2, [r3, #0]
 801bb82:	e001      	b.n	801bb88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801bb84:	2300      	movs	r3, #0
 801bb86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801bb88:	697b      	ldr	r3, [r7, #20]
}
 801bb8a:	4618      	mov	r0, r3
 801bb8c:	3718      	adds	r7, #24
 801bb8e:	46bd      	mov	sp, r7
 801bb90:	bd80      	pop	{r7, pc}
 801bb92:	bf00      	nop
 801bb94:	20002914 	.word	0x20002914
 801bb98:	200028f4 	.word	0x200028f4
 801bb9c:	2000241c 	.word	0x2000241c
 801bba0:	200028ac 	.word	0x200028ac
 801bba4:	20002418 	.word	0x20002418
 801bba8:	20002900 	.word	0x20002900

0801bbac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801bbac:	b480      	push	{r7}
 801bbae:	b083      	sub	sp, #12
 801bbb0:	af00      	add	r7, sp, #0
 801bbb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801bbb4:	4b06      	ldr	r3, [pc, #24]	; (801bbd0 <vTaskInternalSetTimeOutState+0x24>)
 801bbb6:	681a      	ldr	r2, [r3, #0]
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801bbbc:	4b05      	ldr	r3, [pc, #20]	; (801bbd4 <vTaskInternalSetTimeOutState+0x28>)
 801bbbe:	681a      	ldr	r2, [r3, #0]
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	605a      	str	r2, [r3, #4]
}
 801bbc4:	bf00      	nop
 801bbc6:	370c      	adds	r7, #12
 801bbc8:	46bd      	mov	sp, r7
 801bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbce:	4770      	bx	lr
 801bbd0:	20002904 	.word	0x20002904
 801bbd4:	200028f0 	.word	0x200028f0

0801bbd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b088      	sub	sp, #32
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
 801bbe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d10a      	bne.n	801bbfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbec:	f383 8811 	msr	BASEPRI, r3
 801bbf0:	f3bf 8f6f 	isb	sy
 801bbf4:	f3bf 8f4f 	dsb	sy
 801bbf8:	613b      	str	r3, [r7, #16]
}
 801bbfa:	bf00      	nop
 801bbfc:	e7fe      	b.n	801bbfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d10a      	bne.n	801bc1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc08:	f383 8811 	msr	BASEPRI, r3
 801bc0c:	f3bf 8f6f 	isb	sy
 801bc10:	f3bf 8f4f 	dsb	sy
 801bc14:	60fb      	str	r3, [r7, #12]
}
 801bc16:	bf00      	nop
 801bc18:	e7fe      	b.n	801bc18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801bc1a:	f000 ff8b 	bl	801cb34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801bc1e:	4b1d      	ldr	r3, [pc, #116]	; (801bc94 <xTaskCheckForTimeOut+0xbc>)
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	685b      	ldr	r3, [r3, #4]
 801bc28:	69ba      	ldr	r2, [r7, #24]
 801bc2a:	1ad3      	subs	r3, r2, r3
 801bc2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801bc2e:	683b      	ldr	r3, [r7, #0]
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc36:	d102      	bne.n	801bc3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801bc38:	2300      	movs	r3, #0
 801bc3a:	61fb      	str	r3, [r7, #28]
 801bc3c:	e023      	b.n	801bc86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	681a      	ldr	r2, [r3, #0]
 801bc42:	4b15      	ldr	r3, [pc, #84]	; (801bc98 <xTaskCheckForTimeOut+0xc0>)
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	429a      	cmp	r2, r3
 801bc48:	d007      	beq.n	801bc5a <xTaskCheckForTimeOut+0x82>
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	685b      	ldr	r3, [r3, #4]
 801bc4e:	69ba      	ldr	r2, [r7, #24]
 801bc50:	429a      	cmp	r2, r3
 801bc52:	d302      	bcc.n	801bc5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801bc54:	2301      	movs	r3, #1
 801bc56:	61fb      	str	r3, [r7, #28]
 801bc58:	e015      	b.n	801bc86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801bc5a:	683b      	ldr	r3, [r7, #0]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	697a      	ldr	r2, [r7, #20]
 801bc60:	429a      	cmp	r2, r3
 801bc62:	d20b      	bcs.n	801bc7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801bc64:	683b      	ldr	r3, [r7, #0]
 801bc66:	681a      	ldr	r2, [r3, #0]
 801bc68:	697b      	ldr	r3, [r7, #20]
 801bc6a:	1ad2      	subs	r2, r2, r3
 801bc6c:	683b      	ldr	r3, [r7, #0]
 801bc6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801bc70:	6878      	ldr	r0, [r7, #4]
 801bc72:	f7ff ff9b 	bl	801bbac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801bc76:	2300      	movs	r3, #0
 801bc78:	61fb      	str	r3, [r7, #28]
 801bc7a:	e004      	b.n	801bc86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801bc7c:	683b      	ldr	r3, [r7, #0]
 801bc7e:	2200      	movs	r2, #0
 801bc80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801bc82:	2301      	movs	r3, #1
 801bc84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801bc86:	f000 ff85 	bl	801cb94 <vPortExitCritical>

	return xReturn;
 801bc8a:	69fb      	ldr	r3, [r7, #28]
}
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	3720      	adds	r7, #32
 801bc90:	46bd      	mov	sp, r7
 801bc92:	bd80      	pop	{r7, pc}
 801bc94:	200028f0 	.word	0x200028f0
 801bc98:	20002904 	.word	0x20002904

0801bc9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801bc9c:	b480      	push	{r7}
 801bc9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801bca0:	4b03      	ldr	r3, [pc, #12]	; (801bcb0 <vTaskMissedYield+0x14>)
 801bca2:	2201      	movs	r2, #1
 801bca4:	601a      	str	r2, [r3, #0]
}
 801bca6:	bf00      	nop
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcae:	4770      	bx	lr
 801bcb0:	20002900 	.word	0x20002900

0801bcb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b082      	sub	sp, #8
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801bcbc:	f000 f852 	bl	801bd64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801bcc0:	4b06      	ldr	r3, [pc, #24]	; (801bcdc <prvIdleTask+0x28>)
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	2b01      	cmp	r3, #1
 801bcc6:	d9f9      	bls.n	801bcbc <prvIdleTask+0x8>
			{
				taskYIELD();
 801bcc8:	4b05      	ldr	r3, [pc, #20]	; (801bce0 <prvIdleTask+0x2c>)
 801bcca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bcce:	601a      	str	r2, [r3, #0]
 801bcd0:	f3bf 8f4f 	dsb	sy
 801bcd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801bcd8:	e7f0      	b.n	801bcbc <prvIdleTask+0x8>
 801bcda:	bf00      	nop
 801bcdc:	2000241c 	.word	0x2000241c
 801bce0:	e000ed04 	.word	0xe000ed04

0801bce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801bce4:	b580      	push	{r7, lr}
 801bce6:	b082      	sub	sp, #8
 801bce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801bcea:	2300      	movs	r3, #0
 801bcec:	607b      	str	r3, [r7, #4]
 801bcee:	e00c      	b.n	801bd0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801bcf0:	687a      	ldr	r2, [r7, #4]
 801bcf2:	4613      	mov	r3, r2
 801bcf4:	009b      	lsls	r3, r3, #2
 801bcf6:	4413      	add	r3, r2
 801bcf8:	009b      	lsls	r3, r3, #2
 801bcfa:	4a12      	ldr	r2, [pc, #72]	; (801bd44 <prvInitialiseTaskLists+0x60>)
 801bcfc:	4413      	add	r3, r2
 801bcfe:	4618      	mov	r0, r3
 801bd00:	f7fe f95e 	bl	8019fc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	3301      	adds	r3, #1
 801bd08:	607b      	str	r3, [r7, #4]
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	2b37      	cmp	r3, #55	; 0x37
 801bd0e:	d9ef      	bls.n	801bcf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801bd10:	480d      	ldr	r0, [pc, #52]	; (801bd48 <prvInitialiseTaskLists+0x64>)
 801bd12:	f7fe f955 	bl	8019fc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801bd16:	480d      	ldr	r0, [pc, #52]	; (801bd4c <prvInitialiseTaskLists+0x68>)
 801bd18:	f7fe f952 	bl	8019fc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801bd1c:	480c      	ldr	r0, [pc, #48]	; (801bd50 <prvInitialiseTaskLists+0x6c>)
 801bd1e:	f7fe f94f 	bl	8019fc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801bd22:	480c      	ldr	r0, [pc, #48]	; (801bd54 <prvInitialiseTaskLists+0x70>)
 801bd24:	f7fe f94c 	bl	8019fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801bd28:	480b      	ldr	r0, [pc, #44]	; (801bd58 <prvInitialiseTaskLists+0x74>)
 801bd2a:	f7fe f949 	bl	8019fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801bd2e:	4b0b      	ldr	r3, [pc, #44]	; (801bd5c <prvInitialiseTaskLists+0x78>)
 801bd30:	4a05      	ldr	r2, [pc, #20]	; (801bd48 <prvInitialiseTaskLists+0x64>)
 801bd32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801bd34:	4b0a      	ldr	r3, [pc, #40]	; (801bd60 <prvInitialiseTaskLists+0x7c>)
 801bd36:	4a05      	ldr	r2, [pc, #20]	; (801bd4c <prvInitialiseTaskLists+0x68>)
 801bd38:	601a      	str	r2, [r3, #0]
}
 801bd3a:	bf00      	nop
 801bd3c:	3708      	adds	r7, #8
 801bd3e:	46bd      	mov	sp, r7
 801bd40:	bd80      	pop	{r7, pc}
 801bd42:	bf00      	nop
 801bd44:	2000241c 	.word	0x2000241c
 801bd48:	2000287c 	.word	0x2000287c
 801bd4c:	20002890 	.word	0x20002890
 801bd50:	200028ac 	.word	0x200028ac
 801bd54:	200028c0 	.word	0x200028c0
 801bd58:	200028d8 	.word	0x200028d8
 801bd5c:	200028a4 	.word	0x200028a4
 801bd60:	200028a8 	.word	0x200028a8

0801bd64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b082      	sub	sp, #8
 801bd68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bd6a:	e019      	b.n	801bda0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801bd6c:	f000 fee2 	bl	801cb34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bd70:	4b10      	ldr	r3, [pc, #64]	; (801bdb4 <prvCheckTasksWaitingTermination+0x50>)
 801bd72:	68db      	ldr	r3, [r3, #12]
 801bd74:	68db      	ldr	r3, [r3, #12]
 801bd76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	3304      	adds	r3, #4
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f7fe f9a9 	bl	801a0d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801bd82:	4b0d      	ldr	r3, [pc, #52]	; (801bdb8 <prvCheckTasksWaitingTermination+0x54>)
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	3b01      	subs	r3, #1
 801bd88:	4a0b      	ldr	r2, [pc, #44]	; (801bdb8 <prvCheckTasksWaitingTermination+0x54>)
 801bd8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801bd8c:	4b0b      	ldr	r3, [pc, #44]	; (801bdbc <prvCheckTasksWaitingTermination+0x58>)
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	3b01      	subs	r3, #1
 801bd92:	4a0a      	ldr	r2, [pc, #40]	; (801bdbc <prvCheckTasksWaitingTermination+0x58>)
 801bd94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801bd96:	f000 fefd 	bl	801cb94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801bd9a:	6878      	ldr	r0, [r7, #4]
 801bd9c:	f000 f810 	bl	801bdc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bda0:	4b06      	ldr	r3, [pc, #24]	; (801bdbc <prvCheckTasksWaitingTermination+0x58>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d1e1      	bne.n	801bd6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801bda8:	bf00      	nop
 801bdaa:	bf00      	nop
 801bdac:	3708      	adds	r7, #8
 801bdae:	46bd      	mov	sp, r7
 801bdb0:	bd80      	pop	{r7, pc}
 801bdb2:	bf00      	nop
 801bdb4:	200028c0 	.word	0x200028c0
 801bdb8:	200028ec 	.word	0x200028ec
 801bdbc:	200028d4 	.word	0x200028d4

0801bdc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801bdc0:	b580      	push	{r7, lr}
 801bdc2:	b084      	sub	sp, #16
 801bdc4:	af00      	add	r7, sp, #0
 801bdc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	3354      	adds	r3, #84	; 0x54
 801bdcc:	4618      	mov	r0, r3
 801bdce:	f003 fc9d 	bl	801f70c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d108      	bne.n	801bdee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bde0:	4618      	mov	r0, r3
 801bde2:	f001 f895 	bl	801cf10 <vPortFree>
				vPortFree( pxTCB );
 801bde6:	6878      	ldr	r0, [r7, #4]
 801bde8:	f001 f892 	bl	801cf10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801bdec:	e018      	b.n	801be20 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801bdf4:	2b01      	cmp	r3, #1
 801bdf6:	d103      	bne.n	801be00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801bdf8:	6878      	ldr	r0, [r7, #4]
 801bdfa:	f001 f889 	bl	801cf10 <vPortFree>
	}
 801bdfe:	e00f      	b.n	801be20 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801be06:	2b02      	cmp	r3, #2
 801be08:	d00a      	beq.n	801be20 <prvDeleteTCB+0x60>
	__asm volatile
 801be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be0e:	f383 8811 	msr	BASEPRI, r3
 801be12:	f3bf 8f6f 	isb	sy
 801be16:	f3bf 8f4f 	dsb	sy
 801be1a:	60fb      	str	r3, [r7, #12]
}
 801be1c:	bf00      	nop
 801be1e:	e7fe      	b.n	801be1e <prvDeleteTCB+0x5e>
	}
 801be20:	bf00      	nop
 801be22:	3710      	adds	r7, #16
 801be24:	46bd      	mov	sp, r7
 801be26:	bd80      	pop	{r7, pc}

0801be28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801be28:	b480      	push	{r7}
 801be2a:	b083      	sub	sp, #12
 801be2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801be2e:	4b0c      	ldr	r3, [pc, #48]	; (801be60 <prvResetNextTaskUnblockTime+0x38>)
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d104      	bne.n	801be42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801be38:	4b0a      	ldr	r3, [pc, #40]	; (801be64 <prvResetNextTaskUnblockTime+0x3c>)
 801be3a:	f04f 32ff 	mov.w	r2, #4294967295
 801be3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801be40:	e008      	b.n	801be54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801be42:	4b07      	ldr	r3, [pc, #28]	; (801be60 <prvResetNextTaskUnblockTime+0x38>)
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	68db      	ldr	r3, [r3, #12]
 801be48:	68db      	ldr	r3, [r3, #12]
 801be4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	685b      	ldr	r3, [r3, #4]
 801be50:	4a04      	ldr	r2, [pc, #16]	; (801be64 <prvResetNextTaskUnblockTime+0x3c>)
 801be52:	6013      	str	r3, [r2, #0]
}
 801be54:	bf00      	nop
 801be56:	370c      	adds	r7, #12
 801be58:	46bd      	mov	sp, r7
 801be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be5e:	4770      	bx	lr
 801be60:	200028a4 	.word	0x200028a4
 801be64:	2000290c 	.word	0x2000290c

0801be68 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801be68:	b480      	push	{r7}
 801be6a:	b083      	sub	sp, #12
 801be6c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801be6e:	4b05      	ldr	r3, [pc, #20]	; (801be84 <xTaskGetCurrentTaskHandle+0x1c>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	607b      	str	r3, [r7, #4]

		return xReturn;
 801be74:	687b      	ldr	r3, [r7, #4]
	}
 801be76:	4618      	mov	r0, r3
 801be78:	370c      	adds	r7, #12
 801be7a:	46bd      	mov	sp, r7
 801be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be80:	4770      	bx	lr
 801be82:	bf00      	nop
 801be84:	20002418 	.word	0x20002418

0801be88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801be88:	b480      	push	{r7}
 801be8a:	b083      	sub	sp, #12
 801be8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801be8e:	4b0b      	ldr	r3, [pc, #44]	; (801bebc <xTaskGetSchedulerState+0x34>)
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d102      	bne.n	801be9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801be96:	2301      	movs	r3, #1
 801be98:	607b      	str	r3, [r7, #4]
 801be9a:	e008      	b.n	801beae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801be9c:	4b08      	ldr	r3, [pc, #32]	; (801bec0 <xTaskGetSchedulerState+0x38>)
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d102      	bne.n	801beaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801bea4:	2302      	movs	r3, #2
 801bea6:	607b      	str	r3, [r7, #4]
 801bea8:	e001      	b.n	801beae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801beaa:	2300      	movs	r3, #0
 801beac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801beae:	687b      	ldr	r3, [r7, #4]
	}
 801beb0:	4618      	mov	r0, r3
 801beb2:	370c      	adds	r7, #12
 801beb4:	46bd      	mov	sp, r7
 801beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beba:	4770      	bx	lr
 801bebc:	200028f8 	.word	0x200028f8
 801bec0:	20002914 	.word	0x20002914

0801bec4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801bec4:	b580      	push	{r7, lr}
 801bec6:	b084      	sub	sp, #16
 801bec8:	af00      	add	r7, sp, #0
 801beca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801bed0:	2300      	movs	r3, #0
 801bed2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d051      	beq.n	801bf7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801beda:	68bb      	ldr	r3, [r7, #8]
 801bedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bede:	4b2a      	ldr	r3, [pc, #168]	; (801bf88 <xTaskPriorityInherit+0xc4>)
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bee4:	429a      	cmp	r2, r3
 801bee6:	d241      	bcs.n	801bf6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801bee8:	68bb      	ldr	r3, [r7, #8]
 801beea:	699b      	ldr	r3, [r3, #24]
 801beec:	2b00      	cmp	r3, #0
 801beee:	db06      	blt.n	801befe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bef0:	4b25      	ldr	r3, [pc, #148]	; (801bf88 <xTaskPriorityInherit+0xc4>)
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bef6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801befa:	68bb      	ldr	r3, [r7, #8]
 801befc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801befe:	68bb      	ldr	r3, [r7, #8]
 801bf00:	6959      	ldr	r1, [r3, #20]
 801bf02:	68bb      	ldr	r3, [r7, #8]
 801bf04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf06:	4613      	mov	r3, r2
 801bf08:	009b      	lsls	r3, r3, #2
 801bf0a:	4413      	add	r3, r2
 801bf0c:	009b      	lsls	r3, r3, #2
 801bf0e:	4a1f      	ldr	r2, [pc, #124]	; (801bf8c <xTaskPriorityInherit+0xc8>)
 801bf10:	4413      	add	r3, r2
 801bf12:	4299      	cmp	r1, r3
 801bf14:	d122      	bne.n	801bf5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bf16:	68bb      	ldr	r3, [r7, #8]
 801bf18:	3304      	adds	r3, #4
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	f7fe f8da 	bl	801a0d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bf20:	4b19      	ldr	r3, [pc, #100]	; (801bf88 <xTaskPriorityInherit+0xc4>)
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf26:	68bb      	ldr	r3, [r7, #8]
 801bf28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801bf2a:	68bb      	ldr	r3, [r7, #8]
 801bf2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf2e:	4b18      	ldr	r3, [pc, #96]	; (801bf90 <xTaskPriorityInherit+0xcc>)
 801bf30:	681b      	ldr	r3, [r3, #0]
 801bf32:	429a      	cmp	r2, r3
 801bf34:	d903      	bls.n	801bf3e <xTaskPriorityInherit+0x7a>
 801bf36:	68bb      	ldr	r3, [r7, #8]
 801bf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf3a:	4a15      	ldr	r2, [pc, #84]	; (801bf90 <xTaskPriorityInherit+0xcc>)
 801bf3c:	6013      	str	r3, [r2, #0]
 801bf3e:	68bb      	ldr	r3, [r7, #8]
 801bf40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf42:	4613      	mov	r3, r2
 801bf44:	009b      	lsls	r3, r3, #2
 801bf46:	4413      	add	r3, r2
 801bf48:	009b      	lsls	r3, r3, #2
 801bf4a:	4a10      	ldr	r2, [pc, #64]	; (801bf8c <xTaskPriorityInherit+0xc8>)
 801bf4c:	441a      	add	r2, r3
 801bf4e:	68bb      	ldr	r3, [r7, #8]
 801bf50:	3304      	adds	r3, #4
 801bf52:	4619      	mov	r1, r3
 801bf54:	4610      	mov	r0, r2
 801bf56:	f7fe f860 	bl	801a01a <vListInsertEnd>
 801bf5a:	e004      	b.n	801bf66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bf5c:	4b0a      	ldr	r3, [pc, #40]	; (801bf88 <xTaskPriorityInherit+0xc4>)
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf62:	68bb      	ldr	r3, [r7, #8]
 801bf64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801bf66:	2301      	movs	r3, #1
 801bf68:	60fb      	str	r3, [r7, #12]
 801bf6a:	e008      	b.n	801bf7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801bf6c:	68bb      	ldr	r3, [r7, #8]
 801bf6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801bf70:	4b05      	ldr	r3, [pc, #20]	; (801bf88 <xTaskPriorityInherit+0xc4>)
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf76:	429a      	cmp	r2, r3
 801bf78:	d201      	bcs.n	801bf7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801bf7a:	2301      	movs	r3, #1
 801bf7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bf7e:	68fb      	ldr	r3, [r7, #12]
	}
 801bf80:	4618      	mov	r0, r3
 801bf82:	3710      	adds	r7, #16
 801bf84:	46bd      	mov	sp, r7
 801bf86:	bd80      	pop	{r7, pc}
 801bf88:	20002418 	.word	0x20002418
 801bf8c:	2000241c 	.word	0x2000241c
 801bf90:	200028f4 	.word	0x200028f4

0801bf94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b086      	sub	sp, #24
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d056      	beq.n	801c058 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801bfaa:	4b2e      	ldr	r3, [pc, #184]	; (801c064 <xTaskPriorityDisinherit+0xd0>)
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	693a      	ldr	r2, [r7, #16]
 801bfb0:	429a      	cmp	r2, r3
 801bfb2:	d00a      	beq.n	801bfca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfb8:	f383 8811 	msr	BASEPRI, r3
 801bfbc:	f3bf 8f6f 	isb	sy
 801bfc0:	f3bf 8f4f 	dsb	sy
 801bfc4:	60fb      	str	r3, [r7, #12]
}
 801bfc6:	bf00      	nop
 801bfc8:	e7fe      	b.n	801bfc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801bfca:	693b      	ldr	r3, [r7, #16]
 801bfcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d10a      	bne.n	801bfe8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801bfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfd6:	f383 8811 	msr	BASEPRI, r3
 801bfda:	f3bf 8f6f 	isb	sy
 801bfde:	f3bf 8f4f 	dsb	sy
 801bfe2:	60bb      	str	r3, [r7, #8]
}
 801bfe4:	bf00      	nop
 801bfe6:	e7fe      	b.n	801bfe6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801bfe8:	693b      	ldr	r3, [r7, #16]
 801bfea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bfec:	1e5a      	subs	r2, r3, #1
 801bfee:	693b      	ldr	r3, [r7, #16]
 801bff0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801bff2:	693b      	ldr	r3, [r7, #16]
 801bff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bff6:	693b      	ldr	r3, [r7, #16]
 801bff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bffa:	429a      	cmp	r2, r3
 801bffc:	d02c      	beq.n	801c058 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801bffe:	693b      	ldr	r3, [r7, #16]
 801c000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c002:	2b00      	cmp	r3, #0
 801c004:	d128      	bne.n	801c058 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c006:	693b      	ldr	r3, [r7, #16]
 801c008:	3304      	adds	r3, #4
 801c00a:	4618      	mov	r0, r3
 801c00c:	f7fe f862 	bl	801a0d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801c010:	693b      	ldr	r3, [r7, #16]
 801c012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c014:	693b      	ldr	r3, [r7, #16]
 801c016:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c018:	693b      	ldr	r3, [r7, #16]
 801c01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c01c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801c020:	693b      	ldr	r3, [r7, #16]
 801c022:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801c024:	693b      	ldr	r3, [r7, #16]
 801c026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c028:	4b0f      	ldr	r3, [pc, #60]	; (801c068 <xTaskPriorityDisinherit+0xd4>)
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	429a      	cmp	r2, r3
 801c02e:	d903      	bls.n	801c038 <xTaskPriorityDisinherit+0xa4>
 801c030:	693b      	ldr	r3, [r7, #16]
 801c032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c034:	4a0c      	ldr	r2, [pc, #48]	; (801c068 <xTaskPriorityDisinherit+0xd4>)
 801c036:	6013      	str	r3, [r2, #0]
 801c038:	693b      	ldr	r3, [r7, #16]
 801c03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c03c:	4613      	mov	r3, r2
 801c03e:	009b      	lsls	r3, r3, #2
 801c040:	4413      	add	r3, r2
 801c042:	009b      	lsls	r3, r3, #2
 801c044:	4a09      	ldr	r2, [pc, #36]	; (801c06c <xTaskPriorityDisinherit+0xd8>)
 801c046:	441a      	add	r2, r3
 801c048:	693b      	ldr	r3, [r7, #16]
 801c04a:	3304      	adds	r3, #4
 801c04c:	4619      	mov	r1, r3
 801c04e:	4610      	mov	r0, r2
 801c050:	f7fd ffe3 	bl	801a01a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801c054:	2301      	movs	r3, #1
 801c056:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801c058:	697b      	ldr	r3, [r7, #20]
	}
 801c05a:	4618      	mov	r0, r3
 801c05c:	3718      	adds	r7, #24
 801c05e:	46bd      	mov	sp, r7
 801c060:	bd80      	pop	{r7, pc}
 801c062:	bf00      	nop
 801c064:	20002418 	.word	0x20002418
 801c068:	200028f4 	.word	0x200028f4
 801c06c:	2000241c 	.word	0x2000241c

0801c070 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801c070:	b580      	push	{r7, lr}
 801c072:	b088      	sub	sp, #32
 801c074:	af00      	add	r7, sp, #0
 801c076:	6078      	str	r0, [r7, #4]
 801c078:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801c07e:	2301      	movs	r3, #1
 801c080:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d06a      	beq.n	801c15e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801c088:	69bb      	ldr	r3, [r7, #24]
 801c08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d10a      	bne.n	801c0a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c094:	f383 8811 	msr	BASEPRI, r3
 801c098:	f3bf 8f6f 	isb	sy
 801c09c:	f3bf 8f4f 	dsb	sy
 801c0a0:	60fb      	str	r3, [r7, #12]
}
 801c0a2:	bf00      	nop
 801c0a4:	e7fe      	b.n	801c0a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801c0a6:	69bb      	ldr	r3, [r7, #24]
 801c0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c0aa:	683a      	ldr	r2, [r7, #0]
 801c0ac:	429a      	cmp	r2, r3
 801c0ae:	d902      	bls.n	801c0b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801c0b0:	683b      	ldr	r3, [r7, #0]
 801c0b2:	61fb      	str	r3, [r7, #28]
 801c0b4:	e002      	b.n	801c0bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801c0b6:	69bb      	ldr	r3, [r7, #24]
 801c0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c0ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801c0bc:	69bb      	ldr	r3, [r7, #24]
 801c0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0c0:	69fa      	ldr	r2, [r7, #28]
 801c0c2:	429a      	cmp	r2, r3
 801c0c4:	d04b      	beq.n	801c15e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801c0c6:	69bb      	ldr	r3, [r7, #24]
 801c0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c0ca:	697a      	ldr	r2, [r7, #20]
 801c0cc:	429a      	cmp	r2, r3
 801c0ce:	d146      	bne.n	801c15e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801c0d0:	4b25      	ldr	r3, [pc, #148]	; (801c168 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	69ba      	ldr	r2, [r7, #24]
 801c0d6:	429a      	cmp	r2, r3
 801c0d8:	d10a      	bne.n	801c0f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c0de:	f383 8811 	msr	BASEPRI, r3
 801c0e2:	f3bf 8f6f 	isb	sy
 801c0e6:	f3bf 8f4f 	dsb	sy
 801c0ea:	60bb      	str	r3, [r7, #8]
}
 801c0ec:	bf00      	nop
 801c0ee:	e7fe      	b.n	801c0ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801c0f0:	69bb      	ldr	r3, [r7, #24]
 801c0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801c0f6:	69bb      	ldr	r3, [r7, #24]
 801c0f8:	69fa      	ldr	r2, [r7, #28]
 801c0fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801c0fc:	69bb      	ldr	r3, [r7, #24]
 801c0fe:	699b      	ldr	r3, [r3, #24]
 801c100:	2b00      	cmp	r3, #0
 801c102:	db04      	blt.n	801c10e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c104:	69fb      	ldr	r3, [r7, #28]
 801c106:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801c10a:	69bb      	ldr	r3, [r7, #24]
 801c10c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801c10e:	69bb      	ldr	r3, [r7, #24]
 801c110:	6959      	ldr	r1, [r3, #20]
 801c112:	693a      	ldr	r2, [r7, #16]
 801c114:	4613      	mov	r3, r2
 801c116:	009b      	lsls	r3, r3, #2
 801c118:	4413      	add	r3, r2
 801c11a:	009b      	lsls	r3, r3, #2
 801c11c:	4a13      	ldr	r2, [pc, #76]	; (801c16c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801c11e:	4413      	add	r3, r2
 801c120:	4299      	cmp	r1, r3
 801c122:	d11c      	bne.n	801c15e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c124:	69bb      	ldr	r3, [r7, #24]
 801c126:	3304      	adds	r3, #4
 801c128:	4618      	mov	r0, r3
 801c12a:	f7fd ffd3 	bl	801a0d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801c12e:	69bb      	ldr	r3, [r7, #24]
 801c130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c132:	4b0f      	ldr	r3, [pc, #60]	; (801c170 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	429a      	cmp	r2, r3
 801c138:	d903      	bls.n	801c142 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801c13a:	69bb      	ldr	r3, [r7, #24]
 801c13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c13e:	4a0c      	ldr	r2, [pc, #48]	; (801c170 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801c140:	6013      	str	r3, [r2, #0]
 801c142:	69bb      	ldr	r3, [r7, #24]
 801c144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c146:	4613      	mov	r3, r2
 801c148:	009b      	lsls	r3, r3, #2
 801c14a:	4413      	add	r3, r2
 801c14c:	009b      	lsls	r3, r3, #2
 801c14e:	4a07      	ldr	r2, [pc, #28]	; (801c16c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801c150:	441a      	add	r2, r3
 801c152:	69bb      	ldr	r3, [r7, #24]
 801c154:	3304      	adds	r3, #4
 801c156:	4619      	mov	r1, r3
 801c158:	4610      	mov	r0, r2
 801c15a:	f7fd ff5e 	bl	801a01a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801c15e:	bf00      	nop
 801c160:	3720      	adds	r7, #32
 801c162:	46bd      	mov	sp, r7
 801c164:	bd80      	pop	{r7, pc}
 801c166:	bf00      	nop
 801c168:	20002418 	.word	0x20002418
 801c16c:	2000241c 	.word	0x2000241c
 801c170:	200028f4 	.word	0x200028f4

0801c174 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801c174:	b480      	push	{r7}
 801c176:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801c178:	4b07      	ldr	r3, [pc, #28]	; (801c198 <pvTaskIncrementMutexHeldCount+0x24>)
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d004      	beq.n	801c18a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801c180:	4b05      	ldr	r3, [pc, #20]	; (801c198 <pvTaskIncrementMutexHeldCount+0x24>)
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c186:	3201      	adds	r2, #1
 801c188:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801c18a:	4b03      	ldr	r3, [pc, #12]	; (801c198 <pvTaskIncrementMutexHeldCount+0x24>)
 801c18c:	681b      	ldr	r3, [r3, #0]
	}
 801c18e:	4618      	mov	r0, r3
 801c190:	46bd      	mov	sp, r7
 801c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c196:	4770      	bx	lr
 801c198:	20002418 	.word	0x20002418

0801c19c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801c19c:	b580      	push	{r7, lr}
 801c19e:	b084      	sub	sp, #16
 801c1a0:	af00      	add	r7, sp, #0
 801c1a2:	6078      	str	r0, [r7, #4]
 801c1a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801c1a6:	4b21      	ldr	r3, [pc, #132]	; (801c22c <prvAddCurrentTaskToDelayedList+0x90>)
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c1ac:	4b20      	ldr	r3, [pc, #128]	; (801c230 <prvAddCurrentTaskToDelayedList+0x94>)
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	3304      	adds	r3, #4
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	f7fd ff8e 	bl	801a0d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1be:	d10a      	bne.n	801c1d6 <prvAddCurrentTaskToDelayedList+0x3a>
 801c1c0:	683b      	ldr	r3, [r7, #0]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d007      	beq.n	801c1d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c1c6:	4b1a      	ldr	r3, [pc, #104]	; (801c230 <prvAddCurrentTaskToDelayedList+0x94>)
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	3304      	adds	r3, #4
 801c1cc:	4619      	mov	r1, r3
 801c1ce:	4819      	ldr	r0, [pc, #100]	; (801c234 <prvAddCurrentTaskToDelayedList+0x98>)
 801c1d0:	f7fd ff23 	bl	801a01a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801c1d4:	e026      	b.n	801c224 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801c1d6:	68fa      	ldr	r2, [r7, #12]
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	4413      	add	r3, r2
 801c1dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801c1de:	4b14      	ldr	r3, [pc, #80]	; (801c230 <prvAddCurrentTaskToDelayedList+0x94>)
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	68ba      	ldr	r2, [r7, #8]
 801c1e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801c1e6:	68ba      	ldr	r2, [r7, #8]
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	429a      	cmp	r2, r3
 801c1ec:	d209      	bcs.n	801c202 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c1ee:	4b12      	ldr	r3, [pc, #72]	; (801c238 <prvAddCurrentTaskToDelayedList+0x9c>)
 801c1f0:	681a      	ldr	r2, [r3, #0]
 801c1f2:	4b0f      	ldr	r3, [pc, #60]	; (801c230 <prvAddCurrentTaskToDelayedList+0x94>)
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	3304      	adds	r3, #4
 801c1f8:	4619      	mov	r1, r3
 801c1fa:	4610      	mov	r0, r2
 801c1fc:	f7fd ff31 	bl	801a062 <vListInsert>
}
 801c200:	e010      	b.n	801c224 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c202:	4b0e      	ldr	r3, [pc, #56]	; (801c23c <prvAddCurrentTaskToDelayedList+0xa0>)
 801c204:	681a      	ldr	r2, [r3, #0]
 801c206:	4b0a      	ldr	r3, [pc, #40]	; (801c230 <prvAddCurrentTaskToDelayedList+0x94>)
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	3304      	adds	r3, #4
 801c20c:	4619      	mov	r1, r3
 801c20e:	4610      	mov	r0, r2
 801c210:	f7fd ff27 	bl	801a062 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801c214:	4b0a      	ldr	r3, [pc, #40]	; (801c240 <prvAddCurrentTaskToDelayedList+0xa4>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	68ba      	ldr	r2, [r7, #8]
 801c21a:	429a      	cmp	r2, r3
 801c21c:	d202      	bcs.n	801c224 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801c21e:	4a08      	ldr	r2, [pc, #32]	; (801c240 <prvAddCurrentTaskToDelayedList+0xa4>)
 801c220:	68bb      	ldr	r3, [r7, #8]
 801c222:	6013      	str	r3, [r2, #0]
}
 801c224:	bf00      	nop
 801c226:	3710      	adds	r7, #16
 801c228:	46bd      	mov	sp, r7
 801c22a:	bd80      	pop	{r7, pc}
 801c22c:	200028f0 	.word	0x200028f0
 801c230:	20002418 	.word	0x20002418
 801c234:	200028d8 	.word	0x200028d8
 801c238:	200028a8 	.word	0x200028a8
 801c23c:	200028a4 	.word	0x200028a4
 801c240:	2000290c 	.word	0x2000290c

0801c244 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801c244:	b580      	push	{r7, lr}
 801c246:	b08a      	sub	sp, #40	; 0x28
 801c248:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801c24a:	2300      	movs	r3, #0
 801c24c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801c24e:	f000 fb07 	bl	801c860 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801c252:	4b1c      	ldr	r3, [pc, #112]	; (801c2c4 <xTimerCreateTimerTask+0x80>)
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d021      	beq.n	801c29e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801c25a:	2300      	movs	r3, #0
 801c25c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801c25e:	2300      	movs	r3, #0
 801c260:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801c262:	1d3a      	adds	r2, r7, #4
 801c264:	f107 0108 	add.w	r1, r7, #8
 801c268:	f107 030c 	add.w	r3, r7, #12
 801c26c:	4618      	mov	r0, r3
 801c26e:	f7fd fe8d 	bl	8019f8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801c272:	6879      	ldr	r1, [r7, #4]
 801c274:	68bb      	ldr	r3, [r7, #8]
 801c276:	68fa      	ldr	r2, [r7, #12]
 801c278:	9202      	str	r2, [sp, #8]
 801c27a:	9301      	str	r3, [sp, #4]
 801c27c:	2302      	movs	r3, #2
 801c27e:	9300      	str	r3, [sp, #0]
 801c280:	2300      	movs	r3, #0
 801c282:	460a      	mov	r2, r1
 801c284:	4910      	ldr	r1, [pc, #64]	; (801c2c8 <xTimerCreateTimerTask+0x84>)
 801c286:	4811      	ldr	r0, [pc, #68]	; (801c2cc <xTimerCreateTimerTask+0x88>)
 801c288:	f7fe fece 	bl	801b028 <xTaskCreateStatic>
 801c28c:	4603      	mov	r3, r0
 801c28e:	4a10      	ldr	r2, [pc, #64]	; (801c2d0 <xTimerCreateTimerTask+0x8c>)
 801c290:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801c292:	4b0f      	ldr	r3, [pc, #60]	; (801c2d0 <xTimerCreateTimerTask+0x8c>)
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d001      	beq.n	801c29e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801c29a:	2301      	movs	r3, #1
 801c29c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801c29e:	697b      	ldr	r3, [r7, #20]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d10a      	bne.n	801c2ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 801c2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2a8:	f383 8811 	msr	BASEPRI, r3
 801c2ac:	f3bf 8f6f 	isb	sy
 801c2b0:	f3bf 8f4f 	dsb	sy
 801c2b4:	613b      	str	r3, [r7, #16]
}
 801c2b6:	bf00      	nop
 801c2b8:	e7fe      	b.n	801c2b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801c2ba:	697b      	ldr	r3, [r7, #20]
}
 801c2bc:	4618      	mov	r0, r3
 801c2be:	3718      	adds	r7, #24
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bd80      	pop	{r7, pc}
 801c2c4:	20002948 	.word	0x20002948
 801c2c8:	08020a78 	.word	0x08020a78
 801c2cc:	0801c409 	.word	0x0801c409
 801c2d0:	2000294c 	.word	0x2000294c

0801c2d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	b08a      	sub	sp, #40	; 0x28
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	60f8      	str	r0, [r7, #12]
 801c2dc:	60b9      	str	r1, [r7, #8]
 801c2de:	607a      	str	r2, [r7, #4]
 801c2e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d10a      	bne.n	801c302 <xTimerGenericCommand+0x2e>
	__asm volatile
 801c2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2f0:	f383 8811 	msr	BASEPRI, r3
 801c2f4:	f3bf 8f6f 	isb	sy
 801c2f8:	f3bf 8f4f 	dsb	sy
 801c2fc:	623b      	str	r3, [r7, #32]
}
 801c2fe:	bf00      	nop
 801c300:	e7fe      	b.n	801c300 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801c302:	4b1a      	ldr	r3, [pc, #104]	; (801c36c <xTimerGenericCommand+0x98>)
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	2b00      	cmp	r3, #0
 801c308:	d02a      	beq.n	801c360 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801c312:	68fb      	ldr	r3, [r7, #12]
 801c314:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801c316:	68bb      	ldr	r3, [r7, #8]
 801c318:	2b05      	cmp	r3, #5
 801c31a:	dc18      	bgt.n	801c34e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801c31c:	f7ff fdb4 	bl	801be88 <xTaskGetSchedulerState>
 801c320:	4603      	mov	r3, r0
 801c322:	2b02      	cmp	r3, #2
 801c324:	d109      	bne.n	801c33a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801c326:	4b11      	ldr	r3, [pc, #68]	; (801c36c <xTimerGenericCommand+0x98>)
 801c328:	6818      	ldr	r0, [r3, #0]
 801c32a:	f107 0110 	add.w	r1, r7, #16
 801c32e:	2300      	movs	r3, #0
 801c330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c332:	f7fe f8ed 	bl	801a510 <xQueueGenericSend>
 801c336:	6278      	str	r0, [r7, #36]	; 0x24
 801c338:	e012      	b.n	801c360 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801c33a:	4b0c      	ldr	r3, [pc, #48]	; (801c36c <xTimerGenericCommand+0x98>)
 801c33c:	6818      	ldr	r0, [r3, #0]
 801c33e:	f107 0110 	add.w	r1, r7, #16
 801c342:	2300      	movs	r3, #0
 801c344:	2200      	movs	r2, #0
 801c346:	f7fe f8e3 	bl	801a510 <xQueueGenericSend>
 801c34a:	6278      	str	r0, [r7, #36]	; 0x24
 801c34c:	e008      	b.n	801c360 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c34e:	4b07      	ldr	r3, [pc, #28]	; (801c36c <xTimerGenericCommand+0x98>)
 801c350:	6818      	ldr	r0, [r3, #0]
 801c352:	f107 0110 	add.w	r1, r7, #16
 801c356:	2300      	movs	r3, #0
 801c358:	683a      	ldr	r2, [r7, #0]
 801c35a:	f7fe f9d7 	bl	801a70c <xQueueGenericSendFromISR>
 801c35e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c362:	4618      	mov	r0, r3
 801c364:	3728      	adds	r7, #40	; 0x28
 801c366:	46bd      	mov	sp, r7
 801c368:	bd80      	pop	{r7, pc}
 801c36a:	bf00      	nop
 801c36c:	20002948 	.word	0x20002948

0801c370 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801c370:	b580      	push	{r7, lr}
 801c372:	b088      	sub	sp, #32
 801c374:	af02      	add	r7, sp, #8
 801c376:	6078      	str	r0, [r7, #4]
 801c378:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c37a:	4b22      	ldr	r3, [pc, #136]	; (801c404 <prvProcessExpiredTimer+0x94>)
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	68db      	ldr	r3, [r3, #12]
 801c380:	68db      	ldr	r3, [r3, #12]
 801c382:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c384:	697b      	ldr	r3, [r7, #20]
 801c386:	3304      	adds	r3, #4
 801c388:	4618      	mov	r0, r3
 801c38a:	f7fd fea3 	bl	801a0d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c38e:	697b      	ldr	r3, [r7, #20]
 801c390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c394:	f003 0304 	and.w	r3, r3, #4
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d022      	beq.n	801c3e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801c39c:	697b      	ldr	r3, [r7, #20]
 801c39e:	699a      	ldr	r2, [r3, #24]
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	18d1      	adds	r1, r2, r3
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	683a      	ldr	r2, [r7, #0]
 801c3a8:	6978      	ldr	r0, [r7, #20]
 801c3aa:	f000 f8d1 	bl	801c550 <prvInsertTimerInActiveList>
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d01f      	beq.n	801c3f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	9300      	str	r3, [sp, #0]
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	687a      	ldr	r2, [r7, #4]
 801c3bc:	2100      	movs	r1, #0
 801c3be:	6978      	ldr	r0, [r7, #20]
 801c3c0:	f7ff ff88 	bl	801c2d4 <xTimerGenericCommand>
 801c3c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801c3c6:	693b      	ldr	r3, [r7, #16]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d113      	bne.n	801c3f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801c3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3d0:	f383 8811 	msr	BASEPRI, r3
 801c3d4:	f3bf 8f6f 	isb	sy
 801c3d8:	f3bf 8f4f 	dsb	sy
 801c3dc:	60fb      	str	r3, [r7, #12]
}
 801c3de:	bf00      	nop
 801c3e0:	e7fe      	b.n	801c3e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c3e2:	697b      	ldr	r3, [r7, #20]
 801c3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c3e8:	f023 0301 	bic.w	r3, r3, #1
 801c3ec:	b2da      	uxtb	r2, r3
 801c3ee:	697b      	ldr	r3, [r7, #20]
 801c3f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c3f4:	697b      	ldr	r3, [r7, #20]
 801c3f6:	6a1b      	ldr	r3, [r3, #32]
 801c3f8:	6978      	ldr	r0, [r7, #20]
 801c3fa:	4798      	blx	r3
}
 801c3fc:	bf00      	nop
 801c3fe:	3718      	adds	r7, #24
 801c400:	46bd      	mov	sp, r7
 801c402:	bd80      	pop	{r7, pc}
 801c404:	20002940 	.word	0x20002940

0801c408 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b084      	sub	sp, #16
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c410:	f107 0308 	add.w	r3, r7, #8
 801c414:	4618      	mov	r0, r3
 801c416:	f000 f857 	bl	801c4c8 <prvGetNextExpireTime>
 801c41a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801c41c:	68bb      	ldr	r3, [r7, #8]
 801c41e:	4619      	mov	r1, r3
 801c420:	68f8      	ldr	r0, [r7, #12]
 801c422:	f000 f803 	bl	801c42c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801c426:	f000 f8d5 	bl	801c5d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c42a:	e7f1      	b.n	801c410 <prvTimerTask+0x8>

0801c42c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801c42c:	b580      	push	{r7, lr}
 801c42e:	b084      	sub	sp, #16
 801c430:	af00      	add	r7, sp, #0
 801c432:	6078      	str	r0, [r7, #4]
 801c434:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801c436:	f7ff f92b 	bl	801b690 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c43a:	f107 0308 	add.w	r3, r7, #8
 801c43e:	4618      	mov	r0, r3
 801c440:	f000 f866 	bl	801c510 <prvSampleTimeNow>
 801c444:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801c446:	68bb      	ldr	r3, [r7, #8]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d130      	bne.n	801c4ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801c44c:	683b      	ldr	r3, [r7, #0]
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d10a      	bne.n	801c468 <prvProcessTimerOrBlockTask+0x3c>
 801c452:	687a      	ldr	r2, [r7, #4]
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	429a      	cmp	r2, r3
 801c458:	d806      	bhi.n	801c468 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801c45a:	f7ff f927 	bl	801b6ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801c45e:	68f9      	ldr	r1, [r7, #12]
 801c460:	6878      	ldr	r0, [r7, #4]
 801c462:	f7ff ff85 	bl	801c370 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801c466:	e024      	b.n	801c4b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801c468:	683b      	ldr	r3, [r7, #0]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d008      	beq.n	801c480 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801c46e:	4b13      	ldr	r3, [pc, #76]	; (801c4bc <prvProcessTimerOrBlockTask+0x90>)
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	2b00      	cmp	r3, #0
 801c476:	d101      	bne.n	801c47c <prvProcessTimerOrBlockTask+0x50>
 801c478:	2301      	movs	r3, #1
 801c47a:	e000      	b.n	801c47e <prvProcessTimerOrBlockTask+0x52>
 801c47c:	2300      	movs	r3, #0
 801c47e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801c480:	4b0f      	ldr	r3, [pc, #60]	; (801c4c0 <prvProcessTimerOrBlockTask+0x94>)
 801c482:	6818      	ldr	r0, [r3, #0]
 801c484:	687a      	ldr	r2, [r7, #4]
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	1ad3      	subs	r3, r2, r3
 801c48a:	683a      	ldr	r2, [r7, #0]
 801c48c:	4619      	mov	r1, r3
 801c48e:	f7fe fd97 	bl	801afc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801c492:	f7ff f90b 	bl	801b6ac <xTaskResumeAll>
 801c496:	4603      	mov	r3, r0
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d10a      	bne.n	801c4b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801c49c:	4b09      	ldr	r3, [pc, #36]	; (801c4c4 <prvProcessTimerOrBlockTask+0x98>)
 801c49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c4a2:	601a      	str	r2, [r3, #0]
 801c4a4:	f3bf 8f4f 	dsb	sy
 801c4a8:	f3bf 8f6f 	isb	sy
}
 801c4ac:	e001      	b.n	801c4b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801c4ae:	f7ff f8fd 	bl	801b6ac <xTaskResumeAll>
}
 801c4b2:	bf00      	nop
 801c4b4:	3710      	adds	r7, #16
 801c4b6:	46bd      	mov	sp, r7
 801c4b8:	bd80      	pop	{r7, pc}
 801c4ba:	bf00      	nop
 801c4bc:	20002944 	.word	0x20002944
 801c4c0:	20002948 	.word	0x20002948
 801c4c4:	e000ed04 	.word	0xe000ed04

0801c4c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801c4c8:	b480      	push	{r7}
 801c4ca:	b085      	sub	sp, #20
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801c4d0:	4b0e      	ldr	r3, [pc, #56]	; (801c50c <prvGetNextExpireTime+0x44>)
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d101      	bne.n	801c4de <prvGetNextExpireTime+0x16>
 801c4da:	2201      	movs	r2, #1
 801c4dc:	e000      	b.n	801c4e0 <prvGetNextExpireTime+0x18>
 801c4de:	2200      	movs	r2, #0
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d105      	bne.n	801c4f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c4ec:	4b07      	ldr	r3, [pc, #28]	; (801c50c <prvGetNextExpireTime+0x44>)
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	68db      	ldr	r3, [r3, #12]
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	60fb      	str	r3, [r7, #12]
 801c4f6:	e001      	b.n	801c4fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801c4fc:	68fb      	ldr	r3, [r7, #12]
}
 801c4fe:	4618      	mov	r0, r3
 801c500:	3714      	adds	r7, #20
 801c502:	46bd      	mov	sp, r7
 801c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c508:	4770      	bx	lr
 801c50a:	bf00      	nop
 801c50c:	20002940 	.word	0x20002940

0801c510 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801c510:	b580      	push	{r7, lr}
 801c512:	b084      	sub	sp, #16
 801c514:	af00      	add	r7, sp, #0
 801c516:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801c518:	f7ff f966 	bl	801b7e8 <xTaskGetTickCount>
 801c51c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801c51e:	4b0b      	ldr	r3, [pc, #44]	; (801c54c <prvSampleTimeNow+0x3c>)
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	68fa      	ldr	r2, [r7, #12]
 801c524:	429a      	cmp	r2, r3
 801c526:	d205      	bcs.n	801c534 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801c528:	f000 f936 	bl	801c798 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	2201      	movs	r2, #1
 801c530:	601a      	str	r2, [r3, #0]
 801c532:	e002      	b.n	801c53a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	2200      	movs	r2, #0
 801c538:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801c53a:	4a04      	ldr	r2, [pc, #16]	; (801c54c <prvSampleTimeNow+0x3c>)
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801c540:	68fb      	ldr	r3, [r7, #12]
}
 801c542:	4618      	mov	r0, r3
 801c544:	3710      	adds	r7, #16
 801c546:	46bd      	mov	sp, r7
 801c548:	bd80      	pop	{r7, pc}
 801c54a:	bf00      	nop
 801c54c:	20002950 	.word	0x20002950

0801c550 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b086      	sub	sp, #24
 801c554:	af00      	add	r7, sp, #0
 801c556:	60f8      	str	r0, [r7, #12]
 801c558:	60b9      	str	r1, [r7, #8]
 801c55a:	607a      	str	r2, [r7, #4]
 801c55c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801c55e:	2300      	movs	r3, #0
 801c560:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	68ba      	ldr	r2, [r7, #8]
 801c566:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	68fa      	ldr	r2, [r7, #12]
 801c56c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801c56e:	68ba      	ldr	r2, [r7, #8]
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	429a      	cmp	r2, r3
 801c574:	d812      	bhi.n	801c59c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c576:	687a      	ldr	r2, [r7, #4]
 801c578:	683b      	ldr	r3, [r7, #0]
 801c57a:	1ad2      	subs	r2, r2, r3
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	699b      	ldr	r3, [r3, #24]
 801c580:	429a      	cmp	r2, r3
 801c582:	d302      	bcc.n	801c58a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801c584:	2301      	movs	r3, #1
 801c586:	617b      	str	r3, [r7, #20]
 801c588:	e01b      	b.n	801c5c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c58a:	4b10      	ldr	r3, [pc, #64]	; (801c5cc <prvInsertTimerInActiveList+0x7c>)
 801c58c:	681a      	ldr	r2, [r3, #0]
 801c58e:	68fb      	ldr	r3, [r7, #12]
 801c590:	3304      	adds	r3, #4
 801c592:	4619      	mov	r1, r3
 801c594:	4610      	mov	r0, r2
 801c596:	f7fd fd64 	bl	801a062 <vListInsert>
 801c59a:	e012      	b.n	801c5c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c59c:	687a      	ldr	r2, [r7, #4]
 801c59e:	683b      	ldr	r3, [r7, #0]
 801c5a0:	429a      	cmp	r2, r3
 801c5a2:	d206      	bcs.n	801c5b2 <prvInsertTimerInActiveList+0x62>
 801c5a4:	68ba      	ldr	r2, [r7, #8]
 801c5a6:	683b      	ldr	r3, [r7, #0]
 801c5a8:	429a      	cmp	r2, r3
 801c5aa:	d302      	bcc.n	801c5b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c5ac:	2301      	movs	r3, #1
 801c5ae:	617b      	str	r3, [r7, #20]
 801c5b0:	e007      	b.n	801c5c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c5b2:	4b07      	ldr	r3, [pc, #28]	; (801c5d0 <prvInsertTimerInActiveList+0x80>)
 801c5b4:	681a      	ldr	r2, [r3, #0]
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	3304      	adds	r3, #4
 801c5ba:	4619      	mov	r1, r3
 801c5bc:	4610      	mov	r0, r2
 801c5be:	f7fd fd50 	bl	801a062 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c5c2:	697b      	ldr	r3, [r7, #20]
}
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	3718      	adds	r7, #24
 801c5c8:	46bd      	mov	sp, r7
 801c5ca:	bd80      	pop	{r7, pc}
 801c5cc:	20002944 	.word	0x20002944
 801c5d0:	20002940 	.word	0x20002940

0801c5d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b08e      	sub	sp, #56	; 0x38
 801c5d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c5da:	e0ca      	b.n	801c772 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	da18      	bge.n	801c614 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801c5e2:	1d3b      	adds	r3, r7, #4
 801c5e4:	3304      	adds	r3, #4
 801c5e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801c5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d10a      	bne.n	801c604 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801c5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5f2:	f383 8811 	msr	BASEPRI, r3
 801c5f6:	f3bf 8f6f 	isb	sy
 801c5fa:	f3bf 8f4f 	dsb	sy
 801c5fe:	61fb      	str	r3, [r7, #28]
}
 801c600:	bf00      	nop
 801c602:	e7fe      	b.n	801c602 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801c604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c60a:	6850      	ldr	r0, [r2, #4]
 801c60c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c60e:	6892      	ldr	r2, [r2, #8]
 801c610:	4611      	mov	r1, r2
 801c612:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	2b00      	cmp	r3, #0
 801c618:	f2c0 80ab 	blt.w	801c772 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c622:	695b      	ldr	r3, [r3, #20]
 801c624:	2b00      	cmp	r3, #0
 801c626:	d004      	beq.n	801c632 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c62a:	3304      	adds	r3, #4
 801c62c:	4618      	mov	r0, r3
 801c62e:	f7fd fd51 	bl	801a0d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c632:	463b      	mov	r3, r7
 801c634:	4618      	mov	r0, r3
 801c636:	f7ff ff6b 	bl	801c510 <prvSampleTimeNow>
 801c63a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	2b09      	cmp	r3, #9
 801c640:	f200 8096 	bhi.w	801c770 <prvProcessReceivedCommands+0x19c>
 801c644:	a201      	add	r2, pc, #4	; (adr r2, 801c64c <prvProcessReceivedCommands+0x78>)
 801c646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c64a:	bf00      	nop
 801c64c:	0801c675 	.word	0x0801c675
 801c650:	0801c675 	.word	0x0801c675
 801c654:	0801c675 	.word	0x0801c675
 801c658:	0801c6e9 	.word	0x0801c6e9
 801c65c:	0801c6fd 	.word	0x0801c6fd
 801c660:	0801c747 	.word	0x0801c747
 801c664:	0801c675 	.word	0x0801c675
 801c668:	0801c675 	.word	0x0801c675
 801c66c:	0801c6e9 	.word	0x0801c6e9
 801c670:	0801c6fd 	.word	0x0801c6fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c67a:	f043 0301 	orr.w	r3, r3, #1
 801c67e:	b2da      	uxtb	r2, r3
 801c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c686:	68ba      	ldr	r2, [r7, #8]
 801c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c68a:	699b      	ldr	r3, [r3, #24]
 801c68c:	18d1      	adds	r1, r2, r3
 801c68e:	68bb      	ldr	r3, [r7, #8]
 801c690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c694:	f7ff ff5c 	bl	801c550 <prvInsertTimerInActiveList>
 801c698:	4603      	mov	r3, r0
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d069      	beq.n	801c772 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6a0:	6a1b      	ldr	r3, [r3, #32]
 801c6a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c6a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c6ac:	f003 0304 	and.w	r3, r3, #4
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d05e      	beq.n	801c772 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c6b4:	68ba      	ldr	r2, [r7, #8]
 801c6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6b8:	699b      	ldr	r3, [r3, #24]
 801c6ba:	441a      	add	r2, r3
 801c6bc:	2300      	movs	r3, #0
 801c6be:	9300      	str	r3, [sp, #0]
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	2100      	movs	r1, #0
 801c6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c6c6:	f7ff fe05 	bl	801c2d4 <xTimerGenericCommand>
 801c6ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801c6cc:	6a3b      	ldr	r3, [r7, #32]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d14f      	bne.n	801c772 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6d6:	f383 8811 	msr	BASEPRI, r3
 801c6da:	f3bf 8f6f 	isb	sy
 801c6de:	f3bf 8f4f 	dsb	sy
 801c6e2:	61bb      	str	r3, [r7, #24]
}
 801c6e4:	bf00      	nop
 801c6e6:	e7fe      	b.n	801c6e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c6ee:	f023 0301 	bic.w	r3, r3, #1
 801c6f2:	b2da      	uxtb	r2, r3
 801c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801c6fa:	e03a      	b.n	801c772 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c702:	f043 0301 	orr.w	r3, r3, #1
 801c706:	b2da      	uxtb	r2, r3
 801c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c70a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c70e:	68ba      	ldr	r2, [r7, #8]
 801c710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c712:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c716:	699b      	ldr	r3, [r3, #24]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d10a      	bne.n	801c732 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c720:	f383 8811 	msr	BASEPRI, r3
 801c724:	f3bf 8f6f 	isb	sy
 801c728:	f3bf 8f4f 	dsb	sy
 801c72c:	617b      	str	r3, [r7, #20]
}
 801c72e:	bf00      	nop
 801c730:	e7fe      	b.n	801c730 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c734:	699a      	ldr	r2, [r3, #24]
 801c736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c738:	18d1      	adds	r1, r2, r3
 801c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c740:	f7ff ff06 	bl	801c550 <prvInsertTimerInActiveList>
					break;
 801c744:	e015      	b.n	801c772 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c74c:	f003 0302 	and.w	r3, r3, #2
 801c750:	2b00      	cmp	r3, #0
 801c752:	d103      	bne.n	801c75c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801c754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c756:	f000 fbdb 	bl	801cf10 <vPortFree>
 801c75a:	e00a      	b.n	801c772 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c75e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c762:	f023 0301 	bic.w	r3, r3, #1
 801c766:	b2da      	uxtb	r2, r3
 801c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c76a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c76e:	e000      	b.n	801c772 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801c770:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c772:	4b08      	ldr	r3, [pc, #32]	; (801c794 <prvProcessReceivedCommands+0x1c0>)
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	1d39      	adds	r1, r7, #4
 801c778:	2200      	movs	r2, #0
 801c77a:	4618      	mov	r0, r3
 801c77c:	f7fe f862 	bl	801a844 <xQueueReceive>
 801c780:	4603      	mov	r3, r0
 801c782:	2b00      	cmp	r3, #0
 801c784:	f47f af2a 	bne.w	801c5dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801c788:	bf00      	nop
 801c78a:	bf00      	nop
 801c78c:	3730      	adds	r7, #48	; 0x30
 801c78e:	46bd      	mov	sp, r7
 801c790:	bd80      	pop	{r7, pc}
 801c792:	bf00      	nop
 801c794:	20002948 	.word	0x20002948

0801c798 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	b088      	sub	sp, #32
 801c79c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c79e:	e048      	b.n	801c832 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c7a0:	4b2d      	ldr	r3, [pc, #180]	; (801c858 <prvSwitchTimerLists+0xc0>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	68db      	ldr	r3, [r3, #12]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c7aa:	4b2b      	ldr	r3, [pc, #172]	; (801c858 <prvSwitchTimerLists+0xc0>)
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	68db      	ldr	r3, [r3, #12]
 801c7b0:	68db      	ldr	r3, [r3, #12]
 801c7b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	3304      	adds	r3, #4
 801c7b8:	4618      	mov	r0, r3
 801c7ba:	f7fd fc8b 	bl	801a0d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	6a1b      	ldr	r3, [r3, #32]
 801c7c2:	68f8      	ldr	r0, [r7, #12]
 801c7c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c7cc:	f003 0304 	and.w	r3, r3, #4
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d02e      	beq.n	801c832 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	699b      	ldr	r3, [r3, #24]
 801c7d8:	693a      	ldr	r2, [r7, #16]
 801c7da:	4413      	add	r3, r2
 801c7dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c7de:	68ba      	ldr	r2, [r7, #8]
 801c7e0:	693b      	ldr	r3, [r7, #16]
 801c7e2:	429a      	cmp	r2, r3
 801c7e4:	d90e      	bls.n	801c804 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	68ba      	ldr	r2, [r7, #8]
 801c7ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	68fa      	ldr	r2, [r7, #12]
 801c7f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c7f2:	4b19      	ldr	r3, [pc, #100]	; (801c858 <prvSwitchTimerLists+0xc0>)
 801c7f4:	681a      	ldr	r2, [r3, #0]
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	3304      	adds	r3, #4
 801c7fa:	4619      	mov	r1, r3
 801c7fc:	4610      	mov	r0, r2
 801c7fe:	f7fd fc30 	bl	801a062 <vListInsert>
 801c802:	e016      	b.n	801c832 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c804:	2300      	movs	r3, #0
 801c806:	9300      	str	r3, [sp, #0]
 801c808:	2300      	movs	r3, #0
 801c80a:	693a      	ldr	r2, [r7, #16]
 801c80c:	2100      	movs	r1, #0
 801c80e:	68f8      	ldr	r0, [r7, #12]
 801c810:	f7ff fd60 	bl	801c2d4 <xTimerGenericCommand>
 801c814:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d10a      	bne.n	801c832 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801c81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c820:	f383 8811 	msr	BASEPRI, r3
 801c824:	f3bf 8f6f 	isb	sy
 801c828:	f3bf 8f4f 	dsb	sy
 801c82c:	603b      	str	r3, [r7, #0]
}
 801c82e:	bf00      	nop
 801c830:	e7fe      	b.n	801c830 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c832:	4b09      	ldr	r3, [pc, #36]	; (801c858 <prvSwitchTimerLists+0xc0>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d1b1      	bne.n	801c7a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c83c:	4b06      	ldr	r3, [pc, #24]	; (801c858 <prvSwitchTimerLists+0xc0>)
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c842:	4b06      	ldr	r3, [pc, #24]	; (801c85c <prvSwitchTimerLists+0xc4>)
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	4a04      	ldr	r2, [pc, #16]	; (801c858 <prvSwitchTimerLists+0xc0>)
 801c848:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c84a:	4a04      	ldr	r2, [pc, #16]	; (801c85c <prvSwitchTimerLists+0xc4>)
 801c84c:	697b      	ldr	r3, [r7, #20]
 801c84e:	6013      	str	r3, [r2, #0]
}
 801c850:	bf00      	nop
 801c852:	3718      	adds	r7, #24
 801c854:	46bd      	mov	sp, r7
 801c856:	bd80      	pop	{r7, pc}
 801c858:	20002940 	.word	0x20002940
 801c85c:	20002944 	.word	0x20002944

0801c860 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c860:	b580      	push	{r7, lr}
 801c862:	b082      	sub	sp, #8
 801c864:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c866:	f000 f965 	bl	801cb34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c86a:	4b15      	ldr	r3, [pc, #84]	; (801c8c0 <prvCheckForValidListAndQueue+0x60>)
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d120      	bne.n	801c8b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c872:	4814      	ldr	r0, [pc, #80]	; (801c8c4 <prvCheckForValidListAndQueue+0x64>)
 801c874:	f7fd fba4 	bl	8019fc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c878:	4813      	ldr	r0, [pc, #76]	; (801c8c8 <prvCheckForValidListAndQueue+0x68>)
 801c87a:	f7fd fba1 	bl	8019fc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c87e:	4b13      	ldr	r3, [pc, #76]	; (801c8cc <prvCheckForValidListAndQueue+0x6c>)
 801c880:	4a10      	ldr	r2, [pc, #64]	; (801c8c4 <prvCheckForValidListAndQueue+0x64>)
 801c882:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c884:	4b12      	ldr	r3, [pc, #72]	; (801c8d0 <prvCheckForValidListAndQueue+0x70>)
 801c886:	4a10      	ldr	r2, [pc, #64]	; (801c8c8 <prvCheckForValidListAndQueue+0x68>)
 801c888:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c88a:	2300      	movs	r3, #0
 801c88c:	9300      	str	r3, [sp, #0]
 801c88e:	4b11      	ldr	r3, [pc, #68]	; (801c8d4 <prvCheckForValidListAndQueue+0x74>)
 801c890:	4a11      	ldr	r2, [pc, #68]	; (801c8d8 <prvCheckForValidListAndQueue+0x78>)
 801c892:	2110      	movs	r1, #16
 801c894:	200a      	movs	r0, #10
 801c896:	f7fd fcaf 	bl	801a1f8 <xQueueGenericCreateStatic>
 801c89a:	4603      	mov	r3, r0
 801c89c:	4a08      	ldr	r2, [pc, #32]	; (801c8c0 <prvCheckForValidListAndQueue+0x60>)
 801c89e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c8a0:	4b07      	ldr	r3, [pc, #28]	; (801c8c0 <prvCheckForValidListAndQueue+0x60>)
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d005      	beq.n	801c8b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c8a8:	4b05      	ldr	r3, [pc, #20]	; (801c8c0 <prvCheckForValidListAndQueue+0x60>)
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	490b      	ldr	r1, [pc, #44]	; (801c8dc <prvCheckForValidListAndQueue+0x7c>)
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f7fe fb5c 	bl	801af6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c8b4:	f000 f96e 	bl	801cb94 <vPortExitCritical>
}
 801c8b8:	bf00      	nop
 801c8ba:	46bd      	mov	sp, r7
 801c8bc:	bd80      	pop	{r7, pc}
 801c8be:	bf00      	nop
 801c8c0:	20002948 	.word	0x20002948
 801c8c4:	20002918 	.word	0x20002918
 801c8c8:	2000292c 	.word	0x2000292c
 801c8cc:	20002940 	.word	0x20002940
 801c8d0:	20002944 	.word	0x20002944
 801c8d4:	200029f4 	.word	0x200029f4
 801c8d8:	20002954 	.word	0x20002954
 801c8dc:	08020a80 	.word	0x08020a80

0801c8e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c8e0:	b480      	push	{r7}
 801c8e2:	b085      	sub	sp, #20
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	60f8      	str	r0, [r7, #12]
 801c8e8:	60b9      	str	r1, [r7, #8]
 801c8ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	3b04      	subs	r3, #4
 801c8f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c8f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	3b04      	subs	r3, #4
 801c8fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c900:	68bb      	ldr	r3, [r7, #8]
 801c902:	f023 0201 	bic.w	r2, r3, #1
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	3b04      	subs	r3, #4
 801c90e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c910:	4a0c      	ldr	r2, [pc, #48]	; (801c944 <pxPortInitialiseStack+0x64>)
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	3b14      	subs	r3, #20
 801c91a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c91c:	687a      	ldr	r2, [r7, #4]
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c922:	68fb      	ldr	r3, [r7, #12]
 801c924:	3b04      	subs	r3, #4
 801c926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	f06f 0202 	mvn.w	r2, #2
 801c92e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	3b20      	subs	r3, #32
 801c934:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c936:	68fb      	ldr	r3, [r7, #12]
}
 801c938:	4618      	mov	r0, r3
 801c93a:	3714      	adds	r7, #20
 801c93c:	46bd      	mov	sp, r7
 801c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c942:	4770      	bx	lr
 801c944:	0801c949 	.word	0x0801c949

0801c948 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c948:	b480      	push	{r7}
 801c94a:	b085      	sub	sp, #20
 801c94c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c94e:	2300      	movs	r3, #0
 801c950:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c952:	4b12      	ldr	r3, [pc, #72]	; (801c99c <prvTaskExitError+0x54>)
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c95a:	d00a      	beq.n	801c972 <prvTaskExitError+0x2a>
	__asm volatile
 801c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c960:	f383 8811 	msr	BASEPRI, r3
 801c964:	f3bf 8f6f 	isb	sy
 801c968:	f3bf 8f4f 	dsb	sy
 801c96c:	60fb      	str	r3, [r7, #12]
}
 801c96e:	bf00      	nop
 801c970:	e7fe      	b.n	801c970 <prvTaskExitError+0x28>
	__asm volatile
 801c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c976:	f383 8811 	msr	BASEPRI, r3
 801c97a:	f3bf 8f6f 	isb	sy
 801c97e:	f3bf 8f4f 	dsb	sy
 801c982:	60bb      	str	r3, [r7, #8]
}
 801c984:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c986:	bf00      	nop
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d0fc      	beq.n	801c988 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c98e:	bf00      	nop
 801c990:	bf00      	nop
 801c992:	3714      	adds	r7, #20
 801c994:	46bd      	mov	sp, r7
 801c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c99a:	4770      	bx	lr
 801c99c:	20000134 	.word	0x20000134

0801c9a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c9a0:	4b07      	ldr	r3, [pc, #28]	; (801c9c0 <pxCurrentTCBConst2>)
 801c9a2:	6819      	ldr	r1, [r3, #0]
 801c9a4:	6808      	ldr	r0, [r1, #0]
 801c9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9aa:	f380 8809 	msr	PSP, r0
 801c9ae:	f3bf 8f6f 	isb	sy
 801c9b2:	f04f 0000 	mov.w	r0, #0
 801c9b6:	f380 8811 	msr	BASEPRI, r0
 801c9ba:	4770      	bx	lr
 801c9bc:	f3af 8000 	nop.w

0801c9c0 <pxCurrentTCBConst2>:
 801c9c0:	20002418 	.word	0x20002418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c9c4:	bf00      	nop
 801c9c6:	bf00      	nop

0801c9c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c9c8:	4808      	ldr	r0, [pc, #32]	; (801c9ec <prvPortStartFirstTask+0x24>)
 801c9ca:	6800      	ldr	r0, [r0, #0]
 801c9cc:	6800      	ldr	r0, [r0, #0]
 801c9ce:	f380 8808 	msr	MSP, r0
 801c9d2:	f04f 0000 	mov.w	r0, #0
 801c9d6:	f380 8814 	msr	CONTROL, r0
 801c9da:	b662      	cpsie	i
 801c9dc:	b661      	cpsie	f
 801c9de:	f3bf 8f4f 	dsb	sy
 801c9e2:	f3bf 8f6f 	isb	sy
 801c9e6:	df00      	svc	0
 801c9e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c9ea:	bf00      	nop
 801c9ec:	e000ed08 	.word	0xe000ed08

0801c9f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	b086      	sub	sp, #24
 801c9f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c9f6:	4b46      	ldr	r3, [pc, #280]	; (801cb10 <xPortStartScheduler+0x120>)
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	4a46      	ldr	r2, [pc, #280]	; (801cb14 <xPortStartScheduler+0x124>)
 801c9fc:	4293      	cmp	r3, r2
 801c9fe:	d10a      	bne.n	801ca16 <xPortStartScheduler+0x26>
	__asm volatile
 801ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca04:	f383 8811 	msr	BASEPRI, r3
 801ca08:	f3bf 8f6f 	isb	sy
 801ca0c:	f3bf 8f4f 	dsb	sy
 801ca10:	613b      	str	r3, [r7, #16]
}
 801ca12:	bf00      	nop
 801ca14:	e7fe      	b.n	801ca14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801ca16:	4b3e      	ldr	r3, [pc, #248]	; (801cb10 <xPortStartScheduler+0x120>)
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	4a3f      	ldr	r2, [pc, #252]	; (801cb18 <xPortStartScheduler+0x128>)
 801ca1c:	4293      	cmp	r3, r2
 801ca1e:	d10a      	bne.n	801ca36 <xPortStartScheduler+0x46>
	__asm volatile
 801ca20:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca24:	f383 8811 	msr	BASEPRI, r3
 801ca28:	f3bf 8f6f 	isb	sy
 801ca2c:	f3bf 8f4f 	dsb	sy
 801ca30:	60fb      	str	r3, [r7, #12]
}
 801ca32:	bf00      	nop
 801ca34:	e7fe      	b.n	801ca34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801ca36:	4b39      	ldr	r3, [pc, #228]	; (801cb1c <xPortStartScheduler+0x12c>)
 801ca38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801ca3a:	697b      	ldr	r3, [r7, #20]
 801ca3c:	781b      	ldrb	r3, [r3, #0]
 801ca3e:	b2db      	uxtb	r3, r3
 801ca40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801ca42:	697b      	ldr	r3, [r7, #20]
 801ca44:	22ff      	movs	r2, #255	; 0xff
 801ca46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801ca48:	697b      	ldr	r3, [r7, #20]
 801ca4a:	781b      	ldrb	r3, [r3, #0]
 801ca4c:	b2db      	uxtb	r3, r3
 801ca4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801ca50:	78fb      	ldrb	r3, [r7, #3]
 801ca52:	b2db      	uxtb	r3, r3
 801ca54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801ca58:	b2da      	uxtb	r2, r3
 801ca5a:	4b31      	ldr	r3, [pc, #196]	; (801cb20 <xPortStartScheduler+0x130>)
 801ca5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801ca5e:	4b31      	ldr	r3, [pc, #196]	; (801cb24 <xPortStartScheduler+0x134>)
 801ca60:	2207      	movs	r2, #7
 801ca62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ca64:	e009      	b.n	801ca7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801ca66:	4b2f      	ldr	r3, [pc, #188]	; (801cb24 <xPortStartScheduler+0x134>)
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	3b01      	subs	r3, #1
 801ca6c:	4a2d      	ldr	r2, [pc, #180]	; (801cb24 <xPortStartScheduler+0x134>)
 801ca6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801ca70:	78fb      	ldrb	r3, [r7, #3]
 801ca72:	b2db      	uxtb	r3, r3
 801ca74:	005b      	lsls	r3, r3, #1
 801ca76:	b2db      	uxtb	r3, r3
 801ca78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ca7a:	78fb      	ldrb	r3, [r7, #3]
 801ca7c:	b2db      	uxtb	r3, r3
 801ca7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ca82:	2b80      	cmp	r3, #128	; 0x80
 801ca84:	d0ef      	beq.n	801ca66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801ca86:	4b27      	ldr	r3, [pc, #156]	; (801cb24 <xPortStartScheduler+0x134>)
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	f1c3 0307 	rsb	r3, r3, #7
 801ca8e:	2b04      	cmp	r3, #4
 801ca90:	d00a      	beq.n	801caa8 <xPortStartScheduler+0xb8>
	__asm volatile
 801ca92:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca96:	f383 8811 	msr	BASEPRI, r3
 801ca9a:	f3bf 8f6f 	isb	sy
 801ca9e:	f3bf 8f4f 	dsb	sy
 801caa2:	60bb      	str	r3, [r7, #8]
}
 801caa4:	bf00      	nop
 801caa6:	e7fe      	b.n	801caa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801caa8:	4b1e      	ldr	r3, [pc, #120]	; (801cb24 <xPortStartScheduler+0x134>)
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	021b      	lsls	r3, r3, #8
 801caae:	4a1d      	ldr	r2, [pc, #116]	; (801cb24 <xPortStartScheduler+0x134>)
 801cab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801cab2:	4b1c      	ldr	r3, [pc, #112]	; (801cb24 <xPortStartScheduler+0x134>)
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801caba:	4a1a      	ldr	r2, [pc, #104]	; (801cb24 <xPortStartScheduler+0x134>)
 801cabc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	b2da      	uxtb	r2, r3
 801cac2:	697b      	ldr	r3, [r7, #20]
 801cac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801cac6:	4b18      	ldr	r3, [pc, #96]	; (801cb28 <xPortStartScheduler+0x138>)
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	4a17      	ldr	r2, [pc, #92]	; (801cb28 <xPortStartScheduler+0x138>)
 801cacc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801cad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801cad2:	4b15      	ldr	r3, [pc, #84]	; (801cb28 <xPortStartScheduler+0x138>)
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	4a14      	ldr	r2, [pc, #80]	; (801cb28 <xPortStartScheduler+0x138>)
 801cad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801cadc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801cade:	f000 f8dd 	bl	801cc9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801cae2:	4b12      	ldr	r3, [pc, #72]	; (801cb2c <xPortStartScheduler+0x13c>)
 801cae4:	2200      	movs	r2, #0
 801cae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801cae8:	f000 f8fc 	bl	801cce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801caec:	4b10      	ldr	r3, [pc, #64]	; (801cb30 <xPortStartScheduler+0x140>)
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	4a0f      	ldr	r2, [pc, #60]	; (801cb30 <xPortStartScheduler+0x140>)
 801caf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801caf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801caf8:	f7ff ff66 	bl	801c9c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801cafc:	f7fe ff3e 	bl	801b97c <vTaskSwitchContext>
	prvTaskExitError();
 801cb00:	f7ff ff22 	bl	801c948 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801cb04:	2300      	movs	r3, #0
}
 801cb06:	4618      	mov	r0, r3
 801cb08:	3718      	adds	r7, #24
 801cb0a:	46bd      	mov	sp, r7
 801cb0c:	bd80      	pop	{r7, pc}
 801cb0e:	bf00      	nop
 801cb10:	e000ed00 	.word	0xe000ed00
 801cb14:	410fc271 	.word	0x410fc271
 801cb18:	410fc270 	.word	0x410fc270
 801cb1c:	e000e400 	.word	0xe000e400
 801cb20:	20002a44 	.word	0x20002a44
 801cb24:	20002a48 	.word	0x20002a48
 801cb28:	e000ed20 	.word	0xe000ed20
 801cb2c:	20000134 	.word	0x20000134
 801cb30:	e000ef34 	.word	0xe000ef34

0801cb34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801cb34:	b480      	push	{r7}
 801cb36:	b083      	sub	sp, #12
 801cb38:	af00      	add	r7, sp, #0
	__asm volatile
 801cb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb3e:	f383 8811 	msr	BASEPRI, r3
 801cb42:	f3bf 8f6f 	isb	sy
 801cb46:	f3bf 8f4f 	dsb	sy
 801cb4a:	607b      	str	r3, [r7, #4]
}
 801cb4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801cb4e:	4b0f      	ldr	r3, [pc, #60]	; (801cb8c <vPortEnterCritical+0x58>)
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	3301      	adds	r3, #1
 801cb54:	4a0d      	ldr	r2, [pc, #52]	; (801cb8c <vPortEnterCritical+0x58>)
 801cb56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801cb58:	4b0c      	ldr	r3, [pc, #48]	; (801cb8c <vPortEnterCritical+0x58>)
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	2b01      	cmp	r3, #1
 801cb5e:	d10f      	bne.n	801cb80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801cb60:	4b0b      	ldr	r3, [pc, #44]	; (801cb90 <vPortEnterCritical+0x5c>)
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	b2db      	uxtb	r3, r3
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d00a      	beq.n	801cb80 <vPortEnterCritical+0x4c>
	__asm volatile
 801cb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb6e:	f383 8811 	msr	BASEPRI, r3
 801cb72:	f3bf 8f6f 	isb	sy
 801cb76:	f3bf 8f4f 	dsb	sy
 801cb7a:	603b      	str	r3, [r7, #0]
}
 801cb7c:	bf00      	nop
 801cb7e:	e7fe      	b.n	801cb7e <vPortEnterCritical+0x4a>
	}
}
 801cb80:	bf00      	nop
 801cb82:	370c      	adds	r7, #12
 801cb84:	46bd      	mov	sp, r7
 801cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8a:	4770      	bx	lr
 801cb8c:	20000134 	.word	0x20000134
 801cb90:	e000ed04 	.word	0xe000ed04

0801cb94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801cb94:	b480      	push	{r7}
 801cb96:	b083      	sub	sp, #12
 801cb98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801cb9a:	4b12      	ldr	r3, [pc, #72]	; (801cbe4 <vPortExitCritical+0x50>)
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d10a      	bne.n	801cbb8 <vPortExitCritical+0x24>
	__asm volatile
 801cba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cba6:	f383 8811 	msr	BASEPRI, r3
 801cbaa:	f3bf 8f6f 	isb	sy
 801cbae:	f3bf 8f4f 	dsb	sy
 801cbb2:	607b      	str	r3, [r7, #4]
}
 801cbb4:	bf00      	nop
 801cbb6:	e7fe      	b.n	801cbb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801cbb8:	4b0a      	ldr	r3, [pc, #40]	; (801cbe4 <vPortExitCritical+0x50>)
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	3b01      	subs	r3, #1
 801cbbe:	4a09      	ldr	r2, [pc, #36]	; (801cbe4 <vPortExitCritical+0x50>)
 801cbc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801cbc2:	4b08      	ldr	r3, [pc, #32]	; (801cbe4 <vPortExitCritical+0x50>)
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d105      	bne.n	801cbd6 <vPortExitCritical+0x42>
 801cbca:	2300      	movs	r3, #0
 801cbcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801cbce:	683b      	ldr	r3, [r7, #0]
 801cbd0:	f383 8811 	msr	BASEPRI, r3
}
 801cbd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801cbd6:	bf00      	nop
 801cbd8:	370c      	adds	r7, #12
 801cbda:	46bd      	mov	sp, r7
 801cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbe0:	4770      	bx	lr
 801cbe2:	bf00      	nop
 801cbe4:	20000134 	.word	0x20000134
	...

0801cbf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801cbf0:	f3ef 8009 	mrs	r0, PSP
 801cbf4:	f3bf 8f6f 	isb	sy
 801cbf8:	4b15      	ldr	r3, [pc, #84]	; (801cc50 <pxCurrentTCBConst>)
 801cbfa:	681a      	ldr	r2, [r3, #0]
 801cbfc:	f01e 0f10 	tst.w	lr, #16
 801cc00:	bf08      	it	eq
 801cc02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801cc06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc0a:	6010      	str	r0, [r2, #0]
 801cc0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801cc10:	f04f 0050 	mov.w	r0, #80	; 0x50
 801cc14:	f380 8811 	msr	BASEPRI, r0
 801cc18:	f3bf 8f4f 	dsb	sy
 801cc1c:	f3bf 8f6f 	isb	sy
 801cc20:	f7fe feac 	bl	801b97c <vTaskSwitchContext>
 801cc24:	f04f 0000 	mov.w	r0, #0
 801cc28:	f380 8811 	msr	BASEPRI, r0
 801cc2c:	bc09      	pop	{r0, r3}
 801cc2e:	6819      	ldr	r1, [r3, #0]
 801cc30:	6808      	ldr	r0, [r1, #0]
 801cc32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc36:	f01e 0f10 	tst.w	lr, #16
 801cc3a:	bf08      	it	eq
 801cc3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801cc40:	f380 8809 	msr	PSP, r0
 801cc44:	f3bf 8f6f 	isb	sy
 801cc48:	4770      	bx	lr
 801cc4a:	bf00      	nop
 801cc4c:	f3af 8000 	nop.w

0801cc50 <pxCurrentTCBConst>:
 801cc50:	20002418 	.word	0x20002418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801cc54:	bf00      	nop
 801cc56:	bf00      	nop

0801cc58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	b082      	sub	sp, #8
 801cc5c:	af00      	add	r7, sp, #0
	__asm volatile
 801cc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc62:	f383 8811 	msr	BASEPRI, r3
 801cc66:	f3bf 8f6f 	isb	sy
 801cc6a:	f3bf 8f4f 	dsb	sy
 801cc6e:	607b      	str	r3, [r7, #4]
}
 801cc70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801cc72:	f7fe fdc9 	bl	801b808 <xTaskIncrementTick>
 801cc76:	4603      	mov	r3, r0
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d003      	beq.n	801cc84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801cc7c:	4b06      	ldr	r3, [pc, #24]	; (801cc98 <xPortSysTickHandler+0x40>)
 801cc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cc82:	601a      	str	r2, [r3, #0]
 801cc84:	2300      	movs	r3, #0
 801cc86:	603b      	str	r3, [r7, #0]
	__asm volatile
 801cc88:	683b      	ldr	r3, [r7, #0]
 801cc8a:	f383 8811 	msr	BASEPRI, r3
}
 801cc8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801cc90:	bf00      	nop
 801cc92:	3708      	adds	r7, #8
 801cc94:	46bd      	mov	sp, r7
 801cc96:	bd80      	pop	{r7, pc}
 801cc98:	e000ed04 	.word	0xe000ed04

0801cc9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801cc9c:	b480      	push	{r7}
 801cc9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801cca0:	4b0b      	ldr	r3, [pc, #44]	; (801ccd0 <vPortSetupTimerInterrupt+0x34>)
 801cca2:	2200      	movs	r2, #0
 801cca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801cca6:	4b0b      	ldr	r3, [pc, #44]	; (801ccd4 <vPortSetupTimerInterrupt+0x38>)
 801cca8:	2200      	movs	r2, #0
 801ccaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801ccac:	4b0a      	ldr	r3, [pc, #40]	; (801ccd8 <vPortSetupTimerInterrupt+0x3c>)
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	4a0a      	ldr	r2, [pc, #40]	; (801ccdc <vPortSetupTimerInterrupt+0x40>)
 801ccb2:	fba2 2303 	umull	r2, r3, r2, r3
 801ccb6:	099b      	lsrs	r3, r3, #6
 801ccb8:	4a09      	ldr	r2, [pc, #36]	; (801cce0 <vPortSetupTimerInterrupt+0x44>)
 801ccba:	3b01      	subs	r3, #1
 801ccbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801ccbe:	4b04      	ldr	r3, [pc, #16]	; (801ccd0 <vPortSetupTimerInterrupt+0x34>)
 801ccc0:	2207      	movs	r2, #7
 801ccc2:	601a      	str	r2, [r3, #0]
}
 801ccc4:	bf00      	nop
 801ccc6:	46bd      	mov	sp, r7
 801ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cccc:	4770      	bx	lr
 801ccce:	bf00      	nop
 801ccd0:	e000e010 	.word	0xe000e010
 801ccd4:	e000e018 	.word	0xe000e018
 801ccd8:	20000008 	.word	0x20000008
 801ccdc:	10624dd3 	.word	0x10624dd3
 801cce0:	e000e014 	.word	0xe000e014

0801cce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801cce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801ccf4 <vPortEnableVFP+0x10>
 801cce8:	6801      	ldr	r1, [r0, #0]
 801ccea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801ccee:	6001      	str	r1, [r0, #0]
 801ccf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ccf2:	bf00      	nop
 801ccf4:	e000ed88 	.word	0xe000ed88

0801ccf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801ccf8:	b480      	push	{r7}
 801ccfa:	b085      	sub	sp, #20
 801ccfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801ccfe:	f3ef 8305 	mrs	r3, IPSR
 801cd02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	2b0f      	cmp	r3, #15
 801cd08:	d914      	bls.n	801cd34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801cd0a:	4a17      	ldr	r2, [pc, #92]	; (801cd68 <vPortValidateInterruptPriority+0x70>)
 801cd0c:	68fb      	ldr	r3, [r7, #12]
 801cd0e:	4413      	add	r3, r2
 801cd10:	781b      	ldrb	r3, [r3, #0]
 801cd12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801cd14:	4b15      	ldr	r3, [pc, #84]	; (801cd6c <vPortValidateInterruptPriority+0x74>)
 801cd16:	781b      	ldrb	r3, [r3, #0]
 801cd18:	7afa      	ldrb	r2, [r7, #11]
 801cd1a:	429a      	cmp	r2, r3
 801cd1c:	d20a      	bcs.n	801cd34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cd22:	f383 8811 	msr	BASEPRI, r3
 801cd26:	f3bf 8f6f 	isb	sy
 801cd2a:	f3bf 8f4f 	dsb	sy
 801cd2e:	607b      	str	r3, [r7, #4]
}
 801cd30:	bf00      	nop
 801cd32:	e7fe      	b.n	801cd32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801cd34:	4b0e      	ldr	r3, [pc, #56]	; (801cd70 <vPortValidateInterruptPriority+0x78>)
 801cd36:	681b      	ldr	r3, [r3, #0]
 801cd38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801cd3c:	4b0d      	ldr	r3, [pc, #52]	; (801cd74 <vPortValidateInterruptPriority+0x7c>)
 801cd3e:	681b      	ldr	r3, [r3, #0]
 801cd40:	429a      	cmp	r2, r3
 801cd42:	d90a      	bls.n	801cd5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801cd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cd48:	f383 8811 	msr	BASEPRI, r3
 801cd4c:	f3bf 8f6f 	isb	sy
 801cd50:	f3bf 8f4f 	dsb	sy
 801cd54:	603b      	str	r3, [r7, #0]
}
 801cd56:	bf00      	nop
 801cd58:	e7fe      	b.n	801cd58 <vPortValidateInterruptPriority+0x60>
	}
 801cd5a:	bf00      	nop
 801cd5c:	3714      	adds	r7, #20
 801cd5e:	46bd      	mov	sp, r7
 801cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd64:	4770      	bx	lr
 801cd66:	bf00      	nop
 801cd68:	e000e3f0 	.word	0xe000e3f0
 801cd6c:	20002a44 	.word	0x20002a44
 801cd70:	e000ed0c 	.word	0xe000ed0c
 801cd74:	20002a48 	.word	0x20002a48

0801cd78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b08a      	sub	sp, #40	; 0x28
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801cd80:	2300      	movs	r3, #0
 801cd82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801cd84:	f7fe fc84 	bl	801b690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801cd88:	4b5b      	ldr	r3, [pc, #364]	; (801cef8 <pvPortMalloc+0x180>)
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d101      	bne.n	801cd94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801cd90:	f000 f920 	bl	801cfd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801cd94:	4b59      	ldr	r3, [pc, #356]	; (801cefc <pvPortMalloc+0x184>)
 801cd96:	681a      	ldr	r2, [r3, #0]
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	4013      	ands	r3, r2
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	f040 8093 	bne.w	801cec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d01d      	beq.n	801cde4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801cda8:	2208      	movs	r2, #8
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	4413      	add	r3, r2
 801cdae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	f003 0307 	and.w	r3, r3, #7
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d014      	beq.n	801cde4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	f023 0307 	bic.w	r3, r3, #7
 801cdc0:	3308      	adds	r3, #8
 801cdc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	f003 0307 	and.w	r3, r3, #7
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d00a      	beq.n	801cde4 <pvPortMalloc+0x6c>
	__asm volatile
 801cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cdd2:	f383 8811 	msr	BASEPRI, r3
 801cdd6:	f3bf 8f6f 	isb	sy
 801cdda:	f3bf 8f4f 	dsb	sy
 801cdde:	617b      	str	r3, [r7, #20]
}
 801cde0:	bf00      	nop
 801cde2:	e7fe      	b.n	801cde2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d06e      	beq.n	801cec8 <pvPortMalloc+0x150>
 801cdea:	4b45      	ldr	r3, [pc, #276]	; (801cf00 <pvPortMalloc+0x188>)
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	687a      	ldr	r2, [r7, #4]
 801cdf0:	429a      	cmp	r2, r3
 801cdf2:	d869      	bhi.n	801cec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801cdf4:	4b43      	ldr	r3, [pc, #268]	; (801cf04 <pvPortMalloc+0x18c>)
 801cdf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801cdf8:	4b42      	ldr	r3, [pc, #264]	; (801cf04 <pvPortMalloc+0x18c>)
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801cdfe:	e004      	b.n	801ce0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce0c:	685b      	ldr	r3, [r3, #4]
 801ce0e:	687a      	ldr	r2, [r7, #4]
 801ce10:	429a      	cmp	r2, r3
 801ce12:	d903      	bls.n	801ce1c <pvPortMalloc+0xa4>
 801ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d1f1      	bne.n	801ce00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801ce1c:	4b36      	ldr	r3, [pc, #216]	; (801cef8 <pvPortMalloc+0x180>)
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce22:	429a      	cmp	r2, r3
 801ce24:	d050      	beq.n	801cec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801ce26:	6a3b      	ldr	r3, [r7, #32]
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	2208      	movs	r2, #8
 801ce2c:	4413      	add	r3, r2
 801ce2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce32:	681a      	ldr	r2, [r3, #0]
 801ce34:	6a3b      	ldr	r3, [r7, #32]
 801ce36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce3a:	685a      	ldr	r2, [r3, #4]
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	1ad2      	subs	r2, r2, r3
 801ce40:	2308      	movs	r3, #8
 801ce42:	005b      	lsls	r3, r3, #1
 801ce44:	429a      	cmp	r2, r3
 801ce46:	d91f      	bls.n	801ce88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801ce48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	4413      	add	r3, r2
 801ce4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801ce50:	69bb      	ldr	r3, [r7, #24]
 801ce52:	f003 0307 	and.w	r3, r3, #7
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d00a      	beq.n	801ce70 <pvPortMalloc+0xf8>
	__asm volatile
 801ce5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ce5e:	f383 8811 	msr	BASEPRI, r3
 801ce62:	f3bf 8f6f 	isb	sy
 801ce66:	f3bf 8f4f 	dsb	sy
 801ce6a:	613b      	str	r3, [r7, #16]
}
 801ce6c:	bf00      	nop
 801ce6e:	e7fe      	b.n	801ce6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce72:	685a      	ldr	r2, [r3, #4]
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	1ad2      	subs	r2, r2, r3
 801ce78:	69bb      	ldr	r3, [r7, #24]
 801ce7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce7e:	687a      	ldr	r2, [r7, #4]
 801ce80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801ce82:	69b8      	ldr	r0, [r7, #24]
 801ce84:	f000 f908 	bl	801d098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801ce88:	4b1d      	ldr	r3, [pc, #116]	; (801cf00 <pvPortMalloc+0x188>)
 801ce8a:	681a      	ldr	r2, [r3, #0]
 801ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce8e:	685b      	ldr	r3, [r3, #4]
 801ce90:	1ad3      	subs	r3, r2, r3
 801ce92:	4a1b      	ldr	r2, [pc, #108]	; (801cf00 <pvPortMalloc+0x188>)
 801ce94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801ce96:	4b1a      	ldr	r3, [pc, #104]	; (801cf00 <pvPortMalloc+0x188>)
 801ce98:	681a      	ldr	r2, [r3, #0]
 801ce9a:	4b1b      	ldr	r3, [pc, #108]	; (801cf08 <pvPortMalloc+0x190>)
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	429a      	cmp	r2, r3
 801cea0:	d203      	bcs.n	801ceaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801cea2:	4b17      	ldr	r3, [pc, #92]	; (801cf00 <pvPortMalloc+0x188>)
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	4a18      	ldr	r2, [pc, #96]	; (801cf08 <pvPortMalloc+0x190>)
 801cea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801ceaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceac:	685a      	ldr	r2, [r3, #4]
 801ceae:	4b13      	ldr	r3, [pc, #76]	; (801cefc <pvPortMalloc+0x184>)
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	431a      	orrs	r2, r3
 801ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceba:	2200      	movs	r2, #0
 801cebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801cebe:	4b13      	ldr	r3, [pc, #76]	; (801cf0c <pvPortMalloc+0x194>)
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	3301      	adds	r3, #1
 801cec4:	4a11      	ldr	r2, [pc, #68]	; (801cf0c <pvPortMalloc+0x194>)
 801cec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801cec8:	f7fe fbf0 	bl	801b6ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801cecc:	69fb      	ldr	r3, [r7, #28]
 801cece:	f003 0307 	and.w	r3, r3, #7
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d00a      	beq.n	801ceec <pvPortMalloc+0x174>
	__asm volatile
 801ced6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ceda:	f383 8811 	msr	BASEPRI, r3
 801cede:	f3bf 8f6f 	isb	sy
 801cee2:	f3bf 8f4f 	dsb	sy
 801cee6:	60fb      	str	r3, [r7, #12]
}
 801cee8:	bf00      	nop
 801ceea:	e7fe      	b.n	801ceea <pvPortMalloc+0x172>
	return pvReturn;
 801ceec:	69fb      	ldr	r3, [r7, #28]
}
 801ceee:	4618      	mov	r0, r3
 801cef0:	3728      	adds	r7, #40	; 0x28
 801cef2:	46bd      	mov	sp, r7
 801cef4:	bd80      	pop	{r7, pc}
 801cef6:	bf00      	nop
 801cef8:	20012a54 	.word	0x20012a54
 801cefc:	20012a68 	.word	0x20012a68
 801cf00:	20012a58 	.word	0x20012a58
 801cf04:	20012a4c 	.word	0x20012a4c
 801cf08:	20012a5c 	.word	0x20012a5c
 801cf0c:	20012a60 	.word	0x20012a60

0801cf10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b086      	sub	sp, #24
 801cf14:	af00      	add	r7, sp, #0
 801cf16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d04d      	beq.n	801cfbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801cf22:	2308      	movs	r3, #8
 801cf24:	425b      	negs	r3, r3
 801cf26:	697a      	ldr	r2, [r7, #20]
 801cf28:	4413      	add	r3, r2
 801cf2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801cf2c:	697b      	ldr	r3, [r7, #20]
 801cf2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801cf30:	693b      	ldr	r3, [r7, #16]
 801cf32:	685a      	ldr	r2, [r3, #4]
 801cf34:	4b24      	ldr	r3, [pc, #144]	; (801cfc8 <vPortFree+0xb8>)
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	4013      	ands	r3, r2
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d10a      	bne.n	801cf54 <vPortFree+0x44>
	__asm volatile
 801cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cf42:	f383 8811 	msr	BASEPRI, r3
 801cf46:	f3bf 8f6f 	isb	sy
 801cf4a:	f3bf 8f4f 	dsb	sy
 801cf4e:	60fb      	str	r3, [r7, #12]
}
 801cf50:	bf00      	nop
 801cf52:	e7fe      	b.n	801cf52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801cf54:	693b      	ldr	r3, [r7, #16]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	d00a      	beq.n	801cf72 <vPortFree+0x62>
	__asm volatile
 801cf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cf60:	f383 8811 	msr	BASEPRI, r3
 801cf64:	f3bf 8f6f 	isb	sy
 801cf68:	f3bf 8f4f 	dsb	sy
 801cf6c:	60bb      	str	r3, [r7, #8]
}
 801cf6e:	bf00      	nop
 801cf70:	e7fe      	b.n	801cf70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801cf72:	693b      	ldr	r3, [r7, #16]
 801cf74:	685a      	ldr	r2, [r3, #4]
 801cf76:	4b14      	ldr	r3, [pc, #80]	; (801cfc8 <vPortFree+0xb8>)
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	4013      	ands	r3, r2
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d01e      	beq.n	801cfbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801cf80:	693b      	ldr	r3, [r7, #16]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	d11a      	bne.n	801cfbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801cf88:	693b      	ldr	r3, [r7, #16]
 801cf8a:	685a      	ldr	r2, [r3, #4]
 801cf8c:	4b0e      	ldr	r3, [pc, #56]	; (801cfc8 <vPortFree+0xb8>)
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	43db      	mvns	r3, r3
 801cf92:	401a      	ands	r2, r3
 801cf94:	693b      	ldr	r3, [r7, #16]
 801cf96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801cf98:	f7fe fb7a 	bl	801b690 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801cf9c:	693b      	ldr	r3, [r7, #16]
 801cf9e:	685a      	ldr	r2, [r3, #4]
 801cfa0:	4b0a      	ldr	r3, [pc, #40]	; (801cfcc <vPortFree+0xbc>)
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	4413      	add	r3, r2
 801cfa6:	4a09      	ldr	r2, [pc, #36]	; (801cfcc <vPortFree+0xbc>)
 801cfa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801cfaa:	6938      	ldr	r0, [r7, #16]
 801cfac:	f000 f874 	bl	801d098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801cfb0:	4b07      	ldr	r3, [pc, #28]	; (801cfd0 <vPortFree+0xc0>)
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	3301      	adds	r3, #1
 801cfb6:	4a06      	ldr	r2, [pc, #24]	; (801cfd0 <vPortFree+0xc0>)
 801cfb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801cfba:	f7fe fb77 	bl	801b6ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801cfbe:	bf00      	nop
 801cfc0:	3718      	adds	r7, #24
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	bd80      	pop	{r7, pc}
 801cfc6:	bf00      	nop
 801cfc8:	20012a68 	.word	0x20012a68
 801cfcc:	20012a58 	.word	0x20012a58
 801cfd0:	20012a64 	.word	0x20012a64

0801cfd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801cfd4:	b480      	push	{r7}
 801cfd6:	b085      	sub	sp, #20
 801cfd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801cfda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801cfde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801cfe0:	4b27      	ldr	r3, [pc, #156]	; (801d080 <prvHeapInit+0xac>)
 801cfe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	f003 0307 	and.w	r3, r3, #7
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d00c      	beq.n	801d008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	3307      	adds	r3, #7
 801cff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	f023 0307 	bic.w	r3, r3, #7
 801cffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801cffc:	68ba      	ldr	r2, [r7, #8]
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	1ad3      	subs	r3, r2, r3
 801d002:	4a1f      	ldr	r2, [pc, #124]	; (801d080 <prvHeapInit+0xac>)
 801d004:	4413      	add	r3, r2
 801d006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801d00c:	4a1d      	ldr	r2, [pc, #116]	; (801d084 <prvHeapInit+0xb0>)
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801d012:	4b1c      	ldr	r3, [pc, #112]	; (801d084 <prvHeapInit+0xb0>)
 801d014:	2200      	movs	r2, #0
 801d016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	68ba      	ldr	r2, [r7, #8]
 801d01c:	4413      	add	r3, r2
 801d01e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801d020:	2208      	movs	r2, #8
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	1a9b      	subs	r3, r3, r2
 801d026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	f023 0307 	bic.w	r3, r3, #7
 801d02e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	4a15      	ldr	r2, [pc, #84]	; (801d088 <prvHeapInit+0xb4>)
 801d034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801d036:	4b14      	ldr	r3, [pc, #80]	; (801d088 <prvHeapInit+0xb4>)
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	2200      	movs	r2, #0
 801d03c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801d03e:	4b12      	ldr	r3, [pc, #72]	; (801d088 <prvHeapInit+0xb4>)
 801d040:	681b      	ldr	r3, [r3, #0]
 801d042:	2200      	movs	r2, #0
 801d044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801d04a:	683b      	ldr	r3, [r7, #0]
 801d04c:	68fa      	ldr	r2, [r7, #12]
 801d04e:	1ad2      	subs	r2, r2, r3
 801d050:	683b      	ldr	r3, [r7, #0]
 801d052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801d054:	4b0c      	ldr	r3, [pc, #48]	; (801d088 <prvHeapInit+0xb4>)
 801d056:	681a      	ldr	r2, [r3, #0]
 801d058:	683b      	ldr	r3, [r7, #0]
 801d05a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d05c:	683b      	ldr	r3, [r7, #0]
 801d05e:	685b      	ldr	r3, [r3, #4]
 801d060:	4a0a      	ldr	r2, [pc, #40]	; (801d08c <prvHeapInit+0xb8>)
 801d062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d064:	683b      	ldr	r3, [r7, #0]
 801d066:	685b      	ldr	r3, [r3, #4]
 801d068:	4a09      	ldr	r2, [pc, #36]	; (801d090 <prvHeapInit+0xbc>)
 801d06a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801d06c:	4b09      	ldr	r3, [pc, #36]	; (801d094 <prvHeapInit+0xc0>)
 801d06e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801d072:	601a      	str	r2, [r3, #0]
}
 801d074:	bf00      	nop
 801d076:	3714      	adds	r7, #20
 801d078:	46bd      	mov	sp, r7
 801d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d07e:	4770      	bx	lr
 801d080:	20002a4c 	.word	0x20002a4c
 801d084:	20012a4c 	.word	0x20012a4c
 801d088:	20012a54 	.word	0x20012a54
 801d08c:	20012a5c 	.word	0x20012a5c
 801d090:	20012a58 	.word	0x20012a58
 801d094:	20012a68 	.word	0x20012a68

0801d098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801d098:	b480      	push	{r7}
 801d09a:	b085      	sub	sp, #20
 801d09c:	af00      	add	r7, sp, #0
 801d09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801d0a0:	4b28      	ldr	r3, [pc, #160]	; (801d144 <prvInsertBlockIntoFreeList+0xac>)
 801d0a2:	60fb      	str	r3, [r7, #12]
 801d0a4:	e002      	b.n	801d0ac <prvInsertBlockIntoFreeList+0x14>
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	60fb      	str	r3, [r7, #12]
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	687a      	ldr	r2, [r7, #4]
 801d0b2:	429a      	cmp	r2, r3
 801d0b4:	d8f7      	bhi.n	801d0a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801d0b6:	68fb      	ldr	r3, [r7, #12]
 801d0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	685b      	ldr	r3, [r3, #4]
 801d0be:	68ba      	ldr	r2, [r7, #8]
 801d0c0:	4413      	add	r3, r2
 801d0c2:	687a      	ldr	r2, [r7, #4]
 801d0c4:	429a      	cmp	r2, r3
 801d0c6:	d108      	bne.n	801d0da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	685a      	ldr	r2, [r3, #4]
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	685b      	ldr	r3, [r3, #4]
 801d0d0:	441a      	add	r2, r3
 801d0d2:	68fb      	ldr	r3, [r7, #12]
 801d0d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801d0d6:	68fb      	ldr	r3, [r7, #12]
 801d0d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	685b      	ldr	r3, [r3, #4]
 801d0e2:	68ba      	ldr	r2, [r7, #8]
 801d0e4:	441a      	add	r2, r3
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	429a      	cmp	r2, r3
 801d0ec:	d118      	bne.n	801d120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801d0ee:	68fb      	ldr	r3, [r7, #12]
 801d0f0:	681a      	ldr	r2, [r3, #0]
 801d0f2:	4b15      	ldr	r3, [pc, #84]	; (801d148 <prvInsertBlockIntoFreeList+0xb0>)
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	429a      	cmp	r2, r3
 801d0f8:	d00d      	beq.n	801d116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	685a      	ldr	r2, [r3, #4]
 801d0fe:	68fb      	ldr	r3, [r7, #12]
 801d100:	681b      	ldr	r3, [r3, #0]
 801d102:	685b      	ldr	r3, [r3, #4]
 801d104:	441a      	add	r2, r3
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	681b      	ldr	r3, [r3, #0]
 801d10e:	681a      	ldr	r2, [r3, #0]
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	601a      	str	r2, [r3, #0]
 801d114:	e008      	b.n	801d128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801d116:	4b0c      	ldr	r3, [pc, #48]	; (801d148 <prvInsertBlockIntoFreeList+0xb0>)
 801d118:	681a      	ldr	r2, [r3, #0]
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	601a      	str	r2, [r3, #0]
 801d11e:	e003      	b.n	801d128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801d120:	68fb      	ldr	r3, [r7, #12]
 801d122:	681a      	ldr	r2, [r3, #0]
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801d128:	68fa      	ldr	r2, [r7, #12]
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	429a      	cmp	r2, r3
 801d12e:	d002      	beq.n	801d136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	687a      	ldr	r2, [r7, #4]
 801d134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d136:	bf00      	nop
 801d138:	3714      	adds	r7, #20
 801d13a:	46bd      	mov	sp, r7
 801d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d140:	4770      	bx	lr
 801d142:	bf00      	nop
 801d144:	20012a4c 	.word	0x20012a4c
 801d148:	20012a54 	.word	0x20012a54

0801d14c <RS485_Init>:
#include "string.h"
#include "stm32g4xx_hal.h"

uint8_t RS485receiveFlag = 0;

void RS485_Init(RS485cfg_struct *RS485cfg){
 801d14c:	b580      	push	{r7, lr}
 801d14e:	b082      	sub	sp, #8
 801d150:	af00      	add	r7, sp, #0
 801d152:	6078      	str	r0, [r7, #4]
	HAL_RS485Ex_Init(RS485cfg->huart, UART_DE_POLARITY_HIGH, 2, 2);
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	6818      	ldr	r0, [r3, #0]
 801d158:	2302      	movs	r3, #2
 801d15a:	2202      	movs	r2, #2
 801d15c:	2100      	movs	r1, #0
 801d15e:	f7f4 ffa5 	bl	80120ac <HAL_RS485Ex_Init>
	RS485receiveFlag = 0;
 801d162:	4b09      	ldr	r3, [pc, #36]	; (801d188 <RS485_Init+0x3c>)
 801d164:	2200      	movs	r2, #0
 801d166:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(RS485cfg->huart, RS485cfg->RXbuffer, RS485cfg->RXbuffSize-1);
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	6818      	ldr	r0, [r3, #0]
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	68d9      	ldr	r1, [r3, #12]
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	8a1b      	ldrh	r3, [r3, #16]
 801d174:	3b01      	subs	r3, #1
 801d176:	b29b      	uxth	r3, r3
 801d178:	461a      	mov	r2, r3
 801d17a:	f7f5 f8d3 	bl	8012324 <HAL_UARTEx_ReceiveToIdle_IT>
}
 801d17e:	bf00      	nop
 801d180:	3708      	adds	r7, #8
 801d182:	46bd      	mov	sp, r7
 801d184:	bd80      	pop	{r7, pc}
 801d186:	bf00      	nop
 801d188:	20012a6c 	.word	0x20012a6c

0801d18c <RS485_Transmit_DMA>:

void RS485_Transmit_DMA(RS485cfg_struct *RS485cfg)
{
 801d18c:	b590      	push	{r4, r7, lr}
 801d18e:	b085      	sub	sp, #20
 801d190:	af00      	add	r7, sp, #0
 801d192:	6078      	str	r0, [r7, #4]
	uint16_t msglength = strlen(RS485cfg->TXbuffer) + 2;
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	685b      	ldr	r3, [r3, #4]
 801d198:	4618      	mov	r0, r3
 801d19a:	f7e8 fca1 	bl	8005ae0 <strlen>
 801d19e:	4603      	mov	r3, r0
 801d1a0:	b29b      	uxth	r3, r3
 801d1a2:	3302      	adds	r3, #2
 801d1a4:	81fb      	strh	r3, [r7, #14]
	if(msglength > RS485cfg->TXbuffSize) return;
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	891b      	ldrh	r3, [r3, #8]
 801d1aa:	89fa      	ldrh	r2, [r7, #14]
 801d1ac:	429a      	cmp	r2, r3
 801d1ae:	d829      	bhi.n	801d204 <RS485_Transmit_DMA+0x78>

	strcat(RS485cfg->TXbuffer, "\r\n");
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	685c      	ldr	r4, [r3, #4]
 801d1b4:	4620      	mov	r0, r4
 801d1b6:	f7e8 fc93 	bl	8005ae0 <strlen>
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	4423      	add	r3, r4
 801d1be:	4a13      	ldr	r2, [pc, #76]	; (801d20c <RS485_Transmit_DMA+0x80>)
 801d1c0:	8811      	ldrh	r1, [r2, #0]
 801d1c2:	7892      	ldrb	r2, [r2, #2]
 801d1c4:	8019      	strh	r1, [r3, #0]
 801d1c6:	709a      	strb	r2, [r3, #2]

	HAL_StatusTypeDef RS485status = HAL_UART_Transmit_DMA(RS485cfg->huart, RS485cfg->TXbuffer, msglength);
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	6818      	ldr	r0, [r3, #0]
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	685b      	ldr	r3, [r3, #4]
 801d1d0:	89fa      	ldrh	r2, [r7, #14]
 801d1d2:	4619      	mov	r1, r3
 801d1d4:	f7f2 ff18 	bl	8010008 <HAL_UART_Transmit_DMA>
 801d1d8:	4603      	mov	r3, r0
 801d1da:	737b      	strb	r3, [r7, #13]
	if (RS485status != HAL_OK) {
 801d1dc:	7b7b      	ldrb	r3, [r7, #13]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d001      	beq.n	801d1e6 <RS485_Transmit_DMA+0x5a>
	        Error_Handler();
 801d1e2:	f7eb f973 	bl	80084cc <Error_Handler>
	}

	RS485receiveFlag = 0;
 801d1e6:	4b0a      	ldr	r3, [pc, #40]	; (801d210 <RS485_Transmit_DMA+0x84>)
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(RS485cfg->huart, RS485cfg->RXbuffer, RS485cfg->RXbuffSize-1);
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	6818      	ldr	r0, [r3, #0]
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	68d9      	ldr	r1, [r3, #12]
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	8a1b      	ldrh	r3, [r3, #16]
 801d1f8:	3b01      	subs	r3, #1
 801d1fa:	b29b      	uxth	r3, r3
 801d1fc:	461a      	mov	r2, r3
 801d1fe:	f7f5 f891 	bl	8012324 <HAL_UARTEx_ReceiveToIdle_IT>

	return;
 801d202:	e000      	b.n	801d206 <RS485_Transmit_DMA+0x7a>
	if(msglength > RS485cfg->TXbuffSize) return;
 801d204:	bf00      	nop
}
 801d206:	3714      	adds	r7, #20
 801d208:	46bd      	mov	sp, r7
 801d20a:	bd90      	pop	{r4, r7, pc}
 801d20c:	08020a88 	.word	0x08020a88
 801d210:	20012a6c 	.word	0x20012a6c

0801d214 <RS485_TransmitDone>:

uint8_t RS485_TransmitDone(RS485cfg_struct *RS485cfg)
{
 801d214:	b580      	push	{r7, lr}
 801d216:	b084      	sub	sp, #16
 801d218:	af00      	add	r7, sp, #0
 801d21a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef val = HAL_UART_GetError(RS485cfg->huart);
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	4618      	mov	r0, r3
 801d222:	f7f3 fabd 	bl	80107a0 <HAL_UART_GetError>
 801d226:	4603      	mov	r3, r0
 801d228:	73fb      	strb	r3, [r7, #15]
	return (HAL_OK == val);
 801d22a:	7bfb      	ldrb	r3, [r7, #15]
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	bf0c      	ite	eq
 801d230:	2301      	moveq	r3, #1
 801d232:	2300      	movne	r3, #0
 801d234:	b2db      	uxtb	r3, r3
}
 801d236:	4618      	mov	r0, r3
 801d238:	3710      	adds	r7, #16
 801d23a:	46bd      	mov	sp, r7
 801d23c:	bd80      	pop	{r7, pc}
	...

0801d240 <RS485_IsReceived>:
	RS485receiveFlag = 0;
	HAL_UARTEx_ReceiveToIdle_IT(RS485cfg->huart, RS485cfg->RXbuffer, RS485cfg->RXbuffSize-1);
}

uint8_t RS485_IsReceived()
{
 801d240:	b480      	push	{r7}
 801d242:	af00      	add	r7, sp, #0
	return RS485receiveFlag;
 801d244:	4b03      	ldr	r3, [pc, #12]	; (801d254 <RS485_IsReceived+0x14>)
 801d246:	781b      	ldrb	r3, [r3, #0]
}
 801d248:	4618      	mov	r0, r3
 801d24a:	46bd      	mov	sp, r7
 801d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d250:	4770      	bx	lr
 801d252:	bf00      	nop
 801d254:	20012a6c 	.word	0x20012a6c

0801d258 <LED_init>:
RGB_struct actualRGB[3] = {0}; // stores data of actual RGB settings with added effects
RGB_struct transitionRGB[3] = {0}; // stores post-transition RGB data without effects
uint32_t period = 0;

void LED_init(uint32_t updatePeriod)
{
 801d258:	b580      	push	{r7, lr}
 801d25a:	b082      	sub	sp, #8
 801d25c:	af00      	add	r7, sp, #0
 801d25e:	6078      	str	r0, [r7, #4]
	period = updatePeriod;
 801d260:	4a09      	ldr	r2, [pc, #36]	; (801d288 <LED_init+0x30>)
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);	//R
 801d266:	2100      	movs	r1, #0
 801d268:	4808      	ldr	r0, [pc, #32]	; (801d28c <LED_init+0x34>)
 801d26a:	f7f1 fc4d 	bl	800eb08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);	//G
 801d26e:	210c      	movs	r1, #12
 801d270:	4807      	ldr	r0, [pc, #28]	; (801d290 <LED_init+0x38>)
 801d272:	f7f1 fc49 	bl	800eb08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	//B
 801d276:	2108      	movs	r1, #8
 801d278:	4805      	ldr	r0, [pc, #20]	; (801d290 <LED_init+0x38>)
 801d27a:	f7f1 fc45 	bl	800eb08 <HAL_TIM_PWM_Start>
}
 801d27e:	bf00      	nop
 801d280:	3708      	adds	r7, #8
 801d282:	46bd      	mov	sp, r7
 801d284:	bd80      	pop	{r7, pc}
 801d286:	bf00      	nop
 801d288:	20012b30 	.word	0x20012b30
 801d28c:	200005e4 	.word	0x200005e4
 801d290:	20000598 	.word	0x20000598
 801d294:	00000000 	.word	0x00000000

0801d298 <LED_UpdateTransition>:
	HAL_GPIO_WritePin(LED2_OUT_GPIO_Port, LED2_OUT_Pin, channel==1);
	HAL_GPIO_WritePin(LED3_OUT_GPIO_Port, LED3_OUT_Pin, channel==2);
}

void LED_UpdateTransition()
{
 801d298:	b580      	push	{r7, lr}
 801d29a:	b086      	sub	sp, #24
 801d29c:	af00      	add	r7, sp, #0
	for(uint8_t channel = 0; channel <= 2; channel++)
 801d29e:	2300      	movs	r3, #0
 801d2a0:	75fb      	strb	r3, [r7, #23]
 801d2a2:	e122      	b.n	801d4ea <LED_UpdateTransition+0x252>
	{
		float newR = 0, newG = 0, newB = 0;
 801d2a4:	f04f 0300 	mov.w	r3, #0
 801d2a8:	613b      	str	r3, [r7, #16]
 801d2aa:	f04f 0300 	mov.w	r3, #0
 801d2ae:	60fb      	str	r3, [r7, #12]
 801d2b0:	f04f 0300 	mov.w	r3, #0
 801d2b4:	60bb      	str	r3, [r7, #8]
		if(leds[channel].effect.type != EFFECT_OFF)
 801d2b6:	7dfa      	ldrb	r2, [r7, #23]
 801d2b8:	4993      	ldr	r1, [pc, #588]	; (801d508 <LED_UpdateTransition+0x270>)
 801d2ba:	4613      	mov	r3, r2
 801d2bc:	005b      	lsls	r3, r3, #1
 801d2be:	4413      	add	r3, r2
 801d2c0:	00db      	lsls	r3, r3, #3
 801d2c2:	440b      	add	r3, r1
 801d2c4:	330c      	adds	r3, #12
 801d2c6:	781b      	ldrb	r3, [r3, #0]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d060      	beq.n	801d38e <LED_UpdateTransition+0xf6>
		{
			newR = leds[channel].R >= 0.01 ? leds[channel].R : 0.0;
 801d2cc:	7dfa      	ldrb	r2, [r7, #23]
 801d2ce:	498e      	ldr	r1, [pc, #568]	; (801d508 <LED_UpdateTransition+0x270>)
 801d2d0:	4613      	mov	r3, r2
 801d2d2:	005b      	lsls	r3, r3, #1
 801d2d4:	4413      	add	r3, r2
 801d2d6:	00db      	lsls	r3, r3, #3
 801d2d8:	440b      	add	r3, r1
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	4618      	mov	r0, r3
 801d2de:	f7e8 fdbb 	bl	8005e58 <__aeabi_f2d>
 801d2e2:	a387      	add	r3, pc, #540	; (adr r3, 801d500 <LED_UpdateTransition+0x268>)
 801d2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2e8:	f7e9 f894 	bl	8006414 <__aeabi_dcmpge>
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d008      	beq.n	801d304 <LED_UpdateTransition+0x6c>
 801d2f2:	7dfa      	ldrb	r2, [r7, #23]
 801d2f4:	4984      	ldr	r1, [pc, #528]	; (801d508 <LED_UpdateTransition+0x270>)
 801d2f6:	4613      	mov	r3, r2
 801d2f8:	005b      	lsls	r3, r3, #1
 801d2fa:	4413      	add	r3, r2
 801d2fc:	00db      	lsls	r3, r3, #3
 801d2fe:	440b      	add	r3, r1
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	e001      	b.n	801d308 <LED_UpdateTransition+0x70>
 801d304:	f04f 0300 	mov.w	r3, #0
 801d308:	613b      	str	r3, [r7, #16]
			newG = leds[channel].G >= 0.01 ? leds[channel].G : 0.0;
 801d30a:	7dfa      	ldrb	r2, [r7, #23]
 801d30c:	497e      	ldr	r1, [pc, #504]	; (801d508 <LED_UpdateTransition+0x270>)
 801d30e:	4613      	mov	r3, r2
 801d310:	005b      	lsls	r3, r3, #1
 801d312:	4413      	add	r3, r2
 801d314:	00db      	lsls	r3, r3, #3
 801d316:	440b      	add	r3, r1
 801d318:	3304      	adds	r3, #4
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	4618      	mov	r0, r3
 801d31e:	f7e8 fd9b 	bl	8005e58 <__aeabi_f2d>
 801d322:	a377      	add	r3, pc, #476	; (adr r3, 801d500 <LED_UpdateTransition+0x268>)
 801d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d328:	f7e9 f874 	bl	8006414 <__aeabi_dcmpge>
 801d32c:	4603      	mov	r3, r0
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d009      	beq.n	801d346 <LED_UpdateTransition+0xae>
 801d332:	7dfa      	ldrb	r2, [r7, #23]
 801d334:	4974      	ldr	r1, [pc, #464]	; (801d508 <LED_UpdateTransition+0x270>)
 801d336:	4613      	mov	r3, r2
 801d338:	005b      	lsls	r3, r3, #1
 801d33a:	4413      	add	r3, r2
 801d33c:	00db      	lsls	r3, r3, #3
 801d33e:	440b      	add	r3, r1
 801d340:	3304      	adds	r3, #4
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	e001      	b.n	801d34a <LED_UpdateTransition+0xb2>
 801d346:	f04f 0300 	mov.w	r3, #0
 801d34a:	60fb      	str	r3, [r7, #12]
			newB = leds[channel].B >= 0.01 ? leds[channel].B : 0.0;
 801d34c:	7dfa      	ldrb	r2, [r7, #23]
 801d34e:	496e      	ldr	r1, [pc, #440]	; (801d508 <LED_UpdateTransition+0x270>)
 801d350:	4613      	mov	r3, r2
 801d352:	005b      	lsls	r3, r3, #1
 801d354:	4413      	add	r3, r2
 801d356:	00db      	lsls	r3, r3, #3
 801d358:	440b      	add	r3, r1
 801d35a:	3308      	adds	r3, #8
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	4618      	mov	r0, r3
 801d360:	f7e8 fd7a 	bl	8005e58 <__aeabi_f2d>
 801d364:	a366      	add	r3, pc, #408	; (adr r3, 801d500 <LED_UpdateTransition+0x268>)
 801d366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d36a:	f7e9 f853 	bl	8006414 <__aeabi_dcmpge>
 801d36e:	4603      	mov	r3, r0
 801d370:	2b00      	cmp	r3, #0
 801d372:	d009      	beq.n	801d388 <LED_UpdateTransition+0xf0>
 801d374:	7dfa      	ldrb	r2, [r7, #23]
 801d376:	4964      	ldr	r1, [pc, #400]	; (801d508 <LED_UpdateTransition+0x270>)
 801d378:	4613      	mov	r3, r2
 801d37a:	005b      	lsls	r3, r3, #1
 801d37c:	4413      	add	r3, r2
 801d37e:	00db      	lsls	r3, r3, #3
 801d380:	440b      	add	r3, r1
 801d382:	3308      	adds	r3, #8
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	e001      	b.n	801d38c <LED_UpdateTransition+0xf4>
 801d388:	f04f 0300 	mov.w	r3, #0
 801d38c:	60bb      	str	r3, [r7, #8]
		}

		switch (leds[channel].transition.type)
 801d38e:	7dfa      	ldrb	r2, [r7, #23]
 801d390:	495d      	ldr	r1, [pc, #372]	; (801d508 <LED_UpdateTransition+0x270>)
 801d392:	4613      	mov	r3, r2
 801d394:	005b      	lsls	r3, r3, #1
 801d396:	4413      	add	r3, r2
 801d398:	00db      	lsls	r3, r3, #3
 801d39a:	440b      	add	r3, r1
 801d39c:	3314      	adds	r3, #20
 801d39e:	781b      	ldrb	r3, [r3, #0]
 801d3a0:	2b02      	cmp	r3, #2
 801d3a2:	d01d      	beq.n	801d3e0 <LED_UpdateTransition+0x148>
		{
			default: //TRANSITION_INSTANT
				transitionRGB[channel].R = newR;
 801d3a4:	7dfa      	ldrb	r2, [r7, #23]
 801d3a6:	4959      	ldr	r1, [pc, #356]	; (801d50c <LED_UpdateTransition+0x274>)
 801d3a8:	4613      	mov	r3, r2
 801d3aa:	009b      	lsls	r3, r3, #2
 801d3ac:	4413      	add	r3, r2
 801d3ae:	009b      	lsls	r3, r3, #2
 801d3b0:	440b      	add	r3, r1
 801d3b2:	693a      	ldr	r2, [r7, #16]
 801d3b4:	601a      	str	r2, [r3, #0]
				transitionRGB[channel].G = newG;
 801d3b6:	7dfa      	ldrb	r2, [r7, #23]
 801d3b8:	4954      	ldr	r1, [pc, #336]	; (801d50c <LED_UpdateTransition+0x274>)
 801d3ba:	4613      	mov	r3, r2
 801d3bc:	009b      	lsls	r3, r3, #2
 801d3be:	4413      	add	r3, r2
 801d3c0:	009b      	lsls	r3, r3, #2
 801d3c2:	440b      	add	r3, r1
 801d3c4:	3304      	adds	r3, #4
 801d3c6:	68fa      	ldr	r2, [r7, #12]
 801d3c8:	601a      	str	r2, [r3, #0]
				transitionRGB[channel].B = newB;
 801d3ca:	7dfa      	ldrb	r2, [r7, #23]
 801d3cc:	494f      	ldr	r1, [pc, #316]	; (801d50c <LED_UpdateTransition+0x274>)
 801d3ce:	4613      	mov	r3, r2
 801d3d0:	009b      	lsls	r3, r3, #2
 801d3d2:	4413      	add	r3, r2
 801d3d4:	009b      	lsls	r3, r3, #2
 801d3d6:	440b      	add	r3, r1
 801d3d8:	3308      	adds	r3, #8
 801d3da:	68ba      	ldr	r2, [r7, #8]
 801d3dc:	601a      	str	r2, [r3, #0]
			break;
 801d3de:	e081      	b.n	801d4e4 <LED_UpdateTransition+0x24c>

			case TRANSITION_FADE:
				float val = period/(float)(leds[channel].transition.time);
 801d3e0:	4b4b      	ldr	r3, [pc, #300]	; (801d510 <LED_UpdateTransition+0x278>)
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	ee07 3a90 	vmov	s15, r3
 801d3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d3ec:	7dfa      	ldrb	r2, [r7, #23]
 801d3ee:	4946      	ldr	r1, [pc, #280]	; (801d508 <LED_UpdateTransition+0x270>)
 801d3f0:	4613      	mov	r3, r2
 801d3f2:	005b      	lsls	r3, r3, #1
 801d3f4:	4413      	add	r3, r2
 801d3f6:	00db      	lsls	r3, r3, #3
 801d3f8:	440b      	add	r3, r1
 801d3fa:	3316      	adds	r3, #22
 801d3fc:	881b      	ldrh	r3, [r3, #0]
 801d3fe:	ee07 3a90 	vmov	s15, r3
 801d402:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d40a:	edc7 7a01 	vstr	s15, [r7, #4]
				transitionRGB[channel].R = (1 - val) * transitionRGB[channel].R + val * newR;
 801d40e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d412:	edd7 7a01 	vldr	s15, [r7, #4]
 801d416:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d41a:	7dfa      	ldrb	r2, [r7, #23]
 801d41c:	493b      	ldr	r1, [pc, #236]	; (801d50c <LED_UpdateTransition+0x274>)
 801d41e:	4613      	mov	r3, r2
 801d420:	009b      	lsls	r3, r3, #2
 801d422:	4413      	add	r3, r2
 801d424:	009b      	lsls	r3, r3, #2
 801d426:	440b      	add	r3, r1
 801d428:	edd3 7a00 	vldr	s15, [r3]
 801d42c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d430:	edd7 6a01 	vldr	s13, [r7, #4]
 801d434:	edd7 7a04 	vldr	s15, [r7, #16]
 801d438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d43c:	7dfa      	ldrb	r2, [r7, #23]
 801d43e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d442:	4932      	ldr	r1, [pc, #200]	; (801d50c <LED_UpdateTransition+0x274>)
 801d444:	4613      	mov	r3, r2
 801d446:	009b      	lsls	r3, r3, #2
 801d448:	4413      	add	r3, r2
 801d44a:	009b      	lsls	r3, r3, #2
 801d44c:	440b      	add	r3, r1
 801d44e:	edc3 7a00 	vstr	s15, [r3]
				transitionRGB[channel].G = (1 - val) * transitionRGB[channel].G + val * newG;
 801d452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d456:	edd7 7a01 	vldr	s15, [r7, #4]
 801d45a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d45e:	7dfa      	ldrb	r2, [r7, #23]
 801d460:	492a      	ldr	r1, [pc, #168]	; (801d50c <LED_UpdateTransition+0x274>)
 801d462:	4613      	mov	r3, r2
 801d464:	009b      	lsls	r3, r3, #2
 801d466:	4413      	add	r3, r2
 801d468:	009b      	lsls	r3, r3, #2
 801d46a:	440b      	add	r3, r1
 801d46c:	3304      	adds	r3, #4
 801d46e:	edd3 7a00 	vldr	s15, [r3]
 801d472:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d476:	edd7 6a01 	vldr	s13, [r7, #4]
 801d47a:	edd7 7a03 	vldr	s15, [r7, #12]
 801d47e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d482:	7dfa      	ldrb	r2, [r7, #23]
 801d484:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d488:	4920      	ldr	r1, [pc, #128]	; (801d50c <LED_UpdateTransition+0x274>)
 801d48a:	4613      	mov	r3, r2
 801d48c:	009b      	lsls	r3, r3, #2
 801d48e:	4413      	add	r3, r2
 801d490:	009b      	lsls	r3, r3, #2
 801d492:	440b      	add	r3, r1
 801d494:	3304      	adds	r3, #4
 801d496:	edc3 7a00 	vstr	s15, [r3]
				transitionRGB[channel].B = (1 - val) * transitionRGB[channel].B + val * newB;
 801d49a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d49e:	edd7 7a01 	vldr	s15, [r7, #4]
 801d4a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d4a6:	7dfa      	ldrb	r2, [r7, #23]
 801d4a8:	4918      	ldr	r1, [pc, #96]	; (801d50c <LED_UpdateTransition+0x274>)
 801d4aa:	4613      	mov	r3, r2
 801d4ac:	009b      	lsls	r3, r3, #2
 801d4ae:	4413      	add	r3, r2
 801d4b0:	009b      	lsls	r3, r3, #2
 801d4b2:	440b      	add	r3, r1
 801d4b4:	3308      	adds	r3, #8
 801d4b6:	edd3 7a00 	vldr	s15, [r3]
 801d4ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d4be:	edd7 6a01 	vldr	s13, [r7, #4]
 801d4c2:	edd7 7a02 	vldr	s15, [r7, #8]
 801d4c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d4ca:	7dfa      	ldrb	r2, [r7, #23]
 801d4cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d4d0:	490e      	ldr	r1, [pc, #56]	; (801d50c <LED_UpdateTransition+0x274>)
 801d4d2:	4613      	mov	r3, r2
 801d4d4:	009b      	lsls	r3, r3, #2
 801d4d6:	4413      	add	r3, r2
 801d4d8:	009b      	lsls	r3, r3, #2
 801d4da:	440b      	add	r3, r1
 801d4dc:	3308      	adds	r3, #8
 801d4de:	edc3 7a00 	vstr	s15, [r3]
			break;
 801d4e2:	bf00      	nop
	for(uint8_t channel = 0; channel <= 2; channel++)
 801d4e4:	7dfb      	ldrb	r3, [r7, #23]
 801d4e6:	3301      	adds	r3, #1
 801d4e8:	75fb      	strb	r3, [r7, #23]
 801d4ea:	7dfb      	ldrb	r3, [r7, #23]
 801d4ec:	2b02      	cmp	r3, #2
 801d4ee:	f67f aed9 	bls.w	801d2a4 <LED_UpdateTransition+0xc>
		}
	}
}
 801d4f2:	bf00      	nop
 801d4f4:	bf00      	nop
 801d4f6:	3718      	adds	r7, #24
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	bd80      	pop	{r7, pc}
 801d4fc:	f3af 8000 	nop.w
 801d500:	47ae147b 	.word	0x47ae147b
 801d504:	3f847ae1 	.word	0x3f847ae1
 801d508:	20012a70 	.word	0x20012a70
 801d50c:	20012af4 	.word	0x20012af4
 801d510:	20012b30 	.word	0x20012b30
 801d514:	00000000 	.word	0x00000000

0801d518 <LED_UpdateEffect>:

void LED_UpdateEffect()
{
 801d518:	b5b0      	push	{r4, r5, r7, lr}
 801d51a:	b082      	sub	sp, #8
 801d51c:	af00      	add	r7, sp, #0
	for(uint8_t channel = 0; channel <= 2; channel++)
 801d51e:	2300      	movs	r3, #0
 801d520:	71fb      	strb	r3, [r7, #7]
 801d522:	e337      	b.n	801db94 <LED_UpdateEffect+0x67c>
	{
		switch (leds[channel].effect.type)
 801d524:	79fa      	ldrb	r2, [r7, #7]
 801d526:	49a9      	ldr	r1, [pc, #676]	; (801d7cc <LED_UpdateEffect+0x2b4>)
 801d528:	4613      	mov	r3, r2
 801d52a:	005b      	lsls	r3, r3, #1
 801d52c:	4413      	add	r3, r2
 801d52e:	00db      	lsls	r3, r3, #3
 801d530:	440b      	add	r3, r1
 801d532:	330c      	adds	r3, #12
 801d534:	781b      	ldrb	r3, [r3, #0]
 801d536:	3b02      	subs	r3, #2
 801d538:	2b03      	cmp	r3, #3
 801d53a:	d80b      	bhi.n	801d554 <LED_UpdateEffect+0x3c>
 801d53c:	a201      	add	r2, pc, #4	; (adr r2, 801d544 <LED_UpdateEffect+0x2c>)
 801d53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d542:	bf00      	nop
 801d544:	0801d5bf 	.word	0x0801d5bf
 801d548:	0801d6a1 	.word	0x0801d6a1
 801d54c:	0801d7d9 	.word	0x0801d7d9
 801d550:	0801d8ed 	.word	0x0801d8ed
		{
			default: //OFF
			case EFFECT_ON:
				actualRGB[channel].R = transitionRGB[channel].R;
 801d554:	79f9      	ldrb	r1, [r7, #7]
 801d556:	79fa      	ldrb	r2, [r7, #7]
 801d558:	489d      	ldr	r0, [pc, #628]	; (801d7d0 <LED_UpdateEffect+0x2b8>)
 801d55a:	460b      	mov	r3, r1
 801d55c:	009b      	lsls	r3, r3, #2
 801d55e:	440b      	add	r3, r1
 801d560:	009b      	lsls	r3, r3, #2
 801d562:	4403      	add	r3, r0
 801d564:	6819      	ldr	r1, [r3, #0]
 801d566:	489b      	ldr	r0, [pc, #620]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d568:	4613      	mov	r3, r2
 801d56a:	009b      	lsls	r3, r3, #2
 801d56c:	4413      	add	r3, r2
 801d56e:	009b      	lsls	r3, r3, #2
 801d570:	4403      	add	r3, r0
 801d572:	6019      	str	r1, [r3, #0]
				actualRGB[channel].G = transitionRGB[channel].G;
 801d574:	79f9      	ldrb	r1, [r7, #7]
 801d576:	79fa      	ldrb	r2, [r7, #7]
 801d578:	4895      	ldr	r0, [pc, #596]	; (801d7d0 <LED_UpdateEffect+0x2b8>)
 801d57a:	460b      	mov	r3, r1
 801d57c:	009b      	lsls	r3, r3, #2
 801d57e:	440b      	add	r3, r1
 801d580:	009b      	lsls	r3, r3, #2
 801d582:	4403      	add	r3, r0
 801d584:	3304      	adds	r3, #4
 801d586:	6819      	ldr	r1, [r3, #0]
 801d588:	4892      	ldr	r0, [pc, #584]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d58a:	4613      	mov	r3, r2
 801d58c:	009b      	lsls	r3, r3, #2
 801d58e:	4413      	add	r3, r2
 801d590:	009b      	lsls	r3, r3, #2
 801d592:	4403      	add	r3, r0
 801d594:	3304      	adds	r3, #4
 801d596:	6019      	str	r1, [r3, #0]
				actualRGB[channel].B = transitionRGB[channel].B;
 801d598:	79f9      	ldrb	r1, [r7, #7]
 801d59a:	79fa      	ldrb	r2, [r7, #7]
 801d59c:	488c      	ldr	r0, [pc, #560]	; (801d7d0 <LED_UpdateEffect+0x2b8>)
 801d59e:	460b      	mov	r3, r1
 801d5a0:	009b      	lsls	r3, r3, #2
 801d5a2:	440b      	add	r3, r1
 801d5a4:	009b      	lsls	r3, r3, #2
 801d5a6:	4403      	add	r3, r0
 801d5a8:	3308      	adds	r3, #8
 801d5aa:	6819      	ldr	r1, [r3, #0]
 801d5ac:	4889      	ldr	r0, [pc, #548]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d5ae:	4613      	mov	r3, r2
 801d5b0:	009b      	lsls	r3, r3, #2
 801d5b2:	4413      	add	r3, r2
 801d5b4:	009b      	lsls	r3, r3, #2
 801d5b6:	4403      	add	r3, r0
 801d5b8:	3308      	adds	r3, #8
 801d5ba:	6019      	str	r1, [r3, #0]
			break;
 801d5bc:	e2a0      	b.n	801db00 <LED_UpdateEffect+0x5e8>

			case EFFECT_BLINK:
				actualRGB[channel].R = actualRGB[channel].phase > 0.5 ? transitionRGB[channel].R : 0;
 801d5be:	79fa      	ldrb	r2, [r7, #7]
 801d5c0:	4984      	ldr	r1, [pc, #528]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d5c2:	4613      	mov	r3, r2
 801d5c4:	009b      	lsls	r3, r3, #2
 801d5c6:	4413      	add	r3, r2
 801d5c8:	009b      	lsls	r3, r3, #2
 801d5ca:	440b      	add	r3, r1
 801d5cc:	330c      	adds	r3, #12
 801d5ce:	edd3 7a00 	vldr	s15, [r3]
 801d5d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d5d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5de:	dd08      	ble.n	801d5f2 <LED_UpdateEffect+0xda>
 801d5e0:	79fa      	ldrb	r2, [r7, #7]
 801d5e2:	497b      	ldr	r1, [pc, #492]	; (801d7d0 <LED_UpdateEffect+0x2b8>)
 801d5e4:	4613      	mov	r3, r2
 801d5e6:	009b      	lsls	r3, r3, #2
 801d5e8:	4413      	add	r3, r2
 801d5ea:	009b      	lsls	r3, r3, #2
 801d5ec:	440b      	add	r3, r1
 801d5ee:	681a      	ldr	r2, [r3, #0]
 801d5f0:	e001      	b.n	801d5f6 <LED_UpdateEffect+0xde>
 801d5f2:	f04f 0200 	mov.w	r2, #0
 801d5f6:	79f9      	ldrb	r1, [r7, #7]
 801d5f8:	4876      	ldr	r0, [pc, #472]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d5fa:	460b      	mov	r3, r1
 801d5fc:	009b      	lsls	r3, r3, #2
 801d5fe:	440b      	add	r3, r1
 801d600:	009b      	lsls	r3, r3, #2
 801d602:	4403      	add	r3, r0
 801d604:	601a      	str	r2, [r3, #0]
				actualRGB[channel].G = actualRGB[channel].phase > 0.5 ? transitionRGB[channel].G : 0;
 801d606:	79fa      	ldrb	r2, [r7, #7]
 801d608:	4972      	ldr	r1, [pc, #456]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d60a:	4613      	mov	r3, r2
 801d60c:	009b      	lsls	r3, r3, #2
 801d60e:	4413      	add	r3, r2
 801d610:	009b      	lsls	r3, r3, #2
 801d612:	440b      	add	r3, r1
 801d614:	330c      	adds	r3, #12
 801d616:	edd3 7a00 	vldr	s15, [r3]
 801d61a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d61e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d626:	dd09      	ble.n	801d63c <LED_UpdateEffect+0x124>
 801d628:	79fa      	ldrb	r2, [r7, #7]
 801d62a:	4969      	ldr	r1, [pc, #420]	; (801d7d0 <LED_UpdateEffect+0x2b8>)
 801d62c:	4613      	mov	r3, r2
 801d62e:	009b      	lsls	r3, r3, #2
 801d630:	4413      	add	r3, r2
 801d632:	009b      	lsls	r3, r3, #2
 801d634:	440b      	add	r3, r1
 801d636:	3304      	adds	r3, #4
 801d638:	681a      	ldr	r2, [r3, #0]
 801d63a:	e001      	b.n	801d640 <LED_UpdateEffect+0x128>
 801d63c:	f04f 0200 	mov.w	r2, #0
 801d640:	79f9      	ldrb	r1, [r7, #7]
 801d642:	4864      	ldr	r0, [pc, #400]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d644:	460b      	mov	r3, r1
 801d646:	009b      	lsls	r3, r3, #2
 801d648:	440b      	add	r3, r1
 801d64a:	009b      	lsls	r3, r3, #2
 801d64c:	4403      	add	r3, r0
 801d64e:	3304      	adds	r3, #4
 801d650:	601a      	str	r2, [r3, #0]
				actualRGB[channel].B = actualRGB[channel].phase > 0.5 ? transitionRGB[channel].B : 0;
 801d652:	79fa      	ldrb	r2, [r7, #7]
 801d654:	495f      	ldr	r1, [pc, #380]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d656:	4613      	mov	r3, r2
 801d658:	009b      	lsls	r3, r3, #2
 801d65a:	4413      	add	r3, r2
 801d65c:	009b      	lsls	r3, r3, #2
 801d65e:	440b      	add	r3, r1
 801d660:	330c      	adds	r3, #12
 801d662:	edd3 7a00 	vldr	s15, [r3]
 801d666:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d66a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801d66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d672:	dd09      	ble.n	801d688 <LED_UpdateEffect+0x170>
 801d674:	79fa      	ldrb	r2, [r7, #7]
 801d676:	4956      	ldr	r1, [pc, #344]	; (801d7d0 <LED_UpdateEffect+0x2b8>)
 801d678:	4613      	mov	r3, r2
 801d67a:	009b      	lsls	r3, r3, #2
 801d67c:	4413      	add	r3, r2
 801d67e:	009b      	lsls	r3, r3, #2
 801d680:	440b      	add	r3, r1
 801d682:	3308      	adds	r3, #8
 801d684:	681a      	ldr	r2, [r3, #0]
 801d686:	e001      	b.n	801d68c <LED_UpdateEffect+0x174>
 801d688:	f04f 0200 	mov.w	r2, #0
 801d68c:	79f9      	ldrb	r1, [r7, #7]
 801d68e:	4851      	ldr	r0, [pc, #324]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d690:	460b      	mov	r3, r1
 801d692:	009b      	lsls	r3, r3, #2
 801d694:	440b      	add	r3, r1
 801d696:	009b      	lsls	r3, r3, #2
 801d698:	4403      	add	r3, r0
 801d69a:	3308      	adds	r3, #8
 801d69c:	601a      	str	r2, [r3, #0]
			break;
 801d69e:	e22f      	b.n	801db00 <LED_UpdateEffect+0x5e8>

			case EFFECT_PULSE:
				actualRGB[channel].R = actualRGB[channel].phase > 1-leds[channel].effect.dutycycle ? transitionRGB[channel].R : 0;
 801d6a0:	79fa      	ldrb	r2, [r7, #7]
 801d6a2:	494c      	ldr	r1, [pc, #304]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d6a4:	4613      	mov	r3, r2
 801d6a6:	009b      	lsls	r3, r3, #2
 801d6a8:	4413      	add	r3, r2
 801d6aa:	009b      	lsls	r3, r3, #2
 801d6ac:	440b      	add	r3, r1
 801d6ae:	330c      	adds	r3, #12
 801d6b0:	ed93 7a00 	vldr	s14, [r3]
 801d6b4:	79fa      	ldrb	r2, [r7, #7]
 801d6b6:	4945      	ldr	r1, [pc, #276]	; (801d7cc <LED_UpdateEffect+0x2b4>)
 801d6b8:	4613      	mov	r3, r2
 801d6ba:	005b      	lsls	r3, r3, #1
 801d6bc:	4413      	add	r3, r2
 801d6be:	00db      	lsls	r3, r3, #3
 801d6c0:	440b      	add	r3, r1
 801d6c2:	3310      	adds	r3, #16
 801d6c4:	edd3 7a00 	vldr	s15, [r3]
 801d6c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d6cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801d6d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6d8:	dd08      	ble.n	801d6ec <LED_UpdateEffect+0x1d4>
 801d6da:	79fa      	ldrb	r2, [r7, #7]
 801d6dc:	493c      	ldr	r1, [pc, #240]	; (801d7d0 <LED_UpdateEffect+0x2b8>)
 801d6de:	4613      	mov	r3, r2
 801d6e0:	009b      	lsls	r3, r3, #2
 801d6e2:	4413      	add	r3, r2
 801d6e4:	009b      	lsls	r3, r3, #2
 801d6e6:	440b      	add	r3, r1
 801d6e8:	681a      	ldr	r2, [r3, #0]
 801d6ea:	e001      	b.n	801d6f0 <LED_UpdateEffect+0x1d8>
 801d6ec:	f04f 0200 	mov.w	r2, #0
 801d6f0:	79f9      	ldrb	r1, [r7, #7]
 801d6f2:	4838      	ldr	r0, [pc, #224]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d6f4:	460b      	mov	r3, r1
 801d6f6:	009b      	lsls	r3, r3, #2
 801d6f8:	440b      	add	r3, r1
 801d6fa:	009b      	lsls	r3, r3, #2
 801d6fc:	4403      	add	r3, r0
 801d6fe:	601a      	str	r2, [r3, #0]
				actualRGB[channel].G = actualRGB[channel].phase > 1-leds[channel].effect.dutycycle ? transitionRGB[channel].G : 0;
 801d700:	79fa      	ldrb	r2, [r7, #7]
 801d702:	4934      	ldr	r1, [pc, #208]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d704:	4613      	mov	r3, r2
 801d706:	009b      	lsls	r3, r3, #2
 801d708:	4413      	add	r3, r2
 801d70a:	009b      	lsls	r3, r3, #2
 801d70c:	440b      	add	r3, r1
 801d70e:	330c      	adds	r3, #12
 801d710:	ed93 7a00 	vldr	s14, [r3]
 801d714:	79fa      	ldrb	r2, [r7, #7]
 801d716:	492d      	ldr	r1, [pc, #180]	; (801d7cc <LED_UpdateEffect+0x2b4>)
 801d718:	4613      	mov	r3, r2
 801d71a:	005b      	lsls	r3, r3, #1
 801d71c:	4413      	add	r3, r2
 801d71e:	00db      	lsls	r3, r3, #3
 801d720:	440b      	add	r3, r1
 801d722:	3310      	adds	r3, #16
 801d724:	edd3 7a00 	vldr	s15, [r3]
 801d728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d72c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801d730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d738:	dd09      	ble.n	801d74e <LED_UpdateEffect+0x236>
 801d73a:	79fa      	ldrb	r2, [r7, #7]
 801d73c:	4924      	ldr	r1, [pc, #144]	; (801d7d0 <LED_UpdateEffect+0x2b8>)
 801d73e:	4613      	mov	r3, r2
 801d740:	009b      	lsls	r3, r3, #2
 801d742:	4413      	add	r3, r2
 801d744:	009b      	lsls	r3, r3, #2
 801d746:	440b      	add	r3, r1
 801d748:	3304      	adds	r3, #4
 801d74a:	681a      	ldr	r2, [r3, #0]
 801d74c:	e001      	b.n	801d752 <LED_UpdateEffect+0x23a>
 801d74e:	f04f 0200 	mov.w	r2, #0
 801d752:	79f9      	ldrb	r1, [r7, #7]
 801d754:	481f      	ldr	r0, [pc, #124]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d756:	460b      	mov	r3, r1
 801d758:	009b      	lsls	r3, r3, #2
 801d75a:	440b      	add	r3, r1
 801d75c:	009b      	lsls	r3, r3, #2
 801d75e:	4403      	add	r3, r0
 801d760:	3304      	adds	r3, #4
 801d762:	601a      	str	r2, [r3, #0]
				actualRGB[channel].B = actualRGB[channel].phase > 1-leds[channel].effect.dutycycle ? transitionRGB[channel].B : 0;
 801d764:	79fa      	ldrb	r2, [r7, #7]
 801d766:	491b      	ldr	r1, [pc, #108]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d768:	4613      	mov	r3, r2
 801d76a:	009b      	lsls	r3, r3, #2
 801d76c:	4413      	add	r3, r2
 801d76e:	009b      	lsls	r3, r3, #2
 801d770:	440b      	add	r3, r1
 801d772:	330c      	adds	r3, #12
 801d774:	ed93 7a00 	vldr	s14, [r3]
 801d778:	79fa      	ldrb	r2, [r7, #7]
 801d77a:	4914      	ldr	r1, [pc, #80]	; (801d7cc <LED_UpdateEffect+0x2b4>)
 801d77c:	4613      	mov	r3, r2
 801d77e:	005b      	lsls	r3, r3, #1
 801d780:	4413      	add	r3, r2
 801d782:	00db      	lsls	r3, r3, #3
 801d784:	440b      	add	r3, r1
 801d786:	3310      	adds	r3, #16
 801d788:	edd3 7a00 	vldr	s15, [r3]
 801d78c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d790:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801d794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d79c:	dd09      	ble.n	801d7b2 <LED_UpdateEffect+0x29a>
 801d79e:	79fa      	ldrb	r2, [r7, #7]
 801d7a0:	490b      	ldr	r1, [pc, #44]	; (801d7d0 <LED_UpdateEffect+0x2b8>)
 801d7a2:	4613      	mov	r3, r2
 801d7a4:	009b      	lsls	r3, r3, #2
 801d7a6:	4413      	add	r3, r2
 801d7a8:	009b      	lsls	r3, r3, #2
 801d7aa:	440b      	add	r3, r1
 801d7ac:	3308      	adds	r3, #8
 801d7ae:	681a      	ldr	r2, [r3, #0]
 801d7b0:	e001      	b.n	801d7b6 <LED_UpdateEffect+0x29e>
 801d7b2:	f04f 0200 	mov.w	r2, #0
 801d7b6:	79f9      	ldrb	r1, [r7, #7]
 801d7b8:	4806      	ldr	r0, [pc, #24]	; (801d7d4 <LED_UpdateEffect+0x2bc>)
 801d7ba:	460b      	mov	r3, r1
 801d7bc:	009b      	lsls	r3, r3, #2
 801d7be:	440b      	add	r3, r1
 801d7c0:	009b      	lsls	r3, r3, #2
 801d7c2:	4403      	add	r3, r0
 801d7c4:	3308      	adds	r3, #8
 801d7c6:	601a      	str	r2, [r3, #0]
			break;
 801d7c8:	e19a      	b.n	801db00 <LED_UpdateEffect+0x5e8>
 801d7ca:	bf00      	nop
 801d7cc:	20012a70 	.word	0x20012a70
 801d7d0:	20012af4 	.word	0x20012af4
 801d7d4:	20012ab8 	.word	0x20012ab8

			case EFFECT_BREATHE:
				float val = 0.5 + 0.5 * cosf(6.28 * actualRGB[channel].phase);
 801d7d8:	79fa      	ldrb	r2, [r7, #7]
 801d7da:	4941      	ldr	r1, [pc, #260]	; (801d8e0 <LED_UpdateEffect+0x3c8>)
 801d7dc:	4613      	mov	r3, r2
 801d7de:	009b      	lsls	r3, r3, #2
 801d7e0:	4413      	add	r3, r2
 801d7e2:	009b      	lsls	r3, r3, #2
 801d7e4:	440b      	add	r3, r1
 801d7e6:	330c      	adds	r3, #12
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	4618      	mov	r0, r3
 801d7ec:	f7e8 fb34 	bl	8005e58 <__aeabi_f2d>
 801d7f0:	a339      	add	r3, pc, #228	; (adr r3, 801d8d8 <LED_UpdateEffect+0x3c0>)
 801d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7f6:	f7e8 fb87 	bl	8005f08 <__aeabi_dmul>
 801d7fa:	4602      	mov	r2, r0
 801d7fc:	460b      	mov	r3, r1
 801d7fe:	4610      	mov	r0, r2
 801d800:	4619      	mov	r1, r3
 801d802:	f7e8 fe3b 	bl	800647c <__aeabi_d2f>
 801d806:	4603      	mov	r3, r0
 801d808:	ee00 3a10 	vmov	s0, r3
 801d80c:	f002 fb7a 	bl	801ff04 <cosf>
 801d810:	ee10 3a10 	vmov	r3, s0
 801d814:	4618      	mov	r0, r3
 801d816:	f7e8 fb1f 	bl	8005e58 <__aeabi_f2d>
 801d81a:	f04f 0200 	mov.w	r2, #0
 801d81e:	4b31      	ldr	r3, [pc, #196]	; (801d8e4 <LED_UpdateEffect+0x3cc>)
 801d820:	f7e8 fb72 	bl	8005f08 <__aeabi_dmul>
 801d824:	4602      	mov	r2, r0
 801d826:	460b      	mov	r3, r1
 801d828:	4610      	mov	r0, r2
 801d82a:	4619      	mov	r1, r3
 801d82c:	f04f 0200 	mov.w	r2, #0
 801d830:	4b2c      	ldr	r3, [pc, #176]	; (801d8e4 <LED_UpdateEffect+0x3cc>)
 801d832:	f7e8 f9b3 	bl	8005b9c <__adddf3>
 801d836:	4602      	mov	r2, r0
 801d838:	460b      	mov	r3, r1
 801d83a:	4610      	mov	r0, r2
 801d83c:	4619      	mov	r1, r3
 801d83e:	f7e8 fe1d 	bl	800647c <__aeabi_d2f>
 801d842:	4603      	mov	r3, r0
 801d844:	603b      	str	r3, [r7, #0]
				actualRGB[channel].R = transitionRGB[channel].R * val;
 801d846:	79fa      	ldrb	r2, [r7, #7]
 801d848:	4927      	ldr	r1, [pc, #156]	; (801d8e8 <LED_UpdateEffect+0x3d0>)
 801d84a:	4613      	mov	r3, r2
 801d84c:	009b      	lsls	r3, r3, #2
 801d84e:	4413      	add	r3, r2
 801d850:	009b      	lsls	r3, r3, #2
 801d852:	440b      	add	r3, r1
 801d854:	ed93 7a00 	vldr	s14, [r3]
 801d858:	79fa      	ldrb	r2, [r7, #7]
 801d85a:	edd7 7a00 	vldr	s15, [r7]
 801d85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d862:	491f      	ldr	r1, [pc, #124]	; (801d8e0 <LED_UpdateEffect+0x3c8>)
 801d864:	4613      	mov	r3, r2
 801d866:	009b      	lsls	r3, r3, #2
 801d868:	4413      	add	r3, r2
 801d86a:	009b      	lsls	r3, r3, #2
 801d86c:	440b      	add	r3, r1
 801d86e:	edc3 7a00 	vstr	s15, [r3]
				actualRGB[channel].G = transitionRGB[channel].G * val;
 801d872:	79fa      	ldrb	r2, [r7, #7]
 801d874:	491c      	ldr	r1, [pc, #112]	; (801d8e8 <LED_UpdateEffect+0x3d0>)
 801d876:	4613      	mov	r3, r2
 801d878:	009b      	lsls	r3, r3, #2
 801d87a:	4413      	add	r3, r2
 801d87c:	009b      	lsls	r3, r3, #2
 801d87e:	440b      	add	r3, r1
 801d880:	3304      	adds	r3, #4
 801d882:	ed93 7a00 	vldr	s14, [r3]
 801d886:	79fa      	ldrb	r2, [r7, #7]
 801d888:	edd7 7a00 	vldr	s15, [r7]
 801d88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d890:	4913      	ldr	r1, [pc, #76]	; (801d8e0 <LED_UpdateEffect+0x3c8>)
 801d892:	4613      	mov	r3, r2
 801d894:	009b      	lsls	r3, r3, #2
 801d896:	4413      	add	r3, r2
 801d898:	009b      	lsls	r3, r3, #2
 801d89a:	440b      	add	r3, r1
 801d89c:	3304      	adds	r3, #4
 801d89e:	edc3 7a00 	vstr	s15, [r3]
				actualRGB[channel].B = transitionRGB[channel].B * val;
 801d8a2:	79fa      	ldrb	r2, [r7, #7]
 801d8a4:	4910      	ldr	r1, [pc, #64]	; (801d8e8 <LED_UpdateEffect+0x3d0>)
 801d8a6:	4613      	mov	r3, r2
 801d8a8:	009b      	lsls	r3, r3, #2
 801d8aa:	4413      	add	r3, r2
 801d8ac:	009b      	lsls	r3, r3, #2
 801d8ae:	440b      	add	r3, r1
 801d8b0:	3308      	adds	r3, #8
 801d8b2:	ed93 7a00 	vldr	s14, [r3]
 801d8b6:	79fa      	ldrb	r2, [r7, #7]
 801d8b8:	edd7 7a00 	vldr	s15, [r7]
 801d8bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d8c0:	4907      	ldr	r1, [pc, #28]	; (801d8e0 <LED_UpdateEffect+0x3c8>)
 801d8c2:	4613      	mov	r3, r2
 801d8c4:	009b      	lsls	r3, r3, #2
 801d8c6:	4413      	add	r3, r2
 801d8c8:	009b      	lsls	r3, r3, #2
 801d8ca:	440b      	add	r3, r1
 801d8cc:	3308      	adds	r3, #8
 801d8ce:	edc3 7a00 	vstr	s15, [r3]
			break;
 801d8d2:	e115      	b.n	801db00 <LED_UpdateEffect+0x5e8>
 801d8d4:	f3af 8000 	nop.w
 801d8d8:	51eb851f 	.word	0x51eb851f
 801d8dc:	40191eb8 	.word	0x40191eb8
 801d8e0:	20012ab8 	.word	0x20012ab8
 801d8e4:	3fe00000 	.word	0x3fe00000
 801d8e8:	20012af4 	.word	0x20012af4

			case EFFECT_COLORSHIFT:
				actualRGB[channel].R = transitionRGB[channel].R * (0.55 + 0.45 * cosf(6.28 * actualRGB[channel].phase));
 801d8ec:	79fa      	ldrb	r2, [r7, #7]
 801d8ee:	49b8      	ldr	r1, [pc, #736]	; (801dbd0 <LED_UpdateEffect+0x6b8>)
 801d8f0:	4613      	mov	r3, r2
 801d8f2:	009b      	lsls	r3, r3, #2
 801d8f4:	4413      	add	r3, r2
 801d8f6:	009b      	lsls	r3, r3, #2
 801d8f8:	440b      	add	r3, r1
 801d8fa:	681b      	ldr	r3, [r3, #0]
 801d8fc:	4618      	mov	r0, r3
 801d8fe:	f7e8 faab 	bl	8005e58 <__aeabi_f2d>
 801d902:	4604      	mov	r4, r0
 801d904:	460d      	mov	r5, r1
 801d906:	79fa      	ldrb	r2, [r7, #7]
 801d908:	49b2      	ldr	r1, [pc, #712]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801d90a:	4613      	mov	r3, r2
 801d90c:	009b      	lsls	r3, r3, #2
 801d90e:	4413      	add	r3, r2
 801d910:	009b      	lsls	r3, r3, #2
 801d912:	440b      	add	r3, r1
 801d914:	330c      	adds	r3, #12
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	4618      	mov	r0, r3
 801d91a:	f7e8 fa9d 	bl	8005e58 <__aeabi_f2d>
 801d91e:	a3a2      	add	r3, pc, #648	; (adr r3, 801dba8 <LED_UpdateEffect+0x690>)
 801d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d924:	f7e8 faf0 	bl	8005f08 <__aeabi_dmul>
 801d928:	4602      	mov	r2, r0
 801d92a:	460b      	mov	r3, r1
 801d92c:	4610      	mov	r0, r2
 801d92e:	4619      	mov	r1, r3
 801d930:	f7e8 fda4 	bl	800647c <__aeabi_d2f>
 801d934:	4603      	mov	r3, r0
 801d936:	ee00 3a10 	vmov	s0, r3
 801d93a:	f002 fae3 	bl	801ff04 <cosf>
 801d93e:	ee10 3a10 	vmov	r3, s0
 801d942:	4618      	mov	r0, r3
 801d944:	f7e8 fa88 	bl	8005e58 <__aeabi_f2d>
 801d948:	a399      	add	r3, pc, #612	; (adr r3, 801dbb0 <LED_UpdateEffect+0x698>)
 801d94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d94e:	f7e8 fadb 	bl	8005f08 <__aeabi_dmul>
 801d952:	4602      	mov	r2, r0
 801d954:	460b      	mov	r3, r1
 801d956:	4610      	mov	r0, r2
 801d958:	4619      	mov	r1, r3
 801d95a:	a397      	add	r3, pc, #604	; (adr r3, 801dbb8 <LED_UpdateEffect+0x6a0>)
 801d95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d960:	f7e8 f91c 	bl	8005b9c <__adddf3>
 801d964:	4602      	mov	r2, r0
 801d966:	460b      	mov	r3, r1
 801d968:	4620      	mov	r0, r4
 801d96a:	4629      	mov	r1, r5
 801d96c:	f7e8 facc 	bl	8005f08 <__aeabi_dmul>
 801d970:	4602      	mov	r2, r0
 801d972:	460b      	mov	r3, r1
 801d974:	79fc      	ldrb	r4, [r7, #7]
 801d976:	4610      	mov	r0, r2
 801d978:	4619      	mov	r1, r3
 801d97a:	f7e8 fd7f 	bl	800647c <__aeabi_d2f>
 801d97e:	4602      	mov	r2, r0
 801d980:	4994      	ldr	r1, [pc, #592]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801d982:	4623      	mov	r3, r4
 801d984:	009b      	lsls	r3, r3, #2
 801d986:	4423      	add	r3, r4
 801d988:	009b      	lsls	r3, r3, #2
 801d98a:	440b      	add	r3, r1
 801d98c:	601a      	str	r2, [r3, #0]
				actualRGB[channel].G = transitionRGB[channel].G * (0.55 + 0.45 * cosf(6.28 * actualRGB[channel].phase + 2.1));
 801d98e:	79fa      	ldrb	r2, [r7, #7]
 801d990:	498f      	ldr	r1, [pc, #572]	; (801dbd0 <LED_UpdateEffect+0x6b8>)
 801d992:	4613      	mov	r3, r2
 801d994:	009b      	lsls	r3, r3, #2
 801d996:	4413      	add	r3, r2
 801d998:	009b      	lsls	r3, r3, #2
 801d99a:	440b      	add	r3, r1
 801d99c:	3304      	adds	r3, #4
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	4618      	mov	r0, r3
 801d9a2:	f7e8 fa59 	bl	8005e58 <__aeabi_f2d>
 801d9a6:	4604      	mov	r4, r0
 801d9a8:	460d      	mov	r5, r1
 801d9aa:	79fa      	ldrb	r2, [r7, #7]
 801d9ac:	4989      	ldr	r1, [pc, #548]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801d9ae:	4613      	mov	r3, r2
 801d9b0:	009b      	lsls	r3, r3, #2
 801d9b2:	4413      	add	r3, r2
 801d9b4:	009b      	lsls	r3, r3, #2
 801d9b6:	440b      	add	r3, r1
 801d9b8:	330c      	adds	r3, #12
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	4618      	mov	r0, r3
 801d9be:	f7e8 fa4b 	bl	8005e58 <__aeabi_f2d>
 801d9c2:	a379      	add	r3, pc, #484	; (adr r3, 801dba8 <LED_UpdateEffect+0x690>)
 801d9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9c8:	f7e8 fa9e 	bl	8005f08 <__aeabi_dmul>
 801d9cc:	4602      	mov	r2, r0
 801d9ce:	460b      	mov	r3, r1
 801d9d0:	4610      	mov	r0, r2
 801d9d2:	4619      	mov	r1, r3
 801d9d4:	a37a      	add	r3, pc, #488	; (adr r3, 801dbc0 <LED_UpdateEffect+0x6a8>)
 801d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9da:	f7e8 f8df 	bl	8005b9c <__adddf3>
 801d9de:	4602      	mov	r2, r0
 801d9e0:	460b      	mov	r3, r1
 801d9e2:	4610      	mov	r0, r2
 801d9e4:	4619      	mov	r1, r3
 801d9e6:	f7e8 fd49 	bl	800647c <__aeabi_d2f>
 801d9ea:	4603      	mov	r3, r0
 801d9ec:	ee00 3a10 	vmov	s0, r3
 801d9f0:	f002 fa88 	bl	801ff04 <cosf>
 801d9f4:	ee10 3a10 	vmov	r3, s0
 801d9f8:	4618      	mov	r0, r3
 801d9fa:	f7e8 fa2d 	bl	8005e58 <__aeabi_f2d>
 801d9fe:	a36c      	add	r3, pc, #432	; (adr r3, 801dbb0 <LED_UpdateEffect+0x698>)
 801da00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da04:	f7e8 fa80 	bl	8005f08 <__aeabi_dmul>
 801da08:	4602      	mov	r2, r0
 801da0a:	460b      	mov	r3, r1
 801da0c:	4610      	mov	r0, r2
 801da0e:	4619      	mov	r1, r3
 801da10:	a369      	add	r3, pc, #420	; (adr r3, 801dbb8 <LED_UpdateEffect+0x6a0>)
 801da12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da16:	f7e8 f8c1 	bl	8005b9c <__adddf3>
 801da1a:	4602      	mov	r2, r0
 801da1c:	460b      	mov	r3, r1
 801da1e:	4620      	mov	r0, r4
 801da20:	4629      	mov	r1, r5
 801da22:	f7e8 fa71 	bl	8005f08 <__aeabi_dmul>
 801da26:	4602      	mov	r2, r0
 801da28:	460b      	mov	r3, r1
 801da2a:	79fc      	ldrb	r4, [r7, #7]
 801da2c:	4610      	mov	r0, r2
 801da2e:	4619      	mov	r1, r3
 801da30:	f7e8 fd24 	bl	800647c <__aeabi_d2f>
 801da34:	4602      	mov	r2, r0
 801da36:	4967      	ldr	r1, [pc, #412]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801da38:	4623      	mov	r3, r4
 801da3a:	009b      	lsls	r3, r3, #2
 801da3c:	4423      	add	r3, r4
 801da3e:	009b      	lsls	r3, r3, #2
 801da40:	440b      	add	r3, r1
 801da42:	3304      	adds	r3, #4
 801da44:	601a      	str	r2, [r3, #0]
				actualRGB[channel].B = transitionRGB[channel].B * (0.55 + 0.45 * cosf(6.28 * actualRGB[channel].phase + 4.2));
 801da46:	79fa      	ldrb	r2, [r7, #7]
 801da48:	4961      	ldr	r1, [pc, #388]	; (801dbd0 <LED_UpdateEffect+0x6b8>)
 801da4a:	4613      	mov	r3, r2
 801da4c:	009b      	lsls	r3, r3, #2
 801da4e:	4413      	add	r3, r2
 801da50:	009b      	lsls	r3, r3, #2
 801da52:	440b      	add	r3, r1
 801da54:	3308      	adds	r3, #8
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	4618      	mov	r0, r3
 801da5a:	f7e8 f9fd 	bl	8005e58 <__aeabi_f2d>
 801da5e:	4604      	mov	r4, r0
 801da60:	460d      	mov	r5, r1
 801da62:	79fa      	ldrb	r2, [r7, #7]
 801da64:	495b      	ldr	r1, [pc, #364]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801da66:	4613      	mov	r3, r2
 801da68:	009b      	lsls	r3, r3, #2
 801da6a:	4413      	add	r3, r2
 801da6c:	009b      	lsls	r3, r3, #2
 801da6e:	440b      	add	r3, r1
 801da70:	330c      	adds	r3, #12
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	4618      	mov	r0, r3
 801da76:	f7e8 f9ef 	bl	8005e58 <__aeabi_f2d>
 801da7a:	a34b      	add	r3, pc, #300	; (adr r3, 801dba8 <LED_UpdateEffect+0x690>)
 801da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da80:	f7e8 fa42 	bl	8005f08 <__aeabi_dmul>
 801da84:	4602      	mov	r2, r0
 801da86:	460b      	mov	r3, r1
 801da88:	4610      	mov	r0, r2
 801da8a:	4619      	mov	r1, r3
 801da8c:	a34e      	add	r3, pc, #312	; (adr r3, 801dbc8 <LED_UpdateEffect+0x6b0>)
 801da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da92:	f7e8 f883 	bl	8005b9c <__adddf3>
 801da96:	4602      	mov	r2, r0
 801da98:	460b      	mov	r3, r1
 801da9a:	4610      	mov	r0, r2
 801da9c:	4619      	mov	r1, r3
 801da9e:	f7e8 fced 	bl	800647c <__aeabi_d2f>
 801daa2:	4603      	mov	r3, r0
 801daa4:	ee00 3a10 	vmov	s0, r3
 801daa8:	f002 fa2c 	bl	801ff04 <cosf>
 801daac:	ee10 3a10 	vmov	r3, s0
 801dab0:	4618      	mov	r0, r3
 801dab2:	f7e8 f9d1 	bl	8005e58 <__aeabi_f2d>
 801dab6:	a33e      	add	r3, pc, #248	; (adr r3, 801dbb0 <LED_UpdateEffect+0x698>)
 801dab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dabc:	f7e8 fa24 	bl	8005f08 <__aeabi_dmul>
 801dac0:	4602      	mov	r2, r0
 801dac2:	460b      	mov	r3, r1
 801dac4:	4610      	mov	r0, r2
 801dac6:	4619      	mov	r1, r3
 801dac8:	a33b      	add	r3, pc, #236	; (adr r3, 801dbb8 <LED_UpdateEffect+0x6a0>)
 801daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dace:	f7e8 f865 	bl	8005b9c <__adddf3>
 801dad2:	4602      	mov	r2, r0
 801dad4:	460b      	mov	r3, r1
 801dad6:	4620      	mov	r0, r4
 801dad8:	4629      	mov	r1, r5
 801dada:	f7e8 fa15 	bl	8005f08 <__aeabi_dmul>
 801dade:	4602      	mov	r2, r0
 801dae0:	460b      	mov	r3, r1
 801dae2:	79fc      	ldrb	r4, [r7, #7]
 801dae4:	4610      	mov	r0, r2
 801dae6:	4619      	mov	r1, r3
 801dae8:	f7e8 fcc8 	bl	800647c <__aeabi_d2f>
 801daec:	4602      	mov	r2, r0
 801daee:	4939      	ldr	r1, [pc, #228]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801daf0:	4623      	mov	r3, r4
 801daf2:	009b      	lsls	r3, r3, #2
 801daf4:	4423      	add	r3, r4
 801daf6:	009b      	lsls	r3, r3, #2
 801daf8:	440b      	add	r3, r1
 801dafa:	3308      	adds	r3, #8
 801dafc:	601a      	str	r2, [r3, #0]
			break;
 801dafe:	bf00      	nop
		}
		actualRGB[channel].phase += period/(float)(leds[channel].effect.period);
 801db00:	79fa      	ldrb	r2, [r7, #7]
 801db02:	4934      	ldr	r1, [pc, #208]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801db04:	4613      	mov	r3, r2
 801db06:	009b      	lsls	r3, r3, #2
 801db08:	4413      	add	r3, r2
 801db0a:	009b      	lsls	r3, r3, #2
 801db0c:	440b      	add	r3, r1
 801db0e:	330c      	adds	r3, #12
 801db10:	ed93 7a00 	vldr	s14, [r3]
 801db14:	4b30      	ldr	r3, [pc, #192]	; (801dbd8 <LED_UpdateEffect+0x6c0>)
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	ee07 3a90 	vmov	s15, r3
 801db1c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801db20:	79fa      	ldrb	r2, [r7, #7]
 801db22:	492e      	ldr	r1, [pc, #184]	; (801dbdc <LED_UpdateEffect+0x6c4>)
 801db24:	4613      	mov	r3, r2
 801db26:	005b      	lsls	r3, r3, #1
 801db28:	4413      	add	r3, r2
 801db2a:	00db      	lsls	r3, r3, #3
 801db2c:	440b      	add	r3, r1
 801db2e:	330e      	adds	r3, #14
 801db30:	881b      	ldrh	r3, [r3, #0]
 801db32:	ee07 3a90 	vmov	s15, r3
 801db36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db3a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801db3e:	79fa      	ldrb	r2, [r7, #7]
 801db40:	ee77 7a27 	vadd.f32	s15, s14, s15
 801db44:	4923      	ldr	r1, [pc, #140]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801db46:	4613      	mov	r3, r2
 801db48:	009b      	lsls	r3, r3, #2
 801db4a:	4413      	add	r3, r2
 801db4c:	009b      	lsls	r3, r3, #2
 801db4e:	440b      	add	r3, r1
 801db50:	330c      	adds	r3, #12
 801db52:	edc3 7a00 	vstr	s15, [r3]
		if(actualRGB[channel].phase > 1) actualRGB[channel].phase = 0;
 801db56:	79fa      	ldrb	r2, [r7, #7]
 801db58:	491e      	ldr	r1, [pc, #120]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801db5a:	4613      	mov	r3, r2
 801db5c:	009b      	lsls	r3, r3, #2
 801db5e:	4413      	add	r3, r2
 801db60:	009b      	lsls	r3, r3, #2
 801db62:	440b      	add	r3, r1
 801db64:	330c      	adds	r3, #12
 801db66:	edd3 7a00 	vldr	s15, [r3]
 801db6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801db6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801db72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db76:	dd0a      	ble.n	801db8e <LED_UpdateEffect+0x676>
 801db78:	79fa      	ldrb	r2, [r7, #7]
 801db7a:	4916      	ldr	r1, [pc, #88]	; (801dbd4 <LED_UpdateEffect+0x6bc>)
 801db7c:	4613      	mov	r3, r2
 801db7e:	009b      	lsls	r3, r3, #2
 801db80:	4413      	add	r3, r2
 801db82:	009b      	lsls	r3, r3, #2
 801db84:	440b      	add	r3, r1
 801db86:	330c      	adds	r3, #12
 801db88:	f04f 0200 	mov.w	r2, #0
 801db8c:	601a      	str	r2, [r3, #0]
	for(uint8_t channel = 0; channel <= 2; channel++)
 801db8e:	79fb      	ldrb	r3, [r7, #7]
 801db90:	3301      	adds	r3, #1
 801db92:	71fb      	strb	r3, [r7, #7]
 801db94:	79fb      	ldrb	r3, [r7, #7]
 801db96:	2b02      	cmp	r3, #2
 801db98:	f67f acc4 	bls.w	801d524 <LED_UpdateEffect+0xc>
	}
}
 801db9c:	bf00      	nop
 801db9e:	bf00      	nop
 801dba0:	3708      	adds	r7, #8
 801dba2:	46bd      	mov	sp, r7
 801dba4:	bdb0      	pop	{r4, r5, r7, pc}
 801dba6:	bf00      	nop
 801dba8:	51eb851f 	.word	0x51eb851f
 801dbac:	40191eb8 	.word	0x40191eb8
 801dbb0:	cccccccd 	.word	0xcccccccd
 801dbb4:	3fdccccc 	.word	0x3fdccccc
 801dbb8:	9999999a 	.word	0x9999999a
 801dbbc:	3fe19999 	.word	0x3fe19999
 801dbc0:	cccccccd 	.word	0xcccccccd
 801dbc4:	4000cccc 	.word	0x4000cccc
 801dbc8:	cccccccd 	.word	0xcccccccd
 801dbcc:	4010cccc 	.word	0x4010cccc
 801dbd0:	20012af4 	.word	0x20012af4
 801dbd4:	20012ab8 	.word	0x20012ab8
 801dbd8:	20012b30 	.word	0x20012b30
 801dbdc:	20012a70 	.word	0x20012a70

0801dbe0 <LED_Iterate>:

void LED_Iterate()
{
 801dbe0:	b590      	push	{r4, r7, lr}
 801dbe2:	b083      	sub	sp, #12
 801dbe4:	af00      	add	r7, sp, #0
	LEDPosition++;
 801dbe6:	4b56      	ldr	r3, [pc, #344]	; (801dd40 <LED_Iterate+0x160>)
 801dbe8:	781b      	ldrb	r3, [r3, #0]
 801dbea:	3301      	adds	r3, #1
 801dbec:	b2da      	uxtb	r2, r3
 801dbee:	4b54      	ldr	r3, [pc, #336]	; (801dd40 <LED_Iterate+0x160>)
 801dbf0:	701a      	strb	r2, [r3, #0]
	if(LEDPosition > 2) LEDPosition = 0;
 801dbf2:	4b53      	ldr	r3, [pc, #332]	; (801dd40 <LED_Iterate+0x160>)
 801dbf4:	781b      	ldrb	r3, [r3, #0]
 801dbf6:	2b02      	cmp	r3, #2
 801dbf8:	d902      	bls.n	801dc00 <LED_Iterate+0x20>
 801dbfa:	4b51      	ldr	r3, [pc, #324]	; (801dd40 <LED_Iterate+0x160>)
 801dbfc:	2200      	movs	r2, #0
 801dbfe:	701a      	strb	r2, [r3, #0]

	LED_PWMSET(actualRGB[LEDPosition].R, actualRGB[LEDPosition].G, actualRGB[LEDPosition].B);
 801dc00:	4b4f      	ldr	r3, [pc, #316]	; (801dd40 <LED_Iterate+0x160>)
 801dc02:	781b      	ldrb	r3, [r3, #0]
 801dc04:	4619      	mov	r1, r3
 801dc06:	4a4f      	ldr	r2, [pc, #316]	; (801dd44 <LED_Iterate+0x164>)
 801dc08:	460b      	mov	r3, r1
 801dc0a:	009b      	lsls	r3, r3, #2
 801dc0c:	440b      	add	r3, r1
 801dc0e:	009b      	lsls	r3, r3, #2
 801dc10:	4413      	add	r3, r2
 801dc12:	edd3 7a00 	vldr	s15, [r3]
 801dc16:	4b4a      	ldr	r3, [pc, #296]	; (801dd40 <LED_Iterate+0x160>)
 801dc18:	781b      	ldrb	r3, [r3, #0]
 801dc1a:	4619      	mov	r1, r3
 801dc1c:	4a49      	ldr	r2, [pc, #292]	; (801dd44 <LED_Iterate+0x164>)
 801dc1e:	460b      	mov	r3, r1
 801dc20:	009b      	lsls	r3, r3, #2
 801dc22:	440b      	add	r3, r1
 801dc24:	009b      	lsls	r3, r3, #2
 801dc26:	4413      	add	r3, r2
 801dc28:	3304      	adds	r3, #4
 801dc2a:	ed93 7a00 	vldr	s14, [r3]
 801dc2e:	4b44      	ldr	r3, [pc, #272]	; (801dd40 <LED_Iterate+0x160>)
 801dc30:	781b      	ldrb	r3, [r3, #0]
 801dc32:	4619      	mov	r1, r3
 801dc34:	4a43      	ldr	r2, [pc, #268]	; (801dd44 <LED_Iterate+0x164>)
 801dc36:	460b      	mov	r3, r1
 801dc38:	009b      	lsls	r3, r3, #2
 801dc3a:	440b      	add	r3, r1
 801dc3c:	009b      	lsls	r3, r3, #2
 801dc3e:	4413      	add	r3, r2
 801dc40:	3308      	adds	r3, #8
 801dc42:	edd3 6a00 	vldr	s13, [r3]
 801dc46:	eeb0 1a66 	vmov.f32	s2, s13
 801dc4a:	eef0 0a47 	vmov.f32	s1, s14
 801dc4e:	eeb0 0a67 	vmov.f32	s0, s15
 801dc52:	f000 f87b 	bl	801dd4c <LED_PWMSET>

	uint8_t enabler = (actualRGB[LEDPosition].R + actualRGB[LEDPosition].G + actualRGB[LEDPosition].B) > 0.005 ? 1 : 0;
 801dc56:	4b3a      	ldr	r3, [pc, #232]	; (801dd40 <LED_Iterate+0x160>)
 801dc58:	781b      	ldrb	r3, [r3, #0]
 801dc5a:	4619      	mov	r1, r3
 801dc5c:	4a39      	ldr	r2, [pc, #228]	; (801dd44 <LED_Iterate+0x164>)
 801dc5e:	460b      	mov	r3, r1
 801dc60:	009b      	lsls	r3, r3, #2
 801dc62:	440b      	add	r3, r1
 801dc64:	009b      	lsls	r3, r3, #2
 801dc66:	4413      	add	r3, r2
 801dc68:	ed93 7a00 	vldr	s14, [r3]
 801dc6c:	4b34      	ldr	r3, [pc, #208]	; (801dd40 <LED_Iterate+0x160>)
 801dc6e:	781b      	ldrb	r3, [r3, #0]
 801dc70:	4619      	mov	r1, r3
 801dc72:	4a34      	ldr	r2, [pc, #208]	; (801dd44 <LED_Iterate+0x164>)
 801dc74:	460b      	mov	r3, r1
 801dc76:	009b      	lsls	r3, r3, #2
 801dc78:	440b      	add	r3, r1
 801dc7a:	009b      	lsls	r3, r3, #2
 801dc7c:	4413      	add	r3, r2
 801dc7e:	3304      	adds	r3, #4
 801dc80:	edd3 7a00 	vldr	s15, [r3]
 801dc84:	ee37 7a27 	vadd.f32	s14, s14, s15
 801dc88:	4b2d      	ldr	r3, [pc, #180]	; (801dd40 <LED_Iterate+0x160>)
 801dc8a:	781b      	ldrb	r3, [r3, #0]
 801dc8c:	4619      	mov	r1, r3
 801dc8e:	4a2d      	ldr	r2, [pc, #180]	; (801dd44 <LED_Iterate+0x164>)
 801dc90:	460b      	mov	r3, r1
 801dc92:	009b      	lsls	r3, r3, #2
 801dc94:	440b      	add	r3, r1
 801dc96:	009b      	lsls	r3, r3, #2
 801dc98:	4413      	add	r3, r2
 801dc9a:	3308      	adds	r3, #8
 801dc9c:	edd3 7a00 	vldr	s15, [r3]
 801dca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dca4:	ee17 0a90 	vmov	r0, s15
 801dca8:	f7e8 f8d6 	bl	8005e58 <__aeabi_f2d>
 801dcac:	2301      	movs	r3, #1
 801dcae:	461c      	mov	r4, r3
 801dcb0:	a321      	add	r3, pc, #132	; (adr r3, 801dd38 <LED_Iterate+0x158>)
 801dcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcb6:	f7e8 fbb7 	bl	8006428 <__aeabi_dcmpgt>
 801dcba:	4603      	mov	r3, r0
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d101      	bne.n	801dcc4 <LED_Iterate+0xe4>
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	461c      	mov	r4, r3
 801dcc4:	b2e3      	uxtb	r3, r4
 801dcc6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED1_OUT_GPIO_Port, LED1_OUT_Pin, LEDPosition==0 && enabler);
 801dcc8:	4b1d      	ldr	r3, [pc, #116]	; (801dd40 <LED_Iterate+0x160>)
 801dcca:	781b      	ldrb	r3, [r3, #0]
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	d104      	bne.n	801dcda <LED_Iterate+0xfa>
 801dcd0:	79fb      	ldrb	r3, [r7, #7]
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	d001      	beq.n	801dcda <LED_Iterate+0xfa>
 801dcd6:	2301      	movs	r3, #1
 801dcd8:	e000      	b.n	801dcdc <LED_Iterate+0xfc>
 801dcda:	2300      	movs	r3, #0
 801dcdc:	b2db      	uxtb	r3, r3
 801dcde:	461a      	mov	r2, r3
 801dce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801dce4:	4818      	ldr	r0, [pc, #96]	; (801dd48 <LED_Iterate+0x168>)
 801dce6:	f7ed fefd 	bl	800bae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_OUT_GPIO_Port, LED2_OUT_Pin, LEDPosition==1 && enabler);
 801dcea:	4b15      	ldr	r3, [pc, #84]	; (801dd40 <LED_Iterate+0x160>)
 801dcec:	781b      	ldrb	r3, [r3, #0]
 801dcee:	2b01      	cmp	r3, #1
 801dcf0:	d104      	bne.n	801dcfc <LED_Iterate+0x11c>
 801dcf2:	79fb      	ldrb	r3, [r7, #7]
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d001      	beq.n	801dcfc <LED_Iterate+0x11c>
 801dcf8:	2301      	movs	r3, #1
 801dcfa:	e000      	b.n	801dcfe <LED_Iterate+0x11e>
 801dcfc:	2300      	movs	r3, #0
 801dcfe:	b2db      	uxtb	r3, r3
 801dd00:	461a      	mov	r2, r3
 801dd02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801dd06:	4810      	ldr	r0, [pc, #64]	; (801dd48 <LED_Iterate+0x168>)
 801dd08:	f7ed feec 	bl	800bae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_OUT_GPIO_Port, LED3_OUT_Pin, LEDPosition==2 && enabler);
 801dd0c:	4b0c      	ldr	r3, [pc, #48]	; (801dd40 <LED_Iterate+0x160>)
 801dd0e:	781b      	ldrb	r3, [r3, #0]
 801dd10:	2b02      	cmp	r3, #2
 801dd12:	d104      	bne.n	801dd1e <LED_Iterate+0x13e>
 801dd14:	79fb      	ldrb	r3, [r7, #7]
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d001      	beq.n	801dd1e <LED_Iterate+0x13e>
 801dd1a:	2301      	movs	r3, #1
 801dd1c:	e000      	b.n	801dd20 <LED_Iterate+0x140>
 801dd1e:	2300      	movs	r3, #0
 801dd20:	b2db      	uxtb	r3, r3
 801dd22:	461a      	mov	r2, r3
 801dd24:	f44f 7100 	mov.w	r1, #512	; 0x200
 801dd28:	4807      	ldr	r0, [pc, #28]	; (801dd48 <LED_Iterate+0x168>)
 801dd2a:	f7ed fedb 	bl	800bae4 <HAL_GPIO_WritePin>
}
 801dd2e:	bf00      	nop
 801dd30:	370c      	adds	r7, #12
 801dd32:	46bd      	mov	sp, r7
 801dd34:	bd90      	pop	{r4, r7, pc}
 801dd36:	bf00      	nop
 801dd38:	47ae147b 	.word	0x47ae147b
 801dd3c:	3f747ae1 	.word	0x3f747ae1
 801dd40:	20012a6d 	.word	0x20012a6d
 801dd44:	20012ab8 	.word	0x20012ab8
 801dd48:	48000400 	.word	0x48000400

0801dd4c <LED_PWMSET>:

void LED_PWMSET(float R, float G, float B)
{
 801dd4c:	b580      	push	{r7, lr}
 801dd4e:	b084      	sub	sp, #16
 801dd50:	af00      	add	r7, sp, #0
 801dd52:	ed87 0a03 	vstr	s0, [r7, #12]
 801dd56:	edc7 0a02 	vstr	s1, [r7, #8]
 801dd5a:	ed87 1a01 	vstr	s2, [r7, #4]
	TIM5->CCR1 = 1000 - (uint16_t)(R * 1000.0);// set Red
 801dd5e:	68f8      	ldr	r0, [r7, #12]
 801dd60:	f7e8 f87a 	bl	8005e58 <__aeabi_f2d>
 801dd64:	f04f 0200 	mov.w	r2, #0
 801dd68:	4b1d      	ldr	r3, [pc, #116]	; (801dde0 <LED_PWMSET+0x94>)
 801dd6a:	f7e8 f8cd 	bl	8005f08 <__aeabi_dmul>
 801dd6e:	4602      	mov	r2, r0
 801dd70:	460b      	mov	r3, r1
 801dd72:	4610      	mov	r0, r2
 801dd74:	4619      	mov	r1, r3
 801dd76:	f7e8 fb61 	bl	800643c <__aeabi_d2uiz>
 801dd7a:	4603      	mov	r3, r0
 801dd7c:	b29b      	uxth	r3, r3
 801dd7e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 801dd82:	4b18      	ldr	r3, [pc, #96]	; (801dde4 <LED_PWMSET+0x98>)
 801dd84:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR4 = 1000 - (uint16_t)(G * 1000.0);// set Green
 801dd86:	68b8      	ldr	r0, [r7, #8]
 801dd88:	f7e8 f866 	bl	8005e58 <__aeabi_f2d>
 801dd8c:	f04f 0200 	mov.w	r2, #0
 801dd90:	4b13      	ldr	r3, [pc, #76]	; (801dde0 <LED_PWMSET+0x94>)
 801dd92:	f7e8 f8b9 	bl	8005f08 <__aeabi_dmul>
 801dd96:	4602      	mov	r2, r0
 801dd98:	460b      	mov	r3, r1
 801dd9a:	4610      	mov	r0, r2
 801dd9c:	4619      	mov	r1, r3
 801dd9e:	f7e8 fb4d 	bl	800643c <__aeabi_d2uiz>
 801dda2:	4603      	mov	r3, r0
 801dda4:	b29b      	uxth	r3, r3
 801dda6:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 801ddaa:	4b0f      	ldr	r3, [pc, #60]	; (801dde8 <LED_PWMSET+0x9c>)
 801ddac:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CCR3 = 1000 - (uint16_t)(B * 1000.0);// set Blue
 801ddae:	6878      	ldr	r0, [r7, #4]
 801ddb0:	f7e8 f852 	bl	8005e58 <__aeabi_f2d>
 801ddb4:	f04f 0200 	mov.w	r2, #0
 801ddb8:	4b09      	ldr	r3, [pc, #36]	; (801dde0 <LED_PWMSET+0x94>)
 801ddba:	f7e8 f8a5 	bl	8005f08 <__aeabi_dmul>
 801ddbe:	4602      	mov	r2, r0
 801ddc0:	460b      	mov	r3, r1
 801ddc2:	4610      	mov	r0, r2
 801ddc4:	4619      	mov	r1, r3
 801ddc6:	f7e8 fb39 	bl	800643c <__aeabi_d2uiz>
 801ddca:	4603      	mov	r3, r0
 801ddcc:	b29b      	uxth	r3, r3
 801ddce:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 801ddd2:	4b05      	ldr	r3, [pc, #20]	; (801dde8 <LED_PWMSET+0x9c>)
 801ddd4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801ddd6:	bf00      	nop
 801ddd8:	3710      	adds	r7, #16
 801ddda:	46bd      	mov	sp, r7
 801dddc:	bd80      	pop	{r7, pc}
 801ddde:	bf00      	nop
 801dde0:	408f4000 	.word	0x408f4000
 801dde4:	40000c00 	.word	0x40000c00
 801dde8:	40000400 	.word	0x40000400

0801ddec <LED_PWMCLEAR>:

void LED_PWMCLEAR()
{
 801ddec:	b480      	push	{r7}
 801ddee:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 1000;// set Red
 801ddf0:	4b08      	ldr	r3, [pc, #32]	; (801de14 <LED_PWMCLEAR+0x28>)
 801ddf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ddf6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR4 = 1000;// set Green
 801ddf8:	4b07      	ldr	r3, [pc, #28]	; (801de18 <LED_PWMCLEAR+0x2c>)
 801ddfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ddfe:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CCR3 = 1000;// set Blue
 801de00:	4b05      	ldr	r3, [pc, #20]	; (801de18 <LED_PWMCLEAR+0x2c>)
 801de02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801de06:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801de08:	bf00      	nop
 801de0a:	46bd      	mov	sp, r7
 801de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de10:	4770      	bx	lr
 801de12:	bf00      	nop
 801de14:	40000c00 	.word	0x40000c00
 801de18:	40000400 	.word	0x40000400

0801de1c <LED_Preset>:
 */

#include "UDEV1_LEDpresets.h"

RGBLEDS_struct LED_Preset(LEDpreset_enum LEDpreset)
{
 801de1c:	b4b0      	push	{r4, r5, r7}
 801de1e:	b089      	sub	sp, #36	; 0x24
 801de20:	af00      	add	r7, sp, #0
 801de22:	6078      	str	r0, [r7, #4]
 801de24:	460b      	mov	r3, r1
 801de26:	70fb      	strb	r3, [r7, #3]
	RGBLEDS_struct presetStruct;
	presetStruct.R = 0;
 801de28:	f04f 0300 	mov.w	r3, #0
 801de2c:	60bb      	str	r3, [r7, #8]
	presetStruct.G = 0;
 801de2e:	f04f 0300 	mov.w	r3, #0
 801de32:	60fb      	str	r3, [r7, #12]
	presetStruct.B = 0;
 801de34:	f04f 0300 	mov.w	r3, #0
 801de38:	613b      	str	r3, [r7, #16]
	presetStruct.effect.type = EFFECT_OFF;
 801de3a:	2300      	movs	r3, #0
 801de3c:	753b      	strb	r3, [r7, #20]
	presetStruct.effect.period = 1000;
 801de3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801de42:	82fb      	strh	r3, [r7, #22]
	presetStruct.effect.dutycycle = 0.5;
 801de44:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801de48:	61bb      	str	r3, [r7, #24]
	presetStruct.transition.type = TRANSITION_FADE;
 801de4a:	2302      	movs	r3, #2
 801de4c:	773b      	strb	r3, [r7, #28]
	presetStruct.transition.time = 25;
 801de4e:	2319      	movs	r3, #25
 801de50:	83fb      	strh	r3, [r7, #30]

	switch (LEDpreset)
 801de52:	78fb      	ldrb	r3, [r7, #3]
 801de54:	3b01      	subs	r3, #1
 801de56:	2b06      	cmp	r3, #6
 801de58:	d810      	bhi.n	801de7c <LED_Preset+0x60>
 801de5a:	a201      	add	r2, pc, #4	; (adr r2, 801de60 <LED_Preset+0x44>)
 801de5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de60:	0801de87 	.word	0x0801de87
 801de64:	0801de9b 	.word	0x0801de9b
 801de68:	0801deb3 	.word	0x0801deb3
 801de6c:	0801debf 	.word	0x0801debf
 801de70:	0801decb 	.word	0x0801decb
 801de74:	0801dee3 	.word	0x0801dee3
 801de78:	0801defb 	.word	0x0801defb
	{
		default: //OFF
			presetStruct.transition.type = TRANSITION_FADE;
 801de7c:	2302      	movs	r3, #2
 801de7e:	773b      	strb	r3, [r7, #28]
			presetStruct.transition.time = 50;
 801de80:	2332      	movs	r3, #50	; 0x32
 801de82:	83fb      	strh	r3, [r7, #30]
			break;
 801de84:	e045      	b.n	801df12 <LED_Preset+0xf6>
		case PRESET_OVERCURRENT:
			presetStruct.R = 1;
 801de86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801de8a:	60bb      	str	r3, [r7, #8]
			presetStruct.effect.type = EFFECT_BLINK;
 801de8c:	2302      	movs	r3, #2
 801de8e:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 200;
 801de90:	23c8      	movs	r3, #200	; 0xc8
 801de92:	82fb      	strh	r3, [r7, #22]
			presetStruct.transition.type = TRANSITION_INSTANT;
 801de94:	2300      	movs	r3, #0
 801de96:	773b      	strb	r3, [r7, #28]
			break;
 801de98:	e03b      	b.n	801df12 <LED_Preset+0xf6>
		case PRESET_NOTLINKEDWITHPC:
			presetStruct.R = 1;
 801de9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801de9e:	60bb      	str	r3, [r7, #8]
			presetStruct.G = 0.5;
 801dea0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801dea4:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_BREATHE;
 801dea6:	2304      	movs	r3, #4
 801dea8:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 1400;
 801deaa:	f44f 63af 	mov.w	r3, #1400	; 0x578
 801deae:	82fb      	strh	r3, [r7, #22]
			break;
 801deb0:	e02f      	b.n	801df12 <LED_Preset+0xf6>
		case PRESET_LINKEDTOPC:
			presetStruct.G = 0.5;
 801deb2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801deb6:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_ON;
 801deb8:	2301      	movs	r3, #1
 801deba:	753b      	strb	r3, [r7, #20]
			break;
 801debc:	e029      	b.n	801df12 <LED_Preset+0xf6>
		case PRESET_CARDRECOGNISED:
			presetStruct.G = 1;
 801debe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801dec2:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_ON;
 801dec4:	2301      	movs	r3, #1
 801dec6:	753b      	strb	r3, [r7, #20]
			break;
 801dec8:	e023      	b.n	801df12 <LED_Preset+0xf6>
		case PRESET_CARDNOTDETECTED:
			presetStruct.R = 1;
 801deca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801dece:	60bb      	str	r3, [r7, #8]
			presetStruct.G = 0.5;
 801ded0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801ded4:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_BREATHE;
 801ded6:	2304      	movs	r3, #4
 801ded8:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 2000;
 801deda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801dede:	82fb      	strh	r3, [r7, #22]
			break;
 801dee0:	e017      	b.n	801df12 <LED_Preset+0xf6>
		case PRESET_CARDNOTRECOGNISED:
			presetStruct.R = 1;
 801dee2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801dee6:	60bb      	str	r3, [r7, #8]
			presetStruct.G = 0.5;
 801dee8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801deec:	60fb      	str	r3, [r7, #12]
			presetStruct.effect.type = EFFECT_COLORSHIFT;
 801deee:	2305      	movs	r3, #5
 801def0:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 400;
 801def2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801def6:	82fb      	strh	r3, [r7, #22]
			break;
 801def8:	e00b      	b.n	801df12 <LED_Preset+0xf6>
		case PRESET_CARDCOMFAIL:
			presetStruct.R = 1;
 801defa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801defe:	60bb      	str	r3, [r7, #8]
			presetStruct.B = 1;
 801df00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801df04:	613b      	str	r3, [r7, #16]
			presetStruct.effect.type = EFFECT_COLORSHIFT;
 801df06:	2305      	movs	r3, #5
 801df08:	753b      	strb	r3, [r7, #20]
			presetStruct.effect.period = 400;
 801df0a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801df0e:	82fb      	strh	r3, [r7, #22]
			break;
 801df10:	bf00      	nop
	}
	return presetStruct;
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	461d      	mov	r5, r3
 801df16:	f107 0408 	add.w	r4, r7, #8
 801df1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801df1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801df1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801df22:	e885 0003 	stmia.w	r5, {r0, r1}
}
 801df26:	6878      	ldr	r0, [r7, #4]
 801df28:	3724      	adds	r7, #36	; 0x24
 801df2a:	46bd      	mov	sp, r7
 801df2c:	bcb0      	pop	{r4, r5, r7}
 801df2e:	4770      	bx	lr

0801df30 <SENDfunc>:
#include "UDEV1_board.h"
#include "cmsis_os.h"
#include "RS485.h"

void SENDfunc(struct subword* subwords, int length)
{
 801df30:	b580      	push	{r7, lr}
 801df32:	b088      	sub	sp, #32
 801df34:	af00      	add	r7, sp, #0
 801df36:	6078      	str	r0, [r7, #4]
 801df38:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 801df3a:	683b      	ldr	r3, [r7, #0]
 801df3c:	2b01      	cmp	r3, #1
 801df3e:	f040 80c4 	bne.w	801e0ca <SENDfunc+0x19a>

	if(subwords[0].type != params) return;
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	781b      	ldrb	r3, [r3, #0]
 801df46:	2b01      	cmp	r3, #1
 801df48:	f040 80c1 	bne.w	801e0ce <SENDfunc+0x19e>
	struct subword subword = subwords[0];
 801df4c:	687a      	ldr	r2, [r7, #4]
 801df4e:	f107 030c 	add.w	r3, r7, #12
 801df52:	ca07      	ldmia	r2, {r0, r1, r2}
 801df54:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t USBtoRS485_DONE = 0;
 801df58:	2300      	movs	r3, #0
 801df5a:	77fb      	strb	r3, [r7, #31]

	switch (subword.paramType)
 801df5c:	7bbb      	ldrb	r3, [r7, #14]
 801df5e:	2b04      	cmp	r3, #4
 801df60:	f040 80ae 	bne.w	801e0c0 <SENDfunc+0x190>
	{
			case OTHER_P:

					if(MainState != UDEV1_OFF && CardState > UDEV1CARD_NOTRECOGNISED)
 801df64:	4b62      	ldr	r3, [pc, #392]	; (801e0f0 <SENDfunc+0x1c0>)
 801df66:	781b      	ldrb	r3, [r3, #0]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	f000 80b2 	beq.w	801e0d2 <SENDfunc+0x1a2>
 801df6e:	4b61      	ldr	r3, [pc, #388]	; (801e0f4 <SENDfunc+0x1c4>)
 801df70:	781b      	ldrb	r3, [r3, #0]
 801df72:	2b02      	cmp	r3, #2
 801df74:	f240 80ad 	bls.w	801e0d2 <SENDfunc+0x1a2>
				  	{
				  	  	  for(uint8_t i = 0; i < 100 && !USBtoRS485_DONE; i++)
 801df78:	2300      	movs	r3, #0
 801df7a:	77bb      	strb	r3, [r7, #30]
 801df7c:	e08e      	b.n	801e09c <SENDfunc+0x16c>
				  	  	  {
				  			  if(osMutexAcquire(mutex_RS485Handle, osWaitForever) == osOK)
 801df7e:	4b5e      	ldr	r3, [pc, #376]	; (801e0f8 <SENDfunc+0x1c8>)
 801df80:	681b      	ldr	r3, [r3, #0]
 801df82:	f04f 31ff 	mov.w	r1, #4294967295
 801df86:	4618      	mov	r0, r3
 801df88:	f7fb fe2c 	bl	8019be4 <osMutexAcquire>
 801df8c:	4603      	mov	r3, r0
 801df8e:	2b00      	cmp	r3, #0
 801df90:	f040 8081 	bne.w	801e096 <SENDfunc+0x166>
				  			  {
				  				  sprintf(RS485TXbuffer, "000:%s",subword.otherParam);
 801df94:	697b      	ldr	r3, [r7, #20]
 801df96:	461a      	mov	r2, r3
 801df98:	4958      	ldr	r1, [pc, #352]	; (801e0fc <SENDfunc+0x1cc>)
 801df9a:	4859      	ldr	r0, [pc, #356]	; (801e100 <SENDfunc+0x1d0>)
 801df9c:	f001 fb68 	bl	801f670 <siprintf>
				  				  RS485_Transmit_DMA(&RS485cfg);
 801dfa0:	4858      	ldr	r0, [pc, #352]	; (801e104 <SENDfunc+0x1d4>)
 801dfa2:	f7ff f8f3 	bl	801d18c <RS485_Transmit_DMA>

				  				  for(uint16_t timer = RS485maxTimeToTransmit_ms; timer > 0 && !RS485_TransmitDone(&RS485cfg); timer--) osDelay(1);
 801dfa6:	230a      	movs	r3, #10
 801dfa8:	83bb      	strh	r3, [r7, #28]
 801dfaa:	e005      	b.n	801dfb8 <SENDfunc+0x88>
 801dfac:	2001      	movs	r0, #1
 801dfae:	f7fb fd78 	bl	8019aa2 <osDelay>
 801dfb2:	8bbb      	ldrh	r3, [r7, #28]
 801dfb4:	3b01      	subs	r3, #1
 801dfb6:	83bb      	strh	r3, [r7, #28]
 801dfb8:	8bbb      	ldrh	r3, [r7, #28]
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	d005      	beq.n	801dfca <SENDfunc+0x9a>
 801dfbe:	4851      	ldr	r0, [pc, #324]	; (801e104 <SENDfunc+0x1d4>)
 801dfc0:	f7ff f928 	bl	801d214 <RS485_TransmitDone>
 801dfc4:	4603      	mov	r3, r0
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d0f0      	beq.n	801dfac <SENDfunc+0x7c>

				  				  for(uint16_t timer = RS485maxTimeToReceive_ms; timer > 0 && !RS485_IsReceived(); timer--) osDelay(1);
 801dfca:	2364      	movs	r3, #100	; 0x64
 801dfcc:	837b      	strh	r3, [r7, #26]
 801dfce:	e005      	b.n	801dfdc <SENDfunc+0xac>
 801dfd0:	2001      	movs	r0, #1
 801dfd2:	f7fb fd66 	bl	8019aa2 <osDelay>
 801dfd6:	8b7b      	ldrh	r3, [r7, #26]
 801dfd8:	3b01      	subs	r3, #1
 801dfda:	837b      	strh	r3, [r7, #26]
 801dfdc:	8b7b      	ldrh	r3, [r7, #26]
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d004      	beq.n	801dfec <SENDfunc+0xbc>
 801dfe2:	f7ff f92d 	bl	801d240 <RS485_IsReceived>
 801dfe6:	4603      	mov	r3, r0
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	d0f1      	beq.n	801dfd0 <SENDfunc+0xa0>

				  				  if(RS485_IsReceived())// && UC1_CheckCardValidity(&UNICARD1data))
 801dfec:	f7ff f928 	bl	801d240 <RS485_IsReceived>
 801dff0:	4603      	mov	r3, r0
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d02a      	beq.n	801e04c <SENDfunc+0x11c>
				  				  {
				  					  	sprintf(USBTXbuffer, "RESPONSE:%s", RS485RXbuffer);
 801dff6:	4a44      	ldr	r2, [pc, #272]	; (801e108 <SENDfunc+0x1d8>)
 801dff8:	4944      	ldr	r1, [pc, #272]	; (801e10c <SENDfunc+0x1dc>)
 801dffa:	4845      	ldr	r0, [pc, #276]	; (801e110 <SENDfunc+0x1e0>)
 801dffc:	f001 fb38 	bl	801f670 <siprintf>
				  						if(ComFailCounter > 0 && !strncmp(RS485RXbuffer, "OK\r\n", 2)) ComFailCounter -= Card_acceptableFailedComRatio;
 801e000:	4b44      	ldr	r3, [pc, #272]	; (801e114 <SENDfunc+0x1e4>)
 801e002:	edd3 7a00 	vldr	s15, [r3]
 801e006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e00e:	dd1a      	ble.n	801e046 <SENDfunc+0x116>
 801e010:	2202      	movs	r2, #2
 801e012:	4941      	ldr	r1, [pc, #260]	; (801e118 <SENDfunc+0x1e8>)
 801e014:	483c      	ldr	r0, [pc, #240]	; (801e108 <SENDfunc+0x1d8>)
 801e016:	f001 fb53 	bl	801f6c0 <strncmp>
 801e01a:	4603      	mov	r3, r0
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d112      	bne.n	801e046 <SENDfunc+0x116>
 801e020:	4b3c      	ldr	r3, [pc, #240]	; (801e114 <SENDfunc+0x1e4>)
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	4618      	mov	r0, r3
 801e026:	f7e7 ff17 	bl	8005e58 <__aeabi_f2d>
 801e02a:	a32d      	add	r3, pc, #180	; (adr r3, 801e0e0 <SENDfunc+0x1b0>)
 801e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e030:	f7e7 fdb2 	bl	8005b98 <__aeabi_dsub>
 801e034:	4602      	mov	r2, r0
 801e036:	460b      	mov	r3, r1
 801e038:	4610      	mov	r0, r2
 801e03a:	4619      	mov	r1, r3
 801e03c:	f7e8 fa1e 	bl	800647c <__aeabi_d2f>
 801e040:	4603      	mov	r3, r0
 801e042:	4a34      	ldr	r2, [pc, #208]	; (801e114 <SENDfunc+0x1e4>)
 801e044:	6013      	str	r3, [r2, #0]
				  						USBtoRS485_DONE = 1;
 801e046:	2301      	movs	r3, #1
 801e048:	77fb      	strb	r3, [r7, #31]
 801e04a:	e01c      	b.n	801e086 <SENDfunc+0x156>
				  				  }
				  				  else if(ComFailCounter < 10) ComFailCounter += (1-Card_acceptableFailedComRatio);
 801e04c:	4b31      	ldr	r3, [pc, #196]	; (801e114 <SENDfunc+0x1e4>)
 801e04e:	edd3 7a00 	vldr	s15, [r3]
 801e052:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801e056:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e05e:	d512      	bpl.n	801e086 <SENDfunc+0x156>
 801e060:	4b2c      	ldr	r3, [pc, #176]	; (801e114 <SENDfunc+0x1e4>)
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	4618      	mov	r0, r3
 801e066:	f7e7 fef7 	bl	8005e58 <__aeabi_f2d>
 801e06a:	a31f      	add	r3, pc, #124	; (adr r3, 801e0e8 <SENDfunc+0x1b8>)
 801e06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e070:	f7e7 fd94 	bl	8005b9c <__adddf3>
 801e074:	4602      	mov	r2, r0
 801e076:	460b      	mov	r3, r1
 801e078:	4610      	mov	r0, r2
 801e07a:	4619      	mov	r1, r3
 801e07c:	f7e8 f9fe 	bl	800647c <__aeabi_d2f>
 801e080:	4603      	mov	r3, r0
 801e082:	4a24      	ldr	r2, [pc, #144]	; (801e114 <SENDfunc+0x1e4>)
 801e084:	6013      	str	r3, [r2, #0]

				  				  RS485receiveFlag = 0;
 801e086:	4b25      	ldr	r3, [pc, #148]	; (801e11c <SENDfunc+0x1ec>)
 801e088:	2200      	movs	r2, #0
 801e08a:	701a      	strb	r2, [r3, #0]

				  				  osMutexRelease(mutex_RS485Handle);
 801e08c:	4b1a      	ldr	r3, [pc, #104]	; (801e0f8 <SENDfunc+0x1c8>)
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	4618      	mov	r0, r3
 801e092:	f7fb fdf2 	bl	8019c7a <osMutexRelease>
				  	  	  for(uint8_t i = 0; i < 100 && !USBtoRS485_DONE; i++)
 801e096:	7fbb      	ldrb	r3, [r7, #30]
 801e098:	3301      	adds	r3, #1
 801e09a:	77bb      	strb	r3, [r7, #30]
 801e09c:	7fbb      	ldrb	r3, [r7, #30]
 801e09e:	2b63      	cmp	r3, #99	; 0x63
 801e0a0:	d803      	bhi.n	801e0aa <SENDfunc+0x17a>
 801e0a2:	7ffb      	ldrb	r3, [r7, #31]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	f43f af6a 	beq.w	801df7e <SENDfunc+0x4e>
				  			  }
				  		  }
				  	  	  if(!USBtoRS485_DONE) sprintf(USBTXbuffer, "ERR:Timeout");
 801e0aa:	7ffb      	ldrb	r3, [r7, #31]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d103      	bne.n	801e0b8 <SENDfunc+0x188>
 801e0b0:	491b      	ldr	r1, [pc, #108]	; (801e120 <SENDfunc+0x1f0>)
 801e0b2:	4817      	ldr	r0, [pc, #92]	; (801e110 <SENDfunc+0x1e0>)
 801e0b4:	f001 fadc 	bl	801f670 <siprintf>

				  		  osDelay(1);
 801e0b8:	2001      	movs	r0, #1
 801e0ba:	f7fb fcf2 	bl	8019aa2 <osDelay>
				  	 }

			break;
 801e0be:	e008      	b.n	801e0d2 <SENDfunc+0x1a2>

			default:
				sprintf(USBTXbuffer, "ERR:Parameter");
 801e0c0:	4918      	ldr	r1, [pc, #96]	; (801e124 <SENDfunc+0x1f4>)
 801e0c2:	4813      	ldr	r0, [pc, #76]	; (801e110 <SENDfunc+0x1e0>)
 801e0c4:	f001 fad4 	bl	801f670 <siprintf>
				break;
 801e0c8:	e004      	b.n	801e0d4 <SENDfunc+0x1a4>
	if(length != 1) return;
 801e0ca:	bf00      	nop
 801e0cc:	e002      	b.n	801e0d4 <SENDfunc+0x1a4>
	if(subwords[0].type != params) return;
 801e0ce:	bf00      	nop
 801e0d0:	e000      	b.n	801e0d4 <SENDfunc+0x1a4>
			break;
 801e0d2:	bf00      	nop
	}
}
 801e0d4:	3720      	adds	r7, #32
 801e0d6:	46bd      	mov	sp, r7
 801e0d8:	bd80      	pop	{r7, pc}
 801e0da:	bf00      	nop
 801e0dc:	f3af 8000 	nop.w
 801e0e0:	9999999a 	.word	0x9999999a
 801e0e4:	3fb99999 	.word	0x3fb99999
 801e0e8:	cccccccd 	.word	0xcccccccd
 801e0ec:	3feccccc 	.word	0x3feccccc
 801e0f0:	20000004 	.word	0x20000004
 801e0f4:	200009c0 	.word	0x200009c0
 801e0f8:	20000990 	.word	0x20000990
 801e0fc:	08020a8c 	.word	0x08020a8c
 801e100:	20000a2c 	.word	0x20000a2c
 801e104:	20000a18 	.word	0x20000a18
 801e108:	20001008 	.word	0x20001008
 801e10c:	08020a94 	.word	0x08020a94
 801e110:	200015e4 	.word	0x200015e4
 801e114:	20001bc8 	.word	0x20001bc8
 801e118:	08020aa0 	.word	0x08020aa0
 801e11c:	20012a6c 	.word	0x20012a6c
 801e120:	08020aa8 	.word	0x08020aa8
 801e124:	08020ab4 	.word	0x08020ab4

0801e128 <UDEV1SCPI_init>:

void UDEV1SCPI_init()
{
 801e128:	b580      	push	{r7, lr}
 801e12a:	af00      	add	r7, sp, #0
	addFunction("SEND", SENDfunc);
 801e12c:	4902      	ldr	r1, [pc, #8]	; (801e138 <UDEV1SCPI_init+0x10>)
 801e12e:	4803      	ldr	r0, [pc, #12]	; (801e13c <UDEV1SCPI_init+0x14>)
 801e130:	f7f7 f9ec 	bl	801550c <addFunction>
}
 801e134:	bf00      	nop
 801e136:	bd80      	pop	{r7, pc}
 801e138:	0801df31 	.word	0x0801df31
 801e13c:	08020ac4 	.word	0x08020ac4

0801e140 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 801e140:	b580      	push	{r7, lr}
 801e142:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 801e144:	f7f8 fe2b 	bl	8016d9e <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 801e148:	f000 f814 	bl	801e174 <USBPD_DPM_InitCore>
 801e14c:	4603      	mov	r3, r0
 801e14e:	2b00      	cmp	r3, #0
 801e150:	d000      	beq.n	801e154 <MX_USBPD_Init+0x14>
  {
    while(1);
 801e152:	e7fe      	b.n	801e152 <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 801e154:	f000 fa24 	bl	801e5a0 <USBPD_DPM_UserInit>
 801e158:	4603      	mov	r3, r0
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d000      	beq.n	801e160 <MX_USBPD_Init+0x20>
  {
    while(1);
 801e15e:	e7fe      	b.n	801e15e <MX_USBPD_Init+0x1e>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 801e160:	f000 f8b6 	bl	801e2d0 <USBPD_DPM_InitOS>
 801e164:	4603      	mov	r3, r0
 801e166:	2b00      	cmp	r3, #0
 801e168:	d000      	beq.n	801e16c <MX_USBPD_Init+0x2c>
  {
    while(1);
 801e16a:	e7fe      	b.n	801e16a <MX_USBPD_Init+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 801e16c:	b662      	cpsie	i
}
 801e16e:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801e170:	bf00      	nop
 801e172:	bd80      	pop	{r7, pc}

0801e174 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 801e174:	b580      	push	{r7, lr}
 801e176:	b082      	sub	sp, #8
 801e178:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801e17a:	2300      	movs	r3, #0
 801e17c:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 801e17e:	484f      	ldr	r0, [pc, #316]	; (801e2bc <USBPD_DPM_InitCore+0x148>)
 801e180:	f7e3 f95b 	bl	800143a <USBPD_PE_CheckLIB>
 801e184:	4603      	mov	r3, r0
 801e186:	2b01      	cmp	r3, #1
 801e188:	d001      	beq.n	801e18e <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 801e18a:	2302      	movs	r3, #2
 801e18c:	e092      	b.n	801e2b4 <USBPD_DPM_InitCore+0x140>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801e18e:	f7e3 f95f 	bl	8001450 <USBPD_PE_GetMemoryConsumption>
 801e192:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801e194:	2300      	movs	r3, #0
 801e196:	71bb      	strb	r3, [r7, #6]
 801e198:	e087      	b.n	801e2aa <USBPD_DPM_InitCore+0x136>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801e19a:	79bb      	ldrb	r3, [r7, #6]
 801e19c:	4a48      	ldr	r2, [pc, #288]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e19e:	009b      	lsls	r3, r3, #2
 801e1a0:	4413      	add	r3, r2
 801e1a2:	785a      	ldrb	r2, [r3, #1]
 801e1a4:	f36f 02c3 	bfc	r2, #3, #1
 801e1a8:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801e1aa:	79b9      	ldrb	r1, [r7, #6]
 801e1ac:	79ba      	ldrb	r2, [r7, #6]
 801e1ae:	4845      	ldr	r0, [pc, #276]	; (801e2c4 <USBPD_DPM_InitCore+0x150>)
 801e1b0:	460b      	mov	r3, r1
 801e1b2:	005b      	lsls	r3, r3, #1
 801e1b4:	440b      	add	r3, r1
 801e1b6:	009b      	lsls	r3, r3, #2
 801e1b8:	4403      	add	r3, r0
 801e1ba:	791b      	ldrb	r3, [r3, #4]
 801e1bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801e1c0:	b2d8      	uxtb	r0, r3
 801e1c2:	493f      	ldr	r1, [pc, #252]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e1c4:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e1c8:	f360 0301 	bfi	r3, r0, #0, #2
 801e1cc:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801e1d0:	79b9      	ldrb	r1, [r7, #6]
 801e1d2:	79ba      	ldrb	r2, [r7, #6]
 801e1d4:	483b      	ldr	r0, [pc, #236]	; (801e2c4 <USBPD_DPM_InitCore+0x150>)
 801e1d6:	460b      	mov	r3, r1
 801e1d8:	005b      	lsls	r3, r3, #1
 801e1da:	440b      	add	r3, r1
 801e1dc:	009b      	lsls	r3, r3, #2
 801e1de:	4403      	add	r3, r0
 801e1e0:	791b      	ldrb	r3, [r3, #4]
 801e1e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e1e6:	b2d8      	uxtb	r0, r3
 801e1e8:	4935      	ldr	r1, [pc, #212]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e1ea:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e1ee:	f360 0382 	bfi	r3, r0, #2, #1
 801e1f2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801e1f6:	79ba      	ldrb	r2, [r7, #6]
 801e1f8:	4931      	ldr	r1, [pc, #196]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e1fa:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e1fe:	f36f 1304 	bfc	r3, #4, #1
 801e202:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801e206:	79ba      	ldrb	r2, [r7, #6]
 801e208:	492d      	ldr	r1, [pc, #180]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e20a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e20e:	f36f 1387 	bfc	r3, #6, #2
 801e212:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801e216:	79bb      	ldrb	r3, [r7, #6]
 801e218:	4a29      	ldr	r2, [pc, #164]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e21a:	009b      	lsls	r3, r3, #2
 801e21c:	4413      	add	r3, r2
 801e21e:	785a      	ldrb	r2, [r3, #1]
 801e220:	f36f 1246 	bfc	r2, #5, #2
 801e224:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 801e226:	79bb      	ldrb	r3, [r7, #6]
 801e228:	4a25      	ldr	r2, [pc, #148]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e22a:	009b      	lsls	r3, r3, #2
 801e22c:	4413      	add	r3, r2
 801e22e:	785a      	ldrb	r2, [r3, #1]
 801e230:	f36f 12c7 	bfc	r2, #7, #1
 801e234:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 801e236:	79ba      	ldrb	r2, [r7, #6]
 801e238:	4613      	mov	r3, r2
 801e23a:	005b      	lsls	r3, r3, #1
 801e23c:	4413      	add	r3, r2
 801e23e:	009b      	lsls	r3, r3, #2
 801e240:	4a20      	ldr	r2, [pc, #128]	; (801e2c4 <USBPD_DPM_InitCore+0x150>)
 801e242:	441a      	add	r2, r3
 801e244:	79bb      	ldrb	r3, [r7, #6]
 801e246:	009b      	lsls	r3, r3, #2
 801e248:	491d      	ldr	r1, [pc, #116]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e24a:	440b      	add	r3, r1
 801e24c:	79b8      	ldrb	r0, [r7, #6]
 801e24e:	491e      	ldr	r1, [pc, #120]	; (801e2c8 <USBPD_DPM_InitCore+0x154>)
 801e250:	f7e1 ffe6 	bl	8000220 <USBPD_CAD_Init>
 801e254:	4603      	mov	r3, r0
 801e256:	2b00      	cmp	r3, #0
 801e258:	d001      	beq.n	801e25e <USBPD_DPM_InitCore+0xea>
 801e25a:	2302      	movs	r3, #2
 801e25c:	e02a      	b.n	801e2b4 <USBPD_DPM_InitCore+0x140>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 801e25e:	79ba      	ldrb	r2, [r7, #6]
 801e260:	4613      	mov	r3, r2
 801e262:	005b      	lsls	r3, r3, #1
 801e264:	4413      	add	r3, r2
 801e266:	009b      	lsls	r3, r3, #2
 801e268:	4a16      	ldr	r2, [pc, #88]	; (801e2c4 <USBPD_DPM_InitCore+0x150>)
 801e26a:	1899      	adds	r1, r3, r2
 801e26c:	79bb      	ldrb	r3, [r7, #6]
 801e26e:	009b      	lsls	r3, r3, #2
 801e270:	4a13      	ldr	r2, [pc, #76]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e272:	441a      	add	r2, r3
 801e274:	79b8      	ldrb	r0, [r7, #6]
 801e276:	4b15      	ldr	r3, [pc, #84]	; (801e2cc <USBPD_DPM_InitCore+0x158>)
 801e278:	f7e2 f8a0 	bl	80003bc <USBPD_PE_Init>
 801e27c:	4603      	mov	r3, r0
 801e27e:	71fb      	strb	r3, [r7, #7]
 801e280:	79fb      	ldrb	r3, [r7, #7]
 801e282:	2b00      	cmp	r3, #0
 801e284:	d001      	beq.n	801e28a <USBPD_DPM_InitCore+0x116>
 801e286:	79fb      	ldrb	r3, [r7, #7]
 801e288:	e014      	b.n	801e2b4 <USBPD_DPM_InitCore+0x140>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801e28a:	79bb      	ldrb	r3, [r7, #6]
 801e28c:	4a0c      	ldr	r2, [pc, #48]	; (801e2c0 <USBPD_DPM_InitCore+0x14c>)
 801e28e:	009b      	lsls	r3, r3, #2
 801e290:	4413      	add	r3, r2
 801e292:	785a      	ldrb	r2, [r3, #1]
 801e294:	f042 0208 	orr.w	r2, r2, #8
 801e298:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801e29a:	79bb      	ldrb	r3, [r7, #6]
 801e29c:	2101      	movs	r1, #1
 801e29e:	4618      	mov	r0, r3
 801e2a0:	f7e1 ffe6 	bl	8000270 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801e2a4:	79bb      	ldrb	r3, [r7, #6]
 801e2a6:	3301      	adds	r3, #1
 801e2a8:	71bb      	strb	r3, [r7, #6]
 801e2aa:	79bb      	ldrb	r3, [r7, #6]
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	f43f af74 	beq.w	801e19a <USBPD_DPM_InitCore+0x26>
  }

  return _retr;
 801e2b2:	79fb      	ldrb	r3, [r7, #7]
}
 801e2b4:	4618      	mov	r0, r3
 801e2b6:	3708      	adds	r7, #8
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	bd80      	pop	{r7, pc}
 801e2bc:	30410000 	.word	0x30410000
 801e2c0:	20012b40 	.word	0x20012b40
 801e2c4:	20000138 	.word	0x20000138
 801e2c8:	08020d3c 	.word	0x08020d3c
 801e2cc:	08020d44 	.word	0x08020d44

0801e2d0 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 801e2d0:	b580      	push	{r7, lr}
 801e2d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	2102      	movs	r1, #2
 801e2d8:	2002      	movs	r0, #2
 801e2da:	f7fb fd0b 	bl	8019cf4 <osMessageQueueNew>
 801e2de:	4603      	mov	r3, r0
 801e2e0:	4a0c      	ldr	r2, [pc, #48]	; (801e314 <USBPD_DPM_InitOS+0x44>)
 801e2e2:	6013      	str	r3, [r2, #0]
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
 801e2e4:	4a0c      	ldr	r2, [pc, #48]	; (801e318 <USBPD_DPM_InitOS+0x48>)
 801e2e6:	490b      	ldr	r1, [pc, #44]	; (801e314 <USBPD_DPM_InitOS+0x44>)
 801e2e8:	480c      	ldr	r0, [pc, #48]	; (801e31c <USBPD_DPM_InitOS+0x4c>)
 801e2ea:	f7fb fb1b 	bl	8019924 <osThreadNew>
 801e2ee:	4603      	mov	r3, r0
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d101      	bne.n	801e2f8 <USBPD_DPM_InitOS+0x28>
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 801e2f4:	2302      	movs	r3, #2
 801e2f6:	e00b      	b.n	801e310 <USBPD_DPM_InitOS+0x40>
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
#if USBPD_PORT_COUNT == 2
  PEQueueId[1] = osMessageCreate(osMessageQ(queuePE), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#else
  PEQueueId[0] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	2102      	movs	r1, #2
 801e2fc:	2001      	movs	r0, #1
 801e2fe:	f7fb fcf9 	bl	8019cf4 <osMessageQueueNew>
 801e302:	4603      	mov	r3, r0
 801e304:	4a06      	ldr	r2, [pc, #24]	; (801e320 <USBPD_DPM_InitOS+0x50>)
 801e306:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 801e308:	4b06      	ldr	r3, [pc, #24]	; (801e324 <USBPD_DPM_InitOS+0x54>)
 801e30a:	2200      	movs	r2, #0
 801e30c:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 801e30e:	2300      	movs	r3, #0
}
 801e310:	4618      	mov	r0, r3
 801e312:	bd80      	pop	{r7, pc}
 801e314:	20012b34 	.word	0x20012b34
 801e318:	200001c4 	.word	0x200001c4
 801e31c:	0801e3dd 	.word	0x0801e3dd
 801e320:	20012b3c 	.word	0x20012b3c
 801e324:	20012b38 	.word	0x20012b38

0801e328 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801e328:	b580      	push	{r7, lr}
 801e32a:	b084      	sub	sp, #16
 801e32c:	af00      	add	r7, sp, #0
 801e32e:	4603      	mov	r3, r0
 801e330:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 801e332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e336:	60fb      	str	r3, [r7, #12]
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
 801e338:	79fb      	ldrb	r3, [r7, #7]
 801e33a:	4a06      	ldr	r2, [pc, #24]	; (801e354 <USBPD_PE_TaskWakeUp+0x2c>)
 801e33c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e340:	f107 010c 	add.w	r1, r7, #12
 801e344:	2300      	movs	r3, #0
 801e346:	2200      	movs	r2, #0
 801e348:	f7fb fd48 	bl	8019ddc <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 801e34c:	bf00      	nop
 801e34e:	3710      	adds	r7, #16
 801e350:	46bd      	mov	sp, r7
 801e352:	bd80      	pop	{r7, pc}
 801e354:	20012b3c 	.word	0x20012b3c

0801e358 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801e358:	b580      	push	{r7, lr}
 801e35a:	b082      	sub	sp, #8
 801e35c:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 801e35e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e362:	607b      	str	r3, [r7, #4]
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
 801e364:	4b05      	ldr	r3, [pc, #20]	; (801e37c <USBPD_DPM_CADTaskWakeUp+0x24>)
 801e366:	6818      	ldr	r0, [r3, #0]
 801e368:	1d39      	adds	r1, r7, #4
 801e36a:	2300      	movs	r3, #0
 801e36c:	2200      	movs	r2, #0
 801e36e:	f7fb fd35 	bl	8019ddc <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 801e372:	bf00      	nop
 801e374:	3708      	adds	r7, #8
 801e376:	46bd      	mov	sp, r7
 801e378:	bd80      	pop	{r7, pc}
 801e37a:	bf00      	nop
 801e37c:	20012b34 	.word	0x20012b34

0801e380 <USBPD_PE_Task_P0>:
  * @brief  Main task for PE layer on Port0
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P0(void *argument)
{
 801e380:	b580      	push	{r7, lr}
 801e382:	b082      	sub	sp, #8
 801e384:	af00      	add	r7, sp, #0
 801e386:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_0);
 801e388:	2000      	movs	r0, #0
 801e38a:	f000 f80f 	bl	801e3ac <PE_Task>
}
 801e38e:	bf00      	nop
 801e390:	3708      	adds	r7, #8
 801e392:	46bd      	mov	sp, r7
 801e394:	bd80      	pop	{r7, pc}

0801e396 <USBPD_PE_Task_P1>:
  * @brief  Main task for PE layer on Port1
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P1(void *argument)
{
 801e396:	b580      	push	{r7, lr}
 801e398:	b082      	sub	sp, #8
 801e39a:	af00      	add	r7, sp, #0
 801e39c:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_1);
 801e39e:	2001      	movs	r0, #1
 801e3a0:	f000 f804 	bl	801e3ac <PE_Task>
}
 801e3a4:	bf00      	nop
 801e3a6:	3708      	adds	r7, #8
 801e3a8:	46bd      	mov	sp, r7
 801e3aa:	bd80      	pop	{r7, pc}

0801e3ac <PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
static void PE_Task(uint32_t PortNum)
{
 801e3ac:	b590      	push	{r4, r7, lr}
 801e3ae:	b085      	sub	sp, #20
 801e3b0:	af00      	add	r7, sp, #0
 801e3b2:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    uint32_t event;
    (void)osMessageQueueGet(PEQueueId[PortNum], &event, NULL,
 801e3b4:	4a08      	ldr	r2, [pc, #32]	; (801e3d8 <PE_Task+0x2c>)
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	b2db      	uxtb	r3, r3
 801e3c0:	4618      	mov	r0, r3
 801e3c2:	f7e3 fc95 	bl	8001cf0 <USBPD_PE_StateMachine_SNK>
 801e3c6:	4603      	mov	r3, r0
 801e3c8:	f107 010c 	add.w	r1, r7, #12
 801e3cc:	2200      	movs	r2, #0
 801e3ce:	4620      	mov	r0, r4
 801e3d0:	f7fb fd64 	bl	8019e9c <osMessageQueueGet>
  {
 801e3d4:	e7ee      	b.n	801e3b4 <PE_Task+0x8>
 801e3d6:	bf00      	nop
 801e3d8:	20012b3c 	.word	0x20012b3c

0801e3dc <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 801e3dc:	b590      	push	{r4, r7, lr}
 801e3de:	b085      	sub	sp, #20
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	6078      	str	r0, [r7, #4]
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
#else
    uint32_t event;
    (void)osMessageQueueGet(CADQueueId, &event, NULL, USBPD_CAD_Process());
 801e3e4:	4b05      	ldr	r3, [pc, #20]	; (801e3fc <USBPD_CAD_Task+0x20>)
 801e3e6:	681c      	ldr	r4, [r3, #0]
 801e3e8:	f7e1 ff49 	bl	800027e <USBPD_CAD_Process>
 801e3ec:	4603      	mov	r3, r0
 801e3ee:	f107 010c 	add.w	r1, r7, #12
 801e3f2:	2200      	movs	r2, #0
 801e3f4:	4620      	mov	r0, r4
 801e3f6:	f7fb fd51 	bl	8019e9c <osMessageQueueGet>
  {
 801e3fa:	e7f3      	b.n	801e3e4 <USBPD_CAD_Task+0x8>
 801e3fc:	20012b34 	.word	0x20012b34

0801e400 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801e400:	b580      	push	{r7, lr}
 801e402:	b084      	sub	sp, #16
 801e404:	af00      	add	r7, sp, #0
 801e406:	4603      	mov	r3, r0
 801e408:	603a      	str	r2, [r7, #0]
 801e40a:	71fb      	strb	r3, [r7, #7]
 801e40c:	460b      	mov	r3, r1
 801e40e:	71bb      	strb	r3, [r7, #6]

  switch (State)
 801e410:	79bb      	ldrb	r3, [r7, #6]
 801e412:	3b01      	subs	r3, #1
 801e414:	2b03      	cmp	r3, #3
 801e416:	d867      	bhi.n	801e4e8 <USBPD_DPM_CADCallback+0xe8>
 801e418:	a201      	add	r2, pc, #4	; (adr r2, 801e420 <USBPD_DPM_CADCallback+0x20>)
 801e41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e41e:	bf00      	nop
 801e420:	0801e44d 	.word	0x0801e44d
 801e424:	0801e43f 	.word	0x0801e43f
 801e428:	0801e44d 	.word	0x0801e44d
 801e42c:	0801e431 	.word	0x0801e431
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 801e430:	79b9      	ldrb	r1, [r7, #6]
 801e432:	79fb      	ldrb	r3, [r7, #7]
 801e434:	683a      	ldr	r2, [r7, #0]
 801e436:	4618      	mov	r0, r3
 801e438:	f000 f860 	bl	801e4fc <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 801e43c:	e055      	b.n	801e4ea <USBPD_DPM_CADCallback+0xea>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 801e43e:	79b9      	ldrb	r1, [r7, #6]
 801e440:	79fb      	ldrb	r3, [r7, #7]
 801e442:	683a      	ldr	r2, [r7, #0]
 801e444:	4618      	mov	r0, r3
 801e446:	f000 f859 	bl	801e4fc <DPM_ManageAttachedState>
      break;
 801e44a:	e04e      	b.n	801e4ea <USBPD_DPM_CADCallback+0xea>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 801e44c:	79fb      	ldrb	r3, [r7, #7]
 801e44e:	2100      	movs	r1, #0
 801e450:	4618      	mov	r0, r3
 801e452:	f7e2 f85c 	bl	800050e <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 801e456:	79fb      	ldrb	r3, [r7, #7]
 801e458:	4a26      	ldr	r2, [pc, #152]	; (801e4f4 <USBPD_DPM_CADCallback+0xf4>)
 801e45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d023      	beq.n	801e4aa <USBPD_DPM_CADCallback+0xaa>
      {
        uint8_t _timeout = 0;
 801e462:	2300      	movs	r3, #0
 801e464:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 801e466:	e008      	b.n	801e47a <USBPD_DPM_CADCallback+0x7a>
        {
          osDelay(1);
 801e468:	2001      	movs	r0, #1
 801e46a:	f7fb fb1a 	bl	8019aa2 <osDelay>
          _timeout++;
 801e46e:	7bfb      	ldrb	r3, [r7, #15]
 801e470:	3301      	adds	r3, #1
 801e472:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 801e474:	7bfb      	ldrb	r3, [r7, #15]
 801e476:	2b1e      	cmp	r3, #30
 801e478:	d80a      	bhi.n	801e490 <USBPD_DPM_CADCallback+0x90>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 801e47a:	79fb      	ldrb	r3, [r7, #7]
 801e47c:	4a1d      	ldr	r2, [pc, #116]	; (801e4f4 <USBPD_DPM_CADCallback+0xf4>)
 801e47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e482:	4618      	mov	r0, r3
 801e484:	f7fd f82e 	bl	801b4e4 <eTaskGetState>
 801e488:	4603      	mov	r3, r0
 801e48a:	2b02      	cmp	r3, #2
 801e48c:	d1ec      	bne.n	801e468 <USBPD_DPM_CADCallback+0x68>
 801e48e:	e000      	b.n	801e492 <USBPD_DPM_CADCallback+0x92>
          {
            break;
 801e490:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 801e492:	79fb      	ldrb	r3, [r7, #7]
 801e494:	4a17      	ldr	r2, [pc, #92]	; (801e4f4 <USBPD_DPM_CADCallback+0xf4>)
 801e496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e49a:	4618      	mov	r0, r3
 801e49c:	f7fb fad4 	bl	8019a48 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 801e4a0:	79fb      	ldrb	r3, [r7, #7]
 801e4a2:	4a14      	ldr	r2, [pc, #80]	; (801e4f4 <USBPD_DPM_CADCallback+0xf4>)
 801e4a4:	2100      	movs	r1, #0
 801e4a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801e4aa:	79fa      	ldrb	r2, [r7, #7]
 801e4ac:	4912      	ldr	r1, [pc, #72]	; (801e4f8 <USBPD_DPM_CADCallback+0xf8>)
 801e4ae:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e4b2:	f36f 1304 	bfc	r3, #4, #1
 801e4b6:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 801e4ba:	79fa      	ldrb	r2, [r7, #7]
 801e4bc:	490e      	ldr	r1, [pc, #56]	; (801e4f8 <USBPD_DPM_CADCallback+0xf8>)
 801e4be:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e4c2:	f36f 1387 	bfc	r3, #6, #2
 801e4c6:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801e4ca:	79fb      	ldrb	r3, [r7, #7]
 801e4cc:	4a0a      	ldr	r2, [pc, #40]	; (801e4f8 <USBPD_DPM_CADCallback+0xf8>)
 801e4ce:	009b      	lsls	r3, r3, #2
 801e4d0:	4413      	add	r3, r2
 801e4d2:	785a      	ldrb	r2, [r3, #1]
 801e4d4:	f36f 0202 	bfc	r2, #0, #3
 801e4d8:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801e4da:	79ba      	ldrb	r2, [r7, #6]
 801e4dc:	79fb      	ldrb	r3, [r7, #7]
 801e4de:	4611      	mov	r1, r2
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	f000 f865 	bl	801e5b0 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 801e4e6:	e000      	b.n	801e4ea <USBPD_DPM_CADCallback+0xea>
    }
    default :
      /* nothing to do */
      break;
 801e4e8:	bf00      	nop
  }
}
 801e4ea:	bf00      	nop
 801e4ec:	3710      	adds	r7, #16
 801e4ee:	46bd      	mov	sp, r7
 801e4f0:	bd80      	pop	{r7, pc}
 801e4f2:	bf00      	nop
 801e4f4:	20012b38 	.word	0x20012b38
 801e4f8:	20012b40 	.word	0x20012b40

0801e4fc <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801e4fc:	b590      	push	{r4, r7, lr}
 801e4fe:	b083      	sub	sp, #12
 801e500:	af00      	add	r7, sp, #0
 801e502:	4603      	mov	r3, r0
 801e504:	603a      	str	r2, [r7, #0]
 801e506:	71fb      	strb	r3, [r7, #7]
 801e508:	460b      	mov	r3, r1
 801e50a:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 801e50c:	79fa      	ldrb	r2, [r7, #7]
 801e50e:	683b      	ldr	r3, [r7, #0]
 801e510:	f003 0303 	and.w	r3, r3, #3
 801e514:	b2d8      	uxtb	r0, r3
 801e516:	491c      	ldr	r1, [pc, #112]	; (801e588 <DPM_ManageAttachedState+0x8c>)
 801e518:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801e51c:	f360 1387 	bfi	r3, r0, #6, #2
 801e520:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 801e524:	79fb      	ldrb	r3, [r7, #7]
 801e526:	2101      	movs	r1, #1
 801e528:	4618      	mov	r0, r3
 801e52a:	f7e1 fff0 	bl	800050e <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 801e52e:	79ba      	ldrb	r2, [r7, #6]
 801e530:	79fb      	ldrb	r3, [r7, #7]
 801e532:	4611      	mov	r1, r2
 801e534:	4618      	mov	r0, r3
 801e536:	f000 f83b 	bl	801e5b0 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 801e53a:	79fb      	ldrb	r3, [r7, #7]
 801e53c:	4a13      	ldr	r2, [pc, #76]	; (801e58c <DPM_ManageAttachedState+0x90>)
 801e53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e542:	2b00      	cmp	r3, #0
 801e544:	d11b      	bne.n	801e57e <DPM_ManageAttachedState+0x82>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
 801e546:	79fb      	ldrb	r3, [r7, #7]
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d101      	bne.n	801e550 <DPM_ManageAttachedState+0x54>
 801e54c:	4810      	ldr	r0, [pc, #64]	; (801e590 <DPM_ManageAttachedState+0x94>)
 801e54e:	e000      	b.n	801e552 <DPM_ManageAttachedState+0x56>
 801e550:	4810      	ldr	r0, [pc, #64]	; (801e594 <DPM_ManageAttachedState+0x98>)
 801e552:	79fb      	ldrb	r3, [r7, #7]
 801e554:	2b00      	cmp	r3, #0
 801e556:	d101      	bne.n	801e55c <DPM_ManageAttachedState+0x60>
 801e558:	4b0f      	ldr	r3, [pc, #60]	; (801e598 <DPM_ManageAttachedState+0x9c>)
 801e55a:	e000      	b.n	801e55e <DPM_ManageAttachedState+0x62>
 801e55c:	4b0f      	ldr	r3, [pc, #60]	; (801e59c <DPM_ManageAttachedState+0xa0>)
 801e55e:	79fc      	ldrb	r4, [r7, #7]
 801e560:	461a      	mov	r2, r3
 801e562:	2100      	movs	r1, #0
 801e564:	f7fb f9de 	bl	8019924 <osThreadNew>
 801e568:	4603      	mov	r3, r0
 801e56a:	4a08      	ldr	r2, [pc, #32]	; (801e58c <DPM_ManageAttachedState+0x90>)
 801e56c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 801e570:	79fb      	ldrb	r3, [r7, #7]
 801e572:	4a06      	ldr	r2, [pc, #24]	; (801e58c <DPM_ManageAttachedState+0x90>)
 801e574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e578:	2b00      	cmp	r3, #0
 801e57a:	d100      	bne.n	801e57e <DPM_ManageAttachedState+0x82>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 801e57c:	e7fe      	b.n	801e57c <DPM_ManageAttachedState+0x80>
    }
  }
}
 801e57e:	bf00      	nop
 801e580:	370c      	adds	r7, #12
 801e582:	46bd      	mov	sp, r7
 801e584:	bd90      	pop	{r4, r7, pc}
 801e586:	bf00      	nop
 801e588:	20012b40 	.word	0x20012b40
 801e58c:	20012b38 	.word	0x20012b38
 801e590:	0801e381 	.word	0x0801e381
 801e594:	0801e397 	.word	0x0801e397
 801e598:	2000017c 	.word	0x2000017c
 801e59c:	200001a0 	.word	0x200001a0

0801e5a0 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 801e5a0:	b480      	push	{r7}
 801e5a2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 801e5a4:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801e5a6:	4618      	mov	r0, r3
 801e5a8:	46bd      	mov	sp, r7
 801e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5ae:	4770      	bx	lr

0801e5b0 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801e5b0:	b480      	push	{r7}
 801e5b2:	b083      	sub	sp, #12
 801e5b4:	af00      	add	r7, sp, #0
 801e5b6:	4603      	mov	r3, r0
 801e5b8:	460a      	mov	r2, r1
 801e5ba:	71fb      	strb	r3, [r7, #7]
 801e5bc:	4613      	mov	r3, r2
 801e5be:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801e5c0:	bf00      	nop
 801e5c2:	370c      	adds	r7, #12
 801e5c4:	46bd      	mov	sp, r7
 801e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5ca:	4770      	bx	lr

0801e5cc <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801e5cc:	b480      	push	{r7}
 801e5ce:	b083      	sub	sp, #12
 801e5d0:	af00      	add	r7, sp, #0
 801e5d2:	4603      	mov	r3, r0
 801e5d4:	460a      	mov	r2, r1
 801e5d6:	71fb      	strb	r3, [r7, #7]
 801e5d8:	4613      	mov	r3, r2
 801e5da:	71bb      	strb	r3, [r7, #6]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 801e5dc:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801e5de:	bf00      	nop
 801e5e0:	370c      	adds	r7, #12
 801e5e2:	46bd      	mov	sp, r7
 801e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5e8:	4770      	bx	lr

0801e5ea <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801e5ea:	b480      	push	{r7}
 801e5ec:	b083      	sub	sp, #12
 801e5ee:	af00      	add	r7, sp, #0
 801e5f0:	4603      	mov	r3, r0
 801e5f2:	6039      	str	r1, [r7, #0]
 801e5f4:	71fb      	strb	r3, [r7, #7]
 801e5f6:	4613      	mov	r3, r2
 801e5f8:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 801e5fa:	bf00      	nop
 801e5fc:	370c      	adds	r7, #12
 801e5fe:	46bd      	mov	sp, r7
 801e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e604:	4770      	bx	lr

0801e606 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801e606:	b480      	push	{r7}
 801e608:	b085      	sub	sp, #20
 801e60a:	af00      	add	r7, sp, #0
 801e60c:	60ba      	str	r2, [r7, #8]
 801e60e:	607b      	str	r3, [r7, #4]
 801e610:	4603      	mov	r3, r0
 801e612:	73fb      	strb	r3, [r7, #15]
 801e614:	460b      	mov	r3, r1
 801e616:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 801e618:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801e61a:	bf00      	nop
 801e61c:	3714      	adds	r7, #20
 801e61e:	46bd      	mov	sp, r7
 801e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e624:	4770      	bx	lr

0801e626 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801e626:	b480      	push	{r7}
 801e628:	b085      	sub	sp, #20
 801e62a:	af00      	add	r7, sp, #0
 801e62c:	60ba      	str	r2, [r7, #8]
 801e62e:	607b      	str	r3, [r7, #4]
 801e630:	4603      	mov	r3, r0
 801e632:	73fb      	strb	r3, [r7, #15]
 801e634:	460b      	mov	r3, r1
 801e636:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 801e638:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 801e63a:	bf00      	nop
 801e63c:	3714      	adds	r7, #20
 801e63e:	46bd      	mov	sp, r7
 801e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e644:	4770      	bx	lr

0801e646 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801e646:	b480      	push	{r7}
 801e648:	b085      	sub	sp, #20
 801e64a:	af00      	add	r7, sp, #0
 801e64c:	4603      	mov	r3, r0
 801e64e:	60b9      	str	r1, [r7, #8]
 801e650:	607a      	str	r2, [r7, #4]
 801e652:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801e654:	bf00      	nop
 801e656:	3714      	adds	r7, #20
 801e658:	46bd      	mov	sp, r7
 801e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e65e:	4770      	bx	lr

0801e660 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801e660:	b480      	push	{r7}
 801e662:	b083      	sub	sp, #12
 801e664:	af00      	add	r7, sp, #0
 801e666:	603a      	str	r2, [r7, #0]
 801e668:	461a      	mov	r2, r3
 801e66a:	4603      	mov	r3, r0
 801e66c:	71fb      	strb	r3, [r7, #7]
 801e66e:	460b      	mov	r3, r1
 801e670:	71bb      	strb	r3, [r7, #6]
 801e672:	4613      	mov	r3, r2
 801e674:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801e676:	bf00      	nop
 801e678:	370c      	adds	r7, #12
 801e67a:	46bd      	mov	sp, r7
 801e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e680:	4770      	bx	lr

0801e682 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801e682:	b580      	push	{r7, lr}
 801e684:	b082      	sub	sp, #8
 801e686:	af00      	add	r7, sp, #0
 801e688:	4603      	mov	r3, r0
 801e68a:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801e68c:	79fb      	ldrb	r3, [r7, #7]
 801e68e:	4618      	mov	r0, r3
 801e690:	f7e1 fe86 	bl	80003a0 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801e694:	bf00      	nop
 801e696:	3708      	adds	r7, #8
 801e698:	46bd      	mov	sp, r7
 801e69a:	bd80      	pop	{r7, pc}

0801e69c <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801e69c:	b480      	push	{r7}
 801e69e:	b085      	sub	sp, #20
 801e6a0:	af00      	add	r7, sp, #0
 801e6a2:	4603      	mov	r3, r0
 801e6a4:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801e6a6:	230c      	movs	r3, #12
 801e6a8:	73fb      	strb	r3, [r7, #15]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801e6aa:	79fa      	ldrb	r2, [r7, #7]
 801e6ac:	492e      	ldr	r1, [pc, #184]	; (801e768 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e6ae:	4613      	mov	r3, r2
 801e6b0:	00db      	lsls	r3, r3, #3
 801e6b2:	1a9b      	subs	r3, r3, r2
 801e6b4:	00db      	lsls	r3, r3, #3
 801e6b6:	440b      	add	r3, r1
 801e6b8:	781b      	ldrb	r3, [r3, #0]
 801e6ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e6be:	b2db      	uxtb	r3, r3
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d019      	beq.n	801e6f8 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801e6c4:	79fa      	ldrb	r2, [r7, #7]
 801e6c6:	4928      	ldr	r1, [pc, #160]	; (801e768 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e6c8:	4613      	mov	r3, r2
 801e6ca:	00db      	lsls	r3, r3, #3
 801e6cc:	1a9b      	subs	r3, r3, r2
 801e6ce:	00db      	lsls	r3, r3, #3
 801e6d0:	440b      	add	r3, r1
 801e6d2:	781b      	ldrb	r3, [r3, #0]
 801e6d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e6d8:	b2db      	uxtb	r3, r3
 801e6da:	2b00      	cmp	r3, #0
 801e6dc:	d10f      	bne.n	801e6fe <USBPD_DPM_EvaluateDataRoleSwap+0x62>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801e6de:	79fa      	ldrb	r2, [r7, #7]
 801e6e0:	4921      	ldr	r1, [pc, #132]	; (801e768 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e6e2:	4613      	mov	r3, r2
 801e6e4:	00db      	lsls	r3, r3, #3
 801e6e6:	1a9b      	subs	r3, r3, r2
 801e6e8:	00db      	lsls	r3, r3, #3
 801e6ea:	440b      	add	r3, r1
 801e6ec:	781b      	ldrb	r3, [r3, #0]
 801e6ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e6f2:	b2db      	uxtb	r3, r3
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d102      	bne.n	801e6fe <USBPD_DPM_EvaluateDataRoleSwap+0x62>
  {
    status = USBPD_NOTSUPPORTED;
 801e6f8:	2301      	movs	r3, #1
 801e6fa:	73fb      	strb	r3, [r7, #15]
 801e6fc:	e02d      	b.n	801e75a <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801e6fe:	79fa      	ldrb	r2, [r7, #7]
 801e700:	4919      	ldr	r1, [pc, #100]	; (801e768 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e702:	4613      	mov	r3, r2
 801e704:	00db      	lsls	r3, r3, #3
 801e706:	1a9b      	subs	r3, r3, r2
 801e708:	00db      	lsls	r3, r3, #3
 801e70a:	440b      	add	r3, r1
 801e70c:	781b      	ldrb	r3, [r3, #0]
 801e70e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e712:	b2db      	uxtb	r3, r3
 801e714:	2b01      	cmp	r3, #1
 801e716:	d108      	bne.n	801e72a <USBPD_DPM_EvaluateDataRoleSwap+0x8e>
 801e718:	79fb      	ldrb	r3, [r7, #7]
 801e71a:	4a14      	ldr	r2, [pc, #80]	; (801e76c <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801e71c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801e720:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e724:	b2db      	uxtb	r3, r3
 801e726:	2b00      	cmp	r3, #0
 801e728:	d015      	beq.n	801e756 <USBPD_DPM_EvaluateDataRoleSwap+0xba>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801e72a:	79fa      	ldrb	r2, [r7, #7]
 801e72c:	490e      	ldr	r1, [pc, #56]	; (801e768 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e72e:	4613      	mov	r3, r2
 801e730:	00db      	lsls	r3, r3, #3
 801e732:	1a9b      	subs	r3, r3, r2
 801e734:	00db      	lsls	r3, r3, #3
 801e736:	440b      	add	r3, r1
 801e738:	781b      	ldrb	r3, [r3, #0]
 801e73a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e73e:	b2db      	uxtb	r3, r3
 801e740:	2b01      	cmp	r3, #1
 801e742:	d10a      	bne.n	801e75a <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
 801e744:	79fb      	ldrb	r3, [r7, #7]
 801e746:	4a09      	ldr	r2, [pc, #36]	; (801e76c <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801e748:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801e74c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e750:	b2db      	uxtb	r3, r3
 801e752:	2b01      	cmp	r3, #1
 801e754:	d101      	bne.n	801e75a <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
    {
      status = USBPD_ACCEPT;
 801e756:	230a      	movs	r3, #10
 801e758:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 801e75a:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801e75c:	4618      	mov	r0, r3
 801e75e:	3714      	adds	r7, #20
 801e760:	46bd      	mov	sp, r7
 801e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e766:	4770      	bx	lr
 801e768:	20000144 	.word	0x20000144
 801e76c:	20012b40 	.word	0x20012b40

0801e770 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801e770:	b580      	push	{r7, lr}
 801e772:	b082      	sub	sp, #8
 801e774:	af00      	add	r7, sp, #0
 801e776:	4603      	mov	r3, r0
 801e778:	460a      	mov	r2, r1
 801e77a:	71fb      	strb	r3, [r7, #7]
 801e77c:	4613      	mov	r3, r2
 801e77e:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801e780:	79ba      	ldrb	r2, [r7, #6]
 801e782:	79fb      	ldrb	r3, [r7, #7]
 801e784:	4611      	mov	r1, r2
 801e786:	4618      	mov	r0, r3
 801e788:	f000 f80a 	bl	801e7a0 <USBPD_PWR_IF_SupplyReady>
 801e78c:	4603      	mov	r3, r0
 801e78e:	2b00      	cmp	r3, #0
 801e790:	bf0c      	ite	eq
 801e792:	2301      	moveq	r3, #1
 801e794:	2300      	movne	r3, #0
 801e796:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801e798:	4618      	mov	r0, r3
 801e79a:	3708      	adds	r7, #8
 801e79c:	46bd      	mov	sp, r7
 801e79e:	bd80      	pop	{r7, pc}

0801e7a0 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801e7a0:	b580      	push	{r7, lr}
 801e7a2:	b084      	sub	sp, #16
 801e7a4:	af00      	add	r7, sp, #0
 801e7a6:	4603      	mov	r3, r0
 801e7a8:	460a      	mov	r2, r1
 801e7aa:	71fb      	strb	r3, [r7, #7]
 801e7ac:	4613      	mov	r3, r2
 801e7ae:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801e7b0:	2302      	movs	r3, #2
 801e7b2:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801e7b4:	79fb      	ldrb	r3, [r7, #7]
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d001      	beq.n	801e7be <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 801e7ba:	2302      	movs	r3, #2
 801e7bc:	e01c      	b.n	801e7f8 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801e7be:	79fb      	ldrb	r3, [r7, #7]
 801e7c0:	f107 0208 	add.w	r2, r7, #8
 801e7c4:	4611      	mov	r1, r2
 801e7c6:	4618      	mov	r0, r3
 801e7c8:	f000 f890 	bl	801e8ec <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 801e7cc:	79bb      	ldrb	r3, [r7, #6]
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d109      	bne.n	801e7e6 <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801e7d2:	68bb      	ldr	r3, [r7, #8]
 801e7d4:	f240 22ed 	movw	r2, #749	; 0x2ed
 801e7d8:	4293      	cmp	r3, r2
 801e7da:	d801      	bhi.n	801e7e0 <USBPD_PWR_IF_SupplyReady+0x40>
 801e7dc:	2300      	movs	r3, #0
 801e7de:	e000      	b.n	801e7e2 <USBPD_PWR_IF_SupplyReady+0x42>
 801e7e0:	2302      	movs	r3, #2
 801e7e2:	73fb      	strb	r3, [r7, #15]
 801e7e4:	e007      	b.n	801e7f6 <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801e7e6:	68bb      	ldr	r3, [r7, #8]
 801e7e8:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801e7ec:	d901      	bls.n	801e7f2 <USBPD_PWR_IF_SupplyReady+0x52>
 801e7ee:	2300      	movs	r3, #0
 801e7f0:	e000      	b.n	801e7f4 <USBPD_PWR_IF_SupplyReady+0x54>
 801e7f2:	2302      	movs	r3, #2
 801e7f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801e7f6:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 801e7f8:	4618      	mov	r0, r3
 801e7fa:	3710      	adds	r7, #16
 801e7fc:	46bd      	mov	sp, r7
 801e7fe:	bd80      	pop	{r7, pc}

0801e800 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801e800:	b580      	push	{r7, lr}
 801e802:	b084      	sub	sp, #16
 801e804:	af00      	add	r7, sp, #0
 801e806:	4603      	mov	r3, r0
 801e808:	460a      	mov	r2, r1
 801e80a:	71fb      	strb	r3, [r7, #7]
 801e80c:	4613      	mov	r3, r2
 801e80e:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801e810:	2300      	movs	r3, #0
 801e812:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801e814:	79fb      	ldrb	r3, [r7, #7]
 801e816:	4618      	mov	r0, r3
 801e818:	f7f9 f86e 	bl	80178f8 <HW_IF_PWR_GetVoltage>
 801e81c:	4603      	mov	r3, r0
 801e81e:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 801e820:	79bb      	ldrb	r3, [r7, #6]
 801e822:	2b02      	cmp	r3, #2
 801e824:	d015      	beq.n	801e852 <USBPD_PWR_IF_GetVBUSStatus+0x52>
 801e826:	2b02      	cmp	r3, #2
 801e828:	dc1a      	bgt.n	801e860 <USBPD_PWR_IF_GetVBUSStatus+0x60>
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d002      	beq.n	801e834 <USBPD_PWR_IF_GetVBUSStatus+0x34>
 801e82e:	2b01      	cmp	r3, #1
 801e830:	d008      	beq.n	801e844 <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801e832:	e015      	b.n	801e860 <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801e834:	68bb      	ldr	r3, [r7, #8]
 801e836:	f240 22ed 	movw	r2, #749	; 0x2ed
 801e83a:	4293      	cmp	r3, r2
 801e83c:	d812      	bhi.n	801e864 <USBPD_PWR_IF_GetVBUSStatus+0x64>
 801e83e:	2301      	movs	r3, #1
 801e840:	73fb      	strb	r3, [r7, #15]
    break;
 801e842:	e00f      	b.n	801e864 <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801e844:	68bb      	ldr	r3, [r7, #8]
 801e846:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801e84a:	d30d      	bcc.n	801e868 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 801e84c:	2301      	movs	r3, #1
 801e84e:	73fb      	strb	r3, [r7, #15]
    break;
 801e850:	e00a      	b.n	801e868 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801e852:	68bb      	ldr	r3, [r7, #8]
 801e854:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 801e858:	d208      	bcs.n	801e86c <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 801e85a:	2301      	movs	r3, #1
 801e85c:	73fb      	strb	r3, [r7, #15]
    break;
 801e85e:	e005      	b.n	801e86c <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 801e860:	bf00      	nop
 801e862:	e004      	b.n	801e86e <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801e864:	bf00      	nop
 801e866:	e002      	b.n	801e86e <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801e868:	bf00      	nop
 801e86a:	e000      	b.n	801e86e <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 801e86c:	bf00      	nop
  }
  return _status;
 801e86e:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801e870:	4618      	mov	r0, r3
 801e872:	3710      	adds	r7, #16
 801e874:	46bd      	mov	sp, r7
 801e876:	bd80      	pop	{r7, pc}

0801e878 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801e878:	b480      	push	{r7}
 801e87a:	b085      	sub	sp, #20
 801e87c:	af00      	add	r7, sp, #0
 801e87e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801e880:	2300      	movs	r3, #0
 801e882:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	2b00      	cmp	r3, #0
 801e888:	d002      	beq.n	801e890 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801e88a:	f06f 0301 	mvn.w	r3, #1
 801e88e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801e890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801e892:	4618      	mov	r0, r3
 801e894:	3714      	adds	r7, #20
 801e896:	46bd      	mov	sp, r7
 801e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e89c:	4770      	bx	lr

0801e89e <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801e89e:	b480      	push	{r7}
 801e8a0:	b085      	sub	sp, #20
 801e8a2:	af00      	add	r7, sp, #0
 801e8a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801e8a6:	2300      	movs	r3, #0
 801e8a8:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d002      	beq.n	801e8b6 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801e8b0:	f06f 0301 	mvn.w	r3, #1
 801e8b4:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 801e8b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801e8b8:	4618      	mov	r0, r3
 801e8ba:	3714      	adds	r7, #20
 801e8bc:	46bd      	mov	sp, r7
 801e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8c2:	4770      	bx	lr

0801e8c4 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801e8c4:	b480      	push	{r7}
 801e8c6:	b085      	sub	sp, #20
 801e8c8:	af00      	add	r7, sp, #0
 801e8ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801e8cc:	f06f 030a 	mvn.w	r3, #10
 801e8d0:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	2b00      	cmp	r3, #0
 801e8d6:	d002      	beq.n	801e8de <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801e8d8:	f06f 0301 	mvn.w	r3, #1
 801e8dc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801e8de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801e8e0:	4618      	mov	r0, r3
 801e8e2:	3714      	adds	r7, #20
 801e8e4:	46bd      	mov	sp, r7
 801e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ea:	4770      	bx	lr

0801e8ec <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801e8ec:	b480      	push	{r7}
 801e8ee:	b085      	sub	sp, #20
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	6078      	str	r0, [r7, #4]
 801e8f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */

  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 801e8f6:	2300      	movs	r3, #0
 801e8f8:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d102      	bne.n	801e906 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801e900:	683b      	ldr	r3, [r7, #0]
 801e902:	2b00      	cmp	r3, #0
 801e904:	d103      	bne.n	801e90e <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801e906:	f06f 0301 	mvn.w	r3, #1
 801e90a:	60fb      	str	r3, [r7, #12]
 801e90c:	e002      	b.n	801e914 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801e90e:	f06f 030a 	mvn.w	r3, #10
 801e912:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 801e914:	683b      	ldr	r3, [r7, #0]
 801e916:	68ba      	ldr	r2, [r7, #8]
 801e918:	601a      	str	r2, [r3, #0]
  return ret;
 801e91a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801e91c:	4618      	mov	r0, r3
 801e91e:	3714      	adds	r7, #20
 801e920:	46bd      	mov	sp, r7
 801e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e926:	4770      	bx	lr

0801e928 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801e928:	b580      	push	{r7, lr}
 801e92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801e92c:	2200      	movs	r2, #0
 801e92e:	4912      	ldr	r1, [pc, #72]	; (801e978 <MX_USB_Device_Init+0x50>)
 801e930:	4812      	ldr	r0, [pc, #72]	; (801e97c <MX_USB_Device_Init+0x54>)
 801e932:	f7f9 fe49 	bl	80185c8 <USBD_Init>
 801e936:	4603      	mov	r3, r0
 801e938:	2b00      	cmp	r3, #0
 801e93a:	d001      	beq.n	801e940 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801e93c:	f7e9 fdc6 	bl	80084cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801e940:	490f      	ldr	r1, [pc, #60]	; (801e980 <MX_USB_Device_Init+0x58>)
 801e942:	480e      	ldr	r0, [pc, #56]	; (801e97c <MX_USB_Device_Init+0x54>)
 801e944:	f7f9 fe70 	bl	8018628 <USBD_RegisterClass>
 801e948:	4603      	mov	r3, r0
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	d001      	beq.n	801e952 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801e94e:	f7e9 fdbd 	bl	80084cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801e952:	490c      	ldr	r1, [pc, #48]	; (801e984 <MX_USB_Device_Init+0x5c>)
 801e954:	4809      	ldr	r0, [pc, #36]	; (801e97c <MX_USB_Device_Init+0x54>)
 801e956:	f7f9 fd91 	bl	801847c <USBD_CDC_RegisterInterface>
 801e95a:	4603      	mov	r3, r0
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d001      	beq.n	801e964 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801e960:	f7e9 fdb4 	bl	80084cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801e964:	4805      	ldr	r0, [pc, #20]	; (801e97c <MX_USB_Device_Init+0x54>)
 801e966:	f7f9 fe86 	bl	8018676 <USBD_Start>
 801e96a:	4603      	mov	r3, r0
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d001      	beq.n	801e974 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801e970:	f7e9 fdac 	bl	80084cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801e974:	bf00      	nop
 801e976:	bd80      	pop	{r7, pc}
 801e978:	200001fc 	.word	0x200001fc
 801e97c:	20012b44 	.word	0x20012b44
 801e980:	20000030 	.word	0x20000030
 801e984:	200001e8 	.word	0x200001e8

0801e988 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801e988:	b580      	push	{r7, lr}
 801e98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801e98c:	2200      	movs	r2, #0
 801e98e:	4905      	ldr	r1, [pc, #20]	; (801e9a4 <CDC_Init_FS+0x1c>)
 801e990:	4805      	ldr	r0, [pc, #20]	; (801e9a8 <CDC_Init_FS+0x20>)
 801e992:	f7f9 fd88 	bl	80184a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801e996:	4905      	ldr	r1, [pc, #20]	; (801e9ac <CDC_Init_FS+0x24>)
 801e998:	4803      	ldr	r0, [pc, #12]	; (801e9a8 <CDC_Init_FS+0x20>)
 801e99a:	f7f9 fda2 	bl	80184e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801e99e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801e9a0:	4618      	mov	r0, r3
 801e9a2:	bd80      	pop	{r7, pc}
 801e9a4:	20013614 	.word	0x20013614
 801e9a8:	20012b44 	.word	0x20012b44
 801e9ac:	20012e14 	.word	0x20012e14

0801e9b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801e9b0:	b480      	push	{r7}
 801e9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801e9b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801e9b6:	4618      	mov	r0, r3
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9be:	4770      	bx	lr

0801e9c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801e9c0:	b480      	push	{r7}
 801e9c2:	b083      	sub	sp, #12
 801e9c4:	af00      	add	r7, sp, #0
 801e9c6:	4603      	mov	r3, r0
 801e9c8:	6039      	str	r1, [r7, #0]
 801e9ca:	71fb      	strb	r3, [r7, #7]
 801e9cc:	4613      	mov	r3, r2
 801e9ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801e9d0:	79fb      	ldrb	r3, [r7, #7]
 801e9d2:	2b23      	cmp	r3, #35	; 0x23
 801e9d4:	d84a      	bhi.n	801ea6c <CDC_Control_FS+0xac>
 801e9d6:	a201      	add	r2, pc, #4	; (adr r2, 801e9dc <CDC_Control_FS+0x1c>)
 801e9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e9dc:	0801ea6d 	.word	0x0801ea6d
 801e9e0:	0801ea6d 	.word	0x0801ea6d
 801e9e4:	0801ea6d 	.word	0x0801ea6d
 801e9e8:	0801ea6d 	.word	0x0801ea6d
 801e9ec:	0801ea6d 	.word	0x0801ea6d
 801e9f0:	0801ea6d 	.word	0x0801ea6d
 801e9f4:	0801ea6d 	.word	0x0801ea6d
 801e9f8:	0801ea6d 	.word	0x0801ea6d
 801e9fc:	0801ea6d 	.word	0x0801ea6d
 801ea00:	0801ea6d 	.word	0x0801ea6d
 801ea04:	0801ea6d 	.word	0x0801ea6d
 801ea08:	0801ea6d 	.word	0x0801ea6d
 801ea0c:	0801ea6d 	.word	0x0801ea6d
 801ea10:	0801ea6d 	.word	0x0801ea6d
 801ea14:	0801ea6d 	.word	0x0801ea6d
 801ea18:	0801ea6d 	.word	0x0801ea6d
 801ea1c:	0801ea6d 	.word	0x0801ea6d
 801ea20:	0801ea6d 	.word	0x0801ea6d
 801ea24:	0801ea6d 	.word	0x0801ea6d
 801ea28:	0801ea6d 	.word	0x0801ea6d
 801ea2c:	0801ea6d 	.word	0x0801ea6d
 801ea30:	0801ea6d 	.word	0x0801ea6d
 801ea34:	0801ea6d 	.word	0x0801ea6d
 801ea38:	0801ea6d 	.word	0x0801ea6d
 801ea3c:	0801ea6d 	.word	0x0801ea6d
 801ea40:	0801ea6d 	.word	0x0801ea6d
 801ea44:	0801ea6d 	.word	0x0801ea6d
 801ea48:	0801ea6d 	.word	0x0801ea6d
 801ea4c:	0801ea6d 	.word	0x0801ea6d
 801ea50:	0801ea6d 	.word	0x0801ea6d
 801ea54:	0801ea6d 	.word	0x0801ea6d
 801ea58:	0801ea6d 	.word	0x0801ea6d
 801ea5c:	0801ea6d 	.word	0x0801ea6d
 801ea60:	0801ea6d 	.word	0x0801ea6d
 801ea64:	0801ea6d 	.word	0x0801ea6d
 801ea68:	0801ea6d 	.word	0x0801ea6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801ea6c:	bf00      	nop
  }

  return (USBD_OK);
 801ea6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ea70:	4618      	mov	r0, r3
 801ea72:	370c      	adds	r7, #12
 801ea74:	46bd      	mov	sp, r7
 801ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea7a:	4770      	bx	lr

0801ea7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ea7c:	b580      	push	{r7, lr}
 801ea7e:	b082      	sub	sp, #8
 801ea80:	af00      	add	r7, sp, #0
 801ea82:	6078      	str	r0, [r7, #4]
 801ea84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ea86:	6879      	ldr	r1, [r7, #4]
 801ea88:	480b      	ldr	r0, [pc, #44]	; (801eab8 <CDC_Receive_FS+0x3c>)
 801ea8a:	f7f9 fd2a 	bl	80184e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ea8e:	480a      	ldr	r0, [pc, #40]	; (801eab8 <CDC_Receive_FS+0x3c>)
 801ea90:	f7f9 fd70 	bl	8018574 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 801ea94:	683b      	ldr	r3, [r7, #0]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	4619      	mov	r1, r3
 801ea9a:	4808      	ldr	r0, [pc, #32]	; (801eabc <CDC_Receive_FS+0x40>)
 801ea9c:	f7e9 f8a4 	bl	8007be8 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 801eaa0:	683b      	ldr	r3, [r7, #0]
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	461a      	mov	r2, r3
 801eaa6:	2100      	movs	r1, #0
 801eaa8:	4804      	ldr	r0, [pc, #16]	; (801eabc <CDC_Receive_FS+0x40>)
 801eaaa:	f000 fe01 	bl	801f6b0 <memset>
  return (USBD_OK);
 801eaae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801eab0:	4618      	mov	r0, r3
 801eab2:	3708      	adds	r7, #8
 801eab4:	46bd      	mov	sp, r7
 801eab6:	bd80      	pop	{r7, pc}
 801eab8:	20012b44 	.word	0x20012b44
 801eabc:	20012e14 	.word	0x20012e14

0801eac0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801eac0:	b580      	push	{r7, lr}
 801eac2:	b084      	sub	sp, #16
 801eac4:	af00      	add	r7, sp, #0
 801eac6:	6078      	str	r0, [r7, #4]
 801eac8:	460b      	mov	r3, r1
 801eaca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801eacc:	2300      	movs	r3, #0
 801eace:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801ead0:	4b0d      	ldr	r3, [pc, #52]	; (801eb08 <CDC_Transmit_FS+0x48>)
 801ead2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ead6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801ead8:	68bb      	ldr	r3, [r7, #8]
 801eada:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801eade:	2b00      	cmp	r3, #0
 801eae0:	d001      	beq.n	801eae6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801eae2:	2301      	movs	r3, #1
 801eae4:	e00b      	b.n	801eafe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801eae6:	887b      	ldrh	r3, [r7, #2]
 801eae8:	461a      	mov	r2, r3
 801eaea:	6879      	ldr	r1, [r7, #4]
 801eaec:	4806      	ldr	r0, [pc, #24]	; (801eb08 <CDC_Transmit_FS+0x48>)
 801eaee:	f7f9 fcda 	bl	80184a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801eaf2:	4805      	ldr	r0, [pc, #20]	; (801eb08 <CDC_Transmit_FS+0x48>)
 801eaf4:	f7f9 fd0e 	bl	8018514 <USBD_CDC_TransmitPacket>
 801eaf8:	4603      	mov	r3, r0
 801eafa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801eafc:	7bfb      	ldrb	r3, [r7, #15]
}
 801eafe:	4618      	mov	r0, r3
 801eb00:	3710      	adds	r7, #16
 801eb02:	46bd      	mov	sp, r7
 801eb04:	bd80      	pop	{r7, pc}
 801eb06:	bf00      	nop
 801eb08:	20012b44 	.word	0x20012b44

0801eb0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801eb0c:	b480      	push	{r7}
 801eb0e:	b087      	sub	sp, #28
 801eb10:	af00      	add	r7, sp, #0
 801eb12:	60f8      	str	r0, [r7, #12]
 801eb14:	60b9      	str	r1, [r7, #8]
 801eb16:	4613      	mov	r3, r2
 801eb18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801eb1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801eb22:	4618      	mov	r0, r3
 801eb24:	371c      	adds	r7, #28
 801eb26:	46bd      	mov	sp, r7
 801eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb2c:	4770      	bx	lr
	...

0801eb30 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801eb30:	b480      	push	{r7}
 801eb32:	b083      	sub	sp, #12
 801eb34:	af00      	add	r7, sp, #0
 801eb36:	4603      	mov	r3, r0
 801eb38:	6039      	str	r1, [r7, #0]
 801eb3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801eb3c:	683b      	ldr	r3, [r7, #0]
 801eb3e:	2212      	movs	r2, #18
 801eb40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801eb42:	4b03      	ldr	r3, [pc, #12]	; (801eb50 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801eb44:	4618      	mov	r0, r3
 801eb46:	370c      	adds	r7, #12
 801eb48:	46bd      	mov	sp, r7
 801eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb4e:	4770      	bx	lr
 801eb50:	2000021c 	.word	0x2000021c

0801eb54 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801eb54:	b480      	push	{r7}
 801eb56:	b083      	sub	sp, #12
 801eb58:	af00      	add	r7, sp, #0
 801eb5a:	4603      	mov	r3, r0
 801eb5c:	6039      	str	r1, [r7, #0]
 801eb5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801eb60:	683b      	ldr	r3, [r7, #0]
 801eb62:	2204      	movs	r2, #4
 801eb64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801eb66:	4b03      	ldr	r3, [pc, #12]	; (801eb74 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801eb68:	4618      	mov	r0, r3
 801eb6a:	370c      	adds	r7, #12
 801eb6c:	46bd      	mov	sp, r7
 801eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb72:	4770      	bx	lr
 801eb74:	20000230 	.word	0x20000230

0801eb78 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801eb78:	b580      	push	{r7, lr}
 801eb7a:	b082      	sub	sp, #8
 801eb7c:	af00      	add	r7, sp, #0
 801eb7e:	4603      	mov	r3, r0
 801eb80:	6039      	str	r1, [r7, #0]
 801eb82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801eb84:	79fb      	ldrb	r3, [r7, #7]
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d105      	bne.n	801eb96 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801eb8a:	683a      	ldr	r2, [r7, #0]
 801eb8c:	4907      	ldr	r1, [pc, #28]	; (801ebac <USBD_CDC_ProductStrDescriptor+0x34>)
 801eb8e:	4808      	ldr	r0, [pc, #32]	; (801ebb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 801eb90:	f7fa fd59 	bl	8019646 <USBD_GetString>
 801eb94:	e004      	b.n	801eba0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801eb96:	683a      	ldr	r2, [r7, #0]
 801eb98:	4904      	ldr	r1, [pc, #16]	; (801ebac <USBD_CDC_ProductStrDescriptor+0x34>)
 801eb9a:	4805      	ldr	r0, [pc, #20]	; (801ebb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 801eb9c:	f7fa fd53 	bl	8019646 <USBD_GetString>
  }
  return USBD_StrDesc;
 801eba0:	4b02      	ldr	r3, [pc, #8]	; (801ebac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801eba2:	4618      	mov	r0, r3
 801eba4:	3708      	adds	r7, #8
 801eba6:	46bd      	mov	sp, r7
 801eba8:	bd80      	pop	{r7, pc}
 801ebaa:	bf00      	nop
 801ebac:	20013e14 	.word	0x20013e14
 801ebb0:	08020ae0 	.word	0x08020ae0

0801ebb4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ebb4:	b580      	push	{r7, lr}
 801ebb6:	b082      	sub	sp, #8
 801ebb8:	af00      	add	r7, sp, #0
 801ebba:	4603      	mov	r3, r0
 801ebbc:	6039      	str	r1, [r7, #0]
 801ebbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ebc0:	683a      	ldr	r2, [r7, #0]
 801ebc2:	4904      	ldr	r1, [pc, #16]	; (801ebd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801ebc4:	4804      	ldr	r0, [pc, #16]	; (801ebd8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801ebc6:	f7fa fd3e 	bl	8019646 <USBD_GetString>
  return USBD_StrDesc;
 801ebca:	4b02      	ldr	r3, [pc, #8]	; (801ebd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801ebcc:	4618      	mov	r0, r3
 801ebce:	3708      	adds	r7, #8
 801ebd0:	46bd      	mov	sp, r7
 801ebd2:	bd80      	pop	{r7, pc}
 801ebd4:	20013e14 	.word	0x20013e14
 801ebd8:	08020ae8 	.word	0x08020ae8

0801ebdc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ebdc:	b580      	push	{r7, lr}
 801ebde:	b082      	sub	sp, #8
 801ebe0:	af00      	add	r7, sp, #0
 801ebe2:	4603      	mov	r3, r0
 801ebe4:	6039      	str	r1, [r7, #0]
 801ebe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ebe8:	683b      	ldr	r3, [r7, #0]
 801ebea:	221a      	movs	r2, #26
 801ebec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ebee:	f000 f843 	bl	801ec78 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801ebf2:	4b02      	ldr	r3, [pc, #8]	; (801ebfc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	3708      	adds	r7, #8
 801ebf8:	46bd      	mov	sp, r7
 801ebfa:	bd80      	pop	{r7, pc}
 801ebfc:	20000234 	.word	0x20000234

0801ec00 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ec00:	b580      	push	{r7, lr}
 801ec02:	b082      	sub	sp, #8
 801ec04:	af00      	add	r7, sp, #0
 801ec06:	4603      	mov	r3, r0
 801ec08:	6039      	str	r1, [r7, #0]
 801ec0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ec0c:	79fb      	ldrb	r3, [r7, #7]
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d105      	bne.n	801ec1e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801ec12:	683a      	ldr	r2, [r7, #0]
 801ec14:	4907      	ldr	r1, [pc, #28]	; (801ec34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801ec16:	4808      	ldr	r0, [pc, #32]	; (801ec38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801ec18:	f7fa fd15 	bl	8019646 <USBD_GetString>
 801ec1c:	e004      	b.n	801ec28 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801ec1e:	683a      	ldr	r2, [r7, #0]
 801ec20:	4904      	ldr	r1, [pc, #16]	; (801ec34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801ec22:	4805      	ldr	r0, [pc, #20]	; (801ec38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801ec24:	f7fa fd0f 	bl	8019646 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ec28:	4b02      	ldr	r3, [pc, #8]	; (801ec34 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801ec2a:	4618      	mov	r0, r3
 801ec2c:	3708      	adds	r7, #8
 801ec2e:	46bd      	mov	sp, r7
 801ec30:	bd80      	pop	{r7, pc}
 801ec32:	bf00      	nop
 801ec34:	20013e14 	.word	0x20013e14
 801ec38:	08020afc 	.word	0x08020afc

0801ec3c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ec3c:	b580      	push	{r7, lr}
 801ec3e:	b082      	sub	sp, #8
 801ec40:	af00      	add	r7, sp, #0
 801ec42:	4603      	mov	r3, r0
 801ec44:	6039      	str	r1, [r7, #0]
 801ec46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ec48:	79fb      	ldrb	r3, [r7, #7]
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d105      	bne.n	801ec5a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801ec4e:	683a      	ldr	r2, [r7, #0]
 801ec50:	4907      	ldr	r1, [pc, #28]	; (801ec70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801ec52:	4808      	ldr	r0, [pc, #32]	; (801ec74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801ec54:	f7fa fcf7 	bl	8019646 <USBD_GetString>
 801ec58:	e004      	b.n	801ec64 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801ec5a:	683a      	ldr	r2, [r7, #0]
 801ec5c:	4904      	ldr	r1, [pc, #16]	; (801ec70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801ec5e:	4805      	ldr	r0, [pc, #20]	; (801ec74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801ec60:	f7fa fcf1 	bl	8019646 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ec64:	4b02      	ldr	r3, [pc, #8]	; (801ec70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801ec66:	4618      	mov	r0, r3
 801ec68:	3708      	adds	r7, #8
 801ec6a:	46bd      	mov	sp, r7
 801ec6c:	bd80      	pop	{r7, pc}
 801ec6e:	bf00      	nop
 801ec70:	20013e14 	.word	0x20013e14
 801ec74:	08020b08 	.word	0x08020b08

0801ec78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ec78:	b580      	push	{r7, lr}
 801ec7a:	b084      	sub	sp, #16
 801ec7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ec7e:	4b0f      	ldr	r3, [pc, #60]	; (801ecbc <Get_SerialNum+0x44>)
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ec84:	4b0e      	ldr	r3, [pc, #56]	; (801ecc0 <Get_SerialNum+0x48>)
 801ec86:	681b      	ldr	r3, [r3, #0]
 801ec88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ec8a:	4b0e      	ldr	r3, [pc, #56]	; (801ecc4 <Get_SerialNum+0x4c>)
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801ec90:	68fa      	ldr	r2, [r7, #12]
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	4413      	add	r3, r2
 801ec96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ec98:	68fb      	ldr	r3, [r7, #12]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d009      	beq.n	801ecb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ec9e:	2208      	movs	r2, #8
 801eca0:	4909      	ldr	r1, [pc, #36]	; (801ecc8 <Get_SerialNum+0x50>)
 801eca2:	68f8      	ldr	r0, [r7, #12]
 801eca4:	f000 f814 	bl	801ecd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801eca8:	2204      	movs	r2, #4
 801ecaa:	4908      	ldr	r1, [pc, #32]	; (801eccc <Get_SerialNum+0x54>)
 801ecac:	68b8      	ldr	r0, [r7, #8]
 801ecae:	f000 f80f 	bl	801ecd0 <IntToUnicode>
  }
}
 801ecb2:	bf00      	nop
 801ecb4:	3710      	adds	r7, #16
 801ecb6:	46bd      	mov	sp, r7
 801ecb8:	bd80      	pop	{r7, pc}
 801ecba:	bf00      	nop
 801ecbc:	1fff7590 	.word	0x1fff7590
 801ecc0:	1fff7594 	.word	0x1fff7594
 801ecc4:	1fff7598 	.word	0x1fff7598
 801ecc8:	20000236 	.word	0x20000236
 801eccc:	20000246 	.word	0x20000246

0801ecd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ecd0:	b480      	push	{r7}
 801ecd2:	b087      	sub	sp, #28
 801ecd4:	af00      	add	r7, sp, #0
 801ecd6:	60f8      	str	r0, [r7, #12]
 801ecd8:	60b9      	str	r1, [r7, #8]
 801ecda:	4613      	mov	r3, r2
 801ecdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ecde:	2300      	movs	r3, #0
 801ece0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ece2:	2300      	movs	r3, #0
 801ece4:	75fb      	strb	r3, [r7, #23]
 801ece6:	e027      	b.n	801ed38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801ece8:	68fb      	ldr	r3, [r7, #12]
 801ecea:	0f1b      	lsrs	r3, r3, #28
 801ecec:	2b09      	cmp	r3, #9
 801ecee:	d80b      	bhi.n	801ed08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801ecf0:	68fb      	ldr	r3, [r7, #12]
 801ecf2:	0f1b      	lsrs	r3, r3, #28
 801ecf4:	b2da      	uxtb	r2, r3
 801ecf6:	7dfb      	ldrb	r3, [r7, #23]
 801ecf8:	005b      	lsls	r3, r3, #1
 801ecfa:	4619      	mov	r1, r3
 801ecfc:	68bb      	ldr	r3, [r7, #8]
 801ecfe:	440b      	add	r3, r1
 801ed00:	3230      	adds	r2, #48	; 0x30
 801ed02:	b2d2      	uxtb	r2, r2
 801ed04:	701a      	strb	r2, [r3, #0]
 801ed06:	e00a      	b.n	801ed1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ed08:	68fb      	ldr	r3, [r7, #12]
 801ed0a:	0f1b      	lsrs	r3, r3, #28
 801ed0c:	b2da      	uxtb	r2, r3
 801ed0e:	7dfb      	ldrb	r3, [r7, #23]
 801ed10:	005b      	lsls	r3, r3, #1
 801ed12:	4619      	mov	r1, r3
 801ed14:	68bb      	ldr	r3, [r7, #8]
 801ed16:	440b      	add	r3, r1
 801ed18:	3237      	adds	r2, #55	; 0x37
 801ed1a:	b2d2      	uxtb	r2, r2
 801ed1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801ed1e:	68fb      	ldr	r3, [r7, #12]
 801ed20:	011b      	lsls	r3, r3, #4
 801ed22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ed24:	7dfb      	ldrb	r3, [r7, #23]
 801ed26:	005b      	lsls	r3, r3, #1
 801ed28:	3301      	adds	r3, #1
 801ed2a:	68ba      	ldr	r2, [r7, #8]
 801ed2c:	4413      	add	r3, r2
 801ed2e:	2200      	movs	r2, #0
 801ed30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ed32:	7dfb      	ldrb	r3, [r7, #23]
 801ed34:	3301      	adds	r3, #1
 801ed36:	75fb      	strb	r3, [r7, #23]
 801ed38:	7dfa      	ldrb	r2, [r7, #23]
 801ed3a:	79fb      	ldrb	r3, [r7, #7]
 801ed3c:	429a      	cmp	r2, r3
 801ed3e:	d3d3      	bcc.n	801ece8 <IntToUnicode+0x18>
  }
}
 801ed40:	bf00      	nop
 801ed42:	bf00      	nop
 801ed44:	371c      	adds	r7, #28
 801ed46:	46bd      	mov	sp, r7
 801ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed4c:	4770      	bx	lr
	...

0801ed50 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ed50:	b580      	push	{r7, lr}
 801ed52:	b098      	sub	sp, #96	; 0x60
 801ed54:	af00      	add	r7, sp, #0
 801ed56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801ed58:	f107 030c 	add.w	r3, r7, #12
 801ed5c:	2254      	movs	r2, #84	; 0x54
 801ed5e:	2100      	movs	r1, #0
 801ed60:	4618      	mov	r0, r3
 801ed62:	f000 fca5 	bl	801f6b0 <memset>
  if(pcdHandle->Instance==USB)
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	681b      	ldr	r3, [r3, #0]
 801ed6a:	4a19      	ldr	r2, [pc, #100]	; (801edd0 <HAL_PCD_MspInit+0x80>)
 801ed6c:	4293      	cmp	r3, r2
 801ed6e:	d12b      	bne.n	801edc8 <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801ed70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801ed74:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801ed76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801ed7a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801ed7c:	f107 030c 	add.w	r3, r7, #12
 801ed80:	4618      	mov	r0, r3
 801ed82:	f7ef fb41 	bl	800e408 <HAL_RCCEx_PeriphCLKConfig>
 801ed86:	4603      	mov	r3, r0
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d001      	beq.n	801ed90 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 801ed8c:	f7e9 fb9e 	bl	80084cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801ed90:	4b10      	ldr	r3, [pc, #64]	; (801edd4 <HAL_PCD_MspInit+0x84>)
 801ed92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ed94:	4a0f      	ldr	r2, [pc, #60]	; (801edd4 <HAL_PCD_MspInit+0x84>)
 801ed96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801ed9a:	6593      	str	r3, [r2, #88]	; 0x58
 801ed9c:	4b0d      	ldr	r3, [pc, #52]	; (801edd4 <HAL_PCD_MspInit+0x84>)
 801ed9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801eda0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801eda4:	60bb      	str	r3, [r7, #8]
 801eda6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 5, 0);
 801eda8:	2200      	movs	r2, #0
 801edaa:	2105      	movs	r1, #5
 801edac:	2013      	movs	r0, #19
 801edae:	f7ec f9a5 	bl	800b0fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 801edb2:	2013      	movs	r0, #19
 801edb4:	f7ec f9bc 	bl	800b130 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801edb8:	2200      	movs	r2, #0
 801edba:	2105      	movs	r1, #5
 801edbc:	2014      	movs	r0, #20
 801edbe:	f7ec f99d 	bl	800b0fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801edc2:	2014      	movs	r0, #20
 801edc4:	f7ec f9b4 	bl	800b130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801edc8:	bf00      	nop
 801edca:	3760      	adds	r7, #96	; 0x60
 801edcc:	46bd      	mov	sp, r7
 801edce:	bd80      	pop	{r7, pc}
 801edd0:	40005c00 	.word	0x40005c00
 801edd4:	40021000 	.word	0x40021000

0801edd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801edd8:	b580      	push	{r7, lr}
 801edda:	b082      	sub	sp, #8
 801eddc:	af00      	add	r7, sp, #0
 801edde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ede0:	687b      	ldr	r3, [r7, #4]
 801ede2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801edec:	4619      	mov	r1, r3
 801edee:	4610      	mov	r0, r2
 801edf0:	f7f9 fc8c 	bl	801870c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801edf4:	bf00      	nop
 801edf6:	3708      	adds	r7, #8
 801edf8:	46bd      	mov	sp, r7
 801edfa:	bd80      	pop	{r7, pc}

0801edfc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801edfc:	b580      	push	{r7, lr}
 801edfe:	b082      	sub	sp, #8
 801ee00:	af00      	add	r7, sp, #0
 801ee02:	6078      	str	r0, [r7, #4]
 801ee04:	460b      	mov	r3, r1
 801ee06:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801ee0e:	78fa      	ldrb	r2, [r7, #3]
 801ee10:	6879      	ldr	r1, [r7, #4]
 801ee12:	4613      	mov	r3, r2
 801ee14:	009b      	lsls	r3, r3, #2
 801ee16:	4413      	add	r3, r2
 801ee18:	00db      	lsls	r3, r3, #3
 801ee1a:	440b      	add	r3, r1
 801ee1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801ee20:	681a      	ldr	r2, [r3, #0]
 801ee22:	78fb      	ldrb	r3, [r7, #3]
 801ee24:	4619      	mov	r1, r3
 801ee26:	f7f9 fcc6 	bl	80187b6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801ee2a:	bf00      	nop
 801ee2c:	3708      	adds	r7, #8
 801ee2e:	46bd      	mov	sp, r7
 801ee30:	bd80      	pop	{r7, pc}

0801ee32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ee32:	b580      	push	{r7, lr}
 801ee34:	b082      	sub	sp, #8
 801ee36:	af00      	add	r7, sp, #0
 801ee38:	6078      	str	r0, [r7, #4]
 801ee3a:	460b      	mov	r3, r1
 801ee3c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801ee44:	78fa      	ldrb	r2, [r7, #3]
 801ee46:	6879      	ldr	r1, [r7, #4]
 801ee48:	4613      	mov	r3, r2
 801ee4a:	009b      	lsls	r3, r3, #2
 801ee4c:	4413      	add	r3, r2
 801ee4e:	00db      	lsls	r3, r3, #3
 801ee50:	440b      	add	r3, r1
 801ee52:	3324      	adds	r3, #36	; 0x24
 801ee54:	681a      	ldr	r2, [r3, #0]
 801ee56:	78fb      	ldrb	r3, [r7, #3]
 801ee58:	4619      	mov	r1, r3
 801ee5a:	f7f9 fd0f 	bl	801887c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801ee5e:	bf00      	nop
 801ee60:	3708      	adds	r7, #8
 801ee62:	46bd      	mov	sp, r7
 801ee64:	bd80      	pop	{r7, pc}

0801ee66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ee66:	b580      	push	{r7, lr}
 801ee68:	b082      	sub	sp, #8
 801ee6a:	af00      	add	r7, sp, #0
 801ee6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801ee74:	4618      	mov	r0, r3
 801ee76:	f7f9 fe23 	bl	8018ac0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801ee7a:	bf00      	nop
 801ee7c:	3708      	adds	r7, #8
 801ee7e:	46bd      	mov	sp, r7
 801ee80:	bd80      	pop	{r7, pc}

0801ee82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ee82:	b580      	push	{r7, lr}
 801ee84:	b084      	sub	sp, #16
 801ee86:	af00      	add	r7, sp, #0
 801ee88:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801ee8a:	2301      	movs	r3, #1
 801ee8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	795b      	ldrb	r3, [r3, #5]
 801ee92:	2b02      	cmp	r3, #2
 801ee94:	d001      	beq.n	801ee9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801ee96:	f7e9 fb19 	bl	80084cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801eea0:	7bfa      	ldrb	r2, [r7, #15]
 801eea2:	4611      	mov	r1, r2
 801eea4:	4618      	mov	r0, r3
 801eea6:	f7f9 fdcd 	bl	8018a44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801eeb0:	4618      	mov	r0, r3
 801eeb2:	f7f9 fd79 	bl	80189a8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801eeb6:	bf00      	nop
 801eeb8:	3710      	adds	r7, #16
 801eeba:	46bd      	mov	sp, r7
 801eebc:	bd80      	pop	{r7, pc}
	...

0801eec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801eec0:	b580      	push	{r7, lr}
 801eec2:	b082      	sub	sp, #8
 801eec4:	af00      	add	r7, sp, #0
 801eec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801eece:	4618      	mov	r0, r3
 801eed0:	f7f9 fdc8 	bl	8018a64 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	7a5b      	ldrb	r3, [r3, #9]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d005      	beq.n	801eee8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801eedc:	4b04      	ldr	r3, [pc, #16]	; (801eef0 <HAL_PCD_SuspendCallback+0x30>)
 801eede:	691b      	ldr	r3, [r3, #16]
 801eee0:	4a03      	ldr	r2, [pc, #12]	; (801eef0 <HAL_PCD_SuspendCallback+0x30>)
 801eee2:	f043 0306 	orr.w	r3, r3, #6
 801eee6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801eee8:	bf00      	nop
 801eeea:	3708      	adds	r7, #8
 801eeec:	46bd      	mov	sp, r7
 801eeee:	bd80      	pop	{r7, pc}
 801eef0:	e000ed00 	.word	0xe000ed00

0801eef4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801eef4:	b580      	push	{r7, lr}
 801eef6:	b082      	sub	sp, #8
 801eef8:	af00      	add	r7, sp, #0
 801eefa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	7a5b      	ldrb	r3, [r3, #9]
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d007      	beq.n	801ef14 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ef04:	4b08      	ldr	r3, [pc, #32]	; (801ef28 <HAL_PCD_ResumeCallback+0x34>)
 801ef06:	691b      	ldr	r3, [r3, #16]
 801ef08:	4a07      	ldr	r2, [pc, #28]	; (801ef28 <HAL_PCD_ResumeCallback+0x34>)
 801ef0a:	f023 0306 	bic.w	r3, r3, #6
 801ef0e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801ef10:	f000 f9f8 	bl	801f304 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801ef1a:	4618      	mov	r0, r3
 801ef1c:	f7f9 fdb8 	bl	8018a90 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801ef20:	bf00      	nop
 801ef22:	3708      	adds	r7, #8
 801ef24:	46bd      	mov	sp, r7
 801ef26:	bd80      	pop	{r7, pc}
 801ef28:	e000ed00 	.word	0xe000ed00

0801ef2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801ef2c:	b580      	push	{r7, lr}
 801ef2e:	b082      	sub	sp, #8
 801ef30:	af00      	add	r7, sp, #0
 801ef32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801ef34:	4a2b      	ldr	r2, [pc, #172]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef36:	687b      	ldr	r3, [r7, #4]
 801ef38:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	4a29      	ldr	r2, [pc, #164]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 801ef44:	4b27      	ldr	r3, [pc, #156]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef46:	4a28      	ldr	r2, [pc, #160]	; (801efe8 <USBD_LL_Init+0xbc>)
 801ef48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801ef4a:	4b26      	ldr	r3, [pc, #152]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef4c:	2208      	movs	r2, #8
 801ef4e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801ef50:	4b24      	ldr	r3, [pc, #144]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef52:	2202      	movs	r2, #2
 801ef54:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ef56:	4b23      	ldr	r3, [pc, #140]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef58:	2202      	movs	r2, #2
 801ef5a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801ef5c:	4b21      	ldr	r3, [pc, #132]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef5e:	2200      	movs	r2, #0
 801ef60:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801ef62:	4b20      	ldr	r3, [pc, #128]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef64:	2200      	movs	r2, #0
 801ef66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801ef68:	4b1e      	ldr	r3, [pc, #120]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef6a:	2200      	movs	r2, #0
 801ef6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801ef6e:	4b1d      	ldr	r3, [pc, #116]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef70:	2200      	movs	r2, #0
 801ef72:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801ef74:	481b      	ldr	r0, [pc, #108]	; (801efe4 <USBD_LL_Init+0xb8>)
 801ef76:	f7ec feff 	bl	800bd78 <HAL_PCD_Init>
 801ef7a:	4603      	mov	r3, r0
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d001      	beq.n	801ef84 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801ef80:	f7e9 faa4 	bl	80084cc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ef8a:	2318      	movs	r3, #24
 801ef8c:	2200      	movs	r2, #0
 801ef8e:	2100      	movs	r1, #0
 801ef90:	f7ee fbb9 	bl	800d706 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ef9a:	2358      	movs	r3, #88	; 0x58
 801ef9c:	2200      	movs	r2, #0
 801ef9e:	2180      	movs	r1, #128	; 0x80
 801efa0:	f7ee fbb1 	bl	800d706 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801efaa:	23c0      	movs	r3, #192	; 0xc0
 801efac:	2200      	movs	r2, #0
 801efae:	2181      	movs	r1, #129	; 0x81
 801efb0:	f7ee fba9 	bl	800d706 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801efba:	f44f 7388 	mov.w	r3, #272	; 0x110
 801efbe:	2200      	movs	r2, #0
 801efc0:	2101      	movs	r1, #1
 801efc2:	f7ee fba0 	bl	800d706 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801efcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 801efd0:	2200      	movs	r2, #0
 801efd2:	2182      	movs	r1, #130	; 0x82
 801efd4:	f7ee fb97 	bl	800d706 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801efd8:	2300      	movs	r3, #0
}
 801efda:	4618      	mov	r0, r3
 801efdc:	3708      	adds	r7, #8
 801efde:	46bd      	mov	sp, r7
 801efe0:	bd80      	pop	{r7, pc}
 801efe2:	bf00      	nop
 801efe4:	20014014 	.word	0x20014014
 801efe8:	40005c00 	.word	0x40005c00

0801efec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801efec:	b580      	push	{r7, lr}
 801efee:	b084      	sub	sp, #16
 801eff0:	af00      	add	r7, sp, #0
 801eff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eff4:	2300      	movs	r3, #0
 801eff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801eff8:	2300      	movs	r3, #0
 801effa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f002:	4618      	mov	r0, r3
 801f004:	f7ec ff86 	bl	800bf14 <HAL_PCD_Start>
 801f008:	4603      	mov	r3, r0
 801f00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f00c:	7bfb      	ldrb	r3, [r7, #15]
 801f00e:	4618      	mov	r0, r3
 801f010:	f000 f97e 	bl	801f310 <USBD_Get_USB_Status>
 801f014:	4603      	mov	r3, r0
 801f016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f018:	7bbb      	ldrb	r3, [r7, #14]
}
 801f01a:	4618      	mov	r0, r3
 801f01c:	3710      	adds	r7, #16
 801f01e:	46bd      	mov	sp, r7
 801f020:	bd80      	pop	{r7, pc}

0801f022 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801f022:	b580      	push	{r7, lr}
 801f024:	b084      	sub	sp, #16
 801f026:	af00      	add	r7, sp, #0
 801f028:	6078      	str	r0, [r7, #4]
 801f02a:	4608      	mov	r0, r1
 801f02c:	4611      	mov	r1, r2
 801f02e:	461a      	mov	r2, r3
 801f030:	4603      	mov	r3, r0
 801f032:	70fb      	strb	r3, [r7, #3]
 801f034:	460b      	mov	r3, r1
 801f036:	70bb      	strb	r3, [r7, #2]
 801f038:	4613      	mov	r3, r2
 801f03a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f03c:	2300      	movs	r3, #0
 801f03e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f040:	2300      	movs	r3, #0
 801f042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f04a:	78bb      	ldrb	r3, [r7, #2]
 801f04c:	883a      	ldrh	r2, [r7, #0]
 801f04e:	78f9      	ldrb	r1, [r7, #3]
 801f050:	f7ed f8cd 	bl	800c1ee <HAL_PCD_EP_Open>
 801f054:	4603      	mov	r3, r0
 801f056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f058:	7bfb      	ldrb	r3, [r7, #15]
 801f05a:	4618      	mov	r0, r3
 801f05c:	f000 f958 	bl	801f310 <USBD_Get_USB_Status>
 801f060:	4603      	mov	r3, r0
 801f062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f064:	7bbb      	ldrb	r3, [r7, #14]
}
 801f066:	4618      	mov	r0, r3
 801f068:	3710      	adds	r7, #16
 801f06a:	46bd      	mov	sp, r7
 801f06c:	bd80      	pop	{r7, pc}

0801f06e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f06e:	b580      	push	{r7, lr}
 801f070:	b084      	sub	sp, #16
 801f072:	af00      	add	r7, sp, #0
 801f074:	6078      	str	r0, [r7, #4]
 801f076:	460b      	mov	r3, r1
 801f078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f07a:	2300      	movs	r3, #0
 801f07c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f07e:	2300      	movs	r3, #0
 801f080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f088:	78fa      	ldrb	r2, [r7, #3]
 801f08a:	4611      	mov	r1, r2
 801f08c:	4618      	mov	r0, r3
 801f08e:	f7ed f90b 	bl	800c2a8 <HAL_PCD_EP_Close>
 801f092:	4603      	mov	r3, r0
 801f094:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f096:	7bfb      	ldrb	r3, [r7, #15]
 801f098:	4618      	mov	r0, r3
 801f09a:	f000 f939 	bl	801f310 <USBD_Get_USB_Status>
 801f09e:	4603      	mov	r3, r0
 801f0a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f0a2:	7bbb      	ldrb	r3, [r7, #14]
}
 801f0a4:	4618      	mov	r0, r3
 801f0a6:	3710      	adds	r7, #16
 801f0a8:	46bd      	mov	sp, r7
 801f0aa:	bd80      	pop	{r7, pc}

0801f0ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f0ac:	b580      	push	{r7, lr}
 801f0ae:	b084      	sub	sp, #16
 801f0b0:	af00      	add	r7, sp, #0
 801f0b2:	6078      	str	r0, [r7, #4]
 801f0b4:	460b      	mov	r3, r1
 801f0b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f0b8:	2300      	movs	r3, #0
 801f0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f0bc:	2300      	movs	r3, #0
 801f0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f0c6:	78fa      	ldrb	r2, [r7, #3]
 801f0c8:	4611      	mov	r1, r2
 801f0ca:	4618      	mov	r0, r3
 801f0cc:	f7ed f9b4 	bl	800c438 <HAL_PCD_EP_SetStall>
 801f0d0:	4603      	mov	r3, r0
 801f0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f0d4:	7bfb      	ldrb	r3, [r7, #15]
 801f0d6:	4618      	mov	r0, r3
 801f0d8:	f000 f91a 	bl	801f310 <USBD_Get_USB_Status>
 801f0dc:	4603      	mov	r3, r0
 801f0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 801f0e2:	4618      	mov	r0, r3
 801f0e4:	3710      	adds	r7, #16
 801f0e6:	46bd      	mov	sp, r7
 801f0e8:	bd80      	pop	{r7, pc}

0801f0ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f0ea:	b580      	push	{r7, lr}
 801f0ec:	b084      	sub	sp, #16
 801f0ee:	af00      	add	r7, sp, #0
 801f0f0:	6078      	str	r0, [r7, #4]
 801f0f2:	460b      	mov	r3, r1
 801f0f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f0f6:	2300      	movs	r3, #0
 801f0f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f0fa:	2300      	movs	r3, #0
 801f0fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f104:	78fa      	ldrb	r2, [r7, #3]
 801f106:	4611      	mov	r1, r2
 801f108:	4618      	mov	r0, r3
 801f10a:	f7ed f9e7 	bl	800c4dc <HAL_PCD_EP_ClrStall>
 801f10e:	4603      	mov	r3, r0
 801f110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f112:	7bfb      	ldrb	r3, [r7, #15]
 801f114:	4618      	mov	r0, r3
 801f116:	f000 f8fb 	bl	801f310 <USBD_Get_USB_Status>
 801f11a:	4603      	mov	r3, r0
 801f11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f11e:	7bbb      	ldrb	r3, [r7, #14]
}
 801f120:	4618      	mov	r0, r3
 801f122:	3710      	adds	r7, #16
 801f124:	46bd      	mov	sp, r7
 801f126:	bd80      	pop	{r7, pc}

0801f128 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f128:	b480      	push	{r7}
 801f12a:	b085      	sub	sp, #20
 801f12c:	af00      	add	r7, sp, #0
 801f12e:	6078      	str	r0, [r7, #4]
 801f130:	460b      	mov	r3, r1
 801f132:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f13a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801f13c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f140:	2b00      	cmp	r3, #0
 801f142:	da0b      	bge.n	801f15c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801f144:	78fb      	ldrb	r3, [r7, #3]
 801f146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801f14a:	68f9      	ldr	r1, [r7, #12]
 801f14c:	4613      	mov	r3, r2
 801f14e:	009b      	lsls	r3, r3, #2
 801f150:	4413      	add	r3, r2
 801f152:	00db      	lsls	r3, r3, #3
 801f154:	440b      	add	r3, r1
 801f156:	3312      	adds	r3, #18
 801f158:	781b      	ldrb	r3, [r3, #0]
 801f15a:	e00b      	b.n	801f174 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801f15c:	78fb      	ldrb	r3, [r7, #3]
 801f15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801f162:	68f9      	ldr	r1, [r7, #12]
 801f164:	4613      	mov	r3, r2
 801f166:	009b      	lsls	r3, r3, #2
 801f168:	4413      	add	r3, r2
 801f16a:	00db      	lsls	r3, r3, #3
 801f16c:	440b      	add	r3, r1
 801f16e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 801f172:	781b      	ldrb	r3, [r3, #0]
  }
}
 801f174:	4618      	mov	r0, r3
 801f176:	3714      	adds	r7, #20
 801f178:	46bd      	mov	sp, r7
 801f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f17e:	4770      	bx	lr

0801f180 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801f180:	b580      	push	{r7, lr}
 801f182:	b084      	sub	sp, #16
 801f184:	af00      	add	r7, sp, #0
 801f186:	6078      	str	r0, [r7, #4]
 801f188:	460b      	mov	r3, r1
 801f18a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f18c:	2300      	movs	r3, #0
 801f18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f190:	2300      	movs	r3, #0
 801f192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f19a:	78fa      	ldrb	r2, [r7, #3]
 801f19c:	4611      	mov	r1, r2
 801f19e:	4618      	mov	r0, r3
 801f1a0:	f7ed f801 	bl	800c1a6 <HAL_PCD_SetAddress>
 801f1a4:	4603      	mov	r3, r0
 801f1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f1a8:	7bfb      	ldrb	r3, [r7, #15]
 801f1aa:	4618      	mov	r0, r3
 801f1ac:	f000 f8b0 	bl	801f310 <USBD_Get_USB_Status>
 801f1b0:	4603      	mov	r3, r0
 801f1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 801f1b6:	4618      	mov	r0, r3
 801f1b8:	3710      	adds	r7, #16
 801f1ba:	46bd      	mov	sp, r7
 801f1bc:	bd80      	pop	{r7, pc}

0801f1be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f1be:	b580      	push	{r7, lr}
 801f1c0:	b086      	sub	sp, #24
 801f1c2:	af00      	add	r7, sp, #0
 801f1c4:	60f8      	str	r0, [r7, #12]
 801f1c6:	607a      	str	r2, [r7, #4]
 801f1c8:	603b      	str	r3, [r7, #0]
 801f1ca:	460b      	mov	r3, r1
 801f1cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f1ce:	2300      	movs	r3, #0
 801f1d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f1d2:	2300      	movs	r3, #0
 801f1d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f1d6:	68fb      	ldr	r3, [r7, #12]
 801f1d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f1dc:	7af9      	ldrb	r1, [r7, #11]
 801f1de:	683b      	ldr	r3, [r7, #0]
 801f1e0:	687a      	ldr	r2, [r7, #4]
 801f1e2:	f7ed f8f2 	bl	800c3ca <HAL_PCD_EP_Transmit>
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f1ea:	7dfb      	ldrb	r3, [r7, #23]
 801f1ec:	4618      	mov	r0, r3
 801f1ee:	f000 f88f 	bl	801f310 <USBD_Get_USB_Status>
 801f1f2:	4603      	mov	r3, r0
 801f1f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801f1f6:	7dbb      	ldrb	r3, [r7, #22]
}
 801f1f8:	4618      	mov	r0, r3
 801f1fa:	3718      	adds	r7, #24
 801f1fc:	46bd      	mov	sp, r7
 801f1fe:	bd80      	pop	{r7, pc}

0801f200 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f200:	b580      	push	{r7, lr}
 801f202:	b086      	sub	sp, #24
 801f204:	af00      	add	r7, sp, #0
 801f206:	60f8      	str	r0, [r7, #12]
 801f208:	607a      	str	r2, [r7, #4]
 801f20a:	603b      	str	r3, [r7, #0]
 801f20c:	460b      	mov	r3, r1
 801f20e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f210:	2300      	movs	r3, #0
 801f212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f214:	2300      	movs	r3, #0
 801f216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f218:	68fb      	ldr	r3, [r7, #12]
 801f21a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801f21e:	7af9      	ldrb	r1, [r7, #11]
 801f220:	683b      	ldr	r3, [r7, #0]
 801f222:	687a      	ldr	r2, [r7, #4]
 801f224:	f7ed f888 	bl	800c338 <HAL_PCD_EP_Receive>
 801f228:	4603      	mov	r3, r0
 801f22a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f22c:	7dfb      	ldrb	r3, [r7, #23]
 801f22e:	4618      	mov	r0, r3
 801f230:	f000 f86e 	bl	801f310 <USBD_Get_USB_Status>
 801f234:	4603      	mov	r3, r0
 801f236:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801f238:	7dbb      	ldrb	r3, [r7, #22]
}
 801f23a:	4618      	mov	r0, r3
 801f23c:	3718      	adds	r7, #24
 801f23e:	46bd      	mov	sp, r7
 801f240:	bd80      	pop	{r7, pc}

0801f242 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f242:	b580      	push	{r7, lr}
 801f244:	b082      	sub	sp, #8
 801f246:	af00      	add	r7, sp, #0
 801f248:	6078      	str	r0, [r7, #4]
 801f24a:	460b      	mov	r3, r1
 801f24c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801f254:	78fa      	ldrb	r2, [r7, #3]
 801f256:	4611      	mov	r1, r2
 801f258:	4618      	mov	r0, r3
 801f25a:	f7ed f89e 	bl	800c39a <HAL_PCD_EP_GetRxCount>
 801f25e:	4603      	mov	r3, r0
}
 801f260:	4618      	mov	r0, r3
 801f262:	3708      	adds	r7, #8
 801f264:	46bd      	mov	sp, r7
 801f266:	bd80      	pop	{r7, pc}

0801f268 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	b082      	sub	sp, #8
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	6078      	str	r0, [r7, #4]
 801f270:	460b      	mov	r3, r1
 801f272:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801f274:	78fb      	ldrb	r3, [r7, #3]
 801f276:	2b00      	cmp	r3, #0
 801f278:	d002      	beq.n	801f280 <HAL_PCDEx_LPM_Callback+0x18>
 801f27a:	2b01      	cmp	r3, #1
 801f27c:	d013      	beq.n	801f2a6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801f27e:	e023      	b.n	801f2c8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	7a5b      	ldrb	r3, [r3, #9]
 801f284:	2b00      	cmp	r3, #0
 801f286:	d007      	beq.n	801f298 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801f288:	f000 f83c 	bl	801f304 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f28c:	4b10      	ldr	r3, [pc, #64]	; (801f2d0 <HAL_PCDEx_LPM_Callback+0x68>)
 801f28e:	691b      	ldr	r3, [r3, #16]
 801f290:	4a0f      	ldr	r2, [pc, #60]	; (801f2d0 <HAL_PCDEx_LPM_Callback+0x68>)
 801f292:	f023 0306 	bic.w	r3, r3, #6
 801f296:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801f29e:	4618      	mov	r0, r3
 801f2a0:	f7f9 fbf6 	bl	8018a90 <USBD_LL_Resume>
    break;
 801f2a4:	e010      	b.n	801f2c8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801f2ac:	4618      	mov	r0, r3
 801f2ae:	f7f9 fbd9 	bl	8018a64 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	7a5b      	ldrb	r3, [r3, #9]
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d005      	beq.n	801f2c6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f2ba:	4b05      	ldr	r3, [pc, #20]	; (801f2d0 <HAL_PCDEx_LPM_Callback+0x68>)
 801f2bc:	691b      	ldr	r3, [r3, #16]
 801f2be:	4a04      	ldr	r2, [pc, #16]	; (801f2d0 <HAL_PCDEx_LPM_Callback+0x68>)
 801f2c0:	f043 0306 	orr.w	r3, r3, #6
 801f2c4:	6113      	str	r3, [r2, #16]
    break;
 801f2c6:	bf00      	nop
}
 801f2c8:	bf00      	nop
 801f2ca:	3708      	adds	r7, #8
 801f2cc:	46bd      	mov	sp, r7
 801f2ce:	bd80      	pop	{r7, pc}
 801f2d0:	e000ed00 	.word	0xe000ed00

0801f2d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801f2d4:	b480      	push	{r7}
 801f2d6:	b083      	sub	sp, #12
 801f2d8:	af00      	add	r7, sp, #0
 801f2da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801f2dc:	4b03      	ldr	r3, [pc, #12]	; (801f2ec <USBD_static_malloc+0x18>)
}
 801f2de:	4618      	mov	r0, r3
 801f2e0:	370c      	adds	r7, #12
 801f2e2:	46bd      	mov	sp, r7
 801f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2e8:	4770      	bx	lr
 801f2ea:	bf00      	nop
 801f2ec:	200142f0 	.word	0x200142f0

0801f2f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801f2f0:	b480      	push	{r7}
 801f2f2:	b083      	sub	sp, #12
 801f2f4:	af00      	add	r7, sp, #0
 801f2f6:	6078      	str	r0, [r7, #4]

}
 801f2f8:	bf00      	nop
 801f2fa:	370c      	adds	r7, #12
 801f2fc:	46bd      	mov	sp, r7
 801f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f302:	4770      	bx	lr

0801f304 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801f304:	b580      	push	{r7, lr}
 801f306:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801f308:	f7e7 fd80 	bl	8006e0c <SystemClock_Config>
}
 801f30c:	bf00      	nop
 801f30e:	bd80      	pop	{r7, pc}

0801f310 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801f310:	b480      	push	{r7}
 801f312:	b085      	sub	sp, #20
 801f314:	af00      	add	r7, sp, #0
 801f316:	4603      	mov	r3, r0
 801f318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f31a:	2300      	movs	r3, #0
 801f31c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801f31e:	79fb      	ldrb	r3, [r7, #7]
 801f320:	2b03      	cmp	r3, #3
 801f322:	d817      	bhi.n	801f354 <USBD_Get_USB_Status+0x44>
 801f324:	a201      	add	r2, pc, #4	; (adr r2, 801f32c <USBD_Get_USB_Status+0x1c>)
 801f326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f32a:	bf00      	nop
 801f32c:	0801f33d 	.word	0x0801f33d
 801f330:	0801f343 	.word	0x0801f343
 801f334:	0801f349 	.word	0x0801f349
 801f338:	0801f34f 	.word	0x0801f34f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801f33c:	2300      	movs	r3, #0
 801f33e:	73fb      	strb	r3, [r7, #15]
    break;
 801f340:	e00b      	b.n	801f35a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801f342:	2303      	movs	r3, #3
 801f344:	73fb      	strb	r3, [r7, #15]
    break;
 801f346:	e008      	b.n	801f35a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801f348:	2301      	movs	r3, #1
 801f34a:	73fb      	strb	r3, [r7, #15]
    break;
 801f34c:	e005      	b.n	801f35a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801f34e:	2303      	movs	r3, #3
 801f350:	73fb      	strb	r3, [r7, #15]
    break;
 801f352:	e002      	b.n	801f35a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801f354:	2303      	movs	r3, #3
 801f356:	73fb      	strb	r3, [r7, #15]
    break;
 801f358:	bf00      	nop
  }
  return usb_status;
 801f35a:	7bfb      	ldrb	r3, [r7, #15]
}
 801f35c:	4618      	mov	r0, r3
 801f35e:	3714      	adds	r7, #20
 801f360:	46bd      	mov	sp, r7
 801f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f366:	4770      	bx	lr

0801f368 <atoi>:
 801f368:	220a      	movs	r2, #10
 801f36a:	2100      	movs	r1, #0
 801f36c:	f000 b976 	b.w	801f65c <strtol>

0801f370 <malloc>:
 801f370:	4b02      	ldr	r3, [pc, #8]	; (801f37c <malloc+0xc>)
 801f372:	4601      	mov	r1, r0
 801f374:	6818      	ldr	r0, [r3, #0]
 801f376:	f000 b82b 	b.w	801f3d0 <_malloc_r>
 801f37a:	bf00      	nop
 801f37c:	2000029c 	.word	0x2000029c

0801f380 <free>:
 801f380:	4b02      	ldr	r3, [pc, #8]	; (801f38c <free+0xc>)
 801f382:	4601      	mov	r1, r0
 801f384:	6818      	ldr	r0, [r3, #0]
 801f386:	f000 ba67 	b.w	801f858 <_free_r>
 801f38a:	bf00      	nop
 801f38c:	2000029c 	.word	0x2000029c

0801f390 <sbrk_aligned>:
 801f390:	b570      	push	{r4, r5, r6, lr}
 801f392:	4e0e      	ldr	r6, [pc, #56]	; (801f3cc <sbrk_aligned+0x3c>)
 801f394:	460c      	mov	r4, r1
 801f396:	6831      	ldr	r1, [r6, #0]
 801f398:	4605      	mov	r5, r0
 801f39a:	b911      	cbnz	r1, 801f3a2 <sbrk_aligned+0x12>
 801f39c:	f000 fa0c 	bl	801f7b8 <_sbrk_r>
 801f3a0:	6030      	str	r0, [r6, #0]
 801f3a2:	4621      	mov	r1, r4
 801f3a4:	4628      	mov	r0, r5
 801f3a6:	f000 fa07 	bl	801f7b8 <_sbrk_r>
 801f3aa:	1c43      	adds	r3, r0, #1
 801f3ac:	d00a      	beq.n	801f3c4 <sbrk_aligned+0x34>
 801f3ae:	1cc4      	adds	r4, r0, #3
 801f3b0:	f024 0403 	bic.w	r4, r4, #3
 801f3b4:	42a0      	cmp	r0, r4
 801f3b6:	d007      	beq.n	801f3c8 <sbrk_aligned+0x38>
 801f3b8:	1a21      	subs	r1, r4, r0
 801f3ba:	4628      	mov	r0, r5
 801f3bc:	f000 f9fc 	bl	801f7b8 <_sbrk_r>
 801f3c0:	3001      	adds	r0, #1
 801f3c2:	d101      	bne.n	801f3c8 <sbrk_aligned+0x38>
 801f3c4:	f04f 34ff 	mov.w	r4, #4294967295
 801f3c8:	4620      	mov	r0, r4
 801f3ca:	bd70      	pop	{r4, r5, r6, pc}
 801f3cc:	20014514 	.word	0x20014514

0801f3d0 <_malloc_r>:
 801f3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f3d4:	1ccd      	adds	r5, r1, #3
 801f3d6:	f025 0503 	bic.w	r5, r5, #3
 801f3da:	3508      	adds	r5, #8
 801f3dc:	2d0c      	cmp	r5, #12
 801f3de:	bf38      	it	cc
 801f3e0:	250c      	movcc	r5, #12
 801f3e2:	2d00      	cmp	r5, #0
 801f3e4:	4607      	mov	r7, r0
 801f3e6:	db01      	blt.n	801f3ec <_malloc_r+0x1c>
 801f3e8:	42a9      	cmp	r1, r5
 801f3ea:	d905      	bls.n	801f3f8 <_malloc_r+0x28>
 801f3ec:	230c      	movs	r3, #12
 801f3ee:	603b      	str	r3, [r7, #0]
 801f3f0:	2600      	movs	r6, #0
 801f3f2:	4630      	mov	r0, r6
 801f3f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f3f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f4cc <_malloc_r+0xfc>
 801f3fc:	f000 f868 	bl	801f4d0 <__malloc_lock>
 801f400:	f8d8 3000 	ldr.w	r3, [r8]
 801f404:	461c      	mov	r4, r3
 801f406:	bb5c      	cbnz	r4, 801f460 <_malloc_r+0x90>
 801f408:	4629      	mov	r1, r5
 801f40a:	4638      	mov	r0, r7
 801f40c:	f7ff ffc0 	bl	801f390 <sbrk_aligned>
 801f410:	1c43      	adds	r3, r0, #1
 801f412:	4604      	mov	r4, r0
 801f414:	d155      	bne.n	801f4c2 <_malloc_r+0xf2>
 801f416:	f8d8 4000 	ldr.w	r4, [r8]
 801f41a:	4626      	mov	r6, r4
 801f41c:	2e00      	cmp	r6, #0
 801f41e:	d145      	bne.n	801f4ac <_malloc_r+0xdc>
 801f420:	2c00      	cmp	r4, #0
 801f422:	d048      	beq.n	801f4b6 <_malloc_r+0xe6>
 801f424:	6823      	ldr	r3, [r4, #0]
 801f426:	4631      	mov	r1, r6
 801f428:	4638      	mov	r0, r7
 801f42a:	eb04 0903 	add.w	r9, r4, r3
 801f42e:	f000 f9c3 	bl	801f7b8 <_sbrk_r>
 801f432:	4581      	cmp	r9, r0
 801f434:	d13f      	bne.n	801f4b6 <_malloc_r+0xe6>
 801f436:	6821      	ldr	r1, [r4, #0]
 801f438:	1a6d      	subs	r5, r5, r1
 801f43a:	4629      	mov	r1, r5
 801f43c:	4638      	mov	r0, r7
 801f43e:	f7ff ffa7 	bl	801f390 <sbrk_aligned>
 801f442:	3001      	adds	r0, #1
 801f444:	d037      	beq.n	801f4b6 <_malloc_r+0xe6>
 801f446:	6823      	ldr	r3, [r4, #0]
 801f448:	442b      	add	r3, r5
 801f44a:	6023      	str	r3, [r4, #0]
 801f44c:	f8d8 3000 	ldr.w	r3, [r8]
 801f450:	2b00      	cmp	r3, #0
 801f452:	d038      	beq.n	801f4c6 <_malloc_r+0xf6>
 801f454:	685a      	ldr	r2, [r3, #4]
 801f456:	42a2      	cmp	r2, r4
 801f458:	d12b      	bne.n	801f4b2 <_malloc_r+0xe2>
 801f45a:	2200      	movs	r2, #0
 801f45c:	605a      	str	r2, [r3, #4]
 801f45e:	e00f      	b.n	801f480 <_malloc_r+0xb0>
 801f460:	6822      	ldr	r2, [r4, #0]
 801f462:	1b52      	subs	r2, r2, r5
 801f464:	d41f      	bmi.n	801f4a6 <_malloc_r+0xd6>
 801f466:	2a0b      	cmp	r2, #11
 801f468:	d917      	bls.n	801f49a <_malloc_r+0xca>
 801f46a:	1961      	adds	r1, r4, r5
 801f46c:	42a3      	cmp	r3, r4
 801f46e:	6025      	str	r5, [r4, #0]
 801f470:	bf18      	it	ne
 801f472:	6059      	strne	r1, [r3, #4]
 801f474:	6863      	ldr	r3, [r4, #4]
 801f476:	bf08      	it	eq
 801f478:	f8c8 1000 	streq.w	r1, [r8]
 801f47c:	5162      	str	r2, [r4, r5]
 801f47e:	604b      	str	r3, [r1, #4]
 801f480:	4638      	mov	r0, r7
 801f482:	f104 060b 	add.w	r6, r4, #11
 801f486:	f000 f829 	bl	801f4dc <__malloc_unlock>
 801f48a:	f026 0607 	bic.w	r6, r6, #7
 801f48e:	1d23      	adds	r3, r4, #4
 801f490:	1af2      	subs	r2, r6, r3
 801f492:	d0ae      	beq.n	801f3f2 <_malloc_r+0x22>
 801f494:	1b9b      	subs	r3, r3, r6
 801f496:	50a3      	str	r3, [r4, r2]
 801f498:	e7ab      	b.n	801f3f2 <_malloc_r+0x22>
 801f49a:	42a3      	cmp	r3, r4
 801f49c:	6862      	ldr	r2, [r4, #4]
 801f49e:	d1dd      	bne.n	801f45c <_malloc_r+0x8c>
 801f4a0:	f8c8 2000 	str.w	r2, [r8]
 801f4a4:	e7ec      	b.n	801f480 <_malloc_r+0xb0>
 801f4a6:	4623      	mov	r3, r4
 801f4a8:	6864      	ldr	r4, [r4, #4]
 801f4aa:	e7ac      	b.n	801f406 <_malloc_r+0x36>
 801f4ac:	4634      	mov	r4, r6
 801f4ae:	6876      	ldr	r6, [r6, #4]
 801f4b0:	e7b4      	b.n	801f41c <_malloc_r+0x4c>
 801f4b2:	4613      	mov	r3, r2
 801f4b4:	e7cc      	b.n	801f450 <_malloc_r+0x80>
 801f4b6:	230c      	movs	r3, #12
 801f4b8:	603b      	str	r3, [r7, #0]
 801f4ba:	4638      	mov	r0, r7
 801f4bc:	f000 f80e 	bl	801f4dc <__malloc_unlock>
 801f4c0:	e797      	b.n	801f3f2 <_malloc_r+0x22>
 801f4c2:	6025      	str	r5, [r4, #0]
 801f4c4:	e7dc      	b.n	801f480 <_malloc_r+0xb0>
 801f4c6:	605b      	str	r3, [r3, #4]
 801f4c8:	deff      	udf	#255	; 0xff
 801f4ca:	bf00      	nop
 801f4cc:	20014510 	.word	0x20014510

0801f4d0 <__malloc_lock>:
 801f4d0:	4801      	ldr	r0, [pc, #4]	; (801f4d8 <__malloc_lock+0x8>)
 801f4d2:	f000 b9ab 	b.w	801f82c <__retarget_lock_acquire_recursive>
 801f4d6:	bf00      	nop
 801f4d8:	20014654 	.word	0x20014654

0801f4dc <__malloc_unlock>:
 801f4dc:	4801      	ldr	r0, [pc, #4]	; (801f4e4 <__malloc_unlock+0x8>)
 801f4de:	f000 b9a6 	b.w	801f82e <__retarget_lock_release_recursive>
 801f4e2:	bf00      	nop
 801f4e4:	20014654 	.word	0x20014654

0801f4e8 <realloc>:
 801f4e8:	4b02      	ldr	r3, [pc, #8]	; (801f4f4 <realloc+0xc>)
 801f4ea:	460a      	mov	r2, r1
 801f4ec:	4601      	mov	r1, r0
 801f4ee:	6818      	ldr	r0, [r3, #0]
 801f4f0:	f000 b802 	b.w	801f4f8 <_realloc_r>
 801f4f4:	2000029c 	.word	0x2000029c

0801f4f8 <_realloc_r>:
 801f4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4fc:	4680      	mov	r8, r0
 801f4fe:	4614      	mov	r4, r2
 801f500:	460e      	mov	r6, r1
 801f502:	b921      	cbnz	r1, 801f50e <_realloc_r+0x16>
 801f504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f508:	4611      	mov	r1, r2
 801f50a:	f7ff bf61 	b.w	801f3d0 <_malloc_r>
 801f50e:	b92a      	cbnz	r2, 801f51c <_realloc_r+0x24>
 801f510:	f000 f9a2 	bl	801f858 <_free_r>
 801f514:	4625      	mov	r5, r4
 801f516:	4628      	mov	r0, r5
 801f518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f51c:	f000 f9e8 	bl	801f8f0 <_malloc_usable_size_r>
 801f520:	4284      	cmp	r4, r0
 801f522:	4607      	mov	r7, r0
 801f524:	d802      	bhi.n	801f52c <_realloc_r+0x34>
 801f526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f52a:	d812      	bhi.n	801f552 <_realloc_r+0x5a>
 801f52c:	4621      	mov	r1, r4
 801f52e:	4640      	mov	r0, r8
 801f530:	f7ff ff4e 	bl	801f3d0 <_malloc_r>
 801f534:	4605      	mov	r5, r0
 801f536:	2800      	cmp	r0, #0
 801f538:	d0ed      	beq.n	801f516 <_realloc_r+0x1e>
 801f53a:	42bc      	cmp	r4, r7
 801f53c:	4622      	mov	r2, r4
 801f53e:	4631      	mov	r1, r6
 801f540:	bf28      	it	cs
 801f542:	463a      	movcs	r2, r7
 801f544:	f000 f979 	bl	801f83a <memcpy>
 801f548:	4631      	mov	r1, r6
 801f54a:	4640      	mov	r0, r8
 801f54c:	f000 f984 	bl	801f858 <_free_r>
 801f550:	e7e1      	b.n	801f516 <_realloc_r+0x1e>
 801f552:	4635      	mov	r5, r6
 801f554:	e7df      	b.n	801f516 <_realloc_r+0x1e>
	...

0801f558 <_strtol_l.constprop.0>:
 801f558:	2b01      	cmp	r3, #1
 801f55a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f55e:	d001      	beq.n	801f564 <_strtol_l.constprop.0+0xc>
 801f560:	2b24      	cmp	r3, #36	; 0x24
 801f562:	d906      	bls.n	801f572 <_strtol_l.constprop.0+0x1a>
 801f564:	f000 f938 	bl	801f7d8 <__errno>
 801f568:	2316      	movs	r3, #22
 801f56a:	6003      	str	r3, [r0, #0]
 801f56c:	2000      	movs	r0, #0
 801f56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f572:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801f658 <_strtol_l.constprop.0+0x100>
 801f576:	460d      	mov	r5, r1
 801f578:	462e      	mov	r6, r5
 801f57a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f57e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801f582:	f017 0708 	ands.w	r7, r7, #8
 801f586:	d1f7      	bne.n	801f578 <_strtol_l.constprop.0+0x20>
 801f588:	2c2d      	cmp	r4, #45	; 0x2d
 801f58a:	d132      	bne.n	801f5f2 <_strtol_l.constprop.0+0x9a>
 801f58c:	782c      	ldrb	r4, [r5, #0]
 801f58e:	2701      	movs	r7, #1
 801f590:	1cb5      	adds	r5, r6, #2
 801f592:	2b00      	cmp	r3, #0
 801f594:	d05b      	beq.n	801f64e <_strtol_l.constprop.0+0xf6>
 801f596:	2b10      	cmp	r3, #16
 801f598:	d109      	bne.n	801f5ae <_strtol_l.constprop.0+0x56>
 801f59a:	2c30      	cmp	r4, #48	; 0x30
 801f59c:	d107      	bne.n	801f5ae <_strtol_l.constprop.0+0x56>
 801f59e:	782c      	ldrb	r4, [r5, #0]
 801f5a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f5a4:	2c58      	cmp	r4, #88	; 0x58
 801f5a6:	d14d      	bne.n	801f644 <_strtol_l.constprop.0+0xec>
 801f5a8:	786c      	ldrb	r4, [r5, #1]
 801f5aa:	2310      	movs	r3, #16
 801f5ac:	3502      	adds	r5, #2
 801f5ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801f5b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801f5b6:	f04f 0e00 	mov.w	lr, #0
 801f5ba:	fbb8 f9f3 	udiv	r9, r8, r3
 801f5be:	4676      	mov	r6, lr
 801f5c0:	fb03 8a19 	mls	sl, r3, r9, r8
 801f5c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f5c8:	f1bc 0f09 	cmp.w	ip, #9
 801f5cc:	d816      	bhi.n	801f5fc <_strtol_l.constprop.0+0xa4>
 801f5ce:	4664      	mov	r4, ip
 801f5d0:	42a3      	cmp	r3, r4
 801f5d2:	dd24      	ble.n	801f61e <_strtol_l.constprop.0+0xc6>
 801f5d4:	f1be 3fff 	cmp.w	lr, #4294967295
 801f5d8:	d008      	beq.n	801f5ec <_strtol_l.constprop.0+0x94>
 801f5da:	45b1      	cmp	r9, r6
 801f5dc:	d31c      	bcc.n	801f618 <_strtol_l.constprop.0+0xc0>
 801f5de:	d101      	bne.n	801f5e4 <_strtol_l.constprop.0+0x8c>
 801f5e0:	45a2      	cmp	sl, r4
 801f5e2:	db19      	blt.n	801f618 <_strtol_l.constprop.0+0xc0>
 801f5e4:	fb06 4603 	mla	r6, r6, r3, r4
 801f5e8:	f04f 0e01 	mov.w	lr, #1
 801f5ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f5f0:	e7e8      	b.n	801f5c4 <_strtol_l.constprop.0+0x6c>
 801f5f2:	2c2b      	cmp	r4, #43	; 0x2b
 801f5f4:	bf04      	itt	eq
 801f5f6:	782c      	ldrbeq	r4, [r5, #0]
 801f5f8:	1cb5      	addeq	r5, r6, #2
 801f5fa:	e7ca      	b.n	801f592 <_strtol_l.constprop.0+0x3a>
 801f5fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f600:	f1bc 0f19 	cmp.w	ip, #25
 801f604:	d801      	bhi.n	801f60a <_strtol_l.constprop.0+0xb2>
 801f606:	3c37      	subs	r4, #55	; 0x37
 801f608:	e7e2      	b.n	801f5d0 <_strtol_l.constprop.0+0x78>
 801f60a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f60e:	f1bc 0f19 	cmp.w	ip, #25
 801f612:	d804      	bhi.n	801f61e <_strtol_l.constprop.0+0xc6>
 801f614:	3c57      	subs	r4, #87	; 0x57
 801f616:	e7db      	b.n	801f5d0 <_strtol_l.constprop.0+0x78>
 801f618:	f04f 3eff 	mov.w	lr, #4294967295
 801f61c:	e7e6      	b.n	801f5ec <_strtol_l.constprop.0+0x94>
 801f61e:	f1be 3fff 	cmp.w	lr, #4294967295
 801f622:	d105      	bne.n	801f630 <_strtol_l.constprop.0+0xd8>
 801f624:	2322      	movs	r3, #34	; 0x22
 801f626:	6003      	str	r3, [r0, #0]
 801f628:	4646      	mov	r6, r8
 801f62a:	b942      	cbnz	r2, 801f63e <_strtol_l.constprop.0+0xe6>
 801f62c:	4630      	mov	r0, r6
 801f62e:	e79e      	b.n	801f56e <_strtol_l.constprop.0+0x16>
 801f630:	b107      	cbz	r7, 801f634 <_strtol_l.constprop.0+0xdc>
 801f632:	4276      	negs	r6, r6
 801f634:	2a00      	cmp	r2, #0
 801f636:	d0f9      	beq.n	801f62c <_strtol_l.constprop.0+0xd4>
 801f638:	f1be 0f00 	cmp.w	lr, #0
 801f63c:	d000      	beq.n	801f640 <_strtol_l.constprop.0+0xe8>
 801f63e:	1e69      	subs	r1, r5, #1
 801f640:	6011      	str	r1, [r2, #0]
 801f642:	e7f3      	b.n	801f62c <_strtol_l.constprop.0+0xd4>
 801f644:	2430      	movs	r4, #48	; 0x30
 801f646:	2b00      	cmp	r3, #0
 801f648:	d1b1      	bne.n	801f5ae <_strtol_l.constprop.0+0x56>
 801f64a:	2308      	movs	r3, #8
 801f64c:	e7af      	b.n	801f5ae <_strtol_l.constprop.0+0x56>
 801f64e:	2c30      	cmp	r4, #48	; 0x30
 801f650:	d0a5      	beq.n	801f59e <_strtol_l.constprop.0+0x46>
 801f652:	230a      	movs	r3, #10
 801f654:	e7ab      	b.n	801f5ae <_strtol_l.constprop.0+0x56>
 801f656:	bf00      	nop
 801f658:	08020d85 	.word	0x08020d85

0801f65c <strtol>:
 801f65c:	4613      	mov	r3, r2
 801f65e:	460a      	mov	r2, r1
 801f660:	4601      	mov	r1, r0
 801f662:	4802      	ldr	r0, [pc, #8]	; (801f66c <strtol+0x10>)
 801f664:	6800      	ldr	r0, [r0, #0]
 801f666:	f7ff bf77 	b.w	801f558 <_strtol_l.constprop.0>
 801f66a:	bf00      	nop
 801f66c:	2000029c 	.word	0x2000029c

0801f670 <siprintf>:
 801f670:	b40e      	push	{r1, r2, r3}
 801f672:	b500      	push	{lr}
 801f674:	b09c      	sub	sp, #112	; 0x70
 801f676:	ab1d      	add	r3, sp, #116	; 0x74
 801f678:	9002      	str	r0, [sp, #8]
 801f67a:	9006      	str	r0, [sp, #24]
 801f67c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f680:	4809      	ldr	r0, [pc, #36]	; (801f6a8 <siprintf+0x38>)
 801f682:	9107      	str	r1, [sp, #28]
 801f684:	9104      	str	r1, [sp, #16]
 801f686:	4909      	ldr	r1, [pc, #36]	; (801f6ac <siprintf+0x3c>)
 801f688:	f853 2b04 	ldr.w	r2, [r3], #4
 801f68c:	9105      	str	r1, [sp, #20]
 801f68e:	6800      	ldr	r0, [r0, #0]
 801f690:	9301      	str	r3, [sp, #4]
 801f692:	a902      	add	r1, sp, #8
 801f694:	f000 f98e 	bl	801f9b4 <_svfiprintf_r>
 801f698:	9b02      	ldr	r3, [sp, #8]
 801f69a:	2200      	movs	r2, #0
 801f69c:	701a      	strb	r2, [r3, #0]
 801f69e:	b01c      	add	sp, #112	; 0x70
 801f6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f6a4:	b003      	add	sp, #12
 801f6a6:	4770      	bx	lr
 801f6a8:	2000029c 	.word	0x2000029c
 801f6ac:	ffff0208 	.word	0xffff0208

0801f6b0 <memset>:
 801f6b0:	4402      	add	r2, r0
 801f6b2:	4603      	mov	r3, r0
 801f6b4:	4293      	cmp	r3, r2
 801f6b6:	d100      	bne.n	801f6ba <memset+0xa>
 801f6b8:	4770      	bx	lr
 801f6ba:	f803 1b01 	strb.w	r1, [r3], #1
 801f6be:	e7f9      	b.n	801f6b4 <memset+0x4>

0801f6c0 <strncmp>:
 801f6c0:	b510      	push	{r4, lr}
 801f6c2:	b16a      	cbz	r2, 801f6e0 <strncmp+0x20>
 801f6c4:	3901      	subs	r1, #1
 801f6c6:	1884      	adds	r4, r0, r2
 801f6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f6cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801f6d0:	429a      	cmp	r2, r3
 801f6d2:	d103      	bne.n	801f6dc <strncmp+0x1c>
 801f6d4:	42a0      	cmp	r0, r4
 801f6d6:	d001      	beq.n	801f6dc <strncmp+0x1c>
 801f6d8:	2a00      	cmp	r2, #0
 801f6da:	d1f5      	bne.n	801f6c8 <strncmp+0x8>
 801f6dc:	1ad0      	subs	r0, r2, r3
 801f6de:	bd10      	pop	{r4, pc}
 801f6e0:	4610      	mov	r0, r2
 801f6e2:	e7fc      	b.n	801f6de <strncmp+0x1e>

0801f6e4 <strncpy>:
 801f6e4:	b510      	push	{r4, lr}
 801f6e6:	3901      	subs	r1, #1
 801f6e8:	4603      	mov	r3, r0
 801f6ea:	b132      	cbz	r2, 801f6fa <strncpy+0x16>
 801f6ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f6f0:	f803 4b01 	strb.w	r4, [r3], #1
 801f6f4:	3a01      	subs	r2, #1
 801f6f6:	2c00      	cmp	r4, #0
 801f6f8:	d1f7      	bne.n	801f6ea <strncpy+0x6>
 801f6fa:	441a      	add	r2, r3
 801f6fc:	2100      	movs	r1, #0
 801f6fe:	4293      	cmp	r3, r2
 801f700:	d100      	bne.n	801f704 <strncpy+0x20>
 801f702:	bd10      	pop	{r4, pc}
 801f704:	f803 1b01 	strb.w	r1, [r3], #1
 801f708:	e7f9      	b.n	801f6fe <strncpy+0x1a>
	...

0801f70c <_reclaim_reent>:
 801f70c:	4b29      	ldr	r3, [pc, #164]	; (801f7b4 <_reclaim_reent+0xa8>)
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	4283      	cmp	r3, r0
 801f712:	b570      	push	{r4, r5, r6, lr}
 801f714:	4604      	mov	r4, r0
 801f716:	d04b      	beq.n	801f7b0 <_reclaim_reent+0xa4>
 801f718:	69c3      	ldr	r3, [r0, #28]
 801f71a:	b143      	cbz	r3, 801f72e <_reclaim_reent+0x22>
 801f71c:	68db      	ldr	r3, [r3, #12]
 801f71e:	2b00      	cmp	r3, #0
 801f720:	d144      	bne.n	801f7ac <_reclaim_reent+0xa0>
 801f722:	69e3      	ldr	r3, [r4, #28]
 801f724:	6819      	ldr	r1, [r3, #0]
 801f726:	b111      	cbz	r1, 801f72e <_reclaim_reent+0x22>
 801f728:	4620      	mov	r0, r4
 801f72a:	f000 f895 	bl	801f858 <_free_r>
 801f72e:	6961      	ldr	r1, [r4, #20]
 801f730:	b111      	cbz	r1, 801f738 <_reclaim_reent+0x2c>
 801f732:	4620      	mov	r0, r4
 801f734:	f000 f890 	bl	801f858 <_free_r>
 801f738:	69e1      	ldr	r1, [r4, #28]
 801f73a:	b111      	cbz	r1, 801f742 <_reclaim_reent+0x36>
 801f73c:	4620      	mov	r0, r4
 801f73e:	f000 f88b 	bl	801f858 <_free_r>
 801f742:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f744:	b111      	cbz	r1, 801f74c <_reclaim_reent+0x40>
 801f746:	4620      	mov	r0, r4
 801f748:	f000 f886 	bl	801f858 <_free_r>
 801f74c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f74e:	b111      	cbz	r1, 801f756 <_reclaim_reent+0x4a>
 801f750:	4620      	mov	r0, r4
 801f752:	f000 f881 	bl	801f858 <_free_r>
 801f756:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f758:	b111      	cbz	r1, 801f760 <_reclaim_reent+0x54>
 801f75a:	4620      	mov	r0, r4
 801f75c:	f000 f87c 	bl	801f858 <_free_r>
 801f760:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f762:	b111      	cbz	r1, 801f76a <_reclaim_reent+0x5e>
 801f764:	4620      	mov	r0, r4
 801f766:	f000 f877 	bl	801f858 <_free_r>
 801f76a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801f76c:	b111      	cbz	r1, 801f774 <_reclaim_reent+0x68>
 801f76e:	4620      	mov	r0, r4
 801f770:	f000 f872 	bl	801f858 <_free_r>
 801f774:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801f776:	b111      	cbz	r1, 801f77e <_reclaim_reent+0x72>
 801f778:	4620      	mov	r0, r4
 801f77a:	f000 f86d 	bl	801f858 <_free_r>
 801f77e:	6a23      	ldr	r3, [r4, #32]
 801f780:	b1b3      	cbz	r3, 801f7b0 <_reclaim_reent+0xa4>
 801f782:	4620      	mov	r0, r4
 801f784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f788:	4718      	bx	r3
 801f78a:	5949      	ldr	r1, [r1, r5]
 801f78c:	b941      	cbnz	r1, 801f7a0 <_reclaim_reent+0x94>
 801f78e:	3504      	adds	r5, #4
 801f790:	69e3      	ldr	r3, [r4, #28]
 801f792:	2d80      	cmp	r5, #128	; 0x80
 801f794:	68d9      	ldr	r1, [r3, #12]
 801f796:	d1f8      	bne.n	801f78a <_reclaim_reent+0x7e>
 801f798:	4620      	mov	r0, r4
 801f79a:	f000 f85d 	bl	801f858 <_free_r>
 801f79e:	e7c0      	b.n	801f722 <_reclaim_reent+0x16>
 801f7a0:	680e      	ldr	r6, [r1, #0]
 801f7a2:	4620      	mov	r0, r4
 801f7a4:	f000 f858 	bl	801f858 <_free_r>
 801f7a8:	4631      	mov	r1, r6
 801f7aa:	e7ef      	b.n	801f78c <_reclaim_reent+0x80>
 801f7ac:	2500      	movs	r5, #0
 801f7ae:	e7ef      	b.n	801f790 <_reclaim_reent+0x84>
 801f7b0:	bd70      	pop	{r4, r5, r6, pc}
 801f7b2:	bf00      	nop
 801f7b4:	2000029c 	.word	0x2000029c

0801f7b8 <_sbrk_r>:
 801f7b8:	b538      	push	{r3, r4, r5, lr}
 801f7ba:	4d06      	ldr	r5, [pc, #24]	; (801f7d4 <_sbrk_r+0x1c>)
 801f7bc:	2300      	movs	r3, #0
 801f7be:	4604      	mov	r4, r0
 801f7c0:	4608      	mov	r0, r1
 801f7c2:	602b      	str	r3, [r5, #0]
 801f7c4:	f7e9 fcb4 	bl	8009130 <_sbrk>
 801f7c8:	1c43      	adds	r3, r0, #1
 801f7ca:	d102      	bne.n	801f7d2 <_sbrk_r+0x1a>
 801f7cc:	682b      	ldr	r3, [r5, #0]
 801f7ce:	b103      	cbz	r3, 801f7d2 <_sbrk_r+0x1a>
 801f7d0:	6023      	str	r3, [r4, #0]
 801f7d2:	bd38      	pop	{r3, r4, r5, pc}
 801f7d4:	20014650 	.word	0x20014650

0801f7d8 <__errno>:
 801f7d8:	4b01      	ldr	r3, [pc, #4]	; (801f7e0 <__errno+0x8>)
 801f7da:	6818      	ldr	r0, [r3, #0]
 801f7dc:	4770      	bx	lr
 801f7de:	bf00      	nop
 801f7e0:	2000029c 	.word	0x2000029c

0801f7e4 <__libc_init_array>:
 801f7e4:	b570      	push	{r4, r5, r6, lr}
 801f7e6:	4d0d      	ldr	r5, [pc, #52]	; (801f81c <__libc_init_array+0x38>)
 801f7e8:	4c0d      	ldr	r4, [pc, #52]	; (801f820 <__libc_init_array+0x3c>)
 801f7ea:	1b64      	subs	r4, r4, r5
 801f7ec:	10a4      	asrs	r4, r4, #2
 801f7ee:	2600      	movs	r6, #0
 801f7f0:	42a6      	cmp	r6, r4
 801f7f2:	d109      	bne.n	801f808 <__libc_init_array+0x24>
 801f7f4:	4d0b      	ldr	r5, [pc, #44]	; (801f824 <__libc_init_array+0x40>)
 801f7f6:	4c0c      	ldr	r4, [pc, #48]	; (801f828 <__libc_init_array+0x44>)
 801f7f8:	f001 f8bc 	bl	8020974 <_init>
 801f7fc:	1b64      	subs	r4, r4, r5
 801f7fe:	10a4      	asrs	r4, r4, #2
 801f800:	2600      	movs	r6, #0
 801f802:	42a6      	cmp	r6, r4
 801f804:	d105      	bne.n	801f812 <__libc_init_array+0x2e>
 801f806:	bd70      	pop	{r4, r5, r6, pc}
 801f808:	f855 3b04 	ldr.w	r3, [r5], #4
 801f80c:	4798      	blx	r3
 801f80e:	3601      	adds	r6, #1
 801f810:	e7ee      	b.n	801f7f0 <__libc_init_array+0xc>
 801f812:	f855 3b04 	ldr.w	r3, [r5], #4
 801f816:	4798      	blx	r3
 801f818:	3601      	adds	r6, #1
 801f81a:	e7f2      	b.n	801f802 <__libc_init_array+0x1e>
 801f81c:	08021290 	.word	0x08021290
 801f820:	08021290 	.word	0x08021290
 801f824:	08021290 	.word	0x08021290
 801f828:	08021294 	.word	0x08021294

0801f82c <__retarget_lock_acquire_recursive>:
 801f82c:	4770      	bx	lr

0801f82e <__retarget_lock_release_recursive>:
 801f82e:	4770      	bx	lr

0801f830 <__aeabi_memcpy>:
 801f830:	f000 b803 	b.w	801f83a <memcpy>

0801f834 <__aeabi_memclr>:
 801f834:	2200      	movs	r2, #0
 801f836:	f7e6 b906 	b.w	8005a46 <__aeabi_memset>

0801f83a <memcpy>:
 801f83a:	440a      	add	r2, r1
 801f83c:	4291      	cmp	r1, r2
 801f83e:	f100 33ff 	add.w	r3, r0, #4294967295
 801f842:	d100      	bne.n	801f846 <memcpy+0xc>
 801f844:	4770      	bx	lr
 801f846:	b510      	push	{r4, lr}
 801f848:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f84c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f850:	4291      	cmp	r1, r2
 801f852:	d1f9      	bne.n	801f848 <memcpy+0xe>
 801f854:	bd10      	pop	{r4, pc}
	...

0801f858 <_free_r>:
 801f858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f85a:	2900      	cmp	r1, #0
 801f85c:	d044      	beq.n	801f8e8 <_free_r+0x90>
 801f85e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f862:	9001      	str	r0, [sp, #4]
 801f864:	2b00      	cmp	r3, #0
 801f866:	f1a1 0404 	sub.w	r4, r1, #4
 801f86a:	bfb8      	it	lt
 801f86c:	18e4      	addlt	r4, r4, r3
 801f86e:	f7ff fe2f 	bl	801f4d0 <__malloc_lock>
 801f872:	4a1e      	ldr	r2, [pc, #120]	; (801f8ec <_free_r+0x94>)
 801f874:	9801      	ldr	r0, [sp, #4]
 801f876:	6813      	ldr	r3, [r2, #0]
 801f878:	b933      	cbnz	r3, 801f888 <_free_r+0x30>
 801f87a:	6063      	str	r3, [r4, #4]
 801f87c:	6014      	str	r4, [r2, #0]
 801f87e:	b003      	add	sp, #12
 801f880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f884:	f7ff be2a 	b.w	801f4dc <__malloc_unlock>
 801f888:	42a3      	cmp	r3, r4
 801f88a:	d908      	bls.n	801f89e <_free_r+0x46>
 801f88c:	6825      	ldr	r5, [r4, #0]
 801f88e:	1961      	adds	r1, r4, r5
 801f890:	428b      	cmp	r3, r1
 801f892:	bf01      	itttt	eq
 801f894:	6819      	ldreq	r1, [r3, #0]
 801f896:	685b      	ldreq	r3, [r3, #4]
 801f898:	1949      	addeq	r1, r1, r5
 801f89a:	6021      	streq	r1, [r4, #0]
 801f89c:	e7ed      	b.n	801f87a <_free_r+0x22>
 801f89e:	461a      	mov	r2, r3
 801f8a0:	685b      	ldr	r3, [r3, #4]
 801f8a2:	b10b      	cbz	r3, 801f8a8 <_free_r+0x50>
 801f8a4:	42a3      	cmp	r3, r4
 801f8a6:	d9fa      	bls.n	801f89e <_free_r+0x46>
 801f8a8:	6811      	ldr	r1, [r2, #0]
 801f8aa:	1855      	adds	r5, r2, r1
 801f8ac:	42a5      	cmp	r5, r4
 801f8ae:	d10b      	bne.n	801f8c8 <_free_r+0x70>
 801f8b0:	6824      	ldr	r4, [r4, #0]
 801f8b2:	4421      	add	r1, r4
 801f8b4:	1854      	adds	r4, r2, r1
 801f8b6:	42a3      	cmp	r3, r4
 801f8b8:	6011      	str	r1, [r2, #0]
 801f8ba:	d1e0      	bne.n	801f87e <_free_r+0x26>
 801f8bc:	681c      	ldr	r4, [r3, #0]
 801f8be:	685b      	ldr	r3, [r3, #4]
 801f8c0:	6053      	str	r3, [r2, #4]
 801f8c2:	440c      	add	r4, r1
 801f8c4:	6014      	str	r4, [r2, #0]
 801f8c6:	e7da      	b.n	801f87e <_free_r+0x26>
 801f8c8:	d902      	bls.n	801f8d0 <_free_r+0x78>
 801f8ca:	230c      	movs	r3, #12
 801f8cc:	6003      	str	r3, [r0, #0]
 801f8ce:	e7d6      	b.n	801f87e <_free_r+0x26>
 801f8d0:	6825      	ldr	r5, [r4, #0]
 801f8d2:	1961      	adds	r1, r4, r5
 801f8d4:	428b      	cmp	r3, r1
 801f8d6:	bf04      	itt	eq
 801f8d8:	6819      	ldreq	r1, [r3, #0]
 801f8da:	685b      	ldreq	r3, [r3, #4]
 801f8dc:	6063      	str	r3, [r4, #4]
 801f8de:	bf04      	itt	eq
 801f8e0:	1949      	addeq	r1, r1, r5
 801f8e2:	6021      	streq	r1, [r4, #0]
 801f8e4:	6054      	str	r4, [r2, #4]
 801f8e6:	e7ca      	b.n	801f87e <_free_r+0x26>
 801f8e8:	b003      	add	sp, #12
 801f8ea:	bd30      	pop	{r4, r5, pc}
 801f8ec:	20014510 	.word	0x20014510

0801f8f0 <_malloc_usable_size_r>:
 801f8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f8f4:	1f18      	subs	r0, r3, #4
 801f8f6:	2b00      	cmp	r3, #0
 801f8f8:	bfbc      	itt	lt
 801f8fa:	580b      	ldrlt	r3, [r1, r0]
 801f8fc:	18c0      	addlt	r0, r0, r3
 801f8fe:	4770      	bx	lr

0801f900 <__ssputs_r>:
 801f900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f904:	688e      	ldr	r6, [r1, #8]
 801f906:	461f      	mov	r7, r3
 801f908:	42be      	cmp	r6, r7
 801f90a:	680b      	ldr	r3, [r1, #0]
 801f90c:	4682      	mov	sl, r0
 801f90e:	460c      	mov	r4, r1
 801f910:	4690      	mov	r8, r2
 801f912:	d82c      	bhi.n	801f96e <__ssputs_r+0x6e>
 801f914:	898a      	ldrh	r2, [r1, #12]
 801f916:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f91a:	d026      	beq.n	801f96a <__ssputs_r+0x6a>
 801f91c:	6965      	ldr	r5, [r4, #20]
 801f91e:	6909      	ldr	r1, [r1, #16]
 801f920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f924:	eba3 0901 	sub.w	r9, r3, r1
 801f928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f92c:	1c7b      	adds	r3, r7, #1
 801f92e:	444b      	add	r3, r9
 801f930:	106d      	asrs	r5, r5, #1
 801f932:	429d      	cmp	r5, r3
 801f934:	bf38      	it	cc
 801f936:	461d      	movcc	r5, r3
 801f938:	0553      	lsls	r3, r2, #21
 801f93a:	d527      	bpl.n	801f98c <__ssputs_r+0x8c>
 801f93c:	4629      	mov	r1, r5
 801f93e:	f7ff fd47 	bl	801f3d0 <_malloc_r>
 801f942:	4606      	mov	r6, r0
 801f944:	b360      	cbz	r0, 801f9a0 <__ssputs_r+0xa0>
 801f946:	6921      	ldr	r1, [r4, #16]
 801f948:	464a      	mov	r2, r9
 801f94a:	f7ff ff76 	bl	801f83a <memcpy>
 801f94e:	89a3      	ldrh	r3, [r4, #12]
 801f950:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f958:	81a3      	strh	r3, [r4, #12]
 801f95a:	6126      	str	r6, [r4, #16]
 801f95c:	6165      	str	r5, [r4, #20]
 801f95e:	444e      	add	r6, r9
 801f960:	eba5 0509 	sub.w	r5, r5, r9
 801f964:	6026      	str	r6, [r4, #0]
 801f966:	60a5      	str	r5, [r4, #8]
 801f968:	463e      	mov	r6, r7
 801f96a:	42be      	cmp	r6, r7
 801f96c:	d900      	bls.n	801f970 <__ssputs_r+0x70>
 801f96e:	463e      	mov	r6, r7
 801f970:	6820      	ldr	r0, [r4, #0]
 801f972:	4632      	mov	r2, r6
 801f974:	4641      	mov	r1, r8
 801f976:	f000 faab 	bl	801fed0 <memmove>
 801f97a:	68a3      	ldr	r3, [r4, #8]
 801f97c:	1b9b      	subs	r3, r3, r6
 801f97e:	60a3      	str	r3, [r4, #8]
 801f980:	6823      	ldr	r3, [r4, #0]
 801f982:	4433      	add	r3, r6
 801f984:	6023      	str	r3, [r4, #0]
 801f986:	2000      	movs	r0, #0
 801f988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f98c:	462a      	mov	r2, r5
 801f98e:	f7ff fdb3 	bl	801f4f8 <_realloc_r>
 801f992:	4606      	mov	r6, r0
 801f994:	2800      	cmp	r0, #0
 801f996:	d1e0      	bne.n	801f95a <__ssputs_r+0x5a>
 801f998:	6921      	ldr	r1, [r4, #16]
 801f99a:	4650      	mov	r0, sl
 801f99c:	f7ff ff5c 	bl	801f858 <_free_r>
 801f9a0:	230c      	movs	r3, #12
 801f9a2:	f8ca 3000 	str.w	r3, [sl]
 801f9a6:	89a3      	ldrh	r3, [r4, #12]
 801f9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f9ac:	81a3      	strh	r3, [r4, #12]
 801f9ae:	f04f 30ff 	mov.w	r0, #4294967295
 801f9b2:	e7e9      	b.n	801f988 <__ssputs_r+0x88>

0801f9b4 <_svfiprintf_r>:
 801f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9b8:	4698      	mov	r8, r3
 801f9ba:	898b      	ldrh	r3, [r1, #12]
 801f9bc:	061b      	lsls	r3, r3, #24
 801f9be:	b09d      	sub	sp, #116	; 0x74
 801f9c0:	4607      	mov	r7, r0
 801f9c2:	460d      	mov	r5, r1
 801f9c4:	4614      	mov	r4, r2
 801f9c6:	d50e      	bpl.n	801f9e6 <_svfiprintf_r+0x32>
 801f9c8:	690b      	ldr	r3, [r1, #16]
 801f9ca:	b963      	cbnz	r3, 801f9e6 <_svfiprintf_r+0x32>
 801f9cc:	2140      	movs	r1, #64	; 0x40
 801f9ce:	f7ff fcff 	bl	801f3d0 <_malloc_r>
 801f9d2:	6028      	str	r0, [r5, #0]
 801f9d4:	6128      	str	r0, [r5, #16]
 801f9d6:	b920      	cbnz	r0, 801f9e2 <_svfiprintf_r+0x2e>
 801f9d8:	230c      	movs	r3, #12
 801f9da:	603b      	str	r3, [r7, #0]
 801f9dc:	f04f 30ff 	mov.w	r0, #4294967295
 801f9e0:	e0d0      	b.n	801fb84 <_svfiprintf_r+0x1d0>
 801f9e2:	2340      	movs	r3, #64	; 0x40
 801f9e4:	616b      	str	r3, [r5, #20]
 801f9e6:	2300      	movs	r3, #0
 801f9e8:	9309      	str	r3, [sp, #36]	; 0x24
 801f9ea:	2320      	movs	r3, #32
 801f9ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f9f0:	f8cd 800c 	str.w	r8, [sp, #12]
 801f9f4:	2330      	movs	r3, #48	; 0x30
 801f9f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801fb9c <_svfiprintf_r+0x1e8>
 801f9fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f9fe:	f04f 0901 	mov.w	r9, #1
 801fa02:	4623      	mov	r3, r4
 801fa04:	469a      	mov	sl, r3
 801fa06:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa0a:	b10a      	cbz	r2, 801fa10 <_svfiprintf_r+0x5c>
 801fa0c:	2a25      	cmp	r2, #37	; 0x25
 801fa0e:	d1f9      	bne.n	801fa04 <_svfiprintf_r+0x50>
 801fa10:	ebba 0b04 	subs.w	fp, sl, r4
 801fa14:	d00b      	beq.n	801fa2e <_svfiprintf_r+0x7a>
 801fa16:	465b      	mov	r3, fp
 801fa18:	4622      	mov	r2, r4
 801fa1a:	4629      	mov	r1, r5
 801fa1c:	4638      	mov	r0, r7
 801fa1e:	f7ff ff6f 	bl	801f900 <__ssputs_r>
 801fa22:	3001      	adds	r0, #1
 801fa24:	f000 80a9 	beq.w	801fb7a <_svfiprintf_r+0x1c6>
 801fa28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fa2a:	445a      	add	r2, fp
 801fa2c:	9209      	str	r2, [sp, #36]	; 0x24
 801fa2e:	f89a 3000 	ldrb.w	r3, [sl]
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	f000 80a1 	beq.w	801fb7a <_svfiprintf_r+0x1c6>
 801fa38:	2300      	movs	r3, #0
 801fa3a:	f04f 32ff 	mov.w	r2, #4294967295
 801fa3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fa42:	f10a 0a01 	add.w	sl, sl, #1
 801fa46:	9304      	str	r3, [sp, #16]
 801fa48:	9307      	str	r3, [sp, #28]
 801fa4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fa4e:	931a      	str	r3, [sp, #104]	; 0x68
 801fa50:	4654      	mov	r4, sl
 801fa52:	2205      	movs	r2, #5
 801fa54:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa58:	4850      	ldr	r0, [pc, #320]	; (801fb9c <_svfiprintf_r+0x1e8>)
 801fa5a:	f7e6 f849 	bl	8005af0 <memchr>
 801fa5e:	9a04      	ldr	r2, [sp, #16]
 801fa60:	b9d8      	cbnz	r0, 801fa9a <_svfiprintf_r+0xe6>
 801fa62:	06d0      	lsls	r0, r2, #27
 801fa64:	bf44      	itt	mi
 801fa66:	2320      	movmi	r3, #32
 801fa68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fa6c:	0711      	lsls	r1, r2, #28
 801fa6e:	bf44      	itt	mi
 801fa70:	232b      	movmi	r3, #43	; 0x2b
 801fa72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fa76:	f89a 3000 	ldrb.w	r3, [sl]
 801fa7a:	2b2a      	cmp	r3, #42	; 0x2a
 801fa7c:	d015      	beq.n	801faaa <_svfiprintf_r+0xf6>
 801fa7e:	9a07      	ldr	r2, [sp, #28]
 801fa80:	4654      	mov	r4, sl
 801fa82:	2000      	movs	r0, #0
 801fa84:	f04f 0c0a 	mov.w	ip, #10
 801fa88:	4621      	mov	r1, r4
 801fa8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fa8e:	3b30      	subs	r3, #48	; 0x30
 801fa90:	2b09      	cmp	r3, #9
 801fa92:	d94d      	bls.n	801fb30 <_svfiprintf_r+0x17c>
 801fa94:	b1b0      	cbz	r0, 801fac4 <_svfiprintf_r+0x110>
 801fa96:	9207      	str	r2, [sp, #28]
 801fa98:	e014      	b.n	801fac4 <_svfiprintf_r+0x110>
 801fa9a:	eba0 0308 	sub.w	r3, r0, r8
 801fa9e:	fa09 f303 	lsl.w	r3, r9, r3
 801faa2:	4313      	orrs	r3, r2
 801faa4:	9304      	str	r3, [sp, #16]
 801faa6:	46a2      	mov	sl, r4
 801faa8:	e7d2      	b.n	801fa50 <_svfiprintf_r+0x9c>
 801faaa:	9b03      	ldr	r3, [sp, #12]
 801faac:	1d19      	adds	r1, r3, #4
 801faae:	681b      	ldr	r3, [r3, #0]
 801fab0:	9103      	str	r1, [sp, #12]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	bfbb      	ittet	lt
 801fab6:	425b      	neglt	r3, r3
 801fab8:	f042 0202 	orrlt.w	r2, r2, #2
 801fabc:	9307      	strge	r3, [sp, #28]
 801fabe:	9307      	strlt	r3, [sp, #28]
 801fac0:	bfb8      	it	lt
 801fac2:	9204      	strlt	r2, [sp, #16]
 801fac4:	7823      	ldrb	r3, [r4, #0]
 801fac6:	2b2e      	cmp	r3, #46	; 0x2e
 801fac8:	d10c      	bne.n	801fae4 <_svfiprintf_r+0x130>
 801faca:	7863      	ldrb	r3, [r4, #1]
 801facc:	2b2a      	cmp	r3, #42	; 0x2a
 801face:	d134      	bne.n	801fb3a <_svfiprintf_r+0x186>
 801fad0:	9b03      	ldr	r3, [sp, #12]
 801fad2:	1d1a      	adds	r2, r3, #4
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	9203      	str	r2, [sp, #12]
 801fad8:	2b00      	cmp	r3, #0
 801fada:	bfb8      	it	lt
 801fadc:	f04f 33ff 	movlt.w	r3, #4294967295
 801fae0:	3402      	adds	r4, #2
 801fae2:	9305      	str	r3, [sp, #20]
 801fae4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801fbac <_svfiprintf_r+0x1f8>
 801fae8:	7821      	ldrb	r1, [r4, #0]
 801faea:	2203      	movs	r2, #3
 801faec:	4650      	mov	r0, sl
 801faee:	f7e5 ffff 	bl	8005af0 <memchr>
 801faf2:	b138      	cbz	r0, 801fb04 <_svfiprintf_r+0x150>
 801faf4:	9b04      	ldr	r3, [sp, #16]
 801faf6:	eba0 000a 	sub.w	r0, r0, sl
 801fafa:	2240      	movs	r2, #64	; 0x40
 801fafc:	4082      	lsls	r2, r0
 801fafe:	4313      	orrs	r3, r2
 801fb00:	3401      	adds	r4, #1
 801fb02:	9304      	str	r3, [sp, #16]
 801fb04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb08:	4825      	ldr	r0, [pc, #148]	; (801fba0 <_svfiprintf_r+0x1ec>)
 801fb0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fb0e:	2206      	movs	r2, #6
 801fb10:	f7e5 ffee 	bl	8005af0 <memchr>
 801fb14:	2800      	cmp	r0, #0
 801fb16:	d038      	beq.n	801fb8a <_svfiprintf_r+0x1d6>
 801fb18:	4b22      	ldr	r3, [pc, #136]	; (801fba4 <_svfiprintf_r+0x1f0>)
 801fb1a:	bb1b      	cbnz	r3, 801fb64 <_svfiprintf_r+0x1b0>
 801fb1c:	9b03      	ldr	r3, [sp, #12]
 801fb1e:	3307      	adds	r3, #7
 801fb20:	f023 0307 	bic.w	r3, r3, #7
 801fb24:	3308      	adds	r3, #8
 801fb26:	9303      	str	r3, [sp, #12]
 801fb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb2a:	4433      	add	r3, r6
 801fb2c:	9309      	str	r3, [sp, #36]	; 0x24
 801fb2e:	e768      	b.n	801fa02 <_svfiprintf_r+0x4e>
 801fb30:	fb0c 3202 	mla	r2, ip, r2, r3
 801fb34:	460c      	mov	r4, r1
 801fb36:	2001      	movs	r0, #1
 801fb38:	e7a6      	b.n	801fa88 <_svfiprintf_r+0xd4>
 801fb3a:	2300      	movs	r3, #0
 801fb3c:	3401      	adds	r4, #1
 801fb3e:	9305      	str	r3, [sp, #20]
 801fb40:	4619      	mov	r1, r3
 801fb42:	f04f 0c0a 	mov.w	ip, #10
 801fb46:	4620      	mov	r0, r4
 801fb48:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fb4c:	3a30      	subs	r2, #48	; 0x30
 801fb4e:	2a09      	cmp	r2, #9
 801fb50:	d903      	bls.n	801fb5a <_svfiprintf_r+0x1a6>
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d0c6      	beq.n	801fae4 <_svfiprintf_r+0x130>
 801fb56:	9105      	str	r1, [sp, #20]
 801fb58:	e7c4      	b.n	801fae4 <_svfiprintf_r+0x130>
 801fb5a:	fb0c 2101 	mla	r1, ip, r1, r2
 801fb5e:	4604      	mov	r4, r0
 801fb60:	2301      	movs	r3, #1
 801fb62:	e7f0      	b.n	801fb46 <_svfiprintf_r+0x192>
 801fb64:	ab03      	add	r3, sp, #12
 801fb66:	9300      	str	r3, [sp, #0]
 801fb68:	462a      	mov	r2, r5
 801fb6a:	4b0f      	ldr	r3, [pc, #60]	; (801fba8 <_svfiprintf_r+0x1f4>)
 801fb6c:	a904      	add	r1, sp, #16
 801fb6e:	4638      	mov	r0, r7
 801fb70:	f3af 8000 	nop.w
 801fb74:	1c42      	adds	r2, r0, #1
 801fb76:	4606      	mov	r6, r0
 801fb78:	d1d6      	bne.n	801fb28 <_svfiprintf_r+0x174>
 801fb7a:	89ab      	ldrh	r3, [r5, #12]
 801fb7c:	065b      	lsls	r3, r3, #25
 801fb7e:	f53f af2d 	bmi.w	801f9dc <_svfiprintf_r+0x28>
 801fb82:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fb84:	b01d      	add	sp, #116	; 0x74
 801fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb8a:	ab03      	add	r3, sp, #12
 801fb8c:	9300      	str	r3, [sp, #0]
 801fb8e:	462a      	mov	r2, r5
 801fb90:	4b05      	ldr	r3, [pc, #20]	; (801fba8 <_svfiprintf_r+0x1f4>)
 801fb92:	a904      	add	r1, sp, #16
 801fb94:	4638      	mov	r0, r7
 801fb96:	f000 f879 	bl	801fc8c <_printf_i>
 801fb9a:	e7eb      	b.n	801fb74 <_svfiprintf_r+0x1c0>
 801fb9c:	08020e85 	.word	0x08020e85
 801fba0:	08020e8f 	.word	0x08020e8f
 801fba4:	00000000 	.word	0x00000000
 801fba8:	0801f901 	.word	0x0801f901
 801fbac:	08020e8b 	.word	0x08020e8b

0801fbb0 <_printf_common>:
 801fbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fbb4:	4616      	mov	r6, r2
 801fbb6:	4699      	mov	r9, r3
 801fbb8:	688a      	ldr	r2, [r1, #8]
 801fbba:	690b      	ldr	r3, [r1, #16]
 801fbbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fbc0:	4293      	cmp	r3, r2
 801fbc2:	bfb8      	it	lt
 801fbc4:	4613      	movlt	r3, r2
 801fbc6:	6033      	str	r3, [r6, #0]
 801fbc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fbcc:	4607      	mov	r7, r0
 801fbce:	460c      	mov	r4, r1
 801fbd0:	b10a      	cbz	r2, 801fbd6 <_printf_common+0x26>
 801fbd2:	3301      	adds	r3, #1
 801fbd4:	6033      	str	r3, [r6, #0]
 801fbd6:	6823      	ldr	r3, [r4, #0]
 801fbd8:	0699      	lsls	r1, r3, #26
 801fbda:	bf42      	ittt	mi
 801fbdc:	6833      	ldrmi	r3, [r6, #0]
 801fbde:	3302      	addmi	r3, #2
 801fbe0:	6033      	strmi	r3, [r6, #0]
 801fbe2:	6825      	ldr	r5, [r4, #0]
 801fbe4:	f015 0506 	ands.w	r5, r5, #6
 801fbe8:	d106      	bne.n	801fbf8 <_printf_common+0x48>
 801fbea:	f104 0a19 	add.w	sl, r4, #25
 801fbee:	68e3      	ldr	r3, [r4, #12]
 801fbf0:	6832      	ldr	r2, [r6, #0]
 801fbf2:	1a9b      	subs	r3, r3, r2
 801fbf4:	42ab      	cmp	r3, r5
 801fbf6:	dc26      	bgt.n	801fc46 <_printf_common+0x96>
 801fbf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fbfc:	1e13      	subs	r3, r2, #0
 801fbfe:	6822      	ldr	r2, [r4, #0]
 801fc00:	bf18      	it	ne
 801fc02:	2301      	movne	r3, #1
 801fc04:	0692      	lsls	r2, r2, #26
 801fc06:	d42b      	bmi.n	801fc60 <_printf_common+0xb0>
 801fc08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fc0c:	4649      	mov	r1, r9
 801fc0e:	4638      	mov	r0, r7
 801fc10:	47c0      	blx	r8
 801fc12:	3001      	adds	r0, #1
 801fc14:	d01e      	beq.n	801fc54 <_printf_common+0xa4>
 801fc16:	6823      	ldr	r3, [r4, #0]
 801fc18:	6922      	ldr	r2, [r4, #16]
 801fc1a:	f003 0306 	and.w	r3, r3, #6
 801fc1e:	2b04      	cmp	r3, #4
 801fc20:	bf02      	ittt	eq
 801fc22:	68e5      	ldreq	r5, [r4, #12]
 801fc24:	6833      	ldreq	r3, [r6, #0]
 801fc26:	1aed      	subeq	r5, r5, r3
 801fc28:	68a3      	ldr	r3, [r4, #8]
 801fc2a:	bf0c      	ite	eq
 801fc2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fc30:	2500      	movne	r5, #0
 801fc32:	4293      	cmp	r3, r2
 801fc34:	bfc4      	itt	gt
 801fc36:	1a9b      	subgt	r3, r3, r2
 801fc38:	18ed      	addgt	r5, r5, r3
 801fc3a:	2600      	movs	r6, #0
 801fc3c:	341a      	adds	r4, #26
 801fc3e:	42b5      	cmp	r5, r6
 801fc40:	d11a      	bne.n	801fc78 <_printf_common+0xc8>
 801fc42:	2000      	movs	r0, #0
 801fc44:	e008      	b.n	801fc58 <_printf_common+0xa8>
 801fc46:	2301      	movs	r3, #1
 801fc48:	4652      	mov	r2, sl
 801fc4a:	4649      	mov	r1, r9
 801fc4c:	4638      	mov	r0, r7
 801fc4e:	47c0      	blx	r8
 801fc50:	3001      	adds	r0, #1
 801fc52:	d103      	bne.n	801fc5c <_printf_common+0xac>
 801fc54:	f04f 30ff 	mov.w	r0, #4294967295
 801fc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc5c:	3501      	adds	r5, #1
 801fc5e:	e7c6      	b.n	801fbee <_printf_common+0x3e>
 801fc60:	18e1      	adds	r1, r4, r3
 801fc62:	1c5a      	adds	r2, r3, #1
 801fc64:	2030      	movs	r0, #48	; 0x30
 801fc66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fc6a:	4422      	add	r2, r4
 801fc6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fc70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fc74:	3302      	adds	r3, #2
 801fc76:	e7c7      	b.n	801fc08 <_printf_common+0x58>
 801fc78:	2301      	movs	r3, #1
 801fc7a:	4622      	mov	r2, r4
 801fc7c:	4649      	mov	r1, r9
 801fc7e:	4638      	mov	r0, r7
 801fc80:	47c0      	blx	r8
 801fc82:	3001      	adds	r0, #1
 801fc84:	d0e6      	beq.n	801fc54 <_printf_common+0xa4>
 801fc86:	3601      	adds	r6, #1
 801fc88:	e7d9      	b.n	801fc3e <_printf_common+0x8e>
	...

0801fc8c <_printf_i>:
 801fc8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fc90:	7e0f      	ldrb	r7, [r1, #24]
 801fc92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fc94:	2f78      	cmp	r7, #120	; 0x78
 801fc96:	4691      	mov	r9, r2
 801fc98:	4680      	mov	r8, r0
 801fc9a:	460c      	mov	r4, r1
 801fc9c:	469a      	mov	sl, r3
 801fc9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801fca2:	d807      	bhi.n	801fcb4 <_printf_i+0x28>
 801fca4:	2f62      	cmp	r7, #98	; 0x62
 801fca6:	d80a      	bhi.n	801fcbe <_printf_i+0x32>
 801fca8:	2f00      	cmp	r7, #0
 801fcaa:	f000 80d4 	beq.w	801fe56 <_printf_i+0x1ca>
 801fcae:	2f58      	cmp	r7, #88	; 0x58
 801fcb0:	f000 80c0 	beq.w	801fe34 <_printf_i+0x1a8>
 801fcb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fcb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fcbc:	e03a      	b.n	801fd34 <_printf_i+0xa8>
 801fcbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fcc2:	2b15      	cmp	r3, #21
 801fcc4:	d8f6      	bhi.n	801fcb4 <_printf_i+0x28>
 801fcc6:	a101      	add	r1, pc, #4	; (adr r1, 801fccc <_printf_i+0x40>)
 801fcc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fccc:	0801fd25 	.word	0x0801fd25
 801fcd0:	0801fd39 	.word	0x0801fd39
 801fcd4:	0801fcb5 	.word	0x0801fcb5
 801fcd8:	0801fcb5 	.word	0x0801fcb5
 801fcdc:	0801fcb5 	.word	0x0801fcb5
 801fce0:	0801fcb5 	.word	0x0801fcb5
 801fce4:	0801fd39 	.word	0x0801fd39
 801fce8:	0801fcb5 	.word	0x0801fcb5
 801fcec:	0801fcb5 	.word	0x0801fcb5
 801fcf0:	0801fcb5 	.word	0x0801fcb5
 801fcf4:	0801fcb5 	.word	0x0801fcb5
 801fcf8:	0801fe3d 	.word	0x0801fe3d
 801fcfc:	0801fd65 	.word	0x0801fd65
 801fd00:	0801fdf7 	.word	0x0801fdf7
 801fd04:	0801fcb5 	.word	0x0801fcb5
 801fd08:	0801fcb5 	.word	0x0801fcb5
 801fd0c:	0801fe5f 	.word	0x0801fe5f
 801fd10:	0801fcb5 	.word	0x0801fcb5
 801fd14:	0801fd65 	.word	0x0801fd65
 801fd18:	0801fcb5 	.word	0x0801fcb5
 801fd1c:	0801fcb5 	.word	0x0801fcb5
 801fd20:	0801fdff 	.word	0x0801fdff
 801fd24:	682b      	ldr	r3, [r5, #0]
 801fd26:	1d1a      	adds	r2, r3, #4
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	602a      	str	r2, [r5, #0]
 801fd2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fd30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fd34:	2301      	movs	r3, #1
 801fd36:	e09f      	b.n	801fe78 <_printf_i+0x1ec>
 801fd38:	6820      	ldr	r0, [r4, #0]
 801fd3a:	682b      	ldr	r3, [r5, #0]
 801fd3c:	0607      	lsls	r7, r0, #24
 801fd3e:	f103 0104 	add.w	r1, r3, #4
 801fd42:	6029      	str	r1, [r5, #0]
 801fd44:	d501      	bpl.n	801fd4a <_printf_i+0xbe>
 801fd46:	681e      	ldr	r6, [r3, #0]
 801fd48:	e003      	b.n	801fd52 <_printf_i+0xc6>
 801fd4a:	0646      	lsls	r6, r0, #25
 801fd4c:	d5fb      	bpl.n	801fd46 <_printf_i+0xba>
 801fd4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801fd52:	2e00      	cmp	r6, #0
 801fd54:	da03      	bge.n	801fd5e <_printf_i+0xd2>
 801fd56:	232d      	movs	r3, #45	; 0x2d
 801fd58:	4276      	negs	r6, r6
 801fd5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fd5e:	485a      	ldr	r0, [pc, #360]	; (801fec8 <_printf_i+0x23c>)
 801fd60:	230a      	movs	r3, #10
 801fd62:	e012      	b.n	801fd8a <_printf_i+0xfe>
 801fd64:	682b      	ldr	r3, [r5, #0]
 801fd66:	6820      	ldr	r0, [r4, #0]
 801fd68:	1d19      	adds	r1, r3, #4
 801fd6a:	6029      	str	r1, [r5, #0]
 801fd6c:	0605      	lsls	r5, r0, #24
 801fd6e:	d501      	bpl.n	801fd74 <_printf_i+0xe8>
 801fd70:	681e      	ldr	r6, [r3, #0]
 801fd72:	e002      	b.n	801fd7a <_printf_i+0xee>
 801fd74:	0641      	lsls	r1, r0, #25
 801fd76:	d5fb      	bpl.n	801fd70 <_printf_i+0xe4>
 801fd78:	881e      	ldrh	r6, [r3, #0]
 801fd7a:	4853      	ldr	r0, [pc, #332]	; (801fec8 <_printf_i+0x23c>)
 801fd7c:	2f6f      	cmp	r7, #111	; 0x6f
 801fd7e:	bf0c      	ite	eq
 801fd80:	2308      	moveq	r3, #8
 801fd82:	230a      	movne	r3, #10
 801fd84:	2100      	movs	r1, #0
 801fd86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fd8a:	6865      	ldr	r5, [r4, #4]
 801fd8c:	60a5      	str	r5, [r4, #8]
 801fd8e:	2d00      	cmp	r5, #0
 801fd90:	bfa2      	ittt	ge
 801fd92:	6821      	ldrge	r1, [r4, #0]
 801fd94:	f021 0104 	bicge.w	r1, r1, #4
 801fd98:	6021      	strge	r1, [r4, #0]
 801fd9a:	b90e      	cbnz	r6, 801fda0 <_printf_i+0x114>
 801fd9c:	2d00      	cmp	r5, #0
 801fd9e:	d04b      	beq.n	801fe38 <_printf_i+0x1ac>
 801fda0:	4615      	mov	r5, r2
 801fda2:	fbb6 f1f3 	udiv	r1, r6, r3
 801fda6:	fb03 6711 	mls	r7, r3, r1, r6
 801fdaa:	5dc7      	ldrb	r7, [r0, r7]
 801fdac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801fdb0:	4637      	mov	r7, r6
 801fdb2:	42bb      	cmp	r3, r7
 801fdb4:	460e      	mov	r6, r1
 801fdb6:	d9f4      	bls.n	801fda2 <_printf_i+0x116>
 801fdb8:	2b08      	cmp	r3, #8
 801fdba:	d10b      	bne.n	801fdd4 <_printf_i+0x148>
 801fdbc:	6823      	ldr	r3, [r4, #0]
 801fdbe:	07de      	lsls	r6, r3, #31
 801fdc0:	d508      	bpl.n	801fdd4 <_printf_i+0x148>
 801fdc2:	6923      	ldr	r3, [r4, #16]
 801fdc4:	6861      	ldr	r1, [r4, #4]
 801fdc6:	4299      	cmp	r1, r3
 801fdc8:	bfde      	ittt	le
 801fdca:	2330      	movle	r3, #48	; 0x30
 801fdcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fdd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fdd4:	1b52      	subs	r2, r2, r5
 801fdd6:	6122      	str	r2, [r4, #16]
 801fdd8:	f8cd a000 	str.w	sl, [sp]
 801fddc:	464b      	mov	r3, r9
 801fdde:	aa03      	add	r2, sp, #12
 801fde0:	4621      	mov	r1, r4
 801fde2:	4640      	mov	r0, r8
 801fde4:	f7ff fee4 	bl	801fbb0 <_printf_common>
 801fde8:	3001      	adds	r0, #1
 801fdea:	d14a      	bne.n	801fe82 <_printf_i+0x1f6>
 801fdec:	f04f 30ff 	mov.w	r0, #4294967295
 801fdf0:	b004      	add	sp, #16
 801fdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fdf6:	6823      	ldr	r3, [r4, #0]
 801fdf8:	f043 0320 	orr.w	r3, r3, #32
 801fdfc:	6023      	str	r3, [r4, #0]
 801fdfe:	4833      	ldr	r0, [pc, #204]	; (801fecc <_printf_i+0x240>)
 801fe00:	2778      	movs	r7, #120	; 0x78
 801fe02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fe06:	6823      	ldr	r3, [r4, #0]
 801fe08:	6829      	ldr	r1, [r5, #0]
 801fe0a:	061f      	lsls	r7, r3, #24
 801fe0c:	f851 6b04 	ldr.w	r6, [r1], #4
 801fe10:	d402      	bmi.n	801fe18 <_printf_i+0x18c>
 801fe12:	065f      	lsls	r7, r3, #25
 801fe14:	bf48      	it	mi
 801fe16:	b2b6      	uxthmi	r6, r6
 801fe18:	07df      	lsls	r7, r3, #31
 801fe1a:	bf48      	it	mi
 801fe1c:	f043 0320 	orrmi.w	r3, r3, #32
 801fe20:	6029      	str	r1, [r5, #0]
 801fe22:	bf48      	it	mi
 801fe24:	6023      	strmi	r3, [r4, #0]
 801fe26:	b91e      	cbnz	r6, 801fe30 <_printf_i+0x1a4>
 801fe28:	6823      	ldr	r3, [r4, #0]
 801fe2a:	f023 0320 	bic.w	r3, r3, #32
 801fe2e:	6023      	str	r3, [r4, #0]
 801fe30:	2310      	movs	r3, #16
 801fe32:	e7a7      	b.n	801fd84 <_printf_i+0xf8>
 801fe34:	4824      	ldr	r0, [pc, #144]	; (801fec8 <_printf_i+0x23c>)
 801fe36:	e7e4      	b.n	801fe02 <_printf_i+0x176>
 801fe38:	4615      	mov	r5, r2
 801fe3a:	e7bd      	b.n	801fdb8 <_printf_i+0x12c>
 801fe3c:	682b      	ldr	r3, [r5, #0]
 801fe3e:	6826      	ldr	r6, [r4, #0]
 801fe40:	6961      	ldr	r1, [r4, #20]
 801fe42:	1d18      	adds	r0, r3, #4
 801fe44:	6028      	str	r0, [r5, #0]
 801fe46:	0635      	lsls	r5, r6, #24
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	d501      	bpl.n	801fe50 <_printf_i+0x1c4>
 801fe4c:	6019      	str	r1, [r3, #0]
 801fe4e:	e002      	b.n	801fe56 <_printf_i+0x1ca>
 801fe50:	0670      	lsls	r0, r6, #25
 801fe52:	d5fb      	bpl.n	801fe4c <_printf_i+0x1c0>
 801fe54:	8019      	strh	r1, [r3, #0]
 801fe56:	2300      	movs	r3, #0
 801fe58:	6123      	str	r3, [r4, #16]
 801fe5a:	4615      	mov	r5, r2
 801fe5c:	e7bc      	b.n	801fdd8 <_printf_i+0x14c>
 801fe5e:	682b      	ldr	r3, [r5, #0]
 801fe60:	1d1a      	adds	r2, r3, #4
 801fe62:	602a      	str	r2, [r5, #0]
 801fe64:	681d      	ldr	r5, [r3, #0]
 801fe66:	6862      	ldr	r2, [r4, #4]
 801fe68:	2100      	movs	r1, #0
 801fe6a:	4628      	mov	r0, r5
 801fe6c:	f7e5 fe40 	bl	8005af0 <memchr>
 801fe70:	b108      	cbz	r0, 801fe76 <_printf_i+0x1ea>
 801fe72:	1b40      	subs	r0, r0, r5
 801fe74:	6060      	str	r0, [r4, #4]
 801fe76:	6863      	ldr	r3, [r4, #4]
 801fe78:	6123      	str	r3, [r4, #16]
 801fe7a:	2300      	movs	r3, #0
 801fe7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe80:	e7aa      	b.n	801fdd8 <_printf_i+0x14c>
 801fe82:	6923      	ldr	r3, [r4, #16]
 801fe84:	462a      	mov	r2, r5
 801fe86:	4649      	mov	r1, r9
 801fe88:	4640      	mov	r0, r8
 801fe8a:	47d0      	blx	sl
 801fe8c:	3001      	adds	r0, #1
 801fe8e:	d0ad      	beq.n	801fdec <_printf_i+0x160>
 801fe90:	6823      	ldr	r3, [r4, #0]
 801fe92:	079b      	lsls	r3, r3, #30
 801fe94:	d413      	bmi.n	801febe <_printf_i+0x232>
 801fe96:	68e0      	ldr	r0, [r4, #12]
 801fe98:	9b03      	ldr	r3, [sp, #12]
 801fe9a:	4298      	cmp	r0, r3
 801fe9c:	bfb8      	it	lt
 801fe9e:	4618      	movlt	r0, r3
 801fea0:	e7a6      	b.n	801fdf0 <_printf_i+0x164>
 801fea2:	2301      	movs	r3, #1
 801fea4:	4632      	mov	r2, r6
 801fea6:	4649      	mov	r1, r9
 801fea8:	4640      	mov	r0, r8
 801feaa:	47d0      	blx	sl
 801feac:	3001      	adds	r0, #1
 801feae:	d09d      	beq.n	801fdec <_printf_i+0x160>
 801feb0:	3501      	adds	r5, #1
 801feb2:	68e3      	ldr	r3, [r4, #12]
 801feb4:	9903      	ldr	r1, [sp, #12]
 801feb6:	1a5b      	subs	r3, r3, r1
 801feb8:	42ab      	cmp	r3, r5
 801feba:	dcf2      	bgt.n	801fea2 <_printf_i+0x216>
 801febc:	e7eb      	b.n	801fe96 <_printf_i+0x20a>
 801febe:	2500      	movs	r5, #0
 801fec0:	f104 0619 	add.w	r6, r4, #25
 801fec4:	e7f5      	b.n	801feb2 <_printf_i+0x226>
 801fec6:	bf00      	nop
 801fec8:	08020e96 	.word	0x08020e96
 801fecc:	08020ea7 	.word	0x08020ea7

0801fed0 <memmove>:
 801fed0:	4288      	cmp	r0, r1
 801fed2:	b510      	push	{r4, lr}
 801fed4:	eb01 0402 	add.w	r4, r1, r2
 801fed8:	d902      	bls.n	801fee0 <memmove+0x10>
 801feda:	4284      	cmp	r4, r0
 801fedc:	4623      	mov	r3, r4
 801fede:	d807      	bhi.n	801fef0 <memmove+0x20>
 801fee0:	1e43      	subs	r3, r0, #1
 801fee2:	42a1      	cmp	r1, r4
 801fee4:	d008      	beq.n	801fef8 <memmove+0x28>
 801fee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801feea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801feee:	e7f8      	b.n	801fee2 <memmove+0x12>
 801fef0:	4402      	add	r2, r0
 801fef2:	4601      	mov	r1, r0
 801fef4:	428a      	cmp	r2, r1
 801fef6:	d100      	bne.n	801fefa <memmove+0x2a>
 801fef8:	bd10      	pop	{r4, pc}
 801fefa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fefe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ff02:	e7f7      	b.n	801fef4 <memmove+0x24>

0801ff04 <cosf>:
 801ff04:	ee10 3a10 	vmov	r3, s0
 801ff08:	b507      	push	{r0, r1, r2, lr}
 801ff0a:	4a1e      	ldr	r2, [pc, #120]	; (801ff84 <cosf+0x80>)
 801ff0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ff10:	4293      	cmp	r3, r2
 801ff12:	dc06      	bgt.n	801ff22 <cosf+0x1e>
 801ff14:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801ff88 <cosf+0x84>
 801ff18:	b003      	add	sp, #12
 801ff1a:	f85d eb04 	ldr.w	lr, [sp], #4
 801ff1e:	f000 b835 	b.w	801ff8c <__kernel_cosf>
 801ff22:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ff26:	db04      	blt.n	801ff32 <cosf+0x2e>
 801ff28:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ff2c:	b003      	add	sp, #12
 801ff2e:	f85d fb04 	ldr.w	pc, [sp], #4
 801ff32:	4668      	mov	r0, sp
 801ff34:	f000 f8d0 	bl	80200d8 <__ieee754_rem_pio2f>
 801ff38:	f000 0003 	and.w	r0, r0, #3
 801ff3c:	2801      	cmp	r0, #1
 801ff3e:	d009      	beq.n	801ff54 <cosf+0x50>
 801ff40:	2802      	cmp	r0, #2
 801ff42:	d010      	beq.n	801ff66 <cosf+0x62>
 801ff44:	b9b0      	cbnz	r0, 801ff74 <cosf+0x70>
 801ff46:	eddd 0a01 	vldr	s1, [sp, #4]
 801ff4a:	ed9d 0a00 	vldr	s0, [sp]
 801ff4e:	f000 f81d 	bl	801ff8c <__kernel_cosf>
 801ff52:	e7eb      	b.n	801ff2c <cosf+0x28>
 801ff54:	eddd 0a01 	vldr	s1, [sp, #4]
 801ff58:	ed9d 0a00 	vldr	s0, [sp]
 801ff5c:	f000 f874 	bl	8020048 <__kernel_sinf>
 801ff60:	eeb1 0a40 	vneg.f32	s0, s0
 801ff64:	e7e2      	b.n	801ff2c <cosf+0x28>
 801ff66:	eddd 0a01 	vldr	s1, [sp, #4]
 801ff6a:	ed9d 0a00 	vldr	s0, [sp]
 801ff6e:	f000 f80d 	bl	801ff8c <__kernel_cosf>
 801ff72:	e7f5      	b.n	801ff60 <cosf+0x5c>
 801ff74:	eddd 0a01 	vldr	s1, [sp, #4]
 801ff78:	ed9d 0a00 	vldr	s0, [sp]
 801ff7c:	2001      	movs	r0, #1
 801ff7e:	f000 f863 	bl	8020048 <__kernel_sinf>
 801ff82:	e7d3      	b.n	801ff2c <cosf+0x28>
 801ff84:	3f490fd8 	.word	0x3f490fd8
 801ff88:	00000000 	.word	0x00000000

0801ff8c <__kernel_cosf>:
 801ff8c:	ee10 3a10 	vmov	r3, s0
 801ff90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ff94:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801ff98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ff9c:	da05      	bge.n	801ffaa <__kernel_cosf+0x1e>
 801ff9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801ffa2:	ee17 2a90 	vmov	r2, s15
 801ffa6:	2a00      	cmp	r2, #0
 801ffa8:	d03b      	beq.n	8020022 <__kernel_cosf+0x96>
 801ffaa:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ffae:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8020028 <__kernel_cosf+0x9c>
 801ffb2:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 802002c <__kernel_cosf+0xa0>
 801ffb6:	4a1e      	ldr	r2, [pc, #120]	; (8020030 <__kernel_cosf+0xa4>)
 801ffb8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ffbc:	4293      	cmp	r3, r2
 801ffbe:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8020034 <__kernel_cosf+0xa8>
 801ffc2:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ffc6:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8020038 <__kernel_cosf+0xac>
 801ffca:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ffce:	eddf 7a1b 	vldr	s15, [pc, #108]	; 802003c <__kernel_cosf+0xb0>
 801ffd2:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ffd6:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8020040 <__kernel_cosf+0xb4>
 801ffda:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ffde:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801ffe2:	ee26 6a07 	vmul.f32	s12, s12, s14
 801ffe6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ffea:	eee7 0a06 	vfma.f32	s1, s14, s12
 801ffee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801fff2:	dc04      	bgt.n	801fffe <__kernel_cosf+0x72>
 801fff4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801fff8:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801fffc:	4770      	bx	lr
 801fffe:	4a11      	ldr	r2, [pc, #68]	; (8020044 <__kernel_cosf+0xb8>)
 8020000:	4293      	cmp	r3, r2
 8020002:	bfda      	itte	le
 8020004:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8020008:	ee07 3a10 	vmovle	s14, r3
 802000c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8020010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020014:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8020018:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802001c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020020:	4770      	bx	lr
 8020022:	eeb0 0a66 	vmov.f32	s0, s13
 8020026:	4770      	bx	lr
 8020028:	ad47d74e 	.word	0xad47d74e
 802002c:	310f74f6 	.word	0x310f74f6
 8020030:	3e999999 	.word	0x3e999999
 8020034:	b493f27c 	.word	0xb493f27c
 8020038:	37d00d01 	.word	0x37d00d01
 802003c:	bab60b61 	.word	0xbab60b61
 8020040:	3d2aaaab 	.word	0x3d2aaaab
 8020044:	3f480000 	.word	0x3f480000

08020048 <__kernel_sinf>:
 8020048:	ee10 3a10 	vmov	r3, s0
 802004c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020050:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8020054:	da04      	bge.n	8020060 <__kernel_sinf+0x18>
 8020056:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802005a:	ee17 3a90 	vmov	r3, s15
 802005e:	b35b      	cbz	r3, 80200b8 <__kernel_sinf+0x70>
 8020060:	ee20 7a00 	vmul.f32	s14, s0, s0
 8020064:	eddf 7a15 	vldr	s15, [pc, #84]	; 80200bc <__kernel_sinf+0x74>
 8020068:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80200c0 <__kernel_sinf+0x78>
 802006c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020070:	eddf 7a14 	vldr	s15, [pc, #80]	; 80200c4 <__kernel_sinf+0x7c>
 8020074:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020078:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80200c8 <__kernel_sinf+0x80>
 802007c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020080:	eddf 7a12 	vldr	s15, [pc, #72]	; 80200cc <__kernel_sinf+0x84>
 8020084:	ee60 6a07 	vmul.f32	s13, s0, s14
 8020088:	eee6 7a07 	vfma.f32	s15, s12, s14
 802008c:	b930      	cbnz	r0, 802009c <__kernel_sinf+0x54>
 802008e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80200d0 <__kernel_sinf+0x88>
 8020092:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020096:	eea6 0a26 	vfma.f32	s0, s12, s13
 802009a:	4770      	bx	lr
 802009c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80200a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80200a4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80200a8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80200ac:	eddf 7a09 	vldr	s15, [pc, #36]	; 80200d4 <__kernel_sinf+0x8c>
 80200b0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80200b4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80200b8:	4770      	bx	lr
 80200ba:	bf00      	nop
 80200bc:	2f2ec9d3 	.word	0x2f2ec9d3
 80200c0:	b2d72f34 	.word	0xb2d72f34
 80200c4:	3638ef1b 	.word	0x3638ef1b
 80200c8:	b9500d01 	.word	0xb9500d01
 80200cc:	3c088889 	.word	0x3c088889
 80200d0:	be2aaaab 	.word	0xbe2aaaab
 80200d4:	3e2aaaab 	.word	0x3e2aaaab

080200d8 <__ieee754_rem_pio2f>:
 80200d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200da:	ee10 6a10 	vmov	r6, s0
 80200de:	4b86      	ldr	r3, [pc, #536]	; (80202f8 <__ieee754_rem_pio2f+0x220>)
 80200e0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80200e4:	429d      	cmp	r5, r3
 80200e6:	b087      	sub	sp, #28
 80200e8:	4604      	mov	r4, r0
 80200ea:	dc05      	bgt.n	80200f8 <__ieee754_rem_pio2f+0x20>
 80200ec:	2300      	movs	r3, #0
 80200ee:	ed80 0a00 	vstr	s0, [r0]
 80200f2:	6043      	str	r3, [r0, #4]
 80200f4:	2000      	movs	r0, #0
 80200f6:	e020      	b.n	802013a <__ieee754_rem_pio2f+0x62>
 80200f8:	4b80      	ldr	r3, [pc, #512]	; (80202fc <__ieee754_rem_pio2f+0x224>)
 80200fa:	429d      	cmp	r5, r3
 80200fc:	dc38      	bgt.n	8020170 <__ieee754_rem_pio2f+0x98>
 80200fe:	2e00      	cmp	r6, #0
 8020100:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8020300 <__ieee754_rem_pio2f+0x228>
 8020104:	4b7f      	ldr	r3, [pc, #508]	; (8020304 <__ieee754_rem_pio2f+0x22c>)
 8020106:	f025 050f 	bic.w	r5, r5, #15
 802010a:	dd18      	ble.n	802013e <__ieee754_rem_pio2f+0x66>
 802010c:	429d      	cmp	r5, r3
 802010e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8020112:	bf09      	itett	eq
 8020114:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8020308 <__ieee754_rem_pio2f+0x230>
 8020118:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 802030c <__ieee754_rem_pio2f+0x234>
 802011c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8020120:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8020310 <__ieee754_rem_pio2f+0x238>
 8020124:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8020128:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802012c:	edc0 6a00 	vstr	s13, [r0]
 8020130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020134:	edc0 7a01 	vstr	s15, [r0, #4]
 8020138:	2001      	movs	r0, #1
 802013a:	b007      	add	sp, #28
 802013c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802013e:	429d      	cmp	r5, r3
 8020140:	ee70 7a07 	vadd.f32	s15, s0, s14
 8020144:	bf09      	itett	eq
 8020146:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8020308 <__ieee754_rem_pio2f+0x230>
 802014a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 802030c <__ieee754_rem_pio2f+0x234>
 802014e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8020152:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8020310 <__ieee754_rem_pio2f+0x238>
 8020156:	ee77 6a87 	vadd.f32	s13, s15, s14
 802015a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802015e:	edc0 6a00 	vstr	s13, [r0]
 8020162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020166:	edc0 7a01 	vstr	s15, [r0, #4]
 802016a:	f04f 30ff 	mov.w	r0, #4294967295
 802016e:	e7e4      	b.n	802013a <__ieee754_rem_pio2f+0x62>
 8020170:	4b68      	ldr	r3, [pc, #416]	; (8020314 <__ieee754_rem_pio2f+0x23c>)
 8020172:	429d      	cmp	r5, r3
 8020174:	dc71      	bgt.n	802025a <__ieee754_rem_pio2f+0x182>
 8020176:	f000 f8db 	bl	8020330 <fabsf>
 802017a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8020318 <__ieee754_rem_pio2f+0x240>
 802017e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8020182:	eee0 7a07 	vfma.f32	s15, s0, s14
 8020186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802018a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802018e:	ee17 0a90 	vmov	r0, s15
 8020192:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8020300 <__ieee754_rem_pio2f+0x228>
 8020196:	eea7 0a67 	vfms.f32	s0, s14, s15
 802019a:	281f      	cmp	r0, #31
 802019c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802030c <__ieee754_rem_pio2f+0x234>
 80201a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80201a4:	eeb1 6a47 	vneg.f32	s12, s14
 80201a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80201ac:	ee16 2a90 	vmov	r2, s13
 80201b0:	dc1c      	bgt.n	80201ec <__ieee754_rem_pio2f+0x114>
 80201b2:	495a      	ldr	r1, [pc, #360]	; (802031c <__ieee754_rem_pio2f+0x244>)
 80201b4:	1e47      	subs	r7, r0, #1
 80201b6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80201ba:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80201be:	428b      	cmp	r3, r1
 80201c0:	d014      	beq.n	80201ec <__ieee754_rem_pio2f+0x114>
 80201c2:	6022      	str	r2, [r4, #0]
 80201c4:	ed94 7a00 	vldr	s14, [r4]
 80201c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80201cc:	2e00      	cmp	r6, #0
 80201ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80201d2:	ed84 0a01 	vstr	s0, [r4, #4]
 80201d6:	dab0      	bge.n	802013a <__ieee754_rem_pio2f+0x62>
 80201d8:	eeb1 7a47 	vneg.f32	s14, s14
 80201dc:	eeb1 0a40 	vneg.f32	s0, s0
 80201e0:	ed84 7a00 	vstr	s14, [r4]
 80201e4:	ed84 0a01 	vstr	s0, [r4, #4]
 80201e8:	4240      	negs	r0, r0
 80201ea:	e7a6      	b.n	802013a <__ieee754_rem_pio2f+0x62>
 80201ec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80201f0:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80201f4:	2908      	cmp	r1, #8
 80201f6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80201fa:	dde2      	ble.n	80201c2 <__ieee754_rem_pio2f+0xea>
 80201fc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8020308 <__ieee754_rem_pio2f+0x230>
 8020200:	eef0 6a40 	vmov.f32	s13, s0
 8020204:	eee6 6a25 	vfma.f32	s13, s12, s11
 8020208:	ee70 7a66 	vsub.f32	s15, s0, s13
 802020c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8020210:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8020310 <__ieee754_rem_pio2f+0x238>
 8020214:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8020218:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802021c:	ee15 2a90 	vmov	r2, s11
 8020220:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8020224:	1a5b      	subs	r3, r3, r1
 8020226:	2b19      	cmp	r3, #25
 8020228:	dc04      	bgt.n	8020234 <__ieee754_rem_pio2f+0x15c>
 802022a:	edc4 5a00 	vstr	s11, [r4]
 802022e:	eeb0 0a66 	vmov.f32	s0, s13
 8020232:	e7c7      	b.n	80201c4 <__ieee754_rem_pio2f+0xec>
 8020234:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8020320 <__ieee754_rem_pio2f+0x248>
 8020238:	eeb0 0a66 	vmov.f32	s0, s13
 802023c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8020240:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8020244:	eddf 6a37 	vldr	s13, [pc, #220]	; 8020324 <__ieee754_rem_pio2f+0x24c>
 8020248:	eee6 7a25 	vfma.f32	s15, s12, s11
 802024c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8020250:	ee30 7a67 	vsub.f32	s14, s0, s15
 8020254:	ed84 7a00 	vstr	s14, [r4]
 8020258:	e7b4      	b.n	80201c4 <__ieee754_rem_pio2f+0xec>
 802025a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802025e:	db06      	blt.n	802026e <__ieee754_rem_pio2f+0x196>
 8020260:	ee70 7a40 	vsub.f32	s15, s0, s0
 8020264:	edc0 7a01 	vstr	s15, [r0, #4]
 8020268:	edc0 7a00 	vstr	s15, [r0]
 802026c:	e742      	b.n	80200f4 <__ieee754_rem_pio2f+0x1c>
 802026e:	15ea      	asrs	r2, r5, #23
 8020270:	3a86      	subs	r2, #134	; 0x86
 8020272:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8020276:	ee07 3a90 	vmov	s15, r3
 802027a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802027e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8020328 <__ieee754_rem_pio2f+0x250>
 8020282:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020286:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802028a:	ed8d 7a03 	vstr	s14, [sp, #12]
 802028e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020292:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8020296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802029a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802029e:	ed8d 7a04 	vstr	s14, [sp, #16]
 80202a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80202a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80202aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202ae:	edcd 7a05 	vstr	s15, [sp, #20]
 80202b2:	d11e      	bne.n	80202f2 <__ieee754_rem_pio2f+0x21a>
 80202b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80202b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202bc:	bf14      	ite	ne
 80202be:	2302      	movne	r3, #2
 80202c0:	2301      	moveq	r3, #1
 80202c2:	491a      	ldr	r1, [pc, #104]	; (802032c <__ieee754_rem_pio2f+0x254>)
 80202c4:	9101      	str	r1, [sp, #4]
 80202c6:	2102      	movs	r1, #2
 80202c8:	9100      	str	r1, [sp, #0]
 80202ca:	a803      	add	r0, sp, #12
 80202cc:	4621      	mov	r1, r4
 80202ce:	f000 f837 	bl	8020340 <__kernel_rem_pio2f>
 80202d2:	2e00      	cmp	r6, #0
 80202d4:	f6bf af31 	bge.w	802013a <__ieee754_rem_pio2f+0x62>
 80202d8:	edd4 7a00 	vldr	s15, [r4]
 80202dc:	eef1 7a67 	vneg.f32	s15, s15
 80202e0:	edc4 7a00 	vstr	s15, [r4]
 80202e4:	edd4 7a01 	vldr	s15, [r4, #4]
 80202e8:	eef1 7a67 	vneg.f32	s15, s15
 80202ec:	edc4 7a01 	vstr	s15, [r4, #4]
 80202f0:	e77a      	b.n	80201e8 <__ieee754_rem_pio2f+0x110>
 80202f2:	2303      	movs	r3, #3
 80202f4:	e7e5      	b.n	80202c2 <__ieee754_rem_pio2f+0x1ea>
 80202f6:	bf00      	nop
 80202f8:	3f490fd8 	.word	0x3f490fd8
 80202fc:	4016cbe3 	.word	0x4016cbe3
 8020300:	3fc90f80 	.word	0x3fc90f80
 8020304:	3fc90fd0 	.word	0x3fc90fd0
 8020308:	37354400 	.word	0x37354400
 802030c:	37354443 	.word	0x37354443
 8020310:	2e85a308 	.word	0x2e85a308
 8020314:	43490f80 	.word	0x43490f80
 8020318:	3f22f984 	.word	0x3f22f984
 802031c:	08020eb8 	.word	0x08020eb8
 8020320:	2e85a300 	.word	0x2e85a300
 8020324:	248d3132 	.word	0x248d3132
 8020328:	43800000 	.word	0x43800000
 802032c:	08020f38 	.word	0x08020f38

08020330 <fabsf>:
 8020330:	ee10 3a10 	vmov	r3, s0
 8020334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020338:	ee00 3a10 	vmov	s0, r3
 802033c:	4770      	bx	lr
	...

08020340 <__kernel_rem_pio2f>:
 8020340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020344:	ed2d 8b04 	vpush	{d8-d9}
 8020348:	b0d9      	sub	sp, #356	; 0x164
 802034a:	4688      	mov	r8, r1
 802034c:	9002      	str	r0, [sp, #8]
 802034e:	49b8      	ldr	r1, [pc, #736]	; (8020630 <__kernel_rem_pio2f+0x2f0>)
 8020350:	9866      	ldr	r0, [sp, #408]	; 0x198
 8020352:	9301      	str	r3, [sp, #4]
 8020354:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8020358:	9901      	ldr	r1, [sp, #4]
 802035a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 802035c:	f101 3bff 	add.w	fp, r1, #4294967295
 8020360:	1d11      	adds	r1, r2, #4
 8020362:	db25      	blt.n	80203b0 <__kernel_rem_pio2f+0x70>
 8020364:	1ed0      	subs	r0, r2, #3
 8020366:	bf48      	it	mi
 8020368:	1d10      	addmi	r0, r2, #4
 802036a:	10c0      	asrs	r0, r0, #3
 802036c:	1c45      	adds	r5, r0, #1
 802036e:	00e9      	lsls	r1, r5, #3
 8020370:	eba0 070b 	sub.w	r7, r0, fp
 8020374:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8020640 <__kernel_rem_pio2f+0x300>
 8020378:	9103      	str	r1, [sp, #12]
 802037a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802037e:	eb0a 0c0b 	add.w	ip, sl, fp
 8020382:	ae1c      	add	r6, sp, #112	; 0x70
 8020384:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8020388:	2400      	movs	r4, #0
 802038a:	4564      	cmp	r4, ip
 802038c:	dd12      	ble.n	80203b4 <__kernel_rem_pio2f+0x74>
 802038e:	9901      	ldr	r1, [sp, #4]
 8020390:	ac1c      	add	r4, sp, #112	; 0x70
 8020392:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020396:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 802039a:	f04f 0c00 	mov.w	ip, #0
 802039e:	45d4      	cmp	ip, sl
 80203a0:	dc27      	bgt.n	80203f2 <__kernel_rem_pio2f+0xb2>
 80203a2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80203a6:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8020640 <__kernel_rem_pio2f+0x300>
 80203aa:	4627      	mov	r7, r4
 80203ac:	2600      	movs	r6, #0
 80203ae:	e016      	b.n	80203de <__kernel_rem_pio2f+0x9e>
 80203b0:	2000      	movs	r0, #0
 80203b2:	e7db      	b.n	802036c <__kernel_rem_pio2f+0x2c>
 80203b4:	42e7      	cmn	r7, r4
 80203b6:	bf5d      	ittte	pl
 80203b8:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80203bc:	ee07 1a90 	vmovpl	s15, r1
 80203c0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80203c4:	eef0 7a47 	vmovmi.f32	s15, s14
 80203c8:	ece6 7a01 	vstmia	r6!, {s15}
 80203cc:	3401      	adds	r4, #1
 80203ce:	e7dc      	b.n	802038a <__kernel_rem_pio2f+0x4a>
 80203d0:	ecfe 6a01 	vldmia	lr!, {s13}
 80203d4:	ed97 7a00 	vldr	s14, [r7]
 80203d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80203dc:	3601      	adds	r6, #1
 80203de:	455e      	cmp	r6, fp
 80203e0:	f1a7 0704 	sub.w	r7, r7, #4
 80203e4:	ddf4      	ble.n	80203d0 <__kernel_rem_pio2f+0x90>
 80203e6:	ece9 7a01 	vstmia	r9!, {s15}
 80203ea:	f10c 0c01 	add.w	ip, ip, #1
 80203ee:	3404      	adds	r4, #4
 80203f0:	e7d5      	b.n	802039e <__kernel_rem_pio2f+0x5e>
 80203f2:	a908      	add	r1, sp, #32
 80203f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80203f8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80203fc:	eddf 8a8f 	vldr	s17, [pc, #572]	; 802063c <__kernel_rem_pio2f+0x2fc>
 8020400:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8020638 <__kernel_rem_pio2f+0x2f8>
 8020404:	9105      	str	r1, [sp, #20]
 8020406:	9304      	str	r3, [sp, #16]
 8020408:	4656      	mov	r6, sl
 802040a:	00b3      	lsls	r3, r6, #2
 802040c:	9306      	str	r3, [sp, #24]
 802040e:	ab58      	add	r3, sp, #352	; 0x160
 8020410:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8020414:	ac08      	add	r4, sp, #32
 8020416:	ab44      	add	r3, sp, #272	; 0x110
 8020418:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 802041c:	46a4      	mov	ip, r4
 802041e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8020422:	4637      	mov	r7, r6
 8020424:	2f00      	cmp	r7, #0
 8020426:	f1a0 0004 	sub.w	r0, r0, #4
 802042a:	dc4a      	bgt.n	80204c2 <__kernel_rem_pio2f+0x182>
 802042c:	4628      	mov	r0, r5
 802042e:	9207      	str	r2, [sp, #28]
 8020430:	f000 f9f8 	bl	8020824 <scalbnf>
 8020434:	eeb0 8a40 	vmov.f32	s16, s0
 8020438:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802043c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8020440:	f000 fa56 	bl	80208f0 <floorf>
 8020444:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8020448:	eea0 8a67 	vfms.f32	s16, s0, s15
 802044c:	2d00      	cmp	r5, #0
 802044e:	9a07      	ldr	r2, [sp, #28]
 8020450:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8020454:	ee17 9a90 	vmov	r9, s15
 8020458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802045c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8020460:	dd41      	ble.n	80204e6 <__kernel_rem_pio2f+0x1a6>
 8020462:	f106 3cff 	add.w	ip, r6, #4294967295
 8020466:	ab08      	add	r3, sp, #32
 8020468:	f1c5 0e08 	rsb	lr, r5, #8
 802046c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8020470:	fa47 f00e 	asr.w	r0, r7, lr
 8020474:	4481      	add	r9, r0
 8020476:	fa00 f00e 	lsl.w	r0, r0, lr
 802047a:	1a3f      	subs	r7, r7, r0
 802047c:	f1c5 0007 	rsb	r0, r5, #7
 8020480:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8020484:	4107      	asrs	r7, r0
 8020486:	2f00      	cmp	r7, #0
 8020488:	dd3c      	ble.n	8020504 <__kernel_rem_pio2f+0x1c4>
 802048a:	f04f 0e00 	mov.w	lr, #0
 802048e:	f109 0901 	add.w	r9, r9, #1
 8020492:	4671      	mov	r1, lr
 8020494:	4576      	cmp	r6, lr
 8020496:	dc67      	bgt.n	8020568 <__kernel_rem_pio2f+0x228>
 8020498:	2d00      	cmp	r5, #0
 802049a:	dd03      	ble.n	80204a4 <__kernel_rem_pio2f+0x164>
 802049c:	2d01      	cmp	r5, #1
 802049e:	d074      	beq.n	802058a <__kernel_rem_pio2f+0x24a>
 80204a0:	2d02      	cmp	r5, #2
 80204a2:	d07b      	beq.n	802059c <__kernel_rem_pio2f+0x25c>
 80204a4:	2f02      	cmp	r7, #2
 80204a6:	d12d      	bne.n	8020504 <__kernel_rem_pio2f+0x1c4>
 80204a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80204ac:	ee30 8a48 	vsub.f32	s16, s0, s16
 80204b0:	b341      	cbz	r1, 8020504 <__kernel_rem_pio2f+0x1c4>
 80204b2:	4628      	mov	r0, r5
 80204b4:	9207      	str	r2, [sp, #28]
 80204b6:	f000 f9b5 	bl	8020824 <scalbnf>
 80204ba:	9a07      	ldr	r2, [sp, #28]
 80204bc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80204c0:	e020      	b.n	8020504 <__kernel_rem_pio2f+0x1c4>
 80204c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80204c6:	3f01      	subs	r7, #1
 80204c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80204cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80204d0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80204d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80204d8:	ecac 0a01 	vstmia	ip!, {s0}
 80204dc:	ed90 0a00 	vldr	s0, [r0]
 80204e0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80204e4:	e79e      	b.n	8020424 <__kernel_rem_pio2f+0xe4>
 80204e6:	d105      	bne.n	80204f4 <__kernel_rem_pio2f+0x1b4>
 80204e8:	1e70      	subs	r0, r6, #1
 80204ea:	ab08      	add	r3, sp, #32
 80204ec:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80204f0:	11ff      	asrs	r7, r7, #7
 80204f2:	e7c8      	b.n	8020486 <__kernel_rem_pio2f+0x146>
 80204f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80204f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80204fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020500:	da30      	bge.n	8020564 <__kernel_rem_pio2f+0x224>
 8020502:	2700      	movs	r7, #0
 8020504:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8020508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802050c:	f040 809a 	bne.w	8020644 <__kernel_rem_pio2f+0x304>
 8020510:	1e74      	subs	r4, r6, #1
 8020512:	46a4      	mov	ip, r4
 8020514:	2100      	movs	r1, #0
 8020516:	45d4      	cmp	ip, sl
 8020518:	da47      	bge.n	80205aa <__kernel_rem_pio2f+0x26a>
 802051a:	2900      	cmp	r1, #0
 802051c:	d063      	beq.n	80205e6 <__kernel_rem_pio2f+0x2a6>
 802051e:	ab08      	add	r3, sp, #32
 8020520:	3d08      	subs	r5, #8
 8020522:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8020526:	2b00      	cmp	r3, #0
 8020528:	d07f      	beq.n	802062a <__kernel_rem_pio2f+0x2ea>
 802052a:	4628      	mov	r0, r5
 802052c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8020530:	f000 f978 	bl	8020824 <scalbnf>
 8020534:	1c63      	adds	r3, r4, #1
 8020536:	aa44      	add	r2, sp, #272	; 0x110
 8020538:	ed9f 7a40 	vldr	s14, [pc, #256]	; 802063c <__kernel_rem_pio2f+0x2fc>
 802053c:	0099      	lsls	r1, r3, #2
 802053e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8020542:	4623      	mov	r3, r4
 8020544:	2b00      	cmp	r3, #0
 8020546:	f280 80ad 	bge.w	80206a4 <__kernel_rem_pio2f+0x364>
 802054a:	4623      	mov	r3, r4
 802054c:	2b00      	cmp	r3, #0
 802054e:	f2c0 80cb 	blt.w	80206e8 <__kernel_rem_pio2f+0x3a8>
 8020552:	aa44      	add	r2, sp, #272	; 0x110
 8020554:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8020558:	4e36      	ldr	r6, [pc, #216]	; (8020634 <__kernel_rem_pio2f+0x2f4>)
 802055a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8020640 <__kernel_rem_pio2f+0x300>
 802055e:	2000      	movs	r0, #0
 8020560:	1ae2      	subs	r2, r4, r3
 8020562:	e0b6      	b.n	80206d2 <__kernel_rem_pio2f+0x392>
 8020564:	2702      	movs	r7, #2
 8020566:	e790      	b.n	802048a <__kernel_rem_pio2f+0x14a>
 8020568:	6820      	ldr	r0, [r4, #0]
 802056a:	b949      	cbnz	r1, 8020580 <__kernel_rem_pio2f+0x240>
 802056c:	b118      	cbz	r0, 8020576 <__kernel_rem_pio2f+0x236>
 802056e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8020572:	6020      	str	r0, [r4, #0]
 8020574:	2001      	movs	r0, #1
 8020576:	f10e 0e01 	add.w	lr, lr, #1
 802057a:	3404      	adds	r4, #4
 802057c:	4601      	mov	r1, r0
 802057e:	e789      	b.n	8020494 <__kernel_rem_pio2f+0x154>
 8020580:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8020584:	6020      	str	r0, [r4, #0]
 8020586:	4608      	mov	r0, r1
 8020588:	e7f5      	b.n	8020576 <__kernel_rem_pio2f+0x236>
 802058a:	1e74      	subs	r4, r6, #1
 802058c:	ab08      	add	r3, sp, #32
 802058e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020592:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8020596:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802059a:	e783      	b.n	80204a4 <__kernel_rem_pio2f+0x164>
 802059c:	1e74      	subs	r4, r6, #1
 802059e:	ab08      	add	r3, sp, #32
 80205a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80205a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80205a8:	e7f5      	b.n	8020596 <__kernel_rem_pio2f+0x256>
 80205aa:	ab08      	add	r3, sp, #32
 80205ac:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80205b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80205b4:	4301      	orrs	r1, r0
 80205b6:	e7ae      	b.n	8020516 <__kernel_rem_pio2f+0x1d6>
 80205b8:	3001      	adds	r0, #1
 80205ba:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80205be:	2f00      	cmp	r7, #0
 80205c0:	d0fa      	beq.n	80205b8 <__kernel_rem_pio2f+0x278>
 80205c2:	9b06      	ldr	r3, [sp, #24]
 80205c4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80205c8:	eb0d 0403 	add.w	r4, sp, r3
 80205cc:	9b01      	ldr	r3, [sp, #4]
 80205ce:	18f7      	adds	r7, r6, r3
 80205d0:	ab1c      	add	r3, sp, #112	; 0x70
 80205d2:	f106 0c01 	add.w	ip, r6, #1
 80205d6:	3c4c      	subs	r4, #76	; 0x4c
 80205d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80205dc:	4430      	add	r0, r6
 80205de:	4560      	cmp	r0, ip
 80205e0:	da04      	bge.n	80205ec <__kernel_rem_pio2f+0x2ac>
 80205e2:	4606      	mov	r6, r0
 80205e4:	e711      	b.n	802040a <__kernel_rem_pio2f+0xca>
 80205e6:	9c05      	ldr	r4, [sp, #20]
 80205e8:	2001      	movs	r0, #1
 80205ea:	e7e6      	b.n	80205ba <__kernel_rem_pio2f+0x27a>
 80205ec:	9b04      	ldr	r3, [sp, #16]
 80205ee:	f8dd e008 	ldr.w	lr, [sp, #8]
 80205f2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80205f6:	9306      	str	r3, [sp, #24]
 80205f8:	ee07 3a90 	vmov	s15, r3
 80205fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020600:	2600      	movs	r6, #0
 8020602:	ece7 7a01 	vstmia	r7!, {s15}
 8020606:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8020640 <__kernel_rem_pio2f+0x300>
 802060a:	46b9      	mov	r9, r7
 802060c:	455e      	cmp	r6, fp
 802060e:	dd04      	ble.n	802061a <__kernel_rem_pio2f+0x2da>
 8020610:	ece4 7a01 	vstmia	r4!, {s15}
 8020614:	f10c 0c01 	add.w	ip, ip, #1
 8020618:	e7e1      	b.n	80205de <__kernel_rem_pio2f+0x29e>
 802061a:	ecfe 6a01 	vldmia	lr!, {s13}
 802061e:	ed39 7a01 	vldmdb	r9!, {s14}
 8020622:	3601      	adds	r6, #1
 8020624:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020628:	e7f0      	b.n	802060c <__kernel_rem_pio2f+0x2cc>
 802062a:	3c01      	subs	r4, #1
 802062c:	e777      	b.n	802051e <__kernel_rem_pio2f+0x1de>
 802062e:	bf00      	nop
 8020630:	0802127c 	.word	0x0802127c
 8020634:	08021250 	.word	0x08021250
 8020638:	43800000 	.word	0x43800000
 802063c:	3b800000 	.word	0x3b800000
 8020640:	00000000 	.word	0x00000000
 8020644:	9b03      	ldr	r3, [sp, #12]
 8020646:	eeb0 0a48 	vmov.f32	s0, s16
 802064a:	1a98      	subs	r0, r3, r2
 802064c:	f000 f8ea 	bl	8020824 <scalbnf>
 8020650:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8020638 <__kernel_rem_pio2f+0x2f8>
 8020654:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8020658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802065c:	db19      	blt.n	8020692 <__kernel_rem_pio2f+0x352>
 802065e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802063c <__kernel_rem_pio2f+0x2fc>
 8020662:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020666:	aa08      	add	r2, sp, #32
 8020668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802066c:	1c74      	adds	r4, r6, #1
 802066e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020672:	3508      	adds	r5, #8
 8020674:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8020678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802067c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020680:	ee10 3a10 	vmov	r3, s0
 8020684:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8020688:	ee17 3a90 	vmov	r3, s15
 802068c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8020690:	e74b      	b.n	802052a <__kernel_rem_pio2f+0x1ea>
 8020692:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020696:	aa08      	add	r2, sp, #32
 8020698:	ee10 3a10 	vmov	r3, s0
 802069c:	4634      	mov	r4, r6
 802069e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80206a2:	e742      	b.n	802052a <__kernel_rem_pio2f+0x1ea>
 80206a4:	a808      	add	r0, sp, #32
 80206a6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80206aa:	9001      	str	r0, [sp, #4]
 80206ac:	ee07 0a90 	vmov	s15, r0
 80206b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80206b4:	3b01      	subs	r3, #1
 80206b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80206ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 80206be:	ed62 7a01 	vstmdb	r2!, {s15}
 80206c2:	e73f      	b.n	8020544 <__kernel_rem_pio2f+0x204>
 80206c4:	ecf6 6a01 	vldmia	r6!, {s13}
 80206c8:	ecb5 7a01 	vldmia	r5!, {s14}
 80206cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80206d0:	3001      	adds	r0, #1
 80206d2:	4550      	cmp	r0, sl
 80206d4:	dc01      	bgt.n	80206da <__kernel_rem_pio2f+0x39a>
 80206d6:	4290      	cmp	r0, r2
 80206d8:	ddf4      	ble.n	80206c4 <__kernel_rem_pio2f+0x384>
 80206da:	a858      	add	r0, sp, #352	; 0x160
 80206dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80206e0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80206e4:	3b01      	subs	r3, #1
 80206e6:	e731      	b.n	802054c <__kernel_rem_pio2f+0x20c>
 80206e8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80206ea:	2b02      	cmp	r3, #2
 80206ec:	dc09      	bgt.n	8020702 <__kernel_rem_pio2f+0x3c2>
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	dc2b      	bgt.n	802074a <__kernel_rem_pio2f+0x40a>
 80206f2:	d044      	beq.n	802077e <__kernel_rem_pio2f+0x43e>
 80206f4:	f009 0007 	and.w	r0, r9, #7
 80206f8:	b059      	add	sp, #356	; 0x164
 80206fa:	ecbd 8b04 	vpop	{d8-d9}
 80206fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020702:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8020704:	2b03      	cmp	r3, #3
 8020706:	d1f5      	bne.n	80206f4 <__kernel_rem_pio2f+0x3b4>
 8020708:	aa30      	add	r2, sp, #192	; 0xc0
 802070a:	1f0b      	subs	r3, r1, #4
 802070c:	4413      	add	r3, r2
 802070e:	461a      	mov	r2, r3
 8020710:	4620      	mov	r0, r4
 8020712:	2800      	cmp	r0, #0
 8020714:	f1a2 0204 	sub.w	r2, r2, #4
 8020718:	dc52      	bgt.n	80207c0 <__kernel_rem_pio2f+0x480>
 802071a:	4622      	mov	r2, r4
 802071c:	2a01      	cmp	r2, #1
 802071e:	f1a3 0304 	sub.w	r3, r3, #4
 8020722:	dc5d      	bgt.n	80207e0 <__kernel_rem_pio2f+0x4a0>
 8020724:	ab30      	add	r3, sp, #192	; 0xc0
 8020726:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8020640 <__kernel_rem_pio2f+0x300>
 802072a:	440b      	add	r3, r1
 802072c:	2c01      	cmp	r4, #1
 802072e:	dc67      	bgt.n	8020800 <__kernel_rem_pio2f+0x4c0>
 8020730:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8020734:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8020738:	2f00      	cmp	r7, #0
 802073a:	d167      	bne.n	802080c <__kernel_rem_pio2f+0x4cc>
 802073c:	edc8 6a00 	vstr	s13, [r8]
 8020740:	ed88 7a01 	vstr	s14, [r8, #4]
 8020744:	edc8 7a02 	vstr	s15, [r8, #8]
 8020748:	e7d4      	b.n	80206f4 <__kernel_rem_pio2f+0x3b4>
 802074a:	ab30      	add	r3, sp, #192	; 0xc0
 802074c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8020640 <__kernel_rem_pio2f+0x300>
 8020750:	440b      	add	r3, r1
 8020752:	4622      	mov	r2, r4
 8020754:	2a00      	cmp	r2, #0
 8020756:	da24      	bge.n	80207a2 <__kernel_rem_pio2f+0x462>
 8020758:	b34f      	cbz	r7, 80207ae <__kernel_rem_pio2f+0x46e>
 802075a:	eef1 7a47 	vneg.f32	s15, s14
 802075e:	edc8 7a00 	vstr	s15, [r8]
 8020762:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8020766:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802076a:	aa31      	add	r2, sp, #196	; 0xc4
 802076c:	2301      	movs	r3, #1
 802076e:	429c      	cmp	r4, r3
 8020770:	da20      	bge.n	80207b4 <__kernel_rem_pio2f+0x474>
 8020772:	b10f      	cbz	r7, 8020778 <__kernel_rem_pio2f+0x438>
 8020774:	eef1 7a67 	vneg.f32	s15, s15
 8020778:	edc8 7a01 	vstr	s15, [r8, #4]
 802077c:	e7ba      	b.n	80206f4 <__kernel_rem_pio2f+0x3b4>
 802077e:	ab30      	add	r3, sp, #192	; 0xc0
 8020780:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8020640 <__kernel_rem_pio2f+0x300>
 8020784:	440b      	add	r3, r1
 8020786:	2c00      	cmp	r4, #0
 8020788:	da05      	bge.n	8020796 <__kernel_rem_pio2f+0x456>
 802078a:	b10f      	cbz	r7, 8020790 <__kernel_rem_pio2f+0x450>
 802078c:	eef1 7a67 	vneg.f32	s15, s15
 8020790:	edc8 7a00 	vstr	s15, [r8]
 8020794:	e7ae      	b.n	80206f4 <__kernel_rem_pio2f+0x3b4>
 8020796:	ed33 7a01 	vldmdb	r3!, {s14}
 802079a:	3c01      	subs	r4, #1
 802079c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80207a0:	e7f1      	b.n	8020786 <__kernel_rem_pio2f+0x446>
 80207a2:	ed73 7a01 	vldmdb	r3!, {s15}
 80207a6:	3a01      	subs	r2, #1
 80207a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80207ac:	e7d2      	b.n	8020754 <__kernel_rem_pio2f+0x414>
 80207ae:	eef0 7a47 	vmov.f32	s15, s14
 80207b2:	e7d4      	b.n	802075e <__kernel_rem_pio2f+0x41e>
 80207b4:	ecb2 7a01 	vldmia	r2!, {s14}
 80207b8:	3301      	adds	r3, #1
 80207ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80207be:	e7d6      	b.n	802076e <__kernel_rem_pio2f+0x42e>
 80207c0:	edd2 7a00 	vldr	s15, [r2]
 80207c4:	edd2 6a01 	vldr	s13, [r2, #4]
 80207c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80207cc:	3801      	subs	r0, #1
 80207ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80207d2:	ed82 7a00 	vstr	s14, [r2]
 80207d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80207da:	edc2 7a01 	vstr	s15, [r2, #4]
 80207de:	e798      	b.n	8020712 <__kernel_rem_pio2f+0x3d2>
 80207e0:	edd3 7a00 	vldr	s15, [r3]
 80207e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80207e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80207ec:	3a01      	subs	r2, #1
 80207ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80207f2:	ed83 7a00 	vstr	s14, [r3]
 80207f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80207fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80207fe:	e78d      	b.n	802071c <__kernel_rem_pio2f+0x3dc>
 8020800:	ed33 7a01 	vldmdb	r3!, {s14}
 8020804:	3c01      	subs	r4, #1
 8020806:	ee77 7a87 	vadd.f32	s15, s15, s14
 802080a:	e78f      	b.n	802072c <__kernel_rem_pio2f+0x3ec>
 802080c:	eef1 6a66 	vneg.f32	s13, s13
 8020810:	eeb1 7a47 	vneg.f32	s14, s14
 8020814:	edc8 6a00 	vstr	s13, [r8]
 8020818:	ed88 7a01 	vstr	s14, [r8, #4]
 802081c:	eef1 7a67 	vneg.f32	s15, s15
 8020820:	e790      	b.n	8020744 <__kernel_rem_pio2f+0x404>
 8020822:	bf00      	nop

08020824 <scalbnf>:
 8020824:	ee10 3a10 	vmov	r3, s0
 8020828:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802082c:	d02b      	beq.n	8020886 <scalbnf+0x62>
 802082e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8020832:	d302      	bcc.n	802083a <scalbnf+0x16>
 8020834:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020838:	4770      	bx	lr
 802083a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802083e:	d123      	bne.n	8020888 <scalbnf+0x64>
 8020840:	4b24      	ldr	r3, [pc, #144]	; (80208d4 <scalbnf+0xb0>)
 8020842:	eddf 7a25 	vldr	s15, [pc, #148]	; 80208d8 <scalbnf+0xb4>
 8020846:	4298      	cmp	r0, r3
 8020848:	ee20 0a27 	vmul.f32	s0, s0, s15
 802084c:	db17      	blt.n	802087e <scalbnf+0x5a>
 802084e:	ee10 3a10 	vmov	r3, s0
 8020852:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8020856:	3a19      	subs	r2, #25
 8020858:	f24c 3150 	movw	r1, #50000	; 0xc350
 802085c:	4288      	cmp	r0, r1
 802085e:	dd15      	ble.n	802088c <scalbnf+0x68>
 8020860:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80208dc <scalbnf+0xb8>
 8020864:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80208e0 <scalbnf+0xbc>
 8020868:	ee10 3a10 	vmov	r3, s0
 802086c:	eeb0 7a67 	vmov.f32	s14, s15
 8020870:	2b00      	cmp	r3, #0
 8020872:	bfb8      	it	lt
 8020874:	eef0 7a66 	vmovlt.f32	s15, s13
 8020878:	ee27 0a87 	vmul.f32	s0, s15, s14
 802087c:	4770      	bx	lr
 802087e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80208e4 <scalbnf+0xc0>
 8020882:	ee27 0a80 	vmul.f32	s0, s15, s0
 8020886:	4770      	bx	lr
 8020888:	0dd2      	lsrs	r2, r2, #23
 802088a:	e7e5      	b.n	8020858 <scalbnf+0x34>
 802088c:	4410      	add	r0, r2
 802088e:	28fe      	cmp	r0, #254	; 0xfe
 8020890:	dce6      	bgt.n	8020860 <scalbnf+0x3c>
 8020892:	2800      	cmp	r0, #0
 8020894:	dd06      	ble.n	80208a4 <scalbnf+0x80>
 8020896:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802089a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802089e:	ee00 3a10 	vmov	s0, r3
 80208a2:	4770      	bx	lr
 80208a4:	f110 0f16 	cmn.w	r0, #22
 80208a8:	da09      	bge.n	80208be <scalbnf+0x9a>
 80208aa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80208e4 <scalbnf+0xc0>
 80208ae:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80208e8 <scalbnf+0xc4>
 80208b2:	ee10 3a10 	vmov	r3, s0
 80208b6:	eeb0 7a67 	vmov.f32	s14, s15
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	e7d9      	b.n	8020872 <scalbnf+0x4e>
 80208be:	3019      	adds	r0, #25
 80208c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80208c4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80208c8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80208ec <scalbnf+0xc8>
 80208cc:	ee07 3a90 	vmov	s15, r3
 80208d0:	e7d7      	b.n	8020882 <scalbnf+0x5e>
 80208d2:	bf00      	nop
 80208d4:	ffff3cb0 	.word	0xffff3cb0
 80208d8:	4c000000 	.word	0x4c000000
 80208dc:	7149f2ca 	.word	0x7149f2ca
 80208e0:	f149f2ca 	.word	0xf149f2ca
 80208e4:	0da24260 	.word	0x0da24260
 80208e8:	8da24260 	.word	0x8da24260
 80208ec:	33000000 	.word	0x33000000

080208f0 <floorf>:
 80208f0:	ee10 3a10 	vmov	r3, s0
 80208f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80208f8:	3a7f      	subs	r2, #127	; 0x7f
 80208fa:	2a16      	cmp	r2, #22
 80208fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020900:	dc2a      	bgt.n	8020958 <floorf+0x68>
 8020902:	2a00      	cmp	r2, #0
 8020904:	da11      	bge.n	802092a <floorf+0x3a>
 8020906:	eddf 7a18 	vldr	s15, [pc, #96]	; 8020968 <floorf+0x78>
 802090a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802090e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020916:	dd05      	ble.n	8020924 <floorf+0x34>
 8020918:	2b00      	cmp	r3, #0
 802091a:	da23      	bge.n	8020964 <floorf+0x74>
 802091c:	4a13      	ldr	r2, [pc, #76]	; (802096c <floorf+0x7c>)
 802091e:	2900      	cmp	r1, #0
 8020920:	bf18      	it	ne
 8020922:	4613      	movne	r3, r2
 8020924:	ee00 3a10 	vmov	s0, r3
 8020928:	4770      	bx	lr
 802092a:	4911      	ldr	r1, [pc, #68]	; (8020970 <floorf+0x80>)
 802092c:	4111      	asrs	r1, r2
 802092e:	420b      	tst	r3, r1
 8020930:	d0fa      	beq.n	8020928 <floorf+0x38>
 8020932:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8020968 <floorf+0x78>
 8020936:	ee30 0a27 	vadd.f32	s0, s0, s15
 802093a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020942:	ddef      	ble.n	8020924 <floorf+0x34>
 8020944:	2b00      	cmp	r3, #0
 8020946:	bfbe      	ittt	lt
 8020948:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802094c:	fa40 f202 	asrlt.w	r2, r0, r2
 8020950:	189b      	addlt	r3, r3, r2
 8020952:	ea23 0301 	bic.w	r3, r3, r1
 8020956:	e7e5      	b.n	8020924 <floorf+0x34>
 8020958:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802095c:	d3e4      	bcc.n	8020928 <floorf+0x38>
 802095e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020962:	4770      	bx	lr
 8020964:	2300      	movs	r3, #0
 8020966:	e7dd      	b.n	8020924 <floorf+0x34>
 8020968:	7149f2ca 	.word	0x7149f2ca
 802096c:	bf800000 	.word	0xbf800000
 8020970:	007fffff 	.word	0x007fffff

08020974 <_init>:
 8020974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020976:	bf00      	nop
 8020978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802097a:	bc08      	pop	{r3}
 802097c:	469e      	mov	lr, r3
 802097e:	4770      	bx	lr

08020980 <_fini>:
 8020980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020982:	bf00      	nop
 8020984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020986:	bc08      	pop	{r3}
 8020988:	469e      	mov	lr, r3
 802098a:	4770      	bx	lr
